
LwIP_HTTP_Server_Socket_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184b8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000146f4  08018788  08018788  00019788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ce7c  0802ce7c  0002e1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0802ce7c  0802ce7c  0002de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ce84  0802ce84  0002e1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ce84  0802ce84  0002de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ce88  0802ce88  0002de88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0802ce8c  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010124  200001f8  0802d084  0002e1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00002004  2001031c  0802d084  0002e31c  2**0
                  ALLOC
 11 .lwip_sec     00003dc3  30000000  0802d084  0002f000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002e1f8  2**0
                  CONTENTS, READONLY
 13 .debug_line   00066b61  00000000  00000000  0002e226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  00094d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0006e2ee  00000000  00000000  00094e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000de3c  00000000  00000000  001030fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002db0  00000000  00000000  00110f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179d42  00000000  00000000  00113cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000053e7  00000000  00000000  0028da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002f919  00000000  00000000  00292e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00047d22  00000000  00000000  002c2732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0030a454  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a1cc  00000000  00000000  0030a498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200001f8 	.word	0x200001f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018770 	.word	0x08018770

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200001fc 	.word	0x200001fc
 800030c:	08018770 	.word	0x08018770

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_ldivmod>:
 80003e0:	b97b      	cbnz	r3, 8000402 <__aeabi_ldivmod+0x22>
 80003e2:	b972      	cbnz	r2, 8000402 <__aeabi_ldivmod+0x22>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bfbe      	ittt	lt
 80003e8:	2000      	movlt	r0, #0
 80003ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ee:	e006      	blt.n	80003fe <__aeabi_ldivmod+0x1e>
 80003f0:	bf08      	it	eq
 80003f2:	2800      	cmpeq	r0, #0
 80003f4:	bf1c      	itt	ne
 80003f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003fa:	f04f 30ff 	movne.w	r0, #4294967295
 80003fe:	f000 b9b5 	b.w	800076c <__aeabi_idiv0>
 8000402:	f1ad 0c08 	sub.w	ip, sp, #8
 8000406:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040a:	2900      	cmp	r1, #0
 800040c:	db09      	blt.n	8000422 <__aeabi_ldivmod+0x42>
 800040e:	2b00      	cmp	r3, #0
 8000410:	db1a      	blt.n	8000448 <__aeabi_ldivmod+0x68>
 8000412:	f000 f84d 	bl	80004b0 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4770      	bx	lr
 8000422:	4240      	negs	r0, r0
 8000424:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000428:	2b00      	cmp	r3, #0
 800042a:	db1b      	blt.n	8000464 <__aeabi_ldivmod+0x84>
 800042c:	f000 f840 	bl	80004b0 <__udivmoddi4>
 8000430:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000438:	b004      	add	sp, #16
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	4252      	negs	r2, r2
 8000442:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000446:	4770      	bx	lr
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	f000 f82f 	bl	80004b0 <__udivmoddi4>
 8000452:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045a:	b004      	add	sp, #16
 800045c:	4240      	negs	r0, r0
 800045e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000462:	4770      	bx	lr
 8000464:	4252      	negs	r2, r2
 8000466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046a:	f000 f821 	bl	80004b0 <__udivmoddi4>
 800046e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000476:	b004      	add	sp, #16
 8000478:	4252      	negs	r2, r2
 800047a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800047e:	4770      	bx	lr

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b96a 	b.w	800076c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	460c      	mov	r4, r1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d14e      	bne.n	800055a <__udivmoddi4+0xaa>
 80004bc:	4694      	mov	ip, r2
 80004be:	458c      	cmp	ip, r1
 80004c0:	4686      	mov	lr, r0
 80004c2:	fab2 f282 	clz	r2, r2
 80004c6:	d962      	bls.n	800058e <__udivmoddi4+0xde>
 80004c8:	b14a      	cbz	r2, 80004de <__udivmoddi4+0x2e>
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	4091      	lsls	r1, r2
 80004d0:	fa20 f303 	lsr.w	r3, r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	4319      	orrs	r1, r3
 80004da:	fa00 fe02 	lsl.w	lr, r0, r2
 80004de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e2:	fa1f f68c 	uxth.w	r6, ip
 80004e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ee:	fb07 1114 	mls	r1, r7, r4, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb04 f106 	mul.w	r1, r4, r6
 80004fa:	4299      	cmp	r1, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x64>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f104 30ff 	add.w	r0, r4, #4294967295
 8000506:	f080 8112 	bcs.w	800072e <__udivmoddi4+0x27e>
 800050a:	4299      	cmp	r1, r3
 800050c:	f240 810f 	bls.w	800072e <__udivmoddi4+0x27e>
 8000510:	3c02      	subs	r4, #2
 8000512:	4463      	add	r3, ip
 8000514:	1a59      	subs	r1, r3, r1
 8000516:	fa1f f38e 	uxth.w	r3, lr
 800051a:	fbb1 f0f7 	udiv	r0, r1, r7
 800051e:	fb07 1110 	mls	r1, r7, r0, r1
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	fb00 f606 	mul.w	r6, r0, r6
 800052a:	429e      	cmp	r6, r3
 800052c:	d90a      	bls.n	8000544 <__udivmoddi4+0x94>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 31ff 	add.w	r1, r0, #4294967295
 8000536:	f080 80fc 	bcs.w	8000732 <__udivmoddi4+0x282>
 800053a:	429e      	cmp	r6, r3
 800053c:	f240 80f9 	bls.w	8000732 <__udivmoddi4+0x282>
 8000540:	4463      	add	r3, ip
 8000542:	3802      	subs	r0, #2
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800054a:	2100      	movs	r1, #0
 800054c:	b11d      	cbz	r5, 8000556 <__udivmoddi4+0xa6>
 800054e:	40d3      	lsrs	r3, r2
 8000550:	2200      	movs	r2, #0
 8000552:	e9c5 3200 	strd	r3, r2, [r5]
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	428b      	cmp	r3, r1
 800055c:	d905      	bls.n	800056a <__udivmoddi4+0xba>
 800055e:	b10d      	cbz	r5, 8000564 <__udivmoddi4+0xb4>
 8000560:	e9c5 0100 	strd	r0, r1, [r5]
 8000564:	2100      	movs	r1, #0
 8000566:	4608      	mov	r0, r1
 8000568:	e7f5      	b.n	8000556 <__udivmoddi4+0xa6>
 800056a:	fab3 f183 	clz	r1, r3
 800056e:	2900      	cmp	r1, #0
 8000570:	d146      	bne.n	8000600 <__udivmoddi4+0x150>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d302      	bcc.n	800057c <__udivmoddi4+0xcc>
 8000576:	4290      	cmp	r0, r2
 8000578:	f0c0 80f0 	bcc.w	800075c <__udivmoddi4+0x2ac>
 800057c:	1a86      	subs	r6, r0, r2
 800057e:	eb64 0303 	sbc.w	r3, r4, r3
 8000582:	2001      	movs	r0, #1
 8000584:	2d00      	cmp	r5, #0
 8000586:	d0e6      	beq.n	8000556 <__udivmoddi4+0xa6>
 8000588:	e9c5 6300 	strd	r6, r3, [r5]
 800058c:	e7e3      	b.n	8000556 <__udivmoddi4+0xa6>
 800058e:	2a00      	cmp	r2, #0
 8000590:	f040 8090 	bne.w	80006b4 <__udivmoddi4+0x204>
 8000594:	eba1 040c 	sub.w	r4, r1, ip
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa1f f78c 	uxth.w	r7, ip
 80005a0:	2101      	movs	r1, #1
 80005a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80005a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005aa:	fb08 4416 	mls	r4, r8, r6, r4
 80005ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b2:	fb07 f006 	mul.w	r0, r7, r6
 80005b6:	4298      	cmp	r0, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x11c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f106 34ff 	add.w	r4, r6, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x11a>
 80005c4:	4298      	cmp	r0, r3
 80005c6:	f200 80cd 	bhi.w	8000764 <__udivmoddi4+0x2b4>
 80005ca:	4626      	mov	r6, r4
 80005cc:	1a1c      	subs	r4, r3, r0
 80005ce:	fa1f f38e 	uxth.w	r3, lr
 80005d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005d6:	fb08 4410 	mls	r4, r8, r0, r4
 80005da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005de:	fb00 f707 	mul.w	r7, r0, r7
 80005e2:	429f      	cmp	r7, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x148>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x146>
 80005f0:	429f      	cmp	r7, r3
 80005f2:	f200 80b0 	bhi.w	8000756 <__udivmoddi4+0x2a6>
 80005f6:	4620      	mov	r0, r4
 80005f8:	1bdb      	subs	r3, r3, r7
 80005fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005fe:	e7a5      	b.n	800054c <__udivmoddi4+0x9c>
 8000600:	f1c1 0620 	rsb	r6, r1, #32
 8000604:	408b      	lsls	r3, r1
 8000606:	fa22 f706 	lsr.w	r7, r2, r6
 800060a:	431f      	orrs	r7, r3
 800060c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000610:	fa04 f301 	lsl.w	r3, r4, r1
 8000614:	ea43 030c 	orr.w	r3, r3, ip
 8000618:	40f4      	lsrs	r4, r6
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	0c38      	lsrs	r0, r7, #16
 8000620:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000624:	fbb4 fef0 	udiv	lr, r4, r0
 8000628:	fa1f fc87 	uxth.w	ip, r7
 800062c:	fb00 441e 	mls	r4, r0, lr, r4
 8000630:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000634:	fb0e f90c 	mul.w	r9, lr, ip
 8000638:	45a1      	cmp	r9, r4
 800063a:	fa02 f201 	lsl.w	r2, r2, r1
 800063e:	d90a      	bls.n	8000656 <__udivmoddi4+0x1a6>
 8000640:	193c      	adds	r4, r7, r4
 8000642:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000646:	f080 8084 	bcs.w	8000752 <__udivmoddi4+0x2a2>
 800064a:	45a1      	cmp	r9, r4
 800064c:	f240 8081 	bls.w	8000752 <__udivmoddi4+0x2a2>
 8000650:	f1ae 0e02 	sub.w	lr, lr, #2
 8000654:	443c      	add	r4, r7
 8000656:	eba4 0409 	sub.w	r4, r4, r9
 800065a:	fa1f f983 	uxth.w	r9, r3
 800065e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000662:	fb00 4413 	mls	r4, r0, r3, r4
 8000666:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800066a:	fb03 fc0c 	mul.w	ip, r3, ip
 800066e:	45a4      	cmp	ip, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x1d2>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f103 30ff 	add.w	r0, r3, #4294967295
 8000678:	d267      	bcs.n	800074a <__udivmoddi4+0x29a>
 800067a:	45a4      	cmp	ip, r4
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0x29a>
 800067e:	3b02      	subs	r3, #2
 8000680:	443c      	add	r4, r7
 8000682:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000686:	fba0 9302 	umull	r9, r3, r0, r2
 800068a:	eba4 040c 	sub.w	r4, r4, ip
 800068e:	429c      	cmp	r4, r3
 8000690:	46ce      	mov	lr, r9
 8000692:	469c      	mov	ip, r3
 8000694:	d351      	bcc.n	800073a <__udivmoddi4+0x28a>
 8000696:	d04e      	beq.n	8000736 <__udivmoddi4+0x286>
 8000698:	b155      	cbz	r5, 80006b0 <__udivmoddi4+0x200>
 800069a:	ebb8 030e 	subs.w	r3, r8, lr
 800069e:	eb64 040c 	sbc.w	r4, r4, ip
 80006a2:	fa04 f606 	lsl.w	r6, r4, r6
 80006a6:	40cb      	lsrs	r3, r1
 80006a8:	431e      	orrs	r6, r3
 80006aa:	40cc      	lsrs	r4, r1
 80006ac:	e9c5 6400 	strd	r6, r4, [r5]
 80006b0:	2100      	movs	r1, #0
 80006b2:	e750      	b.n	8000556 <__udivmoddi4+0xa6>
 80006b4:	f1c2 0320 	rsb	r3, r2, #32
 80006b8:	fa20 f103 	lsr.w	r1, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	fa24 f303 	lsr.w	r3, r4, r3
 80006c4:	4094      	lsls	r4, r2
 80006c6:	430c      	orrs	r4, r1
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d0:	fa1f f78c 	uxth.w	r7, ip
 80006d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d8:	fb08 3110 	mls	r1, r8, r0, r3
 80006dc:	0c23      	lsrs	r3, r4, #16
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb00 f107 	mul.w	r1, r0, r7
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x24c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80006f2:	d22c      	bcs.n	800074e <__udivmoddi4+0x29e>
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d92a      	bls.n	800074e <__udivmoddi4+0x29e>
 80006f8:	3802      	subs	r0, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f1f8 	udiv	r1, r3, r8
 8000704:	fb08 3311 	mls	r3, r8, r1, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb01 f307 	mul.w	r3, r1, r7
 8000710:	42a3      	cmp	r3, r4
 8000712:	d908      	bls.n	8000726 <__udivmoddi4+0x276>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f101 36ff 	add.w	r6, r1, #4294967295
 800071c:	d213      	bcs.n	8000746 <__udivmoddi4+0x296>
 800071e:	42a3      	cmp	r3, r4
 8000720:	d911      	bls.n	8000746 <__udivmoddi4+0x296>
 8000722:	3902      	subs	r1, #2
 8000724:	4464      	add	r4, ip
 8000726:	1ae4      	subs	r4, r4, r3
 8000728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800072c:	e739      	b.n	80005a2 <__udivmoddi4+0xf2>
 800072e:	4604      	mov	r4, r0
 8000730:	e6f0      	b.n	8000514 <__udivmoddi4+0x64>
 8000732:	4608      	mov	r0, r1
 8000734:	e706      	b.n	8000544 <__udivmoddi4+0x94>
 8000736:	45c8      	cmp	r8, r9
 8000738:	d2ae      	bcs.n	8000698 <__udivmoddi4+0x1e8>
 800073a:	ebb9 0e02 	subs.w	lr, r9, r2
 800073e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000742:	3801      	subs	r0, #1
 8000744:	e7a8      	b.n	8000698 <__udivmoddi4+0x1e8>
 8000746:	4631      	mov	r1, r6
 8000748:	e7ed      	b.n	8000726 <__udivmoddi4+0x276>
 800074a:	4603      	mov	r3, r0
 800074c:	e799      	b.n	8000682 <__udivmoddi4+0x1d2>
 800074e:	4630      	mov	r0, r6
 8000750:	e7d4      	b.n	80006fc <__udivmoddi4+0x24c>
 8000752:	46d6      	mov	lr, sl
 8000754:	e77f      	b.n	8000656 <__udivmoddi4+0x1a6>
 8000756:	4463      	add	r3, ip
 8000758:	3802      	subs	r0, #2
 800075a:	e74d      	b.n	80005f8 <__udivmoddi4+0x148>
 800075c:	4606      	mov	r6, r0
 800075e:	4623      	mov	r3, r4
 8000760:	4608      	mov	r0, r1
 8000762:	e70f      	b.n	8000584 <__udivmoddi4+0xd4>
 8000764:	3e02      	subs	r6, #2
 8000766:	4463      	add	r3, ip
 8000768:	e730      	b.n	80005cc <__udivmoddi4+0x11c>
 800076a:	bf00      	nop

0800076c <__aeabi_idiv0>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000776:	e003      	b.n	8000780 <LoopCopyDataInit>

08000778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800077a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800077c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800077e:	3104      	adds	r1, #4

08000780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000788:	d3f6      	bcc.n	8000778 <CopyDataInit>
  ldr  r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800078c:	e002      	b.n	8000794 <LoopFillZerobss>

0800078e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800078e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000790:	f842 3b04 	str.w	r3, [r2], #4

08000794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000798:	d3f9      	bcc.n	800078e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079a:	f003 fad9 	bl	8003d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f016 f893 	bl	80168c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f000 feeb 	bl	800157c <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007ac:	0802ce8c 	.word	0x0802ce8c
  ldr  r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007b4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80007b8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80007bc:	2001031c 	.word	0x2001031c

080007c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC3_IRQHandler>
	...

080007c4 <Log_Init>:
void Log_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

	// Enable clocks
	__GPIOD_CLK_ENABLE();
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <Log_Init+0x74>)
	__USART3_CLK_ENABLE();

	// Configure GPIO
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007c6:	2102      	movs	r1, #2
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Pin       = GPIO_PIN_8;
 80007c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
	__GPIOD_CLK_ENABLE();
 80007cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80007d0:	f042 0208 	orr.w	r2, r2, #8
{
 80007d4:	b510      	push	{r4, lr}
	__GPIOD_CLK_ENABLE();
 80007d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
{
 80007da:	b088      	sub	sp, #32
	__GPIOD_CLK_ENABLE();
 80007dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80007e0:	2400      	movs	r4, #0
	__GPIOD_CLK_ENABLE();
 80007e2:	f002 0208 	and.w	r2, r2, #8
 80007e6:	9201      	str	r2, [sp, #4]
 80007e8:	9a01      	ldr	r2, [sp, #4]
	__USART3_CLK_ENABLE();
 80007ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80007ee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80007f2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f6:	2207      	movs	r2, #7
	__USART3_CLK_ENABLE();
 80007f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80007fc:	9106      	str	r1, [sp, #24]
	__USART3_CLK_ENABLE();
 80007fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
	GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8000802:	9003      	str	r0, [sp, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <Log_Init+0x78>)
	__USART3_CLK_ENABLE();
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800080a:	9207      	str	r2, [sp, #28]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800080c:	e9cd 1404 	strd	r1, r4, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	a903      	add	r1, sp, #12
 8000812:	f004 fc29 	bl	8005068 <HAL_GPIO_Init>

	// Configure the USART peripheral
	uart_handle.Instance          = USART3;
 8000816:	480a      	ldr	r0, [pc, #40]	@ (8000840 <Log_Init+0x7c>)
 8000818:	490a      	ldr	r1, [pc, #40]	@ (8000844 <Log_Init+0x80>)
	uart_handle.Init.BaudRate     = 4000000;
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
	uart_handle.Init.Parity       = UART_PARITY_NONE;
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	uart_handle.Init.Mode         = UART_MODE_TX;
 800081a:	2308      	movs	r3, #8
	uart_handle.Init.BaudRate     = 4000000;
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <Log_Init+0x84>)
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 800081e:	e9c0 4403 	strd	r4, r4, [r0, #12]
	uart_handle.Init.BaudRate     = 4000000;
 8000822:	e880 0016 	stmia.w	r0, {r1, r2, r4}
	uart_handle.Init.Mode         = UART_MODE_TX;
 8000826:	e9c0 3405 	strd	r3, r4, [r0, #20]

	// Commit the USART
	if (HAL_UART_Init(&uart_handle) != HAL_OK)
 800082a:	f006 f8df 	bl	80069ec <HAL_UART_Init>
 800082e:	b908      	cbnz	r0, 8000834 <Log_Init+0x70>
	{
		while (1);
	}
}
 8000830:	b008      	add	sp, #32
 8000832:	bd10      	pop	{r4, pc}
		while (1);
 8000834:	e7fe      	b.n	8000834 <Log_Init+0x70>
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400
 800083c:	58020c00 	.word	0x58020c00
 8000840:	20000218 	.word	0x20000218
 8000844:	40004800 	.word	0x40004800
 8000848:	003d0900 	.word	0x003d0900

0800084c <_write>:

int _write(int file, char *ptr, int len)
{
 800084c:	b510      	push	{r4, lr}
 800084e:	4614      	mov	r4, r2
  HAL_UART_Transmit(&uart_handle, (uint8_t*)ptr, len, 0xFFFF);
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	b292      	uxth	r2, r2
 8000856:	4802      	ldr	r0, [pc, #8]	@ (8000860 <_write+0x14>)
 8000858:	f006 f806 	bl	8006868 <HAL_UART_Transmit>
	return len;
}
 800085c:	4620      	mov	r0, r4
 800085e:	bd10      	pop	{r4, pc}
 8000860:	20000218 	.word	0x20000218

08000864 <ethernet_link_status_updated>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
  if (netif_is_up(netif))
 8000864:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000868:	f013 0f01 	tst.w	r3, #1
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800086c:	4b02      	ldr	r3, [pc, #8]	@ (8000878 <ethernet_link_status_updated+0x14>)
 800086e:	bf14      	ite	ne
 8000870:	2201      	movne	r2, #1
  }
  else
  {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
 8000872:	2205      	moveq	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3);
#endif /* LWIP_DHCP */
  }
}
 8000876:	4770      	bx	lr
 8000878:	200002ac 	.word	0x200002ac

0800087c <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 800087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000880:	4d2d      	ldr	r5, [pc, #180]	@ (8000938 <DHCP_Thread+0xbc>)
 8000882:	b085      	sub	sp, #20
 8000884:	4606      	mov	r6, r0
          if (dhcp->tries > MAX_DHCP_TRIES)
          {
            DHCP_state = DHCP_TIMEOUT;

            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000886:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800093c <DHCP_Thread+0xc0>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800088a:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8000940 <DHCP_Thread+0xc4>
        netifapi_dhcp_start(netif);
 800088e:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8000944 <DHCP_Thread+0xc8>
 8000892:	e005      	b.n	80008a0 <DHCP_Thread+0x24>
    switch (DHCP_state)
 8000894:	2c01      	cmp	r4, #1
 8000896:	d030      	beq.n	80008fa <DHCP_Thread+0x7e>
    break;
    default: break;
    }

    /* wait 500 ms */
    osDelay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800089c:	f008 fb88 	bl	8008fb0 <osDelay>
    switch (DHCP_state)
 80008a0:	782b      	ldrb	r3, [r5, #0]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	b2dc      	uxtb	r4, r3
 80008a6:	d00a      	beq.n	80008be <DHCP_Thread+0x42>
 80008a8:	2c05      	cmp	r4, #5
 80008aa:	d1f3      	bne.n	8000894 <DHCP_Thread+0x18>
      DHCP_state = DHCP_OFF;
 80008ac:	2300      	movs	r3, #0
      BSP_LED_Off(LED2);
 80008ae:	2001      	movs	r0, #1
      DHCP_state = DHCP_OFF;
 80008b0:	702b      	strb	r3, [r5, #0]
      BSP_LED_Off(LED2);
 80008b2:	f003 fa37 	bl	8003d24 <BSP_LED_Off>
      BSP_LED_On(LED3);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f003 fa1e 	bl	8003cf8 <BSP_LED_On>
    break;
 80008bc:	e7ec      	b.n	8000898 <DHCP_Thread+0x1c>
        if (dhcp_supplied_address(netif))
 80008be:	4630      	mov	r0, r6
 80008c0:	f00d f82c 	bl	800d91c <dhcp_supplied_address>
 80008c4:	bb68      	cbnz	r0, 8000922 <DHCP_Thread+0xa6>
          if (dhcp->tries > MAX_DHCP_TRIES)
 80008c6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80008c8:	799b      	ldrb	r3, [r3, #6]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d9e4      	bls.n	8000898 <DHCP_Thread+0x1c>
            DHCP_state = DHCP_TIMEOUT;
 80008ce:	2704      	movs	r7, #4
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80008d0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
            netifapi_netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80008d4:	ab03      	add	r3, sp, #12
 80008d6:	aa02      	add	r2, sp, #8
 80008d8:	eb0d 0107 	add.w	r1, sp, r7
            DHCP_state = DHCP_TIMEOUT;
 80008dc:	702f      	strb	r7, [r5, #0]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80008de:	f8cd 900c 	str.w	r9, [sp, #12]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80008e2:	e9cd a001 	strd	sl, r0, [sp, #4]
            netifapi_netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80008e6:	4630      	mov	r0, r6
 80008e8:	f009 f87a 	bl	80099e0 <netifapi_netif_set_addr>
            BSP_LED_On(LED2);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 fa03 	bl	8003cf8 <BSP_LED_On>
            BSP_LED_Off(LED3);
 80008f2:	4620      	mov	r0, r4
 80008f4:	f003 fa16 	bl	8003d24 <BSP_LED_Off>
 80008f8:	e7ce      	b.n	8000898 <DHCP_Thread+0x1c>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80008fa:	2700      	movs	r7, #0
        DHCP_state = DHCP_WAIT_ADDRESS;
 80008fc:	f04f 0b02 	mov.w	fp, #2
        BSP_LED_Off(LED2);
 8000900:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->gw);
 8000902:	60f7      	str	r7, [r6, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000904:	f885 b000 	strb.w	fp, [r5]
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000908:	e9c6 7701 	strd	r7, r7, [r6, #4]
        BSP_LED_Off(LED2);
 800090c:	f003 fa0a 	bl	8003d24 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000910:	4658      	mov	r0, fp
 8000912:	f003 fa07 	bl	8003d24 <BSP_LED_Off>
        netifapi_dhcp_start(netif);
 8000916:	4642      	mov	r2, r8
 8000918:	4639      	mov	r1, r7
 800091a:	4630      	mov	r0, r6
 800091c:	f009 f87c 	bl	8009a18 <netifapi_netif_common>
      break;
 8000920:	e7ba      	b.n	8000898 <DHCP_Thread+0x1c>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000922:	2303      	movs	r3, #3
          BSP_LED_On(LED2);
 8000924:	2001      	movs	r0, #1
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000926:	702b      	strb	r3, [r5, #0]
          BSP_LED_On(LED2);
 8000928:	f003 f9e6 	bl	8003cf8 <BSP_LED_On>
          BSP_LED_Off(LED3);
 800092c:	4620      	mov	r0, r4
 800092e:	f003 f9f9 	bl	8003d24 <BSP_LED_Off>
          ptpd_init();
 8000932:	f001 fba9 	bl	8002088 <ptpd_init>
 8000936:	e7af      	b.n	8000898 <DHCP_Thread+0x1c>
 8000938:	200002ac 	.word	0x200002ac
 800093c:	0a00a8c0 	.word	0x0a00a8c0
 8000940:	0100a8c0 	.word	0x0100a8c0
 8000944:	0800d5c1 	.word	0x0800d5c1

08000948 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8000948:	2000      	movs	r0, #0
 800094a:	4770      	bx	lr

0800094c <low_level_output>:
{
 800094c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000950:	b08f      	sub	sp, #60	@ 0x3c
 8000952:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000954:	2230      	movs	r2, #48	@ 0x30
 8000956:	2100      	movs	r1, #0
 8000958:	a802      	add	r0, sp, #8
  if (p->timestamp_sec == PTP_TIMESTAMP_RECORD_MAGIC)
 800095a:	6925      	ldr	r5, [r4, #16]
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800095c:	f015 ff40 	bl	80167e0 <memset>
  for(q = p; q != NULL; q = q->next)
 8000960:	a902      	add	r1, sp, #8
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000962:	4622      	mov	r2, r4
  uint32_t i = 0U;
 8000964:	2000      	movs	r0, #0
    if (CacheTools_IsCachedRegion(q->payload))
 8000966:	6853      	ldr	r3, [r2, #4]
      SCB_CleanDCache_by_Addr((uint32_t*)q->payload, CACHE_ALIGNED_SIZE(q->len));
 8000968:	8956      	ldrh	r6, [r2, #10]
  if ((uint32_t)address >= RAM_D1_BASE_ADDRESS && (uint32_t)address < RAM_D1_BASE_ADDRESS + RAM_D1_SIZE)
 800096a:	f103 4c5c 	add.w	ip, r3, #3690987520	@ 0xdc000000
 800096e:	461f      	mov	r7, r3
 8000970:	f5bc 2fa0 	cmp.w	ip, #327680	@ 0x50000
 8000974:	d312      	bcc.n	800099c <low_level_output+0x50>
    if(q->next == NULL)
 8000976:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8000978:	e9c1 7600 	strd	r7, r6, [r1]
    if(i>0)
 800097c:	b918      	cbnz	r0, 8000986 <low_level_output+0x3a>
    if(q->next == NULL)
 800097e:	b34a      	cbz	r2, 80009d4 <low_level_output+0x88>
    if(i >= ETH_TX_DESC_CNT)
 8000980:	310c      	adds	r1, #12
    i++;
 8000982:	2001      	movs	r0, #1
 8000984:	e7ef      	b.n	8000966 <low_level_output+0x1a>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000986:	f841 1c04 	str.w	r1, [r1, #-4]
    if(q->next == NULL)
 800098a:	b31a      	cbz	r2, 80009d4 <low_level_output+0x88>
    i++;
 800098c:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 800098e:	2804      	cmp	r0, #4
 8000990:	d11e      	bne.n	80009d0 <low_level_output+0x84>
      return ERR_IF;
 8000992:	f06f 000b 	mvn.w	r0, #11
}
 8000996:	b00f      	add	sp, #60	@ 0x3c
 8000998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      SCB_CleanDCache_by_Addr((uint32_t*)q->payload, CACHE_ALIGNED_SIZE(q->len));
 800099c:	361f      	adds	r6, #31
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800099e:	f036 061f 	bics.w	r6, r6, #31
 80009a2:	d0e8      	beq.n	8000976 <low_level_output+0x2a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80009a4:	f003 0c1f 	and.w	ip, r3, #31
 80009a8:	ea4c 0c06 	orr.w	ip, ip, r6
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009ac:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80009b0:	4f35      	ldr	r7, [pc, #212]	@ (8000a88 <low_level_output+0x13c>)
 80009b2:	449c      	add	ip, r3
 80009b4:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80009b8:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80009ba:	ebac 0603 	sub.w	r6, ip, r3
 80009be:	2e00      	cmp	r6, #0
 80009c0:	dcf8      	bgt.n	80009b4 <low_level_output+0x68>
 80009c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009c6:	f3bf 8f6f 	isb	sy
    Txbuffer[i].buffer = q->payload;
 80009ca:	6857      	ldr	r7, [r2, #4]
    Txbuffer[i].len = q->len;
 80009cc:	8956      	ldrh	r6, [r2, #10]
}
 80009ce:	e7d2      	b.n	8000976 <low_level_output+0x2a>
    if(i >= ETH_TX_DESC_CNT)
 80009d0:	310c      	adds	r1, #12
 80009d2:	e7c8      	b.n	8000966 <low_level_output+0x1a>
      Txbuffer[i].next = NULL;
 80009d4:	aa0e      	add	r2, sp, #56	@ 0x38
 80009d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009da:	2300      	movs	r3, #0
  TxConfig.Length = p->tot_len;
 80009dc:	4f2b      	ldr	r7, [pc, #172]	@ (8000a8c <low_level_output+0x140>)
      Txbuffer[i].next = NULL;
 80009de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
	if (is_timestamp_requested)
 80009e2:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 8000a98 <low_level_output+0x14c>
 80009e6:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8000a94 <low_level_output+0x148>
      Txbuffer[i].next = NULL;
 80009ea:	f840 3c28 	str.w	r3, [r0, #-40]
  pbuf_ref(p);
 80009ee:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80009f0:	8923      	ldrh	r3, [r4, #8]
  TxConfig.pData = p;
 80009f2:	637c      	str	r4, [r7, #52]	@ 0x34
  TxConfig.Length = p->tot_len;
 80009f4:	607b      	str	r3, [r7, #4]
  TxConfig.TxBuffer = Txbuffer;
 80009f6:	ab02      	add	r3, sp, #8
 80009f8:	60bb      	str	r3, [r7, #8]
  pbuf_ref(p);
 80009fa:	f00f ff43 	bl	8010884 <pbuf_ref>
	if (is_timestamp_requested)
 80009fe:	454d      	cmp	r5, r9
 8000a00:	d025      	beq.n	8000a4e <low_level_output+0x102>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 8000a02:	4639      	mov	r1, r7
 8000a04:	4640      	mov	r0, r8
 8000a06:	f003 fe57 	bl	80046b8 <HAL_ETH_Transmit_IT>
 8000a0a:	4606      	mov	r6, r0
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000a0c:	4640      	mov	r0, r8
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 8000a0e:	b97e      	cbnz	r6, 8000a30 <low_level_output+0xe4>
      osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <low_level_output+0x144>)
 8000a12:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	f008 fbac 	bl	8009174 <osSemaphoreAcquire>
      HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000a1c:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <low_level_output+0x148>)
 8000a1e:	f003 ff21 	bl	8004864 <HAL_ETH_ReleaseTxPacket>
      if (is_timestamp_requested)
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <low_level_output+0x14c>)
 8000a24:	429d      	cmp	r5, r3
 8000a26:	d01a      	beq.n	8000a5e <low_level_output+0x112>
      errval = ERR_OK;
 8000a28:	2000      	movs	r0, #0
}
 8000a2a:	b00f      	add	sp, #60	@ 0x3c
 8000a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000a30:	f004 fb12 	bl	8005058 <HAL_ETH_GetError>
 8000a34:	0782      	lsls	r2, r0, #30
        osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <low_level_output+0x144>)
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000a38:	d50d      	bpl.n	8000a56 <low_level_output+0x10a>
        osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000a40:	f008 fb98 	bl	8009174 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <low_level_output+0x148>)
 8000a46:	f003 ff0d 	bl	8004864 <HAL_ETH_ReleaseTxPacket>
	if (is_timestamp_requested)
 8000a4a:	454d      	cmp	r5, r9
 8000a4c:	d1d9      	bne.n	8000a02 <low_level_output+0xb6>
		HAL_ETH_PTP_InsertTxTimestamp(&EthHandle);
 8000a4e:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <low_level_output+0x148>)
 8000a50:	f003 ff5c 	bl	800490c <HAL_ETH_PTP_InsertTxTimestamp>
 8000a54:	e7d5      	b.n	8000a02 <low_level_output+0xb6>
        pbuf_free(p);
 8000a56:	4620      	mov	r0, r4
 8000a58:	f00f fd7c 	bl	8010554 <pbuf_free>
  }while(errval == ERR_BUF);
 8000a5c:	e799      	b.n	8000992 <low_level_output+0x46>
  uint64_t val = subsecond_value * 1000000000ll;
 8000a5e:	f8d8 4094 	ldr.w	r4, [r8, #148]	@ 0x94
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a62:	4632      	mov	r2, r6
  uint64_t val = subsecond_value * 1000000000ll;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <low_level_output+0x150>)
        new_timestamp_record.timestamp.tv_sec = EthHandle.TxTimestamp.TimeStampHigh;
 8000a66:	f8d8 1098 	ldr.w	r1, [r8, #152]	@ 0x98
  uint64_t val = subsecond_value * 1000000000ll;
 8000a6a:	fba4 4303 	umull	r4, r3, r4, r3
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a6e:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <low_level_output+0x154>)
        new_timestamp_record.timestamp.tv_sec = EthHandle.TxTimestamp.TimeStampHigh;
 8000a70:	9100      	str	r1, [sp, #0]
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a72:	4669      	mov	r1, sp
  val >>= 31;
 8000a74:	0fe4      	lsrs	r4, r4, #31
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a76:	6800      	ldr	r0, [r0, #0]
  val >>= 31;
 8000a78:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a7c:	2302      	movs	r3, #2
        new_timestamp_record.timestamp.tv_nsec = SubsecondToNanosecond(EthHandle.TxTimestamp.TimeStampLow);
 8000a7e:	9401      	str	r4, [sp, #4]
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000a80:	f006 faa0 	bl	8006fc4 <xQueueGenericSend>
  }while(errval == ERR_BUF);
 8000a84:	e7d0      	b.n	8000a28 <low_level_output+0xdc>
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	200002d0 	.word	0x200002d0
 8000a90:	200003d0 	.word	0x200003d0
 8000a94:	20000308 	.word	0x20000308
 8000a98:	55667788 	.word	0x55667788
 8000a9c:	3b9aca00 	.word	0x3b9aca00
 8000aa0:	200003e0 	.word	0x200003e0

08000aa4 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8000aa4:	f003 b9c8 	b.w	8003e38 <HAL_GetTick>

08000aa8 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <ETH_PHY_IO_Init+0xc>)
{
 8000aaa:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000aac:	f004 f93c 	bl	8004d28 <HAL_ETH_SetMDIOClockRange>
}
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	bd08      	pop	{r3, pc}
 8000ab4:	20000308 	.word	0x20000308

08000ab8 <ETH_PHY_IO_ReadReg>:
{
 8000ab8:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000aba:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8000abc:	b508      	push	{r3, lr}
 8000abe:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	4661      	mov	r1, ip
 8000ac4:	f003 ffea 	bl	8004a9c <HAL_ETH_ReadPHYRegister>
 8000ac8:	3800      	subs	r0, #0
 8000aca:	bf18      	it	ne
 8000acc:	2001      	movne	r0, #1
}
 8000ace:	4240      	negs	r0, r0
 8000ad0:	bd08      	pop	{r3, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000308 	.word	0x20000308

08000ad8 <ETH_PHY_IO_WriteReg>:
{
 8000ad8:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8000adc:	b508      	push	{r3, lr}
 8000ade:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	f004 f808 	bl	8004af8 <HAL_ETH_WritePHYRegister>
 8000ae8:	3800      	subs	r0, #0
 8000aea:	bf18      	it	ne
 8000aec:	2001      	movne	r0, #1
}
 8000aee:	4240      	negs	r0, r0
 8000af0:	bd08      	pop	{r3, pc}
 8000af2:	bf00      	nop
 8000af4:	20000308 	.word	0x20000308

08000af8 <pbuf_free_custom>:
{
 8000af8:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000afa:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <pbuf_free_custom+0x24>)
{
 8000afc:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000afe:	f00f fa19 	bl	800ff34 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <pbuf_free_custom+0x28>)
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	2a01      	cmp	r2, #1
 8000b08:	d000      	beq.n	8000b0c <pbuf_free_custom+0x14>
}
 8000b0a:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8000b0c:	4905      	ldr	r1, [pc, #20]	@ (8000b24 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8000b0e:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8000b10:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8000b12:	701a      	strb	r2, [r3, #0]
}
 8000b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8000b18:	f008 bb5e 	b.w	80091d8 <osSemaphoreRelease>
 8000b1c:	08018888 	.word	0x08018888
 8000b20:	200003d8 	.word	0x200003d8
 8000b24:	200003d4 	.word	0x200003d4

08000b28 <ethernetif_input>:
{
 8000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b2c:	4d1a      	ldr	r5, [pc, #104]	@ (8000b98 <ethernetif_input+0x70>)
 8000b2e:	b085      	sub	sp, #20
 8000b30:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8000b9c <ethernetif_input+0x74>
 8000b34:	4606      	mov	r6, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000b36:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8000ba0 <ethernetif_input+0x78>
  uint64_t val = subsecond_value * 1000000000ll;
 8000b3a:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8000ba4 <ethernetif_input+0x7c>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b42:	6828      	ldr	r0, [r5, #0]
 8000b44:	f008 fb16 	bl	8009174 <osSemaphoreAcquire>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1f8      	bne.n	8000b3e <ethernetif_input+0x16>
  struct pbuf *p = NULL;
 8000b4c:	f04f 0a00 	mov.w	sl, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000b50:	f899 3000 	ldrb.w	r3, [r9]
  struct pbuf *p = NULL;
 8000b54:	f8cd a004 	str.w	sl, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f0      	bne.n	8000b3e <ethernetif_input+0x16>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000b5c:	a901      	add	r1, sp, #4
 8000b5e:	4640      	mov	r0, r8
 8000b60:	f003 fdda 	bl	8004718 <HAL_ETH_ReadData>
  return p;
 8000b64:	9c01      	ldr	r4, [sp, #4]
          HAL_ETH_PTP_GetRxTimestamp(&EthHandle, &eth_timestamp);
 8000b66:	a902      	add	r1, sp, #8
 8000b68:	4640      	mov	r0, r8
        if (p != NULL)
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d0e7      	beq.n	8000b3e <ethernetif_input+0x16>
          HAL_ETH_PTP_GetRxTimestamp(&EthHandle, &eth_timestamp);
 8000b6e:	f003 fedf 	bl	8004930 <HAL_ETH_PTP_GetRxTimestamp>
  uint64_t val = subsecond_value * 1000000000ll;
 8000b72:	9b02      	ldr	r3, [sp, #8]
          p->timestamp_sec = eth_timestamp.TimeStampHigh;
 8000b74:	9f03      	ldr	r7, [sp, #12]
          if (netif->input( p, netif) != ERR_OK )
 8000b76:	4631      	mov	r1, r6
  uint64_t val = subsecond_value * 1000000000ll;
 8000b78:	fba3 3c0b 	umull	r3, ip, r3, fp
          if (netif->input( p, netif) != ERR_OK )
 8000b7c:	6932      	ldr	r2, [r6, #16]
 8000b7e:	4620      	mov	r0, r4
          p->timestamp_sec = eth_timestamp.TimeStampHigh;
 8000b80:	6127      	str	r7, [r4, #16]
  val >>= 31;
 8000b82:	0fdb      	lsrs	r3, r3, #31
 8000b84:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  return val;
 8000b88:	6163      	str	r3, [r4, #20]
          if (netif->input( p, netif) != ERR_OK )
 8000b8a:	4790      	blx	r2
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d0df      	beq.n	8000b50 <ethernetif_input+0x28>
            pbuf_free(p);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f00f fcdf 	bl	8010554 <pbuf_free>
 8000b96:	e7d9      	b.n	8000b4c <ethernetif_input+0x24>
 8000b98:	200003d4 	.word	0x200003d4
 8000b9c:	200003d8 	.word	0x200003d8
 8000ba0:	20000308 	.word	0x20000308
 8000ba4:	3b9aca00 	.word	0x3b9aca00

08000ba8 <ethernetif_GetTxTimestamp>:
{
 8000ba8:	b510      	push	{r4, lr}
  if (xQueueReceive(timestamp_queue, &record, 0) != pdTRUE)
 8000baa:	4c0b      	ldr	r4, [pc, #44]	@ (8000bd8 <ethernetif_GetTxTimestamp+0x30>)
{
 8000bac:	b082      	sub	sp, #8
 8000bae:	4603      	mov	r3, r0
  if (xQueueReceive(timestamp_queue, &record, 0) != pdTRUE)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6820      	ldr	r0, [r4, #0]
 8000bb4:	4669      	mov	r1, sp
{
 8000bb6:	461c      	mov	r4, r3
  if (xQueueReceive(timestamp_queue, &record, 0) != pdTRUE)
 8000bb8:	f006 fbf8 	bl	80073ac <xQueueReceive>
 8000bbc:	2801      	cmp	r0, #1
 8000bbe:	d003      	beq.n	8000bc8 <ethernetif_GetTxTimestamp+0x20>
    return false;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd10      	pop	{r4, pc}
  memcpy((void*)timestamp, (void*)&record.timestamp, sizeof(TxTimestampRecord_t));
 8000bc8:	466a      	mov	r2, sp
  return true;
 8000bca:	4603      	mov	r3, r0
  memcpy((void*)timestamp, (void*)&record.timestamp, sizeof(TxTimestampRecord_t));
 8000bcc:	ca03      	ldmia	r2!, {r0, r1}
 8000bce:	6020      	str	r0, [r4, #0]
}
 8000bd0:	4618      	mov	r0, r3
  memcpy((void*)timestamp, (void*)&record.timestamp, sizeof(TxTimestampRecord_t));
 8000bd2:	6061      	str	r1, [r4, #4]
}
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	200003e0 	.word	0x200003e0
 8000bdc:	00000000 	.word	0x00000000

08000be0 <ethernetif_SetTime>:
  EthHandle.Instance->MACSTSUR = ptp_time->tv_sec;
 8000be0:	490f      	ldr	r1, [pc, #60]	@ (8000c20 <ethernetif_SetTime+0x40>)
{
 8000be2:	b510      	push	{r4, lr}
  EthHandle.Instance->MACSTSUR = ptp_time->tv_sec;
 8000be4:	680c      	ldr	r4, [r1, #0]
 8000be6:	e9d0 0100 	ldrd	r0, r1, [r0]
  val /= 1000000000;
 8000bea:	a30b      	add	r3, pc, #44	@ (adr r3, 8000c18 <ethernetif_SetTime+0x38>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
  EthHandle.Instance->MACSTSUR = ptp_time->tv_sec;
 8000bf0:	f8c4 0b10 	str.w	r0, [r4, #2832]	@ 0xb10
  val /= 1000000000;
 8000bf4:	07c8      	lsls	r0, r1, #31
 8000bf6:	0849      	lsrs	r1, r1, #1
 8000bf8:	f7ff fc42 	bl	8000480 <__aeabi_uldivmod>
  EthHandle.Instance->MACSTNUR = NanosecondToSubsecond(ptp_time->tv_nsec);
 8000bfc:	f8c4 0b14 	str.w	r0, [r4, #2836]	@ 0xb14
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000c00:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	f8c4 3b00 	str.w	r3, [r4, #2816]	@ 0xb00
  while (EthHandle.Instance->MACTSCR & ETH_MACTSCR_TSINIT)
 8000c0c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	d4fb      	bmi.n	8000c0c <ethernetif_SetTime+0x2c>
}
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	bf00      	nop
 8000c18:	3b9aca00 	.word	0x3b9aca00
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	20000308 	.word	0x20000308

08000c24 <ethernetif_GetTime>:
{
 8000c24:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
 8000c26:	b672      	cpsid	i
  hi_reg = READ_REG(EthHandle.Instance->MACSTSR);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <ethernetif_GetTime+0x3c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	f8d2 4b08 	ldr.w	r4, [r2, #2824]	@ 0xb08
  lo_reg = READ_REG(EthHandle.Instance->MACSTNR);
 8000c30:	f8d2 3b0c 	ldr.w	r3, [r2, #2828]	@ 0xb0c
  hi_reg_after = READ_REG(EthHandle.Instance->MACSTSR);
 8000c34:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	@ 0xb08
  __ASM volatile ("cpsie i" : : : "memory");
 8000c38:	b662      	cpsie	i
    if (lo_reg < (INT_MAX / 2)) hi_reg = hi_reg_after;
 8000c3a:	428c      	cmp	r4, r1
 8000c3c:	d00e      	beq.n	8000c5c <ethernetif_GetTime+0x38>
 8000c3e:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8000c42:	4293      	cmp	r3, r2
 8000c44:	da0a      	bge.n	8000c5c <ethernetif_GetTime+0x38>
  uint64_t val = subsecond_value * 1000000000ll;
 8000c46:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <ethernetif_GetTime+0x40>)
}
 8000c48:	f85d 4b04 	ldr.w	r4, [sp], #4
  uint64_t val = subsecond_value * 1000000000ll;
 8000c4c:	fba3 3202 	umull	r3, r2, r3, r2
  ptp_time->tv_sec = hi_reg;
 8000c50:	6001      	str	r1, [r0, #0]
  val >>= 31;
 8000c52:	0fdb      	lsrs	r3, r3, #31
 8000c54:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  ptp_time->tv_nsec = SubsecondToNanosecond(lo_reg);
 8000c58:	6043      	str	r3, [r0, #4]
}
 8000c5a:	4770      	bx	lr
  hi_reg = READ_REG(EthHandle.Instance->MACSTSR);
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	e7f2      	b.n	8000c46 <ethernetif_GetTime+0x22>
 8000c60:	20000308 	.word	0x20000308
 8000c64:	3b9aca00 	.word	0x3b9aca00

08000c68 <ethernetif_PtpFxAdjust>:
{
 8000c68:	b510      	push	{r4, lr}
    + (int32_t)((((int64_t) PTP_ADDEND) * adjustment_ppb) / 1000000000);
 8000c6a:	4c0d      	ldr	r4, [pc, #52]	@ (8000ca0 <ethernetif_PtpFxAdjust+0x38>)
 8000c6c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000c98 <ethernetif_PtpFxAdjust+0x30>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	fb80 0104 	smull	r0, r1, r0, r4
 8000c76:	f7ff fbb3 	bl	80003e0 <__aeabi_ldivmod>
  WRITE_REG(EthHandle.Instance->MACTSAR, addend);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <ethernetif_PtpFxAdjust+0x3c>)
    + (int32_t)((((int64_t) PTP_ADDEND) * adjustment_ppb) / 1000000000);
 8000c7c:	4420      	add	r0, r4
  WRITE_REG(EthHandle.Instance->MACTSAR, addend);
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f8c3 0b18 	str.w	r0, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000c84:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c88:	f042 0220 	orr.w	r2, r2, #32
 8000c8c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	bf00      	nop
 8000c94:	f3af 8000 	nop.w
 8000c98:	3b9aca00 	.word	0x3b9aca00
 8000c9c:	00000000 	.word	0x00000000
 8000ca0:	312c538a 	.word	0x312c538a
 8000ca4:	20000308 	.word	0x20000308

08000ca8 <ethernetif_init>:
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000caa:	4605      	mov	r5, r0
{
 8000cac:	b0b3      	sub	sp, #204	@ 0xcc
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	f000 8102 	beq.w	8000eb8 <ethernetif_init+0x210>
  netif->name[0] = IFNAME0;
 8000cb4:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8000cb8:	4a83      	ldr	r2, [pc, #524]	@ (8000ec8 <ethernetif_init+0x220>)
  netif->linkoutput = low_level_output;
 8000cba:	4b84      	ldr	r3, [pc, #528]	@ (8000ecc <ethernetif_init+0x224>)
  netif->name[0] = IFNAME0;
 8000cbc:	86e9      	strh	r1, [r5, #54]	@ 0x36
  ETH_MACConfigTypeDef MACConf = {0};
 8000cbe:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8000cc0:	616a      	str	r2, [r5, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8000cc2:	2264      	movs	r2, #100	@ 0x64
  ETH_MACFilterConfigTypeDef pFilterConfig = {0};
 8000cc4:	460c      	mov	r4, r1
  netif->linkoutput = low_level_output;
 8000cc6:	61ab      	str	r3, [r5, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8000cc8:	eb0d 0002 	add.w	r0, sp, r2
  EthHandle.Instance = ETH;
 8000ccc:	4e80      	ldr	r6, [pc, #512]	@ (8000ed0 <ethernetif_init+0x228>)
  ETH_MACConfigTypeDef MACConf = {0};
 8000cce:	f015 fd87 	bl	80167e0 <memset>
  ETH_DMAConfigTypeDef dma_config = {0};
 8000cd2:	2224      	movs	r2, #36	@ 0x24
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	a807      	add	r0, sp, #28
 8000cd8:	f015 fd82 	bl	80167e0 <memset>
  timestamp_queue = xQueueCreate(1, sizeof(TxTimestampRecord_t));
 8000cdc:	4622      	mov	r2, r4
 8000cde:	2108      	movs	r1, #8
 8000ce0:	2001      	movs	r0, #1
  ETH_MACFilterConfigTypeDef pFilterConfig = {0};
 8000ce2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000ce6:	e9cd 4405 	strd	r4, r4, [sp, #20]
  timestamp_queue = xQueueCreate(1, sizeof(TxTimestampRecord_t));
 8000cea:	f006 f901 	bl	8006ef0 <xQueueGenericCreate>
 8000cee:	4a79      	ldr	r2, [pc, #484]	@ (8000ed4 <ethernetif_init+0x22c>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000cf0:	4b79      	ldr	r3, [pc, #484]	@ (8000ed8 <ethernetif_init+0x230>)
  timestamp_queue = xQueueCreate(1, sizeof(TxTimestampRecord_t));
 8000cf2:	6010      	str	r0, [r2, #0]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
  EthHandle.Instance = ETH;
 8000cf8:	4b78      	ldr	r3, [pc, #480]	@ (8000edc <ethernetif_init+0x234>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000cfa:	9001      	str	r0, [sp, #4]
  HAL_ETH_Init(&EthHandle);
 8000cfc:	4630      	mov	r0, r6
  EthHandle.Instance = ETH;
 8000cfe:	6033      	str	r3, [r6, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000d00:	ab01      	add	r3, sp, #4
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000d02:	f8ad 1008 	strh.w	r1, [sp, #8]
  EthHandle.Init.MACAddr = macaddress;
 8000d06:	6073      	str	r3, [r6, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	7233      	strb	r3, [r6, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000d0c:	4b74      	ldr	r3, [pc, #464]	@ (8000ee0 <ethernetif_init+0x238>)
 8000d0e:	6133      	str	r3, [r6, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000d10:	4b74      	ldr	r3, [pc, #464]	@ (8000ee4 <ethernetif_init+0x23c>)
 8000d12:	60f3      	str	r3, [r6, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8000d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d18:	6173      	str	r3, [r6, #20]
  HAL_ETH_Init(&EthHandle);
 8000d1a:	f004 f83b 	bl	8004d94 <HAL_ETH_Init>
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000d1e:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000d22:	4871      	ldr	r0, [pc, #452]	@ (8000ee8 <ethernetif_init+0x240>)
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000d24:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000d28:	632c      	str	r4, [r5, #48]	@ 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000d2a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
  netif->mtu = ETH_MAX_PAYLOAD;
 8000d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8000eec <ethernetif_init+0x244>)
 8000d30:	62eb      	str	r3, [r5, #44]	@ 0x2c
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000d32:	2306      	movs	r3, #6
 8000d34:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000d38:	f00f f884 	bl	800fe44 <memp_init_pool>
  pFilterConfig.PromiscuousMode = ENABLE;
 8000d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d40:	f240 1001 	movw	r0, #257	@ 0x101
  HAL_ETH_SetMACFilterConfig(&EthHandle, &pFilterConfig);
 8000d44:	a903      	add	r1, sp, #12
  pFilterConfig.DestAddrInverseFiltering = DISABLE;
 8000d46:	f8ad 4014 	strh.w	r4, [sp, #20]
  pFilterConfig.ControlPacketsFilter = 0;
 8000d4a:	9406      	str	r4, [sp, #24]
  pFilterConfig.PromiscuousMode = ENABLE;
 8000d4c:	e9cd 0303 	strd	r0, r3, [sp, #12]
  HAL_ETH_SetMACFilterConfig(&EthHandle, &pFilterConfig);
 8000d50:	4630      	mov	r0, r6
 8000d52:	f004 f94b 	bl	8004fec <HAL_ETH_SetMACFilterConfig>
  CLEAR_BIT(EthHandle.Instance->MACIER, ETH_MACIER_TSIE);
 8000d56:	6833      	ldr	r3, [r6, #0]
  WRITE_REG(EthHandle.Instance->MACSSIR, 43 << 16);
 8000d58:	f44f 102c 	mov.w	r0, #2818048	@ 0x2b0000
  WRITE_REG(EthHandle.Instance->MACTSAR, PTP_ADDEND);
 8000d5c:	4964      	ldr	r1, [pc, #400]	@ (8000ef0 <ethernetif_init+0x248>)
  CLEAR_BIT(EthHandle.Instance->MACIER, ETH_MACIER_TSIE);
 8000d5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8000d62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENA);
 8000d6a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSVER2ENA);
 8000d76:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000d7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d7e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  WRITE_REG(EthHandle.Instance->MACSSIR, 43 << 16);
 8000d82:	f8c3 0b04 	str.w	r0, [r3, #2820]	@ 0xb04
  WRITE_REG(EthHandle.Instance->MACTSAR, PTP_ADDEND);
 8000d86:	f8c3 1b18 	str.w	r1, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000d8a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  while (READ_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG))
 8000d96:	f8d3 4b00 	ldr.w	r4, [r3, #2816]	@ 0xb00
 8000d9a:	f014 0420 	ands.w	r4, r4, #32
 8000d9e:	d1fa      	bne.n	8000d96 <ethernetif_init+0xee>
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000da0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
  EthHandle.IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8000da4:	2701      	movs	r7, #1
  HAL_ETH_SetDMAConfig(&EthHandle, &dma_config);
 8000da6:	a907      	add	r1, sp, #28
 8000da8:	4849      	ldr	r0, [pc, #292]	@ (8000ed0 <ethernetif_init+0x228>)
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000daa:	f042 0202 	orr.w	r2, r2, #2
  dma_config.DMAArbitration = ETH_DMAARBITRATION_TX1_RX1;
 8000dae:	9407      	str	r4, [sp, #28]
  dma_config.BurstMode = ETH_BURSTLENGTH_UNSPECIFIED;
 8000db0:	9409      	str	r4, [sp, #36]	@ 0x24
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000db2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  EthHandle.Instance->MACSTSUR = 0;
 8000db6:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = 0;
 8000dba:	f8c3 4b14 	str.w	r4, [r3, #2836]	@ 0xb14
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000dbe:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
  dma_config.MaximumSegmentSize = 0;
 8000dc2:	940f      	str	r4, [sp, #60]	@ 0x3c
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000dc4:	f042 0204 	orr.w	r2, r2, #4
  dma_config.AddressAlignedBeats = ENABLE;
 8000dc8:	f88d 7020 	strb.w	r7, [sp, #32]
  dma_config.RebuildINCRxBurst = ENABLE;  /// ???
 8000dcc:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000dd0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  dma_config.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000dd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  EthHandle.IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8000dd8:	f8c6 70b4 	str.w	r7, [r6, #180]	@ 0xb4
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ddc:	4e45      	ldr	r6, [pc, #276]	@ (8000ef4 <ethernetif_init+0x24c>)
  dma_config.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000dde:	930b      	str	r3, [sp, #44]	@ 0x2c
  dma_config.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000de0:	930d      	str	r3, [sp, #52]	@ 0x34
  dma_config.SecondPacketOperate = ENABLE;
 8000de2:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  dma_config.FlushRxPacket = ENABLE;
 8000de6:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
  HAL_ETH_SetDMAConfig(&EthHandle, &dma_config);
 8000dea:	f003 ff8f 	bl	8004d0c <HAL_ETH_SetDMAConfig>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000dee:	2234      	movs	r2, #52	@ 0x34
 8000df0:	4621      	mov	r1, r4
 8000df2:	4630      	mov	r0, r6
 8000df4:	f015 fcf4 	bl	80167e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000df8:	2321      	movs	r3, #33	@ 0x21
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	4621      	mov	r1, r4
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000dfe:	f846 3c04 	str.w	r3, [r6, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e02:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000e06:	4638      	mov	r0, r7
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e08:	6133      	str	r3, [r6, #16]
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000e0a:	f008 f967 	bl	80090dc <osSemaphoreNew>
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef8 <ethernetif_init+0x250>)
 8000e10:	4602      	mov	r2, r0
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000e12:	4621      	mov	r1, r4
 8000e14:	4638      	mov	r0, r7
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000e16:	601a      	str	r2, [r3, #0]
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000e18:	4622      	mov	r2, r4
 8000e1a:	f008 f95f 	bl	80090dc <osSemaphoreNew>
 8000e1e:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <ethernetif_init+0x254>)
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000e20:	4621      	mov	r1, r4
 8000e22:	2220      	movs	r2, #32
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000e24:	6018      	str	r0, [r3, #0]
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000e26:	a811      	add	r0, sp, #68	@ 0x44
 8000e28:	f015 fcda 	bl	80167e0 <memset>
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 8000e2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  attributes.name = "EthIf";
 8000e30:	4933      	ldr	r1, [pc, #204]	@ (8000f00 <ethernetif_init+0x258>)
  osThreadNew(ethernetif_input, netif, &attributes);
 8000e32:	aa10      	add	r2, sp, #64	@ 0x40
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 8000e34:	9315      	str	r3, [sp, #84]	@ 0x54
  attributes.priority = osPriorityRealtime;
 8000e36:	2330      	movs	r3, #48	@ 0x30
  attributes.name = "EthIf";
 8000e38:	9110      	str	r1, [sp, #64]	@ 0x40
  osThreadNew(ethernetif_input, netif, &attributes);
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4831      	ldr	r0, [pc, #196]	@ (8000f04 <ethernetif_init+0x25c>)
  attributes.priority = osPriorityRealtime;
 8000e3e:	9316      	str	r3, [sp, #88]	@ 0x58
  osThreadNew(ethernetif_input, netif, &attributes);
 8000e40:	f008 f85a 	bl	8008ef8 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000e44:	4930      	ldr	r1, [pc, #192]	@ (8000f08 <ethernetif_init+0x260>)
 8000e46:	4831      	ldr	r0, [pc, #196]	@ (8000f0c <ethernetif_init+0x264>)
 8000e48:	f002 fe6c 	bl	8003b24 <LAN8742_RegisterBusIO>
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000e4c:	482f      	ldr	r0, [pc, #188]	@ (8000f0c <ethernetif_init+0x264>)
 8000e4e:	f002 fe83 	bl	8003b58 <LAN8742_Init>
 8000e52:	bb18      	cbnz	r0, 8000e9c <ethernetif_init+0x1f4>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000e54:	482d      	ldr	r0, [pc, #180]	@ (8000f0c <ethernetif_init+0x264>)
 8000e56:	f002 feb3 	bl	8003bc0 <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000e5a:	2801      	cmp	r0, #1
 8000e5c:	dd1e      	ble.n	8000e9c <ethernetif_init+0x1f4>
    switch (PHYLinkState)
 8000e5e:	3803      	subs	r0, #3
 8000e60:	2802      	cmp	r0, #2
 8000e62:	d824      	bhi.n	8000eae <ethernetif_init+0x206>
 8000e64:	4a2a      	ldr	r2, [pc, #168]	@ (8000f10 <ethernetif_init+0x268>)
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <ethernetif_init+0x26c>)
 8000e68:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8000e6c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000e70:	a919      	add	r1, sp, #100	@ 0x64
 8000e72:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <ethernetif_init+0x228>)
 8000e74:	f003 fe72 	bl	8004b5c <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000e78:	a919      	add	r1, sp, #100	@ 0x64
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <ethernetif_init+0x228>)
    MACConf.Speed = speed;
 8000e7c:	e9cd 461e 	strd	r4, r6, [sp, #120]	@ 0x78
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000e80:	f003 ff36 	bl	8004cf0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000e84:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <ethernetif_init+0x228>)
 8000e86:	f003 fb91 	bl	80045ac <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f00f f9e2 	bl	8010254 <netif_set_up>
    netif_set_link_up(netif);
 8000e90:	4628      	mov	r0, r5
 8000e92:	f00f fa15 	bl	80102c0 <netif_set_link_up>
}
 8000e96:	2000      	movs	r0, #0
 8000e98:	b033      	add	sp, #204	@ 0xcc
 8000e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_link_down(netif);
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f00f fa35 	bl	801030c <netif_set_link_down>
    netif_set_down(netif);
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f00f f9f0 	bl	8010288 <netif_set_down>
}
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	b033      	add	sp, #204	@ 0xcc
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 8000eae:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8000eb2:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8000eb6:	e7db      	b.n	8000e70 <ethernetif_init+0x1c8>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <ethernetif_init+0x270>)
 8000eba:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 8000ebe:	4917      	ldr	r1, [pc, #92]	@ (8000f1c <ethernetif_init+0x274>)
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <ethernetif_init+0x278>)
 8000ec2:	f015 fafb 	bl	80164bc <iprintf>
 8000ec6:	e6f5      	b.n	8000cb4 <ethernetif_init+0xc>
 8000ec8:	0800dff9 	.word	0x0800dff9
 8000ecc:	0800094d 	.word	0x0800094d
 8000ed0:	20000308 	.word	0x20000308
 8000ed4:	200003e0 	.word	0x200003e0
 8000ed8:	08018788 	.word	0x08018788
 8000edc:	40028000 	.word	0x40028000
 8000ee0:	30000000 	.word	0x30000000
 8000ee4:	30000200 	.word	0x30000200
 8000ee8:	08018888 	.word	0x08018888
 8000eec:	000205dc 	.word	0x000205dc
 8000ef0:	312c538a 	.word	0x312c538a
 8000ef4:	200002d4 	.word	0x200002d4
 8000ef8:	200003d4 	.word	0x200003d4
 8000efc:	200003d0 	.word	0x200003d0
 8000f00:	08018820 	.word	0x08018820
 8000f04:	08000b29 	.word	0x08000b29
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200002b0 	.word	0x200002b0
 8000f10:	0801887c 	.word	0x0801887c
 8000f14:	08018870 	.word	0x08018870
 8000f18:	08018790 	.word	0x08018790
 8000f1c:	080187e8 	.word	0x080187e8
 8000f20:	080187f8 	.word	0x080187f8

08000f24 <sys_now>:
  return HAL_GetTick();
 8000f24:	f002 bf88 	b.w	8003e38 <HAL_GetTick>

08000f28 <HAL_ETH_MspInit>:
{
 8000f28:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4c40      	ldr	r4, [pc, #256]	@ (800102c <HAL_ETH_MspInit+0x104>)
{
 8000f2c:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000f2e:	2500      	movs	r5, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f32:	a908      	add	r1, sp, #32
 8000f34:	483e      	ldr	r0, [pc, #248]	@ (8001030 <HAL_ETH_MspInit+0x108>)
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000f36:	950a      	str	r5, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f54:	4313      	orrs	r3, r2
 8000f56:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f5e:	4013      	ands	r3, r2
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	9303      	str	r3, [sp, #12]
 8000f7a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f84:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000f8e:	220b      	movs	r2, #11
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	920c      	str	r2, [sp, #48]	@ 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000f96:	2286      	movs	r2, #134	@ 0x86
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f98:	9304      	str	r3, [sp, #16]
 8000f9a:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fa2:	f004 f861 	bl	8005068 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000faa:	a908      	add	r1, sp, #32
 8000fac:	4821      	ldr	r0, [pc, #132]	@ (8001034 <HAL_ETH_MspInit+0x10c>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000fae:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000fb0:	f004 f85a 	bl	8005068 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000fb4:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000fb6:	a908      	add	r1, sp, #32
 8000fb8:	481f      	ldr	r0, [pc, #124]	@ (8001038 <HAL_ETH_MspInit+0x110>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000fba:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000fbc:	f004 f854 	bl	8005068 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000fc0:	f642 0304 	movw	r3, #10244	@ 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000fc4:	a908      	add	r1, sp, #32
 8000fc6:	481d      	ldr	r0, [pc, #116]	@ (800103c <HAL_ETH_MspInit+0x114>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000fc8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000fca:	f004 f84d 	bl	8005068 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000fce:	462a      	mov	r2, r5
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	203d      	movs	r0, #61	@ 0x3d
 8000fd4:	f002 ff5a 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000fd8:	203d      	movs	r0, #61	@ 0x3d
 8000fda:	f002 ff93 	bl	8003f04 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fde:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8000fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fe6:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8000fea:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8000fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ff2:	9305      	str	r3, [sp, #20]
 8000ff4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ff6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffe:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8001002:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8001006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100a:	9306      	str	r3, [sp, #24]
 800100c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 800100e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8001012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001016:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800101a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	9307      	str	r3, [sp, #28]
 8001024:	9b07      	ldr	r3, [sp, #28]
}
 8001026:	b00f      	add	sp, #60	@ 0x3c
 8001028:	bd30      	pop	{r4, r5, pc}
 800102a:	bf00      	nop
 800102c:	58024400 	.word	0x58024400
 8001030:	58020000 	.word	0x58020000
 8001034:	58020400 	.word	0x58020400
 8001038:	58020800 	.word	0x58020800
 800103c:	58021800 	.word	0x58021800

08001040 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8001040:	4b01      	ldr	r3, [pc, #4]	@ (8001048 <HAL_ETH_RxCpltCallback+0x8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f008 b8c8 	b.w	80091d8 <osSemaphoreRelease>
 8001048:	200003d4 	.word	0x200003d4

0800104c <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 800104c:	4b01      	ldr	r3, [pc, #4]	@ (8001054 <HAL_ETH_TxCpltCallback+0x8>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	f008 b8c2 	b.w	80091d8 <osSemaphoreRelease>
 8001054:	200003d0 	.word	0x200003d0

08001058 <HAL_ETH_ErrorCallback>:
{
 8001058:	b510      	push	{r4, lr}
  error_flags = HAL_ETH_GetDMAError(heth);
 800105a:	f004 f801 	bl	8005060 <HAL_ETH_GetDMAError>
 800105e:	4604      	mov	r4, r0
  printf("Ex %lx\r\n", error_flags);
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <HAL_ETH_ErrorCallback+0x40>)
 8001062:	4621      	mov	r1, r4
 8001064:	f015 fa2a 	bl	80164bc <iprintf>
  if((error_flags & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001068:	0622      	lsls	r2, r4, #24
 800106a:	d402      	bmi.n	8001072 <HAL_ETH_ErrorCallback+0x1a>
  if((error_flags & ETH_DMACSR_TBU) == ETH_DMACSR_TBU)
 800106c:	0763      	lsls	r3, r4, #29
 800106e:	d409      	bmi.n	8001084 <HAL_ETH_ErrorCallback+0x2c>
}
 8001070:	bd10      	pop	{r4, pc}
	printf("RBU\r\n");
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <HAL_ETH_ErrorCallback+0x44>)
 8001074:	f015 fa8a 	bl	801658c <puts>
    osSemaphoreRelease(RxPktSemaphore);
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_ETH_ErrorCallback+0x48>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	f008 f8ac 	bl	80091d8 <osSemaphoreRelease>
  if((error_flags & ETH_DMACSR_TBU) == ETH_DMACSR_TBU)
 8001080:	0763      	lsls	r3, r4, #29
 8001082:	d5f5      	bpl.n	8001070 <HAL_ETH_ErrorCallback+0x18>
	printf("TBU\r\n");
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <HAL_ETH_ErrorCallback+0x4c>)
 8001086:	f015 fa81 	bl	801658c <puts>
    osSemaphoreRelease(TxPktSemaphore);
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <HAL_ETH_ErrorCallback+0x50>)
}
 800108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osSemaphoreRelease(TxPktSemaphore);
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f008 b8a1 	b.w	80091d8 <osSemaphoreRelease>
 8001096:	bf00      	nop
 8001098:	08018828 	.word	0x08018828
 800109c:	08018834 	.word	0x08018834
 80010a0:	200003d4 	.word	0x200003d4
 80010a4:	0801883c 	.word	0x0801883c
 80010a8:	200003d0 	.word	0x200003d0

080010ac <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 80010ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b0:	b09b      	sub	sp, #108	@ 0x6c
  ETH_MACConfigTypeDef MACConf = {0};
 80010b2:	2700      	movs	r7, #0
{
 80010b4:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 80010b6:	2264      	movs	r2, #100	@ 0x64
 80010b8:	2100      	movs	r1, #0
 80010ba:	4668      	mov	r0, sp
 80010bc:	46b9      	mov	r9, r7
  int32_t PHYLinkState = 0U;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80010be:	46b8      	mov	r8, r7
 80010c0:	f8df b0b8 	ldr.w	fp, [pc, #184]	@ 800117c <ethernet_link_thread+0xd0>
  ETH_MACConfigTypeDef MACConf = {0};
 80010c4:	f015 fb8c 	bl	80167e0 <memset>
  struct netif *netif = (struct netif *) argument;
 80010c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001180 <ethernet_link_thread+0xd4>

  for(;;)
  {

    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80010cc:	4d25      	ldr	r5, [pc, #148]	@ (8001164 <ethernet_link_thread+0xb8>)
      }

      if(linkchanged)
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80010ce:	4e26      	ldr	r6, [pc, #152]	@ (8001168 <ethernet_link_thread+0xbc>)
 80010d0:	e026      	b.n	8001120 <ethernet_link_thread+0x74>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80010d2:	2801      	cmp	r0, #1
 80010d4:	dd38      	ble.n	8001148 <ethernet_link_thread+0x9c>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80010d6:	075a      	lsls	r2, r3, #29
 80010d8:	d41f      	bmi.n	800111a <ethernet_link_thread+0x6e>
      switch (PHYLinkState)
 80010da:	3802      	subs	r0, #2
 80010dc:	2803      	cmp	r0, #3
 80010de:	d82f      	bhi.n	8001140 <ethernet_link_thread+0x94>
 80010e0:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 80010e4:	f85a 9020 	ldr.w	r9, [sl, r0, lsl #2]
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80010e8:	4669      	mov	r1, sp
 80010ea:	4630      	mov	r0, r6
 80010ec:	f003 fd36 	bl	8004b5c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
        MACConf.Speed = speed;
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80010f0:	4669      	mov	r1, sp
 80010f2:	4630      	mov	r0, r6
        HAL_ETH_Start_IT(&EthHandle);
        netifapi_netif_set_up(netif);
        netifapi_netif_set_link_up(netif);
 80010f4:	f04f 0801 	mov.w	r8, #1
        MACConf.Speed = speed;
 80010f8:	e9cd 7905 	strd	r7, r9, [sp, #20]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80010fc:	f003 fdf8 	bl	8004cf0 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8001100:	4630      	mov	r0, r6
 8001102:	f003 fa53 	bl	80045ac <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 8001106:	2200      	movs	r2, #0
 8001108:	4918      	ldr	r1, [pc, #96]	@ (800116c <ethernet_link_thread+0xc0>)
 800110a:	4620      	mov	r0, r4
 800110c:	f008 fc84 	bl	8009a18 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8001110:	2200      	movs	r2, #0
 8001112:	4917      	ldr	r1, [pc, #92]	@ (8001170 <ethernet_link_thread+0xc4>)
 8001114:	4620      	mov	r0, r4
 8001116:	f008 fc7f 	bl	8009a18 <netifapi_netif_common>
      }
    }

    osDelay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f007 ff48 	bl	8008fb0 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001120:	4628      	mov	r0, r5
 8001122:	f002 fd4d 	bl	8003bc0 <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001126:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800112a:	0759      	lsls	r1, r3, #29
 800112c:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8001130:	d4cf      	bmi.n	80010d2 <ethernet_link_thread+0x26>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001132:	07d3      	lsls	r3, r2, #31
 8001134:	d4f1      	bmi.n	800111a <ethernet_link_thread+0x6e>
 8001136:	2801      	cmp	r0, #1
 8001138:	ddef      	ble.n	800111a <ethernet_link_thread+0x6e>
      switch (PHYLinkState)
 800113a:	3802      	subs	r0, #2
 800113c:	2803      	cmp	r0, #3
 800113e:	d9cf      	bls.n	80010e0 <ethernet_link_thread+0x34>
      if(linkchanged)
 8001140:	f1b8 0f00 	cmp.w	r8, #0
 8001144:	d0e9      	beq.n	800111a <ethernet_link_thread+0x6e>
 8001146:	e7cf      	b.n	80010e8 <ethernet_link_thread+0x3c>
      HAL_ETH_Stop_IT(&EthHandle);
 8001148:	4630      	mov	r0, r6
 800114a:	f003 fa6f 	bl	800462c <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 800114e:	2200      	movs	r2, #0
 8001150:	4908      	ldr	r1, [pc, #32]	@ (8001174 <ethernet_link_thread+0xc8>)
 8001152:	4620      	mov	r0, r4
 8001154:	f008 fc60 	bl	8009a18 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 8001158:	2200      	movs	r2, #0
 800115a:	4907      	ldr	r1, [pc, #28]	@ (8001178 <ethernet_link_thread+0xcc>)
 800115c:	4620      	mov	r0, r4
 800115e:	f008 fc5b 	bl	8009a18 <netifapi_netif_common>
 8001162:	e7da      	b.n	800111a <ethernet_link_thread+0x6e>
 8001164:	200002b0 	.word	0x200002b0
 8001168:	20000308 	.word	0x20000308
 800116c:	08010255 	.word	0x08010255
 8001170:	080102c1 	.word	0x080102c1
 8001174:	08010289 	.word	0x08010289
 8001178:	0801030d 	.word	0x0801030d
 800117c:	08018860 	.word	0x08018860
 8001180:	08018850 	.word	0x08018850

08001184 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	4605      	mov	r5, r0
 8001188:	b082      	sub	sp, #8
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800118a:	480f      	ldr	r0, [pc, #60]	@ (80011c8 <HAL_ETH_RxAllocateCallback+0x44>)
 800118c:	f00e fea2 	bl	800fed4 <memp_malloc_pool>
  if (p)
 8001190:	4604      	mov	r4, r0
 8001192:	b180      	cbz	r0, 80011b6 <HAL_ETH_RxAllocateCallback+0x32>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001194:	f100 0620 	add.w	r6, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_ETH_RxAllocateCallback+0x48>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800119a:	2100      	movs	r1, #0
 800119c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80011a0:	602e      	str	r6, [r5, #0]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80011a2:	2241      	movs	r2, #65	@ 0x41
    p->custom_free_function = pbuf_free_custom;
 80011a4:	61a3      	str	r3, [r4, #24]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80011a6:	4623      	mov	r3, r4
 80011a8:	9001      	str	r0, [sp, #4]
 80011aa:	4608      	mov	r0, r1
 80011ac:	9600      	str	r6, [sp, #0]
 80011ae:	f00f f91f 	bl	80103f0 <pbuf_alloced_custom>
  {
	  printf("AllocEr\r\n");
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 80011b2:	b002      	add	sp, #8
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
	  printf("AllocEr\r\n");
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <HAL_ETH_RxAllocateCallback+0x4c>)
 80011b8:	f015 f9e8 	bl	801658c <puts>
    RxAllocStatus = RX_ALLOC_ERROR;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_ETH_RxAllocateCallback+0x50>)
 80011be:	2201      	movs	r2, #1
    *buff = NULL;
 80011c0:	602c      	str	r4, [r5, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	b002      	add	sp, #8
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
 80011c8:	08018888 	.word	0x08018888
 80011cc:	08000af9 	.word	0x08000af9
 80011d0:	08018844 	.word	0x08018844
 80011d4:	200003d8 	.word	0x200003d8

080011d8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80011d8:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 80011da:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80011dc:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 80011e0:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 80011e4:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 80011e8:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 80011ec:	6805      	ldr	r5, [r0, #0]
 80011ee:	b1f5      	cbz	r5, 800122e <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80011f0:	680d      	ldr	r5, [r1, #0]
 80011f2:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 80011f4:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80011f6:	6801      	ldr	r1, [r0, #0]
 80011f8:	b129      	cbz	r1, 8001206 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80011fa:	8908      	ldrh	r0, [r1, #8]
 80011fc:	4418      	add	r0, r3
 80011fe:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001200:	6809      	ldr	r1, [r1, #0]
 8001202:	2900      	cmp	r1, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ETH_RxLinkCallback+0x22>
    if ( dsize > 0 ) { 
 8001206:	b183      	cbz	r3, 800122a <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001208:	f002 011f 	and.w	r1, r2, #31
 800120c:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 800120e:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001212:	4808      	ldr	r0, [pc, #32]	@ (8001234 <HAL_ETH_RxLinkCallback+0x5c>)
 8001214:	4411      	add	r1, r2
 8001216:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800121a:	3220      	adds	r2, #32
      } while ( op_size > 0 );
 800121c:	1a8b      	subs	r3, r1, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	dcf9      	bgt.n	8001216 <HAL_ETH_RxLinkCallback+0x3e>
 8001222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001226:	f3bf 8f6f 	isb	sy
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
}
 800122a:	bc30      	pop	{r4, r5}
 800122c:	4770      	bx	lr
    *ppStart = p;
 800122e:	6004      	str	r4, [r0, #0]
 8001230:	e7e0      	b.n	80011f4 <HAL_ETH_RxLinkCallback+0x1c>
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
  pbuf_free((struct pbuf *)buff);
 8001238:	f00f b98c 	b.w	8010554 <pbuf_free>

0800123c <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 800123c:	b510      	push	{r4, lr}
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 800123e:	2420      	movs	r4, #32
{
 8001240:	b082      	sub	sp, #8
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 8001242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001246:	2200      	movs	r2, #0
 8001248:	4903      	ldr	r1, [pc, #12]	@ (8001258 <http_server_socket_init+0x1c>)
 800124a:	9400      	str	r4, [sp, #0]
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <http_server_socket_init+0x20>)
 800124e:	f014 fbad 	bl	80159ac <sys_thread_new>
}
 8001252:	b002      	add	sp, #8
 8001254:	bd10      	pop	{r4, pc}
 8001256:	bf00      	nop
 8001258:	08001475 	.word	0x08001475
 800125c:	08018894 	.word	0x08018894

08001260 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 8001260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001264:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001268:	2100      	movs	r1, #0

  memset(PAGE_BODY, 0,512);
 800126a:	f44f 7200 	mov.w	r2, #512	@ 0x200
{
 800126e:	4606      	mov	r6, r0
  memset(PAGE_BODY, 0,512);
 8001270:	ad04      	add	r5, sp, #16
  portCHAR pagehits[10] = {0};
 8001272:	f8ad 100c 	strh.w	r1, [sp, #12]

  /* Update the hit count */
  nPageHits++;
  sprintf( pagehits, "%d", (int)nPageHits );
  strcat(PAGE_BODY, pagehits);
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 8001276:	4c44      	ldr	r4, [pc, #272]	@ (8001388 <DynWebPage+0x128>)
  memset(PAGE_BODY, 0,512);
 8001278:	4628      	mov	r0, r5
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 800127a:	f104 0720 	add.w	r7, r4, #32
  portCHAR pagehits[10] = {0};
 800127e:	e9cd 1101 	strd	r1, r1, [sp, #4]
  memset(PAGE_BODY, 0,512);
 8001282:	f015 faad 	bl	80167e0 <memset>
  nPageHits++;
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <DynWebPage+0x12c>)
  sprintf( pagehits, "%d", (int)nPageHits );
 8001288:	4941      	ldr	r1, [pc, #260]	@ (8001390 <DynWebPage+0x130>)
 800128a:	a801      	add	r0, sp, #4
  nPageHits++;
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	3201      	adds	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8001292:	f015 f983 	bl	801659c <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001296:	4628      	mov	r0, r5
 8001298:	f7ff f89a 	bl	80003d0 <strlen>
 800129c:	a901      	add	r1, sp, #4
 800129e:	4428      	add	r0, r5
 80012a0:	f015 fab8 	bl	8016814 <stpcpy>
 80012a4:	4684      	mov	ip, r0
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 80012a6:	eba0 0805 	sub.w	r8, r0, r5
 80012aa:	46a6      	mov	lr, r4
 80012ac:	f10c 0c10 	add.w	ip, ip, #16
 80012b0:	3410      	adds	r4, #16
 80012b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80012b6:	45be      	cmp	lr, r7
 80012b8:	f84c 0c10 	str.w	r0, [ip, #-16]
 80012bc:	f84c 1c0c 	str.w	r1, [ip, #-12]
 80012c0:	f84c 2c08 	str.w	r2, [ip, #-8]
 80012c4:	f84c 3c04 	str.w	r3, [ip, #-4]
 80012c8:	d1ef      	bne.n	80012aa <DynWebPage+0x4a>
 80012ca:	4623      	mov	r3, r4
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 80012cc:	f108 0e2e 	add.w	lr, r8, #46	@ 0x2e
 80012d0:	4f30      	ldr	r7, [pc, #192]	@ (8001394 <DynWebPage+0x134>)
 80012d2:	44ae      	add	lr, r5
 80012d4:	f107 0930 	add.w	r9, r7, #48	@ 0x30
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 80012d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f8cc 0000 	str.w	r0, [ip]
 80012e0:	f8cc 1004 	str.w	r1, [ip, #4]
 80012e4:	f8cc 2008 	str.w	r2, [ip, #8]
 80012e8:	f8ac 300c 	strh.w	r3, [ip, #12]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 80012ec:	463c      	mov	r4, r7
 80012ee:	f10e 0e10 	add.w	lr, lr, #16
 80012f2:	3710      	adds	r7, #16
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	454c      	cmp	r4, r9
 80012f8:	f84e 0c10 	str.w	r0, [lr, #-16]
 80012fc:	f84e 1c0c 	str.w	r1, [lr, #-12]
 8001300:	f84e 2c08 	str.w	r2, [lr, #-8]
 8001304:	f84e 3c04 	str.w	r3, [lr, #-4]
 8001308:	d1f0      	bne.n	80012ec <DynWebPage+0x8c>
 800130a:	6838      	ldr	r0, [r7, #0]
    
  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 800130c:	f108 0862 	add.w	r8, r8, #98	@ 0x62
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 8001310:	793a      	ldrb	r2, [r7, #4]
 8001312:	f8ce 0000 	str.w	r0, [lr]
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001316:	eb05 0008 	add.w	r0, r5, r8
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 800131a:	f88e 2004 	strb.w	r2, [lr, #4]
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 800131e:	4f1e      	ldr	r7, [pc, #120]	@ (8001398 <DynWebPage+0x138>)
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001320:	f007 fade 	bl	80088e0 <vTaskList>
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff f853 	bl	80003d0 <strlen>
 800132a:	f107 0830 	add.w	r8, r7, #48	@ 0x30
 800132e:	4686      	mov	lr, r0
 8001330:	182c      	adds	r4, r5, r0
 8001332:	46bc      	mov	ip, r7
 8001334:	3410      	adds	r4, #16
 8001336:	3710      	adds	r7, #16
 8001338:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800133c:	45c4      	cmp	ip, r8
 800133e:	f844 0c10 	str.w	r0, [r4, #-16]
 8001342:	f844 1c0c 	str.w	r1, [r4, #-12]
 8001346:	f844 2c08 	str.w	r2, [r4, #-8]
 800134a:	f844 3c04 	str.w	r3, [r4, #-4]
 800134e:	d1f0      	bne.n	8001332 <DynWebPage+0xd2>
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001350:	f10e 0e33 	add.w	lr, lr, #51	@ 0x33
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 8001354:	6838      	ldr	r0, [r7, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001356:	2248      	movs	r2, #72	@ 0x48
 8001358:	4910      	ldr	r1, [pc, #64]	@ (800139c <DynWebPage+0x13c>)
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 800135a:	6020      	str	r0, [r4, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 800135c:	eb05 000e 	add.w	r0, r5, lr
 8001360:	f015 fad9 	bl	8016916 <memcpy>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001364:	f240 624a 	movw	r2, #1610	@ 0x64a
 8001368:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <DynWebPage+0x140>)
 800136a:	4630      	mov	r0, r6
 800136c:	f00a fe20 	bl	800bfb0 <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff f82d 	bl	80003d0 <strlen>
 8001376:	4629      	mov	r1, r5
 8001378:	4602      	mov	r2, r0
 800137a:	4630      	mov	r0, r6
 800137c:	f00a fe18 	bl	800bfb0 <lwip_write>
}
 8001380:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8001384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001388:	080188a0 	.word	0x080188a0
 800138c:	200003e4 	.word	0x200003e4
 8001390:	0801889c 	.word	0x0801889c
 8001394:	080188d0 	.word	0x080188d0
 8001398:	08018908 	.word	0x08018908
 800139c:	0801893c 	.word	0x0801893c
 80013a0:	08018a24 	.word	0x08018a24

080013a4 <http_server_serve>:
{
 80013a4:	b510      	push	{r4, lr}
 80013a6:	f5ad 6dbe 	sub.w	sp, sp, #1520	@ 0x5f0
  ret = read(conn, recv_buffer, buflen); 
 80013aa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
{
 80013ae:	4604      	mov	r4, r0
  ret = read(conn, recv_buffer, buflen); 
 80013b0:	a905      	add	r1, sp, #20
 80013b2:	f00a fcbd 	bl	800bd30 <lwip_read>
  if(ret < 0) return;
 80013b6:	2800      	cmp	r0, #0
 80013b8:	db32      	blt.n	8001420 <http_server_serve+0x7c>
  if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/ST.gif",27)==0)
 80013ba:	221b      	movs	r2, #27
 80013bc:	4922      	ldr	r1, [pc, #136]	@ (8001448 <http_server_serve+0xa4>)
 80013be:	a805      	add	r0, sp, #20
 80013c0:	f015 fa16 	bl	80167f0 <strncmp>
 80013c4:	b1e8      	cbz	r0, 8001402 <http_server_serve+0x5e>
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 80013c6:	221e      	movs	r2, #30
 80013c8:	4920      	ldr	r1, [pc, #128]	@ (800144c <http_server_serve+0xa8>)
 80013ca:	a805      	add	r0, sp, #20
 80013cc:	f015 fa10 	bl	80167f0 <strncmp>
 80013d0:	b368      	cbz	r0, 800142e <http_server_serve+0x8a>
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 80013d2:	221d      	movs	r2, #29
 80013d4:	491e      	ldr	r1, [pc, #120]	@ (8001450 <http_server_serve+0xac>)
 80013d6:	a805      	add	r0, sp, #20
 80013d8:	f015 fa0a 	bl	80167f0 <strncmp>
 80013dc:	b388      	cbz	r0, 8001442 <http_server_serve+0x9e>
  else if(strncmp((char *)recv_buffer, "GET /STM32H7xxTASKS.html", 24) == 0)
 80013de:	2218      	movs	r2, #24
 80013e0:	491c      	ldr	r1, [pc, #112]	@ (8001454 <http_server_serve+0xb0>)
 80013e2:	a805      	add	r0, sp, #20
 80013e4:	f015 fa04 	bl	80167f0 <strncmp>
 80013e8:	b1e8      	cbz	r0, 8001426 <http_server_serve+0x82>
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 80013ea:	2213      	movs	r2, #19
 80013ec:	491a      	ldr	r1, [pc, #104]	@ (8001458 <http_server_serve+0xb4>)
 80013ee:	a805      	add	r0, sp, #20
 80013f0:	f015 f9fe 	bl	80167f0 <strncmp>
 80013f4:	b318      	cbz	r0, 800143e <http_server_serve+0x9a>
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <http_server_serve+0xb8>)
 80013f8:	9a05      	ldr	r2, [sp, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d019      	beq.n	8001432 <http_server_serve+0x8e>
    fs_open(&file, "/404.html");
 80013fe:	4918      	ldr	r1, [pc, #96]	@ (8001460 <http_server_serve+0xbc>)
 8001400:	e000      	b.n	8001404 <http_server_serve+0x60>
    fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8001402:	4918      	ldr	r1, [pc, #96]	@ (8001464 <http_server_serve+0xc0>)
    fs_open(&file, "/STM32H7xx.html"); 
 8001404:	4668      	mov	r0, sp
 8001406:	f014 faf9 	bl	80159fc <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 800140a:	4620      	mov	r0, r4
 800140c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8001410:	f00a fdce 	bl	800bfb0 <lwip_write>
    fs_close(&file);
 8001414:	4668      	mov	r0, sp
 8001416:	f014 fb17 	bl	8015a48 <fs_close>
  close(conn);
 800141a:	4620      	mov	r0, r4
 800141c:	f00a fb42 	bl	800baa4 <lwip_close>
}
 8001420:	f50d 6dbe 	add.w	sp, sp, #1520	@ 0x5f0
 8001424:	bd10      	pop	{r4, pc}
    DynWebPage(conn);
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff ff1a 	bl	8001260 <DynWebPage>
 800142c:	e7f5      	b.n	800141a <http_server_serve+0x76>
    fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 800142e:	490e      	ldr	r1, [pc, #56]	@ (8001468 <http_server_serve+0xc4>)
 8001430:	e7e8      	b.n	8001404 <http_server_serve+0x60>
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 8001432:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001436:	f242 032f 	movw	r3, #8239	@ 0x202f
 800143a:	429a      	cmp	r2, r3
 800143c:	d1df      	bne.n	80013fe <http_server_serve+0x5a>
    fs_open(&file, "/STM32H7xx.html"); 
 800143e:	490b      	ldr	r1, [pc, #44]	@ (800146c <http_server_serve+0xc8>)
 8001440:	e7e0      	b.n	8001404 <http_server_serve+0x60>
    fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8001442:	490b      	ldr	r1, [pc, #44]	@ (8001470 <http_server_serve+0xcc>)
 8001444:	e7de      	b.n	8001404 <http_server_serve+0x60>
 8001446:	bf00      	nop
 8001448:	08018984 	.word	0x08018984
 800144c:	080189a0 	.word	0x080189a0
 8001450:	080189c0 	.word	0x080189c0
 8001454:	080189e0 	.word	0x080189e0
 8001458:	080189fc 	.word	0x080189fc
 800145c:	20544547 	.word	0x20544547
 8001460:	08018a18 	.word	0x08018a18
 8001464:	08018988 	.word	0x08018988
 8001468:	080189a4 	.word	0x080189a4
 800146c:	08018a00 	.word	0x08018a00
 8001470:	080189c4 	.word	0x080189c4

08001474 <http_server_socket_thread>:
{
 8001474:	b510      	push	{r4, lr}
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 8001476:	2200      	movs	r2, #0
{
 8001478:	b08a      	sub	sp, #40	@ 0x28
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 800147a:	2101      	movs	r1, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f00a fd5d 	bl	800bf3c <lwip_socket>
 8001482:	1e04      	subs	r4, r0, #0
 8001484:	db1e      	blt.n	80014c4 <http_server_socket_thread+0x50>
  address.sin_family = AF_INET;
 8001486:	2302      	movs	r3, #2
  address.sin_port = htons(80);
 8001488:	2050      	movs	r0, #80	@ 0x50
  address.sin_family = AF_INET;
 800148a:	f88d 3009 	strb.w	r3, [sp, #9]
  address.sin_port = htons(80);
 800148e:	f00e f9d1 	bl	800f834 <lwip_htons>
  address.sin_addr.s_addr = INADDR_ANY;
 8001492:	2300      	movs	r3, #0
  address.sin_port = htons(80);
 8001494:	f8ad 000a 	strh.w	r0, [sp, #10]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8001498:	2210      	movs	r2, #16
 800149a:	a902      	add	r1, sp, #8
 800149c:	4620      	mov	r0, r4
  address.sin_addr.s_addr = INADDR_ANY;
 800149e:	9303      	str	r3, [sp, #12]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 80014a0:	f00a fa9e 	bl	800b9e0 <lwip_bind>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	db0d      	blt.n	80014c4 <http_server_socket_thread+0x50>
  listen(sock, 5);
 80014a8:	2105      	movs	r1, #5
 80014aa:	4620      	mov	r0, r4
 80014ac:	f00a fb74 	bl	800bb98 <lwip_listen>
  size = sizeof(remotehost);
 80014b0:	2310      	movs	r3, #16
 80014b2:	9301      	str	r3, [sp, #4]
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 80014b4:	aa01      	add	r2, sp, #4
 80014b6:	a906      	add	r1, sp, #24
 80014b8:	4620      	mov	r0, r4
 80014ba:	f00a f9c5 	bl	800b848 <lwip_accept>
    http_server_serve(newconn);
 80014be:	f7ff ff71 	bl	80013a4 <http_server_serve>
  while (1) 
 80014c2:	e7f7      	b.n	80014b4 <http_server_socket_thread+0x40>
}
 80014c4:	b00a      	add	sp, #40	@ 0x28
 80014c6:	bd10      	pop	{r4, pc}

080014c8 <StartThread>:
  * @retval None
  */
void StartThread(void* argument)
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80014c8:	2100      	movs	r1, #0
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 80014ca:	2400      	movs	r4, #0

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  attr.name = "EthLink";
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 80014cc:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 80014d0:	4e1e      	ldr	r6, [pc, #120]	@ (800154c <StartThread+0x84>)
  tcpip_init(NULL, NULL);
 80014d2:	4608      	mov	r0, r1
{
 80014d4:	b500      	push	{lr}
 80014d6:	b089      	sub	sp, #36	@ 0x24
  tcpip_init(NULL, NULL);
 80014d8:	f00a fe6a 	bl	800c1b0 <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014dc:	481c      	ldr	r0, [pc, #112]	@ (8001550 <StartThread+0x88>)
 80014de:	491d      	ldr	r1, [pc, #116]	@ (8001554 <StartThread+0x8c>)
 80014e0:	ab07      	add	r3, sp, #28
 80014e2:	aa06      	add	r2, sp, #24
 80014e4:	9400      	str	r4, [sp, #0]
  ip_addr_set_zero_ip4(&gw);
 80014e6:	9407      	str	r4, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014e8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80014ec:	a905      	add	r1, sp, #20
 80014ee:	481a      	ldr	r0, [pc, #104]	@ (8001558 <StartThread+0x90>)
  ip_addr_set_zero_ip4(&netmask);
 80014f0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014f4:	f00e fdf4 	bl	80100e0 <netif_add>
  netif_set_default(&gnetif);
 80014f8:	4817      	ldr	r0, [pc, #92]	@ (8001558 <StartThread+0x90>)
 80014fa:	f00e fea5 	bl	8010248 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 80014fe:	4816      	ldr	r0, [pc, #88]	@ (8001558 <StartThread+0x90>)
 8001500:	f7ff f9b0 	bl	8000864 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001504:	4915      	ldr	r1, [pc, #84]	@ (800155c <StartThread+0x94>)
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <StartThread+0x90>)
  attr.name = "EthLink";
 8001508:	4c15      	ldr	r4, [pc, #84]	@ (8001560 <StartThread+0x98>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800150a:	f00e ff19 	bl	8010340 <netif_set_link_callback>
  attr.name = "EthLink";
 800150e:	4915      	ldr	r1, [pc, #84]	@ (8001564 <StartThread+0x9c>)
  attr.priority = osPriorityNormal;
 8001510:	2318      	movs	r3, #24
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001512:	4622      	mov	r2, r4
 8001514:	4814      	ldr	r0, [pc, #80]	@ (8001568 <StartThread+0xa0>)
  attr.name = "EthLink";
 8001516:	6021      	str	r1, [r4, #0]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001518:	490f      	ldr	r1, [pc, #60]	@ (8001558 <StartThread+0x90>)
  attr.priority = osPriorityNormal;
 800151a:	61a3      	str	r3, [r4, #24]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 800151c:	6165      	str	r5, [r4, #20]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 800151e:	f007 fceb 	bl	8008ef8 <osThreadNew>
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <StartThread+0xa4>)
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
  attr.priority = osPriorityBelowNormal;
 8001524:	2310      	movs	r3, #16
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001526:	490c      	ldr	r1, [pc, #48]	@ (8001558 <StartThread+0x90>)
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001528:	6010      	str	r0, [r2, #0]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 800152a:	4622      	mov	r2, r4
 800152c:	4810      	ldr	r0, [pc, #64]	@ (8001570 <StartThread+0xa8>)
  attr.priority = osPriorityBelowNormal;
 800152e:	61a3      	str	r3, [r4, #24]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001530:	6165      	str	r5, [r4, #20]
  attr.name = "DHCP";
 8001532:	6026      	str	r6, [r4, #0]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001534:	f007 fce0 	bl	8008ef8 <osThreadNew>
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <StartThread+0xac>)
 800153a:	4c0f      	ldr	r4, [pc, #60]	@ (8001578 <StartThread+0xb0>)
 800153c:	6018      	str	r0, [r3, #0]
  http_server_socket_init();
 800153e:	f7ff fe7d 	bl	800123c <http_server_socket_init>
    osThreadTerminate(StartHandle);
 8001542:	6820      	ldr	r0, [r4, #0]
 8001544:	f007 fd1c 	bl	8008f80 <osThreadTerminate>
  for( ;; )
 8001548:	e7fb      	b.n	8001542 <StartThread+0x7a>
 800154a:	bf00      	nop
 800154c:	08019078 	.word	0x08019078
 8001550:	0800c0f1 	.word	0x0800c0f1
 8001554:	08000ca9 	.word	0x08000ca9
 8001558:	20000418 	.word	0x20000418
 800155c:	08000865 	.word	0x08000865
 8001560:	200003f4 	.word	0x200003f4
 8001564:	08019070 	.word	0x08019070
 8001568:	080010ad 	.word	0x080010ad
 800156c:	200003ec 	.word	0x200003ec
 8001570:	0800087d 	.word	0x0800087d
 8001574:	200003e8 	.word	0x200003e8
 8001578:	200003f0 	.word	0x200003f0

0800157c <main>:
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09e      	sub	sp, #120	@ 0x78
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001580:	f240 1401 	movw	r4, #257	@ 0x101
  HAL_MPU_Disable();
 8001584:	f002 fccc 	bl	8003f20 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x00;
 8001588:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800158a:	2201      	movs	r2, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800158c:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001590:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.BaseAddress = 0x00;
 8001592:	910c      	str	r1, [sp, #48]	@ 0x30
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001594:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001598:	930d      	str	r3, [sp, #52]	@ 0x34
 800159a:	940e      	str	r4, [sp, #56]	@ 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800159c:	f002 fcde 	bl	8003f5c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30000000;
 80015a0:	f04f 5140 	mov.w	r1, #805306368	@ 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80015a4:	4a6f      	ldr	r2, [pc, #444]	@ (8001764 <main+0x1e8>)
 80015a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015aa:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015ac:	f8ad 402c 	strh.w	r4, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80015b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80015b2:	e9cd 120c 	strd	r1, r2, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015b6:	f002 fcd1 	bl	8003f5c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30004000;
 80015ba:	486b      	ldr	r0, [pc, #428]	@ (8001768 <main+0x1ec>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80015bc:	4a6b      	ldr	r2, [pc, #428]	@ (800176c <main+0x1f0>)
 80015be:	f44f 7380 	mov.w	r3, #256	@ 0x100
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015c2:	f240 2101 	movw	r1, #513	@ 0x201
  MPU_InitStruct.BaseAddress = 0x30004000;
 80015c6:	900c      	str	r0, [sp, #48]	@ 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015c8:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015ca:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80015ce:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015d2:	f002 fcc3 	bl	8003f5c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015d6:	2004      	movs	r0, #4
 80015d8:	f002 fcb0 	bl	8003f3c <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015dc:	4a64      	ldr	r2, [pc, #400]	@ (8001770 <main+0x1f4>)
 80015de:	6953      	ldr	r3, [r2, #20]
 80015e0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80015e4:	d111      	bne.n	800160a <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 80015e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015ea:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015ee:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015f6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015fa:	6953      	ldr	r3, [r2, #20]
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001606:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800160a:	4859      	ldr	r0, [pc, #356]	@ (8001770 <main+0x1f4>)
 800160c:	6943      	ldr	r3, [r0, #20]
 800160e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8001612:	d126      	bne.n	8001662 <main+0xe6>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001614:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800161c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001620:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001624:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001628:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800162c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001630:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001634:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001636:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 800163a:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800163c:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	d1f8      	bne.n	8001636 <main+0xba>
    } while(sets-- != 0U);
 8001644:	f1ac 0c20 	sub.w	ip, ip, #32
 8001648:	f11c 0f20 	cmn.w	ip, #32
 800164c:	d1f0      	bne.n	8001630 <main+0xb4>
 800164e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001652:	6943      	ldr	r3, [r0, #20]
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6143      	str	r3, [r0, #20]
 800165a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800165e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001662:	f002 fbad 	bl	8003dc0 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001666:	2002      	movs	r0, #2
 8001668:	f003 fe36 	bl	80052d8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800166c:	4a41      	ldr	r2, [pc, #260]	@ (8001774 <main+0x1f8>)
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	6993      	ldr	r3, [r2, #24]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	6993      	ldr	r3, [r2, #24]
 800167c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001684:	6993      	ldr	r3, [r2, #24]
 8001686:	049b      	lsls	r3, r3, #18
 8001688:	d5fc      	bpl.n	8001684 <main+0x108>
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 800168a:	4c3b      	ldr	r4, [pc, #236]	@ (8001778 <main+0x1fc>)
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800168c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800168e:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2502      	movs	r5, #2
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001692:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001696:	2204      	movs	r2, #4
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001698:	a80b      	add	r0, sp, #44	@ 0x2c
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 800169a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800169e:	f8c4 10dc 	str.w	r1, [r4, #220]	@ 0xdc
 80016a2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80016a6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80016a8:	9312      	str	r3, [sp, #72]	@ 0x48
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 80016aa:	f001 5100 	and.w	r1, r1, #536870912	@ 0x20000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	9514      	str	r5, [sp, #80]	@ 0x50
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 80016b0:	9101      	str	r1, [sp, #4]
 80016b2:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80016b4:	921b      	str	r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016b6:	9618      	str	r6, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016b8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016c0:	e9cd 630b 	strd	r6, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 260;
 80016c4:	f44f 7382 	mov.w	r3, #260	@ 0x104
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c8:	e9cd 5215 	strd	r5, r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	e9cd 2519 	strd	r2, r5, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLN = 260;
 80016d0:	9317      	str	r3, [sp, #92]	@ 0x5c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016d2:	f003 fe97 	bl	8005404 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80016d6:	b100      	cbz	r0, 80016da <main+0x15e>
    while(1);
 80016d8:	e7fe      	b.n	80016d8 <main+0x15c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016da:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80016dc:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016de:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016e2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016e4:	2340      	movs	r3, #64	@ 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 80016e6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80016e8:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016ea:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ee:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f6:	9309      	str	r3, [sp, #36]	@ 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 80016f8:	f004 f94c 	bl	8005994 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80016fc:	4607      	mov	r7, r0
 80016fe:	b100      	cbz	r0, 8001702 <main+0x186>
    while(1);
 8001700:	e7fe      	b.n	8001700 <main+0x184>
  __HAL_RCC_CSI_ENABLE() ;
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001708:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800170a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 8001716:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
  attr.name = "Start";
 800171a:	4c18      	ldr	r4, [pc, #96]	@ (800177c <main+0x200>)
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8001724:	f002 fb98 	bl	8003e58 <HAL_EnableCompensationCell>
  Log_Init();
 8001728:	f7ff f84c 	bl	80007c4 <Log_Init>
  printf("Up!\r\n");
 800172c:	4814      	ldr	r0, [pc, #80]	@ (8001780 <main+0x204>)
 800172e:	f014 ff2d 	bl	801658c <puts>
  BSP_LED_Init(LED2);
 8001732:	4630      	mov	r0, r6
 8001734:	f002 fa92 	bl	8003c5c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001738:	4628      	mov	r0, r5
 800173a:	f002 fa8f 	bl	8003c5c <BSP_LED_Init>
  osKernelInitialize();
 800173e:	f007 fba7 	bl	8008e90 <osKernelInitialize>
  attr.name = "Start";
 8001742:	4a10      	ldr	r2, [pc, #64]	@ (8001784 <main+0x208>)
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001744:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  attr.priority = osPriorityNormal;
 8001748:	2318      	movs	r3, #24
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 800174a:	4639      	mov	r1, r7
  attr.name = "Start";
 800174c:	6014      	str	r4, [r2, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 800174e:	6150      	str	r0, [r2, #20]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <main+0x20c>)
  attr.priority = osPriorityNormal;
 8001752:	6193      	str	r3, [r2, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 8001754:	f007 fbd0 	bl	8008ef8 <osThreadNew>
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <main+0x210>)
 800175a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800175c:	f007 fbaa 	bl	8008eb4 <osKernelStart>
  for( ;; );
 8001760:	e7fe      	b.n	8001760 <main+0x1e4>
 8001762:	bf00      	nop
 8001764:	03000009 	.word	0x03000009
 8001768:	30004000 	.word	0x30004000
 800176c:	0301000d 	.word	0x0301000d
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	58024800 	.word	0x58024800
 8001778:	58024400 	.word	0x58024400
 800177c:	08019088 	.word	0x08019088
 8001780:	08019080 	.word	0x08019080
 8001784:	200003f4 	.word	0x200003f4
 8001788:	080014c9 	.word	0x080014c9
 800178c:	200003f0 	.word	0x200003f0

08001790 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001790:	280f      	cmp	r0, #15
 8001792:	d901      	bls.n	8001798 <HAL_InitTick+0x8>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001796:	4770      	bx	lr
{
 8001798:	b530      	push	{r4, r5, lr}
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800179a:	4601      	mov	r1, r0
{
 800179c:	b08b      	sub	sp, #44	@ 0x2c
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800179e:	2200      	movs	r2, #0
 80017a0:	4604      	mov	r4, r0
 80017a2:	2036      	movs	r0, #54	@ 0x36
 80017a4:	f002 fb72 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a8:	2036      	movs	r0, #54	@ 0x36
 80017aa:	f002 fbab 	bl	8003f04 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 80017b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b2:	4669      	mov	r1, sp
 80017b4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80017b6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80017bc:	f042 0210 	orr.w	r2, r2, #16
 80017c0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f004 fa6e 	bl	8005cb0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80017d4:	9b07      	ldr	r3, [sp, #28]
 80017d6:	b9c3      	cbnz	r3, 800180a <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d8:	f004 fa46 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 80017dc:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017de:	4911      	ldr	r1, [pc, #68]	@ (8001824 <HAL_InitTick+0x94>)
  TimHandle.Init.ClockDivision = 0;
 80017e0:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 80017e2:	4c11      	ldr	r4, [pc, #68]	@ (8001828 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e4:	fba1 1303 	umull	r1, r3, r1, r3
  TimHandle.Instance = TIM6;
 80017e8:	4d10      	ldr	r5, [pc, #64]	@ (800182c <HAL_InitTick+0x9c>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80017ea:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80017ee:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f0:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 80017f2:	6025      	str	r5, [r4, #0]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f6:	3b01      	subs	r3, #1
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80017f8:	e9c4 1203 	strd	r1, r2, [r4, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80017fc:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80017fe:	f004 fd5b 	bl	80062b8 <HAL_TIM_Base_Init>
 8001802:	b130      	cbz	r0, 8001812 <HAL_InitTick+0x82>
    return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
}
 8001806:	b00b      	add	sp, #44	@ 0x2c
 8001808:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800180a:	f004 fa2d 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 800180e:	0043      	lsls	r3, r0, #1
 8001810:	e7e5      	b.n	80017de <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001812:	4620      	mov	r0, r4
 8001814:	f004 fbc0 	bl	8005f98 <HAL_TIM_Base_Start_IT>
 8001818:	e7f5      	b.n	8001806 <HAL_InitTick+0x76>
 800181a:	bf00      	nop
 800181c:	58024400 	.word	0x58024400
 8001820:	20000020 	.word	0x20000020
 8001824:	431bde83 	.word	0x431bde83
 8001828:	20000458 	.word	0x20000458
 800182c:	40001000 	.word	0x40001000

08001830 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001830:	f002 baf6 	b.w	8003e20 <HAL_IncTick>

08001834 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001834:	4801      	ldr	r0, [pc, #4]	@ (800183c <TIM6_DAC_IRQHandler+0x8>)
 8001836:	f004 bc15 	b.w	8006064 <HAL_TIM_IRQHandler>
 800183a:	bf00      	nop
 800183c:	20000458 	.word	0x20000458

08001840 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001844:	e7fe      	b.n	8001844 <HardFault_Handler>
 8001846:	bf00      	nop

08001848 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler>
 800184a:	bf00      	nop

0800184c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800184c:	e7fe      	b.n	800184c <BusFault_Handler>
 800184e:	bf00      	nop

08001850 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler>
 8001852:	bf00      	nop

08001854 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8001858:	4801      	ldr	r0, [pc, #4]	@ (8001860 <ETH_IRQHandler+0x8>)
 800185a:	f003 b87b 	b.w	8004954 <HAL_ETH_IRQHandler>
 800185e:	bf00      	nop
 8001860:	20000308 	.word	0x20000308

08001864 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001864:	2001      	movs	r0, #1
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	f015 f827 	bl	80168bc <__errno>
 800186e:	2216      	movs	r2, #22
 8001870:	4603      	mov	r3, r0
  return -1;
}
 8001872:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop

0800187c <_exit>:

void _exit (int status)
{
 800187c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800187e:	f015 f81d 	bl	80168bc <__errno>
 8001882:	2316      	movs	r3, #22
 8001884:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001886:	e7fe      	b.n	8001886 <_exit+0xa>

08001888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	1e16      	subs	r6, r2, #0
 800188c:	dd07      	ble.n	800189e <_read+0x16>
 800188e:	460c      	mov	r4, r1
 8001890:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001892:	f3af 8000 	nop.w
 8001896:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	42a5      	cmp	r5, r4
 800189c:	d1f9      	bne.n	8001892 <_read+0xa>
  }

  return len;
}
 800189e:	4630      	mov	r0, r6
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop

080018a4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80018b0:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80018b2:	604b      	str	r3, [r1, #4]
}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018b8:	2001      	movs	r0, #1
 80018ba:	4770      	bx	lr

080018bc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018bc:	2000      	movs	r0, #0
 80018be:	4770      	bx	lr

080018c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <_sbrk+0x38>)
{
 80018c2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80018c6:	6808      	ldr	r0, [r1, #0]
{
 80018c8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ca:	4c0d      	ldr	r4, [pc, #52]	@ (8001900 <_sbrk+0x40>)
 80018cc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018ce:	b120      	cbz	r0, 80018da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d0:	4403      	add	r3, r0
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d807      	bhi.n	80018e6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018d6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80018d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018da:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <_sbrk+0x44>)
 80018dc:	4620      	mov	r0, r4
 80018de:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80018e0:	4403      	add	r3, r0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d9f7      	bls.n	80018d6 <_sbrk+0x16>
    errno = ENOMEM;
 80018e6:	f014 ffe9 	bl	80168bc <__errno>
 80018ea:	220c      	movs	r2, #12
 80018ec:	4603      	mov	r3, r0
    return (void *)-1;
 80018ee:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	bf00      	nop
 80018f8:	200004a4 	.word	0x200004a4
 80018fc:	20020000 	.word	0x20020000
 8001900:	00001000 	.word	0x00001000
 8001904:	20010320 	.word	0x20010320

08001908 <ptpd_scaled_nanoseconds_to_internal_time>:
  }
}

// Convert scaled nanoseconds into TimeInternal structure.
void ptpd_scaled_nanoseconds_to_internal_time(TimeInternal *internal, const int64_t *scaled_nonoseconds)
{
 8001908:	b538      	push	{r3, r4, r5, lr}
  int sign;
  int64_t nanoseconds = *scaled_nonoseconds;
 800190a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800190e:	4604      	mov	r4, r0

  // Determine sign of result big integer number.
  if (nanoseconds < 0)
 8001910:	2a00      	cmp	r2, #0
 8001912:	db10      	blt.n	8001936 <ptpd_scaled_nanoseconds_to_internal_time+0x2e>
 8001914:	2501      	movs	r5, #1
  {
    sign = 1;
  }

  // Fractional nanoseconds are excluded (see 5.3.2).
  nanoseconds >>= 16;
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	1411      	asrs	r1, r2, #16
 800191a:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 800191e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001948 <ptpd_scaled_nanoseconds_to_internal_time+0x40>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fd5c 	bl	80003e0 <__aeabi_ldivmod>
  internal->seconds = sign * (nanoseconds / 1000000000);
 8001928:	fb05 f000 	mul.w	r0, r5, r0
  internal->nanoseconds = sign * (nanoseconds % 1000000000);
 800192c:	fb02 f505 	mul.w	r5, r2, r5
 8001930:	e9c4 0500 	strd	r0, r5, [r4]
}
 8001934:	bd38      	pop	{r3, r4, r5, pc}
    nanoseconds = -nanoseconds;
 8001936:	425b      	negs	r3, r3
 8001938:	f04f 35ff 	mov.w	r5, #4294967295
 800193c:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    sign = -1;
 8001940:	e7e9      	b.n	8001916 <ptpd_scaled_nanoseconds_to_internal_time+0xe>
 8001942:	bf00      	nop
 8001944:	f3af 8000 	nop.w
 8001948:	3b9aca00 	.word	0x3b9aca00
 800194c:	00000000 	.word	0x00000000

08001950 <ptpd_from_internal_time>:
  // ptpd_from_internal_time() is only used to convert time given by the system
  // to a timestamp. As a consequence, no negative value can normally be found
  // in (internal). Note that offsets are also represented with TimeInternal
  // structure, and can be negative, but offset are never convert into Timestamp
  // so there is no problem here.
  if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db06      	blt.n	8001964 <ptpd_from_internal_time+0x14>
 8001956:	6842      	ldr	r2, [r0, #4]
 8001958:	2a00      	cmp	r2, #0
 800195a:	db03      	blt.n	8001964 <ptpd_from_internal_time+0x14>
  }
  else
  {
    external->secondsField.lsb = internal->seconds;
    external->nanosecondsField = internal->nanoseconds;
    external->secondsField.msb = 0;
 800195c:	2000      	movs	r0, #0
    external->secondsField.lsb = internal->seconds;
 800195e:	600b      	str	r3, [r1, #0]
    external->nanosecondsField = internal->nanoseconds;
 8001960:	608a      	str	r2, [r1, #8]
    external->secondsField.msb = 0;
 8001962:	8088      	strh	r0, [r1, #4]
  }
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <ptpd_to_internal_time>:

// Convert Timestamp to TimeInternal structure (defined by the spec).
void ptpd_to_internal_time(TimeInternal *internal, const Timestamp *external)
{
  // NOTE: Program will not run after 2038...
  if (external->secondsField.lsb < INT_MAX)
 8001968:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800196c:	680b      	ldr	r3, [r1, #0]
 800196e:	4293      	cmp	r3, r2
 8001970:	d202      	bcs.n	8001978 <ptpd_to_internal_time+0x10>
  {
    internal->seconds = external->secondsField.lsb;
    internal->nanoseconds = external->nanosecondsField;
 8001972:	688a      	ldr	r2, [r1, #8]
 8001974:	e9c0 3200 	strd	r3, r2, [r0]
  else
  {
    DBG("PTPD: Clock servo cannot be executed: seconds field is higher than signed integer (32bits)\n");
    return;
  }
}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <ptpd_add_time>:

// Add two TimeInternal structure and normalize.
void ptpd_add_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
  r->seconds = x->seconds + y->seconds;
  r->nanoseconds = x->nanoseconds + y->nanoseconds;
 800197c:	684b      	ldr	r3, [r1, #4]
  r->seconds = x->seconds + y->seconds;
 800197e:	6809      	ldr	r1, [r1, #0]
{
 8001980:	b410      	push	{r4}
  r->nanoseconds = x->nanoseconds + y->nanoseconds;
 8001982:	6854      	ldr	r4, [r2, #4]
  r->seconds = x->seconds + y->seconds;
 8001984:	6812      	ldr	r2, [r2, #0]
  r->nanoseconds = x->nanoseconds + y->nanoseconds;
 8001986:	4423      	add	r3, r4
  r->seconds += r->nanoseconds / 1000000000;
 8001988:	4c12      	ldr	r4, [pc, #72]	@ (80019d4 <ptpd_add_time+0x58>)
  r->seconds = x->seconds + y->seconds;
 800198a:	440a      	add	r2, r1
  r->seconds += r->nanoseconds / 1000000000;
 800198c:	fb84 4c03 	smull	r4, ip, r4, r3
 8001990:	17d9      	asrs	r1, r3, #31
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001992:	4c11      	ldr	r4, [pc, #68]	@ (80019d8 <ptpd_add_time+0x5c>)
  r->seconds += r->nanoseconds / 1000000000;
 8001994:	ebc1 712c 	rsb	r1, r1, ip, asr #28
 8001998:	440a      	add	r2, r1
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 800199a:	fb04 3311 	mls	r3, r4, r1, r3
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 800199e:	2a00      	cmp	r2, #0
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 80019a0:	e9c0 2300 	strd	r2, r3, [r0]
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 80019a4:	dd0b      	ble.n	80019be <ptpd_add_time+0x42>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db02      	blt.n	80019b0 <ptpd_add_time+0x34>

  ptpd_normalize_time(r);
}
 80019aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019ae:	4770      	bx	lr
    r->nanoseconds += 1000000000;
 80019b0:	4423      	add	r3, r4
    r->seconds -= 1;
 80019b2:	3a01      	subs	r2, #1
}
 80019b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds += 1000000000;
 80019b8:	e9c0 2300 	strd	r2, r3, [r0]
}
 80019bc:	4770      	bx	lr
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
 80019be:	2b00      	cmp	r3, #0
 80019c0:	ddf3      	ble.n	80019aa <ptpd_add_time+0x2e>
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d0f1      	beq.n	80019aa <ptpd_add_time+0x2e>
    r->nanoseconds -= 1000000000;
 80019c6:	1b1b      	subs	r3, r3, r4
    r->seconds += 1;
 80019c8:	3201      	adds	r2, #1
}
 80019ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds -= 1000000000;
 80019ce:	e9c0 2300 	strd	r2, r3, [r0]
}
 80019d2:	4770      	bx	lr
 80019d4:	44b82fa1 	.word	0x44b82fa1
 80019d8:	3b9aca00 	.word	0x3b9aca00

080019dc <ptpd_sub_time>:

// Substract two TimeInternal structure and normalize.
void ptpd_sub_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
  r->seconds = x->seconds - y->seconds;
  r->nanoseconds = x->nanoseconds - y->nanoseconds;
 80019dc:	684b      	ldr	r3, [r1, #4]
  r->seconds = x->seconds - y->seconds;
 80019de:	6809      	ldr	r1, [r1, #0]
{
 80019e0:	b410      	push	{r4}
  r->nanoseconds = x->nanoseconds - y->nanoseconds;
 80019e2:	6854      	ldr	r4, [r2, #4]
  r->seconds = x->seconds - y->seconds;
 80019e4:	6812      	ldr	r2, [r2, #0]
  r->nanoseconds = x->nanoseconds - y->nanoseconds;
 80019e6:	1b1b      	subs	r3, r3, r4
  r->seconds += r->nanoseconds / 1000000000;
 80019e8:	4c12      	ldr	r4, [pc, #72]	@ (8001a34 <ptpd_sub_time+0x58>)
  r->seconds = x->seconds - y->seconds;
 80019ea:	1a8a      	subs	r2, r1, r2
  r->seconds += r->nanoseconds / 1000000000;
 80019ec:	fb84 4c03 	smull	r4, ip, r4, r3
 80019f0:	17d9      	asrs	r1, r3, #31
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 80019f2:	4c11      	ldr	r4, [pc, #68]	@ (8001a38 <ptpd_sub_time+0x5c>)
  r->seconds += r->nanoseconds / 1000000000;
 80019f4:	ebc1 712c 	rsb	r1, r1, ip, asr #28
 80019f8:	440a      	add	r2, r1
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 80019fa:	fb04 3311 	mls	r3, r4, r1, r3
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 80019fe:	2a00      	cmp	r2, #0
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001a00:	e9c0 2300 	strd	r2, r3, [r0]
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 8001a04:	dd0b      	ble.n	8001a1e <ptpd_sub_time+0x42>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db02      	blt.n	8001a10 <ptpd_sub_time+0x34>

  ptpd_normalize_time(r);
}
 8001a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a0e:	4770      	bx	lr
    r->nanoseconds += 1000000000;
 8001a10:	4423      	add	r3, r4
    r->seconds -= 1;
 8001a12:	3a01      	subs	r2, #1
}
 8001a14:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds += 1000000000;
 8001a18:	e9c0 2300 	strd	r2, r3, [r0]
}
 8001a1c:	4770      	bx	lr
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	ddf3      	ble.n	8001a0a <ptpd_sub_time+0x2e>
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d0f1      	beq.n	8001a0a <ptpd_sub_time+0x2e>
    r->nanoseconds -= 1000000000;
 8001a26:	1b1b      	subs	r3, r3, r4
    r->seconds += 1;
 8001a28:	3201      	adds	r2, #1
}
 8001a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds -= 1000000000;
 8001a2e:	e9c0 2300 	strd	r2, r3, [r0]
}
 8001a32:	4770      	bx	lr
 8001a34:	44b82fa1 	.word	0x44b82fa1
 8001a38:	3b9aca00 	.word	0x3b9aca00

08001a3c <ptpd_div2_time>:

// Divide the TimeInternal by 2 and normalize.
void ptpd_div2_time(TimeInternal *r)
{
  r->nanoseconds += r->seconds % 2 * 1000000000;
 8001a3c:	e9d0 1300 	ldrd	r1, r3, [r0]
{
 8001a40:	b410      	push	{r4}
  r->nanoseconds += r->seconds % 2 * 1000000000;
 8001a42:	f001 0c01 	and.w	ip, r1, #1
 8001a46:	2900      	cmp	r1, #0
 8001a48:	4c1b      	ldr	r4, [pc, #108]	@ (8001ab8 <ptpd_div2_time+0x7c>)
 8001a4a:	bfbc      	itt	lt
 8001a4c:	f1cc 0c00 	rsblt	ip, ip, #0
  r->seconds /= 2;
 8001a50:	3101      	addlt	r1, #1
  r->nanoseconds += r->seconds % 2 * 1000000000;
 8001a52:	fb04 330c 	mla	r3, r4, ip, r3
  r->seconds += r->nanoseconds / 1000000000;
 8001a56:	4c19      	ldr	r4, [pc, #100]	@ (8001abc <ptpd_div2_time+0x80>)
 8001a58:	17da      	asrs	r2, r3, #31
 8001a5a:	fb84 4c03 	smull	r4, ip, r4, r3
  r->nanoseconds /= 2;
 8001a5e:	2b00      	cmp	r3, #0
  r->seconds += r->nanoseconds / 1000000000;
 8001a60:	ebc2 726c 	rsb	r2, r2, ip, asr #29
  r->nanoseconds /= 2;
 8001a64:	bfb8      	it	lt
 8001a66:	3301      	addlt	r3, #1
  r->seconds += r->nanoseconds / 1000000000;
 8001a68:	eb02 0261 	add.w	r2, r2, r1, asr #1
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001a6c:	4913      	ldr	r1, [pc, #76]	@ (8001abc <ptpd_div2_time+0x80>)
  r->nanoseconds /= 2;
 8001a6e:	105c      	asrs	r4, r3, #1
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001a70:	17db      	asrs	r3, r3, #31
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 8001a72:	2a00      	cmp	r2, #0
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001a74:	fb81 c104 	smull	ip, r1, r1, r4
  r->seconds += r->nanoseconds / 1000000000;
 8001a78:	6002      	str	r2, [r0, #0]
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8001a7a:	ebc3 7321 	rsb	r3, r3, r1, asr #28
 8001a7e:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <ptpd_div2_time+0x7c>)
 8001a80:	fb01 4313 	mls	r3, r1, r3, r4
 8001a84:	6043      	str	r3, [r0, #4]
  if ((r->seconds > 0) && (r->nanoseconds < 0))
 8001a86:	dd0b      	ble.n	8001aa0 <ptpd_div2_time+0x64>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db02      	blt.n	8001a92 <ptpd_div2_time+0x56>

  ptpd_normalize_time(r);
}
 8001a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a90:	4770      	bx	lr
    r->seconds -= 1;
 8001a92:	3a01      	subs	r2, #1
    r->nanoseconds += 1000000000;
 8001a94:	440b      	add	r3, r1
}
 8001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds += 1000000000;
 8001a9a:	e9c0 2300 	strd	r2, r3, [r0]
}
 8001a9e:	4770      	bx	lr
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	ddf3      	ble.n	8001a8c <ptpd_div2_time+0x50>
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d0f1      	beq.n	8001a8c <ptpd_div2_time+0x50>
    r->seconds += 1;
 8001aa8:	3201      	adds	r2, #1
    r->nanoseconds -= 1000000000;
 8001aaa:	1a5b      	subs	r3, r3, r1
}
 8001aac:	f85d 4b04 	ldr.w	r4, [sp], #4
    r->nanoseconds -= 1000000000;
 8001ab0:	e9c0 2300 	strd	r2, r3, [r0]
}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	3b9aca00 	.word	0x3b9aca00
 8001abc:	44b82fa1 	.word	0x44b82fa1

08001ac0 <ptpd_floor_log2>:
int32_t ptpd_floor_log2(uint32_t n)
{
  int pos = 0;

  // Sanity check.
  if (n == 0) return -1;
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b1b0      	cbz	r0, 8001af2 <ptpd_floor_log2+0x32>

  if (n >= 1 << 16) { n >>= 16; pos += 16; }
 8001ac4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001ac8:	d210      	bcs.n	8001aec <ptpd_floor_log2+0x2c>
  int pos = 0;
 8001aca:	2000      	movs	r0, #0
  if (n >= 1 <<  8) { n >>=  8; pos +=  8; }
 8001acc:	2bff      	cmp	r3, #255	@ 0xff
 8001ace:	d901      	bls.n	8001ad4 <ptpd_floor_log2+0x14>
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	3008      	adds	r0, #8
  if (n >= 1 <<  4) { n >>=  4; pos +=  4; }
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d901      	bls.n	8001adc <ptpd_floor_log2+0x1c>
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	3004      	adds	r0, #4
  if (n >= 1 <<  2) { n >>=  2; pos +=  2; }
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d901      	bls.n	8001ae4 <ptpd_floor_log2+0x24>
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3002      	adds	r0, #2
  if (n >= 1 <<  1) {           pos +=  1; }
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d006      	beq.n	8001af6 <ptpd_floor_log2+0x36>
 8001ae8:	3001      	adds	r0, #1
 8001aea:	4770      	bx	lr
  if (n >= 1 << 16) { n >>= 16; pos += 16; }
 8001aec:	0c03      	lsrs	r3, r0, #16
 8001aee:	2010      	movs	r0, #16
 8001af0:	e7ec      	b.n	8001acc <ptpd_floor_log2+0xc>
  if (n == 0) return -1;
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295

  return pos;
}
 8001af6:	4770      	bx	lr

08001af8 <ptpd_data_set_comparison>:

// Data set comparison bewteen two foreign masters (9.3.4 fig 27). Return similar to memcmp().
static int8_t ptpd_data_set_comparison(MsgHeader *header_a, MsgAnnounce *announce_a,
                                       MsgHeader *header_b, MsgAnnounce *announce_b,
                                       PtpClock *ptp_clock)
{
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	460c      	mov	r4, r1
 8001afc:	4616      	mov	r6, r2
 8001afe:	4607      	mov	r7, r0
  short comp = 0;

  DBGV("PTPD: ptpd_data_set_comparison\n");

  // GM identity of A == GM identity of B 
  grandmaster_identity_comp = memcmp(announce_a->grandmasterIdentity, announce_b->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8001b00:	2208      	movs	r2, #8
 8001b02:	f103 0115 	add.w	r1, r3, #21
 8001b06:	f104 0015 	add.w	r0, r4, #21
{
 8001b0a:	461d      	mov	r5, r3
  grandmaster_identity_comp = memcmp(announce_a->grandmasterIdentity, announce_b->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8001b0c:	f014 fe3e 	bl	801678c <memcmp>

  // Algoritgm part 1 - Figure 27.
  if (grandmaster_identity_comp != 0)
 8001b10:	b300      	cbz	r0, 8001b54 <ptpd_data_set_comparison+0x5c>
  {
    COMPARE_AB_RETURN_BETTER(grandmasterPriority1, "grandmaster.Priority1");
 8001b12:	7ba1      	ldrb	r1, [r4, #14]
 8001b14:	7baa      	ldrb	r2, [r5, #14]
 8001b16:	4291      	cmp	r1, r2
 8001b18:	d819      	bhi.n	8001b4e <ptpd_data_set_comparison+0x56>
 8001b1a:	d336      	bcc.n	8001b8a <ptpd_data_set_comparison+0x92>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass, "grandmaster.clockClass");
 8001b1c:	7c21      	ldrb	r1, [r4, #16]
 8001b1e:	7c2a      	ldrb	r2, [r5, #16]
 8001b20:	4291      	cmp	r1, r2
 8001b22:	d814      	bhi.n	8001b4e <ptpd_data_set_comparison+0x56>
 8001b24:	d331      	bcc.n	8001b8a <ptpd_data_set_comparison+0x92>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy, "grandmaster.clockAccuracy");
 8001b26:	7c61      	ldrb	r1, [r4, #17]
 8001b28:	7c6a      	ldrb	r2, [r5, #17]
 8001b2a:	4291      	cmp	r1, r2
 8001b2c:	d80f      	bhi.n	8001b4e <ptpd_data_set_comparison+0x56>
 8001b2e:	d32c      	bcc.n	8001b8a <ptpd_data_set_comparison+0x92>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance, "grandmaster.Variance");
 8001b30:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001b34:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001b38:	4291      	cmp	r1, r2
 8001b3a:	dc08      	bgt.n	8001b4e <ptpd_data_set_comparison+0x56>
 8001b3c:	db25      	blt.n	8001b8a <ptpd_data_set_comparison+0x92>
    COMPARE_AB_RETURN_BETTER(grandmasterPriority2, "grandmaster.Priority2");
 8001b3e:	7d21      	ldrb	r1, [r4, #20]
 8001b40:	7d2a      	ldrb	r2, [r5, #20]
 8001b42:	4291      	cmp	r1, r2
 8001b44:	d803      	bhi.n	8001b4e <ptpd_data_set_comparison+0x56>

    if (grandmaster_identity_comp > 0)
 8001b46:	2800      	cmp	r0, #0
 8001b48:	dd1f      	ble.n	8001b8a <ptpd_data_set_comparison+0x92>
 8001b4a:	4291      	cmp	r1, r2
 8001b4c:	d11d      	bne.n	8001b8a <ptpd_data_set_comparison+0x92>
    COMPARE_AB_RETURN_BETTER(grandmasterPriority1, "grandmaster.Priority1");
 8001b4e:	f04f 30ff 	mov.w	r0, #4294967295
  }

  // Compare port numbers of recievers of A and B - same as we have only one port.
  DBGV("PTPD: ptpd_data_set_comparison: ERROR 2\n");
  return ERROR_2;
}
 8001b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved + 1))
 8001b54:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 8001b58:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	428a      	cmp	r2, r1
 8001b60:	dcf5      	bgt.n	8001b4e <ptpd_data_set_comparison+0x56>
  if ((announce_b->stepsRemoved) > (announce_a->stepsRemoved + 1))
 8001b62:	1c51      	adds	r1, r2, #1
 8001b64:	428b      	cmp	r3, r1
 8001b66:	dc10      	bgt.n	8001b8a <ptpd_data_set_comparison+0x92>
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved))
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dc10      	bgt.n	8001b8e <ptpd_data_set_comparison+0x96>
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8001b6c:	f106 0018 	add.w	r0, r6, #24
 8001b70:	f04f 0208 	mov.w	r2, #8
  if ((announce_a->stepsRemoved) < (announce_b->stepsRemoved))
 8001b74:	da19      	bge.n	8001baa <ptpd_data_set_comparison+0xb2>
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8001b76:	9b06      	ldr	r3, [sp, #24]
 8001b78:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001b7c:	f014 fe06 	bl	801678c <memcmp>
    else if (comp < 0)
 8001b80:	b200      	sxth	r0, r0
 8001b82:	3800      	subs	r0, #0
 8001b84:	bf18      	it	ne
 8001b86:	2001      	movne	r0, #1
}
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    COMPARE_AB_RETURN_BETTER(grandmasterPriority1, "grandmaster.Priority1");
 8001b8a:	2001      	movs	r0, #1
}
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8001b8e:	9b06      	ldr	r3, [sp, #24]
 8001b90:	2208      	movs	r2, #8
 8001b92:	f107 0018 	add.w	r0, r7, #24
 8001b96:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001b9a:	f014 fdf7 	bl	801678c <memcmp>
    else if (comp < 0)
 8001b9e:	b200      	sxth	r0, r0
 8001ba0:	3800      	subs	r0, #0
 8001ba2:	bf18      	it	ne
 8001ba4:	2001      	movne	r0, #1
 8001ba6:	4240      	negs	r0, r0
}
 8001ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8001baa:	4601      	mov	r1, r0
 8001bac:	f107 0018 	add.w	r0, r7, #24
 8001bb0:	f014 fdec 	bl	801678c <memcmp>
 8001bb4:	b200      	sxth	r0, r0
  if (comp > 0)
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	dcc9      	bgt.n	8001b4e <ptpd_data_set_comparison+0x56>
  else if (comp < 0)
 8001bba:	bf14      	ite	ne
 8001bbc:	2001      	movne	r0, #1
 8001bbe:	2000      	moveq	r0, #0
}
 8001bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc2:	bf00      	nop

08001bc4 <ptpd_clock_init>:
{
 8001bc4:	4603      	mov	r3, r0
  eui64[3] = 0xff;
 8001bc6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
  ptp_clock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 8001bca:	2101      	movs	r1, #1
{
 8001bcc:	b500      	push	{lr}
  eui64[0] = eui48[0];
 8001bce:	f8b0 c40a 	ldrh.w	ip, [r0, #1034]	@ 0x40a
  eui64[2] = eui48[2];
 8001bd2:	f890 040c 	ldrb.w	r0, [r0, #1036]	@ 0x40c
  eui64[3] = 0xff;
 8001bd6:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
  eui64[2] = eui48[2];
 8001bda:	f883 0083 	strb.w	r0, [r3, #131]	@ 0x83
  eui64[5] = eui48[3];
 8001bde:	f8b3 240d 	ldrh.w	r2, [r3, #1037]	@ 0x40d
  ptp_clock->defaultDS.priority1 = rtOpts->priority1;
 8001be2:	88d8      	ldrh	r0, [r3, #6]
  eui64[0] = eui48[0];
 8001be4:	f8a3 c081 	strh.w	ip, [r3, #129]	@ 0x81
  eui64[5] = eui48[3];
 8001be8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  ptp_clock->defaultDS.priority1 = rtOpts->priority1;
 8001bec:	f8a3 0090 	strh.w	r0, [r3, #144]	@ 0x90
  ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 8001bf0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 8001bf4:	f8d3 0081 	ldr.w	r0, [r3, #129]	@ 0x81
  eui64[7] = eui48[5];
 8001bf8:	f893 c40f 	ldrb.w	ip, [r3, #1039]	@ 0x40f
  ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 8001bfc:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
  ptp_clock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 8001c00:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  ptp_clock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 8001c04:	885a      	ldrh	r2, [r3, #2]
  ptp_clock->defaultDS.numberPorts = NUMBER_PORTS;
 8001c06:	f8a3 108a 	strh.w	r1, [r3, #138]	@ 0x8a
  ptp_clock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 8001c0a:	f8a3 1048 	strh.w	r1, [r3, #72]	@ 0x48
  ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 8001c0e:	2103      	movs	r1, #3
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 8001c10:	6418      	str	r0, [r3, #64]	@ 0x40
  ptp_clock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8001c12:	7818      	ldrb	r0, [r3, #0]
  eui64[7] = eui48[5];
 8001c14:	f883 c088 	strb.w	ip, [r3, #136]	@ 0x88
  ptp_clock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 8001c18:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
  ptp_clock->portDS.peerMeanPathDelay.seconds = ptp_clock->portDS.peerMeanPathDelay.nanoseconds = 0;
 8001c1c:	2200      	movs	r2, #0
  ptp_clock->defaultDS.domainNumber = rtOpts->domainNumber;
 8001c1e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
  ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 8001c22:	f883 104b 	strb.w	r1, [r3, #75]	@ 0x4b
  ptp_clock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8001c26:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ptp_clock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 8001c2a:	f883 1055 	strb.w	r1, [r3, #85]	@ 0x55
  ptp_clock->portDS.logSyncInterval = rtOpts->syncInterval;
 8001c2e:	7858      	ldrb	r0, [r3, #1]
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 8001c30:	f8d3 1085 	ldr.w	r1, [r3, #133]	@ 0x85
  ptp_clock->defaultDS.domainNumber = rtOpts->domainNumber;
 8001c34:	f8a3 c092 	strh.w	ip, [r3, #146]	@ 0x92
  ptp_clock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 8001c38:	f240 2c01 	movw	ip, #513	@ 0x201
  ptp_clock->portDS.logSyncInterval = rtOpts->syncInterval;
 8001c3c:	f883 0056 	strb.w	r0, [r3, #86]	@ 0x56
  ptp_clock->portDS.peerMeanPathDelay.seconds = ptp_clock->portDS.peerMeanPathDelay.nanoseconds = 0;
 8001c40:	e9c3 2213 	strd	r2, r2, [r3, #76]	@ 0x4c
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 8001c44:	6459      	str	r1, [r3, #68]	@ 0x44
  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8001c46:	f103 0120 	add.w	r1, r3, #32
  ptp_clock->portDS.delayMechanism = rtOpts->delayMechanism;
 8001c4a:	f893 0032 	ldrb.w	r0, [r3, #50]	@ 0x32
  ptp_clock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 8001c4e:	f8a3 c058 	strh.w	ip, [r3, #88]	@ 0x58
  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8001c52:	f503 6c82 	add.w	ip, r3, #1040	@ 0x410
  ptp_clock->portDS.delayMechanism = rtOpts->delayMechanism;
 8001c56:	f883 0057 	strb.w	r0, [r3, #87]	@ 0x57
  ptp_clock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 8001c5a:	f8b3 e030 	ldrh.w	lr, [r3, #48]	@ 0x30
  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8001c5e:	c903      	ldmia	r1, {r0, r1}
  ptp_clock->foreignMasterDS.count = 0;
 8001c60:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  ptp_clock->outboundLatency = rtOpts->outboundLatency;
 8001c64:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
  ptp_clock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 8001c68:	f8a3 e0ae 	strh.w	lr, [r3, #174]	@ 0xae
  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8001c6c:	e88c 0003 	stmia.w	ip, {r0, r1}
  ptp_clock->outboundLatency = rtOpts->outboundLatency;
 8001c70:	f103 0128 	add.w	r1, r3, #40	@ 0x28
  ptp_clock->servo.ap = rtOpts->servo.ap;
 8001c74:	f8d3 c03a 	ldr.w	ip, [r3, #58]	@ 0x3a
  ptp_clock->outboundLatency = rtOpts->outboundLatency;
 8001c78:	c903      	ldmia	r1, {r0, r1}
 8001c7a:	e882 0003 	stmia.w	r2, {r0, r1}
  ptp_clock->servo.ap = rtOpts->servo.ap;
 8001c7e:	f8d3 0036 	ldr.w	r0, [r3, #54]	@ 0x36
  ptp_clock->servo.noResetClock = rtOpts->servo.noResetClock;
 8001c82:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
  ptp_clock->stats = rtOpts->stats;
 8001c84:	7b9a      	ldrb	r2, [r3, #14]
  ptp_clock->servo.ap = rtOpts->servo.ap;
 8001c86:	f8c3 0466 	str.w	r0, [r3, #1126]	@ 0x466
 8001c8a:	f8c3 c46a 	str.w	ip, [r3, #1130]	@ 0x46a
  ptp_clock->servo.noResetClock = rtOpts->servo.noResetClock;
 8001c8e:	f8a3 1464 	strh.w	r1, [r3, #1124]	@ 0x464
  ptp_clock->stats = rtOpts->stats;
 8001c92:	f883 2474 	strb.w	r2, [r3, #1140]	@ 0x474
}
 8001c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c9a:	bf00      	nop

08001c9c <ptpd_is_same_port_identity>:
{
 8001c9c:	b538      	push	{r3, r4, r5, lr}
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001c9e:	2208      	movs	r2, #8
{
 8001ca0:	4605      	mov	r5, r0
 8001ca2:	460c      	mov	r4, r1
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001ca4:	f014 fd72 	bl	801678c <memcmp>
 8001ca8:	b940      	cbnz	r0, 8001cbc <ptpd_is_same_port_identity+0x20>
 8001caa:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8001cae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001cb2:	1ac0      	subs	r0, r0, r3
 8001cb4:	fab0 f080 	clz	r0, r0
 8001cb8:	0940      	lsrs	r0, r0, #5
}
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}

08001cc0 <ptpd_add_foreign>:
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001cc4:	f9b0 80ac 	ldrsh.w	r8, [r0, #172]	@ 0xac
{
 8001cc8:	b083      	sub	sp, #12
 8001cca:	4686      	mov	lr, r0
 8001ccc:	460e      	mov	r6, r1
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001cce:	f1b8 0f00 	cmp.w	r8, #0
  j = ptp_clock->foreignMasterDS.best;
 8001cd2:	f9b0 40b2 	ldrsh.w	r4, [r0, #178]	@ 0xb2
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8001cd6:	f8d0 b0a8 	ldr.w	fp, [r0, #168]	@ 0xa8
           header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001cda:	f101 0718 	add.w	r7, r1, #24
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001cde:	dd3f      	ble.n	8001d60 <ptpd_add_foreign+0xa0>
 8001ce0:	f04f 0900 	mov.w	r9, #0
    if (ptpd_is_same_port_identity(&header->sourcePortIdentity, &ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 8001ce4:	f04f 0a58 	mov.w	sl, #88	@ 0x58
 8001ce8:	e9cd 2000 	strd	r2, r0, [sp]
 8001cec:	e005      	b.n	8001cfa <ptpd_add_foreign+0x3a>
    j = (j + 1) % ptp_clock->foreignMasterDS.count;
 8001cee:	fb94 f2f8 	sdiv	r2, r4, r8
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001cf2:	45c1      	cmp	r9, r8
    j = (j + 1) % ptp_clock->foreignMasterDS.count;
 8001cf4:	fb08 4412 	mls	r4, r8, r2, r4
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001cf8:	d030      	beq.n	8001d5c <ptpd_add_foreign+0x9c>
    if (ptpd_is_same_port_identity(&header->sourcePortIdentity, &ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 8001cfa:	fb0a b504 	mla	r5, sl, r4, fp
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001cfe:	2208      	movs	r2, #8
 8001d00:	4638      	mov	r0, r7
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001d02:	f109 0901 	add.w	r9, r9, #1
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001d06:	4629      	mov	r1, r5
    j = (j + 1) % ptp_clock->foreignMasterDS.count;
 8001d08:	3401      	adds	r4, #1
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001d0a:	f014 fd3f 	bl	801678c <memcmp>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d1ed      	bne.n	8001cee <ptpd_add_foreign+0x2e>
 8001d12:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
 8001d16:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8001d1a:	4290      	cmp	r0, r2
 8001d1c:	d1e7      	bne.n	8001cee <ptpd_add_foreign+0x2e>
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8001d1e:	896b      	ldrh	r3, [r5, #10]
      ptp_clock->foreignMasterDS.records[j].header = *header;
 8001d20:	46b6      	mov	lr, r6
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8001d22:	9a00      	ldr	r2, [sp, #0]
      ptp_clock->foreignMasterDS.records[j].header = *header;
 8001d24:	f105 0c30 	add.w	ip, r5, #48	@ 0x30
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8001d28:	3301      	adds	r3, #1
      ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001d2a:	f105 040c 	add.w	r4, r5, #12
 8001d2e:	4616      	mov	r6, r2
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8001d30:	816b      	strh	r3, [r5, #10]
      ptp_clock->foreignMasterDS.records[j].header = *header;
 8001d32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001d36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001d3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d42:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8001d46:	e88c 0003 	stmia.w	ip, {r0, r1}
      ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001d4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d52:	6833      	ldr	r3, [r6, #0]
 8001d54:	6023      	str	r3, [r4, #0]
}
 8001d56:	b003      	add	sp, #12
 8001d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d5c:	e9dd 2e00 	ldrd	r2, lr, [sp]
    if (ptp_clock->foreignMasterDS.count < ptp_clock->foreignMasterDS.capacity)
 8001d60:	f9be 30ae 	ldrsh.w	r3, [lr, #174]	@ 0xae
 8001d64:	4543      	cmp	r3, r8
 8001d66:	dd03      	ble.n	8001d70 <ptpd_add_foreign+0xb0>
      ptp_clock->foreignMasterDS.count++;
 8001d68:	f108 0301 	add.w	r3, r8, #1
 8001d6c:	f8ae 30ac 	strh.w	r3, [lr, #172]	@ 0xac
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8001d70:	f9be 30b0 	ldrsh.w	r3, [lr, #176]	@ 0xb0
    ptp_clock->foreignMasterDS.records[j].header = *header;
 8001d74:	46b4      	mov	ip, r6
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8001d76:	6878      	ldr	r0, [r7, #4]
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001d78:	4617      	mov	r7, r2
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8001d7a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8001d7e:	69b4      	ldr	r4, [r6, #24]
    ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8001d80:	2100      	movs	r1, #0
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8001d82:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8001d86:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 8001d8a:	f84b 4033 	str.w	r4, [fp, r3, lsl #3]
 8001d8e:	6050      	str	r0, [r2, #4]
    ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8001d90:	f8de 40a8 	ldr.w	r4, [lr, #168]	@ 0xa8
 8001d94:	8c32      	ldrh	r2, [r6, #32]
 8001d96:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8001d9a:	8122      	strh	r2, [r4, #8]
    ptp_clock->foreignMasterDS.records[j].header = *header;
 8001d9c:	f104 0530 	add.w	r5, r4, #48	@ 0x30
    ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8001da0:	8161      	strh	r1, [r4, #10]
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001da2:	340c      	adds	r4, #12
    ptp_clock->foreignMasterDS.records[j].header = *header;
 8001da4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001db4:	e885 0003 	stmia.w	r5, {r0, r1}
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001db8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ptp_clock->foreignMasterDS.i = (ptp_clock->foreignMasterDS.i + 1) % ptp_clock->foreignMasterDS.capacity;
 8001dbc:	f9be 30b0 	ldrsh.w	r3, [lr, #176]	@ 0xb0
 8001dc0:	f9be 20ae 	ldrsh.w	r2, [lr, #174]	@ 0xae
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dca:	fb02 3511 	mls	r5, r2, r1, r3
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8001dce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6023      	str	r3, [r4, #0]
    ptp_clock->foreignMasterDS.i = (ptp_clock->foreignMasterDS.i + 1) % ptp_clock->foreignMasterDS.capacity;
 8001dd6:	f8ae 50b0 	strh.w	r5, [lr, #176]	@ 0xb0
}
 8001dda:	b003      	add	sp, #12
 8001ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001de0 <ptpd_m1>:
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001de0:	f8d0 2081 	ldr.w	r2, [r0, #129]	@ 0x81
  ptp_clock->currentDS.stepsRemoved = 0;
 8001de4:	2300      	movs	r3, #0
  ptp_clock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 8001de6:	2120      	movs	r1, #32
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001de8:	f8d0 c085 	ldr.w	ip, [r0, #133]	@ 0x85
 8001dec:	65c2      	str	r2, [r0, #92]	@ 0x5c
  memcpy(ptp_clock->parentDS.grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001dee:	6702      	str	r2, [r0, #112]	@ 0x70
  ptp_clock->parentDS.grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8001df0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
  ptp_clock->currentDS.stepsRemoved = 0;
 8001df4:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
  ptp_clock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 8001df8:	f880 10bc 	strb.w	r1, [r0, #188]	@ 0xbc
  ptp_clock->parentDS.parentPortIdentity.portNumber = 0;
 8001dfc:	f8a0 3064 	strh.w	r3, [r0, #100]	@ 0x64
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8001e00:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  ptp_clock->parentDS.grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8001e04:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 8001e08:	f8c0 30b6 	str.w	r3, [r0, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.currentUtcOffset = ptp_clock->rtOpts.currentUtcOffset;
 8001e0c:	8942      	ldrh	r2, [r0, #10]
  ptp_clock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 8001e0e:	f8a0 30ba 	strh.w	r3, [r0, #186]	@ 0xba
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001e12:	f8c0 c060 	str.w	ip, [r0, #96]	@ 0x60
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8001e16:	6781      	str	r1, [r0, #120]	@ 0x78
  ptp_clock->timePropertiesDS.currentUtcOffset = ptp_clock->rtOpts.currentUtcOffset;
 8001e18:	f8a0 20b4 	strh.w	r2, [r0, #180]	@ 0xb4
  ptp_clock->currentDS.offsetFromMaster.seconds = ptp_clock->currentDS.offsetFromMaster.nanoseconds = 0;
 8001e1c:	e9c0 3326 	strd	r3, r3, [r0, #152]	@ 0x98
  ptp_clock->currentDS.meanPathDelay.seconds = ptp_clock->currentDS.meanPathDelay.nanoseconds = 0;
 8001e20:	e9c0 3328 	strd	r3, r3, [r0, #160]	@ 0xa0
  memcpy(ptp_clock->parentDS.grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001e24:	4663      	mov	r3, ip
 8001e26:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <ptpd_s1>:
  ptp_clock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8001e2c:	8bd3      	ldrh	r3, [r2, #30]
{
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ptp_clock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8001e32:	3301      	adds	r3, #1
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001e34:	f100 075c 	add.w	r7, r0, #92	@ 0x5c
 8001e38:	f101 0818 	add.w	r8, r1, #24
{
 8001e3c:	4615      	mov	r5, r2
 8001e3e:	4604      	mov	r4, r0
 8001e40:	460e      	mov	r6, r1
  ptp_clock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8001e42:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8001e46:	2208      	movs	r2, #8
 8001e48:	4638      	mov	r0, r7
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	f014 fc9e 	bl	801678c <memcmp>
 8001e50:	b928      	cbnz	r0, 8001e5e <ptpd_s1+0x32>
 8001e52:	f9b4 2064 	ldrsh.w	r2, [r4, #100]	@ 0x64
 8001e56:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d005      	beq.n	8001e6a <ptpd_s1+0x3e>
      set_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 8001e5e:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 8001e62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e66:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity,
 8001e6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001e6e:	69b2      	ldr	r2, [r6, #24]
 8001e70:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8001e72:	607b      	str	r3, [r7, #4]
  ptp_clock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8001e74:	8c33      	ldrh	r3, [r6, #32]
 8001e76:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8001e7a:	f8d5 2015 	ldr.w	r2, [r5, #21]
 8001e7e:	f8d5 3019 	ldr.w	r3, [r5, #25]
 8001e82:	6722      	str	r2, [r4, #112]	@ 0x70
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001e84:	2200      	movs	r2, #0
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8001e86:	6763      	str	r3, [r4, #116]	@ 0x74
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 8001e88:	8a2b      	ldrh	r3, [r5, #16]
 8001e8a:	f8a4 3078 	strh.w	r3, [r4, #120]	@ 0x78
  ptp_clock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 8001e8e:	8a6b      	ldrh	r3, [r5, #18]
 8001e90:	f8a4 307a 	strh.w	r3, [r4, #122]	@ 0x7a
  ptp_clock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 8001e94:	7bab      	ldrb	r3, [r5, #14]
 8001e96:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
  ptp_clock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 8001e9a:	7d2b      	ldrb	r3, [r5, #20]
 8001e9c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  ptp_clock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 8001ea0:	89ab      	ldrh	r3, [r5, #12]
 8001ea2:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001ea6:	7a33      	ldrb	r3, [r6, #8]
 8001ea8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8001eac:	f361 0207 	bfi	r2, r1, #0, #8
  ptp_clock->timePropertiesDS.leap59 = get_flag(header->flagField[1], FLAG1_LEAP59);
 8001eb0:	f3c3 0140 	ubfx	r1, r3, #1, #1
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001eb4:	f361 220f 	bfi	r2, r1, #8, #8
  ptp_clock->timePropertiesDS.leap61 = get_flag(header->flagField[1], FLAG1_LEAP61);
 8001eb8:	f003 0101 	and.w	r1, r3, #1
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001ebc:	f361 4217 	bfi	r2, r1, #16, #8
  ptp_clock->timePropertiesDS.timeTraceable = get_flag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 8001ec0:	f3c3 1100 	ubfx	r1, r3, #4, #1
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001ec4:	f361 621f 	bfi	r2, r1, #24, #8
  ptp_clock->timePropertiesDS.frequencyTraceable = get_flag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 8001ec8:	f3c3 1140 	ubfx	r1, r3, #5, #1
  ptp_clock->timePropertiesDS.ptpTimescale = get_flag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8001ecc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8001ed0:	f8c4 20b6 	str.w	r2, [r4, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.frequencyTraceable = get_flag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 8001ed4:	f884 10ba 	strb.w	r1, [r4, #186]	@ 0xba
  ptp_clock->timePropertiesDS.ptpTimescale = get_flag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8001ed8:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
  ptp_clock->timePropertiesDS.timeSource = announce->timeSource;
 8001edc:	f895 3020 	ldrb.w	r3, [r5, #32]
 8001ee0:	f884 30bc 	strb.w	r3, [r4, #188]	@ 0xbc
}
 8001ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ee8 <ptpd_bmc>:
//

// Compare data set of foreign masters and local data set to return the recommended
// state for the port.
uint8_t ptpd_bmc(PtpClock *ptp_clock)
{
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t i;
  int16_t best;

  // Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same.
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001eec:	f9b0 90ac 	ldrsh.w	r9, [r0, #172]	@ 0xac
{
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	4605      	mov	r5, r0
  }

  DBGV("PTPD: ptpd_bmc: best record %li\n", best);
  ptp_clock->foreignMasterDS.best = best;

  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8001ef4:	f8d0 80a8 	ldr.w	r8, [r0, #168]	@ 0xa8
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001ef8:	f1b9 0f01 	cmp.w	r9, #1
 8001efc:	dd5d      	ble.n	8001fba <ptpd_bmc+0xd2>
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8001efe:	f06f 0a2f 	mvn.w	sl, #47	@ 0x2f
 8001f02:	f108 0488 	add.w	r4, r8, #136	@ 0x88
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001f06:	2600      	movs	r6, #0
 8001f08:	2701      	movs	r7, #1
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8001f0a:	ebaa 0a08 	sub.w	sl, sl, r8
                                  &ptp_clock->foreignMasterDS.records[best].header,
 8001f0e:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8001f12:	f1a4 0124 	sub.w	r1, r4, #36	@ 0x24
 8001f16:	4620      	mov	r0, r4
 8001f18:	9500      	str	r5, [sp, #0]
                                  &ptp_clock->foreignMasterDS.records[best].header,
 8001f1a:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8001f1e:	eb08 02cc 	add.w	r2, r8, ip, lsl #3
 8001f22:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8001f26:	f102 030c 	add.w	r3, r2, #12
 8001f2a:	3230      	adds	r2, #48	@ 0x30
 8001f2c:	f7ff fde4 	bl	8001af8 <ptpd_data_set_comparison>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f107 0301 	add.w	r3, r7, #1
 8001f36:	da02      	bge.n	8001f3e <ptpd_bmc+0x56>
 8001f38:	eb0a 0b04 	add.w	fp, sl, r4
 8001f3c:	463e      	mov	r6, r7
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8001f3e:	b21f      	sxth	r7, r3
 8001f40:	3458      	adds	r4, #88	@ 0x58
 8001f42:	45b9      	cmp	r9, r7
 8001f44:	d1e3      	bne.n	8001f0e <ptpd_bmc+0x26>
  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8001f46:	eb08 0c0b 	add.w	ip, r8, fp
  ptp_clock->foreignMasterDS.best = best;
 8001f4a:	f8a5 60b2 	strh.w	r6, [r5, #178]	@ 0xb2
  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8001f4e:	f10c 0430 	add.w	r4, ip, #48	@ 0x30
 8001f52:	f10c 080c 	add.w	r8, ip, #12
  announce->grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8001f56:	f895 3090 	ldrb.w	r3, [r5, #144]	@ 0x90
  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8001f5a:	f105 01e8 	add.w	r1, r5, #232	@ 0xe8
  memcpy(announce->grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001f5e:	f8d5 2081 	ldr.w	r2, [r5, #129]	@ 0x81
  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8001f62:	f105 00c0 	add.w	r0, r5, #192	@ 0xc0
  announce->grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8001f66:	f885 30f6 	strb.w	r3, [r5, #246]	@ 0xf6
  memcpy(announce->grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001f6a:	f8d5 3085 	ldr.w	r3, [r5, #133]	@ 0x85
 8001f6e:	f8c5 20fd 	str.w	r2, [r5, #253]	@ 0xfd
  announce->grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8001f72:	f8d5 208c 	ldr.w	r2, [r5, #140]	@ 0x8c
  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8001f76:	9500      	str	r5, [sp, #0]
  memcpy(announce->grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001f78:	f8c5 3101 	str.w	r3, [r5, #257]	@ 0x101
  announce->grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8001f7c:	f895 3091 	ldrb.w	r3, [r5, #145]	@ 0x91
  announce->grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8001f80:	f8c5 20f8 	str.w	r2, [r5, #248]	@ 0xf8
  announce->grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8001f84:	f885 30fc 	strb.w	r3, [r5, #252]	@ 0xfc
  announce->stepsRemoved = 0;
 8001f88:	2300      	movs	r3, #0
  memcpy(header->sourcePortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001f8a:	f8d5 2085 	ldr.w	r2, [r5, #133]	@ 0x85
  announce->stepsRemoved = 0;
 8001f8e:	f8a5 3106 	strh.w	r3, [r5, #262]	@ 0x106
  memcpy(header->sourcePortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001f92:	f8d5 3081 	ldr.w	r3, [r5, #129]	@ 0x81
 8001f96:	f895 608c 	ldrb.w	r6, [r5, #140]	@ 0x8c
 8001f9a:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8001f9e:	4643      	mov	r3, r8
  memcpy(header->sourcePortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8001fa0:	f8c5 20dc 	str.w	r2, [r5, #220]	@ 0xdc
  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	f7ff fda7 	bl	8001af8 <ptpd_data_set_comparison>
  if (ptp_clock->defaultDS.clockQuality.clockClass < 128)
 8001faa:	0633      	lsls	r3, r6, #24
 8001fac:	d41b      	bmi.n	8001fe6 <ptpd_bmc+0xfe>
    if (A_better_then_B == comp)
 8001fae:	2801      	cmp	r0, #1
 8001fb0:	d012      	beq.n	8001fd8 <ptpd_bmc+0xf0>
      return PTP_PASSIVE;
 8001fb2:	2006      	movs	r0, #6
                             &ptp_clock->foreignMasterDS.records[best].announce,
                             ptp_clock);
}
 8001fb4:	b003      	add	sp, #12
 8001fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ptp_clock->foreignMasterDS.best = best;
 8001fba:	2300      	movs	r3, #0
  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8001fbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8001fc0:	f108 080c 	add.w	r8, r8, #12
  ptp_clock->foreignMasterDS.best = best;
 8001fc4:	f8a0 30b2 	strh.w	r3, [r0, #178]	@ 0xb2
  if ((!ptp_clock->foreignMasterDS.count) && (ptp_clock->portDS.portState == PTP_LISTENING))
 8001fc8:	f1b9 0f00 	cmp.w	r9, #0
 8001fcc:	d1c3      	bne.n	8001f56 <ptpd_bmc+0x6e>
 8001fce:	f890 004a 	ldrb.w	r0, [r0, #74]	@ 0x4a
 8001fd2:	2803      	cmp	r0, #3
 8001fd4:	d1bf      	bne.n	8001f56 <ptpd_bmc+0x6e>
 8001fd6:	e7ed      	b.n	8001fb4 <ptpd_bmc+0xcc>
      ptpd_m1(ptp_clock);
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7ff ff01 	bl	8001de0 <ptpd_m1>
      return PTP_MASTER;
 8001fde:	2005      	movs	r0, #5
}
 8001fe0:	b003      	add	sp, #12
 8001fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (A_better_then_B == comp)
 8001fe6:	2801      	cmp	r0, #1
 8001fe8:	d0f6      	beq.n	8001fd8 <ptpd_bmc+0xf0>
      ptpd_s1(ptp_clock, header, announce);
 8001fea:	4628      	mov	r0, r5
 8001fec:	4642      	mov	r2, r8
 8001fee:	4621      	mov	r1, r4
 8001ff0:	f7ff ff1c 	bl	8001e2c <ptpd_s1>
      return PTP_SLAVE;
 8001ff4:	2008      	movs	r0, #8
}
 8001ff6:	b003      	add	sp, #12
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ffc <ptpd_thread>:
}

static void ptpd_thread(void *arg)
{
  // Initialize the main PTP datastructure.
  memset(&ptp_clock, 0, sizeof(ptp_clock));
 8001ffc:	4c1c      	ldr	r4, [pc, #112]	@ (8002070 <ptpd_thread+0x74>)
 8001ffe:	f44f 628f 	mov.w	r2, #1144	@ 0x478
 8002002:	2100      	movs	r1, #0
 8002004:	4620      	mov	r0, r4
      // checked for 'port_state'. The actions and events may or may not change
      // 'port_state' by calling ptpd_protocol_to_state(), but once they are done we loop around
      // again and perform the actions required for the new 'port_state'.
      ptpd_protocol_do_state(&ptp_clock);
    }
    while (ptpd_net_select(&ptp_clock.netPath, 0) > 0);
 8002006:	f504 6584 	add.w	r5, r4, #1056	@ 0x420
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	4f19      	ldr	r7, [pc, #100]	@ (8002074 <ptpd_thread+0x78>)
  memset(&ptp_clock, 0, sizeof(ptp_clock));
 8002010:	f014 fbe6 	bl	80167e0 <memset>
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <ptpd_thread+0x7c>)
  ptp_clock.rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 8002016:	2122      	movs	r1, #34	@ 0x22
  ptp_clock.rtOpts.slaveOnly = true;
 8002018:	2301      	movs	r3, #1
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 800201a:	f8c4 2036 	str.w	r2, [r4, #54]	@ 0x36
  ptp_clock.rtOpts.maxForeignRecords = sizeof(ptp_foreign_records) / sizeof(ptp_foreign_records[0]);
 800201e:	2205      	movs	r2, #5
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 8002020:	4816      	ldr	r0, [pc, #88]	@ (800207c <ptpd_thread+0x80>)
  ptp_clock.rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 8002022:	8161      	strh	r1, [r4, #10]
  ptp_clock.foreignMasterDS.records = ptp_foreign_records;
 8002024:	4916      	ldr	r1, [pc, #88]	@ (8002080 <ptpd_thread+0x84>)
  ptp_clock.rtOpts.slaveOnly = true;
 8002026:	7263      	strb	r3, [r4, #9]
  ptp_clock.rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 8002028:	7023      	strb	r3, [r4, #0]
  ptp_clock.rtOpts.stats = PTP_TEXT_STATS;
 800202a:	73a3      	strb	r3, [r4, #14]
  ptp_clock.rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 800202c:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
  ptp_clock.rtOpts.maxForeignRecords = sizeof(ptp_foreign_records) / sizeof(ptp_foreign_records[0]);
 8002030:	8622      	strh	r2, [r4, #48]	@ 0x30
  if (ptp_clock.rtOpts.slaveOnly) ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 8002032:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
  ptp_clock.rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; // 7.6.3.3
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <ptpd_thread+0x88>)
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 8002038:	f8c4 003a 	str.w	r0, [r4, #58]	@ 0x3a
  ptpd_protocol_to_state(&ptp_clock, PTP_INITIALIZING);
 800203c:	4620      	mov	r0, r4
  ptp_clock.foreignMasterDS.records = ptp_foreign_records;
 800203e:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
  ptpd_protocol_to_state(&ptp_clock, PTP_INITIALIZING);
 8002042:	2100      	movs	r1, #0
  if (ptp_clock.rtOpts.slaveOnly) ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 8002044:	8062      	strh	r2, [r4, #2]
  ptp_clock.rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; // 7.6.3.3
 8002046:	6063      	str	r3, [r4, #4]
  ptpd_protocol_to_state(&ptp_clock, PTP_INITIALIZING);
 8002048:	f000 fce2 	bl	8002a10 <ptpd_protocol_to_state>
      ptpd_protocol_do_state(&ptp_clock);
 800204c:	4620      	mov	r0, r4
 800204e:	f001 f979 	bl	8003344 <ptpd_protocol_do_state>
    while (ptpd_net_select(&ptp_clock.netPath, 0) > 0);
 8002052:	2100      	movs	r1, #0
 8002054:	4628      	mov	r0, r5
 8002056:	f000 fc43 	bl	80028e0 <ptpd_net_select>
 800205a:	2800      	cmp	r0, #0
 800205c:	dcf6      	bgt.n	800204c <ptpd_thread+0x50>

    xEventGroupWaitBits(ptp_alert_event_bits, ALERT_EVENT_BIT, true, true, 100);
 800205e:	2301      	movs	r3, #1
 8002060:	2664      	movs	r6, #100	@ 0x64
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4619      	mov	r1, r3
 8002068:	9600      	str	r6, [sp, #0]
 800206a:	f004 fd01 	bl	8006a70 <xEventGroupWaitBits>
  while (true)
 800206e:	e7ed      	b.n	800204c <ptpd_thread+0x50>
 8002070:	20000668 	.word	0x20000668
 8002074:	200004a8 	.word	0x200004a8
 8002078:	00100002 	.word	0x00100002
 800207c:	00010006 	.word	0x00010006
 8002080:	200004b0 	.word	0x200004b0
 8002084:	f8f81388 	.word	0xf8f81388

08002088 <ptpd_init>:
{
 8002088:	b510      	push	{r4, lr}
 800208a:	b082      	sub	sp, #8
  ptp_alert_event_bits = xEventGroupCreate();
 800208c:	4c07      	ldr	r4, [pc, #28]	@ (80020ac <ptpd_init+0x24>)
 800208e:	f004 fce1 	bl	8006a54 <xEventGroupCreate>
  xTaskCreate(ptpd_thread, "ptpd", 500, NULL, 45, NULL);
 8002092:	2300      	movs	r3, #0
 8002094:	212d      	movs	r1, #45	@ 0x2d
 8002096:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800209a:	e9cd 1300 	strd	r1, r3, [sp]
 800209e:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <ptpd_init+0x28>)
  ptp_alert_event_bits = xEventGroupCreate();
 80020a0:	6020      	str	r0, [r4, #0]
  xTaskCreate(ptpd_thread, "ptpd", 500, NULL, 45, NULL);
 80020a2:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <ptpd_init+0x2c>)
 80020a4:	f005 fdd0 	bl	8007c48 <xTaskCreate>
}
 80020a8:	b002      	add	sp, #8
 80020aa:	bd10      	pop	{r4, pc}
 80020ac:	200004a8 	.word	0x200004a8
 80020b0:	08019090 	.word	0x08019090
 80020b4:	08001ffd 	.word	0x08001ffd

080020b8 <ptpd_alert>:
}

// Notify the PTPD thread of a pending operation.
void ptpd_alert(void)
{
  xEventGroupSetBits(ptp_alert_event_bits, ALERT_EVENT_BIT);
 80020b8:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <ptpd_alert+0xc>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f004 bd6d 	b.w	8006b9c <xEventGroupSetBits>
 80020c2:	bf00      	nop
 80020c4:	200004a8 	.word	0x200004a8

080020c8 <ptpd_msg_unpack_header>:
#include <string.h>
#include "ptpd.h"

// Unpack header message.
void ptpd_msg_unpack_header(const octet_t *buf, MsgHeader *header)
{
 80020c8:	b570      	push	{r4, r5, r6, lr}
  int32_t msb;
  uint32_t lsb;

  header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 80020ca:	7803      	ldrb	r3, [r0, #0]
{
 80020cc:	460c      	mov	r4, r1
 80020ce:	4605      	mov	r5, r0
  header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	700b      	strb	r3, [r1, #0]
  header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 80020d4:	7803      	ldrb	r3, [r0, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	704b      	strb	r3, [r1, #1]
  header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; // Force reserved bit to zero if not.
 80020dc:	7843      	ldrb	r3, [r0, #1]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	708b      	strb	r3, [r1, #2]
  header->messageLength = flip16(*(int16_t*)(buf  + 2));
 80020e4:	8840      	ldrh	r0, [r0, #2]
 80020e6:	f00d fba5 	bl	800f834 <lwip_htons>
 80020ea:	80a0      	strh	r0, [r4, #4]
  header->domainNumber = (*(uint8_t*)(buf + 4));
 80020ec:	792b      	ldrb	r3, [r5, #4]
 80020ee:	71a3      	strb	r3, [r4, #6]
  memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 80020f0:	88eb      	ldrh	r3, [r5, #6]
 80020f2:	f8a4 3007 	strh.w	r3, [r4, #7]
  memcpy(&msb, (buf + 8), 4);
  memcpy(&lsb, (buf + 12), 4);
  header->correctionfield = flip32(msb);
 80020f6:	68a8      	ldr	r0, [r5, #8]
  memcpy(&lsb, (buf + 12), 4);
 80020f8:	68ee      	ldr	r6, [r5, #12]
  header->correctionfield = flip32(msb);
 80020fa:	f00d fb9f 	bl	800f83c <lwip_htonl>
  header->correctionfield <<= 32;
 80020fe:	2200      	movs	r2, #0
  header->correctionfield = flip32(msb);
 8002100:	4603      	mov	r3, r0
  header->correctionfield += flip32(lsb);
 8002102:	4630      	mov	r0, r6
  header->correctionfield <<= 32;
 8002104:	e9c4 2304 	strd	r2, r3, [r4, #16]
  header->correctionfield += flip32(lsb);
 8002108:	f00d fb98 	bl	800f83c <lwip_htonl>
 800210c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002110:	181b      	adds	r3, r3, r0
 8002112:	f142 0200 	adc.w	r2, r2, #0
 8002116:	e9c4 3204 	strd	r3, r2, [r4, #16]
  memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 800211a:	69ab      	ldr	r3, [r5, #24]
 800211c:	696a      	ldr	r2, [r5, #20]
 800211e:	61e3      	str	r3, [r4, #28]
 8002120:	61a2      	str	r2, [r4, #24]
  header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 8002122:	8ba8      	ldrh	r0, [r5, #28]
 8002124:	f00d fb86 	bl	800f834 <lwip_htons>
 8002128:	8420      	strh	r0, [r4, #32]
  header->sequenceId = flip16(*(int16_t*)(buf + 30));
 800212a:	8be8      	ldrh	r0, [r5, #30]
 800212c:	f00d fb82 	bl	800f834 <lwip_htons>
 8002130:	8460      	strh	r0, [r4, #34]	@ 0x22
  header->controlField = (*(uint8_t*)(buf + 32));
 8002132:	f895 3020 	ldrb.w	r3, [r5, #32]
 8002136:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  header->logMessageInterval = (*(int8_t*)(buf + 33));
 800213a:	f995 3021 	ldrsb.w	r3, [r5, #33]	@ 0x21
 800213e:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 8002142:	bd70      	pop	{r4, r5, r6, pc}

08002144 <ptpd_msg_pack_header>:

// Pack header message.
void ptpd_msg_pack_header(const PtpClock *ptp_clock, octet_t *buf)
{
  nibble_t transport = 0x80; // (spec annex D)
  *(uint8_t*)(buf + 0) = transport;
 8002144:	2380      	movs	r3, #128	@ 0x80
{
 8002146:	b510      	push	{r4, lr}
  *(uint8_t*)(buf + 0) = transport;
 8002148:	700b      	strb	r3, [r1, #0]
{
 800214a:	460c      	mov	r4, r1
  *(uint4bit_t*)(buf  + 1) = ptp_clock->portDS.versionNumber;
 800214c:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8002150:	704b      	strb	r3, [r1, #1]
  *(uint8_t*)(buf + 4) = ptp_clock->defaultDS.domainNumber;
 8002152:	f890 3092 	ldrb.w	r3, [r0, #146]	@ 0x92
 8002156:	710b      	strb	r3, [r1, #4]
  if (ptp_clock->defaultDS.twoStepFlag)
 8002158:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800215c:	b10b      	cbz	r3, 8002162 <ptpd_msg_pack_header+0x1e>
  {
      *(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 800215e:	2302      	movs	r3, #2
 8002160:	718b      	strb	r3, [r1, #6]
  }
  memset((buf + 8), 0, 8);
 8002162:	2300      	movs	r3, #0
 8002164:	60a3      	str	r3, [r4, #8]
 8002166:	60e3      	str	r3, [r4, #12]
  memcpy((buf + 20), ptp_clock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002168:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800216a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800216c:	61a3      	str	r3, [r4, #24]
 800216e:	6162      	str	r2, [r4, #20]
  *(int16_t*)(buf + 28) = flip16(ptp_clock->portDS.portIdentity.portNumber);
 8002170:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 8002174:	f00d fb5e 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 8002178:	237f      	movs	r3, #127	@ 0x7f
  *(int16_t*)(buf + 28) = flip16(ptp_clock->portDS.portIdentity.portNumber);
 800217a:	83a0      	strh	r0, [r4, #28]
  *(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 800217c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8002180:	bd10      	pop	{r4, pc}
 8002182:	bf00      	nop

08002184 <ptpd_msg_pack_announce>:

// Pack Announce message.
void ptpd_msg_pack_announce(const PtpClock *ptp_clock, octet_t *buf)
{
 8002184:	b538      	push	{r3, r4, r5, lr}
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002186:	780b      	ldrb	r3, [r1, #0]
{
 8002188:	460c      	mov	r4, r1
 800218a:	4605      	mov	r5, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
  *(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 800218c:	2040      	movs	r0, #64	@ 0x40
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800218e:	f023 030f 	bic.w	r3, r3, #15
  *(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 8002192:	f043 030b 	orr.w	r3, r3, #11
 8002196:	700b      	strb	r3, [r1, #0]
  *(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 8002198:	f00d fb4c 	bl	800f834 <lwip_htons>
 800219c:	8060      	strh	r0, [r4, #2]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentAnnounceSequenceId);
 800219e:	f8b5 03c6 	ldrh.w	r0, [r5, #966]	@ 0x3c6
 80021a2:	f00d fb47 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23 - controlField
 80021a6:	2105      	movs	r1, #5
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logAnnounceInterval;

  // Announce message
  memset((buf + 34), 0, 10); // origin_timestamp
 80021a8:	2300      	movs	r3, #0
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentAnnounceSequenceId);
 80021aa:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23 - controlField
 80021ac:	f884 1020 	strb.w	r1, [r4, #32]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logAnnounceInterval;
 80021b0:	f995 1054 	ldrsb.w	r1, [r5, #84]	@ 0x54
  memset((buf + 34), 0, 10); // origin_timestamp
 80021b4:	f8c4 3022 	str.w	r3, [r4, #34]	@ 0x22
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logAnnounceInterval;
 80021b8:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
  memset((buf + 34), 0, 10); // origin_timestamp
 80021bc:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80021c0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  *(int16_t*)(buf + 44) = flip16(ptp_clock->timePropertiesDS.currentUtcOffset);
 80021c2:	f8b5 00b4 	ldrh.w	r0, [r5, #180]	@ 0xb4
 80021c6:	f00d fb35 	bl	800f834 <lwip_htons>
 80021ca:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  *(uint8_t*)(buf + 47) = ptp_clock->parentDS.grandmasterPriority1;
 80021cc:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80021d0:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
  *(uint8_t*)(buf + 48) = ptp_clock->defaultDS.clockQuality.clockClass;
 80021d4:	f895 308c 	ldrb.w	r3, [r5, #140]	@ 0x8c
 80021d8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  *(enum8bit_t*)(buf + 49) = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 80021dc:	f895 308d 	ldrb.w	r3, [r5, #141]	@ 0x8d
 80021e0:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
  *(int16_t*)(buf + 50) = flip16(ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance);
 80021e4:	f8b5 008e 	ldrh.w	r0, [r5, #142]	@ 0x8e
 80021e8:	f00d fb24 	bl	800f834 <lwip_htons>
 80021ec:	8660      	strh	r0, [r4, #50]	@ 0x32
  *(uint8_t*)(buf + 52) = ptp_clock->parentDS.grandmasterPriority2;
 80021ee:	f895 307d 	ldrb.w	r3, [r5, #125]	@ 0x7d
 80021f2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  memcpy((buf + 53), ptp_clock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 80021f6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021f8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 80021fa:	f8c4 3039 	str.w	r3, [r4, #57]	@ 0x39
 80021fe:	f8c4 2035 	str.w	r2, [r4, #53]	@ 0x35
  *(int16_t*)(buf + 61) = flip16(ptp_clock->currentDS.stepsRemoved);
 8002202:	f8b5 0094 	ldrh.w	r0, [r5, #148]	@ 0x94
 8002206:	f00d fb15 	bl	800f834 <lwip_htons>
 800220a:	f8a4 003d 	strh.w	r0, [r4, #61]	@ 0x3d
  *(enum8bit_t*)(buf + 63) = ptp_clock->timePropertiesDS.timeSource;
 800220e:	f895 30bc 	ldrb.w	r3, [r5, #188]	@ 0xbc
 8002212:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
}
 8002216:	bd38      	pop	{r3, r4, r5, pc}

08002218 <ptpd_msg_unpack_announce>:

// Unpack Announce message.
void ptpd_msg_unpack_announce(const octet_t *buf, MsgAnnounce *announce)
{
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4605      	mov	r5, r0
  announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 800221c:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 800221e:	460c      	mov	r4, r1
  announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 8002220:	f00d fb08 	bl	800f834 <lwip_htons>
 8002224:	4603      	mov	r3, r0
  announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8002226:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 8002228:	80a3      	strh	r3, [r4, #4]
  announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800222a:	f00d fb07 	bl	800f83c <lwip_htonl>
 800222e:	4603      	mov	r3, r0
  announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8002230:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8002232:	6023      	str	r3, [r4, #0]
  announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8002234:	f00d fb02 	bl	800f83c <lwip_htonl>
 8002238:	4603      	mov	r3, r0
  announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 800223a:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
  announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 800223c:	60a3      	str	r3, [r4, #8]
  announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 800223e:	f00d faf9 	bl	800f834 <lwip_htons>
 8002242:	81a0      	strh	r0, [r4, #12]
  announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 8002244:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 8002248:	73a3      	strb	r3, [r4, #14]
  announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 800224a:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800224e:	7423      	strb	r3, [r4, #16]
  announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 8002250:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 8002254:	7463      	strb	r3, [r4, #17]
  announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 8002256:	8e68      	ldrh	r0, [r5, #50]	@ 0x32
 8002258:	f00d faec 	bl	800f834 <lwip_htons>
 800225c:	8260      	strh	r0, [r4, #18]
  announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 800225e:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 8002262:	7523      	strb	r3, [r4, #20]
  memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 8002264:	f8d5 3039 	ldr.w	r3, [r5, #57]	@ 0x39
 8002268:	f8d5 2035 	ldr.w	r2, [r5, #53]	@ 0x35
 800226c:	f8c4 3019 	str.w	r3, [r4, #25]
 8002270:	f8c4 2015 	str.w	r2, [r4, #21]
  announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 8002274:	f8b5 003d 	ldrh.w	r0, [r5, #61]	@ 0x3d
 8002278:	f00d fadc 	bl	800f834 <lwip_htons>
 800227c:	83e0      	strh	r0, [r4, #30]
  announce->timeSource = *(enum8bit_t*)(buf + 63);
 800227e:	f895 303f 	ldrb.w	r3, [r5, #63]	@ 0x3f
 8002282:	f884 3020 	strb.w	r3, [r4, #32]
}
 8002286:	bd38      	pop	{r3, r4, r5, pc}

08002288 <ptpd_msg_pack_sync>:

// Pack Sync message.
void ptpd_msg_pack_sync(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002288:	780b      	ldrb	r3, [r1, #0]
 800228a:	f023 030f 	bic.w	r3, r3, #15
{
 800228e:	b570      	push	{r4, r5, r6, lr}
 8002290:	460c      	mov	r4, r1
 8002292:	4606      	mov	r6, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002294:	700b      	strb	r3, [r1, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; // Table 19
  *(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 8002296:	202c      	movs	r0, #44	@ 0x2c
{
 8002298:	4615      	mov	r5, r2
  *(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 800229a:	f00d facb 	bl	800f834 <lwip_htons>
 800229e:	8060      	strh	r0, [r4, #2]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId);
 80022a0:	f8b6 03c4 	ldrh.w	r0, [r6, #964]	@ 0x3c4
 80022a4:	f00d fac6 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_SYNC; // Table 23
 80022a8:	2300      	movs	r3, #0
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId);
 80022aa:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_SYNC; // Table 23
 80022ac:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 80022b0:	f996 2056 	ldrsb.w	r2, [r6, #86]	@ 0x56
  memset((buf + 8), 0, 8); // Correction field
 80022b4:	60a3      	str	r3, [r4, #8]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 80022b6:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  memset((buf + 8), 0, 8); // Correction field
 80022ba:	60e3      	str	r3, [r4, #12]

  // Sync message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80022bc:	88a8      	ldrh	r0, [r5, #4]
 80022be:	f00d fab9 	bl	800f834 <lwip_htons>
 80022c2:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80022c4:	6828      	ldr	r0, [r5, #0]
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80022c6:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80022c8:	f00d fab8 	bl	800f83c <lwip_htonl>
 80022cc:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80022ce:	68a8      	ldr	r0, [r5, #8]
 80022d0:	f00d fab4 	bl	800f83c <lwip_htonl>
 80022d4:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}

080022d8 <ptpd_msg_unpack_sync>:

// Unpack Sync message.
void ptpd_msg_unpack_sync(const octet_t *buf, MsgSync *sync)
{
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	4605      	mov	r5, r0
  sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 80022dc:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 80022de:	460c      	mov	r4, r1
  sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 80022e0:	f00d faa8 	bl	800f834 <lwip_htons>
 80022e4:	4603      	mov	r3, r0
  sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80022e6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 80022e8:	80a3      	strh	r3, [r4, #4]
  sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80022ea:	f00d faa7 	bl	800f83c <lwip_htonl>
 80022ee:	4603      	mov	r3, r0
  sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80022f0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80022f2:	6023      	str	r3, [r4, #0]
  sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80022f4:	f00d faa2 	bl	800f83c <lwip_htonl>
 80022f8:	60a0      	str	r0, [r4, #8]
}
 80022fa:	bd38      	pop	{r3, r4, r5, pc}

080022fc <ptpd_msg_pack_delay_req>:

// Pack DelayReq message.
void ptpd_msg_pack_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80022fe:	780b      	ldrb	r3, [r1, #0]
{
 8002300:	460c      	mov	r4, r1
 8002302:	4606      	mov	r6, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; // Table 19
  *(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 8002304:	202c      	movs	r0, #44	@ 0x2c
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002306:	f023 030f 	bic.w	r3, r3, #15
{
 800230a:	4615      	mov	r5, r2
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; // Table 19
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	700b      	strb	r3, [r1, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 8002312:	f00d fa8f 	bl	800f834 <lwip_htons>
 8002316:	8060      	strh	r0, [r4, #2]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentDelayReqSequenceId);
 8002318:	f8b6 03c2 	ldrh.w	r0, [r6, #962]	@ 0x3c2
 800231c:	f00d fa8a 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; // Table 23
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
  memset((buf + 8), 0, 8);
 8002320:	2300      	movs	r3, #0
  *(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; // Table 23
 8002322:	2101      	movs	r1, #1
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8002324:	227f      	movs	r2, #127	@ 0x7f
  memset((buf + 8), 0, 8);
 8002326:	60a3      	str	r3, [r4, #8]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; // Table 23
 8002328:	f884 1020 	strb.w	r1, [r4, #32]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 800232c:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  memset((buf + 8), 0, 8);
 8002330:	60e3      	str	r3, [r4, #12]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentDelayReqSequenceId);
 8002332:	83e0      	strh	r0, [r4, #30]

  // Delay_req message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 8002334:	88a8      	ldrh	r0, [r5, #4]
 8002336:	f00d fa7d 	bl	800f834 <lwip_htons>
 800233a:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 800233c:	6828      	ldr	r0, [r5, #0]
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 800233e:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 8002340:	f00d fa7c 	bl	800f83c <lwip_htonl>
 8002344:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 8002346:	68a8      	ldr	r0, [r5, #8]
 8002348:	f00d fa78 	bl	800f83c <lwip_htonl>
 800234c:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800234e:	bd70      	pop	{r4, r5, r6, pc}

08002350 <ptpd_msg_pack_follow_up>:

// Pack FollowUp message.
void ptpd_msg_pack_follow_up(const PtpClock *ptp_clock, octet_t*buf, const Timestamp *precise_origin_timestamp)
{
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002350:	780b      	ldrb	r3, [r1, #0]
 8002352:	f023 030f 	bic.w	r3, r3, #15
  *(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; // Table 19
 8002356:	f043 0308 	orr.w	r3, r3, #8
{
 800235a:	b570      	push	{r4, r5, r6, lr}
 800235c:	460c      	mov	r4, r1
 800235e:	4606      	mov	r6, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; // Table 19
 8002360:	700b      	strb	r3, [r1, #0]
  *(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8002362:	202c      	movs	r0, #44	@ 0x2c
{
 8002364:	4615      	mov	r5, r2
  *(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8002366:	f00d fa65 	bl	800f834 <lwip_htons>
 800236a:	8060      	strh	r0, [r4, #2]
  // sentSyncSequenceId has already been incremented in issueSync.
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId - 1);
 800236c:	f8b6 03c4 	ldrh.w	r0, [r6, #964]	@ 0x3c4
 8002370:	3801      	subs	r0, #1
 8002372:	b280      	uxth	r0, r0
 8002374:	f00d fa5e 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; // Table 23
 8002378:	2302      	movs	r3, #2
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId - 1);
 800237a:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; // Table 23
 800237c:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 8002380:	f996 3056 	ldrsb.w	r3, [r6, #86]	@ 0x56
 8002384:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  // Follow_up message.
  *(int16_t*)(buf + 34) = flip16(precise_origin_timestamp->secondsField.msb);
 8002388:	88a8      	ldrh	r0, [r5, #4]
 800238a:	f00d fa53 	bl	800f834 <lwip_htons>
 800238e:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(precise_origin_timestamp->secondsField.lsb);
 8002390:	6828      	ldr	r0, [r5, #0]
  *(int16_t*)(buf + 34) = flip16(precise_origin_timestamp->secondsField.msb);
 8002392:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(precise_origin_timestamp->secondsField.lsb);
 8002394:	f00d fa52 	bl	800f83c <lwip_htonl>
 8002398:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(precise_origin_timestamp->nanosecondsField);
 800239a:	68a8      	ldr	r0, [r5, #8]
 800239c:	f00d fa4e 	bl	800f83c <lwip_htonl>
 80023a0:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 80023a2:	bd70      	pop	{r4, r5, r6, pc}

080023a4 <ptpd_msg_unpack_follow_up>:

// Unpack FollowUp message.
void ptpd_msg_unpack_follow_up(const octet_t *buf, MsgFollowUp *follow)
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4605      	mov	r5, r0
  follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80023a8:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 80023aa:	460c      	mov	r4, r1
  follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80023ac:	f00d fa42 	bl	800f834 <lwip_htons>
 80023b0:	4603      	mov	r3, r0
  follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80023b2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80023b4:	80a3      	strh	r3, [r4, #4]
  follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80023b6:	f00d fa41 	bl	800f83c <lwip_htonl>
 80023ba:	4603      	mov	r3, r0
  follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80023bc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80023be:	6023      	str	r3, [r4, #0]
  follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80023c0:	f00d fa3c 	bl	800f83c <lwip_htonl>
 80023c4:	60a0      	str	r0, [r4, #8]
}
 80023c6:	bd38      	pop	{r3, r4, r5, pc}

080023c8 <ptpd_msg_pack_delay_resp>:

// Pack DelayResp message.
void ptpd_msg_pack_delay_resp(const PtpClock *ptp_clock, octet_t *buf, const MsgHeader *header, const Timestamp *receive_timestamp)
{
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	461e      	mov	r6, r3
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80023cc:	780b      	ldrb	r3, [r1, #0]
{
 80023ce:	4607      	mov	r7, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; // Table 19
  *(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 80023d0:	2036      	movs	r0, #54	@ 0x36
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80023d2:	f023 030f 	bic.w	r3, r3, #15
{
 80023d6:	460c      	mov	r4, r1
 80023d8:	4615      	mov	r5, r2
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; // Table 19
 80023da:	f043 0309 	orr.w	r3, r3, #9
 80023de:	700b      	strb	r3, [r1, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 80023e0:	f00d fa28 	bl	800f834 <lwip_htons>
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 80023e4:	2300      	movs	r3, #0
  *(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 80023e6:	8060      	strh	r0, [r4, #2]
  memset((buf + 8), 0, 8);
 80023e8:	60a3      	str	r3, [r4, #8]
 80023ea:	60e3      	str	r3, [r4, #12]

  // Copy correctionField of delayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 80023ec:	6968      	ldr	r0, [r5, #20]
 80023ee:	f00d fa25 	bl	800f83c <lwip_htonl>
 80023f2:	60a0      	str	r0, [r4, #8]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 80023f4:	6928      	ldr	r0, [r5, #16]
 80023f6:	f00d fa21 	bl	800f83c <lwip_htonl>
 80023fa:	60e0      	str	r0, [r4, #12]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 80023fc:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80023fe:	f00d fa19 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; // Table 23
 8002402:	2303      	movs	r3, #3
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8002404:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; // Table 23
 8002406:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logMinDelayReqInterval; //Table 24
 800240a:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800240e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  // delay_resp message.
  *(int16_t*)(buf + 34) = flip16(receive_timestamp->secondsField.msb);
 8002412:	88b0      	ldrh	r0, [r6, #4]
 8002414:	f00d fa0e 	bl	800f834 <lwip_htons>
 8002418:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(receive_timestamp->secondsField.lsb);
 800241a:	6830      	ldr	r0, [r6, #0]
  *(int16_t*)(buf + 34) = flip16(receive_timestamp->secondsField.msb);
 800241c:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(receive_timestamp->secondsField.lsb);
 800241e:	f00d fa0d 	bl	800f83c <lwip_htonl>
 8002422:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(receive_timestamp->nanosecondsField);
 8002424:	68b0      	ldr	r0, [r6, #8]
 8002426:	f00d fa09 	bl	800f83c <lwip_htonl>
 800242a:	62a0      	str	r0, [r4, #40]	@ 0x28
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 800242c:	69aa      	ldr	r2, [r5, #24]
 800242e:	69eb      	ldr	r3, [r5, #28]
 8002430:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002432:	6323      	str	r3, [r4, #48]	@ 0x30
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8002434:	8c28      	ldrh	r0, [r5, #32]
 8002436:	f00d f9fd 	bl	800f834 <lwip_htons>
 800243a:	86a0      	strh	r0, [r4, #52]	@ 0x34
}
 800243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800243e:	bf00      	nop

08002440 <ptpd_msg_unpack_delay_resp>:

// Unpack DelayResp message.
void ptpd_msg_unpack_delay_resp(const octet_t *buf, MsgDelayResp *resp)
{
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4605      	mov	r5, r0
  resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8002444:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 8002446:	460c      	mov	r4, r1
  resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8002448:	f00d f9f4 	bl	800f834 <lwip_htons>
 800244c:	4603      	mov	r3, r0
  resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800244e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8002450:	80a3      	strh	r3, [r4, #4]
  resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8002452:	f00d f9f3 	bl	800f83c <lwip_htonl>
 8002456:	4603      	mov	r3, r0
  resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8002458:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800245a:	6023      	str	r3, [r4, #0]
  resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 800245c:	f00d f9ee 	bl	800f83c <lwip_htonl>
 8002460:	60a0      	str	r0, [r4, #8]
  memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8002462:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002464:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002466:	60e2      	str	r2, [r4, #12]
 8002468:	6123      	str	r3, [r4, #16]
  resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 800246a:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800246c:	f00d f9e2 	bl	800f834 <lwip_htons>
 8002470:	82a0      	strh	r0, [r4, #20]
}
 8002472:	bd38      	pop	{r3, r4, r5, pc}

08002474 <ptpd_msg_pack_peer_delay_req>:

// Pack PeerDelayReq message.
void ptpd_msg_pack_peer_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002476:	780b      	ldrb	r3, [r1, #0]
{
 8002478:	460c      	mov	r4, r1
 800247a:	4607      	mov	r7, r0
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; // Table 19
  *(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 800247c:	2036      	movs	r0, #54	@ 0x36
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800247e:	f023 030f 	bic.w	r3, r3, #15
{
 8002482:	4616      	mov	r6, r2
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentPDelayReqSequenceId);
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
  memset((buf + 8), 0, 8);
 8002484:	2500      	movs	r5, #0
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; // Table 19
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	700b      	strb	r3, [r1, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 800248c:	f00d f9d2 	bl	800f834 <lwip_htons>
 8002490:	8060      	strh	r0, [r4, #2]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentPDelayReqSequenceId);
 8002492:	f8b7 03c0 	ldrh.w	r0, [r7, #960]	@ 0x3c0
 8002496:	f00d f9cd 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 800249a:	2305      	movs	r3, #5
  memset((buf + 8), 0, 8);
 800249c:	60a5      	str	r5, [r4, #8]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 800249e:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 80024a2:	237f      	movs	r3, #127	@ 0x7f
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentPDelayReqSequenceId);
 80024a4:	83e0      	strh	r0, [r4, #30]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 80024a6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memset((buf + 8), 0, 8);
 80024aa:	60e5      	str	r5, [r4, #12]

  // Pdelay_req message
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80024ac:	88b0      	ldrh	r0, [r6, #4]
 80024ae:	f00d f9c1 	bl	800f834 <lwip_htons>
 80024b2:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80024b4:	6830      	ldr	r0, [r6, #0]
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80024b6:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80024b8:	f00d f9c0 	bl	800f83c <lwip_htonl>
 80024bc:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80024be:	68b0      	ldr	r0, [r6, #8]
 80024c0:	f00d f9bc 	bl	800f83c <lwip_htonl>
  memset((buf + 44), 0, 10); // RAZ reserved octets.
 80024c4:	62e5      	str	r5, [r4, #44]	@ 0x2c
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80024c6:	62a0      	str	r0, [r4, #40]	@ 0x28
  memset((buf + 44), 0, 10); // RAZ reserved octets.
 80024c8:	6325      	str	r5, [r4, #48]	@ 0x30
 80024ca:	86a5      	strh	r5, [r4, #52]	@ 0x34
}
 80024cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ce:	bf00      	nop

080024d0 <ptpd_msg_pack_peer_delay_resp>:
  pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

// Pack PeerDelayResp message.
void ptpd_msg_pack_peer_delay_resp(octet_t *buf, const MsgHeader *header, const Timestamp *request_receipt_timestamp)
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4604      	mov	r4, r0
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; // Table 19
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 80024d4:	2036      	movs	r0, #54	@ 0x36
{
 80024d6:	460d      	mov	r5, r1
 80024d8:	4616      	mov	r6, r2
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80024da:	7823      	ldrb	r3, [r4, #0]
 80024dc:	f023 030f 	bic.w	r3, r3, #15
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; // Table 19
 80024e0:	f043 0303 	orr.w	r3, r3, #3
 80024e4:	7023      	strb	r3, [r4, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 80024e6:	f00d f9a5 	bl	800f834 <lwip_htons>
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 80024ea:	2300      	movs	r3, #0
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 80024ec:	8060      	strh	r0, [r4, #2]
  memset((buf + 8), 0, 8);
 80024ee:	60a3      	str	r3, [r4, #8]
 80024f0:	60e3      	str	r3, [r4, #12]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 80024f2:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80024f4:	f00d f99e 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 80024f8:	2305      	movs	r3, #5
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 80024fa:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 80024fc:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8002500:	237f      	movs	r3, #127	@ 0x7f
 8002502:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  // Pdelay_resp message.
  *(int16_t*)(buf + 34) = flip16(request_receipt_timestamp->secondsField.msb);
 8002506:	88b0      	ldrh	r0, [r6, #4]
 8002508:	f00d f994 	bl	800f834 <lwip_htons>
 800250c:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(request_receipt_timestamp->secondsField.lsb);
 800250e:	6830      	ldr	r0, [r6, #0]
  *(int16_t*)(buf + 34) = flip16(request_receipt_timestamp->secondsField.msb);
 8002510:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(request_receipt_timestamp->secondsField.lsb);
 8002512:	f00d f993 	bl	800f83c <lwip_htonl>
 8002516:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(request_receipt_timestamp->nanosecondsField);
 8002518:	68b0      	ldr	r0, [r6, #8]
 800251a:	f00d f98f 	bl	800f83c <lwip_htonl>
 800251e:	62a0      	str	r0, [r4, #40]	@ 0x28
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002520:	69aa      	ldr	r2, [r5, #24]
 8002522:	69eb      	ldr	r3, [r5, #28]
 8002524:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002526:	6323      	str	r3, [r4, #48]	@ 0x30
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8002528:	8c28      	ldrh	r0, [r5, #32]
 800252a:	f00d f983 	bl	800f834 <lwip_htons>
 800252e:	86a0      	strh	r0, [r4, #52]	@ 0x34
}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
 8002532:	bf00      	nop

08002534 <ptpd_msg_unpack_peer_delay_resp>:

// Unpack PeerDelayResp message.
void ptpd_msg_unpack_peer_delay_resp(const octet_t *buf, MsgPDelayResp *presp)
{
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4605      	mov	r5, r0
  presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8002538:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 800253a:	460c      	mov	r4, r1
  presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 800253c:	f00d f97a 	bl	800f834 <lwip_htons>
 8002540:	4603      	mov	r3, r0
  presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8002542:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8002544:	80a3      	strh	r3, [r4, #4]
  presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8002546:	f00d f979 	bl	800f83c <lwip_htonl>
 800254a:	4603      	mov	r3, r0
  presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 800254c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800254e:	6023      	str	r3, [r4, #0]
  presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8002550:	f00d f974 	bl	800f83c <lwip_htonl>
 8002554:	60a0      	str	r0, [r4, #8]
  memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8002556:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002558:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800255a:	60e2      	str	r2, [r4, #12]
 800255c:	6123      	str	r3, [r4, #16]
  presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 800255e:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002560:	f00d f968 	bl	800f834 <lwip_htons>
 8002564:	82a0      	strh	r0, [r4, #20]
}
 8002566:	bd38      	pop	{r3, r4, r5, pc}

08002568 <ptpd_msg_pack_peer_delay_resp_follow_up>:

// Pack PeerDelayRespFollowUp message.
void ptpd_msg_pack_peer_delay_resp_follow_up(octet_t *buf, const MsgHeader *header, const Timestamp *response_origin_timestamp)
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; // Table 19
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 800256e:	2036      	movs	r0, #54	@ 0x36
{
 8002570:	4616      	mov	r6, r2
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8002572:	7823      	ldrb	r3, [r4, #0]
 8002574:	f023 030f 	bic.w	r3, r3, #15
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; // Table 19
 8002578:	f043 030a 	orr.w	r3, r3, #10
 800257c:	7023      	strb	r3, [r4, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 800257e:	f00d f959 	bl	800f834 <lwip_htons>
 8002582:	8060      	strh	r0, [r4, #2]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8002584:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8002586:	f00d f955 	bl	800f834 <lwip_htons>
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 800258a:	2305      	movs	r3, #5
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 800258c:	83e0      	strh	r0, [r4, #30]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 800258e:	f884 3020 	strb.w	r3, [r4, #32]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8002592:	237f      	movs	r3, #127	@ 0x7f
 8002594:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  // Copy correctionField of PdelayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8002598:	6968      	ldr	r0, [r5, #20]
 800259a:	f00d f94f 	bl	800f83c <lwip_htonl>
 800259e:	4603      	mov	r3, r0
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 80025a0:	6928      	ldr	r0, [r5, #16]
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 80025a2:	60a3      	str	r3, [r4, #8]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 80025a4:	f00d f94a 	bl	800f83c <lwip_htonl>
 80025a8:	60e0      	str	r0, [r4, #12]

  // Pdelay_resp_follow_up message.
  *(int16_t*)(buf + 34) = flip16(response_origin_timestamp->secondsField.msb);
 80025aa:	88b0      	ldrh	r0, [r6, #4]
 80025ac:	f00d f942 	bl	800f834 <lwip_htons>
 80025b0:	4603      	mov	r3, r0
  *(uint32_t*)(buf + 36) = flip32(response_origin_timestamp->secondsField.lsb);
 80025b2:	6830      	ldr	r0, [r6, #0]
  *(int16_t*)(buf + 34) = flip16(response_origin_timestamp->secondsField.msb);
 80025b4:	8463      	strh	r3, [r4, #34]	@ 0x22
  *(uint32_t*)(buf + 36) = flip32(response_origin_timestamp->secondsField.lsb);
 80025b6:	f00d f941 	bl	800f83c <lwip_htonl>
 80025ba:	6260      	str	r0, [r4, #36]	@ 0x24
  *(uint32_t*)(buf + 40) = flip32(response_origin_timestamp->nanosecondsField);
 80025bc:	68b0      	ldr	r0, [r6, #8]
 80025be:	f00d f93d 	bl	800f83c <lwip_htonl>
 80025c2:	62a0      	str	r0, [r4, #40]	@ 0x28
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80025c4:	69aa      	ldr	r2, [r5, #24]
 80025c6:	69eb      	ldr	r3, [r5, #28]
 80025c8:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80025ca:	6323      	str	r3, [r4, #48]	@ 0x30
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 80025cc:	8c28      	ldrh	r0, [r5, #32]
 80025ce:	f00d f931 	bl	800f834 <lwip_htons>
 80025d2:	86a0      	strh	r0, [r4, #52]	@ 0x34
}
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	bf00      	nop

080025d8 <ptpd_msg_unpack_peer_delay_resp_follow_up>:

// Unpack PeerDelayRespFollowUp message.
void ptpd_msg_unpack_peer_delay_resp_follow_up(const octet_t *buf, MsgPDelayRespFollowUp *resp_follow_up)
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4605      	mov	r5, r0
  resp_follow_up->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80025dc:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
{
 80025de:	460c      	mov	r4, r1
  resp_follow_up->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80025e0:	f00d f928 	bl	800f834 <lwip_htons>
 80025e4:	4603      	mov	r3, r0
  resp_follow_up->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80025e6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
  resp_follow_up->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80025e8:	80a3      	strh	r3, [r4, #4]
  resp_follow_up->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80025ea:	f00d f927 	bl	800f83c <lwip_htonl>
 80025ee:	4603      	mov	r3, r0
  resp_follow_up->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80025f0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  resp_follow_up->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80025f2:	6023      	str	r3, [r4, #0]
  resp_follow_up->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80025f4:	f00d f922 	bl	800f83c <lwip_htonl>
 80025f8:	60a0      	str	r0, [r4, #8]
  memcpy(resp_follow_up->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 80025fa:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80025fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025fe:	60e2      	str	r2, [r4, #12]
 8002600:	6123      	str	r3, [r4, #16]
  resp_follow_up->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8002602:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002604:	f00d f916 	bl	800f834 <lwip_htons>
 8002608:	82a0      	strh	r0, [r4, #20]
}
 800260a:	bd38      	pop	{r3, r4, r5, pc}

0800260c <ptpd_net_general_callback>:
}

// Process an incoming message on the general port.
static void ptpd_net_general_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                                      const ip_addr_t *addr, u16_t port)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
  sys_mutex_lock(&queue->mutex);
 800260e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
{
 8002612:	4604      	mov	r4, r0
 8002614:	4615      	mov	r5, r2
  sys_mutex_lock(&queue->mutex);
 8002616:	4630      	mov	r0, r6
 8002618:	f013 f9be 	bl	8015998 <sys_mutex_lock>
  if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 800261c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 8002620:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	@ 0x3e
 8002624:	3301      	adds	r3, #1
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <ptpd_net_general_callback+0x3a>
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 800262e:	b29b      	uxth	r3, r3
  sys_mutex_unlock(&queue->mutex);
 8002630:	4630      	mov	r0, r6
    queue->pbuf[queue->head] = pbuf;
 8002632:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 8002636:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    queue->pbuf[queue->head] = pbuf;
 8002638:	62d5      	str	r5, [r2, #44]	@ 0x2c
  sys_mutex_unlock(&queue->mutex);
 800263a:	f013 f9b3 	bl	80159a4 <sys_mutex_unlock>
  else
  {
    pbuf_free(p);
    ERROR("PTPD: general port queue full\n");
  }
}
 800263e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ptpd_alert();
 8002642:	f7ff bd39 	b.w	80020b8 <ptpd_alert>
  sys_mutex_unlock(&queue->mutex);
 8002646:	4630      	mov	r0, r6
 8002648:	f013 f9ac 	bl	80159a4 <sys_mutex_unlock>
    pbuf_free(p);
 800264c:	4628      	mov	r0, r5
}
 800264e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(p);
 8002652:	f00d bf7f 	b.w	8010554 <pbuf_free>
 8002656:	bf00      	nop

08002658 <ptpd_net_recv>:
  ptpd_net_queue_empty(&net_path->eventQ);
}

// Receive the next buffer from the given queue.
static ssize_t ptpd_net_recv(octet_t *buf, TimeInternal *time, BufQueue *queue)
{
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sys_mutex_lock(&queue->mutex);
 800265a:	f102 0614 	add.w	r6, r2, #20
{
 800265e:	4615      	mov	r5, r2
 8002660:	4604      	mov	r4, r0
 8002662:	460f      	mov	r7, r1
  sys_mutex_lock(&queue->mutex);
 8002664:	4630      	mov	r0, r6
 8002666:	f013 f997 	bl	8015998 <sys_mutex_lock>
  if (queue->tail != queue->head)
 800266a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800266e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d030      	beq.n	80026d8 <ptpd_net_recv+0x80>
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8002676:	3301      	adds	r3, #1
  sys_mutex_unlock(&queue->mutex);
 8002678:	4630      	mov	r0, r6
 800267a:	f003 0303 	and.w	r3, r3, #3
    pbuf = queue->pbuf[queue->tail];
 800267e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8002682:	826b      	strh	r3, [r5, #18]
  sys_mutex_unlock(&queue->mutex);
 8002684:	f013 f98e 	bl	80159a4 <sys_mutex_unlock>
  u16_t length;
  struct pbuf *p;
  struct pbuf *pcopy;

  // Get the next buffer from the queue.
  if ((p = (struct pbuf*) ptpd_net_queue_get(queue)) == NULL)
 8002688:	b31e      	cbz	r6, 80026d2 <ptpd_net_recv+0x7a>
  {
    return 0;
  }

  // Verify that we have enough space to store the contents.
  if (p->tot_len > PACKET_SIZE)
 800268a:	8935      	ldrh	r5, [r6, #8]
 800268c:	f5b5 7f96 	cmp.w	r5, #300	@ 0x12c
 8002690:	d81c      	bhi.n	80026cc <ptpd_net_recv+0x74>
    pbuf_free(p);
    return 0;
  }

  // Verify there is contents to copy.
  if (p->tot_len == 0)
 8002692:	b1dd      	cbz	r5, 80026cc <ptpd_net_recv+0x74>
    pbuf_free(p);
    return 0;
  }

  // Get the timestamp of the packet.
  if (time != NULL)
 8002694:	b11f      	cbz	r7, 800269e <ptpd_net_recv+0x46>
  {
    time->seconds = p->timestamp_sec;
 8002696:	e9d6 3204 	ldrd	r3, r2, [r6, #16]
 800269a:	e9c7 3200 	strd	r3, r2, [r7]
 800269e:	4620      	mov	r0, r4
  length = p->tot_len;

  // Copy the pbuf payload into the buffer.
  pcopy = p;
  j = 0;
  for (i = 0; i < length; i++)
 80026a0:	4631      	mov	r1, r6
 80026a2:	2300      	movs	r3, #0
 80026a4:	eb04 0c05 	add.w	ip, r4, r5
  {
    // Copy the next byte in the payload.
    buf[i] = ((u8_t *)pcopy->payload)[j++];
 80026a8:	684c      	ldr	r4, [r1, #4]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	5ce4      	ldrb	r4, [r4, r3]
 80026ae:	4613      	mov	r3, r2
 80026b0:	f800 4b01 	strb.w	r4, [r0], #1

    // Skip to the next buffer in the payload?
    if (j == pcopy->len)
 80026b4:	894c      	ldrh	r4, [r1, #10]
 80026b6:	4294      	cmp	r4, r2
 80026b8:	d101      	bne.n	80026be <ptpd_net_recv+0x66>
    {
      // Move to the next buffer.
      pcopy = pcopy->next;
 80026ba:	6809      	ldr	r1, [r1, #0]
      j = 0;
 80026bc:	2300      	movs	r3, #0
  for (i = 0; i < length; i++)
 80026be:	4584      	cmp	ip, r0
 80026c0:	d1f2      	bne.n	80026a8 <ptpd_net_recv+0x50>
    }
  }

  // Free up the pbuf (chain).
  pbuf_free(p);
 80026c2:	4630      	mov	r0, r6
 80026c4:	f00d ff46 	bl	8010554 <pbuf_free>

  return length;
}
 80026c8:	4628      	mov	r0, r5
 80026ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pbuf_free(p);
 80026cc:	4630      	mov	r0, r6
 80026ce:	f00d ff41 	bl	8010554 <pbuf_free>
    return 0;
 80026d2:	2500      	movs	r5, #0
}
 80026d4:	4628      	mov	r0, r5
 80026d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  sys_mutex_unlock(&queue->mutex);
 80026d8:	4630      	mov	r0, r6
 80026da:	f013 f963 	bl	80159a4 <sys_mutex_unlock>
  return pbuf;
 80026de:	e7f8      	b.n	80026d2 <ptpd_net_recv+0x7a>

080026e0 <ptpd_net_send>:
{
  return ptpd_net_recv(buf, time, &net_path->generalQ);
}

static ssize_t ptpd_net_send(const octet_t *buf, int16_t  length, TimeInternal *time, const int32_t * addr, struct udp_pcb * pcb)
{
 80026e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  err_t result;
  struct pbuf *p;
  PtpTime_t timestamp;

  // Allocate the tx pbuf based on the current size.
  p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80026e4:	b28e      	uxth	r6, r1
{
 80026e6:	b083      	sub	sp, #12
 80026e8:	460d      	mov	r5, r1
 80026ea:	4607      	mov	r7, r0
 80026ec:	4690      	mov	r8, r2
  p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80026ee:	2036      	movs	r0, #54	@ 0x36
 80026f0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80026f4:	4631      	mov	r1, r6
{
 80026f6:	4699      	mov	r9, r3
  p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80026f8:	f00d ff9c 	bl	8010634 <pbuf_alloc>
  if (NULL == p)
 80026fc:	b160      	cbz	r0, 8002718 <ptpd_net_send+0x38>
    ERROR("PTPD: Failed to allocate transmit protocol buffer\n");
    goto fail01;
  }

  // Copy the incoming data into the pbuf payload.
  result = pbuf_take(p, buf, length);
 80026fe:	4604      	mov	r4, r0
 8002700:	4632      	mov	r2, r6

  // Fill in the magic timestamp word so that the MAC interface records the TX time
  p->timestamp_sec = PTP_TIMESTAMP_RECORD_MAGIC;
 8002702:	4e13      	ldr	r6, [pc, #76]	@ (8002750 <ptpd_net_send+0x70>)
  result = pbuf_take(p, buf, length);
 8002704:	4639      	mov	r1, r7
 8002706:	f00e fa51 	bl	8010bac <pbuf_take>
  p->timestamp_nsec = PTP_TIMESTAMP_RECORD_MAGIC;
 800270a:	e9c4 6604 	strd	r6, r6, [r4, #16]

  if (ERR_OK != result)
 800270e:	b138      	cbz	r0, 8002720 <ptpd_net_send+0x40>
{
 8002710:	2500      	movs	r5, #0
    time->seconds = timestamp.tv_sec;
    time->nanoseconds = timestamp.tv_nsec;
  }

fail02:
  pbuf_free(p);
 8002712:	4620      	mov	r0, r4
 8002714:	f00d ff1e 	bl	8010554 <pbuf_free>

fail01:
  return length;
}
 8002718:	4628      	mov	r0, r5
 800271a:	b003      	add	sp, #12
 800271c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  result = udp_sendto(pcb, p, (void *)addr, pcb->local_port);
 8002720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002722:	464a      	mov	r2, r9
 8002724:	4621      	mov	r1, r4
 8002726:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002728:	8a5b      	ldrh	r3, [r3, #18]
 800272a:	f012 fea1 	bl	8015470 <udp_sendto>
  if (ERR_OK != result)
 800272e:	2800      	cmp	r0, #0
 8002730:	d1ee      	bne.n	8002710 <ptpd_net_send+0x30>
  if (time != NULL && ethernetif_GetTxTimestamp(&timestamp, 100))
 8002732:	f1b8 0f00 	cmp.w	r8, #0
 8002736:	d0ec      	beq.n	8002712 <ptpd_net_send+0x32>
 8002738:	2164      	movs	r1, #100	@ 0x64
 800273a:	4668      	mov	r0, sp
 800273c:	f7fe fa34 	bl	8000ba8 <ethernetif_GetTxTimestamp>
 8002740:	2800      	cmp	r0, #0
 8002742:	d0e6      	beq.n	8002712 <ptpd_net_send+0x32>
    time->seconds = timestamp.tv_sec;
 8002744:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002748:	e9c8 3200 	strd	r3, r2, [r8]
 800274c:	e7e1      	b.n	8002712 <ptpd_net_send+0x32>
 800274e:	bf00      	nop
 8002750:	55667788 	.word	0x55667788

08002754 <ptpd_net_event_callback>:
{
 8002754:	b570      	push	{r4, r5, r6, lr}
  sys_mutex_lock(&queue->mutex);
 8002756:	f100 0628 	add.w	r6, r0, #40	@ 0x28
{
 800275a:	4604      	mov	r4, r0
 800275c:	4615      	mov	r5, r2
  sys_mutex_lock(&queue->mutex);
 800275e:	4630      	mov	r0, r6
 8002760:	f013 f91a 	bl	8015998 <sys_mutex_lock>
  if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 8002764:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8002768:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	@ 0x26
 800276c:	3301      	adds	r3, #1
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <ptpd_net_event_callback+0x3a>
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 8002776:	b29b      	uxth	r3, r3
  sys_mutex_unlock(&queue->mutex);
 8002778:	4630      	mov	r0, r6
    queue->pbuf[queue->head] = pbuf;
 800277a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 800277e:	84a3      	strh	r3, [r4, #36]	@ 0x24
    queue->pbuf[queue->head] = pbuf;
 8002780:	6155      	str	r5, [r2, #20]
  sys_mutex_unlock(&queue->mutex);
 8002782:	f013 f90f 	bl	80159a4 <sys_mutex_unlock>
}
 8002786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ptpd_alert();
 800278a:	f7ff bc95 	b.w	80020b8 <ptpd_alert>
  sys_mutex_unlock(&queue->mutex);
 800278e:	4630      	mov	r0, r6
 8002790:	f013 f908 	bl	80159a4 <sys_mutex_unlock>
    pbuf_free(p);
 8002794:	4628      	mov	r0, r5
}
 8002796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(p);
 800279a:	f00d bedb 	b.w	8010554 <pbuf_free>
 800279e:	bf00      	nop

080027a0 <ptpd_net_init>:
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4604      	mov	r4, r0
  queue->head = 0;
 80027a4:	2600      	movs	r6, #0
{
 80027a6:	b086      	sub	sp, #24
  sys_mutex_new(&queue->mutex);
 80027a8:	3028      	adds	r0, #40	@ 0x28
  queue->head = 0;
 80027aa:	6266      	str	r6, [r4, #36]	@ 0x24
{
 80027ac:	460d      	mov	r5, r1
  sys_mutex_new(&queue->mutex);
 80027ae:	f013 f8e7 	bl	8015980 <sys_mutex_new>
 80027b2:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  queue->head = 0;
 80027b6:	63e6      	str	r6, [r4, #60]	@ 0x3c
  sys_mutex_new(&queue->mutex);
 80027b8:	f013 f8e2 	bl	8015980 <sys_mutex_new>
  iface = netif_default;
 80027bc:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <ptpd_net_init+0xdc>)
  memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 80027be:	f205 400a 	addw	r0, r5, #1034	@ 0x40a
  iface = netif_default;
 80027c2:	681d      	ldr	r5, [r3, #0]
  memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 80027c4:	f895 2034 	ldrb.w	r2, [r5, #52]	@ 0x34
 80027c8:	f105 012e 	add.w	r1, r5, #46	@ 0x2e
 80027cc:	f014 f8a3 	bl	8016916 <memcpy>
  return iface->ip_addr.addr;
 80027d0:	686b      	ldr	r3, [r5, #4]
  interface_addr.addr = ptpd_find_iface(ptp_clock->rtOpts.ifaceName, ptp_clock->portUuidField, net_path);
 80027d2:	9301      	str	r3, [sp, #4]
  if (!(interface_addr.addr))
 80027d4:	b913      	cbnz	r3, 80027dc <ptpd_net_init+0x3c>
  return false;
 80027d6:	2000      	movs	r0, #0
}
 80027d8:	b006      	add	sp, #24
 80027da:	bd70      	pop	{r4, r5, r6, pc}
  net_path->eventPcb = udp_new();
 80027dc:	f012 ff62 	bl	80156a4 <udp_new>
 80027e0:	60e0      	str	r0, [r4, #12]
  if (NULL == net_path->eventPcb)
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d0f7      	beq.n	80027d6 <ptpd_net_init+0x36>
  net_path->generalPcb = udp_new();
 80027e6:	f012 ff5d 	bl	80156a4 <udp_new>
 80027ea:	6120      	str	r0, [r4, #16]
  if (NULL == net_path->generalPcb)
 80027ec:	b170      	cbz	r0, 800280c <ptpd_net_init+0x6c>
  strcpy(addr_str, DEFAULT_PTP_DOMAIN_ADDRESS);
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <ptpd_net_init+0xe0>)
 80027f0:	ad02      	add	r5, sp, #8
  net_path->unicastAddr = 0;
 80027f2:	6026      	str	r6, [r4, #0]
  strcpy(addr_str, DEFAULT_PTP_DOMAIN_ADDRESS);
 80027f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 80027fc:	4628      	mov	r0, r5
 80027fe:	4669      	mov	r1, sp
 8002800:	f00c fb26 	bl	800ee50 <ip4addr_aton>
 8002804:	b930      	cbnz	r0, 8002814 <ptpd_net_init+0x74>
  udp_remove(net_path->generalPcb);
 8002806:	6920      	ldr	r0, [r4, #16]
 8002808:	f012 ff26 	bl	8015658 <udp_remove>
  udp_remove(net_path->eventPcb);
 800280c:	68e0      	ldr	r0, [r4, #12]
 800280e:	f012 ff23 	bl	8015658 <udp_remove>
 8002812:	e7e0      	b.n	80027d6 <ptpd_net_init+0x36>
  net_path->multicastAddr = net_addr;
 8002814:	9b00      	ldr	r3, [sp, #0]
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 8002816:	4669      	mov	r1, sp
 8002818:	a801      	add	r0, sp, #4
  net_path->multicastAddr = net_addr;
 800281a:	6063      	str	r3, [r4, #4]
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 800281c:	f00b ff8a 	bl	800e734 <igmp_joingroup>
  strcpy(addr_str, PEER_PTP_DOMAIN_ADDRESS);
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <ptpd_net_init+0xe4>)
 8002822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002826:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 800282a:	4669      	mov	r1, sp
 800282c:	4628      	mov	r0, r5
 800282e:	f00c fb0f 	bl	800ee50 <ip4addr_aton>
 8002832:	2800      	cmp	r0, #0
 8002834:	d0e7      	beq.n	8002806 <ptpd_net_init+0x66>
  net_path->peerMulticastAddr = net_addr;
 8002836:	9b00      	ldr	r3, [sp, #0]
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 8002838:	4669      	mov	r1, sp
 800283a:	a801      	add	r0, sp, #4
  net_path->peerMulticastAddr = net_addr;
 800283c:	60a3      	str	r3, [r4, #8]
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 800283e:	f00b ff79 	bl	800e734 <igmp_joingroup>
  net_path->eventPcb->mcast_ip4.addr = net_path->multicastAddr;
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	68e0      	ldr	r0, [r4, #12]
  udp_recv(net_path->eventPcb, ptpd_net_event_callback, net_path);
 8002846:	4622      	mov	r2, r4
  net_path->generalPcb->mcast_ip4.addr = net_path->multicastAddr;
 8002848:	6921      	ldr	r1, [r4, #16]
  net_path->eventPcb->mcast_ip4.addr = net_path->multicastAddr;
 800284a:	6183      	str	r3, [r0, #24]
  net_path->generalPcb->mcast_ip4.addr = net_path->multicastAddr;
 800284c:	618b      	str	r3, [r1, #24]
  udp_recv(net_path->eventPcb, ptpd_net_event_callback, net_path);
 800284e:	490e      	ldr	r1, [pc, #56]	@ (8002888 <ptpd_net_init+0xe8>)
 8002850:	f012 fef0 	bl	8015634 <udp_recv>
  udp_bind(net_path->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 8002854:	490d      	ldr	r1, [pc, #52]	@ (800288c <ptpd_net_init+0xec>)
 8002856:	f240 123f 	movw	r2, #319	@ 0x13f
 800285a:	68e0      	ldr	r0, [r4, #12]
 800285c:	f012 fc7a 	bl	8015154 <udp_bind>
  udp_recv(net_path->generalPcb, ptpd_net_general_callback, net_path);
 8002860:	4622      	mov	r2, r4
 8002862:	490b      	ldr	r1, [pc, #44]	@ (8002890 <ptpd_net_init+0xf0>)
 8002864:	6920      	ldr	r0, [r4, #16]
 8002866:	f012 fee5 	bl	8015634 <udp_recv>
  udp_bind(net_path->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 800286a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800286e:	4907      	ldr	r1, [pc, #28]	@ (800288c <ptpd_net_init+0xec>)
 8002870:	6920      	ldr	r0, [r4, #16]
 8002872:	f012 fc6f 	bl	8015154 <udp_bind>
  return true;
 8002876:	2001      	movs	r0, #1
 8002878:	e7ae      	b.n	80027d8 <ptpd_net_init+0x38>
 800287a:	bf00      	nop
 800287c:	20010164 	.word	0x20010164
 8002880:	08019098 	.word	0x08019098
 8002884:	080190a4 	.word	0x080190a4
 8002888:	08002755 	.word	0x08002755
 800288c:	0801a7a0 	.word	0x0801a7a0
 8002890:	0800260d 	.word	0x0800260d

08002894 <ptpd_net_shutdown>:
{
 8002894:	b510      	push	{r4, lr}
  multicast_addr.addr = net_path->multicastAddr;
 8002896:	6843      	ldr	r3, [r0, #4]
{
 8002898:	b082      	sub	sp, #8
 800289a:	4604      	mov	r4, r0
  multicast_addr.addr = net_path->multicastAddr;
 800289c:	9301      	str	r3, [sp, #4]
  if (multicast_addr.addr) igmp_leavegroup(IP_ADDR_ANY, &multicast_addr);
 800289e:	b9bb      	cbnz	r3, 80028d0 <ptpd_net_shutdown+0x3c>
  if (net_path->eventPcb)
 80028a0:	68e0      	ldr	r0, [r4, #12]
 80028a2:	b130      	cbz	r0, 80028b2 <ptpd_net_shutdown+0x1e>
    udp_disconnect(net_path->eventPcb);
 80028a4:	f012 feae 	bl	8015604 <udp_disconnect>
    udp_remove(net_path->eventPcb);
 80028a8:	68e0      	ldr	r0, [r4, #12]
 80028aa:	f012 fed5 	bl	8015658 <udp_remove>
    net_path->eventPcb = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60e3      	str	r3, [r4, #12]
  if (net_path->generalPcb)
 80028b2:	6920      	ldr	r0, [r4, #16]
 80028b4:	b130      	cbz	r0, 80028c4 <ptpd_net_shutdown+0x30>
    udp_disconnect(net_path->generalPcb);
 80028b6:	f012 fea5 	bl	8015604 <udp_disconnect>
    udp_remove(net_path->generalPcb);
 80028ba:	6920      	ldr	r0, [r4, #16]
 80028bc:	f012 fecc 	bl	8015658 <udp_remove>
    net_path->generalPcb = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	6123      	str	r3, [r4, #16]
  net_path->unicastAddr = 0;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	2001      	movs	r0, #1
  net_path->unicastAddr = 0;
 80028c8:	e9c4 3300 	strd	r3, r3, [r4]
}
 80028cc:	b002      	add	sp, #8
 80028ce:	bd10      	pop	{r4, pc}
  if (multicast_addr.addr) igmp_leavegroup(IP_ADDR_ANY, &multicast_addr);
 80028d0:	a901      	add	r1, sp, #4
 80028d2:	4802      	ldr	r0, [pc, #8]	@ (80028dc <ptpd_net_shutdown+0x48>)
 80028d4:	f00b ffdc 	bl	800e890 <igmp_leavegroup>
 80028d8:	e7e2      	b.n	80028a0 <ptpd_net_shutdown+0xc>
 80028da:	bf00      	nop
 80028dc:	0801a7a0 	.word	0x0801a7a0

080028e0 <ptpd_net_select>:
{
 80028e0:	b570      	push	{r4, r5, r6, lr}
  sys_mutex_lock(&queue->mutex);
 80028e2:	f100 0528 	add.w	r5, r0, #40	@ 0x28
{
 80028e6:	4604      	mov	r4, r0
  sys_mutex_lock(&queue->mutex);
 80028e8:	4628      	mov	r0, r5
 80028ea:	f013 f855 	bl	8015998 <sys_mutex_lock>
  if (queue->tail != queue->head) retval = true;
 80028ee:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	@ 0x26
 80028f2:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d004      	beq.n	8002904 <ptpd_net_select+0x24>
  sys_mutex_unlock(&queue->mutex);
 80028fa:	4628      	mov	r0, r5
 80028fc:	f013 f852 	bl	80159a4 <sys_mutex_unlock>
  if (ptpd_net_queue_check(&net_path->eventQ) || ptpd_net_queue_check(&net_path->generalQ)) return 1;
 8002900:	2001      	movs	r0, #1
}
 8002902:	bd70      	pop	{r4, r5, r6, pc}
  sys_mutex_lock(&queue->mutex);
 8002904:	f104 0640 	add.w	r6, r4, #64	@ 0x40
  sys_mutex_unlock(&queue->mutex);
 8002908:	4628      	mov	r0, r5
 800290a:	f013 f84b 	bl	80159a4 <sys_mutex_unlock>
  sys_mutex_lock(&queue->mutex);
 800290e:	4630      	mov	r0, r6
 8002910:	f013 f842 	bl	8015998 <sys_mutex_lock>
  if (queue->tail != queue->head) retval = true;
 8002914:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	@ 0x3e
 8002918:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 800291c:	429a      	cmp	r2, r3
 800291e:	d003      	beq.n	8002928 <ptpd_net_select+0x48>
  sys_mutex_unlock(&queue->mutex);
 8002920:	4630      	mov	r0, r6
 8002922:	f013 f83f 	bl	80159a4 <sys_mutex_unlock>
  return retval;
 8002926:	e7eb      	b.n	8002900 <ptpd_net_select+0x20>
  sys_mutex_unlock(&queue->mutex);
 8002928:	4630      	mov	r0, r6
 800292a:	f013 f83b 	bl	80159a4 <sys_mutex_unlock>
  return 0;
 800292e:	2000      	movs	r0, #0
}
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	bf00      	nop

08002934 <ptpd_net_empty_event_queue>:
{
 8002934:	b538      	push	{r3, r4, r5, lr}
  sys_mutex_lock(&queue->mutex);
 8002936:	f100 0528 	add.w	r5, r0, #40	@ 0x28
{
 800293a:	4604      	mov	r4, r0
  sys_mutex_lock(&queue->mutex);
 800293c:	4628      	mov	r0, r5
 800293e:	f013 f82b 	bl	8015998 <sys_mutex_lock>
  while (queue->tail != queue->head)
 8002942:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 8002946:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	@ 0x24
 800294a:	429a      	cmp	r2, r3
 800294c:	d00e      	beq.n	800296c <ptpd_net_empty_event_queue+0x38>
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 800294e:	3301      	adds	r3, #1
 8002950:	f003 0303 	and.w	r3, r3, #3
    pbuf_free(queue->pbuf[queue->tail]);
 8002954:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8002958:	84e3      	strh	r3, [r4, #38]	@ 0x26
    pbuf_free(queue->pbuf[queue->tail]);
 800295a:	6950      	ldr	r0, [r2, #20]
 800295c:	f00d fdfa 	bl	8010554 <pbuf_free>
  while (queue->tail != queue->head)
 8002960:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 8002964:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	@ 0x24
 8002968:	429a      	cmp	r2, r3
 800296a:	d1f0      	bne.n	800294e <ptpd_net_empty_event_queue+0x1a>
  sys_mutex_unlock(&queue->mutex);
 800296c:	4628      	mov	r0, r5
}
 800296e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_mutex_unlock(&queue->mutex);
 8002972:	f013 b817 	b.w	80159a4 <sys_mutex_unlock>
 8002976:	bf00      	nop

08002978 <ptpd_net_recv_event>:
{
 8002978:	4684      	mov	ip, r0
 800297a:	4613      	mov	r3, r2
  return ptpd_net_recv(buf, time, &net_path->eventQ);
 800297c:	4608      	mov	r0, r1
 800297e:	f10c 0214 	add.w	r2, ip, #20
 8002982:	4619      	mov	r1, r3
 8002984:	f7ff be68 	b.w	8002658 <ptpd_net_recv>

08002988 <ptpd_net_recv_general>:
{
 8002988:	4684      	mov	ip, r0
 800298a:	4613      	mov	r3, r2
  return ptpd_net_recv(buf, time, &net_path->generalQ);
 800298c:	4608      	mov	r0, r1
 800298e:	f10c 022c 	add.w	r2, ip, #44	@ 0x2c
 8002992:	4619      	mov	r1, r3
 8002994:	f7ff be60 	b.w	8002658 <ptpd_net_recv>

08002998 <ptpd_net_send_event>:

ssize_t ptpd_net_send_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal *time)
{
 8002998:	4684      	mov	ip, r0
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
  return ptpd_net_send(buf, length, time, &net_path->multicastAddr, net_path->eventPcb);
 800299e:	461a      	mov	r2, r3
 80029a0:	f8dc 300c 	ldr.w	r3, [ip, #12]
{
 80029a4:	b500      	push	{lr}
 80029a6:	b083      	sub	sp, #12
  return ptpd_net_send(buf, length, time, &net_path->multicastAddr, net_path->eventPcb);
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f10c 0304 	add.w	r3, ip, #4
 80029ae:	f7ff fe97 	bl	80026e0 <ptpd_net_send>
}
 80029b2:	b003      	add	sp, #12
 80029b4:	f85d fb04 	ldr.w	pc, [sp], #4

080029b8 <ptpd_net_send_peer_event>:

ssize_t ptpd_net_send_peer_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal* time)
{
 80029b8:	4684      	mov	ip, r0
 80029ba:	4608      	mov	r0, r1
 80029bc:	4611      	mov	r1, r2
  return ptpd_net_send(buf, length, time, &net_path->peerMulticastAddr, net_path->eventPcb);
 80029be:	461a      	mov	r2, r3
 80029c0:	f8dc 300c 	ldr.w	r3, [ip, #12]
{
 80029c4:	b500      	push	{lr}
 80029c6:	b083      	sub	sp, #12
  return ptpd_net_send(buf, length, time, &net_path->peerMulticastAddr, net_path->eventPcb);
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f10c 0308 	add.w	r3, ip, #8
 80029ce:	f7ff fe87 	bl	80026e0 <ptpd_net_send>
}
 80029d2:	b003      	add	sp, #12
 80029d4:	f85d fb04 	ldr.w	pc, [sp], #4

080029d8 <ptpd_net_send_general>:

ssize_t ptpd_net_send_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 80029d8:	4603      	mov	r3, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
  return ptpd_net_send(buf, length, NULL, &net_path->multicastAddr, net_path->generalPcb);
 80029de:	2200      	movs	r2, #0
 80029e0:	3304      	adds	r3, #4
{
 80029e2:	b510      	push	{r4, lr}
  return ptpd_net_send(buf, length, NULL, &net_path->multicastAddr, net_path->generalPcb);
 80029e4:	68dc      	ldr	r4, [r3, #12]
{
 80029e6:	b082      	sub	sp, #8
  return ptpd_net_send(buf, length, NULL, &net_path->multicastAddr, net_path->generalPcb);
 80029e8:	9400      	str	r4, [sp, #0]
 80029ea:	f7ff fe79 	bl	80026e0 <ptpd_net_send>
}
 80029ee:	b002      	add	sp, #8
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	bf00      	nop

080029f4 <ptpd_net_send_peer_general>:

ssize_t ptpd_net_send_peer_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 80029f4:	4603      	mov	r3, r0
 80029f6:	4608      	mov	r0, r1
 80029f8:	4611      	mov	r1, r2
  return ptpd_net_send(buf, length, NULL, &net_path->peerMulticastAddr, net_path->generalPcb);
 80029fa:	2200      	movs	r2, #0
 80029fc:	3308      	adds	r3, #8
{
 80029fe:	b510      	push	{r4, lr}
  return ptpd_net_send(buf, length, NULL, &net_path->peerMulticastAddr, net_path->generalPcb);
 8002a00:	689c      	ldr	r4, [r3, #8]
{
 8002a02:	b082      	sub	sp, #8
  return ptpd_net_send(buf, length, NULL, &net_path->peerMulticastAddr, net_path->generalPcb);
 8002a04:	9400      	str	r4, [sp, #0]
 8002a06:	f7ff fe6b 	bl	80026e0 <ptpd_net_send>
}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	bf00      	nop

08002a10 <ptpd_protocol_to_state>:
#endif

// Change state of PTP stack. Perform actions required when leaving
// 'port_state' and entering 'state'.
void ptpd_protocol_to_state(PtpClock *ptp_clock, uint8_t state)
{
 8002a10:	b538      	push	{r3, r4, r5, lr}
  DBG("leaving state %s\n", state_string(ptp_clock->portDS.portState));

  ptp_clock->messageActivity = true;

  // Leaving state tasks.
  switch (ptp_clock->portDS.portState)
 8002a12:	f890 304a 	ldrb.w	r3, [r0, #74]	@ 0x4a
  ptp_clock->messageActivity = true;
 8002a16:	2201      	movs	r2, #1
{
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
  switch (ptp_clock->portDS.portState)
 8002a1c:	3b03      	subs	r3, #3
  ptp_clock->messageActivity = true;
 8002a1e:	f880 2408 	strb.w	r2, [r0, #1032]	@ 0x408
  switch (ptp_clock->portDS.portState)
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d80f      	bhi.n	8002a46 <ptpd_protocol_to_state+0x36>
 8002a26:	e8df f003 	tbb	[pc, r3]
 8002a2a:	655f      	.short	0x655f
 8002a2c:	2a2a6b03 	.word	0x2a2a6b03
  {
    case PTP_MASTER:
      ptpd_servo_init_clock(ptp_clock);
 8002a30:	f000 fe4a 	bl	80036c8 <ptpd_servo_init_clock>
      ptpd_timer_stop(SYNC_INTERVAL_TIMER);
 8002a34:	2002      	movs	r0, #2
 8002a36:	f001 f84f 	bl	8003ad8 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_INTERVAL_TIMER);
 8002a3a:	2004      	movs	r0, #4
 8002a3c:	f001 f84c 	bl	8003ad8 <ptpd_timer_stop>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f001 f849 	bl	8003ad8 <ptpd_timer_stop>
  }

  DBG("entering state %s\n", state_string(state));

  // Entering state tasks.
  switch (state)
 8002a46:	2d08      	cmp	r5, #8
 8002a48:	d818      	bhi.n	8002a7c <ptpd_protocol_to_state+0x6c>
 8002a4a:	e8df f005 	tbb	[pc, r5]
 8002a4e:	a6a0      	.short	0xa6a0
 8002a50:	2b2baeaa 	.word	0x2b2baeaa
 8002a54:	7862      	.short	0x7862
 8002a56:	9c          	.byte	0x9c
 8002a57:	00          	.byte	0x00
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
      switch (ptp_clock->portDS.delayMechanism)
      {
        case E2E:
            ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 8002a58:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f2c0 80ff 	blt.w	8002c60 <ptpd_protocol_to_state+0x250>
 8002a62:	3301      	adds	r3, #1
 8002a64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a68:	4098      	lsls	r0, r3
 8002a6a:	f000 ffa9 	bl	80039c0 <ptpd_get_rand>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	2001      	movs	r0, #1
 8002a72:	f001 f807 	bl	8003a84 <ptpd_timer_start>
            break;
        default:
            // None.
            break;
      }
      ptp_clock->portDS.portState = PTP_UNCALIBRATED;
 8002a76:	2307      	movs	r3, #7
 8002a78:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
      break;

    default:
      break;
  }
}
 8002a7c:	bd38      	pop	{r3, r4, r5, pc}
      if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 8002a7e:	1fcb      	subs	r3, r1, #7
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d9e0      	bls.n	8002a46 <ptpd_protocol_to_state+0x36>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f001 f827 	bl	8003ad8 <ptpd_timer_stop>
      switch (ptp_clock->portDS.delayMechanism)
 8002a8a:	f894 0057 	ldrb.w	r0, [r4, #87]	@ 0x57
 8002a8e:	2801      	cmp	r0, #1
 8002a90:	d002      	beq.n	8002a98 <ptpd_protocol_to_state+0x88>
 8002a92:	2802      	cmp	r0, #2
 8002a94:	d102      	bne.n	8002a9c <ptpd_protocol_to_state+0x8c>
          ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f001 f81e 	bl	8003ad8 <ptpd_timer_stop>
      ptpd_servo_init_clock(ptp_clock);
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f000 fe13 	bl	80036c8 <ptpd_servo_init_clock>
      break;
 8002aa2:	e7d0      	b.n	8002a46 <ptpd_protocol_to_state+0x36>
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 8002aa4:	f994 3056 	ldrsb.w	r3, [r4, #86]	@ 0x56
      ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 8002aa8:	2203      	movs	r2, #3
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 8002aaa:	2b00      	cmp	r3, #0
      ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 8002aac:	f884 204b 	strb.w	r2, [r4, #75]	@ 0x4b
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 8002ab0:	f340 8099 	ble.w	8002be6 <ptpd_protocol_to_state+0x1d6>
 8002ab4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ab8:	4099      	lsls	r1, r3
 8002aba:	2002      	movs	r0, #2
 8002abc:	f000 ffe2 	bl	8003a84 <ptpd_timer_start>
      ptpd_timer_start(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002ac0:	f994 3054 	ldrsb.w	r3, [r4, #84]	@ 0x54
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f340 8093 	ble.w	8002bf0 <ptpd_protocol_to_state+0x1e0>
 8002aca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ace:	4099      	lsls	r1, r3
 8002ad0:	2004      	movs	r0, #4
 8002ad2:	f000 ffd7 	bl	8003a84 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 8002ad6:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	f000 80a6 	beq.w	8002c2c <ptpd_protocol_to_state+0x21c>
      ptp_clock->portDS.portState = PTP_MASTER;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
      ptpd_servo_init_clock(ptp_clock);
 8002ae8:	f000 fdee 	bl	80036c8 <ptpd_servo_init_clock>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 fff3 	bl	8003ad8 <ptpd_timer_stop>
      break;
 8002af2:	e7a8      	b.n	8002a46 <ptpd_protocol_to_state+0x36>
      ptpd_servo_init_clock(ptp_clock);
 8002af4:	f000 fde8 	bl	80036c8 <ptpd_servo_init_clock>
      ptpd_timer_stop(QUALIFICATION_TIMEOUT);
 8002af8:	2005      	movs	r0, #5
 8002afa:	f000 ffed 	bl	8003ad8 <ptpd_timer_stop>
      break;
 8002afe:	e7a2      	b.n	8002a46 <ptpd_protocol_to_state+0x36>
      ptpd_servo_init_clock(ptp_clock);
 8002b00:	f000 fde2 	bl	80036c8 <ptpd_servo_init_clock>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f000 ffe7 	bl	8003ad8 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	f000 ffe4 	bl	8003ad8 <ptpd_timer_stop>
      break;
 8002b10:	e799      	b.n	8002a46 <ptpd_protocol_to_state+0x36>
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002b12:	f994 2054 	ldrsb.w	r2, [r4, #84]	@ 0x54
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002b16:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	dd72      	ble.n	8002c04 <ptpd_protocol_to_state+0x1f4>
 8002b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b22:	4093      	lsls	r3, r2
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002b24:	fb03 f101 	mul.w	r1, r3, r1
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 ffab 	bl	8003a84 <ptpd_timer_start>
      if (ptp_clock->portDS.delayMechanism == P2P)
 8002b2e:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d06b      	beq.n	8002c0e <ptpd_protocol_to_state+0x1fe>
      ptp_clock->portDS.portState = PTP_PASSIVE;
 8002b36:	2306      	movs	r3, #6
 8002b38:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002b3e:	f994 2054 	ldrsb.w	r2, [r4, #84]	@ 0x54
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002b42:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	dd57      	ble.n	8002bfa <ptpd_protocol_to_state+0x1ea>
 8002b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4e:	4093      	lsls	r3, r2
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002b50:	fb03 f101 	mul.w	r1, r3, r1
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 ff95 	bl	8003a84 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 8002b5a:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f43f af7a 	beq.w	8002a58 <ptpd_protocol_to_state+0x48>
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d186      	bne.n	8002a76 <ptpd_protocol_to_state+0x66>
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002b68:	f994 3058 	ldrsb.w	r3, [r4, #88]	@ 0x58
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db30      	blt.n	8002bd2 <ptpd_protocol_to_state+0x1c2>
 8002b70:	3301      	adds	r3, #1
 8002b72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b76:	4098      	lsls	r0, r3
 8002b78:	f000 ff22 	bl	80039c0 <ptpd_get_rand>
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 ff80 	bl	8003a84 <ptpd_timer_start>
            break;
 8002b84:	e777      	b.n	8002a76 <ptpd_protocol_to_state+0x66>
      ptp_clock->portDS.portState = PTP_SLAVE;
 8002b86:	2308      	movs	r3, #8
 8002b88:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
      ptp_clock->portDS.portState = PTP_INITIALIZING;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_INITIALIZING;
 8002b94:	f884 3409 	strb.w	r3, [r4, #1033]	@ 0x409
}
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
      ptp_clock->portDS.portState = PTP_FAULTY;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8002ba0:	bd38      	pop	{r3, r4, r5, pc}
      ptp_clock->portDS.portState = PTP_DISABLED;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002baa:	f994 2054 	ldrsb.w	r2, [r4, #84]	@ 0x54
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002bae:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	dd12      	ble.n	8002bdc <ptpd_protocol_to_state+0x1cc>
 8002bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bba:	4093      	lsls	r3, r2
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8002bbc:	fb03 f101 	mul.w	r1, r3, r1
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 ff5f 	bl	8003a84 <ptpd_timer_start>
      ptp_clock->portDS.portState = PTP_LISTENING;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_LISTENING;
 8002bcc:	f884 3409 	strb.w	r3, [r4, #1033]	@ 0x409
}
 8002bd0:	bd38      	pop	{r3, r4, r5, pc}
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bd8:	4118      	asrs	r0, r3
 8002bda:	e7cd      	b.n	8002b78 <ptpd_protocol_to_state+0x168>
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002bdc:	4252      	negs	r2, r2
 8002bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be2:	4113      	asrs	r3, r2
 8002be4:	e7ea      	b.n	8002bbc <ptpd_protocol_to_state+0x1ac>
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 8002be6:	425b      	negs	r3, r3
 8002be8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bec:	4119      	asrs	r1, r3
 8002bee:	e764      	b.n	8002aba <ptpd_protocol_to_state+0xaa>
      ptpd_timer_start(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002bf0:	425b      	negs	r3, r3
 8002bf2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bf6:	4119      	asrs	r1, r3
 8002bf8:	e76a      	b.n	8002ad0 <ptpd_protocol_to_state+0xc0>
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c00:	4113      	asrs	r3, r2
 8002c02:	e7a5      	b.n	8002b50 <ptpd_protocol_to_state+0x140>
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8002c04:	4252      	negs	r2, r2
 8002c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c0a:	4113      	asrs	r3, r2
 8002c0c:	e78a      	b.n	8002b24 <ptpd_protocol_to_state+0x114>
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002c0e:	f994 3058 	ldrsb.w	r3, [r4, #88]	@ 0x58
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db19      	blt.n	8002c4a <ptpd_protocol_to_state+0x23a>
 8002c16:	3301      	adds	r3, #1
 8002c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c1c:	4098      	lsls	r0, r3
 8002c1e:	f000 fecf 	bl	80039c0 <ptpd_get_rand>
 8002c22:	4601      	mov	r1, r0
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 ff2d 	bl	8003a84 <ptpd_timer_start>
 8002c2a:	e784      	b.n	8002b36 <ptpd_protocol_to_state+0x126>
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval) + 1));
 8002c2c:	f994 3058 	ldrsb.w	r3, [r4, #88]	@ 0x58
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	dd0f      	ble.n	8002c54 <ptpd_protocol_to_state+0x244>
 8002c34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c38:	4098      	lsls	r0, r3
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	f000 fec0 	bl	80039c0 <ptpd_get_rand>
 8002c40:	4601      	mov	r1, r0
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 ff1e 	bl	8003a84 <ptpd_timer_start>
            break;
 8002c48:	e74a      	b.n	8002ae0 <ptpd_protocol_to_state+0xd0>
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c50:	4118      	asrs	r0, r3
 8002c52:	e7e4      	b.n	8002c1e <ptpd_protocol_to_state+0x20e>
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval) + 1));
 8002c54:	425b      	negs	r3, r3
 8002c56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c5a:	4118      	asrs	r0, r3
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	e7ed      	b.n	8002c3c <ptpd_protocol_to_state+0x22c>
            ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 8002c60:	43db      	mvns	r3, r3
 8002c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c66:	4118      	asrs	r0, r3
 8002c68:	e6ff      	b.n	8002a6a <ptpd_protocol_to_state+0x5a>
 8002c6a:	bf00      	nop

08002c6c <issue_delay_req_timer_expired>:
{
  // Do nothing.
}

static void issue_delay_req_timer_expired(PtpClock *ptp_clock)
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4604      	mov	r4, r0
  switch (ptp_clock->portDS.delayMechanism)
 8002c70:	f890 0057 	ldrb.w	r0, [r0, #87]	@ 0x57
{
 8002c74:	b086      	sub	sp, #24
  switch (ptp_clock->portDS.delayMechanism)
 8002c76:	2801      	cmp	r0, #1
 8002c78:	d036      	beq.n	8002ce8 <issue_delay_req_timer_expired+0x7c>
 8002c7a:	2802      	cmp	r0, #2
 8002c7c:	d132      	bne.n	8002ce4 <issue_delay_req_timer_expired+0x78>
        issue_delay_req(ptp_clock);
      }
      break;

    case P2P:
      if (ptpd_timer_expired(PDELAYREQ_INTERVAL_TIMER))
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 ff42 	bl	8003b08 <ptpd_timer_expired>
 8002c84:	b370      	cbz	r0, 8002ce4 <issue_delay_req_timer_expired+0x78>
      {
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002c86:	f994 0058 	ldrsb.w	r0, [r4, #88]	@ 0x58
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	db6e      	blt.n	8002d6c <issue_delay_req_timer_expired+0x100>
 8002c8e:	3001      	adds	r0, #1
 8002c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c94:	fa03 f000 	lsl.w	r0, r3, r0
static void issue_peer_delay_req(PtpClock *ptp_clock)
{
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  ptpd_get_time(&internal_time);
 8002c98:	ae01      	add	r6, sp, #4
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002c9a:	f000 fe91 	bl	80039c0 <ptpd_get_rand>
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f000 feef 	bl	8003a84 <ptpd_timer_start>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);

  ptpd_msg_pack_peer_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 8002ca6:	f504 7586 	add.w	r5, r4, #268	@ 0x10c
  ptpd_get_time(&internal_time);
 8002caa:	4630      	mov	r0, r6
 8002cac:	f000 fe8a 	bl	80039c4 <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 8002cb0:	a903      	add	r1, sp, #12
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f7fe fe4c 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 8002cb8:	aa03      	add	r2, sp, #12
 8002cba:	4629      	mov	r1, r5
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff fbd9 	bl	8002474 <ptpd_msg_pack_peer_delay_req>

  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_REQ_LENGTH, &internal_time))
 8002cc2:	4633      	mov	r3, r6
 8002cc4:	2236      	movs	r2, #54	@ 0x36
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f504 6084 	add.w	r0, r4, #1056	@ 0x420
 8002ccc:	f7ff fe74 	bl	80029b8 <ptpd_net_send_peer_event>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d051      	beq.n	8002d78 <issue_delay_req_timer_expired+0x10c>
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
  }
  else
  {
    DBGV("issue_peer_delay_req\n");
    ptp_clock->sentPDelayReqSequenceId++;
 8002cd4:	f8b4 33c0 	ldrh.w	r3, [r4, #960]	@ 0x3c0

    // Delay req TX timestamp is valid.
    if (internal_time.seconds != 0)
 8002cd8:	9a01      	ldr	r2, [sp, #4]
    ptp_clock->sentPDelayReqSequenceId++;
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f8a4 33c0 	strh.w	r3, [r4, #960]	@ 0x3c0
    if (internal_time.seconds != 0)
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	d14e      	bne.n	8002d82 <issue_delay_req_timer_expired+0x116>
}
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
      if (ptp_clock->portDS.portState != PTP_SLAVE)
 8002ce8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d1f9      	bne.n	8002ce4 <issue_delay_req_timer_expired+0x78>
      if (ptpd_timer_expired(DELAYREQ_INTERVAL_TIMER))
 8002cf0:	f000 ff0a 	bl	8003b08 <ptpd_timer_expired>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d0f5      	beq.n	8002ce4 <issue_delay_req_timer_expired+0x78>
        ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 8002cf8:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db4d      	blt.n	8002d9c <issue_delay_req_timer_expired+0x130>
 8002d00:	3301      	adds	r3, #1
 8002d02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d06:	4098      	lsls	r0, r3
  ptpd_get_time(&internal_time);
 8002d08:	ae01      	add	r6, sp, #4
        ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 8002d0a:	f000 fe59 	bl	80039c0 <ptpd_get_rand>
 8002d0e:	4601      	mov	r1, r0
 8002d10:	2001      	movs	r0, #1
 8002d12:	f000 feb7 	bl	8003a84 <ptpd_timer_start>
  ptpd_msg_pack_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 8002d16:	f504 7586 	add.w	r5, r4, #268	@ 0x10c
  ptpd_get_time(&internal_time);
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	f000 fe52 	bl	80039c4 <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f7fe fe14 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 8002d28:	aa03      	add	r2, sp, #12
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff fae5 	bl	80022fc <ptpd_msg_pack_delay_req>
  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, DELAY_REQ_LENGTH, &internal_time))
 8002d32:	4633      	mov	r3, r6
 8002d34:	222c      	movs	r2, #44	@ 0x2c
 8002d36:	4629      	mov	r1, r5
 8002d38:	f504 6084 	add.w	r0, r4, #1056	@ 0x420
 8002d3c:	f7ff fe2c 	bl	8002998 <ptpd_net_send_event>
 8002d40:	b1d0      	cbz	r0, 8002d78 <issue_delay_req_timer_expired+0x10c>
    ptp_clock->sentDelayReqSequenceId++;
 8002d42:	f8b4 33c2 	ldrh.w	r3, [r4, #962]	@ 0x3c2
    if (internal_time.seconds != 0)
 8002d46:	9a01      	ldr	r2, [sp, #4]
    ptp_clock->sentDelayReqSequenceId++;
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f8a4 33c2 	strh.w	r3, [r4, #962]	@ 0x3c2
    if (internal_time.seconds != 0)
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d0c8      	beq.n	8002ce4 <issue_delay_req_timer_expired+0x78>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 8002d52:	4631      	mov	r1, r6
 8002d54:	4630      	mov	r0, r6
 8002d56:	f504 6283 	add.w	r2, r4, #1048	@ 0x418
      ptp_clock->timestamp_delayReqSend = internal_time;
 8002d5a:	f504 7468 	add.w	r4, r4, #928	@ 0x3a0
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 8002d5e:	f7fe fe0d 	bl	800197c <ptpd_add_time>
      ptp_clock->timestamp_delayReqSend = internal_time;
 8002d62:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002d66:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002d6a:	e7bb      	b.n	8002ce4 <issue_delay_req_timer_expired+0x78>
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8002d6c:	43c0      	mvns	r0, r0
 8002d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d72:	fa43 f000 	asr.w	r0, r3, r0
 8002d76:	e78f      	b.n	8002c98 <issue_delay_req_timer_expired+0x2c>
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff fe48 	bl	8002a10 <ptpd_protocol_to_state>
 8002d80:	e7b0      	b.n	8002ce4 <issue_delay_req_timer_expired+0x78>
    {
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 8002d82:	4631      	mov	r1, r6
 8002d84:	4630      	mov	r0, r6
 8002d86:	f504 6283 	add.w	r2, r4, #1048	@ 0x418
      ptp_clock->pdelay_t1 = internal_time;
 8002d8a:	f504 745e 	add.w	r4, r4, #888	@ 0x378
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 8002d8e:	f7fe fdf5 	bl	800197c <ptpd_add_time>
      ptp_clock->pdelay_t1 = internal_time;
 8002d92:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002d96:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002d9a:	e7a3      	b.n	8002ce4 <issue_delay_req_timer_expired+0x78>
        ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002da2:	4118      	asrs	r0, r3
 8002da4:	e7b0      	b.n	8002d08 <issue_delay_req_timer_expired+0x9c>
 8002da6:	bf00      	nop

08002da8 <handle>:
{
 8002da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TimeInternal time = { 0, 0 };
 8002dac:	2200      	movs	r2, #0
{
 8002dae:	b089      	sub	sp, #36	@ 0x24
  TimeInternal time = { 0, 0 };
 8002db0:	2300      	movs	r3, #0
  if (!ptp_clock->messageActivity)
 8002db2:	f890 1408 	ldrb.w	r1, [r0, #1032]	@ 0x408
{
 8002db6:	4604      	mov	r4, r0
    ret = ptpd_net_select(&ptp_clock->netPath, 0);
 8002db8:	f500 6584 	add.w	r5, r0, #1056	@ 0x420
  TimeInternal time = { 0, 0 };
 8002dbc:	e9cd 2300 	strd	r2, r3, [sp]
  if (!ptp_clock->messageActivity)
 8002dc0:	b929      	cbnz	r1, 8002dce <handle+0x26>
    ret = ptpd_net_select(&ptp_clock->netPath, 0);
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f7ff fd8c 	bl	80028e0 <ptpd_net_select>
    if (ret < 0)
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	db75      	blt.n	8002eb8 <handle+0x110>
    else if (!ret)
 8002dcc:	d052      	beq.n	8002e74 <handle+0xcc>
  ptp_clock->msgIbufLength = ptpd_net_recv_event(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8002dce:	f504 760e 	add.w	r6, r4, #568	@ 0x238
 8002dd2:	466f      	mov	r7, sp
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	463a      	mov	r2, r7
 8002dd8:	4631      	mov	r1, r6
 8002dda:	f7ff fdcd 	bl	8002978 <ptpd_net_recv_event>
  if (ptp_clock->msgIbufLength < 0)
 8002dde:	2800      	cmp	r0, #0
  ptp_clock->msgIbufLength = ptpd_net_recv_event(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8002de0:	f8c4 0364 	str.w	r0, [r4, #868]	@ 0x364
  if (ptp_clock->msgIbufLength < 0)
 8002de4:	db68      	blt.n	8002eb8 <handle+0x110>
  else if (!ptp_clock->msgIbufLength)
 8002de6:	d03b      	beq.n	8002e60 <handle+0xb8>
  ptp_clock->messageActivity = true;
 8002de8:	2301      	movs	r3, #1
  if (ptp_clock->msgIbufLength < HEADER_LENGTH)
 8002dea:	2821      	cmp	r0, #33	@ 0x21
  ptp_clock->messageActivity = true;
 8002dec:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
  if (ptp_clock->msgIbufLength < HEADER_LENGTH)
 8002df0:	dd62      	ble.n	8002eb8 <handle+0x110>
  ptpd_msg_unpack_header(ptp_clock->msgIbuf, &ptp_clock->msgTmpHeader);
 8002df2:	f104 08c0 	add.w	r8, r4, #192	@ 0xc0
 8002df6:	4630      	mov	r0, r6
 8002df8:	4641      	mov	r1, r8
 8002dfa:	f7ff f965 	bl	80020c8 <ptpd_msg_unpack_header>
  if (ptp_clock->msgTmpHeader.versionPTP != ptp_clock->portDS.versionNumber)
 8002dfe:	f894 20c2 	ldrb.w	r2, [r4, #194]	@ 0xc2
 8002e02:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d134      	bne.n	8002e74 <handle+0xcc>
  if (ptp_clock->msgTmpHeader.domainNumber != ptp_clock->defaultDS.domainNumber)
 8002e0a:	f894 20c6 	ldrb.w	r2, [r4, #198]	@ 0xc6
 8002e0e:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d12e      	bne.n	8002e74 <handle+0xcc>
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8002e16:	f104 0b40 	add.w	fp, r4, #64	@ 0x40
                                            &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8002e1a:	f104 0ad8 	add.w	sl, r4, #216	@ 0xd8
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8002e1e:	4658      	mov	r0, fp
 8002e20:	4651      	mov	r1, sl
 8002e22:	f7fe ff3b 	bl	8001c9c <ptpd_is_same_port_identity>
  if (!is_from_self && time.seconds > 0)
 8002e26:	4681      	mov	r9, r0
 8002e28:	b940      	cbnz	r0, 8002e3c <handle+0x94>
 8002e2a:	9b00      	ldr	r3, [sp, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dd05      	ble.n	8002e3c <handle+0x94>
      ptpd_sub_time(&time, &time, &ptp_clock->inboundLatency);
 8002e30:	f504 6282 	add.w	r2, r4, #1040	@ 0x410
 8002e34:	4639      	mov	r1, r7
 8002e36:	4638      	mov	r0, r7
 8002e38:	f7fe fdd0 	bl	80019dc <ptpd_sub_time>
  switch (ptp_clock->msgTmpHeader.messageType)
 8002e3c:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 8002e40:	2b0b      	cmp	r3, #11
 8002e42:	d817      	bhi.n	8002e74 <handle+0xcc>
 8002e44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e48:	001901d2 	.word	0x001901d2
 8002e4c:	01310183 	.word	0x01310183
 8002e50:	00160016 	.word	0x00160016
 8002e54:	00160016 	.word	0x00160016
 8002e58:	009f00e7 	.word	0x009f00e7
 8002e5c:	003f0061 	.word	0x003f0061
    ptp_clock->msgIbufLength = ptpd_net_recv_general(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8002e60:	463a      	mov	r2, r7
 8002e62:	4631      	mov	r1, r6
 8002e64:	4628      	mov	r0, r5
 8002e66:	f7ff fd8f 	bl	8002988 <ptpd_net_recv_general>
    if (ptp_clock->msgIbufLength < 0)
 8002e6a:	2800      	cmp	r0, #0
    ptp_clock->msgIbufLength = ptpd_net_recv_general(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8002e6c:	f8c4 0364 	str.w	r0, [r4, #868]	@ 0x364
    if (ptp_clock->msgIbufLength < 0)
 8002e70:	db22      	blt.n	8002eb8 <handle+0x110>
    else if (!ptp_clock->msgIbufLength)
 8002e72:	d1b9      	bne.n	8002de8 <handle+0x40>
}
 8002e74:	b009      	add	sp, #36	@ 0x24
 8002e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (ptp_clock->portDS.delayMechanism)
 8002e7a:	f894 6057 	ldrb.w	r6, [r4, #87]	@ 0x57
 8002e7e:	2e01      	cmp	r6, #1
 8002e80:	d1f8      	bne.n	8002e74 <handle+0xcc>
      if (ptp_clock->msgIbufLength < DELAY_REQ_LENGTH)
 8002e82:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 8002e86:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e88:	dd16      	ble.n	8002eb8 <handle+0x110>
      switch (ptp_clock->portDS.portState)
 8002e8a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d1f0      	bne.n	8002e74 <handle+0xcc>
// Pack and send on event multicast ip adress a DelayResp message.
static void issue_delay_resp(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader * delayReqHeader)
{
  Timestamp request_receipt_timestamp;

  ptpd_from_internal_time(time, &request_receipt_timestamp);
 8002e92:	4638      	mov	r0, r7
  ptpd_msg_pack_delay_resp(ptp_clock, ptp_clock->msgObuf, delayReqHeader, &request_receipt_timestamp);
 8002e94:	f504 7786 	add.w	r7, r4, #268	@ 0x10c
  ptpd_from_internal_time(time, &request_receipt_timestamp);
 8002e98:	a905      	add	r1, sp, #20
 8002e9a:	f7fe fd59 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_delay_resp(ptp_clock, ptp_clock->msgObuf, delayReqHeader, &request_receipt_timestamp);
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	ab05      	add	r3, sp, #20
 8002ea6:	f7ff fa8f 	bl	80023c8 <ptpd_msg_pack_delay_resp>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH))
 8002eaa:	2236      	movs	r2, #54	@ 0x36
 8002eac:	4639      	mov	r1, r7
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f7ff fd92 	bl	80029d8 <ptpd_net_send_general>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d1dd      	bne.n	8002e74 <handle+0xcc>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff fda8 	bl	8002a10 <ptpd_protocol_to_state>
}
 8002ec0:	b009      	add	sp, #36	@ 0x24
 8002ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (ptp_clock->msgIbufLength < ANNOUNCE_LENGTH)
 8002ec6:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 8002eca:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ecc:	ddf4      	ble.n	8002eb8 <handle+0x110>
  if (is_from_self)
 8002ece:	f1b9 0f00 	cmp.w	r9, #0
 8002ed2:	d1cf      	bne.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.portState)
 8002ed4:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	f000 81f1 	beq.w	80032c0 <handle+0x518>
 8002ede:	f200 81bd 	bhi.w	800325c <handle+0x4b4>
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d9c6      	bls.n	8002e74 <handle+0xcc>
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8002ee6:	f104 05e8 	add.w	r5, r4, #232	@ 0xe8
 8002eea:	4630      	mov	r0, r6
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7ff f993 	bl	8002218 <ptpd_msg_unpack_announce>
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8002ef2:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
      ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8002ef6:	462a      	mov	r2, r5
 8002ef8:	4641      	mov	r1, r8
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8002efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
      ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8002efe:	4620      	mov	r0, r4
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8002f00:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
      ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8002f04:	f7fe fedc 	bl	8001cc0 <ptpd_add_foreign>
      break;
 8002f08:	e7b4      	b.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.delayMechanism)
 8002f0a:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d1b0      	bne.n	8002e74 <handle+0xcc>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 8002f12:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 8002f16:	2b35      	cmp	r3, #53	@ 0x35
 8002f18:	ddce      	ble.n	8002eb8 <handle+0x110>
      switch (ptp_clock->portDS.portState)
 8002f1a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d001      	beq.n	8002f26 <handle+0x17e>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d1a6      	bne.n	8002e74 <handle+0xcc>
          if (!ptp_clock->waitingForPDelayRespFollowUp)
 8002f26:	f894 33cd 	ldrb.w	r3, [r4, #973]	@ 0x3cd
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0a2      	beq.n	8002e74 <handle+0xcc>
          if (ptp_clock->msgTmpHeader.sequenceId == ptp_clock->sentPDelayReqSequenceId - 1)
 8002f2e:	f9b4 33c0 	ldrsh.w	r3, [r4, #960]	@ 0x3c0
 8002f32:	f9b4 20e2 	ldrsh.w	r2, [r4, #226]	@ 0xe2
 8002f36:	3b01      	subs	r3, #1
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d19b      	bne.n	8002e74 <handle+0xcc>
            ptpd_msg_unpack_peer_delay_resp_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.prespfollow);
 8002f3c:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
            ptpd_to_internal_time(&response_origin_timestamp, &ptp_clock->msgTmp.prespfollow.responseOriginTimestamp);
 8002f40:	ad05      	add	r5, sp, #20
            ptpd_msg_unpack_peer_delay_resp_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.prespfollow);
 8002f42:	4630      	mov	r0, r6
 8002f44:	4639      	mov	r1, r7
 8002f46:	f7ff fb47 	bl	80025d8 <ptpd_msg_unpack_peer_delay_resp_follow_up>
            ptpd_to_internal_time(&response_origin_timestamp, &ptp_clock->msgTmp.prespfollow.responseOriginTimestamp);
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f7fe fd0b 	bl	8001968 <ptpd_to_internal_time>
            ptp_clock->pdelay_t3 = response_origin_timestamp;
 8002f52:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 8002f56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f5a:	e883 0003 	stmia.w	r3, {r0, r1}
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8002f5e:	f104 01d0 	add.w	r1, r4, #208	@ 0xd0
 8002f62:	a803      	add	r0, sp, #12
 8002f64:	f7fe fcd0 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_pDelayResp);
 8002f68:	a903      	add	r1, sp, #12
 8002f6a:	f504 726e 	add.w	r2, r4, #952	@ 0x3b8
 8002f6e:	4608      	mov	r0, r1
 8002f70:	f7fe fd04 	bl	800197c <ptpd_add_time>
            ptpd_servo_update_peer_delay(ptp_clock, &correction_field, true);
 8002f74:	2201      	movs	r2, #1
 8002f76:	a903      	add	r1, sp, #12
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f000 fc5d 	bl	8003838 <ptpd_servo_update_peer_delay>
            ptp_clock->waitingForPDelayRespFollowUp = false;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f884 33cd 	strb.w	r3, [r4, #973]	@ 0x3cd
            break;
 8002f84:	e776      	b.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.delayMechanism)
 8002f86:	f894 1057 	ldrb.w	r1, [r4, #87]	@ 0x57
 8002f8a:	2901      	cmp	r1, #1
 8002f8c:	f47f af72 	bne.w	8002e74 <handle+0xcc>
      if (ptp_clock->msgIbufLength < DELAY_RESP_LENGTH)
 8002f90:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 8002f94:	2b35      	cmp	r3, #53	@ 0x35
 8002f96:	dd90      	ble.n	8002eba <handle+0x112>
      switch (ptp_clock->portDS.portState)
 8002f98:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8002f9c:	3b07      	subs	r3, #7
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f63f af68 	bhi.w	8002e74 <handle+0xcc>
          ptpd_msg_unpack_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.resp);
 8002fa4:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8002fa8:	4630      	mov	r0, r6
 8002faa:	4639      	mov	r1, r7
 8002fac:	f7ff fa48 	bl	8002440 <ptpd_msg_unpack_delay_resp>
          is_from_current_parent = ptpd_is_same_port_identity(
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8002fb6:	f7fe fe71 	bl	8001c9c <ptpd_is_same_port_identity>
          is_current_request = ptpd_is_same_port_identity(
 8002fba:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
          is_from_current_parent = ptpd_is_same_port_identity(
 8002fbe:	4605      	mov	r5, r0
          is_current_request = ptpd_is_same_port_identity(
 8002fc0:	4658      	mov	r0, fp
 8002fc2:	f7fe fe6b 	bl	8001c9c <ptpd_is_same_port_identity>
          if (((ptp_clock->sentDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request && is_from_current_parent)
 8002fc6:	f9b4 23c2 	ldrsh.w	r2, [r4, #962]	@ 0x3c2
 8002fca:	f9b4 10e2 	ldrsh.w	r1, [r4, #226]	@ 0xe2
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	428a      	cmp	r2, r1
 8002fd2:	f47f af4f 	bne.w	8002e74 <handle+0xcc>
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	f43f af4c 	beq.w	8002e74 <handle+0xcc>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	f43f af49 	beq.w	8002e74 <handle+0xcc>
            ptpd_to_internal_time(&ptp_clock->timestamp_delayReqRecv, &ptp_clock->msgTmp.resp.receiveTimestamp);
 8002fe2:	f504 756a 	add.w	r5, r4, #936	@ 0x3a8
 8002fe6:	4639      	mov	r1, r7
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f7fe fcbd 	bl	8001968 <ptpd_to_internal_time>
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8002fee:	f104 01d0 	add.w	r1, r4, #208	@ 0xd0
 8002ff2:	a805      	add	r0, sp, #20
 8002ff4:	f7fe fc88 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_servo_update_delay(ptp_clock, &ptp_clock->timestamp_delayReqSend, &ptp_clock->timestamp_delayReqRecv, &correction_field);
 8002ff8:	ab05      	add	r3, sp, #20
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	f504 7168 	add.w	r1, r4, #928	@ 0x3a0
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fbed 	bl	80037e0 <ptpd_servo_update_delay>
            if (ptp_clock->msgTmpHeader.logMessageInterval != 0x7f)
 8003006:	f994 30e5 	ldrsb.w	r3, [r4, #229]	@ 0xe5
 800300a:	2b7f      	cmp	r3, #127	@ 0x7f
 800300c:	f43f af32 	beq.w	8002e74 <handle+0xcc>
              ptp_clock->portDS.logMinDelayReqInterval = ptp_clock->msgTmpHeader.logMessageInterval;
 8003010:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
 8003014:	e72e      	b.n	8002e74 <handle+0xcc>
  if (ptp_clock->msgIbufLength < FOLLOW_UP_LENGTH)
 8003016:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 800301a:	2b2b      	cmp	r3, #43	@ 0x2b
 800301c:	f77f af4c 	ble.w	8002eb8 <handle+0x110>
  if (is_from_self)
 8003020:	f1b9 0f00 	cmp.w	r9, #0
 8003024:	f47f af26 	bne.w	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.portState)
 8003028:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800302c:	2b06      	cmp	r3, #6
 800302e:	d038      	beq.n	80030a2 <handle+0x2fa>
 8003030:	3b07      	subs	r3, #7
 8003032:	2b01      	cmp	r3, #1
 8003034:	f63f af1e 	bhi.w	8002e74 <handle+0xcc>
      is_from_current_parent = ptpd_is_same_port_identity(
 8003038:	4651      	mov	r1, sl
 800303a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800303e:	f7fe fe2d 	bl	8001c9c <ptpd_is_same_port_identity>
      if (!is_from_current_parent)
 8003042:	f894 33cc 	ldrb.w	r3, [r4, #972]	@ 0x3cc
 8003046:	2b00      	cmp	r3, #0
 8003048:	f43f af14 	beq.w	8002e74 <handle+0xcc>
 800304c:	2800      	cmp	r0, #0
 800304e:	f43f af11 	beq.w	8002e74 <handle+0xcc>
      if (ptp_clock->recvSyncSequenceId !=  ptp_clock->msgTmpHeader.sequenceId)
 8003052:	f9b4 23ca 	ldrsh.w	r2, [r4, #970]	@ 0x3ca
 8003056:	f9b4 30e2 	ldrsh.w	r3, [r4, #226]	@ 0xe2
 800305a:	429a      	cmp	r2, r3
 800305c:	f47f af0a 	bne.w	8002e74 <handle+0xcc>
      ptpd_msg_unpack_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.follow);
 8003060:	f104 05e8 	add.w	r5, r4, #232	@ 0xe8
 8003064:	4630      	mov	r0, r6
 8003066:	4629      	mov	r1, r5
 8003068:	f7ff f99c 	bl	80023a4 <ptpd_msg_unpack_follow_up>
      ptpd_to_internal_time(&precise_origin_timestamp, &ptp_clock->msgTmp.follow.preciseOriginTimestamp);
 800306c:	4629      	mov	r1, r5
 800306e:	a805      	add	r0, sp, #20
      ptp_clock->waitingForFollowUp = false;
 8003070:	f884 93cc 	strb.w	r9, [r4, #972]	@ 0x3cc
      ptpd_to_internal_time(&precise_origin_timestamp, &ptp_clock->msgTmp.follow.preciseOriginTimestamp);
 8003074:	f7fe fc78 	bl	8001968 <ptpd_to_internal_time>
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8003078:	f104 01d0 	add.w	r1, r4, #208	@ 0xd0
 800307c:	a803      	add	r0, sp, #12
 800307e:	f7fe fc43 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
      ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_sync);
 8003082:	a903      	add	r1, sp, #12
 8003084:	f504 726c 	add.w	r2, r4, #944	@ 0x3b0
 8003088:	4608      	mov	r0, r1
 800308a:	f7fe fc77 	bl	800197c <ptpd_add_time>
      ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &precise_origin_timestamp, &correction_field);
 800308e:	ab03      	add	r3, sp, #12
 8003090:	aa05      	add	r2, sp, #20
 8003092:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8003096:	4620      	mov	r0, r4
 8003098:	f000 fb4a 	bl	8003730 <ptpd_servo_update_offset>
      ptpd_servo_update_clock(ptp_clock);
 800309c:	4620      	mov	r0, r4
 800309e:	f000 fc03 	bl	80038a8 <ptpd_servo_update_clock>
      issue_delay_req_timer_expired(ptp_clock);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fde2 	bl	8002c6c <issue_delay_req_timer_expired>
      break;
 80030a8:	e6e4      	b.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.delayMechanism)
 80030aa:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f47f aee0 	bne.w	8002e74 <handle+0xcc>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_LENGTH)
 80030b4:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 80030b8:	2b35      	cmp	r3, #53	@ 0x35
 80030ba:	f77f aefd 	ble.w	8002eb8 <handle+0x110>
      switch (ptp_clock->portDS.portState)
 80030be:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d002      	beq.n	80030cc <handle+0x324>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	f47f aed4 	bne.w	8002e74 <handle+0xcc>
          if (is_from_self)
 80030cc:	f1b9 0f00 	cmp.w	r9, #0
 80030d0:	f47f aed0 	bne.w	8002e74 <handle+0xcc>
          ptpd_msg_unpack_peer_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.presp);
 80030d4:	4630      	mov	r0, r6
 80030d6:	f104 06e8 	add.w	r6, r4, #232	@ 0xe8
 80030da:	4631      	mov	r1, r6
 80030dc:	f7ff fa2a 	bl	8002534 <ptpd_msg_unpack_peer_delay_resp>
          is_current_request = ptpd_is_same_port_identity(
 80030e0:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 80030e4:	4658      	mov	r0, fp
 80030e6:	f7fe fdd9 	bl	8001c9c <ptpd_is_same_port_identity>
          if (((ptp_clock->sentPDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request)
 80030ea:	f9b4 23c0 	ldrsh.w	r2, [r4, #960]	@ 0x3c0
 80030ee:	f9b4 10e2 	ldrsh.w	r1, [r4, #226]	@ 0xe2
 80030f2:	3a01      	subs	r2, #1
 80030f4:	428a      	cmp	r2, r1
 80030f6:	f47f aebd 	bne.w	8002e74 <handle+0xcc>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	f43f aeba 	beq.w	8002e74 <handle+0xcc>
            if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8003100:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8003104:	f104 08d0 	add.w	r8, r4, #208	@ 0xd0
            if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8003108:	079b      	lsls	r3, r3, #30
 800310a:	f140 8108 	bpl.w	800331e <handle+0x576>
              ptp_clock->waitingForPDelayRespFollowUp = true;
 800310e:	2301      	movs	r3, #1
              ptpd_to_internal_time(&request_receipt_timestamp, &ptp_clock->msgTmp.presp.requestReceiptTimestamp);
 8003110:	ad05      	add	r5, sp, #20
              ptp_clock->waitingForPDelayRespFollowUp = true;
 8003112:	f884 33cd 	strb.w	r3, [r4, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 8003116:	f504 7364 	add.w	r3, r4, #912	@ 0x390
 800311a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800311e:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_to_internal_time(&request_receipt_timestamp, &ptp_clock->msgTmp.presp.requestReceiptTimestamp);
 8003122:	4628      	mov	r0, r5
 8003124:	4631      	mov	r1, r6
 8003126:	f7fe fc1f 	bl	8001968 <ptpd_to_internal_time>
              ptp_clock->pdelay_t2 = request_receipt_timestamp;
 800312a:	f504 7360 	add.w	r3, r4, #896	@ 0x380
              ptp_clock->correctionField_pDelayResp = correction_field;
 800312e:	f504 746e 	add.w	r4, r4, #952	@ 0x3b8
              ptp_clock->pdelay_t2 = request_receipt_timestamp;
 8003132:	e895 0003 	ldmia.w	r5, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8003136:	ad03      	add	r5, sp, #12
              ptp_clock->pdelay_t2 = request_receipt_timestamp;
 8003138:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800313c:	4641      	mov	r1, r8
 800313e:	4628      	mov	r0, r5
 8003140:	f7fe fbe2 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
              ptp_clock->correctionField_pDelayResp = correction_field;
 8003144:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003148:	e884 0003 	stmia.w	r4, {r0, r1}
 800314c:	e692      	b.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.delayMechanism)
 800314e:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 8003152:	2b02      	cmp	r3, #2
 8003154:	f47f ae8e 	bne.w	8002e74 <handle+0xcc>
      if (ptp_clock->msgIbufLength < PDELAY_REQ_LENGTH)
 8003158:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 800315c:	2b35      	cmp	r3, #53	@ 0x35
 800315e:	f77f aeab 	ble.w	8002eb8 <handle+0x110>
      switch (ptp_clock->portDS.portState)
 8003162:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8003166:	2b06      	cmp	r3, #6
 8003168:	f200 80a6 	bhi.w	80032b8 <handle+0x510>
 800316c:	2b04      	cmp	r3, #4
 800316e:	f67f ae81 	bls.w	8002e74 <handle+0xcc>
          if (is_from_self)
 8003172:	f1b9 0f00 	cmp.w	r9, #0
 8003176:	f47f ae7d 	bne.w	8002e74 <handle+0xcc>
  ptpd_msg_pack_peer_delay_resp(ptp_clock->msgObuf, delay_req_header, &request_receipt_timestamp);
 800317a:	f504 7686 	add.w	r6, r4, #268	@ 0x10c
  ptpd_from_internal_time(time, &request_receipt_timestamp);
 800317e:	4638      	mov	r0, r7
 8003180:	a905      	add	r1, sp, #20
 8003182:	f7fe fbe5 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp(ptp_clock->msgObuf, delay_req_header, &request_receipt_timestamp);
 8003186:	aa05      	add	r2, sp, #20
 8003188:	4641      	mov	r1, r8
 800318a:	4630      	mov	r0, r6
 800318c:	f7ff f9a0 	bl	80024d0 <ptpd_msg_pack_peer_delay_resp>
  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH, time))
 8003190:	463b      	mov	r3, r7
 8003192:	2236      	movs	r2, #54	@ 0x36
 8003194:	4631      	mov	r1, r6
 8003196:	4628      	mov	r0, r5
 8003198:	f7ff fc0e 	bl	80029b8 <ptpd_net_send_peer_event>
 800319c:	2800      	cmp	r0, #0
 800319e:	f000 80a8 	beq.w	80032f2 <handle+0x54a>
    if (time->seconds != 0)
 80031a2:	9b00      	ldr	r3, [sp, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f43f ae65 	beq.w	8002e74 <handle+0xcc>
      ptpd_add_time(time, time, &ptp_clock->outboundLatency);
 80031aa:	f504 6283 	add.w	r2, r4, #1048	@ 0x418
 80031ae:	4639      	mov	r1, r7
 80031b0:	4638      	mov	r0, r7
 80031b2:	f7fe fbe3 	bl	800197c <ptpd_add_time>
 80031b6:	9b00      	ldr	r3, [sp, #0]
          if ((time->seconds != 0) && get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f43f ae5b 	beq.w	8002e74 <handle+0xcc>
 80031be:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 80031c2:	079a      	lsls	r2, r3, #30
 80031c4:	f57f ae56 	bpl.w	8002e74 <handle+0xcc>

static void issue_peer_delay_resp_follow_up(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader *delay_req_header)
{
  Timestamp response_origin_timestamp;

  ptpd_from_internal_time(time, &response_origin_timestamp);
 80031c8:	4638      	mov	r0, r7
 80031ca:	a905      	add	r1, sp, #20
 80031cc:	f7fe fbc0 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp_follow_up(ptp_clock->msgObuf, delay_req_header, &response_origin_timestamp);
 80031d0:	aa05      	add	r2, sp, #20
 80031d2:	4641      	mov	r1, r8
 80031d4:	4630      	mov	r0, r6
 80031d6:	f7ff f9c7 	bl	8002568 <ptpd_msg_pack_peer_delay_resp_follow_up>

  if (!ptpd_net_send_peer_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_FOLLOW_UP_LENGTH))
 80031da:	2236      	movs	r2, #54	@ 0x36
 80031dc:	4631      	mov	r1, r6
 80031de:	4628      	mov	r0, r5
 80031e0:	f7ff fc08 	bl	80029f4 <ptpd_net_send_peer_general>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	f47f ae45 	bne.w	8002e74 <handle+0xcc>
 80031ea:	e665      	b.n	8002eb8 <handle+0x110>
  if (ptp_clock->msgIbufLength < SYNC_LENGTH)
 80031ec:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 80031f0:	2b2b      	cmp	r3, #43	@ 0x2b
 80031f2:	f77f ae61 	ble.w	8002eb8 <handle+0x110>
  switch (ptp_clock->portDS.portState)
 80031f6:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	f43f af51 	beq.w	80030a2 <handle+0x2fa>
 8003200:	3b07      	subs	r3, #7
 8003202:	2b01      	cmp	r3, #1
 8003204:	f63f ae36 	bhi.w	8002e74 <handle+0xcc>
      if (is_from_self)
 8003208:	f1b9 0f00 	cmp.w	r9, #0
 800320c:	f47f ae32 	bne.w	8002e74 <handle+0xcc>
      is_from_current_parent = ptpd_is_same_port_identity(
 8003210:	4651      	mov	r1, sl
 8003212:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8003216:	f7fe fd41 	bl	8001c9c <ptpd_is_same_port_identity>
      if (!is_from_current_parent)
 800321a:	2800      	cmp	r0, #0
 800321c:	f43f ae2a 	beq.w	8002e74 <handle+0xcc>
      ptp_clock->timestamp_syncRecv = *time;
 8003220:	f504 7866 	add.w	r8, r4, #920	@ 0x398
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8003224:	ad03      	add	r5, sp, #12
      ptp_clock->timestamp_syncRecv = *time;
 8003226:	e897 0003 	ldmia.w	r7, {r0, r1}
 800322a:	e888 0003 	stmia.w	r8, {r0, r1}
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800322e:	f104 01d0 	add.w	r1, r4, #208	@ 0xd0
 8003232:	4628      	mov	r0, r5
 8003234:	f7fe fb68 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
      if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8003238:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 800323c:	0799      	lsls	r1, r3, #30
 800323e:	d55e      	bpl.n	80032fe <handle+0x556>
        ptp_clock->waitingForFollowUp = true;
 8003240:	2101      	movs	r1, #1
        ptp_clock->recvSyncSequenceId = ptp_clock->msgTmpHeader.sequenceId;
 8003242:	f8b4 20e2 	ldrh.w	r2, [r4, #226]	@ 0xe2
        ptp_clock->correctionField_sync = correction_field;
 8003246:	f504 736c 	add.w	r3, r4, #944	@ 0x3b0
        ptp_clock->waitingForFollowUp = true;
 800324a:	f884 13cc 	strb.w	r1, [r4, #972]	@ 0x3cc
        ptp_clock->recvSyncSequenceId = ptp_clock->msgTmpHeader.sequenceId;
 800324e:	f8a4 23ca 	strh.w	r2, [r4, #970]	@ 0x3ca
        ptp_clock->correctionField_sync = correction_field;
 8003252:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003256:	e883 0003 	stmia.w	r3, {r0, r1}
 800325a:	e60b      	b.n	8002e74 <handle+0xcc>
  switch (ptp_clock->portDS.portState)
 800325c:	3b07      	subs	r3, #7
 800325e:	2b01      	cmp	r3, #1
 8003260:	f63f ae41 	bhi.w	8002ee6 <handle+0x13e>
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8003264:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
      is_from_current_parent = ptpd_is_same_port_identity(
 8003268:	4651      	mov	r1, sl
 800326a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 800326e:	f104 05e8 	add.w	r5, r4, #232	@ 0xe8
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8003272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003276:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
      is_from_current_parent = ptpd_is_same_port_identity(
 800327a:	f7fe fd0f 	bl	8001c9c <ptpd_is_same_port_identity>
 800327e:	4603      	mov	r3, r0
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8003280:	4630      	mov	r0, r6
 8003282:	4629      	mov	r1, r5
      is_from_current_parent = ptpd_is_same_port_identity(
 8003284:	461e      	mov	r6, r3
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8003286:	f7fe ffc7 	bl	8002218 <ptpd_msg_unpack_announce>
        ptpd_s1(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 800328a:	462a      	mov	r2, r5
 800328c:	4641      	mov	r1, r8
 800328e:	4620      	mov	r0, r4
      if (is_from_current_parent)
 8003290:	2e00      	cmp	r6, #0
 8003292:	f43f ae37 	beq.w	8002f04 <handle+0x15c>
        ptpd_s1(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8003296:	f7fe fdc9 	bl	8001e2c <ptpd_s1>
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 800329a:	f994 2054 	ldrsb.w	r2, [r4, #84]	@ 0x54
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 800329e:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	dd20      	ble.n	80032e8 <handle+0x540>
 80032a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032aa:	4093      	lsls	r3, r2
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80032ac:	fb03 f101 	mul.w	r1, r3, r1
 80032b0:	2003      	movs	r0, #3
 80032b2:	f000 fbe7 	bl	8003a84 <ptpd_timer_start>
 80032b6:	e5dd      	b.n	8002e74 <handle+0xcc>
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	f47f addb 	bne.w	8002e74 <handle+0xcc>
 80032be:	e758      	b.n	8003172 <handle+0x3ca>
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80032c0:	f994 2054 	ldrsb.w	r2, [r4, #84]	@ 0x54
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80032c4:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80032c8:	2a00      	cmp	r2, #0
 80032ca:	dd08      	ble.n	80032de <handle+0x536>
 80032cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032d0:	4093      	lsls	r3, r2
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80032d2:	fb03 f101 	mul.w	r1, r3, r1
 80032d6:	2003      	movs	r0, #3
 80032d8:	f000 fbd4 	bl	8003a84 <ptpd_timer_start>
 80032dc:	e603      	b.n	8002ee6 <handle+0x13e>
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80032de:	4252      	negs	r2, r2
 80032e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032e4:	4113      	asrs	r3, r2
 80032e6:	e7f4      	b.n	80032d2 <handle+0x52a>
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80032e8:	4252      	negs	r2, r2
 80032ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ee:	4113      	asrs	r3, r2
 80032f0:	e7dc      	b.n	80032ac <handle+0x504>
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80032f2:	2101      	movs	r1, #1
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fb8b 	bl	8002a10 <ptpd_protocol_to_state>
 80032fa:	9b00      	ldr	r3, [sp, #0]
 80032fc:	e75c      	b.n	80031b8 <handle+0x410>
        ptpd_msg_unpack_sync(ptp_clock->msgIbuf, &ptp_clock->msgTmp.sync);
 80032fe:	4630      	mov	r0, r6
 8003300:	f104 06e8 	add.w	r6, r4, #232	@ 0xe8
 8003304:	4631      	mov	r1, r6
 8003306:	f7fe ffe7 	bl	80022d8 <ptpd_msg_unpack_sync>
        ptpd_to_internal_time(&origin_timestamp, &ptp_clock->msgTmp.sync.originTimestamp);
 800330a:	4631      	mov	r1, r6
 800330c:	a805      	add	r0, sp, #20
        ptp_clock->waitingForFollowUp = false;
 800330e:	f884 93cc 	strb.w	r9, [r4, #972]	@ 0x3cc
        ptpd_to_internal_time(&origin_timestamp, &ptp_clock->msgTmp.sync.originTimestamp);
 8003312:	f7fe fb29 	bl	8001968 <ptpd_to_internal_time>
        ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &origin_timestamp, &correction_field);
 8003316:	462b      	mov	r3, r5
 8003318:	aa05      	add	r2, sp, #20
 800331a:	4641      	mov	r1, r8
 800331c:	e6bb      	b.n	8003096 <handle+0x2ee>
              ptp_clock->pdelay_t4 = *time;
 800331e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003322:	f504 7364 	add.w	r3, r4, #912	@ 0x390
              ptp_clock->waitingForPDelayRespFollowUp = false;
 8003326:	f884 93cd 	strb.w	r9, [r4, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 800332a:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800332e:	4641      	mov	r1, r8
 8003330:	a803      	add	r0, sp, #12
 8003332:	f7fe fae9 	bl	8001908 <ptpd_scaled_nanoseconds_to_internal_time>
              ptpd_servo_update_peer_delay(ptp_clock, &correction_field, false);
 8003336:	464a      	mov	r2, r9
 8003338:	a903      	add	r1, sp, #12
 800333a:	4620      	mov	r0, r4
 800333c:	f000 fa7c 	bl	8003838 <ptpd_servo_update_peer_delay>
 8003340:	e598      	b.n	8002e74 <handle+0xcc>
 8003342:	bf00      	nop

08003344 <ptpd_protocol_do_state>:
{
 8003344:	b570      	push	{r4, r5, r6, lr}
  ptp_clock->messageActivity = false;
 8003346:	2200      	movs	r2, #0
  switch (ptp_clock->portDS.portState)
 8003348:	f890 304a 	ldrb.w	r3, [r0, #74]	@ 0x4a
{
 800334c:	b088      	sub	sp, #32
 800334e:	4604      	mov	r4, r0
  ptp_clock->messageActivity = false;
 8003350:	f880 2408 	strb.w	r2, [r0, #1032]	@ 0x408
  switch (ptp_clock->portDS.portState)
 8003354:	1eda      	subs	r2, r3, #3
 8003356:	2a05      	cmp	r2, #5
 8003358:	d803      	bhi.n	8003362 <ptpd_protocol_do_state+0x1e>
      if (get_flag(ptp_clock->events, STATE_DECISION_EVENT))
 800335a:	f8d0 2470 	ldr.w	r2, [r0, #1136]	@ 0x470
 800335e:	0651      	lsls	r1, r2, #25
 8003360:	d468      	bmi.n	8003434 <ptpd_protocol_do_state+0xf0>
  switch (ptp_clock->recommendedState)
 8003362:	f894 0409 	ldrb.w	r0, [r4, #1033]	@ 0x409
 8003366:	3803      	subs	r0, #3
 8003368:	2805      	cmp	r0, #5
 800336a:	d816      	bhi.n	800339a <ptpd_protocol_do_state+0x56>
 800336c:	e8df f000 	tbb	[pc, r0]
 8003370:	2a44150d 	.word	0x2a44150d
 8003374:	1e15      	.short	0x1e15
            if (ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255))
 8003376:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 811b 	beq.w	80035b6 <ptpd_protocol_do_state+0x272>
                ptp_clock->recommendedState = PTP_LISTENING;
 8003380:	2203      	movs	r2, #3
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 8003382:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
                ptp_clock->recommendedState = PTP_LISTENING;
 8003386:	f884 2409 	strb.w	r2, [r4, #1033]	@ 0x409
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 800338a:	2b03      	cmp	r3, #3
 800338c:	d01c      	beq.n	80033c8 <ptpd_protocol_do_state+0x84>
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 800338e:	2103      	movs	r1, #3
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff fb3d 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 8003396:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800339a:	2b08      	cmp	r3, #8
 800339c:	d82a      	bhi.n	80033f4 <ptpd_protocol_do_state+0xb0>
 800339e:	e8df f003 	tbb	[pc, r3]
 80033a2:	8877      	.short	0x8877
 80033a4:	2f291343 	.word	0x2f291343
 80033a8:	1313      	.short	0x1313
 80033aa:	13          	.byte	0x13
 80033ab:	00          	.byte	0x00
      switch (ptp_clock->portDS.portState)
 80033ac:	2b07      	cmp	r3, #7
 80033ae:	f000 8082 	beq.w	80034b6 <ptpd_protocol_do_state+0x172>
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d053      	beq.n	800345e <ptpd_protocol_do_state+0x11a>
          ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80033b6:	2107      	movs	r1, #7
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff fb29 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 80033be:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
          break;
 80033c2:	e7ea      	b.n	800339a <ptpd_protocol_do_state+0x56>
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d15c      	bne.n	8003482 <ptpd_protocol_do_state+0x13e>
      if (ptpd_timer_expired(ANNOUNCE_RECEIPT_TIMER))
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 fb9d 	bl	8003b08 <ptpd_timer_expired>
 80033ce:	b358      	cbz	r0, 8003428 <ptpd_protocol_do_state+0xe4>
        ptp_clock->foreignMasterDS.count = 0;
 80033d0:	2300      	movs	r3, #0
        if (!(ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255)))
 80033d2:	f894 2093 	ldrb.w	r2, [r4, #147]	@ 0x93
        ptp_clock->foreignMasterDS.count = 0;
 80033d6:	f8a4 30ac 	strh.w	r3, [r4, #172]	@ 0xac
        ptp_clock->foreignMasterDS.i = 0;
 80033da:	f8a4 30b0 	strh.w	r3, [r4, #176]	@ 0xb0
        if (!(ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255)))
 80033de:	b922      	cbnz	r2, 80033ea <ptpd_protocol_do_state+0xa6>
 80033e0:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80033e4:	2bff      	cmp	r3, #255	@ 0xff
 80033e6:	f040 80ec 	bne.w	80035c2 <ptpd_protocol_do_state+0x27e>
        else if (ptp_clock->portDS.portState != PTP_LISTENING)
 80033ea:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	f040 808a 	bne.w	8003508 <ptpd_protocol_do_state+0x1c4>
}
 80033f4:	b008      	add	sp, #32
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
      switch (ptp_clock->portDS.portState)
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d068      	beq.n	80034ce <ptpd_protocol_do_state+0x18a>
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d127      	bne.n	8003450 <ptpd_protocol_do_state+0x10c>
      if (ptpd_timer_expired(SYNC_INTERVAL_TIMER))
 8003400:	2002      	movs	r0, #2
 8003402:	f000 fb81 	bl	8003b08 <ptpd_timer_expired>
 8003406:	2800      	cmp	r0, #0
 8003408:	f040 8094 	bne.w	8003534 <ptpd_protocol_do_state+0x1f0>
      if (ptpd_timer_expired(ANNOUNCE_INTERVAL_TIMER))
 800340c:	2004      	movs	r0, #4
 800340e:	f000 fb7b 	bl	8003b08 <ptpd_timer_expired>
 8003412:	2800      	cmp	r0, #0
 8003414:	d17a      	bne.n	800350c <ptpd_protocol_do_state+0x1c8>
      handle(ptp_clock);
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff fcc6 	bl	8002da8 <handle>
      issue_delay_req_timer_expired(ptp_clock);
 800341c:	4620      	mov	r0, r4
}
 800341e:	b008      	add	sp, #32
 8003420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      issue_delay_req_timer_expired(ptp_clock);
 8003424:	f7ff bc22 	b.w	8002c6c <issue_delay_req_timer_expired>
      handle(ptp_clock);
 8003428:	4620      	mov	r0, r4
}
 800342a:	b008      	add	sp, #32
 800342c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      handle(ptp_clock);
 8003430:	f7ff bcba 	b.w	8002da8 <handle>
        clear_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8003434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003438:	f8c0 2470 	str.w	r2, [r0, #1136]	@ 0x470
        ptp_clock->recommendedState = ptpd_bmc(ptp_clock);
 800343c:	f7fe fd54 	bl	8001ee8 <ptpd_bmc>
 8003440:	1f43      	subs	r3, r0, #5
 8003442:	f884 0409 	strb.w	r0, [r4, #1033]	@ 0x409
        switch (ptp_clock->recommendedState)
 8003446:	2b01      	cmp	r3, #1
 8003448:	d995      	bls.n	8003376 <ptpd_protocol_do_state+0x32>
      switch (ptp_clock->portDS.portState)
 800344a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800344e:	e78a      	b.n	8003366 <ptpd_protocol_do_state+0x22>
          ptpd_protocol_to_state(ptp_clock, PTP_PRE_MASTER);
 8003450:	2104      	movs	r1, #4
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff fadc 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 8003458:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
          break;
 800345c:	e79d      	b.n	800339a <ptpd_protocol_do_state+0x56>
          if (get_flag(ptp_clock->events, SYNCHRONIZATION_FAULT))
 800345e:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 8003462:	059d      	lsls	r5, r3, #22
 8003464:	f100 80c9 	bmi.w	80035fa <ptpd_protocol_do_state+0x2b6>
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 8003468:	051a      	lsls	r2, r3, #20
 800346a:	d5ad      	bpl.n	80033c8 <ptpd_protocol_do_state+0x84>
              clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 800346c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 8003470:	2107      	movs	r1, #7
 8003472:	4620      	mov	r0, r4
              clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 8003474:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 8003478:	f7ff faca 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 800347c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8003480:	e78b      	b.n	800339a <ptpd_protocol_do_state+0x56>
        ptpd_protocol_to_state(ptp_clock, PTP_PASSIVE);
 8003482:	2106      	movs	r1, #6
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff fac3 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 800348a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800348e:	e784      	b.n	800339a <ptpd_protocol_do_state+0x56>
  ptpd_net_shutdown(&ptp_clock->netPath);
 8003490:	f504 6584 	add.w	r5, r4, #1056	@ 0x420
 8003494:	4628      	mov	r0, r5
 8003496:	f7ff f9fd 	bl	8002894 <ptpd_net_shutdown>
  if (!ptpd_net_init(&ptp_clock->netPath, ptp_clock))
 800349a:	4621      	mov	r1, r4
 800349c:	4628      	mov	r0, r5
 800349e:	f7ff f97f 	bl	80027a0 <ptpd_net_init>
 80034a2:	bb08      	cbnz	r0, 80034e8 <ptpd_protocol_do_state+0x1a4>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80034a4:	2101      	movs	r1, #1
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 80034a6:	4620      	mov	r0, r4
}
 80034a8:	b008      	add	sp, #32
 80034aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 80034ae:	f7ff baaf 	b.w	8002a10 <ptpd_protocol_to_state>
      ptpd_protocol_to_state(ptp_clock, PTP_INITIALIZING);
 80034b2:	2100      	movs	r1, #0
 80034b4:	e7f7      	b.n	80034a6 <ptpd_protocol_do_state+0x162>
          if (get_flag(ptp_clock->events, MASTER_CLOCK_SELECTED))
 80034b6:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 80034ba:	055a      	lsls	r2, r3, #21
 80034bc:	f100 8089 	bmi.w	80035d2 <ptpd_protocol_do_state+0x28e>
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 80034c0:	0519      	lsls	r1, r3, #20
 80034c2:	d581      	bpl.n	80033c8 <ptpd_protocol_do_state+0x84>
            clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80034c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034c8:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
  switch (ptp_clock->portDS.portState)
 80034cc:	e77c      	b.n	80033c8 <ptpd_protocol_do_state+0x84>
          if (ptpd_timer_expired(QUALIFICATION_TIMEOUT))
 80034ce:	2005      	movs	r0, #5
 80034d0:	f000 fb1a 	bl	8003b08 <ptpd_timer_expired>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f43f af5e 	beq.w	8003396 <ptpd_protocol_do_state+0x52>
            ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 80034da:	2105      	movs	r1, #5
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff fa97 	bl	8002a10 <ptpd_protocol_to_state>
  switch (ptp_clock->portDS.portState)
 80034e2:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80034e6:	e758      	b.n	800339a <ptpd_protocol_do_state+0x56>
    ptpd_clock_init(ptp_clock);
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7fe fb6b 	bl	8001bc4 <ptpd_clock_init>
    ptpd_timer_init();
 80034ee:	f000 faa5 	bl	8003a3c <ptpd_timer_init>
    ptpd_servo_init_clock(ptp_clock);
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 f8e8 	bl	80036c8 <ptpd_servo_init_clock>
    ptpd_m1(ptp_clock);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7fe fc71 	bl	8001de0 <ptpd_m1>
    ptpd_msg_pack_header(ptp_clock, ptp_clock->msgObuf);
 80034fe:	f504 7186 	add.w	r1, r4, #268	@ 0x10c
 8003502:	4620      	mov	r0, r4
 8003504:	f7fe fe1e 	bl	8002144 <ptpd_msg_pack_header>
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8003508:	2103      	movs	r1, #3
 800350a:	e7cc      	b.n	80034a6 <ptpd_protocol_do_state+0x162>
  ptpd_msg_pack_announce(ptp_clock, ptp_clock->msgObuf);
 800350c:	f504 7586 	add.w	r5, r4, #268	@ 0x10c
 8003510:	4620      	mov	r0, r4
 8003512:	4629      	mov	r1, r5
 8003514:	f7fe fe36 	bl	8002184 <ptpd_msg_pack_announce>
  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, ANNOUNCE_LENGTH))
 8003518:	2240      	movs	r2, #64	@ 0x40
 800351a:	4629      	mov	r1, r5
 800351c:	f504 6084 	add.w	r0, r4, #1056	@ 0x420
 8003520:	f7ff fa5a 	bl	80029d8 <ptpd_net_send_general>
 8003524:	2800      	cmp	r0, #0
 8003526:	d076      	beq.n	8003616 <ptpd_protocol_do_state+0x2d2>
    ptp_clock->sentAnnounceSequenceId++;
 8003528:	f8b4 33c6 	ldrh.w	r3, [r4, #966]	@ 0x3c6
 800352c:	3301      	adds	r3, #1
 800352e:	f8a4 33c6 	strh.w	r3, [r4, #966]	@ 0x3c6
 8003532:	e770      	b.n	8003416 <ptpd_protocol_do_state+0xd2>
  ptpd_get_time(&internal_time);
 8003534:	4668      	mov	r0, sp
  ptpd_msg_pack_sync(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 8003536:	f504 7586 	add.w	r5, r4, #268	@ 0x10c
  ptpd_get_time(&internal_time);
 800353a:	f000 fa43 	bl	80039c4 <ptpd_get_time>
  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, SYNC_LENGTH, &internal_time))
 800353e:	f504 6684 	add.w	r6, r4, #1056	@ 0x420
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 8003542:	a902      	add	r1, sp, #8
 8003544:	4668      	mov	r0, sp
 8003546:	f7fe fa03 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_sync(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 800354a:	aa02      	add	r2, sp, #8
 800354c:	4629      	mov	r1, r5
 800354e:	4620      	mov	r0, r4
 8003550:	f7fe fe9a 	bl	8002288 <ptpd_msg_pack_sync>
  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, SYNC_LENGTH, &internal_time))
 8003554:	466b      	mov	r3, sp
 8003556:	222c      	movs	r2, #44	@ 0x2c
 8003558:	4629      	mov	r1, r5
 800355a:	4630      	mov	r0, r6
 800355c:	f7ff fa1c 	bl	8002998 <ptpd_net_send_event>
 8003560:	b320      	cbz	r0, 80035ac <ptpd_protocol_do_state+0x268>
    ptp_clock->sentSyncSequenceId++;
 8003562:	f8b4 33c4 	ldrh.w	r3, [r4, #964]	@ 0x3c4
 8003566:	3301      	adds	r3, #1
 8003568:	f8a4 33c4 	strh.w	r3, [r4, #964]	@ 0x3c4
    if ((internal_time.seconds != 0) && (ptp_clock->defaultDS.twoStepFlag))
 800356c:	9b00      	ldr	r3, [sp, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f43f af4c 	beq.w	800340c <ptpd_protocol_do_state+0xc8>
 8003574:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	f43f af47 	beq.w	800340c <ptpd_protocol_do_state+0xc8>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 800357e:	f504 6283 	add.w	r2, r4, #1048	@ 0x418
 8003582:	4669      	mov	r1, sp
 8003584:	4668      	mov	r0, sp
 8003586:	f7fe f9f9 	bl	800197c <ptpd_add_time>
  ptpd_from_internal_time(time, &precise_origin_timestamp);
 800358a:	4668      	mov	r0, sp
 800358c:	a905      	add	r1, sp, #20
 800358e:	f7fe f9df 	bl	8001950 <ptpd_from_internal_time>
  ptpd_msg_pack_follow_up(ptp_clock, ptp_clock->msgObuf, &precise_origin_timestamp);
 8003592:	aa05      	add	r2, sp, #20
 8003594:	4629      	mov	r1, r5
 8003596:	4620      	mov	r0, r4
 8003598:	f7fe feda 	bl	8002350 <ptpd_msg_pack_follow_up>
  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, FOLLOW_UP_LENGTH))
 800359c:	222c      	movs	r2, #44	@ 0x2c
 800359e:	4629      	mov	r1, r5
 80035a0:	4630      	mov	r0, r6
 80035a2:	f7ff fa19 	bl	80029d8 <ptpd_net_send_general>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	f47f af30 	bne.w	800340c <ptpd_protocol_do_state+0xc8>
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80035ac:	2101      	movs	r1, #1
 80035ae:	4620      	mov	r0, r4
 80035b0:	f7ff fa2e 	bl	8002a10 <ptpd_protocol_to_state>
}
 80035b4:	e72a      	b.n	800340c <ptpd_protocol_do_state+0xc8>
            if (ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255))
 80035b6:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80035ba:	2bff      	cmp	r3, #255	@ 0xff
 80035bc:	f47f af45 	bne.w	800344a <ptpd_protocol_do_state+0x106>
 80035c0:	e6de      	b.n	8003380 <ptpd_protocol_do_state+0x3c>
          ptpd_m1(ptp_clock);
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7fe fc0c 	bl	8001de0 <ptpd_m1>
          ptp_clock->recommendedState = PTP_MASTER;
 80035c8:	2105      	movs	r1, #5
          ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 80035ca:	4620      	mov	r0, r4
          ptp_clock->recommendedState = PTP_MASTER;
 80035cc:	f884 1409 	strb.w	r1, [r4, #1033]	@ 0x409
          ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 80035d0:	e76a      	b.n	80034a8 <ptpd_protocol_do_state+0x164>
            clear_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 80035d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
            ptpd_protocol_to_state(ptp_clock, PTP_SLAVE);
 80035d6:	2108      	movs	r1, #8
 80035d8:	4620      	mov	r0, r4
            clear_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 80035da:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
            ptpd_protocol_to_state(ptp_clock, PTP_SLAVE);
 80035de:	f7ff fa17 	bl	8002a10 <ptpd_protocol_to_state>
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 80035e2:	f8d4 2470 	ldr.w	r2, [r4, #1136]	@ 0x470
 80035e6:	0516      	lsls	r6, r2, #20
 80035e8:	f57f aed5 	bpl.w	8003396 <ptpd_protocol_do_state+0x52>
            clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80035ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
  switch (ptp_clock->portDS.portState)
 80035f0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
            clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80035f4:	f8c4 2470 	str.w	r2, [r4, #1136]	@ 0x470
 80035f8:	e6cf      	b.n	800339a <ptpd_protocol_do_state+0x56>
              clear_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 80035fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80035fe:	4620      	mov	r0, r4
 8003600:	2107      	movs	r1, #7
              clear_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 8003602:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 8003606:	f7ff fa03 	bl	8002a10 <ptpd_protocol_to_state>
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 800360a:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 800360e:	0518      	lsls	r0, r3, #20
 8003610:	f53f af2c 	bmi.w	800346c <ptpd_protocol_do_state+0x128>
 8003614:	e6bf      	b.n	8003396 <ptpd_protocol_do_state+0x52>
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8003616:	2101      	movs	r1, #1
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff f9f9 	bl	8002a10 <ptpd_protocol_to_state>
 800361e:	e6fa      	b.n	8003416 <ptpd_protocol_do_state+0xd2>

08003620 <ptpd_servo_filter>:
  // y_sum[1] = y[1] * 2^s
  // y_sum[n] = y_sum[n-1] + x[n-1] - y[n-1]
  // y[n] = y_sum[n] / 2^s

  // Increment number of samples.
  filter->n++;
 8003620:	68ca      	ldr	r2, [r1, #12]
  }

  s = filter->s;

  // Speedup filter, if not 2^s > n.
  if ((1 << s) > filter->n)
 8003622:	2301      	movs	r3, #1
{
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4606      	mov	r6, r0
  filter->n++;
 8003628:	18d0      	adds	r0, r2, r3
  s = filter->s;
 800362a:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
{
 800362e:	460c      	mov	r4, r1
  if (filter->n == 1)
 8003630:	2801      	cmp	r0, #1
  filter->n++;
 8003632:	60c8      	str	r0, [r1, #12]
  if ((1 << s) > filter->n)
 8003634:	fa03 f305 	lsl.w	r3, r3, r5
  if (filter->n == 1)
 8003638:	d039      	beq.n	80036ae <ptpd_servo_filter+0x8e>
  if ((1 << s) > filter->n)
 800363a:	4298      	cmp	r0, r3
 800363c:	db23      	blt.n	8003686 <ptpd_servo_filter+0x66>
    // Avoid overflowing of n.
    filter->n = 1 << s;
  }

  // Avoid overflowing of filter. 30 is because using signed 32bit integers.
  s2 = 30 - ptpd_servo_order(max(filter->y_prev, *nsec_current));
 800363e:	6809      	ldr	r1, [r1, #0]
    filter->n = 1 << s;
 8003640:	60e3      	str	r3, [r4, #12]
int32_t ptpd_floor_log2(uint32_t);

// Return maximum of two numbers.
__STATIC_INLINE int32_t max(int32_t a, int32_t b)
{
  return a > b ? a : b;
 8003642:	6830      	ldr	r0, [r6, #0]
 8003644:	4288      	cmp	r0, r1
 8003646:	bfb8      	it	lt
 8003648:	4608      	movlt	r0, r1
  if (n < 0) {
 800364a:	2800      	cmp	r0, #0
 800364c:	db28      	blt.n	80036a0 <ptpd_servo_filter+0x80>
  if (n == 0) {
 800364e:	d036      	beq.n	80036be <ptpd_servo_filter+0x9e>
  return ptpd_floor_log2(n);
 8003650:	f7fe fa36 	bl	8001ac0 <ptpd_floor_log2>
  {
    filter->y_sum <<= (s - filter->s_prev);
  }

  // Compute the filter itself.
  filter->y_sum += *nsec_current - filter->y_prev;
 8003654:	6821      	ldr	r1, [r4, #0]
  s2 = 30 - ptpd_servo_order(max(filter->y_prev, *nsec_current));
 8003656:	f1c0 001e 	rsb	r0, r0, #30
}

// Return minimum of two numbers.
__STATIC_INLINE int32_t min(int32_t a, int32_t b)
{
  return a > b ? b : a;
 800365a:	4285      	cmp	r5, r0
 800365c:	462b      	mov	r3, r5
  if (filter->s_prev > s)
 800365e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8003662:	bfa8      	it	ge
 8003664:	4603      	movge	r3, r0
    filter->y_sum >>= (filter->s_prev - s);
 8003666:	6860      	ldr	r0, [r4, #4]
  if (filter->s_prev > s)
 8003668:	429a      	cmp	r2, r3
 800366a:	dd1b      	ble.n	80036a4 <ptpd_servo_filter+0x84>
    filter->y_sum >>= (filter->s_prev - s);
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	4110      	asrs	r0, r2
 8003670:	6060      	str	r0, [r4, #4]
  filter->y_sum += *nsec_current - filter->y_prev;
 8003672:	6832      	ldr	r2, [r6, #0]
  filter->y_prev = filter->y_sum >> s;

  // Save previous order of the filter.
  filter->s_prev = s;
 8003674:	8163      	strh	r3, [r4, #10]
  filter->y_sum += *nsec_current - filter->y_prev;
 8003676:	1a52      	subs	r2, r2, r1
 8003678:	4402      	add	r2, r0
  filter->y_prev = filter->y_sum >> s;
 800367a:	fa42 f303 	asr.w	r3, r2, r3
 800367e:	e9c4 3200 	strd	r3, r2, [r4]

  DBGV("PTPD: filter: %li -> %li (%li)\n", *nsec_current, filter->y_prev, s);

  // Actualize target value.
  *nsec_current = filter->y_prev;
 8003682:	6033      	str	r3, [r6, #0]
}
 8003684:	bd70      	pop	{r4, r5, r6, pc}
  if (n < 0) {
 8003686:	2800      	cmp	r0, #0
 8003688:	da1b      	bge.n	80036c2 <ptpd_servo_filter+0xa2>
    n = -n;
 800368a:	43d0      	mvns	r0, r2
  return ptpd_floor_log2(n);
 800368c:	f7fe fa18 	bl	8001ac0 <ptpd_floor_log2>
  s2 = 30 - ptpd_servo_order(max(filter->y_prev, *nsec_current));
 8003690:	6821      	ldr	r1, [r4, #0]
  return ptpd_floor_log2(n);
 8003692:	4605      	mov	r5, r0
  return a > b ? a : b;
 8003694:	6830      	ldr	r0, [r6, #0]
 8003696:	4288      	cmp	r0, r1
 8003698:	bfb8      	it	lt
 800369a:	4608      	movlt	r0, r1
  if (n < 0) {
 800369c:	2800      	cmp	r0, #0
 800369e:	dad6      	bge.n	800364e <ptpd_servo_filter+0x2e>
    n = -n;
 80036a0:	4240      	negs	r0, r0
  if (n == 0) {
 80036a2:	e7d5      	b.n	8003650 <ptpd_servo_filter+0x30>
  else if (filter->s_prev < s)
 80036a4:	dae5      	bge.n	8003672 <ptpd_servo_filter+0x52>
    filter->y_sum <<= (s - filter->s_prev);
 80036a6:	1a9a      	subs	r2, r3, r2
 80036a8:	4090      	lsls	r0, r2
 80036aa:	6060      	str	r0, [r4, #4]
 80036ac:	e7e1      	b.n	8003672 <ptpd_servo_filter+0x52>
    filter->y_prev = *nsec_current;
 80036ae:	6831      	ldr	r1, [r6, #0]
    filter->s_prev = 0;
 80036b0:	2200      	movs	r2, #0
  if ((1 << s) > filter->n)
 80036b2:	2b01      	cmp	r3, #1
    filter->s_prev = 0;
 80036b4:	8162      	strh	r2, [r4, #10]
    filter->y_prev = *nsec_current;
 80036b6:	e9c4 1100 	strd	r1, r1, [r4]
  if ((1 << s) > filter->n)
 80036ba:	ddc1      	ble.n	8003640 <ptpd_servo_filter+0x20>
 80036bc:	e7e6      	b.n	800368c <ptpd_servo_filter+0x6c>
 80036be:	201e      	movs	r0, #30
 80036c0:	e7cb      	b.n	800365a <ptpd_servo_filter+0x3a>
  if (n == 0) {
 80036c2:	d0e5      	beq.n	8003690 <ptpd_servo_filter+0x70>
 80036c4:	e7e2      	b.n	800368c <ptpd_servo_filter+0x6c>
 80036c6:	bf00      	nop

080036c8 <ptpd_servo_init_clock>:
  ptp_clock->owd_filt.s = ptp_clock->servo.sDelay;
 80036c8:	f8b0 146a 	ldrh.w	r1, [r0, #1130]	@ 0x46a
  ptp_clock->Tms.seconds = 0;
 80036cc:	2300      	movs	r3, #0
  ptp_clock->ofm_filt.s = ptp_clock->servo.sOffset;
 80036ce:	f8b0 246c 	ldrh.w	r2, [r0, #1132]	@ 0x46c
{
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
  if (!ptp_clock->servo.noAdjust)
 80036d6:	f890 0465 	ldrb.w	r0, [r0, #1125]	@ 0x465
  ptp_clock->Tms.nanoseconds = 0;
 80036da:	e9c4 33da 	strd	r3, r3, [r4, #872]	@ 0x368
  ptp_clock->observedDrift = 0;
 80036de:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  ptp_clock->owd_filt.n = 0;
 80036e2:	f8c4 33ec 	str.w	r3, [r4, #1004]	@ 0x3ec
  ptp_clock->owd_filt.s = ptp_clock->servo.sDelay;
 80036e6:	f8a4 13e8 	strh.w	r1, [r4, #1000]	@ 0x3e8
  ptp_clock->ofm_filt.n = 0;
 80036ea:	f8c4 33dc 	str.w	r3, [r4, #988]	@ 0x3dc
  ptp_clock->ofm_filt.s = ptp_clock->servo.sOffset;
 80036ee:	f8a4 23d8 	strh.w	r2, [r4, #984]	@ 0x3d8
  ptp_clock->waitingForFollowUp = false;
 80036f2:	f8a4 33cc 	strh.w	r3, [r4, #972]	@ 0x3cc
  ptp_clock->parentDS.parentStats = false;
 80036f6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
  ptp_clock->parentDS.observedParentClockPhaseChangeRate = 0;
 80036fa:	66e3      	str	r3, [r4, #108]	@ 0x6c
  ptp_clock->parentDS.observedParentOffsetScaledLogVariance = 0;
 80036fc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  ptp_clock->pdelay_t1.seconds = ptp_clock->pdelay_t1.nanoseconds = 0;
 8003700:	e9c4 33de 	strd	r3, r3, [r4, #888]	@ 0x378
  ptp_clock->pdelay_t2.seconds = ptp_clock->pdelay_t2.nanoseconds = 0;
 8003704:	e9c4 33e0 	strd	r3, r3, [r4, #896]	@ 0x380
  ptp_clock->pdelay_t3.seconds = ptp_clock->pdelay_t3.nanoseconds = 0;
 8003708:	e9c4 33e2 	strd	r3, r3, [r4, #904]	@ 0x388
  ptp_clock->pdelay_t4.seconds = ptp_clock->pdelay_t4.nanoseconds = 0;
 800370c:	e9c4 33e4 	strd	r3, r3, [r4, #912]	@ 0x390
  if (!ptp_clock->servo.noAdjust)
 8003710:	b128      	cbz	r0, 800371e <ptpd_servo_init_clock+0x56>
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 8003712:	f504 6084 	add.w	r0, r4, #1056	@ 0x420
}
 8003716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 800371a:	f7ff b90b 	b.w	8002934 <ptpd_net_empty_event_queue>
    ptpd_adj_freq(0);
 800371e:	f000 f96b 	bl	80039f8 <ptpd_adj_freq>
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 8003722:	f504 6084 	add.w	r0, r4, #1056	@ 0x420
}
 8003726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 800372a:	f7ff b903 	b.w	8002934 <ptpd_net_empty_event_queue>
 800372e:	bf00      	nop

08003730 <ptpd_servo_update_offset>:

// 11.2
void ptpd_servo_update_offset(PtpClock *ptp_clock, const TimeInternal *sync_event_ingress_timestamp,
                  const TimeInternal *precise_origin_timestamp, const TimeInternal *correction_field)
{
 8003730:	b570      	push	{r4, r5, r6, lr}
        correction_field->seconds,
        correction_field->nanoseconds);
#endif

  // Compute offsetFromMaster.
  ptpd_sub_time(&ptp_clock->Tms, sync_event_ingress_timestamp, precise_origin_timestamp);
 8003732:	f500 755a 	add.w	r5, r0, #872	@ 0x368
{
 8003736:	461e      	mov	r6, r3
 8003738:	4604      	mov	r4, r0
  ptpd_sub_time(&ptp_clock->Tms, sync_event_ingress_timestamp, precise_origin_timestamp);
 800373a:	4628      	mov	r0, r5
 800373c:	f7fe f94e 	bl	80019dc <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tms, &ptp_clock->Tms, correction_field);
 8003740:	4632      	mov	r2, r6
 8003742:	4629      	mov	r1, r5
 8003744:	4628      	mov	r0, r5
 8003746:	f7fe f949 	bl	80019dc <ptpd_sub_time>

  ptp_clock->currentDS.offsetFromMaster = ptp_clock->Tms;
 800374a:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 800374e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003752:	e883 0003 	stmia.w	r3, {r0, r1}
  DBGVV("ptpd_servo_update_offset: mean_path_delay %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.meanPathDelay.seconds,
        ptp_clock->currentDS.meanPathDelay.nanoseconds);
#endif

  switch (ptp_clock->portDS.delayMechanism)
 8003756:	f894 2057 	ldrb.w	r2, [r4, #87]	@ 0x57
 800375a:	2a01      	cmp	r2, #1
 800375c:	d030      	beq.n	80037c0 <ptpd_servo_update_offset+0x90>
 800375e:	2a02      	cmp	r2, #2
 8003760:	d105      	bne.n	800376e <ptpd_servo_update_offset+0x3e>
    case E2E:
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.meanPathDelay);
        break;

    case P2P:
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->portDS.peerMeanPathDelay);
 8003762:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8003766:	4619      	mov	r1, r3
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe f937 	bl	80019dc <ptpd_sub_time>

  DBGVV("ptpd_servo_update_offset: offset %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.offsetFromMaster.seconds,
        ptp_clock->currentDS.offsetFromMaster.nanoseconds);

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0)
 800376e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8003772:	b15b      	cbz	r3, 800378c <ptpd_servo_update_offset+0x5c>
        set_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
    }
  }
  else if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
  {
    if (ptp_clock->portDS.portState == PTP_SLAVE)
 8003774:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8003778:	2b08      	cmp	r3, #8
 800377a:	d000      	beq.n	800377e <ptpd_servo_update_offset+0x4e>
    {
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
    }
  }
}
 800377c:	bd70      	pop	{r4, r5, r6, pc}
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 800377e:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 8003782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003786:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
}
 800378a:	bd70      	pop	{r4, r5, r6, pc}
  ptpd_servo_filter(&ptp_clock->currentDS.offsetFromMaster.nanoseconds, &ptp_clock->ofm_filt);
 800378c:	f504 7174 	add.w	r1, r4, #976	@ 0x3d0
 8003790:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 8003794:	f7ff ff44 	bl	8003620 <ptpd_servo_filter>
  if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 8003798:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800379c:	f242 730f 	movw	r3, #9999	@ 0x270f
 80037a0:	f644 611e 	movw	r1, #19998	@ 0x4e1e
 80037a4:	4413      	add	r3, r2
 80037a6:	428b      	cmp	r3, r1
 80037a8:	d811      	bhi.n	80037ce <ptpd_servo_update_offset+0x9e>
    if (ptp_clock->portDS.portState == PTP_UNCALIBRATED)
 80037aa:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80037ae:	2b07      	cmp	r3, #7
 80037b0:	d1e4      	bne.n	800377c <ptpd_servo_update_offset+0x4c>
        set_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 80037b2:	f8d4 3470 	ldr.w	r3, [r4, #1136]	@ 0x470
 80037b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ba:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
}
 80037be:	bd70      	pop	{r4, r5, r6, pc}
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.meanPathDelay);
 80037c0:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 80037c4:	4619      	mov	r1, r3
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe f908 	bl	80019dc <ptpd_sub_time>
        break;
 80037cc:	e7cf      	b.n	800376e <ptpd_servo_update_offset+0x3e>
  else if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	4b02      	ldr	r3, [pc, #8]	@ (80037dc <ptpd_servo_update_offset+0xac>)
 80037d2:	bfb8      	it	lt
 80037d4:	4252      	neglt	r2, r2
 80037d6:	429a      	cmp	r2, r3
 80037d8:	dccc      	bgt.n	8003774 <ptpd_servo_update_offset+0x44>
}
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	000f4240 	.word	0x000f4240

080037e0 <ptpd_servo_update_delay>:

// 11.3.
void ptpd_servo_update_delay(PtpClock * ptp_clock, const TimeInternal *delay_event_egress_timestamp,
                 const TimeInternal *receive_timestamp, const TimeInternal *correction_field)
{
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	461d      	mov	r5, r3
  // Tms valid?
  if (ptp_clock->ofm_filt.n == 0)
 80037e4:	f8d0 33dc 	ldr.w	r3, [r0, #988]	@ 0x3dc
 80037e8:	b903      	cbnz	r3, 80037ec <ptpd_servo_update_delay+0xc>
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->currentDS.meanPathDelay.nanoseconds, &ptp_clock->owd_filt);
  }
}
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptpd_sub_time(&ptp_clock->Tsm, receive_timestamp, delay_event_egress_timestamp);
 80037ec:	468c      	mov	ip, r1
 80037ee:	f500 765c 	add.w	r6, r0, #880	@ 0x370
 80037f2:	4604      	mov	r4, r0
 80037f4:	4611      	mov	r1, r2
  ptpd_add_time(&ptp_clock->currentDS.meanPathDelay, &ptp_clock->Tms, &ptp_clock->Tsm);
 80037f6:	f100 07a0 	add.w	r7, r0, #160	@ 0xa0
  ptpd_sub_time(&ptp_clock->Tsm, receive_timestamp, delay_event_egress_timestamp);
 80037fa:	4662      	mov	r2, ip
 80037fc:	4630      	mov	r0, r6
 80037fe:	f7fe f8ed 	bl	80019dc <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tsm, &ptp_clock->Tsm, correction_field);
 8003802:	462a      	mov	r2, r5
 8003804:	4631      	mov	r1, r6
 8003806:	4630      	mov	r0, r6
 8003808:	f7fe f8e8 	bl	80019dc <ptpd_sub_time>
  ptpd_add_time(&ptp_clock->currentDS.meanPathDelay, &ptp_clock->Tms, &ptp_clock->Tsm);
 800380c:	4632      	mov	r2, r6
 800380e:	f504 715a 	add.w	r1, r4, #872	@ 0x368
 8003812:	4638      	mov	r0, r7
 8003814:	f7fe f8b2 	bl	800197c <ptpd_add_time>
  ptpd_div2_time(&ptp_clock->currentDS.meanPathDelay);
 8003818:	4638      	mov	r0, r7
 800381a:	f7fe f90f 	bl	8001a3c <ptpd_div2_time>
  if (ptp_clock->currentDS.meanPathDelay.seconds != 0)
 800381e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e1      	bne.n	80037ea <ptpd_servo_update_delay+0xa>
    ptpd_servo_filter(&ptp_clock->currentDS.meanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8003826:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 800382a:	f104 00a4 	add.w	r0, r4, #164	@ 0xa4
}
 800382e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ptpd_servo_filter(&ptp_clock->currentDS.meanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8003832:	f7ff bef5 	b.w	8003620 <ptpd_servo_filter>
 8003836:	bf00      	nop

08003838 <ptpd_servo_update_peer_delay>:

void ptpd_servo_update_peer_delay(PtpClock *ptp_clock, const TimeInternal *correction_field, bool two_step)
{
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (two_step)
  {
    // Two-step clock.
    TimeInternal tab, tba;
    ptpd_sub_time(&tab, &ptp_clock->pdelay_t2 , &ptp_clock->pdelay_t1);
 800383a:	f500 735e 	add.w	r3, r0, #888	@ 0x378
{
 800383e:	b085      	sub	sp, #20
 8003840:	4604      	mov	r4, r0
 8003842:	460e      	mov	r6, r1
    ptpd_sub_time(&tba, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t3);
    ptpd_add_time(&ptp_clock->portDS.peerMeanPathDelay, &tab, &tba);
 8003844:	f100 054c 	add.w	r5, r0, #76	@ 0x4c
    ptpd_sub_time(&tba, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t3);
 8003848:	f500 7764 	add.w	r7, r0, #912	@ 0x390
  if (two_step)
 800384c:	b1e2      	cbz	r2, 8003888 <ptpd_servo_update_peer_delay+0x50>
    ptpd_sub_time(&tab, &ptp_clock->pdelay_t2 , &ptp_clock->pdelay_t1);
 800384e:	461a      	mov	r2, r3
 8003850:	f500 7160 	add.w	r1, r0, #896	@ 0x380
 8003854:	4668      	mov	r0, sp
 8003856:	f7fe f8c1 	bl	80019dc <ptpd_sub_time>
    ptpd_sub_time(&tba, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t3);
 800385a:	4639      	mov	r1, r7
 800385c:	f504 7262 	add.w	r2, r4, #904	@ 0x388
 8003860:	a802      	add	r0, sp, #8
 8003862:	f7fe f8bb 	bl	80019dc <ptpd_sub_time>
    ptpd_add_time(&ptp_clock->portDS.peerMeanPathDelay, &tab, &tba);
 8003866:	aa02      	add	r2, sp, #8
 8003868:	4669      	mov	r1, sp
 800386a:	4628      	mov	r0, r5
 800386c:	f7fe f886 	bl	800197c <ptpd_add_time>
  {
    // One-step clock.
    ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t1);
  }

  ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->portDS.peerMeanPathDelay, correction_field);
 8003870:	4632      	mov	r2, r6
 8003872:	4629      	mov	r1, r5
 8003874:	4628      	mov	r0, r5
 8003876:	f7fe f8b1 	bl	80019dc <ptpd_sub_time>
  ptpd_div2_time(&ptp_clock->portDS.peerMeanPathDelay);
 800387a:	4628      	mov	r0, r5
 800387c:	f7fe f8de 	bl	8001a3c <ptpd_div2_time>

  // Filter delay.
  if (ptp_clock->portDS.peerMeanPathDelay.seconds != 0)
 8003880:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003882:	b13b      	cbz	r3, 8003894 <ptpd_servo_update_peer_delay+0x5c>
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->portDS.peerMeanPathDelay.nanoseconds, &ptp_clock->owd_filt);
  }
}
 8003884:	b005      	add	sp, #20
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t1);
 8003888:	461a      	mov	r2, r3
 800388a:	4639      	mov	r1, r7
 800388c:	4628      	mov	r0, r5
 800388e:	f7fe f8a5 	bl	80019dc <ptpd_sub_time>
 8003892:	e7ed      	b.n	8003870 <ptpd_servo_update_peer_delay+0x38>
    ptpd_servo_filter(&ptp_clock->portDS.peerMeanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8003894:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 8003898:	f104 0050 	add.w	r0, r4, #80	@ 0x50
}
 800389c:	b005      	add	sp, #20
 800389e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ptpd_servo_filter(&ptp_clock->portDS.peerMeanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 80038a2:	f7ff bebd 	b.w	8003620 <ptpd_servo_filter>
 80038a6:	bf00      	nop

080038a8 <ptpd_servo_update_clock>:

  DBGV("PTPD: ptpd_servo_update_clock offset %li sec %li nsec\n",
       ptp_clock->currentDS.offsetFromMaster.seconds,
       abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds));

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0 || abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 80038a8:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
{
 80038ac:	b530      	push	{r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	b085      	sub	sp, #20
  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0 || abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 80038b2:	b941      	cbnz	r1, 80038c6 <ptpd_servo_update_clock+0x1e>
 80038b4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80038b8:	4b3a      	ldr	r3, [pc, #232]	@ (80039a4 <ptpd_servo_update_clock+0xfc>)
 80038ba:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 80038be:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 80038c2:	4298      	cmp	r0, r3
 80038c4:	dd2b      	ble.n	800391e <ptpd_servo_update_clock+0x76>
  {
    // If secs, reset clock or set freq adjustment to max.
    if (!ptp_clock->servo.noAdjust)
 80038c6:	f894 3465 	ldrb.w	r3, [r4, #1125]	@ 0x465
 80038ca:	b183      	cbz	r3, 80038ee <ptpd_servo_update_clock+0x46>

    default:
      DBG("PTPD: ptpd_servo_update_clock: one-way delay not computed\n");
  }

  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 80038cc:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 80038d0:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 80038d4:	f894 004a 	ldrb.w	r0, [r4, #74]	@ 0x4a
  switch (state)
 80038d8:	2808      	cmp	r0, #8
 80038da:	d81e      	bhi.n	800391a <ptpd_servo_update_clock+0x72>
 80038dc:	4c32      	ldr	r4, [pc, #200]	@ (80039a8 <ptpd_servo_update_clock+0x100>)
 80038de:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 80038e2:	9400      	str	r4, [sp, #0]
 80038e4:	4831      	ldr	r0, [pc, #196]	@ (80039ac <ptpd_servo_update_clock+0x104>)
 80038e6:	f012 fde9 	bl	80164bc <iprintf>
      ptp_clock->currentDS.offsetFromMaster.seconds,
      ptp_clock->currentDS.offsetFromMaster.nanoseconds,
      ptp_clock->observedDrift,
      state_string(ptp_clock->portDS.portState));
}
 80038ea:	b005      	add	sp, #20
 80038ec:	bd30      	pop	{r4, r5, pc}
      if (!ptp_clock->servo.noResetClock)
 80038ee:	f894 3464 	ldrb.w	r3, [r4, #1124]	@ 0x464
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <ptpd_servo_update_clock+0xd0>
        adj = ptp_clock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 80038f6:	4a2e      	ldr	r2, [pc, #184]	@ (80039b0 <ptpd_servo_update_clock+0x108>)
 80038f8:	4b2e      	ldr	r3, [pc, #184]	@ (80039b4 <ptpd_servo_update_clock+0x10c>)
 80038fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
        ptpd_adj_freq(-adj);
 80038fe:	2800      	cmp	r0, #0
 8003900:	bfd4      	ite	le
 8003902:	4610      	movle	r0, r2
 8003904:	4618      	movgt	r0, r3
 8003906:	f000 f877 	bl	80039f8 <ptpd_adj_freq>
  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 800390a:	f894 004a 	ldrb.w	r0, [r4, #74]	@ 0x4a
 800390e:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
  switch (state)
 8003912:	2808      	cmp	r0, #8
  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 8003914:	e9d4 1226 	ldrd	r1, r2, [r4, #152]	@ 0x98
 8003918:	d9e0      	bls.n	80038dc <ptpd_servo_update_clock+0x34>
 800391a:	4c27      	ldr	r4, [pc, #156]	@ (80039b8 <ptpd_servo_update_clock+0x110>)
 800391c:	e7e1      	b.n	80038e2 <ptpd_servo_update_clock+0x3a>
    if (ptp_clock->portDS.logSyncInterval > 0)
 800391e:	f994 3056 	ldrsb.w	r3, [r4, #86]	@ 0x56
 8003922:	2b00      	cmp	r3, #0
 8003924:	dd20      	ble.n	8003968 <ptpd_servo_update_clock+0xc0>
      offsetNorm >>= ptp_clock->portDS.logSyncInterval;
 8003926:	fa42 f003 	asr.w	r0, r2, r3
    ptp_clock->observedDrift += offsetNorm / ptp_clock->servo.ai;
 800392a:	f9b4 3468 	ldrsh.w	r3, [r4, #1128]	@ 0x468
 800392e:	f8d4 5404 	ldr.w	r5, [r4, #1028]	@ 0x404
 8003932:	fb90 f3f3 	sdiv	r3, r0, r3
 8003936:	442b      	add	r3, r5
    if (ptp_clock->observedDrift > ADJ_FREQ_MAX)
 8003938:	4d1d      	ldr	r5, [pc, #116]	@ (80039b0 <ptpd_servo_update_clock+0x108>)
 800393a:	42ab      	cmp	r3, r5
 800393c:	dc1a      	bgt.n	8003974 <ptpd_servo_update_clock+0xcc>
    else if (ptp_clock->observedDrift < -ADJ_FREQ_MAX)
 800393e:	4d1f      	ldr	r5, [pc, #124]	@ (80039bc <ptpd_servo_update_clock+0x114>)
 8003940:	42ab      	cmp	r3, r5
 8003942:	dd16      	ble.n	8003972 <ptpd_servo_update_clock+0xca>
 8003944:	461d      	mov	r5, r3
      ptp_clock->observedDrift = ADJ_FREQ_MAX;
 8003946:	f8c4 5404 	str.w	r5, [r4, #1028]	@ 0x404
    if (!ptp_clock->servo.noAdjust)
 800394a:	f894 5465 	ldrb.w	r5, [r4, #1125]	@ 0x465
 800394e:	2d00      	cmp	r5, #0
 8003950:	d1c0      	bne.n	80038d4 <ptpd_servo_update_clock+0x2c>
      adj = offsetNorm / ptp_clock->servo.ap + ptp_clock->observedDrift;
 8003952:	f9b4 2466 	ldrsh.w	r2, [r4, #1126]	@ 0x466
 8003956:	fb90 f0f2 	sdiv	r0, r0, r2
 800395a:	4418      	add	r0, r3
      ptpd_adj_freq(-adj);
 800395c:	4240      	negs	r0, r0
 800395e:	f000 f84b 	bl	80039f8 <ptpd_adj_freq>
  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 8003962:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8003966:	e7b1      	b.n	80038cc <ptpd_servo_update_clock+0x24>
    else if (ptp_clock->portDS.logSyncInterval < 0)
 8003968:	d01a      	beq.n	80039a0 <ptpd_servo_update_clock+0xf8>
      offsetNorm <<= -ptp_clock->portDS.logSyncInterval;
 800396a:	425b      	negs	r3, r3
 800396c:	fa02 f003 	lsl.w	r0, r2, r3
 8003970:	e7db      	b.n	800392a <ptpd_servo_update_clock+0x82>
 8003972:	4d10      	ldr	r5, [pc, #64]	@ (80039b4 <ptpd_servo_update_clock+0x10c>)
 8003974:	462b      	mov	r3, r5
 8003976:	e7e6      	b.n	8003946 <ptpd_servo_update_clock+0x9e>
        ptpd_get_time(&timeTmp);
 8003978:	a802      	add	r0, sp, #8
 800397a:	f000 f823 	bl	80039c4 <ptpd_get_time>
        ptpd_sub_time(&timeTmp, &timeTmp, &ptp_clock->currentDS.offsetFromMaster);
 800397e:	a902      	add	r1, sp, #8
 8003980:	f104 0298 	add.w	r2, r4, #152	@ 0x98
 8003984:	4608      	mov	r0, r1
 8003986:	f7fe f829 	bl	80019dc <ptpd_sub_time>
        ptpd_set_time(&timeTmp);
 800398a:	a802      	add	r0, sp, #8
 800398c:	f000 f826 	bl	80039dc <ptpd_set_time>
        ptpd_servo_init_clock(ptp_clock);
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff fe99 	bl	80036c8 <ptpd_servo_init_clock>
  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 8003996:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 800399a:	e9d4 1226 	ldrd	r1, r2, [r4, #152]	@ 0x98
 800399e:	e799      	b.n	80038d4 <ptpd_servo_update_clock+0x2c>
    offsetNorm = ptp_clock->currentDS.offsetFromMaster.nanoseconds;
 80039a0:	4610      	mov	r0, r2
 80039a2:	e7c2      	b.n	800392a <ptpd_servo_update_clock+0x82>
 80039a4:	05f5e100 	.word	0x05f5e100
 80039a8:	0801918c 	.word	0x0801918c
 80039ac:	080190b8 	.word	0x080190b8
 80039b0:	004e2000 	.word	0x004e2000
 80039b4:	ffb1e000 	.word	0xffb1e000
 80039b8:	080190b0 	.word	0x080190b0
 80039bc:	ffb1dfff 	.word	0xffb1dfff

080039c0 <ptpd_get_rand>:
#include "ethernetif.h"

uint32_t ptpd_get_rand(uint32_t rand_max)
{
  return rand_max;
}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <ptpd_get_time>:

void ptpd_get_time(TimeInternal *time)
{
 80039c4:	b510      	push	{r4, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	4604      	mov	r4, r0
  PtpTime_t ts;

  ethernetif_GetTime(&ts);
 80039ca:	4668      	mov	r0, sp
 80039cc:	f7fd f92a 	bl	8000c24 <ethernetif_GetTime>

  time->seconds = ts.tv_sec;
 80039d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80039d4:	e9c4 3200 	strd	r3, r2, [r4]
  time->nanoseconds = ts.tv_nsec;
}
 80039d8:	b002      	add	sp, #8
 80039da:	bd10      	pop	{r4, pc}

080039dc <ptpd_set_time>:

void ptpd_set_time(const TimeInternal *time)
{
 80039dc:	b500      	push	{lr}
 80039de:	4603      	mov	r3, r0
 80039e0:	b083      	sub	sp, #12
  PtpTime_t ts;

  ts.tv_sec = time->seconds;
 80039e2:	e9d3 3200 	ldrd	r3, r2, [r3]
  ts.tv_nsec = time->nanoseconds;

  ethernetif_SetTime(&ts);
 80039e6:	4668      	mov	r0, sp
  ts.tv_sec = time->seconds;
 80039e8:	e9cd 3200 	strd	r3, r2, [sp]
  ethernetif_SetTime(&ts);
 80039ec:	f7fd f8f8 	bl	8000be0 <ethernetif_SetTime>
}
 80039f0:	b003      	add	sp, #12
 80039f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80039f6:	bf00      	nop

080039f8 <ptpd_adj_freq>:
{
  if (adj > ADJ_FREQ_MAX)
  {
    adj = ADJ_FREQ_MAX;
  }
  else if (adj < -ADJ_FREQ_MAX)
 80039f8:	4a06      	ldr	r2, [pc, #24]	@ (8003a14 <ptpd_adj_freq+0x1c>)
 80039fa:	4290      	cmp	r0, r2
{
 80039fc:	b508      	push	{r3, lr}
  else if (adj < -ADJ_FREQ_MAX)
 80039fe:	bfb8      	it	lt
 8003a00:	4610      	movlt	r0, r2
  {
    adj = -ADJ_FREQ_MAX;
  }

  ethernetif_PtpFxAdjust(adj);
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <ptpd_adj_freq+0x20>)
 8003a04:	4298      	cmp	r0, r3
 8003a06:	bfa8      	it	ge
 8003a08:	4618      	movge	r0, r3
 8003a0a:	f7fd f92d 	bl	8000c68 <ethernetif_PtpFxAdjust>

  return true;
}
 8003a0e:	2001      	movs	r0, #1
 8003a10:	bd08      	pop	{r3, pc}
 8003a12:	bf00      	nop
 8003a14:	ffb1e000 	.word	0xffb1e000
 8003a18:	004e2000 	.word	0x004e2000

08003a1c <ptpd_timer_callback>:
static TimerHandle_t ptpd_timer_id[TIMER_ARRAY_SIZE];
static bool ptpd_timers_expired[TIMER_ARRAY_SIZE];

// Callback for timers.
static void ptpd_timer_callback(TimerHandle_t xTimer)
{
 8003a1c:	b508      	push	{r3, lr}
  int index = (int)pvTimerGetTimerID(xTimer);
 8003a1e:	f005 fa15 	bl	8008e4c <pvTimerGetTimerID>

  // Sanity check the index.
  if (index < TIMER_ARRAY_SIZE)
 8003a22:	2805      	cmp	r0, #5
 8003a24:	dd00      	ble.n	8003a28 <ptpd_timer_callback+0xc>
    ptpd_timers_expired[index] = true;

    // Notify the PTP thread of a pending operation.
    ptpd_alert();
  }
}
 8003a26:	bd08      	pop	{r3, pc}
    ptpd_timers_expired[index] = true;
 8003a28:	4b03      	ldr	r3, [pc, #12]	@ (8003a38 <ptpd_timer_callback+0x1c>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	541a      	strb	r2, [r3, r0]
}
 8003a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ptpd_alert();
 8003a32:	f7fe bb41 	b.w	80020b8 <ptpd_alert>
 8003a36:	bf00      	nop
 8003a38:	20000ae0 	.word	0x20000ae0

08003a3c <ptpd_timer_init>:

// Initialize PTPD timers.
void ptpd_timer_init(void)
{
 8003a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i;

  // Create the various timers used in the system.
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8003a40:	2400      	movs	r4, #0
{
 8003a42:	b083      	sub	sp, #12
 8003a44:	4e0b      	ldr	r6, [pc, #44]	@ (8003a74 <ptpd_timer_init+0x38>)
 8003a46:	4d0c      	ldr	r5, [pc, #48]	@ (8003a78 <ptpd_timer_init+0x3c>)
  {
    // Mark the timer as not expired.
    ptpd_timers_expired[i] = false;
 8003a48:	46a0      	mov	r8, r4
 8003a4a:	f8df 9034 	ldr.w	r9, [pc, #52]	@ 8003a80 <ptpd_timer_init+0x44>

    // Create the timer.
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 8003a4e:	4f0b      	ldr	r7, [pc, #44]	@ (8003a7c <ptpd_timer_init+0x40>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	4623      	mov	r3, r4
 8003a54:	f8cd 9000 	str.w	r9, [sp]
 8003a58:	4638      	mov	r0, r7
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8003a5a:	4414      	add	r4, r2
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 8003a5c:	4611      	mov	r1, r2
    ptpd_timers_expired[i] = false;
 8003a5e:	f806 8b01 	strb.w	r8, [r6], #1
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 8003a62:	f005 f819 	bl	8008a98 <xTimerCreate>
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8003a66:	2c06      	cmp	r4, #6
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 8003a68:	f845 0b04 	str.w	r0, [r5], #4
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8003a6c:	d1f0      	bne.n	8003a50 <ptpd_timer_init+0x14>
  }
}
 8003a6e:	b003      	add	sp, #12
 8003a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a74:	20000ae0 	.word	0x20000ae0
 8003a78:	20000ae8 	.word	0x20000ae8
 8003a7c:	08019090 	.word	0x08019090
 8003a80:	08003a1d 	.word	0x08003a1d

08003a84 <ptpd_timer_start>:

// Start the indexed timer with the given interval.
void ptpd_timer_start(int32_t index, uint32_t interval_ms)
{
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 8003a84:	2805      	cmp	r0, #5
 8003a86:	dc22      	bgt.n	8003ace <ptpd_timer_start+0x4a>
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ptpd_timer_id[index] == 0) return;
 8003a8a:	4e11      	ldr	r6, [pc, #68]	@ (8003ad0 <ptpd_timer_start+0x4c>)
 8003a8c:	4604      	mov	r4, r0
{
 8003a8e:	b083      	sub	sp, #12
  if (ptpd_timer_id[index] == 0) return;
 8003a90:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8003a94:	b1c8      	cbz	r0, 8003aca <ptpd_timer_start+0x46>

  if (interval_ms == 0)
  {
    interval_ms = 1;
  }
  xTimerChangePeriod(ptpd_timer_id[index], interval_ms, 100);
 8003a96:	2901      	cmp	r1, #1
  ptpd_timers_expired[index] = false;
 8003a98:	f04f 0500 	mov.w	r5, #0
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <ptpd_timer_start+0x50>)
  xTimerChangePeriod(ptpd_timer_id[index], interval_ms, 100);
 8003a9e:	f04f 0764 	mov.w	r7, #100	@ 0x64
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	bf38      	it	cc
 8003aa6:	2201      	movcc	r2, #1
  ptpd_timers_expired[index] = false;
 8003aa8:	551d      	strb	r5, [r3, r4]
  xTimerChangePeriod(ptpd_timer_id[index], interval_ms, 100);
 8003aaa:	2104      	movs	r1, #4
 8003aac:	462b      	mov	r3, r5
 8003aae:	9700      	str	r7, [sp, #0]
 8003ab0:	f005 f820 	bl	8008af4 <xTimerGenericCommand>
  xTimerStart(ptpd_timer_id[index], 100);
 8003ab4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8003ab8:	f004 fa06 	bl	8007ec8 <xTaskGetTickCount>
 8003abc:	462b      	mov	r3, r5
 8003abe:	4602      	mov	r2, r0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	9700      	str	r7, [sp, #0]
 8003ac6:	f005 f815 	bl	8008af4 <xTimerGenericCommand>
}
 8003aca:	b003      	add	sp, #12
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ace:	4770      	bx	lr
 8003ad0:	20000ae8 	.word	0x20000ae8
 8003ad4:	20000ae0 	.word	0x20000ae0

08003ad8 <ptpd_timer_stop>:

// Stop the indexed timer.
void ptpd_timer_stop(int32_t index)
{
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 8003ad8:	2805      	cmp	r0, #5
 8003ada:	dd00      	ble.n	8003ade <ptpd_timer_stop+0x6>
 8003adc:	4770      	bx	lr
{
 8003ade:	b530      	push	{r4, r5, lr}

  DBGV("PTPD: stop timer %li\n", index);

  // Stop the timer.
  xTimerStop(ptpd_timer_id[index], 0);
 8003ae0:	4907      	ldr	r1, [pc, #28]	@ (8003b00 <ptpd_timer_stop+0x28>)
{
 8003ae2:	b083      	sub	sp, #12
  xTimerStop(ptpd_timer_id[index], 0);
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003aec:	2103      	movs	r1, #3
 8003aee:	462b      	mov	r3, r5
 8003af0:	462a      	mov	r2, r5
 8003af2:	9500      	str	r5, [sp, #0]
 8003af4:	f004 fffe 	bl	8008af4 <xTimerGenericCommand>

  // Reset the expired flag.
  ptpd_timers_expired[index] = false;
 8003af8:	4b02      	ldr	r3, [pc, #8]	@ (8003b04 <ptpd_timer_stop+0x2c>)
 8003afa:	551d      	strb	r5, [r3, r4]
}
 8003afc:	b003      	add	sp, #12
 8003afe:	bd30      	pop	{r4, r5, pc}
 8003b00:	20000ae8 	.word	0x20000ae8
 8003b04:	20000ae0 	.word	0x20000ae0

08003b08 <ptpd_timer_expired>:
// If the timer has expired, this function will reset the
// expired flag and return true, otherwise it will false.
bool ptpd_timer_expired(int32_t index)
{
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return false;
 8003b08:	2805      	cmp	r0, #5
{
 8003b0a:	4603      	mov	r3, r0
  if (index >= TIMER_ARRAY_SIZE) return false;
 8003b0c:	dc05      	bgt.n	8003b1a <ptpd_timer_expired+0x12>

  // Return false if the timer hasn't expired.
  if (!ptpd_timers_expired[index]) return false;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	@ (8003b20 <ptpd_timer_expired+0x18>)
 8003b10:	5c10      	ldrb	r0, [r2, r0]
 8003b12:	b118      	cbz	r0, 8003b1c <ptpd_timer_expired+0x14>

  // We only return the timer expired once.
  ptpd_timers_expired[index] = false;
 8003b14:	2100      	movs	r1, #0
 8003b16:	54d1      	strb	r1, [r2, r3]

  // Return true since the timer expired.
  return true;
 8003b18:	4770      	bx	lr
  if (index >= TIMER_ARRAY_SIZE) return false;
 8003b1a:	2000      	movs	r0, #0
}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000ae0 	.word	0x20000ae0

08003b24 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b24:	b188      	cbz	r0, 8003b4a <LAN8742_RegisterBusIO+0x26>
 8003b26:	68ca      	ldr	r2, [r1, #12]
 8003b28:	b17a      	cbz	r2, 8003b4a <LAN8742_RegisterBusIO+0x26>
{
 8003b2a:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b2c:	688c      	ldr	r4, [r1, #8]
 8003b2e:	b17c      	cbz	r4, 8003b50 <LAN8742_RegisterBusIO+0x2c>
 8003b30:	690d      	ldr	r5, [r1, #16]
 8003b32:	b16d      	cbz	r5, 8003b50 <LAN8742_RegisterBusIO+0x2c>
 8003b34:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 8003b36:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b3a:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 8003b3c:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;

  return LAN8742_STATUS_OK;
 8003b3e:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8003b40:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b42:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8003b46:	bc30      	pop	{r4, r5}
 8003b48:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b4e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	e7f7      	b.n	8003b46 <LAN8742_RegisterBusIO+0x22>
 8003b56:	bf00      	nop

08003b58 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b58:	b570      	push	{r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8003b5a:	2300      	movs	r3, #0
 {
 8003b5c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 8003b5e:	6844      	ldr	r4, [r0, #4]
   uint32_t regvalue = 0, addr = 0;
 8003b60:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8003b62:	b11c      	cbz	r4, 8003b6c <LAN8742_Init+0x14>
   int32_t status = LAN8742_STATUS_OK;
 8003b64:	2600      	movs	r6, #0
       pObj->Is_Initialized = 1;
     }
   }

   return status;
 }
 8003b66:	4630      	mov	r0, r6
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
     if(pObj->IO.Init != 0)
 8003b6c:	6883      	ldr	r3, [r0, #8]
 8003b6e:	4605      	mov	r5, r0
 8003b70:	b103      	cbz	r3, 8003b74 <LAN8742_Init+0x1c>
       pObj->IO.Init();
 8003b72:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b74:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8003b76:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b78:	602b      	str	r3, [r5, #0]
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b7a:	e007      	b.n	8003b8c <LAN8742_Init+0x34>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b7c:	9b01      	ldr	r3, [sp, #4]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	d015      	beq.n	8003bb2 <LAN8742_Init+0x5a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b86:	3401      	adds	r4, #1
 8003b88:	2c20      	cmp	r4, #32
 8003b8a:	d00b      	beq.n	8003ba4 <LAN8742_Init+0x4c>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	696b      	ldr	r3, [r5, #20]
 8003b90:	aa01      	add	r2, sp, #4
 8003b92:	2112      	movs	r1, #18
 8003b94:	4798      	blx	r3
 8003b96:	2800      	cmp	r0, #0
 8003b98:	daf0      	bge.n	8003b7c <LAN8742_Init+0x24>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b9a:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8003b9c:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003ba0:	2c20      	cmp	r4, #32
 8003ba2:	d1f3      	bne.n	8003b8c <LAN8742_Init+0x34>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	2b1f      	cmp	r3, #31
 8003ba8:	d807      	bhi.n	8003bba <LAN8742_Init+0x62>
     if(status == LAN8742_STATUS_OK)
 8003baa:	b11e      	cbz	r6, 8003bb4 <LAN8742_Init+0x5c>
 }
 8003bac:	4630      	mov	r0, r6
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8003bb2:	602c      	str	r4, [r5, #0]
       pObj->Is_Initialized = 1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	606b      	str	r3, [r5, #4]
 8003bb8:	e7d4      	b.n	8003b64 <LAN8742_Init+0xc>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003bba:	f06f 0602 	mvn.w	r6, #2
   return status;
 8003bbe:	e7d2      	b.n	8003b66 <LAN8742_Init+0xe>

08003bc0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003bc0:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8003bc2:	2500      	movs	r5, #0
{
 8003bc4:	b083      	sub	sp, #12

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003bc6:	6943      	ldr	r3, [r0, #20]
{
 8003bc8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003bca:	aa01      	add	r2, sp, #4
 8003bcc:	2101      	movs	r1, #1
 8003bce:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8003bd0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003bd2:	4798      	blx	r3
 8003bd4:	42a8      	cmp	r0, r5
 8003bd6:	db3d      	blt.n	8003c54 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003bd8:	6963      	ldr	r3, [r4, #20]
 8003bda:	aa01      	add	r2, sp, #4
 8003bdc:	2101      	movs	r1, #1
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	4798      	blx	r3
 8003be2:	2800      	cmp	r0, #0
 8003be4:	db36      	blt.n	8003c54 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	075b      	lsls	r3, r3, #29
 8003bea:	d52a      	bpl.n	8003c42 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003bec:	6963      	ldr	r3, [r4, #20]
 8003bee:	aa01      	add	r2, sp, #4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	4798      	blx	r3
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	db2c      	blt.n	8003c54 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	04dd      	lsls	r5, r3, #19
 8003bfe:	d514      	bpl.n	8003c2a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003c00:	6963      	ldr	r3, [r4, #20]
 8003c02:	aa01      	add	r2, sp, #4
 8003c04:	211f      	movs	r1, #31
 8003c06:	6820      	ldr	r0, [r4, #0]
 8003c08:	4798      	blx	r3
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	db22      	blt.n	8003c54 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	04da      	lsls	r2, r3, #19
 8003c12:	d51d      	bpl.n	8003c50 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003c14:	f003 031c 	and.w	r3, r3, #28
 8003c18:	2b18      	cmp	r3, #24
 8003c1a:	d017      	beq.n	8003c4c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d013      	beq.n	8003c48 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003c20:	2b14      	cmp	r3, #20
 8003c22:	d10b      	bne.n	8003c3c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003c24:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8003c26:	b003      	add	sp, #12
 8003c28:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003c2a:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 8003c2e:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 8003c32:	d00b      	beq.n	8003c4c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003c34:	0498      	lsls	r0, r3, #18
 8003c36:	d407      	bmi.n	8003c48 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003c38:	05d9      	lsls	r1, r3, #23
 8003c3a:	d4f3      	bmi.n	8003c24 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003c3c:	2005      	movs	r0, #5
}
 8003c3e:	b003      	add	sp, #12
 8003c40:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;
 8003c42:	2001      	movs	r0, #1
}
 8003c44:	b003      	add	sp, #12
 8003c46:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003c48:	2003      	movs	r0, #3
 8003c4a:	e7f8      	b.n	8003c3e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	e7f6      	b.n	8003c3e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003c50:	2006      	movs	r0, #6
 8003c52:	e7f4      	b.n	8003c3e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8003c54:	f06f 0004 	mvn.w	r0, #4
 8003c58:	e7f1      	b.n	8003c3e <LAN8742_GetLinkState+0x7e>
 8003c5a:	bf00      	nop

08003c5c <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003c5c:	2802      	cmp	r0, #2
 8003c5e:	d841      	bhi.n	8003ce4 <BSP_LED_Init+0x88>
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
    {
      LED1_GPIO_CLK_ENABLE();
 8003c60:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <BSP_LED_Init+0x90>)
 8003c62:	4603      	mov	r3, r0
{
 8003c64:	b570      	push	{r4, r5, r6, lr}
      LED1_GPIO_CLK_ENABLE();
 8003c66:	f8d2 10e0 	ldr.w	r1, [r2, #224]	@ 0xe0
{
 8003c6a:	b088      	sub	sp, #32
    if(Led == LED1)
 8003c6c:	b320      	cbz	r0, 8003cb8 <BSP_LED_Init+0x5c>
    }
    else if(Led == LED2)
 8003c6e:	2801      	cmp	r0, #1
 8003c70:	d02d      	beq.n	8003cce <BSP_LED_Init+0x72>
    {
      LED2_GPIO_CLK_ENABLE();
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8003c72:	f041 0102 	orr.w	r1, r1, #2
 8003c76:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 8003c7a:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8003c7e:	f002 0202 	and.w	r2, r2, #2
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	9a02      	ldr	r2, [sp, #8]
    gpio_init_structure.Pin   = LED_PIN[Led];
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c86:	481a      	ldr	r0, [pc, #104]	@ (8003cf0 <BSP_LED_Init+0x94>)
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003c88:	2400      	movs	r4, #0
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003c8a:	491a      	ldr	r1, [pc, #104]	@ (8003cf4 <BSP_LED_Init+0x98>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003c8c:	2201      	movs	r2, #1
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c8e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003c92:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c98:	a903      	add	r1, sp, #12
 8003c9a:	4628      	mov	r0, r5
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003c9c:	e9cd 6203 	strd	r6, r2, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca0:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003ca4:	f001 f9e0 	bl	8005068 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003ca8:	4628      	mov	r0, r5
 8003caa:	4622      	mov	r2, r4
 8003cac:	4631      	mov	r1, r6
 8003cae:	f001 fb0f 	bl	80052d0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8003cb2:	4620      	mov	r0, r4
  }

  return ret;
}
 8003cb4:	b008      	add	sp, #32
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
      LED1_GPIO_CLK_ENABLE();
 8003cb8:	f041 0102 	orr.w	r1, r1, #2
 8003cbc:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 8003cc0:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8003cc4:	f002 0202 	and.w	r2, r2, #2
 8003cc8:	9200      	str	r2, [sp, #0]
 8003cca:	9a00      	ldr	r2, [sp, #0]
 8003ccc:	e7db      	b.n	8003c86 <BSP_LED_Init+0x2a>
      LED2_GPIO_CLK_ENABLE();
 8003cce:	f041 0110 	orr.w	r1, r1, #16
 8003cd2:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 8003cd6:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8003cda:	f002 0210 	and.w	r2, r2, #16
 8003cde:	9201      	str	r2, [sp, #4]
 8003ce0:	9a01      	ldr	r2, [sp, #4]
 8003ce2:	e7d0      	b.n	8003c86 <BSP_LED_Init+0x2a>
    ret = BSP_ERROR_WRONG_PARAM;
 8003ce4:	f06f 0001 	mvn.w	r0, #1
}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	080191b8 	.word	0x080191b8
 8003cf4:	080191b0 	.word	0x080191b0

08003cf8 <BSP_LED_On>:
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d80b      	bhi.n	8003d14 <BSP_LED_On+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003cfc:	4907      	ldr	r1, [pc, #28]	@ (8003d1c <BSP_LED_On+0x24>)
 8003cfe:	2201      	movs	r2, #1
{
 8003d00:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <BSP_LED_On+0x28>)
 8003d04:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8003d08:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d0c:	f001 fae0 	bl	80052d0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8003d10:	2000      	movs	r0, #0
  }

  return ret;
}
 8003d12:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003d14:	f06f 0001 	mvn.w	r0, #1
}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	080191b0 	.word	0x080191b0
 8003d20:	080191b8 	.word	0x080191b8

08003d24 <BSP_LED_Off>:
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003d24:	2802      	cmp	r0, #2
 8003d26:	d80b      	bhi.n	8003d40 <BSP_LED_Off+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003d28:	4907      	ldr	r1, [pc, #28]	@ (8003d48 <BSP_LED_Off+0x24>)
 8003d2a:	2200      	movs	r2, #0
{
 8003d2c:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	@ (8003d4c <BSP_LED_Off+0x28>)
 8003d30:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8003d34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d38:	f001 faca 	bl	80052d0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8003d3c:	2000      	movs	r0, #0
  }

  return ret;
}
 8003d3e:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003d40:	f06f 0001 	mvn.w	r0, #1
}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	080191b0 	.word	0x080191b0
 8003d4c:	080191b8 	.word	0x080191b8

08003d50 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d50:	4916      	ldr	r1, [pc, #88]	@ (8003dac <SystemInit+0x5c>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d52:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <SystemInit+0x60>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d56:	4817      	ldr	r0, [pc, #92]	@ (8003db4 <SystemInit+0x64>)
{
 8003d58:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d5a:	f8d1 4088 	ldr.w	r4, [r1, #136]	@ 0x88
 8003d5e:	f444 0470 	orr.w	r4, r4, #15728640	@ 0xf00000
 8003d62:	f8c1 4088 	str.w	r4, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_HSION;
 8003d66:	681c      	ldr	r4, [r3, #0]
 8003d68:	f044 0401 	orr.w	r4, r4, #1
 8003d6c:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d6e:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003d70:	681c      	ldr	r4, [r3, #0]
 8003d72:	4020      	ands	r0, r4
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d74:	4c10      	ldr	r4, [pc, #64]	@ (8003db8 <SystemInit+0x68>)
  RCC->CR &= 0xEAF6ED7FU;
 8003d76:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8003d78:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003d7a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003d7c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8003d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x00000000;
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003d84:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x00000000;
 8003d86:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003d88:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8003d94:	6018      	str	r0, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d96:	f243 00d2 	movw	r0, #12498	@ 0x30d2
  RCC->CIER = 0x00000000;
 8003d9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8003d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003da0:	6020      	str	r0, [r4, #0]
#endif  


}
 8003da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8003da6:	608b      	str	r3, [r1, #8]
}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00
 8003db0:	58024400 	.word	0x58024400
 8003db4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003db8:	52004000 	.word	0x52004000

08003dbc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop

08003dc0 <HAL_Init>:
{
 8003dc0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dc4:	4c12      	ldr	r4, [pc, #72]	@ (8003e10 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc6:	f000 f84f 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dca:	f001 fdc1 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 8003dce:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_Init+0x54>)
 8003dd0:	4911      	ldr	r1, [pc, #68]	@ (8003e18 <HAL_Init+0x58>)
 8003dd2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dd6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dda:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dde:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003de0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003de6:	490d      	ldr	r1, [pc, #52]	@ (8003e1c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003de8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dec:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dee:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003df2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003df6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df8:	f7fd fcca 	bl	8001790 <HAL_InitTick>
 8003dfc:	b110      	cbz	r0, 8003e04 <HAL_Init+0x44>
    return HAL_ERROR;
 8003dfe:	2401      	movs	r4, #1
}
 8003e00:	4620      	mov	r0, r4
 8003e02:	bd10      	pop	{r4, pc}
 8003e04:	4604      	mov	r4, r0
  HAL_MspInit();
 8003e06:	f7ff ffd9 	bl	8003dbc <HAL_MspInit>
}
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000014 	.word	0x20000014
 8003e14:	58024400 	.word	0x58024400
 8003e18:	080191c4 	.word	0x080191c4
 8003e1c:	20000018 	.word	0x20000018

08003e20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003e20:	4a03      	ldr	r2, [pc, #12]	@ (8003e30 <HAL_IncTick+0x10>)
 8003e22:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <HAL_IncTick+0x14>)
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	440b      	add	r3, r1
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000b00 	.word	0x20000b00
 8003e34:	2000001c 	.word	0x2000001c

08003e38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003e38:	4b01      	ldr	r3, [pc, #4]	@ (8003e40 <HAL_GetTick+0x8>)
 8003e3a:	6818      	ldr	r0, [r3, #0]
}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000b00 	.word	0x20000b00

08003e44 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003e44:	4a03      	ldr	r2, [pc, #12]	@ (8003e54 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8003e46:	6853      	ldr	r3, [r2, #4]
 8003e48:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8003e4c:	4303      	orrs	r3, r0
 8003e4e:	6053      	str	r3, [r2, #4]
}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58000400 	.word	0x58000400

08003e58 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003e58:	4a02      	ldr	r2, [pc, #8]	@ (8003e64 <HAL_EnableCompensationCell+0xc>)
 8003e5a:	6a13      	ldr	r3, [r2, #32]
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6213      	str	r3, [r2, #32]
}
 8003e62:	4770      	bx	lr
 8003e64:	58000400 	.word	0x58000400

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e68:	4906      	ldr	r1, [pc, #24]	@ (8003e84 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e6e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e72:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e74:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e78:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e7c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003e7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003e80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	05fa0000 	.word	0x05fa0000

08003e8c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_NVIC_SetPriority+0x6c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e96:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9e:	f1be 0f04 	cmp.w	lr, #4
 8003ea2:	bf28      	it	cs
 8003ea4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea8:	f1bc 0f06 	cmp.w	ip, #6
 8003eac:	d91a      	bls.n	8003ee4 <HAL_NVIC_SetPriority+0x58>
 8003eae:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	fa03 f30c 	lsl.w	r3, r3, ip
 8003eba:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003ec2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	fa03 f30e 	lsl.w	r3, r3, lr
 8003ec8:	ea21 0303 	bic.w	r3, r1, r3
 8003ecc:	fa03 f30c 	lsl.w	r3, r3, ip
 8003ed0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ed8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003eda:	db06      	blt.n	8003eea <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003edc:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <HAL_NVIC_SetPriority+0x70>)
 8003ede:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	4694      	mov	ip, r2
 8003ee8:	e7e9      	b.n	8003ebe <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	f000 000f 	and.w	r0, r0, #15
 8003eee:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <HAL_NVIC_SetPriority+0x74>)
 8003ef0:	5413      	strb	r3, [r2, r0]
 8003ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ef6:	bf00      	nop
 8003ef8:	e000ed00 	.word	0xe000ed00
 8003efc:	e000e400 	.word	0xe000e400
 8003f00:	e000ed14 	.word	0xe000ed14

08003f04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f04:	2800      	cmp	r0, #0
 8003f06:	db07      	blt.n	8003f18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f000 011f 	and.w	r1, r0, #31
 8003f0e:	4a03      	ldr	r2, [pc, #12]	@ (8003f1c <HAL_NVIC_EnableIRQ+0x18>)
 8003f10:	0940      	lsrs	r0, r0, #5
 8003f12:	408b      	lsls	r3, r1
 8003f14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f20:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f24:	4b04      	ldr	r3, [pc, #16]	@ (8003f38 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f26:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8003f30:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_MPU_Enable+0x1c>)
 8003f3e:	f040 0001 	orr.w	r0, r0, #1
 8003f42:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f48:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f52:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_MPU_ConfigRegion+0x5c>)
 8003f5e:	7843      	ldrb	r3, [r0, #1]
 8003f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003f64:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003f70:	6843      	ldr	r3, [r0, #4]
 8003f72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f76:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f78:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f7c:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003f7e:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f80:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003f84:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f88:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003f8a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f8c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f90:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f94:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f98:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f9a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f9e:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003fa6:	7a01      	ldrb	r1, [r0, #8]
 8003fa8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003fac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fb0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <HAL_ETH_TxPtpCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxPtpCallback could be implemented in the user file
  */
}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop

08003fc0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003fc0:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fc2:	688b      	ldr	r3, [r1, #8]
 8003fc4:	680d      	ldr	r5, [r1, #0]
 8003fc6:	694c      	ldr	r4, [r1, #20]
 8003fc8:	432b      	orrs	r3, r5
 8003fca:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fcc:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fd0:	4323      	orrs	r3, r4
 8003fd2:	698c      	ldr	r4, [r1, #24]
 8003fd4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fd6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fda:	4323      	orrs	r3, r4
 8003fdc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fde:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003fe2:	4d52      	ldr	r5, [pc, #328]	@ (800412c <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fe4:	4323      	orrs	r3, r4
 8003fe6:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8003fe8:	4323      	orrs	r3, r4
 8003fea:	4c51      	ldr	r4, [pc, #324]	@ (8004130 <ETH_SetMACConfig+0x170>)
 8003fec:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fee:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003ff0:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ff2:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003ff4:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ff8:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003ffa:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ffe:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004000:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004004:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004006:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 800400a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800400c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004010:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004016:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004018:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800401c:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800401e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004022:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004026:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800402a:	7c08      	ldrb	r0, [r1, #16]
 800402c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004030:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004034:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004036:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004038:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800403c:	7f88      	ldrb	r0, [r1, #30]
 800403e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004042:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004046:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004048:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800404c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8004050:	fab0 f080 	clz	r0, r0
 8004054:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004056:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800405a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800405c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800405e:	6853      	ldr	r3, [r2, #4]
 8004060:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004062:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004066:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800406a:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800406e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004070:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004074:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004078:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800407c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004080:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8004084:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004088:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800408c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800408e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004092:	4828      	ldr	r0, [pc, #160]	@ (8004134 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004094:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004096:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8004098:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800409a:	4018      	ands	r0, r3
 800409c:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 800409e:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040a0:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80040a4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80040a8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040aa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80040ac:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 80040ae:	402b      	ands	r3, r5
 80040b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040b4:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040b8:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80040ba:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 80040be:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040c2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80040c6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040c8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80040cc:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040d2:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040d6:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040da:	f020 0003 	bic.w	r0, r0, #3
 80040de:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80040e0:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040e4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80040ec:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 80040f0:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80040f4:	432b      	orrs	r3, r5
 80040f6:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80040fa:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80040fe:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004102:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004106:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800410a:	4323      	orrs	r3, r4
 800410c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004110:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8004114:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004118:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800411c:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800411e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8004122:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004124:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	c0f88000 	.word	0xc0f88000
 8004130:	00048083 	.word	0x00048083
 8004134:	fffffef0 	.word	0xfffffef0

08004138 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004138:	6803      	ldr	r3, [r0, #0]
 800413a:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <ETH_SetDMAConfig+0x7c>)
 800413c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004140:	6808      	ldr	r0, [r1, #0]
{
 8004142:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004144:	681c      	ldr	r4, [r3, #0]
 8004146:	4022      	ands	r2, r4
 8004148:	4302      	orrs	r2, r0
 800414a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800414c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800414e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004150:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004152:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004154:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8004158:	688c      	ldr	r4, [r1, #8]
 800415a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800415c:	4c16      	ldr	r4, [pc, #88]	@ (80041b8 <ETH_SetDMAConfig+0x80>)
 800415e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004160:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004162:	4322      	orrs	r2, r4
 8004164:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004166:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004168:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800416c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004170:	4812      	ldr	r0, [pc, #72]	@ (80041bc <ETH_SetDMAConfig+0x84>)
 8004172:	4020      	ands	r0, r4
 8004174:	4302      	orrs	r2, r0
 8004176:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800417a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800417c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800417e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004180:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8004184:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8004188:	690c      	ldr	r4, [r1, #16]
 800418a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800418c:	4c0c      	ldr	r4, [pc, #48]	@ (80041c0 <ETH_SetDMAConfig+0x88>)
 800418e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004190:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004192:	4322      	orrs	r2, r4
 8004194:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004198:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800419c:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800419e:	4909      	ldr	r1, [pc, #36]	@ (80041c4 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80041a0:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80041a4:	4021      	ands	r1, r4
}
 80041a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80041aa:	430a      	orrs	r2, r1
 80041ac:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	ffff87fd 	.word	0xffff87fd
 80041b8:	ffff2ffe 	.word	0xffff2ffe
 80041bc:	fffec000 	.word	0xfffec000
 80041c0:	ffc0efef 	.word	0xffc0efef
 80041c4:	7fc0ffff 	.word	0x7fc0ffff

080041c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80041cc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 80041ce:	4692      	mov	sl, r2
 80041d0:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80041d2:	688e      	ldr	r6, [r1, #8]
 80041d4:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041d8:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	2a00      	cmp	r2, #0
 80041e0:	f2c0 8141 	blt.w	8004466 <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80041e4:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 80041e8:	2a00      	cmp	r2, #0
 80041ea:	f040 813c 	bne.w	8004466 <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80041ee:	680d      	ldr	r5, [r1, #0]
 80041f0:	f015 0c04 	ands.w	ip, r5, #4
 80041f4:	d02a      	beq.n	800424c <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	4fa9      	ldr	r7, [pc, #676]	@ (80044a0 <ETH_Prepare_Tx_Descriptors+0x2d8>)
 80041fa:	4017      	ands	r7, r2
 80041fc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80041fe:	4317      	orrs	r7, r2
 8004200:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004202:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004204:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004206:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800420a:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800420c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800420e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004212:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004214:	072a      	lsls	r2, r5, #28
 8004216:	d519      	bpl.n	800424c <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	fa1f f882 	uxth.w	r8, r2
 800421e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004220:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8004224:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800422c:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 8004234:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004236:	ea48 0202 	orr.w	r2, r8, r2
 800423a:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800423c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800423e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004242:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004244:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004246:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800424a:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800424c:	f015 0810 	ands.w	r8, r5, #16
 8004250:	d009      	beq.n	8004266 <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	4f93      	ldr	r7, [pc, #588]	@ (80044a4 <ETH_Prepare_Tx_Descriptors+0x2dc>)
 8004256:	4017      	ands	r7, r2
 8004258:	698a      	ldr	r2, [r1, #24]
 800425a:	4317      	orrs	r7, r2
 800425c:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004264:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004266:	f015 0f14 	tst.w	r5, #20
 800426a:	f040 80c1 	bne.w	80043f0 <ETH_Prepare_Tx_Descriptors+0x228>
 800426e:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004270:	4622      	mov	r2, r4
 8004272:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004274:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004276:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 80044a4 <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800427a:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800427c:	689f      	ldr	r7, [r3, #8]
 800427e:	ea07 0909 	and.w	r9, r7, r9
 8004282:	6877      	ldr	r7, [r6, #4]
 8004284:	ea49 0707 	orr.w	r7, r9, r7
 8004288:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 800428a:	68b7      	ldr	r7, [r6, #8]
 800428c:	2f00      	cmp	r7, #0
 800428e:	f000 8132 	beq.w	80044f6 <ETH_Prepare_Tx_Descriptors+0x32e>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004292:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004294:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 80044ac <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004298:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800429a:	689e      	ldr	r6, [r3, #8]
 800429c:	ea06 0909 	and.w	r9, r6, r9
 80042a0:	687e      	ldr	r6, [r7, #4]
 80042a2:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80042a6:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80042a8:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80042aa:	f1b8 0f00 	cmp.w	r8, #0
 80042ae:	f000 80dc 	beq.w	800446a <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80042b2:	6a0d      	ldr	r5, [r1, #32]
 80042b4:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 80042b8:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80042bc:	4e7a      	ldr	r6, [pc, #488]	@ (80044a8 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80042be:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80042c0:	68dd      	ldr	r5, [r3, #12]
 80042c2:	402e      	ands	r6, r5
 80042c4:	69cd      	ldr	r5, [r1, #28]
 80042c6:	432e      	orrs	r6, r5
 80042c8:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80042ca:	68dd      	ldr	r5, [r3, #12]
 80042cc:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 80042d0:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80042d2:	f1bc 0f00 	cmp.w	ip, #0
 80042d6:	d005      	beq.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80042d8:	689e      	ldr	r6, [r3, #8]
 80042da:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80042dc:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 80042e0:	4335      	orrs	r5, r6
 80042e2:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80042e4:	68dd      	ldr	r5, [r3, #12]
 80042e6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80042ea:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80042ec:	68dd      	ldr	r5, [r3, #12]
 80042ee:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 80042f2:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80042f4:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80042f8:	68dd      	ldr	r5, [r3, #12]
 80042fa:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 80042fe:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004300:	680d      	ldr	r5, [r1, #0]
 8004302:	07ad      	lsls	r5, r5, #30
 8004304:	d505      	bpl.n	8004312 <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004306:	68de      	ldr	r6, [r3, #12]
 8004308:	68cd      	ldr	r5, [r1, #12]
 800430a:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 800430e:	4335      	orrs	r5, r6
 8004310:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004312:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8004316:	f1b9 0f00 	cmp.w	r9, #0
 800431a:	f000 8102 	beq.w	8004522 <ETH_Prepare_Tx_Descriptors+0x35a>
 800431e:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004320:	4f60      	ldr	r7, [pc, #384]	@ (80044a4 <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004322:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80044ac <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004326:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004328:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 80044b0 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800432c:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80044a8 <ETH_Prepare_Tx_Descriptors+0x2e0>
 8004330:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 8004334:	e018      	b.n	8004368 <ETH_Prepare_Tx_Descriptors+0x1a0>
 8004336:	ea06 090b 	and.w	r9, r6, fp
 800433a:	69ce      	ldr	r6, [r1, #28]
 800433c:	ea49 0606 	orr.w	r6, r9, r6
 8004340:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004342:	68de      	ldr	r6, [r3, #12]
 8004344:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8004348:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 800434a:	3501      	adds	r5, #1
 800434c:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 8004350:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004352:	68dc      	ldr	r4, [r3, #12]
 8004354:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004358:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800435a:	68dc      	ldr	r4, [r3, #12]
 800435c:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8004360:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8004362:	2e00      	cmp	r6, #0
 8004364:	f000 80a6 	beq.w	80044b4 <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004368:	68dc      	ldr	r4, [r3, #12]
 800436a:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 800436e:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004370:	1c53      	adds	r3, r2, #1
 8004372:	2b03      	cmp	r3, #3
 8004374:	bf94      	ite	ls
 8004376:	461a      	movls	r2, r3
 8004378:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800437a:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 800437e:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004382:	68dc      	ldr	r4, [r3, #12]
 8004384:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8004388:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800438a:	68dc      	ldr	r4, [r3, #12]
 800438c:	2c00      	cmp	r4, #0
 800438e:	db52      	blt.n	8004436 <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004390:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8004394:	2c00      	cmp	r4, #0
 8004396:	d14e      	bne.n	8004436 <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004398:	6834      	ldr	r4, [r6, #0]
 800439a:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800439c:	689c      	ldr	r4, [r3, #8]
 800439e:	ea04 0907 	and.w	r9, r4, r7
 80043a2:	6874      	ldr	r4, [r6, #4]
 80043a4:	ea49 0404 	orr.w	r4, r9, r4
 80043a8:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80043aa:	68b4      	ldr	r4, [r6, #8]
 80043ac:	2c00      	cmp	r4, #0
 80043ae:	d03b      	beq.n	8004428 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80043b0:	6826      	ldr	r6, [r4, #0]
 80043b2:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80043b4:	689e      	ldr	r6, [r3, #8]
 80043b6:	ea06 090c 	and.w	r9, r6, ip
 80043ba:	6866      	ldr	r6, [r4, #4]
 80043bc:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80043c0:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80043c2:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80043c6:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80043c8:	f01a 0f10 	tst.w	sl, #16
 80043cc:	d1b3      	bne.n	8004336 <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80043ce:	ea06 0908 	and.w	r9, r6, r8
 80043d2:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80043d4:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80043d8:	ea49 0606 	orr.w	r6, r9, r6
 80043dc:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80043de:	d0b4      	beq.n	800434a <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80043e0:	68de      	ldr	r6, [r3, #12]
 80043e2:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 80043e6:	694e      	ldr	r6, [r1, #20]
 80043e8:	ea49 0606 	orr.w	r6, r9, r6
 80043ec:	60de      	str	r6, [r3, #12]
 80043ee:	e7ac      	b.n	800434a <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004402:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004404:	1c62      	adds	r2, r4, #1
 8004406:	2a03      	cmp	r2, #3
 8004408:	bf88      	it	hi
 800440a:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800440c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004410:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004412:	68dd      	ldr	r5, [r3, #12]
 8004414:	2d00      	cmp	r5, #0
 8004416:	db7b      	blt.n	8004510 <ETH_Prepare_Tx_Descriptors+0x348>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004418:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800441a:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800441c:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004420:	f005 0c04 	and.w	ip, r5, #4
 8004424:	9701      	str	r7, [sp, #4]
 8004426:	e725      	b.n	8004274 <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004428:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800442a:	4634      	mov	r4, r6
 800442c:	689e      	ldr	r6, [r3, #8]
 800442e:	ea06 060c 	and.w	r6, r6, ip
 8004432:	609e      	str	r6, [r3, #8]
 8004434:	e7c5      	b.n	80043c2 <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 8004436:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004438:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 800443a:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800443c:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8004440:	d011      	beq.n	8004466 <ETH_Prepare_Tx_Descriptors+0x29e>
 8004442:	2100      	movs	r1, #0
 8004444:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004448:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800444a:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800444c:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 800444e:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004450:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004452:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004456:	bf98      	it	ls
 8004458:	462c      	movls	r4, r5
 800445a:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 800445c:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800445e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8004462:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8004464:	d1ee      	bne.n	8004444 <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 8004466:	2002      	movs	r0, #2
 8004468:	e042      	b.n	80044f0 <ETH_Prepare_Tx_Descriptors+0x328>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800446a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80044b0 <ETH_Prepare_Tx_Descriptors+0x2e8>
 800446e:	ea06 0808 	and.w	r8, r6, r8
 8004472:	684e      	ldr	r6, [r1, #4]
 8004474:	ea48 0606 	orr.w	r6, r8, r6
 8004478:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800447a:	07ee      	lsls	r6, r5, #31
 800447c:	d506      	bpl.n	800448c <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800447e:	68de      	ldr	r6, [r3, #12]
 8004480:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 8004484:	694e      	ldr	r6, [r1, #20]
 8004486:	ea48 0606 	orr.w	r6, r8, r6
 800448a:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800448c:	06ae      	lsls	r6, r5, #26
 800448e:	f57f af20 	bpl.w	80042d2 <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004492:	68de      	ldr	r6, [r3, #12]
 8004494:	690d      	ldr	r5, [r1, #16]
 8004496:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 800449a:	4335      	orrs	r5, r6
 800449c:	60dd      	str	r5, [r3, #12]
 800449e:	e718      	b.n	80042d2 <ETH_Prepare_Tx_Descriptors+0x10a>
 80044a0:	ffff0000 	.word	0xffff0000
 80044a4:	ffffc000 	.word	0xffffc000
 80044a8:	fffc0000 	.word	0xfffc0000
 80044ac:	c000ffff 	.word	0xc000ffff
 80044b0:	ffff8000 	.word	0xffff8000
 80044b4:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80044b8:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 80044ba:	f1ba 0f00 	cmp.w	sl, #0
 80044be:	d023      	beq.n	8004508 <ETH_Prepare_Tx_Descriptors+0x340>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80044c0:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80044c4:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80044c6:	68d9      	ldr	r1, [r3, #12]
 80044c8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80044cc:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80044ce:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80044d2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80044d4:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80044d6:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	2301      	movs	r3, #1
 80044de:	f383 8810 	msr	PRIMASK, r3

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80044e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80044e4:	3301      	adds	r3, #1
 80044e6:	442b      	add	r3, r5
 80044e8:	6403      	str	r3, [r0, #64]	@ 0x40
 80044ea:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80044ee:	2000      	movs	r0, #0
}
 80044f0:	b005      	add	sp, #20
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80044f6:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80044f8:	4637      	mov	r7, r6
 80044fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80044fe:	4e0a      	ldr	r6, [pc, #40]	@ (8004528 <ETH_Prepare_Tx_Descriptors+0x360>)
 8004500:	ea09 0606 	and.w	r6, r9, r6
 8004504:	609e      	str	r6, [r3, #8]
 8004506:	e6cf      	b.n	80042a8 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800450c:	6099      	str	r1, [r3, #8]
 800450e:	e7da      	b.n	80044c6 <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004510:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004514:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004518:	68d3      	ldr	r3, [r2, #12]
 800451a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800451e:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8004520:	e7a1      	b.n	8004466 <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 8004522:	464d      	mov	r5, r9
 8004524:	e7c8      	b.n	80044b8 <ETH_Prepare_Tx_Descriptors+0x2f0>
 8004526:	bf00      	nop
 8004528:	c000ffff 	.word	0xc000ffff

0800452c <ETH_UpdateDescriptor>:
{
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 800452e:	2300      	movs	r3, #0
{
 8004530:	b083      	sub	sp, #12
 8004532:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 8004534:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004536:	e9d0 761e 	ldrd	r7, r6, [r0, #120]	@ 0x78
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800453a:	f107 0312 	add.w	r3, r7, #18
 800453e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004542:	b31e      	cbz	r6, 800458c <ETH_UpdateDescriptor+0x60>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b18b      	cbz	r3, 800456c <ETH_UpdateDescriptor+0x40>
      if (heth->RxDescList.ItMode != 0U)
 8004548:	6eab      	ldr	r3, [r5, #104]	@ 0x68
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800454a:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800454e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8004552:	b9cb      	cbnz	r3, 8004588 <ETH_UpdateDescriptor+0x5c>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004554:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004556:	1c7b      	adds	r3, r7, #1
      desccount--;
 8004558:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 800455a:	2b07      	cmp	r3, #7
 800455c:	bf88      	it	hi
 800455e:	1ffb      	subhi	r3, r7, #7
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004560:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8004564:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004566:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 800456a:	e7ea      	b.n	8004542 <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 800456c:	a801      	add	r0, sp, #4
 800456e:	f7fc fe09 	bl	8001184 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8004572:	9b01      	ldr	r3, [sp, #4]
 8004574:	b153      	cbz	r3, 800458c <ETH_UpdateDescriptor+0x60>
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004576:	6023      	str	r3, [r4, #0]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004578:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800457c:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800457e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8004582:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0e5      	beq.n	8004554 <ETH_UpdateDescriptor+0x28>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004588:	60e1      	str	r1, [r4, #12]
 800458a:	e7e4      	b.n	8004556 <ETH_UpdateDescriptor+0x2a>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800458c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800458e:	42b3      	cmp	r3, r6
 8004590:	d009      	beq.n	80045a6 <ETH_UpdateDescriptor+0x7a>
 8004592:	f3bf 8f5f 	dmb	sy
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	2200      	movs	r2, #0
 800459a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 80045a2:	e9c5 761e 	strd	r7, r6, [r5, #120]	@ 0x78
}
 80045a6:	b003      	add	sp, #12
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045aa:	bf00      	nop

080045ac <HAL_ETH_Start_IT>:
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80045ae:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d001      	beq.n	80045ba <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80045b6:	2001      	movs	r0, #1
}
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 80045ba:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 80045bc:	2201      	movs	r2, #1
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80045be:	2308      	movs	r3, #8
 80045c0:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80045c2:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
    heth->RxDescList.ItMode = 1U;
 80045c6:	6682      	str	r2, [r0, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80045c8:	67c3      	str	r3, [r0, #124]	@ 0x7c
    ETH_UpdateDescriptor(heth);
 80045ca:	f7ff ffaf 	bl	800452c <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80045ce:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80045d0:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80045d2:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 80045d6:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 80045da:	f041 0101 	orr.w	r1, r1, #1
 80045de:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80045e2:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80045e6:	f041 0101 	orr.w	r1, r1, #1
 80045ea:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80045ee:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 80045f2:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 80045f6:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80045fa:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 80045fe:	f041 0101 	orr.w	r1, r1, #1
 8004602:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004606:	6811      	ldr	r1, [r2, #0]
 8004608:	f041 0102 	orr.w	r1, r1, #2
 800460c:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800460e:	6811      	ldr	r1, [r2, #0]
 8004610:	f041 0101 	orr.w	r1, r1, #1
 8004614:	6011      	str	r1, [r2, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004616:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
 800461a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800461e:	430a      	orrs	r2, r1
 8004620:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8004624:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
}
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop

0800462c <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800462c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8004630:	2b23      	cmp	r3, #35	@ 0x23
 8004632:	d001      	beq.n	8004638 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
}
 8004636:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004638:	4602      	mov	r2, r0
 800463a:	4684      	mov	ip, r0
{
 800463c:	b410      	push	{r4}
    heth->gState = HAL_ETH_STATE_BUSY;
 800463e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004642:	f852 3b44 	ldr.w	r3, [r2], #68
 8004646:	481b      	ldr	r0, [pc, #108]	@ (80046b4 <HAL_ETH_Stop_IT+0x88>)
 8004648:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
 800464c:	f8d1 4134 	ldr.w	r4, [r1, #308]	@ 0x134
 8004650:	4020      	ands	r0, r4
 8004652:	f8c1 0134 	str.w	r0, [r1, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004656:	f8d1 0104 	ldr.w	r0, [r1, #260]	@ 0x104
 800465a:	f020 0001 	bic.w	r0, r0, #1
 800465e:	f8c1 0104 	str.w	r0, [r1, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004662:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8004666:	f020 0001 	bic.w	r0, r0, #1
 800466a:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800466e:	f10c 0064 	add.w	r0, ip, #100	@ 0x64
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	f021 0101 	bic.w	r1, r1, #1
 8004678:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800467a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800467e:	f041 0101 	orr.w	r1, r1, #1
 8004682:	f8c3 1d00 	str.w	r1, [r3, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	f021 0102 	bic.w	r1, r1, #2
 800468c:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800468e:	f852 1f04 	ldr.w	r1, [r2, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004692:	68cb      	ldr	r3, [r1, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004694:	4282      	cmp	r2, r0
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800469a:	60cb      	str	r3, [r1, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800469c:	d1f7      	bne.n	800468e <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 800469e:	2300      	movs	r3, #0
    heth->gState = HAL_ETH_STATE_READY;
 80046a0:	2210      	movs	r2, #16
}
 80046a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return HAL_OK;
 80046a6:	4618      	mov	r0, r3
    heth->RxDescList.ItMode = 0U;
 80046a8:	f8cc 3068 	str.w	r3, [ip, #104]	@ 0x68
    heth->gState = HAL_ETH_STATE_READY;
 80046ac:	f8cc 209c 	str.w	r2, [ip, #156]	@ 0x9c
}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	ffff2f3e 	.word	0xffff2f3e

080046b8 <HAL_ETH_Transmit_IT>:
{
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80046bc:	b321      	cbz	r1, 8004708 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80046be:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80046c2:	2a23      	cmp	r2, #35	@ 0x23
 80046c4:	d001      	beq.n	80046ca <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
}
 80046c8:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80046ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80046cc:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80046ce:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80046d0:	f7ff fd7a 	bl	80041c8 <ETH_Prepare_Tx_Descriptors>
 80046d4:	b130      	cbz	r0, 80046e4 <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80046d6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80046da:	f043 0302 	orr.w	r3, r3, #2
 80046de:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
      return HAL_ERROR;
 80046e2:	e7f0      	b.n	80046c6 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 80046e4:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80046e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 80046ea:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80046ec:	1c53      	adds	r3, r2, #1
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	bf88      	it	hi
 80046f2:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80046f8:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80046fa:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 80046fe:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8004702:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 8004706:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004708:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
    return HAL_ERROR;
 8004714:	e7d7      	b.n	80046c6 <HAL_ETH_Transmit_IT+0xe>
 8004716:	bf00      	nop

08004718 <HAL_ETH_ReadData>:
{
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	4683      	mov	fp, r0
 800471e:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8004720:	2900      	cmp	r1, #0
 8004722:	f000 808b 	beq.w	800483c <HAL_ETH_ReadData+0x124>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004726:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800472a:	2a23      	cmp	r2, #35	@ 0x23
 800472c:	d178      	bne.n	8004820 <HAL_ETH_ReadData+0x108>
  descidx = heth->RxDescList.RxDescIdx;
 800472e:	6ec6      	ldr	r6, [r0, #108]	@ 0x6c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004730:	f106 0212 	add.w	r2, r6, #18
 8004734:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004738:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 800473a:	68e5      	ldr	r5, [r4, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800473c:	f1c2 0a08 	rsb	sl, r2, #8
    && !rxdataready)
 8004740:	2d00      	cmp	r5, #0
 8004742:	f2c0 8088 	blt.w	8004856 <HAL_ETH_ReadData+0x13e>
 8004746:	f1ba 0f00 	cmp.w	sl, #0
 800474a:	f000 8086 	beq.w	800485a <HAL_ETH_ReadData+0x142>
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 800474e:	f100 0390 	add.w	r3, r0, #144	@ 0x90
  uint8_t expecting_ts = 0;
 8004752:	f04f 0900 	mov.w	r9, #0
      dmarxdesc->BackupAddr0 = 0;
 8004756:	9103      	str	r1, [sp, #12]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	f100 038c 	add.w	r3, r0, #140	@ 0x8c
  uint32_t desccnt = 0U;
 800475e:	464f      	mov	r7, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 8004760:	9302      	str	r3, [sp, #8]
 8004762:	e01a      	b.n	800479a <HAL_ETH_ReadData+0x82>
      if (expecting_ts)
 8004764:	f1b9 0f00 	cmp.w	r9, #0
 8004768:	d05e      	beq.n	8004828 <HAL_ETH_ReadData+0x110>
        heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800476a:	6863      	ldr	r3, [r4, #4]
        rxdataready = 1;
 800476c:	464d      	mov	r5, r9
        heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800476e:	f8cb 3088 	str.w	r3, [fp, #136]	@ 0x88
        heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	f8cb 3084 	str.w	r3, [fp, #132]	@ 0x84
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004778:	1c73      	adds	r3, r6, #1
    desccnt++;
 800477a:	3701      	adds	r7, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 800477c:	2b07      	cmp	r3, #7
 800477e:	bf8c      	ite	hi
 8004780:	3e07      	subhi	r6, #7
 8004782:	461e      	movls	r6, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004784:	f106 0312 	add.w	r3, r6, #18
 8004788:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 800478c:	68e3      	ldr	r3, [r4, #12]
    && !rxdataready)
 800478e:	2b00      	cmp	r3, #0
 8004790:	db3b      	blt.n	800480a <HAL_ETH_ReadData+0xf2>
 8004792:	45ba      	cmp	sl, r7
 8004794:	d939      	bls.n	800480a <HAL_ETH_ReadData+0xf2>
 8004796:	07eb      	lsls	r3, r5, #31
 8004798:	d437      	bmi.n	800480a <HAL_ETH_ReadData+0xf2>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	0058      	lsls	r0, r3, #1
 800479e:	d4e1      	bmi.n	8004764 <HAL_ETH_ReadData+0x4c>
      if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	d402      	bmi.n	80047ac <HAL_ETH_ReadData+0x94>
 80047a6:	f8db 508c 	ldr.w	r5, [fp, #140]	@ 0x8c
 80047aa:	b1fd      	cbz	r5, 80047ec <HAL_ETH_ReadData+0xd4>
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80047ac:	68e3      	ldr	r3, [r4, #12]
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	d502      	bpl.n	80047b8 <HAL_ETH_ReadData+0xa0>
          heth->RxDescList.RxDataLength = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8cb 3074 	str.w	r3, [fp, #116]	@ 0x74
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80047b8:	68e5      	ldr	r5, [r4, #12]
        bufflength = heth->Init.RxBuffLen;
 80047ba:	f8db 8014 	ldr.w	r8, [fp, #20]
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80047be:	f015 5580 	ands.w	r5, r5, #268435456	@ 0x10000000
 80047c2:	d013      	beq.n	80047ec <HAL_ETH_ReadData+0xd4>
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	f3c3 080e 	ubfx	r8, r3, #0, #15
          heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80047ca:	68e3      	ldr	r3, [r4, #12]
 80047cc:	f8cb 3080 	str.w	r3, [fp, #128]	@ 0x80
          if (!READ_BIT(dmarxdesc->DESC1, (1 << 14)))
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            rxdataready = 1;
 80047d6:	2b00      	cmp	r3, #0
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80047d8:	f8db 3074 	ldr.w	r3, [fp, #116]	@ 0x74
            rxdataready = 1;
 80047dc:	bf18      	it	ne
 80047de:	f04f 0901 	movne.w	r9, #1
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80047e2:	eba8 0803 	sub.w	r8, r8, r3
            rxdataready = 1;
 80047e6:	bf14      	ite	ne
 80047e8:	2500      	movne	r5, #0
 80047ea:	2501      	moveq	r5, #1
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 80047ec:	fa1f f388 	uxth.w	r3, r8
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80047f6:	f7fc fcef 	bl	80011d8 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDataLength += bufflength;
 80047fa:	f8db 3074 	ldr.w	r3, [fp, #116]	@ 0x74
 80047fe:	4443      	add	r3, r8
 8004800:	f8cb 3074 	str.w	r3, [fp, #116]	@ 0x74
      dmarxdesc->BackupAddr0 = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	e7b6      	b.n	8004778 <HAL_ETH_ReadData+0x60>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800480a:	f8db 207c 	ldr.w	r2, [fp, #124]	@ 0x7c
 800480e:	9903      	ldr	r1, [sp, #12]
 8004810:	4417      	add	r7, r2
 8004812:	f8cb 707c 	str.w	r7, [fp, #124]	@ 0x7c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004816:	b9c7      	cbnz	r7, 800484a <HAL_ETH_ReadData+0x132>
  if (rxdataready == 1U)
 8004818:	2d01      	cmp	r5, #1
  heth->RxDescList.RxDescIdx = descidx;
 800481a:	f8cb 606c 	str.w	r6, [fp, #108]	@ 0x6c
  if (rxdataready == 1U)
 800481e:	d005      	beq.n	800482c <HAL_ETH_ReadData+0x114>
    return HAL_ERROR;
 8004820:	2001      	movs	r0, #1
}
 8004822:	b005      	add	sp, #20
 8004824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004828:	464d      	mov	r5, r9
 800482a:	e7a5      	b.n	8004778 <HAL_ETH_ReadData+0x60>
    *pAppBuff = heth->RxDescList.pRxStart;
 800482c:	f8db 008c 	ldr.w	r0, [fp, #140]	@ 0x8c
    heth->RxDescList.pRxStart = NULL;
 8004830:	2200      	movs	r2, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8004832:	6008      	str	r0, [r1, #0]
    return HAL_OK;
 8004834:	4610      	mov	r0, r2
    heth->RxDescList.pRxStart = NULL;
 8004836:	f8cb 208c 	str.w	r2, [fp, #140]	@ 0x8c
    return HAL_OK;
 800483a:	e7f2      	b.n	8004822 <HAL_ETH_ReadData+0x10a>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800483c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8004840:	f042 0201 	orr.w	r2, r2, #1
 8004844:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
    return HAL_ERROR;
 8004848:	e7ea      	b.n	8004820 <HAL_ETH_ReadData+0x108>
    ETH_UpdateDescriptor(heth);
 800484a:	4658      	mov	r0, fp
 800484c:	9101      	str	r1, [sp, #4]
 800484e:	f7ff fe6d 	bl	800452c <ETH_UpdateDescriptor>
 8004852:	9901      	ldr	r1, [sp, #4]
 8004854:	e7e0      	b.n	8004818 <HAL_ETH_ReadData+0x100>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004856:	2a00      	cmp	r2, #0
 8004858:	d0e2      	beq.n	8004820 <HAL_ETH_ReadData+0x108>
    ETH_UpdateDescriptor(heth);
 800485a:	f7ff fe67 	bl	800452c <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 800485e:	f8cb 606c 	str.w	r6, [fp, #108]	@ 0x6c
  if (rxdataready == 1U)
 8004862:	e7dd      	b.n	8004820 <HAL_ETH_ReadData+0x108>

08004864 <HAL_ETH_ReleaseTxPacket>:
{
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004868:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800486c:	b34e      	cbz	r6, 80048c2 <HAL_ETH_ReleaseTxPacket+0x5e>
 800486e:	4605      	mov	r5, r0
 8004870:	f100 0994 	add.w	r9, r0, #148	@ 0x94
 8004874:	f04f 38ff 	mov.w	r8, #4294967295
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004878:	2700      	movs	r7, #0
    numOfBuf--;
 800487a:	eb05 0a84 	add.w	sl, r5, r4, lsl #2
 800487e:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004880:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8004884:	b300      	cbz	r0, 80048c8 <HAL_ETH_ReleaseTxPacket+0x64>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004886:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800488a:	68e9      	ldr	r1, [r5, #12]
 800488c:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	2a00      	cmp	r2, #0
 8004894:	db15      	blt.n	80048c2 <HAL_ETH_ReleaseTxPacket+0x5e>
        CLEAR_BIT(heth->Init.TxDesc[idx].DESC3, (0x40000000U));
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800489c:	60da      	str	r2, [r3, #12]
        if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_LD)
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	00d2      	lsls	r2, r2, #3
 80048a2:	d418      	bmi.n	80048d6 <HAL_ETH_ReleaseTxPacket+0x72>
 80048a4:	e9c5 8825 	strd	r8, r8, [r5, #148]	@ 0x94
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048a8:	f7fc fcc6 	bl	8001238 <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 80048ac:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048ae:	f8ca 702c 	str.w	r7, [sl, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	bf8c      	ite	hi
 80048b6:	3c03      	subhi	r4, #3
 80048b8:	461c      	movls	r4, r3
        dmatxdesclist->releaseIndex = idx;
 80048ba:	e9c5 6410 	strd	r6, r4, [r5, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048be:	2e00      	cmp	r6, #0
 80048c0:	d1db      	bne.n	800487a <HAL_ETH_ReleaseTxPacket+0x16>
}
 80048c2:	2000      	movs	r0, #0
 80048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      INCR_TX_DESC_INDEX(idx, 1U);
 80048c8:	1c63      	adds	r3, r4, #1
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d91a      	bls.n	8004904 <HAL_ETH_ReleaseTxPacket+0xa0>
 80048ce:	3c03      	subs	r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	d1d2      	bne.n	800487a <HAL_ETH_ReleaseTxPacket+0x16>
 80048d4:	e7f5      	b.n	80048c2 <HAL_ETH_ReleaseTxPacket+0x5e>
            && (heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_TTSS))
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	0392      	lsls	r2, r2, #14
 80048da:	d404      	bmi.n	80048e6 <HAL_ETH_ReleaseTxPacket+0x82>
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	e9c5 3325 	strd	r3, r3, [r5, #148]	@ 0x94
        if (timestamp->TimeStampHigh != UINT32_MAX && timestamp->TimeStampLow != UINT32_MAX)
 80048e4:	e7e0      	b.n	80048a8 <HAL_ETH_ReleaseTxPacket+0x44>
          timestamp->TimeStampLow = heth->Init.TxDesc[idx].DESC0;
 80048e6:	f851 203c 	ldr.w	r2, [r1, ip, lsl #3]
          timestamp->TimeStampHigh = heth->Init.TxDesc[idx].DESC1;
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	e9c5 2325 	strd	r2, r3, [r5, #148]	@ 0x94
        if (timestamp->TimeStampHigh != UINT32_MAX && timestamp->TimeStampLow != UINT32_MAX)
 80048f0:	3301      	adds	r3, #1
 80048f2:	d0d9      	beq.n	80048a8 <HAL_ETH_ReleaseTxPacket+0x44>
 80048f4:	3201      	adds	r2, #1
 80048f6:	d0d7      	beq.n	80048a8 <HAL_ETH_ReleaseTxPacket+0x44>
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
 80048f8:	4649      	mov	r1, r9
 80048fa:	f7ff fb5f 	bl	8003fbc <HAL_ETH_TxPtpCallback>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048fe:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8004902:	e7d1      	b.n	80048a8 <HAL_ETH_ReleaseTxPacket+0x44>
 8004904:	461c      	mov	r4, r3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004906:	2e00      	cmp	r6, #0
 8004908:	d1b7      	bne.n	800487a <HAL_ETH_ReleaseTxPacket+0x16>
 800490a:	e7da      	b.n	80048c2 <HAL_ETH_ReleaseTxPacket+0x5e>

0800490c <HAL_ETH_PTP_InsertTxTimestamp>:
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 800490c:	f8d0 20b4 	ldr.w	r2, [r0, #180]	@ 0xb4
{
 8004910:	4603      	mov	r3, r0
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8004912:	2a01      	cmp	r2, #1
 8004914:	d001      	beq.n	800491a <HAL_ETH_PTP_InsertTxTimestamp+0xe>
    return HAL_ERROR;
 8004916:	2001      	movs	r0, #1
}
 8004918:	4770      	bx	lr
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800491a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    return HAL_OK;
 800491c:	2000      	movs	r0, #0
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800491e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004922:	699a      	ldr	r2, [r3, #24]
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_TTSE);
 8004924:	6893      	ldr	r3, [r2, #8]
 8004926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800492a:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <HAL_ETH_PTP_GetRxTimestamp>:
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8004930:	f8d0 30b4 	ldr.w	r3, [r0, #180]	@ 0xb4
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <HAL_ETH_PTP_GetRxTimestamp+0xc>
    return HAL_ERROR;
 8004938:	2001      	movs	r0, #1
}
 800493a:	4770      	bx	lr
    timestamp->TimeStampLow = heth->RxDescList.TimeStamp.TimeStampLow;
 800493c:	e9d0 2321 	ldrd	r2, r3, [r0, #132]	@ 0x84
    return HAL_OK;
 8004940:	2000      	movs	r0, #0
    timestamp->TimeStampLow = heth->RxDescList.TimeStamp.TimeStampLow;
 8004942:	e9c1 2300 	strd	r2, r3, [r1]
    return HAL_OK;
 8004946:	4770      	bx	lr

08004948 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop

0800494c <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop

08004950 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop

08004954 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8004954:	6802      	ldr	r2, [r0, #0]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004956:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
{
 800495a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800495e:	f8d2 60b0 	ldr.w	r6, [r2, #176]	@ 0xb0
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004966:	f8d3 5160 	ldr.w	r5, [r3, #352]	@ 0x160
{
 800496a:	4604      	mov	r4, r0
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 800496c:	f8d3 7134 	ldr.w	r7, [r3, #308]	@ 0x134
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004970:	0669      	lsls	r1, r5, #25
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004972:	f8d2 80a8 	ldr.w	r8, [r2, #168]	@ 0xa8
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004976:	d501      	bpl.n	800497c <HAL_ETH_IRQHandler+0x28>
 8004978:	067a      	lsls	r2, r7, #25
 800497a:	d479      	bmi.n	8004a70 <HAL_ETH_IRQHandler+0x11c>
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 800497c:	07e9      	lsls	r1, r5, #31
 800497e:	d501      	bpl.n	8004984 <HAL_ETH_IRQHandler+0x30>
 8004980:	07fa      	lsls	r2, r7, #31
 8004982:	d46a      	bmi.n	8004a5a <HAL_ETH_IRQHandler+0x106>
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8004984:	046b      	lsls	r3, r5, #17
 8004986:	d501      	bpl.n	800498c <HAL_ETH_IRQHandler+0x38>
 8004988:	0478      	lsls	r0, r7, #17
 800498a:	d40b      	bmi.n	80049a4 <HAL_ETH_IRQHandler+0x50>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800498c:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 8004990:	d123      	bne.n	80049da <HAL_ETH_IRQHandler+0x86>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004992:	06f2      	lsls	r2, r6, #27
 8004994:	d437      	bmi.n	8004a06 <HAL_ETH_IRQHandler+0xb2>
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8004996:	06b3      	lsls	r3, r6, #26
 8004998:	d444      	bmi.n	8004a24 <HAL_ETH_IRQHandler+0xd0>
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800499a:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
 800499e:	d151      	bne.n	8004a44 <HAL_ETH_IRQHandler+0xf0>
}
 80049a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80049a8:	04e9      	lsls	r1, r5, #19
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049aa:	f043 0308 	orr.w	r3, r3, #8
 80049ae:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80049bc:	d45f      	bmi.n	8004a7e <HAL_ETH_IRQHandler+0x12a>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80049be:	f402 42cd 	and.w	r2, r2, #26240	@ 0x6680
 80049c2:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80049c6:	f44f 42cd 	mov.w	r2, #26240	@ 0x6680
 80049ca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_ErrorCallback(heth);
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7fc fb42 	bl	8001058 <HAL_ETH_ErrorCallback>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80049d4:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 80049d8:	d0db      	beq.n	8004992 <HAL_ETH_IRQHandler+0x3e>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80049da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
    HAL_ETH_ErrorCallback(heth);
 80049de:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80049e0:	6822      	ldr	r2, [r4, #0]
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80049e2:	f043 0310 	orr.w	r3, r3, #16
 80049e6:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80049ea:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 80049ee:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    heth->gState = HAL_ETH_STATE_ERROR;
 80049f2:	23e0      	movs	r3, #224	@ 0xe0
 80049f4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
    HAL_ETH_ErrorCallback(heth);
 80049f8:	f7fc fb2e 	bl	8001058 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 80049fc:	2300      	movs	r3, #0
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80049fe:	06f2      	lsls	r2, r6, #27
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004a00:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a04:	d5c7      	bpl.n	8004996 <HAL_ETH_IRQHandler+0x42>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004a06:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8004a08:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004a0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004a12:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    HAL_ETH_PMTCallback(heth);
 8004a16:	f7ff ff97 	bl	8004948 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8004a20:	06b3      	lsls	r3, r6, #26
 8004a22:	d5ba      	bpl.n	800499a <HAL_ETH_IRQHandler+0x46>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004a24:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_EEECallback(heth);
 8004a26:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004a28:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
    HAL_ETH_EEECallback(heth);
 8004a34:	f7ff ff8a 	bl	800494c <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004a38:	2300      	movs	r3, #0
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a3a:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004a3e:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a42:	d0ad      	beq.n	80049a0 <HAL_ETH_IRQHandler+0x4c>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8004a4c:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a4e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8004a52:	f7ff ff7d 	bl	8004950 <HAL_ETH_WakeUpCallback>
}
 8004a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f248 0201 	movw	r2, #32769	@ 0x8001
    HAL_ETH_TxCpltCallback(heth);
 8004a60:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a66:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_TxCpltCallback(heth);
 8004a6a:	f7fc faef 	bl	800104c <HAL_ETH_TxCpltCallback>
 8004a6e:	e789      	b.n	8004984 <HAL_ETH_IRQHandler+0x30>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004a70:	f248 0240 	movw	r2, #32832	@ 0x8040
 8004a74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_RxCpltCallback(heth);
 8004a78:	f7fc fae2 	bl	8001040 <HAL_ETH_RxCpltCallback>
 8004a7c:	e77e      	b.n	800497c <HAL_ETH_IRQHandler+0x28>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004a7e:	f241 1102 	movw	r1, #4354	@ 0x1102
 8004a82:	400a      	ands	r2, r1
 8004a84:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004a88:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8004a8c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004a90:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a94:	23e0      	movs	r3, #224	@ 0xe0
 8004a96:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8004a9a:	e798      	b.n	80049ce <HAL_ETH_IRQHandler+0x7a>

08004a9c <HAL_ETH_ReadPHYRegister>:
{
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004aa0:	6800      	ldr	r0, [r0, #0]
{
 8004aa2:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004aa4:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d501      	bpl.n	8004ab0 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
}
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004ab0:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004ab4:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 8004ab8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004abc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ac0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004ac4:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004ac8:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8004acc:	f7ff f9b4 	bl	8003e38 <HAL_GetTick>
 8004ad0:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ad2:	e005      	b.n	8004ae0 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004ad4:	f7ff f9b0 	bl	8003e38 <HAL_GetTick>
 8004ad8:	1b82      	subs	r2, r0, r6
 8004ada:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004ade:	d8e5      	bhi.n	8004aac <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8004ae6:	f012 0201 	ands.w	r2, r2, #1
 8004aea:	d1f3      	bne.n	8004ad4 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004aec:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 8004af0:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	602b      	str	r3, [r5, #0]
}
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <HAL_ETH_WritePHYRegister>:
{
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8004b02:	07ed      	lsls	r5, r5, #31
 8004b04:	d501      	bpl.n	8004b0a <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b0a:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004b0e:	b29d      	uxth	r5, r3
 8004b10:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8004b14:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b18:	490f      	ldr	r1, [pc, #60]	@ (8004b58 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b1e:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004b26:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b2a:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004b2e:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8004b32:	f7ff f981 	bl	8003e38 <HAL_GetTick>
 8004b36:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b38:	e005      	b.n	8004b46 <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004b3a:	f7ff f97d 	bl	8003e38 <HAL_GetTick>
 8004b3e:	1b43      	subs	r3, r0, r5
 8004b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b44:	d8df      	bhi.n	8004b06 <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b4c:	f013 0301 	ands.w	r3, r3, #1
 8004b50:	d1f3      	bne.n	8004b3a <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8004b52:	4618      	mov	r0, r3
}
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
 8004b56:	bf00      	nop
 8004b58:	40028000 	.word	0x40028000

08004b5c <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	f000 80c4 	beq.w	8004cea <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b62:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8004b64:	2000      	movs	r0, #0
{
 8004b66:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b68:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b6a:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b6c:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b70:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004b74:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004b78:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b7a:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004b7c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8004b80:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 8004b88:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8004b8c:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b90:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8004b92:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b96:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8004b9e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8004ba2:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004ba4:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004ba6:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004baa:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8004bb2:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004bb4:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004bb6:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004bb8:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004bbc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004bc0:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8004bca:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8004bd2:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8004bd6:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004bde:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8004be2:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8004bea:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8004bf2:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8004bfa:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004bfc:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004bfe:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c02:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c04:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c06:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c08:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c0c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c10:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c12:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c14:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c16:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c18:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c1c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c20:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c22:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 8004c2a:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8004c2e:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8004c38:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c3c:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004c3e:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c42:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004c46:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8004c48:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004c4c:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c50:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c52:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c54:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c58:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c5c:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c5e:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c62:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c66:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c6a:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c6e:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c70:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004c74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c76:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8004c7a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8004c7e:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c82:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c86:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c8a:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c8c:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c8e:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004c90:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004c94:	f002 0201 	and.w	r2, r2, #1
 8004c98:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004c9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 8004ca0:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004ca4:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004ca8:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004cac:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004cb0:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004cb4:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 8004cb8:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cbc:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 8004cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004cc4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cc8:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004ccc:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 8004cd0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004cd4:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004cdc:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8004ce0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ce4:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 8004ce8:	4770      	bx	lr
    return HAL_ERROR;
 8004cea:	2001      	movs	r0, #1
}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8004cf0:	b131      	cbz	r1, 8004d00 <HAL_ETH_SetMACConfig+0x10>
{
 8004cf2:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8004cf4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d003      	beq.n	8004d04 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8004cfc:	2001      	movs	r0, #1
}
 8004cfe:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004d00:	2001      	movs	r0, #1
}
 8004d02:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8004d04:	f7ff f95c 	bl	8003fc0 <ETH_SetMACConfig>
    return HAL_OK;
 8004d08:	2000      	movs	r0, #0
}
 8004d0a:	bd08      	pop	{r3, pc}

08004d0c <HAL_ETH_SetDMAConfig>:
  if (dmaconf == NULL)
 8004d0c:	b131      	cbz	r1, 8004d1c <HAL_ETH_SetDMAConfig+0x10>
{
 8004d0e:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8004d10:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d003      	beq.n	8004d20 <HAL_ETH_SetDMAConfig+0x14>
    return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
}
 8004d1a:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
}
 8004d1e:	4770      	bx	lr
    ETH_SetDMAConfig(heth, dmaconf);
 8004d20:	f7ff fa0a 	bl	8004138 <ETH_SetDMAConfig>
    return HAL_OK;
 8004d24:	2000      	movs	r0, #0
}
 8004d26:	bd08      	pop	{r3, pc}

08004d28 <HAL_ETH_SetMDIOClockRange>:
{
 8004d28:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d2a:	6803      	ldr	r3, [r0, #0]
{
 8004d2c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d2e:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8004d32:	f000 ff59 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_ETH_SetMDIOClockRange+0x58>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004d38:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if (hclk < 35000000U)
 8004d3c:	4298      	cmp	r0, r3
 8004d3e:	d805      	bhi.n	8004d4c <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d40:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d84 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8004d4e:	4298      	cmp	r0, r3
 8004d50:	d205      	bcs.n	8004d5e <HAL_ETH_SetMDIOClockRange+0x36>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004d52:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 100000000U)
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <HAL_ETH_SetMDIOClockRange+0x60>)
 8004d60:	4298      	cmp	r0, r3
 8004d62:	d9ef      	bls.n	8004d44 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 150000000U)
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_ETH_SetMDIOClockRange+0x64>)
 8004d66:	4298      	cmp	r0, r3
 8004d68:	d802      	bhi.n	8004d70 <HAL_ETH_SetMDIOClockRange+0x48>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d6a:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8004d6e:	e7e9      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 250000000U)
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <HAL_ETH_SetMDIOClockRange+0x68>)
 8004d72:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d74:	bf94      	ite	ls
 8004d76:	f444 6480 	orrls.w	r4, r4, #1024	@ 0x400
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004d7a:	f444 64a0 	orrhi.w	r4, r4, #1280	@ 0x500
 8004d7e:	e7e1      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0x1c>
 8004d80:	02160ebf 	.word	0x02160ebf
 8004d84:	03938700 	.word	0x03938700
 8004d88:	05f5e0ff 	.word	0x05f5e0ff
 8004d8c:	08f0d17f 	.word	0x08f0d17f
 8004d90:	0ee6b27f 	.word	0x0ee6b27f

08004d94 <HAL_ETH_Init>:
  if (heth == NULL)
 8004d94:	2800      	cmp	r0, #0
 8004d96:	f000 8118 	beq.w	8004fca <HAL_ETH_Init+0x236>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d9a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
{
 8004d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da0:	4605      	mov	r5, r0
 8004da2:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80af 	beq.w	8004f08 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004daa:	4b89      	ldr	r3, [pc, #548]	@ (8004fd0 <HAL_ETH_Init+0x23c>)
 8004dac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8004db0:	f042 0202 	orr.w	r2, r2, #2
 8004db4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8004db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004dbc:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f040 8094 	bne.w	8004ef4 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004dcc:	f7ff f83a 	bl	8003e44 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dd0:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8004dd2:	4a80      	ldr	r2, [pc, #512]	@ (8004fd4 <HAL_ETH_Init+0x240>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 8004dd8:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004de2:	f7ff f829 	bl	8003e38 <HAL_GetTick>
 8004de6:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004de8:	e006      	b.n	8004df8 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004dea:	f7ff f825 	bl	8003e38 <HAL_GetTick>
 8004dee:	1b80      	subs	r0, r0, r6
 8004df0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8004df4:	f200 8081 	bhi.w	8004efa <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dfe:	681c      	ldr	r4, [r3, #0]
 8004e00:	f014 0401 	ands.w	r4, r4, #1
 8004e04:	d1f1      	bne.n	8004dea <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8004e06:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e08:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8004e0a:	f7ff ff8d 	bl	8004d28 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e0e:	f000 feeb 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8004e12:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <HAL_ETH_Init+0x244>)
 8004e14:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e16:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e18:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e1c:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e1e:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e20:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8004e22:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004e26:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e2a:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004e2c:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004e2e:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e32:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004e3a:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e3c:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004e3e:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e42:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004e46:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 8004e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004e4c:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 8004e50:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e52:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004e54:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e58:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e5a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 8004e5e:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e62:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004e68:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e6a:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fdc <HAL_ETH_Init+0x248>)
  macDefaultConf.PauseTime = 0x0U;
 8004e6e:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004e70:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e72:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004e74:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e76:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 8004e78:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004e7c:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8004e80:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e84:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8004e88:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e8c:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e90:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e94:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e96:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e9a:	f7ff f891 	bl	8003fc0 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e9e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	a902      	add	r1, sp, #8
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004ea6:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004eaa:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004eac:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004eae:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004eb2:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004eb4:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004eb6:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004eb8:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004ebc:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004ec0:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ec4:	f7ff f938 	bl	8004138 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004ec8:	f506 5080 	add.w	r0, r6, #4096	@ 0x1000
 8004ecc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8004ed0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ed8:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004edc:	696b      	ldr	r3, [r5, #20]
 8004ede:	f013 0203 	ands.w	r2, r3, #3
 8004ee2:	d017      	beq.n	8004f14 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ee4:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004ee6:	f8c5 70a0 	str.w	r7, [r5, #160]	@ 0xa0
    heth->gState = HAL_ETH_STATE_ERROR;
 8004eea:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
    return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
}
 8004ef0:	b025      	add	sp, #148	@ 0x94
 8004ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ef4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004ef8:	e768      	b.n	8004dcc <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004efa:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8004efc:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004efe:	f8c5 20a0 	str.w	r2, [r5, #160]	@ 0xa0
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f02:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
      return HAL_ERROR;
 8004f06:	e7f2      	b.n	8004eee <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f08:	2323      	movs	r3, #35	@ 0x23
 8004f0a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    HAL_ETH_MspInit(heth);
 8004f0e:	f7fc f80b 	bl	8000f28 <HAL_ETH_MspInit>
 8004f12:	e74a      	b.n	8004daa <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f14:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8004f18:	4931      	ldr	r1, [pc, #196]	@ (8004fe0 <HAL_ETH_Init+0x24c>)
 8004f1a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004f1e:	4021      	ands	r1, r4
 8004f20:	f10c 0460 	add.w	r4, ip, #96	@ 0x60
 8004f24:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8004f28:	4663      	mov	r3, ip
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f2a:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f2e:	f105 0114 	add.w	r1, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004f32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004f34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004f36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004f38:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f3a:	f841 3f04 	str.w	r3, [r1, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f3e:	3318      	adds	r3, #24
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d1f6      	bne.n	8004f32 <HAL_ETH_Init+0x19e>
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f44:	692f      	ldr	r7, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004f46:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8004f48:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004f4a:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8004f4e:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f52:	f105 0464 	add.w	r4, r5, #100	@ 0x64
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f56:	463b      	mov	r3, r7
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004f58:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f5a:	f8c0 c114 	str.w	ip, [r0, #276]	@ 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004f5e:	f8c0 c120 	str.w	ip, [r0, #288]	@ 0x120
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004f62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004f64:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004f66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004f68:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004f6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004f6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f6e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f72:	428c      	cmp	r4, r1
 8004f74:	f103 0318 	add.w	r3, r3, #24
 8004f78:	d1f3      	bne.n	8004f62 <HAL_ETH_Init+0x1ce>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f7a:	2107      	movs	r1, #7
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f7c:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004f7e:	66aa      	str	r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004f80:	e9c5 221b 	strd	r2, r2, [r5, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004f84:	e9c5 221e 	strd	r2, r2, [r5, #120]	@ 0x78
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f88:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f8c:	f8c0 711c 	str.w	r7, [r0, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004f90:	37a8      	adds	r7, #168	@ 0xa8
 8004f92:	f8c0 7128 	str.w	r7, [r0, #296]	@ 0x128
  return HAL_OK;
 8004f96:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f98:	8899      	ldrh	r1, [r3, #4]
 8004f9a:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f9e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004fa0:	4910      	ldr	r1, [pc, #64]	@ (8004fe4 <HAL_ETH_Init+0x250>)
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004fa2:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004fa6:	f8d6 370c 	ldr.w	r3, [r6, #1804]	@ 0x70c
 8004faa:	4319      	orrs	r1, r3
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004fac:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <HAL_ETH_Init+0x254>)
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004fae:	f8c6 170c 	str.w	r1, [r6, #1804]	@ 0x70c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004fb2:	f8d6 1710 	ldr.w	r1, [r6, #1808]	@ 0x710
 8004fb6:	430b      	orrs	r3, r1
  heth->gState = HAL_ETH_STATE_READY;
 8004fb8:	2110      	movs	r1, #16
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004fba:	f8c6 3710 	str.w	r3, [r6, #1808]	@ 0x710
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004fbe:	f8c5 20a0 	str.w	r2, [r5, #160]	@ 0xa0
  heth->gState = HAL_ETH_STATE_READY;
 8004fc2:	f8c5 109c 	str.w	r1, [r5, #156]	@ 0x9c
}
 8004fc6:	b025      	add	sp, #148	@ 0x94
 8004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004fca:	2001      	movs	r0, #1
}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	58000400 	.word	0x58000400
 8004fd8:	431bde83 	.word	0x431bde83
 8004fdc:	01010000 	.word	0x01010000
 8004fe0:	ffff8001 	.word	0xffff8001
 8004fe4:	0c020060 	.word	0x0c020060
 8004fe8:	0c20c000 	.word	0x0c20c000

08004fec <HAL_ETH_SetMACFilterConfig>:
  if (pFilterConfig == NULL)
 8004fec:	b381      	cbz	r1, 8005050 <HAL_ETH_SetMACFilterConfig+0x64>
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8004fee:	6802      	ldr	r2, [r0, #0]
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <HAL_ETH_SetMACFilterConfig+0x68>)
 8004ff2:	68c8      	ldr	r0, [r1, #12]
{
 8004ff4:	b510      	push	{r4, lr}
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8004ff6:	6894      	ldr	r4, [r2, #8]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8004ff8:	f891 c000 	ldrb.w	ip, [r1]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8004ffc:	4023      	ands	r3, r4
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8004ffe:	f891 e001 	ldrb.w	lr, [r1, #1]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005002:	4303      	orrs	r3, r0
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8005004:	78c8      	ldrb	r0, [r1, #3]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005006:	ea43 030c 	orr.w	r3, r3, ip
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800500a:	f891 c004 	ldrb.w	ip, [r1, #4]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800500e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8005012:	7a08      	ldrb	r0, [r1, #8]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005014:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8005018:	f891 c005 	ldrb.w	ip, [r1, #5]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800501c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8005020:	79c8      	ldrb	r0, [r1, #7]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005022:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8005026:	f891 c006 	ldrb.w	ip, [r1, #6]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800502a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800502e:	7888      	ldrb	r0, [r1, #2]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005030:	ea43 234c 	orr.w	r3, r3, ip, lsl #9
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8005034:	f891 c009 	ldrb.w	ip, [r1, #9]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005038:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 800503c:	fabc f18c 	clz	r1, ip
  return HAL_OK;
 8005040:	2000      	movs	r0, #0
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005042:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8005046:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8005048:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800504c:	6093      	str	r3, [r2, #8]
}
 800504e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
}
 8005052:	4770      	bx	lr
 8005054:	7ffff800 	.word	0x7ffff800

08005058 <HAL_ETH_GetError>:
  return heth->ErrorCode;
 8005058:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8005060:	f8d0 00a4 	ldr.w	r0, [r0, #164]	@ 0xa4
}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800506c:	680c      	ldr	r4, [r1, #0]
{
 800506e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005070:	2c00      	cmp	r4, #0
 8005072:	f000 80a0 	beq.w	80051b6 <HAL_GPIO_Init+0x14e>
  uint32_t position = 0x00U;
 8005076:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005078:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800507c:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005080:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005082:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8005086:	ea1c 0a04 	ands.w	sl, ip, r4
 800508a:	f000 808f 	beq.w	80051ac <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800508e:	9900      	ldr	r1, [sp, #0]
 8005090:	005f      	lsls	r7, r3, #1
 8005092:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005094:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005096:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509a:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800509e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050a2:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050a4:	f1b8 0f01 	cmp.w	r8, #1
 80050a8:	f240 8088 	bls.w	80051bc <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ac:	2a03      	cmp	r2, #3
 80050ae:	f040 80c6 	bne.w	800523e <HAL_GPIO_Init+0x1d6>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050b2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80050b4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050b6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ba:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050be:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80050c2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050c4:	d072      	beq.n	80051ac <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	4e79      	ldr	r6, [pc, #484]	@ (80052ac <HAL_GPIO_Init+0x244>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c8:	f003 0703 	and.w	r7, r3, #3
 80050cc:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ce:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d2:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d4:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d8:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050dc:	4974      	ldr	r1, [pc, #464]	@ (80052b0 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050de:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 80050e2:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 80050e6:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ea:	4288      	cmp	r0, r1
 80050ec:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f0:	f002 0202 	and.w	r2, r2, #2
 80050f4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80050f8:	9203      	str	r2, [sp, #12]
 80050fa:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80050fc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050fe:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005102:	d02c      	beq.n	800515e <HAL_GPIO_Init+0xf6>
 8005104:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005108:	4288      	cmp	r0, r1
 800510a:	f000 80ab 	beq.w	8005264 <HAL_GPIO_Init+0x1fc>
 800510e:	4969      	ldr	r1, [pc, #420]	@ (80052b4 <HAL_GPIO_Init+0x24c>)
 8005110:	4288      	cmp	r0, r1
 8005112:	f000 80ad 	beq.w	8005270 <HAL_GPIO_Init+0x208>
 8005116:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80052b8 <HAL_GPIO_Init+0x250>
 800511a:	4560      	cmp	r0, ip
 800511c:	f000 809c 	beq.w	8005258 <HAL_GPIO_Init+0x1f0>
 8005120:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80052bc <HAL_GPIO_Init+0x254>
 8005124:	4560      	cmp	r0, ip
 8005126:	f000 80af 	beq.w	8005288 <HAL_GPIO_Init+0x220>
 800512a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 80052c0 <HAL_GPIO_Init+0x258>
 800512e:	4560      	cmp	r0, ip
 8005130:	f000 80b0 	beq.w	8005294 <HAL_GPIO_Init+0x22c>
 8005134:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 80052c4 <HAL_GPIO_Init+0x25c>
 8005138:	4560      	cmp	r0, ip
 800513a:	f000 809f 	beq.w	800527c <HAL_GPIO_Init+0x214>
 800513e:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80052c8 <HAL_GPIO_Init+0x260>
 8005142:	4560      	cmp	r0, ip
 8005144:	f000 80ac 	beq.w	80052a0 <HAL_GPIO_Init+0x238>
 8005148:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80052cc <HAL_GPIO_Init+0x264>
 800514c:	4560      	cmp	r0, ip
 800514e:	bf0c      	ite	eq
 8005150:	f04f 0c09 	moveq.w	ip, #9
 8005154:	f04f 0c0a 	movne.w	ip, #10
 8005158:	fa0c f707 	lsl.w	r7, ip, r7
 800515c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800515e:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005160:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8005162:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8005166:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800516a:	bf4c      	ite	mi
 800516c:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8005170:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005172:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8005174:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8005178:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800517c:	bf54      	ite	pl
 800517e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005180:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005184:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8005186:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800518a:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800518e:	bf54      	ite	pl
 8005190:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005192:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005196:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005198:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800519c:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80051a0:	bf54      	ite	pl
 80051a2:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80051a4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051a8:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 80051ac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ae:	fa34 f203 	lsrs.w	r2, r4, r3
 80051b2:	f47f af66 	bne.w	8005082 <HAL_GPIO_Init+0x1a>
  }
}
 80051b6:	b005      	add	sp, #20
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051bc:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051be:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 80051c0:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051c4:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051c6:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051ca:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ce:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d0:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d4:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 80051d6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051da:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80051de:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e2:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051e6:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ea:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80051ee:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f2:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 80051f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fa:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051fe:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8005202:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005206:	f47f af54 	bne.w	80050b2 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800520a:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800520e:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8005210:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005214:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005218:	6909      	ldr	r1, [r1, #16]
 800521a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800521e:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8005222:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005226:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005228:	210f      	movs	r1, #15
 800522a:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800522e:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005230:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005234:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005238:	f8c8 c020 	str.w	ip, [r8, #32]
 800523c:	e739      	b.n	80050b2 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800523e:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8005240:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005244:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005246:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800524a:	fa01 fc07 	lsl.w	ip, r1, r7
 800524e:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8005252:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005256:	e72c      	b.n	80050b2 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005258:	f04f 0c03 	mov.w	ip, #3
 800525c:	fa0c f707 	lsl.w	r7, ip, r7
 8005260:	433a      	orrs	r2, r7
 8005262:	e77c      	b.n	800515e <HAL_GPIO_Init+0xf6>
 8005264:	f04f 0c01 	mov.w	ip, #1
 8005268:	fa0c f707 	lsl.w	r7, ip, r7
 800526c:	433a      	orrs	r2, r7
 800526e:	e776      	b.n	800515e <HAL_GPIO_Init+0xf6>
 8005270:	f04f 0c02 	mov.w	ip, #2
 8005274:	fa0c f707 	lsl.w	r7, ip, r7
 8005278:	433a      	orrs	r2, r7
 800527a:	e770      	b.n	800515e <HAL_GPIO_Init+0xf6>
 800527c:	f04f 0c06 	mov.w	ip, #6
 8005280:	fa0c f707 	lsl.w	r7, ip, r7
 8005284:	433a      	orrs	r2, r7
 8005286:	e76a      	b.n	800515e <HAL_GPIO_Init+0xf6>
 8005288:	f04f 0c04 	mov.w	ip, #4
 800528c:	fa0c f707 	lsl.w	r7, ip, r7
 8005290:	433a      	orrs	r2, r7
 8005292:	e764      	b.n	800515e <HAL_GPIO_Init+0xf6>
 8005294:	f04f 0c05 	mov.w	ip, #5
 8005298:	fa0c f707 	lsl.w	r7, ip, r7
 800529c:	433a      	orrs	r2, r7
 800529e:	e75e      	b.n	800515e <HAL_GPIO_Init+0xf6>
 80052a0:	f04f 0c07 	mov.w	ip, #7
 80052a4:	fa0c f707 	lsl.w	r7, ip, r7
 80052a8:	433a      	orrs	r2, r7
 80052aa:	e758      	b.n	800515e <HAL_GPIO_Init+0xf6>
 80052ac:	58024400 	.word	0x58024400
 80052b0:	58020000 	.word	0x58020000
 80052b4:	58020800 	.word	0x58020800
 80052b8:	58020c00 	.word	0x58020c00
 80052bc:	58021000 	.word	0x58021000
 80052c0:	58021400 	.word	0x58021400
 80052c4:	58021800 	.word	0x58021800
 80052c8:	58021c00 	.word	0x58021c00
 80052cc:	58022400 	.word	0x58022400

080052d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052d0:	b902      	cbnz	r2, 80052d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052d2:	0409      	lsls	r1, r1, #16
 80052d4:	6181      	str	r1, [r0, #24]
  }
}
 80052d6:	4770      	bx	lr

080052d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052d8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052da:	4c10      	ldr	r4, [pc, #64]	@ (800531c <HAL_PWREx_ConfigSupply+0x44>)
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052e2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052e4:	d105      	bne.n	80052f2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	1a18      	subs	r0, r3, r0
 80052ec:	bf18      	it	ne
 80052ee:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80052f0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	4303      	orrs	r3, r0
 80052f8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80052fa:	f7fe fd9d 	bl	8003e38 <HAL_GetTick>
 80052fe:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005300:	e005      	b.n	800530e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005302:	f7fe fd99 	bl	8003e38 <HAL_GetTick>
 8005306:	1b40      	subs	r0, r0, r5
 8005308:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800530c:	d804      	bhi.n	8005318 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	049b      	lsls	r3, r3, #18
 8005312:	d5f6      	bpl.n	8005302 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8005314:	2000      	movs	r0, #0
}
 8005316:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005318:	2001      	movs	r0, #1
}
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	58024800 	.word	0x58024800

08005320 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005320:	4b33      	ldr	r3, [pc, #204]	@ (80053f0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8005322:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005324:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005326:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005328:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800532a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800532e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005330:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005334:	d036      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005336:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800533a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800533e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005342:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005346:	fb05 f202 	mul.w	r2, r5, r2
 800534a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800534c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005350:	ee06 2a90 	vmov	s13, r2
 8005354:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005358:	d002      	beq.n	8005360 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800535a:	2902      	cmp	r1, #2
 800535c:	d042      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800535e:	b319      	cbz	r1, 80053a8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005360:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80053f4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005364:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005382:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800538e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005390:	ee07 3a10 	vmov	s14, r3
 8005394:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005398:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800539c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80053a0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80053a4:	bc30      	pop	{r4, r5}
 80053a6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	0692      	lsls	r2, r2, #26
 80053ac:	d51d      	bpl.n	80053ea <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ae:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b4:	4a10      	ldr	r2, [pc, #64]	@ (80053f8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053c0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	ee06 2a10 	vmov	s12, r2
 80053ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80053d2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80053d6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80053da:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80053de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e2:	e7d0      	b.n	8005386 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80053fc <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80053e8:	e7bc      	b.n	8005364 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ea:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005400 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80053ee:	e7b9      	b.n	8005364 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80053f0:	58024400 	.word	0x58024400
 80053f4:	4a742400 	.word	0x4a742400
 80053f8:	03d09000 	.word	0x03d09000
 80053fc:	4af42400 	.word	0x4af42400
 8005400:	4c742400 	.word	0x4c742400

08005404 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005404:	2800      	cmp	r0, #0
 8005406:	f000 82a1 	beq.w	800594c <HAL_RCC_OscConfig+0x548>
{
 800540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540c:	6803      	ldr	r3, [r0, #0]
 800540e:	4604      	mov	r4, r0
 8005410:	07d9      	lsls	r1, r3, #31
 8005412:	d52e      	bpl.n	8005472 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005414:	499b      	ldr	r1, [pc, #620]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005416:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005418:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800541e:	2a10      	cmp	r2, #16
 8005420:	f000 80d6 	beq.w	80055d0 <HAL_RCC_OscConfig+0x1cc>
 8005424:	2a18      	cmp	r2, #24
 8005426:	f000 80ce 	beq.w	80055c6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	6863      	ldr	r3, [r4, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	f000 80ee 	beq.w	8005610 <HAL_RCC_OscConfig+0x20c>
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8144 	beq.w	80056c2 <HAL_RCC_OscConfig+0x2be>
 800543a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543e:	4b91      	ldr	r3, [pc, #580]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	f000 824e 	beq.w	80058e2 <HAL_RCC_OscConfig+0x4de>
 8005446:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005452:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005454:	f7fe fcf0 	bl	8003e38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005458:	4e8a      	ldr	r6, [pc, #552]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800545a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800545c:	e005      	b.n	800546a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545e:	f7fe fceb 	bl	8003e38 <HAL_GetTick>
 8005462:	1b40      	subs	r0, r0, r5
 8005464:	2864      	cmp	r0, #100	@ 0x64
 8005466:	f200 812a 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800546a:	6833      	ldr	r3, [r6, #0]
 800546c:	039b      	lsls	r3, r3, #14
 800546e:	d5f6      	bpl.n	800545e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079d      	lsls	r5, r3, #30
 8005474:	d464      	bmi.n	8005540 <HAL_RCC_OscConfig+0x13c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005476:	06d9      	lsls	r1, r3, #27
 8005478:	d528      	bpl.n	80054cc <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547a:	4982      	ldr	r1, [pc, #520]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 800547c:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005480:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005484:	2a08      	cmp	r2, #8
 8005486:	f000 80b3 	beq.w	80055f0 <HAL_RCC_OscConfig+0x1ec>
 800548a:	2a18      	cmp	r2, #24
 800548c:	f000 80ab 	beq.w	80055e6 <HAL_RCC_OscConfig+0x1e2>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005490:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005492:	4d7c      	ldr	r5, [pc, #496]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 814c 	beq.w	8005732 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_CSI_ENABLE();
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80054a2:	f7fe fcc9 	bl	8003e38 <HAL_GetTick>
 80054a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a8:	e005      	b.n	80054b6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054aa:	f7fe fcc5 	bl	8003e38 <HAL_GetTick>
 80054ae:	1b80      	subs	r0, r0, r6
 80054b0:	2802      	cmp	r0, #2
 80054b2:	f200 8104 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	05db      	lsls	r3, r3, #23
 80054ba:	d5f6      	bpl.n	80054aa <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054bc:	68eb      	ldr	r3, [r5, #12]
 80054be:	6a22      	ldr	r2, [r4, #32]
 80054c0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80054c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80054c8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	071d      	lsls	r5, r3, #28
 80054ce:	d516      	bpl.n	80054fe <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054d0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80054d2:	4d6c      	ldr	r5, [pc, #432]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 810a 	beq.w	80056ee <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_LSI_ENABLE();
 80054da:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80054e2:	f7fe fca9 	bl	8003e38 <HAL_GetTick>
 80054e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054e8:	e005      	b.n	80054f6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ea:	f7fe fca5 	bl	8003e38 <HAL_GetTick>
 80054ee:	1b80      	subs	r0, r0, r6
 80054f0:	2802      	cmp	r0, #2
 80054f2:	f200 80e4 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054f6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80054f8:	0798      	lsls	r0, r3, #30
 80054fa:	d5f6      	bpl.n	80054ea <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	069a      	lsls	r2, r3, #26
 8005500:	d516      	bpl.n	8005530 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005502:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8005504:	4d5f      	ldr	r5, [pc, #380]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8102 	beq.w	8005710 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI48_ENABLE();
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005512:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005514:	f7fe fc90 	bl	8003e38 <HAL_GetTick>
 8005518:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800551a:	e005      	b.n	8005528 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551c:	f7fe fc8c 	bl	8003e38 <HAL_GetTick>
 8005520:	1b80      	subs	r0, r0, r6
 8005522:	2802      	cmp	r0, #2
 8005524:	f200 80cb 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	049f      	lsls	r7, r3, #18
 800552c:	d5f6      	bpl.n	800551c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0759      	lsls	r1, r3, #29
 8005532:	d473      	bmi.n	800561c <HAL_RCC_OscConfig+0x218>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005534:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	f040 80a8 	bne.w	800568c <HAL_RCC_OscConfig+0x288>
  return HAL_OK;
 800553c:	2000      	movs	r0, #0
}
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005540:	4a50      	ldr	r2, [pc, #320]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005542:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005544:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005546:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800554a:	d122      	bne.n	8005592 <HAL_RCC_OscConfig+0x18e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800554c:	4b4d      	ldr	r3, [pc, #308]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800554e:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	0759      	lsls	r1, r3, #29
 8005554:	d501      	bpl.n	800555a <HAL_RCC_OscConfig+0x156>
 8005556:	2a00      	cmp	r2, #0
 8005558:	d043      	beq.n	80055e2 <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800555a:	4d4a      	ldr	r5, [pc, #296]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	f023 0319 	bic.w	r3, r3, #25
 8005562:	4313      	orrs	r3, r2
 8005564:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005566:	f7fe fc67 	bl	8003e38 <HAL_GetTick>
 800556a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800556c:	e005      	b.n	800557a <HAL_RCC_OscConfig+0x176>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fe fc63 	bl	8003e38 <HAL_GetTick>
 8005572:	1b80      	subs	r0, r0, r6
 8005574:	2802      	cmp	r0, #2
 8005576:	f200 80a2 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	075b      	lsls	r3, r3, #29
 800557e:	d5f6      	bpl.n	800556e <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005580:	686b      	ldr	r3, [r5, #4]
 8005582:	6922      	ldr	r2, [r4, #16]
 8005584:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800558c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	e771      	b.n	8005476 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005592:	2b18      	cmp	r3, #24
 8005594:	f000 80f0 	beq.w	8005778 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005598:	4d3a      	ldr	r5, [pc, #232]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800559a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800559c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800559e:	2a00      	cmp	r2, #0
 80055a0:	f000 80d9 	beq.w	8005756 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a4:	f023 0319 	bic.w	r3, r3, #25
 80055a8:	4313      	orrs	r3, r2
 80055aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055ac:	f7fe fc44 	bl	8003e38 <HAL_GetTick>
 80055b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b2:	e004      	b.n	80055be <HAL_RCC_OscConfig+0x1ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b4:	f7fe fc40 	bl	8003e38 <HAL_GetTick>
 80055b8:	1b80      	subs	r0, r0, r6
 80055ba:	2802      	cmp	r0, #2
 80055bc:	d87f      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	075f      	lsls	r7, r3, #29
 80055c2:	d5f7      	bpl.n	80055b4 <HAL_RCC_OscConfig+0x1b0>
 80055c4:	e7dc      	b.n	8005580 <HAL_RCC_OscConfig+0x17c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055c6:	f001 0103 	and.w	r1, r1, #3
 80055ca:	2902      	cmp	r1, #2
 80055cc:	f47f af2d 	bne.w	800542a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	0392      	lsls	r2, r2, #14
 80055d6:	f57f af4c 	bpl.w	8005472 <HAL_RCC_OscConfig+0x6e>
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	2a00      	cmp	r2, #0
 80055de:	f47f af48 	bne.w	8005472 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80055e2:	2001      	movs	r0, #1
}
 80055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055e6:	f001 0103 	and.w	r1, r1, #3
 80055ea:	2901      	cmp	r1, #1
 80055ec:	f47f af50 	bne.w	8005490 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055f0:	4a24      	ldr	r2, [pc, #144]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	05d2      	lsls	r2, r2, #23
 80055f6:	d502      	bpl.n	80055fe <HAL_RCC_OscConfig+0x1fa>
 80055f8:	69e2      	ldr	r2, [r4, #28]
 80055fa:	2a80      	cmp	r2, #128	@ 0x80
 80055fc:	d1f1      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055fe:	4921      	ldr	r1, [pc, #132]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005600:	6a20      	ldr	r0, [r4, #32]
 8005602:	68ca      	ldr	r2, [r1, #12]
 8005604:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8005608:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800560c:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800560e:	e75d      	b.n	80054cc <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005618:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800561a:	e71b      	b.n	8005454 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800561c:	4d1a      	ldr	r5, [pc, #104]	@ (8005688 <HAL_RCC_OscConfig+0x284>)
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005624:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005626:	f7fe fc07 	bl	8003e38 <HAL_GetTick>
 800562a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800562c:	e004      	b.n	8005638 <HAL_RCC_OscConfig+0x234>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562e:	f7fe fc03 	bl	8003e38 <HAL_GetTick>
 8005632:	1b80      	subs	r0, r0, r6
 8005634:	2864      	cmp	r0, #100	@ 0x64
 8005636:	d842      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	05da      	lsls	r2, r3, #23
 800563c:	d5f7      	bpl.n	800562e <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	2b01      	cmp	r3, #1
 8005642:	f000 816f 	beq.w	8005924 <HAL_RCC_OscConfig+0x520>
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8153 	beq.w	80058f2 <HAL_RCC_OscConfig+0x4ee>
 800564c:	2b05      	cmp	r3, #5
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
 8005650:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005652:	f000 8173 	beq.w	800593c <HAL_RCC_OscConfig+0x538>
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	671a      	str	r2, [r3, #112]	@ 0x70
 800565c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005664:	f7fe fbe8 	bl	8003e38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005668:	4e06      	ldr	r6, [pc, #24]	@ (8005684 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566a:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800566e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005670:	e004      	b.n	800567c <HAL_RCC_OscConfig+0x278>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fe fbe1 	bl	8003e38 <HAL_GetTick>
 8005676:	1b40      	subs	r0, r0, r5
 8005678:	42b8      	cmp	r0, r7
 800567a:	d820      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800567e:	079b      	lsls	r3, r3, #30
 8005680:	d5f7      	bpl.n	8005672 <HAL_RCC_OscConfig+0x26e>
 8005682:	e757      	b.n	8005534 <HAL_RCC_OscConfig+0x130>
 8005684:	58024400 	.word	0x58024400
 8005688:	58024800 	.word	0x58024800
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800568c:	4da8      	ldr	r5, [pc, #672]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
 800568e:	692a      	ldr	r2, [r5, #16]
 8005690:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8005694:	2a18      	cmp	r2, #24
 8005696:	f000 80d7 	beq.w	8005848 <HAL_RCC_OscConfig+0x444>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800569a:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056a2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a4:	d06c      	beq.n	8005780 <HAL_RCC_OscConfig+0x37c>
        tickstart = HAL_GetTick();
 80056a6:	f7fe fbc7 	bl	8003e38 <HAL_GetTick>
 80056aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	019b      	lsls	r3, r3, #6
 80056b0:	f57f af44 	bpl.w	800553c <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fe fbc0 	bl	8003e38 <HAL_GetTick>
 80056b8:	1b00      	subs	r0, r0, r4
 80056ba:	2802      	cmp	r0, #2
 80056bc:	d9f6      	bls.n	80056ac <HAL_RCC_OscConfig+0x2a8>
            return HAL_TIMEOUT;
 80056be:	2003      	movs	r0, #3
}
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c2:	4d9b      	ldr	r5, [pc, #620]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056d4:	f7fe fbb0 	bl	8003e38 <HAL_GetTick>
 80056d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056da:	e004      	b.n	80056e6 <HAL_RCC_OscConfig+0x2e2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fe fbac 	bl	8003e38 <HAL_GetTick>
 80056e0:	1b80      	subs	r0, r0, r6
 80056e2:	2864      	cmp	r0, #100	@ 0x64
 80056e4:	d8eb      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	039f      	lsls	r7, r3, #14
 80056ea:	d4f7      	bmi.n	80056dc <HAL_RCC_OscConfig+0x2d8>
 80056ec:	e6c0      	b.n	8005470 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80056ee:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80056f6:	f7fe fb9f 	bl	8003e38 <HAL_GetTick>
 80056fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fc:	e004      	b.n	8005708 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fe:	f7fe fb9b 	bl	8003e38 <HAL_GetTick>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	2802      	cmp	r0, #2
 8005706:	d8da      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005708:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800570a:	0799      	lsls	r1, r3, #30
 800570c:	d4f7      	bmi.n	80056fe <HAL_RCC_OscConfig+0x2fa>
 800570e:	e6f5      	b.n	80054fc <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005716:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005718:	f7fe fb8e 	bl	8003e38 <HAL_GetTick>
 800571c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800571e:	e004      	b.n	800572a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005720:	f7fe fb8a 	bl	8003e38 <HAL_GetTick>
 8005724:	1b80      	subs	r0, r0, r6
 8005726:	2802      	cmp	r0, #2
 8005728:	d8c9      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	0498      	lsls	r0, r3, #18
 800572e:	d4f7      	bmi.n	8005720 <HAL_RCC_OscConfig+0x31c>
 8005730:	e6fd      	b.n	800552e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005738:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800573a:	f7fe fb7d 	bl	8003e38 <HAL_GetTick>
 800573e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005740:	e004      	b.n	800574c <HAL_RCC_OscConfig+0x348>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005742:	f7fe fb79 	bl	8003e38 <HAL_GetTick>
 8005746:	1b80      	subs	r0, r0, r6
 8005748:	2802      	cmp	r0, #2
 800574a:	d8b8      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	05df      	lsls	r7, r3, #23
 8005750:	d4f7      	bmi.n	8005742 <HAL_RCC_OscConfig+0x33e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	e6ba      	b.n	80054cc <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800575c:	f7fe fb6c 	bl	8003e38 <HAL_GetTick>
 8005760:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005762:	e004      	b.n	800576e <HAL_RCC_OscConfig+0x36a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005764:	f7fe fb68 	bl	8003e38 <HAL_GetTick>
 8005768:	1b80      	subs	r0, r0, r6
 800576a:	2802      	cmp	r0, #2
 800576c:	d8a7      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	0758      	lsls	r0, r3, #29
 8005772:	d4f7      	bmi.n	8005764 <HAL_RCC_OscConfig+0x360>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	e67e      	b.n	8005476 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005778:	0790      	lsls	r0, r2, #30
 800577a:	f47f af0d 	bne.w	8005598 <HAL_RCC_OscConfig+0x194>
 800577e:	e6e5      	b.n	800554c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8005780:	f7fe fb5a 	bl	8003e38 <HAL_GetTick>
 8005784:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005786:	e004      	b.n	8005792 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005788:	f7fe fb56 	bl	8003e38 <HAL_GetTick>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	2802      	cmp	r0, #2
 8005790:	d895      	bhi.n	80056be <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005792:	682b      	ldr	r3, [r5, #0]
 8005794:	0199      	lsls	r1, r3, #6
 8005796:	d4f7      	bmi.n	8005788 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800579a:	4b66      	ldr	r3, [pc, #408]	@ (8005934 <HAL_RCC_OscConfig+0x530>)
 800579c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800579e:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a0:	4965      	ldr	r1, [pc, #404]	@ (8005938 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057a2:	4e63      	ldr	r6, [pc, #396]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a4:	4313      	orrs	r3, r2
 80057a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80057a8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80057ac:	62ab      	str	r3, [r5, #40]	@ 0x28
 80057ae:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80057b2:	3b01      	subs	r3, #1
 80057b4:	3a01      	subs	r2, #1
 80057b6:	025b      	lsls	r3, r3, #9
 80057b8:	0412      	lsls	r2, r2, #16
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80057c0:	4313      	orrs	r3, r2
 80057c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80057c4:	3a01      	subs	r2, #1
 80057c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ca:	4313      	orrs	r3, r2
 80057cc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80057ce:	3a01      	subs	r2, #1
 80057d0:	0612      	lsls	r2, r2, #24
 80057d2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80057d6:	4313      	orrs	r3, r2
 80057d8:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80057da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057e2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80057e4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80057e6:	4011      	ands	r1, r2
 80057e8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80057ec:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80057f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	4313      	orrs	r3, r2
 80057f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80057fc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80057fe:	f023 0302 	bic.w	r3, r3, #2
 8005802:	4313      	orrs	r3, r2
 8005804:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005806:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800580c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005814:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005816:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800581c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800581e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800582c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800582e:	f7fe fb03 	bl	8003e38 <HAL_GetTick>
 8005832:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	019a      	lsls	r2, r3, #6
 8005838:	f53f ae80 	bmi.w	800553c <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fe fafc 	bl	8003e38 <HAL_GetTick>
 8005840:	1b00      	subs	r0, r0, r4
 8005842:	2802      	cmp	r0, #2
 8005844:	d9f6      	bls.n	8005834 <HAL_RCC_OscConfig+0x430>
 8005846:	e73a      	b.n	80056be <HAL_RCC_OscConfig+0x2ba>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800584a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800584c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584e:	f43f aec8 	beq.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005856:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005858:	428b      	cmp	r3, r1
 800585a:	f47f aec2 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800585e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005864:	429a      	cmp	r2, r3
 8005866:	f47f aebc 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800586a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800586c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8005870:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	f47f aeb5 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800587a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800587e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	f47f aeae 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005886:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005888:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800588c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	f47f aea7 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005894:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005896:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800589a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800589c:	4298      	cmp	r0, r3
 800589e:	f47f aea0 	bne.w	80055e2 <HAL_RCC_OscConfig+0x1de>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058a2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058a4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058a6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058aa:	429a      	cmp	r2, r3
 80058ac:	f43f ae46 	beq.w	800553c <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLLFRACN_DISABLE();
 80058b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
 80058b2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80058ba:	f7fe fabd 	bl	8003e38 <HAL_GetTick>
 80058be:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058c0:	f7fe faba 	bl	8003e38 <HAL_GetTick>
 80058c4:	42a8      	cmp	r0, r5
 80058c6:	d0fb      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4bc>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058c8:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
 80058ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005938 <HAL_RCC_OscConfig+0x534>)
 80058cc:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80058ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80058d0:	4003      	ands	r3, r0
 80058d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80058d6:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80058d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058e0:	e62c      	b.n	800553c <HAL_RCC_OscConfig+0x138>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80058ee:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f0:	e5b0      	b.n	8005454 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f2:	4d0f      	ldr	r5, [pc, #60]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	672b      	str	r3, [r5, #112]	@ 0x70
 8005900:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005902:	f023 0304 	bic.w	r3, r3, #4
 8005906:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005908:	f7fe fa96 	bl	8003e38 <HAL_GetTick>
 800590c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800590e:	e005      	b.n	800591c <HAL_RCC_OscConfig+0x518>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005910:	f7fe fa92 	bl	8003e38 <HAL_GetTick>
 8005914:	1b80      	subs	r0, r0, r6
 8005916:	42b8      	cmp	r0, r7
 8005918:	f63f aed1 	bhi.w	80056be <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800591c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800591e:	0798      	lsls	r0, r3, #30
 8005920:	d4f6      	bmi.n	8005910 <HAL_RCC_OscConfig+0x50c>
 8005922:	e607      	b.n	8005534 <HAL_RCC_OscConfig+0x130>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005924:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <HAL_RCC_OscConfig+0x52c>)
 8005926:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592e:	e699      	b.n	8005664 <HAL_RCC_OscConfig+0x260>
 8005930:	58024400 	.word	0x58024400
 8005934:	fffffc0c 	.word	0xfffffc0c
 8005938:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800593c:	f042 0204 	orr.w	r2, r2, #4
 8005940:	671a      	str	r2, [r3, #112]	@ 0x70
 8005942:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594a:	e68b      	b.n	8005664 <HAL_RCC_OscConfig+0x260>
    return HAL_ERROR;
 800594c:	2001      	movs	r0, #1
}
 800594e:	4770      	bx	lr

08005950 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005950:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x34>)
 8005952:	6913      	ldr	r3, [r2, #16]
 8005954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005958:	2b10      	cmp	r3, #16
 800595a:	d004      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x16>
 800595c:	2b18      	cmp	r3, #24
 800595e:	d00d      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x2c>
 8005960:	b11b      	cbz	r3, 800596a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8005962:	4809      	ldr	r0, [pc, #36]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x38>)
 8005964:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005966:	4809      	ldr	r0, [pc, #36]	@ (800598c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005968:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	069b      	lsls	r3, r3, #26
 800596e:	d507      	bpl.n	8005980 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	4807      	ldr	r0, [pc, #28]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x40>)
 8005974:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005978:	40d8      	lsrs	r0, r3
 800597a:	4770      	bx	lr
 800597c:	f7ff bcd0 	b.w	8005320 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005980:	4803      	ldr	r0, [pc, #12]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8005982:	4770      	bx	lr
 8005984:	58024400 	.word	0x58024400
 8005988:	003d0900 	.word	0x003d0900
 800598c:	007a1200 	.word	0x007a1200
 8005990:	03d09000 	.word	0x03d09000

08005994 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005994:	2800      	cmp	r0, #0
 8005996:	f000 810e 	beq.w	8005bb6 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800599a:	4a8d      	ldr	r2, [pc, #564]	@ (8005bd0 <HAL_RCC_ClockConfig+0x23c>)
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	428b      	cmp	r3, r1
{
 80059a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059ac:	d20c      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	f023 030f 	bic.w	r3, r3, #15
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b8:	6813      	ldr	r3, [r2, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	428b      	cmp	r3, r1
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80059c2:	2001      	movs	r0, #1
}
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	0758      	lsls	r0, r3, #29
 80059cc:	d50b      	bpl.n	80059e6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059ce:	4981      	ldr	r1, [pc, #516]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 80059d0:	6920      	ldr	r0, [r4, #16]
 80059d2:	698a      	ldr	r2, [r1, #24]
 80059d4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80059d8:	4290      	cmp	r0, r2
 80059da:	d904      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059dc:	698a      	ldr	r2, [r1, #24]
 80059de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059e2:	4302      	orrs	r2, r0
 80059e4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e6:	0719      	lsls	r1, r3, #28
 80059e8:	d50b      	bpl.n	8005a02 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ea:	497a      	ldr	r1, [pc, #488]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 80059ec:	6960      	ldr	r0, [r4, #20]
 80059ee:	69ca      	ldr	r2, [r1, #28]
 80059f0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80059f4:	4290      	cmp	r0, r2
 80059f6:	d904      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059f8:	69ca      	ldr	r2, [r1, #28]
 80059fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059fe:	4302      	orrs	r2, r0
 8005a00:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a02:	06da      	lsls	r2, r3, #27
 8005a04:	d50b      	bpl.n	8005a1e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a06:	4973      	ldr	r1, [pc, #460]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005a08:	69a0      	ldr	r0, [r4, #24]
 8005a0a:	69ca      	ldr	r2, [r1, #28]
 8005a0c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005a10:	4290      	cmp	r0, r2
 8005a12:	d904      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a14:	69ca      	ldr	r2, [r1, #28]
 8005a16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a1a:	4302      	orrs	r2, r0
 8005a1c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a1e:	069f      	lsls	r7, r3, #26
 8005a20:	d50b      	bpl.n	8005a3a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a22:	496c      	ldr	r1, [pc, #432]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005a24:	69e0      	ldr	r0, [r4, #28]
 8005a26:	6a0a      	ldr	r2, [r1, #32]
 8005a28:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005a2c:	4290      	cmp	r0, r2
 8005a2e:	d904      	bls.n	8005a3a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a30:	6a0a      	ldr	r2, [r1, #32]
 8005a32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a36:	4302      	orrs	r2, r0
 8005a38:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3a:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3c:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	f140 80ab 	bpl.w	8005b9a <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a44:	4e63      	ldr	r6, [pc, #396]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005a46:	68e0      	ldr	r0, [r4, #12]
 8005a48:	69b1      	ldr	r1, [r6, #24]
 8005a4a:	f001 010f 	and.w	r1, r1, #15
 8005a4e:	4288      	cmp	r0, r1
 8005a50:	d904      	bls.n	8005a5c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a52:	69b1      	ldr	r1, [r6, #24]
 8005a54:	f021 010f 	bic.w	r1, r1, #15
 8005a58:	4301      	orrs	r1, r0
 8005a5a:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d030      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a60:	4a5c      	ldr	r2, [pc, #368]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005a62:	68a1      	ldr	r1, [r4, #8]
 8005a64:	6993      	ldr	r3, [r2, #24]
 8005a66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a70:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a72:	2902      	cmp	r1, #2
 8005a74:	f000 80a1 	beq.w	8005bba <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a78:	2903      	cmp	r1, #3
 8005a7a:	f000 8098 	beq.w	8005bae <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a7e:	2901      	cmp	r1, #1
 8005a80:	f000 80a1 	beq.w	8005bc6 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a84:	075f      	lsls	r7, r3, #29
 8005a86:	d59c      	bpl.n	80059c2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a88:	4e52      	ldr	r6, [pc, #328]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	6933      	ldr	r3, [r6, #16]
 8005a90:	f023 0307 	bic.w	r3, r3, #7
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005a98:	f7fe f9ce 	bl	8003e38 <HAL_GetTick>
 8005a9c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9e:	e005      	b.n	8005aac <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa0:	f7fe f9ca 	bl	8003e38 <HAL_GetTick>
 8005aa4:	1bc0      	subs	r0, r0, r7
 8005aa6:	4540      	cmp	r0, r8
 8005aa8:	f200 808b 	bhi.w	8005bc2 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aac:	6933      	ldr	r3, [r6, #16]
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005ab8:	d1f2      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	079e      	lsls	r6, r3, #30
 8005abe:	d506      	bpl.n	8005ace <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ac0:	68e0      	ldr	r0, [r4, #12]
 8005ac2:	4944      	ldr	r1, [pc, #272]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005ac4:	698a      	ldr	r2, [r1, #24]
 8005ac6:	f002 020f 	and.w	r2, r2, #15
 8005aca:	4282      	cmp	r2, r0
 8005acc:	d869      	bhi.n	8005ba2 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ace:	4940      	ldr	r1, [pc, #256]	@ (8005bd0 <HAL_RCC_ClockConfig+0x23c>)
 8005ad0:	680a      	ldr	r2, [r1, #0]
 8005ad2:	f002 020f 	and.w	r2, r2, #15
 8005ad6:	42aa      	cmp	r2, r5
 8005ad8:	d90a      	bls.n	8005af0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	680a      	ldr	r2, [r1, #0]
 8005adc:	f022 020f 	bic.w	r2, r2, #15
 8005ae0:	432a      	orrs	r2, r5
 8005ae2:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae4:	680a      	ldr	r2, [r1, #0]
 8005ae6:	f002 020f 	and.w	r2, r2, #15
 8005aea:	42aa      	cmp	r2, r5
 8005aec:	f47f af69 	bne.w	80059c2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005af0:	0758      	lsls	r0, r3, #29
 8005af2:	d50b      	bpl.n	8005b0c <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005af4:	4937      	ldr	r1, [pc, #220]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005af6:	6920      	ldr	r0, [r4, #16]
 8005af8:	698a      	ldr	r2, [r1, #24]
 8005afa:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005afe:	4290      	cmp	r0, r2
 8005b00:	d204      	bcs.n	8005b0c <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b02:	698a      	ldr	r2, [r1, #24]
 8005b04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b08:	4302      	orrs	r2, r0
 8005b0a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0c:	0719      	lsls	r1, r3, #28
 8005b0e:	d50b      	bpl.n	8005b28 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b10:	4930      	ldr	r1, [pc, #192]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005b12:	6960      	ldr	r0, [r4, #20]
 8005b14:	69ca      	ldr	r2, [r1, #28]
 8005b16:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005b1a:	4290      	cmp	r0, r2
 8005b1c:	d204      	bcs.n	8005b28 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b1e:	69ca      	ldr	r2, [r1, #28]
 8005b20:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b24:	4302      	orrs	r2, r0
 8005b26:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b28:	06da      	lsls	r2, r3, #27
 8005b2a:	d50b      	bpl.n	8005b44 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b2c:	4929      	ldr	r1, [pc, #164]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005b2e:	69a0      	ldr	r0, [r4, #24]
 8005b30:	69ca      	ldr	r2, [r1, #28]
 8005b32:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005b36:	4290      	cmp	r0, r2
 8005b38:	d204      	bcs.n	8005b44 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b3a:	69ca      	ldr	r2, [r1, #28]
 8005b3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b40:	4302      	orrs	r2, r0
 8005b42:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b44:	069b      	lsls	r3, r3, #26
 8005b46:	d50b      	bpl.n	8005b60 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b48:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005b4a:	69e1      	ldr	r1, [r4, #28]
 8005b4c:	6a13      	ldr	r3, [r2, #32]
 8005b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b52:	4299      	cmp	r1, r3
 8005b54:	d204      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b56:	6a13      	ldr	r3, [r2, #32]
 8005b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b60:	f7ff fef6 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <HAL_RCC_ClockConfig+0x240>)
 8005b66:	4603      	mov	r3, r0
 8005b68:	481b      	ldr	r0, [pc, #108]	@ (8005bd8 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b6c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b6e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005b72:	4d1a      	ldr	r5, [pc, #104]	@ (8005bdc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b74:	f002 020f 	and.w	r2, r2, #15
 8005b78:	4c19      	ldr	r4, [pc, #100]	@ (8005be0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b7a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b7c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b7e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8005b82:	4818      	ldr	r0, [pc, #96]	@ (8005be4 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b84:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b88:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005b8a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005b8c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b8e:	40d3      	lsrs	r3, r2
 8005b90:	6023      	str	r3, [r4, #0]
}
 8005b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005b96:	f7fb bdfb 	b.w	8001790 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	f47f af60 	bne.w	8005a60 <HAL_RCC_ClockConfig+0xcc>
 8005ba0:	e795      	b.n	8005ace <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba2:	698a      	ldr	r2, [r1, #24]
 8005ba4:	f022 020f 	bic.w	r2, r2, #15
 8005ba8:	4302      	orrs	r2, r0
 8005baa:	618a      	str	r2, [r1, #24]
 8005bac:	e78f      	b.n	8005ace <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	f53f af6a 	bmi.w	8005a88 <HAL_RCC_ClockConfig+0xf4>
 8005bb4:	e705      	b.n	80059c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005bb6:	2001      	movs	r0, #1
}
 8005bb8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bba:	0398      	lsls	r0, r3, #14
 8005bbc:	f53f af64 	bmi.w	8005a88 <HAL_RCC_ClockConfig+0xf4>
 8005bc0:	e6ff      	b.n	80059c2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005bc2:	2003      	movs	r0, #3
 8005bc4:	e6fe      	b.n	80059c4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bc6:	05db      	lsls	r3, r3, #23
 8005bc8:	f53f af5e 	bmi.w	8005a88 <HAL_RCC_ClockConfig+0xf4>
 8005bcc:	e6f9      	b.n	80059c2 <HAL_RCC_ClockConfig+0x2e>
 8005bce:	bf00      	nop
 8005bd0:	52002000 	.word	0x52002000
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	080191c4 	.word	0x080191c4
 8005bdc:	20000018 	.word	0x20000018
 8005be0:	20000014 	.word	0x20000014
 8005be4:	20000020 	.word	0x20000020

08005be8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be8:	4a18      	ldr	r2, [pc, #96]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bea:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bec:	6913      	ldr	r3, [r2, #16]
 8005bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d019      	beq.n	8005c2a <HAL_RCC_GetHCLKFreq+0x42>
 8005bf6:	2b18      	cmp	r3, #24
 8005bf8:	d022      	beq.n	8005c40 <HAL_RCC_GetHCLKFreq+0x58>
 8005bfa:	b1c3      	cbz	r3, 8005c2e <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8005bfc:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bfe:	4913      	ldr	r1, [pc, #76]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x64>)
 8005c00:	4814      	ldr	r0, [pc, #80]	@ (8005c54 <HAL_RCC_GetHCLKFreq+0x6c>)
 8005c02:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c04:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c06:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c0a:	4c13      	ldr	r4, [pc, #76]	@ (8005c58 <HAL_RCC_GetHCLKFreq+0x70>)
 8005c0c:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c10:	4d12      	ldr	r5, [pc, #72]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c12:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c14:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c16:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c1a:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c1e:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c20:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8005c24:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c26:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005c28:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <HAL_RCC_GetHCLKFreq+0x78>)
 8005c2c:	e7e7      	b.n	8005bfe <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	069b      	lsls	r3, r3, #26
 8005c32:	d509      	bpl.n	8005c48 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005c38:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005c3c:	40d3      	lsrs	r3, r2
 8005c3e:	e7de      	b.n	8005bfe <HAL_RCC_GetHCLKFreq+0x16>
 8005c40:	f7ff fb6e 	bl	8005320 <HAL_RCC_GetSysClockFreq.part.0>
 8005c44:	4603      	mov	r3, r0
 8005c46:	e7da      	b.n	8005bfe <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005c4a:	e7d8      	b.n	8005bfe <HAL_RCC_GetHCLKFreq+0x16>
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	003d0900 	.word	0x003d0900
 8005c54:	080191c4 	.word	0x080191c4
 8005c58:	20000014 	.word	0x20000014
 8005c5c:	20000018 	.word	0x20000018
 8005c60:	007a1200 	.word	0x007a1200
 8005c64:	03d09000 	.word	0x03d09000

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c6a:	f7ff ffbd 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c6e:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c70:	4a05      	ldr	r2, [pc, #20]	@ (8005c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005c78:	5cd3      	ldrb	r3, [r2, r3]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c7e:	40d8      	lsrs	r0, r3
 8005c80:	bd08      	pop	{r3, pc}
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	080191c4 	.word	0x080191c4

08005c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c8c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c8e:	f7ff ffab 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c94:	4a05      	ldr	r2, [pc, #20]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ca2:	40d8      	lsrs	r0, r3
 8005ca4:	bd08      	pop	{r3, pc}
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	080191c4 	.word	0x080191c4

08005cb0 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cb0:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005cb2:	223f      	movs	r2, #63	@ 0x3f
 8005cb4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	f002 0207 	and.w	r2, r2, #7
 8005cbc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8005cc4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	f002 020f 	and.w	r2, r2, #15
 8005ccc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005cd4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005cdc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005ce4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
{
 8005ce8:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cee:	4c05      	ldr	r4, [pc, #20]	@ (8005d04 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005cf0:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cf2:	6823      	ldr	r3, [r4, #0]
}
 8005cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	600b      	str	r3, [r1, #0]
}
 8005cfe:	4770      	bx	lr
 8005d00:	58024400 	.word	0x58024400
 8005d04:	52002000 	.word	0x52002000

08005d08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d08:	b508      	push	{r3, lr}
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d0a:	f7ff ff6d 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005d0e:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005d10:	4a05      	ldr	r2, [pc, #20]	@ (8005d28 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005d18:	5cd3      	ldrb	r3, [r2, r3]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d1e:	40d8      	lsrs	r0, r3
 8005d20:	bd08      	pop	{r3, pc}
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	080191c4 	.word	0x080191c4

08005d2c <HAL_RCCEx_GetPLL2ClockFreq>:
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d2c:	4a47      	ldr	r2, [pc, #284]	@ (8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005d2e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d30:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d32:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d34:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));

  if (pll2m != 0U)
 8005d36:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d3a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d3e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005d40:	d05b      	beq.n	8005dfa <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d42:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d46:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d4a:	f004 0403 	and.w	r4, r4, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d4e:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d52:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005d56:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d5c:	ee06 1a90 	vmov	s13, r1
 8005d60:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005d64:	d003      	beq.n	8005d6e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005d66:	2c02      	cmp	r4, #2
 8005d68:	d06a      	beq.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	d04a      	beq.n	8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        break;

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d6e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005d72:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d76:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d90:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d94:	4a2d      	ldr	r2, [pc, #180]	@ (8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005d96:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005d9a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005da0:	ee07 3a10 	vmov	s14, r3
 8005da4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005da8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005daa:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005dae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005db2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005db6:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dba:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005dbc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005dc0:	ee07 3a10 	vmov	s14, r3
 8005dc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005dcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005dd0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005dd4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dd8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005dda:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005dde:	ee06 3a90 	vmov	s13, r3
 8005de2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005de6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005dea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005dee:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005df2:	ee17 3a90 	vmov	r3, s15
 8005df6:	6083      	str	r3, [r0, #8]
}
 8005df8:	4770      	bx	lr
 8005dfa:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dfc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e00:	6083      	str	r3, [r0, #8]
}
 8005e02:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e04:	6813      	ldr	r3, [r2, #0]
 8005e06:	069b      	lsls	r3, r3, #26
 8005e08:	d51d      	bpl.n	8005e46 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e0a:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e0c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005e10:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e12:	4910      	ldr	r1, [pc, #64]	@ (8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005e14:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e1c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	ee06 1a10 	vmov	s12, r1
 8005e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005e2e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005e32:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005e36:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e3e:	e7a9      	b.n	8005d94 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e40:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005e44:	e795      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e46:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8005e4a:	e792      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	4a742400 	.word	0x4a742400
 8005e54:	03d09000 	.word	0x03d09000
 8005e58:	4af42400 	.word	0x4af42400
 8005e5c:	4c742400 	.word	0x4c742400

08005e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e60:	4a47      	ldr	r2, [pc, #284]	@ (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005e62:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e64:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e66:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e68:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));

  if (pll3m != 0U)
 8005e6a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e6e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005e74:	d05b      	beq.n	8005f2e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e76:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e7a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e7e:	f004 0403 	and.w	r4, r4, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e82:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e86:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005e8a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e90:	ee06 1a90 	vmov	s13, r1
 8005e94:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005e9a:	2c02      	cmp	r4, #2
 8005e9c:	d06a      	beq.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d04a      	beq.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        break;

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea2:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005ea6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005eaa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005ec4:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005eca:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005ece:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005ed0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005ed4:	ee07 3a10 	vmov	s14, r3
 8005ed8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005edc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ede:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ee6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005eea:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005eee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005ef0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005ef4:	ee07 3a10 	vmov	s14, r3
 8005ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005efc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005f00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f04:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005f08:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f0c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005f0e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005f12:	ee06 3a90 	vmov	s13, r3
 8005f16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005f1a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005f1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f22:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005f26:	ee17 3a90 	vmov	r3, s15
 8005f2a:	6083      	str	r3, [r0, #8]
}
 8005f2c:	4770      	bx	lr
 8005f2e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f30:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f34:	6083      	str	r3, [r0, #8]
}
 8005f36:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f38:	6813      	ldr	r3, [r2, #0]
 8005f3a:	069b      	lsls	r3, r3, #26
 8005f3c:	d51d      	bpl.n	8005f7a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f3e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f40:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005f44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f46:	4910      	ldr	r1, [pc, #64]	@ (8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005f48:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f50:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	ee06 1a10 	vmov	s12, r1
 8005f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f5e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005f62:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005f66:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005f6a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f72:	e7a9      	b.n	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f74:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005f78:	e795      	b.n	8005ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f7a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8005f7e:	e792      	b.n	8005ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005f80:	58024400 	.word	0x58024400
 8005f84:	4a742400 	.word	0x4a742400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	4af42400 	.word	0x4af42400
 8005f90:	4c742400 	.word	0x4c742400

08005f94 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f98:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d149      	bne.n	8006034 <HAL_TIM_Base_Start_IT+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa2:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa4:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <HAL_TIM_Base_Start_IT+0xa0>)
 8005fa6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005faa:	bf18      	it	ne
 8005fac:	429a      	cmpne	r2, r3
{
 8005fae:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	4d21      	ldr	r5, [pc, #132]	@ (800603c <HAL_TIM_Base_Start_IT+0xa4>)
 8005fb8:	4c21      	ldr	r4, [pc, #132]	@ (8006040 <HAL_TIM_Base_Start_IT+0xa8>)
 8005fba:	42aa      	cmp	r2, r5
 8005fbc:	bf08      	it	eq
 8005fbe:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc2:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc6:	481f      	ldr	r0, [pc, #124]	@ (8006044 <HAL_TIM_Base_Start_IT+0xac>)
 8005fc8:	42a2      	cmp	r2, r4
 8005fca:	bf08      	it	eq
 8005fcc:	f043 0301 	orreq.w	r3, r3, #1
 8005fd0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd4:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd6:	42a2      	cmp	r2, r4
 8005fd8:	bf08      	it	eq
 8005fda:	f043 0301 	orreq.w	r3, r3, #1
 8005fde:	f504 6440 	add.w	r4, r4, #3072	@ 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe2:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe6:	4282      	cmp	r2, r0
 8005fe8:	bf08      	it	eq
 8005fea:	f043 0301 	orreq.w	r3, r3, #1
 8005fee:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff2:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff4:	42a2      	cmp	r2, r4
 8005ff6:	bf08      	it	eq
 8005ff8:	f043 0301 	orreq.w	r3, r3, #1
 8005ffc:	4912      	ldr	r1, [pc, #72]	@ (8006048 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ffe:	4282      	cmp	r2, r0
 8006000:	bf08      	it	eq
 8006002:	f043 0301 	orreq.w	r3, r3, #1
 8006006:	428a      	cmp	r2, r1
 8006008:	bf08      	it	eq
 800600a:	f043 0301 	orreq.w	r3, r3, #1
 800600e:	b913      	cbnz	r3, 8006016 <HAL_TIM_Base_Start_IT+0x7e>
 8006010:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <HAL_TIM_Base_Start_IT+0xb4>)
 8006012:	429a      	cmp	r2, r3
 8006014:	d107      	bne.n	8006026 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006016:	6891      	ldr	r1, [r2, #8]
 8006018:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <HAL_TIM_Base_Start_IT+0xb8>)
 800601a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	2b06      	cmp	r3, #6
 800601e:	d006      	beq.n	800602e <HAL_TIM_Base_Start_IT+0x96>
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d003      	beq.n	800602e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006026:	6813      	ldr	r3, [r2, #0]
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800602e:	2000      	movs	r0, #0
}
 8006030:	bc30      	pop	{r4, r5}
 8006032:	4770      	bx	lr
    return HAL_ERROR;
 8006034:	2001      	movs	r0, #1
}
 8006036:	4770      	bx	lr
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40010400 	.word	0x40010400
 8006048:	4000e000 	.word	0x4000e000
 800604c:	4000e400 	.word	0x4000e400
 8006050:	00010007 	.word	0x00010007

08006054 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop

08006064 <HAL_TIM_IRQHandler>:
{
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006066:	6803      	ldr	r3, [r0, #0]
{
 8006068:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 800606a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800606c:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800606e:	07a1      	lsls	r1, r4, #30
 8006070:	d501      	bpl.n	8006076 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006072:	07b2      	lsls	r2, r6, #30
 8006074:	d457      	bmi.n	8006126 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006076:	0767      	lsls	r7, r4, #29
 8006078:	d501      	bpl.n	800607e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800607a:	0770      	lsls	r0, r6, #29
 800607c:	d440      	bmi.n	8006100 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800607e:	0721      	lsls	r1, r4, #28
 8006080:	d501      	bpl.n	8006086 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006082:	0732      	lsls	r2, r6, #28
 8006084:	d42a      	bmi.n	80060dc <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006086:	06e7      	lsls	r7, r4, #27
 8006088:	d501      	bpl.n	800608e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800608a:	06f0      	lsls	r0, r6, #27
 800608c:	d413      	bmi.n	80060b6 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800608e:	07e1      	lsls	r1, r4, #31
 8006090:	d501      	bpl.n	8006096 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006092:	07f2      	lsls	r2, r6, #31
 8006094:	d465      	bmi.n	8006162 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006096:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800609a:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800609e:	d052      	beq.n	8006146 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060a0:	0633      	lsls	r3, r6, #24
 80060a2:	d466      	bmi.n	8006172 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060a4:	0660      	lsls	r0, r4, #25
 80060a6:	d501      	bpl.n	80060ac <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a8:	0671      	lsls	r1, r6, #25
 80060aa:	d473      	bmi.n	8006194 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ac:	06a2      	lsls	r2, r4, #26
 80060ae:	d501      	bpl.n	80060b4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060b0:	06b3      	lsls	r3, r6, #26
 80060b2:	d44d      	bmi.n	8006150 <HAL_TIM_IRQHandler+0xec>
}
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c0:	2208      	movs	r2, #8
 80060c2:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80060ca:	d174      	bne.n	80061b6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	f7ff ffc2 	bl	8006054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d0:	4628      	mov	r0, r5
 80060d2:	f7ff ffc3 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	2300      	movs	r3, #0
 80060d8:	772b      	strb	r3, [r5, #28]
 80060da:	e7d8      	b.n	800608e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e6:	2204      	movs	r2, #4
 80060e8:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	079b      	lsls	r3, r3, #30
 80060ee:	d15f      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f0:	f7ff ffb0 	bl	8006054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	4628      	mov	r0, r5
 80060f6:	f7ff ffb1 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	2300      	movs	r3, #0
 80060fc:	772b      	strb	r3, [r5, #28]
 80060fe:	e7c2      	b.n	8006086 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8006106:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610a:	2202      	movs	r2, #2
 800610c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006114:	d149      	bne.n	80061aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006116:	f7ff ff9d 	bl	8006054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611a:	4628      	mov	r0, r5
 800611c:	f7ff ff9e 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006120:	2300      	movs	r3, #0
 8006122:	772b      	strb	r3, [r5, #28]
 8006124:	e7ab      	b.n	800607e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006126:	f06f 0202 	mvn.w	r2, #2
 800612a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612c:	2201      	movs	r2, #1
 800612e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	d136      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	f7ff ff8d 	bl	8006054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613a:	4628      	mov	r0, r5
 800613c:	f7ff ff8e 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006140:	2300      	movs	r3, #0
 8006142:	772b      	strb	r3, [r5, #28]
 8006144:	e797      	b.n	8006076 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006146:	2f00      	cmp	r7, #0
 8006148:	d0ac      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800614a:	0637      	lsls	r7, r6, #24
 800614c:	d41a      	bmi.n	8006184 <HAL_TIM_IRQHandler+0x120>
 800614e:	e7a9      	b.n	80060a4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006156:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006158:	611a      	str	r2, [r3, #16]
}
 800615a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800615e:	f000 b8dd 	b.w	800631c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006162:	682b      	ldr	r3, [r5, #0]
 8006164:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006168:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800616a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800616c:	f7fb fb60 	bl	8001830 <HAL_TIM_PeriodElapsedCallback>
 8006170:	e791      	b.n	8006096 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8006178:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800617a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800617c:	f000 f8d0 	bl	8006320 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006180:	2f00      	cmp	r7, #0
 8006182:	d08f      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800618a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800618c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800618e:	f000 f8c9 	bl	8006324 <HAL_TIMEx_Break2Callback>
 8006192:	e787      	b.n	80060a4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800619a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800619c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800619e:	f7ff ff5f 	bl	8006060 <HAL_TIM_TriggerCallback>
 80061a2:	e783      	b.n	80060ac <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 80061a4:	f7ff ff58 	bl	8006058 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e7ca      	b.n	8006140 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	f7ff ff55 	bl	8006058 <HAL_TIM_IC_CaptureCallback>
 80061ae:	e7b7      	b.n	8006120 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 80061b0:	f7ff ff52 	bl	8006058 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e7a1      	b.n	80060fa <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	f7ff ff4f 	bl	8006058 <HAL_TIM_IC_CaptureCallback>
 80061ba:	e78c      	b.n	80060d6 <HAL_TIM_IRQHandler+0x72>

080061bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061be:	4a38      	ldr	r2, [pc, #224]	@ (80062a0 <TIM_Base_SetConfig+0xe4>)
 80061c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80061c4:	4c37      	ldr	r4, [pc, #220]	@ (80062a4 <TIM_Base_SetConfig+0xe8>)
 80061c6:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80061ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061cc:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d0:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d2:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d6:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061dc:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061de:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80061e2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80061e6:	d028      	beq.n	800623a <TIM_Base_SetConfig+0x7e>
 80061e8:	bb3a      	cbnz	r2, 800623a <TIM_Base_SetConfig+0x7e>
 80061ea:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 80062b4 <TIM_Base_SetConfig+0xf8>
 80061ee:	4560      	cmp	r0, ip
 80061f0:	d023      	beq.n	800623a <TIM_Base_SetConfig+0x7e>
 80061f2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80061f6:	4560      	cmp	r0, ip
 80061f8:	d01f      	beq.n	800623a <TIM_Base_SetConfig+0x7e>
 80061fa:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80061fe:	4560      	cmp	r0, ip
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0x7e>
 8006202:	f1be 0f00 	cmp.w	lr, #0
 8006206:	d118      	bne.n	800623a <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006208:	4a27      	ldr	r2, [pc, #156]	@ (80062a8 <TIM_Base_SetConfig+0xec>)
 800620a:	4290      	cmp	r0, r2
 800620c:	d03d      	beq.n	800628a <TIM_Base_SetConfig+0xce>
 800620e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006212:	4290      	cmp	r0, r2
 8006214:	d039      	beq.n	800628a <TIM_Base_SetConfig+0xce>
 8006216:	4c25      	ldr	r4, [pc, #148]	@ (80062ac <TIM_Base_SetConfig+0xf0>)
 8006218:	f5a2 42c8 	sub.w	r2, r2, #25600	@ 0x6400
 800621c:	4290      	cmp	r0, r2
 800621e:	bf18      	it	ne
 8006220:	42a0      	cmpne	r0, r4
 8006222:	d032      	beq.n	800628a <TIM_Base_SetConfig+0xce>
 8006224:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006228:	4290      	cmp	r0, r2
 800622a:	d02e      	beq.n	800628a <TIM_Base_SetConfig+0xce>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800622c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006230:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8006232:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006236:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	e01d      	b.n	8006276 <TIM_Base_SetConfig+0xba>
    tmpcr1 |= Structure->CounterMode;
 800623a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006240:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006248:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624e:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8006250:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006252:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006254:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006256:	b962      	cbnz	r2, 8006272 <TIM_Base_SetConfig+0xb6>
 8006258:	f1be 0f00 	cmp.w	lr, #0
 800625c:	d109      	bne.n	8006272 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625e:	4a14      	ldr	r2, [pc, #80]	@ (80062b0 <TIM_Base_SetConfig+0xf4>)
 8006260:	4b11      	ldr	r3, [pc, #68]	@ (80062a8 <TIM_Base_SetConfig+0xec>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006262:	4298      	cmp	r0, r3
 8006264:	bf18      	it	ne
 8006266:	4290      	cmpne	r0, r2
 8006268:	d003      	beq.n	8006272 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800626e:	4298      	cmp	r0, r3
 8006270:	d101      	bne.n	8006276 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006276:	2301      	movs	r3, #1
 8006278:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800627a:	6903      	ldr	r3, [r0, #16]
 800627c:	07db      	lsls	r3, r3, #31
 800627e:	d503      	bpl.n	8006288 <TIM_Base_SetConfig+0xcc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006280:	6903      	ldr	r3, [r0, #16]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6103      	str	r3, [r0, #16]
  }
}
 8006288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800628c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006290:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006296:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8006298:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800629c:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629e:	e7de      	b.n	800625e <TIM_Base_SetConfig+0xa2>
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40014800 	.word	0x40014800
 80062b0:	40014400 	.word	0x40014400
 80062b4:	40000400 	.word	0x40000400

080062b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80062b8:	b370      	cbz	r0, 8006318 <HAL_TIM_Base_Init+0x60>
{
 80062ba:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80062bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80062c0:	4604      	mov	r4, r0
 80062c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062c6:	b313      	cbz	r3, 800630e <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80062d4:	f7ff ff72 	bl	80061bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d8:	2301      	movs	r3, #1
  return HAL_OK;
 80062da:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80062e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80062e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80062ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80062fc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006300:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006304:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006308:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800630c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800630e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006312:	f7ff fe3f 	bl	8005f94 <HAL_TIM_Base_MspInit>
 8006316:	e7d7      	b.n	80062c8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8006318:	2001      	movs	r0, #1
}
 800631a:	4770      	bx	lr

0800631c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop

08006320 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop

08006324 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop

08006328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006328:	6802      	ldr	r2, [r0, #0]
 800632a:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	e842 3100 	strex	r1, r3, [r2]
 8006338:	2900      	cmp	r1, #0
 800633a:	d1f7      	bne.n	800632c <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800633c:	4c14      	ldr	r4, [pc, #80]	@ (8006390 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	f102 0308 	add.w	r3, r2, #8
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	f102 0c08 	add.w	ip, r2, #8
 800634c:	e84c 3100 	strex	r1, r3, [ip]
 8006350:	2900      	cmp	r1, #0
 8006352:	d1f4      	bne.n	800633e <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d008      	beq.n	800636c <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800635e:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006366:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800636a:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	e842 3100 	strex	r1, r3, [r2]
 8006378:	2900      	cmp	r1, #0
 800637a:	d0ee      	beq.n	800635a <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	e852 3f00 	ldrex	r3, [r2]
 8006380:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	e842 3100 	strex	r1, r3, [r2]
 8006388:	2900      	cmp	r1, #0
 800638a:	d1ef      	bne.n	800636c <UART_EndRxTransfer+0x44>
 800638c:	e7e5      	b.n	800635a <UART_EndRxTransfer+0x32>
 800638e:	bf00      	nop
 8006390:	effffffe 	.word	0xeffffffe

08006394 <HAL_UART_MspInit>:
}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop

08006398 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006398:	6901      	ldr	r1, [r0, #16]
 800639a:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800639c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800639e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a0:	49a6      	ldr	r1, [pc, #664]	@ (800663c <UART_SetConfig+0x2a4>)
{
 80063a2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a4:	6945      	ldr	r5, [r0, #20]
{
 80063a6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a8:	69c0      	ldr	r0, [r0, #28]
{
 80063aa:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ac:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ae:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063b0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063b2:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063b4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063b6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80063c2:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063c4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063c8:	4a9d      	ldr	r2, [pc, #628]	@ (8006640 <UART_SetConfig+0x2a8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	f000 811f 	beq.w	800660e <UART_SetConfig+0x276>
    tmpreg |= huart->Init.OneBitSampling;
 80063d0:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d2:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80063d4:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d6:	4a9b      	ldr	r2, [pc, #620]	@ (8006644 <UART_SetConfig+0x2ac>)
 80063d8:	4032      	ands	r2, r6
 80063da:	4311      	orrs	r1, r2
 80063dc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e0:	f022 020f 	bic.w	r2, r2, #15
 80063e4:	432a      	orrs	r2, r5
 80063e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063e8:	4a97      	ldr	r2, [pc, #604]	@ (8006648 <UART_SetConfig+0x2b0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02e      	beq.n	800644c <UART_SetConfig+0xb4>
 80063ee:	4a97      	ldr	r2, [pc, #604]	@ (800664c <UART_SetConfig+0x2b4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d020      	beq.n	8006436 <UART_SetConfig+0x9e>
 80063f4:	4a96      	ldr	r2, [pc, #600]	@ (8006650 <UART_SetConfig+0x2b8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01d      	beq.n	8006436 <UART_SetConfig+0x9e>
 80063fa:	4a96      	ldr	r2, [pc, #600]	@ (8006654 <UART_SetConfig+0x2bc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01a      	beq.n	8006436 <UART_SetConfig+0x9e>
 8006400:	4a95      	ldr	r2, [pc, #596]	@ (8006658 <UART_SetConfig+0x2c0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d017      	beq.n	8006436 <UART_SetConfig+0x9e>
 8006406:	4a95      	ldr	r2, [pc, #596]	@ (800665c <UART_SetConfig+0x2c4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d01f      	beq.n	800644c <UART_SetConfig+0xb4>
 800640c:	4a94      	ldr	r2, [pc, #592]	@ (8006660 <UART_SetConfig+0x2c8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d011      	beq.n	8006436 <UART_SetConfig+0x9e>
 8006412:	4a94      	ldr	r2, [pc, #592]	@ (8006664 <UART_SetConfig+0x2cc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <UART_SetConfig+0x9e>
 8006418:	4a93      	ldr	r2, [pc, #588]	@ (8006668 <UART_SetConfig+0x2d0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d016      	beq.n	800644c <UART_SetConfig+0xb4>
 800641e:	4a93      	ldr	r2, [pc, #588]	@ (800666c <UART_SetConfig+0x2d4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8006424:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006426:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006428:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 800642c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800642e:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006430:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006432:	b006      	add	sp, #24
 8006434:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	4b8e      	ldr	r3, [pc, #568]	@ (8006670 <UART_SetConfig+0x2d8>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b05      	cmp	r3, #5
 8006440:	d8f0      	bhi.n	8006424 <UART_SetConfig+0x8c>
 8006442:	e8df f003 	tbb	[pc, r3]
 8006446:	5f9d      	.short	0x5f9d
 8006448:	977e7169 	.word	0x977e7169
 800644c:	4b88      	ldr	r3, [pc, #544]	@ (8006670 <UART_SetConfig+0x2d8>)
 800644e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006454:	2b28      	cmp	r3, #40	@ 0x28
 8006456:	d8e5      	bhi.n	8006424 <UART_SetConfig+0x8c>
 8006458:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <UART_SetConfig+0xc8>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	080065db 	.word	0x080065db
 8006464:	08006425 	.word	0x08006425
 8006468:	08006425 	.word	0x08006425
 800646c:	08006425 	.word	0x08006425
 8006470:	08006425 	.word	0x08006425
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	08006425 	.word	0x08006425
 8006480:	08006505 	.word	0x08006505
 8006484:	08006425 	.word	0x08006425
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	08006425 	.word	0x08006425
 8006494:	08006425 	.word	0x08006425
 8006498:	08006425 	.word	0x08006425
 800649c:	08006425 	.word	0x08006425
 80064a0:	08006519 	.word	0x08006519
 80064a4:	08006425 	.word	0x08006425
 80064a8:	08006425 	.word	0x08006425
 80064ac:	08006425 	.word	0x08006425
 80064b0:	08006425 	.word	0x08006425
 80064b4:	08006425 	.word	0x08006425
 80064b8:	08006425 	.word	0x08006425
 80064bc:	08006425 	.word	0x08006425
 80064c0:	08006529 	.word	0x08006529
 80064c4:	08006425 	.word	0x08006425
 80064c8:	08006425 	.word	0x08006425
 80064cc:	08006425 	.word	0x08006425
 80064d0:	08006425 	.word	0x08006425
 80064d4:	08006425 	.word	0x08006425
 80064d8:	08006425 	.word	0x08006425
 80064dc:	08006425 	.word	0x08006425
 80064e0:	08006543 	.word	0x08006543
 80064e4:	08006425 	.word	0x08006425
 80064e8:	08006425 	.word	0x08006425
 80064ec:	08006425 	.word	0x08006425
 80064f0:	08006425 	.word	0x08006425
 80064f4:	08006425 	.word	0x08006425
 80064f8:	08006425 	.word	0x08006425
 80064fc:	08006425 	.word	0x08006425
 8006500:	08006575 	.word	0x08006575
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006504:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006508:	d040      	beq.n	800658c <UART_SetConfig+0x1f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650a:	4668      	mov	r0, sp
 800650c:	f7ff fc0e 	bl	8005d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006510:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006512:	b368      	cbz	r0, 8006570 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006514:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006516:	e018      	b.n	800654a <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006518:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800651c:	d06d      	beq.n	80065fa <UART_SetConfig+0x262>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651e:	a803      	add	r0, sp, #12
 8006520:	f7ff fc9e 	bl	8005e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006524:	9804      	ldr	r0, [sp, #16]
        break;
 8006526:	e7f4      	b.n	8006512 <UART_SetConfig+0x17a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006528:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800652c:	d05b      	beq.n	80065e6 <UART_SetConfig+0x24e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800652e:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <UART_SetConfig+0x2d8>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	0692      	lsls	r2, r2, #26
 8006534:	d54c      	bpl.n	80065d0 <UART_SetConfig+0x238>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	484e      	ldr	r0, [pc, #312]	@ (8006674 <UART_SetConfig+0x2dc>)
 800653a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800653e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006540:	e003      	b.n	800654a <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006542:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 8006546:	484c      	ldr	r0, [pc, #304]	@ (8006678 <UART_SetConfig+0x2e0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006548:	d027      	beq.n	800659a <UART_SetConfig+0x202>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654a:	4a4c      	ldr	r2, [pc, #304]	@ (800667c <UART_SetConfig+0x2e4>)
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006552:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006556:	fbb0 f0f1 	udiv	r0, r0, r1
 800655a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800655e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006562:	f1a0 0310 	sub.w	r3, r0, #16
 8006566:	4293      	cmp	r3, r2
 8006568:	f63f af5c 	bhi.w	8006424 <UART_SetConfig+0x8c>
          huart->Instance->BRR = usartdiv;
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8006570:	2000      	movs	r0, #0
 8006572:	e758      	b.n	8006426 <UART_SetConfig+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006574:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006578:	d00f      	beq.n	800659a <UART_SetConfig+0x202>
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800657e:	e7e4      	b.n	800654a <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006580:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006584:	d026      	beq.n	80065d4 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006586:	f7ff fb6f 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
        break;
 800658a:	e7c2      	b.n	8006512 <UART_SetConfig+0x17a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658c:	4668      	mov	r0, sp
 800658e:	f7ff fbcd 	bl	8005d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006592:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006594:	2800      	cmp	r0, #0
 8006596:	d0eb      	beq.n	8006570 <UART_SetConfig+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800659a:	4b38      	ldr	r3, [pc, #224]	@ (800667c <UART_SetConfig+0x2e4>)
 800659c:	6862      	ldr	r2, [r4, #4]
 800659e:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80065a2:	0853      	lsrs	r3, r2, #1
 80065a4:	fbb0 f0f1 	udiv	r0, r0, r1
 80065a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ac:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065b0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	f1a3 0210 	sub.w	r2, r3, #16
 80065b8:	428a      	cmp	r2, r1
 80065ba:	f63f af33 	bhi.w	8006424 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065be:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80065c6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c8:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60cb      	str	r3, [r1, #12]
 80065ce:	e7cf      	b.n	8006570 <UART_SetConfig+0x1d8>
          pclk = (uint32_t) HSI_VALUE;
 80065d0:	4828      	ldr	r0, [pc, #160]	@ (8006674 <UART_SetConfig+0x2dc>)
 80065d2:	e7ba      	b.n	800654a <UART_SetConfig+0x1b2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d4:	f7ff fb48 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
        break;
 80065d8:	e7dc      	b.n	8006594 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065da:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80065de:	d011      	beq.n	8006604 <UART_SetConfig+0x26c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7ff fb54 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
        break;
 80065e4:	e795      	b.n	8006512 <UART_SetConfig+0x17a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e6:	4b22      	ldr	r3, [pc, #136]	@ (8006670 <UART_SetConfig+0x2d8>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	0691      	lsls	r1, r2, #26
 80065ec:	d50d      	bpl.n	800660a <UART_SetConfig+0x272>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4820      	ldr	r0, [pc, #128]	@ (8006674 <UART_SetConfig+0x2dc>)
 80065f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80065f6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80065f8:	e7cf      	b.n	800659a <UART_SetConfig+0x202>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fa:	a803      	add	r0, sp, #12
 80065fc:	f7ff fc30 	bl	8005e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006600:	9804      	ldr	r0, [sp, #16]
        break;
 8006602:	e7c7      	b.n	8006594 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7ff fb42 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
        break;
 8006608:	e7c4      	b.n	8006594 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800660a:	481a      	ldr	r0, [pc, #104]	@ (8006674 <UART_SetConfig+0x2dc>)
 800660c:	e7c5      	b.n	800659a <UART_SetConfig+0x202>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800660e:	6898      	ldr	r0, [r3, #8]
 8006610:	4a0c      	ldr	r2, [pc, #48]	@ (8006644 <UART_SetConfig+0x2ac>)
 8006612:	4002      	ands	r2, r0
 8006614:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006616:	4916      	ldr	r1, [pc, #88]	@ (8006670 <UART_SetConfig+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006618:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800661a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661c:	f022 020f 	bic.w	r2, r2, #15
 8006620:	432a      	orrs	r2, r5
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006624:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b05      	cmp	r3, #5
 800662c:	f63f aefa 	bhi.w	8006424 <UART_SetConfig+0x8c>
 8006630:	e8df f003 	tbb	[pc, r3]
 8006634:	26525b60 	.word	0x26525b60
 8006638:	6366      	.short	0x6366
 800663a:	bf00      	nop
 800663c:	cfff69f3 	.word	0xcfff69f3
 8006640:	58000c00 	.word	0x58000c00
 8006644:	11fff4ff 	.word	0x11fff4ff
 8006648:	40011000 	.word	0x40011000
 800664c:	40004400 	.word	0x40004400
 8006650:	40004800 	.word	0x40004800
 8006654:	40004c00 	.word	0x40004c00
 8006658:	40005000 	.word	0x40005000
 800665c:	40011400 	.word	0x40011400
 8006660:	40007800 	.word	0x40007800
 8006664:	40007c00 	.word	0x40007c00
 8006668:	40011800 	.word	0x40011800
 800666c:	40011c00 	.word	0x40011c00
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	080191d4 	.word	0x080191d4
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006680:	4b23      	ldr	r3, [pc, #140]	@ (8006710 <UART_SetConfig+0x378>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	0690      	lsls	r0, r2, #26
 8006686:	d43d      	bmi.n	8006704 <UART_SetConfig+0x36c>
          pclk = (uint32_t) HSI_VALUE;
 8006688:	4822      	ldr	r0, [pc, #136]	@ (8006714 <UART_SetConfig+0x37c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800668a:	4b23      	ldr	r3, [pc, #140]	@ (8006718 <UART_SetConfig+0x380>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800668c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800668e:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006692:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006696:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800669a:	4299      	cmp	r1, r3
 800669c:	f63f aec2 	bhi.w	8006424 <UART_SetConfig+0x8c>
 80066a0:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80066a4:	f63f aebe 	bhi.w	8006424 <UART_SetConfig+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	2300      	movs	r3, #0
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7f9 fee8 	bl	8000480 <__aeabi_uldivmod>
 80066b0:	4632      	mov	r2, r6
 80066b2:	0209      	lsls	r1, r1, #8
 80066b4:	0203      	lsls	r3, r0, #8
 80066b6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80066ba:	0870      	lsrs	r0, r6, #1
 80066bc:	1818      	adds	r0, r3, r0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	f141 0100 	adc.w	r1, r1, #0
 80066c6:	f7f9 fedb 	bl	8000480 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066ca:	4b14      	ldr	r3, [pc, #80]	@ (800671c <UART_SetConfig+0x384>)
 80066cc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80066d0:	429a      	cmp	r2, r3
 80066d2:	f63f aea7 	bhi.w	8006424 <UART_SetConfig+0x8c>
 80066d6:	e749      	b.n	800656c <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d8:	a803      	add	r0, sp, #12
 80066da:	f7ff fbc1 	bl	8005e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066de:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f43f af45 	beq.w	8006570 <UART_SetConfig+0x1d8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066e6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80066e8:	e7cf      	b.n	800668a <UART_SetConfig+0x2f2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ea:	4668      	mov	r0, sp
 80066ec:	f7ff fb1e 	bl	8005d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066f0:	9801      	ldr	r0, [sp, #4]
        break;
 80066f2:	e7f5      	b.n	80066e0 <UART_SetConfig+0x348>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80066f4:	f7ff fb08 	bl	8005d08 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80066f8:	e7f2      	b.n	80066e0 <UART_SetConfig+0x348>
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80066fe:	e7c4      	b.n	800668a <UART_SetConfig+0x2f2>
        pclk = (uint32_t) CSI_VALUE;
 8006700:	4807      	ldr	r0, [pc, #28]	@ (8006720 <UART_SetConfig+0x388>)
 8006702:	e7c2      	b.n	800668a <UART_SetConfig+0x2f2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4803      	ldr	r0, [pc, #12]	@ (8006714 <UART_SetConfig+0x37c>)
 8006708:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800670c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800670e:	e7bc      	b.n	800668a <UART_SetConfig+0x2f2>
 8006710:	58024400 	.word	0x58024400
 8006714:	03d09000 	.word	0x03d09000
 8006718:	080191d4 	.word	0x080191d4
 800671c:	000ffcff 	.word	0x000ffcff
 8006720:	003d0900 	.word	0x003d0900

08006724 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006724:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006726:	071a      	lsls	r2, r3, #28
{
 8006728:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672a:	d506      	bpl.n	800673a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800672c:	6801      	ldr	r1, [r0, #0]
 800672e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006730:	684a      	ldr	r2, [r1, #4]
 8006732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006736:	4322      	orrs	r2, r4
 8006738:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800673a:	07dc      	lsls	r4, r3, #31
 800673c:	d506      	bpl.n	800674c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673e:	6801      	ldr	r1, [r0, #0]
 8006740:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006742:	684a      	ldr	r2, [r1, #4]
 8006744:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006748:	4322      	orrs	r2, r4
 800674a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674c:	0799      	lsls	r1, r3, #30
 800674e:	d506      	bpl.n	800675e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006750:	6801      	ldr	r1, [r0, #0]
 8006752:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006754:	684a      	ldr	r2, [r1, #4]
 8006756:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800675a:	4322      	orrs	r2, r4
 800675c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800675e:	075a      	lsls	r2, r3, #29
 8006760:	d506      	bpl.n	8006770 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006762:	6801      	ldr	r1, [r0, #0]
 8006764:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006766:	684a      	ldr	r2, [r1, #4]
 8006768:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800676c:	4322      	orrs	r2, r4
 800676e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	06dc      	lsls	r4, r3, #27
 8006772:	d506      	bpl.n	8006782 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006774:	6801      	ldr	r1, [r0, #0]
 8006776:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800677e:	4322      	orrs	r2, r4
 8006780:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006782:	0699      	lsls	r1, r3, #26
 8006784:	d506      	bpl.n	8006794 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006786:	6801      	ldr	r1, [r0, #0]
 8006788:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800678a:	688a      	ldr	r2, [r1, #8]
 800678c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006790:	4322      	orrs	r2, r4
 8006792:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006794:	065a      	lsls	r2, r3, #25
 8006796:	d50a      	bpl.n	80067ae <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006798:	6801      	ldr	r1, [r0, #0]
 800679a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800679c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800679e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80067a6:	ea42 0204 	orr.w	r2, r2, r4
 80067aa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ac:	d00b      	beq.n	80067c6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	d506      	bpl.n	80067c0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067b2:	6802      	ldr	r2, [r0, #0]
 80067b4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80067b6:	6853      	ldr	r3, [r2, #4]
 80067b8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80067bc:	430b      	orrs	r3, r1
 80067be:	6053      	str	r3, [r2, #4]
}
 80067c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c6:	684a      	ldr	r2, [r1, #4]
 80067c8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80067ca:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80067ce:	4322      	orrs	r2, r4
 80067d0:	604a      	str	r2, [r1, #4]
 80067d2:	e7ec      	b.n	80067ae <UART_AdvFeatureConfig+0x8a>

080067d4 <UART_WaitOnFlagUntilTimeout>:
{
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	9f08      	ldr	r7, [sp, #32]
 80067da:	460d      	mov	r5, r1
 80067dc:	4680      	mov	r8, r0
 80067de:	4616      	mov	r6, r2
 80067e0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e2:	6801      	ldr	r1, [r0, #0]
 80067e4:	e001      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	1c78      	adds	r0, r7, #1
 80067e8:	d10b      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ea:	69cc      	ldr	r4, [r1, #28]
 80067ec:	ea35 0404 	bics.w	r4, r5, r4
 80067f0:	bf0c      	ite	eq
 80067f2:	2401      	moveq	r4, #1
 80067f4:	2400      	movne	r4, #0
 80067f6:	42b4      	cmp	r4, r6
 80067f8:	d0f5      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006802:	f7fd fb19 	bl	8003e38 <HAL_GetTick>
 8006806:	eba0 0009 	sub.w	r0, r0, r9
 800680a:	fab7 f487 	clz	r4, r7
 800680e:	42b8      	cmp	r0, r7
 8006810:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8006814:	d81b      	bhi.n	800684e <UART_WaitOnFlagUntilTimeout+0x7a>
 8006816:	b1d7      	cbz	r7, 800684e <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006818:	f8d8 1000 	ldr.w	r1, [r8]
 800681c:	680b      	ldr	r3, [r1, #0]
 800681e:	075a      	lsls	r2, r3, #29
 8006820:	d5e3      	bpl.n	80067ea <UART_WaitOnFlagUntilTimeout+0x16>
 8006822:	2d80      	cmp	r5, #128	@ 0x80
 8006824:	d0e1      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x16>
 8006826:	2d40      	cmp	r5, #64	@ 0x40
 8006828:	d0df      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800682a:	69cb      	ldr	r3, [r1, #28]
 800682c:	f013 0a08 	ands.w	sl, r3, #8
 8006830:	d10f      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006832:	69ca      	ldr	r2, [r1, #28]
 8006834:	0513      	lsls	r3, r2, #20
 8006836:	d5d8      	bpl.n	80067ea <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800683c:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683e:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 8006840:	f7ff fd72 	bl	8006328 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006844:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8006846:	f888 a084 	strb.w	sl, [r8, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800684a:	f8c8 2090 	str.w	r2, [r8, #144]	@ 0x90
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e7d4      	b.n	80067fc <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006852:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8006854:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006856:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8006858:	f7ff fd66 	bl	8006328 <UART_EndRxTransfer>
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800685e:	f8c8 5090 	str.w	r5, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8006862:	f888 4084 	strb.w	r4, [r8, #132]	@ 0x84
          return HAL_ERROR;
 8006866:	e7c9      	b.n	80067fc <UART_WaitOnFlagUntilTimeout+0x28>

08006868 <HAL_UART_Transmit>:
{
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800686e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006872:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8006874:	2b20      	cmp	r3, #32
 8006876:	d13b      	bne.n	80068f0 <HAL_UART_Transmit+0x88>
    if ((pData == NULL) || (Size == 0U))
 8006878:	460d      	mov	r5, r1
 800687a:	b3a9      	cbz	r1, 80068e8 <HAL_UART_Transmit+0x80>
 800687c:	fab2 f882 	clz	r8, r2
 8006880:	4617      	mov	r7, r2
 8006882:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8006886:	b37a      	cbz	r2, 80068e8 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006888:	2321      	movs	r3, #33	@ 0x21
 800688a:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	f8c0 8090 	str.w	r8, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006890:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8006894:	f7fd fad0 	bl	8003e38 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006898:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800689a:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80068a2:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 80068a6:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	d109      	bne.n	80068be <HAL_UART_Transmit+0x56>
 80068aa:	e03b      	b.n	8006924 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80068b0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80068b2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80068b6:	3a01      	subs	r2, #1
 80068b8:	b292      	uxth	r2, r2
 80068ba:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068be:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	b1fb      	cbz	r3, 8006906 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068c6:	463b      	mov	r3, r7
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	@ 0x80
 80068cc:	4620      	mov	r0, r4
 80068ce:	9600      	str	r6, [sp, #0]
 80068d0:	f7ff ff80 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 80068d4:	b980      	cbnz	r0, 80068f8 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d6:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80068d8:	2d00      	cmp	r5, #0
 80068da:	d1e7      	bne.n	80068ac <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068dc:	f838 2b02 	ldrh.w	r2, [r8], #2
 80068e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068e6:	e7e4      	b.n	80068b2 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80068e8:	2001      	movs	r0, #1
}
 80068ea:	b002      	add	sp, #8
 80068ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80068f0:	2002      	movs	r0, #2
}
 80068f2:	b002      	add	sp, #8
 80068f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->gState = HAL_UART_STATE_READY;
 80068f8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80068fa:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80068fc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006900:	b002      	add	sp, #8
 8006902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006906:	463b      	mov	r3, r7
 8006908:	2200      	movs	r2, #0
 800690a:	2140      	movs	r1, #64	@ 0x40
 800690c:	4620      	mov	r0, r4
 800690e:	9600      	str	r6, [sp, #0]
 8006910:	f7ff ff60 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8006914:	2800      	cmp	r0, #0
 8006916:	d1ef      	bne.n	80068f8 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 8006918:	2320      	movs	r3, #32
 800691a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800691e:	b002      	add	sp, #8
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1c9      	bne.n	80068be <HAL_UART_Transmit+0x56>
 800692a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800692c:	461d      	mov	r5, r3
 800692e:	e7c6      	b.n	80068be <HAL_UART_Transmit+0x56>

08006930 <UART_CheckIdleState>:
{
 8006930:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	2600      	movs	r6, #0
{
 8006934:	4604      	mov	r4, r0
 8006936:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800693c:	f7fd fa7c 	bl	8003e38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006940:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006942:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	0712      	lsls	r2, r2, #28
 8006948:	d410      	bmi.n	800696c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	075b      	lsls	r3, r3, #29
 800694e:	d427      	bmi.n	80069a0 <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006952:	2220      	movs	r2, #32
  return HAL_OK;
 8006954:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006956:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800695a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006960:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006962:	2300      	movs	r3, #0
 8006964:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006968:	b002      	add	sp, #8
 800696a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8006970:	4603      	mov	r3, r0
 8006972:	4632      	mov	r2, r6
 8006974:	4620      	mov	r0, r4
 8006976:	9100      	str	r1, [sp, #0]
 8006978:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800697c:	f7ff ff2a 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	2800      	cmp	r0, #0
 8006984:	d0e1      	beq.n	800694a <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800698a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	e843 2100 	strex	r1, r2, [r3]
 8006992:	2900      	cmp	r1, #0
 8006994:	d1f7      	bne.n	8006986 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8006996:	2320      	movs	r3, #32
 8006998:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800699c:	2003      	movs	r0, #3
 800699e:	e7e0      	b.n	8006962 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a0:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 80069a4:	462b      	mov	r3, r5
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ac:	9000      	str	r0, [sp, #0]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff ff10 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d0cb      	beq.n	8006950 <UART_CheckIdleState+0x20>
 80069b8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069be:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	e843 2100 	strex	r1, r2, [r3]
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d1f7      	bne.n	80069ba <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	f103 0208 	add.w	r2, r3, #8
 80069ce:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	f103 0008 	add.w	r0, r3, #8
 80069da:	e840 2100 	strex	r1, r2, [r0]
 80069de:	2900      	cmp	r1, #0
 80069e0:	d1f3      	bne.n	80069ca <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 80069e2:	2320      	movs	r3, #32
 80069e4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80069e8:	e7d8      	b.n	800699c <UART_CheckIdleState+0x6c>
 80069ea:	bf00      	nop

080069ec <HAL_UART_Init>:
  if (huart == NULL)
 80069ec:	b380      	cbz	r0, 8006a50 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80069ee:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 80069f2:	b510      	push	{r4, lr}
 80069f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	b333      	cbz	r3, 8006a46 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80069f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069fa:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 80069fe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a0a:	b9c1      	cbnz	r1, 8006a3e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff fcc3 	bl	8006398 <UART_SetConfig>
 8006a12:	2801      	cmp	r0, #1
 8006a14:	d011      	beq.n	8006a3a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a16:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006a18:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a28:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
}
 8006a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006a34:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006a36:	f7ff bf7b 	b.w	8006930 <UART_CheckIdleState>
}
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff fe70 	bl	8006724 <UART_AdvFeatureConfig>
 8006a44:	e7e2      	b.n	8006a0c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8006a46:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006a4a:	f7ff fca3 	bl	8006394 <HAL_UART_MspInit>
 8006a4e:	e7d3      	b.n	80069f8 <HAL_UART_Init+0xc>
}
 8006a50:	2001      	movs	r0, #1
 8006a52:	4770      	bx	lr

08006a54 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006a54:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006a56:	2020      	movs	r0, #32
 8006a58:	f002 fd16 	bl	8009488 <pvPortMalloc>

		if( pxEventBits != NULL )
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	b128      	cbz	r0, 8006a6c <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8006a60:	2500      	movs	r5, #0
 8006a62:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006a66:	f000 f8e3 	bl	8006c30 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006a6a:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}

08006a70 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006a70:	b1c0      	cbz	r0, 8006aa4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a72:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
{
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	460c      	mov	r4, r1
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a7c:	d209      	bcs.n	8006a92 <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 8006a7e:	b9d1      	cbnz	r1, 8006ab6 <xEventGroupWaitBits+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	e7fe      	b.n	8006a90 <xEventGroupWaitBits+0x20>
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006aa2:	e7fe      	b.n	8006aa2 <xEventGroupWaitBits+0x32>
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8006ab4:	e7fe      	b.n	8006ab4 <xEventGroupWaitBits+0x44>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ab6:	4617      	mov	r7, r2
 8006ab8:	461e      	mov	r6, r3
 8006aba:	4605      	mov	r5, r0
 8006abc:	f001 fe2c 	bl	8008718 <xTaskGetSchedulerState>
 8006ac0:	bb08      	cbnz	r0, 8006b06 <xEventGroupWaitBits+0x96>
 8006ac2:	9b06      	ldr	r3, [sp, #24]
 8006ac4:	b973      	cbnz	r3, 8006ae4 <xEventGroupWaitBits+0x74>
	}
	#endif

	vTaskSuspendAll();
 8006ac6:	f001 f9f7 	bl	8007eb8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006aca:	f8d5 8000 	ldr.w	r8, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8006ace:	b996      	cbnz	r6, 8006af6 <xEventGroupWaitBits+0x86>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006ad0:	ea14 0f08 	tst.w	r4, r8
 8006ad4:	d012      	beq.n	8006afc <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 8006ad6:	b18f      	cbz	r7, 8006afc <xEventGroupWaitBits+0x8c>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006ad8:	ea28 0404 	bic.w	r4, r8, r4
 8006adc:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
 8006ade:	f001 fb3f 	bl	8008160 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8006ae2:	e00d      	b.n	8006b00 <xEventGroupWaitBits+0x90>
 8006ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	e7fe      	b.n	8006af4 <xEventGroupWaitBits+0x84>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006af6:	ea34 0308 	bics.w	r3, r4, r8
 8006afa:	d0ec      	beq.n	8006ad6 <xEventGroupWaitBits+0x66>
	xAlreadyYielded = xTaskResumeAll();
 8006afc:	f001 fb30 	bl	8008160 <xTaskResumeAll>
}
 8006b00:	4640      	mov	r0, r8
 8006b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	vTaskSuspendAll();
 8006b06:	f001 f9d7 	bl	8007eb8 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006b0a:	f8d5 8000 	ldr.w	r8, [r5]
	if( xWaitForAllBits == pdFALSE )
 8006b0e:	bb26      	cbnz	r6, 8006b5a <xEventGroupWaitBits+0xea>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006b10:	ea14 0f08 	tst.w	r4, r8
 8006b14:	d1df      	bne.n	8006ad6 <xEventGroupWaitBits+0x66>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006b16:	9b06      	ldr	r3, [sp, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0ef      	beq.n	8006afc <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 8006b1c:	1e39      	subs	r1, r7, #0
 8006b1e:	bf18      	it	ne
 8006b20:	2101      	movne	r1, #1
 8006b22:	0609      	lsls	r1, r1, #24
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006b24:	4321      	orrs	r1, r4
 8006b26:	9a06      	ldr	r2, [sp, #24]
 8006b28:	1d28      	adds	r0, r5, #4
 8006b2a:	f001 fbb9 	bl	80082a0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8006b2e:	f001 fb17 	bl	8008160 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006b32:	b948      	cbnz	r0, 8006b48 <xEventGroupWaitBits+0xd8>
			portYIELD_WITHIN_API();
 8006b34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8006b48:	f001 ff26 	bl	8008998 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006b4c:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 8006b50:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006b52:	d00f      	beq.n	8006b74 <xEventGroupWaitBits+0x104>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006b54:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
	return uxReturn;
 8006b58:	e7d2      	b.n	8006b00 <xEventGroupWaitBits+0x90>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006b5a:	ea34 0308 	bics.w	r3, r4, r8
 8006b5e:	d0ba      	beq.n	8006ad6 <xEventGroupWaitBits+0x66>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ca      	beq.n	8006afc <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 8006b66:	1e39      	subs	r1, r7, #0
 8006b68:	bf18      	it	ne
 8006b6a:	2101      	movne	r1, #1
 8006b6c:	0609      	lsls	r1, r1, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006b6e:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8006b72:	e7d7      	b.n	8006b24 <xEventGroupWaitBits+0xb4>
			taskENTER_CRITICAL();
 8006b74:	f002 fdc6 	bl	8009704 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8006b78:	f8d5 8000 	ldr.w	r8, [r5]
	if( xWaitForAllBits == pdFALSE )
 8006b7c:	b94e      	cbnz	r6, 8006b92 <xEventGroupWaitBits+0x122>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006b7e:	ea14 0f08 	tst.w	r4, r8
 8006b82:	d003      	beq.n	8006b8c <xEventGroupWaitBits+0x11c>
					if( xClearOnExit != pdFALSE )
 8006b84:	b117      	cbz	r7, 8006b8c <xEventGroupWaitBits+0x11c>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006b86:	ea28 0404 	bic.w	r4, r8, r4
 8006b8a:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
 8006b8c:	f002 fddc 	bl	8009748 <vPortExitCritical>
 8006b90:	e7e0      	b.n	8006b54 <xEventGroupWaitBits+0xe4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006b92:	ea34 0308 	bics.w	r3, r4, r8
 8006b96:	d1f9      	bne.n	8006b8c <xEventGroupWaitBits+0x11c>
 8006b98:	e7f4      	b.n	8006b84 <xEventGroupWaitBits+0x114>
 8006b9a:	bf00      	nop

08006b9c <xEventGroupSetBits>:
{
 8006b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d03c      	beq.n	8006c1e <xEventGroupSetBits+0x82>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006ba4:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8006ba8:	460c      	mov	r4, r1
 8006baa:	d308      	bcc.n	8006bbe <xEventGroupSetBits+0x22>
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	e7fe      	b.n	8006bbc <xEventGroupSetBits+0x20>
 8006bbe:	4606      	mov	r6, r0
	vTaskSuspendAll();
 8006bc0:	f001 f97a 	bl	8007eb8 <vTaskSuspendAll>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc4:	f106 090c 	add.w	r9, r6, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006bc8:	6833      	ldr	r3, [r6, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006bca:	6935      	ldr	r5, [r6, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006bcc:	4323      	orrs	r3, r4
		while( pxListItem != pxListEnd )
 8006bce:	45a9      	cmp	r9, r5
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006bd0:	6033      	str	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 8006bd2:	d01e      	beq.n	8006c12 <xEventGroupSetBits+0x76>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006bd4:	f04f 0800 	mov.w	r8, #0
 8006bd8:	e009      	b.n	8006bee <xEventGroupSetBits+0x52>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006bda:	b137      	cbz	r7, 8006bea <xEventGroupSetBits+0x4e>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006bdc:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 8006bde:	bf48      	it	mi
 8006be0:	ea48 0804 	orrmi.w	r8, r8, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006be4:	f001 fbec 	bl	80083c0 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006be8:	6833      	ldr	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 8006bea:	45a9      	cmp	r9, r5
 8006bec:	d00f      	beq.n	8006c0e <xEventGroupSetBits+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006bee:	4628      	mov	r0, r5
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006bf0:	f043 7100 	orr.w	r1, r3, #33554432	@ 0x2000000
			pxNext = listGET_NEXT( pxListItem );
 8006bf4:	686d      	ldr	r5, [r5, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006bf6:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006bf8:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006bfc:	f012 6f80 	tst.w	r2, #67108864	@ 0x4000000
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006c00:	ea04 0703 	and.w	r7, r4, r3
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006c04:	d0e9      	beq.n	8006bda <xEventGroupSetBits+0x3e>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006c06:	42bc      	cmp	r4, r7
 8006c08:	d0e8      	beq.n	8006bdc <xEventGroupSetBits+0x40>
		while( pxListItem != pxListEnd )
 8006c0a:	45a9      	cmp	r9, r5
 8006c0c:	d1ef      	bne.n	8006bee <xEventGroupSetBits+0x52>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006c0e:	ea23 0308 	bic.w	r3, r3, r8
 8006c12:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8006c14:	f001 faa4 	bl	8008160 <xTaskResumeAll>
}
 8006c18:	6830      	ldr	r0, [r6, #0]
 8006c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8006c2e:	e7fe      	b.n	8006c2e <xEventGroupSetBits+0x92>

08006c30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c30:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c34:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c38:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c3a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c3c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c40:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop

08006c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop

08006c50 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006c50:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c52:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8006c54:	3301      	adds	r3, #1
{
 8006c56:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c58:	6894      	ldr	r4, [r2, #8]
 8006c5a:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c5e:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c60:	6091      	str	r1, [r2, #8]
}
 8006c62:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006c66:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006c68:	6003      	str	r3, [r0, #0]
}
 8006c6a:	4770      	bx	lr

08006c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c6c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c6e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c70:	1c6b      	adds	r3, r5, #1
 8006c72:	d010      	beq.n	8006c96 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c74:	f100 0308 	add.w	r3, r0, #8
 8006c78:	461c      	mov	r4, r3
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	42aa      	cmp	r2, r5
 8006c80:	d9fa      	bls.n	8006c78 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006c82:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c84:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006c86:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c88:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c8a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c8c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8006c8e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006c90:	6002      	str	r2, [r0, #0]
}
 8006c92:	bc30      	pop	{r4, r5}
 8006c94:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c96:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	e7f2      	b.n	8006c82 <vListInsert+0x16>

08006c9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c9c:	6903      	ldr	r3, [r0, #16]
{
 8006c9e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ca0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ca2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8006ca6:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cac:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cae:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8006cb0:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cb4:	bf08      	it	eq
 8006cb6:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006cb8:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8006cba:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006cbc:	3a01      	subs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8006cc0:	6818      	ldr	r0, [r3, #0]
}
 8006cc2:	4770      	bx	lr

08006cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cc8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8006cca:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ccc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cce:	b92a      	cbnz	r2, 8006cdc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd0:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cd2:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd4:	b34e      	cbz	r6, 8006d2a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8006cd6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cd8:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006cdc:	b97e      	cbnz	r6, 8006cfe <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cde:	6840      	ldr	r0, [r0, #4]
 8006ce0:	f00f fe19 	bl	8016916 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce8:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cea:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cec:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cee:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cf0:	bf24      	itt	cs
 8006cf2:	6823      	ldrcs	r3, [r4, #0]
 8006cf4:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cf6:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8006cf8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cfa:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cfe:	68c0      	ldr	r0, [r0, #12]
 8006d00:	f00f fe09 	bl	8016916 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d04:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	4251      	negs	r1, r2
 8006d0a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d10:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d12:	d202      	bcs.n	8006d1a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d14:	68a3      	ldr	r3, [r4, #8]
 8006d16:	440b      	add	r3, r1
 8006d18:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006d1a:	2e02      	cmp	r6, #2
 8006d1c:	d1eb      	bne.n	8006cf6 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d1e:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 8006d20:	f04f 0000 	mov.w	r0, #0
 8006d24:	bf38      	it	cc
 8006d26:	2501      	movcc	r5, #1
 8006d28:	e7d6      	b.n	8006cd8 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d2a:	6880      	ldr	r0, [r0, #8]
 8006d2c:	f001 fd44 	bl	80087b8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d30:	60a6      	str	r6, [r4, #8]
 8006d32:	e7d1      	b.n	8006cd8 <prvCopyDataToQueue+0x14>

08006d34 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d38:	f002 fce4 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d3c:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006d40:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	dd14      	ble.n	8006d70 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d46:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8006d4a:	e003      	b.n	8006d54 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d4c:	1e63      	subs	r3, r4, #1
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d52:	b16a      	cbz	r2, 8006d70 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d54:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d56:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d58:	b153      	cbz	r3, 8006d70 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d5a:	f001 faeb 	bl	8008334 <xTaskRemoveFromEventList>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0f4      	beq.n	8006d4c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8006d62:	f001 fbbf 	bl	80084e4 <vTaskMissedYield>
			--cTxLock;
 8006d66:	1e63      	subs	r3, r4, #1
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d1f1      	bne.n	8006d54 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d70:	23ff      	movs	r3, #255	@ 0xff
 8006d72:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d76:	f002 fce7 	bl	8009748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d7a:	f002 fcc3 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d7e:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006d82:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	dd14      	ble.n	8006db2 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d88:	f105 0610 	add.w	r6, r5, #16
 8006d8c:	e003      	b.n	8006d96 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d8e:	1e63      	subs	r3, r4, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d94:	b16a      	cbz	r2, 8006db2 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d96:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d98:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d9a:	b153      	cbz	r3, 8006db2 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d9c:	f001 faca 	bl	8008334 <xTaskRemoveFromEventList>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d0f4      	beq.n	8006d8e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8006da4:	f001 fb9e 	bl	80084e4 <vTaskMissedYield>
				--cRxLock;
 8006da8:	1e63      	subs	r3, r4, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d1f1      	bne.n	8006d96 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006db2:	23ff      	movs	r3, #255	@ 0xff
 8006db4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8006db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006dbc:	f002 bcc4 	b.w	8009748 <vPortExitCritical>

08006dc0 <xQueueGenericReset>:
{
 8006dc0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006dc2:	b1e0      	cbz	r0, 8006dfe <xQueueGenericReset+0x3e>
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8006dc8:	f002 fc9c 	bl	8009704 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd2:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dd8:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dda:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ddc:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dde:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006de0:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8006de2:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006de4:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006de6:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8006de8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006df0:	b975      	cbnz	r5, 8006e10 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	b9c3      	cbnz	r3, 8006e28 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8006df6:	f002 fca7 	bl	8009748 <vPortExitCritical>
}
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006e0e:	e7fe      	b.n	8006e0e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e10:	f104 0010 	add.w	r0, r4, #16
 8006e14:	f7ff ff0c 	bl	8006c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006e1c:	f7ff ff08 	bl	8006c30 <vListInitialise>
	taskEXIT_CRITICAL();
 8006e20:	f002 fc92 	bl	8009748 <vPortExitCritical>
}
 8006e24:	2001      	movs	r0, #1
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e28:	f104 0010 	add.w	r0, r4, #16
 8006e2c:	f001 fa82 	bl	8008334 <xTaskRemoveFromEventList>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d0e0      	beq.n	8006df6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006e34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	e7d5      	b.n	8006df6 <xQueueGenericReset+0x36>
 8006e4a:	bf00      	nop

08006e4c <xQueueGenericCreateStatic>:
	{
 8006e4c:	b530      	push	{r4, r5, lr}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e54:	b940      	cbnz	r0, 8006e68 <xQueueGenericCreateStatic+0x1c>
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8006e68:	b153      	cbz	r3, 8006e80 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e6a:	b30a      	cbz	r2, 8006eb0 <xQueueGenericCreateStatic+0x64>
 8006e6c:	b989      	cbnz	r1, 8006e92 <xQueueGenericCreateStatic+0x46>
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	e7fe      	b.n	8006e7e <xQueueGenericCreateStatic+0x32>
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e92:	b16a      	cbz	r2, 8006eb0 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e94:	2550      	movs	r5, #80	@ 0x50
 8006e96:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e98:	9d03      	ldr	r5, [sp, #12]
 8006e9a:	2d50      	cmp	r5, #80	@ 0x50
 8006e9c:	d013      	beq.n	8006ec6 <xQueueGenericCreateStatic+0x7a>
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	e7fe      	b.n	8006eae <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d0ef      	beq.n	8006e94 <xQueueGenericCreateStatic+0x48>
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	e7fe      	b.n	8006ec4 <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	bf08      	it	eq
 8006eca:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8006ecc:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ece:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8006ed0:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8006ed2:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ed4:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ed6:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8006eda:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006edc:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ede:	f7ff ff6f 	bl	8006dc0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006ee2:	9b01      	ldr	r3, [sp, #4]
	}
 8006ee4:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8006ee6:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8006eea:	b005      	add	sp, #20
 8006eec:	bd30      	pop	{r4, r5, pc}
 8006eee:	bf00      	nop

08006ef0 <xQueueGenericCreate>:
	{
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ef2:	b940      	cbnz	r0, 8006f06 <xQueueGenericCreate+0x16>
 8006ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericCreate+0x14>
 8006f06:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f08:	fb01 f000 	mul.w	r0, r1, r0
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f10:	3050      	adds	r0, #80	@ 0x50
 8006f12:	f002 fab9 	bl	8009488 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006f16:	4607      	mov	r7, r0
 8006f18:	b170      	cbz	r0, 8006f38 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f20:	b165      	cbz	r5, 8006f3c <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f22:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f26:	2101      	movs	r1, #1
 8006f28:	4638      	mov	r0, r7
 8006f2a:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8006f2c:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f30:	f7ff ff46 	bl	8006dc0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006f34:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 8006f38:	4638      	mov	r0, r7
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	e7f2      	b.n	8006f26 <xQueueGenericCreate+0x36>

08006f40 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8006f40:	b940      	cbnz	r0, 8006f54 <xQueueCreateCountingSemaphoreStatic+0x14>
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	e7fe      	b.n	8006f52 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f54:	4288      	cmp	r0, r1
	{
 8006f56:	b510      	push	{r4, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f5c:	d208      	bcs.n	8006f70 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	e7fe      	b.n	8006f6e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f70:	2102      	movs	r1, #2
 8006f72:	4613      	mov	r3, r2
 8006f74:	2200      	movs	r2, #0
 8006f76:	9100      	str	r1, [sp, #0]
 8006f78:	4611      	mov	r1, r2
 8006f7a:	f7ff ff67 	bl	8006e4c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006f7e:	b100      	cbz	r0, 8006f82 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f80:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006f82:	b002      	add	sp, #8
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	bf00      	nop

08006f88 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8006f88:	b940      	cbnz	r0, 8006f9c <xQueueCreateCountingSemaphore+0x14>
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	e7fe      	b.n	8006f9a <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f9c:	4288      	cmp	r0, r1
	{
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8006fa2:	d208      	bcs.n	8006fb6 <xQueueCreateCountingSemaphore+0x2e>
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	e7fe      	b.n	8006fb4 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f7ff ff99 	bl	8006ef0 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006fbe:	b100      	cbz	r0, 8006fc2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006fc0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <xQueueGenericSend>:
{
 8006fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d07e      	beq.n	80070ce <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	461e      	mov	r6, r3
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d069      	beq.n	80070ae <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fda:	2e02      	cmp	r6, #2
 8006fdc:	d10b      	bne.n	8006ff6 <xQueueGenericSend+0x32>
 8006fde:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d008      	beq.n	8006ff6 <xQueueGenericSend+0x32>
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ff6:	f001 fb8f 	bl	8008718 <xTaskGetSchedulerState>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d070      	beq.n	80070e0 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ffe:	f1a6 0802 	sub.w	r8, r6, #2
 8007002:	2500      	movs	r5, #0
 8007004:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8007008:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800700a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800700e:	e007      	b.n	8007020 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007010:	f002 fb9a 	bl	8009748 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007014:	4620      	mov	r0, r4
 8007016:	f7ff fe8d 	bl	8006d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800701a:	f001 f8a1 	bl	8008160 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800701e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8007020:	f002 fb70 	bl	8009704 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007024:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007026:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007028:	4290      	cmp	r0, r2
 800702a:	d365      	bcc.n	80070f8 <xQueueGenericSend+0x134>
 800702c:	f1b8 0f00 	cmp.w	r8, #0
 8007030:	d162      	bne.n	80070f8 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d077      	beq.n	8007128 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8007038:	2d00      	cmp	r5, #0
 800703a:	d044      	beq.n	80070c6 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 800703c:	f002 fb84 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 8007040:	f000 ff3a 	bl	8007eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007044:	f002 fb5e 	bl	8009704 <vPortEnterCritical>
 8007048:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800704c:	2bff      	cmp	r3, #255	@ 0xff
 800704e:	d101      	bne.n	8007054 <xQueueGenericSend+0x90>
 8007050:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 8007054:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007058:	2bff      	cmp	r3, #255	@ 0xff
 800705a:	d101      	bne.n	8007060 <xQueueGenericSend+0x9c>
 800705c:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8007060:	f002 fb72 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007064:	a901      	add	r1, sp, #4
 8007066:	a802      	add	r0, sp, #8
 8007068:	f001 f9fa 	bl	8008460 <xTaskCheckForTimeOut>
 800706c:	2800      	cmp	r0, #0
 800706e:	d15f      	bne.n	8007130 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8007070:	f002 fb48 	bl	8009704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007074:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007076:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007078:	429a      	cmp	r2, r3
 800707a:	d1c9      	bne.n	8007010 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 800707c:	f002 fb64 	bl	8009748 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007080:	9901      	ldr	r1, [sp, #4]
 8007082:	f104 0010 	add.w	r0, r4, #16
 8007086:	f001 f8f1 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff fe52 	bl	8006d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007090:	f001 f866 	bl	8008160 <xTaskResumeAll>
 8007094:	2800      	cmp	r0, #0
 8007096:	d1c2      	bne.n	800701e <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8007098:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800709c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	e7b7      	b.n	800701e <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d092      	beq.n	8006fda <xQueueGenericSend+0x16>
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	e7fe      	b.n	80070c4 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070c6:	a802      	add	r0, sp, #8
 80070c8:	f001 f9be 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070cc:	e7b6      	b.n	800703c <xQueueGenericSend+0x78>
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80070de:	e7fe      	b.n	80070de <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d08b      	beq.n	8006ffe <xQueueGenericSend+0x3a>
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	e7fe      	b.n	80070f6 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070f8:	4632      	mov	r2, r6
 80070fa:	4639      	mov	r1, r7
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7ff fde1 	bl	8006cc4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007102:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007104:	b9d3      	cbnz	r3, 800713c <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 8007106:	b148      	cbz	r0, 800711c <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8007108:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800710c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007110:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800711c:	f002 fb14 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 8007120:	2001      	movs	r0, #1
}
 8007122:	b005      	add	sp, #20
 8007124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8007128:	f002 fb0e 	bl	8009748 <vPortExitCritical>
					return errQUEUE_FULL;
 800712c:	2000      	movs	r0, #0
 800712e:	e7f8      	b.n	8007122 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8007130:	4620      	mov	r0, r4
 8007132:	f7ff fdff 	bl	8006d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007136:	f001 f813 	bl	8008160 <xTaskResumeAll>
			return errQUEUE_FULL;
 800713a:	e7f7      	b.n	800712c <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007140:	f001 f8f8 	bl	8008334 <xTaskRemoveFromEventList>
 8007144:	2800      	cmp	r0, #0
 8007146:	d0e9      	beq.n	800711c <xQueueGenericSend+0x158>
 8007148:	e7de      	b.n	8007108 <xQueueGenericSend+0x144>
 800714a:	bf00      	nop

0800714c <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 800714c:	b179      	cbz	r1, 800716e <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800714e:	2350      	movs	r3, #80	@ 0x50
	{
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007154:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b50      	cmp	r3, #80	@ 0x50
 800715a:	d011      	beq.n	8007180 <xQueueCreateMutexStatic+0x34>
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	e7fe      	b.n	800716c <xQueueCreateMutexStatic+0x20>
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800717e:	e7fe      	b.n	800717e <xQueueCreateMutexStatic+0x32>
 8007180:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 8007182:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007184:	2101      	movs	r1, #1
 8007186:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007188:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800718a:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800718c:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007190:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8007192:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007196:	f7ff fe13 	bl	8006dc0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800719a:	4633      	mov	r3, r6
 800719c:	4632      	mov	r2, r6
 800719e:	4631      	mov	r1, r6
 80071a0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80071a2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071a6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071a8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071aa:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071ac:	f7ff ff0a 	bl	8006fc4 <xQueueGenericSend>
	}
 80071b0:	4620      	mov	r0, r4
 80071b2:	b002      	add	sp, #8
 80071b4:	bd70      	pop	{r4, r5, r6, pc}
 80071b6:	bf00      	nop

080071b8 <xQueueGiveMutexRecursive>:
	{
 80071b8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80071ba:	b138      	cbz	r0, 80071cc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071bc:	6885      	ldr	r5, [r0, #8]
 80071be:	4604      	mov	r4, r0
 80071c0:	f001 faa4 	bl	800870c <xTaskGetCurrentTaskHandle>
 80071c4:	4285      	cmp	r5, r0
 80071c6:	d00a      	beq.n	80071de <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80071c8:	2000      	movs	r0, #0
	}
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80071dc:	e7fe      	b.n	80071dc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80071e4:	b10b      	cbz	r3, 80071ea <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 80071e6:	2001      	movs	r0, #1
	}
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80071ea:	461a      	mov	r2, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff fee8 	bl	8006fc4 <xQueueGenericSend>
 80071f4:	e7f7      	b.n	80071e6 <xQueueGiveMutexRecursive+0x2e>
 80071f6:	bf00      	nop

080071f8 <xQueueCreateMutex>:
	{
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071fc:	2050      	movs	r0, #80	@ 0x50
 80071fe:	f002 f943 	bl	8009488 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007202:	4604      	mov	r4, r0
 8007204:	b198      	cbz	r0, 800722e <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007206:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007208:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800720a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800720c:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8007210:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007214:	f7ff fdd4 	bl	8006dc0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007218:	4633      	mov	r3, r6
 800721a:	4632      	mov	r2, r6
 800721c:	4631      	mov	r1, r6
 800721e:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007220:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007224:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007226:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007228:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800722a:	f7ff fecb 	bl	8006fc4 <xQueueGenericSend>
	}
 800722e:	4620      	mov	r0, r4
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	bf00      	nop

08007234 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8007234:	2800      	cmp	r0, #0
 8007236:	d04b      	beq.n	80072d0 <xQueueGenericSendFromISR+0x9c>
{
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	460e      	mov	r6, r1
 800723e:	4604      	mov	r4, r0
 8007240:	4617      	mov	r7, r2
 8007242:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007244:	b339      	cbz	r1, 8007296 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007246:	2d02      	cmp	r5, #2
 8007248:	d10b      	bne.n	8007262 <xQueueGenericSendFromISR+0x2e>
 800724a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d008      	beq.n	8007262 <xQueueGenericSendFromISR+0x2e>
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	e7fe      	b.n	8007260 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007262:	f002 fb6b 	bl	800993c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007266:	f3ef 8811 	mrs	r8, BASEPRI
 800726a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800727a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800727c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800727e:	429a      	cmp	r2, r3
 8007280:	d315      	bcc.n	80072ae <xQueueGenericSendFromISR+0x7a>
 8007282:	f1a5 0002 	sub.w	r0, r5, #2
 8007286:	fab0 f080 	clz	r0, r0
 800728a:	0940      	lsrs	r0, r0, #5
 800728c:	b978      	cbnz	r0, 80072ae <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728e:	f388 8811 	msr	BASEPRI, r8
}
 8007292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007296:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0d4      	beq.n	8007246 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	e7fe      	b.n	80072ac <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ae:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80072b0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072b4:	4631      	mov	r1, r6
 80072b6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80072b8:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072bc:	f7ff fd02 	bl	8006cc4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80072c0:	1c6b      	adds	r3, r5, #1
 80072c2:	d00e      	beq.n	80072e2 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c4:	1c6b      	adds	r3, r5, #1
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 80072cc:	2001      	movs	r0, #1
 80072ce:	e7de      	b.n	800728e <xQueueGenericSendFromISR+0x5a>
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f1      	beq.n	80072cc <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80072ec:	f001 f822 	bl	8008334 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d0eb      	beq.n	80072cc <xQueueGenericSendFromISR+0x98>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	d0e9      	beq.n	80072cc <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	e7e6      	b.n	80072cc <xQueueGenericSendFromISR+0x98>
 80072fe:	bf00      	nop

08007300 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007300:	b360      	cbz	r0, 800735c <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007302:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007308:	b143      	cbz	r3, 800731c <xQueueGiveFromISR+0x1c>
 800730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	e7fe      	b.n	800731a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800731c:	6803      	ldr	r3, [r0, #0]
 800731e:	460d      	mov	r5, r1
 8007320:	b32b      	cbz	r3, 800736e <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007322:	f002 fb0b 	bl	800993c <vPortValidateInterruptPriority>
	__asm volatile
 8007326:	f3ef 8611 	mrs	r6, BASEPRI
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800733a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800733c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800733e:	429a      	cmp	r2, r3
 8007340:	d921      	bls.n	8007386 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007342:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007346:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8007348:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734a:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800734c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 800734e:	d01e      	beq.n	800738e <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007350:	3301      	adds	r3, #1
 8007352:	b25b      	sxtb	r3, r3
 8007354:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8007358:	2001      	movs	r0, #1
 800735a:	e015      	b.n	8007388 <xQueueGiveFromISR+0x88>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800736c:	e7fe      	b.n	800736c <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800736e:	6883      	ldr	r3, [r0, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0d6      	beq.n	8007322 <xQueueGiveFromISR+0x22>
 8007374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	e7fe      	b.n	8007384 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8007386:	2000      	movs	r0, #0
	__asm volatile
 8007388:	f386 8811 	msr	BASEPRI, r6
}
 800738c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800738e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0e1      	beq.n	8007358 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007394:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007398:	f000 ffcc 	bl	8008334 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800739c:	2d00      	cmp	r5, #0
 800739e:	d0db      	beq.n	8007358 <xQueueGiveFromISR+0x58>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0d9      	beq.n	8007358 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	e7d6      	b.n	8007358 <xQueueGiveFromISR+0x58>
 80073aa:	bf00      	nop

080073ac <xQueueReceive>:
{
 80073ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ae:	b085      	sub	sp, #20
 80073b0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f000 809d 	beq.w	80074f2 <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b8:	460e      	mov	r6, r1
 80073ba:	4604      	mov	r4, r0
 80073bc:	2900      	cmp	r1, #0
 80073be:	d041      	beq.n	8007444 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073c0:	f001 f9aa 	bl	8008718 <xTaskGetSchedulerState>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d049      	beq.n	800745c <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 80073c8:	f002 f99c 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073cc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	d161      	bne.n	8007496 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80073d2:	9b01      	ldr	r3, [sp, #4]
 80073d4:	b38b      	cbz	r3, 800743a <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073d6:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80073d8:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073da:	f001 f835 	bl	8008448 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80073de:	f002 f9b3 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 80073e2:	f000 fd69 	bl	8007eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073e6:	f002 f98d 	bl	8009704 <vPortEnterCritical>
 80073ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80073ee:	2bff      	cmp	r3, #255	@ 0xff
 80073f0:	d101      	bne.n	80073f6 <xQueueReceive+0x4a>
 80073f2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80073f6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80073fa:	2bff      	cmp	r3, #255	@ 0xff
 80073fc:	d101      	bne.n	8007402 <xQueueReceive+0x56>
 80073fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007402:	f002 f9a1 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007406:	a901      	add	r1, sp, #4
 8007408:	a802      	add	r0, sp, #8
 800740a:	f001 f829 	bl	8008460 <xTaskCheckForTimeOut>
 800740e:	2800      	cmp	r0, #0
 8007410:	d130      	bne.n	8007474 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 8007412:	f002 f977 	bl	8009704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007416:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d051      	beq.n	80074c0 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 800741c:	f002 f994 	bl	8009748 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff fc87 	bl	8006d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007426:	f000 fe9b 	bl	8008160 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800742a:	f002 f96b 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800742e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007430:	2d00      	cmp	r5, #0
 8007432:	d130      	bne.n	8007496 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1d1      	bne.n	80073de <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 800743a:	f002 f985 	bl	8009748 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800743e:	2000      	movs	r0, #0
}
 8007440:	b005      	add	sp, #20
 8007442:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007444:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ba      	beq.n	80073c0 <xQueueReceive+0x14>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	e7fe      	b.n	800745a <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0b2      	beq.n	80073c8 <xQueueReceive+0x1c>
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	e7fe      	b.n	8007472 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8007474:	4620      	mov	r0, r4
 8007476:	f7ff fc5d 	bl	8006d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800747a:	f000 fe71 	bl	8008160 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800747e:	f002 f941 	bl	8009704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007482:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0d8      	beq.n	800743a <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8007488:	f002 f95e 	bl	8009748 <vPortExitCritical>
		taskENTER_CRITICAL();
 800748c:	f002 f93a 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007490:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007492:	2d00      	cmp	r5, #0
 8007494:	d0ce      	beq.n	8007434 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007496:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007498:	b152      	cbz	r2, 80074b0 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800749a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800749c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800749e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074a0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074a2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074a4:	d301      	bcc.n	80074aa <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074a6:	6821      	ldr	r1, [r4, #0]
 80074a8:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074aa:	4630      	mov	r0, r6
 80074ac:	f00f fa33 	bl	8016916 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074b0:	3d01      	subs	r5, #1
 80074b2:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	bb2b      	cbnz	r3, 8007504 <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 80074b8:	f002 f946 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 80074bc:	2001      	movs	r0, #1
 80074be:	e7bf      	b.n	8007440 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 80074c0:	f002 f942 	bl	8009748 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074c4:	9901      	ldr	r1, [sp, #4]
 80074c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80074ca:	f000 fecf 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff fc30 	bl	8006d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074d4:	f000 fe44 	bl	8008160 <xTaskResumeAll>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d1d7      	bne.n	800748c <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 80074dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80074f0:	e7cc      	b.n	800748c <xQueueReceive+0xe0>
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007502:	e7fe      	b.n	8007502 <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007504:	f104 0010 	add.w	r0, r4, #16
 8007508:	f000 ff14 	bl	8008334 <xTaskRemoveFromEventList>
 800750c:	2800      	cmp	r0, #0
 800750e:	d0d3      	beq.n	80074b8 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8007510:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007518:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	e7c8      	b.n	80074b8 <xQueueReceive+0x10c>
 8007526:	bf00      	nop

08007528 <xQueueSemaphoreTake>:
{
 8007528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752a:	b085      	sub	sp, #20
 800752c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800752e:	2800      	cmp	r0, #0
 8007530:	d056      	beq.n	80075e0 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007532:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8007534:	4604      	mov	r4, r0
 8007536:	b146      	cbz	r6, 800754a <xQueueSemaphoreTake+0x22>
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	e7fe      	b.n	8007548 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800754a:	f001 f8e5 	bl	8008718 <xTaskGetSchedulerState>
 800754e:	4605      	mov	r5, r0
 8007550:	2800      	cmp	r0, #0
 8007552:	d04e      	beq.n	80075f2 <xQueueSemaphoreTake+0xca>
 8007554:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8007556:	f002 f8d5 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800755a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 800755c:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800755e:	bb8b      	cbnz	r3, 80075c4 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 809a 	beq.w	800769c <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 8007568:	2d00      	cmp	r5, #0
 800756a:	d05c      	beq.n	8007626 <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 800756c:	f002 f8ec 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 8007570:	f000 fca2 	bl	8007eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007574:	f002 f8c6 	bl	8009704 <vPortEnterCritical>
 8007578:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800757c:	2bff      	cmp	r3, #255	@ 0xff
 800757e:	d101      	bne.n	8007584 <xQueueSemaphoreTake+0x5c>
 8007580:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8007584:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007588:	2bff      	cmp	r3, #255	@ 0xff
 800758a:	d101      	bne.n	8007590 <xQueueSemaphoreTake+0x68>
 800758c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007590:	f002 f8da 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007594:	a901      	add	r1, sp, #4
 8007596:	a802      	add	r0, sp, #8
 8007598:	f000 ff62 	bl	8008460 <xTaskCheckForTimeOut>
 800759c:	2800      	cmp	r0, #0
 800759e:	d134      	bne.n	800760a <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 80075a0:	f002 f8b0 	bl	8009704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d044      	beq.n	8007634 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 80075aa:	f002 f8cd 	bl	8009748 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7ff fbc0 	bl	8006d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075b4:	f000 fdd4 	bl	8008160 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80075b8:	f002 f8a4 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80075be:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0cd      	beq.n	8007560 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075c4:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c6:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075c8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	f000 8082 	beq.w	80076d4 <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d16d      	bne.n	80076b2 <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 80075d6:	f002 f8b7 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 80075da:	2001      	movs	r0, #1
}
 80075dc:	b005      	add	sp, #20
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80075f0:	e7fe      	b.n	80075f0 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f2:	9b01      	ldr	r3, [sp, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d038      	beq.n	800766a <xQueueSemaphoreTake+0x142>
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	e7fe      	b.n	8007608 <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 800760a:	4620      	mov	r0, r4
 800760c:	f7ff fb92 	bl	8006d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007610:	f000 fda6 	bl	8008160 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007614:	f002 f876 	bl	8009704 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007618:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800761a:	b943      	cbnz	r3, 800762e <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 800761c:	f002 f894 	bl	8009748 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8007620:	bb2e      	cbnz	r6, 800766e <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 8007622:	2000      	movs	r0, #0
 8007624:	e7da      	b.n	80075dc <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007626:	a802      	add	r0, sp, #8
 8007628:	f000 ff0e 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800762c:	e79e      	b.n	800756c <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 800762e:	f002 f88b 	bl	8009748 <vPortExitCritical>
	return xReturn;
 8007632:	e7c1      	b.n	80075b8 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8007634:	f002 f888 	bl	8009748 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b333      	cbz	r3, 800768a <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800763c:	9901      	ldr	r1, [sp, #4]
 800763e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007642:	f000 fe13 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007646:	4620      	mov	r0, r4
 8007648:	f7ff fb74 	bl	8006d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800764c:	f000 fd88 	bl	8008160 <xTaskResumeAll>
 8007650:	2800      	cmp	r0, #0
 8007652:	d1b1      	bne.n	80075b8 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8007654:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	e7a6      	b.n	80075b8 <xQueueSemaphoreTake+0x90>
 800766a:	462e      	mov	r6, r5
 800766c:	e773      	b.n	8007556 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 800766e:	f002 f849 	bl	8009704 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007672:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007674:	b119      	cbz	r1, 800767e <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007676:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007678:	6819      	ldr	r1, [r3, #0]
 800767a:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800767e:	68a0      	ldr	r0, [r4, #8]
 8007680:	f001 f8de 	bl	8008840 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007684:	f002 f860 	bl	8009748 <vPortExitCritical>
 8007688:	e7cb      	b.n	8007622 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 800768a:	f002 f83b 	bl	8009704 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800768e:	68a0      	ldr	r0, [r4, #8]
 8007690:	f001 f852 	bl	8008738 <xTaskPriorityInherit>
 8007694:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8007696:	f002 f857 	bl	8009748 <vPortExitCritical>
 800769a:	e7cf      	b.n	800763c <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800769c:	2e00      	cmp	r6, #0
 800769e:	d0f1      	beq.n	8007684 <xQueueSemaphoreTake+0x15c>
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	e7fe      	b.n	80076b0 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b2:	f104 0010 	add.w	r0, r4, #16
 80076b6:	f000 fe3d 	bl	8008334 <xTaskRemoveFromEventList>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d08b      	beq.n	80075d6 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80076be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80076c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	e780      	b.n	80075d6 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076d4:	f001 f96c 	bl	80089b0 <pvTaskIncrementMutexHeldCount>
 80076d8:	60a0      	str	r0, [r4, #8]
 80076da:	e779      	b.n	80075d0 <xQueueSemaphoreTake+0xa8>

080076dc <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80076dc:	b1a8      	cbz	r0, 800770a <xQueueTakeMutexRecursive+0x2e>
	{
 80076de:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80076e0:	6886      	ldr	r6, [r0, #8]
 80076e2:	4604      	mov	r4, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	f001 f811 	bl	800870c <xTaskGetCurrentTaskHandle>
 80076ea:	4286      	cmp	r6, r0
 80076ec:	d008      	beq.n	8007700 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80076ee:	4629      	mov	r1, r5
 80076f0:	4620      	mov	r0, r4
 80076f2:	f7ff ff19 	bl	8007528 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80076f6:	b110      	cbz	r0, 80076fe <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076f8:	68e3      	ldr	r3, [r4, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	60e3      	str	r3, [r4, #12]
	}
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007700:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8007702:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007704:	4403      	add	r3, r0
 8007706:	60e3      	str	r3, [r4, #12]
	}
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800771a:	e7fe      	b.n	800771a <xQueueTakeMutexRecursive+0x3e>

0800771c <xQueueReceiveFromISR>:
{
 800771c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007720:	b310      	cbz	r0, 8007768 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007722:	460f      	mov	r7, r1
 8007724:	4604      	mov	r4, r0
 8007726:	4616      	mov	r6, r2
 8007728:	b191      	cbz	r1, 8007750 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800772a:	f002 f907 	bl	800993c <vPortValidateInterruptPriority>
	__asm volatile
 800772e:	f3ef 8911 	mrs	r9, BASEPRI
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007742:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007744:	b9cd      	cbnz	r5, 800777a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8007746:	4628      	mov	r0, r5
	__asm volatile
 8007748:	f389 8811 	msr	BASEPRI, r9
}
 800774c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007750:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0e9      	beq.n	800772a <xQueueReceiveFromISR+0xe>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	e7fe      	b.n	8007766 <xQueueReceiveFromISR+0x4a>
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007778:	e7fe      	b.n	8007778 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800777a:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800777e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8007780:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007784:	b142      	cbz	r2, 8007798 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007786:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007788:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800778a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800778c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800778e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007790:	d21c      	bcs.n	80077cc <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007792:	4638      	mov	r0, r7
 8007794:	f00f f8bf 	bl	8016916 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007798:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800779a:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800779e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80077a0:	d006      	beq.n	80077b0 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80077a2:	f108 0301 	add.w	r3, r8, #1
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80077ac:	2001      	movs	r0, #1
 80077ae:	e7cb      	b.n	8007748 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0fa      	beq.n	80077ac <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077b6:	f104 0010 	add.w	r0, r4, #16
 80077ba:	f000 fdbb 	bl	8008334 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80077be:	2e00      	cmp	r6, #0
 80077c0:	d0f4      	beq.n	80077ac <xQueueReceiveFromISR+0x90>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0f2      	beq.n	80077ac <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80077c6:	2301      	movs	r3, #1
 80077c8:	6033      	str	r3, [r6, #0]
 80077ca:	e7ef      	b.n	80077ac <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077cc:	6821      	ldr	r1, [r4, #0]
 80077ce:	60e1      	str	r1, [r4, #12]
 80077d0:	e7df      	b.n	8007792 <xQueueReceiveFromISR+0x76>
 80077d2:	bf00      	nop

080077d4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80077d4:	b140      	cbz	r0, 80077e8 <uxQueueMessagesWaiting+0x14>
{
 80077d6:	b510      	push	{r4, lr}
 80077d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80077da:	f001 ff93 	bl	8009704 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80077de:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80077e0:	f001 ffb2 	bl	8009748 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd10      	pop	{r4, pc}
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80077f8:	e7fe      	b.n	80077f8 <uxQueueMessagesWaiting+0x24>
 80077fa:	bf00      	nop

080077fc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80077fc:	b108      	cbz	r0, 8007802 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80077fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007800:	4770      	bx	lr
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007812:	e7fe      	b.n	8007812 <uxQueueMessagesWaitingFromISR+0x16>

08007814 <vQueueDelete>:
	configASSERT( pxQueue );
 8007814:	b170      	cbz	r0, 8007834 <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007816:	2300      	movs	r3, #0
 8007818:	4911      	ldr	r1, [pc, #68]	@ (8007860 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800781a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800781e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007822:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007824:	4290      	cmp	r0, r2
 8007826:	d010      	beq.n	800784a <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007828:	2b08      	cmp	r3, #8
 800782a:	d1f6      	bne.n	800781a <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800782c:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007830:	b14b      	cbz	r3, 8007846 <vQueueDelete+0x32>
}
 8007832:	4770      	bx	lr
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007844:	e7fe      	b.n	8007844 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8007846:	f001 beb5 	b.w	80095b4 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800784a:	4906      	ldr	r1, [pc, #24]	@ (8007864 <vQueueDelete+0x50>)
 800784c:	2300      	movs	r3, #0
 800784e:	2200      	movs	r2, #0
 8007850:	448c      	add	ip, r1
 8007852:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007856:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e9      	bne.n	8007832 <vQueueDelete+0x1e>
 800785e:	e7f2      	b.n	8007846 <vQueueDelete+0x32>
 8007860:	20000b0c 	.word	0x20000b0c
 8007864:	20000b08 	.word	0x20000b08

08007868 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007868:	2300      	movs	r3, #0
 800786a:	4a0a      	ldr	r2, [pc, #40]	@ (8007894 <vQueueAddToRegistry+0x2c>)
	{
 800786c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800786e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007872:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8007876:	b12c      	cbz	r4, 8007884 <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007878:	3301      	adds	r3, #1
 800787a:	2b08      	cmp	r3, #8
 800787c:	d1f7      	bne.n	800786e <vQueueAddToRegistry+0x6>
	}
 800787e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007888:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800788c:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000b08 	.word	0x20000b08

08007898 <vQueueUnregisterQueue>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007898:	2300      	movs	r3, #0
 800789a:	4909      	ldr	r1, [pc, #36]	@ (80078c0 <vQueueUnregisterQueue+0x28>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800789c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80078a0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078a4:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80078a6:	4282      	cmp	r2, r0
 80078a8:	d002      	beq.n	80078b0 <vQueueUnregisterQueue+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d1f6      	bne.n	800789c <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80078ae:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80078b0:	4904      	ldr	r1, [pc, #16]	@ (80078c4 <vQueueUnregisterQueue+0x2c>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	2300      	movs	r3, #0
 80078b6:	448c      	add	ip, r1
 80078b8:	e9cc 2300 	strd	r2, r3, [ip]
				break;
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000b0c 	.word	0x20000b0c
 80078c4:	20000b08 	.word	0x20000b08

080078c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	460e      	mov	r6, r1
 80078ce:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078d0:	f001 ff18 	bl	8009704 <vPortEnterCritical>
 80078d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80078d8:	2bff      	cmp	r3, #255	@ 0xff
 80078da:	d102      	bne.n	80078e2 <vQueueWaitForMessageRestricted+0x1a>
 80078dc:	2300      	movs	r3, #0
 80078de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80078e2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80078e6:	2bff      	cmp	r3, #255	@ 0xff
 80078e8:	d102      	bne.n	80078f0 <vQueueWaitForMessageRestricted+0x28>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80078f0:	f001 ff2a 	bl	8009748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80078f6:	b123      	cbz	r3, 8007902 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078f8:	4620      	mov	r0, r4
	}
 80078fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80078fe:	f7ff ba19 	b.w	8006d34 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007902:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007906:	462a      	mov	r2, r5
 8007908:	4631      	mov	r1, r6
 800790a:	f000 fcf5 	bl	80082f8 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 800790e:	4620      	mov	r0, r4
	}
 8007910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007914:	f7ff ba0e 	b.w	8006d34 <prvUnlockQueue>

08007918 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800791c:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800791e:	f001 fef1 	bl	8009704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007922:	4a34      	ldr	r2, [pc, #208]	@ (80079f4 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007924:	4e34      	ldr	r6, [pc, #208]	@ (80079f8 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800792c:	6833      	ldr	r3, [r6, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d031      	beq.n	8007996 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007932:	4c32      	ldr	r4, [pc, #200]	@ (80079fc <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007934:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	b333      	cbz	r3, 8007988 <prvAddNewTaskToReadyList+0x70>
 800793a:	4f31      	ldr	r7, [pc, #196]	@ (8007a00 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800793c:	4a31      	ldr	r2, [pc, #196]	@ (8007a04 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800793e:	4932      	ldr	r1, [pc, #200]	@ (8007a08 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007940:	6813      	ldr	r3, [r2, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007946:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007948:	680b      	ldr	r3, [r1, #0]
 800794a:	4283      	cmp	r3, r0
 800794c:	d200      	bcs.n	8007950 <prvAddNewTaskToReadyList+0x38>
 800794e:	6008      	str	r0, [r1, #0]
 8007950:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007954:	1d29      	adds	r1, r5, #4
 8007956:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800795a:	f7ff f979 	bl	8006c50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800795e:	f001 fef3 	bl	8009748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	b173      	cbz	r3, 8007984 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007966:	6832      	ldr	r2, [r6, #0]
 8007968:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800796a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d209      	bcs.n	8007984 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007970:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007978:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	4f1d      	ldr	r7, [pc, #116]	@ (8007a00 <prvAddNewTaskToReadyList+0xe8>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4283      	cmp	r3, r0
 8007990:	d8d4      	bhi.n	800793c <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007992:	6035      	str	r5, [r6, #0]
 8007994:	e7d2      	b.n	800793c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007996:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d003      	beq.n	80079a6 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800799e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80079a0:	4f17      	ldr	r7, [pc, #92]	@ (8007a00 <prvAddNewTaskToReadyList+0xe8>)
 80079a2:	4c16      	ldr	r4, [pc, #88]	@ (80079fc <prvAddNewTaskToReadyList+0xe4>)
 80079a4:	e7ca      	b.n	800793c <prvAddNewTaskToReadyList+0x24>
 80079a6:	4f16      	ldr	r7, [pc, #88]	@ (8007a00 <prvAddNewTaskToReadyList+0xe8>)
 80079a8:	463c      	mov	r4, r7
 80079aa:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079ae:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079b0:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079b2:	f7ff f93d 	bl	8006c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079b6:	45a0      	cmp	r8, r4
 80079b8:	d1f9      	bne.n	80079ae <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079ba:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8007a20 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80079be:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8007a24 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 80079c2:	4648      	mov	r0, r9
 80079c4:	4c0d      	ldr	r4, [pc, #52]	@ (80079fc <prvAddNewTaskToReadyList+0xe4>)
 80079c6:	f7ff f933 	bl	8006c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ca:	4640      	mov	r0, r8
 80079cc:	f7ff f930 	bl	8006c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d0:	480e      	ldr	r0, [pc, #56]	@ (8007a0c <prvAddNewTaskToReadyList+0xf4>)
 80079d2:	f7ff f92d 	bl	8006c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079d6:	480e      	ldr	r0, [pc, #56]	@ (8007a10 <prvAddNewTaskToReadyList+0xf8>)
 80079d8:	f7ff f92a 	bl	8006c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079dc:	480d      	ldr	r0, [pc, #52]	@ (8007a14 <prvAddNewTaskToReadyList+0xfc>)
 80079de:	f7ff f927 	bl	8006c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80079e4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80079e6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079ea:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <prvAddNewTaskToReadyList+0x104>)
 80079ec:	f8c3 8000 	str.w	r8, [r3]
}
 80079f0:	e7a4      	b.n	800793c <prvAddNewTaskToReadyList+0x24>
 80079f2:	bf00      	nop
 80079f4:	20000b6c 	.word	0x20000b6c
 80079f8:	20001040 	.word	0x20001040
 80079fc:	20000b60 	.word	0x20000b60
 8007a00:	20000be0 	.word	0x20000be0
 8007a04:	20000b50 	.word	0x20000b50
 8007a08:	20000b64 	.word	0x20000b64
 8007a0c:	20000b9c 	.word	0x20000b9c
 8007a10:	20000b88 	.word	0x20000b88
 8007a14:	20000b70 	.word	0x20000b70
 8007a18:	20000bb4 	.word	0x20000bb4
 8007a1c:	20000bb0 	.word	0x20000bb0
 8007a20:	20000bcc 	.word	0x20000bcc
 8007a24:	20000bb8 	.word	0x20000bb8

08007a28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a2a:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8007a2c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2e:	4e15      	ldr	r6, [pc, #84]	@ (8007a84 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007a30:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007a32:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	1d18      	adds	r0, r3, #4
 8007a38:	f7ff f930 	bl	8006c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a3c:	1c63      	adds	r3, r4, #1
 8007a3e:	d100      	bne.n	8007a42 <prvAddCurrentTaskToDelayedList+0x1a>
 8007a40:	b9bf      	cbnz	r7, 8007a72 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a42:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007a48:	d307      	bcc.n	8007a5a <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0x60>)
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a54:	3104      	adds	r1, #4
 8007a56:	f7ff b909 	b.w	8006c6c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a8c <prvAddCurrentTaskToDelayedList+0x64>)
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	6831      	ldr	r1, [r6, #0]
 8007a60:	3104      	adds	r1, #4
 8007a62:	f7ff f903 	bl	8006c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a66:	4b0a      	ldr	r3, [pc, #40]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0x68>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	42aa      	cmp	r2, r5
 8007a6c:	d900      	bls.n	8007a70 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8007a6e:	601d      	str	r5, [r3, #0]
}
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	4807      	ldr	r0, [pc, #28]	@ (8007a94 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007a76:	3104      	adds	r1, #4
}
 8007a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7c:	f7ff b8e8 	b.w	8006c50 <vListInsertEnd>
 8007a80:	20000b68 	.word	0x20000b68
 8007a84:	20001040 	.word	0x20001040
 8007a88:	20000bb0 	.word	0x20000bb0
 8007a8c:	20000bb4 	.word	0x20000bb4
 8007a90:	20000b4c 	.word	0x20000b4c
 8007a94:	20000b70 	.word	0x20000b70

08007a98 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a9e:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	21a5      	movs	r1, #165	@ 0xa5
 8007aa8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007aaa:	461f      	mov	r7, r3
 8007aac:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ab0:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ab2:	f00e fe95 	bl	80167e0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ab6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ab8:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aba:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8007abe:	f1b9 0f00 	cmp.w	r9, #0
 8007ac2:	d037      	beq.n	8007b34 <prvInitialiseNewTask.constprop.0+0x9c>
 8007ac4:	f109 3cff 	add.w	ip, r9, #4294967295
 8007ac8:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8007acc:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ad0:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8007ad4:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8007ad8:	b10a      	cbz	r2, 8007ade <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ada:	45cc      	cmp	ip, r9
 8007adc:	d1f8      	bne.n	8007ad0 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ae4:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007ae6:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aea:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aec:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007aee:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007af2:	bf28      	it	cs
 8007af4:	2337      	movcs	r3, #55	@ 0x37
 8007af6:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8007af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007afa:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007afc:	f7ff f8a4 	bl	8006c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b00:	f104 0018 	add.w	r0, r4, #24
 8007b04:	f7ff f8a0 	bl	8006c48 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b08:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		pxNewTCB->ulNotifiedValue = 0;
 8007b0c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b10:	463a      	mov	r2, r7
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b16:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b18:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b1c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b1e:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b20:	f001 fdc6 	bl	80096b0 <pxPortInitialiseStack>
 8007b24:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	d001      	beq.n	8007b30 <prvInitialiseNewTask.constprop.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b2c:	f8c8 4000 	str.w	r4, [r8]
}
 8007b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b34:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 8007b38:	e7d4      	b.n	8007ae4 <prvInitialiseNewTask.constprop.0+0x4c>
 8007b3a:	bf00      	nop

08007b3c <prvIdleTask>:
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	4c21      	ldr	r4, [pc, #132]	@ (8007bc4 <prvIdleTask+0x88>)
 8007b40:	4e21      	ldr	r6, [pc, #132]	@ (8007bc8 <prvIdleTask+0x8c>)
 8007b42:	4d22      	ldr	r5, [pc, #136]	@ (8007bcc <prvIdleTask+0x90>)
 8007b44:	4f22      	ldr	r7, [pc, #136]	@ (8007bd0 <prvIdleTask+0x94>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	b353      	cbz	r3, 8007ba0 <prvIdleTask+0x64>
			taskENTER_CRITICAL();
 8007b4a:	f001 fddb 	bl	8009704 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4e:	68f3      	ldr	r3, [r6, #12]
 8007b50:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	f108 0004 	add.w	r0, r8, #4
 8007b58:	f7ff f8a0 	bl	8006c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007b68:	f001 fdee 	bl	8009748 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b6c:	f898 3059 	ldrb.w	r3, [r8, #89]	@ 0x59
 8007b70:	b163      	cbz	r3, 8007b8c <prvIdleTask+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d022      	beq.n	8007bbc <prvIdleTask+0x80>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d0e5      	beq.n	8007b46 <prvIdleTask+0xa>
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	e7fe      	b.n	8007b8a <prvIdleTask+0x4e>
				vPortFree( pxTCB->pxStack );
 8007b8c:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 8007b90:	f001 fd10 	bl	80095b4 <vPortFree>
				vPortFree( pxTCB );
 8007b94:	4640      	mov	r0, r8
 8007b96:	f001 fd0d 	bl	80095b4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1d4      	bne.n	8007b4a <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d9cf      	bls.n	8007b46 <prvIdleTask+0xa>
				taskYIELD();
 8007ba6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	e7c4      	b.n	8007b46 <prvIdleTask+0xa>
				vPortFree( pxTCB );
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	f001 fcf9 	bl	80095b4 <vPortFree>
 8007bc2:	e7c0      	b.n	8007b46 <prvIdleTask+0xa>
 8007bc4:	20000b84 	.word	0x20000b84
 8007bc8:	20000b88 	.word	0x20000b88
 8007bcc:	20000b6c 	.word	0x20000b6c
 8007bd0:	20000be0 	.word	0x20000be0

08007bd4 <xTaskCreateStatic>:
	{
 8007bd4:	b530      	push	{r4, r5, lr}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007bda:	b1c4      	cbz	r4, 8007c0e <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8007bdc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007bde:	b16d      	cbz	r5, 8007bfc <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007be0:	255c      	movs	r5, #92	@ 0x5c
 8007be2:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007be4:	9d05      	ldr	r5, [sp, #20]
 8007be6:	2d5c      	cmp	r5, #92	@ 0x5c
 8007be8:	d01a      	beq.n	8007c20 <xTaskCreateStatic+0x4c>
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	e7fe      	b.n	8007bfa <xTaskCreateStatic+0x26>
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007c0c:	e7fe      	b.n	8007c0c <xTaskCreateStatic+0x38>
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007c1e:	e7fe      	b.n	8007c1e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c20:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007c22:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c24:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c26:	9502      	str	r5, [sp, #8]
 8007c28:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007c2a:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c2c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007c2e:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c32:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c34:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c36:	9401      	str	r4, [sp, #4]
 8007c38:	f7ff ff2e 	bl	8007a98 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c3c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007c3e:	f7ff fe6b 	bl	8007918 <prvAddNewTaskToReadyList>
	}
 8007c42:	9804      	ldr	r0, [sp, #16]
 8007c44:	b007      	add	sp, #28
 8007c46:	bd30      	pop	{r4, r5, pc}

08007c48 <xTaskCreate>:
	{
 8007c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c50:	0090      	lsls	r0, r2, #2
	{
 8007c52:	4615      	mov	r5, r2
 8007c54:	4688      	mov	r8, r1
 8007c56:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c58:	f001 fc16 	bl	8009488 <pvPortMalloc>
			if( pxStack != NULL )
 8007c5c:	b1f0      	cbz	r0, 8007c9c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c5e:	4604      	mov	r4, r0
 8007c60:	205c      	movs	r0, #92	@ 0x5c
 8007c62:	f001 fc11 	bl	8009488 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007c66:	4606      	mov	r6, r0
 8007c68:	b1a8      	cbz	r0, 8007c96 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007c6a:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c6c:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c6e:	464b      	mov	r3, r9
 8007c70:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c72:	f886 4059 	strb.w	r4, [r6, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c76:	4641      	mov	r1, r8
 8007c78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	9602      	str	r6, [sp, #8]
 8007c7e:	9401      	str	r4, [sp, #4]
 8007c80:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007c82:	9400      	str	r4, [sp, #0]
 8007c84:	f7ff ff08 	bl	8007a98 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff fe45 	bl	8007918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c8e:	2001      	movs	r0, #1
	}
 8007c90:	b005      	add	sp, #20
 8007c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007c96:	4620      	mov	r0, r4
 8007c98:	f001 fc8c 	bl	80095b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007ca0:	b005      	add	sp, #20
 8007ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	bf00      	nop

08007ca8 <vTaskDelete>:
	{
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007cac:	4d36      	ldr	r5, [pc, #216]	@ (8007d88 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8007cae:	f001 fd29 	bl	8009704 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d044      	beq.n	8007d40 <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb6:	1d26      	adds	r6, r4, #4
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7fe ffef 	bl	8006c9c <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007cc0:	b11b      	cbz	r3, 8007cca <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cc2:	f104 0018 	add.w	r0, r4, #24
 8007cc6:	f7fe ffe9 	bl	8006c9c <uxListRemove>
			uxTaskNumber++;
 8007cca:	4a30      	ldr	r2, [pc, #192]	@ (8007d8c <vTaskDelete+0xe4>)
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d02a      	beq.n	8007d2e <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8007cd8:	492d      	ldr	r1, [pc, #180]	@ (8007d90 <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cda:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
				--uxCurrentNumberOfTasks;
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ce4:	b162      	cbz	r2, 8007d00 <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	d03f      	beq.n	8007d6a <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cea:	2a02      	cmp	r2, #2
 8007cec:	d00e      	beq.n	8007d0c <vTaskDelete+0x64>
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	e7fe      	b.n	8007cfe <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8007d00:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007d02:	f001 fc57 	bl	80095b4 <vPortFree>
				vPortFree( pxTCB );
 8007d06:	4620      	mov	r0, r4
 8007d08:	f001 fc54 	bl	80095b4 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d0c:	4b21      	ldr	r3, [pc, #132]	@ (8007d94 <vTaskDelete+0xec>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	b9ba      	cbnz	r2, 8007d44 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d14:	4b20      	ldr	r3, [pc, #128]	@ (8007d98 <vTaskDelete+0xf0>)
 8007d16:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1a:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8007d1c:	f001 fd14 	bl	8009748 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8007d20:	4b1e      	ldr	r3, [pc, #120]	@ (8007d9c <vTaskDelete+0xf4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b113      	cbz	r3, 8007d2c <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d012      	beq.n	8007d52 <vTaskDelete+0xaa>
	}
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007d2e:	4631      	mov	r1, r6
 8007d30:	481b      	ldr	r0, [pc, #108]	@ (8007da0 <vTaskDelete+0xf8>)
 8007d32:	f7fe ff8d 	bl	8006c50 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8007d36:	4a1b      	ldr	r2, [pc, #108]	@ (8007da4 <vTaskDelete+0xfc>)
 8007d38:	6813      	ldr	r3, [r2, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8007d3e:	e7ed      	b.n	8007d1c <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007d40:	682c      	ldr	r4, [r5, #0]
 8007d42:	e7b8      	b.n	8007cb6 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d44:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d46:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d48:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d4a:	68d2      	ldr	r2, [r2, #12]
 8007d4c:	6852      	ldr	r2, [r2, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
}
 8007d50:	e7e4      	b.n	8007d1c <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8007d52:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <vTaskDelete+0x100>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	b163      	cbz	r3, 8007d72 <vTaskDelete+0xca>
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	e7fe      	b.n	8007d68 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f001 fc22 	bl	80095b4 <vPortFree>
 8007d70:	e7cc      	b.n	8007d0c <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8007d72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
	}
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	20001040 	.word	0x20001040
 8007d8c:	20000b50 	.word	0x20000b50
 8007d90:	20000b6c 	.word	0x20000b6c
 8007d94:	20000bb4 	.word	0x20000bb4
 8007d98:	20000b4c 	.word	0x20000b4c
 8007d9c:	20000b60 	.word	0x20000b60
 8007da0:	20000b88 	.word	0x20000b88
 8007da4:	20000b84 	.word	0x20000b84
 8007da8:	20000b48 	.word	0x20000b48

08007dac <eTaskGetState>:
	{
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8007dae:	b1e0      	cbz	r0, 8007dea <eTaskGetState+0x3e>
		if( pxTCB == pxCurrentTCB )
 8007db0:	4b19      	ldr	r3, [pc, #100]	@ (8007e18 <eTaskGetState+0x6c>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4283      	cmp	r3, r0
 8007db8:	d015      	beq.n	8007de6 <eTaskGetState+0x3a>
			taskENTER_CRITICAL();
 8007dba:	f001 fca3 	bl	8009704 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8007dbe:	4a17      	ldr	r2, [pc, #92]	@ (8007e1c <eTaskGetState+0x70>)
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007dc0:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 8007dc2:	6816      	ldr	r6, [r2, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007dc4:	4b16      	ldr	r3, [pc, #88]	@ (8007e20 <eTaskGetState+0x74>)
 8007dc6:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 8007dc8:	f001 fcbe 	bl	8009748 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007dcc:	42b5      	cmp	r5, r6
 8007dce:	d017      	beq.n	8007e00 <eTaskGetState+0x54>
 8007dd0:	42bd      	cmp	r5, r7
 8007dd2:	d015      	beq.n	8007e00 <eTaskGetState+0x54>
				else if( pxStateList == &xSuspendedTaskList )
 8007dd4:	4b13      	ldr	r3, [pc, #76]	@ (8007e24 <eTaskGetState+0x78>)
 8007dd6:	429d      	cmp	r5, r3
 8007dd8:	d010      	beq.n	8007dfc <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007dda:	4b13      	ldr	r3, [pc, #76]	@ (8007e28 <eTaskGetState+0x7c>)
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	d011      	beq.n	8007e04 <eTaskGetState+0x58>
 8007de0:	b185      	cbz	r5, 8007e04 <eTaskGetState+0x58>
				eReturn = eReady;
 8007de2:	2001      	movs	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8007de6:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 8007dfa:	e7fe      	b.n	8007dfa <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007dfc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007dfe:	b11b      	cbz	r3, 8007e08 <eTaskGetState+0x5c>
				eReturn = eBlocked;
 8007e00:	2002      	movs	r0, #2
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					eReturn = eDeleted;
 8007e04:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007e08:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
				eReturn = eBlocked;
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf14      	ite	ne
 8007e10:	2003      	movne	r0, #3
 8007e12:	2002      	moveq	r0, #2
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20001040 	.word	0x20001040
 8007e1c:	20000bb4 	.word	0x20000bb4
 8007e20:	20000bb0 	.word	0x20000bb0
 8007e24:	20000b70 	.word	0x20000b70
 8007e28:	20000b88 	.word	0x20000b88

08007e2c <vTaskStartScheduler>:
{
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e30:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e32:	aa07      	add	r2, sp, #28
 8007e34:	a906      	add	r1, sp, #24
 8007e36:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e38:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e3c:	f001 fada 	bl	80093f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e40:	4623      	mov	r3, r4
 8007e42:	9a07      	ldr	r2, [sp, #28]
 8007e44:	9400      	str	r4, [sp, #0]
 8007e46:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8007e4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007e4e:	4915      	ldr	r1, [pc, #84]	@ (8007ea4 <vTaskStartScheduler+0x78>)
 8007e50:	4815      	ldr	r0, [pc, #84]	@ (8007ea8 <vTaskStartScheduler+0x7c>)
 8007e52:	f7ff febf 	bl	8007bd4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007e56:	b170      	cbz	r0, 8007e76 <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 8007e58:	f000 fdec 	bl	8008a34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007e5c:	2801      	cmp	r0, #1
 8007e5e:	d00c      	beq.n	8007e7a <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e60:	3001      	adds	r0, #1
 8007e62:	d108      	bne.n	8007e76 <vTaskStartScheduler+0x4a>
 8007e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	e7fe      	b.n	8007e74 <vTaskStartScheduler+0x48>
}
 8007e76:	b008      	add	sp, #32
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e8a:	4b08      	ldr	r3, [pc, #32]	@ (8007eac <vTaskStartScheduler+0x80>)
 8007e8c:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 8007e90:	4a07      	ldr	r2, [pc, #28]	@ (8007eb0 <vTaskStartScheduler+0x84>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e92:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e94:	4b07      	ldr	r3, [pc, #28]	@ (8007eb4 <vTaskStartScheduler+0x88>)
		xSchedulerRunning = pdTRUE;
 8007e96:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e98:	601c      	str	r4, [r3, #0]
}
 8007e9a:	b008      	add	sp, #32
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007ea0:	f001 bcc2 	b.w	8009828 <xPortStartScheduler>
 8007ea4:	080191ec 	.word	0x080191ec
 8007ea8:	08007b3d 	.word	0x08007b3d
 8007eac:	20000b4c 	.word	0x20000b4c
 8007eb0:	20000b60 	.word	0x20000b60
 8007eb4:	20000b68 	.word	0x20000b68

08007eb8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007eb8:	4a02      	ldr	r2, [pc, #8]	@ (8007ec4 <vTaskSuspendAll+0xc>)
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	6013      	str	r3, [r2, #0]
}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000b48 	.word	0x20000b48

08007ec8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007ec8:	4b01      	ldr	r3, [pc, #4]	@ (8007ed0 <xTaskGetTickCount+0x8>)
 8007eca:	6818      	ldr	r0, [r3, #0]
}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000b68 	.word	0x20000b68

08007ed4 <xTaskGetTickCountFromISR>:
{
 8007ed4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ed6:	f001 fd31 	bl	800993c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8007eda:	4b01      	ldr	r3, [pc, #4]	@ (8007ee0 <xTaskGetTickCountFromISR+0xc>)
 8007edc:	6818      	ldr	r0, [r3, #0]
}
 8007ede:	bd08      	pop	{r3, pc}
 8007ee0:	20000b68 	.word	0x20000b68

08007ee4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8008024 <xTaskIncrementTick+0x140>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
{
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d145      	bne.n	8007f7e <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8008028 <xTaskIncrementTick+0x144>)
 8007ef4:	681e      	ldr	r6, [r3, #0]
 8007ef6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007ef8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d048      	beq.n	8007f90 <xTaskIncrementTick+0xac>
 8007efe:	4b4b      	ldr	r3, [pc, #300]	@ (800802c <xTaskIncrementTick+0x148>)
 8007f00:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429e      	cmp	r6, r3
 8007f08:	d34f      	bcc.n	8007faa <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0a:	4f49      	ldr	r7, [pc, #292]	@ (8008030 <xTaskIncrementTick+0x14c>)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681d      	ldr	r5, [r3, #0]
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	d076      	beq.n	8008002 <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 8007f14:	2500      	movs	r5, #0
 8007f16:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8008044 <xTaskIncrementTick+0x160>
 8007f1a:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8008048 <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 8007f1e:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 800804c <xTaskIncrementTick+0x168>
 8007f22:	e020      	b.n	8007f66 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f24:	f7fe feba 	bl	8006c9c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f2a:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f2e:	b10b      	cbz	r3, 8007f34 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f30:	f7fe feb4 	bl	8006c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f34:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007f36:	4659      	mov	r1, fp
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	d901      	bls.n	8007f44 <xTaskIncrementTick+0x60>
 8007f40:	f8c8 0000 	str.w	r0, [r8]
 8007f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007f48:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007f4c:	f7fe fe80 	bl	8006c50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f50:	f8da 3000 	ldr.w	r3, [sl]
 8007f54:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bf28      	it	cs
 8007f5c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d051      	beq.n	800800a <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f6c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f6e:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8007f72:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f74:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8007f76:	d2d5      	bcs.n	8007f24 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8007f78:	9a01      	ldr	r2, [sp, #4]
 8007f7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f7c:	e01a      	b.n	8007fb4 <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 8007f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8008034 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8007f80:	2500      	movs	r5, #0
		++xPendedTicks;
 8007f82:	6813      	ldr	r3, [r2, #0]
}
 8007f84:	4628      	mov	r0, r5
		++xPendedTicks;
 8007f86:	3301      	adds	r3, #1
 8007f88:	6013      	str	r3, [r2, #0]
}
 8007f8a:	b003      	add	sp, #12
 8007f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007f90:	4b27      	ldr	r3, [pc, #156]	@ (8008030 <xTaskIncrementTick+0x14c>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	b30a      	cbz	r2, 8007fdc <xTaskIncrementTick+0xf8>
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	e7fe      	b.n	8007fa8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007faa:	2500      	movs	r5, #0
 8007fac:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8008044 <xTaskIncrementTick+0x160>
 8007fb0:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008048 <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fb4:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8007fb8:	491f      	ldr	r1, [pc, #124]	@ (8008038 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8007fc6:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007fc8:	2a02      	cmp	r2, #2
 8007fca:	bf28      	it	cs
 8007fcc:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bf18      	it	ne
 8007fd2:	2501      	movne	r5, #1
}
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	b003      	add	sp, #12
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007fdc:	4a17      	ldr	r2, [pc, #92]	@ (800803c <xTaskIncrementTick+0x158>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	6811      	ldr	r1, [r2, #0]
 8007fe2:	6019      	str	r1, [r3, #0]
 8007fe4:	4916      	ldr	r1, [pc, #88]	@ (8008040 <xTaskIncrementTick+0x15c>)
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	680a      	ldr	r2, [r1, #0]
 8007fea:	3201      	adds	r2, #1
 8007fec:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	b97a      	cbnz	r2, 8008014 <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800802c <xTaskIncrementTick+0x148>)
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	e77f      	b.n	8007f02 <xTaskIncrementTick+0x1e>
 8008002:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8008044 <xTaskIncrementTick+0x160>
 8008006:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8008048 <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	9a01      	ldr	r2, [sp, #4]
 8008010:	6013      	str	r3, [r2, #0]
					break;
 8008012:	e7cf      	b.n	8007fb4 <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008014:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008016:	4a05      	ldr	r2, [pc, #20]	@ (800802c <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008018:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	6013      	str	r3, [r2, #0]
}
 8008022:	e76e      	b.n	8007f02 <xTaskIncrementTick+0x1e>
 8008024:	20000b48 	.word	0x20000b48
 8008028:	20000b68 	.word	0x20000b68
 800802c:	20000b4c 	.word	0x20000b4c
 8008030:	20000bb4 	.word	0x20000bb4
 8008034:	20000b5c 	.word	0x20000b5c
 8008038:	20000b58 	.word	0x20000b58
 800803c:	20000bb0 	.word	0x20000bb0
 8008040:	20000b54 	.word	0x20000b54
 8008044:	20000be0 	.word	0x20000be0
 8008048:	20001040 	.word	0x20001040
 800804c:	20000b64 	.word	0x20000b64

08008050 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8008054:	f001 fb56 	bl	8009704 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008058:	4b37      	ldr	r3, [pc, #220]	@ (8008138 <xTaskResumeAll.part.0+0xe8>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	3a01      	subs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d159      	bne.n	800811a <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008066:	4b35      	ldr	r3, [pc, #212]	@ (800813c <xTaskResumeAll.part.0+0xec>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d055      	beq.n	800811a <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800806e:	4d34      	ldr	r5, [pc, #208]	@ (8008140 <xTaskResumeAll.part.0+0xf0>)
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d05c      	beq.n	8008130 <xTaskResumeAll.part.0+0xe0>
 8008076:	4e33      	ldr	r6, [pc, #204]	@ (8008144 <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 8008078:	f04f 0a01 	mov.w	sl, #1
 800807c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8008158 <xTaskResumeAll.part.0+0x108>
 8008080:	4f31      	ldr	r7, [pc, #196]	@ (8008148 <xTaskResumeAll.part.0+0xf8>)
 8008082:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 800815c <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008086:	68eb      	ldr	r3, [r5, #12]
 8008088:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800808a:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800808e:	f104 0018 	add.w	r0, r4, #24
 8008092:	f7fe fe03 	bl	8006c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008096:	4658      	mov	r0, fp
 8008098:	f7fe fe00 	bl	8006c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800809c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800809e:	6832      	ldr	r2, [r6, #0]
 80080a0:	4659      	mov	r1, fp
 80080a2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80080a6:	4293      	cmp	r3, r2
 80080a8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80080ac:	d900      	bls.n	80080b0 <xTaskResumeAll.part.0+0x60>
 80080ae:	6033      	str	r3, [r6, #0]
 80080b0:	f7fe fdce 	bl	8006c50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80080b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d301      	bcc.n	80080c2 <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 80080be:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1de      	bne.n	8008086 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c8:	4b20      	ldr	r3, [pc, #128]	@ (800814c <xTaskResumeAll.part.0+0xfc>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	b352      	cbz	r2, 8008126 <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008150 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080d6:	68d2      	ldr	r2, [r2, #12]
 80080d8:	6852      	ldr	r2, [r2, #4]
 80080da:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080dc:	4e1d      	ldr	r6, [pc, #116]	@ (8008154 <xTaskResumeAll.part.0+0x104>)
 80080de:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80080e0:	b144      	cbz	r4, 80080f4 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 80080e2:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80080e4:	f7ff fefe 	bl	8007ee4 <xTaskIncrementTick>
 80080e8:	b108      	cbz	r0, 80080ee <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 80080ea:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080ee:	3c01      	subs	r4, #1
 80080f0:	d1f8      	bne.n	80080e4 <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 80080f2:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80080f4:	f8d9 3000 	ldr.w	r3, [r9]
 80080f8:	b17b      	cbz	r3, 800811a <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 80080fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008102:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800810e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008110:	f001 fb1a 	bl	8009748 <vPortExitCritical>
}
 8008114:	4620      	mov	r0, r4
 8008116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800811a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800811c:	f001 fb14 	bl	8009748 <vPortExitCritical>
}
 8008120:	4620      	mov	r0, r4
 8008122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8008126:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <xTaskResumeAll.part.0+0x100>)
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e7d5      	b.n	80080dc <xTaskResumeAll.part.0+0x8c>
 8008130:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800815c <xTaskResumeAll.part.0+0x10c>
 8008134:	e7d2      	b.n	80080dc <xTaskResumeAll.part.0+0x8c>
 8008136:	bf00      	nop
 8008138:	20000b48 	.word	0x20000b48
 800813c:	20000b6c 	.word	0x20000b6c
 8008140:	20000b9c 	.word	0x20000b9c
 8008144:	20000b64 	.word	0x20000b64
 8008148:	20001040 	.word	0x20001040
 800814c:	20000bb4 	.word	0x20000bb4
 8008150:	20000b4c 	.word	0x20000b4c
 8008154:	20000b5c 	.word	0x20000b5c
 8008158:	20000be0 	.word	0x20000be0
 800815c:	20000b58 	.word	0x20000b58

08008160 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8008160:	4b06      	ldr	r3, [pc, #24]	@ (800817c <xTaskResumeAll+0x1c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	b943      	cbnz	r3, 8008178 <xTaskResumeAll+0x18>
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	e7fe      	b.n	8008176 <xTaskResumeAll+0x16>
 8008178:	f7ff bf6a 	b.w	8008050 <xTaskResumeAll.part.0>
 800817c:	20000b48 	.word	0x20000b48

08008180 <vTaskDelay>:
	{
 8008180:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008182:	b950      	cbnz	r0, 800819a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008184:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	f3bf 8f6f 	isb	sy
	}
 8008198:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800819a:	4c10      	ldr	r4, [pc, #64]	@ (80081dc <vTaskDelay+0x5c>)
 800819c:	6821      	ldr	r1, [r4, #0]
 800819e:	b141      	cbz	r1, 80081b2 <vTaskDelay+0x32>
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	e7fe      	b.n	80081b0 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081b8:	f7ff fc36 	bl	8007a28 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	b943      	cbnz	r3, 80081d2 <vTaskDelay+0x52>
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	e7fe      	b.n	80081d0 <vTaskDelay+0x50>
 80081d2:	f7ff ff3d 	bl	8008050 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d0d4      	beq.n	8008184 <vTaskDelay+0x4>
	}
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	20000b48 	.word	0x20000b48

080081e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008258 <vTaskSwitchContext+0x78>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b11b      	cbz	r3, 80081ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80081e6:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <vTaskSwitchContext+0x7c>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80081ee:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <vTaskSwitchContext+0x7c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f0:	491b      	ldr	r1, [pc, #108]	@ (8008260 <vTaskSwitchContext+0x80>)
{
 80081f2:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f4:	4c1b      	ldr	r4, [pc, #108]	@ (8008264 <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 80081f6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80081fe:	0098      	lsls	r0, r3, #2
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	588a      	ldr	r2, [r1, r2]
 8008204:	b942      	cbnz	r2, 8008218 <vTaskSwitchContext+0x38>
 8008206:	b1d3      	cbz	r3, 800823e <vTaskSwitchContext+0x5e>
 8008208:	3b01      	subs	r3, #1
 800820a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800820e:	0098      	lsls	r0, r3, #2
 8008210:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008214:	2a00      	cmp	r2, #0
 8008216:	d0f6      	beq.n	8008206 <vTaskSwitchContext+0x26>
 8008218:	4418      	add	r0, r3
 800821a:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 800821e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008222:	4662      	mov	r2, ip
 8008224:	6849      	ldr	r1, [r1, #4]
 8008226:	3208      	adds	r2, #8
 8008228:	4291      	cmp	r1, r2
 800822a:	f8cc 1004 	str.w	r1, [ip, #4]
 800822e:	d00f      	beq.n	8008250 <vTaskSwitchContext+0x70>
 8008230:	68c9      	ldr	r1, [r1, #12]
 8008232:	4a0d      	ldr	r2, [pc, #52]	@ (8008268 <vTaskSwitchContext+0x88>)
 8008234:	6011      	str	r1, [r2, #0]
 8008236:	6023      	str	r3, [r4, #0]
}
 8008238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824e:	e7fe      	b.n	800824e <vTaskSwitchContext+0x6e>
 8008250:	6849      	ldr	r1, [r1, #4]
 8008252:	f8cc 1004 	str.w	r1, [ip, #4]
 8008256:	e7eb      	b.n	8008230 <vTaskSwitchContext+0x50>
 8008258:	20000b48 	.word	0x20000b48
 800825c:	20000b58 	.word	0x20000b58
 8008260:	20000be0 	.word	0x20000be0
 8008264:	20000b64 	.word	0x20000b64
 8008268:	20001040 	.word	0x20001040

0800826c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800826c:	b160      	cbz	r0, 8008288 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800826e:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <vTaskPlaceOnEventList+0x30>)
{
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	3118      	adds	r1, #24
 8008278:	f7fe fcf8 	bl	8006c6c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800827c:	4620      	mov	r0, r4
 800827e:	2101      	movs	r1, #1
}
 8008280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008284:	f7ff bbd0 	b.w	8007a28 <prvAddCurrentTaskToDelayedList>
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008298:	e7fe      	b.n	8008298 <vTaskPlaceOnEventList+0x2c>
 800829a:	bf00      	nop
 800829c:	20001040 	.word	0x20001040

080082a0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80082a0:	b1e8      	cbz	r0, 80082de <vTaskPlaceOnUnorderedEventList+0x3e>
	configASSERT( uxSchedulerSuspended != 0 );
 80082a2:	4b13      	ldr	r3, [pc, #76]	@ (80082f0 <vTaskPlaceOnUnorderedEventList+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	b943      	cbnz	r3, 80082ba <vTaskPlaceOnUnorderedEventList+0x1a>
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	e7fe      	b.n	80082b8 <vTaskPlaceOnUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80082ba:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <vTaskPlaceOnUnorderedEventList+0x54>)
 80082bc:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
{
 80082c0:	b510      	push	{r4, lr}
 80082c2:	4614      	mov	r4, r2
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80082c4:	681a      	ldr	r2, [r3, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082c6:	681b      	ldr	r3, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80082c8:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082ca:	f103 0118 	add.w	r1, r3, #24
 80082ce:	f7fe fcbf 	bl	8006c50 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082d2:	4620      	mov	r0, r4
 80082d4:	2101      	movs	r1, #1
}
 80082d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082da:	f7ff bba5 	b.w	8007a28 <prvAddCurrentTaskToDelayedList>
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80082ee:	e7fe      	b.n	80082ee <vTaskPlaceOnUnorderedEventList+0x4e>
 80082f0:	20000b48 	.word	0x20000b48
 80082f4:	20001040 	.word	0x20001040

080082f8 <vTaskPlaceOnEventListRestricted>:
	{
 80082f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80082fa:	b180      	cbz	r0, 800831e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008330 <vTaskPlaceOnEventListRestricted+0x38>)
 80082fe:	460d      	mov	r5, r1
 8008300:	4614      	mov	r4, r2
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	3118      	adds	r1, #24
 8008306:	f7fe fca3 	bl	8006c50 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800830a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800830c:	4621      	mov	r1, r4
 800830e:	bf0c      	ite	eq
 8008310:	4628      	moveq	r0, r5
 8008312:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800831a:	f7ff bb85 	b.w	8007a28 <prvAddCurrentTaskToDelayedList>
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800832e:	e7fe      	b.n	800832e <vTaskPlaceOnEventListRestricted+0x36>
 8008330:	20001040 	.word	0x20001040

08008334 <xTaskRemoveFromEventList>:
{
 8008334:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008336:	68c3      	ldr	r3, [r0, #12]
 8008338:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800833a:	b34c      	cbz	r4, 8008390 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800833c:	f104 0518 	add.w	r5, r4, #24
 8008340:	4628      	mov	r0, r5
 8008342:	f7fe fcab 	bl	8006c9c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008346:	4b18      	ldr	r3, [pc, #96]	@ (80083a8 <xTaskRemoveFromEventList+0x74>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	b173      	cbz	r3, 800836a <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800834c:	4629      	mov	r1, r5
 800834e:	4817      	ldr	r0, [pc, #92]	@ (80083ac <xTaskRemoveFromEventList+0x78>)
 8008350:	f7fe fc7e 	bl	8006c50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008354:	4b16      	ldr	r3, [pc, #88]	@ (80083b0 <xTaskRemoveFromEventList+0x7c>)
 8008356:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	429a      	cmp	r2, r3
 800835e:	d920      	bls.n	80083a2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	4a14      	ldr	r2, [pc, #80]	@ (80083b4 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8008364:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800836a:	1d25      	adds	r5, r4, #4
 800836c:	4628      	mov	r0, r5
 800836e:	f7fe fc95 	bl	8006c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008372:	4b11      	ldr	r3, [pc, #68]	@ (80083b8 <xTaskRemoveFromEventList+0x84>)
 8008374:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4290      	cmp	r0, r2
 800837a:	d900      	bls.n	800837e <xTaskRemoveFromEventList+0x4a>
 800837c:	6018      	str	r0, [r3, #0]
 800837e:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <xTaskRemoveFromEventList+0x88>)
 8008380:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008384:	4629      	mov	r1, r5
 8008386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800838a:	f7fe fc61 	bl	8006c50 <vListInsertEnd>
 800838e:	e7e1      	b.n	8008354 <xTaskRemoveFromEventList+0x20>
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80083a0:	e7fe      	b.n	80083a0 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 80083a2:	2000      	movs	r0, #0
}
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	bf00      	nop
 80083a8:	20000b48 	.word	0x20000b48
 80083ac:	20000b9c 	.word	0x20000b9c
 80083b0:	20001040 	.word	0x20001040
 80083b4:	20000b58 	.word	0x20000b58
 80083b8:	20000b64 	.word	0x20000b64
 80083bc:	20000be0 	.word	0x20000be0

080083c0 <vTaskRemoveFromUnorderedEventList>:
{
 80083c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80083c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008434 <vTaskRemoveFromUnorderedEventList+0x74>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	b942      	cbnz	r2, 80083da <vTaskRemoveFromUnorderedEventList+0x1a>
 80083c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	e7fe      	b.n	80083d8 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80083da:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083de:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80083e0:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 80083e2:	b1ec      	cbz	r4, 8008420 <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083e4:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 80083e6:	f7fe fc59 	bl	8006c9c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7fe fc56 	bl	8006c9c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80083f0:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <vTaskRemoveFromUnorderedEventList+0x78>)
 80083f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4290      	cmp	r0, r2
 80083f8:	d900      	bls.n	80083fc <vTaskRemoveFromUnorderedEventList+0x3c>
 80083fa:	6018      	str	r0, [r3, #0]
 80083fc:	4b0f      	ldr	r3, [pc, #60]	@ (800843c <vTaskRemoveFromUnorderedEventList+0x7c>)
 80083fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008402:	4629      	mov	r1, r5
 8008404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008408:	f7fe fc22 	bl	8006c50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <vTaskRemoveFromUnorderedEventList+0x80>)
 800840e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	429a      	cmp	r2, r3
 8008416:	d902      	bls.n	800841e <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 8008418:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <vTaskRemoveFromUnorderedEventList+0x84>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008430:	e7fe      	b.n	8008430 <vTaskRemoveFromUnorderedEventList+0x70>
 8008432:	bf00      	nop
 8008434:	20000b48 	.word	0x20000b48
 8008438:	20000b64 	.word	0x20000b64
 800843c:	20000be0 	.word	0x20000be0
 8008440:	20001040 	.word	0x20001040
 8008444:	20000b58 	.word	0x20000b58

08008448 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008448:	4a03      	ldr	r2, [pc, #12]	@ (8008458 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800844a:	4b04      	ldr	r3, [pc, #16]	@ (800845c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800844c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20000b54 	.word	0x20000b54
 800845c:	20000b68 	.word	0x20000b68

08008460 <xTaskCheckForTimeOut>:
{
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008462:	b308      	cbz	r0, 80084a8 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8008464:	460d      	mov	r5, r1
 8008466:	b1b1      	cbz	r1, 8008496 <xTaskCheckForTimeOut+0x36>
 8008468:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800846a:	f001 f94b 	bl	8009704 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800846e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8008470:	4a1a      	ldr	r2, [pc, #104]	@ (80084dc <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8008472:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8008474:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008476:	d02c      	beq.n	80084d2 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008478:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80084e0 <xTaskCheckForTimeOut+0x80>
 800847c:	6826      	ldr	r6, [r4, #0]
 800847e:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008482:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008484:	42be      	cmp	r6, r7
 8008486:	d018      	beq.n	80084ba <xTaskCheckForTimeOut+0x5a>
 8008488:	4288      	cmp	r0, r1
 800848a:	d816      	bhi.n	80084ba <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 800848c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800848e:	f001 f95b 	bl	8009748 <vPortExitCritical>
}
 8008492:	4620      	mov	r0, r4
 8008494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80084a6:	e7fe      	b.n	80084a6 <xTaskCheckForTimeOut+0x46>
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80084b8:	e7fe      	b.n	80084b8 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084ba:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084be:	4573      	cmp	r3, lr
 80084c0:	d909      	bls.n	80084d6 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 80084c2:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084c4:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084c8:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80084ca:	4403      	add	r3, r0
 80084cc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084ce:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 80084d2:	2400      	movs	r4, #0
 80084d4:	e7db      	b.n	800848e <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80084da:	e7d7      	b.n	800848c <xTaskCheckForTimeOut+0x2c>
 80084dc:	20000b68 	.word	0x20000b68
 80084e0:	20000b54 	.word	0x20000b54

080084e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80084e4:	4b01      	ldr	r3, [pc, #4]	@ (80084ec <vTaskMissedYield+0x8>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
}
 80084ea:	4770      	bx	lr
 80084ec:	20000b58 	.word	0x20000b58

080084f0 <vTaskGetInfo>:
	{
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 80084f6:	b350      	cbz	r0, 800854e <vTaskGetInfo+0x5e>
 80084f8:	4605      	mov	r5, r0
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80084fa:	f105 0234 	add.w	r2, r5, #52	@ 0x34
		if( eState != eInvalid )
 80084fe:	2b05      	cmp	r3, #5
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8008500:	e9c4 5200 	strd	r5, r2, [r4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008504:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8008506:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8008508:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800850a:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800850c:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800850e:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8008510:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8008512:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800851a:	d01f      	beq.n	800855c <vTaskGetInfo+0x6c>
			if( pxTCB == pxCurrentTCB )
 800851c:	4920      	ldr	r1, [pc, #128]	@ (80085a0 <vTaskGetInfo+0xb0>)
 800851e:	6809      	ldr	r1, [r1, #0]
 8008520:	42a9      	cmp	r1, r5
 8008522:	d017      	beq.n	8008554 <vTaskGetInfo+0x64>
					if( eState == eSuspended )
 8008524:	2b03      	cmp	r3, #3
				pxTaskStatus->eCurrentState = eState;
 8008526:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 8008528:	d01f      	beq.n	800856a <vTaskGetInfo+0x7a>
		if( xGetFreeStackSpace != pdFALSE )
 800852a:	b176      	cbz	r6, 800854a <vTaskGetInfo+0x5a>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800852c:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800852e:	7833      	ldrb	r3, [r6, #0]
 8008530:	2ba5      	cmp	r3, #165	@ 0xa5
 8008532:	d132      	bne.n	800859a <vTaskGetInfo+0xaa>
 8008534:	4633      	mov	r3, r6
 8008536:	4618      	mov	r0, r3
 8008538:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800853c:	29a5      	cmp	r1, #165	@ 0xa5
 800853e:	d0fa      	beq.n	8008536 <vTaskGetInfo+0x46>
			ulCount++;
 8008540:	f1c6 0601 	rsb	r6, r6, #1
 8008544:	4406      	add	r6, r0
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008546:	f3c6 068f 	ubfx	r6, r6, #2, #16
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800854a:	8426      	strh	r6, [r4, #32]
	}
 800854c:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800854e:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <vTaskGetInfo+0xb0>)
 8008550:	6815      	ldr	r5, [r2, #0]
 8008552:	e7d2      	b.n	80084fa <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 8008554:	7322      	strb	r2, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8008556:	2e00      	cmp	r6, #0
 8008558:	d0f7      	beq.n	800854a <vTaskGetInfo+0x5a>
 800855a:	e7e7      	b.n	800852c <vTaskGetInfo+0x3c>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800855c:	4628      	mov	r0, r5
 800855e:	f7ff fc25 	bl	8007dac <eTaskGetState>
 8008562:	7320      	strb	r0, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8008564:	2e00      	cmp	r6, #0
 8008566:	d0f0      	beq.n	800854a <vTaskGetInfo+0x5a>
 8008568:	e7e0      	b.n	800852c <vTaskGetInfo+0x3c>
	++uxSchedulerSuspended;
 800856a:	4b0e      	ldr	r3, [pc, #56]	@ (80085a4 <vTaskGetInfo+0xb4>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	3201      	adds	r2, #1
 8008570:	601a      	str	r2, [r3, #0]
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008572:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8008574:	b10a      	cbz	r2, 800857a <vTaskGetInfo+0x8a>
								pxTaskStatus->eCurrentState = eBlocked;
 8008576:	2202      	movs	r2, #2
 8008578:	7322      	strb	r2, [r4, #12]
	configASSERT( uxSchedulerSuspended );
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	b943      	cbnz	r3, 8008590 <vTaskGetInfo+0xa0>
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	e7fe      	b.n	800858e <vTaskGetInfo+0x9e>
 8008590:	f7ff fd5e 	bl	8008050 <xTaskResumeAll.part.0>
		if( xGetFreeStackSpace != pdFALSE )
 8008594:	2e00      	cmp	r6, #0
 8008596:	d0d8      	beq.n	800854a <vTaskGetInfo+0x5a>
 8008598:	e7c8      	b.n	800852c <vTaskGetInfo+0x3c>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800859a:	2600      	movs	r6, #0
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800859c:	e7d5      	b.n	800854a <vTaskGetInfo+0x5a>
 800859e:	bf00      	nop
 80085a0:	20001040 	.word	0x20001040
 80085a4:	20000b48 	.word	0x20000b48

080085a8 <prvListTasksWithinSingleList.part.0>:
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a8:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 80085aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f101 0808 	add.w	r8, r1, #8
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 80085b4:	460e      	mov	r6, r1
 80085b6:	4691      	mov	r9, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b8:	4543      	cmp	r3, r8
 80085ba:	4604      	mov	r4, r0
	UBaseType_t uxTask = 0;
 80085bc:	f04f 0700 	mov.w	r7, #0
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c0:	bf08      	it	eq
 80085c2:	68cb      	ldreq	r3, [r1, #12]
 80085c4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80085c8:	e006      	b.n	80085d8 <prvListTasksWithinSingleList.part.0+0x30>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ca:	68c5      	ldr	r5, [r0, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80085cc:	4628      	mov	r0, r5
 80085ce:	f7ff ff8f 	bl	80084f0 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 80085d2:	45aa      	cmp	sl, r5
 80085d4:	d013      	beq.n	80085fe <prvListTasksWithinSingleList.part.0+0x56>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d6:	6873      	ldr	r3, [r6, #4]
 80085d8:	6858      	ldr	r0, [r3, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80085da:	2201      	movs	r2, #1
 80085dc:	4621      	mov	r1, r4
 80085de:	464b      	mov	r3, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e0:	4580      	cmp	r8, r0
				uxTask++;
 80085e2:	4417      	add	r7, r2
			} while( pxNextTCB != pxFirstTCB );
 80085e4:	f104 0424 	add.w	r4, r4, #36	@ 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e8:	6070      	str	r0, [r6, #4]
 80085ea:	d1ee      	bne.n	80085ca <prvListTasksWithinSingleList.part.0+0x22>
 80085ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085f0:	68c5      	ldr	r5, [r0, #12]
 80085f2:	6070      	str	r0, [r6, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7ff ff7b 	bl	80084f0 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 80085fa:	45aa      	cmp	sl, r5
 80085fc:	d1eb      	bne.n	80085d6 <prvListTasksWithinSingleList.part.0+0x2e>
	}
 80085fe:	4638      	mov	r0, r7
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008604 <uxTaskGetSystemState>:
	{
 8008604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	++uxSchedulerSuspended;
 8008608:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8008708 <uxTaskGetSystemState+0x104>
 800860c:	f8d8 3000 	ldr.w	r3, [r8]
 8008610:	3301      	adds	r3, #1
 8008612:	f8c8 3000 	str.w	r3, [r8]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8008616:	4b36      	ldr	r3, [pc, #216]	@ (80086f0 <uxTaskGetSystemState+0xec>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	428b      	cmp	r3, r1
 800861c:	d85d      	bhi.n	80086da <uxTaskGetSystemState+0xd6>
 800861e:	4c35      	ldr	r4, [pc, #212]	@ (80086f4 <uxTaskGetSystemState+0xf0>)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8008620:	2600      	movs	r6, #0
 8008622:	4682      	mov	sl, r0
 8008624:	4691      	mov	r9, r2
 8008626:	f2a4 474c 	subw	r7, r4, #1100	@ 0x44c
 800862a:	2538      	movs	r5, #56	@ 0x38
 800862c:	46b4      	mov	ip, r6
					uxQueue--;
 800862e:	3d01      	subs	r5, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8008630:	eb0c 0006 	add.w	r0, ip, r6
 8008634:	4621      	mov	r1, r4
 8008636:	2201      	movs	r2, #1
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008638:	eb05 0385 	add.w	r3, r5, r5, lsl #2
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800863c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008640:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008644:	b143      	cbz	r3, 8008658 <uxTaskGetSystemState+0x54>
 8008646:	f7ff ffaf 	bl	80085a8 <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800864a:	4406      	add	r6, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800864c:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8008650:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8008654:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008658:	f1a4 0314 	sub.w	r3, r4, #20
 800865c:	42bc      	cmp	r4, r7
 800865e:	461c      	mov	r4, r3
 8008660:	d1e5      	bne.n	800862e <uxTaskGetSystemState+0x2a>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008662:	4b25      	ldr	r3, [pc, #148]	@ (80086f8 <uxTaskGetSystemState+0xf4>)
 8008664:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008666:	680b      	ldr	r3, [r1, #0]
 8008668:	b13b      	cbz	r3, 800867a <uxTaskGetSystemState+0x76>
 800866a:	2202      	movs	r2, #2
 800866c:	f7ff ff9c 	bl	80085a8 <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008670:	4406      	add	r6, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8008672:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8008676:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800867a:	4b20      	ldr	r3, [pc, #128]	@ (80086fc <uxTaskGetSystemState+0xf8>)
 800867c:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800867e:	680b      	ldr	r3, [r1, #0]
 8008680:	b13b      	cbz	r3, 8008692 <uxTaskGetSystemState+0x8e>
 8008682:	2202      	movs	r2, #2
 8008684:	f7ff ff90 	bl	80085a8 <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8008688:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800868a:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 800868e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008692:	491b      	ldr	r1, [pc, #108]	@ (8008700 <uxTaskGetSystemState+0xfc>)
 8008694:	680b      	ldr	r3, [r1, #0]
 8008696:	b13b      	cbz	r3, 80086a8 <uxTaskGetSystemState+0xa4>
 8008698:	2204      	movs	r2, #4
 800869a:	f7ff ff85 	bl	80085a8 <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800869e:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80086a0:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 80086a4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80086a8:	4916      	ldr	r1, [pc, #88]	@ (8008704 <uxTaskGetSystemState+0x100>)
 80086aa:	680b      	ldr	r3, [r1, #0]
 80086ac:	b11b      	cbz	r3, 80086b6 <uxTaskGetSystemState+0xb2>
 80086ae:	2203      	movs	r2, #3
 80086b0:	f7ff ff7a 	bl	80085a8 <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80086b4:	4406      	add	r6, r0
					if( pulTotalRunTime != NULL )
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	d002      	beq.n	80086c2 <uxTaskGetSystemState+0xbe>
						*pulTotalRunTime = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	f8c9 3000 	str.w	r3, [r9]
	configASSERT( uxSchedulerSuspended );
 80086c2:	f8d8 3000 	ldr.w	r3, [r8]
 80086c6:	b96b      	cbnz	r3, 80086e4 <uxTaskGetSystemState+0xe0>
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	e7fe      	b.n	80086d8 <uxTaskGetSystemState+0xd4>
 80086da:	f8d8 3000 	ldr.w	r3, [r8]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80086de:	2600      	movs	r6, #0
	configASSERT( uxSchedulerSuspended );
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f1      	beq.n	80086c8 <uxTaskGetSystemState+0xc4>
 80086e4:	f7ff fcb4 	bl	8008050 <xTaskResumeAll.part.0>
	}
 80086e8:	4630      	mov	r0, r6
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	bf00      	nop
 80086f0:	20000b6c 	.word	0x20000b6c
 80086f4:	2000102c 	.word	0x2000102c
 80086f8:	20000bb4 	.word	0x20000bb4
 80086fc:	20000bb0 	.word	0x20000bb0
 8008700:	20000b88 	.word	0x20000b88
 8008704:	20000b70 	.word	0x20000b70
 8008708:	20000b48 	.word	0x20000b48

0800870c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800870c:	4b01      	ldr	r3, [pc, #4]	@ (8008714 <xTaskGetCurrentTaskHandle+0x8>)
 800870e:	6818      	ldr	r0, [r3, #0]
	}
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20001040 	.word	0x20001040

08008718 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008718:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <xTaskGetSchedulerState+0x18>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	b133      	cbz	r3, 800872c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800871e:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <xTaskGetSchedulerState+0x1c>)
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	fab0 f080 	clz	r0, r0
 8008726:	0940      	lsrs	r0, r0, #5
 8008728:	0040      	lsls	r0, r0, #1
 800872a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800872c:	2001      	movs	r0, #1
	}
 800872e:	4770      	bx	lr
 8008730:	20000b60 	.word	0x20000b60
 8008734:	20000b48 	.word	0x20000b48

08008738 <xTaskPriorityInherit>:
	{
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800873a:	4604      	mov	r4, r0
 800873c:	b1c8      	cbz	r0, 8008772 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800873e:	4d1b      	ldr	r5, [pc, #108]	@ (80087ac <xTaskPriorityInherit+0x74>)
 8008740:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008742:	682a      	ldr	r2, [r5, #0]
 8008744:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008746:	4293      	cmp	r3, r2
 8008748:	d214      	bcs.n	8008774 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800874a:	6982      	ldr	r2, [r0, #24]
 800874c:	2a00      	cmp	r2, #0
 800874e:	db04      	blt.n	800875a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008750:	682a      	ldr	r2, [r5, #0]
 8008752:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008754:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8008758:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800875a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800875e:	4e14      	ldr	r6, [pc, #80]	@ (80087b0 <xTaskPriorityInherit+0x78>)
 8008760:	6962      	ldr	r2, [r4, #20]
 8008762:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008766:	429a      	cmp	r2, r3
 8008768:	d00c      	beq.n	8008784 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800876a:	682b      	ldr	r3, [r5, #0]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8008770:	2001      	movs	r0, #1
	}
 8008772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	4298      	cmp	r0, r3
 800877c:	bf2c      	ite	cs
 800877e:	2000      	movcs	r0, #0
 8008780:	2001      	movcc	r0, #1
	}
 8008782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008784:	1d27      	adds	r7, r4, #4
 8008786:	4638      	mov	r0, r7
 8008788:	f7fe fa88 	bl	8006c9c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800878c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008790:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008792:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008794:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008796:	4290      	cmp	r0, r2
 8008798:	d900      	bls.n	800879c <xTaskPriorityInherit+0x64>
 800879a:	6018      	str	r0, [r3, #0]
 800879c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80087a0:	4639      	mov	r1, r7
 80087a2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80087a6:	f7fe fa53 	bl	8006c50 <vListInsertEnd>
 80087aa:	e7e1      	b.n	8008770 <xTaskPriorityInherit+0x38>
 80087ac:	20001040 	.word	0x20001040
 80087b0:	20000be0 	.word	0x20000be0
 80087b4:	20000b64 	.word	0x20000b64

080087b8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80087b8:	b308      	cbz	r0, 80087fe <xTaskPriorityDisinherit+0x46>
	{
 80087ba:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80087bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008834 <xTaskPriorityDisinherit+0x7c>)
 80087be:	681c      	ldr	r4, [r3, #0]
 80087c0:	4284      	cmp	r4, r0
 80087c2:	d008      	beq.n	80087d6 <xTaskPriorityDisinherit+0x1e>
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	e7fe      	b.n	80087d4 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 80087d6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80087d8:	b143      	cbz	r3, 80087ec <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80087dc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087de:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80087e0:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087e2:	4291      	cmp	r1, r2
 80087e4:	d000      	beq.n	80087e8 <xTaskPriorityDisinherit+0x30>
 80087e6:	b163      	cbz	r3, 8008802 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80087e8:	2000      	movs	r0, #0
	}
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80087fc:	e7fe      	b.n	80087fc <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 80087fe:	2000      	movs	r0, #0
	}
 8008800:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008802:	1d25      	adds	r5, r4, #4
 8008804:	4628      	mov	r0, r5
 8008806:	f7fe fa49 	bl	8006c9c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800880a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880e:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008812:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008814:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4290      	cmp	r0, r2
 800881a:	d900      	bls.n	800881e <xTaskPriorityDisinherit+0x66>
 800881c:	6018      	str	r0, [r3, #0]
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <xTaskPriorityDisinherit+0x84>)
 8008820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008824:	4629      	mov	r1, r5
 8008826:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800882a:	f7fe fa11 	bl	8006c50 <vListInsertEnd>
					xReturn = pdTRUE;
 800882e:	2001      	movs	r0, #1
	}
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	bf00      	nop
 8008834:	20001040 	.word	0x20001040
 8008838:	20000b64 	.word	0x20000b64
 800883c:	20000be0 	.word	0x20000be0

08008840 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008840:	2800      	cmp	r0, #0
 8008842:	d03c      	beq.n	80088be <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 8008844:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800884a:	b14b      	cbz	r3, 8008860 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800884c:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 800884e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008850:	4281      	cmp	r1, r0
 8008852:	bf38      	it	cc
 8008854:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800885a:	428a      	cmp	r2, r1
 800885c:	d109      	bne.n	8008872 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8008870:	e7fe      	b.n	8008870 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8008872:	4b18      	ldr	r3, [pc, #96]	@ (80088d4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	42a3      	cmp	r3, r4
 8008878:	d022      	beq.n	80088c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800887a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800887c:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800887e:	2b00      	cmp	r3, #0
 8008880:	db02      	blt.n	8008888 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008882:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8008886:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008888:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800888c:	4d12      	ldr	r5, [pc, #72]	@ (80088d8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800888e:	6961      	ldr	r1, [r4, #20]
 8008890:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8008894:	4299      	cmp	r1, r3
 8008896:	d1e2      	bne.n	800885e <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008898:	1d26      	adds	r6, r4, #4
 800889a:	4630      	mov	r0, r6
 800889c:	f7fe f9fe 	bl	8006c9c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80088a0:	4b0e      	ldr	r3, [pc, #56]	@ (80088dc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80088a2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4290      	cmp	r0, r2
 80088a8:	d900      	bls.n	80088ac <vTaskPriorityDisinheritAfterTimeout+0x6c>
 80088aa:	6018      	str	r0, [r3, #0]
 80088ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80088b0:	4631      	mov	r1, r6
 80088b2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80088b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80088ba:	f7fe b9c9 	b.w	8006c50 <vListInsertEnd>
 80088be:	4770      	bx	lr
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80088d0:	e7fe      	b.n	80088d0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80088d2:	bf00      	nop
 80088d4:	20001040 	.word	0x20001040
 80088d8:	20000be0 	.word	0x20000be0
 80088dc:	20000b64 	.word	0x20000b64

080088e0 <vTaskList>:
		uxArraySize = uxCurrentNumberOfTasks;
 80088e0:	4b2a      	ldr	r3, [pc, #168]	@ (800898c <vTaskList+0xac>)
	{
 80088e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 80088e6:	681c      	ldr	r4, [r3, #0]
		*pcWriteBuffer = ( char ) 0x00;
 80088e8:	2700      	movs	r7, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80088ea:	681b      	ldr	r3, [r3, #0]
	{
 80088ec:	b083      	sub	sp, #12
 80088ee:	4683      	mov	fp, r0
		*pcWriteBuffer = ( char ) 0x00;
 80088f0:	7007      	strb	r7, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80088f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80088f6:	0098      	lsls	r0, r3, #2
 80088f8:	f000 fdc6 	bl	8009488 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d041      	beq.n	8008984 <vTaskList+0xa4>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8008900:	4621      	mov	r1, r4
 8008902:	463a      	mov	r2, r7
 8008904:	4680      	mov	r8, r0
 8008906:	f7ff fe7d 	bl	8008604 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 800890a:	b3a8      	cbz	r0, 8008978 <vTaskList+0x98>
 800890c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8008910:	4645      	mov	r5, r8
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008912:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008990 <vTaskList+0xb0>
 8008916:	eb08 0680 	add.w	r6, r8, r0, lsl #2
 800891a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8008994 <vTaskList+0xb4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800891e:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 8008920:	4658      	mov	r0, fp
 8008922:	6869      	ldr	r1, [r5, #4]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8008924:	2400      	movs	r4, #0
 8008926:	2b04      	cmp	r3, #4
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008928:	bf98      	it	ls
 800892a:	f81a 4003 	ldrbls.w	r4, [sl, r3]
		strcpy( pcBuffer, pcTaskName );
 800892e:	f00d ff71 	bl	8016814 <stpcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008932:	eba0 0c0b 	sub.w	ip, r0, fp
			pcBuffer[ x ] = ' ';
 8008936:	ebab 0200 	sub.w	r2, fp, r0
 800893a:	2120      	movs	r1, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800893c:	f1bc 0f0e 	cmp.w	ip, #14
			pcBuffer[ x ] = ' ';
 8008940:	f102 020f 	add.w	r2, r2, #15
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008944:	d803      	bhi.n	800894e <vTaskList+0x6e>
			pcBuffer[ x ] = ' ';
 8008946:	f00d ff4b 	bl	80167e0 <memset>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800894a:	f04f 0c0f 	mov.w	ip, #15
		pcBuffer[ x ] = ( char ) 0x00;
 800894e:	f80b 700c 	strb.w	r7, [fp, ip]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008952:	4622      	mov	r2, r4
 8008954:	68a8      	ldr	r0, [r5, #8]
		pcBuffer[ x ] = ( char ) 0x00;
 8008956:	44e3      	add	fp, ip
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008958:	692b      	ldr	r3, [r5, #16]
 800895a:	4649      	mov	r1, r9
 800895c:	9001      	str	r0, [sp, #4]
			for( x = 0; x < uxArraySize; x++ )
 800895e:	3524      	adds	r5, #36	@ 0x24
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008960:	f835 4c04 	ldrh.w	r4, [r5, #-4]
 8008964:	4658      	mov	r0, fp
 8008966:	9400      	str	r4, [sp, #0]
 8008968:	f00d fe18 	bl	801659c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800896c:	4658      	mov	r0, fp
 800896e:	f7f7 fd2f 	bl	80003d0 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 8008972:	42ae      	cmp	r6, r5
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8008974:	4483      	add	fp, r0
			for( x = 0; x < uxArraySize; x++ )
 8008976:	d1d2      	bne.n	800891e <vTaskList+0x3e>
			vPortFree( pxTaskStatusArray );
 8008978:	4640      	mov	r0, r8
	}
 800897a:	b003      	add	sp, #12
 800897c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 8008980:	f000 be18 	b.w	80095b4 <vPortFree>
	}
 8008984:	b003      	add	sp, #12
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	bf00      	nop
 800898c:	20000b6c 	.word	0x20000b6c
 8008990:	08019204 	.word	0x08019204
 8008994:	080191f4 	.word	0x080191f4

08008998 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008998:	4b04      	ldr	r3, [pc, #16]	@ (80089ac <uxTaskResetEventItemValue+0x14>)
 800899a:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80089a2:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80089a8:	6193      	str	r3, [r2, #24]
}
 80089aa:	4770      	bx	lr
 80089ac:	20001040 	.word	0x20001040

080089b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <pvTaskIncrementMutexHeldCount+0x14>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	b11a      	cbz	r2, 80089be <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80089b6:	6819      	ldr	r1, [r3, #0]
 80089b8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80089ba:	3201      	adds	r2, #1
 80089bc:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80089be:	6818      	ldr	r0, [r3, #0]
	}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20001040 	.word	0x20001040

080089c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80089ca:	4c12      	ldr	r4, [pc, #72]	@ (8008a14 <prvCheckForValidListAndQueue+0x4c>)
{
 80089cc:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80089ce:	f000 fe99 	bl	8009704 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80089d2:	6825      	ldr	r5, [r4, #0]
 80089d4:	b125      	cbz	r5, 80089e0 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80089dc:	f000 beb4 	b.w	8009748 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80089e0:	4f0d      	ldr	r7, [pc, #52]	@ (8008a18 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80089e2:	4e0e      	ldr	r6, [pc, #56]	@ (8008a1c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7fe f923 	bl	8006c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7fe f920 	bl	8006c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008a20 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089f2:	9500      	str	r5, [sp, #0]
 80089f4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80089f6:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089f8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 80089fe:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a00:	4a0a      	ldr	r2, [pc, #40]	@ (8008a2c <prvCheckForValidListAndQueue+0x64>)
 8008a02:	f7fe fa23 	bl	8006e4c <xQueueGenericCreateStatic>
 8008a06:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d0e4      	beq.n	80089d6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a0c:	4908      	ldr	r1, [pc, #32]	@ (8008a30 <prvCheckForValidListAndQueue+0x68>)
 8008a0e:	f7fe ff2b 	bl	8007868 <vQueueAddToRegistry>
 8008a12:	e7e0      	b.n	80089d6 <prvCheckForValidListAndQueue+0xe>
 8008a14:	2000113c 	.word	0x2000113c
 8008a18:	2000115c 	.word	0x2000115c
 8008a1c:	20001148 	.word	0x20001148
 8008a20:	20001144 	.word	0x20001144
 8008a24:	20001140 	.word	0x20001140
 8008a28:	20001044 	.word	0x20001044
 8008a2c:	20001094 	.word	0x20001094
 8008a30:	0801920c 	.word	0x0801920c

08008a34 <xTimerCreateTimerTask>:
{
 8008a34:	b530      	push	{r4, r5, lr}
 8008a36:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8008a38:	f7ff ffc6 	bl	80089c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008a3c:	4b12      	ldr	r3, [pc, #72]	@ (8008a88 <xTimerCreateTimerTask+0x54>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	b1cb      	cbz	r3, 8008a76 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a42:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a44:	aa07      	add	r2, sp, #28
 8008a46:	a906      	add	r1, sp, #24
 8008a48:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a4a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a4c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a50:	f000 fce0 	bl	8009414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a54:	4623      	mov	r3, r4
 8008a56:	9a07      	ldr	r2, [sp, #28]
 8008a58:	9500      	str	r5, [sp, #0]
 8008a5a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8008a5e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8008a62:	490a      	ldr	r1, [pc, #40]	@ (8008a8c <xTimerCreateTimerTask+0x58>)
 8008a64:	480a      	ldr	r0, [pc, #40]	@ (8008a90 <xTimerCreateTimerTask+0x5c>)
 8008a66:	f7ff f8b5 	bl	8007bd4 <xTaskCreateStatic>
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <xTimerCreateTimerTask+0x60>)
 8008a6c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008a6e:	b110      	cbz	r0, 8008a76 <xTimerCreateTimerTask+0x42>
}
 8008a70:	2001      	movs	r0, #1
 8008a72:	b009      	add	sp, #36	@ 0x24
 8008a74:	bd30      	pop	{r4, r5, pc}
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008a86:	e7fe      	b.n	8008a86 <xTimerCreateTimerTask+0x52>
 8008a88:	2000113c 	.word	0x2000113c
 8008a8c:	08019214 	.word	0x08019214
 8008a90:	08008bdd 	.word	0x08008bdd
 8008a94:	20001138 	.word	0x20001138

08008a98 <xTimerCreate>:
	{
 8008a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9c:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008a9e:	202c      	movs	r0, #44	@ 0x2c
	{
 8008aa0:	4688      	mov	r8, r1
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008aa6:	f000 fcef 	bl	8009488 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008aaa:	4604      	mov	r4, r0
 8008aac:	b1b0      	cbz	r0, 8008adc <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008ab4:	f1b8 0f00 	cmp.w	r8, #0
 8008ab8:	d013      	beq.n	8008ae2 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8008aba:	f7ff ff85 	bl	80089c8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008abe:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008ac0:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8008ac2:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008ac4:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8008ac6:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008aca:	f7fe f8bd 	bl	8006c48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008ace:	b12d      	cbz	r5, 8008adc <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008ad0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008ad4:	f043 0304 	orr.w	r3, r3, #4
 8008ad8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008af2:	e7fe      	b.n	8008af2 <xTimerCreate+0x5a>

08008af4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008af4:	b1c8      	cbz	r0, 8008b2a <xTimerGenericCommand+0x36>
{
 8008af6:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8008af8:	4d18      	ldr	r5, [pc, #96]	@ (8008b5c <xTimerGenericCommand+0x68>)
{
 8008afa:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8008afc:	682c      	ldr	r4, [r5, #0]
 8008afe:	b18c      	cbz	r4, 8008b24 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b00:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b02:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8008b04:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b08:	dc18      	bgt.n	8008b3c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b0a:	f7ff fe05 	bl	8008718 <xTaskGetSchedulerState>
 8008b0e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b10:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b14:	d01b      	beq.n	8008b4e <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b16:	4669      	mov	r1, sp
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6828      	ldr	r0, [r5, #0]
 8008b1c:	f7fe fa52 	bl	8006fc4 <xQueueGenericSend>
}
 8008b20:	b005      	add	sp, #20
 8008b22:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8008b24:	4620      	mov	r0, r4
}
 8008b26:	b005      	add	sp, #20
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008b3a:	e7fe      	b.n	8008b3a <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b3c:	469c      	mov	ip, r3
 8008b3e:	4669      	mov	r1, sp
 8008b40:	2300      	movs	r3, #0
 8008b42:	4620      	mov	r0, r4
 8008b44:	4662      	mov	r2, ip
 8008b46:	f7fe fb75 	bl	8007234 <xQueueGenericSendFromISR>
}
 8008b4a:	b005      	add	sp, #20
 8008b4c:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	4669      	mov	r1, sp
 8008b52:	6828      	ldr	r0, [r5, #0]
 8008b54:	f7fe fa36 	bl	8006fc4 <xQueueGenericSend>
 8008b58:	e7e5      	b.n	8008b26 <xTimerGenericCommand+0x32>
 8008b5a:	bf00      	nop
 8008b5c:	2000113c 	.word	0x2000113c

08008b60 <prvSwitchTimerLists>:
{
 8008b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b62:	4e1c      	ldr	r6, [pc, #112]	@ (8008bd4 <prvSwitchTimerLists+0x74>)
 8008b64:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b66:	e00d      	b.n	8008b84 <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b68:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b6c:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b6e:	1d25      	adds	r5, r4, #4
 8008b70:	4628      	mov	r0, r5
 8008b72:	f7fe f893 	bl	8006c9c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b76:	6a23      	ldr	r3, [r4, #32]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b7c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b80:	075b      	lsls	r3, r3, #29
 8008b82:	d409      	bmi.n	8008b98 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b84:	6833      	ldr	r3, [r6, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	d1ed      	bne.n	8008b68 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 8008b8c:	4a12      	ldr	r2, [pc, #72]	@ (8008bd8 <prvSwitchTimerLists+0x78>)
 8008b8e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b90:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b92:	6031      	str	r1, [r6, #0]
}
 8008b94:	b003      	add	sp, #12
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b98:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b9a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ba0:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ba2:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8008ba4:	42af      	cmp	r7, r5
 8008ba6:	d205      	bcs.n	8008bb4 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ba8:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008baa:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bae:	f7fe f85d 	bl	8006c6c <vListInsert>
 8008bb2:	e7e7      	b.n	8008b84 <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	f7ff ff9c 	bl	8008af4 <xTimerGenericCommand>
				configASSERT( xResult );
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1e1      	bne.n	8008b84 <prvSwitchTimerLists+0x24>
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	e7fe      	b.n	8008bd0 <prvSwitchTimerLists+0x70>
 8008bd2:	bf00      	nop
 8008bd4:	20001144 	.word	0x20001144
 8008bd8:	20001140 	.word	0x20001140

08008bdc <prvTimerTask>:
{
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4e96      	ldr	r6, [pc, #600]	@ (8008e3c <prvTimerTask+0x260>)
 8008be2:	b087      	sub	sp, #28
 8008be4:	4d96      	ldr	r5, [pc, #600]	@ (8008e40 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8008be6:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8008bea:	4c96      	ldr	r4, [pc, #600]	@ (8008e44 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bec:	6833      	ldr	r3, [r6, #0]
 8008bee:	681f      	ldr	r7, [r3, #0]
 8008bf0:	2f00      	cmp	r7, #0
 8008bf2:	f000 80a9 	beq.w	8008d48 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8008bfa:	f7ff f95d 	bl	8007eb8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008bfe:	f7ff f963 	bl	8007ec8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008c02:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008c04:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008c06:	4290      	cmp	r0, r2
 8008c08:	f0c0 80a6 	bcc.w	8008d58 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c0c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8008c0e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c10:	f200 80c7 	bhi.w	8008da2 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8008c14:	f7ff faa4 	bl	8008160 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c18:	6832      	ldr	r2, [r6, #0]
 8008c1a:	68d2      	ldr	r2, [r2, #12]
 8008c1c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c20:	f10b 0804 	add.w	r8, fp, #4
 8008c24:	4640      	mov	r0, r8
 8008c26:	f7fe f839 	bl	8006c9c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c2a:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 8008c2e:	0743      	lsls	r3, r0, #29
 8008c30:	f100 80c6 	bmi.w	8008dc0 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c34:	f020 0001 	bic.w	r0, r0, #1
 8008c38:	f88b 0028 	strb.w	r0, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c3c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008c40:	4658      	mov	r0, fp
 8008c42:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c44:	2200      	movs	r2, #0
 8008c46:	a902      	add	r1, sp, #8
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	f7fe fbaf 	bl	80073ac <xQueueReceive>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d0cc      	beq.n	8008bec <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c52:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c54:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	db6e      	blt.n	8008d38 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c5a:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	b113      	cbz	r3, 8008c66 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c60:	1d38      	adds	r0, r7, #4
 8008c62:	f7fe f81b 	bl	8006c9c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008c66:	f7ff f92f 	bl	8007ec8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008c6a:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008c6c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	d379      	bcc.n	8008d66 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8008c72:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008c74:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d8e3      	bhi.n	8008c44 <prvTimerTask+0x68>
 8008c7c:	e8df f003 	tbb	[pc, r3]
 8008c80:	4c050505 	.word	0x4c050505
 8008c84:	05055336 	.word	0x05055336
 8008c88:	364c      	.short	0x364c
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c8a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c8e:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c90:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c94:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c96:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c98:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c9c:	185a      	adds	r2, r3, r1
 8008c9e:	bf2c      	ite	cs
 8008ca0:	2001      	movcs	r0, #1
 8008ca2:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008ca4:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ca6:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008ca8:	d87d      	bhi.n	8008da6 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008caa:	eba8 0303 	sub.w	r3, r8, r3
 8008cae:	4299      	cmp	r1, r3
 8008cb0:	f200 80af 	bhi.w	8008e12 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cbe:	0759      	lsls	r1, r3, #29
 8008cc0:	d5c0      	bpl.n	8008c44 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	9200      	str	r2, [sp, #0]
 8008cca:	9a03      	ldr	r2, [sp, #12]
 8008ccc:	441a      	add	r2, r3
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f7ff ff0f 	bl	8008af4 <xTimerGenericCommand>
							configASSERT( xResult );
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d1b4      	bne.n	8008c44 <prvTimerTask+0x68>
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	e7fe      	b.n	8008cea <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cf0:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cf6:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf8:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 8094 	beq.w	8008e2a <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d02:	4443      	add	r3, r8
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d04:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d06:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008d08:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d0a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008d0c:	d854      	bhi.n	8008db8 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8008e48 <prvTimerTask+0x26c>)
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f7fd ffab 	bl	8006c6c <vListInsert>
 8008d16:	e795      	b.n	8008c44 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 8008d24:	e78e      	b.n	8008c44 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d2a:	079a      	lsls	r2, r3, #30
 8008d2c:	d568      	bpl.n	8008e00 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d2e:	f023 0301 	bic.w	r3, r3, #1
 8008d32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8008d36:	e785      	b.n	8008c44 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	9905      	ldr	r1, [sp, #20]
 8008d3c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f6ff af7f 	blt.w	8008c44 <prvTimerTask+0x68>
 8008d46:	e788      	b.n	8008c5a <prvTimerTask+0x7e>
	vTaskSuspendAll();
 8008d48:	f7ff f8b6 	bl	8007eb8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008d4c:	f7ff f8bc 	bl	8007ec8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008d50:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008d52:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008d54:	4290      	cmp	r0, r2
 8008d56:	d209      	bcs.n	8008d6c <prvTimerTask+0x190>
		prvSwitchTimerLists();
 8008d58:	f7ff ff02 	bl	8008b60 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008d5c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8008d60:	f7ff f9fe 	bl	8008160 <xTaskResumeAll>
 8008d64:	e76e      	b.n	8008c44 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8008d66:	f7ff fefb 	bl	8008b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d6a:	e782      	b.n	8008c72 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d6c:	4b36      	ldr	r3, [pc, #216]	@ (8008e48 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8008d6e:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	fab2 f282 	clz	r2, r2
 8008d7a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d7c:	eba7 010a 	sub.w	r1, r7, sl
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	f7fe fda1 	bl	80078c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d86:	f7ff f9eb 	bl	8008160 <xTaskResumeAll>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f47f af5a 	bne.w	8008c44 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8008d90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d94:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	e750      	b.n	8008c44 <prvTimerTask+0x68>
 8008da2:	2200      	movs	r2, #0
 8008da4:	e7ea      	b.n	8008d7c <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008da6:	4543      	cmp	r3, r8
 8008da8:	d901      	bls.n	8008dae <prvTimerTask+0x1d2>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d082      	beq.n	8008cb4 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dae:	1d39      	adds	r1, r7, #4
 8008db0:	6830      	ldr	r0, [r6, #0]
 8008db2:	f7fd ff5b 	bl	8006c6c <vListInsert>
	return xProcessTimerNow;
 8008db6:	e745      	b.n	8008c44 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008db8:	6830      	ldr	r0, [r6, #0]
 8008dba:	f7fd ff57 	bl	8006c6c <vListInsert>
 8008dbe:	e741      	b.n	8008c44 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dc4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8008dca:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dcc:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008dd0:	d31a      	bcc.n	8008e08 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	ebaa 0307 	sub.w	r3, sl, r7
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d821      	bhi.n	8008e1e <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dda:	2300      	movs	r3, #0
 8008ddc:	463a      	mov	r2, r7
 8008dde:	4658      	mov	r0, fp
 8008de0:	4619      	mov	r1, r3
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	f7ff fe86 	bl	8008af4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f47f af27 	bne.w	8008c3c <prvTimerTask+0x60>
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	e7fe      	b.n	8008dfe <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8008e00:	4638      	mov	r0, r7
 8008e02:	f000 fbd7 	bl	80095b4 <vPortFree>
 8008e06:	e71d      	b.n	8008c44 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e08:	4641      	mov	r1, r8
 8008e0a:	6830      	ldr	r0, [r6, #0]
 8008e0c:	f7fd ff2e 	bl	8006c6c <vListInsert>
	return xProcessTimerNow;
 8008e10:	e714      	b.n	8008c3c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <prvTimerTask+0x26c>)
 8008e14:	1d39      	adds	r1, r7, #4
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	f7fd ff28 	bl	8006c6c <vListInsert>
	return xProcessTimerNow;
 8008e1c:	e712      	b.n	8008c44 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <prvTimerTask+0x26c>)
 8008e20:	4641      	mov	r1, r8
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	f7fd ff22 	bl	8006c6c <vListInsert>
	return xProcessTimerNow;
 8008e28:	e708      	b.n	8008c3c <prvTimerTask+0x60>
 8008e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e3a:	e7fe      	b.n	8008e3a <prvTimerTask+0x25e>
 8008e3c:	20001144 	.word	0x20001144
 8008e40:	20001134 	.word	0x20001134
 8008e44:	2000113c 	.word	0x2000113c
 8008e48:	20001140 	.word	0x20001140

08008e4c <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8008e4c:	b140      	cbz	r0, 8008e60 <pvTimerGetTimerID+0x14>
{
 8008e4e:	b510      	push	{r4, lr}
 8008e50:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8008e52:	f000 fc57 	bl	8009704 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e56:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8008e58:	f000 fc76 	bl	8009748 <vPortExitCritical>

	return pvReturn;
}
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	bd10      	pop	{r4, pc}
 8008e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008e70:	e7fe      	b.n	8008e70 <pvTimerGetTimerID+0x24>
 8008e72:	bf00      	nop

08008e74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e74:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e7a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e7c:	f7ff fc4c 	bl	8008718 <xTaskGetSchedulerState>
 8008e80:	2801      	cmp	r0, #1
 8008e82:	d100      	bne.n	8008e86 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008e84:	bd08      	pop	{r3, pc}
 8008e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008e8a:	f000 bca3 	b.w	80097d4 <xPortSysTickHandler>
 8008e8e:	bf00      	nop

08008e90 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e90:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e94:	b92b      	cbnz	r3, 8008ea2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e96:	4b06      	ldr	r3, [pc, #24]	@ (8008eb0 <osKernelInitialize+0x20>)
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	b928      	cbnz	r0, 8008ea8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ea0:	4770      	bx	lr
    stat = osErrorISR;
 8008ea2:	f06f 0005 	mvn.w	r0, #5
 8008ea6:	4770      	bx	lr
    } else {
      stat = osError;
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20002a28 	.word	0x20002a28

08008eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eba:	b974      	cbnz	r4, 8008eda <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008ebc:	4b08      	ldr	r3, [pc, #32]	@ (8008ee0 <osKernelStart+0x2c>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	2a01      	cmp	r2, #1
 8008ec2:	d107      	bne.n	8008ed4 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec4:	4907      	ldr	r1, [pc, #28]	@ (8008ee4 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	77cc      	strb	r4, [r1, #31]
 8008eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ecc:	f7fe ffae 	bl	8007e2c <vTaskStartScheduler>
      stat = osOK;
 8008ed0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008ed2:	bd10      	pop	{r4, pc}
      stat = osError;
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ed8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008eda:	f06f 0005 	mvn.w	r0, #5
}
 8008ede:	bd10      	pop	{r4, pc}
 8008ee0:	20002a28 	.word	0x20002a28
 8008ee4:	e000ed00 	.word	0xe000ed00

08008ee8 <osKernelGetTickCount>:
 8008ee8:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8008eec:	b10b      	cbz	r3, 8008ef2 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8008eee:	f7fe bff1 	b.w	8007ed4 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8008ef2:	f7fe bfe9 	b.w	8007ec8 <xTaskGetTickCount>
 8008ef6:	bf00      	nop

08008ef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008efa:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008efc:	b087      	sub	sp, #28
  hTask = NULL;
 8008efe:	9505      	str	r5, [sp, #20]
 8008f00:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008f04:	b300      	cbz	r0, 8008f48 <osThreadNew+0x50>
 8008f06:	b9fb      	cbnz	r3, 8008f48 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008f08:	4614      	mov	r4, r2
 8008f0a:	b302      	cbz	r2, 8008f4e <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008f0c:	6996      	ldr	r6, [r2, #24]
 8008f0e:	b9c6      	cbnz	r6, 8008f42 <osThreadNew+0x4a>
 8008f10:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	07db      	lsls	r3, r3, #31
 8008f16:	d417      	bmi.n	8008f48 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008f18:	6963      	ldr	r3, [r4, #20]
 8008f1a:	b333      	cbz	r3, 8008f6a <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f1c:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f1e:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8008f20:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f24:	68e7      	ldr	r7, [r4, #12]
 8008f26:	b31d      	cbz	r5, 8008f70 <osThreadNew+0x78>
 8008f28:	2f5b      	cmp	r7, #91	@ 0x5b
 8008f2a:	d90d      	bls.n	8008f48 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f2c:	6924      	ldr	r4, [r4, #16]
 8008f2e:	b15b      	cbz	r3, 8008f48 <osThreadNew+0x50>
 8008f30:	b154      	cbz	r4, 8008f48 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f32:	460b      	mov	r3, r1
 8008f34:	9600      	str	r6, [sp, #0]
 8008f36:	4661      	mov	r1, ip
 8008f38:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8008f3c:	f7fe fe4a 	bl	8007bd4 <xTaskCreateStatic>
 8008f40:	e003      	b.n	8008f4a <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f42:	1e72      	subs	r2, r6, #1
 8008f44:	2a37      	cmp	r2, #55	@ 0x37
 8008f46:	d9e4      	bls.n	8008f12 <osThreadNew+0x1a>
        return (NULL);
 8008f48:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8008f4a:	b007      	add	sp, #28
 8008f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8008f52:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f54:	460b      	mov	r3, r1
 8008f56:	4621      	mov	r1, r4
 8008f58:	ac05      	add	r4, sp, #20
 8008f5a:	9600      	str	r6, [sp, #0]
 8008f5c:	9401      	str	r4, [sp, #4]
 8008f5e:	f7fe fe73 	bl	8007c48 <xTaskCreate>
 8008f62:	2801      	cmp	r0, #1
 8008f64:	d1f0      	bne.n	8008f48 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8008f66:	9805      	ldr	r0, [sp, #20]
 8008f68:	e7ef      	b.n	8008f4a <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 8008f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f6e:	e7d6      	b.n	8008f1e <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	d1e9      	bne.n	8008f48 <osThreadNew+0x50>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e6      	bne.n	8008f48 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	4664      	mov	r4, ip
 8008f7e:	e7e9      	b.n	8008f54 <osThreadNew+0x5c>

08008f80 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	f3ef 8405 	mrs	r4, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8008f86:	b96c      	cbnz	r4, 8008fa4 <osThreadTerminate+0x24>
    stat = osErrorISR;
  }
  else if (hTask == NULL) {
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b170      	cbz	r0, 8008faa <osThreadTerminate+0x2a>
    stat = osErrorParameter;
  }
  else {
    tstate = eTaskGetState (hTask);
 8008f8c:	f7fe ff0e 	bl	8007dac <eTaskGetState>

    if (tstate != eDeleted) {
 8008f90:	2804      	cmp	r0, #4
 8008f92:	d004      	beq.n	8008f9e <osThreadTerminate+0x1e>
      stat = osOK;
      vTaskDelete (hTask);
 8008f94:	4628      	mov	r0, r5
 8008f96:	f7fe fe87 	bl	8007ca8 <vTaskDelete>
      stat = osOK;
 8008f9a:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
      stat = osErrorResource;
 8008f9e:	f06f 0002 	mvn.w	r0, #2
}
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8008fa4:	f06f 0005 	mvn.w	r0, #5
}
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 8008faa:	f06f 0003 	mvn.w	r0, #3
}
 8008fae:	bd38      	pop	{r3, r4, r5, pc}

08008fb0 <osDelay>:
 8008fb0:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb4:	b93a      	cbnz	r2, 8008fc6 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8008fb6:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008fb8:	b908      	cbnz	r0, 8008fbe <osDelay+0xe>
    stat = osOK;
 8008fba:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008fbc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8008fbe:	f7ff f8df 	bl	8008180 <vTaskDelay>
    stat = osOK;
 8008fc2:	2000      	movs	r0, #0
}
 8008fc4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8008fc6:	f06f 0005 	mvn.w	r0, #5
}
 8008fca:	4770      	bx	lr

08008fcc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008fcc:	b530      	push	{r4, r5, lr}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008fd4:	b9bd      	cbnz	r5, 8009006 <osMutexNew+0x3a>
    if (attr != NULL) {
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	b1c0      	cbz	r0, 800900c <osMutexNew+0x40>
      type = attr->attr_bits;
 8008fda:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008fdc:	072b      	lsls	r3, r5, #28
 8008fde:	d412      	bmi.n	8009006 <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fe0:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fe2:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fe6:	68c3      	ldr	r3, [r0, #12]
 8008fe8:	b309      	cbz	r1, 800902e <osMutexNew+0x62>
 8008fea:	2b4f      	cmp	r3, #79	@ 0x4f
 8008fec:	d90b      	bls.n	8009006 <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008fee:	b345      	cbz	r5, 8009042 <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008ff0:	2004      	movs	r0, #4
 8008ff2:	f7fe f8ab 	bl	800714c <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008ff6:	b130      	cbz	r0, 8009006 <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
 8008ff8:	6824      	ldr	r4, [r4, #0]
 8008ffa:	e00c      	b.n	8009016 <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008ffc:	2004      	movs	r0, #4
 8008ffe:	f7fe f8fb 	bl	80071f8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8009002:	2800      	cmp	r0, #0
 8009004:	d1f8      	bne.n	8008ff8 <osMutexNew+0x2c>
  hMutex = NULL;
 8009006:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009008:	b003      	add	sp, #12
 800900a:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 800900c:	2001      	movs	r0, #1
 800900e:	f7fe f8f3 	bl	80071f8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8009012:	2800      	cmp	r0, #0
 8009014:	d0f7      	beq.n	8009006 <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
 8009016:	4621      	mov	r1, r4
 8009018:	9001      	str	r0, [sp, #4]
 800901a:	f7fe fc25 	bl	8007868 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800901e:	9801      	ldr	r0, [sp, #4]
 8009020:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009024:	bf18      	it	ne
 8009026:	f040 0001 	orrne.w	r0, r0, #1
}
 800902a:	b003      	add	sp, #12
 800902c:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e9      	bne.n	8009006 <osMutexNew+0x3a>
            if (rmtx != 0U) {
 8009032:	2d00      	cmp	r5, #0
 8009034:	d1e2      	bne.n	8008ffc <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8009036:	2001      	movs	r0, #1
 8009038:	f7fe f8de 	bl	80071f8 <xQueueCreateMutex>
      if (hMutex != NULL) {
 800903c:	2800      	cmp	r0, #0
 800903e:	d1db      	bne.n	8008ff8 <osMutexNew+0x2c>
 8009040:	e7e1      	b.n	8009006 <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009042:	2001      	movs	r0, #1
 8009044:	f7fe f882 	bl	800714c <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 8009048:	2800      	cmp	r0, #0
 800904a:	d1d5      	bne.n	8008ff8 <osMutexNew+0x2c>
 800904c:	e7db      	b.n	8009006 <osMutexNew+0x3a>
 800904e:	bf00      	nop

08009050 <osMutexAcquire>:
 8009050:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009054:	b9d2      	cbnz	r2, 800908c <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009056:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 800905c:	d919      	bls.n	8009092 <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800905e:	f003 0501 	and.w	r5, r3, #1
 8009062:	460c      	mov	r4, r1
 8009064:	f020 0001 	bic.w	r0, r0, #1
 8009068:	b955      	cbnz	r5, 8009080 <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800906a:	f7fe fa5d 	bl	8007528 <xQueueSemaphoreTake>
 800906e:	2801      	cmp	r0, #1
 8009070:	d00a      	beq.n	8009088 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8009072:	2c00      	cmp	r4, #0
 8009074:	bf14      	ite	ne
 8009076:	f06f 0001 	mvnne.w	r0, #1
 800907a:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 800907e:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009080:	f7fe fb2c 	bl	80076dc <xQueueTakeMutexRecursive>
 8009084:	2801      	cmp	r0, #1
 8009086:	d1f4      	bne.n	8009072 <osMutexAcquire+0x22>
  stat = osOK;
 8009088:	2000      	movs	r0, #0
}
 800908a:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 800908c:	f06f 0005 	mvn.w	r0, #5
}
 8009090:	4770      	bx	lr
    stat = osErrorParameter;
 8009092:	f06f 0003 	mvn.w	r0, #3
}
 8009096:	bd38      	pop	{r3, r4, r5, pc}

08009098 <osMutexRelease>:
 8009098:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800909c:	b9b9      	cbnz	r1, 80090ce <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800909e:	2801      	cmp	r0, #1
 80090a0:	4602      	mov	r2, r0
 80090a2:	d917      	bls.n	80090d4 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80090a4:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80090a8:	b508      	push	{r3, lr}
 80090aa:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 80090ae:	b93b      	cbnz	r3, 80090c0 <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80090b0:	461a      	mov	r2, r3
 80090b2:	4619      	mov	r1, r3
 80090b4:	f7fd ff86 	bl	8006fc4 <xQueueGenericSend>
 80090b8:	2801      	cmp	r0, #1
 80090ba:	d105      	bne.n	80090c8 <osMutexRelease+0x30>
  stat = osOK;
 80090bc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80090be:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80090c0:	f7fe f87a 	bl	80071b8 <xQueueGiveMutexRecursive>
 80090c4:	2801      	cmp	r0, #1
 80090c6:	d0f9      	beq.n	80090bc <osMutexRelease+0x24>
        stat = osErrorResource;
 80090c8:	f06f 0002 	mvn.w	r0, #2
}
 80090cc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80090ce:	f06f 0005 	mvn.w	r0, #5
 80090d2:	4770      	bx	lr
    stat = osErrorParameter;
 80090d4:	f06f 0003 	mvn.w	r0, #3
}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop

080090dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	b083      	sub	sp, #12
 80090e0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80090e4:	b98e      	cbnz	r6, 800910a <osSemaphoreNew+0x2e>
 80090e6:	4605      	mov	r5, r0
 80090e8:	b178      	cbz	r0, 800910a <osSemaphoreNew+0x2e>
 80090ea:	4288      	cmp	r0, r1
 80090ec:	460f      	mov	r7, r1
 80090ee:	d30c      	bcc.n	800910a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 80090f0:	4614      	mov	r4, r2
 80090f2:	b172      	cbz	r2, 8009112 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80090f4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80090f8:	b14a      	cbz	r2, 800910e <osSemaphoreNew+0x32>
 80090fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80090fc:	d905      	bls.n	800910a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80090fe:	2801      	cmp	r0, #1
 8009100:	d02f      	beq.n	8009162 <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009102:	f7fd ff1d 	bl	8006f40 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009106:	4605      	mov	r5, r0
 8009108:	b968      	cbnz	r0, 8009126 <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 800910a:	2500      	movs	r5, #0
 800910c:	e010      	b.n	8009130 <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1fb      	bne.n	800910a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8009112:	2d01      	cmp	r5, #1
 8009114:	d00f      	beq.n	8009136 <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009116:	4628      	mov	r0, r5
 8009118:	4639      	mov	r1, r7
 800911a:	f7fd ff35 	bl	8006f88 <xQueueCreateCountingSemaphore>
 800911e:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8009120:	2d00      	cmp	r5, #0
 8009122:	d0f2      	beq.n	800910a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8009124:	b104      	cbz	r4, 8009128 <osSemaphoreNew+0x4c>
          name = attr->name;
 8009126:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f7fe fb9c 	bl	8007868 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8009130:	4628      	mov	r0, r5
 8009132:	b003      	add	sp, #12
 8009134:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8009136:	4628      	mov	r0, r5
 8009138:	2203      	movs	r2, #3
 800913a:	2100      	movs	r1, #0
 800913c:	f7fd fed8 	bl	8006ef0 <xQueueGenericCreate>
 8009140:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009142:	2d00      	cmp	r5, #0
 8009144:	d0e1      	beq.n	800910a <osSemaphoreNew+0x2e>
 8009146:	2f00      	cmp	r7, #0
 8009148:	d0ea      	beq.n	8009120 <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800914a:	2300      	movs	r3, #0
 800914c:	4628      	mov	r0, r5
 800914e:	461a      	mov	r2, r3
 8009150:	4619      	mov	r1, r3
 8009152:	f7fd ff37 	bl	8006fc4 <xQueueGenericSend>
 8009156:	2801      	cmp	r0, #1
 8009158:	d0e4      	beq.n	8009124 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 800915a:	4628      	mov	r0, r5
 800915c:	f7fe fb5a 	bl	8007814 <vQueueDelete>
      if (hSemaphore != NULL) {
 8009160:	e7d3      	b.n	800910a <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009162:	4613      	mov	r3, r2
 8009164:	2203      	movs	r2, #3
 8009166:	4631      	mov	r1, r6
 8009168:	9200      	str	r2, [sp, #0]
 800916a:	4632      	mov	r2, r6
 800916c:	f7fd fe6e 	bl	8006e4c <xQueueGenericCreateStatic>
 8009170:	4605      	mov	r5, r0
 8009172:	e7e6      	b.n	8009142 <osSemaphoreNew+0x66>

08009174 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009174:	b360      	cbz	r0, 80091d0 <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009176:	b510      	push	{r4, lr}
 8009178:	460c      	mov	r4, r1
 800917a:	b082      	sub	sp, #8
 800917c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009180:	b1b3      	cbz	r3, 80091b0 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8009182:	bb11      	cbnz	r1, 80091ca <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009184:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009186:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009188:	f7fe fac8 	bl	800771c <xQueueReceiveFromISR>
 800918c:	2801      	cmp	r0, #1
 800918e:	d118      	bne.n	80091c2 <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	b913      	cbnz	r3, 800919a <osSemaphoreAcquire+0x26>
  stat = osOK;
 8009194:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009196:	b002      	add	sp, #8
 8009198:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800919a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800919e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	e7f1      	b.n	8009194 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80091b0:	f7fe f9ba 	bl	8007528 <xQueueSemaphoreTake>
 80091b4:	2801      	cmp	r0, #1
 80091b6:	d0ed      	beq.n	8009194 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 80091b8:	b11c      	cbz	r4, 80091c2 <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 80091ba:	f06f 0001 	mvn.w	r0, #1
}
 80091be:	b002      	add	sp, #8
 80091c0:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80091c2:	f06f 0002 	mvn.w	r0, #2
}
 80091c6:	b002      	add	sp, #8
 80091c8:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80091ca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80091ce:	e7e2      	b.n	8009196 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 80091d0:	f06f 0003 	mvn.w	r0, #3
}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80091d8:	b328      	cbz	r0, 8009226 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80091da:	b500      	push	{lr}
 80091dc:	b083      	sub	sp, #12
 80091de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80091e2:	b19b      	cbz	r3, 800920c <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 80091e4:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80091e6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80091e8:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80091ea:	f7fe f889 	bl	8007300 <xQueueGiveFromISR>
 80091ee:	2801      	cmp	r0, #1
 80091f0:	d116      	bne.n	8009220 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	b183      	cbz	r3, 8009218 <osSemaphoreRelease+0x40>
 80091f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80091fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	e005      	b.n	8009218 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800920c:	461a      	mov	r2, r3
 800920e:	4619      	mov	r1, r3
 8009210:	f7fd fed8 	bl	8006fc4 <xQueueGenericSend>
 8009214:	2801      	cmp	r0, #1
 8009216:	d103      	bne.n	8009220 <osSemaphoreRelease+0x48>
  stat = osOK;
 8009218:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800921a:	b003      	add	sp, #12
 800921c:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 8009220:	f06f 0002 	mvn.w	r0, #2
 8009224:	e7f9      	b.n	800921a <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 8009226:	f06f 0003 	mvn.w	r0, #3
}
 800922a:	4770      	bx	lr

0800922c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009232:	b944      	cbnz	r4, 8009246 <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8009234:	4605      	mov	r5, r0
 8009236:	b148      	cbz	r0, 800924c <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009238:	f7fe fb2e 	bl	8007898 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 800923c:	4628      	mov	r0, r5
 800923e:	f7fe fae9 	bl	8007814 <vQueueDelete>
    stat = osOK;
 8009242:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 8009244:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8009246:	f06f 0005 	mvn.w	r0, #5
}
 800924a:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 800924c:	f06f 0003 	mvn.w	r0, #3
}
 8009250:	bd38      	pop	{r3, r4, r5, pc}
 8009252:	bf00      	nop

08009254 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009256:	b083      	sub	sp, #12
 8009258:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800925c:	b987      	cbnz	r7, 8009280 <osMessageQueueNew+0x2c>
 800925e:	4605      	mov	r5, r0
 8009260:	b170      	cbz	r0, 8009280 <osMessageQueueNew+0x2c>
 8009262:	b169      	cbz	r1, 8009280 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8009264:	4614      	mov	r4, r2
 8009266:	b17a      	cbz	r2, 8009288 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009268:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800926c:	b1c3      	cbz	r3, 80092a0 <osMessageQueueNew+0x4c>
 800926e:	2a4f      	cmp	r2, #79	@ 0x4f
 8009270:	d906      	bls.n	8009280 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009272:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009274:	b122      	cbz	r2, 8009280 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009276:	fb01 f505 	mul.w	r5, r1, r5
 800927a:	6966      	ldr	r6, [r4, #20]
 800927c:	42ae      	cmp	r6, r5
 800927e:	d21e      	bcs.n	80092be <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8009280:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009282:	4628      	mov	r0, r5
 8009284:	b003      	add	sp, #12
 8009286:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8009288:	f7fd fe32 	bl	8006ef0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800928c:	4605      	mov	r5, r0
 800928e:	2800      	cmp	r0, #0
 8009290:	d0f6      	beq.n	8009280 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8009292:	4628      	mov	r0, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7fe fae7 	bl	8007868 <vQueueAddToRegistry>
}
 800929a:	4628      	mov	r0, r5
 800929c:	b003      	add	sp, #12
 800929e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	d1ed      	bne.n	8009280 <osMessageQueueNew+0x2c>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1ea      	bne.n	8009280 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092aa:	6962      	ldr	r2, [r4, #20]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d1e7      	bne.n	8009280 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 80092b0:	f7fd fe1e 	bl	8006ef0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80092b4:	4605      	mov	r5, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d0e2      	beq.n	8009280 <osMessageQueueNew+0x2c>
        name = attr->name;
 80092ba:	6824      	ldr	r4, [r4, #0]
 80092bc:	e7e9      	b.n	8009292 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092be:	9700      	str	r7, [sp, #0]
 80092c0:	f7fd fdc4 	bl	8006e4c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80092c4:	4605      	mov	r5, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1f7      	bne.n	80092ba <osMessageQueueNew+0x66>
 80092ca:	e7d9      	b.n	8009280 <osMessageQueueNew+0x2c>

080092cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092cc:	b560      	push	{r5, r6, lr}
 80092ce:	461e      	mov	r6, r3
 80092d0:	b083      	sub	sp, #12
 80092d2:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092d6:	fab0 f580 	clz	r5, r0
 80092da:	fab1 f381 	clz	r3, r1
 80092de:	096d      	lsrs	r5, r5, #5
 80092e0:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 80092e2:	b1da      	cbz	r2, 800931c <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	bf18      	it	ne
 80092e8:	f043 0301 	orrne.w	r3, r3, #1
 80092ec:	bb33      	cbnz	r3, 800933c <osMessageQueuePut+0x70>
 80092ee:	bb2d      	cbnz	r5, 800933c <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092f0:	462b      	mov	r3, r5
 80092f2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80092f4:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092f6:	f7fd ff9d 	bl	8007234 <xQueueGenericSendFromISR>
 80092fa:	2801      	cmp	r0, #1
 80092fc:	d11a      	bne.n	8009334 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	b14b      	cbz	r3, 8009316 <osMessageQueuePut+0x4a>
 8009302:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009316:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009318:	b003      	add	sp, #12
 800931a:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800931c:	b975      	cbnz	r5, 800933c <osMessageQueuePut+0x70>
 800931e:	b96b      	cbnz	r3, 800933c <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009320:	4632      	mov	r2, r6
 8009322:	f7fd fe4f 	bl	8006fc4 <xQueueGenericSend>
 8009326:	2801      	cmp	r0, #1
 8009328:	d0f5      	beq.n	8009316 <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 800932a:	b11e      	cbz	r6, 8009334 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 800932c:	f06f 0001 	mvn.w	r0, #1
}
 8009330:	b003      	add	sp, #12
 8009332:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 8009334:	f06f 0002 	mvn.w	r0, #2
}
 8009338:	b003      	add	sp, #12
 800933a:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 800933c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009340:	e7ea      	b.n	8009318 <osMessageQueuePut+0x4c>
 8009342:	bf00      	nop

08009344 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	461e      	mov	r6, r3
 8009348:	b082      	sub	sp, #8
 800934a:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800934e:	fab0 f580 	clz	r5, r0
 8009352:	fab1 f481 	clz	r4, r1
 8009356:	096d      	lsrs	r5, r5, #5
 8009358:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 800935a:	b1d3      	cbz	r3, 8009392 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800935c:	2e00      	cmp	r6, #0
 800935e:	bf18      	it	ne
 8009360:	f044 0401 	orrne.w	r4, r4, #1
 8009364:	bb2c      	cbnz	r4, 80093b2 <osMessageQueueGet+0x6e>
 8009366:	bb25      	cbnz	r5, 80093b2 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009368:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800936a:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800936c:	f7fe f9d6 	bl	800771c <xQueueReceiveFromISR>
 8009370:	2801      	cmp	r0, #1
 8009372:	d11a      	bne.n	80093aa <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	b14b      	cbz	r3, 800938c <osMessageQueueGet+0x48>
 8009378:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800937c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009380:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800938c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800938e:	b002      	add	sp, #8
 8009390:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009392:	b975      	cbnz	r5, 80093b2 <osMessageQueueGet+0x6e>
 8009394:	b96c      	cbnz	r4, 80093b2 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009396:	4632      	mov	r2, r6
 8009398:	f7fe f808 	bl	80073ac <xQueueReceive>
 800939c:	2801      	cmp	r0, #1
 800939e:	d0f5      	beq.n	800938c <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 80093a0:	b11e      	cbz	r6, 80093aa <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 80093a2:	f06f 0001 	mvn.w	r0, #1
}
 80093a6:	b002      	add	sp, #8
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 80093aa:	f06f 0002 	mvn.w	r0, #2
}
 80093ae:	b002      	add	sp, #8
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 80093b2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80093b6:	e7ea      	b.n	800938e <osMessageQueueGet+0x4a>

080093b8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80093b8:	b130      	cbz	r0, 80093c8 <osMessageQueueGetCount+0x10>
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	b10b      	cbz	r3, 80093c4 <osMessageQueueGetCount+0xc>
 80093c0:	f7fe ba1c 	b.w	80077fc <uxQueueMessagesWaitingFromISR>
 80093c4:	f7fe ba06 	b.w	80077d4 <uxQueueMessagesWaiting>
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop

080093cc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	f3ef 8405 	mrs	r4, IPSR
 80093d2:	b944      	cbnz	r4, 80093e6 <osMessageQueueDelete+0x1a>
 80093d4:	4605      	mov	r5, r0
 80093d6:	b148      	cbz	r0, 80093ec <osMessageQueueDelete+0x20>
 80093d8:	f7fe fa5e 	bl	8007898 <vQueueUnregisterQueue>
 80093dc:	4628      	mov	r0, r5
 80093de:	f7fe fa19 	bl	8007814 <vQueueDelete>
 80093e2:	4620      	mov	r0, r4
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	f06f 0005 	mvn.w	r0, #5
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	f06f 0003 	mvn.w	r0, #3
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	bf00      	nop

080093f4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093f6:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093f8:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093fe:	4c04      	ldr	r4, [pc, #16]	@ (8009410 <vApplicationGetIdleTaskMemory+0x1c>)
 8009400:	600c      	str	r4, [r1, #0]
}
 8009402:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009406:	6013      	str	r3, [r2, #0]
}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	200029cc 	.word	0x200029cc
 8009410:	200021cc 	.word	0x200021cc

08009414 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009414:	4b05      	ldr	r3, [pc, #20]	@ (800942c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009416:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009418:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800941a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800941e:	4c04      	ldr	r4, [pc, #16]	@ (8009430 <vApplicationGetTimerTaskMemory+0x1c>)
 8009420:	600c      	str	r4, [r1, #0]
}
 8009422:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009426:	6013      	str	r3, [r2, #0]
}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20002170 	.word	0x20002170
 8009430:	20001170 	.word	0x20001170

08009434 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009434:	4b12      	ldr	r3, [pc, #72]	@ (8009480 <prvInsertBlockIntoFreeList+0x4c>)
{
 8009436:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009438:	461a      	mov	r2, r3
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4283      	cmp	r3, r0
 800943e:	d3fb      	bcc.n	8009438 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009440:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009442:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009444:	eb02 0c04 	add.w	ip, r2, r4
 8009448:	4560      	cmp	r0, ip
 800944a:	d008      	beq.n	800945e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800944c:	1844      	adds	r4, r0, r1
 800944e:	42a3      	cmp	r3, r4
 8009450:	d00b      	beq.n	800946a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009452:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009454:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009456:	bf18      	it	ne
 8009458:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800945a:	bc30      	pop	{r4, r5}
 800945c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800945e:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009460:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009462:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009464:	4283      	cmp	r3, r0
 8009466:	d1f8      	bne.n	800945a <prvInsertBlockIntoFreeList+0x26>
 8009468:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800946a:	4c06      	ldr	r4, [pc, #24]	@ (8009484 <prvInsertBlockIntoFreeList+0x50>)
 800946c:	6824      	ldr	r4, [r4, #0]
 800946e:	42a3      	cmp	r3, r4
 8009470:	d003      	beq.n	800947a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009472:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009476:	4429      	add	r1, r5
 8009478:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800947a:	6004      	str	r4, [r0, #0]
 800947c:	e7ea      	b.n	8009454 <prvInsertBlockIntoFreeList+0x20>
 800947e:	bf00      	nop
 8009480:	20002a44 	.word	0x20002a44
 8009484:	20002a40 	.word	0x20002a40

08009488 <pvPortMalloc>:
{
 8009488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 800948c:	4d41      	ldr	r5, [pc, #260]	@ (8009594 <pvPortMalloc+0x10c>)
{
 800948e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009490:	f7fe fd12 	bl	8007eb8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05c      	beq.n	8009554 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800949a:	4b3f      	ldr	r3, [pc, #252]	@ (8009598 <pvPortMalloc+0x110>)
 800949c:	681e      	ldr	r6, [r3, #0]
 800949e:	4234      	tst	r4, r6
 80094a0:	d12e      	bne.n	8009500 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 80094a2:	b36c      	cbz	r4, 8009500 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094a4:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80094a6:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094aa:	d002      	beq.n	80094b2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094ac:	f021 0107 	bic.w	r1, r1, #7
 80094b0:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094b2:	b329      	cbz	r1, 8009500 <pvPortMalloc+0x78>
 80094b4:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80095b0 <pvPortMalloc+0x128>
 80094b8:	f8d8 7000 	ldr.w	r7, [r8]
 80094bc:	428f      	cmp	r7, r1
 80094be:	d31f      	bcc.n	8009500 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80094c0:	4836      	ldr	r0, [pc, #216]	@ (800959c <pvPortMalloc+0x114>)
 80094c2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094c4:	e003      	b.n	80094ce <pvPortMalloc+0x46>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	b123      	cbz	r3, 80094d4 <pvPortMalloc+0x4c>
 80094ca:	4620      	mov	r0, r4
 80094cc:	461c      	mov	r4, r3
 80094ce:	6862      	ldr	r2, [r4, #4]
 80094d0:	428a      	cmp	r2, r1
 80094d2:	d3f8      	bcc.n	80094c6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	d012      	beq.n	8009500 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094da:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094dc:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094de:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094e2:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094e4:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094e6:	d916      	bls.n	8009516 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094e8:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ea:	0742      	lsls	r2, r0, #29
 80094ec:	d00e      	beq.n	800950c <pvPortMalloc+0x84>
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	e7fe      	b.n	80094fe <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8009500:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8009502:	f7fe fe2d 	bl	8008160 <xTaskResumeAll>
}
 8009506:	4628      	mov	r0, r5
 8009508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800950c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800950e:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009510:	f7ff ff90 	bl	8009434 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009514:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009516:	4b22      	ldr	r3, [pc, #136]	@ (80095a0 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009518:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800951a:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800951c:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009520:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009522:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009526:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8009528:	491e      	ldr	r1, [pc, #120]	@ (80095a4 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800952a:	bf38      	it	cc
 800952c:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8009534:	680b      	ldr	r3, [r1, #0]
 8009536:	3301      	adds	r3, #1
 8009538:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800953a:	f7fe fe11 	bl	8008160 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800953e:	076b      	lsls	r3, r5, #29
 8009540:	d0e1      	beq.n	8009506 <pvPortMalloc+0x7e>
 8009542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8009554:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8009556:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8009558:	4a14      	ldr	r2, [pc, #80]	@ (80095ac <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800955a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800955e:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009560:	4e0e      	ldr	r6, [pc, #56]	@ (800959c <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009562:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009566:	bf18      	it	ne
 8009568:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800956a:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 800956c:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800956e:	bf18      	it	ne
 8009570:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009578:	1ad3      	subs	r3, r2, r3
}
 800957a:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 800957c:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009580:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009584:	4a06      	ldr	r2, [pc, #24]	@ (80095a0 <pvPortMalloc+0x118>)
 8009586:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009588:	4a09      	ldr	r2, [pc, #36]	@ (80095b0 <pvPortMalloc+0x128>)
 800958a:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800958c:	4b02      	ldr	r3, [pc, #8]	@ (8009598 <pvPortMalloc+0x110>)
 800958e:	601f      	str	r7, [r3, #0]
}
 8009590:	e785      	b.n	800949e <pvPortMalloc+0x16>
 8009592:	bf00      	nop
 8009594:	20002a40 	.word	0x20002a40
 8009598:	20002a2c 	.word	0x20002a2c
 800959c:	20002a44 	.word	0x20002a44
 80095a0:	20002a38 	.word	0x20002a38
 80095a4:	20002a34 	.word	0x20002a34
 80095a8:	20002a4c 	.word	0x20002a4c
 80095ac:	20008e44 	.word	0x20008e44
 80095b0:	20002a3c 	.word	0x20002a3c

080095b4 <vPortFree>:
	if( pv != NULL )
 80095b4:	b1d0      	cbz	r0, 80095ec <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009628 <vPortFree+0x74>)
 80095b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	4213      	tst	r3, r2
 80095c0:	d00b      	beq.n	80095da <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095c2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80095c6:	b191      	cbz	r1, 80095ee <vPortFree+0x3a>
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	e7fe      	b.n	80095d8 <vPortFree+0x24>
 80095da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095ea:	e7fe      	b.n	80095ea <vPortFree+0x36>
 80095ec:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095ee:	ea23 0302 	bic.w	r3, r3, r2
{
 80095f2:	b500      	push	{lr}
 80095f4:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095f6:	f840 3c04 	str.w	r3, [r0, #-4]
 80095fa:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80095fc:	f7fe fc5c 	bl	8007eb8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009600:	4a0a      	ldr	r2, [pc, #40]	@ (800962c <vPortFree+0x78>)
 8009602:	9801      	ldr	r0, [sp, #4]
 8009604:	6811      	ldr	r1, [r2, #0]
 8009606:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800960a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800960c:	440b      	add	r3, r1
 800960e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009610:	f7ff ff10 	bl	8009434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009614:	4a06      	ldr	r2, [pc, #24]	@ (8009630 <vPortFree+0x7c>)
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	6013      	str	r3, [r2, #0]
}
 800961c:	b003      	add	sp, #12
 800961e:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8009622:	f7fe bd9d 	b.w	8008160 <xTaskResumeAll>
 8009626:	bf00      	nop
 8009628:	20002a2c 	.word	0x20002a2c
 800962c:	20002a3c 	.word	0x20002a3c
 8009630:	20002a30 	.word	0x20002a30

08009634 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009634:	4808      	ldr	r0, [pc, #32]	@ (8009658 <prvPortStartFirstTask+0x24>)
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	6800      	ldr	r0, [r0, #0]
 800963a:	f380 8808 	msr	MSP, r0
 800963e:	f04f 0000 	mov.w	r0, #0
 8009642:	f380 8814 	msr	CONTROL, r0
 8009646:	b662      	cpsie	i
 8009648:	b661      	cpsie	f
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	df00      	svc	0
 8009654:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009656:	0000      	.short	0x0000
 8009658:	e000ed08 	.word	0xe000ed08

0800965c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800965c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800966c <vPortEnableVFP+0x10>
 8009660:	6801      	ldr	r1, [r0, #0]
 8009662:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009666:	6001      	str	r1, [r0, #0]
 8009668:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800966a:	0000      	.short	0x0000
 800966c:	e000ed88 	.word	0xe000ed88

08009670 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8009670:	4b0e      	ldr	r3, [pc, #56]	@ (80096ac <prvTaskExitError+0x3c>)
{
 8009672:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009674:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8009676:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8009678:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800967a:	3301      	adds	r3, #1
 800967c:	d008      	beq.n	8009690 <prvTaskExitError+0x20>
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	e7fe      	b.n	800968e <prvTaskExitError+0x1e>
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0fc      	beq.n	80096a0 <prvTaskExitError+0x30>
}
 80096a6:	b002      	add	sp, #8
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000024 	.word	0x20000024

080096b0 <pxPortInitialiseStack>:
{
 80096b0:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096b2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096b6:	4809      	ldr	r0, [pc, #36]	@ (80096dc <pxPortInitialiseStack+0x2c>)
{
 80096b8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ba:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096be:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096c2:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80096c6:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096ca:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096ce:	f06f 0102 	mvn.w	r1, #2
}
 80096d2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096d6:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80096da:	4770      	bx	lr
 80096dc:	08009671 	.word	0x08009671

080096e0 <SVC_Handler>:
	__asm volatile (
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <pxCurrentTCBConst2>)
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	6808      	ldr	r0, [r1, #0]
 80096e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ea:	f380 8809 	msr	PSP, r0
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	4770      	bx	lr
 80096fc:	f3af 8000 	nop.w

08009700 <pxCurrentTCBConst2>:
 8009700:	20001040 	.word	0x20001040

08009704 <vPortEnterCritical>:
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009714:	4a0b      	ldr	r2, [pc, #44]	@ (8009744 <vPortEnterCritical+0x40>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800971a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800971c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800971e:	d000      	beq.n	8009722 <vPortEnterCritical+0x1e>
}
 8009720:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009722:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009726:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f7      	beq.n	8009720 <vPortEnterCritical+0x1c>
 8009730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	e7fe      	b.n	8009740 <vPortEnterCritical+0x3c>
 8009742:	bf00      	nop
 8009744:	20000024 	.word	0x20000024

08009748 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009748:	4a08      	ldr	r2, [pc, #32]	@ (800976c <vPortExitCritical+0x24>)
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	b943      	cbnz	r3, 8009760 <vPortExitCritical+0x18>
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	e7fe      	b.n	800975e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009760:	3b01      	subs	r3, #1
 8009762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009764:	b90b      	cbnz	r3, 800976a <vPortExitCritical+0x22>
	__asm volatile
 8009766:	f383 8811 	msr	BASEPRI, r3
}
 800976a:	4770      	bx	lr
 800976c:	20000024 	.word	0x20000024

08009770 <PendSV_Handler>:
	__asm volatile
 8009770:	f3ef 8009 	mrs	r0, PSP
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4b15      	ldr	r3, [pc, #84]	@ (80097d0 <pxCurrentTCBConst>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f01e 0f10 	tst.w	lr, #16
 8009780:	bf08      	it	eq
 8009782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	6010      	str	r0, [r2, #0]
 800978c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009794:	f380 8811 	msr	BASEPRI, r0
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f7fe fd1e 	bl	80081e0 <vTaskSwitchContext>
 80097a4:	f04f 0000 	mov.w	r0, #0
 80097a8:	f380 8811 	msr	BASEPRI, r0
 80097ac:	bc09      	pop	{r0, r3}
 80097ae:	6819      	ldr	r1, [r3, #0]
 80097b0:	6808      	ldr	r0, [r1, #0]
 80097b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b6:	f01e 0f10 	tst.w	lr, #16
 80097ba:	bf08      	it	eq
 80097bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097c0:	f380 8809 	msr	PSP, r0
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst>:
 80097d0:	20001040 	.word	0x20001040

080097d4 <xPortSysTickHandler>:
{
 80097d4:	b508      	push	{r3, lr}
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80097e6:	f7fe fb7d 	bl	8007ee4 <xTaskIncrementTick>
 80097ea:	b128      	cbz	r0, 80097f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80097f8:	2300      	movs	r3, #0
 80097fa:	f383 8811 	msr	BASEPRI, r3
}
 80097fe:	bd08      	pop	{r3, pc}

08009800 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009800:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009804:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009806:	4806      	ldr	r0, [pc, #24]	@ (8009820 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009808:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980a:	4906      	ldr	r1, [pc, #24]	@ (8009824 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800980c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009810:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009812:	fba1 1303 	umull	r1, r3, r1, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	3b01      	subs	r3, #1
 800981a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981c:	6110      	str	r0, [r2, #16]
}
 800981e:	4770      	bx	lr
 8009820:	20000018 	.word	0x20000018
 8009824:	10624dd3 	.word	0x10624dd3

08009828 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009828:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800982c:	4a3d      	ldr	r2, [pc, #244]	@ (8009924 <xPortStartScheduler+0xfc>)
 800982e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8009832:	4291      	cmp	r1, r2
 8009834:	d041      	beq.n	80098ba <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009836:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800983a:	4b3b      	ldr	r3, [pc, #236]	@ (8009928 <xPortStartScheduler+0x100>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d033      	beq.n	80098a8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009840:	4b3a      	ldr	r3, [pc, #232]	@ (800992c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009842:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009846:	483a      	ldr	r0, [pc, #232]	@ (8009930 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009848:	493a      	ldr	r1, [pc, #232]	@ (8009934 <xPortStartScheduler+0x10c>)
{
 800984a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800984c:	781a      	ldrb	r2, [r3, #0]
{
 800984e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009854:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009856:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800985a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800985c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009864:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009868:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800986c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009870:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009872:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009874:	d50f      	bpl.n	8009896 <xPortStartScheduler+0x6e>
 8009876:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009878:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800987c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009888:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800988c:	061b      	lsls	r3, r3, #24
 800988e:	d4f3      	bmi.n	8009878 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009890:	2903      	cmp	r1, #3
 8009892:	d01b      	beq.n	80098cc <xPortStartScheduler+0xa4>
 8009894:	6001      	str	r1, [r0, #0]
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	e7fe      	b.n	80098a6 <xPortStartScheduler+0x7e>
 80098a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b8:	e7fe      	b.n	80098b8 <xPortStartScheduler+0x90>
 80098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098ca:	e7fe      	b.n	80098ca <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098cc:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098ce:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098d2:	4a16      	ldr	r2, [pc, #88]	@ (800992c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098d8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80098da:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098dc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80098e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098ec:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80098f0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80098f4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80098f8:	f7ff ff82 	bl	8009800 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009938 <xPortStartScheduler+0x110>)
 80098fe:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009900:	f7ff feac 	bl	800965c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009904:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800990c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009910:	f7ff fe90 	bl	8009634 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009914:	f7fe fc64 	bl	80081e0 <vTaskSwitchContext>
}
 8009918:	4628      	mov	r0, r5
	prvTaskExitError();
 800991a:	f7ff fea9 	bl	8009670 <prvTaskExitError>
}
 800991e:	b003      	add	sp, #12
 8009920:	bd30      	pop	{r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	410fc271 	.word	0x410fc271
 8009928:	410fc270 	.word	0x410fc270
 800992c:	e000e400 	.word	0xe000e400
 8009930:	20008e4c 	.word	0x20008e4c
 8009934:	20008e50 	.word	0x20008e50
 8009938:	20000024 	.word	0x20000024

0800993c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800993c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009940:	2b0f      	cmp	r3, #15
 8009942:	d90e      	bls.n	8009962 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009944:	4911      	ldr	r1, [pc, #68]	@ (800998c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009946:	4a12      	ldr	r2, [pc, #72]	@ (8009990 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009948:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d908      	bls.n	8009962 <vPortValidateInterruptPriority+0x26>
 8009950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	e7fe      	b.n	8009960 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009962:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009966:	4a0b      	ldr	r2, [pc, #44]	@ (8009994 <vPortValidateInterruptPriority+0x58>)
 8009968:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009972:	4293      	cmp	r3, r2
 8009974:	d908      	bls.n	8009988 <vPortValidateInterruptPriority+0x4c>
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	e7fe      	b.n	8009986 <vPortValidateInterruptPriority+0x4a>
	}
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	e000e3f0 	.word	0xe000e3f0
 8009990:	20008e50 	.word	0x20008e50
 8009994:	20008e4c 	.word	0x20008e4c

08009998 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009998:	f100 0310 	add.w	r3, r0, #16
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b10      	cmp	r3, #16
 80099a0:	d804      	bhi.n	80099ac <err_to_errno+0x14>
    return EIO;
  }
  return err_to_errno_table[-err];
 80099a2:	4b03      	ldr	r3, [pc, #12]	@ (80099b0 <err_to_errno+0x18>)
 80099a4:	4240      	negs	r0, r0
 80099a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80099aa:	4770      	bx	lr
    return EIO;
 80099ac:	2005      	movs	r0, #5
}
 80099ae:	4770      	bx	lr
 80099b0:	0801921c 	.word	0x0801921c

080099b4 <netifapi_do_netif_set_addr>:
{
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  netif_set_addr( msg->netif,
 80099b4:	3004      	adds	r0, #4
{
 80099b6:	b508      	push	{r3, lr}
  netif_set_addr( msg->netif,
 80099b8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80099ba:	f006 fb43 	bl	8010044 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
}
 80099be:	2000      	movs	r0, #0
 80099c0:	bd08      	pop	{r3, pc}
 80099c2:	bf00      	nop

080099c4 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 80099c4:	b510      	push	{r4, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 80099c6:	68c4      	ldr	r4, [r0, #12]
{
 80099c8:	4603      	mov	r3, r0
    return msg->msg.common.errtfunc(msg->netif);
 80099ca:	6840      	ldr	r0, [r0, #4]
  if (msg->msg.common.errtfunc != NULL) {
 80099cc:	b11c      	cbz	r4, 80099d6 <netifapi_do_netif_common+0x12>
    return msg->msg.common.errtfunc(msg->netif);
 80099ce:	4623      	mov	r3, r4
  } else {
    msg->msg.common.voidfunc(msg->netif);
    return ERR_OK;
  }
}
 80099d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return msg->msg.common.errtfunc(msg->netif);
 80099d4:	4718      	bx	r3
    msg->msg.common.voidfunc(msg->netif);
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	4798      	blx	r3
}
 80099da:	4620      	mov	r0, r4
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	bf00      	nop

080099e0 <netifapi_netif_set_addr>:
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY4;
 80099e0:	2900      	cmp	r1, #0
{
 80099e2:	b510      	push	{r4, lr}
  if (ipaddr == NULL) {
 80099e4:	460c      	mov	r4, r1
    ipaddr = IP4_ADDR_ANY4;
 80099e6:	490a      	ldr	r1, [pc, #40]	@ (8009a10 <netifapi_netif_set_addr+0x30>)
{
 80099e8:	b088      	sub	sp, #32
    ipaddr = IP4_ADDR_ANY4;
 80099ea:	bf08      	it	eq
 80099ec:	460c      	moveq	r4, r1
  }
  if (netmask == NULL) {
 80099ee:	b152      	cbz	r2, 8009a06 <netifapi_netif_set_addr+0x26>
    netmask = IP4_ADDR_ANY4;
  }
  if (gw == NULL) {
 80099f0:	b163      	cbz	r3, 8009a0c <netifapi_netif_set_addr+0x2c>

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 80099f2:	4669      	mov	r1, sp
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 80099f4:	e9cd 0401 	strd	r0, r4, [sp, #4]
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 80099f8:	4806      	ldr	r0, [pc, #24]	@ (8009a14 <netifapi_netif_set_addr+0x34>)
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 80099fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 80099fe:	f002 fbc5 	bl	800c18c <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 8009a02:	b008      	add	sp, #32
 8009a04:	bd10      	pop	{r4, pc}
    netmask = IP4_ADDR_ANY4;
 8009a06:	460a      	mov	r2, r1
  if (gw == NULL) {
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f2      	bne.n	80099f2 <netifapi_netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 8009a0c:	4b00      	ldr	r3, [pc, #0]	@ (8009a10 <netifapi_netif_set_addr+0x30>)
 8009a0e:	e7f0      	b.n	80099f2 <netifapi_netif_set_addr+0x12>
 8009a10:	0801a7a0 	.word	0x0801a7a0
 8009a14:	080099b5 	.word	0x080099b5

08009a18 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4604      	mov	r4, r0
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 8009a20:	4804      	ldr	r0, [pc, #16]	@ (8009a34 <netifapi_netif_common+0x1c>)
 8009a22:	4669      	mov	r1, sp
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 8009a24:	9203      	str	r2, [sp, #12]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 8009a26:	e9cd 4301 	strd	r4, r3, [sp, #4]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 8009a2a:	f002 fbaf 	bl	800c18c <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 8009a2e:	b008      	add	sp, #32
 8009a30:	bd10      	pop	{r4, pc}
 8009a32:	bf00      	nop
 8009a34:	080099c5 	.word	0x080099c5

08009a38 <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 8009a38:	6803      	ldr	r3, [r0, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	d02e      	beq.n	8009a9e <lwip_netconn_do_getaddr+0x66>
    if (msg->msg.ad.local) {
 8009a40:	7c01      	ldrb	r1, [r0, #16]
{
 8009a42:	b430      	push	{r4, r5}
 8009a44:	781b      	ldrb	r3, [r3, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009a46:	6884      	ldr	r4, [r0, #8]
 8009a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (msg->msg.ad.local) {
 8009a4c:	b169      	cbz	r1, 8009a6a <lwip_netconn_do_getaddr+0x32>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009a4e:	6811      	ldr	r1, [r2, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a50:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009a52:	6021      	str	r1, [r4, #0]
    msg->err = ERR_OK;
 8009a54:	f04f 0100 	mov.w	r1, #0
 8009a58:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a5a:	d02b      	beq.n	8009ab4 <lwip_netconn_do_getaddr+0x7c>
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d112      	bne.n	8009a86 <lwip_netconn_do_getaddr+0x4e>
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8009a60:	68c3      	ldr	r3, [r0, #12]
 8009a62:	8a52      	ldrh	r2, [r2, #18]
 8009a64:	801a      	strh	r2, [r3, #0]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a66:	bc30      	pop	{r4, r5}
 8009a68:	4770      	bx	lr
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009a6a:	6855      	ldr	r5, [r2, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a6c:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009a6e:	6025      	str	r5, [r4, #0]
    msg->err = ERR_OK;
 8009a70:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a72:	d017      	beq.n	8009aa4 <lwip_netconn_do_getaddr+0x6c>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d106      	bne.n	8009a86 <lwip_netconn_do_getaddr+0x4e>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009a78:	7c13      	ldrb	r3, [r2, #16]
 8009a7a:	075b      	lsls	r3, r3, #29
 8009a7c:	d50b      	bpl.n	8009a96 <lwip_netconn_do_getaddr+0x5e>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8009a7e:	68c3      	ldr	r3, [r0, #12]
 8009a80:	8a92      	ldrh	r2, [r2, #20]
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e7ef      	b.n	8009a66 <lwip_netconn_do_getaddr+0x2e>
        LWIP_ASSERT("invalid netconn_type", 0);
 8009a86:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab8 <lwip_netconn_do_getaddr+0x80>)
 8009a88:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009a8c:	490b      	ldr	r1, [pc, #44]	@ (8009abc <lwip_netconn_do_getaddr+0x84>)
 8009a8e:	480c      	ldr	r0, [pc, #48]	@ (8009ac0 <lwip_netconn_do_getaddr+0x88>)
}
 8009a90:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 8009a92:	f00c bd13 	b.w	80164bc <iprintf>
            msg->err = ERR_CONN;
 8009a96:	23f5      	movs	r3, #245	@ 0xf5
 8009a98:	7103      	strb	r3, [r0, #4]
}
 8009a9a:	bc30      	pop	{r4, r5}
 8009a9c:	4770      	bx	lr
            msg->err = ERR_CONN;
 8009a9e:	23f5      	movs	r3, #245	@ 0xf5
 8009aa0:	7103      	strb	r3, [r0, #4]
 8009aa2:	4770      	bx	lr
        if ((msg->msg.ad.local == 0) &&
 8009aa4:	7d13      	ldrb	r3, [r2, #20]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d9f5      	bls.n	8009a96 <lwip_netconn_do_getaddr+0x5e>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009aaa:	8b12      	ldrh	r2, [r2, #24]
 8009aac:	68c3      	ldr	r3, [r0, #12]
}
 8009aae:	bc30      	pop	{r4, r5}
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009ab0:	801a      	strh	r2, [r3, #0]
}
 8009ab2:	4770      	bx	lr
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009ab4:	8ad2      	ldrh	r2, [r2, #22]
 8009ab6:	e7f9      	b.n	8009aac <lwip_netconn_do_getaddr+0x74>
 8009ab8:	08019260 	.word	0x08019260
 8009abc:	080192d8 	.word	0x080192d8
 8009ac0:	080187f8 	.word	0x080187f8

08009ac4 <setup_tcp>:
{
 8009ac4:	b510      	push	{r4, lr}
  pcb = conn->pcb.tcp;
 8009ac6:	6844      	ldr	r4, [r0, #4]
{
 8009ac8:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8009aca:	4620      	mov	r0, r4
 8009acc:	f007 fb0e 	bl	80110ec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4909      	ldr	r1, [pc, #36]	@ (8009af8 <setup_tcp+0x34>)
 8009ad4:	f007 fb0e 	bl	80110f4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4908      	ldr	r1, [pc, #32]	@ (8009afc <setup_tcp+0x38>)
 8009adc:	f007 fb26 	bl	801112c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	4907      	ldr	r1, [pc, #28]	@ (8009b00 <setup_tcp+0x3c>)
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f007 fb5f 	bl	80111a8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009aea:	4620      	mov	r0, r4
 8009aec:	4905      	ldr	r1, [pc, #20]	@ (8009b04 <setup_tcp+0x40>)
}
 8009aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8009af2:	f007 bb37 	b.w	8011164 <tcp_err>
 8009af6:	bf00      	nop
 8009af8:	0800a2a9 	.word	0x0800a2a9
 8009afc:	0800a239 	.word	0x0800a239
 8009b00:	0800a1b9 	.word	0x0800a1b9
 8009b04:	0800a485 	.word	0x0800a485

08009b08 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	4d1b      	ldr	r5, [pc, #108]	@ (8009b7c <alloc_socket+0x74>)
{
 8009b10:	4681      	mov	r9, r0
 8009b12:	468a      	mov	sl, r1
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8009b14:	0126      	lsls	r6, r4, #4
    SYS_ARCH_PROTECT(lev);
 8009b16:	f00b ff5f 	bl	80159d8 <sys_arch_protect>
    if (!sockets[i].conn) {
 8009b1a:	59af      	ldr	r7, [r5, r6]
 8009b1c:	eb05 1804 	add.w	r8, r5, r4, lsl #4
 8009b20:	b14f      	cbz	r7, 8009b36 <alloc_socket+0x2e>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009b22:	3401      	adds	r4, #1
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
      sockets[i].errevent   = 0;
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 8009b24:	f00b ff64 	bl	80159f0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009b28:	2c04      	cmp	r4, #4
 8009b2a:	d1f3      	bne.n	8009b14 <alloc_socket+0xc>
  }
  return -1;
 8009b2c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8009b30:	4620      	mov	r0, r4
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sockets[i].conn       = newconn;
 8009b36:	f845 9006 	str.w	r9, [r5, r6]
      SYS_ARCH_UNPROTECT(lev);
 8009b3a:	f00b ff59 	bl	80159f0 <sys_arch_unprotect>
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009b3e:	f898 300e 	ldrb.w	r3, [r8, #14]
      sockets[i].lastdata.pbuf = NULL;
 8009b42:	f8c8 7004 	str.w	r7, [r8, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009b46:	b98b      	cbnz	r3, 8009b6c <alloc_socket+0x64>
      sockets[i].rcvevent   = 0;
 8009b48:	4435      	add	r5, r6
 8009b4a:	2200      	movs	r2, #0
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009b4c:	f00a 0101 	and.w	r1, sl, #1
}
 8009b50:	4620      	mov	r0, r4
      sockets[i].rcvevent   = 0;
 8009b52:	812a      	strh	r2, [r5, #8]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009b54:	f899 3000 	ldrb.w	r3, [r9]
      sockets[i].errevent   = 0;
 8009b58:	81aa      	strh	r2, [r5, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	bf18      	it	ne
 8009b62:	f041 0101 	orrne.w	r1, r1, #1
 8009b66:	8169      	strh	r1, [r5, #10]
}
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009b6c:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <alloc_socket+0x78>)
 8009b6e:	f240 220e 	movw	r2, #526	@ 0x20e
 8009b72:	4904      	ldr	r1, [pc, #16]	@ (8009b84 <alloc_socket+0x7c>)
 8009b74:	4804      	ldr	r0, [pc, #16]	@ (8009b88 <alloc_socket+0x80>)
 8009b76:	f00c fca1 	bl	80164bc <iprintf>
 8009b7a:	e7e5      	b.n	8009b48 <alloc_socket+0x40>
 8009b7c:	20008e58 	.word	0x20008e58
 8009b80:	080192f0 	.word	0x080192f0
 8009b84:	08019368 	.word	0x08019368
 8009b88:	080187f8 	.word	0x080187f8

08009b8c <lwip_netconn_do_writemore>:
{
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009b90:	4680      	mov	r8, r0
{
 8009b92:	b083      	sub	sp, #12
 8009b94:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f000 8140 	beq.w	8009e1c <lwip_netconn_do_writemore+0x290>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009b9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d006      	beq.n	8009bb2 <lwip_netconn_do_writemore+0x26>
 8009ba4:	4bab      	ldr	r3, [pc, #684]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009ba6:	f240 6274 	movw	r2, #1652	@ 0x674
 8009baa:	49ab      	ldr	r1, [pc, #684]	@ (8009e58 <lwip_netconn_do_writemore+0x2cc>)
 8009bac:	48ab      	ldr	r0, [pc, #684]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009bae:	f00c fc85 	bl	80164bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009bb2:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 8138 	beq.w	8009e2c <lwip_netconn_do_writemore+0x2a0>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009bbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 813f 	beq.w	8009e44 <lwip_netconn_do_writemore+0x2b8>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009bc6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009bca:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f080 80cf 	bcs.w	8009d72 <lwip_netconn_do_writemore+0x1e6>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009bd4:	899a      	ldrh	r2, [r3, #12]
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	f000 80c1 	beq.w	8009d5e <lwip_netconn_do_writemore+0x1d2>
  apiflags = conn->current_msg->msg.w.apiflags;
 8009bdc:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009bde:	f898 901c 	ldrb.w	r9, [r8, #28]
 8009be2:	f007 0204 	and.w	r2, r7, #4
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009be6:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 8009e54 <lwip_netconn_do_writemore+0x2c8>
 8009bea:	f009 0902 	and.w	r9, r9, #2
 8009bee:	f8df a284 	ldr.w	sl, [pc, #644]	@ 8009e74 <lwip_netconn_do_writemore+0x2e8>
 8009bf2:	9501      	str	r5, [sp, #4]
 8009bf4:	ea49 0902 	orr.w	r9, r9, r2
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	6919      	ldr	r1, [r3, #16]
 8009bfc:	e9d2 6c00 	ldrd	r6, ip, [r2]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009c00:	ebac 0501 	sub.w	r5, ip, r1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009c04:	440e      	add	r6, r1
      if (diff > 0xffffUL) { /* max_u16_t */
 8009c06:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8009c0a:	d371      	bcc.n	8009cf0 <lwip_netconn_do_writemore+0x164>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009c0c:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8009c10:	f64f 74ff 	movw	r4, #65535	@ 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 8009c14:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009c18:	f8b2 e064 	ldrh.w	lr, [r2, #100]	@ 0x64
 8009c1c:	4610      	mov	r0, r2
      if (available < len) {
 8009c1e:	4574      	cmp	r4, lr
 8009c20:	d908      	bls.n	8009c34 <lwip_netconn_do_writemore+0xa8>
        if (dontblock) {
 8009c22:	f1b9 0f00 	cmp.w	r9, #0
 8009c26:	f000 8088 	beq.w	8009d3a <lwip_netconn_do_writemore+0x1ae>
          if (!len) {
 8009c2a:	f1be 0f00 	cmp.w	lr, #0
 8009c2e:	f000 80aa 	beq.w	8009d86 <lwip_netconn_do_writemore+0x1fa>
 8009c32:	4674      	mov	r4, lr
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009c34:	4421      	add	r1, r4
 8009c36:	458c      	cmp	ip, r1
 8009c38:	d375      	bcc.n	8009d26 <lwip_netconn_do_writemore+0x19a>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009c3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d16c      	bne.n	8009d1c <lwip_netconn_do_writemore+0x190>
 8009c42:	429d      	cmp	r5, r3
 8009c44:	d96a      	bls.n	8009d1c <lwip_netconn_do_writemore+0x190>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009c46:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8009c4a:	2501      	movs	r5, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009c4c:	463b      	mov	r3, r7
 8009c4e:	4622      	mov	r2, r4
 8009c50:	4631      	mov	r1, r6
 8009c52:	f009 ffdd 	bl	8013c10 <tcp_write>
      if (err == ERR_OK) {
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d14c      	bne.n	8009cf4 <lwip_netconn_do_writemore+0x168>
        conn->current_msg->msg.w.offset += len;
 8009c5a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009c5e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009c60:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8009c62:	4422      	add	r2, r4
 8009c64:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	4414      	add	r4, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009c6a:	684a      	ldr	r2, [r1, #4]
 8009c6c:	4294      	cmp	r4, r2
        conn->current_msg->msg.w.vector_off += len;
 8009c6e:	611c      	str	r4, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009c70:	d032      	beq.n	8009cd8 <lwip_netconn_do_writemore+0x14c>
    } while (write_more && err == ERR_OK);
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	d1c0      	bne.n	8009bf8 <lwip_netconn_do_writemore+0x6c>
 8009c76:	4606      	mov	r6, r0
 8009c78:	9d01      	ldr	r5, [sp, #4]
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	f040 80fb 	bne.w	8009e78 <lwip_netconn_do_writemore+0x2ec>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009c82:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009c86:	f640 3369 	movw	r3, #2921	@ 0xb69
 8009c8a:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	d903      	bls.n	8009c9a <lwip_netconn_do_writemore+0x10e>
 8009c92:	f8b2 3066 	ldrh.w	r3, [r2, #102]	@ 0x66
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	d908      	bls.n	8009cac <lwip_netconn_do_writemore+0x120>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009c9a:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8009c9e:	b12b      	cbz	r3, 8009cac <lwip_netconn_do_writemore+0x120>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2103      	movs	r1, #3
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	4798      	blx	r3
    if (err == ERR_OK) {
 8009ca8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009cac:	2e00      	cmp	r6, #0
 8009cae:	f000 8086 	beq.w	8009dbe <lwip_netconn_do_writemore+0x232>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f00a fda0 	bl	80147f8 <tcp_output>
      if (out_err == ERR_RTE) {
 8009cb8:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009cba:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8009cbc:	d020      	beq.n	8009d00 <lwip_netconn_do_writemore+0x174>
      } else if (dontblock) {
 8009cbe:	f1b9 0f00 	cmp.w	r9, #0
 8009cc2:	f000 808b 	beq.w	8009ddc <lwip_netconn_do_writemore+0x250>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009cc6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	2a00      	cmp	r2, #0
 8009cce:	bf14      	ite	ne
 8009cd0:	2600      	movne	r6, #0
 8009cd2:	f06f 0606 	mvneq.w	r6, #6
 8009cd6:	e015      	b.n	8009d04 <lwip_netconn_do_writemore+0x178>
          conn->current_msg->msg.w.vector_cnt--;
 8009cd8:	899a      	ldrh	r2, [r3, #12]
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	b292      	uxth	r2, r2
 8009cde:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009ce0:	2a00      	cmp	r2, #0
 8009ce2:	d0c6      	beq.n	8009c72 <lwip_netconn_do_writemore+0xe6>
            conn->current_msg->msg.w.vector++;
 8009ce4:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8009ce6:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8009ce8:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	d184      	bne.n	8009bf8 <lwip_netconn_do_writemore+0x6c>
 8009cee:	e7c2      	b.n	8009c76 <lwip_netconn_do_writemore+0xea>
        len = (u16_t)diff;
 8009cf0:	b2ac      	uxth	r4, r5
 8009cf2:	e78f      	b.n	8009c14 <lwip_netconn_do_writemore+0x88>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	9d01      	ldr	r5, [sp, #4]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d927      	bls.n	8009d50 <lwip_netconn_do_writemore+0x1c4>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009d00:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d04:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8009d06:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c8 3020 	str.w	r3, [r8, #32]
    conn->state = NETCONN_NONE;
 8009d0e:	f888 3001 	strb.w	r3, [r8, #1]
    if (delayed)
 8009d12:	bb05      	cbnz	r5, 8009d56 <lwip_netconn_do_writemore+0x1ca>
  return ERR_OK;
 8009d14:	2000      	movs	r0, #0
}
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009d1c:	b2ad      	uxth	r5, r5
 8009d1e:	42a5      	cmp	r5, r4
 8009d20:	d00f      	beq.n	8009d42 <lwip_netconn_do_writemore+0x1b6>
        write_more = 0;
 8009d22:	2500      	movs	r5, #0
 8009d24:	e792      	b.n	8009c4c <lwip_netconn_do_writemore+0xc0>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009d26:	465b      	mov	r3, fp
 8009d28:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	484b      	ldr	r0, [pc, #300]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009d30:	f00c fbc4 	bl	80164bc <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009d34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d38:	e77f      	b.n	8009c3a <lwip_netconn_do_writemore+0xae>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009d3a:	f047 0702 	orr.w	r7, r7, #2
 8009d3e:	4674      	mov	r4, lr
 8009d40:	e778      	b.n	8009c34 <lwip_netconn_do_writemore+0xa8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009d42:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	f63f af7c 	bhi.w	8009c46 <lwip_netconn_do_writemore+0xba>
 8009d4e:	e7e8      	b.n	8009d22 <lwip_netconn_do_writemore+0x196>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009d50:	f04f 36ff 	mov.w	r6, #4294967295
 8009d54:	e791      	b.n	8009c7a <lwip_netconn_do_writemore+0xee>
      sys_sem_signal(op_completed_sem);
 8009d56:	300c      	adds	r0, #12
 8009d58:	f00b fdf6 	bl	8015948 <sys_sem_signal>
 8009d5c:	e7da      	b.n	8009d14 <lwip_netconn_do_writemore+0x188>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009d60:	f240 6279 	movw	r2, #1657	@ 0x679
 8009d64:	493e      	ldr	r1, [pc, #248]	@ (8009e60 <lwip_netconn_do_writemore+0x2d4>)
 8009d66:	483d      	ldr	r0, [pc, #244]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009d68:	f00c fba8 	bl	80164bc <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 8009d6c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009d70:	e734      	b.n	8009bdc <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009d72:	4b38      	ldr	r3, [pc, #224]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009d74:	f240 6277 	movw	r2, #1655	@ 0x677
 8009d78:	493a      	ldr	r1, [pc, #232]	@ (8009e64 <lwip_netconn_do_writemore+0x2d8>)
 8009d7a:	4838      	ldr	r0, [pc, #224]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009d7c:	f00c fb9e 	bl	80164bc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009d80:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009d84:	e726      	b.n	8009bd4 <lwip_netconn_do_writemore+0x48>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009d86:	6999      	ldr	r1, [r3, #24]
 8009d88:	9d01      	ldr	r5, [sp, #4]
 8009d8a:	b961      	cbnz	r1, 8009da6 <lwip_netconn_do_writemore+0x21a>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009d8c:	695a      	ldr	r2, [r3, #20]
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d8e:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009d92:	bb32      	cbnz	r2, 8009de2 <lwip_netconn_do_writemore+0x256>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d94:	b124      	cbz	r4, 8009da0 <lwip_netconn_do_writemore+0x214>
 8009d96:	2103      	movs	r1, #3
 8009d98:	4640      	mov	r0, r8
 8009d9a:	47a0      	blx	r4
    if (err == ERR_OK) {
 8009d9c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009da0:	f06f 0606 	mvn.w	r6, #6
 8009da4:	e7ae      	b.n	8009d04 <lwip_netconn_do_writemore+0x178>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	4299      	cmp	r1, r3
 8009daa:	d37b      	bcc.n	8009ea4 <lwip_netconn_do_writemore+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009dac:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8009db0:	b34b      	cbz	r3, 8009e06 <lwip_netconn_do_writemore+0x27a>
 8009db2:	4672      	mov	r2, lr
 8009db4:	2103      	movs	r1, #3
 8009db6:	4640      	mov	r0, r8
 8009db8:	4798      	blx	r3
    if (err == ERR_OK) {
 8009dba:	f8d8 2004 	ldr.w	r2, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009dbe:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009dc2:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d01d      	beq.n	8009e06 <lwip_netconn_do_writemore+0x27a>
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	d11a      	bne.n	8009e06 <lwip_netconn_do_writemore+0x27a>
      out_err = tcp_output(conn->pcb.tcp);
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	f00a fd11 	bl	80147f8 <tcp_output>
      if (out_err == ERR_RTE) {
 8009dd6:	1d02      	adds	r2, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 8009dd8:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8009dda:	d091      	beq.n	8009d00 <lwip_netconn_do_writemore+0x174>
    return ERR_MEM;
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e799      	b.n	8009d16 <lwip_netconn_do_writemore+0x18a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009de2:	2c00      	cmp	r4, #0
 8009de4:	d063      	beq.n	8009eae <lwip_netconn_do_writemore+0x322>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009de6:	f06f 0606 	mvn.w	r6, #6
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009dea:	2200      	movs	r2, #0
 8009dec:	2103      	movs	r1, #3
 8009dee:	4640      	mov	r0, r8
 8009df0:	47a0      	blx	r4
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009df2:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009df6:	f043 0310 	orr.w	r3, r3, #16
 8009dfa:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	d163      	bne.n	8009eca <lwip_netconn_do_writemore+0x33e>
 8009e02:	f8d8 2004 	ldr.w	r2, [r8, #4]
      out_err = tcp_output(conn->pcb.tcp);
 8009e06:	4610      	mov	r0, r2
 8009e08:	f00a fcf6 	bl	80147f8 <tcp_output>
      if (out_err == ERR_RTE) {
 8009e0c:	1d01      	adds	r1, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 8009e0e:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8009e10:	f43f af76 	beq.w	8009d00 <lwip_netconn_do_writemore+0x174>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009e14:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009e18:	2600      	movs	r6, #0
 8009e1a:	e773      	b.n	8009d04 <lwip_netconn_do_writemore+0x178>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009e1e:	f240 6273 	movw	r2, #1651	@ 0x673
 8009e22:	4911      	ldr	r1, [pc, #68]	@ (8009e68 <lwip_netconn_do_writemore+0x2dc>)
 8009e24:	480d      	ldr	r0, [pc, #52]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009e26:	f00c fb49 	bl	80164bc <iprintf>
 8009e2a:	e6b7      	b.n	8009b9c <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e2c:	4b09      	ldr	r3, [pc, #36]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009e2e:	f240 6275 	movw	r2, #1653	@ 0x675
 8009e32:	490e      	ldr	r1, [pc, #56]	@ (8009e6c <lwip_netconn_do_writemore+0x2e0>)
 8009e34:	4809      	ldr	r0, [pc, #36]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009e36:	f00c fb41 	bl	80164bc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009e3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f47f aec1 	bne.w	8009bc6 <lwip_netconn_do_writemore+0x3a>
 8009e44:	4b03      	ldr	r3, [pc, #12]	@ (8009e54 <lwip_netconn_do_writemore+0x2c8>)
 8009e46:	f240 6276 	movw	r2, #1654	@ 0x676
 8009e4a:	4909      	ldr	r1, [pc, #36]	@ (8009e70 <lwip_netconn_do_writemore+0x2e4>)
 8009e4c:	4803      	ldr	r0, [pc, #12]	@ (8009e5c <lwip_netconn_do_writemore+0x2d0>)
 8009e4e:	f00c fb35 	bl	80164bc <iprintf>
 8009e52:	e6b8      	b.n	8009bc6 <lwip_netconn_do_writemore+0x3a>
 8009e54:	08019260 	.word	0x08019260
 8009e58:	08019398 	.word	0x08019398
 8009e5c:	080187f8 	.word	0x080187f8
 8009e60:	0801942c 	.word	0x0801942c
 8009e64:	080193ec 	.word	0x080193ec
 8009e68:	08019388 	.word	0x08019388
 8009e6c:	080193b8 	.word	0x080193b8
 8009e70:	080193d4 	.word	0x080193d4
 8009e74:	08019454 	.word	0x08019454
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009e78:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8009e7c:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	f4bf aefe 	bcs.w	8009c82 <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009e86:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	d1ad      	bne.n	8009dea <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009e8e:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009e92:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009e96:	f043 0310 	orr.w	r3, r3, #16
 8009e9a:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d0b1      	beq.n	8009e06 <lwip_netconn_do_writemore+0x27a>
 8009ea2:	e706      	b.n	8009cb2 <lwip_netconn_do_writemore+0x126>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009ea4:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 8009ea8:	b144      	cbz	r4, 8009ebc <lwip_netconn_do_writemore+0x330>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009eaa:	4676      	mov	r6, lr
 8009eac:	e79d      	b.n	8009dea <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009eae:	f898 201c 	ldrb.w	r2, [r8, #28]
 8009eb2:	f042 0210 	orr.w	r2, r2, #16
 8009eb6:	f888 201c 	strb.w	r2, [r8, #28]
    } else if (err == ERR_MEM) {
 8009eba:	e771      	b.n	8009da0 <lwip_netconn_do_writemore+0x214>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ebc:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009ec0:	f043 0310 	orr.w	r3, r3, #16
 8009ec4:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8009ec8:	e79d      	b.n	8009e06 <lwip_netconn_do_writemore+0x27a>
    } else if (err == ERR_MEM) {
 8009eca:	3601      	adds	r6, #1
 8009ecc:	d004      	beq.n	8009ed8 <lwip_netconn_do_writemore+0x34c>
 8009ece:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ed2:	f06f 0606 	mvn.w	r6, #6
 8009ed6:	e715      	b.n	8009d04 <lwip_netconn_do_writemore+0x178>
 8009ed8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009edc:	e6e9      	b.n	8009cb2 <lwip_netconn_do_writemore+0x126>
 8009ede:	bf00      	nop

08009ee0 <lwip_netconn_do_close_internal>:
{
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009ee4:	4604      	mov	r4, r0
{
 8009ee6:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	f000 80e7 	beq.w	800a0bc <lwip_netconn_do_close_internal+0x1dc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009eee:	7823      	ldrb	r3, [r4, #0]
 8009ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ef4:	2b10      	cmp	r3, #16
 8009ef6:	d006      	beq.n	8009f06 <lwip_netconn_do_close_internal+0x26>
 8009ef8:	4ba4      	ldr	r3, [pc, #656]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 8009efa:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8009efe:	49a4      	ldr	r1, [pc, #656]	@ (800a190 <lwip_netconn_do_close_internal+0x2b0>)
 8009f00:	48a4      	ldr	r0, [pc, #656]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 8009f02:	f00c fadb 	bl	80164bc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009f06:	7863      	ldrb	r3, [r4, #1]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d006      	beq.n	8009f1a <lwip_netconn_do_close_internal+0x3a>
 8009f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 8009f0e:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8009f12:	49a1      	ldr	r1, [pc, #644]	@ (800a198 <lwip_netconn_do_close_internal+0x2b8>)
 8009f14:	489f      	ldr	r0, [pc, #636]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 8009f16:	f00c fad1 	bl	80164bc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80b9 	beq.w	800a094 <lwip_netconn_do_close_internal+0x1b4>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f22:	6a23      	ldr	r3, [r4, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80c0 	beq.w	800a0aa <lwip_netconn_do_close_internal+0x1ca>
  shut = conn->current_msg->msg.sd.shut;
 8009f2a:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 8009f2c:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 8009f2e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8009f30:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8009f34:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8009f38:	d03d      	beq.n	8009fb6 <lwip_netconn_do_close_internal+0xd6>
  } else if (shut_rx &&
 8009f3a:	b36f      	cbz	r7, 8009f98 <lwip_netconn_do_close_internal+0xb8>
             ((tpcb->state == FIN_WAIT_1) ||
 8009f3c:	7d2b      	ldrb	r3, [r5, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009f3e:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 8009f40:	2a01      	cmp	r2, #1
 8009f42:	d978      	bls.n	800a036 <lwip_netconn_do_close_internal+0x156>
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d076      	beq.n	800a036 <lwip_netconn_do_close_internal+0x156>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	f040 80be 	bne.w	800a0cc <lwip_netconn_do_close_internal+0x1ec>
  if (tpcb->state == LISTEN) {
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d06b      	beq.n	800a02c <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 8009f54:	4641      	mov	r1, r8
 8009f56:	4628      	mov	r0, r5
 8009f58:	f007 f8cc 	bl	80110f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f007 f91c 	bl	801119c <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009f64:	4642      	mov	r2, r8
 8009f66:	4639      	mov	r1, r7
 8009f68:	4628      	mov	r0, r5
 8009f6a:	f007 ff73 	bl	8011e54 <tcp_shutdown>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009f6e:	6a23      	ldr	r3, [r4, #32]
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009f70:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f000 8088 	beq.w	800a088 <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 8009f78:	1c41      	adds	r1, r0, #1
 8009f7a:	d17e      	bne.n	800a07a <lwip_netconn_do_close_internal+0x19a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009f7c:	7a5a      	ldrb	r2, [r3, #9]
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	f040 80e0 	bne.w	800a144 <lwip_netconn_do_close_internal+0x264>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009f84:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8009f86:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009f88:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8009f8a:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8009f8c:	7062      	strb	r2, [r4, #1]
    if (delayed)
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	d145      	bne.n	800a01e <lwip_netconn_do_close_internal+0x13e>
    return ERR_OK;
 8009f92:	2000      	movs	r0, #0
}
 8009f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f98:	f1b8 0f00 	cmp.w	r8, #0
 8009f9c:	d043      	beq.n	800a026 <lwip_netconn_do_close_internal+0x146>
 8009f9e:	8b6b      	ldrh	r3, [r5, #26]
 8009fa0:	06d8      	lsls	r0, r3, #27
 8009fa2:	f100 8097 	bmi.w	800a0d4 <lwip_netconn_do_close_internal+0x1f4>
  if (tpcb->state == LISTEN) {
 8009fa6:	7d2b      	ldrb	r3, [r5, #20]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d03f      	beq.n	800a02c <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 8009fac:	4639      	mov	r1, r7
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f007 f8bc 	bl	801112c <tcp_sent>
    if (shut_close) {
 8009fb4:	e7d6      	b.n	8009f64 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f007 f897 	bl	80110ec <tcp_arg>
  if (tpcb->state == LISTEN) {
 8009fbe:	7d2b      	ldrb	r3, [r5, #20]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f040 80a8 	bne.w	800a116 <lwip_netconn_do_close_internal+0x236>
    tcp_accept(tpcb, NULL);
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f007 f8e7 	bl	801119c <tcp_accept>
      err = tcp_close(tpcb);
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f007 ff22 	bl	8011e18 <tcp_close>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009fd4:	6a23      	ldr	r3, [r4, #32]
      err = tcp_close(tpcb);
 8009fd6:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d14c      	bne.n	800a076 <lwip_netconn_do_close_internal+0x196>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009fdc:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8009fde:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009fe0:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8009fe2:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009fe4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conn->current_msg = NULL;
 8009fe6:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8009fe8:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 8009fea:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d07f      	beq.n	800a0f0 <lwip_netconn_do_close_internal+0x210>
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4798      	blx	r3
      if (shut_rx) {
 8009ff6:	b137      	cbz	r7, 800a006 <lwip_netconn_do_close_internal+0x126>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0c7      	beq.n	8009f8e <lwip_netconn_do_close_internal+0xae>
 8009ffe:	2200      	movs	r2, #0
 800a000:	4620      	mov	r0, r4
 800a002:	4611      	mov	r1, r2
 800a004:	4798      	blx	r3
      if (shut_tx) {
 800a006:	f1b8 0f00 	cmp.w	r8, #0
 800a00a:	d0c0      	beq.n	8009f8e <lwip_netconn_do_close_internal+0xae>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a00c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0bd      	beq.n	8009f8e <lwip_netconn_do_close_internal+0xae>
 800a012:	2200      	movs	r2, #0
 800a014:	4620      	mov	r0, r4
 800a016:	2102      	movs	r1, #2
 800a018:	4798      	blx	r3
    if (delayed)
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	d0b9      	beq.n	8009f92 <lwip_netconn_do_close_internal+0xb2>
      sys_sem_signal(op_completed_sem);
 800a01e:	4628      	mov	r0, r5
 800a020:	f00b fc92 	bl	8015948 <sys_sem_signal>
 800a024:	e7b5      	b.n	8009f92 <lwip_netconn_do_close_internal+0xb2>
  if (tpcb->state == LISTEN) {
 800a026:	7d2b      	ldrb	r3, [r5, #20]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d19b      	bne.n	8009f64 <lwip_netconn_do_close_internal+0x84>
    tcp_accept(tpcb, NULL);
 800a02c:	2100      	movs	r1, #0
 800a02e:	4628      	mov	r0, r5
 800a030:	f007 f8b4 	bl	801119c <tcp_accept>
  if (shut_close) {
 800a034:	e796      	b.n	8009f64 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 800a036:	2100      	movs	r1, #0
 800a038:	4628      	mov	r0, r5
 800a03a:	f007 f857 	bl	80110ec <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a03e:	7d2b      	ldrb	r3, [r5, #20]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d0c0      	beq.n	8009fc6 <lwip_netconn_do_close_internal+0xe6>
      tcp_recv(tpcb, NULL);
 800a044:	2100      	movs	r1, #0
 800a046:	4628      	mov	r0, r5
 800a048:	f007 f854 	bl	80110f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a04c:	2100      	movs	r1, #0
 800a04e:	4628      	mov	r0, r5
 800a050:	f007 f8a4 	bl	801119c <tcp_accept>
    if (shut_tx) {
 800a054:	f1b8 0f00 	cmp.w	r8, #0
 800a058:	d003      	beq.n	800a062 <lwip_netconn_do_close_internal+0x182>
      tcp_sent(tpcb, NULL);
 800a05a:	2100      	movs	r1, #0
 800a05c:	4628      	mov	r0, r5
 800a05e:	f007 f865 	bl	801112c <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 800a062:	2200      	movs	r2, #0
 800a064:	4628      	mov	r0, r5
 800a066:	4611      	mov	r1, r2
 800a068:	f007 f89e 	bl	80111a8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a06c:	2100      	movs	r1, #0
 800a06e:	4628      	mov	r0, r5
 800a070:	f007 f878 	bl	8011164 <tcp_err>
  if (shut_close) {
 800a074:	e7ab      	b.n	8009fce <lwip_netconn_do_close_internal+0xee>
    if (err == ERR_MEM) {
 800a076:	3001      	adds	r0, #1
 800a078:	d056      	beq.n	800a128 <lwip_netconn_do_close_internal+0x248>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a07a:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a07c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a07e:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a080:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a082:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a084:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800a086:	e782      	b.n	8009f8e <lwip_netconn_do_close_internal+0xae>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a088:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a08a:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a08c:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a08e:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 800a090:	7060      	strb	r0, [r4, #1]
 800a092:	e7b0      	b.n	8009ff6 <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a094:	4b3d      	ldr	r3, [pc, #244]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 800a096:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a09a:	4940      	ldr	r1, [pc, #256]	@ (800a19c <lwip_netconn_do_close_internal+0x2bc>)
 800a09c:	483d      	ldr	r0, [pc, #244]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 800a09e:	f00c fa0d 	bl	80164bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a0a2:	6a23      	ldr	r3, [r4, #32]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f47f af40 	bne.w	8009f2a <lwip_netconn_do_close_internal+0x4a>
 800a0aa:	4b38      	ldr	r3, [pc, #224]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 800a0ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a0b0:	493b      	ldr	r1, [pc, #236]	@ (800a1a0 <lwip_netconn_do_close_internal+0x2c0>)
 800a0b2:	4838      	ldr	r0, [pc, #224]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 800a0b4:	f00c fa02 	bl	80164bc <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800a0b8:	6a23      	ldr	r3, [r4, #32]
 800a0ba:	e736      	b.n	8009f2a <lwip_netconn_do_close_internal+0x4a>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a0bc:	4b33      	ldr	r3, [pc, #204]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 800a0be:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a0c2:	4938      	ldr	r1, [pc, #224]	@ (800a1a4 <lwip_netconn_do_close_internal+0x2c4>)
 800a0c4:	4833      	ldr	r0, [pc, #204]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 800a0c6:	f00c f9f9 	bl	80164bc <iprintf>
 800a0ca:	e710      	b.n	8009eee <lwip_netconn_do_close_internal+0xe>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a0cc:	8b69      	ldrh	r1, [r5, #26]
 800a0ce:	f011 0910 	ands.w	r9, r1, #16
 800a0d2:	d011      	beq.n	800a0f8 <lwip_netconn_do_close_internal+0x218>
    tcp_arg(tpcb, NULL);
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f007 f808 	bl	80110ec <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a0dc:	7d2b      	ldrb	r3, [r5, #20]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	f43f af71 	beq.w	8009fc6 <lwip_netconn_do_close_internal+0xe6>
    if (shut_rx) {
 800a0e4:	2f00      	cmp	r7, #0
 800a0e6:	d1ad      	bne.n	800a044 <lwip_netconn_do_close_internal+0x164>
    if (shut_tx) {
 800a0e8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ec:	d0b9      	beq.n	800a062 <lwip_netconn_do_close_internal+0x182>
 800a0ee:	e7b4      	b.n	800a05a <lwip_netconn_do_close_internal+0x17a>
      if (shut_rx) {
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	f47f af4c 	bne.w	8009f8e <lwip_netconn_do_close_internal+0xae>
 800a0f6:	e786      	b.n	800a006 <lwip_netconn_do_close_internal+0x126>
  if (tpcb->state == LISTEN) {
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d097      	beq.n	800a02c <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	4628      	mov	r0, r5
 800a100:	f006 fff8 	bl	80110f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a104:	4649      	mov	r1, r9
 800a106:	4628      	mov	r0, r5
 800a108:	f007 f848 	bl	801119c <tcp_accept>
      tcp_sent(tpcb, NULL);
 800a10c:	4649      	mov	r1, r9
 800a10e:	4628      	mov	r0, r5
 800a110:	f007 f80c 	bl	801112c <tcp_sent>
    if (shut_close) {
 800a114:	e726      	b.n	8009f64 <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 800a116:	4628      	mov	r0, r5
 800a118:	2100      	movs	r1, #0
 800a11a:	f006 ffeb 	bl	80110f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a11e:	2100      	movs	r1, #0
 800a120:	4628      	mov	r0, r5
 800a122:	f007 f83b 	bl	801119c <tcp_accept>
    if (shut_tx) {
 800a126:	e798      	b.n	800a05a <lwip_netconn_do_close_internal+0x17a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a128:	f893 9009 	ldrb.w	r9, [r3, #9]
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	d108      	bne.n	800a144 <lwip_netconn_do_close_internal+0x264>
          tcp_abort(tpcb);
 800a132:	4628      	mov	r0, r5
 800a134:	f007 fc92 	bl	8011a5c <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a138:	6a23      	ldr	r3, [r4, #32]
 800a13a:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a13c:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a140:	350c      	adds	r5, #12
      if (shut_close) {
 800a142:	e74e      	b.n	8009fe2 <lwip_netconn_do_close_internal+0x102>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a144:	7d2b      	ldrb	r3, [r5, #20]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d012      	beq.n	800a170 <lwip_netconn_do_close_internal+0x290>
    if (shut_tx) {
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	d117      	bne.n	800a180 <lwip_netconn_do_close_internal+0x2a0>
    tcp_poll(tpcb, poll_tcp, 1);
 800a150:	2201      	movs	r2, #1
 800a152:	4915      	ldr	r1, [pc, #84]	@ (800a1a8 <lwip_netconn_do_close_internal+0x2c8>)
 800a154:	4628      	mov	r0, r5
 800a156:	f007 f827 	bl	80111a8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a15a:	4914      	ldr	r1, [pc, #80]	@ (800a1ac <lwip_netconn_do_close_internal+0x2cc>)
 800a15c:	4628      	mov	r0, r5
 800a15e:	f007 f801 	bl	8011164 <tcp_err>
    tcp_arg(tpcb, conn);
 800a162:	4628      	mov	r0, r5
 800a164:	4621      	mov	r1, r4
 800a166:	f006 ffc1 	bl	80110ec <tcp_arg>
  return err;
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	e711      	b.n	8009f94 <lwip_netconn_do_close_internal+0xb4>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a170:	4b06      	ldr	r3, [pc, #24]	@ (800a18c <lwip_netconn_do_close_internal+0x2ac>)
 800a172:	f240 4241 	movw	r2, #1089	@ 0x441
 800a176:	490e      	ldr	r1, [pc, #56]	@ (800a1b0 <lwip_netconn_do_close_internal+0x2d0>)
 800a178:	4806      	ldr	r0, [pc, #24]	@ (800a194 <lwip_netconn_do_close_internal+0x2b4>)
 800a17a:	f00c f99f 	bl	80164bc <iprintf>
 800a17e:	e7e4      	b.n	800a14a <lwip_netconn_do_close_internal+0x26a>
      tcp_sent(tpcb, sent_tcp);
 800a180:	490c      	ldr	r1, [pc, #48]	@ (800a1b4 <lwip_netconn_do_close_internal+0x2d4>)
 800a182:	4628      	mov	r0, r5
 800a184:	f006 ffd2 	bl	801112c <tcp_sent>
 800a188:	e7e2      	b.n	800a150 <lwip_netconn_do_close_internal+0x270>
 800a18a:	bf00      	nop
 800a18c:	08019260 	.word	0x08019260
 800a190:	08019480 	.word	0x08019480
 800a194:	080187f8 	.word	0x080187f8
 800a198:	080194a0 	.word	0x080194a0
 800a19c:	080194c4 	.word	0x080194c4
 800a1a0:	080193b8 	.word	0x080193b8
 800a1a4:	08019a14 	.word	0x08019a14
 800a1a8:	0800a1b9 	.word	0x0800a1b9
 800a1ac:	0800a485 	.word	0x0800a485
 800a1b0:	080194d8 	.word	0x080194d8
 800a1b4:	0800a239 	.word	0x0800a239

0800a1b8 <poll_tcp>:
{
 800a1b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	b368      	cbz	r0, 800a21a <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 800a1be:	7861      	ldrb	r1, [r4, #1]
 800a1c0:	2901      	cmp	r1, #1
 800a1c2:	d026      	beq.n	800a212 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 800a1c4:	2904      	cmp	r1, #4
 800a1c6:	d019      	beq.n	800a1fc <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a1c8:	7f23      	ldrb	r3, [r4, #28]
 800a1ca:	06da      	lsls	r2, r3, #27
 800a1cc:	d514      	bpl.n	800a1f8 <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1ce:	6862      	ldr	r2, [r4, #4]
 800a1d0:	b192      	cbz	r2, 800a1f8 <poll_tcp+0x40>
 800a1d2:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 800a1d6:	f640 3169 	movw	r1, #2921	@ 0xb69
 800a1da:	4288      	cmp	r0, r1
 800a1dc:	d90c      	bls.n	800a1f8 <poll_tcp+0x40>
 800a1de:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 800a1e2:	2a07      	cmp	r2, #7
 800a1e4:	d808      	bhi.n	800a1f8 <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a1e6:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1ea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a1ec:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1ee:	b11d      	cbz	r5, 800a1f8 <poll_tcp+0x40>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2102      	movs	r1, #2
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	47a8      	blx	r5
}
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a1fc:	6a23      	ldr	r3, [r4, #32]
 800a1fe:	b11b      	cbz	r3, 800a208 <poll_tcp+0x50>
 800a200:	7a5a      	ldrb	r2, [r3, #9]
 800a202:	b10a      	cbz	r2, 800a208 <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 800a204:	3a01      	subs	r2, #1
 800a206:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a208:	2101      	movs	r1, #1
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7ff fe68 	bl	8009ee0 <lwip_netconn_do_close_internal>
 800a210:	e7da      	b.n	800a1c8 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a212:	4620      	mov	r0, r4
 800a214:	f7ff fcba 	bl	8009b8c <lwip_netconn_do_writemore>
 800a218:	e7d6      	b.n	800a1c8 <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a21a:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <poll_tcp+0x74>)
 800a21c:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a220:	4903      	ldr	r1, [pc, #12]	@ (800a230 <poll_tcp+0x78>)
 800a222:	4804      	ldr	r0, [pc, #16]	@ (800a234 <poll_tcp+0x7c>)
 800a224:	f00c f94a 	bl	80164bc <iprintf>
 800a228:	e7c9      	b.n	800a1be <poll_tcp+0x6>
 800a22a:	bf00      	nop
 800a22c:	08019260 	.word	0x08019260
 800a230:	08019388 	.word	0x08019388
 800a234:	080187f8 	.word	0x080187f8

0800a238 <sent_tcp>:
{
 800a238:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a23a:	b1f0      	cbz	r0, 800a27a <sent_tcp+0x42>
    if (conn->state == NETCONN_WRITE) {
 800a23c:	7841      	ldrb	r1, [r0, #1]
 800a23e:	4604      	mov	r4, r0
 800a240:	4615      	mov	r5, r2
 800a242:	2901      	cmp	r1, #1
 800a244:	d022      	beq.n	800a28c <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 800a246:	2904      	cmp	r1, #4
 800a248:	d023      	beq.n	800a292 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	b19b      	cbz	r3, 800a276 <sent_tcp+0x3e>
 800a24e:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800a252:	f640 3269 	movw	r2, #2921	@ 0xb69
 800a256:	4291      	cmp	r1, r2
 800a258:	d90d      	bls.n	800a276 <sent_tcp+0x3e>
 800a25a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a25e:	2b07      	cmp	r3, #7
 800a260:	d809      	bhi.n	800a276 <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a262:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a264:	6a66      	ldr	r6, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a266:	f023 0310 	bic.w	r3, r3, #16
 800a26a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a26c:	b11e      	cbz	r6, 800a276 <sent_tcp+0x3e>
 800a26e:	462a      	mov	r2, r5
 800a270:	2102      	movs	r1, #2
 800a272:	4620      	mov	r0, r4
 800a274:	47b0      	blx	r6
}
 800a276:	2000      	movs	r0, #0
 800a278:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a27a:	4b08      	ldr	r3, [pc, #32]	@ (800a29c <sent_tcp+0x64>)
 800a27c:	f240 1293 	movw	r2, #403	@ 0x193
 800a280:	4907      	ldr	r1, [pc, #28]	@ (800a2a0 <sent_tcp+0x68>)
 800a282:	4808      	ldr	r0, [pc, #32]	@ (800a2a4 <sent_tcp+0x6c>)
 800a284:	f00c f91a 	bl	80164bc <iprintf>
}
 800a288:	2000      	movs	r0, #0
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a28c:	f7ff fc7e 	bl	8009b8c <lwip_netconn_do_writemore>
 800a290:	e7db      	b.n	800a24a <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a292:	2101      	movs	r1, #1
 800a294:	f7ff fe24 	bl	8009ee0 <lwip_netconn_do_close_internal>
 800a298:	e7d7      	b.n	800a24a <sent_tcp+0x12>
 800a29a:	bf00      	nop
 800a29c:	08019260 	.word	0x08019260
 800a2a0:	08019388 	.word	0x08019388
 800a2a4:	080187f8 	.word	0x080187f8

0800a2a8 <recv_tcp>:
{
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	4604      	mov	r4, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a2ac:	460f      	mov	r7, r1
{
 800a2ae:	4615      	mov	r5, r2
 800a2b0:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a2b2:	2900      	cmp	r1, #0
 800a2b4:	d037      	beq.n	800a326 <recv_tcp+0x7e>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a2b6:	2c00      	cmp	r4, #0
 800a2b8:	d03e      	beq.n	800a338 <recv_tcp+0x90>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a2ba:	bb4e      	cbnz	r6, 800a310 <recv_tcp+0x68>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a2bc:	6863      	ldr	r3, [r4, #4]
 800a2be:	42bb      	cmp	r3, r7
 800a2c0:	d006      	beq.n	800a2d0 <recv_tcp+0x28>
 800a2c2:	4b28      	ldr	r3, [pc, #160]	@ (800a364 <recv_tcp+0xbc>)
 800a2c4:	f240 1235 	movw	r2, #309	@ 0x135
 800a2c8:	4927      	ldr	r1, [pc, #156]	@ (800a368 <recv_tcp+0xc0>)
 800a2ca:	4828      	ldr	r0, [pc, #160]	@ (800a36c <recv_tcp+0xc4>)
 800a2cc:	f00c f8f6 	bl	80164bc <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a2d0:	f104 0610 	add.w	r6, r4, #16
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f00b fafd 	bl	80158d4 <sys_mbox_valid>
 800a2da:	b178      	cbz	r0, 800a2fc <recv_tcp+0x54>
  if (p != NULL) {
 800a2dc:	b305      	cbz	r5, 800a320 <recv_tcp+0x78>
    len = p->tot_len;
 800a2de:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f00b fabc 	bl	8015860 <sys_mbox_trypost>
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d137      	bne.n	800a35e <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a2ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a2f0:	b113      	cbz	r3, 800a2f8 <recv_tcp+0x50>
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4798      	blx	r3
    return ERR_OK;
 800a2f8:	2000      	movs	r0, #0
}
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p != NULL) {
 800a2fc:	2d00      	cmp	r5, #0
 800a2fe:	d0fb      	beq.n	800a2f8 <recv_tcp+0x50>
      tcp_recved(pcb, p->tot_len);
 800a300:	4638      	mov	r0, r7
 800a302:	8929      	ldrh	r1, [r5, #8]
 800a304:	f006 fe72 	bl	8010fec <tcp_recved>
      pbuf_free(p);
 800a308:	4628      	mov	r0, r5
 800a30a:	f006 f923 	bl	8010554 <pbuf_free>
 800a30e:	e7f3      	b.n	800a2f8 <recv_tcp+0x50>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a310:	4b14      	ldr	r3, [pc, #80]	@ (800a364 <recv_tcp+0xbc>)
 800a312:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a316:	4916      	ldr	r1, [pc, #88]	@ (800a370 <recv_tcp+0xc8>)
 800a318:	4814      	ldr	r0, [pc, #80]	@ (800a36c <recv_tcp+0xc4>)
 800a31a:	f00c f8cf 	bl	80164bc <iprintf>
  if (conn == NULL) {
 800a31e:	e7cd      	b.n	800a2bc <recv_tcp+0x14>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a320:	4d14      	ldr	r5, [pc, #80]	@ (800a374 <recv_tcp+0xcc>)
    len = 0;
 800a322:	2700      	movs	r7, #0
 800a324:	e7dc      	b.n	800a2e0 <recv_tcp+0x38>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <recv_tcp+0xbc>)
 800a328:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a32c:	4912      	ldr	r1, [pc, #72]	@ (800a378 <recv_tcp+0xd0>)
 800a32e:	480f      	ldr	r0, [pc, #60]	@ (800a36c <recv_tcp+0xc4>)
 800a330:	f00c f8c4 	bl	80164bc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a334:	2c00      	cmp	r4, #0
 800a336:	d1c0      	bne.n	800a2ba <recv_tcp+0x12>
 800a338:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <recv_tcp+0xbc>)
 800a33a:	f240 122d 	movw	r2, #301	@ 0x12d
 800a33e:	490f      	ldr	r1, [pc, #60]	@ (800a37c <recv_tcp+0xd4>)
 800a340:	480a      	ldr	r0, [pc, #40]	@ (800a36c <recv_tcp+0xc4>)
 800a342:	f00c f8bb 	bl	80164bc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a346:	b916      	cbnz	r6, 800a34e <recv_tcp+0xa6>
    return ERR_VAL;
 800a348:	f06f 0005 	mvn.w	r0, #5
}
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a34e:	4b05      	ldr	r3, [pc, #20]	@ (800a364 <recv_tcp+0xbc>)
 800a350:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a354:	4906      	ldr	r1, [pc, #24]	@ (800a370 <recv_tcp+0xc8>)
 800a356:	4805      	ldr	r0, [pc, #20]	@ (800a36c <recv_tcp+0xc4>)
 800a358:	f00c f8b0 	bl	80164bc <iprintf>
  if (conn == NULL) {
 800a35c:	e7f4      	b.n	800a348 <recv_tcp+0xa0>
    return ERR_MEM;
 800a35e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	08019260 	.word	0x08019260
 800a368:	08019558 	.word	0x08019558
 800a36c:	080187f8 	.word	0x080187f8
 800a370:	08019520 	.word	0x08019520
 800a374:	08019b98 	.word	0x08019b98
 800a378:	080194fc 	.word	0x080194fc
 800a37c:	08019538 	.word	0x08019538

0800a380 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800a380:	6803      	ldr	r3, [r0, #0]
{
 800a382:	b510      	push	{r4, lr}
 800a384:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800a386:	6858      	ldr	r0, [r3, #4]
 800a388:	b130      	cbz	r0, 800a398 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a390:	2b10      	cmp	r3, #16
 800a392:	d00b      	beq.n	800a3ac <lwip_netconn_do_bind+0x2c>
 800a394:	2b20      	cmp	r3, #32
 800a396:	d003      	beq.n	800a3a0 <lwip_netconn_do_bind+0x20>
 800a398:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800a39c:	7120      	strb	r0, [r4, #4]
}
 800a39e:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a3a0:	89a2      	ldrh	r2, [r4, #12]
 800a3a2:	68a1      	ldr	r1, [r4, #8]
 800a3a4:	f00a fed6 	bl	8015154 <udp_bind>
  msg->err = err;
 800a3a8:	7120      	strb	r0, [r4, #4]
}
 800a3aa:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a3ac:	89a2      	ldrh	r2, [r4, #12]
 800a3ae:	68a1      	ldr	r1, [r4, #8]
 800a3b0:	f006 fd04 	bl	8010dbc <tcp_bind>
  msg->err = err;
 800a3b4:	7120      	strb	r0, [r4, #4]
}
 800a3b6:	bd10      	pop	{r4, pc}

0800a3b8 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 800a3b8:	6803      	ldr	r3, [r0, #0]
{
 800a3ba:	b530      	push	{r4, r5, lr}
 800a3bc:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800a3be:	6858      	ldr	r0, [r3, #4]
{
 800a3c0:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 800a3c2:	b180      	cbz	r0, 800a3e6 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800a3ca:	2a10      	cmp	r2, #16
 800a3cc:	d004      	beq.n	800a3d8 <lwip_netconn_do_listen+0x20>
 800a3ce:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 800a3d2:	7123      	strb	r3, [r4, #4]
}
 800a3d4:	b003      	add	sp, #12
 800a3d6:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	b94b      	cbnz	r3, 800a3f0 <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a3dc:	7d03      	ldrb	r3, [r0, #20]
 800a3de:	b17b      	cbz	r3, 800a400 <lwip_netconn_do_listen+0x48>
 800a3e0:	f06f 0305 	mvn.w	r3, #5
 800a3e4:	e7f5      	b.n	800a3d2 <lwip_netconn_do_listen+0x1a>
 800a3e6:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 800a3ea:	7123      	strb	r3, [r4, #4]
}
 800a3ec:	b003      	add	sp, #12
 800a3ee:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	bf14      	ite	ne
 800a3f4:	f06f 030a 	mvnne.w	r3, #10
 800a3f8:	2300      	moveq	r3, #0
  msg->err = err;
 800a3fa:	7123      	strb	r3, [r4, #4]
}
 800a3fc:	b003      	add	sp, #12
 800a3fe:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a400:	f10d 0207 	add.w	r2, sp, #7
 800a404:	21ff      	movs	r1, #255	@ 0xff
 800a406:	f006 fd35 	bl	8010e74 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800a40a:	4605      	mov	r5, r0
 800a40c:	b1d8      	cbz	r0, 800a446 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	3010      	adds	r0, #16
 800a412:	f00b fa5f 	bl	80158d4 <sys_mbox_valid>
 800a416:	bb50      	cbnz	r0, 800a46e <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a418:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800a41a:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a41c:	3014      	adds	r0, #20
            err = ERR_OK;
 800a41e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a422:	f00b fa57 	bl	80158d4 <sys_mbox_valid>
 800a426:	b1d0      	cbz	r0, 800a45e <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 800a428:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a42c:	b970      	cbnz	r0, 800a44c <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 800a42e:	6821      	ldr	r1, [r4, #0]
 800a430:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a432:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800a434:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800a436:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a438:	f006 fe58 	bl	80110ec <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	4910      	ldr	r1, [pc, #64]	@ (800a480 <lwip_netconn_do_listen+0xc8>)
 800a440:	6858      	ldr	r0, [r3, #4]
 800a442:	f006 feab 	bl	801119c <tcp_accept>
  msg->err = err;
 800a446:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800a44a:	e7c2      	b.n	800a3d2 <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 800a44c:	4628      	mov	r0, r5
 800a44e:	f007 fce3 	bl	8011e18 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	2100      	movs	r1, #0
  msg->err = err;
 800a456:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 800a45a:	6051      	str	r1, [r2, #4]
 800a45c:	e7b9      	b.n	800a3d2 <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a45e:	6820      	ldr	r0, [r4, #0]
 800a460:	2106      	movs	r1, #6
 800a462:	3014      	adds	r0, #20
 800a464:	f00b f9e4 	bl	8015830 <sys_mbox_new>
 800a468:	f88d 0007 	strb.w	r0, [sp, #7]
 800a46c:	e7de      	b.n	800a42c <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 800a46e:	6820      	ldr	r0, [r4, #0]
 800a470:	3010      	adds	r0, #16
 800a472:	f00b f9eb 	bl	801584c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	3010      	adds	r0, #16
 800a47a:	f00b fa31 	bl	80158e0 <sys_mbox_set_invalid>
 800a47e:	e7cb      	b.n	800a418 <lwip_netconn_do_listen+0x60>
 800a480:	0800af51 	.word	0x0800af51

0800a484 <err_tcp>:
{
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a488:	4604      	mov	r4, r0
{
 800a48a:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d073      	beq.n	800a578 <err_tcp+0xf4>
  SYS_ARCH_PROTECT(lev);
 800a490:	f00b faa2 	bl	80159d8 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a494:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800a496:	2600      	movs	r6, #0
  old_state = conn->state;
 800a498:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a49a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800a49e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 800a4a0:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a4a2:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 800a4a4:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800a4a6:	f00b faa3 	bl	80159f0 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a4aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a4ac:	b17b      	cbz	r3, 800a4ce <err_tcp+0x4a>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a4b8:	b14b      	cbz	r3, 800a4ce <err_tcp+0x4a>
 800a4ba:	4632      	mov	r2, r6
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a4c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a4c4:	b11b      	cbz	r3, 800a4ce <err_tcp+0x4a>
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	2102      	movs	r1, #2
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4798      	blx	r3
  switch (err) {
 800a4ce:	f105 030f 	add.w	r3, r5, #15
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d83b      	bhi.n	800a550 <err_tcp+0xcc>
 800a4d8:	4a34      	ldr	r2, [pc, #208]	@ (800a5ac <err_tcp+0x128>)
 800a4da:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a4de:	f104 0610 	add.w	r6, r4, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f00b f9f6 	bl	80158d4 <sys_mbox_valid>
 800a4e8:	bb68      	cbnz	r0, 800a546 <err_tcp+0xc2>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a4ea:	f104 0614 	add.w	r6, r4, #20
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f00b f9f0 	bl	80158d4 <sys_mbox_valid>
 800a4f4:	bb10      	cbnz	r0, 800a53c <err_tcp+0xb8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a4f6:	1efb      	subs	r3, r7, #3
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d901      	bls.n	800a500 <err_tcp+0x7c>
 800a4fc:	2f01      	cmp	r7, #1
 800a4fe:	d119      	bne.n	800a534 <err_tcp+0xb0>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a500:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a502:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800a506:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a508:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800a50a:	d415      	bmi.n	800a538 <err_tcp+0xb4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a50c:	6a23      	ldr	r3, [r4, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d042      	beq.n	800a598 <err_tcp+0x114>
      if (old_state == NETCONN_CLOSE) {
 800a512:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a514:	681e      	ldr	r6, [r3, #0]
 800a516:	bf08      	it	eq
 800a518:	2500      	moveq	r5, #0
 800a51a:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 800a51c:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a51e:	4630      	mov	r0, r6
 800a520:	f00b fa1a 	bl	8015958 <sys_sem_valid>
 800a524:	b380      	cbz	r0, 800a588 <err_tcp+0x104>
      conn->current_msg = NULL;
 800a526:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800a528:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 800a52a:	6223      	str	r3, [r4, #32]
}
 800a52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800a530:	f00b ba0a 	b.w	8015948 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a534:	6a23      	ldr	r3, [r4, #32]
 800a536:	b97b      	cbnz	r3, 800a558 <err_tcp+0xd4>
}
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a53c:	4641      	mov	r1, r8
 800a53e:	4630      	mov	r0, r6
 800a540:	f00b f98e 	bl	8015860 <sys_mbox_trypost>
 800a544:	e7d7      	b.n	800a4f6 <err_tcp+0x72>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a546:	4630      	mov	r0, r6
 800a548:	4641      	mov	r1, r8
 800a54a:	f00b f989 	bl	8015860 <sys_mbox_trypost>
 800a54e:	e7cc      	b.n	800a4ea <err_tcp+0x66>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a550:	b95d      	cbnz	r5, 800a56a <err_tcp+0xe6>
{
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	e7c2      	b.n	800a4de <err_tcp+0x5a>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a558:	4b15      	ldr	r3, [pc, #84]	@ (800a5b0 <err_tcp+0x12c>)
 800a55a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a55e:	4915      	ldr	r1, [pc, #84]	@ (800a5b4 <err_tcp+0x130>)
 800a560:	4815      	ldr	r0, [pc, #84]	@ (800a5b8 <err_tcp+0x134>)
}
 800a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a566:	f00b bfa9 	b.w	80164bc <iprintf>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a56a:	4b11      	ldr	r3, [pc, #68]	@ (800a5b0 <err_tcp+0x12c>)
 800a56c:	227d      	movs	r2, #125	@ 0x7d
 800a56e:	4913      	ldr	r1, [pc, #76]	@ (800a5bc <err_tcp+0x138>)
 800a570:	4811      	ldr	r0, [pc, #68]	@ (800a5b8 <err_tcp+0x134>)
 800a572:	f00b ffa3 	bl	80164bc <iprintf>
 800a576:	e7ec      	b.n	800a552 <err_tcp+0xce>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a578:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b0 <err_tcp+0x12c>)
 800a57a:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a57e:	4910      	ldr	r1, [pc, #64]	@ (800a5c0 <err_tcp+0x13c>)
 800a580:	480d      	ldr	r0, [pc, #52]	@ (800a5b8 <err_tcp+0x134>)
 800a582:	f00b ff9b 	bl	80164bc <iprintf>
 800a586:	e783      	b.n	800a490 <err_tcp+0xc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a588:	4b09      	ldr	r3, [pc, #36]	@ (800a5b0 <err_tcp+0x12c>)
 800a58a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a58e:	490d      	ldr	r1, [pc, #52]	@ (800a5c4 <err_tcp+0x140>)
 800a590:	4809      	ldr	r0, [pc, #36]	@ (800a5b8 <err_tcp+0x134>)
 800a592:	f00b ff93 	bl	80164bc <iprintf>
 800a596:	e7c6      	b.n	800a526 <err_tcp+0xa2>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <err_tcp+0x12c>)
 800a59a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a59e:	490a      	ldr	r1, [pc, #40]	@ (800a5c8 <err_tcp+0x144>)
 800a5a0:	4805      	ldr	r0, [pc, #20]	@ (800a5b8 <err_tcp+0x134>)
 800a5a2:	f00b ff8b 	bl	80164bc <iprintf>
        conn->current_msg->err = ERR_OK;
 800a5a6:	6a23      	ldr	r3, [r4, #32]
 800a5a8:	e7b3      	b.n	800a512 <err_tcp+0x8e>
 800a5aa:	bf00      	nop
 800a5ac:	08019b8c 	.word	0x08019b8c
 800a5b0:	08019260 	.word	0x08019260
 800a5b4:	080195c4 	.word	0x080195c4
 800a5b8:	080187f8 	.word	0x080187f8
 800a5bc:	08019598 	.word	0x08019598
 800a5c0:	08019388 	.word	0x08019388
 800a5c4:	080195a8 	.word	0x080195a8
 800a5c8:	080193b8 	.word	0x080193b8

0800a5cc <lwip_netconn_do_recv>:
{
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800a5ce:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 800a5d0:	6803      	ldr	r3, [r0, #0]
{
 800a5d2:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 800a5d4:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a5d6:	6858      	ldr	r0, [r3, #4]
 800a5d8:	b120      	cbz	r0, 800a5e4 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d000      	beq.n	800a5e6 <lwip_netconn_do_recv+0x1a>
}
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800a5e6:	68b4      	ldr	r4, [r6, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a5e8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800a5ec:	e001      	b.n	800a5f2 <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a5ee:	6833      	ldr	r3, [r6, #0]
 800a5f0:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a5f2:	42bc      	cmp	r4, r7
 800a5f4:	4625      	mov	r5, r4
 800a5f6:	bf28      	it	cs
 800a5f8:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a5fa:	b2a9      	uxth	r1, r5
 800a5fc:	f006 fcf6 	bl	8010fec <tcp_recved>
      } while (remaining != 0);
 800a600:	1b64      	subs	r4, r4, r5
 800a602:	d1f4      	bne.n	800a5ee <lwip_netconn_do_recv+0x22>
}
 800a604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a606:	bf00      	nop

0800a608 <lwip_netconn_do_join_leave_group>:
void
lwip_netconn_do_join_leave_group(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  msg->err = ERR_CONN;
 800a608:	22f5      	movs	r2, #245	@ 0xf5
  if (msg->conn->pcb.tcp != NULL) {
 800a60a:	6803      	ldr	r3, [r0, #0]
  msg->err = ERR_CONN;
 800a60c:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	b18a      	cbz	r2, 800a636 <lwip_netconn_do_join_leave_group+0x2e>
{
 800a612:	b510      	push	{r4, lr}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	4604      	mov	r4, r0
 800a618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d002      	beq.n	800a626 <lwip_netconn_do_join_leave_group+0x1e>
#endif /* LWIP_IGMP */
      }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800a620:	23fa      	movs	r3, #250	@ 0xfa
 800a622:	7103      	strb	r3, [r0, #4]
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a624:	bd10      	pop	{r4, pc}
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800a626:	7c43      	ldrb	r3, [r0, #17]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800a628:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800a62c:	b923      	cbnz	r3, 800a638 <lwip_netconn_do_join_leave_group+0x30>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800a62e:	f004 f881 	bl	800e734 <igmp_joingroup>
 800a632:	7120      	strb	r0, [r4, #4]
}
 800a634:	bd10      	pop	{r4, pc}
 800a636:	4770      	bx	lr
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800a638:	f004 f92a 	bl	800e890 <igmp_leavegroup>
 800a63c:	7120      	strb	r0, [r4, #4]
}
 800a63e:	bd10      	pop	{r4, pc}

0800a640 <lwip_netconn_do_newconn>:
{
 800a640:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800a642:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800a644:	6805      	ldr	r5, [r0, #0]
{
 800a646:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800a648:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a64a:	6868      	ldr	r0, [r5, #4]
 800a64c:	b100      	cbz	r0, 800a650 <lwip_netconn_do_newconn+0x10>
}
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a650:	782b      	ldrb	r3, [r5, #0]
 800a652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a656:	2b10      	cmp	r3, #16
 800a658:	d016      	beq.n	800a688 <lwip_netconn_do_newconn+0x48>
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d11f      	bne.n	800a69e <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a65e:	f00b f831 	bl	80156c4 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800a662:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a664:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a666:	6850      	ldr	r0, [r2, #4]
 800a668:	b158      	cbz	r0, 800a682 <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a66a:	7813      	ldrb	r3, [r2, #0]
 800a66c:	2b22      	cmp	r3, #34	@ 0x22
 800a66e:	d101      	bne.n	800a674 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a670:	2301      	movs	r3, #1
 800a672:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a674:	490b      	ldr	r1, [pc, #44]	@ (800a6a4 <lwip_netconn_do_newconn+0x64>)
 800a676:	f00a ffdd 	bl	8015634 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e5      	bne.n	800a64e <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 800a682:	23ff      	movs	r3, #255	@ 0xff
 800a684:	7123      	strb	r3, [r4, #4]
}
 800a686:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a688:	f007 faf4 	bl	8011c74 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 800a68c:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a68e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	2a00      	cmp	r2, #0
 800a694:	d0f5      	beq.n	800a682 <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fa14 	bl	8009ac4 <setup_tcp>
 800a69c:	e7ed      	b.n	800a67a <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 800a69e:	23fa      	movs	r3, #250	@ 0xfa
 800a6a0:	7123      	strb	r3, [r4, #4]
}
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	0800ad79 	.word	0x0800ad79

0800a6a8 <lwip_sock_make_addr.constprop.0.isra.0>:
}
#endif

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	461c      	mov	r4, r3
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
  LWIP_ASSERT("from != NULL", from != NULL);
 800a6b2:	4615      	mov	r5, r2
 800a6b4:	b302      	cbz	r2, 800a6f8 <lwip_sock_make_addr.constprop.0.isra.0+0x50>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a6b6:	b344      	cbz	r4, 800a70a <lwip_sock_make_addr.constprop.0.isra.0+0x62>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a6b8:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f8ad 3000 	strh.w	r3, [sp]
 800a6c2:	f005 f8b7 	bl	800f834 <lwip_htons>
  if (*fromlen < saddr.sa.sa_len) {
 800a6c6:	6822      	ldr	r2, [r4, #0]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	6831      	ldr	r1, [r6, #0]
    truncated = 1;
  } else if (*fromlen > saddr.sa.sa_len) {
 800a6cc:	2a10      	cmp	r2, #16
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a6ce:	f8ad 0002 	strh.w	r0, [sp, #2]
 800a6d2:	9101      	str	r1, [sp, #4]
 800a6d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  } else if (*fromlen > saddr.sa.sa_len) {
 800a6d8:	d805      	bhi.n	800a6e6 <lwip_sock_make_addr.constprop.0.isra.0+0x3e>
    *fromlen = saddr.sa.sa_len;
  }
  MEMCPY(from, &saddr, *fromlen);
 800a6da:	4669      	mov	r1, sp
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f00c f91a 	bl	8016916 <memcpy>
  return truncated;
}
 800a6e2:	b005      	add	sp, #20
 800a6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *fromlen = saddr.sa.sa_len;
 800a6e6:	2310      	movs	r3, #16
  MEMCPY(from, &saddr, *fromlen);
 800a6e8:	4669      	mov	r1, sp
 800a6ea:	4628      	mov	r0, r5
    *fromlen = saddr.sa.sa_len;
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6023      	str	r3, [r4, #0]
  MEMCPY(from, &saddr, *fromlen);
 800a6f0:	f00c f911 	bl	8016916 <memcpy>
}
 800a6f4:	b005      	add	sp, #20
 800a6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("from != NULL", from != NULL);
 800a6f8:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 800a6fa:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800a6fe:	4908      	ldr	r1, [pc, #32]	@ (800a720 <lwip_sock_make_addr.constprop.0.isra.0+0x78>)
 800a700:	4808      	ldr	r0, [pc, #32]	@ (800a724 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 800a702:	f00b fedb 	bl	80164bc <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a706:	2c00      	cmp	r4, #0
 800a708:	d1d6      	bne.n	800a6b8 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 800a70a:	4b04      	ldr	r3, [pc, #16]	@ (800a71c <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 800a70c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a710:	4905      	ldr	r1, [pc, #20]	@ (800a728 <lwip_sock_make_addr.constprop.0.isra.0+0x80>)
 800a712:	4804      	ldr	r0, [pc, #16]	@ (800a724 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 800a714:	f00b fed2 	bl	80164bc <iprintf>
 800a718:	e7ce      	b.n	800a6b8 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 800a71a:	bf00      	nop
 800a71c:	080192f0 	.word	0x080192f0
 800a720:	080195e0 	.word	0x080195e0
 800a724:	080187f8 	.word	0x080187f8
 800a728:	080195f0 	.word	0x080195f0

0800a72c <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f000 80b9 	beq.w	800a8a4 <event_callback+0x178>
{
 800a732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    s = conn->socket;
 800a736:	6984      	ldr	r4, [r0, #24]
 800a738:	4605      	mov	r5, r0
 800a73a:	460f      	mov	r7, r1
    if (s < 0) {
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	db17      	blt.n	800a770 <event_callback+0x44>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a740:	2c03      	cmp	r4, #3
 800a742:	dc10      	bgt.n	800a766 <event_callback+0x3a>
    if (sock->conn) {
 800a744:	4d60      	ldr	r5, [pc, #384]	@ (800a8c8 <event_callback+0x19c>)
 800a746:	ea4f 1804 	mov.w	r8, r4, lsl #4
 800a74a:	f855 3008 	ldr.w	r3, [r5, r8]
 800a74e:	b153      	cbz	r3, 800a766 <event_callback+0x3a>
  } else {
    return;
  }

  check_waiters = 1;
  SYS_ARCH_PROTECT(lev);
 800a750:	f00b f942 	bl	80159d8 <sys_arch_protect>
 800a754:	4606      	mov	r6, r0
  /* Set event as required */
  switch (evt) {
 800a756:	2f04      	cmp	r7, #4
 800a758:	f200 80a8 	bhi.w	800a8ac <event_callback+0x180>
 800a75c:	e8df f007 	tbb	[pc, r7]
 800a760:	4f57676c 	.word	0x4f57676c
 800a764:	11          	.byte	0x11
 800a765:	00          	.byte	0x00
    set_errno(EBADF);
 800a766:	4b59      	ldr	r3, [pc, #356]	@ (800a8cc <event_callback+0x1a0>)
 800a768:	2209      	movs	r2, #9
 800a76a:	601a      	str	r2, [r3, #0]
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
 800a76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SYS_ARCH_PROTECT(lev);
 800a770:	f00b f932 	bl	80159d8 <sys_arch_protect>
      if (conn->socket < 0) {
 800a774:	69ac      	ldr	r4, [r5, #24]
      SYS_ARCH_PROTECT(lev);
 800a776:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 800a778:	2c00      	cmp	r4, #0
 800a77a:	db6c      	blt.n	800a856 <event_callback+0x12a>
      SYS_ARCH_UNPROTECT(lev);
 800a77c:	f00b f938 	bl	80159f0 <sys_arch_unprotect>
 800a780:	e7de      	b.n	800a740 <event_callback+0x14>
      sock->errevent = 1;
 800a782:	4445      	add	r5, r8
 800a784:	f04f 0801 	mov.w	r8, #1
  if (sock->select_waiting && check_waiters) {
 800a788:	7bab      	ldrb	r3, [r5, #14]
      sock->errevent = 1;
 800a78a:	f8a5 800c 	strh.w	r8, [r5, #12]
  if (sock->select_waiting && check_waiters) {
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d038      	beq.n	800a804 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 800a792:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_sendevent = sock->sendevent != 0;
 800a796:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 800a79a:	4630      	mov	r0, r6
 800a79c:	f00b f928 	bl	80159f0 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a7a0:	4b4b      	ldr	r3, [pc, #300]	@ (800a8d0 <event_callback+0x1a4>)
 800a7a2:	681d      	ldr	r5, [r3, #0]
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	d0e1      	beq.n	800a76c <event_callback+0x40>
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
        scb->sem_signalled = 1;
 800a7a8:	2601      	movs	r6, #1
    if (scb->sem_signalled == 0) {
 800a7aa:	69eb      	ldr	r3, [r5, #28]
 800a7ac:	bb1b      	cbnz	r3, 800a7f6 <event_callback+0xca>
      if (scb->poll_fds != NULL) {
 800a7ae:	6969      	ldr	r1, [r5, #20]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d058      	beq.n	800a866 <event_callback+0x13a>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a7b4:	69a8      	ldr	r0, [r5, #24]
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a7b6:	b1f0      	cbz	r0, 800a7f6 <event_callback+0xca>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a7b8:	f101 0c04 	add.w	ip, r1, #4
 800a7bc:	e002      	b.n	800a7c4 <event_callback+0x98>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a7be:	3301      	adds	r3, #1
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	d018      	beq.n	800a7f6 <event_callback+0xca>
    if (pollfd->fd == fd) {
 800a7c4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800a7c8:	4294      	cmp	r4, r2
 800a7ca:	d1f8      	bne.n	800a7be <event_callback+0x92>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a7cc:	2f00      	cmp	r7, #0
 800a7ce:	dd03      	ble.n	800a7d8 <event_callback+0xac>
 800a7d0:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 800a7d4:	07d2      	lsls	r2, r2, #31
 800a7d6:	d409      	bmi.n	800a7ec <event_callback+0xc0>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a7d8:	f1b9 0f00 	cmp.w	r9, #0
 800a7dc:	d003      	beq.n	800a7e6 <event_callback+0xba>
 800a7de:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 800a7e2:	0792      	lsls	r2, r2, #30
 800a7e4:	d402      	bmi.n	800a7ec <event_callback+0xc0>
      if (has_errevent) {
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	d0e8      	beq.n	800a7be <event_callback+0x92>
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a7ec:	f105 0020 	add.w	r0, r5, #32
        scb->sem_signalled = 1;
 800a7f0:	61ee      	str	r6, [r5, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a7f2:	f00b f8a9 	bl	8015948 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a7f6:	682d      	ldr	r5, [r5, #0]
 800a7f8:	2d00      	cmp	r5, #0
 800a7fa:	d1d6      	bne.n	800a7aa <event_callback+0x7e>
 800a7fc:	e7b6      	b.n	800a76c <event_callback+0x40>
      sock->sendevent = 0;
 800a7fe:	4445      	add	r5, r8
 800a800:	2300      	movs	r3, #0
 800a802:	816b      	strh	r3, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 800a804:	4630      	mov	r0, r6
}
 800a806:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SYS_ARCH_UNPROTECT(lev);
 800a80a:	f00b b8f1 	b.w	80159f0 <sys_arch_unprotect>
      if (sock->sendevent) {
 800a80e:	4445      	add	r5, r8
 800a810:	896b      	ldrh	r3, [r5, #10]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d147      	bne.n	800a8a6 <event_callback+0x17a>
      sock->sendevent = 1;
 800a816:	f04f 0901 	mov.w	r9, #1
  if (sock->select_waiting && check_waiters) {
 800a81a:	7bab      	ldrb	r3, [r5, #14]
      sock->sendevent = 1;
 800a81c:	f8a5 900a 	strh.w	r9, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0ef      	beq.n	800a804 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 800a824:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_errevent = sock->errevent != 0;
 800a828:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 800a82c:	e7b5      	b.n	800a79a <event_callback+0x6e>
      sock->rcvevent--;
 800a82e:	4445      	add	r5, r8
 800a830:	892b      	ldrh	r3, [r5, #8]
 800a832:	3b01      	subs	r3, #1
 800a834:	812b      	strh	r3, [r5, #8]
  if (sock->select_waiting && check_waiters) {
 800a836:	e7e5      	b.n	800a804 <event_callback+0xd8>
      sock->rcvevent++;
 800a838:	4445      	add	r5, r8
 800a83a:	892f      	ldrh	r7, [r5, #8]
 800a83c:	3701      	adds	r7, #1
 800a83e:	b23f      	sxth	r7, r7
      if (sock->rcvevent > 1) {
 800a840:	2f01      	cmp	r7, #1
      sock->rcvevent++;
 800a842:	812f      	strh	r7, [r5, #8]
      if (sock->rcvevent > 1) {
 800a844:	dcde      	bgt.n	800a804 <event_callback+0xd8>
  if (sock->select_waiting && check_waiters) {
 800a846:	7bab      	ldrb	r3, [r5, #14]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0db      	beq.n	800a804 <event_callback+0xd8>
    has_sendevent = sock->sendevent != 0;
 800a84c:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    has_errevent = sock->errevent != 0;
 800a850:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 800a854:	e7a1      	b.n	800a79a <event_callback+0x6e>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a856:	b90f      	cbnz	r7, 800a85c <event_callback+0x130>
          conn->socket--;
 800a858:	3c01      	subs	r4, #1
 800a85a:	61ac      	str	r4, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 800a85c:	4618      	mov	r0, r3
}
 800a85e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        SYS_ARCH_UNPROTECT(lev);
 800a862:	f00b b8c5 	b.w	80159f0 <sys_arch_unprotect>
        if (has_recvevent) {
 800a866:	2f00      	cmp	r7, #0
 800a868:	dd06      	ble.n	800a878 <event_callback+0x14c>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a86a:	68ab      	ldr	r3, [r5, #8]
 800a86c:	b123      	cbz	r3, 800a878 <event_callback+0x14c>
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	2301      	movs	r3, #1
 800a872:	40a3      	lsls	r3, r4
 800a874:	4213      	tst	r3, r2
 800a876:	d1b9      	bne.n	800a7ec <event_callback+0xc0>
        if (has_sendevent) {
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	d006      	beq.n	800a88c <event_callback+0x160>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a87e:	68eb      	ldr	r3, [r5, #12]
 800a880:	b123      	cbz	r3, 800a88c <event_callback+0x160>
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	2301      	movs	r3, #1
 800a886:	40a3      	lsls	r3, r4
 800a888:	4213      	tst	r3, r2
 800a88a:	d1af      	bne.n	800a7ec <event_callback+0xc0>
        if (has_errevent) {
 800a88c:	f1b8 0f00 	cmp.w	r8, #0
 800a890:	d0b1      	beq.n	800a7f6 <event_callback+0xca>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a892:	692b      	ldr	r3, [r5, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0ae      	beq.n	800a7f6 <event_callback+0xca>
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	2301      	movs	r3, #1
 800a89c:	40a3      	lsls	r3, r4
 800a89e:	4213      	tst	r3, r2
 800a8a0:	d0a9      	beq.n	800a7f6 <event_callback+0xca>
 800a8a2:	e7a3      	b.n	800a7ec <event_callback+0xc0>
 800a8a4:	4770      	bx	lr
      sock->sendevent = 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	816b      	strh	r3, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 800a8aa:	e7ab      	b.n	800a804 <event_callback+0xd8>
 800a8ac:	4445      	add	r5, r8
      LWIP_ASSERT("unknown event", 0);
 800a8ae:	4b09      	ldr	r3, [pc, #36]	@ (800a8d4 <event_callback+0x1a8>)
 800a8b0:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800a8b4:	4908      	ldr	r1, [pc, #32]	@ (800a8d8 <event_callback+0x1ac>)
 800a8b6:	4809      	ldr	r0, [pc, #36]	@ (800a8dc <event_callback+0x1b0>)
 800a8b8:	f00b fe00 	bl	80164bc <iprintf>
  if (sock->select_waiting && check_waiters) {
 800a8bc:	7bab      	ldrb	r3, [r5, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0a0      	beq.n	800a804 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 800a8c2:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800a8c6:	e7c1      	b.n	800a84c <event_callback+0x120>
 800a8c8:	20008e58 	.word	0x20008e58
 800a8cc:	200101d0 	.word	0x200101d0
 800a8d0:	20008e54 	.word	0x20008e54
 800a8d4:	080192f0 	.word	0x080192f0
 800a8d8:	08019600 	.word	0x08019600
 800a8dc:	080187f8 	.word	0x080187f8

0800a8e0 <lwip_netconn_do_send>:
{
 800a8e0:	b570      	push	{r4, r5, r6, lr}
  err_t err = netconn_err(msg->conn);
 800a8e2:	6805      	ldr	r5, [r0, #0]
{
 800a8e4:	4604      	mov	r4, r0
err_t
netconn_err(struct netconn *conn)
{
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a8e6:	b14d      	cbz	r5, 800a8fc <lwip_netconn_do_send+0x1c>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800a8e8:	f00b f876 	bl	80159d8 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 800a8ec:	2300      	movs	r3, #0
  err = conn->pending_err;
 800a8ee:	f995 6008 	ldrsb.w	r6, [r5, #8]
  conn->pending_err = ERR_OK;
 800a8f2:	722b      	strb	r3, [r5, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a8f4:	f00b f87c 	bl	80159f0 <sys_arch_unprotect>
  if (err == ERR_OK) {
 800a8f8:	b94e      	cbnz	r6, 800a90e <lwip_netconn_do_send+0x2e>
    if (msg->conn->pcb.tcp != NULL) {
 800a8fa:	6825      	ldr	r5, [r4, #0]
 800a8fc:	6868      	ldr	r0, [r5, #4]
 800a8fe:	b120      	cbz	r0, 800a90a <lwip_netconn_do_send+0x2a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a900:	782b      	ldrb	r3, [r5, #0]
 800a902:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a906:	2b20      	cmp	r3, #32
 800a908:	d003      	beq.n	800a912 <lwip_netconn_do_send+0x32>
          err = ERR_CONN;
 800a90a:	f06f 060a 	mvn.w	r6, #10
  msg->err = err;
 800a90e:	7126      	strb	r6, [r4, #4]
}
 800a910:	bd70      	pop	{r4, r5, r6, pc}
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a912:	68a2      	ldr	r2, [r4, #8]
 800a914:	6893      	ldr	r3, [r2, #8]
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a916:	6811      	ldr	r1, [r2, #0]
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a918:	b91b      	cbnz	r3, 800a922 <lwip_netconn_do_send+0x42>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a91a:	f00a fe0d 	bl	8015538 <udp_send>
 800a91e:	4606      	mov	r6, r0
 800a920:	e7f5      	b.n	800a90e <lwip_netconn_do_send+0x2e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a922:	8993      	ldrh	r3, [r2, #12]
 800a924:	3208      	adds	r2, #8
 800a926:	f00a fda3 	bl	8015470 <udp_sendto>
 800a92a:	4606      	mov	r6, r0
 800a92c:	e7ef      	b.n	800a90e <lwip_netconn_do_send+0x2e>
 800a92e:	bf00      	nop

0800a930 <lwip_netconn_do_write>:
{
 800a930:	b570      	push	{r4, r5, r6, lr}
  err_t err = netconn_err(msg->conn);
 800a932:	6805      	ldr	r5, [r0, #0]
{
 800a934:	4604      	mov	r4, r0
  if (conn == NULL) {
 800a936:	b14d      	cbz	r5, 800a94c <lwip_netconn_do_write+0x1c>
  SYS_ARCH_PROTECT(lev);
 800a938:	f00b f84e 	bl	80159d8 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800a93c:	2300      	movs	r3, #0
  err = conn->pending_err;
 800a93e:	f995 6008 	ldrsb.w	r6, [r5, #8]
  conn->pending_err = ERR_OK;
 800a942:	722b      	strb	r3, [r5, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a944:	f00b f854 	bl	80159f0 <sys_arch_unprotect>
  if (err == ERR_OK) {
 800a948:	b93e      	cbnz	r6, 800a95a <lwip_netconn_do_write+0x2a>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a94a:	6825      	ldr	r5, [r4, #0]
 800a94c:	782b      	ldrb	r3, [r5, #0]
 800a94e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a952:	2b10      	cmp	r3, #16
 800a954:	d003      	beq.n	800a95e <lwip_netconn_do_write+0x2e>
      err = ERR_VAL;
 800a956:	f06f 0605 	mvn.w	r6, #5
  msg->err = err;
 800a95a:	7126      	strb	r6, [r4, #4]
}
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800a95e:	786b      	ldrb	r3, [r5, #1]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d13a      	bne.n	800a9da <lwip_netconn_do_write+0xaa>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a964:	686b      	ldr	r3, [r5, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d03b      	beq.n	800a9e2 <lwip_netconn_do_write+0xb2>
        msg->conn->state = NETCONN_WRITE;
 800a96a:	2201      	movs	r2, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a96c:	6a2b      	ldr	r3, [r5, #32]
        msg->conn->state = NETCONN_WRITE;
 800a96e:	706a      	strb	r2, [r5, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a970:	b133      	cbz	r3, 800a980 <lwip_netconn_do_write+0x50>
 800a972:	4b22      	ldr	r3, [pc, #136]	@ (800a9fc <lwip_netconn_do_write+0xcc>)
 800a974:	f240 7223 	movw	r2, #1827	@ 0x723
 800a978:	4921      	ldr	r1, [pc, #132]	@ (800aa00 <lwip_netconn_do_write+0xd0>)
 800a97a:	4822      	ldr	r0, [pc, #136]	@ (800aa04 <lwip_netconn_do_write+0xd4>)
 800a97c:	f00b fd9e 	bl	80164bc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a980:	6963      	ldr	r3, [r4, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d031      	beq.n	800a9ea <lwip_netconn_do_write+0xba>
        msg->conn->current_msg = msg;
 800a986:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a988:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800a98a:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a98c:	f7ff f8fe 	bl	8009b8c <lwip_netconn_do_writemore>
 800a990:	2800      	cmp	r0, #0
 800a992:	d0e3      	beq.n	800a95c <lwip_netconn_do_write+0x2c>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d006      	beq.n	800a9aa <lwip_netconn_do_write+0x7a>
 800a99c:	4b17      	ldr	r3, [pc, #92]	@ (800a9fc <lwip_netconn_do_write+0xcc>)
 800a99e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a9a2:	4919      	ldr	r1, [pc, #100]	@ (800aa08 <lwip_netconn_do_write+0xd8>)
 800a9a4:	4817      	ldr	r0, [pc, #92]	@ (800aa04 <lwip_netconn_do_write+0xd4>)
 800a9a6:	f00b fd89 	bl	80164bc <iprintf>
          UNLOCK_TCPIP_CORE();
 800a9aa:	4818      	ldr	r0, [pc, #96]	@ (800aa0c <lwip_netconn_do_write+0xdc>)
 800a9ac:	f00a fffa 	bl	80159a4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	300c      	adds	r0, #12
 800a9b6:	f00a ffab 	bl	8015910 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a9ba:	4814      	ldr	r0, [pc, #80]	@ (800aa0c <lwip_netconn_do_write+0xdc>)
 800a9bc:	f00a ffec 	bl	8015998 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d1c9      	bne.n	800a95c <lwip_netconn_do_write+0x2c>
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a9fc <lwip_netconn_do_write+0xcc>)
 800a9ca:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a9ce:	490e      	ldr	r1, [pc, #56]	@ (800aa08 <lwip_netconn_do_write+0xd8>)
 800a9d0:	480c      	ldr	r0, [pc, #48]	@ (800aa04 <lwip_netconn_do_write+0xd4>)
}
 800a9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a9d6:	f00b bd71 	b.w	80164bc <iprintf>
        err = ERR_INPROGRESS;
 800a9da:	f06f 0604 	mvn.w	r6, #4
  msg->err = err;
 800a9de:	7126      	strb	r6, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a9e0:	e7bc      	b.n	800a95c <lwip_netconn_do_write+0x2c>
        err = ERR_CONN;
 800a9e2:	f06f 060a 	mvn.w	r6, #10
  msg->err = err;
 800a9e6:	7126      	strb	r6, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800a9e8:	e7b8      	b.n	800a95c <lwip_netconn_do_write+0x2c>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a9ea:	4b04      	ldr	r3, [pc, #16]	@ (800a9fc <lwip_netconn_do_write+0xcc>)
 800a9ec:	f240 7224 	movw	r2, #1828	@ 0x724
 800a9f0:	4907      	ldr	r1, [pc, #28]	@ (800aa10 <lwip_netconn_do_write+0xe0>)
 800a9f2:	4804      	ldr	r0, [pc, #16]	@ (800aa04 <lwip_netconn_do_write+0xd4>)
 800a9f4:	f00b fd62 	bl	80164bc <iprintf>
 800a9f8:	e7c5      	b.n	800a986 <lwip_netconn_do_write+0x56>
 800a9fa:	bf00      	nop
 800a9fc:	08019260 	.word	0x08019260
 800aa00:	08019610 	.word	0x08019610
 800aa04:	080187f8 	.word	0x080187f8
 800aa08:	08019578 	.word	0x08019578
 800aa0c:	20008ec8 	.word	0x20008ec8
 800aa10:	0801962c 	.word	0x0801962c

0800aa14 <netconn_recv_data>:
{
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 800aa18:	2300      	movs	r3, #0
{
 800aa1a:	b082      	sub	sp, #8
  void *buf = NULL;
 800aa1c:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	d076      	beq.n	800ab10 <netconn_recv_data+0xfc>
  *new_buf = NULL;
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d067      	beq.n	800aafc <netconn_recv_data+0xe8>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800aa2c:	f100 0810 	add.w	r8, r0, #16
 800aa30:	4616      	mov	r6, r2
 800aa32:	4640      	mov	r0, r8
 800aa34:	f00a ff4e 	bl	80158d4 <sys_mbox_valid>
 800aa38:	4607      	mov	r7, r0
 800aa3a:	b310      	cbz	r0, 800aa82 <netconn_recv_data+0x6e>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800aa3c:	7f23      	ldrb	r3, [r4, #28]
 800aa3e:	f006 0204 	and.w	r2, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800aa42:	a901      	add	r1, sp, #4
 800aa44:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	d025      	beq.n	800aa9a <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800aa4e:	f00a ff35 	bl	80158bc <sys_arch_mbox_tryfetch>
 800aa52:	3001      	adds	r0, #1
 800aa54:	d033      	beq.n	800aabe <netconn_recv_data+0xaa>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aa56:	7822      	ldrb	r2, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800aa58:	9b01      	ldr	r3, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aa5a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800aa5e:	2a10      	cmp	r2, #16
 800aa60:	d022      	beq.n	800aaa8 <netconn_recv_data+0x94>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d03b      	beq.n	800aade <netconn_recv_data+0xca>
    len = netbuf_len((struct netbuf *)buf);
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800aa6a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800aa6c:	b11e      	cbz	r6, 800aa76 <netconn_recv_data+0x62>
 800aa6e:	2101      	movs	r1, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	47b0      	blx	r6
 800aa74:	9b01      	ldr	r3, [sp, #4]
  *new_buf = buf;
 800aa76:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800aa78:	2500      	movs	r5, #0
}
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	b002      	add	sp, #8
 800aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SYS_ARCH_PROTECT(lev);
 800aa82:	f00a ffa9 	bl	80159d8 <sys_arch_protect>
  err = conn->pending_err;
 800aa86:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800aa8a:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aa8c:	f00a ffb0 	bl	80159f0 <sys_arch_unprotect>
    if (err != ERR_OK) {
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	d1f2      	bne.n	800aa7a <netconn_recv_data+0x66>
    return ERR_CONN;
 800aa94:	f06f 050a 	mvn.w	r5, #10
 800aa98:	e7ef      	b.n	800aa7a <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800aa9a:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	d1d5      	bne.n	800aa4e <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800aaa2:	f00a feed 	bl	8015880 <sys_arch_mbox_fetch>
 800aaa6:	e7d6      	b.n	800aa56 <netconn_recv_data+0x42>
  if (msg == &netconn_aborted) {
 800aaa8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab20 <netconn_recv_data+0x10c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d020      	beq.n	800aaf0 <netconn_recv_data+0xdc>
  } else if (msg == &netconn_reset) {
 800aaae:	4a1d      	ldr	r2, [pc, #116]	@ (800ab24 <netconn_recv_data+0x110>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d020      	beq.n	800aaf6 <netconn_recv_data+0xe2>
  } else if (msg == &netconn_closed) {
 800aab4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab28 <netconn_recv_data+0x114>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d0de      	beq.n	800aa78 <netconn_recv_data+0x64>
    len = ((struct pbuf *)buf)->tot_len;
 800aaba:	891a      	ldrh	r2, [r3, #8]
 800aabc:	e7d5      	b.n	800aa6a <netconn_recv_data+0x56>
  SYS_ARCH_PROTECT(lev);
 800aabe:	f00a ff8b 	bl	80159d8 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800aac2:	2300      	movs	r3, #0
  err = conn->pending_err;
 800aac4:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800aac8:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aaca:	f00a ff91 	bl	80159f0 <sys_arch_unprotect>
      if (err != ERR_OK) {
 800aace:	2d00      	cmp	r5, #0
 800aad0:	d1d3      	bne.n	800aa7a <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800aad2:	7f23      	ldrb	r3, [r4, #28]
 800aad4:	07db      	lsls	r3, r3, #31
 800aad6:	d4dd      	bmi.n	800aa94 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 800aad8:	f06f 0506 	mvn.w	r5, #6
 800aadc:	e7cd      	b.n	800aa7a <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800aade:	4b13      	ldr	r3, [pc, #76]	@ (800ab2c <netconn_recv_data+0x118>)
 800aae0:	f240 2291 	movw	r2, #657	@ 0x291
 800aae4:	4912      	ldr	r1, [pc, #72]	@ (800ab30 <netconn_recv_data+0x11c>)
 800aae6:	4813      	ldr	r0, [pc, #76]	@ (800ab34 <netconn_recv_data+0x120>)
 800aae8:	f00b fce8 	bl	80164bc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	e7ba      	b.n	800aa66 <netconn_recv_data+0x52>
    *err = ERR_ABRT;
 800aaf0:	f06f 050c 	mvn.w	r5, #12
 800aaf4:	e7c1      	b.n	800aa7a <netconn_recv_data+0x66>
 800aaf6:	f06f 050d 	mvn.w	r5, #13
 800aafa:	e7be      	b.n	800aa7a <netconn_recv_data+0x66>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aafc:	4b0b      	ldr	r3, [pc, #44]	@ (800ab2c <netconn_recv_data+0x118>)
 800aafe:	f240 224a 	movw	r2, #586	@ 0x24a
 800ab02:	490d      	ldr	r1, [pc, #52]	@ (800ab38 <netconn_recv_data+0x124>)
 800ab04:	480b      	ldr	r0, [pc, #44]	@ (800ab34 <netconn_recv_data+0x120>)
 800ab06:	f00b fcd9 	bl	80164bc <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ab0a:	f06f 050f 	mvn.w	r5, #15
 800ab0e:	e7b4      	b.n	800aa7a <netconn_recv_data+0x66>
 800ab10:	4b06      	ldr	r3, [pc, #24]	@ (800ab2c <netconn_recv_data+0x118>)
 800ab12:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800ab16:	4909      	ldr	r1, [pc, #36]	@ (800ab3c <netconn_recv_data+0x128>)
 800ab18:	4806      	ldr	r0, [pc, #24]	@ (800ab34 <netconn_recv_data+0x120>)
 800ab1a:	f00b fccf 	bl	80164bc <iprintf>
 800ab1e:	e7f4      	b.n	800ab0a <netconn_recv_data+0xf6>
 800ab20:	08019b9a 	.word	0x08019b9a
 800ab24:	08019b99 	.word	0x08019b99
 800ab28:	08019b98 	.word	0x08019b98
 800ab2c:	08019640 	.word	0x08019640
 800ab30:	080196f4 	.word	0x080196f4
 800ab34:	080187f8 	.word	0x080187f8
 800ab38:	080196d8 	.word	0x080196d8
 800ab3c:	080196b8 	.word	0x080196b8

0800ab40 <netconn_recv_data_tcp>:
{
 800ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	b091      	sub	sp, #68	@ 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ab46:	3010      	adds	r0, #16
{
 800ab48:	460e      	mov	r6, r1
 800ab4a:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ab4c:	f00a fec2 	bl	80158d4 <sys_mbox_valid>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d053      	beq.n	800abfc <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ab54:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800ab58:	7f23      	ldrb	r3, [r4, #28]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	db1c      	blt.n	800ab98 <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ab5e:	463a      	mov	r2, r7
 800ab60:	4631      	mov	r1, r6
 800ab62:	4620      	mov	r0, r4
 800ab64:	f7ff ff56 	bl	800aa14 <netconn_recv_data>
  if (err != ERR_OK) {
 800ab68:	4605      	mov	r5, r0
 800ab6a:	b990      	cbnz	r0, 800ab92 <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ab6c:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 800ab6e:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ab70:	d40e      	bmi.n	800ab90 <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 800ab72:	b39e      	cbz	r6, 800abdc <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ab74:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ab76:	7823      	ldrb	r3, [r4, #0]
 800ab78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d140      	bne.n	800ac02 <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 800ab80:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab82:	4669      	mov	r1, sp
 800ab84:	f104 020c 	add.w	r2, r4, #12
 800ab88:	4823      	ldr	r0, [pc, #140]	@ (800ac18 <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 800ab8a:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab8c:	f001 faee 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 800ab90:	b1de      	cbz	r6, 800abca <netconn_recv_data_tcp+0x8a>
}
 800ab92:	4628      	mov	r0, r5
 800ab94:	b011      	add	sp, #68	@ 0x44
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ab98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab9c:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ab9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aba0:	b11b      	cbz	r3, 800abaa <netconn_recv_data_tcp+0x6a>
 800aba2:	2200      	movs	r2, #0
 800aba4:	2101      	movs	r1, #1
 800aba6:	4620      	mov	r0, r4
 800aba8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800abaa:	6866      	ldr	r6, [r4, #4]
 800abac:	b9c6      	cbnz	r6, 800abe0 <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 800abae:	f00a ff13 	bl	80159d8 <sys_arch_protect>
  err = conn->pending_err;
 800abb2:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800abb6:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800abb8:	f00a ff1a 	bl	80159f0 <sys_arch_unprotect>
        return ERR_RST;
 800abbc:	2d00      	cmp	r5, #0
 800abbe:	bf08      	it	eq
 800abc0:	f06f 050d 	mvneq.w	r5, #13
}
 800abc4:	4628      	mov	r0, r5
 800abc6:	b011      	add	sp, #68	@ 0x44
 800abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 800abca:	06fb      	lsls	r3, r7, #27
 800abcc:	d5e7      	bpl.n	800ab9e <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800abce:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800abd0:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800abd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800abd8:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800abda:	e7da      	b.n	800ab92 <netconn_recv_data_tcp+0x52>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800abdc:	2201      	movs	r2, #1
 800abde:	e7ca      	b.n	800ab76 <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800abe0:	f642 1301 	movw	r3, #10497	@ 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800abe4:	f104 020c 	add.w	r2, r4, #12
 800abe8:	a908      	add	r1, sp, #32
 800abea:	480c      	ldr	r0, [pc, #48]	@ (800ac1c <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 800abec:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 800abf0:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800abf2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800abf6:	f001 fab9 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800abfa:	e7ca      	b.n	800ab92 <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 800abfc:	f06f 050a 	mvn.w	r5, #10
 800ac00:	e7c7      	b.n	800ab92 <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ac02:	4b07      	ldr	r3, [pc, #28]	@ (800ac20 <netconn_recv_data_tcp+0xe0>)
 800ac04:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800ac08:	4906      	ldr	r1, [pc, #24]	@ (800ac24 <netconn_recv_data_tcp+0xe4>)
 800ac0a:	4807      	ldr	r0, [pc, #28]	@ (800ac28 <netconn_recv_data_tcp+0xe8>)
 800ac0c:	f00b fc56 	bl	80164bc <iprintf>
  if (buf == NULL) {
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	d1be      	bne.n	800ab92 <netconn_recv_data_tcp+0x52>
 800ac14:	e7d9      	b.n	800abca <netconn_recv_data_tcp+0x8a>
 800ac16:	bf00      	nop
 800ac18:	0800a5cd 	.word	0x0800a5cd
 800ac1c:	0800b299 	.word	0x0800b299
 800ac20:	08019640 	.word	0x08019640
 800ac24:	08019700 	.word	0x08019700
 800ac28:	080187f8 	.word	0x080187f8

0800ac2c <lwip_recvfrom_udp_raw.constprop.0>:
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	469a      	mov	sl, r3
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ac32:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 800ac34:	b083      	sub	sp, #12
 800ac36:	4615      	mov	r5, r2
 800ac38:	4681      	mov	r9, r0
 800ac3a:	4688      	mov	r8, r1
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d056      	beq.n	800acee <lwip_recvfrom_udp_raw.constprop.0+0xc2>
  buf = sock->lastdata.netbuf;
 800ac40:	6847      	ldr	r7, [r0, #4]
 800ac42:	9701      	str	r7, [sp, #4]
  if (buf == NULL) {
 800ac44:	2f00      	cmp	r7, #0
 800ac46:	d058      	beq.n	800acfa <lwip_recvfrom_udp_raw.constprop.0+0xce>
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ac48:	68eb      	ldr	r3, [r5, #12]
  buflen = buf->p->tot_len;
 800ac4a:	6838      	ldr	r0, [r7, #0]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ac4c:	2b00      	cmp	r3, #0
  buflen = buf->p->tot_len;
 800ac4e:	8906      	ldrh	r6, [r0, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ac50:	dd16      	ble.n	800ac80 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800ac52:	b1ae      	cbz	r6, 800ac80 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800ac54:	2400      	movs	r4, #0
  copied = 0;
 800ac56:	4623      	mov	r3, r4
    if (msg->msg_iov[i].iov_len > len_left) {
 800ac58:	68a9      	ldr	r1, [r5, #8]
    u16_t len_left = (u16_t)(buflen - copied);
 800ac5a:	eba6 0e03 	sub.w	lr, r6, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 800ac5e:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ac62:	f851 1034 	ldr.w	r1, [r1, r4, lsl #3]
    u16_t len_left = (u16_t)(buflen - copied);
 800ac66:	fa1f fe8e 	uxth.w	lr, lr
    if (msg->msg_iov[i].iov_len > len_left) {
 800ac6a:	f8d2 c004 	ldr.w	ip, [r2, #4]
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ac6e:	fa1f f28c 	uxth.w	r2, ip
    if (msg->msg_iov[i].iov_len > len_left) {
 800ac72:	45f4      	cmp	ip, lr
    copied = (u16_t)(copied + copylen);
 800ac74:	eb02 0c03 	add.w	ip, r2, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 800ac78:	d914      	bls.n	800aca4 <lwip_recvfrom_udp_raw.constprop.0+0x78>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ac7a:	4672      	mov	r2, lr
 800ac7c:	f005 ff4a 	bl	8010b14 <pbuf_copy_partial>
  if (msg->msg_name && msg->msg_namelen)
 800ac80:	682a      	ldr	r2, [r5, #0]
 800ac82:	b10a      	cbz	r2, 800ac88 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
 800ac84:	686b      	ldr	r3, [r5, #4]
 800ac86:	b9f3      	cbnz	r3, 800acc6 <lwip_recvfrom_udp_raw.constprop.0+0x9a>
  msg->msg_flags = 0;
 800ac88:	2300      	movs	r3, #0
  if (msg->msg_control) {
 800ac8a:	692a      	ldr	r2, [r5, #16]
  msg->msg_flags = 0;
 800ac8c:	61ab      	str	r3, [r5, #24]
  if (msg->msg_control) {
 800ac8e:	b102      	cbz	r2, 800ac92 <lwip_recvfrom_udp_raw.constprop.0+0x66>
      msg->msg_controllen = 0;
 800ac90:	616b      	str	r3, [r5, #20]
  if ((flags & MSG_PEEK) == 0) {
 800ac92:	f018 0401 	ands.w	r4, r8, #1
 800ac96:	d01d      	beq.n	800acd4 <lwip_recvfrom_udp_raw.constprop.0+0xa8>
  return ERR_OK;
 800ac98:	2000      	movs	r0, #0
    *datagram_len = buflen;
 800ac9a:	f8aa 6000 	strh.w	r6, [sl]
}
 800ac9e:	b003      	add	sp, #12
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    copied = (u16_t)(copied + copylen);
 800aca4:	fa1f fb8c 	uxth.w	fp, ip
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800aca8:	3401      	adds	r4, #1
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800acaa:	f005 ff33 	bl	8010b14 <pbuf_copy_partial>
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800acae:	68e9      	ldr	r1, [r5, #12]
 800acb0:	455e      	cmp	r6, fp
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800acb2:	465b      	mov	r3, fp
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800acb4:	bf94      	ite	ls
 800acb6:	2200      	movls	r2, #0
 800acb8:	2201      	movhi	r2, #1
 800acba:	428c      	cmp	r4, r1
 800acbc:	dae0      	bge.n	800ac80 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	d0de      	beq.n	800ac80 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800acc2:	6838      	ldr	r0, [r7, #0]
 800acc4:	e7c8      	b.n	800ac58 <lwip_recvfrom_udp_raw.constprop.0+0x2c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800acc6:	1d2b      	adds	r3, r5, #4
 800acc8:	89b9      	ldrh	r1, [r7, #12]
 800acca:	f107 0008 	add.w	r0, r7, #8
 800acce:	f7ff fceb 	bl	800a6a8 <lwip_sock_make_addr.constprop.0.isra.0>
 800acd2:	e7d9      	b.n	800ac88 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
    if (buf->p != NULL) {
 800acd4:	6838      	ldr	r0, [r7, #0]
    sock->lastdata.netbuf = NULL;
 800acd6:	f8c9 4004 	str.w	r4, [r9, #4]
 800acda:	b118      	cbz	r0, 800ace4 <lwip_recvfrom_udp_raw.constprop.0+0xb8>
      pbuf_free(buf->p);
 800acdc:	f005 fc3a 	bl	8010554 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ace0:	e9c7 4400 	strd	r4, r4, [r7]
    }
    memp_free(MEMP_NETBUF, buf);
 800ace4:	4639      	mov	r1, r7
 800ace6:	2006      	movs	r0, #6
 800ace8:	f005 f94e 	bl	800ff88 <memp_free>
  if (datagram_len) {
 800acec:	e7d4      	b.n	800ac98 <lwip_recvfrom_udp_raw.constprop.0+0x6c>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800acee:	68d3      	ldr	r3, [r2, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dc2c      	bgt.n	800ad4e <lwip_recvfrom_udp_raw.constprop.0+0x122>
  buf = sock->lastdata.netbuf;
 800acf4:	6847      	ldr	r7, [r0, #4]
 800acf6:	9701      	str	r7, [sp, #4]
  if (buf == NULL) {
 800acf8:	b9a7      	cbnz	r7, 800ad24 <lwip_recvfrom_udp_raw.constprop.0+0xf8>
  if (flags & MSG_DONTWAIT) {
 800acfa:	f3c8 02c0 	ubfx	r2, r8, #3, #1
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800acfe:	f8d9 0000 	ldr.w	r0, [r9]
  if (flags & MSG_DONTWAIT) {
 800ad02:	0092      	lsls	r2, r2, #2
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800ad04:	b1c8      	cbz	r0, 800ad3a <lwip_recvfrom_udp_raw.constprop.0+0x10e>
 800ad06:	7803      	ldrb	r3, [r0, #0]
 800ad08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad0c:	2b10      	cmp	r3, #16
 800ad0e:	d014      	beq.n	800ad3a <lwip_recvfrom_udp_raw.constprop.0+0x10e>
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ad10:	a901      	add	r1, sp, #4
 800ad12:	f7ff fe7f 	bl	800aa14 <netconn_recv_data>
    if (err != ERR_OK) {
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d1c1      	bne.n	800ac9e <lwip_recvfrom_udp_raw.constprop.0+0x72>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ad1a:	9f01      	ldr	r7, [sp, #4]
 800ad1c:	b12f      	cbz	r7, 800ad2a <lwip_recvfrom_udp_raw.constprop.0+0xfe>
    sock->lastdata.netbuf = buf;
 800ad1e:	f8c9 7004 	str.w	r7, [r9, #4]
 800ad22:	e791      	b.n	800ac48 <lwip_recvfrom_udp_raw.constprop.0+0x1c>
  buflen = buf->p->tot_len;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	891e      	ldrh	r6, [r3, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ad28:	e7aa      	b.n	800ac80 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad60 <lwip_recvfrom_udp_raw.constprop.0+0x134>)
 800ad2c:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ad30:	490c      	ldr	r1, [pc, #48]	@ (800ad64 <lwip_recvfrom_udp_raw.constprop.0+0x138>)
 800ad32:	480d      	ldr	r0, [pc, #52]	@ (800ad68 <lwip_recvfrom_udp_raw.constprop.0+0x13c>)
 800ad34:	f00b fbc2 	bl	80164bc <iprintf>
 800ad38:	e7f1      	b.n	800ad1e <lwip_recvfrom_udp_raw.constprop.0+0xf2>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad6c <lwip_recvfrom_udp_raw.constprop.0+0x140>)
 800ad3c:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800ad40:	490b      	ldr	r1, [pc, #44]	@ (800ad70 <lwip_recvfrom_udp_raw.constprop.0+0x144>)
 800ad42:	4809      	ldr	r0, [pc, #36]	@ (800ad68 <lwip_recvfrom_udp_raw.constprop.0+0x13c>)
 800ad44:	f00b fbba 	bl	80164bc <iprintf>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ad48:	f06f 000f 	mvn.w	r0, #15
 800ad4c:	e7a7      	b.n	800ac9e <lwip_recvfrom_udp_raw.constprop.0+0x72>
 800ad4e:	4b04      	ldr	r3, [pc, #16]	@ (800ad60 <lwip_recvfrom_udp_raw.constprop.0+0x134>)
 800ad50:	f240 4249 	movw	r2, #1097	@ 0x449
 800ad54:	4907      	ldr	r1, [pc, #28]	@ (800ad74 <lwip_recvfrom_udp_raw.constprop.0+0x148>)
 800ad56:	4804      	ldr	r0, [pc, #16]	@ (800ad68 <lwip_recvfrom_udp_raw.constprop.0+0x13c>)
 800ad58:	f00b fbb0 	bl	80164bc <iprintf>
 800ad5c:	e7f4      	b.n	800ad48 <lwip_recvfrom_udp_raw.constprop.0+0x11c>
 800ad5e:	bf00      	nop
 800ad60:	080192f0 	.word	0x080192f0
 800ad64:	080196f4 	.word	0x080196f4
 800ad68:	080187f8 	.word	0x080187f8
 800ad6c:	08019640 	.word	0x08019640
 800ad70:	08019750 	.word	0x08019750
 800ad74:	08019724 	.word	0x08019724

0800ad78 <recv_udp>:
{
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800ad82:	4617      	mov	r7, r2
 800ad84:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ad86:	460d      	mov	r5, r1
 800ad88:	b379      	cbz	r1, 800adea <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d043      	beq.n	800ae16 <recv_udp+0x9e>
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ad8e:	6863      	ldr	r3, [r4, #4]
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	d005      	beq.n	800ada0 <recv_udp+0x28>
 800ad94:	4b25      	ldr	r3, [pc, #148]	@ (800ae2c <recv_udp+0xb4>)
 800ad96:	22ee      	movs	r2, #238	@ 0xee
 800ad98:	4925      	ldr	r1, [pc, #148]	@ (800ae30 <recv_udp+0xb8>)
 800ad9a:	4826      	ldr	r0, [pc, #152]	@ (800ae34 <recv_udp+0xbc>)
 800ad9c:	f00b fb8e 	bl	80164bc <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ada0:	f104 0910 	add.w	r9, r4, #16
 800ada4:	4648      	mov	r0, r9
 800ada6:	f00a fd95 	bl	80158d4 <sys_mbox_valid>
 800adaa:	b1c8      	cbz	r0, 800ade0 <recv_udp+0x68>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800adac:	2006      	movs	r0, #6
 800adae:	f005 f8a5 	bl	800fefc <memp_malloc>
  if (buf == NULL) {
 800adb2:	4605      	mov	r5, r0
 800adb4:	b1a0      	cbz	r0, 800ade0 <recv_udp+0x68>
    buf->p = p;
 800adb6:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 800adba:	b106      	cbz	r6, 800adbe <recv_udp+0x46>
 800adbc:	6836      	ldr	r6, [r6, #0]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800adbe:	4629      	mov	r1, r5
    ip_addr_set(&buf->addr, addr);
 800adc0:	60ae      	str	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800adc2:	4648      	mov	r0, r9
    buf->port = port;
 800adc4:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 800adc8:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800adca:	f00a fd49 	bl	8015860 <sys_mbox_trypost>
 800adce:	4601      	mov	r1, r0
 800add0:	b990      	cbnz	r0, 800adf8 <recv_udp+0x80>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800add2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800add4:	b1eb      	cbz	r3, 800ae12 <recv_udp+0x9a>
 800add6:	4632      	mov	r2, r6
 800add8:	4620      	mov	r0, r4
}
 800adda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800adde:	4718      	bx	r3
    pbuf_free(p);
 800ade0:	4638      	mov	r0, r7
}
 800ade2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800ade6:	f005 bbb5 	b.w	8010554 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800adea:	4b10      	ldr	r3, [pc, #64]	@ (800ae2c <recv_udp+0xb4>)
 800adec:	22e5      	movs	r2, #229	@ 0xe5
 800adee:	4912      	ldr	r1, [pc, #72]	@ (800ae38 <recv_udp+0xc0>)
 800adf0:	4810      	ldr	r0, [pc, #64]	@ (800ae34 <recv_udp+0xbc>)
 800adf2:	f00b fb63 	bl	80164bc <iprintf>
 800adf6:	e7c8      	b.n	800ad8a <recv_udp+0x12>
    if (buf->p != NULL) {
 800adf8:	6828      	ldr	r0, [r5, #0]
 800adfa:	b120      	cbz	r0, 800ae06 <recv_udp+0x8e>
      pbuf_free(buf->p);
 800adfc:	f005 fbaa 	bl	8010554 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e9c5 3300 	strd	r3, r3, [r5]
    memp_free(MEMP_NETBUF, buf);
 800ae06:	4629      	mov	r1, r5
 800ae08:	2006      	movs	r0, #6
}
 800ae0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae0e:	f005 b8bb 	b.w	800ff88 <memp_free>
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ae16:	4b05      	ldr	r3, [pc, #20]	@ (800ae2c <recv_udp+0xb4>)
 800ae18:	22e6      	movs	r2, #230	@ 0xe6
 800ae1a:	4908      	ldr	r1, [pc, #32]	@ (800ae3c <recv_udp+0xc4>)
 800ae1c:	4805      	ldr	r0, [pc, #20]	@ (800ae34 <recv_udp+0xbc>)
 800ae1e:	f00b fb4d 	bl	80164bc <iprintf>
    pbuf_free(p);
 800ae22:	4638      	mov	r0, r7
}
 800ae24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800ae28:	f005 bb94 	b.w	8010554 <pbuf_free>
 800ae2c:	08019260 	.word	0x08019260
 800ae30:	080197c0 	.word	0x080197c0
 800ae34:	080187f8 	.word	0x080187f8
 800ae38:	0801977c 	.word	0x0801977c
 800ae3c:	080197a0 	.word	0x080197a0

0800ae40 <netconn_alloc>:
{
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ae44:	2007      	movs	r0, #7
{
 800ae46:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ae48:	f005 f858 	bl	800fefc <memp_malloc>
  if (conn == NULL) {
 800ae4c:	b380      	cbz	r0, 800aeb0 <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 800ae4e:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 800ae52:	2200      	movs	r2, #0
 800ae54:	4604      	mov	r4, r0
  conn->type = t;
 800ae56:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800ae58:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 800ae5a:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 800ae5c:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800ae5e:	d001      	beq.n	800ae64 <netconn_alloc+0x24>
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	d11a      	bne.n	800ae9a <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ae64:	f104 0710 	add.w	r7, r4, #16
 800ae68:	2106      	movs	r1, #6
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	f00a fce0 	bl	8015830 <sys_mbox_new>
 800ae70:	4601      	mov	r1, r0
 800ae72:	b9c8      	cbnz	r0, 800aea8 <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ae74:	f104 000c 	add.w	r0, r4, #12
 800ae78:	f00a fd36 	bl	80158e8 <sys_sem_new>
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	b9d0      	cbnz	r0, 800aeb6 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ae80:	f104 0014 	add.w	r0, r4, #20
 800ae84:	f00a fd2c 	bl	80158e0 <sys_mbox_set_invalid>
  conn->socket       = -1;
 800ae88:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae8c:	4620      	mov	r0, r4
  conn->state        = NETCONN_NONE;
 800ae8e:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 800ae90:	6266      	str	r6, [r4, #36]	@ 0x24
  conn->socket       = -1;
 800ae92:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 800ae94:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 800ae96:	7725      	strb	r5, [r4, #28]
}
 800ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ae9a:	4b09      	ldr	r3, [pc, #36]	@ (800aec0 <netconn_alloc+0x80>)
 800ae9c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800aea0:	4908      	ldr	r1, [pc, #32]	@ (800aec4 <netconn_alloc+0x84>)
 800aea2:	4809      	ldr	r0, [pc, #36]	@ (800aec8 <netconn_alloc+0x88>)
 800aea4:	f00b fb0a 	bl	80164bc <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800aea8:	4621      	mov	r1, r4
 800aeaa:	2007      	movs	r0, #7
 800aeac:	f005 f86c 	bl	800ff88 <memp_free>
    return NULL;
 800aeb0:	2400      	movs	r4, #0
}
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f00a fcc8 	bl	801584c <sys_mbox_free>
    goto free_and_return;
 800aebc:	e7f4      	b.n	800aea8 <netconn_alloc+0x68>
 800aebe:	bf00      	nop
 800aec0:	08019260 	.word	0x08019260
 800aec4:	080197e0 	.word	0x080197e0
 800aec8:	080187f8 	.word	0x080187f8

0800aecc <netconn_free>:
{
 800aecc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800aece:	6843      	ldr	r3, [r0, #4]
{
 800aed0:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800aed2:	b133      	cbz	r3, 800aee2 <netconn_free+0x16>
 800aed4:	4b19      	ldr	r3, [pc, #100]	@ (800af3c <netconn_free+0x70>)
 800aed6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800aeda:	4919      	ldr	r1, [pc, #100]	@ (800af40 <netconn_free+0x74>)
 800aedc:	4819      	ldr	r0, [pc, #100]	@ (800af44 <netconn_free+0x78>)
 800aede:	f00b faed 	bl	80164bc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800aee2:	f104 0010 	add.w	r0, r4, #16
 800aee6:	f00a fcf5 	bl	80158d4 <sys_mbox_valid>
 800aeea:	b990      	cbnz	r0, 800af12 <netconn_free+0x46>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aeec:	f104 0014 	add.w	r0, r4, #20
 800aef0:	f00a fcf0 	bl	80158d4 <sys_mbox_valid>
 800aef4:	b9d0      	cbnz	r0, 800af2c <netconn_free+0x60>
  sys_sem_free(&conn->op_completed);
 800aef6:	f104 050c 	add.w	r5, r4, #12
 800aefa:	4628      	mov	r0, r5
 800aefc:	f00a fd28 	bl	8015950 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800af00:	4628      	mov	r0, r5
 800af02:	f00a fd2f 	bl	8015964 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800af06:	4621      	mov	r1, r4
 800af08:	2007      	movs	r0, #7
}
 800af0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 800af0e:	f005 b83b 	b.w	800ff88 <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800af12:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <netconn_free+0x70>)
 800af14:	f240 3223 	movw	r2, #803	@ 0x323
 800af18:	490b      	ldr	r1, [pc, #44]	@ (800af48 <netconn_free+0x7c>)
 800af1a:	480a      	ldr	r0, [pc, #40]	@ (800af44 <netconn_free+0x78>)
 800af1c:	f00b face 	bl	80164bc <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800af20:	f104 0014 	add.w	r0, r4, #20
 800af24:	f00a fcd6 	bl	80158d4 <sys_mbox_valid>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0e4      	beq.n	800aef6 <netconn_free+0x2a>
 800af2c:	4b03      	ldr	r3, [pc, #12]	@ (800af3c <netconn_free+0x70>)
 800af2e:	f240 3226 	movw	r2, #806	@ 0x326
 800af32:	4906      	ldr	r1, [pc, #24]	@ (800af4c <netconn_free+0x80>)
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <netconn_free+0x78>)
 800af36:	f00b fac1 	bl	80164bc <iprintf>
 800af3a:	e7dc      	b.n	800aef6 <netconn_free+0x2a>
 800af3c:	08019260 	.word	0x08019260
 800af40:	08019808 	.word	0x08019808
 800af44:	080187f8 	.word	0x080187f8
 800af48:	08019838 	.word	0x08019838
 800af4c:	08019874 	.word	0x08019874

0800af50 <accept_function>:
{
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800af52:	2800      	cmp	r0, #0
 800af54:	d066      	beq.n	800b024 <accept_function+0xd4>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800af56:	f100 0714 	add.w	r7, r0, #20
 800af5a:	4604      	mov	r4, r0
 800af5c:	460d      	mov	r5, r1
 800af5e:	4616      	mov	r6, r2
 800af60:	4638      	mov	r0, r7
 800af62:	f00a fcb7 	bl	80158d4 <sys_mbox_valid>
 800af66:	2800      	cmp	r0, #0
 800af68:	d05c      	beq.n	800b024 <accept_function+0xd4>
  if (newpcb == NULL) {
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	d054      	beq.n	800b018 <accept_function+0xc8>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800af6e:	b9be      	cbnz	r6, 800afa0 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 800af70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af72:	7820      	ldrb	r0, [r4, #0]
 800af74:	f7ff ff64 	bl	800ae40 <netconn_alloc>
  if (newconn == NULL) {
 800af78:	4606      	mov	r6, r0
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d03e      	beq.n	800affc <accept_function+0xac>
  newconn->pcb.tcp = newpcb;
 800af7e:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 800af80:	f7fe fda0 	bl	8009ac4 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800af84:	4631      	mov	r1, r6
 800af86:	4638      	mov	r0, r7
 800af88:	f00a fc6a 	bl	8015860 <sys_mbox_trypost>
 800af8c:	4605      	mov	r5, r0
 800af8e:	b978      	cbnz	r0, 800afb0 <accept_function+0x60>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800af90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800af92:	b11b      	cbz	r3, 800af9c <accept_function+0x4c>
 800af94:	4602      	mov	r2, r0
 800af96:	4601      	mov	r1, r0
 800af98:	4620      	mov	r0, r4
 800af9a:	4798      	blx	r3
}
 800af9c:	4628      	mov	r0, r5
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800afa0:	4b25      	ldr	r3, [pc, #148]	@ (800b038 <accept_function+0xe8>)
 800afa2:	f240 222a 	movw	r2, #554	@ 0x22a
 800afa6:	4925      	ldr	r1, [pc, #148]	@ (800b03c <accept_function+0xec>)
 800afa8:	4825      	ldr	r0, [pc, #148]	@ (800b040 <accept_function+0xf0>)
 800afaa:	f00b fa87 	bl	80164bc <iprintf>
 800afae:	e7df      	b.n	800af70 <accept_function+0x20>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800afb0:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 800afb2:	2100      	movs	r1, #0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f006 f899 	bl	80110ec <tcp_arg>
    tcp_recv(pcb, NULL);
 800afba:	4620      	mov	r0, r4
 800afbc:	2100      	movs	r1, #0
 800afbe:	f006 f899 	bl	80110f4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800afc2:	4620      	mov	r0, r4
 800afc4:	2100      	movs	r1, #0
 800afc6:	f006 f8b1 	bl	801112c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800afca:	2200      	movs	r2, #0
 800afcc:	4620      	mov	r0, r4
 800afce:	4611      	mov	r1, r2
 800afd0:	f006 f8ea 	bl	80111a8 <tcp_poll>
    tcp_err(pcb, NULL);
 800afd4:	2100      	movs	r1, #0
 800afd6:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 800afd8:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 800afdc:	f006 f8c2 	bl	8011164 <tcp_err>
    newconn->pcb.tcp = NULL;
 800afe0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 800afe2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800afe4:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800afe6:	f00a fc31 	bl	801584c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800afea:	4620      	mov	r0, r4
 800afec:	f00a fc78 	bl	80158e0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff ff6b 	bl	800aecc <netconn_free>
    return ERR_MEM;
 800aff6:	f04f 35ff 	mov.w	r5, #4294967295
 800affa:	e7cf      	b.n	800af9c <accept_function+0x4c>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800affc:	4911      	ldr	r1, [pc, #68]	@ (800b044 <accept_function+0xf4>)
 800affe:	4638      	mov	r0, r7
 800b000:	f00a fc2e 	bl	8015860 <sys_mbox_trypost>
 800b004:	2800      	cmp	r0, #0
 800b006:	d1f6      	bne.n	800aff6 <accept_function+0xa6>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b008:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0f3      	beq.n	800aff6 <accept_function+0xa6>
 800b00e:	4602      	mov	r2, r0
 800b010:	4601      	mov	r1, r0
 800b012:	4620      	mov	r0, r4
 800b014:	4798      	blx	r3
 800b016:	e7ee      	b.n	800aff6 <accept_function+0xa6>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b018:	490a      	ldr	r1, [pc, #40]	@ (800b044 <accept_function+0xf4>)
 800b01a:	4638      	mov	r0, r7
 800b01c:	f00a fc20 	bl	8015860 <sys_mbox_trypost>
 800b020:	4602      	mov	r2, r0
 800b022:	b110      	cbz	r0, 800b02a <accept_function+0xda>
    return ERR_VAL;
 800b024:	f06f 0505 	mvn.w	r5, #5
 800b028:	e7b8      	b.n	800af9c <accept_function+0x4c>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b02a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0f9      	beq.n	800b024 <accept_function+0xd4>
 800b030:	4601      	mov	r1, r0
 800b032:	4620      	mov	r0, r4
 800b034:	4798      	blx	r3
 800b036:	e7f5      	b.n	800b024 <accept_function+0xd4>
 800b038:	08019260 	.word	0x08019260
 800b03c:	080198b0 	.word	0x080198b0
 800b040:	080187f8 	.word	0x080187f8
 800b044:	08019b9a 	.word	0x08019b9a

0800b048 <netconn_delete.part.0>:
netconn_delete(struct netconn *conn)
 800b048:	b510      	push	{r4, lr}
  if (conn == NULL) {
 800b04a:	4604      	mov	r4, r0
netconn_delete(struct netconn *conn)
 800b04c:	b088      	sub	sp, #32
  if (conn == NULL) {
 800b04e:	b180      	cbz	r0, 800b072 <netconn_delete.part.0+0x2a>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b050:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b052:	f100 020c 	add.w	r2, r0, #12
 800b056:	4669      	mov	r1, sp
 800b058:	4809      	ldr	r0, [pc, #36]	@ (800b080 <netconn_delete.part.0+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 800b05a:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b05c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b060:	f001 f884 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b064:	b108      	cbz	r0, 800b06a <netconn_delete.part.0+0x22>
}
 800b066:	b008      	add	sp, #32
 800b068:	bd10      	pop	{r4, pc}
    return apimsg->err;
 800b06a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 800b06e:	2800      	cmp	r0, #0
 800b070:	d1f9      	bne.n	800b066 <netconn_delete.part.0+0x1e>
    netconn_free(conn);
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff ff2a 	bl	800aecc <netconn_free>
 800b078:	2000      	movs	r0, #0
}
 800b07a:	b008      	add	sp, #32
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800b181 	.word	0x0800b181

0800b084 <netconn_drain>:
{
 800b084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b088:	f100 0710 	add.w	r7, r0, #16
{
 800b08c:	b082      	sub	sp, #8
 800b08e:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b090:	4638      	mov	r0, r7
 800b092:	f00a fc1f 	bl	80158d4 <sys_mbox_valid>
 800b096:	b358      	cbz	r0, 800b0f0 <netconn_drain+0x6c>
 800b098:	ae01      	add	r6, sp, #4
  } else if (msg == &netconn_reset) {
 800b09a:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 800b174 <netconn_drain+0xf0>
  if (msg == &netconn_aborted) {
 800b09e:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800b178 <netconn_drain+0xf4>
  } else if (msg == &netconn_closed) {
 800b0a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 800b17c <netconn_drain+0xf8>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f00a fc07 	bl	80158bc <sys_arch_mbox_tryfetch>
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	d018      	beq.n	800b0e4 <netconn_drain+0x60>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b0b2:	782b      	ldrb	r3, [r5, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b0b4:	9c01      	ldr	r4, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b0b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0ba:	2b10      	cmp	r3, #16
 800b0bc:	d050      	beq.n	800b160 <netconn_drain+0xdc>
  if (buf != NULL) {
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d0f1      	beq.n	800b0a6 <netconn_drain+0x22>
    if (buf->p != NULL) {
 800b0c2:	6820      	ldr	r0, [r4, #0]
 800b0c4:	b120      	cbz	r0, 800b0d0 <netconn_drain+0x4c>
      pbuf_free(buf->p);
 800b0c6:	f005 fa45 	bl	8010554 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e9c4 3300 	strd	r3, r3, [r4]
    memp_free(MEMP_NETBUF, buf);
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	2006      	movs	r0, #6
 800b0d4:	f004 ff58 	bl	800ff88 <memp_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f00a fbee 	bl	80158bc <sys_arch_mbox_tryfetch>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d1e6      	bne.n	800b0b2 <netconn_drain+0x2e>
    sys_mbox_free(&conn->recvmbox);
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f00a fbb1 	bl	801584c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	f00a fbf8 	bl	80158e0 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b0f0:	3514      	adds	r5, #20
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f00a fbee 	bl	80158d4 <sys_mbox_valid>
 800b0f8:	b378      	cbz	r0, 800b15a <netconn_drain+0xd6>
 800b0fa:	ae01      	add	r6, sp, #4
  } else if (msg == &netconn_reset) {
 800b0fc:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 800b174 <netconn_drain+0xf0>
  if (msg == &netconn_aborted) {
 800b100:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800b178 <netconn_drain+0xf4>
  } else if (msg == &netconn_closed) {
 800b104:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800b17c <netconn_drain+0xf8>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	f00a fbd6 	bl	80158bc <sys_arch_mbox_tryfetch>
 800b110:	3001      	adds	r0, #1
 800b112:	d01c      	beq.n	800b14e <netconn_drain+0xca>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b114:	9c01      	ldr	r4, [sp, #4]
  } else if (msg == &netconn_closed) {
 800b116:	4544      	cmp	r4, r8
 800b118:	bf18      	it	ne
 800b11a:	454c      	cmpne	r4, r9
          netconn_drain(newconn);
 800b11c:	4620      	mov	r0, r4
  } else if (msg == &netconn_closed) {
 800b11e:	d0f3      	beq.n	800b108 <netconn_drain+0x84>
 800b120:	eba4 070a 	sub.w	r7, r4, sl
 800b124:	fab7 f787 	clz	r7, r7
 800b128:	097f      	lsrs	r7, r7, #5
 800b12a:	2f00      	cmp	r7, #0
 800b12c:	d1ec      	bne.n	800b108 <netconn_drain+0x84>
          netconn_drain(newconn);
 800b12e:	f7ff ffa9 	bl	800b084 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b132:	6860      	ldr	r0, [r4, #4]
 800b134:	b110      	cbz	r0, 800b13c <netconn_drain+0xb8>
            tcp_abort(newconn->pcb.tcp);
 800b136:	f006 fc91 	bl	8011a5c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b13a:	6067      	str	r7, [r4, #4]
          netconn_free(newconn);
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7ff fec5 	bl	800aecc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b142:	4631      	mov	r1, r6
 800b144:	4628      	mov	r0, r5
 800b146:	f00a fbb9 	bl	80158bc <sys_arch_mbox_tryfetch>
 800b14a:	3001      	adds	r0, #1
 800b14c:	d1e2      	bne.n	800b114 <netconn_drain+0x90>
    sys_mbox_free(&conn->acceptmbox);
 800b14e:	4628      	mov	r0, r5
 800b150:	f00a fb7c 	bl	801584c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b154:	4628      	mov	r0, r5
 800b156:	f00a fbc3 	bl	80158e0 <sys_mbox_set_invalid>
}
 800b15a:	b002      	add	sp, #8
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (msg == &netconn_closed) {
 800b160:	4544      	cmp	r4, r8
 800b162:	bf18      	it	ne
 800b164:	454c      	cmpne	r4, r9
            pbuf_free((struct pbuf *)mem);
 800b166:	4620      	mov	r0, r4
  } else if (msg == &netconn_closed) {
 800b168:	d09d      	beq.n	800b0a6 <netconn_drain+0x22>
 800b16a:	4554      	cmp	r4, sl
 800b16c:	d09b      	beq.n	800b0a6 <netconn_drain+0x22>
            pbuf_free((struct pbuf *)mem);
 800b16e:	f005 f9f1 	bl	8010554 <pbuf_free>
 800b172:	e798      	b.n	800b0a6 <netconn_drain+0x22>
 800b174:	08019b99 	.word	0x08019b99
 800b178:	08019b9a 	.word	0x08019b9a
 800b17c:	08019b98 	.word	0x08019b98

0800b180 <lwip_netconn_do_delconn>:
{
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b188:	b195      	cbz	r5, 800b1b0 <lwip_netconn_do_delconn+0x30>
 800b18a:	7803      	ldrb	r3, [r0, #0]
 800b18c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b190:	2b10      	cmp	r3, #16
 800b192:	d135      	bne.n	800b200 <lwip_netconn_do_delconn+0x80>
  if (((state != NETCONN_NONE) &&
 800b194:	2d02      	cmp	r5, #2
 800b196:	d00b      	beq.n	800b1b0 <lwip_netconn_do_delconn+0x30>
       (state != NETCONN_LISTEN) &&
 800b198:	2d03      	cmp	r5, #3
 800b19a:	d006      	beq.n	800b1aa <lwip_netconn_do_delconn+0x2a>
    msg->err = ERR_INPROGRESS;
 800b19c:	23fb      	movs	r3, #251	@ 0xfb
 800b19e:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b1a0:	300c      	adds	r0, #12
}
 800b1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b1a6:	f00a bbd7 	b.w	8015958 <sys_sem_valid>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b1aa:	7f03      	ldrb	r3, [r0, #28]
 800b1ac:	075b      	lsls	r3, r3, #29
 800b1ae:	d5f5      	bpl.n	800b19c <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800b1b4:	f7ff ff66 	bl	800b084 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800b1b8:	6820      	ldr	r0, [r4, #0]
 800b1ba:	6842      	ldr	r2, [r0, #4]
 800b1bc:	b16a      	cbz	r2, 800b1da <lwip_netconn_do_delconn+0x5a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b1be:	7803      	ldrb	r3, [r0, #0]
 800b1c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1c4:	2b10      	cmp	r3, #16
 800b1c6:	d024      	beq.n	800b212 <lwip_netconn_do_delconn+0x92>
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	d104      	bne.n	800b1d6 <lwip_netconn_do_delconn+0x56>
          udp_remove(msg->conn->pcb.udp);
 800b1cc:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 800b1ce:	6255      	str	r5, [r2, #36]	@ 0x24
          udp_remove(msg->conn->pcb.udp);
 800b1d0:	f00a fa42 	bl	8015658 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b1da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0df      	beq.n	800b1a0 <lwip_netconn_do_delconn+0x20>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0d8      	beq.n	800b1a0 <lwip_netconn_do_delconn+0x20>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b1f4:	6820      	ldr	r0, [r4, #0]
}
 800b1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b1fa:	300c      	adds	r0, #12
 800b1fc:	f00a bbac 	b.w	8015958 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b200:	4b1f      	ldr	r3, [pc, #124]	@ (800b280 <lwip_netconn_do_delconn+0x100>)
 800b202:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b206:	491f      	ldr	r1, [pc, #124]	@ (800b284 <lwip_netconn_do_delconn+0x104>)
 800b208:	481f      	ldr	r0, [pc, #124]	@ (800b288 <lwip_netconn_do_delconn+0x108>)
 800b20a:	f00b f957 	bl	80164bc <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b20e:	6820      	ldr	r0, [r4, #0]
 800b210:	e7c0      	b.n	800b194 <lwip_netconn_do_delconn+0x14>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b212:	6a03      	ldr	r3, [r0, #32]
 800b214:	b13b      	cbz	r3, 800b226 <lwip_netconn_do_delconn+0xa6>
 800b216:	4b1a      	ldr	r3, [pc, #104]	@ (800b280 <lwip_netconn_do_delconn+0x100>)
 800b218:	f240 4294 	movw	r2, #1172	@ 0x494
 800b21c:	491b      	ldr	r1, [pc, #108]	@ (800b28c <lwip_netconn_do_delconn+0x10c>)
 800b21e:	481a      	ldr	r0, [pc, #104]	@ (800b288 <lwip_netconn_do_delconn+0x108>)
 800b220:	f00b f94c 	bl	80164bc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b228:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b22a:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800b22c:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b22e:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800b230:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b232:	f7fe fe55 	bl	8009ee0 <lwip_netconn_do_close_internal>
 800b236:	b188      	cbz	r0, 800b25c <lwip_netconn_do_delconn+0xdc>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d10e      	bne.n	800b25e <lwip_netconn_do_delconn+0xde>
            UNLOCK_TCPIP_CORE();
 800b240:	4813      	ldr	r0, [pc, #76]	@ (800b290 <lwip_netconn_do_delconn+0x110>)
 800b242:	f00a fbaf 	bl	80159a4 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	2100      	movs	r1, #0
 800b24a:	300c      	adds	r0, #12
 800b24c:	f00a fb60 	bl	8015910 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b250:	480f      	ldr	r0, [pc, #60]	@ (800b290 <lwip_netconn_do_delconn+0x110>)
 800b252:	f00a fba1 	bl	8015998 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	b943      	cbnz	r3, 800b26e <lwip_netconn_do_delconn+0xee>
}
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b25e:	4b08      	ldr	r3, [pc, #32]	@ (800b280 <lwip_netconn_do_delconn+0x100>)
 800b260:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b264:	490b      	ldr	r1, [pc, #44]	@ (800b294 <lwip_netconn_do_delconn+0x114>)
 800b266:	4808      	ldr	r0, [pc, #32]	@ (800b288 <lwip_netconn_do_delconn+0x108>)
 800b268:	f00b f928 	bl	80164bc <iprintf>
 800b26c:	e7e8      	b.n	800b240 <lwip_netconn_do_delconn+0xc0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b26e:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <lwip_netconn_do_delconn+0x100>)
 800b270:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b274:	4907      	ldr	r1, [pc, #28]	@ (800b294 <lwip_netconn_do_delconn+0x114>)
 800b276:	4804      	ldr	r0, [pc, #16]	@ (800b288 <lwip_netconn_do_delconn+0x108>)
}
 800b278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b27c:	f00b b91e 	b.w	80164bc <iprintf>
 800b280:	08019260 	.word	0x08019260
 800b284:	080198d8 	.word	0x080198d8
 800b288:	080187f8 	.word	0x080187f8
 800b28c:	08019610 	.word	0x08019610
 800b290:	20008ec8 	.word	0x20008ec8
 800b294:	08019578 	.word	0x08019578

0800b298 <lwip_netconn_do_close>:
{
 800b298:	b510      	push	{r4, lr}
 800b29a:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800b29c:	6800      	ldr	r0, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 800b29e:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800b2a0:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800b2a2:	b123      	cbz	r3, 800b2ae <lwip_netconn_do_close+0x16>
 800b2a4:	7803      	ldrb	r3, [r0, #0]
 800b2a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d002      	beq.n	800b2b4 <lwip_netconn_do_close+0x1c>
      msg->err = ERR_CONN;
 800b2ae:	23f5      	movs	r3, #245	@ 0xf5
 800b2b0:	7123      	strb	r3, [r4, #4]
}
 800b2b2:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b2b4:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d03b      	beq.n	800b332 <lwip_netconn_do_close+0x9a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b2ba:	1e91      	subs	r1, r2, #2
 800b2bc:	2901      	cmp	r1, #1
 800b2be:	d9f6      	bls.n	800b2ae <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800b2c0:	2a01      	cmp	r2, #1
 800b2c2:	d03a      	beq.n	800b33a <lwip_netconn_do_close+0xa2>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b2c4:	07db      	lsls	r3, r3, #31
 800b2c6:	d43b      	bmi.n	800b340 <lwip_netconn_do_close+0xa8>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2c8:	6a03      	ldr	r3, [r0, #32]
 800b2ca:	b13b      	cbz	r3, 800b2dc <lwip_netconn_do_close+0x44>
 800b2cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b348 <lwip_netconn_do_close+0xb0>)
 800b2ce:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b2d2:	491e      	ldr	r1, [pc, #120]	@ (800b34c <lwip_netconn_do_close+0xb4>)
 800b2d4:	481e      	ldr	r0, [pc, #120]	@ (800b350 <lwip_netconn_do_close+0xb8>)
 800b2d6:	f00b f8f1 	bl	80164bc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b2da:	6820      	ldr	r0, [r4, #0]
 800b2dc:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b2de:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 800b2e0:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 800b2e2:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b2e4:	f7fe fdfc 	bl	8009ee0 <lwip_netconn_do_close_internal>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d0e2      	beq.n	800b2b2 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	d006      	beq.n	800b302 <lwip_netconn_do_close+0x6a>
 800b2f4:	4b14      	ldr	r3, [pc, #80]	@ (800b348 <lwip_netconn_do_close+0xb0>)
 800b2f6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b2fa:	4916      	ldr	r1, [pc, #88]	@ (800b354 <lwip_netconn_do_close+0xbc>)
 800b2fc:	4814      	ldr	r0, [pc, #80]	@ (800b350 <lwip_netconn_do_close+0xb8>)
 800b2fe:	f00b f8dd 	bl	80164bc <iprintf>
        UNLOCK_TCPIP_CORE();
 800b302:	4815      	ldr	r0, [pc, #84]	@ (800b358 <lwip_netconn_do_close+0xc0>)
 800b304:	f00a fb4e 	bl	80159a4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	2100      	movs	r1, #0
 800b30c:	300c      	adds	r0, #12
 800b30e:	f00a faff 	bl	8015910 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b312:	4811      	ldr	r0, [pc, #68]	@ (800b358 <lwip_netconn_do_close+0xc0>)
 800b314:	f00a fb40 	bl	8015998 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0c8      	beq.n	800b2b2 <lwip_netconn_do_close+0x1a>
 800b320:	4b09      	ldr	r3, [pc, #36]	@ (800b348 <lwip_netconn_do_close+0xb0>)
 800b322:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b326:	490b      	ldr	r1, [pc, #44]	@ (800b354 <lwip_netconn_do_close+0xbc>)
 800b328:	4809      	ldr	r0, [pc, #36]	@ (800b350 <lwip_netconn_do_close+0xb8>)
}
 800b32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b32e:	f00b b8c5 	b.w	80164bc <iprintf>
    if (state == NETCONN_CONNECT) {
 800b332:	2a03      	cmp	r2, #3
 800b334:	d0bb      	beq.n	800b2ae <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800b336:	2a01      	cmp	r2, #1
 800b338:	d102      	bne.n	800b340 <lwip_netconn_do_close+0xa8>
      msg->err = ERR_INPROGRESS;
 800b33a:	23fb      	movs	r3, #251	@ 0xfb
 800b33c:	7123      	strb	r3, [r4, #4]
}
 800b33e:	bd10      	pop	{r4, pc}
        netconn_drain(msg->conn);
 800b340:	f7ff fea0 	bl	800b084 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b344:	6820      	ldr	r0, [r4, #0]
 800b346:	e7bf      	b.n	800b2c8 <lwip_netconn_do_close+0x30>
 800b348:	08019260 	.word	0x08019260
 800b34c:	08019610 	.word	0x08019610
 800b350:	080187f8 	.word	0x080187f8
 800b354:	08019578 	.word	0x08019578
 800b358:	20008ec8 	.word	0x20008ec8

0800b35c <free_socket>:
{
 800b35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35e:	4604      	mov	r4, r0
 800b360:	b089      	sub	sp, #36	@ 0x24
 800b362:	460d      	mov	r5, r1
  SYS_ARCH_PROTECT(lev);
 800b364:	f00a fb38 	bl	80159d8 <sys_arch_protect>
  sock->conn = NULL;
 800b368:	2300      	movs	r3, #0
  *conn = sock->conn;
 800b36a:	e9d4 7600 	ldrd	r7, r6, [r4]
  sock->conn = NULL;
 800b36e:	e9c4 3300 	strd	r3, r3, [r4]
  SYS_ARCH_UNPROTECT(lev);
 800b372:	f00a fb3d 	bl	80159f0 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 800b376:	b11e      	cbz	r6, 800b380 <free_socket+0x24>
    if (is_tcp) {
 800b378:	b1d5      	cbz	r5, 800b3b0 <free_socket+0x54>
      pbuf_free(lastdata->pbuf);
 800b37a:	4630      	mov	r0, r6
 800b37c:	f005 f8ea 	bl	8010554 <pbuf_free>
  if (conn != NULL) {
 800b380:	b1a7      	cbz	r7, 800b3ac <free_socket+0x50>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b382:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b384:	f107 020c 	add.w	r2, r7, #12
 800b388:	4669      	mov	r1, sp
 800b38a:	480f      	ldr	r0, [pc, #60]	@ (800b3c8 <free_socket+0x6c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b38c:	f88d 3009 	strb.w	r3, [sp, #9]
  API_MSG_VAR_REF(msg).conn = conn;
 800b390:	9700      	str	r7, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b392:	f000 feeb 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err != ERR_OK) {
 800b396:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b39a:	4318      	orrs	r0, r3
 800b39c:	b240      	sxtb	r0, r0
 800b39e:	b928      	cbnz	r0, 800b3ac <free_socket+0x50>
    netconn_free(conn);
 800b3a0:	4638      	mov	r0, r7
}
 800b3a2:	b009      	add	sp, #36	@ 0x24
 800b3a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3a8:	f7ff bd90 	b.w	800aecc <netconn_free>
 800b3ac:	b009      	add	sp, #36	@ 0x24
 800b3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (buf->p != NULL) {
 800b3b0:	6830      	ldr	r0, [r6, #0]
 800b3b2:	b118      	cbz	r0, 800b3bc <free_socket+0x60>
      pbuf_free(buf->p);
 800b3b4:	f005 f8ce 	bl	8010554 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b3b8:	e9c6 5500 	strd	r5, r5, [r6]
    memp_free(MEMP_NETBUF, buf);
 800b3bc:	4631      	mov	r1, r6
 800b3be:	2006      	movs	r0, #6
 800b3c0:	f004 fde2 	bl	800ff88 <memp_free>
  }
}
 800b3c4:	e7dc      	b.n	800b380 <free_socket+0x24>
 800b3c6:	bf00      	nop
 800b3c8:	0800b181 	.word	0x0800b181

0800b3cc <netconn_new_with_proto_and_callback>:
{
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	f7ff fd34 	bl	800ae40 <netconn_alloc>
  if (conn != NULL) {
 800b3d8:	b398      	cbz	r0, 800b442 <netconn_new_with_proto_and_callback+0x76>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b3da:	f100 060c 	add.w	r6, r0, #12
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4669      	mov	r1, sp
 800b3e2:	4823      	ldr	r0, [pc, #140]	@ (800b470 <netconn_new_with_proto_and_callback+0xa4>)
 800b3e4:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b3e6:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 800b3ea:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b3ec:	f000 febe 	bl	800c16c <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 800b3f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3f4:	4318      	orrs	r0, r3
 800b3f6:	b240      	sxtb	r0, r0
 800b3f8:	b910      	cbnz	r0, 800b400 <netconn_new_with_proto_and_callback+0x34>
}
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	b008      	add	sp, #32
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b400:	6863      	ldr	r3, [r4, #4]
 800b402:	b12b      	cbz	r3, 800b410 <netconn_new_with_proto_and_callback+0x44>
 800b404:	4b1b      	ldr	r3, [pc, #108]	@ (800b474 <netconn_new_with_proto_and_callback+0xa8>)
 800b406:	22a3      	movs	r2, #163	@ 0xa3
 800b408:	491b      	ldr	r1, [pc, #108]	@ (800b478 <netconn_new_with_proto_and_callback+0xac>)
 800b40a:	481c      	ldr	r0, [pc, #112]	@ (800b47c <netconn_new_with_proto_and_callback+0xb0>)
 800b40c:	f00b f856 	bl	80164bc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b410:	f104 0510 	add.w	r5, r4, #16
 800b414:	4628      	mov	r0, r5
 800b416:	f00a fa5d 	bl	80158d4 <sys_mbox_valid>
 800b41a:	b310      	cbz	r0, 800b462 <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b41c:	f104 0014 	add.w	r0, r4, #20
 800b420:	f00a fa58 	bl	80158d4 <sys_mbox_valid>
 800b424:	b9b0      	cbnz	r0, 800b454 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b426:	4630      	mov	r0, r6
 800b428:	f00a fa96 	bl	8015958 <sys_sem_valid>
 800b42c:	b158      	cbz	r0, 800b446 <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 800b42e:	4630      	mov	r0, r6
 800b430:	f00a fa8e 	bl	8015950 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800b434:	4628      	mov	r0, r5
 800b436:	f00a fa09 	bl	801584c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b43a:	4621      	mov	r1, r4
 800b43c:	2007      	movs	r0, #7
 800b43e:	f004 fda3 	bl	800ff88 <memp_free>
      return NULL;
 800b442:	2400      	movs	r4, #0
 800b444:	e7d9      	b.n	800b3fa <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b446:	4b0b      	ldr	r3, [pc, #44]	@ (800b474 <netconn_new_with_proto_and_callback+0xa8>)
 800b448:	22a9      	movs	r2, #169	@ 0xa9
 800b44a:	490d      	ldr	r1, [pc, #52]	@ (800b480 <netconn_new_with_proto_and_callback+0xb4>)
 800b44c:	480b      	ldr	r0, [pc, #44]	@ (800b47c <netconn_new_with_proto_and_callback+0xb0>)
 800b44e:	f00b f835 	bl	80164bc <iprintf>
 800b452:	e7ec      	b.n	800b42e <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b454:	4b07      	ldr	r3, [pc, #28]	@ (800b474 <netconn_new_with_proto_and_callback+0xa8>)
 800b456:	22a6      	movs	r2, #166	@ 0xa6
 800b458:	490a      	ldr	r1, [pc, #40]	@ (800b484 <netconn_new_with_proto_and_callback+0xb8>)
 800b45a:	4808      	ldr	r0, [pc, #32]	@ (800b47c <netconn_new_with_proto_and_callback+0xb0>)
 800b45c:	f00b f82e 	bl	80164bc <iprintf>
 800b460:	e7e1      	b.n	800b426 <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b462:	4b04      	ldr	r3, [pc, #16]	@ (800b474 <netconn_new_with_proto_and_callback+0xa8>)
 800b464:	22a4      	movs	r2, #164	@ 0xa4
 800b466:	4908      	ldr	r1, [pc, #32]	@ (800b488 <netconn_new_with_proto_and_callback+0xbc>)
 800b468:	4804      	ldr	r0, [pc, #16]	@ (800b47c <netconn_new_with_proto_and_callback+0xb0>)
 800b46a:	f00b f827 	bl	80164bc <iprintf>
 800b46e:	e7d5      	b.n	800b41c <netconn_new_with_proto_and_callback+0x50>
 800b470:	0800a641 	.word	0x0800a641
 800b474:	08019640 	.word	0x08019640
 800b478:	080198ec 	.word	0x080198ec
 800b47c:	080187f8 	.word	0x080187f8
 800b480:	0801994c 	.word	0x0801994c
 800b484:	08019928 	.word	0x08019928
 800b488:	08019910 	.word	0x08019910

0800b48c <netconn_accept>:
{
 800b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48e:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800b490:	2900      	cmp	r1, #0
 800b492:	d04f      	beq.n	800b534 <netconn_accept+0xa8>
  *new_conn = NULL;
 800b494:	2700      	movs	r7, #0
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d03f      	beq.n	800b520 <netconn_accept+0x94>
  SYS_ARCH_PROTECT(lev);
 800b4a0:	f00a fa9a 	bl	80159d8 <sys_arch_protect>
  err = conn->pending_err;
 800b4a4:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 800b4a8:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b4aa:	f00a faa1 	bl	80159f0 <sys_arch_unprotect>
  if (err != ERR_OK) {
 800b4ae:	b116      	cbz	r6, 800b4b6 <netconn_accept+0x2a>
}
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	b003      	add	sp, #12
 800b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800b4b6:	f104 0714 	add.w	r7, r4, #20
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	f00a fa0a 	bl	80158d4 <sys_mbox_valid>
 800b4c0:	b358      	cbz	r0, 800b51a <netconn_accept+0x8e>
 800b4c2:	7f23      	ldrb	r3, [r4, #28]
 800b4c4:	07da      	lsls	r2, r3, #31
 800b4c6:	d428      	bmi.n	800b51a <netconn_accept+0x8e>
  if (netconn_is_nonblocking(conn)) {
 800b4c8:	079b      	lsls	r3, r3, #30
 800b4ca:	d51a      	bpl.n	800b502 <netconn_accept+0x76>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800b4cc:	a901      	add	r1, sp, #4
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f00a f9f4 	bl	80158bc <sys_arch_mbox_tryfetch>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d035      	beq.n	800b544 <netconn_accept+0xb8>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b4d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4da:	b11b      	cbz	r3, 800b4e4 <netconn_accept+0x58>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800b4e4:	9b01      	ldr	r3, [sp, #4]
  if (msg == &netconn_aborted) {
 800b4e6:	4a19      	ldr	r2, [pc, #100]	@ (800b54c <netconn_accept+0xc0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d010      	beq.n	800b50e <netconn_accept+0x82>
  } else if (msg == &netconn_reset) {
 800b4ec:	4a18      	ldr	r2, [pc, #96]	@ (800b550 <netconn_accept+0xc4>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d010      	beq.n	800b514 <netconn_accept+0x88>
  } else if (msg == &netconn_closed) {
 800b4f2:	4a18      	ldr	r2, [pc, #96]	@ (800b554 <netconn_accept+0xc8>)
  if (accept_ptr == NULL) {
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d010      	beq.n	800b51a <netconn_accept+0x8e>
 800b4f8:	b17b      	cbz	r3, 800b51a <netconn_accept+0x8e>
}
 800b4fa:	4630      	mov	r0, r6
  *new_conn = newconn;
 800b4fc:	602b      	str	r3, [r5, #0]
}
 800b4fe:	b003      	add	sp, #12
 800b500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800b502:	4632      	mov	r2, r6
 800b504:	4638      	mov	r0, r7
 800b506:	a901      	add	r1, sp, #4
 800b508:	f00a f9ba 	bl	8015880 <sys_arch_mbox_fetch>
 800b50c:	e7e4      	b.n	800b4d8 <netconn_accept+0x4c>
    *err = ERR_ABRT;
 800b50e:	f06f 060c 	mvn.w	r6, #12
 800b512:	e7cd      	b.n	800b4b0 <netconn_accept+0x24>
    *err = ERR_RST;
 800b514:	f06f 060d 	mvn.w	r6, #13
 800b518:	e7ca      	b.n	800b4b0 <netconn_accept+0x24>
    return ERR_CLSD;
 800b51a:	f06f 060e 	mvn.w	r6, #14
 800b51e:	e7c7      	b.n	800b4b0 <netconn_accept+0x24>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800b520:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <netconn_accept+0xcc>)
 800b522:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800b526:	490d      	ldr	r1, [pc, #52]	@ (800b55c <netconn_accept+0xd0>)
 800b528:	480d      	ldr	r0, [pc, #52]	@ (800b560 <netconn_accept+0xd4>)
 800b52a:	f00a ffc7 	bl	80164bc <iprintf>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800b52e:	f06f 060f 	mvn.w	r6, #15
 800b532:	e7bd      	b.n	800b4b0 <netconn_accept+0x24>
 800b534:	4b08      	ldr	r3, [pc, #32]	@ (800b558 <netconn_accept+0xcc>)
 800b536:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b53a:	490a      	ldr	r1, [pc, #40]	@ (800b564 <netconn_accept+0xd8>)
 800b53c:	4808      	ldr	r0, [pc, #32]	@ (800b560 <netconn_accept+0xd4>)
 800b53e:	f00a ffbd 	bl	80164bc <iprintf>
 800b542:	e7f4      	b.n	800b52e <netconn_accept+0xa2>
      return ERR_WOULDBLOCK;
 800b544:	f06f 0606 	mvn.w	r6, #6
 800b548:	e7b2      	b.n	800b4b0 <netconn_accept+0x24>
 800b54a:	bf00      	nop
 800b54c:	08019b9a 	.word	0x08019b9a
 800b550:	08019b99 	.word	0x08019b99
 800b554:	08019b98 	.word	0x08019b98
 800b558:	08019640 	.word	0x08019640
 800b55c:	08019a04 	.word	0x08019a04
 800b560:	080187f8 	.word	0x080187f8
 800b564:	080199e4 	.word	0x080199e4

0800b568 <netconn_tcp_recvd>:
{
 800b568:	b510      	push	{r4, lr}
 800b56a:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b56c:	b198      	cbz	r0, 800b596 <netconn_tcp_recvd+0x2e>
 800b56e:	7802      	ldrb	r2, [r0, #0]
 800b570:	4603      	mov	r3, r0
 800b572:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800b576:	2a10      	cmp	r2, #16
 800b578:	d10d      	bne.n	800b596 <netconn_tcp_recvd+0x2e>
  msg->conn = conn;
 800b57a:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b57c:	f100 020c 	add.w	r2, r0, #12
 800b580:	4669      	mov	r1, sp
 800b582:	480a      	ldr	r0, [pc, #40]	@ (800b5ac <netconn_tcp_recvd+0x44>)
  msg->conn = conn;
 800b584:	9300      	str	r3, [sp, #0]
  msg->msg.r.len = len;
 800b586:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b588:	f000 fdf0 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b58c:	b908      	cbnz	r0, 800b592 <netconn_tcp_recvd+0x2a>
    return apimsg->err;
 800b58e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800b592:	b008      	add	sp, #32
 800b594:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b596:	4b06      	ldr	r3, [pc, #24]	@ (800b5b0 <netconn_tcp_recvd+0x48>)
 800b598:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800b59c:	4905      	ldr	r1, [pc, #20]	@ (800b5b4 <netconn_tcp_recvd+0x4c>)
 800b59e:	4806      	ldr	r0, [pc, #24]	@ (800b5b8 <netconn_tcp_recvd+0x50>)
 800b5a0:	f00a ff8c 	bl	80164bc <iprintf>
 800b5a4:	f06f 000f 	mvn.w	r0, #15
 800b5a8:	e7f3      	b.n	800b592 <netconn_tcp_recvd+0x2a>
 800b5aa:	bf00      	nop
 800b5ac:	0800a5cd 	.word	0x0800a5cd
 800b5b0:	08019640 	.word	0x08019640
 800b5b4:	08019700 	.word	0x08019700
 800b5b8:	080187f8 	.word	0x080187f8

0800b5bc <lwip_recv_tcp>:
{
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	469a      	mov	sl, r3
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b5c2:	6803      	ldr	r3, [r0, #0]
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b5c4:	2a00      	cmp	r2, #0
{
 800b5c6:	b085      	sub	sp, #20
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b5c8:	781b      	ldrb	r3, [r3, #0]
{
 800b5ca:	4681      	mov	r9, r0
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b5cc:	bfac      	ite	ge
 800b5ce:	4616      	movge	r6, r2
 800b5d0:	f06f 4600 	mvnlt.w	r6, #2147483648	@ 0x80000000
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b5d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
{
 800b5d8:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b5da:	2b10      	cmp	r3, #16
 800b5dc:	d006      	beq.n	800b5ec <lwip_recv_tcp+0x30>
 800b5de:	4b55      	ldr	r3, [pc, #340]	@ (800b734 <lwip_recv_tcp+0x178>)
 800b5e0:	f240 329f 	movw	r2, #927	@ 0x39f
 800b5e4:	4954      	ldr	r1, [pc, #336]	@ (800b738 <lwip_recv_tcp+0x17c>)
 800b5e6:	4855      	ldr	r0, [pc, #340]	@ (800b73c <lwip_recv_tcp+0x180>)
 800b5e8:	f00a ff68 	bl	80164bc <iprintf>
    apiflags |= NETCONN_DONTBLOCK;
 800b5ec:	f01a 0f08 	tst.w	sl, #8
    if (sock->lastdata.pbuf) {
 800b5f0:	f8d9 4004 	ldr.w	r4, [r9, #4]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b5f4:	f04f 0800 	mov.w	r8, #0
    apiflags |= NETCONN_DONTBLOCK;
 800b5f8:	bf0c      	ite	eq
 800b5fa:	2208      	moveq	r2, #8
 800b5fc:	220c      	movne	r2, #12
    if (sock->lastdata.pbuf) {
 800b5fe:	b384      	cbz	r4, 800b662 <lwip_recv_tcp+0xa6>
      p = sock->lastdata.pbuf;
 800b600:	9403      	str	r4, [sp, #12]
    if (recv_left > p->tot_len) {
 800b602:	8925      	ldrh	r5, [r4, #8]
 800b604:	42b5      	cmp	r5, r6
 800b606:	462f      	mov	r7, r5
 800b608:	db01      	blt.n	800b60e <lwip_recv_tcp+0x52>
      copylen = (u16_t)recv_left;
 800b60a:	b2b5      	uxth	r5, r6
 800b60c:	4637      	mov	r7, r6
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b60e:	9901      	ldr	r1, [sp, #4]
 800b610:	2300      	movs	r3, #0
 800b612:	462a      	mov	r2, r5
 800b614:	4620      	mov	r0, r4
 800b616:	4441      	add	r1, r8
    if (recvd + copylen < recvd) {
 800b618:	eb08 0b07 	add.w	fp, r8, r7
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b61c:	f005 fa7a 	bl	8010b14 <pbuf_copy_partial>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b620:	42be      	cmp	r6, r7
 800b622:	db31      	blt.n	800b688 <lwip_recv_tcp+0xcc>
    if ((flags & MSG_PEEK) == 0) {
 800b624:	f01a 0f01 	tst.w	sl, #1
 800b628:	d006      	beq.n	800b638 <lwip_recv_tcp+0x7c>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b62a:	f1bb 0f00 	cmp.w	fp, #0
 800b62e:	d041      	beq.n	800b6b4 <lwip_recv_tcp+0xf8>
}
 800b630:	4658      	mov	r0, fp
 800b632:	b005      	add	sp, #20
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b638:	8923      	ldrh	r3, [r4, #8]
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	d33d      	bcc.n	800b6ba <lwip_recv_tcp+0xfe>
      if (p->tot_len - copylen > 0) {
 800b63e:	42bb      	cmp	r3, r7
 800b640:	dd2a      	ble.n	800b698 <lwip_recv_tcp+0xdc>
    recv_left -= copylen;
 800b642:	1bf6      	subs	r6, r6, r7
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b644:	4629      	mov	r1, r5
 800b646:	4620      	mov	r0, r4
 800b648:	f005 f8f4 	bl	8010834 <pbuf_free_header>
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b64c:	2e00      	cmp	r6, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b64e:	f04f 021c 	mov.w	r2, #28
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b652:	f8c9 0004 	str.w	r0, [r9, #4]
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b656:	dd2a      	ble.n	800b6ae <lwip_recv_tcp+0xf2>
    if (sock->lastdata.pbuf) {
 800b658:	f8d9 4004 	ldr.w	r4, [r9, #4]
    if (recvd + copylen < recvd) {
 800b65c:	46d8      	mov	r8, fp
    if (sock->lastdata.pbuf) {
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d1ce      	bne.n	800b600 <lwip_recv_tcp+0x44>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b662:	f8d9 0000 	ldr.w	r0, [r9]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b666:	2800      	cmp	r0, #0
 800b668:	d038      	beq.n	800b6dc <lwip_recv_tcp+0x120>
 800b66a:	7803      	ldrb	r3, [r0, #0]
 800b66c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b670:	2b10      	cmp	r3, #16
 800b672:	d133      	bne.n	800b6dc <lwip_recv_tcp+0x120>
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800b674:	a903      	add	r1, sp, #12
 800b676:	f7ff fa63 	bl	800ab40 <netconn_recv_data_tcp>
      if (err != ERR_OK) {
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d154      	bne.n	800b728 <lwip_recv_tcp+0x16c>
      LWIP_ASSERT("p != NULL", p != NULL);
 800b67e:	9c03      	ldr	r4, [sp, #12]
 800b680:	b324      	cbz	r4, 800b6cc <lwip_recv_tcp+0x110>
      sock->lastdata.pbuf = p;
 800b682:	f8c9 4004 	str.w	r4, [r9, #4]
 800b686:	e7bc      	b.n	800b602 <lwip_recv_tcp+0x46>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b688:	4b2a      	ldr	r3, [pc, #168]	@ (800b734 <lwip_recv_tcp+0x178>)
 800b68a:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800b68e:	492c      	ldr	r1, [pc, #176]	@ (800b740 <lwip_recv_tcp+0x184>)
 800b690:	482a      	ldr	r0, [pc, #168]	@ (800b73c <lwip_recv_tcp+0x180>)
 800b692:	f00a ff13 	bl	80164bc <iprintf>
 800b696:	e7c5      	b.n	800b624 <lwip_recv_tcp+0x68>
        sock->lastdata.pbuf = NULL;
 800b698:	2300      	movs	r3, #0
    recv_left -= copylen;
 800b69a:	1bf6      	subs	r6, r6, r7
        pbuf_free(p);
 800b69c:	4620      	mov	r0, r4
        sock->lastdata.pbuf = NULL;
 800b69e:	f8c9 3004 	str.w	r3, [r9, #4]
        pbuf_free(p);
 800b6a2:	f004 ff57 	bl	8010554 <pbuf_free>
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b6a6:	2e00      	cmp	r6, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b6a8:	f04f 021c 	mov.w	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b6ac:	dcd4      	bgt.n	800b658 <lwip_recv_tcp+0x9c>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b6ae:	f1bb 0f00 	cmp.w	fp, #0
 800b6b2:	d123      	bne.n	800b6fc <lwip_recv_tcp+0x140>
 800b6b4:	f04f 0b00 	mov.w	fp, #0
 800b6b8:	e7ba      	b.n	800b630 <lwip_recv_tcp+0x74>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b6ba:	4b1e      	ldr	r3, [pc, #120]	@ (800b734 <lwip_recv_tcp+0x178>)
 800b6bc:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800b6c0:	4920      	ldr	r1, [pc, #128]	@ (800b744 <lwip_recv_tcp+0x188>)
 800b6c2:	481e      	ldr	r0, [pc, #120]	@ (800b73c <lwip_recv_tcp+0x180>)
 800b6c4:	f00a fefa 	bl	80164bc <iprintf>
      if (p->tot_len - copylen > 0) {
 800b6c8:	8923      	ldrh	r3, [r4, #8]
 800b6ca:	e7b8      	b.n	800b63e <lwip_recv_tcp+0x82>
      LWIP_ASSERT("p != NULL", p != NULL);
 800b6cc:	4b19      	ldr	r3, [pc, #100]	@ (800b734 <lwip_recv_tcp+0x178>)
 800b6ce:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800b6d2:	491d      	ldr	r1, [pc, #116]	@ (800b748 <lwip_recv_tcp+0x18c>)
 800b6d4:	4819      	ldr	r0, [pc, #100]	@ (800b73c <lwip_recv_tcp+0x180>)
 800b6d6:	f00a fef1 	bl	80164bc <iprintf>
 800b6da:	e7d2      	b.n	800b682 <lwip_recv_tcp+0xc6>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b6dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b74c <lwip_recv_tcp+0x190>)
 800b6de:	f240 3225 	movw	r2, #805	@ 0x325
 800b6e2:	491b      	ldr	r1, [pc, #108]	@ (800b750 <lwip_recv_tcp+0x194>)
 800b6e4:	f06f 040f 	mvn.w	r4, #15
 800b6e8:	4814      	ldr	r0, [pc, #80]	@ (800b73c <lwip_recv_tcp+0x180>)
 800b6ea:	f00a fee7 	bl	80164bc <iprintf>
        if (recvd > 0) {
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	d00c      	beq.n	800b70e <lwip_recv_tcp+0x152>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b6f4:	f01a 0f01 	tst.w	sl, #1
 800b6f8:	46c3      	mov	fp, r8
 800b6fa:	d199      	bne.n	800b630 <lwip_recv_tcp+0x74>
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	f8d9 0000 	ldr.w	r0, [r9]
 800b702:	f7ff ff31 	bl	800b568 <netconn_tcp_recvd>
}
 800b706:	4658      	mov	r0, fp
 800b708:	b005      	add	sp, #20
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
 800b70e:	4620      	mov	r0, r4
 800b710:	f7fe f942 	bl	8009998 <err_to_errno>
 800b714:	b108      	cbz	r0, 800b71a <lwip_recv_tcp+0x15e>
 800b716:	4b0f      	ldr	r3, [pc, #60]	@ (800b754 <lwip_recv_tcp+0x198>)
 800b718:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 800b71a:	f114 010f 	adds.w	r1, r4, #15
 800b71e:	bf18      	it	ne
 800b720:	2101      	movne	r1, #1
 800b722:	f1c1 0b00 	rsb	fp, r1, #0
 800b726:	e783      	b.n	800b630 <lwip_recv_tcp+0x74>
 800b728:	4604      	mov	r4, r0
        if (recvd > 0) {
 800b72a:	f1b8 0f00 	cmp.w	r8, #0
 800b72e:	d1e1      	bne.n	800b6f4 <lwip_recv_tcp+0x138>
 800b730:	e7ed      	b.n	800b70e <lwip_recv_tcp+0x152>
 800b732:	bf00      	nop
 800b734:	080192f0 	.word	0x080192f0
 800b738:	08019a24 	.word	0x08019a24
 800b73c:	080187f8 	.word	0x080187f8
 800b740:	08019a48 	.word	0x08019a48
 800b744:	08019a70 	.word	0x08019a70
 800b748:	08019df8 	.word	0x08019df8
 800b74c:	08019640 	.word	0x08019640
 800b750:	08019700 	.word	0x08019700
 800b754:	200101d0 	.word	0x200101d0

0800b758 <netconn_write_vectors_partly>:
{
 800b758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75a:	b089      	sub	sp, #36	@ 0x24
 800b75c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b75e:	2800      	cmp	r0, #0
 800b760:	d05b      	beq.n	800b81a <netconn_write_vectors_partly+0xc2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b762:	7804      	ldrb	r4, [r0, #0]
 800b764:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 800b768:	2c10      	cmp	r4, #16
 800b76a:	d14e      	bne.n	800b80a <netconn_write_vectors_partly+0xb2>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b76c:	7f04      	ldrb	r4, [r0, #28]
 800b76e:	f003 0604 	and.w	r6, r3, #4
 800b772:	f004 0402 	and.w	r4, r4, #2
 800b776:	4334      	orrs	r4, r6
 800b778:	d016      	beq.n	800b7a8 <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 800b77a:	b18d      	cbz	r5, 800b7a0 <netconn_write_vectors_partly+0x48>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b77c:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 800b77e:	2a00      	cmp	r2, #0
 800b780:	d038      	beq.n	800b7f4 <netconn_write_vectors_partly+0x9c>
 800b782:	f04f 0c00 	mov.w	ip, #0
 800b786:	f101 0e04 	add.w	lr, r1, #4
  size = 0;
 800b78a:	4666      	mov	r6, ip
 800b78c:	e001      	b.n	800b792 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 800b78e:	4562      	cmp	r2, ip
 800b790:	d00c      	beq.n	800b7ac <netconn_write_vectors_partly+0x54>
 800b792:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
 800b796:	f10c 0c01 	add.w	ip, ip, #1
 800b79a:	19a4      	adds	r4, r4, r6
    size += vectors[i].len;
 800b79c:	4626      	mov	r6, r4
    if (size < vectors[i].len) {
 800b79e:	d3f6      	bcc.n	800b78e <netconn_write_vectors_partly+0x36>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b7a0:	f06f 0005 	mvn.w	r0, #5
}
 800b7a4:	b009      	add	sp, #36	@ 0x24
 800b7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b7a8:	4627      	mov	r7, r4
 800b7aa:	e7e8      	b.n	800b77e <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 800b7ac:	2c00      	cmp	r4, #0
 800b7ae:	d021      	beq.n	800b7f4 <netconn_write_vectors_partly+0x9c>
  } else if (size > SSIZE_MAX) {
 800b7b0:	da03      	bge.n	800b7ba <netconn_write_vectors_partly+0x62>
    if (!bytes_written) {
 800b7b2:	2d00      	cmp	r5, #0
 800b7b4:	d0f4      	beq.n	800b7a0 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 800b7b6:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b7ba:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b7be:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b7c0:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b7c2:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b7c4:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b7c8:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800b7cc:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b7ce:	4818      	ldr	r0, [pc, #96]	@ (800b830 <netconn_write_vectors_partly+0xd8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b7d0:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b7d2:	e9cd 3604 	strd	r3, r6, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b7d6:	f000 fcc9 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d1e2      	bne.n	800b7a4 <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 800b7de:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err == ERR_OK) {
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d1de      	bne.n	800b7a4 <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 800b7e6:	b10d      	cbz	r5, 800b7ec <netconn_write_vectors_partly+0x94>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b7e8:	9b06      	ldr	r3, [sp, #24]
 800b7ea:	602b      	str	r3, [r5, #0]
    if (!dontblock) {
 800b7ec:	b917      	cbnz	r7, 800b7f4 <netconn_write_vectors_partly+0x9c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b7ee:	9b06      	ldr	r3, [sp, #24]
 800b7f0:	42b3      	cmp	r3, r6
 800b7f2:	d102      	bne.n	800b7fa <netconn_write_vectors_partly+0xa2>
    return ERR_OK;
 800b7f4:	2000      	movs	r0, #0
}
 800b7f6:	b009      	add	sp, #36	@ 0x24
 800b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <netconn_write_vectors_partly+0xdc>)
 800b7fc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b800:	490d      	ldr	r1, [pc, #52]	@ (800b838 <netconn_write_vectors_partly+0xe0>)
 800b802:	480e      	ldr	r0, [pc, #56]	@ (800b83c <netconn_write_vectors_partly+0xe4>)
 800b804:	f00a fe5a 	bl	80164bc <iprintf>
 800b808:	e7f4      	b.n	800b7f4 <netconn_write_vectors_partly+0x9c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b80a:	4b0a      	ldr	r3, [pc, #40]	@ (800b834 <netconn_write_vectors_partly+0xdc>)
 800b80c:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800b810:	490b      	ldr	r1, [pc, #44]	@ (800b840 <netconn_write_vectors_partly+0xe8>)
 800b812:	480a      	ldr	r0, [pc, #40]	@ (800b83c <netconn_write_vectors_partly+0xe4>)
 800b814:	f00a fe52 	bl	80164bc <iprintf>
 800b818:	e7c2      	b.n	800b7a0 <netconn_write_vectors_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b81a:	4b06      	ldr	r3, [pc, #24]	@ (800b834 <netconn_write_vectors_partly+0xdc>)
 800b81c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b820:	4908      	ldr	r1, [pc, #32]	@ (800b844 <netconn_write_vectors_partly+0xec>)
 800b822:	4806      	ldr	r0, [pc, #24]	@ (800b83c <netconn_write_vectors_partly+0xe4>)
 800b824:	f00a fe4a 	bl	80164bc <iprintf>
 800b828:	f06f 000f 	mvn.w	r0, #15
 800b82c:	e7ba      	b.n	800b7a4 <netconn_write_vectors_partly+0x4c>
 800b82e:	bf00      	nop
 800b830:	0800a931 	.word	0x0800a931
 800b834:	08019640 	.word	0x08019640
 800b838:	08019adc 	.word	0x08019adc
 800b83c:	080187f8 	.word	0x080187f8
 800b840:	08019ab8 	.word	0x08019ab8
 800b844:	08019a9c 	.word	0x08019a9c

0800b848 <lwip_accept>:
{
 800b848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  u16_t port = 0;
 800b84c:	2300      	movs	r3, #0
{
 800b84e:	b08d      	sub	sp, #52	@ 0x34
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b850:	2803      	cmp	r0, #3
  u16_t port = 0;
 800b852:	f8ad 3006 	strh.w	r3, [sp, #6]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b856:	f200 8085 	bhi.w	800b964 <lwip_accept+0x11c>
    if (sock->conn) {
 800b85a:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 800b9dc <lwip_accept+0x194>
 800b85e:	0104      	lsls	r4, r0, #4
 800b860:	f859 0004 	ldr.w	r0, [r9, r4]
 800b864:	2800      	cmp	r0, #0
 800b866:	d07d      	beq.n	800b964 <lwip_accept+0x11c>
  err = netconn_accept(sock->conn, &newconn);
 800b868:	460f      	mov	r7, r1
 800b86a:	a902      	add	r1, sp, #8
 800b86c:	4690      	mov	r8, r2
 800b86e:	f7ff fe0d 	bl	800b48c <netconn_accept>
  if (err != ERR_OK) {
 800b872:	4603      	mov	r3, r0
 800b874:	2800      	cmp	r0, #0
 800b876:	f040 808d 	bne.w	800b994 <lwip_accept+0x14c>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800b87a:	9d02      	ldr	r5, [sp, #8]
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	d077      	beq.n	800b970 <lwip_accept+0x128>
  newsock = alloc_socket(newconn, 1);
 800b880:	2101      	movs	r1, #1
 800b882:	4628      	mov	r0, r5
 800b884:	f7fe f940 	bl	8009b08 <alloc_socket>
  if (newsock == -1) {
 800b888:	1c42      	adds	r2, r0, #1
  newsock = alloc_socket(newconn, 1);
 800b88a:	4606      	mov	r6, r0
  if (newsock == -1) {
 800b88c:	f000 808d 	beq.w	800b9aa <lwip_accept+0x162>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800b890:	2e03      	cmp	r6, #3
 800b892:	d85f      	bhi.n	800b954 <lwip_accept+0x10c>
  SYS_ARCH_PROTECT(lev);
 800b894:	f00a f8a0 	bl	80159d8 <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
 800b898:	69ac      	ldr	r4, [r5, #24]
  newconn->socket = newsock;
 800b89a:	61ae      	str	r6, [r5, #24]
  SYS_ARCH_UNPROTECT(lev);
 800b89c:	f00a f8a8 	bl	80159f0 <sys_arch_unprotect>
  if (newconn->callback) {
 800b8a0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b8a2:	b18b      	cbz	r3, 800b8c8 <lwip_accept+0x80>
  recvevent = (s16_t)(-1 - newconn->socket);
 800b8a4:	43e4      	mvns	r4, r4
    LOCK_TCPIP_CORE();
 800b8a6:	4846      	ldr	r0, [pc, #280]	@ (800b9c0 <lwip_accept+0x178>)
 800b8a8:	f00a f876 	bl	8015998 <sys_mutex_lock>
  recvevent = (s16_t)(-1 - newconn->socket);
 800b8ac:	b224      	sxth	r4, r4
    while (recvevent > 0) {
 800b8ae:	2c00      	cmp	r4, #0
 800b8b0:	dd07      	ble.n	800b8c2 <lwip_accept+0x7a>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800b8b2:	2200      	movs	r2, #0
      recvevent--;
 800b8b4:	3c01      	subs	r4, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800b8b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4798      	blx	r3
    while (recvevent > 0) {
 800b8be:	2c00      	cmp	r4, #0
 800b8c0:	d1f7      	bne.n	800b8b2 <lwip_accept+0x6a>
    UNLOCK_TCPIP_CORE();
 800b8c2:	483f      	ldr	r0, [pc, #252]	@ (800b9c0 <lwip_accept+0x178>)
 800b8c4:	f00a f86e 	bl	80159a4 <sys_mutex_unlock>
  if ((addr != NULL) && (addrlen != NULL)) {
 800b8c8:	2f00      	cmp	r7, #0
 800b8ca:	d03f      	beq.n	800b94c <lwip_accept+0x104>
 800b8cc:	f1b8 0f00 	cmp.w	r8, #0
 800b8d0:	d03c      	beq.n	800b94c <lwip_accept+0x104>
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800b8d2:	2300      	movs	r3, #0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b8d4:	f105 020c 	add.w	r2, r5, #12
 800b8d8:	a904      	add	r1, sp, #16
 800b8da:	483a      	ldr	r0, [pc, #232]	@ (800b9c4 <lwip_accept+0x17c>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800b8dc:	f88d 3020 	strb.w	r3, [sp, #32]
  msg.msg.ad.ipaddr = addr;
 800b8e0:	ab03      	add	r3, sp, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800b8e2:	9504      	str	r5, [sp, #16]
  msg.msg.ad.ipaddr = addr;
 800b8e4:	9306      	str	r3, [sp, #24]
  msg.msg.ad.port = port;
 800b8e6:	f10d 0306 	add.w	r3, sp, #6
 800b8ea:	9307      	str	r3, [sp, #28]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b8ec:	f000 fc3e 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	b170      	cbz	r0, 800b912 <lwip_accept+0xca>
  if (conn == NULL) {
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f7ff fba7 	bl	800b048 <netconn_delete.part.0>
      free_socket(nsock, 1);
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	eb09 1006 	add.w	r0, r9, r6, lsl #4
 800b900:	f7ff fd2c 	bl	800b35c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800b904:	4620      	mov	r0, r4
 800b906:	f7fe f847 	bl	8009998 <err_to_errno>
 800b90a:	b370      	cbz	r0, 800b96a <lwip_accept+0x122>
 800b90c:	4a2e      	ldr	r2, [pc, #184]	@ (800b9c8 <lwip_accept+0x180>)
 800b90e:	6010      	str	r0, [r2, #0]
      return -1;
 800b910:	e02b      	b.n	800b96a <lwip_accept+0x122>
    return apimsg->err;
 800b912:	f99d 4014 	ldrsb.w	r4, [sp, #20]
    if (err != ERR_OK) {
 800b916:	2c00      	cmp	r4, #0
 800b918:	d1ec      	bne.n	800b8f4 <lwip_accept+0xac>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b91a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800b91e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800b922:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b926:	f003 ff85 	bl	800f834 <lwip_htons>
    if (*addrlen > tempaddr.sa.sa_len) {
 800b92a:	f8d8 2000 	ldr.w	r2, [r8]
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b92e:	9b03      	ldr	r3, [sp, #12]
    if (*addrlen > tempaddr.sa.sa_len) {
 800b930:	2a10      	cmp	r2, #16
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b932:	f8ad 0012 	strh.w	r0, [sp, #18]
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (*addrlen > tempaddr.sa.sa_len) {
 800b93c:	d902      	bls.n	800b944 <lwip_accept+0xfc>
      *addrlen = tempaddr.sa.sa_len;
 800b93e:	2210      	movs	r2, #16
 800b940:	f8c8 2000 	str.w	r2, [r8]
    MEMCPY(addr, &tempaddr, *addrlen);
 800b944:	a904      	add	r1, sp, #16
 800b946:	4638      	mov	r0, r7
 800b948:	f00a ffe5 	bl	8016916 <memcpy>
}
 800b94c:	4630      	mov	r0, r6
 800b94e:	b00d      	add	sp, #52	@ 0x34
 800b950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800b954:	4b1d      	ldr	r3, [pc, #116]	@ (800b9cc <lwip_accept+0x184>)
 800b956:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800b95a:	491d      	ldr	r1, [pc, #116]	@ (800b9d0 <lwip_accept+0x188>)
 800b95c:	481d      	ldr	r0, [pc, #116]	@ (800b9d4 <lwip_accept+0x18c>)
 800b95e:	f00a fdad 	bl	80164bc <iprintf>
 800b962:	e797      	b.n	800b894 <lwip_accept+0x4c>
    set_errno(EBADF);
 800b964:	4b18      	ldr	r3, [pc, #96]	@ (800b9c8 <lwip_accept+0x180>)
 800b966:	2209      	movs	r2, #9
 800b968:	601a      	str	r2, [r3, #0]
    return -1;
 800b96a:	f04f 36ff 	mov.w	r6, #4294967295
 800b96e:	e7ed      	b.n	800b94c <lwip_accept+0x104>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800b970:	4b16      	ldr	r3, [pc, #88]	@ (800b9cc <lwip_accept+0x184>)
 800b972:	f240 228b 	movw	r2, #651	@ 0x28b
 800b976:	4918      	ldr	r1, [pc, #96]	@ (800b9d8 <lwip_accept+0x190>)
 800b978:	4816      	ldr	r0, [pc, #88]	@ (800b9d4 <lwip_accept+0x18c>)
 800b97a:	f00a fd9f 	bl	80164bc <iprintf>
  newsock = alloc_socket(newconn, 1);
 800b97e:	2101      	movs	r1, #1
 800b980:	4628      	mov	r0, r5
 800b982:	f7fe f8c1 	bl	8009b08 <alloc_socket>
  if (newsock == -1) {
 800b986:	1c43      	adds	r3, r0, #1
  newsock = alloc_socket(newconn, 1);
 800b988:	4606      	mov	r6, r0
  if (newsock == -1) {
 800b98a:	d181      	bne.n	800b890 <lwip_accept+0x48>
    sock_set_errno(sock, ENFILE);
 800b98c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c8 <lwip_accept+0x180>)
 800b98e:	2217      	movs	r2, #23
 800b990:	601a      	str	r2, [r3, #0]
    return -1;
 800b992:	e7ea      	b.n	800b96a <lwip_accept+0x122>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b994:	f859 2004 	ldr.w	r2, [r9, r4]
 800b998:	7812      	ldrb	r2, [r2, #0]
 800b99a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800b99e:	2a10      	cmp	r2, #16
 800b9a0:	d007      	beq.n	800b9b2 <lwip_accept+0x16a>
      sock_set_errno(sock, EOPNOTSUPP);
 800b9a2:	4b09      	ldr	r3, [pc, #36]	@ (800b9c8 <lwip_accept+0x180>)
 800b9a4:	225f      	movs	r2, #95	@ 0x5f
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e7df      	b.n	800b96a <lwip_accept+0x122>
  if (conn == NULL) {
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7ff fb4c 	bl	800b048 <netconn_delete.part.0>
 800b9b0:	e7ec      	b.n	800b98c <lwip_accept+0x144>
    } else if (err == ERR_CLSD) {
 800b9b2:	330f      	adds	r3, #15
 800b9b4:	d1a7      	bne.n	800b906 <lwip_accept+0xbe>
      sock_set_errno(sock, EINVAL);
 800b9b6:	4b04      	ldr	r3, [pc, #16]	@ (800b9c8 <lwip_accept+0x180>)
 800b9b8:	2216      	movs	r2, #22
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	e7d5      	b.n	800b96a <lwip_accept+0x122>
 800b9be:	bf00      	nop
 800b9c0:	20008ec8 	.word	0x20008ec8
 800b9c4:	08009a39 	.word	0x08009a39
 800b9c8:	200101d0 	.word	0x200101d0
 800b9cc:	080192f0 	.word	0x080192f0
 800b9d0:	08019b38 	.word	0x08019b38
 800b9d4:	080187f8 	.word	0x080187f8
 800b9d8:	08019b28 	.word	0x08019b28
 800b9dc:	20008e58 	.word	0x20008e58

0800b9e0 <lwip_bind>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b9e0:	2803      	cmp	r0, #3
 800b9e2:	d834      	bhi.n	800ba4e <lwip_bind+0x6e>
{
 800b9e4:	b530      	push	{r4, r5, lr}
    if (sock->conn) {
 800b9e6:	4d27      	ldr	r5, [pc, #156]	@ (800ba84 <lwip_bind+0xa4>)
 800b9e8:	0104      	lsls	r4, r0, #4
{
 800b9ea:	b08b      	sub	sp, #44	@ 0x2c
    if (sock->conn) {
 800b9ec:	592b      	ldr	r3, [r5, r4]
 800b9ee:	b30b      	cbz	r3, 800ba34 <lwip_bind+0x54>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b9f0:	2a10      	cmp	r2, #16
 800b9f2:	d132      	bne.n	800ba5a <lwip_bind+0x7a>
 800b9f4:	784b      	ldrb	r3, [r1, #1]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d12f      	bne.n	800ba5a <lwip_bind+0x7a>
 800b9fa:	078b      	lsls	r3, r1, #30
 800b9fc:	d12d      	bne.n	800ba5a <lwip_bind+0x7a>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800b9fe:	684b      	ldr	r3, [r1, #4]
 800ba00:	8848      	ldrh	r0, [r1, #2]
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	f003 ff16 	bl	800f834 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 800ba08:	592c      	ldr	r4, [r5, r4]
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800ba0a:	4603      	mov	r3, r0
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ba0c:	2c00      	cmp	r4, #0
 800ba0e:	d02e      	beq.n	800ba6e <lwip_bind+0x8e>
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ba10:	a801      	add	r0, sp, #4
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ba12:	f104 020c 	add.w	r2, r4, #12
 800ba16:	a902      	add	r1, sp, #8
  API_MSG_VAR_REF(msg).conn = conn;
 800ba18:	9402      	str	r4, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ba1a:	9004      	str	r0, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ba1c:	481a      	ldr	r0, [pc, #104]	@ (800ba88 <lwip_bind+0xa8>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ba1e:	f8ad 3014 	strh.w	r3, [sp, #20]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ba22:	f000 fba3 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800ba26:	b160      	cbz	r0, 800ba42 <lwip_bind+0x62>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800ba28:	f7fd ffb6 	bl	8009998 <err_to_errno>
 800ba2c:	b128      	cbz	r0, 800ba3a <lwip_bind+0x5a>
 800ba2e:	4b17      	ldr	r3, [pc, #92]	@ (800ba8c <lwip_bind+0xac>)
 800ba30:	6018      	str	r0, [r3, #0]
 800ba32:	e002      	b.n	800ba3a <lwip_bind+0x5a>
    set_errno(EBADF);
 800ba34:	4b15      	ldr	r3, [pc, #84]	@ (800ba8c <lwip_bind+0xac>)
 800ba36:	2209      	movs	r2, #9
 800ba38:	601a      	str	r2, [r3, #0]
    return -1;
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ba3e:	b00b      	add	sp, #44	@ 0x2c
 800ba40:	bd30      	pop	{r4, r5, pc}
    return apimsg->err;
 800ba42:	f99d 000c 	ldrsb.w	r0, [sp, #12]
  if (err != ERR_OK) {
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d1ee      	bne.n	800ba28 <lwip_bind+0x48>
}
 800ba4a:	b00b      	add	sp, #44	@ 0x2c
 800ba4c:	bd30      	pop	{r4, r5, pc}
    set_errno(EBADF);
 800ba4e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba8c <lwip_bind+0xac>)
 800ba50:	2209      	movs	r2, #9
    return -1;
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800ba56:	601a      	str	r2, [r3, #0]
}
 800ba58:	4770      	bx	lr
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba90 <lwip_bind+0xb0>)
 800ba5c:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800ba60:	490c      	ldr	r1, [pc, #48]	@ (800ba94 <lwip_bind+0xb4>)
 800ba62:	480d      	ldr	r0, [pc, #52]	@ (800ba98 <lwip_bind+0xb8>)
 800ba64:	f00a fd2a 	bl	80164bc <iprintf>
 800ba68:	f06f 000f 	mvn.w	r0, #15
 800ba6c:	e7dc      	b.n	800ba28 <lwip_bind+0x48>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ba6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba9c <lwip_bind+0xbc>)
 800ba70:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800ba74:	490a      	ldr	r1, [pc, #40]	@ (800baa0 <lwip_bind+0xc0>)
 800ba76:	4808      	ldr	r0, [pc, #32]	@ (800ba98 <lwip_bind+0xb8>)
 800ba78:	f00a fd20 	bl	80164bc <iprintf>
  if (err != ERR_OK) {
 800ba7c:	f06f 000f 	mvn.w	r0, #15
 800ba80:	e7d2      	b.n	800ba28 <lwip_bind+0x48>
 800ba82:	bf00      	nop
 800ba84:	20008e58 	.word	0x20008e58
 800ba88:	0800a381 	.word	0x0800a381
 800ba8c:	200101d0 	.word	0x200101d0
 800ba90:	080192f0 	.word	0x080192f0
 800ba94:	08019b50 	.word	0x08019b50
 800ba98:	080187f8 	.word	0x080187f8
 800ba9c:	08019640 	.word	0x08019640
 800baa0:	080199c8 	.word	0x080199c8

0800baa4 <lwip_close>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800baa4:	2803      	cmp	r0, #3
 800baa6:	d858      	bhi.n	800bb5a <lwip_close+0xb6>
{
 800baa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (sock->conn) {
 800baac:	4e32      	ldr	r6, [pc, #200]	@ (800bb78 <lwip_close+0xd4>)
 800baae:	0107      	lsls	r7, r0, #4
{
 800bab0:	b08b      	sub	sp, #44	@ 0x2c
    if (sock->conn) {
 800bab2:	59f3      	ldr	r3, [r6, r7]
 800bab4:	eb06 1500 	add.w	r5, r6, r0, lsl #4
 800bab8:	b383      	cbz	r3, 800bb1c <lwip_close+0x78>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800baba:	7819      	ldrb	r1, [r3, #0]
 800babc:	4c2f      	ldr	r4, [pc, #188]	@ (800bb7c <lwip_close+0xd8>)
 800babe:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800bac2:	f104 0930 	add.w	r9, r4, #48	@ 0x30
 800bac6:	f1a1 0810 	sub.w	r8, r1, #16
 800baca:	fab8 f888 	clz	r8, r8
 800bace:	ea4f 1858 	mov.w	r8, r8, lsr #5
  if (!sock) {
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 800bad2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800bad6:	4295      	cmp	r5, r2
 800bad8:	d026      	beq.n	800bb28 <lwip_close+0x84>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800bada:	340c      	adds	r4, #12
 800badc:	454c      	cmp	r4, r9
 800bade:	d1f8      	bne.n	800bad2 <lwip_close+0x2e>
  if (conn == NULL) {
 800bae0:	b1a3      	cbz	r3, 800bb0c <lwip_close+0x68>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bae2:	2129      	movs	r1, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bae4:	f103 020c 	add.w	r2, r3, #12
 800bae8:	4825      	ldr	r0, [pc, #148]	@ (800bb80 <lwip_close+0xdc>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800baea:	f88d 1011 	strb.w	r1, [sp, #17]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800baee:	a902      	add	r1, sp, #8
  API_MSG_VAR_REF(msg).conn = conn;
 800baf0:	9302      	str	r3, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800baf2:	f000 fb3b 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800baf6:	b128      	cbz	r0, 800bb04 <lwip_close+0x60>
    sock_set_errno(sock, err_to_errno(err));
 800baf8:	f7fd ff4e 	bl	8009998 <err_to_errno>
 800bafc:	b188      	cbz	r0, 800bb22 <lwip_close+0x7e>
 800bafe:	4b21      	ldr	r3, [pc, #132]	@ (800bb84 <lwip_close+0xe0>)
 800bb00:	6018      	str	r0, [r3, #0]
 800bb02:	e00e      	b.n	800bb22 <lwip_close+0x7e>
    return apimsg->err;
 800bb04:	f99d 000c 	ldrsb.w	r0, [sp, #12]
  if (err != ERR_OK) {
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d1f5      	bne.n	800baf8 <lwip_close+0x54>
  free_socket(sock, is_tcp);
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	4641      	mov	r1, r8
 800bb10:	f7ff fc24 	bl	800b35c <free_socket>
  return 0;
 800bb14:	2000      	movs	r0, #0
}
 800bb16:	b00b      	add	sp, #44	@ 0x2c
 800bb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    set_errno(EBADF);
 800bb1c:	4b19      	ldr	r3, [pc, #100]	@ (800bb84 <lwip_close+0xe0>)
 800bb1e:	2209      	movs	r2, #9
 800bb20:	601a      	str	r2, [r3, #0]
    return -1;
 800bb22:	f04f 30ff 	mov.w	r0, #4294967295
 800bb26:	e7f6      	b.n	800bb16 <lwip_close+0x72>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 800bb28:	6862      	ldr	r2, [r4, #4]
 800bb2a:	9200      	str	r2, [sp, #0]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 800bb2c:	6822      	ldr	r2, [r4, #0]
 800bb2e:	9201      	str	r2, [sp, #4]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800bb30:	2200      	movs	r2, #0
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800bb32:	e944 2201 	strd	r2, r2, [r4, #-4]
 800bb36:	6062      	str	r2, [r4, #4]
                         enum netconn_igmp join_or_leave)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bb38:	b1ab      	cbz	r3, 800bb66 <lwip_close+0xc2>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bb3a:	f103 020c 	add.w	r2, r3, #12
  if (netif_addr == NULL) {
    netif_addr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 800bb3e:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 800bb40:	ab01      	add	r3, sp, #4
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bb42:	a902      	add	r1, sp, #8
 800bb44:	4810      	ldr	r0, [pc, #64]	@ (800bb88 <lwip_close+0xe4>)
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 800bb46:	9305      	str	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800bb48:	2301      	movs	r3, #1
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 800bb4a:	f8cd d010 	str.w	sp, [sp, #16]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800bb4e:	f88d 3019 	strb.w	r3, [sp, #25]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bb52:	f000 fb0b 	bl	800c16c <tcpip_send_msg_wait_sem>
  err = netconn_prepare_delete(sock->conn);
 800bb56:	59f3      	ldr	r3, [r6, r7]
 800bb58:	e7bf      	b.n	800bada <lwip_close+0x36>
    set_errno(EBADF);
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <lwip_close+0xe0>)
 800bb5c:	2209      	movs	r2, #9
    return -1;
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	4770      	bx	lr
  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bb66:	4b09      	ldr	r3, [pc, #36]	@ (800bb8c <lwip_close+0xe8>)
 800bb68:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 800bb6c:	4908      	ldr	r1, [pc, #32]	@ (800bb90 <lwip_close+0xec>)
 800bb6e:	4809      	ldr	r0, [pc, #36]	@ (800bb94 <lwip_close+0xf0>)
 800bb70:	f00a fca4 	bl	80164bc <iprintf>
 800bb74:	e7ef      	b.n	800bb56 <lwip_close+0xb2>
 800bb76:	bf00      	nop
 800bb78:	20008e58 	.word	0x20008e58
 800bb7c:	20008e9c 	.word	0x20008e9c
 800bb80:	0800b181 	.word	0x0800b181
 800bb84:	200101d0 	.word	0x200101d0
 800bb88:	0800a609 	.word	0x0800a609
 800bb8c:	08019640 	.word	0x08019640
 800bb90:	08019b00 	.word	0x08019b00
 800bb94:	080187f8 	.word	0x080187f8

0800bb98 <lwip_listen>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bb98:	2803      	cmp	r0, #3
 800bb9a:	d823      	bhi.n	800bbe4 <lwip_listen+0x4c>
{
 800bb9c:	b530      	push	{r4, r5, lr}
    if (sock->conn) {
 800bb9e:	4d18      	ldr	r5, [pc, #96]	@ (800bc00 <lwip_listen+0x68>)
 800bba0:	0104      	lsls	r4, r0, #4
{
 800bba2:	b089      	sub	sp, #36	@ 0x24
    if (sock->conn) {
 800bba4:	592b      	ldr	r3, [r5, r4]
 800bba6:	b1bb      	cbz	r3, 800bbd8 <lwip_listen+0x40>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bba8:	f103 020c 	add.w	r2, r3, #12
 800bbac:	4669      	mov	r1, sp
 800bbae:	4815      	ldr	r0, [pc, #84]	@ (800bc04 <lwip_listen+0x6c>)
  API_MSG_VAR_REF(msg).conn = conn;
 800bbb0:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bbb2:	f000 fadb 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800bbb6:	b148      	cbz	r0, 800bbcc <lwip_listen+0x34>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bbb8:	592b      	ldr	r3, [r5, r4]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d015      	beq.n	800bbf0 <lwip_listen+0x58>
      sock_set_errno(sock, EOPNOTSUPP);
 800bbc4:	4b10      	ldr	r3, [pc, #64]	@ (800bc08 <lwip_listen+0x70>)
 800bbc6:	225f      	movs	r2, #95	@ 0x5f
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	e008      	b.n	800bbde <lwip_listen+0x46>
    return apimsg->err;
 800bbcc:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d1f1      	bne.n	800bbb8 <lwip_listen+0x20>
}
 800bbd4:	b009      	add	sp, #36	@ 0x24
 800bbd6:	bd30      	pop	{r4, r5, pc}
    set_errno(EBADF);
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc08 <lwip_listen+0x70>)
 800bbda:	2209      	movs	r2, #9
 800bbdc:	601a      	str	r2, [r3, #0]
    return -1;
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	e7f7      	b.n	800bbd4 <lwip_listen+0x3c>
    set_errno(EBADF);
 800bbe4:	4b08      	ldr	r3, [pc, #32]	@ (800bc08 <lwip_listen+0x70>)
 800bbe6:	2209      	movs	r2, #9
    return -1;
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	4770      	bx	lr
      sock_set_errno(sock, err_to_errno(err));
 800bbf0:	f7fd fed2 	bl	8009998 <err_to_errno>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0f2      	beq.n	800bbde <lwip_listen+0x46>
 800bbf8:	4a03      	ldr	r2, [pc, #12]	@ (800bc08 <lwip_listen+0x70>)
 800bbfa:	6010      	str	r0, [r2, #0]
 800bbfc:	e7ef      	b.n	800bbde <lwip_listen+0x46>
 800bbfe:	bf00      	nop
 800bc00:	20008e58 	.word	0x20008e58
 800bc04:	0800a3b9 	.word	0x0800a3b9
 800bc08:	200101d0 	.word	0x200101d0

0800bc0c <lwip_recvfrom>:
{
 800bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bc10:	2803      	cmp	r0, #3
{
 800bc12:	b08c      	sub	sp, #48	@ 0x30
 800bc14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bc16:	d836      	bhi.n	800bc86 <lwip_recvfrom+0x7a>
    if (sock->conn) {
 800bc18:	4f3f      	ldr	r7, [pc, #252]	@ (800bd18 <lwip_recvfrom+0x10c>)
 800bc1a:	ea4f 1800 	mov.w	r8, r0, lsl #4
 800bc1e:	f857 e008 	ldr.w	lr, [r7, r8]
 800bc22:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 800bc26:	f1be 0f00 	cmp.w	lr, #0
 800bc2a:	d02c      	beq.n	800bc86 <lwip_recvfrom+0x7a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bc2c:	f89e e000 	ldrb.w	lr, [lr]
 800bc30:	f00e 0ef0 	and.w	lr, lr, #240	@ 0xf0
 800bc34:	f1be 0f10 	cmp.w	lr, #16
 800bc38:	d03c      	beq.n	800bcb4 <lwip_recvfrom+0xa8>
    u16_t datagram_len = 0;
 800bc3a:	469c      	mov	ip, r3
    msg.msg_iov = &vec;
 800bc3c:	ab02      	add	r3, sp, #8
 800bc3e:	4614      	mov	r4, r2
    vec.iov_len = len;
 800bc40:	9203      	str	r2, [sp, #12]
    msg.msg_iov = &vec;
 800bc42:	9306      	str	r3, [sp, #24]
    msg.msg_iovlen = 1;
 800bc44:	2301      	movs	r3, #1
    msg.msg_name = from;
 800bc46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
    msg.msg_iovlen = 1;
 800bc48:	9307      	str	r3, [sp, #28]
    u16_t datagram_len = 0;
 800bc4a:	2300      	movs	r3, #0
    vec.iov_base = mem;
 800bc4c:	9102      	str	r1, [sp, #8]
    msg.msg_name = from;
 800bc4e:	9204      	str	r2, [sp, #16]
    u16_t datagram_len = 0;
 800bc50:	f8ad 3006 	strh.w	r3, [sp, #6]
    msg.msg_flags = 0;
 800bc54:	930a      	str	r3, [sp, #40]	@ 0x28
    msg.msg_controllen = 0;
 800bc56:	e9cd 3308 	strd	r3, r3, [sp, #32]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bc5a:	b1d6      	cbz	r6, 800bc92 <lwip_recvfrom+0x86>
 800bc5c:	6833      	ldr	r3, [r6, #0]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bc5e:	4661      	mov	r1, ip
 800bc60:	aa04      	add	r2, sp, #16
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bc62:	9305      	str	r3, [sp, #20]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bc64:	f10d 0306 	add.w	r3, sp, #6
 800bc68:	f7fe ffe0 	bl	800ac2c <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d142      	bne.n	800bcf6 <lwip_recvfrom+0xea>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bc70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
      *fromlen = msg.msg_namelen;
 800bc74:	9b05      	ldr	r3, [sp, #20]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bc76:	4294      	cmp	r4, r2
      *fromlen = msg.msg_namelen;
 800bc78:	6033      	str	r3, [r6, #0]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bc7a:	bf28      	it	cs
 800bc7c:	4614      	movcs	r4, r2
}
 800bc7e:	4620      	mov	r0, r4
 800bc80:	b00c      	add	sp, #48	@ 0x30
 800bc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    set_errno(EBADF);
 800bc86:	4b25      	ldr	r3, [pc, #148]	@ (800bd1c <lwip_recvfrom+0x110>)
 800bc88:	2209      	movs	r2, #9
 800bc8a:	601a      	str	r2, [r3, #0]
    return -1;
 800bc8c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc90:	e7f5      	b.n	800bc7e <lwip_recvfrom+0x72>
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bc92:	f10d 0306 	add.w	r3, sp, #6
 800bc96:	4661      	mov	r1, ip
 800bc98:	aa04      	add	r2, sp, #16
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bc9a:	9605      	str	r6, [sp, #20]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bc9c:	f7fe ffc6 	bl	800ac2c <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 800bca0:	bb48      	cbnz	r0, 800bcf6 <lwip_recvfrom+0xea>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bca2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bca6:	429c      	cmp	r4, r3
 800bca8:	bf28      	it	cs
 800bcaa:	461c      	movcs	r4, r3
}
 800bcac:	4620      	mov	r0, r4
 800bcae:	b00c      	add	sp, #48	@ 0x30
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bcb4:	f7ff fc82 	bl	800b5bc <lwip_recv_tcp>
  if (from && fromlen)
 800bcb8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bcba:	4604      	mov	r4, r0
  if (from && fromlen)
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d0de      	beq.n	800bc7e <lwip_recvfrom+0x72>
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	d0dc      	beq.n	800bc7e <lwip_recvfrom+0x72>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bcc4:	f857 2008 	ldr.w	r2, [r7, r8]
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800bcc8:	b1e2      	cbz	r2, 800bd04 <lwip_recvfrom+0xf8>
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800bcca:	2300      	movs	r3, #0
  msg.msg.ad.ipaddr = addr;
 800bccc:	ad02      	add	r5, sp, #8
  API_MSG_VAR_REF(msg).conn = conn;
 800bcce:	9204      	str	r2, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bcd0:	a904      	add	r1, sp, #16
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800bcd2:	f88d 3020 	strb.w	r3, [sp, #32]
  msg.msg.ad.port = port;
 800bcd6:	f10d 0306 	add.w	r3, sp, #6
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bcda:	320c      	adds	r2, #12
 800bcdc:	4810      	ldr	r0, [pc, #64]	@ (800bd20 <lwip_recvfrom+0x114>)
  msg.msg.ad.ipaddr = addr;
 800bcde:	9506      	str	r5, [sp, #24]
  msg.msg.ad.port = port;
 800bce0:	9307      	str	r3, [sp, #28]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bce2:	f000 fa43 	bl	800c16c <tcpip_send_msg_wait_sem>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bce6:	4633      	mov	r3, r6
 800bce8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bcea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f7fe fcda 	bl	800a6a8 <lwip_sock_make_addr.constprop.0.isra.0>
 800bcf4:	e7c3      	b.n	800bc7e <lwip_recvfrom+0x72>
      sock_set_errno(sock, err_to_errno(err));
 800bcf6:	f7fd fe4f 	bl	8009998 <err_to_errno>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0c6      	beq.n	800bc8c <lwip_recvfrom+0x80>
 800bcfe:	4b07      	ldr	r3, [pc, #28]	@ (800bd1c <lwip_recvfrom+0x110>)
 800bd00:	6018      	str	r0, [r3, #0]
      return -1;
 800bd02:	e7c3      	b.n	800bc8c <lwip_recvfrom+0x80>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800bd04:	4b07      	ldr	r3, [pc, #28]	@ (800bd24 <lwip_recvfrom+0x118>)
 800bd06:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bd0a:	4907      	ldr	r1, [pc, #28]	@ (800bd28 <lwip_recvfrom+0x11c>)
 800bd0c:	ad02      	add	r5, sp, #8
 800bd0e:	4807      	ldr	r0, [pc, #28]	@ (800bd2c <lwip_recvfrom+0x120>)
 800bd10:	f00a fbd4 	bl	80164bc <iprintf>
 800bd14:	e7e7      	b.n	800bce6 <lwip_recvfrom+0xda>
 800bd16:	bf00      	nop
 800bd18:	20008e58 	.word	0x20008e58
 800bd1c:	200101d0 	.word	0x200101d0
 800bd20:	08009a39 	.word	0x08009a39
 800bd24:	08019640 	.word	0x08019640
 800bd28:	08019968 	.word	0x08019968
 800bd2c:	080187f8 	.word	0x080187f8

0800bd30 <lwip_read>:
{
 800bd30:	b500      	push	{lr}
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800bd32:	2300      	movs	r3, #0
{
 800bd34:	b083      	sub	sp, #12
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800bd36:	e9cd 3300 	strd	r3, r3, [sp]
 800bd3a:	f7ff ff67 	bl	800bc0c <lwip_recvfrom>
}
 800bd3e:	b003      	add	sp, #12
 800bd40:	f85d fb04 	ldr.w	pc, [sp], #4

0800bd44 <lwip_sendto>:
{
 800bd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bd48:	2803      	cmp	r0, #3
{
 800bd4a:	b08d      	sub	sp, #52	@ 0x34
 800bd4c:	e9dd 6e14 	ldrd	r6, lr, [sp, #80]	@ 0x50
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bd50:	d868      	bhi.n	800be24 <lwip_sendto+0xe0>
    if (sock->conn) {
 800bd52:	0104      	lsls	r4, r0, #4
 800bd54:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 800bea8 <lwip_sendto+0x164>
 800bd58:	f858 c004 	ldr.w	ip, [r8, r4]
 800bd5c:	f1bc 0f00 	cmp.w	ip, #0
 800bd60:	d060      	beq.n	800be24 <lwip_sendto+0xe0>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bd62:	f89c c000 	ldrb.w	ip, [ip]
 800bd66:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 800bd6a:	f1bc 0f10 	cmp.w	ip, #16
 800bd6e:	d062      	beq.n	800be36 <lwip_sendto+0xf2>
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800bd70:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800bd74:	4615      	mov	r5, r2
 800bd76:	d273      	bcs.n	800be60 <lwip_sendto+0x11c>
  short_size = (u16_t)size;
 800bd78:	b293      	uxth	r3, r2
 800bd7a:	f04f 0900 	mov.w	r9, #0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	f363 090f 	bfi	r9, r3, #0, #16
 800bd84:	f363 491f 	bfi	r9, r3, #16, #16
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800bd88:	ea56 030e 	orrs.w	r3, r6, lr
 800bd8c:	d018      	beq.n	800bdc0 <lwip_sendto+0x7c>
 800bd8e:	f1be 0f10 	cmp.w	lr, #16
 800bd92:	d155      	bne.n	800be40 <lwip_sendto+0xfc>
 800bd94:	2e00      	cmp	r6, #0
 800bd96:	d053      	beq.n	800be40 <lwip_sendto+0xfc>
 800bd98:	7873      	ldrb	r3, [r6, #1]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d150      	bne.n	800be40 <lwip_sendto+0xfc>
 800bd9e:	f016 0303 	ands.w	r3, r6, #3
 800bda2:	d14d      	bne.n	800be40 <lwip_sendto+0xfc>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800bda4:	8870      	ldrh	r0, [r6, #2]
  buf.p = buf.ptr = NULL;
 800bda6:	e9cd 3300 	strd	r3, r3, [sp]
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800bdaa:	6873      	ldr	r3, [r6, #4]
 800bdac:	9302      	str	r3, [sp, #8]
 800bdae:	f003 fd41 	bl	800f834 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 800bdb2:	f8ad 000c 	strh.w	r0, [sp, #12]
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  if (buf->p != NULL) {
 800bdb6:	9800      	ldr	r0, [sp, #0]
 800bdb8:	b138      	cbz	r0, 800bdca <lwip_sendto+0x86>
    pbuf_free(buf->p);
 800bdba:	f004 fbcb 	bl	8010554 <pbuf_free>
 800bdbe:	e004      	b.n	800bdca <lwip_sendto+0x86>
  buf.p = buf.ptr = NULL;
 800bdc0:	e9cd 3300 	strd	r3, r3, [sp]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800bdc4:	9302      	str	r3, [sp, #8]
  netbuf_fromport(&buf) = remote_port;
 800bdc6:	f8ad 300c 	strh.w	r3, [sp, #12]
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bdca:	2241      	movs	r2, #65	@ 0x41
 800bdcc:	2100      	movs	r1, #0
 800bdce:	2036      	movs	r0, #54	@ 0x36
 800bdd0:	f004 fc30 	bl	8010634 <pbuf_alloc>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	9000      	str	r0, [sp, #0]
  if (buf->p == NULL) {
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d045      	beq.n	800be68 <lwip_sendto+0x124>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800bddc:	e9c0 7901 	strd	r7, r9, [r0, #4]
    err = netconn_send(sock->conn, &buf);
 800bde0:	f858 0004 	ldr.w	r0, [r8, r4]
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
 800bde4:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d046      	beq.n	800be78 <lwip_sendto+0x134>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bdea:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800bdee:	9004      	str	r0, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bdf0:	a904      	add	r1, sp, #16
 800bdf2:	4826      	ldr	r0, [pc, #152]	@ (800be8c <lwip_sendto+0x148>)
  API_MSG_VAR_REF(msg).msg.b = buf;
 800bdf4:	f8cd d018 	str.w	sp, [sp, #24]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bdf8:	f000 f9b8 	bl	800c16c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	b1b8      	cbz	r0, 800be30 <lwip_sendto+0xec>
  if (buf->p != NULL) {
 800be00:	9800      	ldr	r0, [sp, #0]
 800be02:	b108      	cbz	r0, 800be08 <lwip_sendto+0xc4>
    pbuf_free(buf->p);
 800be04:	f004 fba6 	bl	8010554 <pbuf_free>
  buf->p = buf->ptr = NULL;
 800be08:	2300      	movs	r3, #0
  sock_set_errno(sock, err_to_errno(err));
 800be0a:	4620      	mov	r0, r4
 800be0c:	e9cd 3300 	strd	r3, r3, [sp]
 800be10:	f7fd fdc2 	bl	8009998 <err_to_errno>
 800be14:	b108      	cbz	r0, 800be1a <lwip_sendto+0xd6>
 800be16:	4b1e      	ldr	r3, [pc, #120]	@ (800be90 <lwip_sendto+0x14c>)
 800be18:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800be1a:	b934      	cbnz	r4, 800be2a <lwip_sendto+0xe6>
 800be1c:	4628      	mov	r0, r5
}
 800be1e:	b00d      	add	sp, #52	@ 0x34
 800be20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    set_errno(EBADF);
 800be24:	4b1a      	ldr	r3, [pc, #104]	@ (800be90 <lwip_sendto+0x14c>)
 800be26:	2209      	movs	r2, #9
 800be28:	601a      	str	r2, [r3, #0]
    return -1;
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	e7f6      	b.n	800be1e <lwip_sendto+0xda>
    return apimsg->err;
 800be30:	f99d 4014 	ldrsb.w	r4, [sp, #20]
 800be34:	e7e4      	b.n	800be00 <lwip_sendto+0xbc>
}
 800be36:	b00d      	add	sp, #52	@ 0x34
 800be38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lwip_send(s, data, size, flags);
 800be3c:	f000 b836 	b.w	800beac <lwip_send>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800be40:	4b14      	ldr	r3, [pc, #80]	@ (800be94 <lwip_sendto+0x150>)
 800be42:	f240 6252 	movw	r2, #1618	@ 0x652
 800be46:	4914      	ldr	r1, [pc, #80]	@ (800be98 <lwip_sendto+0x154>)
 800be48:	4814      	ldr	r0, [pc, #80]	@ (800be9c <lwip_sendto+0x158>)
 800be4a:	f00a fb37 	bl	80164bc <iprintf>
 800be4e:	f06f 000f 	mvn.w	r0, #15
 800be52:	f7fd fda1 	bl	8009998 <err_to_errno>
 800be56:	2800      	cmp	r0, #0
 800be58:	d0e7      	beq.n	800be2a <lwip_sendto+0xe6>
  sock_set_errno(sock, err_to_errno(err));
 800be5a:	4b0d      	ldr	r3, [pc, #52]	@ (800be90 <lwip_sendto+0x14c>)
 800be5c:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800be5e:	e7e4      	b.n	800be2a <lwip_sendto+0xe6>
    sock_set_errno(sock, EMSGSIZE);
 800be60:	4b0b      	ldr	r3, [pc, #44]	@ (800be90 <lwip_sendto+0x14c>)
 800be62:	225a      	movs	r2, #90	@ 0x5a
 800be64:	601a      	str	r2, [r3, #0]
    return -1;
 800be66:	e7e0      	b.n	800be2a <lwip_sendto+0xe6>
  sock_set_errno(sock, err_to_errno(err));
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	9301      	str	r3, [sp, #4]
 800be6e:	f7fd fd93 	bl	8009998 <err_to_errno>
 800be72:	2800      	cmp	r0, #0
 800be74:	d0d9      	beq.n	800be2a <lwip_sendto+0xe6>
 800be76:	e7f0      	b.n	800be5a <lwip_sendto+0x116>
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800be78:	4b09      	ldr	r3, [pc, #36]	@ (800bea0 <lwip_sendto+0x15c>)
 800be7a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800be7e:	4909      	ldr	r1, [pc, #36]	@ (800bea4 <lwip_sendto+0x160>)
 800be80:	f06f 040f 	mvn.w	r4, #15
 800be84:	4805      	ldr	r0, [pc, #20]	@ (800be9c <lwip_sendto+0x158>)
 800be86:	f00a fb19 	bl	80164bc <iprintf>
 800be8a:	e7b9      	b.n	800be00 <lwip_sendto+0xbc>
 800be8c:	0800a8e1 	.word	0x0800a8e1
 800be90:	200101d0 	.word	0x200101d0
 800be94:	080192f0 	.word	0x080192f0
 800be98:	08019b6c 	.word	0x08019b6c
 800be9c:	080187f8 	.word	0x080187f8
 800bea0:	08019640 	.word	0x08019640
 800bea4:	08019a80 	.word	0x08019a80
 800bea8:	20008e58 	.word	0x20008e58

0800beac <lwip_send>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800beac:	2803      	cmp	r0, #3
 800beae:	d83b      	bhi.n	800bf28 <lwip_send+0x7c>
    if (sock->conn) {
 800beb0:	ea4f 1c00 	mov.w	ip, r0, lsl #4
{
 800beb4:	b570      	push	{r4, r5, r6, lr}
    if (sock->conn) {
 800beb6:	4c1f      	ldr	r4, [pc, #124]	@ (800bf34 <lwip_send+0x88>)
{
 800beb8:	b086      	sub	sp, #24
    if (sock->conn) {
 800beba:	f854 400c 	ldr.w	r4, [r4, ip]
 800bebe:	b36c      	cbz	r4, 800bf1c <lwip_send+0x70>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bec0:	f894 c000 	ldrb.w	ip, [r4]
 800bec4:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 800bec8:	f1bc 0f10 	cmp.w	ip, #16
 800becc:	d11f      	bne.n	800bf0e <lwip_send+0x62>
  write_flags = (u8_t)(NETCONN_COPY |
 800bece:	f013 0f10 	tst.w	r3, #16
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bed2:	ea4f 0363 	mov.w	r3, r3, asr #1
  vector.ptr = dataptr;
 800bed6:	9104      	str	r1, [sp, #16]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800bed8:	ae03      	add	r6, sp, #12
  write_flags = (u8_t)(NETCONN_COPY |
 800beda:	bf14      	ite	ne
 800bedc:	2103      	movne	r1, #3
 800bede:	2101      	moveq	r1, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	4615      	mov	r5, r2
 800bee6:	4620      	mov	r0, r4
  written = 0;
 800bee8:	2400      	movs	r4, #0
 800beea:	430b      	orrs	r3, r1
 800beec:	2201      	movs	r2, #1
 800beee:	a904      	add	r1, sp, #16
 800bef0:	9600      	str	r6, [sp, #0]
 800bef2:	9403      	str	r4, [sp, #12]
  vector.len = size;
 800bef4:	9505      	str	r5, [sp, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800bef6:	f7ff fc2f 	bl	800b758 <netconn_write_vectors_partly>
 800befa:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 800befc:	f7fd fd4c 	bl	8009998 <err_to_errno>
 800bf00:	b108      	cbz	r0, 800bf06 <lwip_send+0x5a>
 800bf02:	4b0d      	ldr	r3, [pc, #52]	@ (800bf38 <lwip_send+0x8c>)
 800bf04:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bf06:	b964      	cbnz	r4, 800bf22 <lwip_send+0x76>
 800bf08:	9803      	ldr	r0, [sp, #12]
}
 800bf0a:	b006      	add	sp, #24
 800bf0c:	bd70      	pop	{r4, r5, r6, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800bf0e:	2400      	movs	r4, #0
 800bf10:	e9cd 4400 	strd	r4, r4, [sp]
 800bf14:	f7ff ff16 	bl	800bd44 <lwip_sendto>
}
 800bf18:	b006      	add	sp, #24
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
    set_errno(EBADF);
 800bf1c:	4b06      	ldr	r3, [pc, #24]	@ (800bf38 <lwip_send+0x8c>)
 800bf1e:	2209      	movs	r2, #9
 800bf20:	601a      	str	r2, [r3, #0]
    return -1;
 800bf22:	f04f 30ff 	mov.w	r0, #4294967295
 800bf26:	e7f0      	b.n	800bf0a <lwip_send+0x5e>
    set_errno(EBADF);
 800bf28:	4b03      	ldr	r3, [pc, #12]	@ (800bf38 <lwip_send+0x8c>)
 800bf2a:	2209      	movs	r2, #9
    return -1;
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 800bf30:	601a      	str	r2, [r3, #0]
}
 800bf32:	4770      	bx	lr
 800bf34:	20008e58 	.word	0x20008e58
 800bf38:	200101d0 	.word	0x200101d0

0800bf3c <lwip_socket>:
  switch (type) {
 800bf3c:	2902      	cmp	r1, #2
{
 800bf3e:	4613      	mov	r3, r2
 800bf40:	b510      	push	{r4, lr}
  switch (type) {
 800bf42:	d009      	beq.n	800bf58 <lwip_socket+0x1c>
 800bf44:	2903      	cmp	r1, #3
 800bf46:	d021      	beq.n	800bf8c <lwip_socket+0x50>
 800bf48:	2901      	cmp	r1, #1
 800bf4a:	d018      	beq.n	800bf7e <lwip_socket+0x42>
 800bf4c:	2316      	movs	r3, #22
    set_errno(ENOBUFS);
 800bf4e:	4a16      	ldr	r2, [pc, #88]	@ (800bfa8 <lwip_socket+0x6c>)
      return -1;
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(ENOBUFS);
 800bf54:	6013      	str	r3, [r2, #0]
}
 800bf56:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800bf58:	2a88      	cmp	r2, #136	@ 0x88
 800bf5a:	f04f 0100 	mov.w	r1, #0
 800bf5e:	4a13      	ldr	r2, [pc, #76]	@ (800bfac <lwip_socket+0x70>)
 800bf60:	bf14      	ite	ne
 800bf62:	2020      	movne	r0, #32
 800bf64:	2021      	moveq	r0, #33	@ 0x21
 800bf66:	f7ff fa31 	bl	800b3cc <netconn_new_with_proto_and_callback>
 800bf6a:	4604      	mov	r4, r0
  if (!conn) {
 800bf6c:	b1ac      	cbz	r4, 800bf9a <lwip_socket+0x5e>
  i = alloc_socket(conn, 0);
 800bf6e:	2100      	movs	r1, #0
 800bf70:	4620      	mov	r0, r4
 800bf72:	f7fd fdc9 	bl	8009b08 <alloc_socket>
  if (i == -1) {
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d011      	beq.n	800bf9e <lwip_socket+0x62>
  conn->socket = i;
 800bf7a:	61a0      	str	r0, [r4, #24]
}
 800bf7c:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800bf7e:	4a0b      	ldr	r2, [pc, #44]	@ (800bfac <lwip_socket+0x70>)
 800bf80:	2100      	movs	r1, #0
 800bf82:	2010      	movs	r0, #16
 800bf84:	f7ff fa22 	bl	800b3cc <netconn_new_with_proto_and_callback>
 800bf88:	4604      	mov	r4, r0
      break;
 800bf8a:	e7ef      	b.n	800bf6c <lwip_socket+0x30>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800bf8c:	4a07      	ldr	r2, [pc, #28]	@ (800bfac <lwip_socket+0x70>)
 800bf8e:	b2d9      	uxtb	r1, r3
 800bf90:	2040      	movs	r0, #64	@ 0x40
 800bf92:	f7ff fa1b 	bl	800b3cc <netconn_new_with_proto_and_callback>
 800bf96:	4604      	mov	r4, r0
      break;
 800bf98:	e7e8      	b.n	800bf6c <lwip_socket+0x30>
 800bf9a:	2369      	movs	r3, #105	@ 0x69
 800bf9c:	e7d7      	b.n	800bf4e <lwip_socket+0x12>
  if (conn == NULL) {
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7ff f852 	bl	800b048 <netconn_delete.part.0>
    return -1;
 800bfa4:	2317      	movs	r3, #23
 800bfa6:	e7d2      	b.n	800bf4e <lwip_socket+0x12>
 800bfa8:	200101d0 	.word	0x200101d0
 800bfac:	0800a72d 	.word	0x0800a72d

0800bfb0 <lwip_write>:
  return lwip_send(s, data, size, 0);
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f7ff bf7b 	b.w	800beac <lwip_send>
 800bfb6:	bf00      	nop

0800bfb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bfb8:	b580      	push	{r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bfba:	482f      	ldr	r0, [pc, #188]	@ (800c078 <tcpip_thread+0xc0>)
{
 800bfbc:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 800bfbe:	f009 fceb 	bl	8015998 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bfc2:	4b2e      	ldr	r3, [pc, #184]	@ (800c07c <tcpip_thread+0xc4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	b113      	cbz	r3, 800bfce <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 800bfc8:	4a2d      	ldr	r2, [pc, #180]	@ (800c080 <tcpip_thread+0xc8>)
 800bfca:	6810      	ldr	r0, [r2, #0]
 800bfcc:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bfce:	4d2a      	ldr	r5, [pc, #168]	@ (800c078 <tcpip_thread+0xc0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bfd0:	4e2c      	ldr	r6, [pc, #176]	@ (800c084 <tcpip_thread+0xcc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bfd2:	4f2d      	ldr	r7, [pc, #180]	@ (800c088 <tcpip_thread+0xd0>)
 800bfd4:	e010      	b.n	800bff8 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 800bfd6:	b168      	cbz	r0, 800bff4 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f009 fce3 	bl	80159a4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bfde:	4622      	mov	r2, r4
 800bfe0:	a901      	add	r1, sp, #4
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f009 fc4c 	bl	8015880 <sys_arch_mbox_fetch>
 800bfe8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800bfea:	4628      	mov	r0, r5
 800bfec:	f009 fcd4 	bl	8015998 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bff0:	3401      	adds	r4, #1
 800bff2:	d111      	bne.n	800c018 <tcpip_thread+0x60>
    sys_check_timeouts();
 800bff4:	f008 ff68 	bl	8014ec8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 800bff8:	f008 ff8e 	bl	8014f18 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bffc:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800bffe:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c000:	d1e9      	bne.n	800bfd6 <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 800c002:	4628      	mov	r0, r5
 800c004:	f009 fcce 	bl	80159a4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c008:	2200      	movs	r2, #0
 800c00a:	a901      	add	r1, sp, #4
 800c00c:	4630      	mov	r0, r6
 800c00e:	f009 fc37 	bl	8015880 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c012:	4628      	mov	r0, r5
 800c014:	f009 fcc0 	bl	8015998 <sys_mutex_lock>
    if (msg == NULL) {
 800c018:	9c01      	ldr	r4, [sp, #4]
 800c01a:	b164      	cbz	r4, 800c036 <tcpip_thread+0x7e>
  switch (msg->type) {
 800c01c:	7823      	ldrb	r3, [r4, #0]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d01e      	beq.n	800c060 <tcpip_thread+0xa8>
 800c022:	2b02      	cmp	r3, #2
 800c024:	d018      	beq.n	800c058 <tcpip_thread+0xa0>
 800c026:	b16b      	cbz	r3, 800c044 <tcpip_thread+0x8c>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c028:	463b      	mov	r3, r7
 800c02a:	22cf      	movs	r2, #207	@ 0xcf
 800c02c:	4917      	ldr	r1, [pc, #92]	@ (800c08c <tcpip_thread+0xd4>)
 800c02e:	4818      	ldr	r0, [pc, #96]	@ (800c090 <tcpip_thread+0xd8>)
 800c030:	f00a fa44 	bl	80164bc <iprintf>
      break;
 800c034:	e7e0      	b.n	800bff8 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c036:	463b      	mov	r3, r7
 800c038:	2291      	movs	r2, #145	@ 0x91
 800c03a:	4914      	ldr	r1, [pc, #80]	@ (800c08c <tcpip_thread+0xd4>)
 800c03c:	4814      	ldr	r0, [pc, #80]	@ (800c090 <tcpip_thread+0xd8>)
 800c03e:	f00a fa3d 	bl	80164bc <iprintf>
      continue;
 800c042:	e7d9      	b.n	800bff8 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c044:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800c048:	6860      	ldr	r0, [r4, #4]
 800c04a:	4798      	blx	r3
 800c04c:	b980      	cbnz	r0, 800c070 <tcpip_thread+0xb8>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c04e:	4621      	mov	r1, r4
 800c050:	2009      	movs	r0, #9
 800c052:	f003 ff99 	bl	800ff88 <memp_free>
      break;
 800c056:	e7cf      	b.n	800bff8 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c058:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c05c:	4798      	blx	r3
      break;
 800c05e:	e7cb      	b.n	800bff8 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c060:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c064:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c066:	4621      	mov	r1, r4
 800c068:	2008      	movs	r0, #8
 800c06a:	f003 ff8d 	bl	800ff88 <memp_free>
      break;
 800c06e:	e7c3      	b.n	800bff8 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 800c070:	6860      	ldr	r0, [r4, #4]
 800c072:	f004 fa6f 	bl	8010554 <pbuf_free>
 800c076:	e7ea      	b.n	800c04e <tcpip_thread+0x96>
 800c078:	20008ec8 	.word	0x20008ec8
 800c07c:	20008ed4 	.word	0x20008ed4
 800c080:	20008ed0 	.word	0x20008ed0
 800c084:	20008ecc 	.word	0x20008ecc
 800c088:	08019b9c 	.word	0x08019b9c
 800c08c:	08019c10 	.word	0x08019c10
 800c090:	080187f8 	.word	0x080187f8

0800c094 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c098:	4811      	ldr	r0, [pc, #68]	@ (800c0e0 <tcpip_inpkt+0x4c>)
{
 800c09a:	460e      	mov	r6, r1
 800c09c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c09e:	f009 fc19 	bl	80158d4 <sys_mbox_valid>
 800c0a2:	b178      	cbz	r0, 800c0c4 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c0a4:	2009      	movs	r0, #9
 800c0a6:	f003 ff29 	bl	800fefc <memp_malloc>
  if (msg == NULL) {
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	b1a8      	cbz	r0, 800c0da <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800c0ae:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800c0b0:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800c0b2:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c0b4:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 800c0b6:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c0b8:	4809      	ldr	r0, [pc, #36]	@ (800c0e0 <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 800c0ba:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c0bc:	f009 fbd0 	bl	8015860 <sys_mbox_trypost>
 800c0c0:	b938      	cbnz	r0, 800c0d2 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c0c4:	4b07      	ldr	r3, [pc, #28]	@ (800c0e4 <tcpip_inpkt+0x50>)
 800c0c6:	22fc      	movs	r2, #252	@ 0xfc
 800c0c8:	4907      	ldr	r1, [pc, #28]	@ (800c0e8 <tcpip_inpkt+0x54>)
 800c0ca:	4808      	ldr	r0, [pc, #32]	@ (800c0ec <tcpip_inpkt+0x58>)
 800c0cc:	f00a f9f6 	bl	80164bc <iprintf>
 800c0d0:	e7e8      	b.n	800c0a4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	2009      	movs	r0, #9
 800c0d6:	f003 ff57 	bl	800ff88 <memp_free>
    return ERR_MEM;
 800c0da:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e0:	20008ecc 	.word	0x20008ecc
 800c0e4:	08019b9c 	.word	0x08019b9c
 800c0e8:	08019c30 	.word	0x08019c30
 800c0ec:	080187f8 	.word	0x080187f8

0800c0f0 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c0f0:	f891 3035 	ldrb.w	r3, [r1, #53]	@ 0x35
 800c0f4:	f013 0f18 	tst.w	r3, #24
 800c0f8:	d002      	beq.n	800c100 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c0fa:	4a03      	ldr	r2, [pc, #12]	@ (800c108 <tcpip_input+0x18>)
 800c0fc:	f7ff bfca 	b.w	800c094 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c100:	4a02      	ldr	r2, [pc, #8]	@ (800c10c <tcpip_input+0x1c>)
 800c102:	f7ff bfc7 	b.w	800c094 <tcpip_inpkt>
 800c106:	bf00      	nop
 800c108:	0801571d 	.word	0x0801571d
 800c10c:	0800e9f9 	.word	0x0800e9f9

0800c110 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c114:	4811      	ldr	r0, [pc, #68]	@ (800c15c <tcpip_try_callback+0x4c>)
{
 800c116:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c118:	f009 fbdc 	bl	80158d4 <sys_mbox_valid>
 800c11c:	b170      	cbz	r0, 800c13c <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c11e:	2008      	movs	r0, #8
 800c120:	f003 feec 	bl	800fefc <memp_malloc>
  if (msg == NULL) {
 800c124:	4604      	mov	r4, r0
 800c126:	b1a8      	cbz	r0, 800c154 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c128:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c12a:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800c12c:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c130:	480a      	ldr	r0, [pc, #40]	@ (800c15c <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 800c132:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c134:	f009 fb94 	bl	8015860 <sys_mbox_trypost>
 800c138:	b940      	cbnz	r0, 800c14c <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c13c:	4b08      	ldr	r3, [pc, #32]	@ (800c160 <tcpip_try_callback+0x50>)
 800c13e:	f240 125d 	movw	r2, #349	@ 0x15d
 800c142:	4908      	ldr	r1, [pc, #32]	@ (800c164 <tcpip_try_callback+0x54>)
 800c144:	4808      	ldr	r0, [pc, #32]	@ (800c168 <tcpip_try_callback+0x58>)
 800c146:	f00a f9b9 	bl	80164bc <iprintf>
 800c14a:	e7e8      	b.n	800c11e <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c14c:	4621      	mov	r1, r4
 800c14e:	2008      	movs	r0, #8
 800c150:	f003 ff1a 	bl	800ff88 <memp_free>
    return ERR_MEM;
 800c154:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	bf00      	nop
 800c15c:	20008ecc 	.word	0x20008ecc
 800c160:	08019b9c 	.word	0x08019b9c
 800c164:	08019c30 	.word	0x08019c30
 800c168:	080187f8 	.word	0x080187f8

0800c16c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c16c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c16e:	4e06      	ldr	r6, [pc, #24]	@ (800c188 <tcpip_send_msg_wait_sem+0x1c>)
{
 800c170:	460d      	mov	r5, r1
 800c172:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c174:	4630      	mov	r0, r6
 800c176:	f009 fc0f 	bl	8015998 <sys_mutex_lock>
  fn(apimsg);
 800c17a:	4628      	mov	r0, r5
 800c17c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800c17e:	4630      	mov	r0, r6
 800c180:	f009 fc10 	bl	80159a4 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c184:	2000      	movs	r0, #0
 800c186:	bd70      	pop	{r4, r5, r6, pc}
 800c188:	20008ec8 	.word	0x20008ec8

0800c18c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800c18c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800c18e:	4e07      	ldr	r6, [pc, #28]	@ (800c1ac <tcpip_api_call+0x20>)
{
 800c190:	460d      	mov	r5, r1
 800c192:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c194:	4630      	mov	r0, r6
 800c196:	f009 fbff 	bl	8015998 <sys_mutex_lock>
  err = fn(call);
 800c19a:	4628      	mov	r0, r5
 800c19c:	47a0      	blx	r4
 800c19e:	4604      	mov	r4, r0
  UNLOCK_TCPIP_CORE();
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f009 fbff 	bl	80159a4 <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	bd70      	pop	{r4, r5, r6, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20008ec8 	.word	0x20008ec8

0800c1b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c1b0:	b530      	push	{r4, r5, lr}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460c      	mov	r4, r1
  lwip_init();
 800c1b8:	f003 fb82 	bl	800f8c0 <lwip_init>

  tcpip_init_done = initfunc;
 800c1bc:	4a15      	ldr	r2, [pc, #84]	@ (800c214 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c1be:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800c1c0:	4b15      	ldr	r3, [pc, #84]	@ (800c218 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c1c2:	4816      	ldr	r0, [pc, #88]	@ (800c21c <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800c1c4:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800c1c6:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c1c8:	f009 fb32 	bl	8015830 <sys_mbox_new>
 800c1cc:	b970      	cbnz	r0, 800c1ec <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c1ce:	4814      	ldr	r0, [pc, #80]	@ (800c220 <tcpip_init+0x70>)
 800c1d0:	f009 fbd6 	bl	8015980 <sys_mutex_new>
 800c1d4:	b9b0      	cbnz	r0, 800c204 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c1d6:	2428      	movs	r4, #40	@ 0x28
 800c1d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4911      	ldr	r1, [pc, #68]	@ (800c224 <tcpip_init+0x74>)
 800c1e0:	9400      	str	r4, [sp, #0]
 800c1e2:	4811      	ldr	r0, [pc, #68]	@ (800c228 <tcpip_init+0x78>)
 800c1e4:	f009 fbe2 	bl	80159ac <sys_thread_new>
}
 800c1e8:	b003      	add	sp, #12
 800c1ea:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c22c <tcpip_init+0x7c>)
 800c1ee:	f240 2261 	movw	r2, #609	@ 0x261
 800c1f2:	490f      	ldr	r1, [pc, #60]	@ (800c230 <tcpip_init+0x80>)
 800c1f4:	480f      	ldr	r0, [pc, #60]	@ (800c234 <tcpip_init+0x84>)
 800c1f6:	f00a f961 	bl	80164bc <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c1fa:	4809      	ldr	r0, [pc, #36]	@ (800c220 <tcpip_init+0x70>)
 800c1fc:	f009 fbc0 	bl	8015980 <sys_mutex_new>
 800c200:	2800      	cmp	r0, #0
 800c202:	d0e8      	beq.n	800c1d6 <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c204:	4b09      	ldr	r3, [pc, #36]	@ (800c22c <tcpip_init+0x7c>)
 800c206:	f240 2265 	movw	r2, #613	@ 0x265
 800c20a:	490b      	ldr	r1, [pc, #44]	@ (800c238 <tcpip_init+0x88>)
 800c20c:	4809      	ldr	r0, [pc, #36]	@ (800c234 <tcpip_init+0x84>)
 800c20e:	f00a f955 	bl	80164bc <iprintf>
 800c212:	e7e0      	b.n	800c1d6 <tcpip_init+0x26>
 800c214:	20008ed4 	.word	0x20008ed4
 800c218:	20008ed0 	.word	0x20008ed0
 800c21c:	20008ecc 	.word	0x20008ecc
 800c220:	20008ec8 	.word	0x20008ec8
 800c224:	0800bfb9 	.word	0x0800bfb9
 800c228:	08019c88 	.word	0x08019c88
 800c22c:	08019b9c 	.word	0x08019b9c
 800c230:	08019c40 	.word	0x08019c40
 800c234:	080187f8 	.word	0x080187f8
 800c238:	08019c64 	.word	0x08019c64

0800c23c <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c23e:	1d07      	adds	r7, r0, #4
{
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c246:	2f44      	cmp	r7, #68	@ 0x44
 800c248:	d80e      	bhi.n	800c268 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c24a:	0e33      	lsrs	r3, r6, #24
 800c24c:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c24e:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c250:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c252:	b292      	uxth	r2, r2
 800c254:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c256:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c258:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c25a:	0a32      	lsrs	r2, r6, #8
 800c25c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c25e:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c260:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 800c262:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c264:	552e      	strb	r6, [r5, r4]
}
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c268:	4b03      	ldr	r3, [pc, #12]	@ (800c278 <dhcp_option_long+0x3c>)
 800c26a:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800c26e:	4903      	ldr	r1, [pc, #12]	@ (800c27c <dhcp_option_long+0x40>)
 800c270:	4803      	ldr	r0, [pc, #12]	@ (800c280 <dhcp_option_long+0x44>)
 800c272:	f00a f923 	bl	80164bc <iprintf>
 800c276:	e7e8      	b.n	800c24a <dhcp_option_long+0xe>
 800c278:	08019c90 	.word	0x08019c90
 800c27c:	08019d08 	.word	0x08019d08
 800c280:	080187f8 	.word	0x080187f8

0800c284 <dhcp_check>:
{
 800c284:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c286:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (new_state != dhcp->state) {
 800c288:	7963      	ldrb	r3, [r4, #5]
 800c28a:	2b08      	cmp	r3, #8
 800c28c:	d004      	beq.n	800c298 <dhcp_check+0x14>
    dhcp->state = new_state;
 800c28e:	2208      	movs	r2, #8
    dhcp->request_timeout = 0;
 800c290:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800c292:	f8a4 2005 	strh.w	r2, [r4, #5]
    dhcp->request_timeout = 0;
 800c296:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c298:	2200      	movs	r2, #0
 800c29a:	f104 011c 	add.w	r1, r4, #28
 800c29e:	f001 fde5 	bl	800de6c <etharp_query>
  if (dhcp->tries < 255) {
 800c2a2:	79a3      	ldrb	r3, [r4, #6]
 800c2a4:	2bff      	cmp	r3, #255	@ 0xff
 800c2a6:	d001      	beq.n	800c2ac <dhcp_check+0x28>
    dhcp->tries++;
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	8123      	strh	r3, [r4, #8]
}
 800c2b0:	bd10      	pop	{r4, pc}
 800c2b2:	bf00      	nop

0800c2b4 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d07e      	beq.n	800c3b6 <dhcp_bind+0x102>
  dhcp = netif_dhcp_data(netif);
 800c2b8:	6a41      	ldr	r1, [r0, #36]	@ 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c2ba:	2900      	cmp	r1, #0
 800c2bc:	f000 8082 	beq.w	800c3c4 <dhcp_bind+0x110>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c2c0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  dhcp->lease_used = 0;
 800c2c2:	2200      	movs	r2, #0
{
 800c2c4:	b510      	push	{r4, lr}
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c2c6:	1c5c      	adds	r4, r3, #1
{
 800c2c8:	b082      	sub	sp, #8
  dhcp->lease_used = 0;
 800c2ca:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c2cc:	d007      	beq.n	800c2de <dhcp_bind+0x2a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c2ce:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800c2d0:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 800c2d4:	d244      	bcs.n	800c360 <dhcp_bind+0xac>
    if (dhcp->t0_timeout == 0) {
 800c2d6:	2b3b      	cmp	r3, #59	@ 0x3b
 800c2d8:	d87b      	bhi.n	800c3d2 <dhcp_bind+0x11e>
      dhcp->t0_timeout = 1;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c2de:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	d043      	beq.n	800c36c <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c2e4:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800c2e6:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 800c2ea:	d235      	bcs.n	800c358 <dhcp_bind+0xa4>
    if (dhcp->t1_timeout == 0) {
 800c2ec:	2b3b      	cmp	r3, #59	@ 0x3b
 800c2ee:	f200 8081 	bhi.w	800c3f4 <dhcp_bind+0x140>
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	4613      	mov	r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 800c2f6:	814a      	strh	r2, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c2f8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c2fa:	81cb      	strh	r3, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c2fc:	1c54      	adds	r4, r2, #1
 800c2fe:	d039      	beq.n	800c374 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c300:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 800c302:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 800c306:	d249      	bcs.n	800c39c <dhcp_bind+0xe8>
    if (dhcp->t2_timeout == 0) {
 800c308:	2a3b      	cmp	r2, #59	@ 0x3b
 800c30a:	d868      	bhi.n	800c3de <dhcp_bind+0x12a>
 800c30c:	f04f 0e01 	mov.w	lr, #1
 800c310:	f04f 0c00 	mov.w	ip, #0
 800c314:	4672      	mov	r2, lr
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c316:	459c      	cmp	ip, r3
    dhcp->t2_timeout = (u16_t)timeout;
 800c318:	f8a1 e00c 	strh.w	lr, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c31c:	820a      	strh	r2, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c31e:	d331      	bcc.n	800c384 <dhcp_bind+0xd0>
  if (dhcp->subnet_mask_given) {
 800c320:	79cb      	ldrb	r3, [r1, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d033      	beq.n	800c38e <dhcp_bind+0xda>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c326:	6a0b      	ldr	r3, [r1, #32]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c328:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800c32a:	e9cd 3200 	strd	r3, r2, [sp]
  if (ip4_addr_isany_val(gw_addr)) {
 800c32e:	b922      	cbnz	r2, 800c33a <dhcp_bind+0x86>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c330:	69ca      	ldr	r2, [r1, #28]
 800c332:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c338:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 800c33a:	794b      	ldrb	r3, [r1, #5]
 800c33c:	2b0a      	cmp	r3, #10
 800c33e:	d004      	beq.n	800c34a <dhcp_bind+0x96>
    dhcp->state = new_state;
 800c340:	220a      	movs	r2, #10
    dhcp->request_timeout = 0;
 800c342:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800c344:	f8a1 2005 	strh.w	r2, [r1, #5]
    dhcp->request_timeout = 0;
 800c348:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c34a:	ab01      	add	r3, sp, #4
 800c34c:	466a      	mov	r2, sp
 800c34e:	311c      	adds	r1, #28
 800c350:	f003 fe78 	bl	8010044 <netif_set_addr>
}
 800c354:	b002      	add	sp, #8
 800c356:	bd10      	pop	{r4, pc}
 800c358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c35c:	4613      	mov	r3, r2
 800c35e:	e7ca      	b.n	800c2f6 <dhcp_bind+0x42>
    dhcp->t0_timeout = (u16_t)timeout;
 800c360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c364:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c366:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	d1bb      	bne.n	800c2e4 <dhcp_bind+0x30>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c36c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c36e:	894b      	ldrh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c370:	1c54      	adds	r4, r2, #1
 800c372:	d1c5      	bne.n	800c300 <dhcp_bind+0x4c>
 800c374:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 800c378:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c37c:	fa1f fc8c 	uxth.w	ip, ip
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c380:	459c      	cmp	ip, r3
 800c382:	d2cd      	bcs.n	800c320 <dhcp_bind+0x6c>
    dhcp->t1_timeout = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 800c388:	79cb      	ldrb	r3, [r1, #7]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1cb      	bne.n	800c326 <dhcp_bind+0x72>
    if (first_octet <= 127) {
 800c38e:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c392:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 800c394:	2b00      	cmp	r3, #0
 800c396:	db07      	blt.n	800c3a8 <dhcp_bind+0xf4>
 800c398:	23ff      	movs	r3, #255	@ 0xff
 800c39a:	e7c5      	b.n	800c328 <dhcp_bind+0x74>
 800c39c:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800c3a0:	f64f 7cfe 	movw	ip, #65534	@ 0xfffe
 800c3a4:	4672      	mov	r2, lr
 800c3a6:	e7b6      	b.n	800c316 <dhcp_bind+0x62>
    } else if (first_octet >= 192) {
 800c3a8:	2abf      	cmp	r2, #191	@ 0xbf
 800c3aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3ae:	bf88      	it	hi
 800c3b0:	f06f 437f 	mvnhi.w	r3, #4278190080	@ 0xff000000
 800c3b4:	e7b8      	b.n	800c328 <dhcp_bind+0x74>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c3b6:	4b13      	ldr	r3, [pc, #76]	@ (800c404 <dhcp_bind+0x150>)
 800c3b8:	f240 4215 	movw	r2, #1045	@ 0x415
 800c3bc:	4912      	ldr	r1, [pc, #72]	@ (800c408 <dhcp_bind+0x154>)
 800c3be:	4813      	ldr	r0, [pc, #76]	@ (800c40c <dhcp_bind+0x158>)
 800c3c0:	f00a b87c 	b.w	80164bc <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c404 <dhcp_bind+0x150>)
 800c3c6:	f240 4217 	movw	r2, #1047	@ 0x417
 800c3ca:	4911      	ldr	r1, [pc, #68]	@ (800c410 <dhcp_bind+0x15c>)
 800c3cc:	480f      	ldr	r0, [pc, #60]	@ (800c40c <dhcp_bind+0x158>)
 800c3ce:	f00a b875 	b.w	80164bc <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c3d2:	4a10      	ldr	r2, [pc, #64]	@ (800c414 <dhcp_bind+0x160>)
 800c3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d8:	095b      	lsrs	r3, r3, #5
    dhcp->t0_timeout = (u16_t)timeout;
 800c3da:	828b      	strh	r3, [r1, #20]
 800c3dc:	e77f      	b.n	800c2de <dhcp_bind+0x2a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c3de:	4c0d      	ldr	r4, [pc, #52]	@ (800c414 <dhcp_bind+0x160>)
 800c3e0:	fba4 4202 	umull	r4, r2, r4, r2
    dhcp->t2_timeout = (u16_t)timeout;
 800c3e4:	f3c2 124f 	ubfx	r2, r2, #5, #16
 800c3e8:	f102 3cff 	add.w	ip, r2, #4294967295
 800c3ec:	4696      	mov	lr, r2
 800c3ee:	fa1f fc8c 	uxth.w	ip, ip
 800c3f2:	e790      	b.n	800c316 <dhcp_bind+0x62>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c3f4:	4a07      	ldr	r2, [pc, #28]	@ (800c414 <dhcp_bind+0x160>)
 800c3f6:	fba2 2303 	umull	r2, r3, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 800c3fa:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800c3fe:	461a      	mov	r2, r3
 800c400:	e779      	b.n	800c2f6 <dhcp_bind+0x42>
 800c402:	bf00      	nop
 800c404:	08019c90 	.word	0x08019c90
 800c408:	08019d44 	.word	0x08019d44
 800c40c:	080187f8 	.word	0x080187f8
 800c410:	08019d60 	.word	0x08019d60
 800c414:	88888889 	.word	0x88888889

0800c418 <dhcp_inc_pcb_refcount>:
{
 800c418:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800c41a:	4c15      	ldr	r4, [pc, #84]	@ (800c470 <dhcp_inc_pcb_refcount+0x58>)
 800c41c:	7823      	ldrb	r3, [r4, #0]
 800c41e:	b9fb      	cbnz	r3, 800c460 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c420:	4d14      	ldr	r5, [pc, #80]	@ (800c474 <dhcp_inc_pcb_refcount+0x5c>)
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b12b      	cbz	r3, 800c432 <dhcp_inc_pcb_refcount+0x1a>
 800c426:	4b14      	ldr	r3, [pc, #80]	@ (800c478 <dhcp_inc_pcb_refcount+0x60>)
 800c428:	22e5      	movs	r2, #229	@ 0xe5
 800c42a:	4914      	ldr	r1, [pc, #80]	@ (800c47c <dhcp_inc_pcb_refcount+0x64>)
 800c42c:	4814      	ldr	r0, [pc, #80]	@ (800c480 <dhcp_inc_pcb_refcount+0x68>)
 800c42e:	f00a f845 	bl	80164bc <iprintf>
    dhcp_pcb = udp_new();
 800c432:	f009 f937 	bl	80156a4 <udp_new>
 800c436:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 800c438:	b1b0      	cbz	r0, 800c468 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c43a:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c43c:	4911      	ldr	r1, [pc, #68]	@ (800c484 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c43e:	f042 0220 	orr.w	r2, r2, #32
 800c442:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c444:	2244      	movs	r2, #68	@ 0x44
 800c446:	f008 fe85 	bl	8015154 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c44a:	2243      	movs	r2, #67	@ 0x43
 800c44c:	490d      	ldr	r1, [pc, #52]	@ (800c484 <dhcp_inc_pcb_refcount+0x6c>)
 800c44e:	6828      	ldr	r0, [r5, #0]
 800c450:	f009 f896 	bl	8015580 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c454:	2200      	movs	r2, #0
 800c456:	490c      	ldr	r1, [pc, #48]	@ (800c488 <dhcp_inc_pcb_refcount+0x70>)
 800c458:	6828      	ldr	r0, [r5, #0]
 800c45a:	f009 f8eb 	bl	8015634 <udp_recv>
  dhcp_pcb_refcount++;
 800c45e:	7823      	ldrb	r3, [r4, #0]
 800c460:	3301      	adds	r3, #1
  return ERR_OK;
 800c462:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 800c464:	7023      	strb	r3, [r4, #0]
}
 800c466:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	bf00      	nop
 800c470:	20008edc 	.word	0x20008edc
 800c474:	20008ee0 	.word	0x20008ee0
 800c478:	08019c90 	.word	0x08019c90
 800c47c:	08019d78 	.word	0x08019d78
 800c480:	080187f8 	.word	0x080187f8
 800c484:	0801a7a0 	.word	0x0801a7a0
 800c488:	0800cc55 	.word	0x0800cc55

0800c48c <dhcp_dec_pcb_refcount>:
{
 800c48c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c48e:	4d0b      	ldr	r5, [pc, #44]	@ (800c4bc <dhcp_dec_pcb_refcount+0x30>)
 800c490:	782c      	ldrb	r4, [r5, #0]
 800c492:	b154      	cbz	r4, 800c4aa <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 800c494:	3c01      	subs	r4, #1
 800c496:	b2e4      	uxtb	r4, r4
 800c498:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 800c49a:	b104      	cbz	r4, 800c49e <dhcp_dec_pcb_refcount+0x12>
}
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 800c49e:	4d08      	ldr	r5, [pc, #32]	@ (800c4c0 <dhcp_dec_pcb_refcount+0x34>)
 800c4a0:	6828      	ldr	r0, [r5, #0]
 800c4a2:	f009 f8d9 	bl	8015658 <udp_remove>
    dhcp_pcb = NULL;
 800c4a6:	602c      	str	r4, [r5, #0]
}
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c4aa:	4b06      	ldr	r3, [pc, #24]	@ (800c4c4 <dhcp_dec_pcb_refcount+0x38>)
 800c4ac:	22ff      	movs	r2, #255	@ 0xff
 800c4ae:	4906      	ldr	r1, [pc, #24]	@ (800c4c8 <dhcp_dec_pcb_refcount+0x3c>)
 800c4b0:	4806      	ldr	r0, [pc, #24]	@ (800c4cc <dhcp_dec_pcb_refcount+0x40>)
 800c4b2:	f00a f803 	bl	80164bc <iprintf>
  dhcp_pcb_refcount--;
 800c4b6:	782c      	ldrb	r4, [r5, #0]
 800c4b8:	e7ec      	b.n	800c494 <dhcp_dec_pcb_refcount+0x8>
 800c4ba:	bf00      	nop
 800c4bc:	20008edc 	.word	0x20008edc
 800c4c0:	20008ee0 	.word	0x20008ee0
 800c4c4:	08019c90 	.word	0x08019c90
 800c4c8:	08019da0 	.word	0x08019da0
 800c4cc:	080187f8 	.word	0x080187f8

0800c4d0 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800c4d0:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c4d2:	4d1d      	ldr	r5, [pc, #116]	@ (800c548 <dhcp_handle_ack.isra.0+0x78>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c4d4:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800c4d6:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c4d8:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c4da:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c4de:	b112      	cbz	r2, 800c4e6 <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800c4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c54c <dhcp_handle_ack.isra.0+0x7c>)
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800c4e6:	792b      	ldrb	r3, [r5, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d029      	beq.n	800c540 <dhcp_handle_ack.isra.0+0x70>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800c4ec:	4b17      	ldr	r3, [pc, #92]	@ (800c54c <dhcp_handle_ack.isra.0+0x7c>)
 800c4ee:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800c4f0:	796a      	ldrb	r2, [r5, #5]
 800c4f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4f4:	b152      	cbz	r2, 800c50c <dhcp_handle_ack.isra.0+0x3c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800c4f6:	4b15      	ldr	r3, [pc, #84]	@ (800c54c <dhcp_handle_ack.isra.0+0x7c>)
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	6323      	str	r3, [r4, #48]	@ 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c4fc:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c4fe:	690a      	ldr	r2, [r1, #16]
 800c500:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c502:	b96b      	cbnz	r3, 800c520 <dhcp_handle_ack.isra.0+0x50>
    dhcp->subnet_mask_given = 1;
 800c504:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800c506:	79eb      	ldrb	r3, [r5, #7]
 800c508:	b9a3      	cbnz	r3, 800c534 <dhcp_handle_ack.isra.0+0x64>
}
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800c50c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c50e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	6323      	str	r3, [r4, #48]	@ 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c516:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c518:	690a      	ldr	r2, [r1, #16]
 800c51a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f1      	beq.n	800c504 <dhcp_handle_ack.isra.0+0x34>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800c520:	4b0a      	ldr	r3, [pc, #40]	@ (800c54c <dhcp_handle_ack.isra.0+0x7c>)
 800c522:	6998      	ldr	r0, [r3, #24]
 800c524:	f003 f98a 	bl	800f83c <lwip_htonl>
 800c528:	2301      	movs	r3, #1
 800c52a:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 800c52c:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800c52e:	79eb      	ldrb	r3, [r5, #7]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0ea      	beq.n	800c50a <dhcp_handle_ack.isra.0+0x3a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <dhcp_handle_ack.isra.0+0x7c>)
 800c536:	69d8      	ldr	r0, [r3, #28]
 800c538:	f003 f980 	bl	800f83c <lwip_htonl>
 800c53c:	6260      	str	r0, [r4, #36]	@ 0x24
}
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800c540:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c542:	085b      	lsrs	r3, r3, #1
 800c544:	e7d4      	b.n	800c4f0 <dhcp_handle_ack.isra.0+0x20>
 800c546:	bf00      	nop
 800c548:	20008ee4 	.word	0x20008ee4
 800c54c:	20008eec 	.word	0x20008eec

0800c550 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800c554:	2800      	cmp	r0, #0
 800c556:	f000 8095 	beq.w	800c684 <dhcp_create_msg+0x134>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800c55a:	460c      	mov	r4, r1
 800c55c:	2900      	cmp	r1, #0
 800c55e:	f000 8088 	beq.w	800c672 <dhcp_create_msg+0x122>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800c562:	4681      	mov	r9, r0
 800c564:	4616      	mov	r6, r2
 800c566:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800c56a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c56e:	2036      	movs	r0, #54	@ 0x36
 800c570:	461f      	mov	r7, r3
 800c572:	f004 f85f 	bl	8010634 <pbuf_alloc>
  if (p_out == NULL) {
 800c576:	4605      	mov	r5, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	f000 8081 	beq.w	800c680 <dhcp_create_msg+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800c57e:	8943      	ldrh	r3, [r0, #10]
 800c580:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800c584:	d36a      	bcc.n	800c65c <dhcp_create_msg+0x10c>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800c586:	2e03      	cmp	r6, #3
 800c588:	d04b      	beq.n	800c622 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800c58a:	79a3      	ldrb	r3, [r4, #6]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d043      	beq.n	800c618 <dhcp_create_msg+0xc8>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800c590:	4b40      	ldr	r3, [pc, #256]	@ (800c694 <dhcp_create_msg+0x144>)
 800c592:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800c594:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800c598:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800c59c:	2100      	movs	r1, #0
    dhcp->xid = xid;
 800c59e:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	f00a f91d 	bl	80167e0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800c5a6:	f240 1301 	movw	r3, #257	@ 0x101
 800c5aa:	f8a8 3000 	strh.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
  msg_out->hlen = netif->hwaddr_len;
 800c5ae:	f899 3034 	ldrb.w	r3, [r9, #52]	@ 0x34
 800c5b2:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800c5b6:	6820      	ldr	r0, [r4, #0]
 800c5b8:	f003 f940 	bl	800f83c <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800c5bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  msg_out->xid = lwip_htonl(dhcp->xid);
 800c5c0:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800c5c4:	40f3      	lsrs	r3, r6
 800c5c6:	07db      	lsls	r3, r3, #31
 800c5c8:	d550      	bpl.n	800c66c <dhcp_create_msg+0x11c>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800c5ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c5ce:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800c5d2:	f109 012d 	add.w	r1, r9, #45	@ 0x2d
 800c5d6:	f109 0433 	add.w	r4, r9, #51	@ 0x33
 800c5da:	f108 0c1b 	add.w	ip, r8, #27
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800c5de:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800c5e2:	42a1      	cmp	r1, r4
    msg_out->chaddr[i] = netif->hwaddr[i];
 800c5e4:	f80c ef01 	strb.w	lr, [ip, #1]!
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800c5e8:	d1f9      	bne.n	800c5de <dhcp_create_msg+0x8e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800c5ea:	2363      	movs	r3, #99	@ 0x63
 800c5ec:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
  options[options_out_len++] = value;
 800c5f0:	f888 60f2 	strb.w	r6, [r8, #242]	@ 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800c5f4:	f888 30ec 	strb.w	r3, [r8, #236]	@ 0xec
 800c5f8:	f888 30ef 	strb.w	r3, [r8, #239]	@ 0xef
  options[options_out_len++] = option_type;
 800c5fc:	f240 1335 	movw	r3, #309	@ 0x135
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800c600:	f888 20ed 	strb.w	r2, [r8, #237]	@ 0xed
 800c604:	2253      	movs	r2, #83	@ 0x53
  options[options_out_len++] = option_type;
 800c606:	f8a8 30f0 	strh.w	r3, [r8, #240]	@ 0xf0
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 800c60a:	2303      	movs	r3, #3
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800c60c:	f888 20ee 	strb.w	r2, [r8, #238]	@ 0xee
    *options_out_len = options_out_len_loc;
 800c610:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 800c612:	4628      	mov	r0, r5
 800c614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 800c618:	f009 fa18 	bl	8015a4c <rand>
 800c61c:	4b1d      	ldr	r3, [pc, #116]	@ (800c694 <dhcp_create_msg+0x144>)
 800c61e:	6018      	str	r0, [r3, #0]
 800c620:	e7b8      	b.n	800c594 <dhcp_create_msg+0x44>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800c622:	7963      	ldrb	r3, [r4, #5]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d0b0      	beq.n	800c58a <dhcp_create_msg+0x3a>
  msg_out = (struct dhcp_msg *)p_out->payload;
 800c628:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800c62c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800c630:	2100      	movs	r1, #0
 800c632:	4640      	mov	r0, r8
 800c634:	f00a f8d4 	bl	80167e0 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 800c638:	f240 1301 	movw	r3, #257	@ 0x101
 800c63c:	f8a8 3000 	strh.w	r3, [r8]
  msg_out->hlen = netif->hwaddr_len;
 800c640:	f899 3034 	ldrb.w	r3, [r9, #52]	@ 0x34
 800c644:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800c648:	6820      	ldr	r0, [r4, #0]
 800c64a:	f003 f8f7 	bl	800f83c <lwip_htonl>
 800c64e:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800c652:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800c654:	3b04      	subs	r3, #4
 800c656:	2b01      	cmp	r3, #1
 800c658:	d8bb      	bhi.n	800c5d2 <dhcp_create_msg+0x82>
 800c65a:	e7b6      	b.n	800c5ca <dhcp_create_msg+0x7a>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800c65c:	4b0e      	ldr	r3, [pc, #56]	@ (800c698 <dhcp_create_msg+0x148>)
 800c65e:	f240 7271 	movw	r2, #1905	@ 0x771
 800c662:	490e      	ldr	r1, [pc, #56]	@ (800c69c <dhcp_create_msg+0x14c>)
 800c664:	480e      	ldr	r0, [pc, #56]	@ (800c6a0 <dhcp_create_msg+0x150>)
 800c666:	f009 ff29 	bl	80164bc <iprintf>
 800c66a:	e78c      	b.n	800c586 <dhcp_create_msg+0x36>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800c66c:	2e03      	cmp	r6, #3
 800c66e:	d1b0      	bne.n	800c5d2 <dhcp_create_msg+0x82>
 800c670:	e7ef      	b.n	800c652 <dhcp_create_msg+0x102>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800c672:	4b09      	ldr	r3, [pc, #36]	@ (800c698 <dhcp_create_msg+0x148>)
 800c674:	f240 726a 	movw	r2, #1898	@ 0x76a
 800c678:	490a      	ldr	r1, [pc, #40]	@ (800c6a4 <dhcp_create_msg+0x154>)
 800c67a:	4809      	ldr	r0, [pc, #36]	@ (800c6a0 <dhcp_create_msg+0x150>)
 800c67c:	f009 ff1e 	bl	80164bc <iprintf>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800c680:	2500      	movs	r5, #0
 800c682:	e7c6      	b.n	800c612 <dhcp_create_msg+0xc2>
 800c684:	4b04      	ldr	r3, [pc, #16]	@ (800c698 <dhcp_create_msg+0x148>)
 800c686:	f240 7269 	movw	r2, #1897	@ 0x769
 800c68a:	4907      	ldr	r1, [pc, #28]	@ (800c6a8 <dhcp_create_msg+0x158>)
 800c68c:	4804      	ldr	r0, [pc, #16]	@ (800c6a0 <dhcp_create_msg+0x150>)
 800c68e:	f009 ff15 	bl	80164bc <iprintf>
 800c692:	e7f5      	b.n	800c680 <dhcp_create_msg+0x130>
 800c694:	20008ed8 	.word	0x20008ed8
 800c698:	08019c90 	.word	0x08019c90
 800c69c:	08019e04 	.word	0x08019e04
 800c6a0:	080187f8 	.word	0x080187f8
 800c6a4:	08019de4 	.word	0x08019de4
 800c6a8:	08019dc4 	.word	0x08019dc4

0800c6ac <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 800c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c6b0:	6a47      	ldr	r7, [r0, #36]	@ 0x24
dhcp_reboot(struct netif *netif)
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 800c6b6:	797b      	ldrb	r3, [r7, #5]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d004      	beq.n	800c6c6 <dhcp_reboot.isra.0+0x1a>
    dhcp->state = new_state;
 800c6bc:	2203      	movs	r2, #3
    dhcp->request_timeout = 0;
 800c6be:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800c6c0:	f8a7 2005 	strh.w	r2, [r7, #5]
    dhcp->request_timeout = 0;
 800c6c4:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c6c6:	f10d 0316 	add.w	r3, sp, #22
 800c6ca:	2203      	movs	r2, #3
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	4658      	mov	r0, fp
 800c6d0:	f7ff ff3e 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800c6d4:	4680      	mov	r8, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d073      	beq.n	800c7c2 <dhcp_reboot.isra.0+0x116>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c6da:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800c6de:	6845      	ldr	r5, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c6e0:	1d26      	adds	r6, r4, #4
 800c6e2:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c6e6:	35f0      	adds	r5, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c6e8:	2e44      	cmp	r6, #68	@ 0x44
 800c6ea:	f200 808f 	bhi.w	800c80c <dhcp_reboot.isra.0+0x160>
  options[options_out_len++] = option_type;
 800c6ee:	2239      	movs	r2, #57	@ 0x39
 800c6f0:	1c63      	adds	r3, r4, #1
 800c6f2:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_len;
 800c6f6:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 800c6f8:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c6fe:	eb09 0302 	add.w	r3, r9, r2
 800c702:	2b44      	cmp	r3, #68	@ 0x44
 800c704:	f200 809a 	bhi.w	800c83c <dhcp_reboot.isra.0+0x190>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c708:	2202      	movs	r2, #2
 800c70a:	1ce3      	adds	r3, r4, #3
 800c70c:	b2b6      	uxth	r6, r6
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c70e:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c710:	f805 2009 	strb.w	r2, [r5, r9]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c714:	2240      	movs	r2, #64	@ 0x40
 800c716:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c718:	1db3      	adds	r3, r6, #6
 800c71a:	2b44      	cmp	r3, #68	@ 0x44
 800c71c:	f200 8086 	bhi.w	800c82c <dhcp_reboot.isra.0+0x180>
  options[options_out_len++] = option_type;
 800c720:	1d63      	adds	r3, r4, #5
 800c722:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 800c724:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 800c726:	55aa      	strb	r2, [r5, r6]
  options[options_out_len++] = option_len;
 800c728:	b29b      	uxth	r3, r3
 800c72a:	2204      	movs	r2, #4
 800c72c:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c72e:	69f8      	ldr	r0, [r7, #28]
 800c730:	f003 f884 	bl	800f83c <lwip_htonl>
 800c734:	4629      	mov	r1, r5
 800c736:	4602      	mov	r2, r0
 800c738:	b2a0      	uxth	r0, r4
 800c73a:	f7ff fd7f 	bl	800c23c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c73e:	f100 0905 	add.w	r9, r0, #5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c742:	4606      	mov	r6, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c744:	f1b9 0f44 	cmp.w	r9, #68	@ 0x44
 800c748:	d868      	bhi.n	800c81c <dhcp_reboot.isra.0+0x170>
  options[options_out_len++] = option_type;
 800c74a:	2237      	movs	r2, #55	@ 0x37
 800c74c:	1c73      	adds	r3, r6, #1
  options[options_out_len++] = option_len;
 800c74e:	1cb4      	adds	r4, r6, #2
 800c750:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 800c754:	55aa      	strb	r2, [r5, r6]
  options[options_out_len++] = option_len;
 800c756:	b29b      	uxth	r3, r3
 800c758:	2203      	movs	r2, #3
 800c75a:	b2a4      	uxth	r4, r4
 800c75c:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 800c86c <dhcp_reboot.isra.0+0x1c0>
 800c760:	54ea      	strb	r2, [r5, r3]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c762:	9703      	str	r7, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c764:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c766:	f81a 7b01 	ldrb.w	r7, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c76a:	d842      	bhi.n	800c7f2 <dhcp_reboot.isra.0+0x146>
  options[options_out_len++] = value;
 800c76c:	1c63      	adds	r3, r4, #1
 800c76e:	552f      	strb	r7, [r5, r4]
 800c770:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c772:	4599      	cmp	r9, r3
  options[options_out_len++] = value;
 800c774:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c776:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c77a:	d1f3      	bne.n	800c764 <dhcp_reboot.isra.0+0xb8>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 800c77c:	1db0      	adds	r0, r6, #6
 800c77e:	23ff      	movs	r3, #255	@ 0xff
 800c780:	9f03      	ldr	r7, [sp, #12]
 800c782:	b280      	uxth	r0, r0
 800c784:	f805 3009 	strb.w	r3, [r5, r9]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800c788:	2843      	cmp	r0, #67	@ 0x43
 800c78a:	d808      	bhi.n	800c79e <dhcp_reboot.isra.0+0xf2>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800c78c:	f1c6 023d 	rsb	r2, r6, #61	@ 0x3d
 800c790:	4428      	add	r0, r5
 800c792:	2100      	movs	r1, #0
 800c794:	b292      	uxth	r2, r2
 800c796:	3201      	adds	r2, #1
 800c798:	f00a f822 	bl	80167e0 <memset>
 800c79c:	2044      	movs	r0, #68	@ 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800c79e:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	b289      	uxth	r1, r1
 800c7a6:	f003 ffe9 	bl	801077c <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c7aa:	4a28      	ldr	r2, [pc, #160]	@ (800c84c <dhcp_reboot.isra.0+0x1a0>)
 800c7ac:	f8cd b000 	str.w	fp, [sp]
 800c7b0:	2343      	movs	r3, #67	@ 0x43
 800c7b2:	6810      	ldr	r0, [r2, #0]
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	4a26      	ldr	r2, [pc, #152]	@ (800c850 <dhcp_reboot.isra.0+0x1a4>)
 800c7b8:	f008 fe0e 	bl	80153d8 <udp_sendto_if>
    pbuf_free(p_out);
 800c7bc:	4640      	mov	r0, r8
 800c7be:	f003 fec9 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800c7c2:	79bb      	ldrb	r3, [r7, #6]
 800c7c4:	2bff      	cmp	r3, #255	@ 0xff
 800c7c6:	d01c      	beq.n	800c802 <dhcp_reboot.isra.0+0x156>
    dhcp->tries++;
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c7cc:	2b09      	cmp	r3, #9
    dhcp->tries++;
 800c7ce:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c7d0:	d817      	bhi.n	800c802 <dhcp_reboot.isra.0+0x156>
 800c7d2:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800c854 <dhcp_reboot.isra.0+0x1a8>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c7d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c7dc:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c7de:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e8:	095b      	lsrs	r3, r3, #5
 800c7ea:	813b      	strh	r3, [r7, #8]
}
 800c7ec:	b007      	add	sp, #28
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c7f2:	4b19      	ldr	r3, [pc, #100]	@ (800c858 <dhcp_reboot.isra.0+0x1ac>)
 800c7f4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800c7f8:	4918      	ldr	r1, [pc, #96]	@ (800c85c <dhcp_reboot.isra.0+0x1b0>)
 800c7fa:	4819      	ldr	r0, [pc, #100]	@ (800c860 <dhcp_reboot.isra.0+0x1b4>)
 800c7fc:	f009 fe5e 	bl	80164bc <iprintf>
 800c800:	e7b4      	b.n	800c76c <dhcp_reboot.isra.0+0xc0>
    options[options_out_len++] = 0;
 800c802:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c804:	813b      	strh	r3, [r7, #8]
}
 800c806:	b007      	add	sp, #28
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c80c:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <dhcp_reboot.isra.0+0x1ac>)
 800c80e:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c812:	4914      	ldr	r1, [pc, #80]	@ (800c864 <dhcp_reboot.isra.0+0x1b8>)
 800c814:	4812      	ldr	r0, [pc, #72]	@ (800c860 <dhcp_reboot.isra.0+0x1b4>)
 800c816:	f009 fe51 	bl	80164bc <iprintf>
 800c81a:	e768      	b.n	800c6ee <dhcp_reboot.isra.0+0x42>
 800c81c:	4b0e      	ldr	r3, [pc, #56]	@ (800c858 <dhcp_reboot.isra.0+0x1ac>)
 800c81e:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c822:	4910      	ldr	r1, [pc, #64]	@ (800c864 <dhcp_reboot.isra.0+0x1b8>)
 800c824:	480e      	ldr	r0, [pc, #56]	@ (800c860 <dhcp_reboot.isra.0+0x1b4>)
 800c826:	f009 fe49 	bl	80164bc <iprintf>
 800c82a:	e78e      	b.n	800c74a <dhcp_reboot.isra.0+0x9e>
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <dhcp_reboot.isra.0+0x1ac>)
 800c82e:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c832:	490c      	ldr	r1, [pc, #48]	@ (800c864 <dhcp_reboot.isra.0+0x1b8>)
 800c834:	480a      	ldr	r0, [pc, #40]	@ (800c860 <dhcp_reboot.isra.0+0x1b4>)
 800c836:	f009 fe41 	bl	80164bc <iprintf>
 800c83a:	e771      	b.n	800c720 <dhcp_reboot.isra.0+0x74>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c83c:	4b06      	ldr	r3, [pc, #24]	@ (800c858 <dhcp_reboot.isra.0+0x1ac>)
 800c83e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800c842:	4909      	ldr	r1, [pc, #36]	@ (800c868 <dhcp_reboot.isra.0+0x1bc>)
 800c844:	4806      	ldr	r0, [pc, #24]	@ (800c860 <dhcp_reboot.isra.0+0x1b4>)
 800c846:	f009 fe39 	bl	80164bc <iprintf>
 800c84a:	e75d      	b.n	800c708 <dhcp_reboot.isra.0+0x5c>
 800c84c:	20008ee0 	.word	0x20008ee0
 800c850:	0801a79c 	.word	0x0801a79c
 800c854:	10624dd3 	.word	0x10624dd3
 800c858:	08019c90 	.word	0x08019c90
 800c85c:	08019ec4 	.word	0x08019ec4
 800c860:	080187f8 	.word	0x080187f8
 800c864:	08019e44 	.word	0x08019e44
 800c868:	08019e88 	.word	0x08019e88
 800c86c:	08019ff8 	.word	0x08019ff8

0800c870 <dhcp_discover>:
{
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c874:	6a45      	ldr	r5, [r0, #36]	@ 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800c876:	2300      	movs	r3, #0
{
 800c878:	b087      	sub	sp, #28
 800c87a:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 800c87c:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800c87e:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 800c880:	2a06      	cmp	r2, #6
 800c882:	d003      	beq.n	800c88c <dhcp_discover+0x1c>
    dhcp->state = new_state;
 800c884:	2206      	movs	r2, #6
    dhcp->request_timeout = 0;
 800c886:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 800c888:	f8a5 2005 	strh.w	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800c88c:	f10d 0316 	add.w	r3, sp, #22
 800c890:	2201      	movs	r2, #1
 800c892:	4629      	mov	r1, r5
 800c894:	4648      	mov	r0, r9
 800c896:	f7ff fe5b 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800c89a:	4680      	mov	r8, r0
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d064      	beq.n	800c96a <dhcp_discover+0xfa>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c8a0:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 800c8a4:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c8a6:	1d34      	adds	r4, r6, #4
 800c8a8:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c8ac:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c8ae:	2c44      	cmp	r4, #68	@ 0x44
 800c8b0:	f200 8088 	bhi.w	800c9c4 <dhcp_discover+0x154>
  options[options_out_len++] = option_type;
 800c8b4:	2239      	movs	r2, #57	@ 0x39
 800c8b6:	1c73      	adds	r3, r6, #1
 800c8b8:	fa1f fa8a 	uxth.w	sl, sl
 800c8bc:	55ba      	strb	r2, [r7, r6]
  options[options_out_len++] = option_len;
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	54fa      	strb	r2, [r7, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c8c4:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c8c8:	f8b9 b02c 	ldrh.w	fp, [r9, #44]	@ 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c8cc:	2b44      	cmp	r3, #68	@ 0x44
 800c8ce:	f200 8081 	bhi.w	800c9d4 <dhcp_discover+0x164>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c8d2:	1cf3      	adds	r3, r6, #3
 800c8d4:	b2a4      	uxth	r4, r4
 800c8d6:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c8da:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c8dc:	f807 200a 	strb.w	r2, [r7, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c8e0:	f807 b003 	strb.w	fp, [r7, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c8e4:	1d63      	adds	r3, r4, #5
 800c8e6:	2b44      	cmp	r3, #68	@ 0x44
 800c8e8:	d864      	bhi.n	800c9b4 <dhcp_discover+0x144>
  options[options_out_len++] = option_type;
 800c8ea:	2237      	movs	r2, #55	@ 0x37
 800c8ec:	1d73      	adds	r3, r6, #5
 800c8ee:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800ca08 <dhcp_discover+0x198>
 800c8f2:	553a      	strb	r2, [r7, r4]
  options[options_out_len++] = option_len;
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2203      	movs	r2, #3
 800c8f8:	1db4      	adds	r4, r6, #6
 800c8fa:	54fa      	strb	r2, [r7, r3]
 800c8fc:	f106 0309 	add.w	r3, r6, #9
 800c900:	b2a4      	uxth	r4, r4
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c902:	b29b      	uxth	r3, r3
 800c904:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c906:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c908:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c90c:	d844      	bhi.n	800c998 <dhcp_discover+0x128>
  options[options_out_len++] = value;
 800c90e:	1c63      	adds	r3, r4, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c910:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 800c912:	f807 b004 	strb.w	fp, [r7, r4]
 800c916:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c918:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 800c91a:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c91c:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c920:	d1f1      	bne.n	800c906 <dhcp_discover+0x96>
  options[options_out_len++] = DHCP_OPTION_END;
 800c922:	f106 000a 	add.w	r0, r6, #10
 800c926:	23ff      	movs	r3, #255	@ 0xff
 800c928:	b280      	uxth	r0, r0
 800c92a:	54bb      	strb	r3, [r7, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800c92c:	2843      	cmp	r0, #67	@ 0x43
 800c92e:	d808      	bhi.n	800c942 <dhcp_discover+0xd2>
    options[options_out_len++] = 0;
 800c930:	f1c6 0239 	rsb	r2, r6, #57	@ 0x39
 800c934:	4438      	add	r0, r7
 800c936:	2100      	movs	r1, #0
 800c938:	b292      	uxth	r2, r2
 800c93a:	3201      	adds	r2, #1
 800c93c:	f009 ff50 	bl	80167e0 <memset>
 800c940:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800c942:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 800c946:	4640      	mov	r0, r8
 800c948:	b289      	uxth	r1, r1
 800c94a:	f003 ff17 	bl	801077c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c94e:	4925      	ldr	r1, [pc, #148]	@ (800c9e4 <dhcp_discover+0x174>)
 800c950:	4a25      	ldr	r2, [pc, #148]	@ (800c9e8 <dhcp_discover+0x178>)
 800c952:	2343      	movs	r3, #67	@ 0x43
 800c954:	f8cd 9000 	str.w	r9, [sp]
 800c958:	6808      	ldr	r0, [r1, #0]
 800c95a:	4641      	mov	r1, r8
 800c95c:	9201      	str	r2, [sp, #4]
 800c95e:	4a23      	ldr	r2, [pc, #140]	@ (800c9ec <dhcp_discover+0x17c>)
 800c960:	f008 fc72 	bl	8015248 <udp_sendto_if_src>
    pbuf_free(p_out);
 800c964:	4640      	mov	r0, r8
 800c966:	f003 fdf5 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800c96a:	79ab      	ldrb	r3, [r5, #6]
 800c96c:	2bff      	cmp	r3, #255	@ 0xff
 800c96e:	d01b      	beq.n	800c9a8 <dhcp_discover+0x138>
    dhcp->tries++;
 800c970:	3301      	adds	r3, #1
 800c972:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c974:	2a05      	cmp	r2, #5
    dhcp->tries++;
 800c976:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c978:	d816      	bhi.n	800c9a8 <dhcp_discover+0x138>
 800c97a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c97e:	491c      	ldr	r1, [pc, #112]	@ (800c9f0 <dhcp_discover+0x180>)
}
 800c980:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c982:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c984:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	fba1 1303 	umull	r1, r3, r1, r3
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	812b      	strh	r3, [r5, #8]
}
 800c992:	b007      	add	sp, #28
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c998:	4b16      	ldr	r3, [pc, #88]	@ (800c9f4 <dhcp_discover+0x184>)
 800c99a:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800c99e:	4916      	ldr	r1, [pc, #88]	@ (800c9f8 <dhcp_discover+0x188>)
 800c9a0:	4816      	ldr	r0, [pc, #88]	@ (800c9fc <dhcp_discover+0x18c>)
 800c9a2:	f009 fd8b 	bl	80164bc <iprintf>
 800c9a6:	e7b2      	b.n	800c90e <dhcp_discover+0x9e>
    options[options_out_len++] = 0;
 800c9a8:	2378      	movs	r3, #120	@ 0x78
}
 800c9aa:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c9ac:	812b      	strh	r3, [r5, #8]
}
 800c9ae:	b007      	add	sp, #28
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f4 <dhcp_discover+0x184>)
 800c9b6:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c9ba:	4911      	ldr	r1, [pc, #68]	@ (800ca00 <dhcp_discover+0x190>)
 800c9bc:	480f      	ldr	r0, [pc, #60]	@ (800c9fc <dhcp_discover+0x18c>)
 800c9be:	f009 fd7d 	bl	80164bc <iprintf>
 800c9c2:	e792      	b.n	800c8ea <dhcp_discover+0x7a>
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f4 <dhcp_discover+0x184>)
 800c9c6:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c9ca:	490d      	ldr	r1, [pc, #52]	@ (800ca00 <dhcp_discover+0x190>)
 800c9cc:	480b      	ldr	r0, [pc, #44]	@ (800c9fc <dhcp_discover+0x18c>)
 800c9ce:	f009 fd75 	bl	80164bc <iprintf>
 800c9d2:	e76f      	b.n	800c8b4 <dhcp_discover+0x44>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c9d4:	4b07      	ldr	r3, [pc, #28]	@ (800c9f4 <dhcp_discover+0x184>)
 800c9d6:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800c9da:	490a      	ldr	r1, [pc, #40]	@ (800ca04 <dhcp_discover+0x194>)
 800c9dc:	4807      	ldr	r0, [pc, #28]	@ (800c9fc <dhcp_discover+0x18c>)
 800c9de:	f009 fd6d 	bl	80164bc <iprintf>
 800c9e2:	e776      	b.n	800c8d2 <dhcp_discover+0x62>
 800c9e4:	20008ee0 	.word	0x20008ee0
 800c9e8:	0801a7a0 	.word	0x0801a7a0
 800c9ec:	0801a79c 	.word	0x0801a79c
 800c9f0:	10624dd3 	.word	0x10624dd3
 800c9f4:	08019c90 	.word	0x08019c90
 800c9f8:	08019ec4 	.word	0x08019ec4
 800c9fc:	080187f8 	.word	0x080187f8
 800ca00:	08019e44 	.word	0x08019e44
 800ca04:	08019e88 	.word	0x08019e88
 800ca08:	08019ff8 	.word	0x08019ff8

0800ca0c <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f000 80f8 	beq.w	800cc02 <dhcp_select.isra.0+0x1f6>
dhcp_select(struct netif *netif)
 800ca12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 800ca16:	6a46      	ldr	r6, [r0, #36]	@ 0x24
dhcp_select(struct netif *netif)
 800ca18:	b087      	sub	sp, #28
 800ca1a:	4607      	mov	r7, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ca1c:	2e00      	cmp	r6, #0
 800ca1e:	f000 80f7 	beq.w	800cc10 <dhcp_select.isra.0+0x204>
  if (new_state != dhcp->state) {
 800ca22:	7973      	ldrb	r3, [r6, #5]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d004      	beq.n	800ca32 <dhcp_select.isra.0+0x26>
    dhcp->state = new_state;
 800ca28:	2201      	movs	r2, #1
    dhcp->request_timeout = 0;
 800ca2a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800ca2c:	f8a6 2005 	strh.w	r2, [r6, #5]
    dhcp->request_timeout = 0;
 800ca30:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ca32:	f10d 0316 	add.w	r3, sp, #22
 800ca36:	2203      	movs	r2, #3
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f7ff fd88 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800ca40:	4681      	mov	r9, r0
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f000 8092 	beq.w	800cb6c <dhcp_select.isra.0+0x160>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ca48:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800ca4c:	6845      	ldr	r5, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ca4e:	f104 0804 	add.w	r8, r4, #4
 800ca52:	f104 0a02 	add.w	sl, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ca56:	35f0      	adds	r5, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ca58:	f1b8 0f44 	cmp.w	r8, #68	@ 0x44
 800ca5c:	f200 80b1 	bhi.w	800cbc2 <dhcp_select.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 800ca60:	2239      	movs	r2, #57	@ 0x39
 800ca62:	1c63      	adds	r3, r4, #1
 800ca64:	fa1f fa8a 	uxth.w	sl, sl
 800ca68:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ca70:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ca74:	f8b7 b02c 	ldrh.w	fp, [r7, #44]	@ 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ca78:	2b44      	cmp	r3, #68	@ 0x44
 800ca7a:	f200 80aa 	bhi.w	800cbd2 <dhcp_select.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ca7e:	1ce3      	adds	r3, r4, #3
 800ca80:	fa1f f888 	uxth.w	r8, r8
 800ca84:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800ca88:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ca8a:	f805 200a 	strb.w	r2, [r5, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800ca8e:	f805 b003 	strb.w	fp, [r5, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ca92:	f108 0306 	add.w	r3, r8, #6
 800ca96:	2b44      	cmp	r3, #68	@ 0x44
 800ca98:	f200 80a3 	bhi.w	800cbe2 <dhcp_select.isra.0+0x1d6>
  options[options_out_len++] = option_type;
 800ca9c:	1d63      	adds	r3, r4, #5
 800ca9e:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 800caa0:	3406      	adds	r4, #6
 800caa2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 800caa4:	f805 2008 	strb.w	r2, [r5, r8]
  options[options_out_len++] = option_len;
 800caa8:	2204      	movs	r2, #4
 800caaa:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800caac:	69f0      	ldr	r0, [r6, #28]
 800caae:	f002 fec5 	bl	800f83c <lwip_htonl>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4602      	mov	r2, r0
 800cab6:	b2a0      	uxth	r0, r4
 800cab8:	f7ff fbc0 	bl	800c23c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cabc:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800cabe:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cac0:	2b44      	cmp	r3, #68	@ 0x44
 800cac2:	f200 8096 	bhi.w	800cbf2 <dhcp_select.isra.0+0x1e6>
  options[options_out_len++] = option_type;
 800cac6:	1c63      	adds	r3, r4, #1
 800cac8:	2236      	movs	r2, #54	@ 0x36
  options[options_out_len++] = option_len;
 800caca:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 800cacc:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = option_len;
 800cace:	2204      	movs	r2, #4
 800cad0:	3402      	adds	r4, #2
 800cad2:	54ea      	strb	r2, [r5, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800cad4:	69b0      	ldr	r0, [r6, #24]
 800cad6:	f002 feb1 	bl	800f83c <lwip_htonl>
 800cada:	4629      	mov	r1, r5
 800cadc:	4602      	mov	r2, r0
 800cade:	b2a0      	uxth	r0, r4
 800cae0:	f7ff fbac 	bl	800c23c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cae4:	1d44      	adds	r4, r0, #5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800cae6:	4680      	mov	r8, r0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cae8:	2c44      	cmp	r4, #68	@ 0x44
 800caea:	d862      	bhi.n	800cbb2 <dhcp_select.isra.0+0x1a6>
  options[options_out_len++] = option_type;
 800caec:	b2a3      	uxth	r3, r4
 800caee:	2237      	movs	r2, #55	@ 0x37
  options[options_out_len++] = option_len;
 800caf0:	f108 0402 	add.w	r4, r8, #2
 800caf4:	f8df a158 	ldr.w	sl, [pc, #344]	@ 800cc50 <dhcp_select.isra.0+0x244>
 800caf8:	9303      	str	r3, [sp, #12]
  options[options_out_len++] = option_type;
 800cafa:	f108 0301 	add.w	r3, r8, #1
 800cafe:	f805 2008 	strb.w	r2, [r5, r8]
  options[options_out_len++] = option_len;
 800cb02:	b2a4      	uxth	r4, r4
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	2203      	movs	r2, #3
 800cb08:	54ea      	strb	r2, [r5, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cb0a:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cb0c:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cb10:	d842      	bhi.n	800cb98 <dhcp_select.isra.0+0x18c>
  options[options_out_len++] = value;
 800cb12:	1c63      	adds	r3, r4, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb14:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 800cb16:	f805 b004 	strb.w	fp, [r5, r4]
 800cb1a:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb1c:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 800cb1e:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cb20:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb24:	d1f1      	bne.n	800cb0a <dhcp_select.isra.0+0xfe>
  options[options_out_len++] = DHCP_OPTION_END;
 800cb26:	f108 0006 	add.w	r0, r8, #6
 800cb2a:	23ff      	movs	r3, #255	@ 0xff
 800cb2c:	b280      	uxth	r0, r0
 800cb2e:	54ab      	strb	r3, [r5, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800cb30:	2843      	cmp	r0, #67	@ 0x43
 800cb32:	d808      	bhi.n	800cb46 <dhcp_select.isra.0+0x13a>
    options[options_out_len++] = 0;
 800cb34:	f1c8 023d 	rsb	r2, r8, #61	@ 0x3d
 800cb38:	4428      	add	r0, r5
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	b292      	uxth	r2, r2
 800cb3e:	3201      	adds	r2, #1
 800cb40:	f009 fe4e 	bl	80167e0 <memset>
 800cb44:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800cb46:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 800cb4a:	4648      	mov	r0, r9
 800cb4c:	b289      	uxth	r1, r1
 800cb4e:	f003 fe15 	bl	801077c <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cb52:	4934      	ldr	r1, [pc, #208]	@ (800cc24 <dhcp_select.isra.0+0x218>)
 800cb54:	4a34      	ldr	r2, [pc, #208]	@ (800cc28 <dhcp_select.isra.0+0x21c>)
 800cb56:	2343      	movs	r3, #67	@ 0x43
 800cb58:	9700      	str	r7, [sp, #0]
 800cb5a:	6808      	ldr	r0, [r1, #0]
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	9201      	str	r2, [sp, #4]
 800cb60:	4a32      	ldr	r2, [pc, #200]	@ (800cc2c <dhcp_select.isra.0+0x220>)
 800cb62:	f008 fb71 	bl	8015248 <udp_sendto_if_src>
    pbuf_free(p_out);
 800cb66:	4648      	mov	r0, r9
 800cb68:	f003 fcf4 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800cb6c:	79b3      	ldrb	r3, [r6, #6]
 800cb6e:	2bff      	cmp	r3, #255	@ 0xff
 800cb70:	d01a      	beq.n	800cba8 <dhcp_select.isra.0+0x19c>
    dhcp->tries++;
 800cb72:	3301      	adds	r3, #1
 800cb74:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cb76:	2a05      	cmp	r2, #5
    dhcp->tries++;
 800cb78:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cb7a:	d815      	bhi.n	800cba8 <dhcp_select.isra.0+0x19c>
 800cb7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cb80:	492b      	ldr	r1, [pc, #172]	@ (800cc30 <dhcp_select.isra.0+0x224>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cb82:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cb84:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	fba1 1303 	umull	r1, r3, r1, r3
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	8133      	strh	r3, [r6, #8]
}
 800cb92:	b007      	add	sp, #28
 800cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cb98:	4b26      	ldr	r3, [pc, #152]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cb9a:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800cb9e:	4926      	ldr	r1, [pc, #152]	@ (800cc38 <dhcp_select.isra.0+0x22c>)
 800cba0:	4826      	ldr	r0, [pc, #152]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cba2:	f009 fc8b 	bl	80164bc <iprintf>
 800cba6:	e7b4      	b.n	800cb12 <dhcp_select.isra.0+0x106>
    options[options_out_len++] = 0;
 800cba8:	2378      	movs	r3, #120	@ 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cbaa:	8133      	strh	r3, [r6, #8]
}
 800cbac:	b007      	add	sp, #28
 800cbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cbb2:	4b20      	ldr	r3, [pc, #128]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cbb4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cbb8:	4921      	ldr	r1, [pc, #132]	@ (800cc40 <dhcp_select.isra.0+0x234>)
 800cbba:	4820      	ldr	r0, [pc, #128]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cbbc:	f009 fc7e 	bl	80164bc <iprintf>
 800cbc0:	e794      	b.n	800caec <dhcp_select.isra.0+0xe0>
 800cbc2:	4b1c      	ldr	r3, [pc, #112]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cbc4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cbc8:	491d      	ldr	r1, [pc, #116]	@ (800cc40 <dhcp_select.isra.0+0x234>)
 800cbca:	481c      	ldr	r0, [pc, #112]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cbcc:	f009 fc76 	bl	80164bc <iprintf>
 800cbd0:	e746      	b.n	800ca60 <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cbd2:	4b18      	ldr	r3, [pc, #96]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cbd4:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800cbd8:	491a      	ldr	r1, [pc, #104]	@ (800cc44 <dhcp_select.isra.0+0x238>)
 800cbda:	4818      	ldr	r0, [pc, #96]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cbdc:	f009 fc6e 	bl	80164bc <iprintf>
 800cbe0:	e74d      	b.n	800ca7e <dhcp_select.isra.0+0x72>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cbe2:	4b14      	ldr	r3, [pc, #80]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cbe4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cbe8:	4915      	ldr	r1, [pc, #84]	@ (800cc40 <dhcp_select.isra.0+0x234>)
 800cbea:	4814      	ldr	r0, [pc, #80]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cbec:	f009 fc66 	bl	80164bc <iprintf>
 800cbf0:	e754      	b.n	800ca9c <dhcp_select.isra.0+0x90>
 800cbf2:	4b10      	ldr	r3, [pc, #64]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cbf4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cbf8:	4911      	ldr	r1, [pc, #68]	@ (800cc40 <dhcp_select.isra.0+0x234>)
 800cbfa:	4810      	ldr	r0, [pc, #64]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cbfc:	f009 fc5e 	bl	80164bc <iprintf>
 800cc00:	e761      	b.n	800cac6 <dhcp_select.isra.0+0xba>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800cc02:	4b0c      	ldr	r3, [pc, #48]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cc04:	f240 1277 	movw	r2, #375	@ 0x177
 800cc08:	490f      	ldr	r1, [pc, #60]	@ (800cc48 <dhcp_select.isra.0+0x23c>)
 800cc0a:	480c      	ldr	r0, [pc, #48]	@ (800cc3c <dhcp_select.isra.0+0x230>)
 800cc0c:	f009 bc56 	b.w	80164bc <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800cc10:	4b08      	ldr	r3, [pc, #32]	@ (800cc34 <dhcp_select.isra.0+0x228>)
 800cc12:	f240 1279 	movw	r2, #377	@ 0x179
 800cc16:	490d      	ldr	r1, [pc, #52]	@ (800cc4c <dhcp_select.isra.0+0x240>)
 800cc18:	4808      	ldr	r0, [pc, #32]	@ (800cc3c <dhcp_select.isra.0+0x230>)
}
 800cc1a:	b007      	add	sp, #28
 800cc1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800cc20:	f009 bc4c 	b.w	80164bc <iprintf>
 800cc24:	20008ee0 	.word	0x20008ee0
 800cc28:	0801a7a0 	.word	0x0801a7a0
 800cc2c:	0801a79c 	.word	0x0801a79c
 800cc30:	10624dd3 	.word	0x10624dd3
 800cc34:	08019c90 	.word	0x08019c90
 800cc38:	08019ec4 	.word	0x08019ec4
 800cc3c:	080187f8 	.word	0x080187f8
 800cc40:	08019e44 	.word	0x08019e44
 800cc44:	08019e88 	.word	0x08019e88
 800cc48:	08019efc 	.word	0x08019efc
 800cc4c:	08019f18 	.word	0x08019f18
 800cc50:	08019ff8 	.word	0x08019ff8

0800cc54 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 800cc54:	4b97      	ldr	r3, [pc, #604]	@ (800ceb4 <dhcp_recv+0x260>)
{
 800cc56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800cc5a:	685f      	ldr	r7, [r3, #4]
{
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	b087      	sub	sp, #28
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800cc60:	6852      	ldr	r2, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc62:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	f000 8083 	beq.w	800cd70 <dhcp_recv+0x11c>
 800cc6a:	792b      	ldrb	r3, [r5, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d07f      	beq.n	800cd70 <dhcp_recv+0x11c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cc70:	8963      	ldrh	r3, [r4, #10]
 800cc72:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc74:	d97c      	bls.n	800cd70 <dhcp_recv+0x11c>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800cc76:	7813      	ldrb	r3, [r2, #0]
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d179      	bne.n	800cd70 <dhcp_recv+0x11c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cc7c:	f897 e034 	ldrb.w	lr, [r7, #52]	@ 0x34
 800cc80:	f1be 0f00 	cmp.w	lr, #0
 800cc84:	d010      	beq.n	800cca8 <dhcp_recv+0x54>
 800cc86:	f107 002d 	add.w	r0, r7, #45	@ 0x2d
 800cc8a:	f102 011b 	add.w	r1, r2, #27
 800cc8e:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cc90:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cc94:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cc96:	f811 6f01 	ldrb.w	r6, [r1, #1]!
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cc9a:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cc9c:	45b4      	cmp	ip, r6
 800cc9e:	d167      	bne.n	800cd70 <dhcp_recv+0x11c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cca0:	4573      	cmp	r3, lr
 800cca2:	d201      	bcs.n	800cca8 <dhcp_recv+0x54>
 800cca4:	2b06      	cmp	r3, #6
 800cca6:	d1f3      	bne.n	800cc90 <dhcp_recv+0x3c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800cca8:	6850      	ldr	r0, [r2, #4]
 800ccaa:	f002 fdc7 	bl	800f83c <lwip_htonl>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	4298      	cmp	r0, r3
 800ccb2:	d15d      	bne.n	800cd70 <dhcp_recv+0x11c>
  dhcp_clear_all_options(dhcp);
 800ccb4:	f8df b204 	ldr.w	fp, [pc, #516]	@ 800cebc <dhcp_recv+0x268>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	e9cb 2200 	strd	r2, r2, [fp]
  if (p->len < DHCP_SNAME_OFS) {
 800ccbe:	8963      	ldrh	r3, [r4, #10]
 800ccc0:	2b2b      	cmp	r3, #43	@ 0x2b
 800ccc2:	d955      	bls.n	800cd70 <dhcp_recv+0x11c>
  int parse_sname_as_options = 0;
 800ccc4:	4692      	mov	sl, r2
  options_idx = DHCP_OPTIONS_OFS;
 800ccc6:	22f0      	movs	r2, #240	@ 0xf0
  options_idx_max = p->tot_len;
 800ccc8:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800cccc:	f8cd a000 	str.w	sl, [sp]
 800ccd0:	e9cd 7501 	strd	r7, r5, [sp, #4]
 800ccd4:	4617      	mov	r7, r2
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	464c      	mov	r4, r9
 800ccda:	4691      	mov	r9, r2
  options_idx = DHCP_OPTIONS_OFS;
 800ccdc:	464d      	mov	r5, r9
 800ccde:	e005      	b.n	800ccec <dhcp_recv+0x98>
    q = q->next;
 800cce0:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 800cce2:	b297      	uxth	r7, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800cce4:	b29c      	uxth	r4, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 800cce6:	2d00      	cmp	r5, #0
 800cce8:	d041      	beq.n	800cd6e <dhcp_recv+0x11a>
 800ccea:	896b      	ldrh	r3, [r5, #10]
 800ccec:	42bb      	cmp	r3, r7
    options_idx = (u16_t)(options_idx - q->len);
 800ccee:	eba7 0203 	sub.w	r2, r7, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800ccf2:	eba4 0303 	sub.w	r3, r4, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 800ccf6:	d9f3      	bls.n	800cce0 <dhcp_recv+0x8c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ccf8:	42bc      	cmp	r4, r7
  options = (u8_t *)q->payload;
 800ccfa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ccfe:	f240 80e7 	bls.w	800ced0 <dhcp_recv+0x27c>
 800cd02:	463e      	mov	r6, r7
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cd04:	9703      	str	r7, [sp, #12]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cd06:	f818 1006 	ldrb.w	r1, [r8, r6]
 800cd0a:	29ff      	cmp	r1, #255	@ 0xff
 800cd0c:	f000 80e0 	beq.w	800ced0 <dhcp_recv+0x27c>
    u16_t val_offset = (u16_t)(offset + 2);
 800cd10:	1cb3      	adds	r3, r6, #2
 800cd12:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 800cd14:	42b3      	cmp	r3, r6
 800cd16:	d32a      	bcc.n	800cd6e <dhcp_recv+0x11a>
    if ((offset + 1) < q->len) {
 800cd18:	1c70      	adds	r0, r6, #1
 800cd1a:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800cd1e:	4560      	cmp	r0, ip
 800cd20:	f280 80ce 	bge.w	800cec0 <dhcp_recv+0x26c>
      len = options[offset + 1];
 800cd24:	eb08 0206 	add.w	r2, r8, r6
 800cd28:	7857      	ldrb	r7, [r2, #1]
    switch (op) {
 800cd2a:	293b      	cmp	r1, #59	@ 0x3b
 800cd2c:	d826      	bhi.n	800cd7c <dhcp_recv+0x128>
 800cd2e:	e8df f001 	tbb	[pc, r1]
 800cd32:	413f      	.short	0x413f
 800cd34:	25259525 	.word	0x25259525
 800cd38:	25252525 	.word	0x25252525
 800cd3c:	25252525 	.word	0x25252525
 800cd40:	25252525 	.word	0x25252525
 800cd44:	25252525 	.word	0x25252525
 800cd48:	25252525 	.word	0x25252525
 800cd4c:	25252525 	.word	0x25252525
 800cd50:	25252525 	.word	0x25252525
 800cd54:	25252525 	.word	0x25252525
 800cd58:	25252525 	.word	0x25252525
 800cd5c:	25252525 	.word	0x25252525
 800cd60:	25252525 	.word	0x25252525
 800cd64:	8ab07e25 	.word	0x8ab07e25
 800cd68:	252525a3 	.word	0x252525a3
 800cd6c:	6773      	.short	0x6773
 800cd6e:	464c      	mov	r4, r9
  pbuf_free(p);
 800cd70:	4620      	mov	r0, r4
}
 800cd72:	b007      	add	sp, #28
 800cd74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800cd78:	f003 bbec 	b.w	8010554 <pbuf_free>
      if (offset + len + 2 > 0xFFFF) {
 800cd7c:	443e      	add	r6, r7
 800cd7e:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 800cd82:	428e      	cmp	r6, r1
 800cd84:	dcf3      	bgt.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800cd86:	443b      	add	r3, r7
 800cd88:	b29e      	uxth	r6, r3
    if (offset >= q->len) {
 800cd8a:	45b4      	cmp	ip, r6
 800cd8c:	f200 809d 	bhi.w	800ceca <dhcp_recv+0x276>
      offset = (u16_t)(offset - q->len);
 800cd90:	eba6 060c 	sub.w	r6, r6, ip
      offset_max = (u16_t)(offset_max - q->len);
 800cd94:	eba4 0c0c 	sub.w	ip, r4, ip
      offset = (u16_t)(offset - q->len);
 800cd98:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 800cd9a:	fa1f f48c 	uxth.w	r4, ip
      if (offset < offset_max) {
 800cd9e:	42a6      	cmp	r6, r4
 800cda0:	d2e5      	bcs.n	800cd6e <dhcp_recv+0x11a>
        q = q->next;
 800cda2:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800cda4:	2d00      	cmp	r5, #0
 800cda6:	f000 8175 	beq.w	800d094 <dhcp_recv+0x440>
        options = (u8_t *)q->payload;
 800cdaa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cdae:	e7aa      	b.n	800cd06 <dhcp_recv+0xb2>
      offset++;
 800cdb0:	b286      	uxth	r6, r0
 800cdb2:	e7ea      	b.n	800cd8a <dhcp_recv+0x136>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cdb4:	2f04      	cmp	r7, #4
 800cdb6:	f040 8164 	bne.w	800d082 <dhcp_recv+0x42e>
      if (offset + len + 2 > 0xFFFF) {
 800cdba:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800cdbe:	428e      	cmp	r6, r1
 800cdc0:	d8d5      	bhi.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800cdc2:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800cdc4:	f04f 0a06 	mov.w	sl, #6
      offset = (u16_t)(offset + len + 2);
 800cdc8:	b2b6      	uxth	r6, r6
        u32_t value = 0;
 800cdca:	2200      	movs	r2, #0
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cdcc:	f81b 100a 	ldrb.w	r1, [fp, sl]
        u32_t value = 0;
 800cdd0:	9205      	str	r2, [sp, #20]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	d1d9      	bne.n	800cd8a <dhcp_recv+0x136>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cdd6:	463a      	mov	r2, r7
 800cdd8:	a905      	add	r1, sp, #20
 800cdda:	4628      	mov	r0, r5
 800cddc:	f003 fe9a 	bl	8010b14 <pbuf_copy_partial>
 800cde0:	4287      	cmp	r7, r0
 800cde2:	d1c4      	bne.n	800cd6e <dhcp_recv+0x11a>
          } else if (decode_len == 4) {
 800cde4:	2f04      	cmp	r7, #4
 800cde6:	f000 8163 	beq.w	800d0b0 <dhcp_recv+0x45c>
            value = ((u8_t *)&value)[0];
 800cdea:	f89d 0014 	ldrb.w	r0, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800cdee:	2201      	movs	r2, #1
    if (offset >= q->len) {
 800cdf0:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
          dhcp_got_option(dhcp, decode_idx);
 800cdf4:	f80b 200a 	strb.w	r2, [fp, sl]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800cdf8:	4a2f      	ldr	r2, [pc, #188]	@ (800ceb8 <dhcp_recv+0x264>)
 800cdfa:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
 800cdfe:	e7c4      	b.n	800cd8a <dhcp_recv+0x136>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ce00:	2f04      	cmp	r7, #4
 800ce02:	f040 8123 	bne.w	800d04c <dhcp_recv+0x3f8>
      if (offset + len + 2 > 0xFFFF) {
 800ce06:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800ce0a:	428e      	cmp	r6, r1
 800ce0c:	d8af      	bhi.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce0e:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 800ce10:	f04f 0a05 	mov.w	sl, #5
      offset = (u16_t)(offset + len + 2);
 800ce14:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ce16:	e7d8      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ce18:	2f04      	cmp	r7, #4
 800ce1a:	f040 80f3 	bne.w	800d004 <dhcp_recv+0x3b0>
      if (offset + len + 2 > 0xFFFF) {
 800ce1e:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800ce22:	428e      	cmp	r6, r1
 800ce24:	d8a3      	bhi.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce26:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 800ce28:	46ba      	mov	sl, r7
      offset = (u16_t)(offset + len + 2);
 800ce2a:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ce2c:	e7cd      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ce2e:	2f04      	cmp	r7, #4
 800ce30:	f040 8115 	bne.w	800d05e <dhcp_recv+0x40a>
      if (offset + len + 2 > 0xFFFF) {
 800ce34:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800ce38:	428e      	cmp	r6, r1
 800ce3a:	d898      	bhi.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce3c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ce3e:	f04f 0a03 	mov.w	sl, #3
      offset = (u16_t)(offset + len + 2);
 800ce42:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ce44:	e7c1      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ce46:	2f01      	cmp	r7, #1
 800ce48:	f040 80ee 	bne.w	800d028 <dhcp_recv+0x3d4>
      if (offset + len + 2 > 0xFFFF) {
 800ce4c:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 800ce50:	4288      	cmp	r0, r1
 800ce52:	d08c      	beq.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce54:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ce56:	46ba      	mov	sl, r7
      offset = (u16_t)(offset + len + 2);
 800ce58:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ce5a:	e7b6      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ce5c:	2f03      	cmp	r7, #3
 800ce5e:	f240 8107 	bls.w	800d070 <dhcp_recv+0x41c>
      if (offset + len + 2 > 0xFFFF) {
 800ce62:	443e      	add	r6, r7
 800ce64:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 800ce68:	428e      	cmp	r6, r1
 800ce6a:	dc80      	bgt.n	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce6c:	18fa      	adds	r2, r7, r3
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ce6e:	f04f 0a07 	mov.w	sl, #7
        decode_len = 4; /* only copy the first given router */
 800ce72:	2704      	movs	r7, #4
      offset = (u16_t)(offset + len + 2);
 800ce74:	b296      	uxth	r6, r2
      if (decode_len > 0) {
 800ce76:	e7a8      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ce78:	2f04      	cmp	r7, #4
 800ce7a:	f040 80cc 	bne.w	800d016 <dhcp_recv+0x3c2>
      if (offset + len + 2 > 0xFFFF) {
 800ce7e:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800ce82:	428e      	cmp	r6, r1
 800ce84:	f63f af73 	bhi.w	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ce88:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ce8a:	f04f 0a02 	mov.w	sl, #2
      offset = (u16_t)(offset + len + 2);
 800ce8e:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ce90:	e79b      	b.n	800cdca <dhcp_recv+0x176>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ce92:	2f01      	cmp	r7, #1
 800ce94:	f040 80d1 	bne.w	800d03a <dhcp_recv+0x3e6>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ce98:	9a03      	ldr	r2, [sp, #12]
 800ce9a:	2af0      	cmp	r2, #240	@ 0xf0
 800ce9c:	f040 810c 	bne.w	800d0b8 <dhcp_recv+0x464>
      if (offset + len + 2 > 0xFFFF) {
 800cea0:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 800cea4:	4288      	cmp	r0, r1
 800cea6:	f43f af62 	beq.w	800cd6e <dhcp_recv+0x11a>
      offset = (u16_t)(offset + len + 2);
 800ceaa:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ceac:	f04f 0a00 	mov.w	sl, #0
      offset = (u16_t)(offset + len + 2);
 800ceb0:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 800ceb2:	e78a      	b.n	800cdca <dhcp_recv+0x176>
 800ceb4:	20009014 	.word	0x20009014
 800ceb8:	20008eec 	.word	0x20008eec
 800cebc:	20008ee4 	.word	0x20008ee4
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800cec0:	682a      	ldr	r2, [r5, #0]
 800cec2:	b302      	cbz	r2, 800cf06 <dhcp_recv+0x2b2>
 800cec4:	6852      	ldr	r2, [r2, #4]
 800cec6:	7817      	ldrb	r7, [r2, #0]
 800cec8:	e72f      	b.n	800cd2a <dhcp_recv+0xd6>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ceca:	42a6      	cmp	r6, r4
 800cecc:	f4ff af1b 	bcc.w	800cd06 <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ced0:	f89b 3000 	ldrb.w	r3, [fp]
 800ced4:	b163      	cbz	r3, 800cef0 <dhcp_recv+0x29c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ced6:	4bad      	ldr	r3, [pc, #692]	@ (800d18c <dhcp_recv+0x538>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ced8:	2200      	movs	r2, #0
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ceda:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cedc:	f88b 2000 	strb.w	r2, [fp]
    if (overload == DHCP_OVERLOAD_FILE) {
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	f000 80e2 	beq.w	800d0aa <dhcp_recv+0x456>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d006      	beq.n	800cef8 <dhcp_recv+0x2a4>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	f000 80db 	beq.w	800d0a6 <dhcp_recv+0x452>
  } else if (parse_sname_as_options) {
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 80e9 	beq.w	800d0ca <dhcp_recv+0x476>
    parse_sname_as_options = 0;
 800cef8:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800cefa:	246c      	movs	r4, #108	@ 0x6c
    options_idx = DHCP_SNAME_OFS;
 800cefc:	272c      	movs	r7, #44	@ 0x2c
    parse_sname_as_options = 0;
 800cefe:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 800cf00:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800cf04:	e6ea      	b.n	800ccdc <dhcp_recv+0x88>
    switch (op) {
 800cf06:	293b      	cmp	r1, #59	@ 0x3b
 800cf08:	d87a      	bhi.n	800d000 <dhcp_recv+0x3ac>
 800cf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf10 <dhcp_recv+0x2bc>)
 800cf0c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800cf10:	0800cdb1 	.word	0x0800cdb1
 800cf14:	0800d083 	.word	0x0800d083
 800cf18:	0800d001 	.word	0x0800d001
 800cf1c:	0800d071 	.word	0x0800d071
 800cf20:	0800d001 	.word	0x0800d001
 800cf24:	0800d001 	.word	0x0800d001
 800cf28:	0800d001 	.word	0x0800d001
 800cf2c:	0800d001 	.word	0x0800d001
 800cf30:	0800d001 	.word	0x0800d001
 800cf34:	0800d001 	.word	0x0800d001
 800cf38:	0800d001 	.word	0x0800d001
 800cf3c:	0800d001 	.word	0x0800d001
 800cf40:	0800d001 	.word	0x0800d001
 800cf44:	0800d001 	.word	0x0800d001
 800cf48:	0800d001 	.word	0x0800d001
 800cf4c:	0800d001 	.word	0x0800d001
 800cf50:	0800d001 	.word	0x0800d001
 800cf54:	0800d001 	.word	0x0800d001
 800cf58:	0800d001 	.word	0x0800d001
 800cf5c:	0800d001 	.word	0x0800d001
 800cf60:	0800d001 	.word	0x0800d001
 800cf64:	0800d001 	.word	0x0800d001
 800cf68:	0800d001 	.word	0x0800d001
 800cf6c:	0800d001 	.word	0x0800d001
 800cf70:	0800d001 	.word	0x0800d001
 800cf74:	0800d001 	.word	0x0800d001
 800cf78:	0800d001 	.word	0x0800d001
 800cf7c:	0800d001 	.word	0x0800d001
 800cf80:	0800d001 	.word	0x0800d001
 800cf84:	0800d001 	.word	0x0800d001
 800cf88:	0800d001 	.word	0x0800d001
 800cf8c:	0800d001 	.word	0x0800d001
 800cf90:	0800d001 	.word	0x0800d001
 800cf94:	0800d001 	.word	0x0800d001
 800cf98:	0800d001 	.word	0x0800d001
 800cf9c:	0800d001 	.word	0x0800d001
 800cfa0:	0800d001 	.word	0x0800d001
 800cfa4:	0800d001 	.word	0x0800d001
 800cfa8:	0800d001 	.word	0x0800d001
 800cfac:	0800d001 	.word	0x0800d001
 800cfb0:	0800d001 	.word	0x0800d001
 800cfb4:	0800d001 	.word	0x0800d001
 800cfb8:	0800d001 	.word	0x0800d001
 800cfbc:	0800d001 	.word	0x0800d001
 800cfc0:	0800d001 	.word	0x0800d001
 800cfc4:	0800d001 	.word	0x0800d001
 800cfc8:	0800d001 	.word	0x0800d001
 800cfcc:	0800d001 	.word	0x0800d001
 800cfd0:	0800d001 	.word	0x0800d001
 800cfd4:	0800d001 	.word	0x0800d001
 800cfd8:	0800d001 	.word	0x0800d001
 800cfdc:	0800d05f 	.word	0x0800d05f
 800cfe0:	0800d03b 	.word	0x0800d03b
 800cfe4:	0800d029 	.word	0x0800d029
 800cfe8:	0800d017 	.word	0x0800d017
 800cfec:	0800d001 	.word	0x0800d001
 800cff0:	0800d001 	.word	0x0800d001
 800cff4:	0800d001 	.word	0x0800d001
 800cff8:	0800d005 	.word	0x0800d005
 800cffc:	0800d04d 	.word	0x0800d04d
 800d000:	2700      	movs	r7, #0
 800d002:	e6c0      	b.n	800cd86 <dhcp_recv+0x132>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d004:	4b62      	ldr	r3, [pc, #392]	@ (800d190 <dhcp_recv+0x53c>)
 800d006:	f240 625d 	movw	r2, #1629	@ 0x65d
 800d00a:	4962      	ldr	r1, [pc, #392]	@ (800d194 <dhcp_recv+0x540>)
 800d00c:	464c      	mov	r4, r9
 800d00e:	4862      	ldr	r0, [pc, #392]	@ (800d198 <dhcp_recv+0x544>)
 800d010:	f009 fa54 	bl	80164bc <iprintf>
 800d014:	e6ac      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d016:	4b5e      	ldr	r3, [pc, #376]	@ (800d190 <dhcp_recv+0x53c>)
 800d018:	f240 6259 	movw	r2, #1625	@ 0x659
 800d01c:	495d      	ldr	r1, [pc, #372]	@ (800d194 <dhcp_recv+0x540>)
 800d01e:	464c      	mov	r4, r9
 800d020:	485d      	ldr	r0, [pc, #372]	@ (800d198 <dhcp_recv+0x544>)
 800d022:	f009 fa4b 	bl	80164bc <iprintf>
 800d026:	e6a3      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d028:	4b59      	ldr	r3, [pc, #356]	@ (800d190 <dhcp_recv+0x53c>)
 800d02a:	f240 6255 	movw	r2, #1621	@ 0x655
 800d02e:	495b      	ldr	r1, [pc, #364]	@ (800d19c <dhcp_recv+0x548>)
 800d030:	464c      	mov	r4, r9
 800d032:	4859      	ldr	r0, [pc, #356]	@ (800d198 <dhcp_recv+0x544>)
 800d034:	f009 fa42 	bl	80164bc <iprintf>
 800d038:	e69a      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d03a:	4b55      	ldr	r3, [pc, #340]	@ (800d190 <dhcp_recv+0x53c>)
 800d03c:	f240 624f 	movw	r2, #1615	@ 0x64f
 800d040:	4956      	ldr	r1, [pc, #344]	@ (800d19c <dhcp_recv+0x548>)
 800d042:	464c      	mov	r4, r9
 800d044:	4854      	ldr	r0, [pc, #336]	@ (800d198 <dhcp_recv+0x544>)
 800d046:	f009 fa39 	bl	80164bc <iprintf>
 800d04a:	e691      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d04c:	4b50      	ldr	r3, [pc, #320]	@ (800d190 <dhcp_recv+0x53c>)
 800d04e:	f240 6261 	movw	r2, #1633	@ 0x661
 800d052:	4950      	ldr	r1, [pc, #320]	@ (800d194 <dhcp_recv+0x540>)
 800d054:	464c      	mov	r4, r9
 800d056:	4850      	ldr	r0, [pc, #320]	@ (800d198 <dhcp_recv+0x544>)
 800d058:	f009 fa30 	bl	80164bc <iprintf>
 800d05c:	e688      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d05e:	4b4c      	ldr	r3, [pc, #304]	@ (800d190 <dhcp_recv+0x53c>)
 800d060:	f240 6241 	movw	r2, #1601	@ 0x641
 800d064:	494b      	ldr	r1, [pc, #300]	@ (800d194 <dhcp_recv+0x540>)
 800d066:	464c      	mov	r4, r9
 800d068:	484b      	ldr	r0, [pc, #300]	@ (800d198 <dhcp_recv+0x544>)
 800d06a:	f009 fa27 	bl	80164bc <iprintf>
 800d06e:	e67f      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d070:	4b47      	ldr	r3, [pc, #284]	@ (800d190 <dhcp_recv+0x53c>)
 800d072:	f240 6233 	movw	r2, #1587	@ 0x633
 800d076:	494a      	ldr	r1, [pc, #296]	@ (800d1a0 <dhcp_recv+0x54c>)
 800d078:	464c      	mov	r4, r9
 800d07a:	4847      	ldr	r0, [pc, #284]	@ (800d198 <dhcp_recv+0x544>)
 800d07c:	f009 fa1e 	bl	80164bc <iprintf>
 800d080:	e676      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d082:	4b43      	ldr	r3, [pc, #268]	@ (800d190 <dhcp_recv+0x53c>)
 800d084:	f240 622e 	movw	r2, #1582	@ 0x62e
 800d088:	4942      	ldr	r1, [pc, #264]	@ (800d194 <dhcp_recv+0x540>)
 800d08a:	464c      	mov	r4, r9
 800d08c:	4842      	ldr	r0, [pc, #264]	@ (800d198 <dhcp_recv+0x544>)
 800d08e:	f009 fa15 	bl	80164bc <iprintf>
 800d092:	e66d      	b.n	800cd70 <dhcp_recv+0x11c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800d094:	4b3e      	ldr	r3, [pc, #248]	@ (800d190 <dhcp_recv+0x53c>)
 800d096:	f240 629d 	movw	r2, #1693	@ 0x69d
 800d09a:	4942      	ldr	r1, [pc, #264]	@ (800d1a4 <dhcp_recv+0x550>)
 800d09c:	464c      	mov	r4, r9
 800d09e:	483e      	ldr	r0, [pc, #248]	@ (800d198 <dhcp_recv+0x544>)
 800d0a0:	f009 fa0c 	bl	80164bc <iprintf>
 800d0a4:	e664      	b.n	800cd70 <dhcp_recv+0x11c>
      parse_sname_as_options = 1;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	9300      	str	r3, [sp, #0]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d0aa:	24ec      	movs	r4, #236	@ 0xec
    options_idx = DHCP_FILE_OFS;
 800d0ac:	276c      	movs	r7, #108	@ 0x6c
 800d0ae:	e727      	b.n	800cf00 <dhcp_recv+0x2ac>
            value = lwip_ntohl(value);
 800d0b0:	9805      	ldr	r0, [sp, #20]
 800d0b2:	f002 fbc3 	bl	800f83c <lwip_htonl>
 800d0b6:	e69a      	b.n	800cdee <dhcp_recv+0x19a>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d0b8:	4b35      	ldr	r3, [pc, #212]	@ (800d190 <dhcp_recv+0x53c>)
 800d0ba:	f240 6251 	movw	r2, #1617	@ 0x651
 800d0be:	493a      	ldr	r1, [pc, #232]	@ (800d1a8 <dhcp_recv+0x554>)
 800d0c0:	464c      	mov	r4, r9
 800d0c2:	4835      	ldr	r0, [pc, #212]	@ (800d198 <dhcp_recv+0x544>)
 800d0c4:	f009 f9fa 	bl	80164bc <iprintf>
 800d0c8:	e652      	b.n	800cd70 <dhcp_recv+0x11c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800d0ca:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800d0ce:	464c      	mov	r4, r9
 800d0d0:	f8dd a000 	ldr.w	sl, [sp]
 800d0d4:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f43f ae49 	beq.w	800cd70 <dhcp_recv+0x11c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d0de:	4a2b      	ldr	r2, [pc, #172]	@ (800d18c <dhcp_recv+0x538>)
  msg_in = (struct dhcp_msg *)p->payload;
 800d0e0:	f8d9 6004 	ldr.w	r6, [r9, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d0e4:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 800d0e6:	2b05      	cmp	r3, #5
 800d0e8:	d01b      	beq.n	800d122 <dhcp_recv+0x4ce>
  else if ((msg_type == DHCP_NAK) &&
 800d0ea:	2b06      	cmp	r3, #6
 800d0ec:	d028      	beq.n	800d140 <dhcp_recv+0x4ec>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	f47f ae3e 	bne.w	800cd70 <dhcp_recv+0x11c>
 800d0f4:	796b      	ldrb	r3, [r5, #5]
 800d0f6:	2b06      	cmp	r3, #6
 800d0f8:	f47f ae3a 	bne.w	800cd70 <dhcp_recv+0x11c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d0fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d100:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d102:	2b00      	cmp	r3, #0
 800d104:	f43f ae34 	beq.w	800cd70 <dhcp_recv+0x11c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d108:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 800d10a:	f8a5 a008 	strh.w	sl, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d10e:	f002 fb95 	bl	800f83c <lwip_htonl>
 800d112:	4603      	mov	r3, r0
    dhcp_select(netif);
 800d114:	4638      	mov	r0, r7
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d116:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d118:	6933      	ldr	r3, [r6, #16]
 800d11a:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 800d11c:	f7ff fc76 	bl	800ca0c <dhcp_select.isra.0>
 800d120:	e626      	b.n	800cd70 <dhcp_recv+0x11c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d122:	796b      	ldrb	r3, [r5, #5]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d025      	beq.n	800d174 <dhcp_recv+0x520>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d128:	3b03      	subs	r3, #3
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	f63f ae20 	bhi.w	800cd70 <dhcp_recv+0x11c>
      dhcp_handle_ack(netif, msg_in);
 800d130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d132:	4631      	mov	r1, r6
 800d134:	f7ff f9cc 	bl	800c4d0 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 800d138:	4638      	mov	r0, r7
 800d13a:	f7ff f8bb 	bl	800c2b4 <dhcp_bind>
 800d13e:	e617      	b.n	800cd70 <dhcp_recv+0x11c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d140:	796b      	ldrb	r3, [r5, #5]
 800d142:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d144:	2a02      	cmp	r2, #2
 800d146:	d902      	bls.n	800d14e <dhcp_recv+0x4fa>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	f47f ae11 	bne.w	800cd70 <dhcp_recv+0x11c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  if (new_state != dhcp->state) {
 800d150:	795a      	ldrb	r2, [r3, #5]
 800d152:	2a0c      	cmp	r2, #12
 800d154:	d004      	beq.n	800d160 <dhcp_recv+0x50c>
    dhcp->state = new_state;
 800d156:	210c      	movs	r1, #12
    dhcp->request_timeout = 0;
 800d158:	2200      	movs	r2, #0
    dhcp->state = new_state;
 800d15a:	f8a3 1005 	strh.w	r1, [r3, #5]
    dhcp->request_timeout = 0;
 800d15e:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d160:	4b12      	ldr	r3, [pc, #72]	@ (800d1ac <dhcp_recv+0x558>)
 800d162:	4638      	mov	r0, r7
 800d164:	461a      	mov	r2, r3
 800d166:	4619      	mov	r1, r3
 800d168:	f002 ff6c 	bl	8010044 <netif_set_addr>
  dhcp_discover(netif);
 800d16c:	4638      	mov	r0, r7
 800d16e:	f7ff fb7f 	bl	800c870 <dhcp_discover>
}
 800d172:	e5fd      	b.n	800cd70 <dhcp_recv+0x11c>
      dhcp_handle_ack(netif, msg_in);
 800d174:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d176:	4631      	mov	r1, r6
 800d178:	f7ff f9aa 	bl	800c4d0 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d17c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
        dhcp_check(netif);
 800d180:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d182:	071b      	lsls	r3, r3, #28
 800d184:	d5d9      	bpl.n	800d13a <dhcp_recv+0x4e6>
        dhcp_check(netif);
 800d186:	f7ff f87d 	bl	800c284 <dhcp_check>
 800d18a:	e5f1      	b.n	800cd70 <dhcp_recv+0x11c>
 800d18c:	20008eec 	.word	0x20008eec
 800d190:	08019c90 	.word	0x08019c90
 800d194:	08019f34 	.word	0x08019f34
 800d198:	080187f8 	.word	0x080187f8
 800d19c:	08019f54 	.word	0x08019f54
 800d1a0:	08019f40 	.word	0x08019f40
 800d1a4:	08019f78 	.word	0x08019f78
 800d1a8:	08019f60 	.word	0x08019f60
 800d1ac:	0801a7a0 	.word	0x0801a7a0

0800d1b0 <dhcp_network_changed>:
{
 800d1b0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d1b2:	6a45      	ldr	r5, [r0, #36]	@ 0x24
  if (!dhcp) {
 800d1b4:	b135      	cbz	r5, 800d1c4 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 800d1b6:	796b      	ldrb	r3, [r5, #5]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d803      	bhi.n	800d1c6 <dhcp_network_changed+0x16>
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d813      	bhi.n	800d1ea <dhcp_network_changed+0x3a>
 800d1c2:	b95b      	cbnz	r3, 800d1dc <dhcp_network_changed+0x2c>
}
 800d1c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 800d1c6:	2b0a      	cmp	r3, #10
 800d1c8:	d00f      	beq.n	800d1ea <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800d1ca:	2b0c      	cmp	r3, #12
 800d1cc:	d906      	bls.n	800d1dc <dhcp_network_changed+0x2c>
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <dhcp_network_changed+0x48>)
 800d1d0:	f240 326d 	movw	r2, #877	@ 0x36d
 800d1d4:	4909      	ldr	r1, [pc, #36]	@ (800d1fc <dhcp_network_changed+0x4c>)
 800d1d6:	480a      	ldr	r0, [pc, #40]	@ (800d200 <dhcp_network_changed+0x50>)
 800d1d8:	f009 f970 	bl	80164bc <iprintf>
      dhcp->tries = 0;
 800d1dc:	2300      	movs	r3, #0
      dhcp_discover(netif);
 800d1de:	4620      	mov	r0, r4
      dhcp->tries = 0;
 800d1e0:	71ab      	strb	r3, [r5, #6]
}
 800d1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 800d1e6:	f7ff bb43 	b.w	800c870 <dhcp_discover>
      dhcp->tries = 0;
 800d1ea:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 800d1ec:	4620      	mov	r0, r4
      dhcp->tries = 0;
 800d1ee:	71ab      	strb	r3, [r5, #6]
}
 800d1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 800d1f4:	f7ff ba5a 	b.w	800c6ac <dhcp_reboot.isra.0>
 800d1f8:	08019c90 	.word	0x08019c90
 800d1fc:	08019fc0 	.word	0x08019fc0
 800d200:	080187f8 	.word	0x080187f8

0800d204 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d204:	2800      	cmp	r0, #0
 800d206:	d061      	beq.n	800d2cc <dhcp_arp_reply+0xc8>
{
 800d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dhcp = netif_dhcp_data(netif);
 800d20c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
{
 800d20e:	b084      	sub	sp, #16
 800d210:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d212:	b115      	cbz	r5, 800d21a <dhcp_arp_reply+0x16>
 800d214:	796b      	ldrb	r3, [r5, #5]
 800d216:	2b08      	cmp	r3, #8
 800d218:	d002      	beq.n	800d220 <dhcp_arp_reply+0x1c>
}
 800d21a:	b004      	add	sp, #16
 800d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d220:	680a      	ldr	r2, [r1, #0]
 800d222:	69eb      	ldr	r3, [r5, #28]
 800d224:	429a      	cmp	r2, r3
 800d226:	d1f8      	bne.n	800d21a <dhcp_arp_reply+0x16>
    dhcp->state = new_state;
 800d228:	220c      	movs	r2, #12
    dhcp->request_timeout = 0;
 800d22a:	2300      	movs	r3, #0
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d22c:	4629      	mov	r1, r5
    dhcp->state = new_state;
 800d22e:	f8a5 2005 	strh.w	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d232:	2204      	movs	r2, #4
    dhcp->request_timeout = 0;
 800d234:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d236:	f10d 030e 	add.w	r3, sp, #14
 800d23a:	f7ff f989 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800d23e:	4606      	mov	r6, r0
 800d240:	2800      	cmp	r0, #0
 800d242:	d03b      	beq.n	800d2bc <dhcp_arp_reply+0xb8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d244:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 800d248:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d24a:	f108 0306 	add.w	r3, r8, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d24e:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d250:	2b44      	cmp	r3, #68	@ 0x44
 800d252:	d842      	bhi.n	800d2da <dhcp_arp_reply+0xd6>
  options[options_out_len++] = option_type;
 800d254:	f108 0301 	add.w	r3, r8, #1
 800d258:	2232      	movs	r2, #50	@ 0x32
  options[options_out_len++] = option_len;
 800d25a:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 800d25c:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 800d260:	2204      	movs	r2, #4
 800d262:	f108 0802 	add.w	r8, r8, #2
 800d266:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d268:	69e8      	ldr	r0, [r5, #28]
 800d26a:	f002 fae7 	bl	800f83c <lwip_htonl>
 800d26e:	4639      	mov	r1, r7
 800d270:	4602      	mov	r2, r0
 800d272:	fa1f f088 	uxth.w	r0, r8
 800d276:	f7fe ffe1 	bl	800c23c <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 800d27a:	1c41      	adds	r1, r0, #1
 800d27c:	23ff      	movs	r3, #255	@ 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d27e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 800d280:	b289      	uxth	r1, r1
 800d282:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d284:	2943      	cmp	r1, #67	@ 0x43
 800d286:	d807      	bhi.n	800d298 <dhcp_arp_reply+0x94>
    options[options_out_len++] = 0;
 800d288:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 800d28c:	1878      	adds	r0, r7, r1
 800d28e:	2100      	movs	r1, #0
 800d290:	b292      	uxth	r2, r2
 800d292:	f009 faa5 	bl	80167e0 <memset>
 800d296:	2144      	movs	r1, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d298:	31f0      	adds	r1, #240	@ 0xf0
 800d29a:	4630      	mov	r0, r6
 800d29c:	b289      	uxth	r1, r1
 800d29e:	f003 fa6d 	bl	801077c <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d2a2:	4912      	ldr	r1, [pc, #72]	@ (800d2ec <dhcp_arp_reply+0xe8>)
 800d2a4:	4a12      	ldr	r2, [pc, #72]	@ (800d2f0 <dhcp_arp_reply+0xec>)
 800d2a6:	2343      	movs	r3, #67	@ 0x43
 800d2a8:	9400      	str	r4, [sp, #0]
 800d2aa:	6808      	ldr	r0, [r1, #0]
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	9201      	str	r2, [sp, #4]
 800d2b0:	4a10      	ldr	r2, [pc, #64]	@ (800d2f4 <dhcp_arp_reply+0xf0>)
 800d2b2:	f007 ffc9 	bl	8015248 <udp_sendto_if_src>
    pbuf_free(p_out);
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f003 f94c 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800d2bc:	79ab      	ldrb	r3, [r5, #6]
 800d2be:	2bff      	cmp	r3, #255	@ 0xff
 800d2c0:	d001      	beq.n	800d2c6 <dhcp_arp_reply+0xc2>
    dhcp->tries++;
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d2c6:	2314      	movs	r3, #20
 800d2c8:	812b      	strh	r3, [r5, #8]
  return result;
 800d2ca:	e7a6      	b.n	800d21a <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f8 <dhcp_arp_reply+0xf4>)
 800d2ce:	f240 328b 	movw	r2, #907	@ 0x38b
 800d2d2:	490a      	ldr	r1, [pc, #40]	@ (800d2fc <dhcp_arp_reply+0xf8>)
 800d2d4:	480a      	ldr	r0, [pc, #40]	@ (800d300 <dhcp_arp_reply+0xfc>)
 800d2d6:	f009 b8f1 	b.w	80164bc <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d2da:	4b07      	ldr	r3, [pc, #28]	@ (800d2f8 <dhcp_arp_reply+0xf4>)
 800d2dc:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d2e0:	4908      	ldr	r1, [pc, #32]	@ (800d304 <dhcp_arp_reply+0x100>)
 800d2e2:	4807      	ldr	r0, [pc, #28]	@ (800d300 <dhcp_arp_reply+0xfc>)
 800d2e4:	f009 f8ea 	bl	80164bc <iprintf>
 800d2e8:	e7b4      	b.n	800d254 <dhcp_arp_reply+0x50>
 800d2ea:	bf00      	nop
 800d2ec:	20008ee0 	.word	0x20008ee0
 800d2f0:	0801a7a0 	.word	0x0801a7a0
 800d2f4:	0801a79c 	.word	0x0801a79c
 800d2f8:	08019c90 	.word	0x08019c90
 800d2fc:	080187e8 	.word	0x080187e8
 800d300:	080187f8 	.word	0x080187f8
 800d304:	08019e44 	.word	0x08019e44

0800d308 <dhcp_renew>:
{
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d30c:	6a47      	ldr	r7, [r0, #36]	@ 0x24
{
 800d30e:	b087      	sub	sp, #28
 800d310:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 800d312:	797b      	ldrb	r3, [r7, #5]
 800d314:	2b05      	cmp	r3, #5
 800d316:	d004      	beq.n	800d322 <dhcp_renew+0x1a>
    dhcp->state = new_state;
 800d318:	2205      	movs	r2, #5
    dhcp->request_timeout = 0;
 800d31a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800d31c:	f8a7 2005 	strh.w	r2, [r7, #5]
    dhcp->request_timeout = 0;
 800d320:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d322:	f10d 0316 	add.w	r3, sp, #22
 800d326:	2203      	movs	r2, #3
 800d328:	4639      	mov	r1, r7
 800d32a:	4658      	mov	r0, fp
 800d32c:	f7ff f910 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800d330:	4680      	mov	r8, r0
 800d332:	2800      	cmp	r0, #0
 800d334:	f000 80a5 	beq.w	800d482 <dhcp_renew+0x17a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d338:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 800d33c:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d33e:	1d2c      	adds	r4, r5, #4
 800d340:	f105 0902 	add.w	r9, r5, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d344:	36f0      	adds	r6, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d346:	2c44      	cmp	r4, #68	@ 0x44
 800d348:	f200 8083 	bhi.w	800d452 <dhcp_renew+0x14a>
  options[options_out_len++] = option_type;
 800d34c:	2239      	movs	r2, #57	@ 0x39
 800d34e:	1c6b      	adds	r3, r5, #1
 800d350:	fa1f f989 	uxth.w	r9, r9
 800d354:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 800d356:	b29b      	uxth	r3, r3
 800d358:	2202      	movs	r2, #2
 800d35a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d35c:	eb09 0302 	add.w	r3, r9, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d360:	f8bb a02c 	ldrh.w	sl, [fp, #44]	@ 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d364:	2b44      	cmp	r3, #68	@ 0x44
 800d366:	f200 8084 	bhi.w	800d472 <dhcp_renew+0x16a>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d36a:	1ceb      	adds	r3, r5, #3
 800d36c:	b2a4      	uxth	r4, r4
 800d36e:	ea4f 221a 	mov.w	r2, sl, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d372:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d374:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d378:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d37c:	1d63      	adds	r3, r4, #5
 800d37e:	2b44      	cmp	r3, #68	@ 0x44
 800d380:	d86f      	bhi.n	800d462 <dhcp_renew+0x15a>
  options[options_out_len++] = option_type;
 800d382:	2237      	movs	r2, #55	@ 0x37
 800d384:	1d6b      	adds	r3, r5, #5
 800d386:	f105 0909 	add.w	r9, r5, #9
 800d38a:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800d4a4 <dhcp_renew+0x19c>
 800d38e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 800d390:	1dac      	adds	r4, r5, #6
 800d392:	b29b      	uxth	r3, r3
 800d394:	2203      	movs	r2, #3
 800d396:	b2a4      	uxth	r4, r4
 800d398:	9503      	str	r5, [sp, #12]
 800d39a:	fa1f f989 	uxth.w	r9, r9
 800d39e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d3a0:	2c43      	cmp	r4, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d3a2:	f81a 5b01 	ldrb.w	r5, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d3a6:	d846      	bhi.n	800d436 <dhcp_renew+0x12e>
  options[options_out_len++] = value;
 800d3a8:	1c63      	adds	r3, r4, #1
 800d3aa:	5535      	strb	r5, [r6, r4]
 800d3ac:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d3ae:	4599      	cmp	r9, r3
  options[options_out_len++] = value;
 800d3b0:	461c      	mov	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d3b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d3b6:	d1f3      	bne.n	800d3a0 <dhcp_renew+0x98>
  options[options_out_len++] = DHCP_OPTION_END;
 800d3b8:	9d03      	ldr	r5, [sp, #12]
 800d3ba:	23ff      	movs	r3, #255	@ 0xff
 800d3bc:	f105 000a 	add.w	r0, r5, #10
 800d3c0:	f806 3009 	strb.w	r3, [r6, r9]
 800d3c4:	b280      	uxth	r0, r0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d3c6:	2843      	cmp	r0, #67	@ 0x43
 800d3c8:	d808      	bhi.n	800d3dc <dhcp_renew+0xd4>
    options[options_out_len++] = 0;
 800d3ca:	f1c5 0239 	rsb	r2, r5, #57	@ 0x39
 800d3ce:	4430      	add	r0, r6
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	b292      	uxth	r2, r2
 800d3d4:	3201      	adds	r2, #1
 800d3d6:	f009 fa03 	bl	80167e0 <memset>
 800d3da:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d3dc:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	b289      	uxth	r1, r1
 800d3e4:	f003 f9ca 	bl	801077c <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d3e8:	4a27      	ldr	r2, [pc, #156]	@ (800d488 <dhcp_renew+0x180>)
 800d3ea:	f8cd b000 	str.w	fp, [sp]
 800d3ee:	2343      	movs	r3, #67	@ 0x43
 800d3f0:	6810      	ldr	r0, [r2, #0]
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	f107 0218 	add.w	r2, r7, #24
 800d3f8:	f007 ffee 	bl	80153d8 <udp_sendto_if>
 800d3fc:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800d3fe:	4640      	mov	r0, r8
 800d400:	f003 f8a8 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800d404:	79bb      	ldrb	r3, [r7, #6]
 800d406:	2bff      	cmp	r3, #255	@ 0xff
 800d408:	d01d      	beq.n	800d446 <dhcp_renew+0x13e>
    dhcp->tries++;
 800d40a:	3301      	adds	r3, #1
 800d40c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d40e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 800d410:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d412:	d818      	bhi.n	800d446 <dhcp_renew+0x13e>
 800d414:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d418:	4a1c      	ldr	r2, [pc, #112]	@ (800d48c <dhcp_renew+0x184>)
}
 800d41a:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d41c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d420:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d422:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800d426:	b29b      	uxth	r3, r3
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	095b      	lsrs	r3, r3, #5
 800d42e:	813b      	strh	r3, [r7, #8]
}
 800d430:	b007      	add	sp, #28
 800d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d436:	4b16      	ldr	r3, [pc, #88]	@ (800d490 <dhcp_renew+0x188>)
 800d438:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800d43c:	4915      	ldr	r1, [pc, #84]	@ (800d494 <dhcp_renew+0x18c>)
 800d43e:	4816      	ldr	r0, [pc, #88]	@ (800d498 <dhcp_renew+0x190>)
 800d440:	f009 f83c 	bl	80164bc <iprintf>
 800d444:	e7b0      	b.n	800d3a8 <dhcp_renew+0xa0>
    result = ERR_MEM;
 800d446:	2328      	movs	r3, #40	@ 0x28
}
 800d448:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d44a:	813b      	strh	r3, [r7, #8]
}
 800d44c:	b007      	add	sp, #28
 800d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d452:	4b0f      	ldr	r3, [pc, #60]	@ (800d490 <dhcp_renew+0x188>)
 800d454:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d458:	4910      	ldr	r1, [pc, #64]	@ (800d49c <dhcp_renew+0x194>)
 800d45a:	480f      	ldr	r0, [pc, #60]	@ (800d498 <dhcp_renew+0x190>)
 800d45c:	f009 f82e 	bl	80164bc <iprintf>
 800d460:	e774      	b.n	800d34c <dhcp_renew+0x44>
 800d462:	4b0b      	ldr	r3, [pc, #44]	@ (800d490 <dhcp_renew+0x188>)
 800d464:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d468:	490c      	ldr	r1, [pc, #48]	@ (800d49c <dhcp_renew+0x194>)
 800d46a:	480b      	ldr	r0, [pc, #44]	@ (800d498 <dhcp_renew+0x190>)
 800d46c:	f009 f826 	bl	80164bc <iprintf>
 800d470:	e787      	b.n	800d382 <dhcp_renew+0x7a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d472:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <dhcp_renew+0x188>)
 800d474:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800d478:	4909      	ldr	r1, [pc, #36]	@ (800d4a0 <dhcp_renew+0x198>)
 800d47a:	4807      	ldr	r0, [pc, #28]	@ (800d498 <dhcp_renew+0x190>)
 800d47c:	f009 f81e 	bl	80164bc <iprintf>
 800d480:	e773      	b.n	800d36a <dhcp_renew+0x62>
    result = ERR_MEM;
 800d482:	f04f 34ff 	mov.w	r4, #4294967295
 800d486:	e7bd      	b.n	800d404 <dhcp_renew+0xfc>
 800d488:	20008ee0 	.word	0x20008ee0
 800d48c:	10624dd3 	.word	0x10624dd3
 800d490:	08019c90 	.word	0x08019c90
 800d494:	08019ec4 	.word	0x08019ec4
 800d498:	080187f8 	.word	0x080187f8
 800d49c:	08019e44 	.word	0x08019e44
 800d4a0:	08019e88 	.word	0x08019e88
 800d4a4:	08019ff8 	.word	0x08019ff8

0800d4a8 <dhcp_release_and_stop>:
{
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4ac:	6a44      	ldr	r4, [r0, #36]	@ 0x24
{
 800d4ae:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 800d4b0:	2c00      	cmp	r4, #0
 800d4b2:	d068      	beq.n	800d586 <dhcp_release_and_stop+0xde>
  if (dhcp->state == DHCP_STATE_OFF) {
 800d4b4:	7962      	ldrb	r2, [r4, #5]
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	d065      	beq.n	800d586 <dhcp_release_and_stop+0xde>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d4ba:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d4bc:	2300      	movs	r3, #0
 800d4be:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d4c0:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d4c2:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d4c4:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d4c6:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d4c8:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d4ca:	62a3      	str	r3, [r4, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d4cc:	f8c4 300e 	str.w	r3, [r4, #14]
 800d4d0:	f8c4 3012 	str.w	r3, [r4, #18]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d4d4:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d4d8:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d4dc:	d901      	bls.n	800d4e2 <dhcp_release_and_stop+0x3a>
 800d4de:	2a0a      	cmp	r2, #10
 800d4e0:	d143      	bne.n	800d56a <dhcp_release_and_stop+0xc2>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d4e2:	f10d 030a 	add.w	r3, sp, #10
 800d4e6:	2207      	movs	r2, #7
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff f830 	bl	800c550 <dhcp_create_msg>
    if (p_out != NULL) {
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d039      	beq.n	800d56a <dhcp_release_and_stop+0xc2>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d4f6:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 800d4fa:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d4fc:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d500:	37f0      	adds	r7, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d502:	2b44      	cmp	r3, #68	@ 0x44
 800d504:	d849      	bhi.n	800d59a <dhcp_release_and_stop+0xf2>
  options[options_out_len++] = option_type;
 800d506:	f108 0301 	add.w	r3, r8, #1
 800d50a:	2236      	movs	r2, #54	@ 0x36
  options[options_out_len++] = option_len;
 800d50c:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 800d50e:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 800d512:	2204      	movs	r2, #4
 800d514:	f108 0802 	add.w	r8, r8, #2
 800d518:	54fa      	strb	r2, [r7, r3]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d51a:	9803      	ldr	r0, [sp, #12]
 800d51c:	f002 f98e 	bl	800f83c <lwip_htonl>
 800d520:	4639      	mov	r1, r7
 800d522:	4602      	mov	r2, r0
 800d524:	fa1f f088 	uxth.w	r0, r8
 800d528:	f7fe fe88 	bl	800c23c <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 800d52c:	1c41      	adds	r1, r0, #1
 800d52e:	23ff      	movs	r3, #255	@ 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d530:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 800d532:	b289      	uxth	r1, r1
 800d534:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d536:	2943      	cmp	r1, #67	@ 0x43
 800d538:	d807      	bhi.n	800d54a <dhcp_release_and_stop+0xa2>
    options[options_out_len++] = 0;
 800d53a:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 800d53e:	1878      	adds	r0, r7, r1
 800d540:	2100      	movs	r1, #0
 800d542:	b292      	uxth	r2, r2
 800d544:	f009 f94c 	bl	80167e0 <memset>
 800d548:	2144      	movs	r1, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d54a:	31f0      	adds	r1, #240	@ 0xf0
 800d54c:	4630      	mov	r0, r6
 800d54e:	b289      	uxth	r1, r1
 800d550:	f003 f914 	bl	801077c <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d554:	4a15      	ldr	r2, [pc, #84]	@ (800d5ac <dhcp_release_and_stop+0x104>)
 800d556:	9500      	str	r5, [sp, #0]
 800d558:	2343      	movs	r3, #67	@ 0x43
 800d55a:	6810      	ldr	r0, [r2, #0]
 800d55c:	4631      	mov	r1, r6
 800d55e:	aa03      	add	r2, sp, #12
 800d560:	f007 ff3a 	bl	80153d8 <udp_sendto_if>
      pbuf_free(p_out);
 800d564:	4630      	mov	r0, r6
 800d566:	f002 fff5 	bl	8010554 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d56a:	4b11      	ldr	r3, [pc, #68]	@ (800d5b0 <dhcp_release_and_stop+0x108>)
 800d56c:	4628      	mov	r0, r5
 800d56e:	461a      	mov	r2, r3
 800d570:	4619      	mov	r1, r3
 800d572:	f002 fd67 	bl	8010044 <netif_set_addr>
  if (new_state != dhcp->state) {
 800d576:	7963      	ldrb	r3, [r4, #5]
 800d578:	b11b      	cbz	r3, 800d582 <dhcp_release_and_stop+0xda>
    dhcp->state = new_state;
 800d57a:	2300      	movs	r3, #0
 800d57c:	f8a4 3005 	strh.w	r3, [r4, #5]
    dhcp->request_timeout = 0;
 800d580:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 800d582:	7923      	ldrb	r3, [r4, #4]
 800d584:	b913      	cbnz	r3, 800d58c <dhcp_release_and_stop+0xe4>
}
 800d586:	b004      	add	sp, #16
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d58c:	f7fe ff7e 	bl	800c48c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	7123      	strb	r3, [r4, #4]
}
 800d594:	b004      	add	sp, #16
 800d596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d59a:	4b06      	ldr	r3, [pc, #24]	@ (800d5b4 <dhcp_release_and_stop+0x10c>)
 800d59c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d5a0:	4905      	ldr	r1, [pc, #20]	@ (800d5b8 <dhcp_release_and_stop+0x110>)
 800d5a2:	4806      	ldr	r0, [pc, #24]	@ (800d5bc <dhcp_release_and_stop+0x114>)
 800d5a4:	f008 ff8a 	bl	80164bc <iprintf>
 800d5a8:	e7ad      	b.n	800d506 <dhcp_release_and_stop+0x5e>
 800d5aa:	bf00      	nop
 800d5ac:	20008ee0 	.word	0x20008ee0
 800d5b0:	0801a7a0 	.word	0x0801a7a0
 800d5b4:	08019c90 	.word	0x08019c90
 800d5b8:	08019e44 	.word	0x08019e44
 800d5bc:	080187f8 	.word	0x080187f8

0800d5c0 <dhcp_start>:
{
 800d5c0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d044      	beq.n	800d650 <dhcp_start+0x90>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d5c6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	07da      	lsls	r2, r3, #31
 800d5ce:	d535      	bpl.n	800d63c <dhcp_start+0x7c>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d5d0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
  dhcp = netif_dhcp_data(netif);
 800d5d2:	6a45      	ldr	r5, [r0, #36]	@ 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d5d4:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800d5d8:	d322      	bcc.n	800d620 <dhcp_start+0x60>
  if (dhcp == NULL) {
 800d5da:	b33d      	cbz	r5, 800d62c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 800d5dc:	792b      	ldrb	r3, [r5, #4]
 800d5de:	bb13      	cbnz	r3, 800d626 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 800d5e0:	2234      	movs	r2, #52	@ 0x34
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f009 f8fb 	bl	80167e0 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d5ea:	f7fe ff15 	bl	800c418 <dhcp_inc_pcb_refcount>
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	b9b0      	cbnz	r0, 800d620 <dhcp_start+0x60>
  dhcp->pcb_allocated = 1;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800d5f6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800d5fa:	075b      	lsls	r3, r3, #29
 800d5fc:	d408      	bmi.n	800d610 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 800d5fe:	796b      	ldrb	r3, [r5, #5]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d003      	beq.n	800d60c <dhcp_start+0x4c>
    dhcp->state = new_state;
 800d604:	2302      	movs	r3, #2
    dhcp->request_timeout = 0;
 800d606:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 800d608:	f8a5 3005 	strh.w	r3, [r5, #5]
}
 800d60c:	4630      	mov	r0, r6
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 800d610:	4620      	mov	r0, r4
 800d612:	f7ff f92d 	bl	800c870 <dhcp_discover>
  if (result != ERR_OK) {
 800d616:	2800      	cmp	r0, #0
 800d618:	d0f8      	beq.n	800d60c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 800d61a:	4620      	mov	r0, r4
 800d61c:	f7ff ff44 	bl	800d4a8 <dhcp_release_and_stop>
    return ERR_MEM;
 800d620:	f04f 36ff 	mov.w	r6, #4294967295
 800d624:	e7f2      	b.n	800d60c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d626:	f7fe ff31 	bl	800c48c <dhcp_dec_pcb_refcount>
 800d62a:	e7d9      	b.n	800d5e0 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800d62c:	2034      	movs	r0, #52	@ 0x34
 800d62e:	f002 fb31 	bl	800fc94 <mem_malloc>
    if (dhcp == NULL) {
 800d632:	4605      	mov	r5, r0
 800d634:	2800      	cmp	r0, #0
 800d636:	d0f3      	beq.n	800d620 <dhcp_start+0x60>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800d638:	6260      	str	r0, [r4, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800d63a:	e7d1      	b.n	800d5e0 <dhcp_start+0x20>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d63c:	4b08      	ldr	r3, [pc, #32]	@ (800d660 <dhcp_start+0xa0>)
 800d63e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800d642:	4908      	ldr	r1, [pc, #32]	@ (800d664 <dhcp_start+0xa4>)
 800d644:	4808      	ldr	r0, [pc, #32]	@ (800d668 <dhcp_start+0xa8>)
 800d646:	f008 ff39 	bl	80164bc <iprintf>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d64a:	f06f 060f 	mvn.w	r6, #15
 800d64e:	e7dd      	b.n	800d60c <dhcp_start+0x4c>
 800d650:	4b03      	ldr	r3, [pc, #12]	@ (800d660 <dhcp_start+0xa0>)
 800d652:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800d656:	4905      	ldr	r1, [pc, #20]	@ (800d66c <dhcp_start+0xac>)
 800d658:	4803      	ldr	r0, [pc, #12]	@ (800d668 <dhcp_start+0xa8>)
 800d65a:	f008 ff2f 	bl	80164bc <iprintf>
 800d65e:	e7f4      	b.n	800d64a <dhcp_start+0x8a>
 800d660:	08019c90 	.word	0x08019c90
 800d664:	08019fd4 	.word	0x08019fd4
 800d668:	080187f8 	.word	0x080187f8
 800d66c:	080187e8 	.word	0x080187e8

0800d670 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 800d670:	4b7d      	ldr	r3, [pc, #500]	@ (800d868 <dhcp_coarse_tmr+0x1f8>)
{
 800d672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 800d676:	681d      	ldr	r5, [r3, #0]
{
 800d678:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 800d67a:	b1d5      	cbz	r5, 800d6b2 <dhcp_coarse_tmr+0x42>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d67c:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800d67e:	b1ac      	cbz	r4, 800d6ac <dhcp_coarse_tmr+0x3c>
 800d680:	7963      	ldrb	r3, [r4, #5]
 800d682:	b19b      	cbz	r3, 800d6ac <dhcp_coarse_tmr+0x3c>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800d684:	8aa1      	ldrh	r1, [r4, #20]
 800d686:	b129      	cbz	r1, 800d694 <dhcp_coarse_tmr+0x24>
 800d688:	8a62      	ldrh	r2, [r4, #18]
 800d68a:	3201      	adds	r2, #1
 800d68c:	b292      	uxth	r2, r2
 800d68e:	4291      	cmp	r1, r2
 800d690:	8262      	strh	r2, [r4, #18]
 800d692:	d011      	beq.n	800d6b8 <dhcp_coarse_tmr+0x48>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800d694:	8a22      	ldrh	r2, [r4, #16]
 800d696:	b11a      	cbz	r2, 800d6a0 <dhcp_coarse_tmr+0x30>
 800d698:	1e51      	subs	r1, r2, #1
 800d69a:	2a01      	cmp	r2, #1
 800d69c:	8221      	strh	r1, [r4, #16]
 800d69e:	d012      	beq.n	800d6c6 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800d6a0:	89e2      	ldrh	r2, [r4, #14]
 800d6a2:	b11a      	cbz	r2, 800d6ac <dhcp_coarse_tmr+0x3c>
 800d6a4:	1e51      	subs	r1, r2, #1
 800d6a6:	2a01      	cmp	r2, #1
 800d6a8:	81e1      	strh	r1, [r4, #14]
 800d6aa:	d015      	beq.n	800d6d8 <dhcp_coarse_tmr+0x68>
  NETIF_FOREACH(netif) {
 800d6ac:	682d      	ldr	r5, [r5, #0]
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	d1e4      	bne.n	800d67c <dhcp_coarse_tmr+0xc>
}
 800d6b2:	b007      	add	sp, #28
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f7ff fef5 	bl	800d4a8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f7ff ff7e 	bl	800d5c0 <dhcp_start>
 800d6c4:	e7f2      	b.n	800d6ac <dhcp_coarse_tmr+0x3c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d6c6:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
 800d6ca:	2a01      	cmp	r2, #1
 800d6cc:	d015      	beq.n	800d6fa <dhcp_coarse_tmr+0x8a>
 800d6ce:	2b0a      	cmp	r3, #10
 800d6d0:	d013      	beq.n	800d6fa <dhcp_coarse_tmr+0x8a>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d1ea      	bne.n	800d6ac <dhcp_coarse_tmr+0x3c>
 800d6d6:	e015      	b.n	800d704 <dhcp_coarse_tmr+0x94>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d6d8:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
 800d6dc:	2a01      	cmp	r2, #1
 800d6de:	d001      	beq.n	800d6e4 <dhcp_coarse_tmr+0x74>
 800d6e0:	2b0a      	cmp	r3, #10
 800d6e2:	d1e3      	bne.n	800d6ac <dhcp_coarse_tmr+0x3c>
    dhcp_renew(netif);
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7ff fe0f 	bl	800d308 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	8a62      	ldrh	r2, [r4, #18]
 800d6ee:	1a9b      	subs	r3, r3, r2
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	dddb      	ble.n	800d6ac <dhcp_coarse_tmr+0x3c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800d6f4:	105b      	asrs	r3, r3, #1
 800d6f6:	81e3      	strh	r3, [r4, #14]
 800d6f8:	e7d8      	b.n	800d6ac <dhcp_coarse_tmr+0x3c>
    dhcp->state = new_state;
 800d6fa:	2204      	movs	r2, #4
    dhcp->request_timeout = 0;
 800d6fc:	2300      	movs	r3, #0
    dhcp->state = new_state;
 800d6fe:	f8a4 2005 	strh.w	r2, [r4, #5]
    dhcp->request_timeout = 0;
 800d702:	8123      	strh	r3, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d704:	f10d 0316 	add.w	r3, sp, #22
 800d708:	2203      	movs	r2, #3
 800d70a:	4621      	mov	r1, r4
 800d70c:	4628      	mov	r0, r5
 800d70e:	f7fe ff1f 	bl	800c550 <dhcp_create_msg>
  if (p_out != NULL) {
 800d712:	4681      	mov	r9, r0
 800d714:	2800      	cmp	r0, #0
 800d716:	d067      	beq.n	800d7e8 <dhcp_coarse_tmr+0x178>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d718:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800d71c:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d71e:	1d3e      	adds	r6, r7, #4
 800d720:	f107 0a02 	add.w	sl, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d724:	f103 08f0 	add.w	r8, r3, #240	@ 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d728:	2e44      	cmp	r6, #68	@ 0x44
 800d72a:	f200 8085 	bhi.w	800d838 <dhcp_coarse_tmr+0x1c8>
  options[options_out_len++] = option_type;
 800d72e:	2239      	movs	r2, #57	@ 0x39
 800d730:	1c7b      	adds	r3, r7, #1
 800d732:	fa1f fa8a 	uxth.w	sl, sl
 800d736:	f808 2007 	strb.w	r2, [r8, r7]
  options[options_out_len++] = option_len;
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	2202      	movs	r2, #2
 800d73e:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d742:	eb0a 0302 	add.w	r3, sl, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d746:	f8b5 b02c 	ldrh.w	fp, [r5, #44]	@ 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d74a:	2b44      	cmp	r3, #68	@ 0x44
 800d74c:	f200 8084 	bhi.w	800d858 <dhcp_coarse_tmr+0x1e8>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d750:	1cfb      	adds	r3, r7, #3
 800d752:	b2b6      	uxth	r6, r6
 800d754:	ea4f 221b 	mov.w	r2, fp, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d758:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d75a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d75e:	f808 b003 	strb.w	fp, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d762:	1d73      	adds	r3, r6, #5
 800d764:	2b44      	cmp	r3, #68	@ 0x44
 800d766:	d86f      	bhi.n	800d848 <dhcp_coarse_tmr+0x1d8>
  options[options_out_len++] = option_type;
 800d768:	2237      	movs	r2, #55	@ 0x37
 800d76a:	1d7b      	adds	r3, r7, #5
 800d76c:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 800d88c <dhcp_coarse_tmr+0x21c>
 800d770:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 800d774:	b29b      	uxth	r3, r3
 800d776:	2203      	movs	r2, #3
 800d778:	1dbe      	adds	r6, r7, #6
 800d77a:	f808 2003 	strb.w	r2, [r8, r3]
 800d77e:	f107 0309 	add.w	r3, r7, #9
 800d782:	b2b6      	uxth	r6, r6
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d784:	b29b      	uxth	r3, r3
 800d786:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d788:	2e43      	cmp	r6, #67	@ 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d78a:	f81a bb01 	ldrb.w	fp, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d78e:	d849      	bhi.n	800d824 <dhcp_coarse_tmr+0x1b4>
  options[options_out_len++] = value;
 800d790:	1c73      	adds	r3, r6, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d792:	9a03      	ldr	r2, [sp, #12]
  options[options_out_len++] = value;
 800d794:	f808 b006 	strb.w	fp, [r8, r6]
 800d798:	b29b      	uxth	r3, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d79a:	4293      	cmp	r3, r2
  options[options_out_len++] = value;
 800d79c:	461e      	mov	r6, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d79e:	f8ad 3016 	strh.w	r3, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d7a2:	d1f1      	bne.n	800d788 <dhcp_coarse_tmr+0x118>
  options[options_out_len++] = DHCP_OPTION_END;
 800d7a4:	f107 000a 	add.w	r0, r7, #10
 800d7a8:	23ff      	movs	r3, #255	@ 0xff
 800d7aa:	b280      	uxth	r0, r0
 800d7ac:	f808 3002 	strb.w	r3, [r8, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d7b0:	2843      	cmp	r0, #67	@ 0x43
 800d7b2:	d808      	bhi.n	800d7c6 <dhcp_coarse_tmr+0x156>
    options[options_out_len++] = 0;
 800d7b4:	f1c7 0239 	rsb	r2, r7, #57	@ 0x39
 800d7b8:	4440      	add	r0, r8
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	b292      	uxth	r2, r2
 800d7be:	3201      	adds	r2, #1
 800d7c0:	f009 f80e 	bl	80167e0 <memset>
 800d7c4:	2044      	movs	r0, #68	@ 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d7c6:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 800d7ca:	4648      	mov	r0, r9
 800d7cc:	b289      	uxth	r1, r1
 800d7ce:	f002 ffd5 	bl	801077c <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d7d2:	4a26      	ldr	r2, [pc, #152]	@ (800d86c <dhcp_coarse_tmr+0x1fc>)
 800d7d4:	9500      	str	r5, [sp, #0]
 800d7d6:	2343      	movs	r3, #67	@ 0x43
 800d7d8:	6810      	ldr	r0, [r2, #0]
 800d7da:	4649      	mov	r1, r9
 800d7dc:	4a24      	ldr	r2, [pc, #144]	@ (800d870 <dhcp_coarse_tmr+0x200>)
 800d7de:	f007 fdfb 	bl	80153d8 <udp_sendto_if>
    pbuf_free(p_out);
 800d7e2:	4648      	mov	r0, r9
 800d7e4:	f002 feb6 	bl	8010554 <pbuf_free>
  if (dhcp->tries < 255) {
 800d7e8:	79a3      	ldrb	r3, [r4, #6]
 800d7ea:	2bff      	cmp	r3, #255	@ 0xff
 800d7ec:	d022      	beq.n	800d834 <dhcp_coarse_tmr+0x1c4>
    dhcp->tries++;
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d7f2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 800d7f4:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d7f6:	d81d      	bhi.n	800d834 <dhcp_coarse_tmr+0x1c4>
 800d7f8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d874 <dhcp_coarse_tmr+0x204>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d7fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d802:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d804:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	fba2 2303 	umull	r2, r3, r2, r3
 800d80e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d810:	8aa2      	ldrh	r2, [r4, #20]
 800d812:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d814:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d816:	1a53      	subs	r3, r2, r1
 800d818:	2b01      	cmp	r3, #1
 800d81a:	f77f af47 	ble.w	800d6ac <dhcp_coarse_tmr+0x3c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d81e:	105b      	asrs	r3, r3, #1
 800d820:	8223      	strh	r3, [r4, #16]
 800d822:	e743      	b.n	800d6ac <dhcp_coarse_tmr+0x3c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d824:	4b14      	ldr	r3, [pc, #80]	@ (800d878 <dhcp_coarse_tmr+0x208>)
 800d826:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800d82a:	4914      	ldr	r1, [pc, #80]	@ (800d87c <dhcp_coarse_tmr+0x20c>)
 800d82c:	4814      	ldr	r0, [pc, #80]	@ (800d880 <dhcp_coarse_tmr+0x210>)
 800d82e:	f008 fe45 	bl	80164bc <iprintf>
 800d832:	e7ad      	b.n	800d790 <dhcp_coarse_tmr+0x120>
    options[options_out_len++] = 0;
 800d834:	2314      	movs	r3, #20
 800d836:	e7eb      	b.n	800d810 <dhcp_coarse_tmr+0x1a0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d838:	4b0f      	ldr	r3, [pc, #60]	@ (800d878 <dhcp_coarse_tmr+0x208>)
 800d83a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d83e:	4911      	ldr	r1, [pc, #68]	@ (800d884 <dhcp_coarse_tmr+0x214>)
 800d840:	480f      	ldr	r0, [pc, #60]	@ (800d880 <dhcp_coarse_tmr+0x210>)
 800d842:	f008 fe3b 	bl	80164bc <iprintf>
 800d846:	e772      	b.n	800d72e <dhcp_coarse_tmr+0xbe>
 800d848:	4b0b      	ldr	r3, [pc, #44]	@ (800d878 <dhcp_coarse_tmr+0x208>)
 800d84a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d84e:	490d      	ldr	r1, [pc, #52]	@ (800d884 <dhcp_coarse_tmr+0x214>)
 800d850:	480b      	ldr	r0, [pc, #44]	@ (800d880 <dhcp_coarse_tmr+0x210>)
 800d852:	f008 fe33 	bl	80164bc <iprintf>
 800d856:	e787      	b.n	800d768 <dhcp_coarse_tmr+0xf8>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d858:	4b07      	ldr	r3, [pc, #28]	@ (800d878 <dhcp_coarse_tmr+0x208>)
 800d85a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800d85e:	490a      	ldr	r1, [pc, #40]	@ (800d888 <dhcp_coarse_tmr+0x218>)
 800d860:	4807      	ldr	r0, [pc, #28]	@ (800d880 <dhcp_coarse_tmr+0x210>)
 800d862:	f008 fe2b 	bl	80164bc <iprintf>
 800d866:	e773      	b.n	800d750 <dhcp_coarse_tmr+0xe0>
 800d868:	20010168 	.word	0x20010168
 800d86c:	20008ee0 	.word	0x20008ee0
 800d870:	0801a79c 	.word	0x0801a79c
 800d874:	10624dd3 	.word	0x10624dd3
 800d878:	08019c90 	.word	0x08019c90
 800d87c:	08019ec4 	.word	0x08019ec4
 800d880:	080187f8 	.word	0x080187f8
 800d884:	08019e44 	.word	0x08019e44
 800d888:	08019e88 	.word	0x08019e88
 800d88c:	08019ff8 	.word	0x08019ff8

0800d890 <dhcp_fine_tmr>:
  NETIF_FOREACH(netif) {
 800d890:	4b21      	ldr	r3, [pc, #132]	@ (800d918 <dhcp_fine_tmr+0x88>)
{
 800d892:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800d894:	681c      	ldr	r4, [r3, #0]
 800d896:	b924      	cbnz	r4, 800d8a2 <dhcp_fine_tmr+0x12>
 800d898:	e01e      	b.n	800d8d8 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 800d89a:	3a01      	subs	r2, #1
 800d89c:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 800d89e:	6824      	ldr	r4, [r4, #0]
 800d8a0:	b1d4      	cbz	r4, 800d8d8 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d8a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (dhcp != NULL) {
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d0fa      	beq.n	800d89e <dhcp_fine_tmr+0xe>
      if (dhcp->request_timeout > 1) {
 800d8a8:	891a      	ldrh	r2, [r3, #8]
 800d8aa:	2a01      	cmp	r2, #1
 800d8ac:	d8f5      	bhi.n	800d89a <dhcp_fine_tmr+0xa>
      } else if (dhcp->request_timeout == 1) {
 800d8ae:	d1f6      	bne.n	800d89e <dhcp_fine_tmr+0xe>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d8b0:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800d8b2:	2100      	movs	r1, #0
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d8b4:	2a0c      	cmp	r2, #12
        dhcp->request_timeout--;
 800d8b6:	8119      	strh	r1, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d8b8:	d016      	beq.n	800d8e8 <dhcp_fine_tmr+0x58>
 800d8ba:	2a06      	cmp	r2, #6
 800d8bc:	d014      	beq.n	800d8e8 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d8be:	2a01      	cmp	r2, #1
 800d8c0:	d016      	beq.n	800d8f0 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800d8c2:	2a08      	cmp	r2, #8
 800d8c4:	d009      	beq.n	800d8da <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800d8c6:	2a03      	cmp	r2, #3
 800d8c8:	d1e9      	bne.n	800d89e <dhcp_fine_tmr+0xe>
    if (dhcp->tries < REBOOT_TRIES) {
 800d8ca:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 800d8cc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d91e      	bls.n	800d910 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 800d8d2:	f7fe ffcd 	bl	800c870 <dhcp_discover>
 800d8d6:	e7e2      	b.n	800d89e <dhcp_fine_tmr+0xe>
}
 800d8d8:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 1) {
 800d8da:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 800d8dc:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d913      	bls.n	800d90a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 800d8e2:	f7fe fce7 	bl	800c2b4 <dhcp_bind>
 800d8e6:	e7da      	b.n	800d89e <dhcp_fine_tmr+0xe>
    dhcp_discover(netif);
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f7fe ffc1 	bl	800c870 <dhcp_discover>
 800d8ee:	e7d6      	b.n	800d89e <dhcp_fine_tmr+0xe>
    if (dhcp->tries <= 5) {
 800d8f0:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 800d8f2:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800d8f4:	2b05      	cmp	r3, #5
 800d8f6:	d802      	bhi.n	800d8fe <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 800d8f8:	f7ff f888 	bl	800ca0c <dhcp_select.isra.0>
 800d8fc:	e7cf      	b.n	800d89e <dhcp_fine_tmr+0xe>
      dhcp_release_and_stop(netif);
 800d8fe:	f7ff fdd3 	bl	800d4a8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800d902:	4620      	mov	r0, r4
 800d904:	f7ff fe5c 	bl	800d5c0 <dhcp_start>
 800d908:	e7c9      	b.n	800d89e <dhcp_fine_tmr+0xe>
      dhcp_check(netif);
 800d90a:	f7fe fcbb 	bl	800c284 <dhcp_check>
 800d90e:	e7c6      	b.n	800d89e <dhcp_fine_tmr+0xe>
      dhcp_reboot(netif);
 800d910:	f7fe fecc 	bl	800c6ac <dhcp_reboot.isra.0>
 800d914:	e7c3      	b.n	800d89e <dhcp_fine_tmr+0xe>
 800d916:	bf00      	nop
 800d918:	20010168 	.word	0x20010168

0800d91c <dhcp_supplied_address>:
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d91c:	b148      	cbz	r0, 800d932 <dhcp_supplied_address+0x16>
 800d91e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800d920:	b138      	cbz	r0, 800d932 <dhcp_supplied_address+0x16>
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d922:	7943      	ldrb	r3, [r0, #5]
 800d924:	1f18      	subs	r0, r3, #4
 800d926:	2b0a      	cmp	r3, #10
 800d928:	bf18      	it	ne
 800d92a:	2801      	cmpne	r0, #1
 800d92c:	bf94      	ite	ls
 800d92e:	2001      	movls	r0, #1
 800d930:	2000      	movhi	r0, #0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800d932:	4770      	bx	lr

0800d934 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d93a:	f04f 0e0a 	mov.w	lr, #10
{
 800d93e:	b085      	sub	sp, #20
 800d940:	4e50      	ldr	r6, [pc, #320]	@ (800da84 <etharp_find_entry+0x150>)
 800d942:	4605      	mov	r5, r0
 800d944:	4608      	mov	r0, r1
 800d946:	4617      	mov	r7, r2
 800d948:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d94a:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800d94c:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d94e:	46f0      	mov	r8, lr
 800d950:	46f3      	mov	fp, lr
 800d952:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d954:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d958:	e004      	b.n	800d964 <etharp_find_entry+0x30>
 800d95a:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d95c:	3301      	adds	r3, #1
 800d95e:	3118      	adds	r1, #24
 800d960:	2b0a      	cmp	r3, #10
 800d962:	d019      	beq.n	800d998 <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d964:	2c0a      	cmp	r4, #10
 800d966:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800d96a:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d96e:	d139      	bne.n	800d9e4 <etharp_find_entry+0xb0>
 800d970:	f1ba 0f00 	cmp.w	sl, #0
 800d974:	d0f1      	beq.n	800d95a <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d976:	b11d      	cbz	r5, 800d980 <etharp_find_entry+0x4c>
 800d978:	6828      	ldr	r0, [r5, #0]
 800d97a:	684a      	ldr	r2, [r1, #4]
 800d97c:	4290      	cmp	r0, r2
 800d97e:	d03d      	beq.n	800d9fc <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d980:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800d984:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 800d986:	d031      	beq.n	800d9ec <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d988:	4548      	cmp	r0, r9
 800d98a:	d3e7      	bcc.n	800d95c <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d98c:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800d98e:	4681      	mov	r9, r0
 800d990:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d992:	3118      	adds	r1, #24
 800d994:	2b0a      	cmp	r3, #10
 800d996:	d1e5      	bne.n	800d964 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d998:	9801      	ldr	r0, [sp, #4]
 800d99a:	2801      	cmp	r0, #1
 800d99c:	d16e      	bne.n	800da7c <etharp_find_entry+0x148>
 800d99e:	2c0a      	cmp	r4, #10
 800d9a0:	d032      	beq.n	800da08 <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d9a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d9a6:	46a1      	mov	r9, r4
 800d9a8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d9ac:	7d1b      	ldrb	r3, [r3, #20]
 800d9ae:	b133      	cbz	r3, 800d9be <etharp_find_entry+0x8a>
 800d9b0:	4b35      	ldr	r3, [pc, #212]	@ (800da88 <etharp_find_entry+0x154>)
 800d9b2:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d9b6:	4935      	ldr	r1, [pc, #212]	@ (800da8c <etharp_find_entry+0x158>)
 800d9b8:	4835      	ldr	r0, [pc, #212]	@ (800da90 <etharp_find_entry+0x15c>)
 800d9ba:	f008 fd7f 	bl	80164bc <iprintf>
    etharp_free_entry(i);
 800d9be:	46a0      	mov	r8, r4
 800d9c0:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d9c2:	b12d      	cbz	r5, 800d9d0 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d9c4:	eb04 0309 	add.w	r3, r4, r9
 800d9c8:	682a      	ldr	r2, [r5, #0]
 800d9ca:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d9ce:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800d9d0:	444c      	add	r4, r9
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800d9d8:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d9da:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800d9dc:	4640      	mov	r0, r8
 800d9de:	b005      	add	sp, #20
 800d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800d9e4:	f1ba 0f00 	cmp.w	sl, #0
 800d9e8:	d0b8      	beq.n	800d95c <etharp_find_entry+0x28>
 800d9ea:	e7c4      	b.n	800d976 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800d9ec:	680a      	ldr	r2, [r1, #0]
 800d9ee:	b392      	cbz	r2, 800da56 <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 800d9f0:	9a02      	ldr	r2, [sp, #8]
 800d9f2:	4290      	cmp	r0, r2
 800d9f4:	d3b2      	bcc.n	800d95c <etharp_find_entry+0x28>
 800d9f6:	46e6      	mov	lr, ip
 800d9f8:	9002      	str	r0, [sp, #8]
 800d9fa:	e7af      	b.n	800d95c <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d9fc:	b117      	cbz	r7, 800da04 <etharp_find_entry+0xd0>
 800d9fe:	6888      	ldr	r0, [r1, #8]
 800da00:	42b8      	cmp	r0, r7
 800da02:	d1bd      	bne.n	800d980 <etharp_find_entry+0x4c>
 800da04:	46e0      	mov	r8, ip
 800da06:	e7e9      	b.n	800d9dc <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 800da08:	f1b8 0f0a 	cmp.w	r8, #10
 800da0c:	d02a      	beq.n	800da64 <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800da0e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800da12:	46c1      	mov	r9, r8
 800da14:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800da18:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800da1c:	b1a3      	cbz	r3, 800da48 <etharp_find_entry+0x114>
 800da1e:	4b1a      	ldr	r3, [pc, #104]	@ (800da88 <etharp_find_entry+0x154>)
 800da20:	f240 126d 	movw	r2, #365	@ 0x16d
 800da24:	491b      	ldr	r1, [pc, #108]	@ (800da94 <etharp_find_entry+0x160>)
 800da26:	481a      	ldr	r0, [pc, #104]	@ (800da90 <etharp_find_entry+0x15c>)
 800da28:	f008 fd48 	bl	80164bc <iprintf>
  if (arp_table[i].q != NULL) {
 800da2c:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800da30:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800da34:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800da38:	f856 000a 	ldr.w	r0, [r6, sl]
 800da3c:	b120      	cbz	r0, 800da48 <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 800da3e:	f002 fd89 	bl	8010554 <pbuf_free>
    arp_table[i].q = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800da48:	eb04 0309 	add.w	r3, r4, r9
 800da4c:	2200      	movs	r2, #0
 800da4e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800da52:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800da54:	e7b5      	b.n	800d9c2 <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800da56:	9a03      	ldr	r2, [sp, #12]
 800da58:	4290      	cmp	r0, r2
 800da5a:	f4ff af7f 	bcc.w	800d95c <etharp_find_entry+0x28>
 800da5e:	46e3      	mov	fp, ip
 800da60:	9003      	str	r0, [sp, #12]
 800da62:	e77b      	b.n	800d95c <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800da64:	f1bb 0f0a 	cmp.w	fp, #10
 800da68:	d105      	bne.n	800da76 <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800da6a:	f1be 0f0a 	cmp.w	lr, #10
 800da6e:	d005      	beq.n	800da7c <etharp_find_entry+0x148>
    etharp_free_entry(i);
 800da70:	46f0      	mov	r8, lr
 800da72:	46f1      	mov	r9, lr
 800da74:	e7da      	b.n	800da2c <etharp_find_entry+0xf8>
 800da76:	46d8      	mov	r8, fp
 800da78:	46d9      	mov	r9, fp
 800da7a:	e7d7      	b.n	800da2c <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 800da7c:	f04f 38ff 	mov.w	r8, #4294967295
 800da80:	e7ac      	b.n	800d9dc <etharp_find_entry+0xa8>
 800da82:	bf00      	nop
 800da84:	20008f10 	.word	0x20008f10
 800da88:	08019ffc 	.word	0x08019ffc
 800da8c:	0801a090 	.word	0x0801a090
 800da90:	080187f8 	.word	0x080187f8
 800da94:	0801a078 	.word	0x0801a078

0800da98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800da98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	4688      	mov	r8, r1
 800daa0:	4691      	mov	r9, r2
 800daa2:	461f      	mov	r7, r3
 800daa4:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800daa8:	4606      	mov	r6, r0
{
 800daaa:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800daae:	2800      	cmp	r0, #0
 800dab0:	d04a      	beq.n	800db48 <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800dab2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dab6:	211c      	movs	r1, #28
 800dab8:	200e      	movs	r0, #14
 800daba:	f002 fdbb 	bl	8010634 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dabe:	4605      	mov	r5, r0
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d049      	beq.n	800db58 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800dac4:	8943      	ldrh	r3, [r0, #10]
 800dac6:	2b1b      	cmp	r3, #27
 800dac8:	d936      	bls.n	800db38 <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800daca:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800dacc:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800dace:	f001 feb1 	bl	800f834 <lwip_htons>
 800dad2:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dad4:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 800dad8:	2b06      	cmp	r3, #6
 800dada:	d006      	beq.n	800daea <etharp_raw+0x52>
 800dadc:	4b20      	ldr	r3, [pc, #128]	@ (800db60 <etharp_raw+0xc8>)
 800dade:	f240 4269 	movw	r2, #1129	@ 0x469
 800dae2:	4920      	ldr	r1, [pc, #128]	@ (800db64 <etharp_raw+0xcc>)
 800dae4:	4820      	ldr	r0, [pc, #128]	@ (800db68 <etharp_raw+0xd0>)
 800dae6:	f008 fce9 	bl	80164bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800daea:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800daec:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800daee:	4e1f      	ldr	r6, [pc, #124]	@ (800db6c <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800daf0:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800daf2:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800daf4:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800daf6:	88b9      	ldrh	r1, [r7, #4]
 800daf8:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dafa:	f8da 1000 	ldr.w	r1, [sl]
 800dafe:	f8c4 1012 	str.w	r1, [r4, #18]
 800db02:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800db06:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800db08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db0a:	6809      	ldr	r1, [r1, #0]
 800db0c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800db10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db12:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800db14:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800db16:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 800db18:	f240 4106 	movw	r1, #1030	@ 0x406
 800db1c:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800db1e:	f640 0106 	movw	r1, #2054	@ 0x806
 800db22:	9100      	str	r1, [sp, #0]
 800db24:	4629      	mov	r1, r5
 800db26:	f007 fe4b 	bl	80157c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800db2a:	4628      	mov	r0, r5
 800db2c:	f002 fd12 	bl	8010554 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800db30:	2000      	movs	r0, #0
}
 800db32:	b002      	add	sp, #8
 800db34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800db38:	4b09      	ldr	r3, [pc, #36]	@ (800db60 <etharp_raw+0xc8>)
 800db3a:	f240 4262 	movw	r2, #1122	@ 0x462
 800db3e:	490c      	ldr	r1, [pc, #48]	@ (800db70 <etharp_raw+0xd8>)
 800db40:	4809      	ldr	r0, [pc, #36]	@ (800db68 <etharp_raw+0xd0>)
 800db42:	f008 fcbb 	bl	80164bc <iprintf>
 800db46:	e7c0      	b.n	800daca <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800db48:	4b05      	ldr	r3, [pc, #20]	@ (800db60 <etharp_raw+0xc8>)
 800db4a:	f240 4257 	movw	r2, #1111	@ 0x457
 800db4e:	4909      	ldr	r1, [pc, #36]	@ (800db74 <etharp_raw+0xdc>)
 800db50:	4805      	ldr	r0, [pc, #20]	@ (800db68 <etharp_raw+0xd0>)
 800db52:	f008 fcb3 	bl	80164bc <iprintf>
 800db56:	e7ac      	b.n	800dab2 <etharp_raw+0x1a>
    return ERR_MEM;
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	e7e9      	b.n	800db32 <etharp_raw+0x9a>
 800db5e:	bf00      	nop
 800db60:	08019ffc 	.word	0x08019ffc
 800db64:	0801a0f0 	.word	0x0801a0f0
 800db68:	080187f8 	.word	0x080187f8
 800db6c:	00080100 	.word	0x00080100
 800db70:	0801a0bc 	.word	0x0801a0bc
 800db74:	080187e8 	.word	0x080187e8

0800db78 <etharp_output_to_arp_index>:
{
 800db78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db7c:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc54 <etharp_output_to_arp_index+0xdc>
 800db80:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 800db84:	b084      	sub	sp, #16
 800db86:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db88:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 800db8c:	4605      	mov	r5, r0
 800db8e:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db90:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800db94:	7d33      	ldrb	r3, [r6, #20]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d936      	bls.n	800dc08 <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800db9a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800db9e:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dba0:	f105 0a2e 	add.w	sl, r5, #46	@ 0x2e
 800dba4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dba8:	f100 060c 	add.w	r6, r0, #12
 800dbac:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dbae:	d00b      	beq.n	800dbc8 <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dbb0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800dbb4:	4633      	mov	r3, r6
 800dbb6:	4652      	mov	r2, sl
 800dbb8:	4639      	mov	r1, r7
 800dbba:	4628      	mov	r0, r5
 800dbbc:	9400      	str	r4, [sp, #0]
 800dbbe:	f007 fdff 	bl	80157c0 <ethernet_output>
}
 800dbc2:	b004      	add	sp, #16
 800dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dbc8:	44a1      	add	r9, r4
 800dbca:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 800dbce:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800dbd2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800dbd6:	d820      	bhi.n	800dc1a <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dbd8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800dbdc:	d3e8      	bcc.n	800dbb0 <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dbde:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dbe0:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dbe2:	4632      	mov	r2, r6
 800dbe4:	4651      	mov	r1, sl
 800dbe6:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dbe8:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dbea:	4b15      	ldr	r3, [pc, #84]	@ (800dc40 <etharp_output_to_arp_index+0xc8>)
 800dbec:	9002      	str	r0, [sp, #8]
 800dbee:	4628      	mov	r0, r5
 800dbf0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dbf2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	4653      	mov	r3, sl
 800dbf8:	f7ff ff4e 	bl	800da98 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d1d7      	bne.n	800dbb0 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc00:	2303      	movs	r3, #3
 800dc02:	f889 3014 	strb.w	r3, [r9, #20]
 800dc06:	e7d3      	b.n	800dbb0 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dc08:	4b0e      	ldr	r3, [pc, #56]	@ (800dc44 <etharp_output_to_arp_index+0xcc>)
 800dc0a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dc0e:	490e      	ldr	r1, [pc, #56]	@ (800dc48 <etharp_output_to_arp_index+0xd0>)
 800dc10:	480e      	ldr	r0, [pc, #56]	@ (800dc4c <etharp_output_to_arp_index+0xd4>)
 800dc12:	f008 fc53 	bl	80164bc <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dc16:	7d33      	ldrb	r3, [r6, #20]
 800dc18:	e7bf      	b.n	800db9a <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc1a:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc1c:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc1e:	4a0c      	ldr	r2, [pc, #48]	@ (800dc50 <etharp_output_to_arp_index+0xd8>)
 800dc20:	4651      	mov	r1, sl
 800dc22:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc24:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc26:	4b06      	ldr	r3, [pc, #24]	@ (800dc40 <etharp_output_to_arp_index+0xc8>)
 800dc28:	9002      	str	r0, [sp, #8]
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dc2e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	4653      	mov	r3, sl
 800dc34:	f7ff ff30 	bl	800da98 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1b9      	bne.n	800dbb0 <etharp_output_to_arp_index+0x38>
 800dc3c:	e7e0      	b.n	800dc00 <etharp_output_to_arp_index+0x88>
 800dc3e:	bf00      	nop
 800dc40:	0801c9f0 	.word	0x0801c9f0
 800dc44:	08019ffc 	.word	0x08019ffc
 800dc48:	0801a134 	.word	0x0801a134
 800dc4c:	080187f8 	.word	0x080187f8
 800dc50:	0801c9f8 	.word	0x0801c9f8
 800dc54:	20008f10 	.word	0x20008f10

0800dc58 <etharp_tmr>:
{
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	4c1d      	ldr	r4, [pc, #116]	@ (800dcd0 <etharp_tmr+0x78>)
 800dc5c:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc5e:	2600      	movs	r6, #0
 800dc60:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 800dc64:	e00a      	b.n	800dc7c <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc66:	2a01      	cmp	r2, #1
 800dc68:	d01f      	beq.n	800dcaa <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dc6a:	2a03      	cmp	r2, #3
 800dc6c:	d02d      	beq.n	800dcca <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dc6e:	2a04      	cmp	r2, #4
 800dc70:	d101      	bne.n	800dc76 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dc72:	2302      	movs	r3, #2
 800dc74:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc76:	3418      	adds	r4, #24
 800dc78:	42ac      	cmp	r4, r5
 800dc7a:	d014      	beq.n	800dca6 <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 800dc7c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800dc7e:	2a00      	cmp	r2, #0
 800dc80:	d0f9      	beq.n	800dc76 <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 800dc82:	89e3      	ldrh	r3, [r4, #14]
 800dc84:	3301      	adds	r3, #1
 800dc86:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc88:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800dc8c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc8e:	d3ea      	bcc.n	800dc66 <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 800dc90:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800dc94:	b118      	cbz	r0, 800dc9e <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 800dc96:	f002 fc5d 	bl	8010554 <pbuf_free>
    arp_table[i].q = NULL;
 800dc9a:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc9e:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dca0:	3418      	adds	r4, #24
 800dca2:	42ac      	cmp	r4, r5
 800dca4:	d1ea      	bne.n	800dc7c <etharp_tmr+0x24>
}
 800dca6:	b004      	add	sp, #16
 800dca8:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dcaa:	2b04      	cmp	r3, #4
 800dcac:	d8f0      	bhi.n	800dc90 <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dcae:	9203      	str	r2, [sp, #12]
 800dcb0:	4a08      	ldr	r2, [pc, #32]	@ (800dcd4 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dcb2:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dcb4:	9201      	str	r2, [sp, #4]
 800dcb6:	f100 032e 	add.w	r3, r0, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dcba:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dcbc:	9402      	str	r4, [sp, #8]
 800dcbe:	9200      	str	r2, [sp, #0]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	4a05      	ldr	r2, [pc, #20]	@ (800dcd8 <etharp_tmr+0x80>)
 800dcc4:	f7ff fee8 	bl	800da98 <etharp_raw>
 800dcc8:	e7d5      	b.n	800dc76 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dcca:	2304      	movs	r3, #4
 800dccc:	7423      	strb	r3, [r4, #16]
 800dcce:	e7d2      	b.n	800dc76 <etharp_tmr+0x1e>
 800dcd0:	20008f14 	.word	0x20008f14
 800dcd4:	0801c9f0 	.word	0x0801c9f0
 800dcd8:	0801c9f8 	.word	0x0801c9f8

0800dcdc <etharp_cleanup_netif>:
{
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	4c0b      	ldr	r4, [pc, #44]	@ (800dd0c <etharp_cleanup_netif+0x30>)
 800dce0:	4606      	mov	r6, r0
 800dce2:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dce6:	7d23      	ldrb	r3, [r4, #20]
 800dce8:	b113      	cbz	r3, 800dcf0 <etharp_cleanup_netif+0x14>
 800dcea:	68a3      	ldr	r3, [r4, #8]
 800dcec:	42b3      	cmp	r3, r6
 800dcee:	d003      	beq.n	800dcf8 <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcf0:	3418      	adds	r4, #24
 800dcf2:	42ac      	cmp	r4, r5
 800dcf4:	d1f7      	bne.n	800dce6 <etharp_cleanup_netif+0xa>
}
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	b118      	cbz	r0, 800dd04 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800dcfc:	f002 fc2a 	bl	8010554 <pbuf_free>
    arp_table[i].q = NULL;
 800dd00:	2300      	movs	r3, #0
 800dd02:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dd04:	2300      	movs	r3, #0
 800dd06:	7523      	strb	r3, [r4, #20]
}
 800dd08:	e7f2      	b.n	800dcf0 <etharp_cleanup_netif+0x14>
 800dd0a:	bf00      	nop
 800dd0c:	20008f10 	.word	0x20008f10

0800dd10 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dd10:	2900      	cmp	r1, #0
 800dd12:	d073      	beq.n	800ddfc <etharp_input+0xec>
{
 800dd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdr = (struct etharp_hdr *)p->payload;
 800dd18:	6846      	ldr	r6, [r0, #4]
{
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dd1e:	8833      	ldrh	r3, [r6, #0]
 800dd20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd24:	d102      	bne.n	800dd2c <etharp_input+0x1c>
 800dd26:	7933      	ldrb	r3, [r6, #4]
 800dd28:	2b06      	cmp	r3, #6
 800dd2a:	d005      	beq.n	800dd38 <etharp_input+0x28>
    pbuf_free(p);
 800dd2c:	4620      	mov	r0, r4
}
 800dd2e:	b006      	add	sp, #24
 800dd30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800dd34:	f002 bc0e 	b.w	8010554 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dd38:	7973      	ldrb	r3, [r6, #5]
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	d1f6      	bne.n	800dd2c <etharp_input+0x1c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd3e:	8873      	ldrh	r3, [r6, #2]
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d1f3      	bne.n	800dd2c <etharp_input+0x1c>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dd44:	f8d6 000e 	ldr.w	r0, [r6, #14]
 800dd48:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd4a:	684f      	ldr	r7, [r1, #4]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dd4c:	f106 0808 	add.w	r8, r6, #8
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dd50:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dd52:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd54:	2f00      	cmp	r7, #0
 800dd56:	d158      	bne.n	800de0a <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dd58:	f04f 0a02 	mov.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dd5c:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 800dd60:	2b06      	cmp	r3, #6
 800dd62:	d15c      	bne.n	800de1e <etharp_input+0x10e>
  if (ip4_addr_isany(ipaddr) ||
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d03c      	beq.n	800dde2 <etharp_input+0xd2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd68:	4629      	mov	r1, r5
 800dd6a:	f001 f855 	bl	800ee18 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800dd6e:	4681      	mov	r9, r0
 800dd70:	bbb8      	cbnz	r0, 800dde2 <etharp_input+0xd2>
      ip4_addr_ismulticast(ipaddr)) {
 800dd72:	9b05      	ldr	r3, [sp, #20]
 800dd74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd78:	2be0      	cmp	r3, #224	@ 0xe0
 800dd7a:	d032      	beq.n	800dde2 <etharp_input+0xd2>
  i = etharp_find_entry(ipaddr, flags, netif);
 800dd7c:	4651      	mov	r1, sl
 800dd7e:	462a      	mov	r2, r5
 800dd80:	a805      	add	r0, sp, #20
 800dd82:	f7ff fdd7 	bl	800d934 <etharp_find_entry>
  if (i < 0) {
 800dd86:	1e03      	subs	r3, r0, #0
 800dd88:	db2b      	blt.n	800dde2 <etharp_input+0xd2>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd8a:	4933      	ldr	r1, [pc, #204]	@ (800de58 <etharp_input+0x148>)
 800dd8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dd90:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dd92:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd96:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800dd9a:	00d2      	lsls	r2, r2, #3
 800dd9c:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dda0:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800dda2:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dda6:	fb13 030e 	smlabb	r3, r3, lr, r0
 800ddaa:	68b0      	ldr	r0, [r6, #8]
 800ddac:	50c8      	str	r0, [r1, r3]
 800ddae:	440b      	add	r3, r1
 800ddb0:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800ddb4:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800ddb6:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800ddba:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800ddbe:	f1ba 0f00 	cmp.w	sl, #0
 800ddc2:	d00e      	beq.n	800dde2 <etharp_input+0xd2>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ddc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800ddc8:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f105 022e 	add.w	r2, r5, #46	@ 0x2e
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	4651      	mov	r1, sl
 800ddd6:	4643      	mov	r3, r8
 800ddd8:	f007 fcf2 	bl	80157c0 <ethernet_output>
    pbuf_free(p);
 800dddc:	4650      	mov	r0, sl
 800ddde:	f002 fbb9 	bl	8010554 <pbuf_free>
  switch (hdr->opcode) {
 800dde2:	88f3      	ldrh	r3, [r6, #6]
 800dde4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dde8:	d022      	beq.n	800de30 <etharp_input+0x120>
 800ddea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddee:	d011      	beq.n	800de14 <etharp_input+0x104>
  pbuf_free(p);
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f002 fbaf 	bl	8010554 <pbuf_free>
}
 800ddf6:	b006      	add	sp, #24
 800ddf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ddfc:	4b17      	ldr	r3, [pc, #92]	@ (800de5c <etharp_input+0x14c>)
 800ddfe:	f240 228a 	movw	r2, #650	@ 0x28a
 800de02:	4917      	ldr	r1, [pc, #92]	@ (800de60 <etharp_input+0x150>)
 800de04:	4817      	ldr	r0, [pc, #92]	@ (800de64 <etharp_input+0x154>)
 800de06:	f008 bb59 	b.w	80164bc <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800de0a:	429f      	cmp	r7, r3
 800de0c:	d122      	bne.n	800de54 <etharp_input+0x144>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800de0e:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800de10:	46ba      	mov	sl, r7
 800de12:	e7a3      	b.n	800dd5c <etharp_input+0x4c>
      dhcp_arp_reply(netif, &sipaddr);
 800de14:	a905      	add	r1, sp, #20
 800de16:	4628      	mov	r0, r5
 800de18:	f7ff f9f4 	bl	800d204 <dhcp_arp_reply>
      break;
 800de1c:	e7e8      	b.n	800ddf0 <etharp_input+0xe0>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800de1e:	4b0f      	ldr	r3, [pc, #60]	@ (800de5c <etharp_input+0x14c>)
 800de20:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800de24:	4910      	ldr	r1, [pc, #64]	@ (800de68 <etharp_input+0x158>)
 800de26:	480f      	ldr	r0, [pc, #60]	@ (800de64 <etharp_input+0x154>)
 800de28:	f008 fb48 	bl	80164bc <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800de2c:	9805      	ldr	r0, [sp, #20]
 800de2e:	e799      	b.n	800dd64 <etharp_input+0x54>
      if (for_us) {
 800de30:	2f00      	cmp	r7, #0
 800de32:	d0dd      	beq.n	800ddf0 <etharp_input+0xe0>
        etharp_raw(netif,
 800de34:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800de36:	f105 032e 	add.w	r3, r5, #46	@ 0x2e
        etharp_raw(netif,
 800de3a:	4642      	mov	r2, r8
 800de3c:	4628      	mov	r0, r5
 800de3e:	9103      	str	r1, [sp, #12]
 800de40:	a905      	add	r1, sp, #20
 800de42:	f8cd 8004 	str.w	r8, [sp, #4]
 800de46:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800de48:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800de4a:	9100      	str	r1, [sp, #0]
 800de4c:	4619      	mov	r1, r3
 800de4e:	f7ff fe23 	bl	800da98 <etharp_raw>
 800de52:	e7cd      	b.n	800ddf0 <etharp_input+0xe0>
 800de54:	2700      	movs	r7, #0
 800de56:	e77f      	b.n	800dd58 <etharp_input+0x48>
 800de58:	20008f10 	.word	0x20008f10
 800de5c:	08019ffc 	.word	0x08019ffc
 800de60:	080187e8 	.word	0x080187e8
 800de64:	080187f8 	.word	0x080187f8
 800de68:	0801a184 	.word	0x0801a184

0800de6c <etharp_query>:
{
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	460e      	mov	r6, r1
 800de72:	b085      	sub	sp, #20
 800de74:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de76:	4601      	mov	r1, r0
 800de78:	6830      	ldr	r0, [r6, #0]
{
 800de7a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de7c:	f000 ffcc 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 800de80:	2800      	cmp	r0, #0
 800de82:	f040 80a2 	bne.w	800dfca <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 800de86:	6833      	ldr	r3, [r6, #0]
 800de88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 800de8c:	2ae0      	cmp	r2, #224	@ 0xe0
 800de8e:	f000 809c 	beq.w	800dfca <etharp_query+0x15e>
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 8099 	beq.w	800dfca <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800de98:	462a      	mov	r2, r5
 800de9a:	2101      	movs	r1, #1
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7ff fd49 	bl	800d934 <etharp_find_entry>
  if (i_err < 0) {
 800dea2:	f1b0 0800 	subs.w	r8, r0, #0
 800dea6:	db63      	blt.n	800df70 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dea8:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 800deac:	dc58      	bgt.n	800df60 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 800deae:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800deb2:	4c49      	ldr	r4, [pc, #292]	@ (800dfd8 <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800deb4:	f105 0b2e 	add.w	fp, r5, #46	@ 0x2e
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800deb8:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800debc:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800dec0:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800dec4:	f899 3014 	ldrb.w	r3, [r9, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d133      	bne.n	800df34 <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800decc:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dece:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800ded0:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ded4:	4659      	mov	r1, fp
 800ded6:	9303      	str	r3, [sp, #12]
 800ded8:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800deda:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dede:	4b3f      	ldr	r3, [pc, #252]	@ (800dfdc <etharp_query+0x170>)
 800dee0:	4a3f      	ldr	r2, [pc, #252]	@ (800dfe0 <etharp_query+0x174>)
 800dee2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dee4:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	465b      	mov	r3, fp
 800deea:	f7ff fdd5 	bl	800da98 <etharp_raw>
    if (q == NULL) {
 800deee:	2f00      	cmp	r7, #0
 800def0:	d033      	beq.n	800df5a <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800def2:	f899 3014 	ldrb.w	r3, [r9, #20]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d820      	bhi.n	800df3c <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800defa:	d12e      	bne.n	800df5a <etharp_query+0xee>
{
 800defc:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800defe:	4e39      	ldr	r6, [pc, #228]	@ (800dfe4 <etharp_query+0x178>)
 800df00:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800dff4 <etharp_query+0x188>
 800df04:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800dff0 <etharp_query+0x184>
 800df08:	e005      	b.n	800df16 <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 800df0a:	7b2b      	ldrb	r3, [r5, #12]
 800df0c:	065b      	lsls	r3, r3, #25
 800df0e:	d434      	bmi.n	800df7a <etharp_query+0x10e>
      p = p->next;
 800df10:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800df12:	2d00      	cmp	r5, #0
 800df14:	d047      	beq.n	800dfa6 <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800df16:	896a      	ldrh	r2, [r5, #10]
 800df18:	892b      	ldrh	r3, [r5, #8]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d1f5      	bne.n	800df0a <etharp_query+0x9e>
 800df1e:	682a      	ldr	r2, [r5, #0]
 800df20:	4633      	mov	r3, r6
 800df22:	2a00      	cmp	r2, #0
 800df24:	d0f1      	beq.n	800df0a <etharp_query+0x9e>
 800df26:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800df2a:	4659      	mov	r1, fp
 800df2c:	4648      	mov	r0, r9
 800df2e:	f008 fac5 	bl	80164bc <iprintf>
 800df32:	e7ea      	b.n	800df0a <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 800df34:	2f00      	cmp	r7, #0
 800df36:	d03a      	beq.n	800dfae <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d0df      	beq.n	800defc <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800df3c:	2318      	movs	r3, #24
 800df3e:	465a      	mov	r2, fp
 800df40:	4639      	mov	r1, r7
 800df42:	4628      	mov	r0, r5
 800df44:	fb03 4308 	mla	r3, r3, r8, r4
 800df48:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800df4c:	9400      	str	r4, [sp, #0]
 800df4e:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800df50:	4c25      	ldr	r4, [pc, #148]	@ (800dfe8 <etharp_query+0x17c>)
 800df52:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800df56:	f007 fc33 	bl	80157c0 <ethernet_output>
}
 800df5a:	b005      	add	sp, #20
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800df60:	4b20      	ldr	r3, [pc, #128]	@ (800dfe4 <etharp_query+0x178>)
 800df62:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800df66:	4921      	ldr	r1, [pc, #132]	@ (800dfec <etharp_query+0x180>)
 800df68:	4821      	ldr	r0, [pc, #132]	@ (800dff0 <etharp_query+0x184>)
 800df6a:	f008 faa7 	bl	80164bc <iprintf>
 800df6e:	e79e      	b.n	800deae <etharp_query+0x42>
    return (err_t)i_err;
 800df70:	fa4f f088 	sxtb.w	r0, r8
}
 800df74:	b005      	add	sp, #20
 800df76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800df7a:	463a      	mov	r2, r7
 800df7c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800df80:	200e      	movs	r0, #14
 800df82:	f002 fe75 	bl	8010c70 <pbuf_clone>
 800df86:	4607      	mov	r7, r0
    if (p != NULL) {
 800df88:	b317      	cbz	r7, 800dfd0 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 800df8a:	eb0a 0308 	add.w	r3, sl, r8
 800df8e:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800df92:	b108      	cbz	r0, 800df98 <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 800df94:	f002 fade 	bl	8010554 <pbuf_free>
      arp_table[i].q = p;
 800df98:	44d0      	add	r8, sl
      result = ERR_OK;
 800df9a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800df9c:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 800dfa0:	b005      	add	sp, #20
 800dfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f002 fc6c 	bl	8010884 <pbuf_ref>
 800dfac:	e7ec      	b.n	800df88 <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dfae:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	4c0a      	ldr	r4, [pc, #40]	@ (800dfdc <etharp_query+0x170>)
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800dfbc:	e9cd 2400 	strd	r2, r4, [sp]
 800dfc0:	465b      	mov	r3, fp
 800dfc2:	4a07      	ldr	r2, [pc, #28]	@ (800dfe0 <etharp_query+0x174>)
 800dfc4:	f7ff fd68 	bl	800da98 <etharp_raw>
    if (q == NULL) {
 800dfc8:	e7c7      	b.n	800df5a <etharp_query+0xee>
    return ERR_ARG;
 800dfca:	f06f 000f 	mvn.w	r0, #15
 800dfce:	e7c4      	b.n	800df5a <etharp_query+0xee>
  err_t result = ERR_MEM;
 800dfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd4:	e7c1      	b.n	800df5a <etharp_query+0xee>
 800dfd6:	bf00      	nop
 800dfd8:	20008f10 	.word	0x20008f10
 800dfdc:	0801c9f0 	.word	0x0801c9f0
 800dfe0:	0801c9f8 	.word	0x0801c9f8
 800dfe4:	08019ffc 	.word	0x08019ffc
 800dfe8:	20008f0c 	.word	0x20008f0c
 800dfec:	0801a1a8 	.word	0x0801a1a8
 800dff0:	080187f8 	.word	0x080187f8
 800dff4:	0801a1b8 	.word	0x0801a1b8

0800dff8 <etharp_output>:
{
 800dff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dffa:	460e      	mov	r6, r1
 800dffc:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dffe:	4604      	mov	r4, r0
{
 800e000:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e002:	2800      	cmp	r0, #0
 800e004:	f000 8081 	beq.w	800e10a <etharp_output+0x112>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e008:	2e00      	cmp	r6, #0
 800e00a:	d06d      	beq.n	800e0e8 <etharp_output+0xf0>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	d074      	beq.n	800e0fa <etharp_output+0x102>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e010:	4621      	mov	r1, r4
 800e012:	6828      	ldr	r0, [r5, #0]
 800e014:	f000 ff00 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 800e018:	2800      	cmp	r0, #0
 800e01a:	d163      	bne.n	800e0e4 <etharp_output+0xec>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e022:	2ae0      	cmp	r2, #224	@ 0xe0
 800e024:	d039      	beq.n	800e09a <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e026:	6862      	ldr	r2, [r4, #4]
 800e028:	68a1      	ldr	r1, [r4, #8]
 800e02a:	405a      	eors	r2, r3
 800e02c:	420a      	tst	r2, r1
 800e02e:	d009      	beq.n	800e044 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800e030:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e032:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e036:	4293      	cmp	r3, r2
 800e038:	d004      	beq.n	800e044 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e03a:	68e3      	ldr	r3, [r4, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d076      	beq.n	800e12e <etharp_output+0x136>
            dst_addr = netif_ip4_gw(netif);
 800e040:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e044:	4f3b      	ldr	r7, [pc, #236]	@ (800e134 <etharp_output+0x13c>)
 800e046:	4b3c      	ldr	r3, [pc, #240]	@ (800e138 <etharp_output+0x140>)
 800e048:	783a      	ldrb	r2, [r7, #0]
 800e04a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e04e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e052:	7d19      	ldrb	r1, [r3, #20]
 800e054:	2901      	cmp	r1, #1
 800e056:	d902      	bls.n	800e05e <etharp_output+0x66>
 800e058:	6899      	ldr	r1, [r3, #8]
 800e05a:	42a1      	cmp	r1, r4
 800e05c:	d060      	beq.n	800e120 <etharp_output+0x128>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e05e:	4b36      	ldr	r3, [pc, #216]	@ (800e138 <etharp_output+0x140>)
{
 800e060:	f04f 0c00 	mov.w	ip, #0
 800e064:	e005      	b.n	800e072 <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e066:	f10c 0c01 	add.w	ip, ip, #1
 800e06a:	3318      	adds	r3, #24
 800e06c:	f1bc 0f0a 	cmp.w	ip, #10
 800e070:	d030      	beq.n	800e0d4 <etharp_output+0xdc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e072:	7d18      	ldrb	r0, [r3, #20]
 800e074:	2801      	cmp	r0, #1
 800e076:	d9f6      	bls.n	800e066 <etharp_output+0x6e>
 800e078:	689a      	ldr	r2, [r3, #8]
 800e07a:	42a2      	cmp	r2, r4
 800e07c:	d1f3      	bne.n	800e066 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	6829      	ldr	r1, [r5, #0]
 800e082:	4291      	cmp	r1, r2
 800e084:	d1ef      	bne.n	800e066 <etharp_output+0x6e>
 800e086:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 800e08a:	4631      	mov	r1, r6
 800e08c:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 800e08e:	703a      	strb	r2, [r7, #0]
}
 800e090:	b005      	add	sp, #20
 800e092:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800e096:	f7ff bd6f 	b.w	800db78 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e09a:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e09c:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e09e:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e0a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e0a4:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e0a8:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e0aa:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e0ae:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e0b0:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e0b4:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800e0b8:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e0ba:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e0be:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800e0c2:	f104 022e 	add.w	r2, r4, #46	@ 0x2e
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	9500      	str	r5, [sp, #0]
 800e0cc:	f007 fb78 	bl	80157c0 <ethernet_output>
}
 800e0d0:	b005      	add	sp, #20
 800e0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800e0d4:	4632      	mov	r2, r6
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	4620      	mov	r0, r4
}
 800e0da:	b005      	add	sp, #20
 800e0dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800e0e0:	f7ff bec4 	b.w	800de6c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800e0e4:	4b15      	ldr	r3, [pc, #84]	@ (800e13c <etharp_output+0x144>)
 800e0e6:	e7ea      	b.n	800e0be <etharp_output+0xc6>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e0e8:	4b15      	ldr	r3, [pc, #84]	@ (800e140 <etharp_output+0x148>)
 800e0ea:	f240 321f 	movw	r2, #799	@ 0x31f
 800e0ee:	4915      	ldr	r1, [pc, #84]	@ (800e144 <etharp_output+0x14c>)
 800e0f0:	4815      	ldr	r0, [pc, #84]	@ (800e148 <etharp_output+0x150>)
 800e0f2:	f008 f9e3 	bl	80164bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e0f6:	2d00      	cmp	r5, #0
 800e0f8:	d18a      	bne.n	800e010 <etharp_output+0x18>
 800e0fa:	4b11      	ldr	r3, [pc, #68]	@ (800e140 <etharp_output+0x148>)
 800e0fc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e100:	4912      	ldr	r1, [pc, #72]	@ (800e14c <etharp_output+0x154>)
 800e102:	4811      	ldr	r0, [pc, #68]	@ (800e148 <etharp_output+0x150>)
 800e104:	f008 f9da 	bl	80164bc <iprintf>
 800e108:	e782      	b.n	800e010 <etharp_output+0x18>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e10a:	4b0d      	ldr	r3, [pc, #52]	@ (800e140 <etharp_output+0x148>)
 800e10c:	f240 321e 	movw	r2, #798	@ 0x31e
 800e110:	490f      	ldr	r1, [pc, #60]	@ (800e150 <etharp_output+0x158>)
 800e112:	480d      	ldr	r0, [pc, #52]	@ (800e148 <etharp_output+0x150>)
 800e114:	f008 f9d2 	bl	80164bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e118:	2e00      	cmp	r6, #0
 800e11a:	f47f af77 	bne.w	800e00c <etharp_output+0x14>
 800e11e:	e7e3      	b.n	800e0e8 <etharp_output+0xf0>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	6829      	ldr	r1, [r5, #0]
 800e124:	4299      	cmp	r1, r3
 800e126:	d19a      	bne.n	800e05e <etharp_output+0x66>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e128:	4631      	mov	r1, r6
 800e12a:	4620      	mov	r0, r4
 800e12c:	e7b0      	b.n	800e090 <etharp_output+0x98>
            return ERR_RTE;
 800e12e:	f06f 0003 	mvn.w	r0, #3
 800e132:	e7cd      	b.n	800e0d0 <etharp_output+0xd8>
 800e134:	20008f0c 	.word	0x20008f0c
 800e138:	20008f10 	.word	0x20008f10
 800e13c:	0801c9f8 	.word	0x0801c9f8
 800e140:	08019ffc 	.word	0x08019ffc
 800e144:	0801a1d4 	.word	0x0801a1d4
 800e148:	080187f8 	.word	0x080187f8
 800e14c:	0801a164 	.word	0x0801a164
 800e150:	080187e8 	.word	0x080187e8

0800e154 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e154:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e156:	2301      	movs	r3, #1
{
 800e158:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e15a:	4c07      	ldr	r4, [pc, #28]	@ (800e178 <etharp_request+0x24>)
 800e15c:	4a07      	ldr	r2, [pc, #28]	@ (800e17c <etharp_request+0x28>)
 800e15e:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e160:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e162:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800e166:	f100 032e 	add.w	r3, r0, #46	@ 0x2e
 800e16a:	9400      	str	r4, [sp, #0]
 800e16c:	4619      	mov	r1, r3
 800e16e:	f7ff fc93 	bl	800da98 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800e172:	b004      	add	sp, #16
 800e174:	bd10      	pop	{r4, pc}
 800e176:	bf00      	nop
 800e178:	0801c9f0 	.word	0x0801c9f0
 800e17c:	0801c9f8 	.word	0x0801c9f8

0800e180 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e182:	460f      	mov	r7, r1
 800e184:	b087      	sub	sp, #28
 800e186:	4616      	mov	r6, r2
 800e188:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e18a:	2124      	movs	r1, #36	@ 0x24
 800e18c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e190:	2022      	movs	r0, #34	@ 0x22
 800e192:	f002 fa4f 	bl	8010634 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800e196:	b390      	cbz	r0, 800e1fe <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e198:	8943      	ldrh	r3, [r0, #10]
 800e19a:	4605      	mov	r5, r0
 800e19c:	2b23      	cmp	r3, #35	@ 0x23
 800e19e:	d930      	bls.n	800e202 <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e1a0:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e1a2:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800e1a4:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800e1a6:	2700      	movs	r7, #0
  icmphdr->code = code;
 800e1a8:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 800e1aa:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	6859      	ldr	r1, [r3, #4]
 800e1b0:	689a      	ldr	r2, [r3, #8]
 800e1b2:	68de      	ldr	r6, [r3, #12]
 800e1b4:	60a0      	str	r0, [r4, #8]
 800e1b6:	6166      	str	r6, [r4, #20]
 800e1b8:	60e1      	str	r1, [r4, #12]
 800e1ba:	6122      	str	r2, [r4, #16]
 800e1bc:	6918      	ldr	r0, [r3, #16]
 800e1be:	6959      	ldr	r1, [r3, #20]
 800e1c0:	699a      	ldr	r2, [r3, #24]
 800e1c2:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e1c4:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e1c6:	61e1      	str	r1, [r4, #28]
 800e1c8:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800e1ce:	f000 fbd5 	bl	800e97c <ip4_route>
#endif
  if (netif != NULL) {
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	b180      	cbz	r0, 800e1f8 <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e1d6:	8969      	ldrh	r1, [r5, #10]
 800e1d8:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800e1da:	70a7      	strb	r7, [r4, #2]
 800e1dc:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e1de:	f001 fb69 	bl	800f8b4 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e1e2:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e1e4:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e1e6:	aa05      	add	r2, sp, #20
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	9700      	str	r7, [sp, #0]
 800e1ee:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800e1f2:	23ff      	movs	r3, #255	@ 0xff
 800e1f4:	f000 fdfa 	bl	800edec <ip4_output_if>
  }
  pbuf_free(q);
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f002 f9ab 	bl	8010554 <pbuf_free>
}
 800e1fe:	b007      	add	sp, #28
 800e200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e202:	4b04      	ldr	r3, [pc, #16]	@ (800e214 <icmp_send_response+0x94>)
 800e204:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e208:	4903      	ldr	r1, [pc, #12]	@ (800e218 <icmp_send_response+0x98>)
 800e20a:	4804      	ldr	r0, [pc, #16]	@ (800e21c <icmp_send_response+0x9c>)
 800e20c:	f008 f956 	bl	80164bc <iprintf>
 800e210:	e7c6      	b.n	800e1a0 <icmp_send_response+0x20>
 800e212:	bf00      	nop
 800e214:	0801a1e0 	.word	0x0801a1e0
 800e218:	0801a258 	.word	0x0801a258
 800e21c:	080187f8 	.word	0x080187f8

0800e220 <icmp_input>:
{
 800e220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800e224:	4f4a      	ldr	r7, [pc, #296]	@ (800e350 <icmp_input+0x130>)
{
 800e226:	b085      	sub	sp, #20
 800e228:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800e22a:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800e22e:	f898 4000 	ldrb.w	r4, [r8]
 800e232:	f004 040f 	and.w	r4, r4, #15
 800e236:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800e238:	2c13      	cmp	r4, #19
 800e23a:	d913      	bls.n	800e264 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800e23c:	8943      	ldrh	r3, [r0, #10]
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d910      	bls.n	800e264 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800e242:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b08      	cmp	r3, #8
 800e248:	d10c      	bne.n	800e264 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e24a:	6978      	ldr	r0, [r7, #20]
 800e24c:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800e250:	2be0      	cmp	r3, #224	@ 0xe0
 800e252:	d007      	beq.n	800e264 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e254:	460e      	mov	r6, r1
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	f000 fdde 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 800e25c:	b910      	cbnz	r0, 800e264 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e25e:	892b      	ldrh	r3, [r5, #8]
 800e260:	2b07      	cmp	r3, #7
 800e262:	d805      	bhi.n	800e270 <icmp_input+0x50>
  pbuf_free(p);
 800e264:	4628      	mov	r0, r5
}
 800e266:	b005      	add	sp, #20
 800e268:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800e26c:	f002 b972 	b.w	8010554 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e270:	f104 090e 	add.w	r9, r4, #14
 800e274:	4628      	mov	r0, r5
 800e276:	4649      	mov	r1, r9
 800e278:	f002 f8da 	bl	8010430 <pbuf_add_header>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	d04b      	beq.n	800e318 <icmp_input+0xf8>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e280:	892b      	ldrh	r3, [r5, #8]
 800e282:	18e1      	adds	r1, r4, r3
 800e284:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800e286:	428b      	cmp	r3, r1
 800e288:	d8ec      	bhi.n	800e264 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e28a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e28e:	200e      	movs	r0, #14
 800e290:	f002 f9d0 	bl	8010634 <pbuf_alloc>
        if (r == NULL) {
 800e294:	4681      	mov	r9, r0
 800e296:	2800      	cmp	r0, #0
 800e298:	d0e4      	beq.n	800e264 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e29a:	8942      	ldrh	r2, [r0, #10]
 800e29c:	f104 0308 	add.w	r3, r4, #8
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d346      	bcc.n	800e332 <icmp_input+0x112>
        MEMCPY(r->payload, iphdr_in, hlen);
 800e2a4:	4641      	mov	r1, r8
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	6840      	ldr	r0, [r0, #4]
 800e2aa:	f008 fb34 	bl	8016916 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4648      	mov	r0, r9
 800e2b2:	f002 f8ed 	bl	8010490 <pbuf_remove_header>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d13f      	bne.n	800e33a <icmp_input+0x11a>
        if (pbuf_copy(r, p) != ERR_OK) {
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	4648      	mov	r0, r9
 800e2be:	f002 fb61 	bl	8010984 <pbuf_copy>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d135      	bne.n	800e332 <icmp_input+0x112>
        pbuf_free(p);
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	464d      	mov	r5, r9
 800e2ca:	f002 f943 	bl	8010554 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e2d2:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800e2d4:	f002 f8ac 	bl	8010430 <pbuf_add_header>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d1c3      	bne.n	800e264 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e2dc:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800e2de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e2e2:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e2e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800e2e8:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e2ea:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e2ec:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e2ee:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e2f0:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800e2f2:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e2f6:	bf8c      	ite	hi
 800e2f8:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e2fa:	3308      	addls	r3, #8
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e300:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800e302:	728a      	strb	r2, [r1, #10]
 800e304:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e306:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e308:	2101      	movs	r1, #1
 800e30a:	9200      	str	r2, [sp, #0]
 800e30c:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800e310:	4910      	ldr	r1, [pc, #64]	@ (800e354 <icmp_input+0x134>)
 800e312:	f000 fd6b 	bl	800edec <ip4_output_if>
  pbuf_free(p);
 800e316:	e7a5      	b.n	800e264 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e318:	4649      	mov	r1, r9
 800e31a:	4628      	mov	r0, r5
 800e31c:	f002 f8b8 	bl	8010490 <pbuf_remove_header>
 800e320:	2800      	cmp	r0, #0
 800e322:	d0d4      	beq.n	800e2ce <icmp_input+0xae>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e324:	4b0c      	ldr	r3, [pc, #48]	@ (800e358 <icmp_input+0x138>)
 800e326:	22c7      	movs	r2, #199	@ 0xc7
 800e328:	490c      	ldr	r1, [pc, #48]	@ (800e35c <icmp_input+0x13c>)
 800e32a:	480d      	ldr	r0, [pc, #52]	@ (800e360 <icmp_input+0x140>)
 800e32c:	f008 f8c6 	bl	80164bc <iprintf>
          goto icmperr;
 800e330:	e798      	b.n	800e264 <icmp_input+0x44>
          pbuf_free(r);
 800e332:	4648      	mov	r0, r9
 800e334:	f002 f90e 	bl	8010554 <pbuf_free>
          goto icmperr;
 800e338:	e794      	b.n	800e264 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e33a:	4b07      	ldr	r3, [pc, #28]	@ (800e358 <icmp_input+0x138>)
 800e33c:	22b6      	movs	r2, #182	@ 0xb6
 800e33e:	4909      	ldr	r1, [pc, #36]	@ (800e364 <icmp_input+0x144>)
 800e340:	4807      	ldr	r0, [pc, #28]	@ (800e360 <icmp_input+0x140>)
 800e342:	f008 f8bb 	bl	80164bc <iprintf>
          pbuf_free(r);
 800e346:	4648      	mov	r0, r9
 800e348:	f002 f904 	bl	8010554 <pbuf_free>
          goto icmperr;
 800e34c:	e78a      	b.n	800e264 <icmp_input+0x44>
 800e34e:	bf00      	nop
 800e350:	20009014 	.word	0x20009014
 800e354:	20009028 	.word	0x20009028
 800e358:	0801a1e0 	.word	0x0801a1e0
 800e35c:	0801a2bc 	.word	0x0801a2bc
 800e360:	080187f8 	.word	0x080187f8
 800e364:	0801a284 	.word	0x0801a284

0800e368 <icmp_dest_unreach>:
{
 800e368:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800e36a:	2103      	movs	r1, #3
 800e36c:	f7ff bf08 	b.w	800e180 <icmp_send_response>

0800e370 <icmp_time_exceeded>:
{
 800e370:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800e372:	210b      	movs	r1, #11
 800e374:	f7ff bf04 	b.w	800e180 <icmp_send_response>

0800e378 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800e37a:	6a87      	ldr	r7, [r0, #40]	@ 0x28
{
 800e37c:	460d      	mov	r5, r1
  while (group != NULL) {
 800e37e:	b1ff      	cbz	r7, 800e3c0 <igmp_lookup_group+0x48>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e380:	680a      	ldr	r2, [r1, #0]
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800e382:	463c      	mov	r4, r7
 800e384:	e001      	b.n	800e38a <igmp_lookup_group+0x12>
    group = group->next;
 800e386:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800e388:	b124      	cbz	r4, 800e394 <igmp_lookup_group+0x1c>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e38a:	6863      	ldr	r3, [r4, #4]
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d1fa      	bne.n	800e386 <igmp_lookup_group+0xe>
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
}
 800e390:	4620      	mov	r0, r4
 800e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 800e394:	200a      	movs	r0, #10
 800e396:	f001 fdb1 	bl	800fefc <memp_malloc>
  if (group != NULL) {
 800e39a:	4604      	mov	r4, r0
 800e39c:	b170      	cbz	r0, 800e3bc <igmp_lookup_group+0x44>
    ip4_addr_set(&(group->group_address), addr);
 800e39e:	682a      	ldr	r2, [r5, #0]
    group->last_reporter_flag = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
    group->use                = 0;
 800e3a6:	7323      	strb	r3, [r4, #12]
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e418 <igmp_lookup_group+0xa0>)
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800e3aa:	682a      	ldr	r2, [r5, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d022      	beq.n	800e3f8 <igmp_lookup_group+0x80>
      group->next = list_head->next;
 800e3b2:	683b      	ldr	r3, [r7, #0]
}
 800e3b4:	4620      	mov	r0, r4
      group->next = list_head->next;
 800e3b6:	6023      	str	r3, [r4, #0]
      list_head->next = group;
 800e3b8:	603c      	str	r4, [r7, #0]
}
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800e3bc:	2400      	movs	r4, #0
 800e3be:	e7e7      	b.n	800e390 <igmp_lookup_group+0x18>
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	200a      	movs	r0, #10
 800e3c4:	f001 fd9a 	bl	800fefc <memp_malloc>
  if (group != NULL) {
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0f6      	beq.n	800e3bc <igmp_lookup_group+0x44>
    ip4_addr_set(&(group->group_address), addr);
 800e3ce:	b9dd      	cbnz	r5, 800e408 <igmp_lookup_group+0x90>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e3d0:	4b11      	ldr	r3, [pc, #68]	@ (800e418 <igmp_lookup_group+0xa0>)
    group->use                = 0;
 800e3d2:	7305      	strb	r5, [r0, #12]
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e3d4:	681b      	ldr	r3, [r3, #0]
    group->last_reporter_flag = 0;
 800e3d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e3da:	682a      	ldr	r2, [r5, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d103      	bne.n	800e3e8 <igmp_lookup_group+0x70>
      group->next = NULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	6023      	str	r3, [r4, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 800e3e4:	62b4      	str	r4, [r6, #40]	@ 0x28
 800e3e6:	e7d3      	b.n	800e390 <igmp_lookup_group+0x18>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e41c <igmp_lookup_group+0xa4>)
 800e3ea:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800e3ee:	490c      	ldr	r1, [pc, #48]	@ (800e420 <igmp_lookup_group+0xa8>)
 800e3f0:	480c      	ldr	r0, [pc, #48]	@ (800e424 <igmp_lookup_group+0xac>)
 800e3f2:	f008 f863 	bl	80164bc <iprintf>
 800e3f6:	e7f3      	b.n	800e3e0 <igmp_lookup_group+0x68>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800e3f8:	4b08      	ldr	r3, [pc, #32]	@ (800e41c <igmp_lookup_group+0xa4>)
 800e3fa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e3fe:	490a      	ldr	r1, [pc, #40]	@ (800e428 <igmp_lookup_group+0xb0>)
 800e400:	4808      	ldr	r0, [pc, #32]	@ (800e424 <igmp_lookup_group+0xac>)
 800e402:	f008 f85b 	bl	80164bc <iprintf>
 800e406:	e7d4      	b.n	800e3b2 <igmp_lookup_group+0x3a>
    ip4_addr_set(&(group->group_address), addr);
 800e408:	682a      	ldr	r2, [r5, #0]
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e40a:	4b03      	ldr	r3, [pc, #12]	@ (800e418 <igmp_lookup_group+0xa0>)
    group->last_reporter_flag = 0;
 800e40c:	6087      	str	r7, [r0, #8]
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e40e:	681b      	ldr	r3, [r3, #0]
    group->use                = 0;
 800e410:	7307      	strb	r7, [r0, #12]
    ip4_addr_set(&(group->group_address), addr);
 800e412:	6042      	str	r2, [r0, #4]
    if (list_head == NULL) {
 800e414:	e7e1      	b.n	800e3da <igmp_lookup_group+0x62>
 800e416:	bf00      	nop
 800e418:	20009004 	.word	0x20009004
 800e41c:	0801a2f0 	.word	0x0801a2f0
 800e420:	0801a368 	.word	0x0801a368
 800e424:	080187f8 	.word	0x080187f8
 800e428:	0801a39c 	.word	0x0801a39c

0800e42c <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 800e42c:	b538      	push	{r3, r4, r5, lr}
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800e42e:	7a43      	ldrb	r3, [r0, #9]
{
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800e434:	2b02      	cmp	r3, #2
 800e436:	d004      	beq.n	800e442 <igmp_delaying_member+0x16>
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d000      	beq.n	800e43e <igmp_delaying_member+0x12>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
       ((group->timer == 0) || (maxresp < group->timer)))) {
    igmp_start_timer(group, maxresp);
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  }
}
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800e43e:	8943      	ldrh	r3, [r0, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e440:	b933      	cbnz	r3, 800e450 <igmp_delaying_member+0x24>
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e442:	2d02      	cmp	r5, #2
 800e444:	d807      	bhi.n	800e456 <igmp_delaying_member+0x2a>
 800e446:	2301      	movs	r3, #1
 800e448:	8163      	strh	r3, [r4, #10]
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e44a:	2301      	movs	r3, #1
 800e44c:	7263      	strb	r3, [r4, #9]
}
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800e450:	428b      	cmp	r3, r1
 800e452:	d9f3      	bls.n	800e43c <igmp_delaying_member+0x10>
 800e454:	e7f5      	b.n	800e442 <igmp_delaying_member+0x16>
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e456:	f007 faf9 	bl	8015a4c <rand>
 800e45a:	fbb0 f3f5 	udiv	r3, r0, r5
 800e45e:	fb03 0015 	mls	r0, r3, r5, r0
 800e462:	8160      	strh	r0, [r4, #10]
  if (group->timer == 0) {
 800e464:	2800      	cmp	r0, #0
 800e466:	d0ee      	beq.n	800e446 <igmp_delaying_member+0x1a>
 800e468:	e7ef      	b.n	800e44a <igmp_delaying_member+0x1e>
 800e46a:	bf00      	nop

0800e46c <igmp_send>:
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  struct pbuf     *p    = NULL;
  struct igmp_msg *igmp = NULL;
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800e46c:	4b25      	ldr	r3, [pc, #148]	@ (800e504 <igmp_send+0x98>)
{
 800e46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800e472:	681b      	ldr	r3, [r3, #0]
{
 800e474:	b088      	sub	sp, #32
 800e476:	4617      	mov	r7, r2
 800e478:	4680      	mov	r8, r0
 800e47a:	460e      	mov	r6, r1
  ip4_addr_t  *dest = NULL;

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 800e47c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e480:	2108      	movs	r1, #8
 800e482:	2036      	movs	r0, #54	@ 0x36
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800e484:	9306      	str	r3, [sp, #24]
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 800e486:	f002 f8d5 	bl	8010634 <pbuf_alloc>

  if (p) {
 800e48a:	b378      	cbz	r0, 800e4ec <igmp_send+0x80>
    igmp = (struct igmp_msg *)p->payload;
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800e48c:	8943      	ldrh	r3, [r0, #10]
 800e48e:	4604      	mov	r4, r0
    igmp = (struct igmp_msg *)p->payload;
 800e490:	6845      	ldr	r5, [r0, #4]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800e492:	2b07      	cmp	r3, #7
 800e494:	d92d      	bls.n	800e4f2 <igmp_send+0x86>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 800e496:	f8d8 3004 	ldr.w	r3, [r8, #4]

    if (type == IGMP_V2_MEMB_REPORT) {
 800e49a:	2f16      	cmp	r7, #22
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 800e49c:	9306      	str	r3, [sp, #24]
      dest = &(group->group_address);
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800e49e:	6873      	ldr	r3, [r6, #4]
 800e4a0:	606b      	str	r3, [r5, #4]
    if (type == IGMP_V2_MEMB_REPORT) {
 800e4a2:	d001      	beq.n	800e4a8 <igmp_send+0x3c>
      group->last_reporter_flag = 1; /* Remember we were the last to report */
    } else {
      if (type == IGMP_LEAVE_GROUP) {
        dest = &allrouters;
 800e4a4:	4e18      	ldr	r6, [pc, #96]	@ (800e508 <igmp_send+0x9c>)
 800e4a6:	e002      	b.n	800e4ae <igmp_send+0x42>
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 800e4a8:	2301      	movs	r3, #1
      dest = &(group->group_address);
 800e4aa:	3604      	adds	r6, #4
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 800e4ac:	7133      	strb	r3, [r6, #4]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
      igmp->igmp_msgtype  = type;
 800e4ae:	702f      	strb	r7, [r5, #0]
      igmp->igmp_maxresp  = 0;
 800e4b0:	2700      	movs	r7, #0
      igmp->igmp_checksum = 0;
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800e4b2:	2108      	movs	r1, #8
 800e4b4:	4628      	mov	r0, r5
      igmp->igmp_maxresp  = 0;
 800e4b6:	706f      	strb	r7, [r5, #1]
      igmp->igmp_checksum = 0;
 800e4b8:	70af      	strb	r7, [r5, #2]
 800e4ba:	70ef      	strb	r7, [r5, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800e4bc:	f001 f9fa 	bl	800f8b4 <inet_chksum>
  ra[0] = PP_HTONS(ROUTER_ALERT);
 800e4c0:	f240 4194 	movw	r1, #1172	@ 0x494
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800e4c4:	8068      	strh	r0, [r5, #2]
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 800e4c6:	2002      	movs	r0, #2
  ra[0] = PP_HTONS(ROUTER_ALERT);
 800e4c8:	9107      	str	r1, [sp, #28]
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 800e4ca:	2104      	movs	r1, #4
 800e4cc:	9001      	str	r0, [sp, #4]
 800e4ce:	4632      	mov	r2, r6
 800e4d0:	9104      	str	r1, [sp, #16]
 800e4d2:	a907      	add	r1, sp, #28
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	9103      	str	r1, [sp, #12]
 800e4da:	a906      	add	r1, sp, #24
 800e4dc:	f8cd 8008 	str.w	r8, [sp, #8]
 800e4e0:	9700      	str	r7, [sp, #0]
 800e4e2:	f000 fc57 	bl	800ed94 <ip4_output_if_opt>

      igmp_ip_output_if(p, &src, dest, netif);
    }

    pbuf_free(p);
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f002 f834 	bl	8010554 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 800e4ec:	b008      	add	sp, #32
 800e4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800e4f2:	4b06      	ldr	r3, [pc, #24]	@ (800e50c <igmp_send+0xa0>)
 800e4f4:	f240 3202 	movw	r2, #770	@ 0x302
 800e4f8:	4905      	ldr	r1, [pc, #20]	@ (800e510 <igmp_send+0xa4>)
 800e4fa:	4806      	ldr	r0, [pc, #24]	@ (800e514 <igmp_send+0xa8>)
 800e4fc:	f007 ffde 	bl	80164bc <iprintf>
 800e500:	e7c9      	b.n	800e496 <igmp_send+0x2a>
 800e502:	bf00      	nop
 800e504:	0801a7a0 	.word	0x0801a7a0
 800e508:	20009000 	.word	0x20009000
 800e50c:	0801a2f0 	.word	0x0801a2f0
 800e510:	0801a3e0 	.word	0x0801a3e0
 800e514:	080187f8 	.word	0x080187f8

0800e518 <igmp_init>:
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800e518:	4903      	ldr	r1, [pc, #12]	@ (800e528 <igmp_init+0x10>)
 800e51a:	4804      	ldr	r0, [pc, #16]	@ (800e52c <igmp_init+0x14>)
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800e51c:	4b04      	ldr	r3, [pc, #16]	@ (800e530 <igmp_init+0x18>)
 800e51e:	4a05      	ldr	r2, [pc, #20]	@ (800e534 <igmp_init+0x1c>)
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800e520:	6008      	str	r0, [r1, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800e522:	601a      	str	r2, [r3, #0]
}
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	20009004 	.word	0x20009004
 800e52c:	010000e0 	.word	0x010000e0
 800e530:	20009000 	.word	0x20009000
 800e534:	020000e0 	.word	0x020000e0

0800e538 <igmp_start>:
{
 800e538:	b510      	push	{r4, lr}
  group = igmp_lookup_group(netif, &allsystems);
 800e53a:	490a      	ldr	r1, [pc, #40]	@ (800e564 <igmp_start+0x2c>)
{
 800e53c:	4604      	mov	r4, r0
  group = igmp_lookup_group(netif, &allsystems);
 800e53e:	f7ff ff1b 	bl	800e378 <igmp_lookup_group>
  if (group != NULL) {
 800e542:	b160      	cbz	r0, 800e55e <igmp_start+0x26>
    group->use++;
 800e544:	7b03      	ldrb	r3, [r0, #12]
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e546:	2202      	movs	r2, #2
    group->use++;
 800e548:	3301      	adds	r3, #1
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e54a:	7242      	strb	r2, [r0, #9]
    group->use++;
 800e54c:	7303      	strb	r3, [r0, #12]
    if (netif->igmp_mac_filter != NULL) {
 800e54e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e550:	b11b      	cbz	r3, 800e55a <igmp_start+0x22>
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 800e552:	2201      	movs	r2, #1
 800e554:	4903      	ldr	r1, [pc, #12]	@ (800e564 <igmp_start+0x2c>)
 800e556:	4620      	mov	r0, r4
 800e558:	4798      	blx	r3
    return ERR_OK;
 800e55a:	2000      	movs	r0, #0
}
 800e55c:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800e55e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e562:	bd10      	pop	{r4, pc}
 800e564:	20009004 	.word	0x20009004

0800e568 <igmp_report_groups>:
  struct igmp_group *group = netif_igmp_data(netif);
 800e568:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if (group != NULL) {
 800e56a:	b31b      	cbz	r3, 800e5b4 <igmp_report_groups+0x4c>
{
 800e56c:	b570      	push	{r4, r5, r6, lr}
    group = group->next;
 800e56e:	681c      	ldr	r4, [r3, #0]
  while (group != NULL) {
 800e570:	b1fc      	cbz	r4, 800e5b2 <igmp_report_groups+0x4a>
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e572:	4e11      	ldr	r6, [pc, #68]	@ (800e5b8 <igmp_report_groups+0x50>)
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e574:	2501      	movs	r5, #1
 800e576:	e001      	b.n	800e57c <igmp_report_groups+0x14>
    group = group->next;
 800e578:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800e57a:	b1d4      	cbz	r4, 800e5b2 <igmp_report_groups+0x4a>
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800e57c:	7a63      	ldrb	r3, [r4, #9]
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d006      	beq.n	800e590 <igmp_report_groups+0x28>
 800e582:	2b01      	cmp	r3, #1
 800e584:	d1f8      	bne.n	800e578 <igmp_report_groups+0x10>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800e586:	8963      	ldrh	r3, [r4, #10]
 800e588:	3b01      	subs	r3, #1
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	2b04      	cmp	r3, #4
 800e58e:	d9f3      	bls.n	800e578 <igmp_report_groups+0x10>
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e590:	f007 fa5c 	bl	8015a4c <rand>
 800e594:	fba6 3200 	umull	r3, r2, r6, r0
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e598:	7265      	strb	r5, [r4, #9]
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e59a:	f022 0303 	bic.w	r3, r2, #3
 800e59e:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 800e5a2:	1ac0      	subs	r0, r0, r3
 800e5a4:	2801      	cmp	r0, #1
 800e5a6:	bf38      	it	cc
 800e5a8:	2001      	movcc	r0, #1
 800e5aa:	8160      	strh	r0, [r4, #10]
    group = group->next;
 800e5ac:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800e5ae:	2c00      	cmp	r4, #0
 800e5b0:	d1e4      	bne.n	800e57c <igmp_report_groups+0x14>
}
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	cccccccd 	.word	0xcccccccd

0800e5bc <igmp_lookfor_group>:
  struct igmp_group *group = netif_igmp_data(ifp);
 800e5bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  while (group != NULL) {
 800e5be:	b130      	cbz	r0, 800e5ce <igmp_lookfor_group+0x12>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e5c0:	680a      	ldr	r2, [r1, #0]
 800e5c2:	e001      	b.n	800e5c8 <igmp_lookfor_group+0xc>
    group = group->next;
 800e5c4:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 800e5c6:	b110      	cbz	r0, 800e5ce <igmp_lookfor_group+0x12>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e5c8:	6843      	ldr	r3, [r0, #4]
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d1fa      	bne.n	800e5c4 <igmp_lookfor_group+0x8>
}
 800e5ce:	4770      	bx	lr

0800e5d0 <igmp_input>:
{
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	460d      	mov	r5, r1
  if (p->len < IGMP_MINLEN) {
 800e5d4:	8941      	ldrh	r1, [r0, #10]
{
 800e5d6:	4604      	mov	r4, r0
  if (p->len < IGMP_MINLEN) {
 800e5d8:	2907      	cmp	r1, #7
 800e5da:	d917      	bls.n	800e60c <igmp_input+0x3c>
  igmp = (struct igmp_msg *)p->payload;
 800e5dc:	6847      	ldr	r7, [r0, #4]
  if (inet_chksum(igmp, p->len)) {
 800e5de:	4616      	mov	r6, r2
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	f001 f967 	bl	800f8b4 <inet_chksum>
 800e5e6:	b988      	cbnz	r0, 800e60c <igmp_input+0x3c>
  struct igmp_group *group = netif_igmp_data(ifp);
 800e5e8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
  while (group != NULL) {
 800e5ea:	b178      	cbz	r0, 800e60c <igmp_input+0x3c>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e5ec:	6831      	ldr	r1, [r6, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	e001      	b.n	800e5f6 <igmp_input+0x26>
    group = group->next;
 800e5f2:	681b      	ldr	r3, [r3, #0]
  while (group != NULL) {
 800e5f4:	b153      	cbz	r3, 800e60c <igmp_input+0x3c>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	428a      	cmp	r2, r1
 800e5fa:	d1fa      	bne.n	800e5f2 <igmp_input+0x22>
  switch (igmp->igmp_msgtype) {
 800e5fc:	783a      	ldrb	r2, [r7, #0]
 800e5fe:	2a11      	cmp	r2, #17
 800e600:	d00d      	beq.n	800e61e <igmp_input+0x4e>
 800e602:	2a16      	cmp	r2, #22
 800e604:	d102      	bne.n	800e60c <igmp_input+0x3c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 800e606:	7a5a      	ldrb	r2, [r3, #9]
 800e608:	2a01      	cmp	r2, #1
 800e60a:	d004      	beq.n	800e616 <igmp_input+0x46>
  pbuf_free(p);
 800e60c:	4620      	mov	r0, r4
}
 800e60e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_free(p);
 800e612:	f001 bf9f 	b.w	8010554 <pbuf_free>
        group->last_reporter_flag = 0;
 800e616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e61a:	609a      	str	r2, [r3, #8]
 800e61c:	e7f6      	b.n	800e60c <igmp_input+0x3c>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800e61e:	4a12      	ldr	r2, [pc, #72]	@ (800e668 <igmp_input+0x98>)
 800e620:	6815      	ldr	r5, [r2, #0]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	428d      	cmp	r5, r1
 800e626:	d006      	beq.n	800e636 <igmp_input+0x66>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 800e628:	2a00      	cmp	r2, #0
 800e62a:	d0ef      	beq.n	800e60c <igmp_input+0x3c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 800e62c:	7879      	ldrb	r1, [r7, #1]
 800e62e:	4618      	mov	r0, r3
 800e630:	f7ff fefc 	bl	800e42c <igmp_delaying_member>
 800e634:	e7ea      	b.n	800e60c <igmp_input+0x3c>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800e636:	b98a      	cbnz	r2, 800e65c <igmp_input+0x8c>
        if (igmp->igmp_maxresp == 0) {
 800e638:	787b      	ldrb	r3, [r7, #1]
 800e63a:	b90b      	cbnz	r3, 800e640 <igmp_input+0x70>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 800e63c:	230a      	movs	r3, #10
 800e63e:	707b      	strb	r3, [r7, #1]
          groupref = groupref->next;
 800e640:	6805      	ldr	r5, [r0, #0]
        while (groupref) {
 800e642:	2d00      	cmp	r5, #0
 800e644:	d0e2      	beq.n	800e60c <igmp_input+0x3c>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 800e646:	4628      	mov	r0, r5
 800e648:	7879      	ldrb	r1, [r7, #1]
 800e64a:	f7ff feef 	bl	800e42c <igmp_delaying_member>
          groupref = groupref->next;
 800e64e:	682d      	ldr	r5, [r5, #0]
        while (groupref) {
 800e650:	2d00      	cmp	r5, #0
 800e652:	d1f8      	bne.n	800e646 <igmp_input+0x76>
 800e654:	e7da      	b.n	800e60c <igmp_input+0x3c>
    group = group->next;
 800e656:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 800e658:	2800      	cmp	r0, #0
 800e65a:	d0d7      	beq.n	800e60c <igmp_input+0x3c>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e65c:	6843      	ldr	r3, [r0, #4]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d1f9      	bne.n	800e656 <igmp_input+0x86>
 800e662:	4603      	mov	r3, r0
 800e664:	e7e2      	b.n	800e62c <igmp_input+0x5c>
 800e666:	bf00      	nop
 800e668:	20009004 	.word	0x20009004

0800e66c <igmp_joingroup_netif>:
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e66c:	680b      	ldr	r3, [r1, #0]
 800e66e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e672:	2ae0      	cmp	r2, #224	@ 0xe0
{
 800e674:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e676:	d13c      	bne.n	800e6f2 <igmp_joingroup_netif+0x86>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e678:	4a27      	ldr	r2, [pc, #156]	@ (800e718 <igmp_joingroup_netif+0xac>)
 800e67a:	6812      	ldr	r2, [r2, #0]
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d043      	beq.n	800e708 <igmp_joingroup_netif+0x9c>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 800e680:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800e684:	4605      	mov	r5, r0
 800e686:	069b      	lsls	r3, r3, #26
 800e688:	d529      	bpl.n	800e6de <igmp_joingroup_netif+0x72>
  group = igmp_lookup_group(netif, groupaddr);
 800e68a:	460e      	mov	r6, r1
 800e68c:	f7ff fe74 	bl	800e378 <igmp_lookup_group>
  if (group != NULL) {
 800e690:	4604      	mov	r4, r0
 800e692:	2800      	cmp	r0, #0
 800e694:	d035      	beq.n	800e702 <igmp_joingroup_netif+0x96>
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 800e696:	7a43      	ldrb	r3, [r0, #9]
 800e698:	b9e3      	cbnz	r3, 800e6d4 <igmp_joingroup_netif+0x68>
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 800e69a:	7b03      	ldrb	r3, [r0, #12]
 800e69c:	b92b      	cbnz	r3, 800e6aa <igmp_joingroup_netif+0x3e>
 800e69e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800e6a0:	b11b      	cbz	r3, 800e6aa <igmp_joingroup_netif+0x3e>
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	4798      	blx	r3
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e6aa:	2216      	movs	r2, #22
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f7ff fedc 	bl	800e46c <igmp_send>
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e6b4:	f007 f9ca 	bl	8015a4c <rand>
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e6b8:	2201      	movs	r2, #1
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e6ba:	4b18      	ldr	r3, [pc, #96]	@ (800e71c <igmp_joingroup_netif+0xb0>)
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e6bc:	7262      	strb	r2, [r4, #9]
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800e6be:	fba3 2300 	umull	r2, r3, r3, r0
 800e6c2:	f023 0203 	bic.w	r2, r3, #3
 800e6c6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e6ca:	1ac0      	subs	r0, r0, r3
 800e6cc:	2801      	cmp	r0, #1
 800e6ce:	bf38      	it	cc
 800e6d0:	2001      	movcc	r0, #1
 800e6d2:	8160      	strh	r0, [r4, #10]
    group->use++;
 800e6d4:	7b23      	ldrb	r3, [r4, #12]
    return ERR_OK;
 800e6d6:	2000      	movs	r0, #0
    group->use++;
 800e6d8:	3301      	adds	r3, #1
 800e6da:	7323      	strb	r3, [r4, #12]
}
 800e6dc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 800e6de:	4b10      	ldr	r3, [pc, #64]	@ (800e720 <igmp_joingroup_netif+0xb4>)
 800e6e0:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800e6e4:	490f      	ldr	r1, [pc, #60]	@ (800e724 <igmp_joingroup_netif+0xb8>)
 800e6e6:	4810      	ldr	r0, [pc, #64]	@ (800e728 <igmp_joingroup_netif+0xbc>)
 800e6e8:	f007 fee8 	bl	80164bc <iprintf>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e6ec:	f06f 0005 	mvn.w	r0, #5
}
 800e6f0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e720 <igmp_joingroup_netif+0xb4>)
 800e6f4:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 800e6f8:	490c      	ldr	r1, [pc, #48]	@ (800e72c <igmp_joingroup_netif+0xc0>)
 800e6fa:	480b      	ldr	r0, [pc, #44]	@ (800e728 <igmp_joingroup_netif+0xbc>)
 800e6fc:	f007 fede 	bl	80164bc <iprintf>
 800e700:	e7f4      	b.n	800e6ec <igmp_joingroup_netif+0x80>
    return ERR_MEM;
 800e702:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e706:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e708:	4b05      	ldr	r3, [pc, #20]	@ (800e720 <igmp_joingroup_netif+0xb4>)
 800e70a:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800e70e:	4908      	ldr	r1, [pc, #32]	@ (800e730 <igmp_joingroup_netif+0xc4>)
 800e710:	4805      	ldr	r0, [pc, #20]	@ (800e728 <igmp_joingroup_netif+0xbc>)
 800e712:	f007 fed3 	bl	80164bc <iprintf>
 800e716:	e7e9      	b.n	800e6ec <igmp_joingroup_netif+0x80>
 800e718:	20009004 	.word	0x20009004
 800e71c:	cccccccd 	.word	0xcccccccd
 800e720:	0801a2f0 	.word	0x0801a2f0
 800e724:	0801a494 	.word	0x0801a494
 800e728:	080187f8 	.word	0x080187f8
 800e72c:	0801a41c 	.word	0x0801a41c
 800e730:	0801a458 	.word	0x0801a458

0800e734 <igmp_joingroup>:
{
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e736:	680b      	ldr	r3, [r1, #0]
 800e738:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e73c:	2ae0      	cmp	r2, #224	@ 0xe0
 800e73e:	d121      	bne.n	800e784 <igmp_joingroup+0x50>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e740:	4a19      	ldr	r2, [pc, #100]	@ (800e7a8 <igmp_joingroup+0x74>)
 800e742:	6812      	ldr	r2, [r2, #0]
 800e744:	4293      	cmp	r3, r2
 800e746:	d027      	beq.n	800e798 <igmp_joingroup+0x64>
  NETIF_FOREACH(netif) {
 800e748:	4b18      	ldr	r3, [pc, #96]	@ (800e7ac <igmp_joingroup+0x78>)
 800e74a:	681c      	ldr	r4, [r3, #0]
 800e74c:	b30c      	cbz	r4, 800e792 <igmp_joingroup+0x5e>
 800e74e:	460e      	mov	r6, r1
 800e750:	4605      	mov	r5, r0
  err_t err = ERR_VAL; /* no matching interface */
 800e752:	f06f 0205 	mvn.w	r2, #5
 800e756:	e004      	b.n	800e762 <igmp_joingroup+0x2e>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e758:	6867      	ldr	r7, [r4, #4]
 800e75a:	42bb      	cmp	r3, r7
 800e75c:	d00b      	beq.n	800e776 <igmp_joingroup+0x42>
  NETIF_FOREACH(netif) {
 800e75e:	6824      	ldr	r4, [r4, #0]
 800e760:	b174      	cbz	r4, 800e780 <igmp_joingroup+0x4c>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e762:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800e766:	069b      	lsls	r3, r3, #26
 800e768:	d5f9      	bpl.n	800e75e <igmp_joingroup+0x2a>
      err = igmp_joingroup_netif(netif, groupaddr);
 800e76a:	4620      	mov	r0, r4
 800e76c:	4631      	mov	r1, r6
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e76e:	b115      	cbz	r5, 800e776 <igmp_joingroup+0x42>
 800e770:	682b      	ldr	r3, [r5, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1f0      	bne.n	800e758 <igmp_joingroup+0x24>
      err = igmp_joingroup_netif(netif, groupaddr);
 800e776:	f7ff ff79 	bl	800e66c <igmp_joingroup_netif>
      if (err != ERR_OK) {
 800e77a:	4602      	mov	r2, r0
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d0ee      	beq.n	800e75e <igmp_joingroup+0x2a>
}
 800e780:	4610      	mov	r0, r2
 800e782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e784:	4b0a      	ldr	r3, [pc, #40]	@ (800e7b0 <igmp_joingroup+0x7c>)
 800e786:	f240 12c9 	movw	r2, #457	@ 0x1c9
 800e78a:	490a      	ldr	r1, [pc, #40]	@ (800e7b4 <igmp_joingroup+0x80>)
 800e78c:	480a      	ldr	r0, [pc, #40]	@ (800e7b8 <igmp_joingroup+0x84>)
 800e78e:	f007 fe95 	bl	80164bc <iprintf>
 800e792:	f06f 0205 	mvn.w	r2, #5
 800e796:	e7f3      	b.n	800e780 <igmp_joingroup+0x4c>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e798:	4b05      	ldr	r3, [pc, #20]	@ (800e7b0 <igmp_joingroup+0x7c>)
 800e79a:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 800e79e:	4907      	ldr	r1, [pc, #28]	@ (800e7bc <igmp_joingroup+0x88>)
 800e7a0:	4805      	ldr	r0, [pc, #20]	@ (800e7b8 <igmp_joingroup+0x84>)
 800e7a2:	f007 fe8b 	bl	80164bc <iprintf>
 800e7a6:	e7f4      	b.n	800e792 <igmp_joingroup+0x5e>
 800e7a8:	20009004 	.word	0x20009004
 800e7ac:	20010168 	.word	0x20010168
 800e7b0:	0801a2f0 	.word	0x0801a2f0
 800e7b4:	0801a4cc 	.word	0x0801a4cc
 800e7b8:	080187f8 	.word	0x080187f8
 800e7bc:	0801a504 	.word	0x0801a504

0800e7c0 <igmp_leavegroup_netif>:
{
 800e7c0:	b5b0      	push	{r4, r5, r7, lr}
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e7c2:	680d      	ldr	r5, [r1, #0]
{
 800e7c4:	b082      	sub	sp, #8
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e7c6:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 800e7ca:	2be0      	cmp	r3, #224	@ 0xe0
 800e7cc:	d139      	bne.n	800e842 <igmp_leavegroup_netif+0x82>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e7ce:	4b2a      	ldr	r3, [pc, #168]	@ (800e878 <igmp_leavegroup_netif+0xb8>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	429d      	cmp	r5, r3
 800e7d4:	d047      	beq.n	800e866 <igmp_leavegroup_netif+0xa6>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 800e7d6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800e7da:	069b      	lsls	r3, r3, #26
 800e7dc:	d53b      	bpl.n	800e856 <igmp_leavegroup_netif+0x96>
  struct igmp_group *group = netif_igmp_data(ifp);
 800e7de:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  while (group != NULL) {
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d035      	beq.n	800e850 <igmp_leavegroup_netif+0x90>
 800e7e4:	460f      	mov	r7, r1
  struct igmp_group *group = netif_igmp_data(ifp);
 800e7e6:	461c      	mov	r4, r3
 800e7e8:	e002      	b.n	800e7f0 <igmp_leavegroup_netif+0x30>
    group = group->next;
 800e7ea:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800e7ec:	2c00      	cmp	r4, #0
 800e7ee:	d02f      	beq.n	800e850 <igmp_leavegroup_netif+0x90>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e7f0:	6862      	ldr	r2, [r4, #4]
 800e7f2:	4295      	cmp	r5, r2
 800e7f4:	d1f9      	bne.n	800e7ea <igmp_leavegroup_netif+0x2a>
    if (group->use <= 1) {
 800e7f6:	7b22      	ldrb	r2, [r4, #12]
 800e7f8:	2a01      	cmp	r2, #1
 800e7fa:	d904      	bls.n	800e806 <igmp_leavegroup_netif+0x46>
      group->use--;
 800e7fc:	3a01      	subs	r2, #1
 800e7fe:	7322      	strb	r2, [r4, #12]
    return ERR_OK;
 800e800:	2000      	movs	r0, #0
}
 800e802:	b002      	add	sp, #8
 800e804:	bdb0      	pop	{r4, r5, r7, pc}
    if (tmp_group->next == group) {
 800e806:	461a      	mov	r2, r3
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	42a3      	cmp	r3, r4
 800e80c:	d00d      	beq.n	800e82a <igmp_leavegroup_netif+0x6a>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1f9      	bne.n	800e806 <igmp_leavegroup_netif+0x46>
      if (group->last_reporter_flag) {
 800e812:	7a23      	ldrb	r3, [r4, #8]
 800e814:	b973      	cbnz	r3, 800e834 <igmp_leavegroup_netif+0x74>
      if (netif->igmp_mac_filter != NULL) {
 800e816:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e818:	b113      	cbz	r3, 800e820 <igmp_leavegroup_netif+0x60>
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 800e81a:	2200      	movs	r2, #0
 800e81c:	4639      	mov	r1, r7
 800e81e:	4798      	blx	r3
      memp_free(MEMP_IGMP_GROUP, group);
 800e820:	4621      	mov	r1, r4
 800e822:	200a      	movs	r0, #10
 800e824:	f001 fbb0 	bl	800ff88 <memp_free>
 800e828:	e7ea      	b.n	800e800 <igmp_leavegroup_netif+0x40>
      tmp_group->next = group->next;
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	6013      	str	r3, [r2, #0]
      if (group->last_reporter_flag) {
 800e82e:	7a23      	ldrb	r3, [r4, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d0f0      	beq.n	800e816 <igmp_leavegroup_netif+0x56>
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 800e834:	2217      	movs	r2, #23
 800e836:	4621      	mov	r1, r4
 800e838:	9001      	str	r0, [sp, #4]
 800e83a:	f7ff fe17 	bl	800e46c <igmp_send>
 800e83e:	9801      	ldr	r0, [sp, #4]
 800e840:	e7e9      	b.n	800e816 <igmp_leavegroup_netif+0x56>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e842:	4b0e      	ldr	r3, [pc, #56]	@ (800e87c <igmp_leavegroup_netif+0xbc>)
 800e844:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800e848:	490d      	ldr	r1, [pc, #52]	@ (800e880 <igmp_leavegroup_netif+0xc0>)
 800e84a:	480e      	ldr	r0, [pc, #56]	@ (800e884 <igmp_leavegroup_netif+0xc4>)
 800e84c:	f007 fe36 	bl	80164bc <iprintf>
 800e850:	f06f 0005 	mvn.w	r0, #5
 800e854:	e7d5      	b.n	800e802 <igmp_leavegroup_netif+0x42>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 800e856:	4b09      	ldr	r3, [pc, #36]	@ (800e87c <igmp_leavegroup_netif+0xbc>)
 800e858:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800e85c:	490a      	ldr	r1, [pc, #40]	@ (800e888 <igmp_leavegroup_netif+0xc8>)
 800e85e:	4809      	ldr	r0, [pc, #36]	@ (800e884 <igmp_leavegroup_netif+0xc4>)
 800e860:	f007 fe2c 	bl	80164bc <iprintf>
 800e864:	e7f4      	b.n	800e850 <igmp_leavegroup_netif+0x90>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e866:	4b05      	ldr	r3, [pc, #20]	@ (800e87c <igmp_leavegroup_netif+0xbc>)
 800e868:	f240 224d 	movw	r2, #589	@ 0x24d
 800e86c:	4907      	ldr	r1, [pc, #28]	@ (800e88c <igmp_leavegroup_netif+0xcc>)
 800e86e:	4805      	ldr	r0, [pc, #20]	@ (800e884 <igmp_leavegroup_netif+0xc4>)
 800e870:	f007 fe24 	bl	80164bc <iprintf>
 800e874:	e7ec      	b.n	800e850 <igmp_leavegroup_netif+0x90>
 800e876:	bf00      	nop
 800e878:	20009004 	.word	0x20009004
 800e87c:	0801a2f0 	.word	0x0801a2f0
 800e880:	0801a538 	.word	0x0801a538
 800e884:	080187f8 	.word	0x080187f8
 800e888:	0801a5b4 	.word	0x0801a5b4
 800e88c:	0801a578 	.word	0x0801a578

0800e890 <igmp_leavegroup>:
{
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e892:	680b      	ldr	r3, [r1, #0]
 800e894:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e898:	2ae0      	cmp	r2, #224	@ 0xe0
 800e89a:	d124      	bne.n	800e8e6 <igmp_leavegroup+0x56>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e89c:	4a1b      	ldr	r2, [pc, #108]	@ (800e90c <igmp_leavegroup+0x7c>)
 800e89e:	6812      	ldr	r2, [r2, #0]
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d02a      	beq.n	800e8fa <igmp_leavegroup+0x6a>
  NETIF_FOREACH(netif) {
 800e8a4:	4b1a      	ldr	r3, [pc, #104]	@ (800e910 <igmp_leavegroup+0x80>)
 800e8a6:	681c      	ldr	r4, [r3, #0]
 800e8a8:	b324      	cbz	r4, 800e8f4 <igmp_leavegroup+0x64>
 800e8aa:	460f      	mov	r7, r1
 800e8ac:	4606      	mov	r6, r0
  err_t err = ERR_VAL; /* no matching interface */
 800e8ae:	f06f 0505 	mvn.w	r5, #5
 800e8b2:	e004      	b.n	800e8be <igmp_leavegroup+0x2e>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e8b4:	6862      	ldr	r2, [r4, #4]
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d00b      	beq.n	800e8d2 <igmp_leavegroup+0x42>
  NETIF_FOREACH(netif) {
 800e8ba:	6824      	ldr	r4, [r4, #0]
 800e8bc:	b18c      	cbz	r4, 800e8e2 <igmp_leavegroup+0x52>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e8be:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800e8c2:	069b      	lsls	r3, r3, #26
 800e8c4:	d5f9      	bpl.n	800e8ba <igmp_leavegroup+0x2a>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4639      	mov	r1, r7
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 800e8ca:	b116      	cbz	r6, 800e8d2 <igmp_leavegroup+0x42>
 800e8cc:	6833      	ldr	r3, [r6, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1f0      	bne.n	800e8b4 <igmp_leavegroup+0x24>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 800e8d2:	f7ff ff75 	bl	800e7c0 <igmp_leavegroup_netif>
        err = res;
 800e8d6:	2d00      	cmp	r5, #0
  NETIF_FOREACH(netif) {
 800e8d8:	6824      	ldr	r4, [r4, #0]
        err = res;
 800e8da:	bf18      	it	ne
 800e8dc:	4605      	movne	r5, r0
  NETIF_FOREACH(netif) {
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	d1ed      	bne.n	800e8be <igmp_leavegroup+0x2e>
}
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <igmp_leavegroup+0x84>)
 800e8e8:	f240 222a 	movw	r2, #554	@ 0x22a
 800e8ec:	490a      	ldr	r1, [pc, #40]	@ (800e918 <igmp_leavegroup+0x88>)
 800e8ee:	480b      	ldr	r0, [pc, #44]	@ (800e91c <igmp_leavegroup+0x8c>)
 800e8f0:	f007 fde4 	bl	80164bc <iprintf>
 800e8f4:	f06f 0505 	mvn.w	r5, #5
 800e8f8:	e7f3      	b.n	800e8e2 <igmp_leavegroup+0x52>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 800e8fa:	4b06      	ldr	r3, [pc, #24]	@ (800e914 <igmp_leavegroup+0x84>)
 800e8fc:	f240 222b 	movw	r2, #555	@ 0x22b
 800e900:	4907      	ldr	r1, [pc, #28]	@ (800e920 <igmp_leavegroup+0x90>)
 800e902:	4806      	ldr	r0, [pc, #24]	@ (800e91c <igmp_leavegroup+0x8c>)
 800e904:	f007 fdda 	bl	80164bc <iprintf>
 800e908:	e7f4      	b.n	800e8f4 <igmp_leavegroup+0x64>
 800e90a:	bf00      	nop
 800e90c:	20009004 	.word	0x20009004
 800e910:	20010168 	.word	0x20010168
 800e914:	0801a2f0 	.word	0x0801a2f0
 800e918:	0801a5f0 	.word	0x0801a5f0
 800e91c:	080187f8 	.word	0x080187f8
 800e920:	0801a628 	.word	0x0801a628

0800e924 <igmp_tmr>:
{
 800e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NETIF_FOREACH(netif) {
 800e926:	4b13      	ldr	r3, [pc, #76]	@ (800e974 <igmp_tmr+0x50>)
 800e928:	681d      	ldr	r5, [r3, #0]
 800e92a:	b30d      	cbz	r5, 800e970 <igmp_tmr+0x4c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 800e92c:	4f12      	ldr	r7, [pc, #72]	@ (800e978 <igmp_tmr+0x54>)
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e92e:	2602      	movs	r6, #2
    struct igmp_group *group = netif_igmp_data(netif);
 800e930:	6aac      	ldr	r4, [r5, #40]	@ 0x28
    while (group != NULL) {
 800e932:	b914      	cbnz	r4, 800e93a <igmp_tmr+0x16>
 800e934:	e019      	b.n	800e96a <igmp_tmr+0x46>
      group = group->next;
 800e936:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 800e938:	b1bc      	cbz	r4, 800e96a <igmp_tmr+0x46>
      if (group->timer > 0) {
 800e93a:	8962      	ldrh	r2, [r4, #10]
        group->timer--;
 800e93c:	1e53      	subs	r3, r2, #1
      if (group->timer > 0) {
 800e93e:	2a00      	cmp	r2, #0
 800e940:	d0f9      	beq.n	800e936 <igmp_tmr+0x12>
        group->timer--;
 800e942:	b29b      	uxth	r3, r3
 800e944:	8163      	strh	r3, [r4, #10]
        if (group->timer == 0) {
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1f5      	bne.n	800e936 <igmp_tmr+0x12>
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e94a:	7a63      	ldrb	r3, [r4, #9]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d1f2      	bne.n	800e936 <igmp_tmr+0x12>
 800e950:	6860      	ldr	r0, [r4, #4]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e952:	4621      	mov	r1, r4
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e954:	683b      	ldr	r3, [r7, #0]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e956:	2216      	movs	r2, #22
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e958:	4298      	cmp	r0, r3
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e95a:	4628      	mov	r0, r5
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e95c:	d0eb      	beq.n	800e936 <igmp_tmr+0x12>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e95e:	7266      	strb	r6, [r4, #9]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e960:	f7ff fd84 	bl	800e46c <igmp_send>
      group = group->next;
 800e964:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 800e966:	2c00      	cmp	r4, #0
 800e968:	d1e7      	bne.n	800e93a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 800e96a:	682d      	ldr	r5, [r5, #0]
 800e96c:	2d00      	cmp	r5, #0
 800e96e:	d1df      	bne.n	800e930 <igmp_tmr+0xc>
}
 800e970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e972:	bf00      	nop
 800e974:	20010168 	.word	0x20010168
 800e978:	20009004 	.word	0x20009004

0800e97c <ip4_route>:

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800e97c:	6801      	ldr	r1, [r0, #0]
 800e97e:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
 800e982:	2be0      	cmp	r3, #224	@ 0xe0
 800e984:	d028      	beq.n	800e9d8 <ip4_route+0x5c>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e986:	4b19      	ldr	r3, [pc, #100]	@ (800e9ec <ip4_route+0x70>)
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	b1a8      	cbz	r0, 800e9b8 <ip4_route+0x3c>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e98c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800e990:	07da      	lsls	r2, r3, #31
 800e992:	d50e      	bpl.n	800e9b2 <ip4_route+0x36>
 800e994:	075a      	lsls	r2, r3, #29
 800e996:	d50c      	bpl.n	800e9b2 <ip4_route+0x36>
 800e998:	6842      	ldr	r2, [r0, #4]
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e99a:	ea81 0c02 	eor.w	ip, r1, r2
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e99e:	b142      	cbz	r2, 800e9b2 <ip4_route+0x36>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e9a0:	6882      	ldr	r2, [r0, #8]
 800e9a2:	ea1c 0f02 	tst.w	ip, r2
 800e9a6:	d01b      	beq.n	800e9e0 <ip4_route+0x64>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e9a8:	079b      	lsls	r3, r3, #30
 800e9aa:	d402      	bmi.n	800e9b2 <ip4_route+0x36>
 800e9ac:	68c3      	ldr	r3, [r0, #12]
 800e9ae:	4299      	cmp	r1, r3
 800e9b0:	d016      	beq.n	800e9e0 <ip4_route+0x64>
  NETIF_FOREACH(netif) {
 800e9b2:	6800      	ldr	r0, [r0, #0]
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d1e9      	bne.n	800e98c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <ip4_route+0x74>)
 800e9ba:	6818      	ldr	r0, [r3, #0]
 800e9bc:	b180      	cbz	r0, 800e9e0 <ip4_route+0x64>
 800e9be:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800e9c2:	f003 0305 	and.w	r3, r3, #5
 800e9c6:	2b05      	cmp	r3, #5
 800e9c8:	d10b      	bne.n	800e9e2 <ip4_route+0x66>
 800e9ca:	6843      	ldr	r3, [r0, #4]
 800e9cc:	b15b      	cbz	r3, 800e9e6 <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e9ce:	b2c9      	uxtb	r1, r1
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e9d0:	297f      	cmp	r1, #127	@ 0x7f
 800e9d2:	bf08      	it	eq
 800e9d4:	2000      	moveq	r0, #0
 800e9d6:	4770      	bx	lr
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800e9d8:	4b06      	ldr	r3, [pc, #24]	@ (800e9f4 <ip4_route+0x78>)
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d0d2      	beq.n	800e986 <ip4_route+0xa>
  }

  return netif_default;
}
 800e9e0:	4770      	bx	lr
    return NULL;
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	4770      	bx	lr
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	e7fa      	b.n	800e9e0 <ip4_route+0x64>
 800e9ea:	bf00      	nop
 800e9ec:	20010168 	.word	0x20010168
 800e9f0:	20010164 	.word	0x20010164
 800e9f4:	20009008 	.word	0x20009008

0800e9f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e9fc:	6847      	ldr	r7, [r0, #4]
{
 800e9fe:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 800ea00:	783b      	ldrb	r3, [r7, #0]
 800ea02:	091a      	lsrs	r2, r3, #4
 800ea04:	2a04      	cmp	r2, #4
 800ea06:	d127      	bne.n	800ea58 <ip4_input+0x60>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ea08:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea0c:	8878      	ldrh	r0, [r7, #2]
 800ea0e:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ea10:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea12:	f000 ff0f 	bl	800f834 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ea16:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea18:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800ea1a:	4283      	cmp	r3, r0
 800ea1c:	d822      	bhi.n	800ea64 <ip4_input+0x6c>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ea1e:	8963      	ldrh	r3, [r4, #10]
 800ea20:	42ab      	cmp	r3, r5
 800ea22:	d319      	bcc.n	800ea58 <ip4_input+0x60>
 800ea24:	8923      	ldrh	r3, [r4, #8]
 800ea26:	4543      	cmp	r3, r8
 800ea28:	d316      	bcc.n	800ea58 <ip4_input+0x60>
 800ea2a:	2d13      	cmp	r5, #19
 800ea2c:	d914      	bls.n	800ea58 <ip4_input+0x60>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea36:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 800ec34 <ip4_input+0x23c>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800ea3a:	f896 1035 	ldrb.w	r1, [r6, #53]	@ 0x35
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea3e:	2ae0      	cmp	r2, #224	@ 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea40:	e9c8 0304 	strd	r0, r3, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea44:	d113      	bne.n	800ea6e <ip4_input+0x76>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800ea46:	0689      	lsls	r1, r1, #26
 800ea48:	f100 80cb 	bmi.w	800ebe2 <ip4_input+0x1ea>
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ea4c:	7a7b      	ldrb	r3, [r7, #9]
 800ea4e:	2b11      	cmp	r3, #17
 800ea50:	f000 80a1 	beq.w	800eb96 <ip4_input+0x19e>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d143      	bne.n	800eae0 <ip4_input+0xe8>
    pbuf_free(p);
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f001 fd7b 	bl	8010554 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800ea64:	4601      	mov	r1, r0
 800ea66:	4620      	mov	r0, r4
 800ea68:	f001 fe88 	bl	801077c <pbuf_realloc>
 800ea6c:	e7d7      	b.n	800ea1e <ip4_input+0x26>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ea6e:	07ca      	lsls	r2, r1, #31
 800ea70:	d426      	bmi.n	800eac0 <ip4_input+0xc8>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b7f      	cmp	r3, #127	@ 0x7f
 800ea76:	f000 80ab 	beq.w	800ebd0 <ip4_input+0x1d8>
        NETIF_FOREACH(netif) {
 800ea7a:	4b6b      	ldr	r3, [pc, #428]	@ (800ec28 <ip4_input+0x230>)
 800ea7c:	f8d3 9000 	ldr.w	r9, [r3]
 800ea80:	f1b9 0f00 	cmp.w	r9, #0
 800ea84:	d109      	bne.n	800ea9a <ip4_input+0xa2>
 800ea86:	e0a3      	b.n	800ebd0 <ip4_input+0x1d8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ea88:	f000 f9c6 	bl	800ee18 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea8c:	b9a0      	cbnz	r0, 800eab8 <ip4_input+0xc0>
        NETIF_FOREACH(netif) {
 800ea8e:	f8d9 9000 	ldr.w	r9, [r9]
 800ea92:	f1b9 0f00 	cmp.w	r9, #0
 800ea96:	f000 809b 	beq.w	800ebd0 <ip4_input+0x1d8>
          if (netif == inp) {
 800ea9a:	454e      	cmp	r6, r9
 800ea9c:	d0f7      	beq.n	800ea8e <ip4_input+0x96>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ea9e:	f899 3035 	ldrb.w	r3, [r9, #53]	@ 0x35
 800eaa2:	07db      	lsls	r3, r3, #31
 800eaa4:	d5f3      	bpl.n	800ea8e <ip4_input+0x96>
 800eaa6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d0ef      	beq.n	800ea8e <ip4_input+0x96>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eaae:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eab2:	4649      	mov	r1, r9
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eab4:	4283      	cmp	r3, r0
 800eab6:	d1e7      	bne.n	800ea88 <ip4_input+0x90>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800eab8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eabc:	b300      	cbz	r0, 800eb00 <ip4_input+0x108>
 800eabe:	e011      	b.n	800eae4 <ip4_input+0xec>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eac0:	6872      	ldr	r2, [r6, #4]
 800eac2:	2a00      	cmp	r2, #0
 800eac4:	d0d5      	beq.n	800ea72 <ip4_input+0x7a>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f000 8097 	beq.w	800ebfa <ip4_input+0x202>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eacc:	4618      	mov	r0, r3
 800eace:	4631      	mov	r1, r6
 800ead0:	f000 f9a2 	bl	800ee18 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 80a0 	bne.w	800ec1a <ip4_input+0x222>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eada:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eade:	e7c8      	b.n	800ea72 <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800eae0:	f04f 0900 	mov.w	r9, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eae4:	4631      	mov	r1, r6
 800eae6:	f000 f997 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d1b4      	bne.n	800ea58 <ip4_input+0x60>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eaee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eaf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eaf6:	2be0      	cmp	r3, #224	@ 0xe0
 800eaf8:	d0ae      	beq.n	800ea58 <ip4_input+0x60>
  if (netif == NULL) {
 800eafa:	f1b9 0f00 	cmp.w	r9, #0
 800eafe:	d0ab      	beq.n	800ea58 <ip4_input+0x60>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eb00:	88fb      	ldrh	r3, [r7, #6]
 800eb02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800eb06:	b133      	cbz	r3, 800eb16 <ip4_input+0x11e>
    p = ip4_reass(p);
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f000 fb51 	bl	800f1b0 <ip4_reass>
    if (p == NULL) {
 800eb0e:	4604      	mov	r4, r0
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d0a4      	beq.n	800ea5e <ip4_input+0x66>
    iphdr = (const struct ip_hdr *)p->payload;
 800eb14:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800eb16:	f8c8 7008 	str.w	r7, [r8, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800eb1e:	e9c8 9600 	strd	r9, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800eb22:	783b      	ldrb	r3, [r7, #0]
 800eb24:	f003 030f 	and.w	r3, r3, #15
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eb2e:	f001 fcaf 	bl	8010490 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800eb32:	7a7b      	ldrb	r3, [r7, #9]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	2b10      	cmp	r3, #16
 800eb38:	d80a      	bhi.n	800eb50 <ip4_input+0x158>
 800eb3a:	e8df f003 	tbb	[pc, r3]
 800eb3e:	393f      	.short	0x393f
 800eb40:	44090909 	.word	0x44090909
 800eb44:	09090909 	.word	0x09090909
 800eb48:	09090909 	.word	0x09090909
 800eb4c:	0909      	.short	0x0909
 800eb4e:	34          	.byte	0x34
 800eb4f:	00          	.byte	0x00
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb50:	4649      	mov	r1, r9
 800eb52:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800eb56:	f000 f95f 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 800eb5a:	b968      	cbnz	r0, 800eb78 <ip4_input+0x180>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eb5c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eb60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb64:	2be0      	cmp	r3, #224	@ 0xe0
 800eb66:	d007      	beq.n	800eb78 <ip4_input+0x180>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f001 fcbe 	bl	80104ec <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eb70:	2102      	movs	r1, #2
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7ff fbf8 	bl	800e368 <icmp_dest_unreach>
        pbuf_free(p);
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f001 fceb 	bl	8010554 <pbuf_free>
  ip_data.current_netif = NULL;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	2000      	movs	r0, #0
  ip_data.current_netif = NULL;
 800eb82:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800eb86:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eb8a:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eb8e:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 800eb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800eb96:	197b      	adds	r3, r7, r5
 800eb98:	885b      	ldrh	r3, [r3, #2]
 800eb9a:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800eb9e:	f47f af59 	bne.w	800ea54 <ip4_input+0x5c>
      netif = inp;
 800eba2:	46b1      	mov	r9, r6
 800eba4:	e7ac      	b.n	800eb00 <ip4_input+0x108>
        udp_input(p, inp);
 800eba6:	4631      	mov	r1, r6
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f006 f9d3 	bl	8014f54 <udp_input>
        break;
 800ebae:	e7e6      	b.n	800eb7e <ip4_input+0x186>
        igmp_input(p, inp, ip4_current_dest_addr());
 800ebb0:	4a1e      	ldr	r2, [pc, #120]	@ (800ec2c <ip4_input+0x234>)
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f7ff fd0b 	bl	800e5d0 <igmp_input>
        break;
 800ebba:	e7e0      	b.n	800eb7e <ip4_input+0x186>
        icmp_input(p, inp);
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7ff fb2e 	bl	800e220 <icmp_input>
        break;
 800ebc4:	e7db      	b.n	800eb7e <ip4_input+0x186>
        tcp_input(p, inp);
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f004 f8d5 	bl	8012d78 <tcp_input>
        break;
 800ebce:	e7d6      	b.n	800eb7e <ip4_input+0x186>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ebd0:	7a7b      	ldrb	r3, [r7, #9]
 800ebd2:	2b11      	cmp	r3, #17
 800ebd4:	d01a      	beq.n	800ec0c <ip4_input+0x214>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ebd6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	f43f af3c 	beq.w	800ea58 <ip4_input+0x60>
 800ebe0:	e77e      	b.n	800eae0 <ip4_input+0xe8>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800ebe2:	f108 0114 	add.w	r1, r8, #20
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7ff fce8 	bl	800e5bc <igmp_lookfor_group>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d0ef      	beq.n	800ebd0 <ip4_input+0x1d8>
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800ebf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ec30 <ip4_input+0x238>)
          ip4_addr_isany(ip4_current_src_addr())) {
 800ebf2:	e9d8 0204 	ldrd	r0, r2, [r8, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d004      	beq.n	800ec04 <ip4_input+0x20c>
 800ebfa:	46b1      	mov	r9, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	f43f af7f 	beq.w	800eb00 <ip4_input+0x108>
 800ec02:	e76f      	b.n	800eae4 <ip4_input+0xec>
  if (check_ip_src
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d0cc      	beq.n	800eba2 <ip4_input+0x1aa>
      netif = inp;
 800ec08:	46b1      	mov	r9, r6
 800ec0a:	e76b      	b.n	800eae4 <ip4_input+0xec>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ec0c:	197b      	adds	r3, r7, r5
 800ec0e:	885b      	ldrh	r3, [r3, #2]
 800ec10:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800ec14:	d1df      	bne.n	800ebd6 <ip4_input+0x1de>
      netif = inp;
 800ec16:	46b1      	mov	r9, r6
 800ec18:	e772      	b.n	800eb00 <ip4_input+0x108>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ec1a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ec1e:	46b1      	mov	r9, r6
 800ec20:	2800      	cmp	r0, #0
 800ec22:	f43f af6d 	beq.w	800eb00 <ip4_input+0x108>
 800ec26:	e75d      	b.n	800eae4 <ip4_input+0xec>
 800ec28:	20010168 	.word	0x20010168
 800ec2c:	20009028 	.word	0x20009028
 800ec30:	010000e0 	.word	0x010000e0
 800ec34:	20009014 	.word	0x20009014

0800ec38 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 800ec38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec3e:	7b83      	ldrb	r3, [r0, #14]
{
 800ec40:	b085      	sub	sp, #20
 800ec42:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec44:	2b01      	cmp	r3, #1
{
 800ec46:	460e      	mov	r6, r1
 800ec48:	4615      	mov	r5, r2
 800ec4a:	f89d 8038 	ldrb.w	r8, [sp, #56]	@ 0x38
 800ec4e:	f89d b03c 	ldrb.w	fp, [sp, #60]	@ 0x3c
 800ec52:	f8bd 7048 	ldrh.w	r7, [sp, #72]	@ 0x48
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec56:	d11e      	bne.n	800ec96 <ip4_output_if_opt_src+0x5e>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ec58:	b335      	cbz	r5, 800eca8 <ip4_output_if_opt_src+0x70>
    u16_t ip_hlen = IP_HLEN;
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
    if (optlen != 0) {
 800ec5a:	b36f      	cbz	r7, 800ecb8 <ip4_output_if_opt_src+0x80>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 800ec5c:	2f28      	cmp	r7, #40	@ 0x28
 800ec5e:	f200 8089 	bhi.w	800ed74 <ip4_output_if_opt_src+0x13c>
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 800ec62:	f107 0903 	add.w	r9, r7, #3
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 800ec66:	4620      	mov	r0, r4
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 800ec68:	f029 0903 	bic.w	r9, r9, #3
 800ec6c:	fa1f f989 	uxth.w	r9, r9
      if (pbuf_add_header(p, optlen_aligned)) {
 800ec70:	4649      	mov	r1, r9
 800ec72:	f001 fbdd 	bl	8010430 <pbuf_add_header>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d179      	bne.n	800ed6e <ip4_output_if_opt_src+0x136>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
      }
      MEMCPY(p->payload, ip_options, optlen);
 800ec7a:	9001      	str	r0, [sp, #4]
 800ec7c:	463a      	mov	r2, r7
 800ec7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ec80:	6860      	ldr	r0, [r4, #4]
 800ec82:	f007 fe48 	bl	8016916 <memcpy>
      if (optlen < optlen_aligned) {
 800ec86:	454f      	cmp	r7, r9
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	d362      	bcc.n	800ed52 <ip4_output_if_opt_src+0x11a>
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 800ec8c:	f109 0914 	add.w	r9, r9, #20
 800ec90:	fa1f f989 	uxth.w	r9, r9
 800ec94:	e012      	b.n	800ecbc <ip4_output_if_opt_src+0x84>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec96:	4b39      	ldr	r3, [pc, #228]	@ (800ed7c <ip4_output_if_opt_src+0x144>)
 800ec98:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ec9c:	4938      	ldr	r1, [pc, #224]	@ (800ed80 <ip4_output_if_opt_src+0x148>)
 800ec9e:	4839      	ldr	r0, [pc, #228]	@ (800ed84 <ip4_output_if_opt_src+0x14c>)
 800eca0:	f007 fc0c 	bl	80164bc <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	d1d8      	bne.n	800ec5a <ip4_output_if_opt_src+0x22>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eca8:	8963      	ldrh	r3, [r4, #10]
 800ecaa:	2b13      	cmp	r3, #19
 800ecac:	d95f      	bls.n	800ed6e <ip4_output_if_opt_src+0x136>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ecae:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800ecb0:	ad03      	add	r5, sp, #12
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	9303      	str	r3, [sp, #12]
    dest = &dest_addr;
 800ecb6:	e032      	b.n	800ed1e <ip4_output_if_opt_src+0xe6>
    u16_t ip_hlen = IP_HLEN;
 800ecb8:	f04f 0914 	mov.w	r9, #20
    if (pbuf_add_header(p, IP_HLEN)) {
 800ecbc:	2114      	movs	r1, #20
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f001 fbb6 	bl	8010430 <pbuf_add_header>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d152      	bne.n	800ed6e <ip4_output_if_opt_src+0x136>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ecc8:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800ecca:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eccc:	2b13      	cmp	r3, #19
 800ecce:	d935      	bls.n	800ed3c <ip4_output_if_opt_src+0x104>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ecd0:	ea4f 0999 	mov.w	r9, r9, lsr #2
    IPH_TTL_SET(iphdr, ttl);
 800ecd4:	f887 a008 	strb.w	sl, [r7, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ecd8:	f887 b009 	strb.w	fp, [r7, #9]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ecdc:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
    ip4_addr_copy(iphdr->dest, *dest);
 800ece0:	682b      	ldr	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800ece2:	f887 8001 	strb.w	r8, [r7, #1]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ece6:	f887 9000 	strb.w	r9, [r7]
    ip4_addr_copy(iphdr->dest, *dest);
 800ecea:	613b      	str	r3, [r7, #16]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ecec:	8920      	ldrh	r0, [r4, #8]
 800ecee:	f000 fda1 	bl	800f834 <lwip_htons>
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ecf2:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 800ed90 <ip4_output_if_opt_src+0x158>
    IPH_OFFSET_SET(iphdr, 0);
 800ecf6:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ecf8:	8078      	strh	r0, [r7, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ecfa:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800ecfe:	71bb      	strb	r3, [r7, #6]
 800ed00:	71fb      	strb	r3, [r7, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ed02:	f000 fd97 	bl	800f834 <lwip_htons>
    ++ip_id;
 800ed06:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ed0a:	80b8      	strh	r0, [r7, #4]
    ++ip_id;
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 800ed12:	b1de      	cbz	r6, 800ed4c <ip4_output_if_opt_src+0x114>
      ip4_addr_copy(iphdr->src, *src);
 800ed14:	6833      	ldr	r3, [r6, #0]
 800ed16:	60fb      	str	r3, [r7, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800ed18:	2300      	movs	r3, #0
 800ed1a:	72bb      	strb	r3, [r7, #10]
 800ed1c:	72fb      	strb	r3, [r7, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ed1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ed22:	b113      	cbz	r3, 800ed2a <ip4_output_if_opt_src+0xf2>
 800ed24:	8922      	ldrh	r2, [r4, #8]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d81b      	bhi.n	800ed62 <ip4_output_if_opt_src+0x12a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ed2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	4621      	mov	r1, r4
 800ed30:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ed32:	695b      	ldr	r3, [r3, #20]
 800ed34:	4798      	blx	r3
}
 800ed36:	b005      	add	sp, #20
 800ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ed3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed7c <ip4_output_if_opt_src+0x144>)
 800ed3e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ed42:	4911      	ldr	r1, [pc, #68]	@ (800ed88 <ip4_output_if_opt_src+0x150>)
 800ed44:	480f      	ldr	r0, [pc, #60]	@ (800ed84 <ip4_output_if_opt_src+0x14c>)
 800ed46:	f007 fbb9 	bl	80164bc <iprintf>
 800ed4a:	e7c1      	b.n	800ecd0 <ip4_output_if_opt_src+0x98>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ed4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed8c <ip4_output_if_opt_src+0x154>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	e7e1      	b.n	800ed16 <ip4_output_if_opt_src+0xde>
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 800ed52:	6860      	ldr	r0, [r4, #4]
 800ed54:	4619      	mov	r1, r3
 800ed56:	eba9 0207 	sub.w	r2, r9, r7
 800ed5a:	4438      	add	r0, r7
 800ed5c:	f007 fd40 	bl	80167e0 <memset>
 800ed60:	e794      	b.n	800ec8c <ip4_output_if_opt_src+0x54>
    return ip4_frag(p, netif, dest);
 800ed62:	462a      	mov	r2, r5
 800ed64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ed66:	4620      	mov	r0, r4
 800ed68:	f000 fc5e 	bl	800f628 <ip4_frag>
 800ed6c:	e7e3      	b.n	800ed36 <ip4_output_if_opt_src+0xfe>
        return ERR_BUF;
 800ed6e:	f06f 0001 	mvn.w	r0, #1
 800ed72:	e7e0      	b.n	800ed36 <ip4_output_if_opt_src+0xfe>
        return ERR_VAL;
 800ed74:	f06f 0005 	mvn.w	r0, #5
 800ed78:	e7dd      	b.n	800ed36 <ip4_output_if_opt_src+0xfe>
 800ed7a:	bf00      	nop
 800ed7c:	0801a660 	.word	0x0801a660
 800ed80:	0801a6d8 	.word	0x0801a6d8
 800ed84:	080187f8 	.word	0x080187f8
 800ed88:	0801a6e4 	.word	0x0801a6e4
 800ed8c:	0801a7a0 	.word	0x0801a7a0
 800ed90:	2000900c 	.word	0x2000900c

0800ed94 <ip4_output_if_opt>:
{
 800ed94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed96:	469e      	mov	lr, r3
 800ed98:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800ed9c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800eda0:	f8bd c024 	ldrh.w	ip, [sp, #36]	@ 0x24
 800eda4:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
  if (dest != LWIP_IP_HDRINCL) {
 800eda8:	b11a      	cbz	r2, 800edb2 <ip4_output_if_opt+0x1e>
    if (ip4_addr_isany(src)) {
 800edaa:	b109      	cbz	r1, 800edb0 <ip4_output_if_opt+0x1c>
 800edac:	680b      	ldr	r3, [r1, #0]
 800edae:	b903      	cbnz	r3, 800edb2 <ip4_output_if_opt+0x1e>
      src_used = netif_ip4_addr(netif);
 800edb0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 800edb2:	4673      	mov	r3, lr
 800edb4:	9505      	str	r5, [sp, #20]
 800edb6:	e9cd 7c08 	strd	r7, ip, [sp, #32]
 800edba:	e9cd 6406 	strd	r6, r4, [sp, #24]
}
 800edbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 800edc2:	f7ff bf39 	b.w	800ec38 <ip4_output_if_opt_src>
 800edc6:	bf00      	nop

0800edc8 <ip4_output_if_src>:
{
 800edc8:	b510      	push	{r4, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	f89d 4020 	ldrb.w	r4, [sp, #32]
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800edd0:	9400      	str	r4, [sp, #0]
 800edd2:	2400      	movs	r4, #0
 800edd4:	e9cd 4403 	strd	r4, r4, [sp, #12]
{
 800edd8:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800eddc:	9401      	str	r4, [sp, #4]
{
 800edde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800ede0:	9402      	str	r4, [sp, #8]
 800ede2:	f7ff ff29 	bl	800ec38 <ip4_output_if_opt_src>
}
 800ede6:	b006      	add	sp, #24
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	bf00      	nop

0800edec <ip4_output_if>:
{
 800edec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edee:	b087      	sub	sp, #28
 800edf0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 800edf4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 800edf8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  if (dest != LWIP_IP_HDRINCL) {
 800edfa:	b11a      	cbz	r2, 800ee04 <ip4_output_if+0x18>
    if (ip4_addr_isany(src)) {
 800edfc:	b109      	cbz	r1, 800ee02 <ip4_output_if+0x16>
 800edfe:	680f      	ldr	r7, [r1, #0]
 800ee00:	b907      	cbnz	r7, 800ee04 <ip4_output_if+0x18>
      src_used = netif_ip4_addr(netif);
 800ee02:	1d21      	adds	r1, r4, #4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 800ee04:	9500      	str	r5, [sp, #0]
 800ee06:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800ee0a:	2400      	movs	r4, #0
 800ee0c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800ee10:	f7ff ff12 	bl	800ec38 <ip4_output_if_opt_src>
}
 800ee14:	b007      	add	sp, #28
 800ee16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee18 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ee18:	1e42      	subs	r2, r0, #1
{
 800ee1a:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 800ee1c:	3203      	adds	r2, #3
 800ee1e:	d815      	bhi.n	800ee4c <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ee20:	f891 0035 	ldrb.w	r0, [r1, #53]	@ 0x35
 800ee24:	f010 0002 	ands.w	r0, r0, #2
 800ee28:	d00f      	beq.n	800ee4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ee2a:	684a      	ldr	r2, [r1, #4]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d00b      	beq.n	800ee48 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ee30:	6889      	ldr	r1, [r1, #8]
 800ee32:	405a      	eors	r2, r3
 800ee34:	420a      	tst	r2, r1
 800ee36:	d107      	bne.n	800ee48 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee38:	43c8      	mvns	r0, r1
 800ee3a:	ea23 0301 	bic.w	r3, r3, r1
 800ee3e:	1a18      	subs	r0, r3, r0
 800ee40:	fab0 f080 	clz	r0, r0
 800ee44:	0940      	lsrs	r0, r0, #5
 800ee46:	4770      	bx	lr
    return 0;
 800ee48:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800ee4a:	4770      	bx	lr
    return 1;
 800ee4c:	2001      	movs	r0, #1
 800ee4e:	4770      	bx	lr

0800ee50 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800ee50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800ee54:	4e4a      	ldr	r6, [pc, #296]	@ (800ef80 <ip4addr_aton+0x130>)
{
 800ee56:	b084      	sub	sp, #16
  c = *cp;
 800ee58:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 800ee5a:	5cf2      	ldrb	r2, [r6, r3]
 800ee5c:	0752      	lsls	r2, r2, #29
 800ee5e:	d532      	bpl.n	800eec6 <ip4addr_aton+0x76>
  u32_t *pp = parts;
 800ee60:	46e9      	mov	r9, sp
 800ee62:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800ee64:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 800ee68:	464f      	mov	r7, r9
    if (c == '0') {
 800ee6a:	2b30      	cmp	r3, #48	@ 0x30
 800ee6c:	d02f      	beq.n	800eece <ip4addr_aton+0x7e>
    base = 10;
 800ee6e:	210a      	movs	r1, #10
 800ee70:	3001      	adds	r0, #1
        base = 8;
 800ee72:	2400      	movs	r4, #0
 800ee74:	e003      	b.n	800ee7e <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 800ee76:	f1ae 0430 	sub.w	r4, lr, #48	@ 0x30
        c = *++cp;
 800ee7a:	7803      	ldrb	r3, [r0, #0]
 800ee7c:	3001      	adds	r0, #1
      if (lwip_isdigit(c)) {
 800ee7e:	5cf2      	ldrb	r2, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800ee80:	f103 0c0a 	add.w	ip, r3, #10
        val = (val * base) + (u32_t)(c - '0');
 800ee84:	fb04 3e01 	mla	lr, r4, r1, r3
      if (lwip_isdigit(c)) {
 800ee88:	f012 0f04 	tst.w	r2, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800ee8c:	f002 0a03 	and.w	sl, r2, #3
      if (lwip_isdigit(c)) {
 800ee90:	d1f1      	bne.n	800ee76 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800ee92:	2910      	cmp	r1, #16
 800ee94:	d10d      	bne.n	800eeb2 <ip4addr_aton+0x62>
 800ee96:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800ee9a:	d00a      	beq.n	800eeb2 <ip4addr_aton+0x62>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800ee9c:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 800eea0:	7803      	ldrb	r3, [r0, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800eea2:	bf14      	ite	ne
 800eea4:	2241      	movne	r2, #65	@ 0x41
 800eea6:	2261      	moveq	r2, #97	@ 0x61
 800eea8:	ebac 0c02 	sub.w	ip, ip, r2
 800eeac:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
        c = *++cp;
 800eeb0:	e7e4      	b.n	800ee7c <ip4addr_aton+0x2c>
    if (c == '.') {
 800eeb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eeb4:	d117      	bne.n	800eee6 <ip4addr_aton+0x96>
      if (pp >= parts + 3) {
 800eeb6:	4547      	cmp	r7, r8
 800eeb8:	d005      	beq.n	800eec6 <ip4addr_aton+0x76>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 800eeba:	7803      	ldrb	r3, [r0, #0]
      *pp++ = val;
 800eebc:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 800eec0:	5cf2      	ldrb	r2, [r6, r3]
 800eec2:	0752      	lsls	r2, r2, #29
 800eec4:	d4d1      	bmi.n	800ee6a <ip4addr_aton+0x1a>
      return 0;
 800eec6:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 800eec8:	b004      	add	sp, #16
 800eeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 800eece:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800eed0:	f003 02df 	and.w	r2, r3, #223	@ 0xdf
 800eed4:	2a58      	cmp	r2, #88	@ 0x58
 800eed6:	d002      	beq.n	800eede <ip4addr_aton+0x8e>
      c = *++cp;
 800eed8:	3001      	adds	r0, #1
        base = 8;
 800eeda:	2108      	movs	r1, #8
 800eedc:	e7c8      	b.n	800ee70 <ip4addr_aton+0x20>
        c = *++cp;
 800eede:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 800eee0:	2110      	movs	r1, #16
        c = *++cp;
 800eee2:	3002      	adds	r0, #2
 800eee4:	e7c4      	b.n	800ee70 <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 800eee6:	b10b      	cbz	r3, 800eeec <ip4addr_aton+0x9c>
 800eee8:	0713      	lsls	r3, r2, #28
 800eeea:	d5ec      	bpl.n	800eec6 <ip4addr_aton+0x76>
  switch (pp - parts + 1) {
 800eeec:	eba7 0309 	sub.w	r3, r7, r9
 800eef0:	109b      	asrs	r3, r3, #2
 800eef2:	3301      	adds	r3, #1
 800eef4:	2b04      	cmp	r3, #4
 800eef6:	d83c      	bhi.n	800ef72 <ip4addr_aton+0x122>
 800eef8:	a201      	add	r2, pc, #4	@ (adr r2, 800ef00 <ip4addr_aton+0xb0>)
 800eefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefe:	bf00      	nop
 800ef00:	0800eec7 	.word	0x0800eec7
 800ef04:	0800ef25 	.word	0x0800ef25
 800ef08:	0800ef15 	.word	0x0800ef15
 800ef0c:	0800ef57 	.word	0x0800ef57
 800ef10:	0800ef33 	.word	0x0800ef33
      if (val > 0xffffffUL) {
 800ef14:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 800ef18:	d2d5      	bcs.n	800eec6 <ip4addr_aton+0x76>
      if (parts[0] > 0xff) {
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	2bff      	cmp	r3, #255	@ 0xff
 800ef1e:	d8d2      	bhi.n	800eec6 <ip4addr_aton+0x76>
      val |= parts[0] << 24;
 800ef20:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 800ef24:	b11d      	cbz	r5, 800ef2e <ip4addr_aton+0xde>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 fc88 	bl	800f83c <lwip_htonl>
 800ef2c:	6028      	str	r0, [r5, #0]
  return 1;
 800ef2e:	2001      	movs	r0, #1
 800ef30:	e7ca      	b.n	800eec8 <ip4addr_aton+0x78>
      if (val > 0xff) {
 800ef32:	2cff      	cmp	r4, #255	@ 0xff
 800ef34:	d8c7      	bhi.n	800eec6 <ip4addr_aton+0x76>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800ef36:	9900      	ldr	r1, [sp, #0]
 800ef38:	29ff      	cmp	r1, #255	@ 0xff
 800ef3a:	d8c4      	bhi.n	800eec6 <ip4addr_aton+0x76>
 800ef3c:	9b01      	ldr	r3, [sp, #4]
 800ef3e:	2bff      	cmp	r3, #255	@ 0xff
 800ef40:	d8c1      	bhi.n	800eec6 <ip4addr_aton+0x76>
 800ef42:	9a02      	ldr	r2, [sp, #8]
 800ef44:	2aff      	cmp	r2, #255	@ 0xff
 800ef46:	d8be      	bhi.n	800eec6 <ip4addr_aton+0x76>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800ef48:	041b      	lsls	r3, r3, #16
 800ef4a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ef4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef52:	431c      	orrs	r4, r3
      break;
 800ef54:	e7e6      	b.n	800ef24 <ip4addr_aton+0xd4>
      if (val > 0xffff) {
 800ef56:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800ef5a:	d2b4      	bcs.n	800eec6 <ip4addr_aton+0x76>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800ef5c:	9a00      	ldr	r2, [sp, #0]
 800ef5e:	2aff      	cmp	r2, #255	@ 0xff
 800ef60:	d8b1      	bhi.n	800eec6 <ip4addr_aton+0x76>
 800ef62:	9b01      	ldr	r3, [sp, #4]
 800ef64:	2bff      	cmp	r3, #255	@ 0xff
 800ef66:	d8ae      	bhi.n	800eec6 <ip4addr_aton+0x76>
      val |= (parts[0] << 24) | (parts[1] << 16);
 800ef68:	041b      	lsls	r3, r3, #16
 800ef6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef6e:	431c      	orrs	r4, r3
      break;
 800ef70:	e7d8      	b.n	800ef24 <ip4addr_aton+0xd4>
      LWIP_ASSERT("unhandled", 0);
 800ef72:	4b04      	ldr	r3, [pc, #16]	@ (800ef84 <ip4addr_aton+0x134>)
 800ef74:	22f9      	movs	r2, #249	@ 0xf9
 800ef76:	4904      	ldr	r1, [pc, #16]	@ (800ef88 <ip4addr_aton+0x138>)
 800ef78:	4804      	ldr	r0, [pc, #16]	@ (800ef8c <ip4addr_aton+0x13c>)
 800ef7a:	f007 fa9f 	bl	80164bc <iprintf>
      break;
 800ef7e:	e7d1      	b.n	800ef24 <ip4addr_aton+0xd4>
 800ef80:	0802cb25 	.word	0x0802cb25
 800ef84:	0801a714 	.word	0x0801a714
 800ef88:	0801a790 	.word	0x0801a790
 800ef8c:	080187f8 	.word	0x080187f8

0800ef90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ef90:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ef92:	4604      	mov	r4, r0
 800ef94:	b148      	cbz	r0, 800efaa <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ef96:	69e0      	ldr	r0, [r4, #28]
 800ef98:	b108      	cbz	r0, 800ef9e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ef9a:	f001 fadb 	bl	8010554 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800ef9e:	4621      	mov	r1, r4
 800efa0:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800efa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800efa6:	f000 bfef 	b.w	800ff88 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800efaa:	4b04      	ldr	r3, [pc, #16]	@ (800efbc <ipfrag_free_pbuf_custom+0x2c>)
 800efac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800efb0:	4903      	ldr	r1, [pc, #12]	@ (800efc0 <ipfrag_free_pbuf_custom+0x30>)
 800efb2:	4804      	ldr	r0, [pc, #16]	@ (800efc4 <ipfrag_free_pbuf_custom+0x34>)
 800efb4:	f007 fa82 	bl	80164bc <iprintf>
 800efb8:	e7ed      	b.n	800ef96 <ipfrag_free_pbuf_custom+0x6>
 800efba:	bf00      	nop
 800efbc:	0801a7a4 	.word	0x0801a7a4
 800efc0:	0801a820 	.word	0x0801a820
 800efc4:	080187f8 	.word	0x080187f8

0800efc8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800efc8:	4281      	cmp	r1, r0
{
 800efca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efce:	4606      	mov	r6, r0
 800efd0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800efd2:	d076      	beq.n	800f0c2 <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 800efd4:	b147      	cbz	r7, 800efe8 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	42b3      	cmp	r3, r6
 800efda:	d005      	beq.n	800efe8 <ip_reass_free_complete_datagram+0x20>
 800efdc:	4b40      	ldr	r3, [pc, #256]	@ (800f0e0 <ip_reass_free_complete_datagram+0x118>)
 800efde:	22ad      	movs	r2, #173	@ 0xad
 800efe0:	4940      	ldr	r1, [pc, #256]	@ (800f0e4 <ip_reass_free_complete_datagram+0x11c>)
 800efe2:	4841      	ldr	r0, [pc, #260]	@ (800f0e8 <ip_reass_free_complete_datagram+0x120>)
 800efe4:	f007 fa6a 	bl	80164bc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800efe8:	6874      	ldr	r4, [r6, #4]
 800efea:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800efec:	889a      	ldrh	r2, [r3, #4]
 800efee:	2a00      	cmp	r2, #0
 800eff0:	d046      	beq.n	800f080 <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 800eff2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eff6:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800f0e0 <ip_reass_free_complete_datagram+0x118>
 800effa:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800f100 <ip_reass_free_complete_datagram+0x138>
 800effe:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 800f0e8 <ip_reass_free_complete_datagram+0x120>
 800f002:	e003      	b.n	800f00c <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 800f004:	4628      	mov	r0, r5
 800f006:	f001 faa5 	bl	8010554 <pbuf_free>
  while (p != NULL) {
 800f00a:	b1b4      	cbz	r4, 800f03a <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 800f00c:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800f00e:	4620      	mov	r0, r4
 800f010:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 800f012:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800f014:	f001 fc2c 	bl	8010870 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f018:	4458      	add	r0, fp
 800f01a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f01e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f022:	dbef      	blt.n	800f004 <ip_reass_free_complete_datagram+0x3c>
 800f024:	4653      	mov	r3, sl
 800f026:	22cc      	movs	r2, #204	@ 0xcc
 800f028:	4649      	mov	r1, r9
 800f02a:	4640      	mov	r0, r8
 800f02c:	f007 fa46 	bl	80164bc <iprintf>
    pbuf_free(pcur);
 800f030:	4628      	mov	r0, r5
 800f032:	f001 fa8f 	bl	8010554 <pbuf_free>
  while (p != NULL) {
 800f036:	2c00      	cmp	r4, #0
 800f038:	d1e8      	bne.n	800f00c <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 800f03a:	4b2c      	ldr	r3, [pc, #176]	@ (800f0ec <ip_reass_free_complete_datagram+0x124>)
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	4296      	cmp	r6, r2
 800f040:	d03c      	beq.n	800f0bc <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f042:	2f00      	cmp	r7, #0
 800f044:	d044      	beq.n	800f0d0 <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 800f046:	6833      	ldr	r3, [r6, #0]
 800f048:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f04a:	4c29      	ldr	r4, [pc, #164]	@ (800f0f0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800f04c:	4631      	mov	r1, r6
 800f04e:	2004      	movs	r0, #4
 800f050:	f000 ff9a 	bl	800ff88 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f054:	8823      	ldrh	r3, [r4, #0]
 800f056:	455b      	cmp	r3, fp
 800f058:	d305      	bcc.n	800f066 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f05a:	eba3 030b 	sub.w	r3, r3, fp
}
 800f05e:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f060:	8023      	strh	r3, [r4, #0]
}
 800f062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f066:	4b1e      	ldr	r3, [pc, #120]	@ (800f0e0 <ip_reass_free_complete_datagram+0x118>)
 800f068:	22d2      	movs	r2, #210	@ 0xd2
 800f06a:	4922      	ldr	r1, [pc, #136]	@ (800f0f4 <ip_reass_free_complete_datagram+0x12c>)
 800f06c:	481e      	ldr	r0, [pc, #120]	@ (800f0e8 <ip_reass_free_complete_datagram+0x120>)
 800f06e:	f007 fa25 	bl	80164bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f072:	8823      	ldrh	r3, [r4, #0]
}
 800f074:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f076:	eba3 030b 	sub.w	r3, r3, fp
 800f07a:	8023      	strh	r3, [r4, #0]
}
 800f07c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800f080:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f082:	6930      	ldr	r0, [r6, #16]
 800f084:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800f086:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f088:	68f5      	ldr	r5, [r6, #12]
 800f08a:	68b2      	ldr	r2, [r6, #8]
 800f08c:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f08e:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f090:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f092:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	605d      	str	r5, [r3, #4]
 800f098:	69b2      	ldr	r2, [r6, #24]
 800f09a:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f09c:	f7ff f968 	bl	800e370 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f001 fbe5 	bl	8010870 <pbuf_clen>
 800f0a6:	4683      	mov	fp, r0
    pbuf_free(p);
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f001 fa53 	bl	8010554 <pbuf_free>
  p = ipr->p;
 800f0ae:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 800f0b0:	2c00      	cmp	r4, #0
 800f0b2:	d1a0      	bne.n	800eff6 <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 800f0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ec <ip_reass_free_complete_datagram+0x124>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	4296      	cmp	r6, r2
 800f0ba:	d1c2      	bne.n	800f042 <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 800f0bc:	6832      	ldr	r2, [r6, #0]
 800f0be:	601a      	str	r2, [r3, #0]
 800f0c0:	e7c3      	b.n	800f04a <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f0c2:	4b07      	ldr	r3, [pc, #28]	@ (800f0e0 <ip_reass_free_complete_datagram+0x118>)
 800f0c4:	22ab      	movs	r2, #171	@ 0xab
 800f0c6:	490c      	ldr	r1, [pc, #48]	@ (800f0f8 <ip_reass_free_complete_datagram+0x130>)
 800f0c8:	4807      	ldr	r0, [pc, #28]	@ (800f0e8 <ip_reass_free_complete_datagram+0x120>)
 800f0ca:	f007 f9f7 	bl	80164bc <iprintf>
 800f0ce:	e781      	b.n	800efd4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f0d0:	4b03      	ldr	r3, [pc, #12]	@ (800f0e0 <ip_reass_free_complete_datagram+0x118>)
 800f0d2:	f240 1245 	movw	r2, #325	@ 0x145
 800f0d6:	4909      	ldr	r1, [pc, #36]	@ (800f0fc <ip_reass_free_complete_datagram+0x134>)
 800f0d8:	4803      	ldr	r0, [pc, #12]	@ (800f0e8 <ip_reass_free_complete_datagram+0x120>)
 800f0da:	f007 f9ef 	bl	80164bc <iprintf>
 800f0de:	e7b2      	b.n	800f046 <ip_reass_free_complete_datagram+0x7e>
 800f0e0:	0801a7a4 	.word	0x0801a7a4
 800f0e4:	0801a838 	.word	0x0801a838
 800f0e8:	080187f8 	.word	0x080187f8
 800f0ec:	20009010 	.word	0x20009010
 800f0f0:	2000900e 	.word	0x2000900e
 800f0f4:	0801a888 	.word	0x0801a888
 800f0f8:	0801a82c 	.word	0x0801a82c
 800f0fc:	0801a86c 	.word	0x0801a86c
 800f100:	0801a84c 	.word	0x0801a84c

0800f104 <ip_reass_remove_oldest_datagram>:
{
 800f104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800f108:	2700      	movs	r7, #0
 800f10a:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 800f17c <ip_reass_remove_oldest_datagram+0x78>
{
 800f10e:	4605      	mov	r5, r0
 800f110:	460e      	mov	r6, r1
    r = reassdatagrams;
 800f112:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800f116:	b1f3      	cbz	r3, 800f156 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800f118:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f11a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800f11e:	4621      	mov	r1, r4
    prev = NULL;
 800f120:	46a4      	mov	ip, r4
    oldest = NULL;
 800f122:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f124:	695a      	ldr	r2, [r3, #20]
 800f126:	4572      	cmp	r2, lr
 800f128:	d018      	beq.n	800f15c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800f12a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f12c:	b318      	cbz	r0, 800f176 <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 800f12e:	7fc2      	ldrb	r2, [r0, #31]
 800f130:	f893 901f 	ldrb.w	r9, [r3, #31]
 800f134:	4591      	cmp	r9, r2
 800f136:	bf9c      	itt	ls
 800f138:	4661      	movls	r1, ip
 800f13a:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	469c      	mov	ip, r3
 800f140:	4613      	mov	r3, r2
 800f142:	2a00      	cmp	r2, #0
 800f144:	d1ee      	bne.n	800f124 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800f146:	b110      	cbz	r0, 800f14e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f148:	f7ff ff3e 	bl	800efc8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800f14c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f14e:	42b7      	cmp	r7, r6
 800f150:	da01      	bge.n	800f156 <ip_reass_remove_oldest_datagram+0x52>
 800f152:	2c01      	cmp	r4, #1
 800f154:	dcdd      	bgt.n	800f112 <ip_reass_remove_oldest_datagram+0xe>
}
 800f156:	4638      	mov	r0, r7
 800f158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f15c:	699a      	ldr	r2, [r3, #24]
 800f15e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f162:	454a      	cmp	r2, r9
 800f164:	d1e1      	bne.n	800f12a <ip_reass_remove_oldest_datagram+0x26>
 800f166:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800f16a:	88aa      	ldrh	r2, [r5, #4]
 800f16c:	4591      	cmp	r9, r2
 800f16e:	d0e5      	beq.n	800f13c <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 800f170:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f172:	2800      	cmp	r0, #0
 800f174:	d1db      	bne.n	800f12e <ip_reass_remove_oldest_datagram+0x2a>
 800f176:	4661      	mov	r1, ip
 800f178:	4618      	mov	r0, r3
 800f17a:	e7df      	b.n	800f13c <ip_reass_remove_oldest_datagram+0x38>
 800f17c:	20009010 	.word	0x20009010

0800f180 <ip_reass_tmr>:
{
 800f180:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800f182:	4b0a      	ldr	r3, [pc, #40]	@ (800f1ac <ip_reass_tmr+0x2c>)
 800f184:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 800f186:	b14c      	cbz	r4, 800f19c <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 800f188:	2500      	movs	r5, #0
    if (r->timer > 0) {
 800f18a:	7fe3      	ldrb	r3, [r4, #31]
 800f18c:	4620      	mov	r0, r4
      r = r->next;
 800f18e:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 800f190:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800f192:	b123      	cbz	r3, 800f19e <ip_reass_tmr+0x1e>
 800f194:	4605      	mov	r5, r0
      r->timer--;
 800f196:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 800f198:	2c00      	cmp	r4, #0
 800f19a:	d1f6      	bne.n	800f18a <ip_reass_tmr+0xa>
}
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 800f19e:	4629      	mov	r1, r5
 800f1a0:	f7ff ff12 	bl	800efc8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f1a4:	2c00      	cmp	r4, #0
 800f1a6:	d1f0      	bne.n	800f18a <ip_reass_tmr+0xa>
 800f1a8:	e7f8      	b.n	800f19c <ip_reass_tmr+0x1c>
 800f1aa:	bf00      	nop
 800f1ac:	20009010 	.word	0x20009010

0800f1b0 <ip4_reass>:
{
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800f1b4:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 800f1b8:	b085      	sub	sp, #20
 800f1ba:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f1bc:	f899 3000 	ldrb.w	r3, [r9]
 800f1c0:	f003 030f 	and.w	r3, r3, #15
 800f1c4:	2b05      	cmp	r3, #5
 800f1c6:	f040 8089 	bne.w	800f2dc <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1ca:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f1ce:	f000 fb31 	bl	800f834 <lwip_htons>
 800f1d2:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f1d4:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f1d8:	f000 fb2c 	bl	800f834 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f1dc:	f899 3000 	ldrb.w	r3, [r9]
 800f1e0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f1e4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f1e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f1ec:	d376      	bcc.n	800f2dc <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800f1ee:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f1f0:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 800f504 <ip4_reass+0x354>
  clen = pbuf_clen(p);
 800f1f4:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800f1fa:	f001 fb39 	bl	8010870 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f1fe:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800f202:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f204:	4403      	add	r3, r0
 800f206:	2b0a      	cmp	r3, #10
 800f208:	f300 80e7 	bgt.w	800f3da <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f20c:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 800f508 <ip4_reass+0x358>
 800f210:	f8da 4000 	ldr.w	r4, [sl]
 800f214:	2c00      	cmp	r4, #0
 800f216:	f000 80ee 	beq.w	800f3f6 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f21a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f21e:	e003      	b.n	800f228 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f220:	6824      	ldr	r4, [r4, #0]
 800f222:	2c00      	cmp	r4, #0
 800f224:	f000 80e7 	beq.w	800f3f6 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f228:	6963      	ldr	r3, [r4, #20]
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d1f8      	bne.n	800f220 <ip4_reass+0x70>
 800f22e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f232:	69a1      	ldr	r1, [r4, #24]
 800f234:	4299      	cmp	r1, r3
 800f236:	d1f3      	bne.n	800f220 <ip4_reass+0x70>
 800f238:	89a1      	ldrh	r1, [r4, #12]
 800f23a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800f23e:	4299      	cmp	r1, r3
 800f240:	d1ee      	bne.n	800f220 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f242:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f246:	f000 faf5 	bl	800f834 <lwip_htons>
 800f24a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f24e:	2800      	cmp	r0, #0
 800f250:	f000 80ab 	beq.w	800f3aa <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f254:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f258:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800f25c:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f260:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800f264:	9302      	str	r3, [sp, #8]
 800f266:	d108      	bne.n	800f27a <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	18f3      	adds	r3, r6, r3
 800f26c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f26e:	429e      	cmp	r6, r3
 800f270:	d812      	bhi.n	800f298 <ip4_reass+0xe8>
 800f272:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f276:	4293      	cmp	r3, r2
 800f278:	d80e      	bhi.n	800f298 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f27a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f27e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f282:	f000 fad7 	bl	800f834 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f286:	f899 3000 	ldrb.w	r3, [r9]
 800f28a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f28e:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f292:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f296:	d229      	bcs.n	800f2ec <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800f298:	6866      	ldr	r6, [r4, #4]
 800f29a:	b9fe      	cbnz	r6, 800f2dc <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f29c:	f8da 3000 	ldr.w	r3, [sl]
 800f2a0:	42a3      	cmp	r3, r4
 800f2a2:	d014      	beq.n	800f2ce <ip4_reass+0x11e>
 800f2a4:	4b93      	ldr	r3, [pc, #588]	@ (800f4f4 <ip4_reass+0x344>)
 800f2a6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f2aa:	4993      	ldr	r1, [pc, #588]	@ (800f4f8 <ip4_reass+0x348>)
 800f2ac:	4893      	ldr	r0, [pc, #588]	@ (800f4fc <ip4_reass+0x34c>)
 800f2ae:	f007 f905 	bl	80164bc <iprintf>
  if (reassdatagrams == ipr) {
 800f2b2:	f8da 3000 	ldr.w	r3, [sl]
 800f2b6:	429c      	cmp	r4, r3
 800f2b8:	d009      	beq.n	800f2ce <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f2ba:	4b8e      	ldr	r3, [pc, #568]	@ (800f4f4 <ip4_reass+0x344>)
 800f2bc:	f240 1245 	movw	r2, #325	@ 0x145
 800f2c0:	498f      	ldr	r1, [pc, #572]	@ (800f500 <ip4_reass+0x350>)
 800f2c2:	488e      	ldr	r0, [pc, #568]	@ (800f4fc <ip4_reass+0x34c>)
 800f2c4:	f007 f8fa 	bl	80164bc <iprintf>
    prev->next = ipr->next;
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	6033      	str	r3, [r6, #0]
 800f2cc:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 800f2ce:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800f2d4:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800f2d8:	f000 fe56 	bl	800ff88 <memp_free>
  pbuf_free(p);
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f001 f939 	bl	8010554 <pbuf_free>
  return NULL;
 800f2e2:	2600      	movs	r6, #0
}
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	b005      	add	sp, #20
 800f2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800f2ec:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f2ee:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 800f2f2:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f2f6:	f000 fa9d 	bl	800f834 <lwip_htons>
 800f2fa:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800f2fe:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 800f300:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f304:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 800f308:	f8a9 3006 	strh.w	r3, [r9, #6]
 800f30c:	b29b      	uxth	r3, r3
  iprh->start = offset;
 800f30e:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 800f312:	4619      	mov	r1, r3
 800f314:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800f316:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800f318:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800f31a:	f889 3000 	strb.w	r3, [r9]
 800f31e:	f889 3001 	strb.w	r3, [r9, #1]
 800f322:	f889 3002 	strb.w	r3, [r9, #2]
 800f326:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 800f32a:	d8b5      	bhi.n	800f298 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800f32c:	6861      	ldr	r1, [r4, #4]
 800f32e:	2900      	cmp	r1, #0
 800f330:	f000 80d4 	beq.w	800f4dc <ip4_reass+0x32c>
  int valid = 1;
 800f334:	f04f 0b01 	mov.w	fp, #1
 800f338:	4694      	mov	ip, r2
 800f33a:	e00e      	b.n	800f35a <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 800f33c:	d0ce      	beq.n	800f2dc <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800f33e:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800f342:	45f4      	cmp	ip, lr
 800f344:	d3ca      	bcc.n	800f2dc <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800f346:	b122      	cbz	r2, 800f352 <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 800f348:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800f34a:	4282      	cmp	r2, r0
 800f34c:	bf18      	it	ne
 800f34e:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 800f352:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800f354:	2900      	cmp	r1, #0
 800f356:	f000 80a6 	beq.w	800f4a6 <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f35a:	461a      	mov	r2, r3
 800f35c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800f35e:	8898      	ldrh	r0, [r3, #4]
 800f360:	4584      	cmp	ip, r0
 800f362:	d2eb      	bcs.n	800f33c <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 800f364:	4613      	mov	r3, r2
 800f366:	f8c9 1000 	str.w	r1, [r9]
 800f36a:	4662      	mov	r2, ip
 800f36c:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d064      	beq.n	800f43c <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	429a      	cmp	r2, r3
 800f376:	d3b1      	bcc.n	800f2dc <ip4_reass+0x12c>
 800f378:	9903      	ldr	r1, [sp, #12]
 800f37a:	4281      	cmp	r1, r0
 800f37c:	d8ae      	bhi.n	800f2dc <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800f37e:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800f380:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800f384:	d05f      	beq.n	800f446 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f386:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f38a:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f38c:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f38e:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f390:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f392:	2900      	cmp	r1, #0
 800f394:	f000 80ab 	beq.w	800f4ee <ip4_reass+0x33e>
 800f398:	07d9      	lsls	r1, r3, #31
 800f39a:	f100 8122 	bmi.w	800f5e2 <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f39e:	f8b8 3000 	ldrh.w	r3, [r8]
 800f3a2:	443b      	add	r3, r7
 800f3a4:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f3a8:	e79b      	b.n	800f2e2 <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f3aa:	89e0      	ldrh	r0, [r4, #14]
 800f3ac:	f000 fa42 	bl	800f834 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f3b0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	f43f af4d 	beq.w	800f254 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f3ba:	f8d9 3000 	ldr.w	r3, [r9]
 800f3be:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f3c2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f3c6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f3ca:	60a3      	str	r3, [r4, #8]
 800f3cc:	60e0      	str	r0, [r4, #12]
 800f3ce:	6121      	str	r1, [r4, #16]
 800f3d0:	6162      	str	r2, [r4, #20]
 800f3d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3d6:	61a3      	str	r3, [r4, #24]
 800f3d8:	e73c      	b.n	800f254 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3da:	4601      	mov	r1, r0
 800f3dc:	4648      	mov	r0, r9
 800f3de:	f7ff fe91 	bl	800f104 <ip_reass_remove_oldest_datagram>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	f43f af7a 	beq.w	800f2dc <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f3e8:	f8b8 3000 	ldrh.w	r3, [r8]
 800f3ec:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3ee:	2b0a      	cmp	r3, #10
 800f3f0:	f77f af0c 	ble.w	800f20c <ip4_reass+0x5c>
 800f3f4:	e772      	b.n	800f2dc <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3f6:	2004      	movs	r0, #4
 800f3f8:	f000 fd80 	bl	800fefc <memp_malloc>
  if (ipr == NULL) {
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	b178      	cbz	r0, 800f420 <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f400:	2300      	movs	r3, #0
 800f402:	61e3      	str	r3, [r4, #28]
 800f404:	60a3      	str	r3, [r4, #8]
 800f406:	60e3      	str	r3, [r4, #12]
 800f408:	6123      	str	r3, [r4, #16]
 800f40a:	6163      	str	r3, [r4, #20]
 800f40c:	61a3      	str	r3, [r4, #24]
 800f40e:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800f410:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 800f414:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 800f418:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800f41a:	230f      	movs	r3, #15
 800f41c:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f41e:	e7cc      	b.n	800f3ba <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f420:	4639      	mov	r1, r7
 800f422:	4648      	mov	r0, r9
 800f424:	f7ff fe6e 	bl	800f104 <ip_reass_remove_oldest_datagram>
 800f428:	4287      	cmp	r7, r0
 800f42a:	f73f af57 	bgt.w	800f2dc <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f42e:	2004      	movs	r0, #4
 800f430:	f000 fd64 	bl	800fefc <memp_malloc>
    if (ipr == NULL)
 800f434:	4604      	mov	r4, r0
 800f436:	2800      	cmp	r0, #0
 800f438:	d1e2      	bne.n	800f400 <ip4_reass+0x250>
 800f43a:	e74f      	b.n	800f2dc <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800f43c:	9b03      	ldr	r3, [sp, #12]
 800f43e:	4283      	cmp	r3, r0
 800f440:	f63f af4c 	bhi.w	800f2dc <ip4_reass+0x12c>
        ipr->p = new_p;
 800f444:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f446:	9b02      	ldr	r3, [sp, #8]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d03b      	beq.n	800f4c4 <ip4_reass+0x314>
 800f44c:	7fa3      	ldrb	r3, [r4, #30]
 800f44e:	07db      	lsls	r3, r3, #31
 800f450:	d5a5      	bpl.n	800f39e <ip4_reass+0x1ee>
    if (valid) {
 800f452:	f1bb 0f00 	cmp.w	fp, #0
 800f456:	d0a2      	beq.n	800f39e <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f458:	6862      	ldr	r2, [r4, #4]
 800f45a:	2a00      	cmp	r2, #0
 800f45c:	d09f      	beq.n	800f39e <ip4_reass+0x1ee>
 800f45e:	6851      	ldr	r1, [r2, #4]
 800f460:	888b      	ldrh	r3, [r1, #4]
 800f462:	b97b      	cbnz	r3, 800f484 <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 800f464:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f000 80bd 	beq.w	800f5e8 <ip4_reass+0x438>
 800f46e:	464a      	mov	r2, r9
 800f470:	e002      	b.n	800f478 <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 800f472:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800f474:	2b00      	cmp	r3, #0
 800f476:	d049      	beq.n	800f50c <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 800f478:	4610      	mov	r0, r2
 800f47a:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800f47c:	88c0      	ldrh	r0, [r0, #6]
 800f47e:	8893      	ldrh	r3, [r2, #4]
 800f480:	4298      	cmp	r0, r3
 800f482:	d0f6      	beq.n	800f472 <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f484:	f8b8 3000 	ldrh.w	r3, [r8]
 800f488:	443b      	add	r3, r7
 800f48a:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f48e:	9b02      	ldr	r3, [sp, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f47f af26 	bne.w	800f2e2 <ip4_reass+0x132>
 800f496:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800f498:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f49a:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800f49e:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4a0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800f4a2:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f4a4:	e71d      	b.n	800f2e2 <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 800f4a6:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800f4a8:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f4aa:	d0cc      	beq.n	800f446 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4ac:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4b0:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4b2:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4b4:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4b6:	b292      	uxth	r2, r2
 800f4b8:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4bc:	2900      	cmp	r1, #0
 800f4be:	f47f af10 	bne.w	800f2e2 <ip4_reass+0x132>
 800f4c2:	e7e9      	b.n	800f498 <ip4_reass+0x2e8>
    if (valid) {
 800f4c4:	f1bb 0f00 	cmp.w	fp, #0
 800f4c8:	d002      	beq.n	800f4d0 <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f4ca:	6862      	ldr	r2, [r4, #4]
 800f4cc:	2a00      	cmp	r2, #0
 800f4ce:	d1c6      	bne.n	800f45e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4d0:	f8b8 3000 	ldrh.w	r3, [r8]
 800f4d4:	443b      	add	r3, r7
 800f4d6:	f8a8 3000 	strh.w	r3, [r8]
 800f4da:	e7dc      	b.n	800f496 <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4dc:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 800f4de:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4e0:	b11b      	cbz	r3, 800f4ea <ip4_reass+0x33a>
 800f4e2:	7fa3      	ldrb	r3, [r4, #30]
 800f4e4:	07da      	lsls	r2, r3, #31
 800f4e6:	f57f af5a 	bpl.w	800f39e <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f4ea:	6862      	ldr	r2, [r4, #4]
 800f4ec:	e7b7      	b.n	800f45e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4ee:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 800f4f2:	e7d1      	b.n	800f498 <ip4_reass+0x2e8>
 800f4f4:	0801a7a4 	.word	0x0801a7a4
 800f4f8:	0801a8fc 	.word	0x0801a8fc
 800f4fc:	080187f8 	.word	0x080187f8
 800f500:	0801a86c 	.word	0x0801a86c
 800f504:	2000900e 	.word	0x2000900e
 800f508:	20009010 	.word	0x20009010
          LWIP_ASSERT("sanity check",
 800f50c:	4291      	cmp	r1, r2
 800f50e:	4691      	mov	r9, r2
 800f510:	d06c      	beq.n	800f5ec <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f512:	f8d9 3000 	ldr.w	r3, [r9]
 800f516:	b133      	cbz	r3, 800f526 <ip4_reass+0x376>
 800f518:	4b3d      	ldr	r3, [pc, #244]	@ (800f610 <ip4_reass+0x460>)
 800f51a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f51e:	493d      	ldr	r1, [pc, #244]	@ (800f614 <ip4_reass+0x464>)
 800f520:	483d      	ldr	r0, [pc, #244]	@ (800f618 <ip4_reass+0x468>)
 800f522:	f006 ffcb 	bl	80164bc <iprintf>
 800f526:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f528:	f8b8 3000 	ldrh.w	r3, [r8]
 800f52c:	443b      	add	r3, r7
 800f52e:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f532:	9b02      	ldr	r3, [sp, #8]
 800f534:	b933      	cbnz	r3, 800f544 <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 800f536:	9b01      	ldr	r3, [sp, #4]
 800f538:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f53a:	7fa3      	ldrb	r3, [r4, #30]
 800f53c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800f540:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f542:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f544:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f546:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f54c:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f54e:	6921      	ldr	r1, [r4, #16]
 800f550:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f552:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f554:	6075      	str	r5, [r6, #4]
 800f556:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f558:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f55a:	60f2      	str	r2, [r6, #12]
 800f55c:	6033      	str	r3, [r6, #0]
 800f55e:	69a3      	ldr	r3, [r4, #24]
 800f560:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f562:	f000 f967 	bl	800f834 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800f566:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f568:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f56a:	71b3      	strb	r3, [r6, #6]
 800f56c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f56e:	72b3      	strb	r3, [r6, #10]
 800f570:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800f572:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800f574:	b15d      	cbz	r5, 800f58e <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 800f576:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800f578:	4628      	mov	r0, r5
 800f57a:	2114      	movs	r1, #20
 800f57c:	f000 ff88 	bl	8010490 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f580:	4629      	mov	r1, r5
 800f582:	4630      	mov	r0, r6
 800f584:	f001 f99c 	bl	80108c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f588:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800f58a:	2d00      	cmp	r5, #0
 800f58c:	d1f3      	bne.n	800f576 <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 800f58e:	f8da 5000 	ldr.w	r5, [sl]
 800f592:	42a5      	cmp	r5, r4
 800f594:	d005      	beq.n	800f5a2 <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f596:	b38d      	cbz	r5, 800f5fc <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 800f598:	682b      	ldr	r3, [r5, #0]
 800f59a:	42a3      	cmp	r3, r4
 800f59c:	d014      	beq.n	800f5c8 <ip4_reass+0x418>
 800f59e:	461d      	mov	r5, r3
 800f5a0:	e7f9      	b.n	800f596 <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	2004      	movs	r0, #4
 800f5ac:	f000 fcec 	bl	800ff88 <memp_free>
    clen = pbuf_clen(p);
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f001 f95d 	bl	8010870 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f5b6:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800f5ba:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f5bc:	4283      	cmp	r3, r0
 800f5be:	d306      	bcc.n	800f5ce <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f5c0:	1b1b      	subs	r3, r3, r4
 800f5c2:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800f5c6:	e68d      	b.n	800f2e4 <ip4_reass+0x134>
    prev->next = ipr->next;
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	602b      	str	r3, [r5, #0]
 800f5cc:	e7ec      	b.n	800f5a8 <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f5ce:	4b10      	ldr	r3, [pc, #64]	@ (800f610 <ip4_reass+0x460>)
 800f5d0:	f240 229b 	movw	r2, #667	@ 0x29b
 800f5d4:	4911      	ldr	r1, [pc, #68]	@ (800f61c <ip4_reass+0x46c>)
 800f5d6:	4810      	ldr	r0, [pc, #64]	@ (800f618 <ip4_reass+0x468>)
 800f5d8:	f006 ff70 	bl	80164bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f5dc:	f8b8 3000 	ldrh.w	r3, [r8]
 800f5e0:	e7ee      	b.n	800f5c0 <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f5e2:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 800f5e6:	e67c      	b.n	800f2e2 <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 800f5e8:	4589      	cmp	r9, r1
 800f5ea:	d19d      	bne.n	800f528 <ip4_reass+0x378>
 800f5ec:	4b08      	ldr	r3, [pc, #32]	@ (800f610 <ip4_reass+0x460>)
 800f5ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f5f2:	490b      	ldr	r1, [pc, #44]	@ (800f620 <ip4_reass+0x470>)
 800f5f4:	4808      	ldr	r0, [pc, #32]	@ (800f618 <ip4_reass+0x468>)
 800f5f6:	f006 ff61 	bl	80164bc <iprintf>
 800f5fa:	e78a      	b.n	800f512 <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f5fc:	4b04      	ldr	r3, [pc, #16]	@ (800f610 <ip4_reass+0x460>)
 800f5fe:	f240 1245 	movw	r2, #325	@ 0x145
 800f602:	4908      	ldr	r1, [pc, #32]	@ (800f624 <ip4_reass+0x474>)
 800f604:	4804      	ldr	r0, [pc, #16]	@ (800f618 <ip4_reass+0x468>)
 800f606:	f006 ff59 	bl	80164bc <iprintf>
    prev->next = ipr->next;
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	602b      	str	r3, [r5, #0]
 800f60e:	deff      	udf	#255	@ 0xff
 800f610:	0801a7a4 	.word	0x0801a7a4
 800f614:	0801a8bc 	.word	0x0801a8bc
 800f618:	080187f8 	.word	0x080187f8
 800f61c:	0801a8e0 	.word	0x0801a8e0
 800f620:	0801a8ac 	.word	0x0801a8ac
 800f624:	0801a86c 	.word	0x0801a86c

0800f628 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f62c:	8d8b      	ldrh	r3, [r1, #44]	@ 0x2c
{
 800f62e:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f630:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800f634:	4681      	mov	r9, r0
 800f636:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f638:	f1b3 0114 	subs.w	r1, r3, #20
{
 800f63c:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f63e:	bf48      	it	mi
 800f640:	f1a3 010d 	submi.w	r1, r3, #13
 800f644:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 800f648:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f64a:	f89a 3000 	ldrb.w	r3, [sl]
 800f64e:	f003 030f 	and.w	r3, r3, #15
 800f652:	2b05      	cmp	r3, #5
 800f654:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800f658:	f040 80dd 	bne.w	800f816 <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f65c:	8943      	ldrh	r3, [r0, #10]
 800f65e:	2b13      	cmp	r3, #19
 800f660:	f240 80d2 	bls.w	800f808 <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f664:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800f668:	f000 f8e4 	bl	800f834 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f66c:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 800f670:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800f674:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 800f678:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 800f67a:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800f67e:	fa1f fc8c 	uxth.w	ip, ip
 800f682:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 800f684:	f1bc 0f00 	cmp.w	ip, #0
 800f688:	f000 80a1 	beq.w	800f7ce <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f68c:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 800f68e:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f690:	464d      	mov	r5, r9
 800f692:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f696:	00db      	lsls	r3, r3, #3
 800f698:	b29b      	uxth	r3, r3
 800f69a:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f69c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f6a0:	2114      	movs	r1, #20
 800f6a2:	200e      	movs	r0, #14
 800f6a4:	f000 ffc6 	bl	8010634 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f6a8:	9b08      	ldr	r3, [sp, #32]
 800f6aa:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 800f6ac:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	bf28      	it	cs
 800f6b2:	4613      	movcs	r3, r2
 800f6b4:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f000 8098 	beq.w	800f7ec <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f6bc:	8943      	ldrh	r3, [r0, #10]
 800f6be:	2b13      	cmp	r3, #19
 800f6c0:	f240 8097 	bls.w	800f7f2 <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f6c4:	f8da 2000 	ldr.w	r2, [sl]
 800f6c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6cc:	f8da 7004 	ldr.w	r7, [sl, #4]
 800f6d0:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f6d4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	605f      	str	r7, [r3, #4]
 800f6dc:	6098      	str	r0, [r3, #8]
 800f6de:	60d9      	str	r1, [r3, #12]
 800f6e0:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f6e4:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f6e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6ea:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 800f6ec:	f1b9 0f00 	cmp.w	r9, #0
 800f6f0:	d03c      	beq.n	800f76c <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 800f6f2:	896b      	ldrh	r3, [r5, #10]
 800f6f4:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f6f6:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 800f6f8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f6fa:	d206      	bcs.n	800f70a <ip4_frag+0xe2>
 800f6fc:	4b47      	ldr	r3, [pc, #284]	@ (800f81c <ip4_frag+0x1f4>)
 800f6fe:	f240 322d 	movw	r2, #813	@ 0x32d
 800f702:	4947      	ldr	r1, [pc, #284]	@ (800f820 <ip4_frag+0x1f8>)
 800f704:	4847      	ldr	r0, [pc, #284]	@ (800f824 <ip4_frag+0x1fc>)
 800f706:	f006 fed9 	bl	80164bc <iprintf>
  u16_t newpbuflen = 0;
 800f70a:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f70e:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f710:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f712:	429c      	cmp	r4, r3
 800f714:	bf28      	it	cs
 800f716:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f718:	2c00      	cmp	r4, #0
 800f71a:	d05c      	beq.n	800f7d6 <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f71c:	f000 fbee 	bl	800fefc <memp_malloc>
 800f720:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f722:	2241      	movs	r2, #65	@ 0x41
 800f724:	4621      	mov	r1, r4
 800f726:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800f728:	f1bb 0f00 	cmp.w	fp, #0
 800f72c:	d05b      	beq.n	800f7e6 <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f72e:	9401      	str	r4, [sp, #4]
 800f730:	465b      	mov	r3, fp
 800f732:	686f      	ldr	r7, [r5, #4]
 800f734:	eb07 0c06 	add.w	ip, r7, r6
 800f738:	f8cd c000 	str.w	ip, [sp]
 800f73c:	f000 fe58 	bl	80103f0 <pbuf_alloced_custom>
 800f740:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800f742:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 800f744:	2900      	cmp	r1, #0
 800f746:	d04a      	beq.n	800f7de <ip4_frag+0x1b6>
 800f748:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 800f74a:	f001 f89b 	bl	8010884 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f74e:	4b36      	ldr	r3, [pc, #216]	@ (800f828 <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f750:	4640      	mov	r0, r8
 800f752:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f754:	f8cb 3018 	str.w	r3, [fp, #24]
      pcr->original = p;
 800f758:	f8cb 501c 	str.w	r5, [fp, #28]
      pbuf_cat(rambuf, newpbuf);
 800f75c:	f001 f8b0 	bl	80108c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f760:	9b02      	ldr	r3, [sp, #8]
 800f762:	1b1f      	subs	r7, r3, r4
 800f764:	b2bb      	uxth	r3, r7
 800f766:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d134      	bne.n	800f7d6 <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f76c:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 800f76e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f770:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800f772:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
    poff = (u16_t)(poff + newpbuflen);
 800f774:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 800f776:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800f77a:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 800f77c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800f77e:	4293      	cmp	r3, r2
 800f780:	dd3f      	ble.n	800f802 <ip4_frag+0x1da>
 800f782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d13c      	bne.n	800f802 <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f788:	f000 f854 	bl	800f834 <lwip_htons>
 800f78c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f78e:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f790:	f109 0014 	add.w	r0, r9, #20
 800f794:	b280      	uxth	r0, r0
 800f796:	f000 f84d 	bl	800f834 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800f79a:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f79c:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f79e:	4641      	mov	r1, r8
 800f7a0:	9807      	ldr	r0, [sp, #28]
 800f7a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 800f7a4:	72bb      	strb	r3, [r7, #10]
 800f7a6:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 800f7a8:	6943      	ldr	r3, [r0, #20]
 800f7aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	f000 fed1 	bl	8010554 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f7b2:	9b04      	ldr	r3, [sp, #16]
 800f7b4:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 800f7b8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f7bc:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800f7be:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 800f7c2:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 800f7c4:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800f7c6:	9305      	str	r3, [sp, #20]
  while (left) {
 800f7c8:	2a00      	cmp	r2, #0
 800f7ca:	f47f af67 	bne.w	800f69c <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f7ce:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800f7d0:	b00d      	add	sp, #52	@ 0x34
 800f7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 800f7d6:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 800f7d8:	2600      	movs	r6, #0
 800f7da:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f7dc:	e797      	b.n	800f70e <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 800f7de:	4659      	mov	r1, fp
 800f7e0:	2005      	movs	r0, #5
 800f7e2:	f000 fbd1 	bl	800ff88 <memp_free>
        pbuf_free(rambuf);
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	f000 feb4 	bl	8010554 <pbuf_free>
  return ERR_MEM;
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	e7ee      	b.n	800f7d0 <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f81c <ip4_frag+0x1f4>)
 800f7f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f7f8:	490c      	ldr	r1, [pc, #48]	@ (800f82c <ip4_frag+0x204>)
 800f7fa:	480a      	ldr	r0, [pc, #40]	@ (800f824 <ip4_frag+0x1fc>)
 800f7fc:	f006 fe5e 	bl	80164bc <iprintf>
 800f800:	e760      	b.n	800f6c4 <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 800f802:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 800f806:	e7bf      	b.n	800f788 <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f808:	4b04      	ldr	r3, [pc, #16]	@ (800f81c <ip4_frag+0x1f4>)
 800f80a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f80e:	4908      	ldr	r1, [pc, #32]	@ (800f830 <ip4_frag+0x208>)
 800f810:	4804      	ldr	r0, [pc, #16]	@ (800f824 <ip4_frag+0x1fc>)
 800f812:	f006 fe53 	bl	80164bc <iprintf>
    return ERR_VAL;
 800f816:	f06f 0005 	mvn.w	r0, #5
 800f81a:	e7d9      	b.n	800f7d0 <ip4_frag+0x1a8>
 800f81c:	0801a7a4 	.word	0x0801a7a4
 800f820:	0801a958 	.word	0x0801a958
 800f824:	080187f8 	.word	0x080187f8
 800f828:	0800ef91 	.word	0x0800ef91
 800f82c:	0801a938 	.word	0x0801a938
 800f830:	0801a91c 	.word	0x0801a91c

0800f834 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800f834:	ba40      	rev16	r0, r0
}
 800f836:	b280      	uxth	r0, r0
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop

0800f83c <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800f83c:	ba00      	rev	r0, r0
 800f83e:	4770      	bx	lr

0800f840 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f840:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800f842:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 800f846:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f84a:	4571      	cmp	r1, lr
 800f84c:	dd05      	ble.n	800f85a <lwip_standard_chksum+0x1a>
 800f84e:	b125      	cbz	r5, 800f85a <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800f850:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 800f854:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800f856:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800f85a:	2901      	cmp	r1, #1
 800f85c:	dd27      	ble.n	800f8ae <lwip_standard_chksum+0x6e>
 800f85e:	3902      	subs	r1, #2
  u32_t sum = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	084c      	lsrs	r4, r1, #1
 800f864:	f104 0c01 	add.w	ip, r4, #1
 800f868:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800f86c:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800f870:	4584      	cmp	ip, r0
    sum += *ps++;
 800f872:	4413      	add	r3, r2
  while (len > 1) {
 800f874:	d1fa      	bne.n	800f86c <lwip_standard_chksum+0x2c>
    len -= 2;
 800f876:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800f87a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f87e:	2901      	cmp	r1, #1
 800f880:	d105      	bne.n	800f88e <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f882:	f89c 2000 	ldrb.w	r2, [ip]
 800f886:	f362 0e07 	bfi	lr, r2, #0, #8
 800f88a:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800f88e:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f890:	fa1f f38e 	uxth.w	r3, lr
 800f894:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 800f898:	b298      	uxth	r0, r3
 800f89a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800f89e:	b125      	cbz	r5, 800f8aa <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f8a0:	0203      	lsls	r3, r0, #8
 800f8a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800f8aa:	b280      	uxth	r0, r0
 800f8ac:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800f8ae:	4684      	mov	ip, r0
  u32_t sum = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	e7e4      	b.n	800f87e <lwip_standard_chksum+0x3e>

0800f8b4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f8b4:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f8b6:	f7ff ffc3 	bl	800f840 <lwip_standard_chksum>
 800f8ba:	43c0      	mvns	r0, r0
}
 800f8bc:	b280      	uxth	r0, r0
 800f8be:	bd08      	pop	{r3, pc}

0800f8c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f8c0:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f8c2:	f006 f853 	bl	801596c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f8c6:	f000 f80f 	bl	800f8e8 <mem_init>
  memp_init();
 800f8ca:	f000 fad5 	bl	800fe78 <memp_init>
  pbuf_init();
  netif_init();
 800f8ce:	f000 fbb7 	bl	8010040 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f8d2:	f005 fb33 	bl	8014f3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f8d6:	f001 fa47 	bl	8010d68 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800f8da:	f7fe fe1d 	bl	800e518 <igmp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800f8de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800f8e2:	f005 bac3 	b.w	8014e6c <sys_timeouts_init>
 800f8e6:	bf00      	nop

0800f8e8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f8e8:	4b11      	ldr	r3, [pc, #68]	@ (800f930 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800f8ea:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f8ee:	4811      	ldr	r0, [pc, #68]	@ (800f934 <mem_init+0x4c>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f8f0:	4a11      	ldr	r2, [pc, #68]	@ (800f938 <mem_init+0x50>)
{
 800f8f2:	b510      	push	{r4, lr}
  mem->used = 0;
 800f8f4:	2400      	movs	r4, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f8f6:	6003      	str	r3, [r0, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f8f8:	4810      	ldr	r0, [pc, #64]	@ (800f93c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 800f8fa:	6019      	str	r1, [r3, #0]
  mem->used = 0;
 800f8fc:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800f8fe:	f04f 2438 	mov.w	r4, #939538432	@ 0x38003800
 800f902:	490f      	ldr	r1, [pc, #60]	@ (800f940 <mem_init+0x58>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f904:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 800f906:	2001      	movs	r0, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800f908:	f8c1 4800 	str.w	r4, [r1, #2048]	@ 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f90c:	490d      	ldr	r1, [pc, #52]	@ (800f944 <mem_init+0x5c>)
  ram_end->used = 1;
 800f90e:	7110      	strb	r0, [r2, #4]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f910:	480d      	ldr	r0, [pc, #52]	@ (800f948 <mem_init+0x60>)
  lfree = (struct mem *)(void *)ram;
 800f912:	600b      	str	r3, [r1, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f914:	f006 f834 	bl	8015980 <sys_mutex_new>
 800f918:	b900      	cbnz	r0, 800f91c <mem_init+0x34>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f91a:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f91c:	4b0b      	ldr	r3, [pc, #44]	@ (800f94c <mem_init+0x64>)
 800f91e:	f240 221f 	movw	r2, #543	@ 0x21f
 800f922:	490b      	ldr	r1, [pc, #44]	@ (800f950 <mem_init+0x68>)
 800f924:	480b      	ldr	r0, [pc, #44]	@ (800f954 <mem_init+0x6c>)
}
 800f926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f92a:	f006 bdc7 	b.w	80164bc <iprintf>
 800f92e:	bf00      	nop
 800f930:	30004000 	.word	0x30004000
 800f934:	20009038 	.word	0x20009038
 800f938:	30007800 	.word	0x30007800
 800f93c:	20009034 	.word	0x20009034
 800f940:	30007000 	.word	0x30007000
 800f944:	2000902c 	.word	0x2000902c
 800f948:	20009030 	.word	0x20009030
 800f94c:	0801a968 	.word	0x0801a968
 800f950:	0801a9dc 	.word	0x0801a9dc
 800f954:	080187f8 	.word	0x080187f8

0800f958 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f958:	2800      	cmp	r0, #0
 800f95a:	f000 8097 	beq.w	800fa8c <mem_free+0x134>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f95e:	0783      	lsls	r3, r0, #30
{
 800f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f964:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f966:	f040 808c 	bne.w	800fa82 <mem_free+0x12a>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f96a:	4e60      	ldr	r6, [pc, #384]	@ (800faec <mem_free+0x194>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f96c:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f970:	6833      	ldr	r3, [r6, #0]
 800f972:	42ab      	cmp	r3, r5
 800f974:	d805      	bhi.n	800f982 <mem_free+0x2a>
 800f976:	4f5e      	ldr	r7, [pc, #376]	@ (800faf0 <mem_free+0x198>)
 800f978:	f100 030c 	add.w	r3, r0, #12
 800f97c:	683a      	ldr	r2, [r7, #0]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d20c      	bcs.n	800f99c <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f982:	4b5c      	ldr	r3, [pc, #368]	@ (800faf4 <mem_free+0x19c>)
 800f984:	f240 227f 	movw	r2, #639	@ 0x27f
 800f988:	495b      	ldr	r1, [pc, #364]	@ (800faf8 <mem_free+0x1a0>)
 800f98a:	485c      	ldr	r0, [pc, #368]	@ (800fafc <mem_free+0x1a4>)
 800f98c:	f006 fd96 	bl	80164bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f990:	f006 f822 	bl	80159d8 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800f998:	f006 b82a 	b.w	80159f0 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800f99c:	4858      	ldr	r0, [pc, #352]	@ (800fb00 <mem_free+0x1a8>)
 800f99e:	f005 fffb 	bl	8015998 <sys_mutex_lock>
  if (!mem->used) {
 800f9a2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 809b 	beq.w	800fae2 <mem_free+0x18a>
  pmem = ptr_to_mem(mem->prev);
 800f9ac:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (mem_size_t)((u8_t *)mem - ram);
 800f9b0:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f9b2:	f5b1 5f60 	cmp.w	r1, #14336	@ 0x3800
  nmem = ptr_to_mem(mem->next);
 800f9b6:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f9ba:	d809      	bhi.n	800f9d0 <mem_free+0x78>
 800f9bc:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800f9c0:	d806      	bhi.n	800f9d0 <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 800f9c2:	1aa8      	subs	r0, r5, r2
 800f9c4:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f9c6:	4288      	cmp	r0, r1
 800f9c8:	d012      	beq.n	800f9f0 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f9ca:	5a51      	ldrh	r1, [r2, r1]
 800f9cc:	4281      	cmp	r1, r0
 800f9ce:	d00f      	beq.n	800f9f0 <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f9d0:	4b48      	ldr	r3, [pc, #288]	@ (800faf4 <mem_free+0x19c>)
 800f9d2:	f240 2295 	movw	r2, #661	@ 0x295
 800f9d6:	494b      	ldr	r1, [pc, #300]	@ (800fb04 <mem_free+0x1ac>)
 800f9d8:	4848      	ldr	r0, [pc, #288]	@ (800fafc <mem_free+0x1a4>)
 800f9da:	f006 fd6f 	bl	80164bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f9de:	4848      	ldr	r0, [pc, #288]	@ (800fb00 <mem_free+0x1a8>)
 800f9e0:	f005 ffe0 	bl	80159a4 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800f9e4:	f005 fff8 	bl	80159d8 <sys_arch_protect>
}
 800f9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800f9ec:	f006 b800 	b.w	80159f0 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800f9f0:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f9f2:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f9f6:	4561      	cmp	r1, ip
 800f9f8:	d002      	beq.n	800fa00 <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f9fa:	8849      	ldrh	r1, [r1, #2]
 800f9fc:	4281      	cmp	r1, r0
 800f9fe:	d1e7      	bne.n	800f9d0 <mem_free+0x78>
  if (mem < lfree) {
 800fa00:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800fb20 <mem_free+0x1c8>
  mem->used = 0;
 800fa04:	2100      	movs	r1, #0
 800fa06:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800fa0a:	f8d8 1000 	ldr.w	r1, [r8]
 800fa0e:	42a9      	cmp	r1, r5
    lfree = mem;
 800fa10:	bf88      	it	hi
 800fa12:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fa16:	4295      	cmp	r5, r2
 800fa18:	d339      	bcc.n	800fa8e <mem_free+0x136>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fa1a:	4565      	cmp	r5, ip
 800fa1c:	d241      	bcs.n	800faa2 <mem_free+0x14a>
  return (struct mem *)(void *)&ram[ptr];
 800fa1e:	6832      	ldr	r2, [r6, #0]
 800fa20:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fa22:	429d      	cmp	r5, r3
 800fa24:	d013      	beq.n	800fa4e <mem_free+0xf6>
 800fa26:	7919      	ldrb	r1, [r3, #4]
 800fa28:	b989      	cbnz	r1, 800fa4e <mem_free+0xf6>
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	428b      	cmp	r3, r1
 800fa2e:	d00e      	beq.n	800fa4e <mem_free+0xf6>
    if (lfree == nmem) {
 800fa30:	f8d8 1000 	ldr.w	r1, [r8]
 800fa34:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800fa36:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 800fa38:	bf08      	it	eq
 800fa3a:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fa3e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
    mem->next = nmem->next;
 800fa42:	f824 3c08 	strh.w	r3, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fa46:	d002      	beq.n	800fa4e <mem_free+0xf6>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fa48:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800fa4a:	1aa9      	subs	r1, r5, r2
 800fa4c:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 800fa4e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800fa52:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800fa54:	429d      	cmp	r5, r3
 800fa56:	d00f      	beq.n	800fa78 <mem_free+0x120>
 800fa58:	7918      	ldrb	r0, [r3, #4]
 800fa5a:	b968      	cbnz	r0, 800fa78 <mem_free+0x120>
    if (lfree == mem) {
 800fa5c:	f8d8 0000 	ldr.w	r0, [r8]
 800fa60:	4285      	cmp	r5, r0
      lfree = pmem;
 800fa62:	bf08      	it	eq
 800fa64:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800fa68:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fa6c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
    pmem->next = mem->next;
 800fa70:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fa72:	d001      	beq.n	800fa78 <mem_free+0x120>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fa74:	441a      	add	r2, r3
 800fa76:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800fa78:	4821      	ldr	r0, [pc, #132]	@ (800fb00 <mem_free+0x1a8>)
}
 800fa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800fa7e:	f005 bf91 	b.w	80159a4 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fa82:	4b1c      	ldr	r3, [pc, #112]	@ (800faf4 <mem_free+0x19c>)
 800fa84:	f240 2273 	movw	r2, #627	@ 0x273
 800fa88:	491f      	ldr	r1, [pc, #124]	@ (800fb08 <mem_free+0x1b0>)
 800fa8a:	e77e      	b.n	800f98a <mem_free+0x32>
 800fa8c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fa8e:	4b19      	ldr	r3, [pc, #100]	@ (800faf4 <mem_free+0x19c>)
 800fa90:	f240 12df 	movw	r2, #479	@ 0x1df
 800fa94:	491d      	ldr	r1, [pc, #116]	@ (800fb0c <mem_free+0x1b4>)
 800fa96:	4819      	ldr	r0, [pc, #100]	@ (800fafc <mem_free+0x1a4>)
 800fa98:	f006 fd10 	bl	80164bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	429d      	cmp	r5, r3
 800faa0:	d306      	bcc.n	800fab0 <mem_free+0x158>
 800faa2:	4b14      	ldr	r3, [pc, #80]	@ (800faf4 <mem_free+0x19c>)
 800faa4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800faa8:	4919      	ldr	r1, [pc, #100]	@ (800fb10 <mem_free+0x1b8>)
 800faaa:	4814      	ldr	r0, [pc, #80]	@ (800fafc <mem_free+0x1a4>)
 800faac:	f006 fd06 	bl	80164bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fab0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800fab4:	b133      	cbz	r3, 800fac4 <mem_free+0x16c>
 800fab6:	4b0f      	ldr	r3, [pc, #60]	@ (800faf4 <mem_free+0x19c>)
 800fab8:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800fabc:	4915      	ldr	r1, [pc, #84]	@ (800fb14 <mem_free+0x1bc>)
 800fabe:	480f      	ldr	r0, [pc, #60]	@ (800fafc <mem_free+0x1a4>)
 800fac0:	f006 fcfc 	bl	80164bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fac4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800fac8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800facc:	d9a7      	bls.n	800fa1e <mem_free+0xc6>
 800face:	4b09      	ldr	r3, [pc, #36]	@ (800faf4 <mem_free+0x19c>)
 800fad0:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800fad4:	4910      	ldr	r1, [pc, #64]	@ (800fb18 <mem_free+0x1c0>)
 800fad6:	4809      	ldr	r0, [pc, #36]	@ (800fafc <mem_free+0x1a4>)
 800fad8:	f006 fcf0 	bl	80164bc <iprintf>
  nmem = ptr_to_mem(mem->next);
 800fadc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800fae0:	e79d      	b.n	800fa1e <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fae2:	4b04      	ldr	r3, [pc, #16]	@ (800faf4 <mem_free+0x19c>)
 800fae4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800fae8:	490c      	ldr	r1, [pc, #48]	@ (800fb1c <mem_free+0x1c4>)
 800faea:	e775      	b.n	800f9d8 <mem_free+0x80>
 800faec:	20009038 	.word	0x20009038
 800faf0:	20009034 	.word	0x20009034
 800faf4:	0801a968 	.word	0x0801a968
 800faf8:	0801aa1c 	.word	0x0801aa1c
 800fafc:	080187f8 	.word	0x080187f8
 800fb00:	20009030 	.word	0x20009030
 800fb04:	0801aa60 	.word	0x0801aa60
 800fb08:	0801a9f8 	.word	0x0801a9f8
 800fb0c:	0801aa94 	.word	0x0801aa94
 800fb10:	0801aaac 	.word	0x0801aaac
 800fb14:	0801aac8 	.word	0x0801aac8
 800fb18:	0801aae4 	.word	0x0801aae4
 800fb1c:	0801aa38 	.word	0x0801aa38
 800fb20:	2000902c 	.word	0x2000902c

0800fb24 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fb28:	1ccb      	adds	r3, r1, #3
 800fb2a:	f023 0303 	bic.w	r3, r3, #3
 800fb2e:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 800fb30:	2b0c      	cmp	r3, #12
 800fb32:	461d      	mov	r5, r3
 800fb34:	bf38      	it	cc
 800fb36:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fb38:	428d      	cmp	r5, r1
 800fb3a:	f0c0 8081 	bcc.w	800fc40 <mem_trim+0x11c>
 800fb3e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800fb42:	d87d      	bhi.n	800fc40 <mem_trim+0x11c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fb44:	4f4a      	ldr	r7, [pc, #296]	@ (800fc70 <mem_trim+0x14c>)
 800fb46:	4604      	mov	r4, r0
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	4283      	cmp	r3, r0
 800fb4c:	d83f      	bhi.n	800fbce <mem_trim+0xaa>
 800fb4e:	4a49      	ldr	r2, [pc, #292]	@ (800fc74 <mem_trim+0x150>)
 800fb50:	6812      	ldr	r2, [r2, #0]
 800fb52:	4282      	cmp	r2, r0
 800fb54:	d93b      	bls.n	800fbce <mem_trim+0xaa>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fb56:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fb5a:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800fb5e:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fb62:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800fb64:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fb68:	eba6 0608 	sub.w	r6, r6, r8
 800fb6c:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fb6e:	42b5      	cmp	r5, r6
 800fb70:	d85f      	bhi.n	800fc32 <mem_trim+0x10e>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800fb72:	d02a      	beq.n	800fbca <mem_trim+0xa6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fb74:	4840      	ldr	r0, [pc, #256]	@ (800fc78 <mem_trim+0x154>)
 800fb76:	f005 ff0f 	bl	8015998 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800fb7a:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800fb84:	f899 1004 	ldrb.w	r1, [r9, #4]
 800fb88:	2900      	cmp	r1, #0
 800fb8a:	d134      	bne.n	800fbf6 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fb8c:	f5b2 5f60 	cmp.w	r2, #14336	@ 0x3800
 800fb90:	d064      	beq.n	800fc5c <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb92:	3508      	adds	r5, #8
    if (lfree == mem2) {
 800fb94:	4939      	ldr	r1, [pc, #228]	@ (800fc7c <mem_trim+0x158>)
    next = mem2->next;
 800fb96:	f8b9 6000 	ldrh.w	r6, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb9a:	4445      	add	r5, r8
    if (lfree == mem2) {
 800fb9c:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb9e:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800fba0:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800fba2:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 800fba6:	bf08      	it	eq
 800fba8:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800fbaa:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 800fbac:	8016      	strh	r6, [r2, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fbae:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem2->used = 0;
 800fbb2:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fbb4:	f824 5c08 	strh.w	r5, [r4, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbb8:	8812      	ldrh	r2, [r2, #0]
 800fbba:	f5b2 5f60 	cmp.w	r2, #14336	@ 0x3800
 800fbbe:	d001      	beq.n	800fbc4 <mem_trim+0xa0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fbc0:	441a      	add	r2, r3
 800fbc2:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fbc4:	482c      	ldr	r0, [pc, #176]	@ (800fc78 <mem_trim+0x154>)
 800fbc6:	f005 feed 	bl	80159a4 <sys_mutex_unlock>
    return NULL;
 800fbca:	4620      	mov	r0, r4
 800fbcc:	e039      	b.n	800fc42 <mem_trim+0x11e>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fbce:	4b2c      	ldr	r3, [pc, #176]	@ (800fc80 <mem_trim+0x15c>)
 800fbd0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fbd4:	492b      	ldr	r1, [pc, #172]	@ (800fc84 <mem_trim+0x160>)
 800fbd6:	482c      	ldr	r0, [pc, #176]	@ (800fc88 <mem_trim+0x164>)
 800fbd8:	f006 fc70 	bl	80164bc <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	42a3      	cmp	r3, r4
 800fbe0:	d803      	bhi.n	800fbea <mem_trim+0xc6>
 800fbe2:	4a24      	ldr	r2, [pc, #144]	@ (800fc74 <mem_trim+0x150>)
 800fbe4:	6812      	ldr	r2, [r2, #0]
 800fbe6:	42a2      	cmp	r2, r4
 800fbe8:	d8b5      	bhi.n	800fb56 <mem_trim+0x32>
    MEM_STATS_INC_LOCKED(illegal);
 800fbea:	f005 fef5 	bl	80159d8 <sys_arch_protect>
 800fbee:	f005 feff 	bl	80159f0 <sys_arch_unprotect>
    return NULL;
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	e025      	b.n	800fc42 <mem_trim+0x11e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fbf6:	f105 0114 	add.w	r1, r5, #20
 800fbfa:	42b1      	cmp	r1, r6
 800fbfc:	d8e2      	bhi.n	800fbc4 <mem_trim+0xa0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fbfe:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fc00:	f5b2 5f60 	cmp.w	r2, #14336	@ 0x3800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fc04:	4445      	add	r5, r8
 800fc06:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fc08:	d01d      	beq.n	800fc46 <mem_trim+0x122>
  return (struct mem *)(void *)&ram[ptr];
 800fc0a:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800fc0c:	481b      	ldr	r0, [pc, #108]	@ (800fc7c <mem_trim+0x158>)
    mem2->next = mem->next;
 800fc0e:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 800fc10:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 800fc12:	6806      	ldr	r6, [r0, #0]
    mem2->used = 0;
 800fc14:	710a      	strb	r2, [r1, #4]
    if (mem2 < lfree) {
 800fc16:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 800fc18:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem->next = ptr2;
 800fc1c:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc20:	880a      	ldrh	r2, [r1, #0]
      lfree = mem2;
 800fc22:	bf88      	it	hi
 800fc24:	6001      	strhi	r1, [r0, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc26:	f5b2 5f60 	cmp.w	r2, #14336	@ 0x3800
 800fc2a:	d0cb      	beq.n	800fbc4 <mem_trim+0xa0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fc2c:	4413      	add	r3, r2
 800fc2e:	805d      	strh	r5, [r3, #2]
 800fc30:	e7c8      	b.n	800fbc4 <mem_trim+0xa0>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fc32:	4b13      	ldr	r3, [pc, #76]	@ (800fc80 <mem_trim+0x15c>)
 800fc34:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800fc38:	4914      	ldr	r1, [pc, #80]	@ (800fc8c <mem_trim+0x168>)
 800fc3a:	4813      	ldr	r0, [pc, #76]	@ (800fc88 <mem_trim+0x164>)
 800fc3c:	f006 fc3e 	bl	80164bc <iprintf>
    return NULL;
 800fc40:	2000      	movs	r0, #0
  return rmem;
}
 800fc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fc46:	4b0e      	ldr	r3, [pc, #56]	@ (800fc80 <mem_trim+0x15c>)
 800fc48:	f240 3216 	movw	r2, #790	@ 0x316
 800fc4c:	4910      	ldr	r1, [pc, #64]	@ (800fc90 <mem_trim+0x16c>)
 800fc4e:	480e      	ldr	r0, [pc, #56]	@ (800fc88 <mem_trim+0x164>)
 800fc50:	f006 fc34 	bl	80164bc <iprintf>
    mem2->next = mem->next;
 800fc54:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	e7d6      	b.n	800fc0a <mem_trim+0xe6>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fc5c:	4b08      	ldr	r3, [pc, #32]	@ (800fc80 <mem_trim+0x15c>)
 800fc5e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800fc62:	490b      	ldr	r1, [pc, #44]	@ (800fc90 <mem_trim+0x16c>)
 800fc64:	4808      	ldr	r0, [pc, #32]	@ (800fc88 <mem_trim+0x164>)
 800fc66:	f006 fc29 	bl	80164bc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	e791      	b.n	800fb92 <mem_trim+0x6e>
 800fc6e:	bf00      	nop
 800fc70:	20009038 	.word	0x20009038
 800fc74:	20009034 	.word	0x20009034
 800fc78:	20009030 	.word	0x20009030
 800fc7c:	2000902c 	.word	0x2000902c
 800fc80:	0801a968 	.word	0x0801a968
 800fc84:	0801ab10 	.word	0x0801ab10
 800fc88:	080187f8 	.word	0x080187f8
 800fc8c:	0801ab28 	.word	0x0801ab28
 800fc90:	0801ab48 	.word	0x0801ab48

0800fc94 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d069      	beq.n	800fd6c <mem_malloc+0xd8>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fc98:	1cc3      	adds	r3, r0, #3
 800fc9a:	f023 0303 	bic.w	r3, r3, #3
 800fc9e:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 800fca0:	2b0c      	cmp	r3, #12
{
 800fca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (size < MIN_SIZE_ALIGNED) {
 800fca6:	4698      	mov	r8, r3
 800fca8:	bf38      	it	cc
 800fcaa:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fcae:	4580      	cmp	r8, r0
 800fcb0:	d326      	bcc.n	800fd00 <mem_malloc+0x6c>
 800fcb2:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800fcb6:	d823      	bhi.n	800fd00 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcb8:	4f46      	ldr	r7, [pc, #280]	@ (800fdd4 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 800fcba:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 800fdf8 <mem_malloc+0x164>
  sys_mutex_lock(&mem_mutex);
 800fcbe:	4846      	ldr	r0, [pc, #280]	@ (800fdd8 <mem_malloc+0x144>)
 800fcc0:	f005 fe6a 	bl	8015998 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcc4:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 800fcc8:	f8da 0000 	ldr.w	r0, [sl]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fccc:	f5c8 5e60 	rsb	lr, r8, #14336	@ 0x3800
  return (mem_size_t)((u8_t *)mem - ram);
 800fcd0:	ebac 0300 	sub.w	r3, ip, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcd4:	b299      	uxth	r1, r3
 800fcd6:	4571      	cmp	r1, lr
  return (mem_size_t)((u8_t *)mem - ram);
 800fcd8:	460b      	mov	r3, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcda:	d20e      	bcs.n	800fcfa <mem_malloc+0x66>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcdc:	f06f 0907 	mvn.w	r9, #7
  return (struct mem *)(void *)&ram[ptr];
 800fce0:	1844      	adds	r4, r0, r1
      if ((!mem->used) &&
 800fce2:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fce4:	5a43      	ldrh	r3, [r0, r1]
 800fce6:	eba9 0201 	sub.w	r2, r9, r1
      if ((!mem->used) &&
 800fcea:	7926      	ldrb	r6, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcec:	4619      	mov	r1, r3
      if ((!mem->used) &&
 800fcee:	b916      	cbnz	r6, 800fcf6 <mem_malloc+0x62>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcf0:	441a      	add	r2, r3
      if ((!mem->used) &&
 800fcf2:	4542      	cmp	r2, r8
 800fcf4:	d207      	bcs.n	800fd06 <mem_malloc+0x72>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcf6:	459e      	cmp	lr, r3
 800fcf8:	d8f2      	bhi.n	800fce0 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fcfa:	4837      	ldr	r0, [pc, #220]	@ (800fdd8 <mem_malloc+0x144>)
 800fcfc:	f005 fe52 	bl	80159a4 <sys_mutex_unlock>
    return NULL;
 800fd00:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fd06:	f108 0114 	add.w	r1, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fd0a:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fd0e:	428a      	cmp	r2, r1
 800fd10:	d329      	bcc.n	800fd66 <mem_malloc+0xd2>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fd12:	eb05 0908 	add.w	r9, r5, r8
 800fd16:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fd1a:	f5b9 5f60 	cmp.w	r9, #14336	@ 0x3800
 800fd1e:	d04b      	beq.n	800fdb8 <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 800fd20:	eb00 0209 	add.w	r2, r0, r9
          mem2->used = 0;
 800fd24:	2100      	movs	r1, #0
 800fd26:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800fd28:	f820 3009 	strh.w	r3, [r0, r9]
          mem->used = 1;
 800fd2c:	2301      	movs	r3, #1
          mem2->prev = ptr;
 800fd2e:	8055      	strh	r5, [r2, #2]
          mem->next = ptr2;
 800fd30:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 800fd34:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd36:	f830 3009 	ldrh.w	r3, [r0, r9]
 800fd3a:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800fd3e:	d002      	beq.n	800fd46 <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fd40:	4418      	add	r0, r3
 800fd42:	f8a0 9002 	strh.w	r9, [r0, #2]
        if (mem == lfree) {
 800fd46:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 800fd48:	4d24      	ldr	r5, [pc, #144]	@ (800fddc <mem_malloc+0x148>)
        if (mem == lfree) {
 800fd4a:	d028      	beq.n	800fd9e <mem_malloc+0x10a>
        sys_mutex_unlock(&mem_mutex);
 800fd4c:	4822      	ldr	r0, [pc, #136]	@ (800fdd8 <mem_malloc+0x144>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd4e:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800fd50:	f005 fe28 	bl	80159a4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd54:	682b      	ldr	r3, [r5, #0]
 800fd56:	4543      	cmp	r3, r8
 800fd58:	d319      	bcc.n	800fd8e <mem_malloc+0xfa>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fd5a:	07a3      	lsls	r3, r4, #30
 800fd5c:	d108      	bne.n	800fd70 <mem_malloc+0xdc>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fd5e:	f104 0008 	add.w	r0, r4, #8
}
 800fd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 800fd66:	2301      	movs	r3, #1
 800fd68:	7123      	strb	r3, [r4, #4]
 800fd6a:	e7ec      	b.n	800fd46 <mem_malloc+0xb2>
    return NULL;
 800fd6c:	2000      	movs	r0, #0
}
 800fd6e:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fd70:	4b1b      	ldr	r3, [pc, #108]	@ (800fde0 <mem_malloc+0x14c>)
 800fd72:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800fd76:	491b      	ldr	r1, [pc, #108]	@ (800fde4 <mem_malloc+0x150>)
 800fd78:	481b      	ldr	r0, [pc, #108]	@ (800fde8 <mem_malloc+0x154>)
 800fd7a:	f006 fb9f 	bl	80164bc <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fd7e:	4b18      	ldr	r3, [pc, #96]	@ (800fde0 <mem_malloc+0x14c>)
 800fd80:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800fd84:	4919      	ldr	r1, [pc, #100]	@ (800fdec <mem_malloc+0x158>)
 800fd86:	4818      	ldr	r0, [pc, #96]	@ (800fde8 <mem_malloc+0x154>)
 800fd88:	f006 fb98 	bl	80164bc <iprintf>
 800fd8c:	e7e7      	b.n	800fd5e <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd8e:	4b14      	ldr	r3, [pc, #80]	@ (800fde0 <mem_malloc+0x14c>)
 800fd90:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800fd94:	4916      	ldr	r1, [pc, #88]	@ (800fdf0 <mem_malloc+0x15c>)
 800fd96:	4814      	ldr	r0, [pc, #80]	@ (800fde8 <mem_malloc+0x154>)
 800fd98:	f006 fb90 	bl	80164bc <iprintf>
 800fd9c:	e7dd      	b.n	800fd5a <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 800fd9e:	f8da 0000 	ldr.w	r0, [sl]
 800fda2:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800fda4:	6829      	ldr	r1, [r5, #0]
 800fda6:	e003      	b.n	800fdb0 <mem_malloc+0x11c>
  return (struct mem *)(void *)&ram[ptr];
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800fdac:	791a      	ldrb	r2, [r3, #4]
 800fdae:	b10a      	cbz	r2, 800fdb4 <mem_malloc+0x120>
 800fdb0:	4299      	cmp	r1, r3
 800fdb2:	d1f9      	bne.n	800fda8 <mem_malloc+0x114>
          lfree = cur;
 800fdb4:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fdb6:	e7c9      	b.n	800fd4c <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fdb8:	4b09      	ldr	r3, [pc, #36]	@ (800fde0 <mem_malloc+0x14c>)
 800fdba:	f240 3287 	movw	r2, #903	@ 0x387
 800fdbe:	490d      	ldr	r1, [pc, #52]	@ (800fdf4 <mem_malloc+0x160>)
 800fdc0:	4809      	ldr	r0, [pc, #36]	@ (800fde8 <mem_malloc+0x154>)
 800fdc2:	f006 fb7b 	bl	80164bc <iprintf>
          mem2->next = mem->next;
 800fdc6:	8823      	ldrh	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 800fdc8:	f8da 0000 	ldr.w	r0, [sl]
        if (mem == lfree) {
 800fdcc:	f8d7 c000 	ldr.w	ip, [r7]
 800fdd0:	e7a6      	b.n	800fd20 <mem_malloc+0x8c>
 800fdd2:	bf00      	nop
 800fdd4:	2000902c 	.word	0x2000902c
 800fdd8:	20009030 	.word	0x20009030
 800fddc:	20009034 	.word	0x20009034
 800fde0:	0801a968 	.word	0x0801a968
 800fde4:	0801ab8c 	.word	0x0801ab8c
 800fde8:	080187f8 	.word	0x080187f8
 800fdec:	0801abbc 	.word	0x0801abbc
 800fdf0:	0801ab5c 	.word	0x0801ab5c
 800fdf4:	0801ab48 	.word	0x0801ab48
 800fdf8:	20009038 	.word	0x20009038

0800fdfc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fe00:	f005 fdea 	bl	80159d8 <sys_arch_protect>

  memp = *desc->tab;
 800fe04:	68a3      	ldr	r3, [r4, #8]
 800fe06:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fe08:	b18c      	cbz	r4, 800fe2e <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	4605      	mov	r5, r0
 800fe0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fe10:	07a3      	lsls	r3, r4, #30
 800fe12:	d104      	bne.n	800fe1e <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fe14:	4628      	mov	r0, r5
 800fe16:	f005 fdeb 	bl	80159f0 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fe1e:	4b06      	ldr	r3, [pc, #24]	@ (800fe38 <do_memp_malloc_pool+0x3c>)
 800fe20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fe24:	4905      	ldr	r1, [pc, #20]	@ (800fe3c <do_memp_malloc_pool+0x40>)
 800fe26:	4806      	ldr	r0, [pc, #24]	@ (800fe40 <do_memp_malloc_pool+0x44>)
 800fe28:	f006 fb48 	bl	80164bc <iprintf>
 800fe2c:	e7f2      	b.n	800fe14 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800fe2e:	f005 fddf 	bl	80159f0 <sys_arch_unprotect>
}
 800fe32:	4620      	mov	r0, r4
 800fe34:	bd38      	pop	{r3, r4, r5, pc}
 800fe36:	bf00      	nop
 800fe38:	0801abe0 	.word	0x0801abe0
 800fe3c:	0801ac54 	.word	0x0801ac54
 800fe40:	080187f8 	.word	0x080187f8

0800fe44 <memp_init_pool>:
{
 800fe44:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800fe46:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800fe48:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800fe4a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800fe4e:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800fe50:	b17c      	cbz	r4, 800fe72 <memp_init_pool+0x2e>
 800fe52:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe54:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800fe58:	460a      	mov	r2, r1
 800fe5a:	f023 0303 	bic.w	r3, r3, #3
 800fe5e:	e000      	b.n	800fe62 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe60:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800fe62:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800fe64:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe66:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	42a2      	cmp	r2, r4
 800fe6e:	d1f7      	bne.n	800fe60 <memp_init_pool+0x1c>
 800fe70:	602b      	str	r3, [r5, #0]
}
 800fe72:	bc30      	pop	{r4, r5}
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop

0800fe78 <memp_init>:
{
 800fe78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe7a:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800fed0 <memp_init+0x58>
 800fe7e:	2404      	movs	r4, #4
 800fe80:	4b11      	ldr	r3, [pc, #68]	@ (800fec8 <memp_init+0x50>)
  *desc->tab = NULL;
 800fe82:	2600      	movs	r6, #0
{
 800fe84:	4d11      	ldr	r5, [pc, #68]	@ (800fecc <memp_init+0x54>)
 800fe86:	f10e 0738 	add.w	r7, lr, #56	@ 0x38
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe8a:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 800fe8c:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 800fe90:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe92:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800fe96:	b16c      	cbz	r4, 800feb4 <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe98:	2100      	movs	r1, #0
 800fe9a:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800fe9e:	460a      	mov	r2, r1
 800fea0:	e000      	b.n	800fea4 <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fea2:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800fea4:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800fea6:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fea8:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800feac:	4619      	mov	r1, r3
 800feae:	42a2      	cmp	r2, r4
 800feb0:	d1f7      	bne.n	800fea2 <memp_init+0x2a>
 800feb2:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800feb4:	4577      	cmp	r7, lr
 800feb6:	d005      	beq.n	800fec4 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 800feb8:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800febc:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800fec0:	8854      	ldrh	r4, [r2, #2]
 800fec2:	e7e2      	b.n	800fe8a <memp_init+0x12>
}
 800fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec6:	bf00      	nop
 800fec8:	200100c0 	.word	0x200100c0
 800fecc:	200100bc 	.word	0x200100bc
 800fed0:	0801ace8 	.word	0x0801ace8

0800fed4 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fed4:	b108      	cbz	r0, 800feda <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fed6:	f7ff bf91 	b.w	800fdfc <do_memp_malloc_pool>
{
 800feda:	b510      	push	{r4, lr}
 800fedc:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fede:	4b04      	ldr	r3, [pc, #16]	@ (800fef0 <memp_malloc_pool+0x1c>)
 800fee0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800fee4:	4903      	ldr	r1, [pc, #12]	@ (800fef4 <memp_malloc_pool+0x20>)
 800fee6:	4804      	ldr	r0, [pc, #16]	@ (800fef8 <memp_malloc_pool+0x24>)
 800fee8:	f006 fae8 	bl	80164bc <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800feec:	4620      	mov	r0, r4
 800feee:	bd10      	pop	{r4, pc}
 800fef0:	0801abe0 	.word	0x0801abe0
 800fef4:	0801ac78 	.word	0x0801ac78
 800fef8:	080187f8 	.word	0x080187f8

0800fefc <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fefc:	280d      	cmp	r0, #13
{
 800fefe:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff00:	d806      	bhi.n	800ff10 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff02:	4b08      	ldr	r3, [pc, #32]	@ (800ff24 <memp_malloc+0x28>)
 800ff04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800ff08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff0c:	f7ff bf76 	b.w	800fdfc <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff10:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <memp_malloc+0x2c>)
 800ff12:	f240 1257 	movw	r2, #343	@ 0x157
 800ff16:	4905      	ldr	r1, [pc, #20]	@ (800ff2c <memp_malloc+0x30>)
 800ff18:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <memp_malloc+0x34>)
 800ff1a:	f006 facf 	bl	80164bc <iprintf>
}
 800ff1e:	2000      	movs	r0, #0
 800ff20:	bd08      	pop	{r3, pc}
 800ff22:	bf00      	nop
 800ff24:	0801ace8 	.word	0x0801ace8
 800ff28:	0801abe0 	.word	0x0801abe0
 800ff2c:	0801ac8c 	.word	0x0801ac8c
 800ff30:	080187f8 	.word	0x080187f8

0800ff34 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff34:	b1c0      	cbz	r0, 800ff68 <memp_free_pool+0x34>
{
 800ff36:	b570      	push	{r4, r5, r6, lr}
 800ff38:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800ff3a:	b161      	cbz	r1, 800ff56 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ff3c:	078b      	lsls	r3, r1, #30
 800ff3e:	4605      	mov	r5, r0
 800ff40:	d10a      	bne.n	800ff58 <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 800ff42:	f005 fd49 	bl	80159d8 <sys_arch_protect>
  memp->next = *desc->tab;
 800ff46:	68ab      	ldr	r3, [r5, #8]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ff4c:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800ff4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800ff52:	f005 bd4d 	b.w	80159f0 <sys_arch_unprotect>
}
 800ff56:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ff58:	4b07      	ldr	r3, [pc, #28]	@ (800ff78 <memp_free_pool+0x44>)
 800ff5a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ff5e:	4907      	ldr	r1, [pc, #28]	@ (800ff7c <memp_free_pool+0x48>)
 800ff60:	4807      	ldr	r0, [pc, #28]	@ (800ff80 <memp_free_pool+0x4c>)
 800ff62:	f006 faab 	bl	80164bc <iprintf>
 800ff66:	e7ec      	b.n	800ff42 <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff68:	4b03      	ldr	r3, [pc, #12]	@ (800ff78 <memp_free_pool+0x44>)
 800ff6a:	f240 1295 	movw	r2, #405	@ 0x195
 800ff6e:	4905      	ldr	r1, [pc, #20]	@ (800ff84 <memp_free_pool+0x50>)
 800ff70:	4803      	ldr	r0, [pc, #12]	@ (800ff80 <memp_free_pool+0x4c>)
 800ff72:	f006 baa3 	b.w	80164bc <iprintf>
 800ff76:	bf00      	nop
 800ff78:	0801abe0 	.word	0x0801abe0
 800ff7c:	0801acac 	.word	0x0801acac
 800ff80:	080187f8 	.word	0x080187f8
 800ff84:	0801ac78 	.word	0x0801ac78

0800ff88 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ff88:	280d      	cmp	r0, #13
 800ff8a:	d812      	bhi.n	800ffb2 <memp_free+0x2a>
{
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	460c      	mov	r4, r1

  if (mem == NULL) {
 800ff90:	b171      	cbz	r1, 800ffb0 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ff92:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd0 <memp_free+0x48>)
 800ff94:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ff98:	078b      	lsls	r3, r1, #30
 800ff9a:	d111      	bne.n	800ffc0 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800ff9c:	f005 fd1c 	bl	80159d8 <sys_arch_protect>
  memp->next = *desc->tab;
 800ffa0:	68ab      	ldr	r3, [r5, #8]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ffa6:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ffa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800ffac:	f005 bd20 	b.w	80159f0 <sys_arch_unprotect>
}
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ffb2:	4b08      	ldr	r3, [pc, #32]	@ (800ffd4 <memp_free+0x4c>)
 800ffb4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ffb8:	4907      	ldr	r1, [pc, #28]	@ (800ffd8 <memp_free+0x50>)
 800ffba:	4808      	ldr	r0, [pc, #32]	@ (800ffdc <memp_free+0x54>)
 800ffbc:	f006 ba7e 	b.w	80164bc <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ffc0:	4b04      	ldr	r3, [pc, #16]	@ (800ffd4 <memp_free+0x4c>)
 800ffc2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ffc6:	4906      	ldr	r1, [pc, #24]	@ (800ffe0 <memp_free+0x58>)
 800ffc8:	4804      	ldr	r0, [pc, #16]	@ (800ffdc <memp_free+0x54>)
 800ffca:	f006 fa77 	bl	80164bc <iprintf>
 800ffce:	e7e5      	b.n	800ff9c <memp_free+0x14>
 800ffd0:	0801ace8 	.word	0x0801ace8
 800ffd4:	0801abe0 	.word	0x0801abe0
 800ffd8:	0801accc 	.word	0x0801accc
 800ffdc:	080187f8 	.word	0x080187f8
 800ffe0:	0801acac 	.word	0x0801acac

0800ffe4 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800ffe4:	f06f 000b 	mvn.w	r0, #11
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <netif_issue_reports>:
{
 800ffec:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ffee:	4604      	mov	r4, r0
 800fff0:	b160      	cbz	r0, 801000c <netif_issue_reports+0x20>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fff2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800fff6:	f003 0205 	and.w	r2, r3, #5
 800fffa:	2a05      	cmp	r2, #5
 800fffc:	d105      	bne.n	801000a <netif_issue_reports+0x1e>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fffe:	6862      	ldr	r2, [r4, #4]
 8010000:	b11a      	cbz	r2, 801000a <netif_issue_reports+0x1e>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010002:	071a      	lsls	r2, r3, #28
 8010004:	d40f      	bmi.n	8010026 <netif_issue_reports+0x3a>
    if (netif->flags & NETIF_FLAG_IGMP) {
 8010006:	069b      	lsls	r3, r3, #26
 8010008:	d408      	bmi.n	801001c <netif_issue_reports+0x30>
}
 801000a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801000c:	4b09      	ldr	r3, [pc, #36]	@ (8010034 <netif_issue_reports+0x48>)
 801000e:	f240 326d 	movw	r2, #877	@ 0x36d
 8010012:	4909      	ldr	r1, [pc, #36]	@ (8010038 <netif_issue_reports+0x4c>)
 8010014:	4809      	ldr	r0, [pc, #36]	@ (801003c <netif_issue_reports+0x50>)
 8010016:	f006 fa51 	bl	80164bc <iprintf>
 801001a:	e7ea      	b.n	800fff2 <netif_issue_reports+0x6>
      igmp_report_groups(netif);
 801001c:	4620      	mov	r0, r4
}
 801001e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      igmp_report_groups(netif);
 8010022:	f7fe baa1 	b.w	800e568 <igmp_report_groups>
      etharp_gratuitous(netif);
 8010026:	1d21      	adds	r1, r4, #4
 8010028:	4620      	mov	r0, r4
 801002a:	f7fe f893 	bl	800e154 <etharp_request>
    if (netif->flags & NETIF_FLAG_IGMP) {
 801002e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8010032:	e7e8      	b.n	8010006 <netif_issue_reports+0x1a>
 8010034:	0801adc8 	.word	0x0801adc8
 8010038:	0801ae3c 	.word	0x0801ae3c
 801003c:	080187f8 	.word	0x080187f8

08010040 <netif_init>:
}
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop

08010044 <netif_set_addr>:
{
 8010044:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8010046:	2900      	cmp	r1, #0
{
 8010048:	461e      	mov	r6, r3
    ipaddr = IP4_ADDR_ANY4;
 801004a:	4b24      	ldr	r3, [pc, #144]	@ (80100dc <netif_set_addr+0x98>)
  if (ipaddr == NULL) {
 801004c:	460c      	mov	r4, r1
{
 801004e:	b083      	sub	sp, #12
 8010050:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 8010052:	bf14      	ite	ne
 8010054:	460c      	movne	r4, r1
 8010056:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 8010058:	b36a      	cbz	r2, 80100b6 <netif_set_addr+0x72>
 801005a:	4617      	mov	r7, r2
  if (gw == NULL) {
 801005c:	b34e      	cbz	r6, 80100b2 <netif_set_addr+0x6e>
  remove = ip4_addr_isany(ipaddr);
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	b16b      	cbz	r3, 801007e <netif_set_addr+0x3a>
 8010062:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	68aa      	ldr	r2, [r5, #8]
 8010068:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801006a:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801006c:	bf18      	it	ne
 801006e:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010070:	6833      	ldr	r3, [r6, #0]
 8010072:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010074:	bf18      	it	ne
 8010076:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 8010078:	b129      	cbz	r1, 8010086 <netif_set_addr+0x42>
}
 801007a:	b003      	add	sp, #12
 801007c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801007e:	686a      	ldr	r2, [r5, #4]
 8010080:	b9da      	cbnz	r2, 80100ba <netif_set_addr+0x76>
  remove = ip4_addr_isany(ipaddr);
 8010082:	2101      	movs	r1, #1
 8010084:	e7ee      	b.n	8010064 <netif_set_addr+0x20>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010086:	686b      	ldr	r3, [r5, #4]
 8010088:	6822      	ldr	r2, [r4, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d0f5      	beq.n	801007a <netif_set_addr+0x36>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801008e:	a901      	add	r1, sp, #4
 8010090:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010092:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010096:	f002 f817 	bl	80120c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801009a:	a901      	add	r1, sp, #4
 801009c:	4668      	mov	r0, sp
 801009e:	f005 fb21 	bl	80156e4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100a2:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100a4:	2101      	movs	r1, #1
 80100a6:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100a8:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100aa:	f7ff ff9f 	bl	800ffec <netif_issue_reports>
}
 80100ae:	b003      	add	sp, #12
 80100b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 80100b2:	4e0a      	ldr	r6, [pc, #40]	@ (80100dc <netif_set_addr+0x98>)
 80100b4:	e7d3      	b.n	801005e <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 80100b6:	461f      	mov	r7, r3
 80100b8:	e7d0      	b.n	801005c <netif_set_addr+0x18>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80100ba:	a901      	add	r1, sp, #4
 80100bc:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80100be:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80100c2:	f002 f801 	bl	80120c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80100c6:	a901      	add	r1, sp, #4
 80100c8:	4668      	mov	r0, sp
 80100ca:	f005 fb0b 	bl	80156e4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100ce:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100d0:	2101      	movs	r1, #1
 80100d2:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100d4:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100d6:	f7ff ff89 	bl	800ffec <netif_issue_reports>
    return 1; /* address changed */
 80100da:	e7d2      	b.n	8010082 <netif_set_addr+0x3e>
 80100dc:	0801a7a0 	.word	0x0801a7a0

080100e0 <netif_add>:
{
 80100e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80100e6:	2800      	cmp	r0, #0
 80100e8:	f000 8088 	beq.w	80101fc <netif_add+0x11c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80100ec:	2c00      	cmp	r4, #0
 80100ee:	f000 808e 	beq.w	801020e <netif_add+0x12e>
  if (ipaddr == NULL) {
 80100f2:	4606      	mov	r6, r0
 80100f4:	2900      	cmp	r1, #0
 80100f6:	d074      	beq.n	80101e2 <netif_add+0x102>
  if (netmask == NULL) {
 80100f8:	2a00      	cmp	r2, #0
 80100fa:	d06d      	beq.n	80101d8 <netif_add+0xf8>
  if (gw == NULL) {
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d06e      	beq.n	80101de <netif_add+0xfe>
  netif->state = state;
 8010100:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif->num = netif_num;
 8010102:	f8df b138 	ldr.w	fp, [pc, #312]	@ 801023c <netif_add+0x15c>
  netif->state = state;
 8010106:	6230      	str	r0, [r6, #32]
  netif->input = input;
 8010108:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801010a:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801010c:	2000      	movs	r0, #0
 801010e:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8010112:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 8010114:	85b0      	strh	r0, [r6, #44]	@ 0x2c
  netif->flags = 0;
 8010116:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801011a:	6270      	str	r0, [r6, #36]	@ 0x24
 801011c:	62b0      	str	r0, [r6, #40]	@ 0x28
  netif->link_callback = NULL;
 801011e:	61f0      	str	r0, [r6, #28]
  netif->igmp_mac_filter = NULL;
 8010120:	63f0      	str	r0, [r6, #60]	@ 0x3c
  netif->num = netif_num;
 8010122:	f89b 0000 	ldrb.w	r0, [fp]
 8010126:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
  netif->output = netif_null_output_ip4;
 801012a:	483d      	ldr	r0, [pc, #244]	@ (8010220 <netif_add+0x140>)
 801012c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801012e:	4630      	mov	r0, r6
 8010130:	f7ff ff88 	bl	8010044 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8010134:	4630      	mov	r0, r6
 8010136:	47a0      	blx	r4
 8010138:	2800      	cmp	r0, #0
 801013a:	d166      	bne.n	801020a <netif_add+0x12a>
      if (netif->num == 255) {
 801013c:	f896 3038 	ldrb.w	r3, [r6, #56]	@ 0x38
 8010140:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8010240 <netif_add+0x160>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010144:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8010230 <netif_add+0x150>
 8010148:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8010244 <netif_add+0x164>
 801014c:	4f35      	ldr	r7, [pc, #212]	@ (8010224 <netif_add+0x144>)
      if (netif->num == 255) {
 801014e:	2bff      	cmp	r3, #255	@ 0xff
 8010150:	d102      	bne.n	8010158 <netif_add+0x78>
        netif->num = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	f886 3038 	strb.w	r3, [r6, #56]	@ 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010158:	f8d9 4000 	ldr.w	r4, [r9]
 801015c:	2c00      	cmp	r4, #0
 801015e:	d04a      	beq.n	80101f6 <netif_add+0x116>
      num_netifs = 0;
 8010160:	2500      	movs	r5, #0
 8010162:	e007      	b.n	8010174 <netif_add+0x94>
        if (netif2->num == netif->num) {
 8010164:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010168:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 801016c:	4293      	cmp	r3, r2
 801016e:	d014      	beq.n	801019a <netif_add+0xba>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010170:	6824      	ldr	r4, [r4, #0]
 8010172:	b1fc      	cbz	r4, 80101b4 <netif_add+0xd4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010174:	42a6      	cmp	r6, r4
        num_netifs++;
 8010176:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801017a:	d013      	beq.n	80101a4 <netif_add+0xc4>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801017c:	2dff      	cmp	r5, #255	@ 0xff
 801017e:	ddf1      	ble.n	8010164 <netif_add+0x84>
 8010180:	4643      	mov	r3, r8
 8010182:	f240 128d 	movw	r2, #397	@ 0x18d
 8010186:	4928      	ldr	r1, [pc, #160]	@ (8010228 <netif_add+0x148>)
 8010188:	4638      	mov	r0, r7
 801018a:	f006 f997 	bl	80164bc <iprintf>
        if (netif2->num == netif->num) {
 801018e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010192:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 8010196:	4293      	cmp	r3, r2
 8010198:	d1ea      	bne.n	8010170 <netif_add+0x90>
          netif->num++;
 801019a:	3301      	adds	r3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	f886 3038 	strb.w	r3, [r6, #56]	@ 0x38
    } while (netif2 != NULL);
 80101a2:	e7d4      	b.n	801014e <netif_add+0x6e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80101a4:	4643      	mov	r3, r8
 80101a6:	f240 128b 	movw	r2, #395	@ 0x18b
 80101aa:	4651      	mov	r1, sl
 80101ac:	4638      	mov	r0, r7
 80101ae:	f006 f985 	bl	80164bc <iprintf>
 80101b2:	e7e3      	b.n	801017c <netif_add+0x9c>
  netif->next = netif_list;
 80101b4:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 80101b8:	2afe      	cmp	r2, #254	@ 0xfe
 80101ba:	d016      	beq.n	80101ea <netif_add+0x10a>
    netif_num = (u8_t)(netif->num + 1);
 80101bc:	1c53      	adds	r3, r2, #1
 80101be:	b2db      	uxtb	r3, r3
  if (netif->flags & NETIF_FLAG_IGMP) {
 80101c0:	f896 2035 	ldrb.w	r2, [r6, #53]	@ 0x35
 80101c4:	f88b 3000 	strb.w	r3, [fp]
 80101c8:	0693      	lsls	r3, r2, #26
  netif->next = netif_list;
 80101ca:	6034      	str	r4, [r6, #0]
  netif_list = netif;
 80101cc:	f8c9 6000 	str.w	r6, [r9]
  if (netif->flags & NETIF_FLAG_IGMP) {
 80101d0:	d40d      	bmi.n	80101ee <netif_add+0x10e>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80101d2:	4630      	mov	r0, r6
}
 80101d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80101d8:	4a14      	ldr	r2, [pc, #80]	@ (801022c <netif_add+0x14c>)
  if (gw == NULL) {
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d190      	bne.n	8010100 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80101de:	4b13      	ldr	r3, [pc, #76]	@ (801022c <netif_add+0x14c>)
 80101e0:	e78e      	b.n	8010100 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80101e2:	4912      	ldr	r1, [pc, #72]	@ (801022c <netif_add+0x14c>)
  if (netmask == NULL) {
 80101e4:	2a00      	cmp	r2, #0
 80101e6:	d189      	bne.n	80100fc <netif_add+0x1c>
 80101e8:	e7f6      	b.n	80101d8 <netif_add+0xf8>
    netif_num = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	e7e8      	b.n	80101c0 <netif_add+0xe0>
    igmp_start(netif);
 80101ee:	4630      	mov	r0, r6
 80101f0:	f7fe f9a2 	bl	800e538 <igmp_start>
 80101f4:	e7ed      	b.n	80101d2 <netif_add+0xf2>
  if (netif->num == 254) {
 80101f6:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 80101fa:	e7dd      	b.n	80101b8 <netif_add+0xd8>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80101fc:	4b0c      	ldr	r3, [pc, #48]	@ (8010230 <netif_add+0x150>)
 80101fe:	f240 1227 	movw	r2, #295	@ 0x127
 8010202:	490c      	ldr	r1, [pc, #48]	@ (8010234 <netif_add+0x154>)
 8010204:	4807      	ldr	r0, [pc, #28]	@ (8010224 <netif_add+0x144>)
 8010206:	f006 f959 	bl	80164bc <iprintf>
 801020a:	2000      	movs	r0, #0
 801020c:	e7e2      	b.n	80101d4 <netif_add+0xf4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801020e:	4b08      	ldr	r3, [pc, #32]	@ (8010230 <netif_add+0x150>)
 8010210:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010214:	4908      	ldr	r1, [pc, #32]	@ (8010238 <netif_add+0x158>)
 8010216:	4803      	ldr	r0, [pc, #12]	@ (8010224 <netif_add+0x144>)
 8010218:	f006 f950 	bl	80164bc <iprintf>
 801021c:	e7f5      	b.n	801020a <netif_add+0x12a>
 801021e:	bf00      	nop
 8010220:	0800ffe5 	.word	0x0800ffe5
 8010224:	080187f8 	.word	0x080187f8
 8010228:	0801aeb4 	.word	0x0801aeb4
 801022c:	0801a7a0 	.word	0x0801a7a0
 8010230:	0801adc8 	.word	0x0801adc8
 8010234:	0801ae60 	.word	0x0801ae60
 8010238:	0801ae7c 	.word	0x0801ae7c
 801023c:	20010163 	.word	0x20010163
 8010240:	20010168 	.word	0x20010168
 8010244:	0801aea0 	.word	0x0801aea0

08010248 <netif_set_default>:
  netif_default = netif;
 8010248:	4b01      	ldr	r3, [pc, #4]	@ (8010250 <netif_set_default+0x8>)
 801024a:	6018      	str	r0, [r3, #0]
}
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	20010164 	.word	0x20010164

08010254 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010254:	b158      	cbz	r0, 801026e <netif_set_up+0x1a>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010256:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 801025a:	07d1      	lsls	r1, r2, #31
 801025c:	d500      	bpl.n	8010260 <netif_set_up+0xc>
}
 801025e:	4770      	bx	lr
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010260:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010264:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010266:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801026a:	f7ff bebf 	b.w	800ffec <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801026e:	4b03      	ldr	r3, [pc, #12]	@ (801027c <netif_set_up+0x28>)
 8010270:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010274:	4902      	ldr	r1, [pc, #8]	@ (8010280 <netif_set_up+0x2c>)
 8010276:	4803      	ldr	r0, [pc, #12]	@ (8010284 <netif_set_up+0x30>)
 8010278:	f006 b920 	b.w	80164bc <iprintf>
 801027c:	0801adc8 	.word	0x0801adc8
 8010280:	0801aee4 	.word	0x0801aee4
 8010284:	080187f8 	.word	0x080187f8

08010288 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010288:	b160      	cbz	r0, 80102a4 <netif_set_down+0x1c>
  if (netif->flags & NETIF_FLAG_UP) {
 801028a:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 801028e:	07d1      	lsls	r1, r2, #31
 8010290:	d505      	bpl.n	801029e <netif_set_down+0x16>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010292:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010296:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010298:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801029c:	d400      	bmi.n	80102a0 <netif_set_down+0x18>
}
 801029e:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 80102a0:	f7fd bd1c 	b.w	800dcdc <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80102a4:	4b03      	ldr	r3, [pc, #12]	@ (80102b4 <netif_set_down+0x2c>)
 80102a6:	f240 329b 	movw	r2, #923	@ 0x39b
 80102aa:	4903      	ldr	r1, [pc, #12]	@ (80102b8 <netif_set_down+0x30>)
 80102ac:	4803      	ldr	r0, [pc, #12]	@ (80102bc <netif_set_down+0x34>)
 80102ae:	f006 b905 	b.w	80164bc <iprintf>
 80102b2:	bf00      	nop
 80102b4:	0801adc8 	.word	0x0801adc8
 80102b8:	0801af00 	.word	0x0801af00
 80102bc:	080187f8 	.word	0x080187f8

080102c0 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80102c0:	b1b8      	cbz	r0, 80102f2 <netif_set_link_up+0x32>
{
 80102c2:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80102c4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80102c8:	4604      	mov	r4, r0
 80102ca:	075a      	lsls	r2, r3, #29
 80102cc:	d500      	bpl.n	80102d0 <netif_set_link_up+0x10>
}
 80102ce:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80102d0:	f043 0304 	orr.w	r3, r3, #4
 80102d4:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    dhcp_network_changed(netif);
 80102d8:	f7fc ff6a 	bl	800d1b0 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80102dc:	2103      	movs	r1, #3
 80102de:	4620      	mov	r0, r4
 80102e0:	f7ff fe84 	bl	800ffec <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80102e4:	69e3      	ldr	r3, [r4, #28]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0f1      	beq.n	80102ce <netif_set_link_up+0xe>
 80102ea:	4620      	mov	r0, r4
}
 80102ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80102f0:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80102f2:	4b03      	ldr	r3, [pc, #12]	@ (8010300 <netif_set_link_up+0x40>)
 80102f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80102f8:	4902      	ldr	r1, [pc, #8]	@ (8010304 <netif_set_link_up+0x44>)
 80102fa:	4803      	ldr	r0, [pc, #12]	@ (8010308 <netif_set_link_up+0x48>)
 80102fc:	f006 b8de 	b.w	80164bc <iprintf>
 8010300:	0801adc8 	.word	0x0801adc8
 8010304:	0801af20 	.word	0x0801af20
 8010308:	080187f8 	.word	0x080187f8

0801030c <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801030c:	b158      	cbz	r0, 8010326 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801030e:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 8010312:	0751      	lsls	r1, r2, #29
 8010314:	d506      	bpl.n	8010324 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010316:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801031a:	69c1      	ldr	r1, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801031c:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 8010320:	b101      	cbz	r1, 8010324 <netif_set_link_down+0x18>
 8010322:	4708      	bx	r1
}
 8010324:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010326:	4b03      	ldr	r3, [pc, #12]	@ (8010334 <netif_set_link_down+0x28>)
 8010328:	f240 4206 	movw	r2, #1030	@ 0x406
 801032c:	4902      	ldr	r1, [pc, #8]	@ (8010338 <netif_set_link_down+0x2c>)
 801032e:	4803      	ldr	r0, [pc, #12]	@ (801033c <netif_set_link_down+0x30>)
 8010330:	f006 b8c4 	b.w	80164bc <iprintf>
 8010334:	0801adc8 	.word	0x0801adc8
 8010338:	0801af44 	.word	0x0801af44
 801033c:	080187f8 	.word	0x080187f8

08010340 <netif_set_link_callback>:
  if (netif) {
 8010340:	b100      	cbz	r0, 8010344 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8010342:	61c1      	str	r1, [r0, #28]
}
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop

08010348 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010348:	4602      	mov	r2, r0
 801034a:	b158      	cbz	r0, 8010364 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801034c:	4b06      	ldr	r3, [pc, #24]	@ (8010368 <netif_get_by_index+0x20>)
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	b910      	cbnz	r0, 8010358 <netif_get_by_index+0x10>
 8010352:	e007      	b.n	8010364 <netif_get_by_index+0x1c>
 8010354:	6800      	ldr	r0, [r0, #0]
 8010356:	b130      	cbz	r0, 8010366 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 8010358:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801035c:	3301      	adds	r3, #1
 801035e:	b2db      	uxtb	r3, r3
 8010360:	4293      	cmp	r3, r2
 8010362:	d1f7      	bne.n	8010354 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 8010364:	4770      	bx	lr
 8010366:	4770      	bx	lr
 8010368:	20010168 	.word	0x20010168

0801036c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801036c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801036e:	f005 fb33 	bl	80159d8 <sys_arch_protect>
 8010372:	4b09      	ldr	r3, [pc, #36]	@ (8010398 <pbuf_free_ooseq_callback+0x2c>)
 8010374:	2200      	movs	r2, #0
 8010376:	701a      	strb	r2, [r3, #0]
 8010378:	f005 fb3a 	bl	80159f0 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801037c:	4b07      	ldr	r3, [pc, #28]	@ (801039c <pbuf_free_ooseq_callback+0x30>)
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	b910      	cbnz	r0, 8010388 <pbuf_free_ooseq_callback+0x1c>
 8010382:	e008      	b.n	8010396 <pbuf_free_ooseq_callback+0x2a>
 8010384:	68c0      	ldr	r0, [r0, #12]
 8010386:	b130      	cbz	r0, 8010396 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8010388:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801038a:	2b00      	cmp	r3, #0
 801038c:	d0fa      	beq.n	8010384 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801038e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8010392:	f001 bec3 	b.w	801211c <tcp_free_ooseq>
}
 8010396:	bd08      	pop	{r3, pc}
 8010398:	2001016c 	.word	0x2001016c
 801039c:	20010174 	.word	0x20010174

080103a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80103a0:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103a2:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 80103a6:	2500      	movs	r5, #0
{
 80103a8:	4614      	mov	r4, r2
 80103aa:	4606      	mov	r6, r0
 80103ac:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	f361 451f 	bfi	r5, r1, #16, #16
 80103b6:	d10c      	bne.n	80103d2 <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80103b8:	200c      	movs	r0, #12
 80103ba:	f7ff fd9f 	bl	800fefc <memp_malloc>
  if (p == NULL) {
 80103be:	b138      	cbz	r0, 80103d0 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80103c0:	2300      	movs	r3, #0
  p->ref = 1;
 80103c2:	2201      	movs	r2, #1
  p->payload = payload;
 80103c4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80103c6:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 80103c8:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 80103ca:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 80103cc:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80103ce:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 80103d0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103d2:	4b04      	ldr	r3, [pc, #16]	@ (80103e4 <pbuf_alloc_reference+0x44>)
 80103d4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80103d8:	4903      	ldr	r1, [pc, #12]	@ (80103e8 <pbuf_alloc_reference+0x48>)
 80103da:	4804      	ldr	r0, [pc, #16]	@ (80103ec <pbuf_alloc_reference+0x4c>)
 80103dc:	f006 f86e 	bl	80164bc <iprintf>
 80103e0:	e7ea      	b.n	80103b8 <pbuf_alloc_reference+0x18>
 80103e2:	bf00      	nop
 80103e4:	0801af68 	.word	0x0801af68
 80103e8:	0801afdc 	.word	0x0801afdc
 80103ec:	080187f8 	.word	0x080187f8

080103f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80103f0:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80103f2:	3003      	adds	r0, #3
 80103f4:	2400      	movs	r4, #0
{
 80103f6:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 80103fa:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80103fe:	f020 0003 	bic.w	r0, r0, #3
{
 8010402:	9d02      	ldr	r5, [sp, #8]
 8010404:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010408:	4401      	add	r1, r0
 801040a:	4561      	cmp	r1, ip
 801040c:	d80d      	bhi.n	801042a <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 801040e:	b105      	cbz	r5, 8010412 <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010410:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010412:	4618      	mov	r0, r3
  p->next = NULL;
 8010414:	2300      	movs	r3, #0
  p->flags = flags;
 8010416:	2102      	movs	r1, #2
  p->next = NULL;
 8010418:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801041a:	2301      	movs	r3, #1
  p->payload = payload;
 801041c:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 801041e:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 8010420:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8010422:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 8010424:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 8010426:	bc30      	pop	{r4, r5}
 8010428:	4770      	bx	lr
    return NULL;
 801042a:	2000      	movs	r0, #0
}
 801042c:	bc30      	pop	{r4, r5}
 801042e:	4770      	bx	lr

08010430 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010430:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8010432:	b1f0      	cbz	r0, 8010472 <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010434:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010438:	d20b      	bcs.n	8010452 <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 801043a:	b1c1      	cbz	r1, 801046e <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 801043c:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801043e:	8903      	ldrh	r3, [r0, #8]
 8010440:	4413      	add	r3, r2
 8010442:	b29b      	uxth	r3, r3
 8010444:	429a      	cmp	r2, r3
 8010446:	d804      	bhi.n	8010452 <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010448:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 801044c:	f1bc 0f00 	cmp.w	ip, #0
 8010450:	db01      	blt.n	8010456 <pbuf_add_header+0x26>
    return 1;
 8010452:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 8010454:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8010456:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010458:	f100 0c18 	add.w	ip, r0, #24
    payload = (u8_t *)p->payload - header_size_increment;
 801045c:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801045e:	4561      	cmp	r1, ip
 8010460:	d3f7      	bcc.n	8010452 <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 8010462:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 8010466:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010468:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801046a:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801046c:	8142      	strh	r2, [r0, #10]
    return 0;
 801046e:	2000      	movs	r0, #0
}
 8010470:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8010472:	4b04      	ldr	r3, [pc, #16]	@ (8010484 <pbuf_add_header+0x54>)
 8010474:	f240 12df 	movw	r2, #479	@ 0x1df
 8010478:	4903      	ldr	r1, [pc, #12]	@ (8010488 <pbuf_add_header+0x58>)
 801047a:	4804      	ldr	r0, [pc, #16]	@ (801048c <pbuf_add_header+0x5c>)
 801047c:	f006 f81e 	bl	80164bc <iprintf>
    return 1;
 8010480:	2001      	movs	r0, #1
 8010482:	e7e7      	b.n	8010454 <pbuf_add_header+0x24>
 8010484:	0801af68 	.word	0x0801af68
 8010488:	08019df8 	.word	0x08019df8
 801048c:	080187f8 	.word	0x080187f8

08010490 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010490:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010492:	b188      	cbz	r0, 80104b8 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010494:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8010498:	d215      	bcs.n	80104c6 <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 801049a:	b159      	cbz	r1, 80104b4 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801049c:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801049e:	8943      	ldrh	r3, [r0, #10]
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d312      	bcc.n	80104ca <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80104a4:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80104a6:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80104a8:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80104aa:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 80104ac:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80104ae:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80104b0:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80104b2:	8103      	strh	r3, [r0, #8]
    return 0;
 80104b4:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 80104b6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80104b8:	4b08      	ldr	r3, [pc, #32]	@ (80104dc <pbuf_remove_header+0x4c>)
 80104ba:	f240 224b 	movw	r2, #587	@ 0x24b
 80104be:	4908      	ldr	r1, [pc, #32]	@ (80104e0 <pbuf_remove_header+0x50>)
 80104c0:	4808      	ldr	r0, [pc, #32]	@ (80104e4 <pbuf_remove_header+0x54>)
 80104c2:	f005 fffb 	bl	80164bc <iprintf>
    return 1;
 80104c6:	2001      	movs	r0, #1
}
 80104c8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80104ca:	4b04      	ldr	r3, [pc, #16]	@ (80104dc <pbuf_remove_header+0x4c>)
 80104cc:	f240 2255 	movw	r2, #597	@ 0x255
 80104d0:	4905      	ldr	r1, [pc, #20]	@ (80104e8 <pbuf_remove_header+0x58>)
 80104d2:	4804      	ldr	r0, [pc, #16]	@ (80104e4 <pbuf_remove_header+0x54>)
 80104d4:	f005 fff2 	bl	80164bc <iprintf>
 80104d8:	e7f5      	b.n	80104c6 <pbuf_remove_header+0x36>
 80104da:	bf00      	nop
 80104dc:	0801af68 	.word	0x0801af68
 80104e0:	08019df8 	.word	0x08019df8
 80104e4:	080187f8 	.word	0x080187f8
 80104e8:	0801aff0 	.word	0x0801aff0

080104ec <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80104ec:	2900      	cmp	r1, #0
 80104ee:	db19      	blt.n	8010524 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 80104f0:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80104f2:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80104f4:	b1c8      	cbz	r0, 801052a <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 80104f6:	b199      	cbz	r1, 8010520 <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 80104f8:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80104fa:	891a      	ldrh	r2, [r3, #8]
 80104fc:	4402      	add	r2, r0
 80104fe:	b292      	uxth	r2, r2
 8010500:	4290      	cmp	r0, r2
 8010502:	d819      	bhi.n	8010538 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010504:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 8010508:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801050a:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801050e:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010512:	db13      	blt.n	801053c <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 8010514:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 8010518:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801051a:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801051c:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801051e:	8158      	strh	r0, [r3, #10]
    return 0;
 8010520:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8010522:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010524:	4249      	negs	r1, r1
 8010526:	f7ff bfb3 	b.w	8010490 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801052a:	4b07      	ldr	r3, [pc, #28]	@ (8010548 <pbuf_header_force+0x5c>)
 801052c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010530:	4906      	ldr	r1, [pc, #24]	@ (801054c <pbuf_header_force+0x60>)
 8010532:	4807      	ldr	r0, [pc, #28]	@ (8010550 <pbuf_header_force+0x64>)
 8010534:	f005 ffc2 	bl	80164bc <iprintf>
    return 1;
 8010538:	2001      	movs	r0, #1
}
 801053a:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801053c:	f103 0c18 	add.w	ip, r3, #24
 8010540:	4561      	cmp	r1, ip
 8010542:	d2e7      	bcs.n	8010514 <pbuf_header_force+0x28>
 8010544:	e7f8      	b.n	8010538 <pbuf_header_force+0x4c>
 8010546:	bf00      	nop
 8010548:	0801af68 	.word	0x0801af68
 801054c:	08019df8 	.word	0x08019df8
 8010550:	080187f8 	.word	0x080187f8

08010554 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010558:	4605      	mov	r5, r0
 801055a:	2800      	cmp	r0, #0
 801055c:	d055      	beq.n	801060a <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801055e:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010560:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8010624 <pbuf_free+0xd0>
 8010564:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8010630 <pbuf_free+0xdc>
 8010568:	4f2c      	ldr	r7, [pc, #176]	@ (801061c <pbuf_free+0xc8>)
 801056a:	e008      	b.n	801057e <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801056c:	69ab      	ldr	r3, [r5, #24]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d03d      	beq.n	80105ee <pbuf_free+0x9a>
        pc->custom_free_function(p);
 8010572:	4628      	mov	r0, r5
 8010574:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8010576:	3601      	adds	r6, #1
 8010578:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 801057a:	b1fc      	cbz	r4, 80105bc <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 801057c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 801057e:	f005 fa2b 	bl	80159d8 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010582:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 8010584:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010586:	b1e3      	cbz	r3, 80105c2 <pbuf_free+0x6e>
    ref = --(p->ref);
 8010588:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 801058a:	4620      	mov	r0, r4
    ref = --(p->ref);
 801058c:	b2dc      	uxtb	r4, r3
 801058e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8010590:	f005 fa2e 	bl	80159f0 <sys_arch_unprotect>
    if (ref == 0) {
 8010594:	b994      	cbnz	r4, 80105bc <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010596:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8010598:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801059a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 801059c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801059e:	d4e5      	bmi.n	801056c <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 80105a0:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d01d      	beq.n	80105e4 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d029      	beq.n	8010600 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80105ac:	b993      	cbnz	r3, 80105d4 <pbuf_free+0x80>
      count++;
 80105ae:	3601      	adds	r6, #1
          mem_free(p);
 80105b0:	4628      	mov	r0, r5
 80105b2:	f7ff f9d1 	bl	800f958 <mem_free>
      count++;
 80105b6:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 80105b8:	2c00      	cmp	r4, #0
 80105ba:	d1df      	bne.n	801057c <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80105bc:	4630      	mov	r0, r6
 80105be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80105c2:	4643      	mov	r3, r8
 80105c4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80105c8:	4649      	mov	r1, r9
 80105ca:	4638      	mov	r0, r7
 80105cc:	f005 ff76 	bl	80164bc <iprintf>
    ref = --(p->ref);
 80105d0:	7bab      	ldrb	r3, [r5, #14]
 80105d2:	e7d9      	b.n	8010588 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 80105d4:	4643      	mov	r3, r8
 80105d6:	f240 320f 	movw	r2, #783	@ 0x30f
 80105da:	4911      	ldr	r1, [pc, #68]	@ (8010620 <pbuf_free+0xcc>)
 80105dc:	4638      	mov	r0, r7
 80105de:	f005 ff6d 	bl	80164bc <iprintf>
 80105e2:	e7c8      	b.n	8010576 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 80105e4:	4629      	mov	r1, r5
 80105e6:	200d      	movs	r0, #13
 80105e8:	f7ff fcce 	bl	800ff88 <memp_free>
 80105ec:	e7c3      	b.n	8010576 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <pbuf_free+0xd0>)
 80105f0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80105f4:	490c      	ldr	r1, [pc, #48]	@ (8010628 <pbuf_free+0xd4>)
 80105f6:	4809      	ldr	r0, [pc, #36]	@ (801061c <pbuf_free+0xc8>)
 80105f8:	f005 ff60 	bl	80164bc <iprintf>
        pc->custom_free_function(p);
 80105fc:	69ab      	ldr	r3, [r5, #24]
 80105fe:	e7b8      	b.n	8010572 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 8010600:	4629      	mov	r1, r5
 8010602:	200c      	movs	r0, #12
 8010604:	f7ff fcc0 	bl	800ff88 <memp_free>
 8010608:	e7b5      	b.n	8010576 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 801060a:	4b06      	ldr	r3, [pc, #24]	@ (8010624 <pbuf_free+0xd0>)
 801060c:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010610:	4906      	ldr	r1, [pc, #24]	@ (801062c <pbuf_free+0xd8>)
    return 0;
 8010612:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8010614:	4801      	ldr	r0, [pc, #4]	@ (801061c <pbuf_free+0xc8>)
 8010616:	f005 ff51 	bl	80164bc <iprintf>
    return 0;
 801061a:	e7cf      	b.n	80105bc <pbuf_free+0x68>
 801061c:	080187f8 	.word	0x080187f8
 8010620:	0801b04c 	.word	0x0801b04c
 8010624:	0801af68 	.word	0x0801af68
 8010628:	0801b028 	.word	0x0801b028
 801062c:	08019df8 	.word	0x08019df8
 8010630:	0801b010 	.word	0x0801b010

08010634 <pbuf_alloc>:
  switch (type) {
 8010634:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 8010638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801063c:	4688      	mov	r8, r1
 801063e:	b083      	sub	sp, #12
  switch (type) {
 8010640:	d041      	beq.n	80106c6 <pbuf_alloc+0x92>
 8010642:	d80f      	bhi.n	8010664 <pbuf_alloc+0x30>
 8010644:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8010648:	2b01      	cmp	r3, #1
 801064a:	d036      	beq.n	80106ba <pbuf_alloc+0x86>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801064c:	4b44      	ldr	r3, [pc, #272]	@ (8010760 <pbuf_alloc+0x12c>)
 801064e:	f240 1227 	movw	r2, #295	@ 0x127
 8010652:	4944      	ldr	r1, [pc, #272]	@ (8010764 <pbuf_alloc+0x130>)
 8010654:	4844      	ldr	r0, [pc, #272]	@ (8010768 <pbuf_alloc+0x134>)
 8010656:	f005 ff31 	bl	80164bc <iprintf>
          return NULL;
 801065a:	2400      	movs	r4, #0
}
 801065c:	4620      	mov	r0, r4
 801065e:	b003      	add	sp, #12
 8010660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 8010664:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 8010668:	d1f0      	bne.n	801064c <pbuf_alloc+0x18>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801066a:	1cc3      	adds	r3, r0, #3
 801066c:	1cca      	adds	r2, r1, #3
 801066e:	4605      	mov	r5, r0
 8010670:	f022 0203 	bic.w	r2, r2, #3
 8010674:	f023 0303 	bic.w	r3, r3, #3
 8010678:	4413      	add	r3, r2
 801067a:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801067c:	f103 0018 	add.w	r0, r3, #24
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010680:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010682:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010684:	d3e9      	bcc.n	801065a <pbuf_alloc+0x26>
 8010686:	4282      	cmp	r2, r0
 8010688:	d8e7      	bhi.n	801065a <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801068a:	f7ff fb03 	bl	800fc94 <mem_malloc>
      if (p == NULL) {
 801068e:	4604      	mov	r4, r0
 8010690:	2800      	cmp	r0, #0
 8010692:	d0e3      	beq.n	801065c <pbuf_alloc+0x28>
  p->next = NULL;
 8010694:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010696:	1943      	adds	r3, r0, r5
  p->type_internal = (u8_t)type;
 8010698:	4834      	ldr	r0, [pc, #208]	@ (801076c <pbuf_alloc+0x138>)
  p->tot_len = tot_len;
 801069a:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801069c:	331b      	adds	r3, #27
  p->type_internal = (u8_t)type;
 801069e:	60e0      	str	r0, [r4, #12]
}
 80106a0:	4620      	mov	r0, r4
  p->tot_len = tot_len;
 80106a2:	f368 020f 	bfi	r2, r8, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80106a6:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
 80106aa:	f368 421f 	bfi	r2, r8, #16, #16
  p->payload = payload;
 80106ae:	e9c4 1300 	strd	r1, r3, [r4]
  p->tot_len = tot_len;
 80106b2:	60a2      	str	r2, [r4, #8]
}
 80106b4:	b003      	add	sp, #12
 80106b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 80106ba:	2000      	movs	r0, #0
}
 80106bc:	b003      	add	sp, #12
 80106be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80106c2:	f7ff be6d 	b.w	80103a0 <pbuf_alloc_reference>
  switch (type) {
 80106c6:	2100      	movs	r1, #0
 80106c8:	4681      	mov	r9, r0
  p->type_internal = (u8_t)type;
 80106ca:	4d29      	ldr	r5, [pc, #164]	@ (8010770 <pbuf_alloc+0x13c>)
  switch (type) {
 80106cc:	460c      	mov	r4, r1
  p->next = NULL;
 80106ce:	460e      	mov	r6, r1
 80106d0:	e009      	b.n	80106e6 <pbuf_alloc+0xb2>
          last->next = q;
 80106d2:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 80106d4:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 80106d8:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 80106dc:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 80106e0:	f1b8 0f00 	cmp.w	r8, #0
 80106e4:	d0ba      	beq.n	801065c <pbuf_alloc+0x28>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80106e6:	200d      	movs	r0, #13
 80106e8:	460f      	mov	r7, r1
 80106ea:	f7ff fc07 	bl	800fefc <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80106ee:	f109 0203 	add.w	r2, r9, #3
        if (q == NULL) {
 80106f2:	4601      	mov	r1, r0
 80106f4:	b1b0      	cbz	r0, 8010724 <pbuf_alloc+0xf0>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80106f6:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80106fa:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 80106fe:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010702:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010706:	321b      	adds	r2, #27
  p->next = NULL;
 8010708:	6006      	str	r6, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801070a:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801070c:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8010710:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010712:	4543      	cmp	r3, r8
  p->payload = payload;
 8010714:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010716:	bf28      	it	cs
 8010718:	4643      	movcs	r3, r8
  p->len = len;
 801071a:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801071c:	2c00      	cmp	r4, #0
 801071e:	d1d8      	bne.n	80106d2 <pbuf_alloc+0x9e>
 8010720:	4604      	mov	r4, r0
 8010722:	e7d7      	b.n	80106d4 <pbuf_alloc+0xa0>
  queued = pbuf_free_ooseq_pending;
 8010724:	4e13      	ldr	r6, [pc, #76]	@ (8010774 <pbuf_alloc+0x140>)
 8010726:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 8010728:	f005 f956 	bl	80159d8 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 801072c:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801072e:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8010730:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8010732:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010734:	f005 f95c 	bl	80159f0 <sys_arch_unprotect>
  if (!queued) {
 8010738:	9901      	ldr	r1, [sp, #4]
 801073a:	b12d      	cbz	r5, 8010748 <pbuf_alloc+0x114>
          if (p) {
 801073c:	2c00      	cmp	r4, #0
 801073e:	d08c      	beq.n	801065a <pbuf_alloc+0x26>
            pbuf_free(p);
 8010740:	4620      	mov	r0, r4
 8010742:	f7ff ff07 	bl	8010554 <pbuf_free>
 8010746:	e788      	b.n	801065a <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010748:	480b      	ldr	r0, [pc, #44]	@ (8010778 <pbuf_alloc+0x144>)
 801074a:	f7fb fce1 	bl	800c110 <tcpip_try_callback>
 801074e:	2800      	cmp	r0, #0
 8010750:	d0f4      	beq.n	801073c <pbuf_alloc+0x108>
 8010752:	f005 f941 	bl	80159d8 <sys_arch_protect>
 8010756:	9901      	ldr	r1, [sp, #4]
 8010758:	7031      	strb	r1, [r6, #0]
 801075a:	f005 f949 	bl	80159f0 <sys_arch_unprotect>
 801075e:	e7ed      	b.n	801073c <pbuf_alloc+0x108>
 8010760:	0801af68 	.word	0x0801af68
 8010764:	0801b060 	.word	0x0801b060
 8010768:	080187f8 	.word	0x080187f8
 801076c:	00010080 	.word	0x00010080
 8010770:	00010082 	.word	0x00010082
 8010774:	2001016c 	.word	0x2001016c
 8010778:	0801036d 	.word	0x0801036d

0801077c <pbuf_realloc>:
{
 801077c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801077e:	4604      	mov	r4, r0
{
 8010780:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010782:	2800      	cmp	r0, #0
 8010784:	d03b      	beq.n	80107fe <pbuf_realloc+0x82>
  if (new_len >= p->tot_len) {
 8010786:	8922      	ldrh	r2, [r4, #8]
 8010788:	42aa      	cmp	r2, r5
 801078a:	d91f      	bls.n	80107cc <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 801078c:	8963      	ldrh	r3, [r4, #10]
 801078e:	429d      	cmp	r5, r3
 8010790:	d90d      	bls.n	80107ae <pbuf_realloc+0x32>
 8010792:	1aa9      	subs	r1, r5, r2
 8010794:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010796:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8010798:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801079a:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801079c:	b29d      	uxth	r5, r3
    q = q->next;
 801079e:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80107a0:	2c00      	cmp	r4, #0
 80107a2:	d034      	beq.n	801080e <pbuf_realloc+0x92>
  while (rem_len > q->len) {
 80107a4:	8963      	ldrh	r3, [r4, #10]
 80107a6:	42ab      	cmp	r3, r5
 80107a8:	d201      	bcs.n	80107ae <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80107aa:	8922      	ldrh	r2, [r4, #8]
 80107ac:	e7f3      	b.n	8010796 <pbuf_realloc+0x1a>
 80107ae:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80107b0:	7b22      	ldrb	r2, [r4, #12]
 80107b2:	f365 060f 	bfi	r6, r5, #0, #16
 80107b6:	0712      	lsls	r2, r2, #28
 80107b8:	f365 461f 	bfi	r6, r5, #16, #16
 80107bc:	d007      	beq.n	80107ce <pbuf_realloc+0x52>
  if (q->next != NULL) {
 80107be:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 80107c0:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 80107c2:	b108      	cbz	r0, 80107c8 <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 80107c4:	f7ff fec6 	bl	8010554 <pbuf_free>
  q->next = NULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	6023      	str	r3, [r4, #0]
}
 80107cc:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80107ce:	42ab      	cmp	r3, r5
 80107d0:	d0f5      	beq.n	80107be <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80107d2:	7b63      	ldrb	r3, [r4, #13]
 80107d4:	079b      	lsls	r3, r3, #30
 80107d6:	d4f2      	bmi.n	80107be <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80107d8:	6863      	ldr	r3, [r4, #4]
 80107da:	4620      	mov	r0, r4
 80107dc:	1b1b      	subs	r3, r3, r4
 80107de:	18e9      	adds	r1, r5, r3
 80107e0:	b289      	uxth	r1, r1
 80107e2:	f7ff f99f 	bl	800fb24 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80107e6:	4604      	mov	r4, r0
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d1e8      	bne.n	80107be <pbuf_realloc+0x42>
 80107ec:	4b0c      	ldr	r3, [pc, #48]	@ (8010820 <pbuf_realloc+0xa4>)
 80107ee:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80107f2:	490c      	ldr	r1, [pc, #48]	@ (8010824 <pbuf_realloc+0xa8>)
 80107f4:	480c      	ldr	r0, [pc, #48]	@ (8010828 <pbuf_realloc+0xac>)
 80107f6:	f005 fe61 	bl	80164bc <iprintf>
  q->len = rem_len;
 80107fa:	8164      	strh	r4, [r4, #10]
 80107fc:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80107fe:	4b08      	ldr	r3, [pc, #32]	@ (8010820 <pbuf_realloc+0xa4>)
 8010800:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010804:	4909      	ldr	r1, [pc, #36]	@ (801082c <pbuf_realloc+0xb0>)
 8010806:	4808      	ldr	r0, [pc, #32]	@ (8010828 <pbuf_realloc+0xac>)
 8010808:	f005 fe58 	bl	80164bc <iprintf>
 801080c:	e7bb      	b.n	8010786 <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801080e:	4b04      	ldr	r3, [pc, #16]	@ (8010820 <pbuf_realloc+0xa4>)
 8010810:	f240 12af 	movw	r2, #431	@ 0x1af
 8010814:	4906      	ldr	r1, [pc, #24]	@ (8010830 <pbuf_realloc+0xb4>)
 8010816:	4804      	ldr	r0, [pc, #16]	@ (8010828 <pbuf_realloc+0xac>)
 8010818:	f005 fe50 	bl	80164bc <iprintf>
  while (rem_len > q->len) {
 801081c:	8963      	ldrh	r3, [r4, #10]
 801081e:	deff      	udf	#255	@ 0xff
 8010820:	0801af68 	.word	0x0801af68
 8010824:	0801b0ac 	.word	0x0801b0ac
 8010828:	080187f8 	.word	0x080187f8
 801082c:	0801b07c 	.word	0x0801b07c
 8010830:	0801b094 	.word	0x0801b094

08010834 <pbuf_free_header>:
{
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	4604      	mov	r4, r0
  while (free_left && p) {
 8010838:	b1b9      	cbz	r1, 801086a <pbuf_free_header+0x36>
 801083a:	b1b0      	cbz	r0, 801086a <pbuf_free_header+0x36>
 801083c:	460d      	mov	r5, r1
      f->next = 0;
 801083e:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 8010840:	8963      	ldrh	r3, [r4, #10]
      pbuf_free(f);
 8010842:	4620      	mov	r0, r4
    if (free_left >= p->len) {
 8010844:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 8010846:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801084a:	d80b      	bhi.n	8010864 <pbuf_free_header+0x30>
      p = p->next;
 801084c:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801084e:	b295      	uxth	r5, r2
      f->next = 0;
 8010850:	6027      	str	r7, [r4, #0]
      p = p->next;
 8010852:	4634      	mov	r4, r6
      pbuf_free(f);
 8010854:	f7ff fe7e 	bl	8010554 <pbuf_free>
  while (free_left && p) {
 8010858:	b10d      	cbz	r5, 801085e <pbuf_free_header+0x2a>
 801085a:	2e00      	cmp	r6, #0
 801085c:	d1f0      	bne.n	8010840 <pbuf_free_header+0xc>
      p = p->next;
 801085e:	4634      	mov	r4, r6
}
 8010860:	4620      	mov	r0, r4
 8010862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_remove_header(p, free_left);
 8010864:	4629      	mov	r1, r5
 8010866:	f7ff fe13 	bl	8010490 <pbuf_remove_header>
}
 801086a:	4620      	mov	r0, r4
 801086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086e:	bf00      	nop

08010870 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8010870:	4603      	mov	r3, r0
 8010872:	b130      	cbz	r0, 8010882 <pbuf_clen+0x12>
  len = 0;
 8010874:	2000      	movs	r0, #0
    ++len;
 8010876:	3001      	adds	r0, #1
    p = p->next;
 8010878:	681b      	ldr	r3, [r3, #0]
    ++len;
 801087a:	b280      	uxth	r0, r0
  while (p != NULL) {
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1fa      	bne.n	8010876 <pbuf_clen+0x6>
 8010880:	4770      	bx	lr
  }
  return len;
}
 8010882:	4770      	bx	lr

08010884 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8010884:	b158      	cbz	r0, 801089e <pbuf_ref+0x1a>
{
 8010886:	b510      	push	{r4, lr}
 8010888:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801088a:	f005 f8a5 	bl	80159d8 <sys_arch_protect>
 801088e:	7ba3      	ldrb	r3, [r4, #14]
 8010890:	3301      	adds	r3, #1
 8010892:	73a3      	strb	r3, [r4, #14]
 8010894:	f005 f8ac 	bl	80159f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010898:	7ba3      	ldrb	r3, [r4, #14]
 801089a:	b10b      	cbz	r3, 80108a0 <pbuf_ref+0x1c>
  }
}
 801089c:	bd10      	pop	{r4, pc}
 801089e:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80108a0:	4b04      	ldr	r3, [pc, #16]	@ (80108b4 <pbuf_ref+0x30>)
 80108a2:	f240 3242 	movw	r2, #834	@ 0x342
 80108a6:	4904      	ldr	r1, [pc, #16]	@ (80108b8 <pbuf_ref+0x34>)
 80108a8:	4804      	ldr	r0, [pc, #16]	@ (80108bc <pbuf_ref+0x38>)
}
 80108aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80108ae:	f005 be05 	b.w	80164bc <iprintf>
 80108b2:	bf00      	nop
 80108b4:	0801af68 	.word	0x0801af68
 80108b8:	0801b0c8 	.word	0x0801b0c8
 80108bc:	080187f8 	.word	0x080187f8

080108c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80108c0:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d02d      	beq.n	8010922 <pbuf_cat+0x62>
 80108c6:	460d      	mov	r5, r1
 80108c8:	2900      	cmp	r1, #0
 80108ca:	d02a      	beq.n	8010922 <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80108cc:	6803      	ldr	r3, [r0, #0]
 80108ce:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80108d0:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80108d2:	b18b      	cbz	r3, 80108f8 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80108d4:	8922      	ldrh	r2, [r4, #8]
 80108d6:	8928      	ldrh	r0, [r5, #8]
 80108d8:	4402      	add	r2, r0
 80108da:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80108dc:	461c      	mov	r4, r3
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1f7      	bne.n	80108d4 <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80108e4:	8922      	ldrh	r2, [r4, #8]
 80108e6:	8963      	ldrh	r3, [r4, #10]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d108      	bne.n	80108fe <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80108ec:	8922      	ldrh	r2, [r4, #8]
 80108ee:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80108f0:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80108f2:	441a      	add	r2, r3
 80108f4:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80108f8:	8943      	ldrh	r3, [r0, #10]
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d0f7      	beq.n	80108ee <pbuf_cat+0x2e>
 80108fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010934 <pbuf_cat+0x74>)
 8010900:	f240 3262 	movw	r2, #866	@ 0x362
 8010904:	490c      	ldr	r1, [pc, #48]	@ (8010938 <pbuf_cat+0x78>)
 8010906:	480d      	ldr	r0, [pc, #52]	@ (801093c <pbuf_cat+0x7c>)
 8010908:	f005 fdd8 	bl	80164bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d0ec      	beq.n	80108ec <pbuf_cat+0x2c>
 8010912:	4b08      	ldr	r3, [pc, #32]	@ (8010934 <pbuf_cat+0x74>)
 8010914:	f240 3263 	movw	r2, #867	@ 0x363
 8010918:	4909      	ldr	r1, [pc, #36]	@ (8010940 <pbuf_cat+0x80>)
 801091a:	4808      	ldr	r0, [pc, #32]	@ (801093c <pbuf_cat+0x7c>)
 801091c:	f005 fdce 	bl	80164bc <iprintf>
 8010920:	e7e4      	b.n	80108ec <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010922:	4b04      	ldr	r3, [pc, #16]	@ (8010934 <pbuf_cat+0x74>)
 8010924:	f240 3259 	movw	r2, #857	@ 0x359
 8010928:	4906      	ldr	r1, [pc, #24]	@ (8010944 <pbuf_cat+0x84>)
 801092a:	4804      	ldr	r0, [pc, #16]	@ (801093c <pbuf_cat+0x7c>)
}
 801092c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010930:	f005 bdc4 	b.w	80164bc <iprintf>
 8010934:	0801af68 	.word	0x0801af68
 8010938:	0801b114 	.word	0x0801b114
 801093c:	080187f8 	.word	0x080187f8
 8010940:	0801b144 	.word	0x0801b144
 8010944:	0801b0dc 	.word	0x0801b0dc

08010948 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010948:	b510      	push	{r4, lr}
 801094a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801094c:	f7ff ffb8 	bl	80108c0 <pbuf_cat>
  if (p != NULL) {
 8010950:	b144      	cbz	r4, 8010964 <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010952:	f005 f841 	bl	80159d8 <sys_arch_protect>
 8010956:	7ba3      	ldrb	r3, [r4, #14]
 8010958:	3301      	adds	r3, #1
 801095a:	73a3      	strb	r3, [r4, #14]
 801095c:	f005 f848 	bl	80159f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010960:	7ba3      	ldrb	r3, [r4, #14]
 8010962:	b103      	cbz	r3, 8010966 <pbuf_chain+0x1e>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010964:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010966:	4b04      	ldr	r3, [pc, #16]	@ (8010978 <pbuf_chain+0x30>)
 8010968:	f240 3242 	movw	r2, #834	@ 0x342
 801096c:	4903      	ldr	r1, [pc, #12]	@ (801097c <pbuf_chain+0x34>)
 801096e:	4804      	ldr	r0, [pc, #16]	@ (8010980 <pbuf_chain+0x38>)
}
 8010970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010974:	f005 bda2 	b.w	80164bc <iprintf>
 8010978:	0801af68 	.word	0x0801af68
 801097c:	0801b0c8 	.word	0x0801b0c8
 8010980:	080187f8 	.word	0x080187f8

08010984 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010988:	2800      	cmp	r0, #0
 801098a:	f000 80ad 	beq.w	8010ae8 <pbuf_copy+0x164>
 801098e:	fab1 f581 	clz	r5, r1
 8010992:	460e      	mov	r6, r1
 8010994:	096d      	lsrs	r5, r5, #5
 8010996:	2900      	cmp	r1, #0
 8010998:	f000 80a6 	beq.w	8010ae8 <pbuf_copy+0x164>
 801099c:	8902      	ldrh	r2, [r0, #8]
 801099e:	4604      	mov	r4, r0
 80109a0:	890b      	ldrh	r3, [r1, #8]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	f0c0 80a0 	bcc.w	8010ae8 <pbuf_copy+0x164>
 80109a8:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 80109aa:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80109ac:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 8010afc <pbuf_copy+0x178>
 80109b0:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 8010b10 <pbuf_copy+0x18c>
 80109b4:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8010b04 <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80109b8:	8973      	ldrh	r3, [r6, #10]
 80109ba:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80109be:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80109c0:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80109c2:	6871      	ldr	r1, [r6, #4]
 80109c4:	4438      	add	r0, r7
 80109c6:	459b      	cmp	fp, r3
 80109c8:	4429      	add	r1, r5
 80109ca:	bf28      	it	cs
 80109cc:	469b      	movcs	fp, r3
 80109ce:	465a      	mov	r2, fp
    offset_to += len;
 80109d0:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80109d2:	f005 ffa0 	bl	8016916 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80109d6:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 80109d8:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80109da:	42bb      	cmp	r3, r7
 80109dc:	d328      	bcc.n	8010a30 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80109de:	8973      	ldrh	r3, [r6, #10]
 80109e0:	42ab      	cmp	r3, r5
 80109e2:	d31c      	bcc.n	8010a1e <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80109e4:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 80109e6:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 80109e8:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 80109ea:	d90c      	bls.n	8010a06 <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 80109ec:	4297      	cmp	r7, r2
 80109ee:	d027      	beq.n	8010a40 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80109f0:	8931      	ldrh	r1, [r6, #8]
 80109f2:	4299      	cmp	r1, r3
 80109f4:	d053      	beq.n	8010a9e <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80109f6:	8923      	ldrh	r3, [r4, #8]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d1dd      	bne.n	80109b8 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d137      	bne.n	8010a72 <pbuf_copy+0xee>
 8010a02:	8962      	ldrh	r2, [r4, #10]
 8010a04:	e7d8      	b.n	80109b8 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 8010a06:	4297      	cmp	r7, r2
      p_from = p_from->next;
 8010a08:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 8010a0a:	d025      	beq.n	8010a58 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a0c:	2e00      	cmp	r6, #0
 8010a0e:	d138      	bne.n	8010a82 <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010a10:	8923      	ldrh	r3, [r4, #8]
 8010a12:	428b      	cmp	r3, r1
 8010a14:	d02a      	beq.n	8010a6c <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010a16:	2400      	movs	r4, #0
}
 8010a18:	4620      	mov	r0, r4
 8010a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010a1e:	464b      	mov	r3, r9
 8010a20:	f240 32da 	movw	r2, #986	@ 0x3da
 8010a24:	4934      	ldr	r1, [pc, #208]	@ (8010af8 <pbuf_copy+0x174>)
 8010a26:	4640      	mov	r0, r8
 8010a28:	f005 fd48 	bl	80164bc <iprintf>
    if (offset_from >= p_from->len) {
 8010a2c:	8973      	ldrh	r3, [r6, #10]
 8010a2e:	e7d9      	b.n	80109e4 <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010a30:	464b      	mov	r3, r9
 8010a32:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010a36:	4651      	mov	r1, sl
 8010a38:	4640      	mov	r0, r8
 8010a3a:	f005 fd3f 	bl	80164bc <iprintf>
 8010a3e:	e7ce      	b.n	80109de <pbuf_copy+0x5a>
      p_to = p_to->next;
 8010a40:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010a42:	2c00      	cmp	r4, #0
 8010a44:	d044      	beq.n	8010ad0 <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a46:	8932      	ldrh	r2, [r6, #8]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d136      	bne.n	8010aba <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010a4c:	6833      	ldr	r3, [r6, #0]
 8010a4e:	bb43      	cbnz	r3, 8010aa2 <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010a50:	2c00      	cmp	r4, #0
 8010a52:	d132      	bne.n	8010aba <pbuf_copy+0x136>
 8010a54:	4627      	mov	r7, r4
 8010a56:	e7d4      	b.n	8010a02 <pbuf_copy+0x7e>
      p_to = p_to->next;
 8010a58:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010a5a:	b9c4      	cbnz	r4, 8010a8e <pbuf_copy+0x10a>
 8010a5c:	2e00      	cmp	r6, #0
 8010a5e:	d137      	bne.n	8010ad0 <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010a60:	2c00      	cmp	r4, #0
 8010a62:	d0d9      	beq.n	8010a18 <pbuf_copy+0x94>
 8010a64:	8961      	ldrh	r1, [r4, #10]
 8010a66:	8923      	ldrh	r3, [r4, #8]
 8010a68:	428b      	cmp	r3, r1
 8010a6a:	d1d4      	bne.n	8010a16 <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010a6c:	6824      	ldr	r4, [r4, #0]
 8010a6e:	2c00      	cmp	r4, #0
 8010a70:	d0d2      	beq.n	8010a18 <pbuf_copy+0x94>
 8010a72:	4b22      	ldr	r3, [pc, #136]	@ (8010afc <pbuf_copy+0x178>)
 8010a74:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010a78:	4921      	ldr	r1, [pc, #132]	@ (8010b00 <pbuf_copy+0x17c>)
 8010a7a:	4822      	ldr	r0, [pc, #136]	@ (8010b04 <pbuf_copy+0x180>)
 8010a7c:	f005 fd1e 	bl	80164bc <iprintf>
 8010a80:	e016      	b.n	8010ab0 <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a82:	8971      	ldrh	r1, [r6, #10]
 8010a84:	8933      	ldrh	r3, [r6, #8]
 8010a86:	4299      	cmp	r1, r3
 8010a88:	d01e      	beq.n	8010ac8 <pbuf_copy+0x144>
      offset_from = 0;
 8010a8a:	2500      	movs	r5, #0
 8010a8c:	e7b3      	b.n	80109f6 <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a8e:	2e00      	cmp	r6, #0
 8010a90:	d0e6      	beq.n	8010a60 <pbuf_copy+0xdc>
 8010a92:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 8010a94:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010a96:	8973      	ldrh	r3, [r6, #10]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d1d9      	bne.n	8010a50 <pbuf_copy+0xcc>
 8010a9c:	e7d6      	b.n	8010a4c <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010a9e:	6833      	ldr	r3, [r6, #0]
 8010aa0:	b163      	cbz	r3, 8010abc <pbuf_copy+0x138>
 8010aa2:	4b16      	ldr	r3, [pc, #88]	@ (8010afc <pbuf_copy+0x178>)
 8010aa4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010aa8:	4915      	ldr	r1, [pc, #84]	@ (8010b00 <pbuf_copy+0x17c>)
 8010aaa:	4816      	ldr	r0, [pc, #88]	@ (8010b04 <pbuf_copy+0x180>)
 8010aac:	f005 fd06 	bl	80164bc <iprintf>
 8010ab0:	f06f 0405 	mvn.w	r4, #5
}
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aba:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010abc:	8923      	ldrh	r3, [r4, #8]
 8010abe:	8962      	ldrh	r2, [r4, #10]
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	f47f af79 	bne.w	80109b8 <pbuf_copy+0x34>
 8010ac6:	e799      	b.n	80109fc <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010ac8:	6835      	ldr	r5, [r6, #0]
 8010aca:	2d00      	cmp	r5, #0
 8010acc:	d093      	beq.n	80109f6 <pbuf_copy+0x72>
 8010ace:	e7e8      	b.n	8010aa2 <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <pbuf_copy+0x178>)
 8010ad2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010ad6:	490c      	ldr	r1, [pc, #48]	@ (8010b08 <pbuf_copy+0x184>)
 8010ad8:	480a      	ldr	r0, [pc, #40]	@ (8010b04 <pbuf_copy+0x180>)
 8010ada:	f005 fcef 	bl	80164bc <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010ade:	f06f 040f 	mvn.w	r4, #15
}
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010ae8:	4b04      	ldr	r3, [pc, #16]	@ (8010afc <pbuf_copy+0x178>)
 8010aea:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010aee:	4907      	ldr	r1, [pc, #28]	@ (8010b0c <pbuf_copy+0x188>)
 8010af0:	4804      	ldr	r0, [pc, #16]	@ (8010b04 <pbuf_copy+0x180>)
 8010af2:	f005 fce3 	bl	80164bc <iprintf>
 8010af6:	e7f2      	b.n	8010ade <pbuf_copy+0x15a>
 8010af8:	0801b19c 	.word	0x0801b19c
 8010afc:	0801af68 	.word	0x0801af68
 8010b00:	0801b1c8 	.word	0x0801b1c8
 8010b04:	080187f8 	.word	0x080187f8
 8010b08:	0801b1b8 	.word	0x0801b1b8
 8010b0c:	0801b154 	.word	0x0801b154
 8010b10:	0801b184 	.word	0x0801b184

08010b14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010b18:	b378      	cbz	r0, 8010b7a <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010b1a:	460f      	mov	r7, r1
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d035      	beq.n	8010b8c <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010b20:	4690      	mov	r8, r2
 8010b22:	b38a      	cbz	r2, 8010b88 <pbuf_copy_partial+0x74>
 8010b24:	4605      	mov	r5, r0
 8010b26:	4619      	mov	r1, r3
  u16_t left = 0;
 8010b28:	2600      	movs	r6, #0
 8010b2a:	e005      	b.n	8010b38 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010b2c:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010b2e:	682d      	ldr	r5, [r5, #0]
 8010b30:	f1b8 0f00 	cmp.w	r8, #0
 8010b34:	d01e      	beq.n	8010b74 <pbuf_copy_partial+0x60>
 8010b36:	b1ed      	cbz	r5, 8010b74 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010b38:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8010b3a:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8010b3e:	b119      	cbz	r1, 8010b48 <pbuf_copy_partial+0x34>
 8010b40:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 8010b42:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 8010b46:	d2f1      	bcs.n	8010b2c <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 8010b48:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010b4c:	686a      	ldr	r2, [r5, #4]
 8010b4e:	b2a4      	uxth	r4, r4
 8010b50:	4411      	add	r1, r2
 8010b52:	4544      	cmp	r4, r8
 8010b54:	bf28      	it	cs
 8010b56:	4644      	movcs	r4, r8
 8010b58:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010b5a:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8010b5c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010b60:	f005 fed9 	bl	8016916 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010b64:	b2b6      	uxth	r6, r6
      offset = 0;
 8010b66:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 8010b68:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010b6c:	682d      	ldr	r5, [r5, #0]
 8010b6e:	f1b8 0f00 	cmp.w	r8, #0
 8010b72:	d1e0      	bne.n	8010b36 <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 8010b74:	4630      	mov	r0, r6
 8010b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010b7a:	4b08      	ldr	r3, [pc, #32]	@ (8010b9c <pbuf_copy_partial+0x88>)
 8010b7c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010b80:	4907      	ldr	r1, [pc, #28]	@ (8010ba0 <pbuf_copy_partial+0x8c>)
 8010b82:	4808      	ldr	r0, [pc, #32]	@ (8010ba4 <pbuf_copy_partial+0x90>)
 8010b84:	f005 fc9a 	bl	80164bc <iprintf>
 8010b88:	2600      	movs	r6, #0
 8010b8a:	e7f3      	b.n	8010b74 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010b8c:	4b03      	ldr	r3, [pc, #12]	@ (8010b9c <pbuf_copy_partial+0x88>)
 8010b8e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010b92:	4905      	ldr	r1, [pc, #20]	@ (8010ba8 <pbuf_copy_partial+0x94>)
 8010b94:	4803      	ldr	r0, [pc, #12]	@ (8010ba4 <pbuf_copy_partial+0x90>)
 8010b96:	f005 fc91 	bl	80164bc <iprintf>
 8010b9a:	e7f5      	b.n	8010b88 <pbuf_copy_partial+0x74>
 8010b9c:	0801af68 	.word	0x0801af68
 8010ba0:	0801b1f4 	.word	0x0801b1f4
 8010ba4:	080187f8 	.word	0x080187f8
 8010ba8:	0801b214 	.word	0x0801b214

08010bac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d046      	beq.n	8010c42 <pbuf_take+0x96>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010bb4:	460f      	mov	r7, r1
 8010bb6:	2900      	cmp	r1, #0
 8010bb8:	d039      	beq.n	8010c2e <pbuf_take+0x82>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010bba:	8903      	ldrh	r3, [r0, #8]
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	4690      	mov	r8, r2
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d32a      	bcc.n	8010c1a <pbuf_take+0x6e>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010bc4:	b332      	cbz	r2, 8010c14 <pbuf_take+0x68>
  size_t total_copy_len = len;
 8010bc6:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8010bc8:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010bca:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 8010c58 <pbuf_take+0xac>
 8010bce:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010c6c <pbuf_take+0xc0>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 8010bd2:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010bd4:	19b9      	adds	r1, r7, r6
 8010bd6:	6860      	ldr	r0, [r4, #4]
 8010bd8:	42aa      	cmp	r2, r5
 8010bda:	bf28      	it	cs
 8010bdc:	462a      	movcs	r2, r5
 8010bde:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 8010be0:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010be2:	f005 fe98 	bl	8016916 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010be6:	6824      	ldr	r4, [r4, #0]
 8010be8:	ebb5 0509 	subs.w	r5, r5, r9
 8010bec:	d009      	beq.n	8010c02 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	d1ef      	bne.n	8010bd2 <pbuf_take+0x26>
 8010bf2:	465b      	mov	r3, fp
 8010bf4:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8010bf8:	4651      	mov	r1, sl
 8010bfa:	4816      	ldr	r0, [pc, #88]	@ (8010c54 <pbuf_take+0xa8>)
 8010bfc:	f005 fc5e 	bl	80164bc <iprintf>
 8010c00:	e7e7      	b.n	8010bd2 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010c02:	45b0      	cmp	r8, r6
 8010c04:	d006      	beq.n	8010c14 <pbuf_take+0x68>
 8010c06:	4b14      	ldr	r3, [pc, #80]	@ (8010c58 <pbuf_take+0xac>)
 8010c08:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8010c0c:	4913      	ldr	r1, [pc, #76]	@ (8010c5c <pbuf_take+0xb0>)
 8010c0e:	4811      	ldr	r0, [pc, #68]	@ (8010c54 <pbuf_take+0xa8>)
 8010c10:	f005 fc54 	bl	80164bc <iprintf>
  return ERR_OK;
 8010c14:	2000      	movs	r0, #0
}
 8010c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8010c58 <pbuf_take+0xac>)
 8010c1c:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8010c20:	490f      	ldr	r1, [pc, #60]	@ (8010c60 <pbuf_take+0xb4>)
 8010c22:	480c      	ldr	r0, [pc, #48]	@ (8010c54 <pbuf_take+0xa8>)
 8010c24:	f005 fc4a 	bl	80164bc <iprintf>
 8010c28:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2c:	e7f3      	b.n	8010c16 <pbuf_take+0x6a>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8010c58 <pbuf_take+0xac>)
 8010c30:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8010c34:	490b      	ldr	r1, [pc, #44]	@ (8010c64 <pbuf_take+0xb8>)
 8010c36:	4807      	ldr	r0, [pc, #28]	@ (8010c54 <pbuf_take+0xa8>)
 8010c38:	f005 fc40 	bl	80164bc <iprintf>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010c3c:	f06f 000f 	mvn.w	r0, #15
 8010c40:	e7e9      	b.n	8010c16 <pbuf_take+0x6a>
 8010c42:	4b05      	ldr	r3, [pc, #20]	@ (8010c58 <pbuf_take+0xac>)
 8010c44:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8010c48:	4907      	ldr	r1, [pc, #28]	@ (8010c68 <pbuf_take+0xbc>)
 8010c4a:	4802      	ldr	r0, [pc, #8]	@ (8010c54 <pbuf_take+0xa8>)
 8010c4c:	f005 fc36 	bl	80164bc <iprintf>
 8010c50:	e7f4      	b.n	8010c3c <pbuf_take+0x90>
 8010c52:	bf00      	nop
 8010c54:	080187f8 	.word	0x080187f8
 8010c58:	0801af68 	.word	0x0801af68
 8010c5c:	0801b2a4 	.word	0x0801b2a4
 8010c60:	0801b26c 	.word	0x0801b26c
 8010c64:	0801b250 	.word	0x0801b250
 8010c68:	0801b238 	.word	0x0801b238
 8010c6c:	0801b28c 	.word	0x0801b28c

08010c70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4615      	mov	r5, r2
 8010c74:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010c76:	8929      	ldrh	r1, [r5, #8]
 8010c78:	f7ff fcdc 	bl	8010634 <pbuf_alloc>
  if (q == NULL) {
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	b118      	cbz	r0, 8010c88 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8010c80:	4629      	mov	r1, r5
 8010c82:	f7ff fe7f 	bl	8010984 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010c86:	b908      	cbnz	r0, 8010c8c <pbuf_clone+0x1c>
  return q;
}
 8010c88:	4620      	mov	r0, r4
 8010c8a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010c8c:	4b04      	ldr	r3, [pc, #16]	@ (8010ca0 <pbuf_clone+0x30>)
 8010c8e:	f240 5224 	movw	r2, #1316	@ 0x524
 8010c92:	4904      	ldr	r1, [pc, #16]	@ (8010ca4 <pbuf_clone+0x34>)
 8010c94:	4804      	ldr	r0, [pc, #16]	@ (8010ca8 <pbuf_clone+0x38>)
 8010c96:	f005 fc11 	bl	80164bc <iprintf>
}
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	bd38      	pop	{r3, r4, r5, pc}
 8010c9e:	bf00      	nop
 8010ca0:	0801af68 	.word	0x0801af68
 8010ca4:	0801b2bc 	.word	0x0801b2bc
 8010ca8:	080187f8 	.word	0x080187f8

08010cac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010cac:	b470      	push	{r4, r5, r6}
 8010cae:	4e12      	ldr	r6, [pc, #72]	@ (8010cf8 <tcp_new_port+0x4c>)
 8010cb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8010cb4:	4d11      	ldr	r5, [pc, #68]	@ (8010cfc <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010cb6:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8010cba:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 8010cbc:	3101      	adds	r1, #1
 8010cbe:	4c10      	ldr	r4, [pc, #64]	@ (8010d00 <tcp_new_port+0x54>)
 8010cc0:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010cc2:	4561      	cmp	r1, ip
 8010cc4:	bf08      	it	eq
 8010cc6:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	b913      	cbnz	r3, 8010cd6 <tcp_new_port+0x2a>
 8010cd0:	e00b      	b.n	8010cea <tcp_new_port+0x3e>
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	b14b      	cbz	r3, 8010cea <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 8010cd6:	8ada      	ldrh	r2, [r3, #22]
 8010cd8:	428a      	cmp	r2, r1
 8010cda:	d1fa      	bne.n	8010cd2 <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010cdc:	3801      	subs	r0, #1
 8010cde:	b280      	uxth	r0, r0
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d1eb      	bne.n	8010cbc <tcp_new_port+0x10>
 8010ce4:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8010ce6:	bc70      	pop	{r4, r5, r6}
 8010ce8:	4770      	bx	lr
 8010cea:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010cec:	42ac      	cmp	r4, r5
 8010cee:	d1ec      	bne.n	8010cca <tcp_new_port+0x1e>
 8010cf0:	4608      	mov	r0, r1
 8010cf2:	8031      	strh	r1, [r6, #0]
}
 8010cf4:	bc70      	pop	{r4, r5, r6}
 8010cf6:	4770      	bx	lr
 8010cf8:	2000002c 	.word	0x2000002c
 8010cfc:	0801b990 	.word	0x0801b990
 8010d00:	0801b980 	.word	0x0801b980

08010d04 <tcp_close_shutdown_fin>:
{
 8010d04:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010d06:	4604      	mov	r4, r0
 8010d08:	b1f8      	cbz	r0, 8010d4a <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 8010d0a:	7d23      	ldrb	r3, [r4, #20]
 8010d0c:	2b04      	cmp	r3, #4
 8010d0e:	d005      	beq.n	8010d1c <tcp_close_shutdown_fin+0x18>
 8010d10:	2b07      	cmp	r3, #7
 8010d12:	d00d      	beq.n	8010d30 <tcp_close_shutdown_fin+0x2c>
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	d001      	beq.n	8010d1c <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 8010d18:	2000      	movs	r0, #0
}
 8010d1a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f003 fbfd 	bl	801451c <tcp_send_fin>
      if (err == ERR_OK) {
 8010d22:	b948      	cbnz	r0, 8010d38 <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 8010d24:	2305      	movs	r3, #5
    tcp_output(pcb);
 8010d26:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8010d28:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8010d2a:	f003 fd65 	bl	80147f8 <tcp_output>
 8010d2e:	e7f3      	b.n	8010d18 <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 8010d30:	4620      	mov	r0, r4
 8010d32:	f003 fbf3 	bl	801451c <tcp_send_fin>
      if (err == ERR_OK) {
 8010d36:	b130      	cbz	r0, 8010d46 <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 8010d38:	1c43      	adds	r3, r0, #1
 8010d3a:	d1ee      	bne.n	8010d1a <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010d3c:	8b63      	ldrh	r3, [r4, #26]
 8010d3e:	f043 0308 	orr.w	r3, r3, #8
 8010d42:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8010d44:	e7e8      	b.n	8010d18 <tcp_close_shutdown_fin+0x14>
 8010d46:	2309      	movs	r3, #9
 8010d48:	e7ed      	b.n	8010d26 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010d4a:	4b04      	ldr	r3, [pc, #16]	@ (8010d5c <tcp_close_shutdown_fin+0x58>)
 8010d4c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010d50:	4903      	ldr	r1, [pc, #12]	@ (8010d60 <tcp_close_shutdown_fin+0x5c>)
 8010d52:	4804      	ldr	r0, [pc, #16]	@ (8010d64 <tcp_close_shutdown_fin+0x60>)
 8010d54:	f005 fbb2 	bl	80164bc <iprintf>
 8010d58:	e7d7      	b.n	8010d0a <tcp_close_shutdown_fin+0x6>
 8010d5a:	bf00      	nop
 8010d5c:	0801b2d0 	.word	0x0801b2d0
 8010d60:	0801b344 	.word	0x0801b344
 8010d64:	080187f8 	.word	0x080187f8

08010d68 <tcp_init>:
{
 8010d68:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d6a:	f004 fe6f 	bl	8015a4c <rand>
 8010d6e:	4b02      	ldr	r3, [pc, #8]	@ (8010d78 <tcp_init+0x10>)
 8010d70:	4a02      	ldr	r2, [pc, #8]	@ (8010d7c <tcp_init+0x14>)
 8010d72:	4303      	orrs	r3, r0
 8010d74:	8013      	strh	r3, [r2, #0]
}
 8010d76:	bd08      	pop	{r3, pc}
 8010d78:	ffffc000 	.word	0xffffc000
 8010d7c:	2000002c 	.word	0x2000002c

08010d80 <tcp_free>:
{
 8010d80:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d82:	7d03      	ldrb	r3, [r0, #20]
{
 8010d84:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d005      	beq.n	8010d96 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8010d8a:	4621      	mov	r1, r4
 8010d8c:	2001      	movs	r0, #1
}
 8010d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8010d92:	f7ff b8f9 	b.w	800ff88 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d96:	4906      	ldr	r1, [pc, #24]	@ (8010db0 <tcp_free+0x30>)
 8010d98:	22d4      	movs	r2, #212	@ 0xd4
 8010d9a:	4b06      	ldr	r3, [pc, #24]	@ (8010db4 <tcp_free+0x34>)
 8010d9c:	4806      	ldr	r0, [pc, #24]	@ (8010db8 <tcp_free+0x38>)
 8010d9e:	f005 fb8d 	bl	80164bc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8010da2:	4621      	mov	r1, r4
 8010da4:	2001      	movs	r0, #1
}
 8010da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8010daa:	f7ff b8ed 	b.w	800ff88 <memp_free>
 8010dae:	bf00      	nop
 8010db0:	0801b350 	.word	0x0801b350
 8010db4:	0801b2d0 	.word	0x0801b2d0
 8010db8:	080187f8 	.word	0x080187f8

08010dbc <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 8010dbc:	2900      	cmp	r1, #0
{
 8010dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8010dc0:	4b25      	ldr	r3, [pc, #148]	@ (8010e58 <tcp_bind+0x9c>)
  if (ipaddr == NULL) {
 8010dc2:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 8010dc4:	bf14      	ite	ne
 8010dc6:	460e      	movne	r6, r1
 8010dc8:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d03a      	beq.n	8010e44 <tcp_bind+0x88>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010dce:	7d03      	ldrb	r3, [r0, #20]
 8010dd0:	4607      	mov	r7, r0
 8010dd2:	bb6b      	cbnz	r3, 8010e30 <tcp_bind+0x74>
  if (port == 0) {
 8010dd4:	b322      	cbz	r2, 8010e20 <tcp_bind+0x64>
 8010dd6:	4921      	ldr	r1, [pc, #132]	@ (8010e5c <tcp_bind+0xa0>)
 8010dd8:	f101 0010 	add.w	r0, r1, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010ddc:	680b      	ldr	r3, [r1, #0]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	b913      	cbnz	r3, 8010de8 <tcp_bind+0x2c>
 8010de2:	e00e      	b.n	8010e02 <tcp_bind+0x46>
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	b163      	cbz	r3, 8010e02 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 8010de8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8010dec:	4594      	cmp	ip, r2
 8010dee:	d1f9      	bne.n	8010de4 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010df0:	681c      	ldr	r4, [r3, #0]
 8010df2:	b11c      	cbz	r4, 8010dfc <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 8010df4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010df6:	b10d      	cbz	r5, 8010dfc <tcp_bind+0x40>
 8010df8:	42ac      	cmp	r4, r5
 8010dfa:	d1f3      	bne.n	8010de4 <tcp_bind+0x28>
              return ERR_USE;
 8010dfc:	f06f 0007 	mvn.w	r0, #7
}
 8010e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e02:	3104      	adds	r1, #4
    for (i = 0; i < max_pcb_list; i++) {
 8010e04:	4281      	cmp	r1, r0
 8010e06:	d1e9      	bne.n	8010ddc <tcp_bind+0x20>
  if (!ip_addr_isany(ipaddr)
 8010e08:	6833      	ldr	r3, [r6, #0]
 8010e0a:	b103      	cbz	r3, 8010e0e <tcp_bind+0x52>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010e0c:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010e0e:	4b14      	ldr	r3, [pc, #80]	@ (8010e60 <tcp_bind+0xa4>)
  pcb->local_port = port;
 8010e10:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	601f      	str	r7, [r3, #0]
 8010e16:	60fa      	str	r2, [r7, #12]
 8010e18:	f004 f808 	bl	8014e2c <tcp_timer_needed>
  return ERR_OK;
 8010e1c:	2000      	movs	r0, #0
}
 8010e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8010e20:	f7ff ff44 	bl	8010cac <tcp_new_port>
    if (port == 0) {
 8010e24:	4602      	mov	r2, r0
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d1ee      	bne.n	8010e08 <tcp_bind+0x4c>
      return ERR_BUF;
 8010e2a:	f06f 0001 	mvn.w	r0, #1
}
 8010e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010e30:	4b0c      	ldr	r3, [pc, #48]	@ (8010e64 <tcp_bind+0xa8>)
 8010e32:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010e36:	490c      	ldr	r1, [pc, #48]	@ (8010e68 <tcp_bind+0xac>)
 8010e38:	480c      	ldr	r0, [pc, #48]	@ (8010e6c <tcp_bind+0xb0>)
 8010e3a:	f005 fb3f 	bl	80164bc <iprintf>
 8010e3e:	f06f 0005 	mvn.w	r0, #5
}
 8010e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e44:	4b07      	ldr	r3, [pc, #28]	@ (8010e64 <tcp_bind+0xa8>)
 8010e46:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8010e4a:	4909      	ldr	r1, [pc, #36]	@ (8010e70 <tcp_bind+0xb4>)
 8010e4c:	4807      	ldr	r0, [pc, #28]	@ (8010e6c <tcp_bind+0xb0>)
 8010e4e:	f005 fb35 	bl	80164bc <iprintf>
 8010e52:	f06f 000f 	mvn.w	r0, #15
}
 8010e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e58:	0801a7a0 	.word	0x0801a7a0
 8010e5c:	0801b980 	.word	0x0801b980
 8010e60:	2001017c 	.word	0x2001017c
 8010e64:	0801b2d0 	.word	0x0801b2d0
 8010e68:	0801b37c 	.word	0x0801b37c
 8010e6c:	080187f8 	.word	0x080187f8
 8010e70:	0801b364 	.word	0x0801b364

08010e74 <tcp_listen_with_backlog_and_err>:
{
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010e76:	4604      	mov	r4, r0
{
 8010e78:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d05d      	beq.n	8010f3a <tcp_listen_with_backlog_and_err+0xc6>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010e7e:	7d05      	ldrb	r5, [r0, #20]
 8010e80:	2d00      	cmp	r5, #0
 8010e82:	d147      	bne.n	8010f14 <tcp_listen_with_backlog_and_err+0xa0>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010e84:	2002      	movs	r0, #2
 8010e86:	f7ff f839 	bl	800fefc <memp_malloc>
  if (lpcb == NULL) {
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d051      	beq.n	8010f34 <tcp_listen_with_backlog_and_err+0xc0>
  lpcb->callback_arg = pcb->callback_arg;
 8010e90:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 8010e92:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8010e94:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8010e96:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8010e98:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8010e9a:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8010e9c:	7d62      	ldrb	r2, [r4, #21]
 8010e9e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8010ea0:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8010ea2:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8010ea4:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8010ea6:	7ae2      	ldrb	r2, [r4, #11]
 8010ea8:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8010eaa:	7aa2      	ldrb	r2, [r4, #10]
 8010eac:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010eae:	6822      	ldr	r2, [r4, #0]
 8010eb0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8010eb2:	b99b      	cbnz	r3, 8010edc <tcp_listen_with_backlog_and_err+0x68>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010eb4:	7d23      	ldrb	r3, [r4, #20]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d020      	beq.n	8010efc <tcp_listen_with_backlog_and_err+0x88>
  memp_free(MEMP_TCP_PCB, pcb);
 8010eba:	4621      	mov	r1, r4
 8010ebc:	2001      	movs	r0, #1
 8010ebe:	f7ff f863 	bl	800ff88 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010ec2:	4b23      	ldr	r3, [pc, #140]	@ (8010f50 <tcp_listen_with_backlog_and_err+0xdc>)
  lpcb->accept = tcp_accept_null;
 8010ec4:	4923      	ldr	r1, [pc, #140]	@ (8010f54 <tcp_listen_with_backlog_and_err+0xe0>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010ec6:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8010ec8:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010eca:	60f2      	str	r2, [r6, #12]
 8010ecc:	601e      	str	r6, [r3, #0]
 8010ece:	f003 ffad 	bl	8014e2c <tcp_timer_needed>
  res = ERR_OK;
 8010ed2:	2300      	movs	r3, #0
  if (err != NULL) {
 8010ed4:	b107      	cbz	r7, 8010ed8 <tcp_listen_with_backlog_and_err+0x64>
    *err = res;
 8010ed6:	703b      	strb	r3, [r7, #0]
}
 8010ed8:	4630      	mov	r0, r6
 8010eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010edc:	4a1e      	ldr	r2, [pc, #120]	@ (8010f58 <tcp_listen_with_backlog_and_err+0xe4>)
 8010ede:	6813      	ldr	r3, [r2, #0]
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	d012      	beq.n	8010f0a <tcp_listen_with_backlog_and_err+0x96>
 8010ee4:	b12b      	cbz	r3, 8010ef2 <tcp_listen_with_backlog_and_err+0x7e>
 8010ee6:	68d9      	ldr	r1, [r3, #12]
 8010ee8:	42a1      	cmp	r1, r4
 8010eea:	d01e      	beq.n	8010f2a <tcp_listen_with_backlog_and_err+0xb6>
 8010eec:	460b      	mov	r3, r1
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d1f9      	bne.n	8010ee6 <tcp_listen_with_backlog_and_err+0x72>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010ef6:	7d23      	ldrb	r3, [r4, #20]
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d1de      	bne.n	8010eba <tcp_listen_with_backlog_and_err+0x46>
 8010efc:	4b17      	ldr	r3, [pc, #92]	@ (8010f5c <tcp_listen_with_backlog_and_err+0xe8>)
 8010efe:	22d4      	movs	r2, #212	@ 0xd4
 8010f00:	4917      	ldr	r1, [pc, #92]	@ (8010f60 <tcp_listen_with_backlog_and_err+0xec>)
 8010f02:	4818      	ldr	r0, [pc, #96]	@ (8010f64 <tcp_listen_with_backlog_and_err+0xf0>)
 8010f04:	f005 fada 	bl	80164bc <iprintf>
 8010f08:	e7d7      	b.n	8010eba <tcp_listen_with_backlog_and_err+0x46>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f0a:	68e3      	ldr	r3, [r4, #12]
 8010f0c:	6013      	str	r3, [r2, #0]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	60e3      	str	r3, [r4, #12]
 8010f12:	e7f0      	b.n	8010ef6 <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010f14:	4b11      	ldr	r3, [pc, #68]	@ (8010f5c <tcp_listen_with_backlog_and_err+0xe8>)
 8010f16:	f240 325a 	movw	r2, #858	@ 0x35a
 8010f1a:	4913      	ldr	r1, [pc, #76]	@ (8010f68 <tcp_listen_with_backlog_and_err+0xf4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8010f1c:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010f1e:	4811      	ldr	r0, [pc, #68]	@ (8010f64 <tcp_listen_with_backlog_and_err+0xf0>)
 8010f20:	f005 facc 	bl	80164bc <iprintf>
 8010f24:	f06f 030e 	mvn.w	r3, #14
 8010f28:	e7d4      	b.n	8010ed4 <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f2a:	68e2      	ldr	r2, [r4, #12]
 8010f2c:	60da      	str	r2, [r3, #12]
 8010f2e:	2300      	movs	r3, #0
 8010f30:	60e3      	str	r3, [r4, #12]
 8010f32:	e7e0      	b.n	8010ef6 <tcp_listen_with_backlog_and_err+0x82>
    res = ERR_MEM;
 8010f34:	f04f 33ff 	mov.w	r3, #4294967295
 8010f38:	e7cc      	b.n	8010ed4 <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010f3a:	4b08      	ldr	r3, [pc, #32]	@ (8010f5c <tcp_listen_with_backlog_and_err+0xe8>)
 8010f3c:	f240 3259 	movw	r2, #857	@ 0x359
 8010f40:	490a      	ldr	r1, [pc, #40]	@ (8010f6c <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8010f42:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010f44:	4807      	ldr	r0, [pc, #28]	@ (8010f64 <tcp_listen_with_backlog_and_err+0xf0>)
 8010f46:	f005 fab9 	bl	80164bc <iprintf>
 8010f4a:	f06f 030f 	mvn.w	r3, #15
 8010f4e:	e7c1      	b.n	8010ed4 <tcp_listen_with_backlog_and_err+0x60>
 8010f50:	20010178 	.word	0x20010178
 8010f54:	08011a65 	.word	0x08011a65
 8010f58:	2001017c 	.word	0x2001017c
 8010f5c:	0801b2d0 	.word	0x0801b2d0
 8010f60:	0801b350 	.word	0x0801b350
 8010f64:	080187f8 	.word	0x080187f8
 8010f68:	0801b3d4 	.word	0x0801b3d4
 8010f6c:	0801b3a4 	.word	0x0801b3a4

08010f70 <tcp_update_rcv_ann_wnd>:
{
 8010f70:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010f72:	4604      	mov	r4, r0
 8010f74:	b1c8      	cbz	r0, 8010faa <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010f76:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010f78:	f640 3c68 	movw	ip, #2920	@ 0xb68
 8010f7c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010f7e:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010f82:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010f84:	1a58      	subs	r0, r3, r1
 8010f86:	45e6      	cmp	lr, ip
 8010f88:	4410      	add	r0, r2
 8010f8a:	bf94      	ite	ls
 8010f8c:	eba0 050e 	subls.w	r5, r0, lr
 8010f90:	eba0 050c 	subhi.w	r5, r0, ip
 8010f94:	2d00      	cmp	r5, #0
 8010f96:	db01      	blt.n	8010f9c <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010f98:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010f9c:	1a53      	subs	r3, r2, r1
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	dd0b      	ble.n	8010fba <tcp_update_rcv_ann_wnd+0x4a>
 8010fa2:	2300      	movs	r3, #0
    return 0;
 8010fa4:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010fa6:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8010fa8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010faa:	4b0c      	ldr	r3, [pc, #48]	@ (8010fdc <tcp_update_rcv_ann_wnd+0x6c>)
 8010fac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010fb0:	490b      	ldr	r1, [pc, #44]	@ (8010fe0 <tcp_update_rcv_ann_wnd+0x70>)
 8010fb2:	480c      	ldr	r0, [pc, #48]	@ (8010fe4 <tcp_update_rcv_ann_wnd+0x74>)
 8010fb4:	f005 fa82 	bl	80164bc <iprintf>
 8010fb8:	e7dd      	b.n	8010f76 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010fba:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010fbc:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8010fc0:	d203      	bcs.n	8010fca <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010fc2:	b2ab      	uxth	r3, r5
    return 0;
 8010fc4:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010fc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8010fc8:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010fca:	4b04      	ldr	r3, [pc, #16]	@ (8010fdc <tcp_update_rcv_ann_wnd+0x6c>)
 8010fcc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8010fd0:	4905      	ldr	r1, [pc, #20]	@ (8010fe8 <tcp_update_rcv_ann_wnd+0x78>)
 8010fd2:	4804      	ldr	r0, [pc, #16]	@ (8010fe4 <tcp_update_rcv_ann_wnd+0x74>)
 8010fd4:	f005 fa72 	bl	80164bc <iprintf>
 8010fd8:	e7f3      	b.n	8010fc2 <tcp_update_rcv_ann_wnd+0x52>
 8010fda:	bf00      	nop
 8010fdc:	0801b2d0 	.word	0x0801b2d0
 8010fe0:	0801b40c 	.word	0x0801b40c
 8010fe4:	080187f8 	.word	0x080187f8
 8010fe8:	0801b430 	.word	0x0801b430

08010fec <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010fec:	b350      	cbz	r0, 8011044 <tcp_recved+0x58>
{
 8010fee:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010ff0:	7d03      	ldrb	r3, [r0, #20]
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d01c      	beq.n	8011034 <tcp_recved+0x48>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010ffa:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 8010ffc:	1919      	adds	r1, r3, r4
 8010ffe:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011000:	428b      	cmp	r3, r1
 8011002:	d803      	bhi.n	801100c <tcp_recved+0x20>
 8011004:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 8011008:	4299      	cmp	r1, r3
 801100a:	d901      	bls.n	8011010 <tcp_recved+0x24>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801100c:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011010:	4628      	mov	r0, r5
 8011012:	8529      	strh	r1, [r5, #40]	@ 0x28
 8011014:	f7ff ffac 	bl	8010f70 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011018:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 801101c:	4298      	cmp	r0, r3
 801101e:	d800      	bhi.n	8011022 <tcp_recved+0x36>
}
 8011020:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 8011022:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8011024:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8011026:	f043 0302 	orr.w	r3, r3, #2
 801102a:	836b      	strh	r3, [r5, #26]
}
 801102c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8011030:	f003 bbe2 	b.w	80147f8 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011034:	4b07      	ldr	r3, [pc, #28]	@ (8011054 <tcp_recved+0x68>)
 8011036:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801103a:	4907      	ldr	r1, [pc, #28]	@ (8011058 <tcp_recved+0x6c>)
 801103c:	4807      	ldr	r0, [pc, #28]	@ (801105c <tcp_recved+0x70>)
 801103e:	f005 fa3d 	bl	80164bc <iprintf>
 8011042:	e7da      	b.n	8010ffa <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011044:	4b03      	ldr	r3, [pc, #12]	@ (8011054 <tcp_recved+0x68>)
 8011046:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801104a:	4905      	ldr	r1, [pc, #20]	@ (8011060 <tcp_recved+0x74>)
 801104c:	4803      	ldr	r0, [pc, #12]	@ (801105c <tcp_recved+0x70>)
 801104e:	f005 ba35 	b.w	80164bc <iprintf>
 8011052:	bf00      	nop
 8011054:	0801b2d0 	.word	0x0801b2d0
 8011058:	0801b464 	.word	0x0801b464
 801105c:	080187f8 	.word	0x080187f8
 8011060:	0801b44c 	.word	0x0801b44c

08011064 <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 8011064:	b170      	cbz	r0, 8011084 <tcp_segs_free+0x20>
{
 8011066:	b538      	push	{r3, r4, r5, lr}
 8011068:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 801106a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801106c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801106e:	6868      	ldr	r0, [r5, #4]
 8011070:	b108      	cbz	r0, 8011076 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 8011072:	f7ff fa6f 	bl	8010554 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011076:	4629      	mov	r1, r5
 8011078:	2003      	movs	r0, #3
 801107a:	f7fe ff85 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 801107e:	2c00      	cmp	r4, #0
 8011080:	d1f3      	bne.n	801106a <tcp_segs_free+0x6>
}
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop

08011088 <tcp_seg_free>:
  if (seg != NULL) {
 8011088:	b158      	cbz	r0, 80110a2 <tcp_seg_free+0x1a>
{
 801108a:	b510      	push	{r4, lr}
 801108c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801108e:	6840      	ldr	r0, [r0, #4]
 8011090:	b108      	cbz	r0, 8011096 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8011092:	f7ff fa5f 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8011096:	4621      	mov	r1, r4
 8011098:	2003      	movs	r0, #3
  }
}
 801109a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801109e:	f7fe bf73 	b.w	800ff88 <memp_free>
 80110a2:	4770      	bx	lr

080110a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80110a4:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80110a6:	4605      	mov	r5, r0
 80110a8:	b188      	cbz	r0, 80110ce <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80110aa:	2003      	movs	r0, #3
 80110ac:	f7fe ff26 	bl	800fefc <memp_malloc>
  if (cseg == NULL) {
 80110b0:	4604      	mov	r4, r0
 80110b2:	b150      	cbz	r0, 80110ca <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80110b4:	6868      	ldr	r0, [r5, #4]
 80110b6:	6829      	ldr	r1, [r5, #0]
 80110b8:	68aa      	ldr	r2, [r5, #8]
 80110ba:	68eb      	ldr	r3, [r5, #12]
 80110bc:	6060      	str	r0, [r4, #4]
 80110be:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 80110c0:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80110c2:	60a2      	str	r2, [r4, #8]
 80110c4:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80110c6:	f7ff fbdd 	bl	8010884 <pbuf_ref>
  return cseg;
}
 80110ca:	4620      	mov	r0, r4
 80110cc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80110ce:	4b04      	ldr	r3, [pc, #16]	@ (80110e0 <tcp_seg_copy+0x3c>)
 80110d0:	f240 6282 	movw	r2, #1666	@ 0x682
 80110d4:	4903      	ldr	r1, [pc, #12]	@ (80110e4 <tcp_seg_copy+0x40>)
 80110d6:	4804      	ldr	r0, [pc, #16]	@ (80110e8 <tcp_seg_copy+0x44>)
 80110d8:	f005 f9f0 	bl	80164bc <iprintf>
 80110dc:	e7e5      	b.n	80110aa <tcp_seg_copy+0x6>
 80110de:	bf00      	nop
 80110e0:	0801b2d0 	.word	0x0801b2d0
 80110e4:	0801b48c 	.word	0x0801b48c
 80110e8:	080187f8 	.word	0x080187f8

080110ec <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80110ec:	b100      	cbz	r0, 80110f0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80110ee:	6101      	str	r1, [r0, #16]
  }
}
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop

080110f4 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80110f4:	b140      	cbz	r0, 8011108 <tcp_recv+0x14>
{
 80110f6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80110f8:	7d03      	ldrb	r3, [r0, #20]
 80110fa:	4604      	mov	r4, r0
 80110fc:	460d      	mov	r5, r1
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d003      	beq.n	801110a <tcp_recv+0x16>
    pcb->recv = recv;
 8011102:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  }
}
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801110a:	4b05      	ldr	r3, [pc, #20]	@ (8011120 <tcp_recv+0x2c>)
 801110c:	f240 72df 	movw	r2, #2015	@ 0x7df
 8011110:	4904      	ldr	r1, [pc, #16]	@ (8011124 <tcp_recv+0x30>)
 8011112:	4805      	ldr	r0, [pc, #20]	@ (8011128 <tcp_recv+0x34>)
 8011114:	f005 f9d2 	bl	80164bc <iprintf>
    pcb->recv = recv;
 8011118:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 801111c:	bd38      	pop	{r3, r4, r5, pc}
 801111e:	bf00      	nop
 8011120:	0801b2d0 	.word	0x0801b2d0
 8011124:	0801b4a8 	.word	0x0801b4a8
 8011128:	080187f8 	.word	0x080187f8

0801112c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801112c:	b140      	cbz	r0, 8011140 <tcp_sent+0x14>
{
 801112e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011130:	7d03      	ldrb	r3, [r0, #20]
 8011132:	4604      	mov	r4, r0
 8011134:	460d      	mov	r5, r1
 8011136:	2b01      	cmp	r3, #1
 8011138:	d003      	beq.n	8011142 <tcp_sent+0x16>
    pcb->sent = sent;
 801113a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011142:	4b05      	ldr	r3, [pc, #20]	@ (8011158 <tcp_sent+0x2c>)
 8011144:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8011148:	4904      	ldr	r1, [pc, #16]	@ (801115c <tcp_sent+0x30>)
 801114a:	4805      	ldr	r0, [pc, #20]	@ (8011160 <tcp_sent+0x34>)
 801114c:	f005 f9b6 	bl	80164bc <iprintf>
    pcb->sent = sent;
 8011150:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 8011154:	bd38      	pop	{r3, r4, r5, pc}
 8011156:	bf00      	nop
 8011158:	0801b2d0 	.word	0x0801b2d0
 801115c:	0801b4d0 	.word	0x0801b4d0
 8011160:	080187f8 	.word	0x080187f8

08011164 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011164:	b140      	cbz	r0, 8011178 <tcp_err+0x14>
{
 8011166:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011168:	7d03      	ldrb	r3, [r0, #20]
 801116a:	4604      	mov	r4, r0
 801116c:	460d      	mov	r5, r1
 801116e:	2b01      	cmp	r3, #1
 8011170:	d003      	beq.n	801117a <tcp_err+0x16>
    pcb->errf = err;
 8011172:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  }
}
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801117a:	4b05      	ldr	r3, [pc, #20]	@ (8011190 <tcp_err+0x2c>)
 801117c:	f640 020d 	movw	r2, #2061	@ 0x80d
 8011180:	4904      	ldr	r1, [pc, #16]	@ (8011194 <tcp_err+0x30>)
 8011182:	4805      	ldr	r0, [pc, #20]	@ (8011198 <tcp_err+0x34>)
 8011184:	f005 f99a 	bl	80164bc <iprintf>
    pcb->errf = err;
 8011188:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 801118c:	bd38      	pop	{r3, r4, r5, pc}
 801118e:	bf00      	nop
 8011190:	0801b2d0 	.word	0x0801b2d0
 8011194:	0801b4f8 	.word	0x0801b4f8
 8011198:	080187f8 	.word	0x080187f8

0801119c <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801119c:	b118      	cbz	r0, 80111a6 <tcp_accept+0xa>
 801119e:	7d03      	ldrb	r3, [r0, #20]
 80111a0:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80111a2:	bf08      	it	eq
 80111a4:	6181      	streq	r1, [r0, #24]
  }
}
 80111a6:	4770      	bx	lr

080111a8 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80111a8:	b1a8      	cbz	r0, 80111d6 <tcp_poll+0x2e>
{
 80111aa:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80111ac:	7d03      	ldrb	r3, [r0, #20]
 80111ae:	460e      	mov	r6, r1
 80111b0:	4604      	mov	r4, r0
 80111b2:	4615      	mov	r5, r2
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d003      	beq.n	80111c0 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80111b8:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80111bc:	7765      	strb	r5, [r4, #29]
}
 80111be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80111c0:	4b08      	ldr	r3, [pc, #32]	@ (80111e4 <tcp_poll+0x3c>)
 80111c2:	f640 023e 	movw	r2, #2110	@ 0x83e
 80111c6:	4908      	ldr	r1, [pc, #32]	@ (80111e8 <tcp_poll+0x40>)
 80111c8:	4808      	ldr	r0, [pc, #32]	@ (80111ec <tcp_poll+0x44>)
 80111ca:	f005 f977 	bl	80164bc <iprintf>
  pcb->poll = poll;
 80111ce:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 80111d2:	7765      	strb	r5, [r4, #29]
}
 80111d4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80111d6:	4b03      	ldr	r3, [pc, #12]	@ (80111e4 <tcp_poll+0x3c>)
 80111d8:	f640 023d 	movw	r2, #2109	@ 0x83d
 80111dc:	4904      	ldr	r1, [pc, #16]	@ (80111f0 <tcp_poll+0x48>)
 80111de:	4803      	ldr	r0, [pc, #12]	@ (80111ec <tcp_poll+0x44>)
 80111e0:	f005 b96c 	b.w	80164bc <iprintf>
 80111e4:	0801b2d0 	.word	0x0801b2d0
 80111e8:	0801b538 	.word	0x0801b538
 80111ec:	080187f8 	.word	0x080187f8
 80111f0:	0801b520 	.word	0x0801b520

080111f4 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80111f4:	2800      	cmp	r0, #0
 80111f6:	d041      	beq.n	801127c <tcp_pcb_purge+0x88>
{
 80111f8:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 80111fa:	7d03      	ldrb	r3, [r0, #20]
 80111fc:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 80111fe:	2b0a      	cmp	r3, #10
 8011200:	d001      	beq.n	8011206 <tcp_pcb_purge+0x12>
 8011202:	2b01      	cmp	r3, #1
 8011204:	d800      	bhi.n	8011208 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8011206:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8011208:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801120a:	b118      	cbz	r0, 8011214 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801120c:	f7ff f9a2 	bl	8010554 <pbuf_free>
      pcb->refused_data = NULL;
 8011210:	2300      	movs	r3, #0
 8011212:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 8011214:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 8011216:	b164      	cbz	r4, 8011232 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 8011218:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801121a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801121c:	6870      	ldr	r0, [r6, #4]
 801121e:	b108      	cbz	r0, 8011224 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 8011220:	f7ff f998 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8011224:	4631      	mov	r1, r6
 8011226:	2003      	movs	r0, #3
 8011228:	f7fe feae 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 801122c:	2c00      	cmp	r4, #0
 801122e:	d1f3      	bne.n	8011218 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8011230:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 8011232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 8011236:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 8011238:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 801123a:	b15c      	cbz	r4, 8011254 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801123c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801123e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8011240:	6870      	ldr	r0, [r6, #4]
 8011242:	b108      	cbz	r0, 8011248 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 8011244:	f7ff f986 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8011248:	4631      	mov	r1, r6
 801124a:	2003      	movs	r0, #3
 801124c:	f7fe fe9c 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8011250:	2c00      	cmp	r4, #0
 8011252:	d1f3      	bne.n	801123c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 8011254:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 8011256:	b15c      	cbz	r4, 8011270 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 8011258:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801125a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801125c:	6870      	ldr	r0, [r6, #4]
 801125e:	b108      	cbz	r0, 8011264 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 8011260:	f7ff f978 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8011264:	4631      	mov	r1, r6
 8011266:	2003      	movs	r0, #3
 8011268:	f7fe fe8e 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 801126c:	2c00      	cmp	r4, #0
 801126e:	d1f3      	bne.n	8011258 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 8011270:	2300      	movs	r3, #0
 8011272:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 8011276:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 801127a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801127c:	4b03      	ldr	r3, [pc, #12]	@ (801128c <tcp_pcb_purge+0x98>)
 801127e:	f640 0251 	movw	r2, #2129	@ 0x851
 8011282:	4903      	ldr	r1, [pc, #12]	@ (8011290 <tcp_pcb_purge+0x9c>)
 8011284:	4803      	ldr	r0, [pc, #12]	@ (8011294 <tcp_pcb_purge+0xa0>)
 8011286:	f005 b919 	b.w	80164bc <iprintf>
 801128a:	bf00      	nop
 801128c:	0801b2d0 	.word	0x0801b2d0
 8011290:	0801b558 	.word	0x0801b558
 8011294:	080187f8 	.word	0x080187f8

08011298 <tcp_slowtmr>:
{
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801129c:	4da7      	ldr	r5, [pc, #668]	@ (801153c <tcp_slowtmr+0x2a4>)
{
 801129e:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80112a0:	4ea7      	ldr	r6, [pc, #668]	@ (8011540 <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 80112a2:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80112a4:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 801156c <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 80112a8:	3301      	adds	r3, #1
 80112aa:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 80112ac:	7833      	ldrb	r3, [r6, #0]
 80112ae:	3301      	adds	r3, #1
 80112b0:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 80112b2:	4ba4      	ldr	r3, [pc, #656]	@ (8011544 <tcp_slowtmr+0x2ac>)
 80112b4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80112b6:	2c00      	cmp	r4, #0
 80112b8:	d05f      	beq.n	801137a <tcp_slowtmr+0xe2>
  prev = NULL;
 80112ba:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80112bc:	46b9      	mov	r9, r7
 80112be:	7d23      	ldrb	r3, [r4, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 80e4 	beq.w	801148e <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	f000 80ec 	beq.w	80114a4 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80112cc:	2b0a      	cmp	r3, #10
 80112ce:	f000 80f4 	beq.w	80114ba <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 80112d2:	7833      	ldrb	r3, [r6, #0]
 80112d4:	7fa2      	ldrb	r2, [r4, #30]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	f000 80fb 	beq.w	80114d2 <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80112dc:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80112de:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80112e0:	2a02      	cmp	r2, #2
 80112e2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80112e6:	f000 809e 	beq.w	8011426 <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80112ea:	2b0b      	cmp	r3, #11
 80112ec:	f240 80a2 	bls.w	8011434 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 80112f0:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 80112f4:	2a06      	cmp	r2, #6
 80112f6:	f000 80bb 	beq.w	8011470 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80112fa:	7a63      	ldrb	r3, [r4, #9]
 80112fc:	071b      	lsls	r3, r3, #28
 80112fe:	f140 8096 	bpl.w	801142e <tcp_slowtmr+0x196>
 8011302:	2a04      	cmp	r2, #4
 8011304:	d002      	beq.n	801130c <tcp_slowtmr+0x74>
 8011306:	2a07      	cmp	r2, #7
 8011308:	f040 8091 	bne.w	801142e <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801130c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8011310:	4b8d      	ldr	r3, [pc, #564]	@ (8011548 <tcp_slowtmr+0x2b0>)
 8011312:	498e      	ldr	r1, [pc, #568]	@ (801154c <tcp_slowtmr+0x2b4>)
 8011314:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011316:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011318:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801131c:	6a21      	ldr	r1, [r4, #32]
 801131e:	1a52      	subs	r2, r2, r1
 8011320:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8011324:	f240 8189 	bls.w	801163a <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 8011328:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801132c:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 8011330:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 8011334:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8011336:	b157      	cbz	r7, 801134e <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011338:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801133c:	682a      	ldr	r2, [r5, #0]
 801133e:	6a21      	ldr	r1, [r4, #32]
 8011340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011344:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 8011346:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801134a:	f080 80e7 	bcs.w	801151c <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 801134e:	7d23      	ldrb	r3, [r4, #20]
 8011350:	2b03      	cmp	r3, #3
 8011352:	f000 80c4 	beq.w	80114de <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 8011356:	2b09      	cmp	r3, #9
 8011358:	d030      	beq.n	80113bc <tcp_slowtmr+0x124>
    if (pcb_remove) {
 801135a:	f1b8 0f00 	cmp.w	r8, #0
 801135e:	d132      	bne.n	80113c6 <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 8011360:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011362:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8011364:	3301      	adds	r3, #1
      pcb = pcb->next;
 8011366:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8011368:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801136a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801136c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801136e:	f240 80bd 	bls.w	80114ec <tcp_slowtmr+0x254>
    pcb_reset = 0;
 8011372:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8011374:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8011376:	2c00      	cmp	r4, #0
 8011378:	d1a1      	bne.n	80112be <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 801137a:	4f75      	ldr	r7, [pc, #468]	@ (8011550 <tcp_slowtmr+0x2b8>)
 801137c:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 801137e:	b1d4      	cbz	r4, 80113b6 <tcp_slowtmr+0x11e>
  prev = NULL;
 8011380:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011382:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 801156c <tcp_slowtmr+0x2d4>
 8011386:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 8011570 <tcp_slowtmr+0x2d8>
 801138a:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 801155c <tcp_slowtmr+0x2c4>
 801138e:	7d23      	ldrb	r3, [r4, #20]
 8011390:	2b0a      	cmp	r3, #10
 8011392:	d006      	beq.n	80113a2 <tcp_slowtmr+0x10a>
 8011394:	4653      	mov	r3, sl
 8011396:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801139a:	4649      	mov	r1, r9
 801139c:	4640      	mov	r0, r8
 801139e:	f005 f88d 	bl	80164bc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80113a2:	682b      	ldr	r3, [r5, #0]
 80113a4:	6a22      	ldr	r2, [r4, #32]
 80113a6:	1a9b      	subs	r3, r3, r2
 80113a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80113aa:	f200 812b 	bhi.w	8011604 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 80113ae:	4626      	mov	r6, r4
 80113b0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80113b2:	2c00      	cmp	r4, #0
 80113b4:	d1eb      	bne.n	801138e <tcp_slowtmr+0xf6>
}
 80113b6:	b007      	add	sp, #28
 80113b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	6a22      	ldr	r2, [r4, #32]
 80113c0:	1a9b      	subs	r3, r3, r2
 80113c2:	2bf0      	cmp	r3, #240	@ 0xf0
 80113c4:	d9c9      	bls.n	801135a <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 80113c6:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80113c8:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 80113cc:	f7ff ff12 	bl	80111f4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80113d0:	4b5c      	ldr	r3, [pc, #368]	@ (8011544 <tcp_slowtmr+0x2ac>)
 80113d2:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80113d4:	f1b9 0f00 	cmp.w	r9, #0
 80113d8:	f000 8176 	beq.w	80116c8 <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80113dc:	42a3      	cmp	r3, r4
 80113de:	f000 819d 	beq.w	801171c <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 80113e2:	68e3      	ldr	r3, [r4, #12]
 80113e4:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 80113e8:	f1ba 0f00 	cmp.w	sl, #0
 80113ec:	f040 813f 	bne.w	801166e <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80113f0:	7d23      	ldrb	r3, [r4, #20]
 80113f2:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 80113f4:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80113f8:	f000 814b 	beq.w	8011692 <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 80113fc:	4621      	mov	r1, r4
 80113fe:	2001      	movs	r0, #1
 8011400:	f7fe fdc2 	bl	800ff88 <memp_free>
      tcp_active_pcbs_changed = 0;
 8011404:	4c53      	ldr	r4, [pc, #332]	@ (8011554 <tcp_slowtmr+0x2bc>)
 8011406:	2300      	movs	r3, #0
 8011408:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801140a:	b13f      	cbz	r7, 801141c <tcp_slowtmr+0x184>
 801140c:	f06f 010c 	mvn.w	r1, #12
 8011410:	4640      	mov	r0, r8
 8011412:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 8011414:	7823      	ldrb	r3, [r4, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	f47f af4b 	bne.w	80112b2 <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 801141c:	4654      	mov	r4, sl
  while (pcb != NULL) {
 801141e:	2c00      	cmp	r4, #0
 8011420:	f47f af4d 	bne.w	80112be <tcp_slowtmr+0x26>
 8011424:	e7a9      	b.n	801137a <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011426:	2b05      	cmp	r3, #5
 8011428:	d904      	bls.n	8011434 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 801142a:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 801142e:	f04f 0a00 	mov.w	sl, #0
 8011432:	e77f      	b.n	8011334 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 8011434:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 8011438:	f1b8 0f00 	cmp.w	r8, #0
 801143c:	f000 809a 	beq.w	8011574 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011440:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011442:	b133      	cbz	r3, 8011452 <tcp_slowtmr+0x1ba>
 8011444:	465b      	mov	r3, fp
 8011446:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801144a:	4943      	ldr	r1, [pc, #268]	@ (8011558 <tcp_slowtmr+0x2c0>)
 801144c:	4843      	ldr	r0, [pc, #268]	@ (801155c <tcp_slowtmr+0x2c4>)
 801144e:	f005 f835 	bl	80164bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011452:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011454:	2b00      	cmp	r3, #0
 8011456:	f000 8182 	beq.w	801175e <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801145a:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 801145e:	2b0b      	cmp	r3, #11
 8011460:	f240 811e 	bls.w	80116a0 <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 8011464:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 8011466:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801146a:	2a06      	cmp	r2, #6
 801146c:	f47f af45 	bne.w	80112fa <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 8011470:	8b63      	ldrh	r3, [r4, #26]
 8011472:	06da      	lsls	r2, r3, #27
 8011474:	d5db      	bpl.n	801142e <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011476:	682b      	ldr	r3, [r5, #0]
 8011478:	6a22      	ldr	r2, [r4, #32]
 801147a:	1a9b      	subs	r3, r3, r2
 801147c:	2b28      	cmp	r3, #40	@ 0x28
 801147e:	d9d6      	bls.n	801142e <tcp_slowtmr+0x196>
          ++pcb_remove;
 8011480:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 8011484:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 8011488:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801148c:	e752      	b.n	8011334 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801148e:	465b      	mov	r3, fp
 8011490:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011494:	4932      	ldr	r1, [pc, #200]	@ (8011560 <tcp_slowtmr+0x2c8>)
 8011496:	4831      	ldr	r0, [pc, #196]	@ (801155c <tcp_slowtmr+0x2c4>)
 8011498:	f005 f810 	bl	80164bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801149c:	7d23      	ldrb	r3, [r4, #20]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	f47f af14 	bne.w	80112cc <tcp_slowtmr+0x34>
 80114a4:	465b      	mov	r3, fp
 80114a6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80114aa:	492e      	ldr	r1, [pc, #184]	@ (8011564 <tcp_slowtmr+0x2cc>)
 80114ac:	482b      	ldr	r0, [pc, #172]	@ (801155c <tcp_slowtmr+0x2c4>)
 80114ae:	f005 f805 	bl	80164bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80114b2:	7d23      	ldrb	r3, [r4, #20]
 80114b4:	2b0a      	cmp	r3, #10
 80114b6:	f47f af0c 	bne.w	80112d2 <tcp_slowtmr+0x3a>
 80114ba:	465b      	mov	r3, fp
 80114bc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80114c0:	4929      	ldr	r1, [pc, #164]	@ (8011568 <tcp_slowtmr+0x2d0>)
 80114c2:	4826      	ldr	r0, [pc, #152]	@ (801155c <tcp_slowtmr+0x2c4>)
 80114c4:	f004 fffa 	bl	80164bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80114c8:	7833      	ldrb	r3, [r6, #0]
 80114ca:	7fa2      	ldrb	r2, [r4, #30]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	f47f af05 	bne.w	80112dc <tcp_slowtmr+0x44>
      continue;
 80114d2:	46a1      	mov	r9, r4
      pcb = pcb->next;
 80114d4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80114d6:	2c00      	cmp	r4, #0
 80114d8:	f47f aef1 	bne.w	80112be <tcp_slowtmr+0x26>
 80114dc:	e74d      	b.n	801137a <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114de:	682b      	ldr	r3, [r5, #0]
 80114e0:	6a22      	ldr	r2, [r4, #32]
 80114e2:	1a9b      	subs	r3, r3, r2
 80114e4:	2b28      	cmp	r3, #40	@ 0x28
 80114e6:	f63f af6e 	bhi.w	80113c6 <tcp_slowtmr+0x12e>
 80114ea:	e736      	b.n	801135a <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 80114ec:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8011554 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 80114f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 80114f4:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80114f8:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 80114fc:	b153      	cbz	r3, 8011514 <tcp_slowtmr+0x27c>
 80114fe:	4621      	mov	r1, r4
 8011500:	6920      	ldr	r0, [r4, #16]
 8011502:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8011504:	f899 3000 	ldrb.w	r3, [r9]
 8011508:	2b00      	cmp	r3, #0
 801150a:	f47f aed2 	bne.w	80112b2 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 801150e:	2800      	cmp	r0, #0
 8011510:	f47f af2f 	bne.w	8011372 <tcp_slowtmr+0xda>
          tcp_output(prev);
 8011514:	4620      	mov	r0, r4
 8011516:	f003 f96f 	bl	80147f8 <tcp_output>
 801151a:	e72a      	b.n	8011372 <tcp_slowtmr+0xda>
 801151c:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801151e:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 8011520:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 8011522:	6860      	ldr	r0, [r4, #4]
 8011524:	b108      	cbz	r0, 801152a <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 8011526:	f7ff f815 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801152a:	4621      	mov	r1, r4
 801152c:	2003      	movs	r0, #3
 801152e:	f7fe fd2b 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8011532:	2f00      	cmp	r7, #0
 8011534:	d1f3      	bne.n	801151e <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 8011536:	9c05      	ldr	r4, [sp, #20]
 8011538:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801153a:	e708      	b.n	801134e <tcp_slowtmr+0xb6>
 801153c:	20010180 	.word	0x20010180
 8011540:	2001016d 	.word	0x2001016d
 8011544:	20010174 	.word	0x20010174
 8011548:	000a4cb8 	.word	0x000a4cb8
 801154c:	10624dd3 	.word	0x10624dd3
 8011550:	20010170 	.word	0x20010170
 8011554:	2001016f 	.word	0x2001016f
 8011558:	0801b5fc 	.word	0x0801b5fc
 801155c:	080187f8 	.word	0x080187f8
 8011560:	0801b574 	.word	0x0801b574
 8011564:	0801b5a0 	.word	0x0801b5a0
 8011568:	0801b5cc 	.word	0x0801b5cc
 801156c:	0801b2d0 	.word	0x0801b2d0
 8011570:	0801b6c0 	.word	0x0801b6c0
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011574:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8011578:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 801157c:	b299      	uxth	r1, r3
 801157e:	4281      	cmp	r1, r0
 8011580:	d802      	bhi.n	8011588 <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 8011582:	3101      	adds	r1, #1
 8011584:	b20b      	sxth	r3, r1
 8011586:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011588:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 801158c:	4299      	cmp	r1, r3
 801158e:	f73f aeb1 	bgt.w	80112f4 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011592:	4620      	mov	r0, r4
 8011594:	f002 fff4 	bl	8014580 <tcp_rexmit_rto_prepare>
 8011598:	2800      	cmp	r0, #0
 801159a:	f040 80e8 	bne.w	801176e <tcp_slowtmr+0x4d6>
 801159e:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d014      	beq.n	80115ce <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80115a4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80115a8:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 80115ac:	2a0c      	cmp	r2, #12
 80115ae:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 80115b2:	bf28      	it	cs
 80115b4:	220c      	movcs	r2, #12
 80115b6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80115ba:	497a      	ldr	r1, [pc, #488]	@ (80117a4 <tcp_slowtmr+0x50c>)
 80115bc:	5c8a      	ldrb	r2, [r1, r2]
 80115be:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80115c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80115c4:	4293      	cmp	r3, r2
 80115c6:	bfa8      	it	ge
 80115c8:	4613      	movge	r3, r2
 80115ca:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80115ce:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 80115d0:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80115d2:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 80115d6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80115da:	005b      	lsls	r3, r3, #1
 80115dc:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80115de:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 80115e2:	428b      	cmp	r3, r1
 80115e4:	bf28      	it	cs
 80115e6:	460b      	movcs	r3, r1
 80115e8:	085b      	lsrs	r3, r3, #1
 80115ea:	4293      	cmp	r3, r2
 80115ec:	bf38      	it	cc
 80115ee:	4613      	movcc	r3, r2
 80115f0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 80115f4:	2300      	movs	r3, #0
 80115f6:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 80115f8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80115fc:	f003 face 	bl	8014b9c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011600:	7d22      	ldrb	r2, [r4, #20]
 8011602:	e677      	b.n	80112f4 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 8011604:	4620      	mov	r0, r4
 8011606:	f7ff fdf5 	bl	80111f4 <tcp_pcb_purge>
      if (prev != NULL) {
 801160a:	2e00      	cmp	r6, #0
 801160c:	f000 808e 	beq.w	801172c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	42a3      	cmp	r3, r4
 8011614:	f000 80b6 	beq.w	8011784 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 8011618:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801161c:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011620:	7d23      	ldrb	r3, [r4, #20]
 8011622:	2b01      	cmp	r3, #1
 8011624:	f000 8094 	beq.w	8011750 <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 8011628:	4621      	mov	r1, r4
      pcb = pcb->next;
 801162a:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801162c:	2001      	movs	r0, #1
 801162e:	f7fe fcab 	bl	800ff88 <memp_free>
  while (pcb != NULL) {
 8011632:	2c00      	cmp	r4, #0
 8011634:	f47f aeab 	bne.w	801138e <tcp_slowtmr+0xf6>
 8011638:	e6bd      	b.n	80113b6 <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801163a:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 801163e:	495a      	ldr	r1, [pc, #360]	@ (80117a8 <tcp_slowtmr+0x510>)
 8011640:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8011644:	4b59      	ldr	r3, [pc, #356]	@ (80117ac <tcp_slowtmr+0x514>)
 8011646:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801164a:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 801164e:	f67f aeee 	bls.w	801142e <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 8011652:	4620      	mov	r0, r4
 8011654:	f003 faee 	bl	8014c34 <tcp_keepalive>
        if (err == ERR_OK) {
 8011658:	2800      	cmp	r0, #0
 801165a:	f47f aee8 	bne.w	801142e <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 801165e:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 8011662:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 8011666:	3301      	adds	r3, #1
 8011668:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801166c:	e662      	b.n	8011334 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801166e:	8b23      	ldrh	r3, [r4, #24]
 8011670:	4620      	mov	r0, r4
 8011672:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011674:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011676:	9302      	str	r3, [sp, #8]
 8011678:	8ae3      	ldrh	r3, [r4, #22]
 801167a:	9301      	str	r3, [sp, #4]
 801167c:	1d23      	adds	r3, r4, #4
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	4623      	mov	r3, r4
 8011682:	f003 f83f 	bl	8014704 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011686:	7d23      	ldrb	r3, [r4, #20]
 8011688:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801168a:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801168e:	f47f aeb5 	bne.w	80113fc <tcp_slowtmr+0x164>
 8011692:	465b      	mov	r3, fp
 8011694:	22d4      	movs	r2, #212	@ 0xd4
 8011696:	4946      	ldr	r1, [pc, #280]	@ (80117b0 <tcp_slowtmr+0x518>)
 8011698:	4846      	ldr	r0, [pc, #280]	@ (80117b4 <tcp_slowtmr+0x51c>)
 801169a:	f004 ff0f 	bl	80164bc <iprintf>
 801169e:	e6ad      	b.n	80113fc <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80116a0:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80116a4:	4a44      	ldr	r2, [pc, #272]	@ (80117b8 <tcp_slowtmr+0x520>)
 80116a6:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 80116a8:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80116ac:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d216      	bcs.n	80116e2 <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 80116b4:	3301      	adds	r3, #1
 80116b6:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80116b8:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80116ba:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80116be:	d210      	bcs.n	80116e2 <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 80116c0:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 80116c2:	f04f 0800 	mov.w	r8, #0
 80116c6:	e615      	b.n	80112f4 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80116c8:	42a3      	cmp	r3, r4
 80116ca:	d006      	beq.n	80116da <tcp_slowtmr+0x442>
 80116cc:	465b      	mov	r3, fp
 80116ce:	f240 5271 	movw	r2, #1393	@ 0x571
 80116d2:	493a      	ldr	r1, [pc, #232]	@ (80117bc <tcp_slowtmr+0x524>)
 80116d4:	4837      	ldr	r0, [pc, #220]	@ (80117b4 <tcp_slowtmr+0x51c>)
 80116d6:	f004 fef1 	bl	80164bc <iprintf>
        tcp_active_pcbs = pcb->next;
 80116da:	68e3      	ldr	r3, [r4, #12]
 80116dc:	4a38      	ldr	r2, [pc, #224]	@ (80117c0 <tcp_slowtmr+0x528>)
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	e682      	b.n	80113e8 <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 80116e2:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 80116e6:	b937      	cbnz	r7, 80116f6 <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80116e8:	4620      	mov	r0, r4
 80116ea:	f003 fac9 	bl	8014c80 <tcp_zero_window_probe>
 80116ee:	b140      	cbz	r0, 8011702 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 80116f0:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 80116f2:	7d22      	ldrb	r2, [r4, #20]
 80116f4:	e5fe      	b.n	80112f4 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80116f6:	4639      	mov	r1, r7
 80116f8:	4620      	mov	r0, r4
 80116fa:	f002 fd95 	bl	8014228 <tcp_split_unsent_seg>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d048      	beq.n	8011794 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011702:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 8011706:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 801170a:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801170c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801170e:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 8011712:	bf9c      	itt	ls
 8011714:	3301      	addls	r3, #1
 8011716:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 801171a:	e5eb      	b.n	80112f4 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801171c:	4b29      	ldr	r3, [pc, #164]	@ (80117c4 <tcp_slowtmr+0x52c>)
 801171e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011722:	4929      	ldr	r1, [pc, #164]	@ (80117c8 <tcp_slowtmr+0x530>)
 8011724:	4823      	ldr	r0, [pc, #140]	@ (80117b4 <tcp_slowtmr+0x51c>)
 8011726:	f004 fec9 	bl	80164bc <iprintf>
 801172a:	e65a      	b.n	80113e2 <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	42a3      	cmp	r3, r4
 8011730:	d006      	beq.n	8011740 <tcp_slowtmr+0x4a8>
 8011732:	4b24      	ldr	r3, [pc, #144]	@ (80117c4 <tcp_slowtmr+0x52c>)
 8011734:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011738:	4924      	ldr	r1, [pc, #144]	@ (80117cc <tcp_slowtmr+0x534>)
 801173a:	481e      	ldr	r0, [pc, #120]	@ (80117b4 <tcp_slowtmr+0x51c>)
 801173c:	f004 febe 	bl	80164bc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011740:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 8011742:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011746:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 8011748:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801174c:	f47f af6c 	bne.w	8011628 <tcp_slowtmr+0x390>
 8011750:	4b1c      	ldr	r3, [pc, #112]	@ (80117c4 <tcp_slowtmr+0x52c>)
 8011752:	22d4      	movs	r2, #212	@ 0xd4
 8011754:	4916      	ldr	r1, [pc, #88]	@ (80117b0 <tcp_slowtmr+0x518>)
 8011756:	4817      	ldr	r0, [pc, #92]	@ (80117b4 <tcp_slowtmr+0x51c>)
 8011758:	f004 feb0 	bl	80164bc <iprintf>
 801175c:	e764      	b.n	8011628 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801175e:	4b19      	ldr	r3, [pc, #100]	@ (80117c4 <tcp_slowtmr+0x52c>)
 8011760:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011764:	491a      	ldr	r1, [pc, #104]	@ (80117d0 <tcp_slowtmr+0x538>)
 8011766:	4813      	ldr	r0, [pc, #76]	@ (80117b4 <tcp_slowtmr+0x51c>)
 8011768:	f004 fea8 	bl	80164bc <iprintf>
 801176c:	e675      	b.n	801145a <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 801176e:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011770:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 8011772:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011774:	2900      	cmp	r1, #0
 8011776:	f47f adbd 	bne.w	80112f4 <tcp_slowtmr+0x5c>
 801177a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801177c:	2900      	cmp	r1, #0
 801177e:	f47f af0f 	bne.w	80115a0 <tcp_slowtmr+0x308>
 8011782:	e5b7      	b.n	80112f4 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011784:	4b0f      	ldr	r3, [pc, #60]	@ (80117c4 <tcp_slowtmr+0x52c>)
 8011786:	f240 52af 	movw	r2, #1455	@ 0x5af
 801178a:	4912      	ldr	r1, [pc, #72]	@ (80117d4 <tcp_slowtmr+0x53c>)
 801178c:	4809      	ldr	r0, [pc, #36]	@ (80117b4 <tcp_slowtmr+0x51c>)
 801178e:	f004 fe95 	bl	80164bc <iprintf>
 8011792:	e741      	b.n	8011618 <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 8011794:	4620      	mov	r0, r4
 8011796:	f003 f82f 	bl	80147f8 <tcp_output>
 801179a:	2800      	cmp	r0, #0
 801179c:	d1b1      	bne.n	8011702 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 801179e:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 80117a0:	7d22      	ldrb	r2, [r4, #20]
 80117a2:	e5a7      	b.n	80112f4 <tcp_slowtmr+0x5c>
 80117a4:	0801b998 	.word	0x0801b998
 80117a8:	000124f8 	.word	0x000124f8
 80117ac:	10624dd3 	.word	0x10624dd3
 80117b0:	0801b350 	.word	0x0801b350
 80117b4:	080187f8 	.word	0x080187f8
 80117b8:	0801b990 	.word	0x0801b990
 80117bc:	0801b694 	.word	0x0801b694
 80117c0:	20010174 	.word	0x20010174
 80117c4:	0801b2d0 	.word	0x0801b2d0
 80117c8:	0801b668 	.word	0x0801b668
 80117cc:	0801b718 	.word	0x0801b718
 80117d0:	0801b630 	.word	0x0801b630
 80117d4:	0801b6f0 	.word	0x0801b6f0

080117d8 <tcp_pcb_remove>:
{
 80117d8:	b538      	push	{r3, r4, r5, lr}
 80117da:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80117dc:	460c      	mov	r4, r1
 80117de:	2900      	cmp	r1, #0
 80117e0:	d04a      	beq.n	8011878 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80117e2:	2d00      	cmp	r5, #0
 80117e4:	d051      	beq.n	801188a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 80117e6:	682b      	ldr	r3, [r5, #0]
 80117e8:	42a3      	cmp	r3, r4
 80117ea:	d032      	beq.n	8011852 <tcp_pcb_remove+0x7a>
 80117ec:	b12b      	cbz	r3, 80117fa <tcp_pcb_remove+0x22>
 80117ee:	68da      	ldr	r2, [r3, #12]
 80117f0:	42a2      	cmp	r2, r4
 80117f2:	d03e      	beq.n	8011872 <tcp_pcb_remove+0x9a>
 80117f4:	4613      	mov	r3, r2
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d1f9      	bne.n	80117ee <tcp_pcb_remove+0x16>
 80117fa:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 80117fc:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80117fe:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8011800:	f7ff fcf8 	bl	80111f4 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8011804:	7d23      	ldrb	r3, [r4, #20]
 8011806:	2b0a      	cmp	r3, #10
 8011808:	d02d      	beq.n	8011866 <tcp_pcb_remove+0x8e>
 801180a:	2b01      	cmp	r3, #1
 801180c:	d01d      	beq.n	801184a <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801180e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8011810:	07da      	lsls	r2, r3, #31
 8011812:	d421      	bmi.n	8011858 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011814:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011816:	b133      	cbz	r3, 8011826 <tcp_pcb_remove+0x4e>
 8011818:	4b20      	ldr	r3, [pc, #128]	@ (801189c <tcp_pcb_remove+0xc4>)
 801181a:	f640 0293 	movw	r2, #2195	@ 0x893
 801181e:	4920      	ldr	r1, [pc, #128]	@ (80118a0 <tcp_pcb_remove+0xc8>)
 8011820:	4820      	ldr	r0, [pc, #128]	@ (80118a4 <tcp_pcb_remove+0xcc>)
 8011822:	f004 fe4b 	bl	80164bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011826:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011828:	b133      	cbz	r3, 8011838 <tcp_pcb_remove+0x60>
 801182a:	4b1c      	ldr	r3, [pc, #112]	@ (801189c <tcp_pcb_remove+0xc4>)
 801182c:	f640 0294 	movw	r2, #2196	@ 0x894
 8011830:	491d      	ldr	r1, [pc, #116]	@ (80118a8 <tcp_pcb_remove+0xd0>)
 8011832:	481c      	ldr	r0, [pc, #112]	@ (80118a4 <tcp_pcb_remove+0xcc>)
 8011834:	f004 fe42 	bl	80164bc <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011838:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801183a:	b133      	cbz	r3, 801184a <tcp_pcb_remove+0x72>
 801183c:	4b17      	ldr	r3, [pc, #92]	@ (801189c <tcp_pcb_remove+0xc4>)
 801183e:	f640 0296 	movw	r2, #2198	@ 0x896
 8011842:	491a      	ldr	r1, [pc, #104]	@ (80118ac <tcp_pcb_remove+0xd4>)
 8011844:	4817      	ldr	r0, [pc, #92]	@ (80118a4 <tcp_pcb_remove+0xcc>)
 8011846:	f004 fe39 	bl	80164bc <iprintf>
  pcb->state = CLOSED;
 801184a:	2300      	movs	r3, #0
 801184c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801184e:	82e3      	strh	r3, [r4, #22]
}
 8011850:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8011852:	68e3      	ldr	r3, [r4, #12]
 8011854:	602b      	str	r3, [r5, #0]
 8011856:	e7d0      	b.n	80117fa <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 8011858:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801185c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801185e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8011860:	f002 ffca 	bl	80147f8 <tcp_output>
  if (pcb->state != LISTEN) {
 8011864:	7d23      	ldrb	r3, [r4, #20]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d0ef      	beq.n	801184a <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801186a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1d3      	bne.n	8011818 <tcp_pcb_remove+0x40>
 8011870:	e7d9      	b.n	8011826 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8011872:	68e2      	ldr	r2, [r4, #12]
 8011874:	60da      	str	r2, [r3, #12]
 8011876:	e7c0      	b.n	80117fa <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011878:	4b08      	ldr	r3, [pc, #32]	@ (801189c <tcp_pcb_remove+0xc4>)
 801187a:	f640 0283 	movw	r2, #2179	@ 0x883
 801187e:	490c      	ldr	r1, [pc, #48]	@ (80118b0 <tcp_pcb_remove+0xd8>)
 8011880:	4808      	ldr	r0, [pc, #32]	@ (80118a4 <tcp_pcb_remove+0xcc>)
 8011882:	f004 fe1b 	bl	80164bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011886:	2d00      	cmp	r5, #0
 8011888:	d1ad      	bne.n	80117e6 <tcp_pcb_remove+0xe>
 801188a:	4b04      	ldr	r3, [pc, #16]	@ (801189c <tcp_pcb_remove+0xc4>)
 801188c:	f640 0284 	movw	r2, #2180	@ 0x884
 8011890:	4908      	ldr	r1, [pc, #32]	@ (80118b4 <tcp_pcb_remove+0xdc>)
 8011892:	4804      	ldr	r0, [pc, #16]	@ (80118a4 <tcp_pcb_remove+0xcc>)
 8011894:	f004 fe12 	bl	80164bc <iprintf>
 8011898:	e7a5      	b.n	80117e6 <tcp_pcb_remove+0xe>
 801189a:	bf00      	nop
 801189c:	0801b2d0 	.word	0x0801b2d0
 80118a0:	0801b77c 	.word	0x0801b77c
 80118a4:	080187f8 	.word	0x080187f8
 80118a8:	0801b794 	.word	0x0801b794
 80118ac:	0801b7b0 	.word	0x0801b7b0
 80118b0:	0801b740 	.word	0x0801b740
 80118b4:	0801b75c 	.word	0x0801b75c

080118b8 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80118b8:	2800      	cmp	r0, #0
 80118ba:	f000 80ae 	beq.w	8011a1a <tcp_abandon+0x162>
{
 80118be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80118c2:	7d03      	ldrb	r3, [r0, #20]
{
 80118c4:	b087      	sub	sp, #28
 80118c6:	4605      	mov	r5, r0
 80118c8:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	f000 808c 	beq.w	80119e8 <tcp_abandon+0x130>
  if (pcb->state == TIME_WAIT) {
 80118d0:	2b0a      	cmp	r3, #10
 80118d2:	f000 8094 	beq.w	80119fe <tcp_abandon+0x146>
    seqno = pcb->snd_nxt;
 80118d6:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 80118d8:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 80118dc:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 80118e0:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 80118e4:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 80118e8:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d144      	bne.n	8011978 <tcp_abandon+0xc0>
      if (pcb->local_port != 0) {
 80118ee:	f1b8 0f00 	cmp.w	r8, #0
 80118f2:	d149      	bne.n	8011988 <tcp_abandon+0xd0>
    u16_t local_port = 0;
 80118f4:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 80118f8:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 80118fa:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 80118fc:	b164      	cbz	r4, 8011918 <tcp_abandon+0x60>
      pbuf_free(seg->p);
 80118fe:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8011900:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8011902:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011906:	b108      	cbz	r0, 801190c <tcp_abandon+0x54>
      pbuf_free(seg->p);
 8011908:	f7fe fe24 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801190c:	4651      	mov	r1, sl
 801190e:	2003      	movs	r0, #3
 8011910:	f7fe fb3a 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8011914:	2c00      	cmp	r4, #0
 8011916:	d1f2      	bne.n	80118fe <tcp_abandon+0x46>
    if (pcb->unsent != NULL) {
 8011918:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 801191a:	b164      	cbz	r4, 8011936 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 801191c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801191e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8011920:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011924:	b108      	cbz	r0, 801192a <tcp_abandon+0x72>
      pbuf_free(seg->p);
 8011926:	f7fe fe15 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801192a:	4651      	mov	r1, sl
 801192c:	2003      	movs	r0, #3
 801192e:	f7fe fb2b 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8011932:	2c00      	cmp	r4, #0
 8011934:	d1f2      	bne.n	801191c <tcp_abandon+0x64>
    if (pcb->ooseq != NULL) {
 8011936:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 8011938:	b164      	cbz	r4, 8011954 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 801193a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801193c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801193e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011942:	b108      	cbz	r0, 8011948 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 8011944:	f7fe fe06 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8011948:	4651      	mov	r1, sl
 801194a:	2003      	movs	r0, #3
 801194c:	f7fe fb1c 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8011950:	2c00      	cmp	r4, #0
 8011952:	d1f2      	bne.n	801193a <tcp_abandon+0x82>
    if (send_rst) {
 8011954:	bb3e      	cbnz	r6, 80119a6 <tcp_abandon+0xee>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011956:	7d2b      	ldrb	r3, [r5, #20]
 8011958:	2b01      	cmp	r3, #1
 801195a:	d033      	beq.n	80119c4 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 801195c:	4629      	mov	r1, r5
 801195e:	2001      	movs	r0, #1
 8011960:	f7fe fb12 	bl	800ff88 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011964:	2f00      	cmp	r7, #0
 8011966:	d039      	beq.n	80119dc <tcp_abandon+0x124>
 8011968:	f06f 010c 	mvn.w	r1, #12
 801196c:	4648      	mov	r0, r9
 801196e:	463b      	mov	r3, r7
}
 8011970:	b007      	add	sp, #28
 8011972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011976:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011978:	4629      	mov	r1, r5
 801197a:	482f      	ldr	r0, [pc, #188]	@ (8011a38 <tcp_abandon+0x180>)
 801197c:	f7ff ff2c 	bl	80117d8 <tcp_pcb_remove>
 8011980:	4b2e      	ldr	r3, [pc, #184]	@ (8011a3c <tcp_abandon+0x184>)
 8011982:	2201      	movs	r2, #1
 8011984:	701a      	strb	r2, [r3, #0]
 8011986:	e7b8      	b.n	80118fa <tcp_abandon+0x42>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011988:	4a2d      	ldr	r2, [pc, #180]	@ (8011a40 <tcp_abandon+0x188>)
 801198a:	6813      	ldr	r3, [r2, #0]
 801198c:	42ab      	cmp	r3, r5
 801198e:	d028      	beq.n	80119e2 <tcp_abandon+0x12a>
 8011990:	b133      	cbz	r3, 80119a0 <tcp_abandon+0xe8>
 8011992:	68da      	ldr	r2, [r3, #12]
 8011994:	42aa      	cmp	r2, r5
 8011996:	d001      	beq.n	801199c <tcp_abandon+0xe4>
 8011998:	4613      	mov	r3, r2
 801199a:	e7f9      	b.n	8011990 <tcp_abandon+0xd8>
 801199c:	68ea      	ldr	r2, [r5, #12]
 801199e:	60da      	str	r2, [r3, #12]
 80119a0:	2300      	movs	r3, #0
 80119a2:	60eb      	str	r3, [r5, #12]
 80119a4:	e7a6      	b.n	80118f4 <tcp_abandon+0x3c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80119a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80119aa:	465a      	mov	r2, fp
 80119ac:	8b2b      	ldrh	r3, [r5, #24]
 80119ae:	4628      	mov	r0, r5
 80119b0:	9905      	ldr	r1, [sp, #20]
 80119b2:	9302      	str	r3, [sp, #8]
 80119b4:	1d2b      	adds	r3, r5, #4
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	462b      	mov	r3, r5
 80119ba:	f002 fea3 	bl	8014704 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80119be:	7d2b      	ldrb	r3, [r5, #20]
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d1cb      	bne.n	801195c <tcp_abandon+0xa4>
 80119c4:	491f      	ldr	r1, [pc, #124]	@ (8011a44 <tcp_abandon+0x18c>)
 80119c6:	22d4      	movs	r2, #212	@ 0xd4
 80119c8:	4b1f      	ldr	r3, [pc, #124]	@ (8011a48 <tcp_abandon+0x190>)
 80119ca:	4820      	ldr	r0, [pc, #128]	@ (8011a4c <tcp_abandon+0x194>)
 80119cc:	f004 fd76 	bl	80164bc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 80119d0:	4629      	mov	r1, r5
 80119d2:	2001      	movs	r0, #1
 80119d4:	f7fe fad8 	bl	800ff88 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80119d8:	2f00      	cmp	r7, #0
 80119da:	d1c5      	bne.n	8011968 <tcp_abandon+0xb0>
}
 80119dc:	b007      	add	sp, #28
 80119de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80119e2:	68eb      	ldr	r3, [r5, #12]
 80119e4:	6013      	str	r3, [r2, #0]
 80119e6:	e7db      	b.n	80119a0 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80119e8:	4b17      	ldr	r3, [pc, #92]	@ (8011a48 <tcp_abandon+0x190>)
 80119ea:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80119ee:	4918      	ldr	r1, [pc, #96]	@ (8011a50 <tcp_abandon+0x198>)
 80119f0:	4816      	ldr	r0, [pc, #88]	@ (8011a4c <tcp_abandon+0x194>)
 80119f2:	f004 fd63 	bl	80164bc <iprintf>
  if (pcb->state == TIME_WAIT) {
 80119f6:	7d2b      	ldrb	r3, [r5, #20]
 80119f8:	2b0a      	cmp	r3, #10
 80119fa:	f47f af6c 	bne.w	80118d6 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80119fe:	4629      	mov	r1, r5
 8011a00:	4814      	ldr	r0, [pc, #80]	@ (8011a54 <tcp_abandon+0x19c>)
 8011a02:	f7ff fee9 	bl	80117d8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a06:	7d2b      	ldrb	r3, [r5, #20]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d00d      	beq.n	8011a28 <tcp_abandon+0x170>
  memp_free(MEMP_TCP_PCB, pcb);
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	2001      	movs	r0, #1
}
 8011a10:	b007      	add	sp, #28
 8011a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8011a16:	f7fe bab7 	b.w	800ff88 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8011a48 <tcp_abandon+0x190>)
 8011a1c:	f240 223d 	movw	r2, #573	@ 0x23d
 8011a20:	490d      	ldr	r1, [pc, #52]	@ (8011a58 <tcp_abandon+0x1a0>)
 8011a22:	480a      	ldr	r0, [pc, #40]	@ (8011a4c <tcp_abandon+0x194>)
 8011a24:	f004 bd4a 	b.w	80164bc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a28:	4b07      	ldr	r3, [pc, #28]	@ (8011a48 <tcp_abandon+0x190>)
 8011a2a:	22d4      	movs	r2, #212	@ 0xd4
 8011a2c:	4905      	ldr	r1, [pc, #20]	@ (8011a44 <tcp_abandon+0x18c>)
 8011a2e:	4807      	ldr	r0, [pc, #28]	@ (8011a4c <tcp_abandon+0x194>)
 8011a30:	f004 fd44 	bl	80164bc <iprintf>
 8011a34:	e7ea      	b.n	8011a0c <tcp_abandon+0x154>
 8011a36:	bf00      	nop
 8011a38:	20010174 	.word	0x20010174
 8011a3c:	2001016f 	.word	0x2001016f
 8011a40:	2001017c 	.word	0x2001017c
 8011a44:	0801b350 	.word	0x0801b350
 8011a48:	0801b2d0 	.word	0x0801b2d0
 8011a4c:	080187f8 	.word	0x080187f8
 8011a50:	0801b7e4 	.word	0x0801b7e4
 8011a54:	20010170 	.word	0x20010170
 8011a58:	0801b7c8 	.word	0x0801b7c8

08011a5c <tcp_abort>:
  tcp_abandon(pcb, 1);
 8011a5c:	2101      	movs	r1, #1
 8011a5e:	f7ff bf2b 	b.w	80118b8 <tcp_abandon>
 8011a62:	bf00      	nop

08011a64 <tcp_accept_null>:
{
 8011a64:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011a66:	460c      	mov	r4, r1
 8011a68:	b131      	cbz	r1, 8011a78 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	2101      	movs	r1, #1
 8011a6e:	f7ff ff23 	bl	80118b8 <tcp_abandon>
}
 8011a72:	f06f 000c 	mvn.w	r0, #12
 8011a76:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011a78:	4b06      	ldr	r3, [pc, #24]	@ (8011a94 <tcp_accept_null+0x30>)
 8011a7a:	f240 320f 	movw	r2, #783	@ 0x30f
 8011a7e:	4906      	ldr	r1, [pc, #24]	@ (8011a98 <tcp_accept_null+0x34>)
 8011a80:	4806      	ldr	r0, [pc, #24]	@ (8011a9c <tcp_accept_null+0x38>)
 8011a82:	f004 fd1b 	bl	80164bc <iprintf>
  tcp_abandon(pcb, 1);
 8011a86:	4620      	mov	r0, r4
 8011a88:	2101      	movs	r1, #1
 8011a8a:	f7ff ff15 	bl	80118b8 <tcp_abandon>
}
 8011a8e:	f06f 000c 	mvn.w	r0, #12
 8011a92:	bd10      	pop	{r4, pc}
 8011a94:	0801b2d0 	.word	0x0801b2d0
 8011a98:	0801b818 	.word	0x0801b818
 8011a9c:	080187f8 	.word	0x080187f8

08011aa0 <tcp_netif_ip_addr_changed_pcblist>:
{
 8011aa0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011aa2:	4605      	mov	r5, r0
{
 8011aa4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011aa6:	b160      	cbz	r0, 8011ac2 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 8011aa8:	b154      	cbz	r4, 8011ac0 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011aaa:	6822      	ldr	r2, [r4, #0]
 8011aac:	4620      	mov	r0, r4
 8011aae:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 8011ab0:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d1f8      	bne.n	8011aa8 <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 8011ab6:	2101      	movs	r1, #1
 8011ab8:	f7ff fefe 	bl	80118b8 <tcp_abandon>
  while (pcb != NULL) {
 8011abc:	2c00      	cmp	r4, #0
 8011abe:	d1f4      	bne.n	8011aaa <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8011ac0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011ac2:	4b04      	ldr	r3, [pc, #16]	@ (8011ad4 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8011ac4:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011ac8:	4903      	ldr	r1, [pc, #12]	@ (8011ad8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8011aca:	4804      	ldr	r0, [pc, #16]	@ (8011adc <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8011acc:	f004 fcf6 	bl	80164bc <iprintf>
 8011ad0:	e7ea      	b.n	8011aa8 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8011ad2:	bf00      	nop
 8011ad4:	0801b2d0 	.word	0x0801b2d0
 8011ad8:	0801b838 	.word	0x0801b838
 8011adc:	080187f8 	.word	0x080187f8

08011ae0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ae0:	4b10      	ldr	r3, [pc, #64]	@ (8011b24 <tcp_kill_state+0x44>)
 8011ae2:	6819      	ldr	r1, [r3, #0]
 8011ae4:	b1e9      	cbz	r1, 8011b22 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011ae6:	4b10      	ldr	r3, [pc, #64]	@ (8011b28 <tcp_kill_state+0x48>)
  inactivity = 0;
 8011ae8:	f04f 0c00 	mov.w	ip, #0
 8011aec:	4602      	mov	r2, r0
  inactive = NULL;
 8011aee:	4660      	mov	r0, ip
{
 8011af0:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011af2:	681c      	ldr	r4, [r3, #0]
 8011af4:	e001      	b.n	8011afa <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011af6:	68c9      	ldr	r1, [r1, #12]
 8011af8:	b159      	cbz	r1, 8011b12 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 8011afa:	7d0b      	ldrb	r3, [r1, #20]
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d1fa      	bne.n	8011af6 <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b00:	6a0b      	ldr	r3, [r1, #32]
 8011b02:	1ae3      	subs	r3, r4, r3
 8011b04:	459c      	cmp	ip, r3
 8011b06:	d8f6      	bhi.n	8011af6 <tcp_kill_state+0x16>
 8011b08:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b0a:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b0c:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b0e:	2900      	cmp	r1, #0
 8011b10:	d1f3      	bne.n	8011afa <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8011b12:	b118      	cbz	r0, 8011b1c <tcp_kill_state+0x3c>
}
 8011b14:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 8011b18:	f7ff bece 	b.w	80118b8 <tcp_abandon>
}
 8011b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b20:	4770      	bx	lr
 8011b22:	4770      	bx	lr
 8011b24:	20010174 	.word	0x20010174
 8011b28:	20010180 	.word	0x20010180

08011b2c <tcp_alloc>:
{
 8011b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b30:	2001      	movs	r0, #1
 8011b32:	f7fe f9e3 	bl	800fefc <memp_malloc>
  if (pcb == NULL) {
 8011b36:	4604      	mov	r4, r0
 8011b38:	b318      	cbz	r0, 8011b82 <tcp_alloc+0x56>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011b3a:	229c      	movs	r2, #156	@ 0x9c
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f004 fe4e 	bl	80167e0 <memset>
    pcb->tmr = tcp_ticks;
 8011b44:	4b42      	ldr	r3, [pc, #264]	@ (8011c50 <tcp_alloc+0x124>)
    pcb->last_timer = tcp_timer_ctr;
 8011b46:	4943      	ldr	r1, [pc, #268]	@ (8011c54 <tcp_alloc+0x128>)
    pcb->snd_buf = TCP_SND_BUF;
 8011b48:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 8011b4c:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011b4e:	4b42      	ldr	r3, [pc, #264]	@ (8011c58 <tcp_alloc+0x12c>)
    pcb->last_timer = tcp_timer_ctr;
 8011b50:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 8011b52:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011b54:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011b56:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 8011b58:	4a40      	ldr	r2, [pc, #256]	@ (8011c5c <tcp_alloc+0x130>)
    pcb->snd_buf = TCP_SND_BUF;
 8011b5a:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 8011b5e:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 8011b60:	483f      	ldr	r0, [pc, #252]	@ (8011c60 <tcp_alloc+0x134>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011b62:	4940      	ldr	r1, [pc, #256]	@ (8011c64 <tcp_alloc+0x138>)
    pcb->cwnd = 1;
 8011b64:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011b66:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 8011b6a:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 8011b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8011c68 <tcp_alloc+0x13c>)
    pcb->prio = prio;
 8011b6e:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 8011b70:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011b74:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011b78:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 8011b7c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8011b7e:	4620      	mov	r0, r4
 8011b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011b82:	4f3a      	ldr	r7, [pc, #232]	@ (8011c6c <tcp_alloc+0x140>)
 8011b84:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 8011b86:	b15d      	cbz	r5, 8011ba0 <tcp_alloc+0x74>
    struct tcp_pcb *next = pcb->next;
 8011b88:	4628      	mov	r0, r5
 8011b8a:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8011b8c:	8b43      	ldrh	r3, [r0, #26]
 8011b8e:	071a      	lsls	r2, r3, #28
 8011b90:	d5f9      	bpl.n	8011b86 <tcp_alloc+0x5a>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b92:	f023 0308 	bic.w	r3, r3, #8
 8011b96:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8011b98:	f7ff f8b4 	bl	8010d04 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8011b9c:	2d00      	cmp	r5, #0
 8011b9e:	d1f3      	bne.n	8011b88 <tcp_alloc+0x5c>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ba0:	4b33      	ldr	r3, [pc, #204]	@ (8011c70 <tcp_alloc+0x144>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	b183      	cbz	r3, 8011bc8 <tcp_alloc+0x9c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8011c50 <tcp_alloc+0x124>)
  inactivity = 0;
 8011ba8:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011baa:	6810      	ldr	r0, [r2, #0]
 8011bac:	6a1a      	ldr	r2, [r3, #32]
 8011bae:	1a82      	subs	r2, r0, r2
 8011bb0:	428a      	cmp	r2, r1
 8011bb2:	d301      	bcc.n	8011bb8 <tcp_alloc+0x8c>
 8011bb4:	461c      	mov	r4, r3
 8011bb6:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1f6      	bne.n	8011bac <tcp_alloc+0x80>
  if (inactive != NULL) {
 8011bbe:	b11c      	cbz	r4, 8011bc8 <tcp_alloc+0x9c>
  tcp_abandon(pcb, 1);
 8011bc0:	2101      	movs	r1, #1
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f7ff fe78 	bl	80118b8 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bc8:	2001      	movs	r0, #1
 8011bca:	f7fe f997 	bl	800fefc <memp_malloc>
    if (pcb == NULL) {
 8011bce:	4604      	mov	r4, r0
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d1b2      	bne.n	8011b3a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8011bd4:	2009      	movs	r0, #9
 8011bd6:	f7ff ff83 	bl	8011ae0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bda:	2001      	movs	r0, #1
 8011bdc:	f7fe f98e 	bl	800fefc <memp_malloc>
      if (pcb == NULL) {
 8011be0:	4604      	mov	r4, r0
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d1a9      	bne.n	8011b3a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8011be6:	2008      	movs	r0, #8
 8011be8:	f7ff ff7a 	bl	8011ae0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bec:	2001      	movs	r0, #1
 8011bee:	f7fe f985 	bl	800fefc <memp_malloc>
        if (pcb == NULL) {
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d1a0      	bne.n	8011b3a <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011bf8:	0633      	lsls	r3, r6, #24
 8011bfa:	d426      	bmi.n	8011c4a <tcp_alloc+0x11e>
  if (mprio == 0) {
 8011bfc:	b1ee      	cbz	r6, 8011c3a <tcp_alloc+0x10e>
 8011bfe:	4633      	mov	r3, r6
  mprio--;
 8011c00:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c02:	683b      	ldr	r3, [r7, #0]
  mprio--;
 8011c04:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c06:	b1c3      	cbz	r3, 8011c3a <tcp_alloc+0x10e>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c08:	4911      	ldr	r1, [pc, #68]	@ (8011c50 <tcp_alloc+0x124>)
  inactivity = 0;
 8011c0a:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c0c:	680f      	ldr	r7, [r1, #0]
 8011c0e:	e005      	b.n	8011c1c <tcp_alloc+0xf0>
 8011c10:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8011c12:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 8011c14:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8011c16:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	b14b      	cbz	r3, 8011c30 <tcp_alloc+0x104>
    if ((pcb->prio < mprio) ||
 8011c1c:	7d59      	ldrb	r1, [r3, #21]
 8011c1e:	428a      	cmp	r2, r1
 8011c20:	d8f6      	bhi.n	8011c10 <tcp_alloc+0xe4>
 8011c22:	d1f9      	bne.n	8011c18 <tcp_alloc+0xec>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c24:	6a18      	ldr	r0, [r3, #32]
 8011c26:	eba7 0c00 	sub.w	ip, r7, r0
 8011c2a:	45ac      	cmp	ip, r5
 8011c2c:	d3f4      	bcc.n	8011c18 <tcp_alloc+0xec>
 8011c2e:	e7f0      	b.n	8011c12 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 8011c30:	b11c      	cbz	r4, 8011c3a <tcp_alloc+0x10e>
  tcp_abandon(pcb, 1);
 8011c32:	2101      	movs	r1, #1
 8011c34:	4620      	mov	r0, r4
 8011c36:	f7ff fe3f 	bl	80118b8 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	f7fe f95e 	bl	800fefc <memp_malloc>
  if (pcb != NULL) {
 8011c40:	4604      	mov	r4, r0
 8011c42:	2800      	cmp	r0, #0
 8011c44:	f47f af79 	bne.w	8011b3a <tcp_alloc+0xe>
 8011c48:	e799      	b.n	8011b7e <tcp_alloc+0x52>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011c4a:	237f      	movs	r3, #127	@ 0x7f
 8011c4c:	e7d8      	b.n	8011c00 <tcp_alloc+0xd4>
 8011c4e:	bf00      	nop
 8011c50:	20010180 	.word	0x20010180
 8011c54:	2001016d 	.word	0x2001016d
 8011c58:	16d016d0 	.word	0x16d016d0
 8011c5c:	16d00001 	.word	0x16d00001
 8011c60:	08011ec9 	.word	0x08011ec9
 8011c64:	006ddd00 	.word	0x006ddd00
 8011c68:	0218ffff 	.word	0x0218ffff
 8011c6c:	20010174 	.word	0x20010174
 8011c70:	20010170 	.word	0x20010170

08011c74 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011c74:	2040      	movs	r0, #64	@ 0x40
 8011c76:	f7ff bf59 	b.w	8011b2c <tcp_alloc>
 8011c7a:	bf00      	nop

08011c7c <tcp_close_shutdown>:
{
 8011c7c:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011c7e:	4604      	mov	r4, r0
{
 8011c80:	b085      	sub	sp, #20
 8011c82:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011c84:	2800      	cmp	r0, #0
 8011c86:	f000 808a 	beq.w	8011d9e <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011c8a:	7d23      	ldrb	r3, [r4, #20]
 8011c8c:	b11d      	cbz	r5, 8011c96 <tcp_close_shutdown+0x1a>
 8011c8e:	2b04      	cmp	r3, #4
 8011c90:	d01e      	beq.n	8011cd0 <tcp_close_shutdown+0x54>
 8011c92:	2b07      	cmp	r3, #7
 8011c94:	d01c      	beq.n	8011cd0 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d03a      	beq.n	8011d10 <tcp_close_shutdown+0x94>
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d007      	beq.n	8011cae <tcp_close_shutdown+0x32>
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d055      	beq.n	8011d4e <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 8011ca2:	4620      	mov	r0, r4
}
 8011ca4:	b005      	add	sp, #20
 8011ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8011caa:	f7ff b82b 	b.w	8010d04 <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011cae:	4621      	mov	r1, r4
 8011cb0:	484d      	ldr	r0, [pc, #308]	@ (8011de8 <tcp_close_shutdown+0x16c>)
 8011cb2:	f7ff fd91 	bl	80117d8 <tcp_pcb_remove>
 8011cb6:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011cb8:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011cba:	4a4c      	ldr	r2, [pc, #304]	@ (8011dec <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011cbc:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011cbe:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011cc0:	d066      	beq.n	8011d90 <tcp_close_shutdown+0x114>
  memp_free(MEMP_TCP_PCB, pcb);
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	f7fe f95f 	bl	800ff88 <memp_free>
}
 8011cca:	2000      	movs	r0, #0
 8011ccc:	b005      	add	sp, #20
 8011cce:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011cd0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8011cd2:	2a00      	cmp	r2, #0
 8011cd4:	d048      	beq.n	8011d68 <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011cd6:	8b63      	ldrh	r3, [r4, #26]
 8011cd8:	06db      	lsls	r3, r3, #27
 8011cda:	d570      	bpl.n	8011dbe <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011cdc:	8b21      	ldrh	r1, [r4, #24]
 8011cde:	1d20      	adds	r0, r4, #4
 8011ce0:	8ae2      	ldrh	r2, [r4, #22]
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011ce8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011cea:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8011cec:	9000      	str	r0, [sp, #0]
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f002 fd08 	bl	8014704 <tcp_rst>
      tcp_pcb_purge(pcb);
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f7ff fa7d 	bl	80111f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8011de8 <tcp_close_shutdown+0x16c>)
 8011cfc:	6813      	ldr	r3, [r2, #0]
 8011cfe:	42a3      	cmp	r3, r4
 8011d00:	d038      	beq.n	8011d74 <tcp_close_shutdown+0xf8>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d038      	beq.n	8011d78 <tcp_close_shutdown+0xfc>
 8011d06:	68da      	ldr	r2, [r3, #12]
 8011d08:	42a2      	cmp	r2, r4
 8011d0a:	d055      	beq.n	8011db8 <tcp_close_shutdown+0x13c>
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	e7f8      	b.n	8011d02 <tcp_close_shutdown+0x86>
 8011d10:	4937      	ldr	r1, [pc, #220]	@ (8011df0 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 8011d12:	2000      	movs	r0, #0
 8011d14:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011d18:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8011d1c:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011d1e:	b133      	cbz	r3, 8011d2e <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 8011d20:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011d22:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8011d24:	bf08      	it	eq
 8011d26:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1f8      	bne.n	8011d20 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011d2e:	428d      	cmp	r5, r1
 8011d30:	d1f2      	bne.n	8011d18 <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011d32:	4621      	mov	r1, r4
 8011d34:	482f      	ldr	r0, [pc, #188]	@ (8011df4 <tcp_close_shutdown+0x178>)
 8011d36:	f7ff fd4f 	bl	80117d8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011d3a:	7d23      	ldrb	r3, [r4, #20]
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d049      	beq.n	8011dd4 <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011d40:	4621      	mov	r1, r4
 8011d42:	2002      	movs	r0, #2
 8011d44:	f7fe f920 	bl	800ff88 <memp_free>
}
 8011d48:	2000      	movs	r0, #0
 8011d4a:	b005      	add	sp, #20
 8011d4c:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 8011d4e:	8ae3      	ldrh	r3, [r4, #22]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0b6      	beq.n	8011cc2 <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d54:	4a28      	ldr	r2, [pc, #160]	@ (8011df8 <tcp_close_shutdown+0x17c>)
 8011d56:	6813      	ldr	r3, [r2, #0]
 8011d58:	42a3      	cmp	r3, r4
 8011d5a:	d042      	beq.n	8011de2 <tcp_close_shutdown+0x166>
 8011d5c:	b34b      	cbz	r3, 8011db2 <tcp_close_shutdown+0x136>
 8011d5e:	68da      	ldr	r2, [r3, #12]
 8011d60:	42a2      	cmp	r2, r4
 8011d62:	d024      	beq.n	8011dae <tcp_close_shutdown+0x132>
 8011d64:	4613      	mov	r3, r2
 8011d66:	e7f9      	b.n	8011d5c <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011d68:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8011d6a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011d6e:	4291      	cmp	r1, r2
 8011d70:	d095      	beq.n	8011c9e <tcp_close_shutdown+0x22>
 8011d72:	e7b0      	b.n	8011cd6 <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 8011d74:	68e3      	ldr	r3, [r4, #12]
 8011d76:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8011d78:	4b20      	ldr	r3, [pc, #128]	@ (8011dfc <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8011dec <tcp_close_shutdown+0x170>)
 8011d7e:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8011d80:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8011d82:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8011d84:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 8011d86:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8011d88:	d021      	beq.n	8011dce <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011d8a:	7d23      	ldrb	r3, [r4, #20]
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d198      	bne.n	8011cc2 <tcp_close_shutdown+0x46>
 8011d90:	4b1b      	ldr	r3, [pc, #108]	@ (8011e00 <tcp_close_shutdown+0x184>)
 8011d92:	22d4      	movs	r2, #212	@ 0xd4
 8011d94:	491b      	ldr	r1, [pc, #108]	@ (8011e04 <tcp_close_shutdown+0x188>)
 8011d96:	481c      	ldr	r0, [pc, #112]	@ (8011e08 <tcp_close_shutdown+0x18c>)
 8011d98:	f004 fb90 	bl	80164bc <iprintf>
 8011d9c:	e791      	b.n	8011cc2 <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011d9e:	4b18      	ldr	r3, [pc, #96]	@ (8011e00 <tcp_close_shutdown+0x184>)
 8011da0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011da4:	4919      	ldr	r1, [pc, #100]	@ (8011e0c <tcp_close_shutdown+0x190>)
 8011da6:	4818      	ldr	r0, [pc, #96]	@ (8011e08 <tcp_close_shutdown+0x18c>)
 8011da8:	f004 fb88 	bl	80164bc <iprintf>
 8011dac:	e76d      	b.n	8011c8a <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011dae:	68e2      	ldr	r2, [r4, #12]
 8011db0:	60da      	str	r2, [r3, #12]
 8011db2:	2300      	movs	r3, #0
 8011db4:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8011db6:	e784      	b.n	8011cc2 <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 8011db8:	68e2      	ldr	r2, [r4, #12]
 8011dba:	60da      	str	r2, [r3, #12]
 8011dbc:	e7dc      	b.n	8011d78 <tcp_close_shutdown+0xfc>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011dbe:	4b10      	ldr	r3, [pc, #64]	@ (8011e00 <tcp_close_shutdown+0x184>)
 8011dc0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011dc4:	4912      	ldr	r1, [pc, #72]	@ (8011e10 <tcp_close_shutdown+0x194>)
 8011dc6:	4810      	ldr	r0, [pc, #64]	@ (8011e08 <tcp_close_shutdown+0x18c>)
 8011dc8:	f004 fb78 	bl	80164bc <iprintf>
 8011dcc:	e786      	b.n	8011cdc <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 8011dce:	f001 fda1 	bl	8013914 <tcp_trigger_input_pcb_close>
 8011dd2:	e77a      	b.n	8011cca <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8011e00 <tcp_close_shutdown+0x184>)
 8011dd6:	22df      	movs	r2, #223	@ 0xdf
 8011dd8:	490e      	ldr	r1, [pc, #56]	@ (8011e14 <tcp_close_shutdown+0x198>)
 8011dda:	480b      	ldr	r0, [pc, #44]	@ (8011e08 <tcp_close_shutdown+0x18c>)
 8011ddc:	f004 fb6e 	bl	80164bc <iprintf>
 8011de0:	e7ae      	b.n	8011d40 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011de2:	68e3      	ldr	r3, [r4, #12]
 8011de4:	6013      	str	r3, [r2, #0]
 8011de6:	e7e4      	b.n	8011db2 <tcp_close_shutdown+0x136>
 8011de8:	20010174 	.word	0x20010174
 8011dec:	2001016f 	.word	0x2001016f
 8011df0:	0801b980 	.word	0x0801b980
 8011df4:	20010178 	.word	0x20010178
 8011df8:	2001017c 	.word	0x2001017c
 8011dfc:	20010184 	.word	0x20010184
 8011e00:	0801b2d0 	.word	0x0801b2d0
 8011e04:	0801b350 	.word	0x0801b350
 8011e08:	080187f8 	.word	0x080187f8
 8011e0c:	0801b86c 	.word	0x0801b86c
 8011e10:	0801b88c 	.word	0x0801b88c
 8011e14:	0801b8a8 	.word	0x0801b8a8

08011e18 <tcp_close>:
{
 8011e18:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e1a:	b158      	cbz	r0, 8011e34 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8011e1c:	7d03      	ldrb	r3, [r0, #20]
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d003      	beq.n	8011e2a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e22:	8b43      	ldrh	r3, [r0, #26]
 8011e24:	f043 0310 	orr.w	r3, r3, #16
 8011e28:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8011e2a:	2101      	movs	r1, #1
}
 8011e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8011e30:	f7ff bf24 	b.w	8011c7c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e34:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <tcp_close+0x30>)
 8011e36:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011e3a:	4904      	ldr	r1, [pc, #16]	@ (8011e4c <tcp_close+0x34>)
 8011e3c:	4804      	ldr	r0, [pc, #16]	@ (8011e50 <tcp_close+0x38>)
 8011e3e:	f004 fb3d 	bl	80164bc <iprintf>
}
 8011e42:	f06f 000f 	mvn.w	r0, #15
 8011e46:	bd08      	pop	{r3, pc}
 8011e48:	0801b2d0 	.word	0x0801b2d0
 8011e4c:	0801b8c4 	.word	0x0801b8c4
 8011e50:	080187f8 	.word	0x080187f8

08011e54 <tcp_shutdown>:
{
 8011e54:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e56:	b338      	cbz	r0, 8011ea8 <tcp_shutdown+0x54>
  if (pcb->state == LISTEN) {
 8011e58:	7d03      	ldrb	r3, [r0, #20]
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d013      	beq.n	8011e88 <tcp_shutdown+0x34>
  if (shut_rx) {
 8011e60:	4615      	mov	r5, r2
 8011e62:	b159      	cbz	r1, 8011e7c <tcp_shutdown+0x28>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e64:	8b43      	ldrh	r3, [r0, #26]
 8011e66:	f043 0310 	orr.w	r3, r3, #16
 8011e6a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8011e6c:	b9ba      	cbnz	r2, 8011e9e <tcp_shutdown+0x4a>
    if (pcb->refused_data != NULL) {
 8011e6e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8011e70:	b110      	cbz	r0, 8011e78 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 8011e72:	f7fe fb6f 	bl	8010554 <pbuf_free>
      pcb->refused_data = NULL;
 8011e76:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 8011e78:	2000      	movs	r0, #0
}
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
  if (shut_tx) {
 8011e7c:	2a00      	cmp	r2, #0
 8011e7e:	d0fb      	beq.n	8011e78 <tcp_shutdown+0x24>
    switch (pcb->state) {
 8011e80:	2b04      	cmp	r3, #4
 8011e82:	d804      	bhi.n	8011e8e <tcp_shutdown+0x3a>
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d804      	bhi.n	8011e92 <tcp_shutdown+0x3e>
 8011e88:	f06f 000a 	mvn.w	r0, #10
}
 8011e8c:	bd38      	pop	{r3, r4, r5, pc}
    switch (pcb->state) {
 8011e8e:	2b07      	cmp	r3, #7
 8011e90:	d1fa      	bne.n	8011e88 <tcp_shutdown+0x34>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011e92:	4620      	mov	r0, r4
 8011e94:	2100      	movs	r1, #0
}
 8011e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011e9a:	f7ff beef 	b.w	8011c7c <tcp_close_shutdown>
      return tcp_close_shutdown(pcb, 1);
 8011e9e:	2101      	movs	r1, #1
}
 8011ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, 1);
 8011ea4:	f7ff beea 	b.w	8011c7c <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ea8:	4b04      	ldr	r3, [pc, #16]	@ (8011ebc <tcp_shutdown+0x68>)
 8011eaa:	f240 2207 	movw	r2, #519	@ 0x207
 8011eae:	4904      	ldr	r1, [pc, #16]	@ (8011ec0 <tcp_shutdown+0x6c>)
 8011eb0:	4804      	ldr	r0, [pc, #16]	@ (8011ec4 <tcp_shutdown+0x70>)
 8011eb2:	f004 fb03 	bl	80164bc <iprintf>
 8011eb6:	f06f 000f 	mvn.w	r0, #15
}
 8011eba:	bd38      	pop	{r3, r4, r5, pc}
 8011ebc:	0801b2d0 	.word	0x0801b2d0
 8011ec0:	0801b8dc 	.word	0x0801b8dc
 8011ec4:	080187f8 	.word	0x080187f8

08011ec8 <tcp_recv_null>:
{
 8011ec8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011eca:	b1c1      	cbz	r1, 8011efe <tcp_recv_null+0x36>
  if (p != NULL) {
 8011ecc:	4614      	mov	r4, r2
 8011ece:	4608      	mov	r0, r1
 8011ed0:	b13a      	cbz	r2, 8011ee2 <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 8011ed2:	8911      	ldrh	r1, [r2, #8]
 8011ed4:	f7ff f88a 	bl	8010fec <tcp_recved>
    pbuf_free(p);
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7fe fb3b 	bl	8010554 <pbuf_free>
  return ERR_OK;
 8011ede:	2000      	movs	r0, #0
}
 8011ee0:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1fb      	bne.n	8011ede <tcp_recv_null+0x16>
  if (pcb->state != LISTEN) {
 8011ee6:	7d0b      	ldrb	r3, [r1, #20]
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d003      	beq.n	8011ef4 <tcp_recv_null+0x2c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011eec:	8b4b      	ldrh	r3, [r1, #26]
 8011eee:	f043 0310 	orr.w	r3, r3, #16
 8011ef2:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 8011ef4:	2101      	movs	r1, #1
}
 8011ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 8011efa:	f7ff bebf 	b.w	8011c7c <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011efe:	4b05      	ldr	r3, [pc, #20]	@ (8011f14 <tcp_recv_null+0x4c>)
 8011f00:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011f04:	4904      	ldr	r1, [pc, #16]	@ (8011f18 <tcp_recv_null+0x50>)
 8011f06:	4805      	ldr	r0, [pc, #20]	@ (8011f1c <tcp_recv_null+0x54>)
 8011f08:	f004 fad8 	bl	80164bc <iprintf>
 8011f0c:	f06f 000f 	mvn.w	r0, #15
}
 8011f10:	bd10      	pop	{r4, pc}
 8011f12:	bf00      	nop
 8011f14:	0801b2d0 	.word	0x0801b2d0
 8011f18:	0801b8f8 	.word	0x0801b8f8
 8011f1c:	080187f8 	.word	0x080187f8

08011f20 <tcp_process_refused_data>:
{
 8011f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f22:	b380      	cbz	r0, 8011f86 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 8011f24:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 8011f26:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011f28:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8011f2c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8011f2e:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 8011f30:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011f32:	b156      	cbz	r6, 8011f4a <tcp_process_refused_data+0x2a>
 8011f34:	4601      	mov	r1, r0
 8011f36:	462a      	mov	r2, r5
 8011f38:	6900      	ldr	r0, [r0, #16]
 8011f3a:	47b0      	blx	r6
    if (err == ERR_OK) {
 8011f3c:	b158      	cbz	r0, 8011f56 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 8011f3e:	300d      	adds	r0, #13
 8011f40:	d01e      	beq.n	8011f80 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 8011f42:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 8011f46:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 8011f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 8011f4a:	8929      	ldrh	r1, [r5, #8]
 8011f4c:	f7ff f84e 	bl	8010fec <tcp_recved>
    pbuf_free(p);
 8011f50:	4628      	mov	r0, r5
 8011f52:	f7fe faff 	bl	8010554 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011f56:	06bb      	lsls	r3, r7, #26
 8011f58:	d510      	bpl.n	8011f7c <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f5a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8011f5c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d001      	beq.n	8011f68 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 8011f64:	3301      	adds	r3, #1
 8011f66:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8011f68:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8011f6c:	b135      	cbz	r5, 8011f7c <tcp_process_refused_data+0x5c>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	4621      	mov	r1, r4
 8011f72:	6920      	ldr	r0, [r4, #16]
 8011f74:	461a      	mov	r2, r3
 8011f76:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 8011f78:	300d      	adds	r0, #13
 8011f7a:	d001      	beq.n	8011f80 <tcp_process_refused_data+0x60>
  return ERR_OK;
 8011f7c:	2000      	movs	r0, #0
}
 8011f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8011f80:	f06f 000c 	mvn.w	r0, #12
}
 8011f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f86:	4b05      	ldr	r3, [pc, #20]	@ (8011f9c <tcp_process_refused_data+0x7c>)
 8011f88:	f240 6209 	movw	r2, #1545	@ 0x609
 8011f8c:	4904      	ldr	r1, [pc, #16]	@ (8011fa0 <tcp_process_refused_data+0x80>)
 8011f8e:	4805      	ldr	r0, [pc, #20]	@ (8011fa4 <tcp_process_refused_data+0x84>)
 8011f90:	f004 fa94 	bl	80164bc <iprintf>
 8011f94:	f06f 000f 	mvn.w	r0, #15
}
 8011f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	0801b2d0 	.word	0x0801b2d0
 8011fa0:	0801b914 	.word	0x0801b914
 8011fa4:	080187f8 	.word	0x080187f8

08011fa8 <tcp_fasttmr>:
{
 8011fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 8011fac:	4d1c      	ldr	r5, [pc, #112]	@ (8012020 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8011fae:	2700      	movs	r7, #0
 8011fb0:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8012028 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 8011fb4:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8011fb6:	4e1b      	ldr	r6, [pc, #108]	@ (8012024 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8011fb8:	3301      	adds	r3, #1
 8011fba:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8011fbc:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8011fc0:	b1b4      	cbz	r4, 8011ff0 <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011fc2:	7fa3      	ldrb	r3, [r4, #30]
 8011fc4:	782a      	ldrb	r2, [r5, #0]
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d014      	beq.n	8011ff4 <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 8011fca:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8011fcc:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8011fce:	07d9      	lsls	r1, r3, #31
 8011fd0:	d419      	bmi.n	8012006 <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 8011fd2:	071a      	lsls	r2, r3, #28
 8011fd4:	d410      	bmi.n	8011ff8 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 8011fd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 8011fd8:	4620      	mov	r0, r4
      next = pcb->next;
 8011fda:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d0ef      	beq.n	8011fc0 <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 8011fe0:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8011fe2:	f7ff ff9d 	bl	8011f20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011fe6:	7833      	ldrb	r3, [r6, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d1e7      	bne.n	8011fbc <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 8011fec:	2c00      	cmp	r4, #0
 8011fee:	d1e8      	bne.n	8011fc2 <tcp_fasttmr+0x1a>
}
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 8011ff4:	68e4      	ldr	r4, [r4, #12]
 8011ff6:	e7e3      	b.n	8011fc0 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011ff8:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8011ffc:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011ffe:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8012000:	f7fe fe80 	bl	8010d04 <tcp_close_shutdown_fin>
 8012004:	e7e7      	b.n	8011fd6 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8012006:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801200a:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801200c:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801200e:	f002 fbf3 	bl	80147f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012012:	8b63      	ldrh	r3, [r4, #26]
 8012014:	f023 0303 	bic.w	r3, r3, #3
 8012018:	b29b      	uxth	r3, r3
 801201a:	8363      	strh	r3, [r4, #26]
 801201c:	e7d9      	b.n	8011fd2 <tcp_fasttmr+0x2a>
 801201e:	bf00      	nop
 8012020:	2001016d 	.word	0x2001016d
 8012024:	2001016f 	.word	0x2001016f
 8012028:	20010174 	.word	0x20010174

0801202c <tcp_tmr>:
{
 801202c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801202e:	f7ff ffbb 	bl	8011fa8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8012032:	4a06      	ldr	r2, [pc, #24]	@ (801204c <tcp_tmr+0x20>)
 8012034:	7813      	ldrb	r3, [r2, #0]
 8012036:	3301      	adds	r3, #1
 8012038:	b2db      	uxtb	r3, r3
 801203a:	7013      	strb	r3, [r2, #0]
 801203c:	07db      	lsls	r3, r3, #31
 801203e:	d400      	bmi.n	8012042 <tcp_tmr+0x16>
}
 8012040:	bd08      	pop	{r3, pc}
 8012042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8012046:	f7ff b927 	b.w	8011298 <tcp_slowtmr>
 801204a:	bf00      	nop
 801204c:	2001016e 	.word	0x2001016e

08012050 <tcp_next_iss>:
{
 8012050:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012052:	b130      	cbz	r0, 8012062 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 8012054:	4b07      	ldr	r3, [pc, #28]	@ (8012074 <tcp_next_iss+0x24>)
 8012056:	4a08      	ldr	r2, [pc, #32]	@ (8012078 <tcp_next_iss+0x28>)
 8012058:	6818      	ldr	r0, [r3, #0]
 801205a:	6812      	ldr	r2, [r2, #0]
 801205c:	4410      	add	r0, r2
 801205e:	6018      	str	r0, [r3, #0]
}
 8012060:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012062:	4b06      	ldr	r3, [pc, #24]	@ (801207c <tcp_next_iss+0x2c>)
 8012064:	f640 02af 	movw	r2, #2223	@ 0x8af
 8012068:	4905      	ldr	r1, [pc, #20]	@ (8012080 <tcp_next_iss+0x30>)
 801206a:	4806      	ldr	r0, [pc, #24]	@ (8012084 <tcp_next_iss+0x34>)
 801206c:	f004 fa26 	bl	80164bc <iprintf>
 8012070:	e7f0      	b.n	8012054 <tcp_next_iss+0x4>
 8012072:	bf00      	nop
 8012074:	20000028 	.word	0x20000028
 8012078:	20010180 	.word	0x20010180
 801207c:	0801b2d0 	.word	0x0801b2d0
 8012080:	0801b93c 	.word	0x0801b93c
 8012084:	080187f8 	.word	0x080187f8

08012088 <tcp_eff_send_mss_netif>:
{
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4605      	mov	r5, r0
 801208c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801208e:	b162      	cbz	r2, 80120aa <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 8012090:	b14c      	cbz	r4, 80120a6 <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 8012092:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
  if (mtu != 0) {
 8012094:	b13b      	cbz	r3, 80120a6 <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012096:	2b28      	cmp	r3, #40	@ 0x28
 8012098:	bf38      	it	cc
 801209a:	2328      	movcc	r3, #40	@ 0x28
 801209c:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801209e:	b29b      	uxth	r3, r3
 80120a0:	429d      	cmp	r5, r3
 80120a2:	bf28      	it	cs
 80120a4:	461d      	movcs	r5, r3
}
 80120a6:	4628      	mov	r0, r5
 80120a8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80120aa:	4b04      	ldr	r3, [pc, #16]	@ (80120bc <tcp_eff_send_mss_netif+0x34>)
 80120ac:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80120b0:	4903      	ldr	r1, [pc, #12]	@ (80120c0 <tcp_eff_send_mss_netif+0x38>)
 80120b2:	4804      	ldr	r0, [pc, #16]	@ (80120c4 <tcp_eff_send_mss_netif+0x3c>)
 80120b4:	f004 fa02 	bl	80164bc <iprintf>
 80120b8:	e7ea      	b.n	8012090 <tcp_eff_send_mss_netif+0x8>
 80120ba:	bf00      	nop
 80120bc:	0801b2d0 	.word	0x0801b2d0
 80120c0:	0801b958 	.word	0x0801b958
 80120c4:	080187f8 	.word	0x080187f8

080120c8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80120c8:	b308      	cbz	r0, 801210e <tcp_netif_ip_addr_changed+0x46>
{
 80120ca:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80120cc:	6803      	ldr	r3, [r0, #0]
 80120ce:	4604      	mov	r4, r0
 80120d0:	b903      	cbnz	r3, 80120d4 <tcp_netif_ip_addr_changed+0xc>
}
 80120d2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80120d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012110 <tcp_netif_ip_addr_changed+0x48>)
 80120d6:	460d      	mov	r5, r1
 80120d8:	6819      	ldr	r1, [r3, #0]
 80120da:	f7ff fce1 	bl	8011aa0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80120de:	4b0d      	ldr	r3, [pc, #52]	@ (8012114 <tcp_netif_ip_addr_changed+0x4c>)
 80120e0:	4620      	mov	r0, r4
 80120e2:	6819      	ldr	r1, [r3, #0]
 80120e4:	f7ff fcdc 	bl	8011aa0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80120e8:	2d00      	cmp	r5, #0
 80120ea:	d0f2      	beq.n	80120d2 <tcp_netif_ip_addr_changed+0xa>
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d0ef      	beq.n	80120d2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80120f2:	4b09      	ldr	r3, [pc, #36]	@ (8012118 <tcp_netif_ip_addr_changed+0x50>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0eb      	beq.n	80120d2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80120fa:	6819      	ldr	r1, [r3, #0]
 80120fc:	6822      	ldr	r2, [r4, #0]
 80120fe:	4291      	cmp	r1, r2
 8012100:	d101      	bne.n	8012106 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012102:	682a      	ldr	r2, [r5, #0]
 8012104:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1f6      	bne.n	80120fa <tcp_netif_ip_addr_changed+0x32>
}
 801210c:	bd38      	pop	{r3, r4, r5, pc}
 801210e:	4770      	bx	lr
 8012110:	20010174 	.word	0x20010174
 8012114:	2001017c 	.word	0x2001017c
 8012118:	20010178 	.word	0x20010178

0801211c <tcp_free_ooseq>:
{
 801211c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801211e:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8012120:	b16c      	cbz	r4, 801213e <tcp_free_ooseq+0x22>
 8012122:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 8012124:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8012126:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8012128:	6868      	ldr	r0, [r5, #4]
 801212a:	b108      	cbz	r0, 8012130 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801212c:	f7fe fa12 	bl	8010554 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8012130:	4629      	mov	r1, r5
 8012132:	2003      	movs	r0, #3
 8012134:	f7fd ff28 	bl	800ff88 <memp_free>
  while (seg != NULL) {
 8012138:	2c00      	cmp	r4, #0
 801213a:	d1f3      	bne.n	8012124 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801213c:	6774      	str	r4, [r6, #116]	@ 0x74
}
 801213e:	bd70      	pop	{r4, r5, r6, pc}

08012140 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012142:	4605      	mov	r5, r0
{
 8012144:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012146:	2800      	cmp	r0, #0
 8012148:	d035      	beq.n	80121b6 <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801214a:	68eb      	ldr	r3, [r5, #12]
 801214c:	8998      	ldrh	r0, [r3, #12]
 801214e:	f7fd fb71 	bl	800f834 <lwip_htons>
 8012152:	07c2      	lsls	r2, r0, #31
 8012154:	d429      	bmi.n	80121aa <tcp_oos_insert_segment+0x6a>
 8012156:	4e1c      	ldr	r6, [pc, #112]	@ (80121c8 <tcp_oos_insert_segment+0x88>)
 8012158:	e005      	b.n	8012166 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801215a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801215c:	4620      	mov	r0, r4
 801215e:	f7fe ff93 	bl	8011088 <tcp_seg_free>
      next = next->next;
 8012162:	463c      	mov	r4, r7
    while (next &&
 8012164:	b327      	cbz	r7, 80121b0 <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012166:	68e1      	ldr	r1, [r4, #12]
 8012168:	892b      	ldrh	r3, [r5, #8]
 801216a:	6837      	ldr	r7, [r6, #0]
 801216c:	6848      	ldr	r0, [r1, #4]
 801216e:	443b      	add	r3, r7
 8012170:	8922      	ldrh	r2, [r4, #8]
 8012172:	1a1b      	subs	r3, r3, r0
 8012174:	1a9a      	subs	r2, r3, r2
    while (next &&
 8012176:	2a00      	cmp	r2, #0
 8012178:	db0d      	blt.n	8012196 <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801217a:	8988      	ldrh	r0, [r1, #12]
 801217c:	f7fd fb5a 	bl	800f834 <lwip_htons>
 8012180:	07c3      	lsls	r3, r0, #31
 8012182:	d5ea      	bpl.n	801215a <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012184:	68eb      	ldr	r3, [r5, #12]
 8012186:	2001      	movs	r0, #1
 8012188:	899f      	ldrh	r7, [r3, #12]
 801218a:	f7fd fb53 	bl	800f834 <lwip_htons>
 801218e:	68eb      	ldr	r3, [r5, #12]
 8012190:	4307      	orrs	r7, r0
 8012192:	819f      	strh	r7, [r3, #12]
 8012194:	e7e1      	b.n	801215a <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 8012196:	2b00      	cmp	r3, #0
 8012198:	dd05      	ble.n	80121a6 <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801219a:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801219c:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801219e:	b289      	uxth	r1, r1
 80121a0:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80121a2:	f7fe faeb 	bl	801077c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80121a6:	602c      	str	r4, [r5, #0]
}
 80121a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7fe ff5a 	bl	8011064 <tcp_segs_free>
    next = NULL;
 80121b0:	2400      	movs	r4, #0
  cseg->next = next;
 80121b2:	602c      	str	r4, [r5, #0]
}
 80121b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80121b6:	4b05      	ldr	r3, [pc, #20]	@ (80121cc <tcp_oos_insert_segment+0x8c>)
 80121b8:	f240 421f 	movw	r2, #1055	@ 0x41f
 80121bc:	4904      	ldr	r1, [pc, #16]	@ (80121d0 <tcp_oos_insert_segment+0x90>)
 80121be:	4805      	ldr	r0, [pc, #20]	@ (80121d4 <tcp_oos_insert_segment+0x94>)
 80121c0:	f004 f97c 	bl	80164bc <iprintf>
 80121c4:	e7c1      	b.n	801214a <tcp_oos_insert_segment+0xa>
 80121c6:	bf00      	nop
 80121c8:	20010198 	.word	0x20010198
 80121cc:	0801b9a8 	.word	0x0801b9a8
 80121d0:	0801ba20 	.word	0x0801ba20
 80121d4:	080187f8 	.word	0x080187f8

080121d8 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80121d8:	4b0d      	ldr	r3, [pc, #52]	@ (8012210 <tcp_input_delayed_close+0x38>)
{
 80121da:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 80121dc:	781b      	ldrb	r3, [r3, #0]
{
 80121de:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80121e0:	f013 0010 	ands.w	r0, r3, #16
 80121e4:	d100      	bne.n	80121e8 <tcp_input_delayed_close+0x10>
}
 80121e6:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 80121e8:	8b63      	ldrh	r3, [r4, #26]
 80121ea:	06db      	lsls	r3, r3, #27
 80121ec:	d406      	bmi.n	80121fc <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80121ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80121f2:	b11b      	cbz	r3, 80121fc <tcp_input_delayed_close+0x24>
 80121f4:	f06f 010e 	mvn.w	r1, #14
 80121f8:	6920      	ldr	r0, [r4, #16]
 80121fa:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80121fc:	4621      	mov	r1, r4
 80121fe:	4805      	ldr	r0, [pc, #20]	@ (8012214 <tcp_input_delayed_close+0x3c>)
 8012200:	f7ff faea 	bl	80117d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012204:	4620      	mov	r0, r4
 8012206:	f7fe fdbb 	bl	8010d80 <tcp_free>
 801220a:	2001      	movs	r0, #1
}
 801220c:	bd10      	pop	{r4, pc}
 801220e:	bf00      	nop
 8012210:	2001018c 	.word	0x2001018c
 8012214:	20010174 	.word	0x20010174

08012218 <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012218:	2900      	cmp	r1, #0
 801221a:	d054      	beq.n	80122c6 <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801221c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012220:	4682      	mov	sl, r0
 8012222:	460d      	mov	r5, r1
 8012224:	4690      	mov	r8, r2
 8012226:	4e29      	ldr	r6, [pc, #164]	@ (80122cc <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012228:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80122d8 <tcp_free_acked_segments.constprop.0+0xc0>
 801222c:	4f28      	ldr	r7, [pc, #160]	@ (80122d0 <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801222e:	68eb      	ldr	r3, [r5, #12]
 8012230:	6858      	ldr	r0, [r3, #4]
 8012232:	f7fd fb03 	bl	800f83c <lwip_htonl>
 8012236:	68eb      	ldr	r3, [r5, #12]
 8012238:	4604      	mov	r4, r0
 801223a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801223e:	8998      	ldrh	r0, [r3, #12]
 8012240:	f7fd faf8 	bl	800f834 <lwip_htons>
 8012244:	6833      	ldr	r3, [r6, #0]
 8012246:	f010 0003 	ands.w	r0, r0, #3
 801224a:	eba4 0403 	sub.w	r4, r4, r3
 801224e:	bf18      	it	ne
 8012250:	2001      	movne	r0, #1
 8012252:	445c      	add	r4, fp
 8012254:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8012256:	2c00      	cmp	r4, #0
 8012258:	dc32      	bgt.n	80122c0 <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 801225a:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 801225e:	f7fe fb07 	bl	8010870 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012262:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 8012266:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012268:	4298      	cmp	r0, r3
 801226a:	d81f      	bhi.n	80122ac <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801226c:	4919      	ldr	r1, [pc, #100]	@ (80122d4 <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801226e:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012270:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 8012272:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012274:	880c      	ldrh	r4, [r1, #0]
 8012276:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012278:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801227c:	1913      	adds	r3, r2, r4
 801227e:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 8012280:	f7fe ff02 	bl	8011088 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012284:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 8012288:	b113      	cbz	r3, 8012290 <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801228a:	ea58 030b 	orrs.w	r3, r8, fp
 801228e:	d003      	beq.n	8012298 <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 8012290:	f1bb 0f00 	cmp.w	fp, #0
 8012294:	d1cb      	bne.n	801222e <tcp_free_acked_segments.constprop.0+0x16>
 8012296:	e006      	b.n	80122a6 <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012298:	4b0f      	ldr	r3, [pc, #60]	@ (80122d8 <tcp_free_acked_segments.constprop.0+0xc0>)
 801229a:	f240 4261 	movw	r2, #1121	@ 0x461
 801229e:	490f      	ldr	r1, [pc, #60]	@ (80122dc <tcp_free_acked_segments.constprop.0+0xc4>)
 80122a0:	480b      	ldr	r0, [pc, #44]	@ (80122d0 <tcp_free_acked_segments.constprop.0+0xb8>)
 80122a2:	f004 f90b 	bl	80164bc <iprintf>
  while (seg_list != NULL &&
 80122a6:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 80122a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80122ac:	464b      	mov	r3, r9
 80122ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80122b2:	490b      	ldr	r1, [pc, #44]	@ (80122e0 <tcp_free_acked_segments.constprop.0+0xc8>)
 80122b4:	4638      	mov	r0, r7
 80122b6:	f004 f901 	bl	80164bc <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80122ba:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 80122be:	e7d5      	b.n	801226c <tcp_free_acked_segments.constprop.0+0x54>
 80122c0:	4628      	mov	r0, r5
}
 80122c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c6:	2000      	movs	r0, #0
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	20010194 	.word	0x20010194
 80122d0:	080187f8 	.word	0x080187f8
 80122d4:	20010190 	.word	0x20010190
 80122d8:	0801b9a8 	.word	0x0801b9a8
 80122dc:	0801ba70 	.word	0x0801ba70
 80122e0:	0801ba48 	.word	0x0801ba48

080122e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80122e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80122e8:	7d03      	ldrb	r3, [r0, #20]
{
 80122ea:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80122ec:	2b03      	cmp	r3, #3
 80122ee:	f240 8124 	bls.w	801253a <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 80122f2:	4bb6      	ldr	r3, [pc, #728]	@ (80125cc <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80122f4:	4eb6      	ldr	r6, [pc, #728]	@ (80125d0 <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 80122f6:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80122f8:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 80122fa:	06d0      	lsls	r0, r2, #27
 80122fc:	f100 80a3 	bmi.w	8012446 <tcp_receive+0x162>
 8012300:	4fb4      	ldr	r7, [pc, #720]	@ (80125d4 <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012302:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012304:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012306:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012308:	2900      	cmp	r1, #0
 801230a:	f000 808c 	beq.w	8012426 <tcp_receive+0x142>
 801230e:	7d20      	ldrb	r0, [r4, #20]
 8012310:	2806      	cmp	r0, #6
 8012312:	f200 8088 	bhi.w	8012426 <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012316:	eba2 0803 	sub.w	r8, r2, r3
 801231a:	f1b8 0f01 	cmp.w	r8, #1
 801231e:	d406      	bmi.n	801232e <tcp_receive+0x4a>
 8012320:	f1c3 0001 	rsb	r0, r3, #1
 8012324:	1a41      	subs	r1, r0, r1
 8012326:	4411      	add	r1, r2
 8012328:	2900      	cmp	r1, #0
 801232a:	f340 81d8 	ble.w	80126de <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801232e:	1a99      	subs	r1, r3, r2
 8012330:	2900      	cmp	r1, #0
 8012332:	f2c0 81cf 	blt.w	80126d4 <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012336:	f103 0e01 	add.w	lr, r3, #1
 801233a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 801233c:	ebae 0102 	sub.w	r1, lr, r2
 8012340:	1a09      	subs	r1, r1, r0
 8012342:	2900      	cmp	r1, #0
 8012344:	dc43      	bgt.n	80123ce <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012346:	429a      	cmp	r2, r3
 8012348:	f000 8454 	beq.w	8012bf4 <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801234c:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 801234e:	2d00      	cmp	r5, #0
 8012350:	f000 8375 	beq.w	8012a3e <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 8012354:	68e8      	ldr	r0, [r5, #12]
 8012356:	6842      	ldr	r2, [r0, #4]
 8012358:	429a      	cmp	r2, r3
 801235a:	f000 8350 	beq.w	80129fe <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801235e:	1a99      	subs	r1, r3, r2
 8012360:	2900      	cmp	r1, #0
 8012362:	f2c0 83b9 	blt.w	8012ad8 <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012366:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801236a:	46a8      	mov	r8, r5
 801236c:	682d      	ldr	r5, [r5, #0]
 801236e:	2d00      	cmp	r5, #0
 8012370:	f000 814d 	beq.w	801260e <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 8012374:	68e8      	ldr	r0, [r5, #12]
 8012376:	6842      	ldr	r2, [r0, #4]
 8012378:	429a      	cmp	r2, r3
 801237a:	f000 8342 	beq.w	8012a02 <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801237e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8012382:	6849      	ldr	r1, [r1, #4]
 8012384:	ebac 0101 	sub.w	r1, ip, r1
 8012388:	2900      	cmp	r1, #0
 801238a:	dbee      	blt.n	801236a <tcp_receive+0x86>
 801238c:	ebae 0102 	sub.w	r1, lr, r2
 8012390:	2900      	cmp	r1, #0
 8012392:	dcea      	bgt.n	801236a <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012394:	4890      	ldr	r0, [pc, #576]	@ (80125d8 <tcp_receive+0x2f4>)
 8012396:	f7fe fe85 	bl	80110a4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801239a:	4607      	mov	r7, r0
 801239c:	b1b8      	cbz	r0, 80123ce <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801239e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123a2:	6832      	ldr	r2, [r6, #0]
 80123a4:	6859      	ldr	r1, [r3, #4]
 80123a6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80123aa:	440b      	add	r3, r1
 80123ac:	1a9b      	subs	r3, r3, r2
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dd07      	ble.n	80123c2 <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80123b2:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 80123b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80123b8:	b291      	uxth	r1, r2
 80123ba:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80123be:	f7fe f9dd 	bl	801077c <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 80123c2:	4629      	mov	r1, r5
 80123c4:	4638      	mov	r0, r7
                    prev->next = cseg;
 80123c6:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80123ca:	f7ff feb9 	bl	8012140 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123ce:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 80123d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 80123d4:	f002 b9de 	b.w	8014794 <tcp_send_empty_ack>
      if (tcplen == 0) {
 80123d8:	4f7e      	ldr	r7, [pc, #504]	@ (80125d4 <tcp_receive+0x2f0>)
 80123da:	8839      	ldrh	r1, [r7, #0]
 80123dc:	2900      	cmp	r1, #0
 80123de:	f040 810b 	bne.w	80125f8 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80123e2:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80123e4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80123e6:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 80123ea:	4461      	add	r1, ip
 80123ec:	4571      	cmp	r1, lr
 80123ee:	f040 8103 	bne.w	80125f8 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 80123f2:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 80123f4:	0409      	lsls	r1, r1, #16
 80123f6:	f100 80ff 	bmi.w	80125f8 <tcp_receive+0x314>
 80123fa:	4290      	cmp	r0, r2
 80123fc:	f040 80fc 	bne.w	80125f8 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012400:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 8012404:	29ff      	cmp	r1, #255	@ 0xff
 8012406:	f000 8372 	beq.w	8012aee <tcp_receive+0x80a>
                ++pcb->dupacks;
 801240a:	3101      	adds	r1, #1
 801240c:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 801240e:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 8012410:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 8012414:	f200 836b 	bhi.w	8012aee <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 8012418:	f000 8374 	beq.w	8012b04 <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801241c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801241e:	2900      	cmp	r1, #0
 8012420:	f040 80ae 	bne.w	8012580 <tcp_receive+0x29c>
 8012424:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012426:	1a99      	subs	r1, r3, r2
 8012428:	2900      	cmp	r1, #0
 801242a:	db06      	blt.n	801243a <tcp_receive+0x156>
 801242c:	f1c2 0201 	rsb	r2, r2, #1
 8012430:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8012432:	1a52      	subs	r2, r2, r1
 8012434:	441a      	add	r2, r3
 8012436:	2a00      	cmp	r2, #0
 8012438:	dd03      	ble.n	8012442 <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 801243a:	8b63      	ldrh	r3, [r4, #26]
 801243c:	f043 0302 	orr.w	r3, r3, #2
 8012440:	8363      	strh	r3, [r4, #26]
}
 8012442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012446:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801244a:	4d64      	ldr	r5, [pc, #400]	@ (80125dc <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801244c:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801244e:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012452:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012454:	2800      	cmp	r0, #0
 8012456:	db7c      	blt.n	8012552 <tcp_receive+0x26e>
 8012458:	4299      	cmp	r1, r3
 801245a:	d076      	beq.n	801254a <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801245c:	4594      	cmp	ip, r2
 801245e:	f000 80cf 	beq.w	8012600 <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012462:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8012464:	1a11      	subs	r1, r2, r0
 8012466:	2900      	cmp	r1, #0
 8012468:	ddb6      	ble.n	80123d8 <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801246a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	2b00      	cmp	r3, #0
 8012470:	dc7d      	bgt.n	801256e <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 8012472:	8b63      	ldrh	r3, [r4, #26]
 8012474:	0758      	lsls	r0, r3, #29
 8012476:	d509      	bpl.n	801248c <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8012478:	f023 0304 	bic.w	r3, r3, #4
 801247c:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801247e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8012482:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801248c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 8012490:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 8012492:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012494:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8012498:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801249a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 801249e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 80124a0:	f04f 0300 	mov.w	r3, #0
 80124a4:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 80124a8:	d913      	bls.n	80124d2 <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 80124aa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80124ae:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 80124b0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 80124b4:	429a      	cmp	r2, r3
 80124b6:	f200 81af 	bhi.w	8012818 <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80124ba:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 80124be:	4411      	add	r1, r2
 80124c0:	b289      	uxth	r1, r1
 80124c2:	428a      	cmp	r2, r1
 80124c4:	f200 828b 	bhi.w	80129de <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 80124c8:	428b      	cmp	r3, r1
 80124ca:	f240 828a 	bls.w	80129e2 <tcp_receive+0x6fe>
 80124ce:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80124d2:	4620      	mov	r0, r4
 80124d4:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 80124d8:	f7ff fe9e 	bl	8012218 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80124dc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80124de:	4602      	mov	r2, r0
 80124e0:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80124e2:	4620      	mov	r0, r4
 80124e4:	f7ff fe98 	bl	8012218 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 80124e8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80124ea:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 80124ec:	fab2 f382 	clz	r3, r2
 80124f0:	095b      	lsrs	r3, r3, #5
 80124f2:	425b      	negs	r3, r3
 80124f4:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 80124fa:	2800      	cmp	r0, #0
 80124fc:	f000 8189 	beq.w	8012812 <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012500:	4b37      	ldr	r3, [pc, #220]	@ (80125e0 <tcp_receive+0x2fc>)
 8012502:	8819      	ldrh	r1, [r3, #0]
 8012504:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8012508:	440b      	add	r3, r1
 801250a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 801250e:	8b63      	ldrh	r3, [r4, #26]
 8012510:	0519      	lsls	r1, r3, #20
 8012512:	f140 80dd 	bpl.w	80126d0 <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 8012516:	2a00      	cmp	r2, #0
 8012518:	f000 8195 	beq.w	8012846 <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801251c:	68d3      	ldr	r3, [r2, #12]
 801251e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8012520:	6858      	ldr	r0, [r3, #4]
 8012522:	f7fd f98b 	bl	800f83c <lwip_htonl>
 8012526:	1a3f      	subs	r7, r7, r0
 8012528:	2f00      	cmp	r7, #0
 801252a:	f300 80d1 	bgt.w	80126d0 <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 801252e:	8b63      	ldrh	r3, [r4, #26]
 8012530:	4f28      	ldr	r7, [pc, #160]	@ (80125d4 <tcp_receive+0x2f0>)
 8012532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012536:	8363      	strh	r3, [r4, #26]
 8012538:	e01d      	b.n	8012576 <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801253a:	4b2a      	ldr	r3, [pc, #168]	@ (80125e4 <tcp_receive+0x300>)
 801253c:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012540:	4929      	ldr	r1, [pc, #164]	@ (80125e8 <tcp_receive+0x304>)
 8012542:	482a      	ldr	r0, [pc, #168]	@ (80125ec <tcp_receive+0x308>)
 8012544:	f003 ffba 	bl	80164bc <iprintf>
 8012548:	e6d3      	b.n	80122f2 <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801254a:	ebac 0102 	sub.w	r1, ip, r2
 801254e:	2900      	cmp	r1, #0
 8012550:	da84      	bge.n	801245c <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012552:	4927      	ldr	r1, [pc, #156]	@ (80125f0 <tcp_receive+0x30c>)
 8012554:	6809      	ldr	r1, [r1, #0]
 8012556:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012558:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801255c:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012560:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 8012562:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012566:	bf38      	it	cc
 8012568:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 801256c:	e779      	b.n	8012462 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 801256e:	4620      	mov	r0, r4
 8012570:	4f18      	ldr	r7, [pc, #96]	@ (80125d4 <tcp_receive+0x2f0>)
 8012572:	f002 f90f 	bl	8014794 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012576:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012578:	2900      	cmp	r1, #0
 801257a:	f43f aec2 	beq.w	8012302 <tcp_receive+0x1e>
 801257e:	682a      	ldr	r2, [r5, #0]
 8012580:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012582:	1a9b      	subs	r3, r3, r2
 8012584:	2b00      	cmp	r3, #0
 8012586:	f6bf aebc 	bge.w	8012302 <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 801258a:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801258e:	b289      	uxth	r1, r1
 8012590:	4b18      	ldr	r3, [pc, #96]	@ (80125f4 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8012592:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012596:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8012598:	1a2b      	subs	r3, r5, r0
 801259a:	1a5b      	subs	r3, r3, r1
 801259c:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 801259e:	441a      	add	r2, r3
      if (m < 0) {
 80125a0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 80125a4:	b212      	sxth	r2, r2
 80125a6:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 80125a8:	d002      	beq.n	80125b0 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 80125aa:	1b40      	subs	r0, r0, r5
 80125ac:	4401      	add	r1, r0
 80125ae:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 80125b0:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 80125b4:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 80125b8:	440b      	add	r3, r1
 80125ba:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80125bc:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 80125c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 80125c2:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80125c4:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 80125c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80125ca:	e69a      	b.n	8012302 <tcp_receive+0x1e>
 80125cc:	2001018d 	.word	0x2001018d
 80125d0:	20010198 	.word	0x20010198
 80125d4:	2001018e 	.word	0x2001018e
 80125d8:	200101ac 	.word	0x200101ac
 80125dc:	20010194 	.word	0x20010194
 80125e0:	20010190 	.word	0x20010190
 80125e4:	0801b9a8 	.word	0x0801b9a8
 80125e8:	0801ba90 	.word	0x0801ba90
 80125ec:	080187f8 	.word	0x080187f8
 80125f0:	200101a8 	.word	0x200101a8
 80125f4:	20010180 	.word	0x20010180
        pcb->dupacks = 0;
 80125f8:	2300      	movs	r3, #0
 80125fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125fe:	e7ba      	b.n	8012576 <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012600:	49a2      	ldr	r1, [pc, #648]	@ (801288c <tcp_receive+0x5a8>)
 8012602:	6809      	ldr	r1, [r1, #0]
 8012604:	89c9      	ldrh	r1, [r1, #14]
 8012606:	458e      	cmp	lr, r1
 8012608:	f4bf af2b 	bcs.w	8012462 <tcp_receive+0x17e>
 801260c:	e7a4      	b.n	8012558 <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801260e:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 8012610:	2a00      	cmp	r2, #0
 8012612:	f77f aedc 	ble.w	80123ce <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012616:	8980      	ldrh	r0, [r0, #12]
 8012618:	f7fd f90c 	bl	800f834 <lwip_htons>
 801261c:	07c1      	lsls	r1, r0, #31
 801261e:	f53f aed6 	bmi.w	80123ce <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 8012622:	489b      	ldr	r0, [pc, #620]	@ (8012890 <tcp_receive+0x5ac>)
 8012624:	f7fe fd3e 	bl	80110a4 <tcp_seg_copy>
 8012628:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 801262c:	2800      	cmp	r0, #0
 801262e:	f43f aece 	beq.w	80123ce <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012632:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012636:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801263a:	6859      	ldr	r1, [r3, #4]
 801263c:	6833      	ldr	r3, [r6, #0]
 801263e:	440a      	add	r2, r1
 8012640:	1ad2      	subs	r2, r2, r3
 8012642:	2a00      	cmp	r2, #0
 8012644:	dd07      	ble.n	8012656 <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012646:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8012648:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801264c:	b299      	uxth	r1, r3
 801264e:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 8012652:	f7fe f893 	bl	801077c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012656:	6832      	ldr	r2, [r6, #0]
 8012658:	883b      	ldrh	r3, [r7, #0]
 801265a:	4413      	add	r3, r2
 801265c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801265e:	1a9b      	subs	r3, r3, r2
 8012660:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8012662:	1a9b      	subs	r3, r3, r2
 8012664:	2b00      	cmp	r3, #0
 8012666:	f77f aeb2 	ble.w	80123ce <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801266a:	f8d8 3000 	ldr.w	r3, [r8]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	8998      	ldrh	r0, [r3, #12]
 8012672:	f7fd f8df 	bl	800f834 <lwip_htons>
 8012676:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012678:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801267c:	f100 82a8 	bmi.w	8012bd0 <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012680:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8012682:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 8012684:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012686:	1a89      	subs	r1, r1, r2
 8012688:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801268a:	4411      	add	r1, r2
 801268c:	b289      	uxth	r1, r1
 801268e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012690:	f7fe f874 	bl	801077c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012694:	f8d8 3000 	ldr.w	r3, [r8]
 8012698:	891d      	ldrh	r5, [r3, #8]
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	8998      	ldrh	r0, [r3, #12]
 801269e:	f7fd f8c9 	bl	800f834 <lwip_htons>
 80126a2:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80126a6:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80126a8:	bf18      	it	ne
 80126aa:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80126ac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 80126ae:	442b      	add	r3, r5
 80126b0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80126b2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 80126b4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80126b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80126b8:	4413      	add	r3, r2
 80126ba:	4299      	cmp	r1, r3
 80126bc:	f43f ae87 	beq.w	80123ce <tcp_receive+0xea>
 80126c0:	4b74      	ldr	r3, [pc, #464]	@ (8012894 <tcp_receive+0x5b0>)
 80126c2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80126c6:	4974      	ldr	r1, [pc, #464]	@ (8012898 <tcp_receive+0x5b4>)
 80126c8:	4874      	ldr	r0, [pc, #464]	@ (801289c <tcp_receive+0x5b8>)
 80126ca:	f003 fef7 	bl	80164bc <iprintf>
 80126ce:	e67e      	b.n	80123ce <tcp_receive+0xea>
 80126d0:	4f73      	ldr	r7, [pc, #460]	@ (80128a0 <tcp_receive+0x5bc>)
 80126d2:	e750      	b.n	8012576 <tcp_receive+0x292>
        tcp_ack_now(pcb);
 80126d4:	8b63      	ldrh	r3, [r4, #26]
 80126d6:	f043 0302 	orr.w	r3, r3, #2
 80126da:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126dc:	e677      	b.n	80123ce <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 80126de:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8012890 <tcp_receive+0x5ac>
 80126e2:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80126e6:	2d00      	cmp	r5, #0
 80126e8:	f000 8171 	beq.w	80129ce <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80126ec:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80126f0:	4598      	cmp	r8, r3
 80126f2:	f200 80c3 	bhi.w	801287c <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80126f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 80126fa:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80126fe:	891a      	ldrh	r2, [r3, #8]
 8012700:	4542      	cmp	r2, r8
 8012702:	f0c0 80b0 	bcc.w	8012866 <tcp_receive+0x582>
      inseg.len -= off;
 8012706:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801270a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801270e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012712:	b292      	uxth	r2, r2
      inseg.len -= off;
 8012714:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 8012718:	896b      	ldrh	r3, [r5, #10]
 801271a:	4598      	cmp	r8, r3
 801271c:	d90a      	bls.n	8012734 <tcp_receive+0x450>
        p->len = 0;
 801271e:	2100      	movs	r1, #0
        off -= p->len;
 8012720:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 8012724:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 8012726:	812a      	strh	r2, [r5, #8]
        p = p->next;
 8012728:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801272a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801272e:	896b      	ldrh	r3, [r5, #10]
 8012730:	4543      	cmp	r3, r8
 8012732:	d3f5      	bcc.n	8012720 <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 8012734:	4641      	mov	r1, r8
 8012736:	4628      	mov	r0, r5
 8012738:	f7fd feaa 	bl	8010490 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801273c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801273e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012740:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012744:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8012748:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801274a:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801274c:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801274e:	f73f ae3e 	bgt.w	80123ce <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 8012752:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012756:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801275a:	8998      	ldrh	r0, [r3, #12]
 801275c:	f7fd f86a 	bl	800f834 <lwip_htons>
 8012760:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8012764:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8012766:	bf18      	it	ne
 8012768:	2301      	movne	r3, #1
 801276a:	442b      	add	r3, r5
 801276c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801276e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8012770:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8012772:	f0c0 816d 	bcc.w	8012a50 <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 8012776:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 809e 	beq.w	80128ba <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801277e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012782:	8998      	ldrh	r0, [r3, #12]
 8012784:	f7fd f856 	bl	800f834 <lwip_htons>
 8012788:	07c2      	lsls	r2, r0, #31
 801278a:	f100 8093 	bmi.w	80128b4 <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 801278e:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 8012790:	883a      	ldrh	r2, [r7, #0]
 8012792:	6831      	ldr	r1, [r6, #0]
            while (next &&
 8012794:	b955      	cbnz	r5, 80127ac <tcp_receive+0x4c8>
 8012796:	e1f3      	b.n	8012b80 <tcp_receive+0x89c>
              next = next->next;
 8012798:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801279c:	4628      	mov	r0, r5
 801279e:	f7fe fc73 	bl	8011088 <tcp_seg_free>
              next = next->next;
 80127a2:	4645      	mov	r5, r8
            while (next &&
 80127a4:	f1b8 0f00 	cmp.w	r8, #0
 80127a8:	f000 81e8 	beq.w	8012b7c <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80127ac:	68e8      	ldr	r0, [r5, #12]
 80127ae:	883a      	ldrh	r2, [r7, #0]
 80127b0:	f8d6 e000 	ldr.w	lr, [r6]
 80127b4:	892b      	ldrh	r3, [r5, #8]
 80127b6:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80127ba:	eb02 010e 	add.w	r1, r2, lr
 80127be:	4463      	add	r3, ip
 80127c0:	1acb      	subs	r3, r1, r3
            while (next &&
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f2c0 81a2 	blt.w	8012b0c <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127c8:	8980      	ldrh	r0, [r0, #12]
 80127ca:	f7fd f833 	bl	800f834 <lwip_htons>
 80127ce:	07c3      	lsls	r3, r0, #31
 80127d0:	d5e2      	bpl.n	8012798 <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80127d2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80127d6:	8998      	ldrh	r0, [r3, #12]
 80127d8:	f7fd f82c 	bl	800f834 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127dc:	0780      	lsls	r0, r0, #30
 80127de:	d4db      	bmi.n	8012798 <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80127e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80127e4:	2001      	movs	r0, #1
 80127e6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 80127ea:	f7fd f823 	bl	800f834 <lwip_htons>
 80127ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80127f2:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 80127f6:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80127fa:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80127fc:	b280      	uxth	r0, r0
 80127fe:	f7fd f819 	bl	800f834 <lwip_htons>
 8012802:	f010 0303 	ands.w	r3, r0, #3
 8012806:	bf18      	it	ne
 8012808:	2301      	movne	r3, #1
 801280a:	4498      	add	r8, r3
 801280c:	f8a7 8000 	strh.w	r8, [r7]
 8012810:	e7c2      	b.n	8012798 <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 8012812:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 8012816:	e673      	b.n	8012500 <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012818:	8b62      	ldrh	r2, [r4, #26]
 801281a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801281e:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012820:	bf0c      	ite	eq
 8012822:	2002      	moveq	r0, #2
 8012824:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012826:	fb12 f200 	smulbb	r2, r2, r0
 801282a:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801282c:	428a      	cmp	r2, r1
 801282e:	bf94      	ite	ls
 8012830:	1898      	addls	r0, r3, r2
 8012832:	1858      	addhi	r0, r3, r1
 8012834:	b282      	uxth	r2, r0
 8012836:	4293      	cmp	r3, r2
 8012838:	f240 80dc 	bls.w	80129f4 <tcp_receive+0x710>
 801283c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012840:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8012844:	e645      	b.n	80124d2 <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 8012846:	b148      	cbz	r0, 801285c <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012848:	68c3      	ldr	r3, [r0, #12]
 801284a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801284c:	6858      	ldr	r0, [r3, #4]
 801284e:	f7fc fff5 	bl	800f83c <lwip_htonl>
 8012852:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 8012854:	2f00      	cmp	r7, #0
 8012856:	f73f af3b 	bgt.w	80126d0 <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 801285a:	8b63      	ldrh	r3, [r4, #26]
 801285c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012860:	4f0f      	ldr	r7, [pc, #60]	@ (80128a0 <tcp_receive+0x5bc>)
 8012862:	8363      	strh	r3, [r4, #26]
 8012864:	e687      	b.n	8012576 <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012866:	4b0b      	ldr	r3, [pc, #44]	@ (8012894 <tcp_receive+0x5b0>)
 8012868:	f240 5297 	movw	r2, #1431	@ 0x597
 801286c:	490d      	ldr	r1, [pc, #52]	@ (80128a4 <tcp_receive+0x5c0>)
 801286e:	480b      	ldr	r0, [pc, #44]	@ (801289c <tcp_receive+0x5b8>)
 8012870:	f003 fe24 	bl	80164bc <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012874:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012878:	891a      	ldrh	r2, [r3, #8]
 801287a:	e744      	b.n	8012706 <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801287c:	4b05      	ldr	r3, [pc, #20]	@ (8012894 <tcp_receive+0x5b0>)
 801287e:	f240 5295 	movw	r2, #1429	@ 0x595
 8012882:	4909      	ldr	r1, [pc, #36]	@ (80128a8 <tcp_receive+0x5c4>)
 8012884:	4805      	ldr	r0, [pc, #20]	@ (801289c <tcp_receive+0x5b8>)
 8012886:	f003 fe19 	bl	80164bc <iprintf>
 801288a:	e734      	b.n	80126f6 <tcp_receive+0x412>
 801288c:	200101a8 	.word	0x200101a8
 8012890:	200101ac 	.word	0x200101ac
 8012894:	0801b9a8 	.word	0x0801b9a8
 8012898:	0801badc 	.word	0x0801badc
 801289c:	080187f8 	.word	0x080187f8
 80128a0:	2001018e 	.word	0x2001018e
 80128a4:	0801bacc 	.word	0x0801bacc
 80128a8:	0801babc 	.word	0x0801babc
              pcb->ooseq = pcb->ooseq->next;
 80128ac:	6803      	ldr	r3, [r0, #0]
 80128ae:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80128b0:	f7fe fbea 	bl	8011088 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80128b4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d1f8      	bne.n	80128ac <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 80128ba:	883a      	ldrh	r2, [r7, #0]
 80128bc:	6831      	ldr	r1, [r6, #0]
 80128be:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80128c0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 80128c2:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80128c4:	4293      	cmp	r3, r2
 80128c6:	f0c0 80fd 	bcc.w	8012ac4 <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 80128ca:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 80128cc:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80128ce:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80128d0:	f7fe fb4e 	bl	8010f70 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 80128d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80128d8:	891a      	ldrh	r2, [r3, #8]
 80128da:	b122      	cbz	r2, 80128e6 <tcp_receive+0x602>
          recv_data = inseg.p;
 80128dc:	4ab2      	ldr	r2, [pc, #712]	@ (8012ba8 <tcp_receive+0x8c4>)
 80128de:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 80128e0:	2300      	movs	r3, #0
 80128e2:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80128e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80128ea:	8998      	ldrh	r0, [r3, #12]
 80128ec:	f7fc ffa2 	bl	800f834 <lwip_htons>
 80128f0:	07c2      	lsls	r2, r0, #31
 80128f2:	d504      	bpl.n	80128fe <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 80128f4:	4aad      	ldr	r2, [pc, #692]	@ (8012bac <tcp_receive+0x8c8>)
 80128f6:	7813      	ldrb	r3, [r2, #0]
 80128f8:	f043 0320 	orr.w	r3, r3, #32
 80128fc:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80128fe:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8012900:	2d00      	cmp	r5, #0
 8012902:	f000 8093 	beq.w	8012a2c <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012906:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 8012bb4 <tcp_receive+0x8d0>
 801290a:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 8012bcc <tcp_receive+0x8e8>
 801290e:	4fa8      	ldr	r7, [pc, #672]	@ (8012bb0 <tcp_receive+0x8cc>)
 8012910:	e033      	b.n	801297a <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012912:	68eb      	ldr	r3, [r5, #12]
 8012914:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8012918:	8998      	ldrh	r0, [r3, #12]
 801291a:	f7fc ff8b 	bl	800f834 <lwip_htons>
 801291e:	f010 0003 	ands.w	r0, r0, #3
 8012922:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8012924:	bf18      	it	ne
 8012926:	2001      	movne	r0, #1
 8012928:	4450      	add	r0, sl
 801292a:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 801292c:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801292e:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8012930:	f7fe fb1e 	bl	8010f70 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8012934:	6869      	ldr	r1, [r5, #4]
 8012936:	890b      	ldrh	r3, [r1, #8]
 8012938:	b13b      	cbz	r3, 801294a <tcp_receive+0x666>
            if (recv_data) {
 801293a:	4b9b      	ldr	r3, [pc, #620]	@ (8012ba8 <tcp_receive+0x8c4>)
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	2800      	cmp	r0, #0
 8012940:	d05b      	beq.n	80129fa <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 8012942:	f7fd ffbd 	bl	80108c0 <pbuf_cat>
            cseg->p = NULL;
 8012946:	2300      	movs	r3, #0
 8012948:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801294a:	68eb      	ldr	r3, [r5, #12]
 801294c:	8998      	ldrh	r0, [r3, #12]
 801294e:	f7fc ff71 	bl	800f834 <lwip_htons>
 8012952:	07c3      	lsls	r3, r0, #31
 8012954:	d509      	bpl.n	801296a <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 8012956:	4a95      	ldr	r2, [pc, #596]	@ (8012bac <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012958:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801295a:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801295c:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801295e:	f043 0320 	orr.w	r3, r3, #32
 8012962:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012964:	d101      	bne.n	801296a <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 8012966:	2307      	movs	r3, #7
 8012968:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801296a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801296c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801296e:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012970:	f7fe fb8a 	bl	8011088 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012974:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8012976:	2d00      	cmp	r5, #0
 8012978:	d058      	beq.n	8012a2c <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801297a:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801297c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801297e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8012980:	428b      	cmp	r3, r1
 8012982:	d153      	bne.n	8012a2c <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 8012984:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012986:	8990      	ldrh	r0, [r2, #12]
 8012988:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801298c:	f7fc ff52 	bl	800f834 <lwip_htons>
 8012990:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012992:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012996:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801299a:	bf18      	it	ne
 801299c:	2001      	movne	r0, #1
 801299e:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80129a0:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80129a2:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80129a4:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80129a8:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80129aa:	8998      	ldrh	r0, [r3, #12]
 80129ac:	f7fc ff42 	bl	800f834 <lwip_htons>
 80129b0:	f010 0003 	ands.w	r0, r0, #3
 80129b4:	bf18      	it	ne
 80129b6:	2001      	movne	r0, #1
 80129b8:	4458      	add	r0, fp
 80129ba:	4582      	cmp	sl, r0
 80129bc:	d2a9      	bcs.n	8012912 <tcp_receive+0x62e>
 80129be:	464b      	mov	r3, r9
 80129c0:	f240 622b 	movw	r2, #1579	@ 0x62b
 80129c4:	4641      	mov	r1, r8
 80129c6:	4638      	mov	r0, r7
 80129c8:	f003 fd78 	bl	80164bc <iprintf>
 80129cc:	e7a1      	b.n	8012912 <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80129ce:	4b79      	ldr	r3, [pc, #484]	@ (8012bb4 <tcp_receive+0x8d0>)
 80129d0:	f240 5294 	movw	r2, #1428	@ 0x594
 80129d4:	4978      	ldr	r1, [pc, #480]	@ (8012bb8 <tcp_receive+0x8d4>)
 80129d6:	4876      	ldr	r0, [pc, #472]	@ (8012bb0 <tcp_receive+0x8cc>)
 80129d8:	f003 fd70 	bl	80164bc <iprintf>
 80129dc:	e686      	b.n	80126ec <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80129de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129e2:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80129e4:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129e6:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80129e8:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129ec:	b292      	uxth	r2, r2
 80129ee:	4293      	cmp	r3, r2
 80129f0:	f63f af24 	bhi.w	801283c <tcp_receive+0x558>
 80129f4:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 80129f8:	e56b      	b.n	80124d2 <tcp_receive+0x1ee>
              recv_data = cseg->p;
 80129fa:	6019      	str	r1, [r3, #0]
 80129fc:	e7a3      	b.n	8012946 <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 80129fe:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 8012a02:	486e      	ldr	r0, [pc, #440]	@ (8012bbc <tcp_receive+0x8d8>)
 8012a04:	892b      	ldrh	r3, [r5, #8]
 8012a06:	8902      	ldrh	r2, [r0, #8]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	f67f ace0 	bls.w	80123ce <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a0e:	f7fe fb49 	bl	80110a4 <tcp_seg_copy>
                if (cseg != NULL) {
 8012a12:	2800      	cmp	r0, #0
 8012a14:	f43f acdb 	beq.w	80123ce <tcp_receive+0xea>
                  if (prev != NULL) {
 8012a18:	f1b8 0f00 	cmp.w	r8, #0
 8012a1c:	f000 80c2 	beq.w	8012ba4 <tcp_receive+0x8c0>
                    prev->next = cseg;
 8012a20:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 8012a24:	4629      	mov	r1, r5
 8012a26:	f7ff fb8b 	bl	8012140 <tcp_oos_insert_segment>
 8012a2a:	e4d0      	b.n	80123ce <tcp_receive+0xea>
        tcp_ack(pcb);
 8012a2c:	8b63      	ldrh	r3, [r4, #26]
 8012a2e:	07d8      	lsls	r0, r3, #31
 8012a30:	d50a      	bpl.n	8012a48 <tcp_receive+0x764>
 8012a32:	f023 0301 	bic.w	r3, r3, #1
 8012a36:	f043 0302 	orr.w	r3, r3, #2
 8012a3a:	8363      	strh	r3, [r4, #26]
 8012a3c:	e501      	b.n	8012442 <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012a3e:	485f      	ldr	r0, [pc, #380]	@ (8012bbc <tcp_receive+0x8d8>)
 8012a40:	f7fe fb30 	bl	80110a4 <tcp_seg_copy>
 8012a44:	6760      	str	r0, [r4, #116]	@ 0x74
 8012a46:	e4c2      	b.n	80123ce <tcp_receive+0xea>
        tcp_ack(pcb);
 8012a48:	f043 0301 	orr.w	r3, r3, #1
 8012a4c:	8363      	strh	r3, [r4, #26]
 8012a4e:	e4f8      	b.n	8012442 <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012a54:	8998      	ldrh	r0, [r3, #12]
 8012a56:	f7fc feed 	bl	800f834 <lwip_htons>
 8012a5a:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012a5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a60:	f100 8090 	bmi.w	8012b84 <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012a64:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012a66:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8012a68:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012a6c:	f7fc fee2 	bl	800f834 <lwip_htons>
 8012a70:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8012a72:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012a76:	d503      	bpl.n	8012a80 <tcp_receive+0x79c>
            inseg.len -= 1;
 8012a78:	3901      	subs	r1, #1
 8012a7a:	b289      	uxth	r1, r1
 8012a7c:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8012a80:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8012a84:	f7fd fe7a 	bl	801077c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012a88:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012a8c:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8012a90:	8998      	ldrh	r0, [r3, #12]
 8012a92:	f7fc fecf 	bl	800f834 <lwip_htons>
 8012a96:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012a9a:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8012a9c:	bf18      	it	ne
 8012a9e:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012aa0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8012aa2:	442b      	add	r3, r5
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012aa8:	4413      	add	r3, r2
 8012aaa:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8012aac:	440a      	add	r2, r1
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	f43f ae61 	beq.w	8012776 <tcp_receive+0x492>
 8012ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8012bb4 <tcp_receive+0x8d0>)
 8012ab6:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012aba:	4941      	ldr	r1, [pc, #260]	@ (8012bc0 <tcp_receive+0x8dc>)
 8012abc:	483c      	ldr	r0, [pc, #240]	@ (8012bb0 <tcp_receive+0x8cc>)
 8012abe:	f003 fcfd 	bl	80164bc <iprintf>
 8012ac2:	e658      	b.n	8012776 <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8012bb4 <tcp_receive+0x8d0>)
 8012ac6:	f240 6207 	movw	r2, #1543	@ 0x607
 8012aca:	493e      	ldr	r1, [pc, #248]	@ (8012bc4 <tcp_receive+0x8e0>)
 8012acc:	4838      	ldr	r0, [pc, #224]	@ (8012bb0 <tcp_receive+0x8cc>)
 8012ace:	f003 fcf5 	bl	80164bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012ad2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8012ad4:	883a      	ldrh	r2, [r7, #0]
 8012ad6:	e6f8      	b.n	80128ca <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ad8:	4838      	ldr	r0, [pc, #224]	@ (8012bbc <tcp_receive+0x8d8>)
 8012ada:	f7fe fae3 	bl	80110a4 <tcp_seg_copy>
                  if (cseg != NULL) {
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	f43f ac75 	beq.w	80123ce <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 8012ae4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 8012ae6:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012ae8:	f7ff fb2a 	bl	8012140 <tcp_oos_insert_segment>
 8012aec:	e46f      	b.n	80123ce <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012aee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 8012af2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012af4:	4413      	add	r3, r2
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d901      	bls.n	8012b00 <tcp_receive+0x81c>
 8012afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b00:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 8012b04:	4620      	mov	r0, r4
 8012b06:	f001 fdc3 	bl	8014690 <tcp_rexmit_fast>
      if (!found_dupack) {
 8012b0a:	e534      	b.n	8012576 <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 8012b0c:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	dc01      	bgt.n	8012b18 <tcp_receive+0x834>
            pcb->ooseq = next;
 8012b14:	6765      	str	r5, [r4, #116]	@ 0x74
 8012b16:	e6d3      	b.n	80128c0 <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b18:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b1c:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b20:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b24:	8998      	ldrh	r0, [r3, #12]
 8012b26:	f7fc fe85 	bl	800f834 <lwip_htons>
 8012b2a:	0781      	lsls	r1, r0, #30
 8012b2c:	d504      	bpl.n	8012b38 <tcp_receive+0x854>
                inseg.len -= 1;
 8012b2e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8012b32:	3b01      	subs	r3, #1
 8012b34:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8012b38:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8012b3c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8012b40:	f7fd fe1c 	bl	801077c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b44:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012b48:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8012b4c:	8998      	ldrh	r0, [r3, #12]
 8012b4e:	f7fc fe71 	bl	800f834 <lwip_htons>
 8012b52:	f010 0303 	ands.w	r3, r0, #3
 8012b56:	bf18      	it	ne
 8012b58:	2301      	movne	r3, #1
 8012b5a:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012b5e:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8012b60:	b292      	uxth	r2, r2
 8012b62:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012b64:	6859      	ldr	r1, [r3, #4]
 8012b66:	6833      	ldr	r3, [r6, #0]
 8012b68:	4413      	add	r3, r2
 8012b6a:	428b      	cmp	r3, r1
 8012b6c:	d0d2      	beq.n	8012b14 <tcp_receive+0x830>
 8012b6e:	4b11      	ldr	r3, [pc, #68]	@ (8012bb4 <tcp_receive+0x8d0>)
 8012b70:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012b74:	4914      	ldr	r1, [pc, #80]	@ (8012bc8 <tcp_receive+0x8e4>)
 8012b76:	480e      	ldr	r0, [pc, #56]	@ (8012bb0 <tcp_receive+0x8cc>)
 8012b78:	f003 fca0 	bl	80164bc <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8012b7c:	883a      	ldrh	r2, [r7, #0]
 8012b7e:	6831      	ldr	r1, [r6, #0]
 8012b80:	4411      	add	r1, r2
 8012b82:	e7c7      	b.n	8012b14 <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012b84:	899d      	ldrh	r5, [r3, #12]
 8012b86:	4628      	mov	r0, r5
 8012b88:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 8012b8c:	f7fc fe52 	bl	800f834 <lwip_htons>
 8012b90:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8012b94:	f7fc fe4e 	bl	800f834 <lwip_htons>
 8012b98:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012b9c:	4328      	orrs	r0, r5
 8012b9e:	8198      	strh	r0, [r3, #12]
 8012ba0:	b280      	uxth	r0, r0
 8012ba2:	e760      	b.n	8012a66 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8012ba4:	6760      	str	r0, [r4, #116]	@ 0x74
 8012ba6:	e73d      	b.n	8012a24 <tcp_receive+0x740>
 8012ba8:	20010188 	.word	0x20010188
 8012bac:	2001018c 	.word	0x2001018c
 8012bb0:	080187f8 	.word	0x080187f8
 8012bb4:	0801b9a8 	.word	0x0801b9a8
 8012bb8:	0801baac 	.word	0x0801baac
 8012bbc:	200101ac 	.word	0x200101ac
 8012bc0:	0801badc 	.word	0x0801badc
 8012bc4:	0801bb50 	.word	0x0801bb50
 8012bc8:	0801bb14 	.word	0x0801bb14
 8012bcc:	0801bb70 	.word	0x0801bb70
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	899d      	ldrh	r5, [r3, #12]
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 8012bda:	f7fc fe2b 	bl	800f834 <lwip_htons>
 8012bde:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8012be2:	f7fc fe27 	bl	800f834 <lwip_htons>
 8012be6:	f8d8 3000 	ldr.w	r3, [r8]
 8012bea:	ea40 0205 	orr.w	r2, r0, r5
 8012bee:	68d9      	ldr	r1, [r3, #12]
 8012bf0:	818a      	strh	r2, [r1, #12]
 8012bf2:	e545      	b.n	8012680 <tcp_receive+0x39c>
 8012bf4:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 8012bfc <tcp_receive+0x918>
 8012bf8:	e5ab      	b.n	8012752 <tcp_receive+0x46e>
 8012bfa:	bf00      	nop
 8012bfc:	200101ac 	.word	0x200101ac

08012c00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012c04:	4604      	mov	r4, r0
 8012c06:	2800      	cmp	r0, #0
 8012c08:	f000 808b 	beq.w	8012d22 <tcp_parseopt+0x122>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012c0c:	4b52      	ldr	r3, [pc, #328]	@ (8012d58 <tcp_parseopt+0x158>)
 8012c0e:	881d      	ldrh	r5, [r3, #0]
 8012c10:	2d00      	cmp	r5, #0
 8012c12:	d036      	beq.n	8012c82 <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c14:	4a51      	ldr	r2, [pc, #324]	@ (8012d5c <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c16:	2300      	movs	r3, #0
 8012c18:	4e51      	ldr	r6, [pc, #324]	@ (8012d60 <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c1a:	6810      	ldr	r0, [r2, #0]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	4a51      	ldr	r2, [pc, #324]	@ (8012d64 <tcp_parseopt+0x164>)
    return opts[optidx];
 8012c20:	4f51      	ldr	r7, [pc, #324]	@ (8012d68 <tcp_parseopt+0x168>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c22:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c26:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 8012c28:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c2a:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c2c:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 8012c30:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c34:	f240 8087 	bls.w	8012d46 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 8012c38:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c3a:	b1c0      	cbz	r0, 8012c6e <tcp_parseopt+0x6e>
 8012c3c:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c3e:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c42:	d814      	bhi.n	8012c6e <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c44:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d014      	beq.n	8012c78 <tcp_parseopt+0x78>
 8012c4e:	2b02      	cmp	r3, #2
 8012c50:	d019      	beq.n	8012c86 <tcp_parseopt+0x86>
 8012c52:	b1ab      	cbz	r3, 8012c80 <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c54:	b108      	cbz	r0, 8012c5a <tcp_parseopt+0x5a>
 8012c56:	4562      	cmp	r2, ip
 8012c58:	d24e      	bcs.n	8012cf8 <tcp_parseopt+0xf8>
    return opts[optidx];
 8012c5a:	4b43      	ldr	r3, [pc, #268]	@ (8012d68 <tcp_parseopt+0x168>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4413      	add	r3, r2
 8012c60:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d975      	bls.n	8012d52 <tcp_parseopt+0x152>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012c66:	440b      	add	r3, r1
 8012c68:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e7dc      	b.n	8012c28 <tcp_parseopt+0x28>
    return opts[optidx];
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	4473      	add	r3, lr
 8012c72:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d1ea      	bne.n	8012c4e <tcp_parseopt+0x4e>
 8012c78:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	e7d4      	b.n	8012c2a <tcp_parseopt+0x2a>
 8012c80:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 8012c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 8012c86:	1c8b      	adds	r3, r1, #2
 8012c88:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c8a:	b108      	cbz	r0, 8012c90 <tcp_parseopt+0x90>
 8012c8c:	4562      	cmp	r2, ip
 8012c8e:	d22e      	bcs.n	8012cee <tcp_parseopt+0xee>
    return opts[optidx];
 8012c90:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8012d68 <tcp_parseopt+0x168>
 8012c94:	f8de e000 	ldr.w	lr, [lr]
 8012c98:	4472      	add	r2, lr
 8012c9a:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012c9c:	2a04      	cmp	r2, #4
 8012c9e:	d156      	bne.n	8012d4e <tcp_parseopt+0x14e>
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	42aa      	cmp	r2, r5
 8012ca4:	da53      	bge.n	8012d4e <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 8012ca6:	1cca      	adds	r2, r1, #3
 8012ca8:	3104      	adds	r1, #4
 8012caa:	b292      	uxth	r2, r2
 8012cac:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d03f      	beq.n	8012d32 <tcp_parseopt+0x132>
 8012cb2:	459c      	cmp	ip, r3
 8012cb4:	d825      	bhi.n	8012d02 <tcp_parseopt+0x102>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012cb6:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012cba:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 8012cbc:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012cbe:	f810 e003 	ldrb.w	lr, [r0, r3]
 8012cc2:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012cc6:	d927      	bls.n	8012d18 <tcp_parseopt+0x118>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012cc8:	4b27      	ldr	r3, [pc, #156]	@ (8012d68 <tcp_parseopt+0x168>)
 8012cca:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 8012cce:	4490      	add	r8, r2
 8012cd0:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 8012cd4:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012cd8:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 8012cdc:	f240 5eb4 	movw	lr, #1460	@ 0x5b4
 8012ce0:	1e5a      	subs	r2, r3, #1
 8012ce2:	b292      	uxth	r2, r2
 8012ce4:	4542      	cmp	r2, r8
 8012ce6:	bf88      	it	hi
 8012ce8:	4673      	movhi	r3, lr
 8012cea:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 8012cec:	e7bd      	b.n	8012c6a <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012cee:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 8012cf2:	b2d2      	uxtb	r2, r2
 8012cf4:	5c82      	ldrb	r2, [r0, r2]
 8012cf6:	e7d1      	b.n	8012c9c <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012cf8:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 8012cfc:	b2d2      	uxtb	r2, r2
 8012cfe:	5c83      	ldrb	r3, [r0, r2]
 8012d00:	e7af      	b.n	8012c62 <tcp_parseopt+0x62>
    return opts[optidx];
 8012d02:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8012d68 <tcp_parseopt+0x168>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d06:	4594      	cmp	ip, r2
    return opts[optidx];
 8012d08:	f8de e000 	ldr.w	lr, [lr]
 8012d0c:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d0e:	f893 e014 	ldrb.w	lr, [r3, #20]
 8012d12:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d16:	d8d7      	bhi.n	8012cc8 <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d18:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 8012d1c:	b2d2      	uxtb	r2, r2
 8012d1e:	5c83      	ldrb	r3, [r0, r2]
 8012d20:	e7d8      	b.n	8012cd4 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d22:	4b12      	ldr	r3, [pc, #72]	@ (8012d6c <tcp_parseopt+0x16c>)
 8012d24:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012d28:	4911      	ldr	r1, [pc, #68]	@ (8012d70 <tcp_parseopt+0x170>)
 8012d2a:	4812      	ldr	r0, [pc, #72]	@ (8012d74 <tcp_parseopt+0x174>)
 8012d2c:	f003 fbc6 	bl	80164bc <iprintf>
 8012d30:	e76c      	b.n	8012c0c <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d32:	f8df e034 	ldr.w	lr, [pc, #52]	@ 8012d68 <tcp_parseopt+0x168>
 8012d36:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 8012d3a:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d3c:	f893 e014 	ldrb.w	lr, [r3, #20]
 8012d40:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d44:	e7c3      	b.n	8012cce <tcp_parseopt+0xce>
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d09b      	beq.n	8012c82 <tcp_parseopt+0x82>
 8012d4a:	8031      	strh	r1, [r6, #0]
 8012d4c:	e799      	b.n	8012c82 <tcp_parseopt+0x82>
 8012d4e:	8033      	strh	r3, [r6, #0]
 8012d50:	e797      	b.n	8012c82 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 8012d52:	3102      	adds	r1, #2
 8012d54:	8031      	strh	r1, [r6, #0]
 8012d56:	e794      	b.n	8012c82 <tcp_parseopt+0x82>
 8012d58:	200101a6 	.word	0x200101a6
 8012d5c:	200101a0 	.word	0x200101a0
 8012d60:	2001019c 	.word	0x2001019c
 8012d64:	200101a4 	.word	0x200101a4
 8012d68:	200101a8 	.word	0x200101a8
 8012d6c:	0801b9a8 	.word	0x0801b9a8
 8012d70:	0801bb98 	.word	0x0801bb98
 8012d74:	080187f8 	.word	0x080187f8

08012d78 <tcp_input>:
{
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012d7c:	4604      	mov	r4, r0
{
 8012d7e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012d80:	2800      	cmp	r0, #0
 8012d82:	f000 80d5 	beq.w	8012f30 <tcp_input+0x1b8>
  if (p->len < TCP_HLEN) {
 8012d86:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 8012d88:	4e6d      	ldr	r6, [pc, #436]	@ (8012f40 <tcp_input+0x1c8>)
 8012d8a:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 8012d8c:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 8012d8e:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 8012d90:	d805      	bhi.n	8012d9e <tcp_input+0x26>
  pbuf_free(p);
 8012d92:	4620      	mov	r0, r4
}
 8012d94:	b007      	add	sp, #28
 8012d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8012d9a:	f7fd bbdb 	b.w	8010554 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012d9e:	4f69      	ldr	r7, [pc, #420]	@ (8012f44 <tcp_input+0x1cc>)
 8012da0:	6839      	ldr	r1, [r7, #0]
 8012da2:	6978      	ldr	r0, [r7, #20]
 8012da4:	f7fc f838 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 8012da8:	4605      	mov	r5, r0
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d1f1      	bne.n	8012d92 <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012db4:	2be0      	cmp	r3, #224	@ 0xe0
 8012db6:	d0ec      	beq.n	8012d92 <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012db8:	6833      	ldr	r3, [r6, #0]
 8012dba:	8998      	ldrh	r0, [r3, #12]
 8012dbc:	f7fc fd3a 	bl	800f834 <lwip_htons>
 8012dc0:	0a81      	lsrs	r1, r0, #10
 8012dc2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012dc6:	2913      	cmp	r1, #19
 8012dc8:	d9e3      	bls.n	8012d92 <tcp_input+0x1a>
 8012dca:	8923      	ldrh	r3, [r4, #8]
 8012dcc:	428b      	cmp	r3, r1
 8012dce:	d3e0      	bcc.n	8012d92 <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012dd0:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8012dd4:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012dd6:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8012f78 <tcp_input+0x200>
 8012dda:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8012ddc:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012f7c <tcp_input+0x204>
  if (p->len >= hdrlen_bytes) {
 8012de0:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012de2:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 8012de6:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 8012dea:	f080 819d 	bcs.w	8013128 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	f000 8379 	beq.w	80134e8 <tcp_input+0x770>
    pbuf_remove_header(p, TCP_HLEN);
 8012df6:	2114      	movs	r1, #20
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f7fd fb49 	bl	8010490 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8012dfe:	8965      	ldrh	r5, [r4, #10]
 8012e00:	4b51      	ldr	r3, [pc, #324]	@ (8012f48 <tcp_input+0x1d0>)
    pbuf_remove_header(p, tcphdr_opt1len);
 8012e02:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012e04:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 8012e08:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 8012e0a:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 8012e0c:	f7fd fb40 	bl	8010490 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012e10:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 8012e14:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012e16:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 8012e1a:	8943      	ldrh	r3, [r0, #10]
 8012e1c:	454b      	cmp	r3, r9
 8012e1e:	d3b8      	bcc.n	8012d92 <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012e20:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8012e22:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012e24:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 8012e28:	f7fd fb32 	bl	8010490 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012e2c:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012e2e:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012e30:	442b      	add	r3, r5
 8012e32:	eba3 030a 	sub.w	r3, r3, sl
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012e3a:	2a00      	cmp	r2, #0
 8012e3c:	f040 835b 	bne.w	80134f6 <tcp_input+0x77e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012e40:	6822      	ldr	r2, [r4, #0]
 8012e42:	8912      	ldrh	r2, [r2, #8]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d005      	beq.n	8012e54 <tcp_input+0xdc>
 8012e48:	4b40      	ldr	r3, [pc, #256]	@ (8012f4c <tcp_input+0x1d4>)
 8012e4a:	22e0      	movs	r2, #224	@ 0xe0
 8012e4c:	4940      	ldr	r1, [pc, #256]	@ (8012f50 <tcp_input+0x1d8>)
 8012e4e:	4841      	ldr	r0, [pc, #260]	@ (8012f54 <tcp_input+0x1dc>)
 8012e50:	f003 fb34 	bl	80164bc <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012e54:	6835      	ldr	r5, [r6, #0]
 8012e56:	8828      	ldrh	r0, [r5, #0]
 8012e58:	f7fc fcec 	bl	800f834 <lwip_htons>
 8012e5c:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012e5e:	6835      	ldr	r5, [r6, #0]
 8012e60:	8868      	ldrh	r0, [r5, #2]
 8012e62:	f7fc fce7 	bl	800f834 <lwip_htons>
 8012e66:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012e68:	6835      	ldr	r5, [r6, #0]
 8012e6a:	6868      	ldr	r0, [r5, #4]
 8012e6c:	f7fc fce6 	bl	800f83c <lwip_htonl>
 8012e70:	4b39      	ldr	r3, [pc, #228]	@ (8012f58 <tcp_input+0x1e0>)
 8012e72:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012e74:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012e76:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012e78:	68a8      	ldr	r0, [r5, #8]
 8012e7a:	f7fc fcdf 	bl	800f83c <lwip_htonl>
 8012e7e:	4b37      	ldr	r3, [pc, #220]	@ (8012f5c <tcp_input+0x1e4>)
 8012e80:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012e82:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012e84:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012e86:	89e8      	ldrh	r0, [r5, #14]
 8012e88:	f7fc fcd4 	bl	800f834 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8012e8c:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012e8e:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 8012e90:	8998      	ldrh	r0, [r3, #12]
 8012e92:	f7fc fccf 	bl	800f834 <lwip_htons>
 8012e96:	4932      	ldr	r1, [pc, #200]	@ (8012f60 <tcp_input+0x1e8>)
 8012e98:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 8012e9c:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 8012e9e:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012ea0:	0781      	lsls	r1, r0, #30
 8012ea2:	f040 8147 	bne.w	8013134 <tcp_input+0x3bc>
  tcplen = p->tot_len;
 8012ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8012f64 <tcp_input+0x1ec>)
 8012ea8:	9305      	str	r3, [sp, #20]
 8012eaa:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eac:	4b2e      	ldr	r3, [pc, #184]	@ (8012f68 <tcp_input+0x1f0>)
 8012eae:	681d      	ldr	r5, [r3, #0]
 8012eb0:	2d00      	cmp	r5, #0
 8012eb2:	f000 80e8 	beq.w	8013086 <tcp_input+0x30e>
  prev = NULL;
 8012eb6:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012eba:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8012f4c <tcp_input+0x1d4>
 8012ebe:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8012f80 <tcp_input+0x208>
 8012ec2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012f54 <tcp_input+0x1dc>
 8012ec6:	e017      	b.n	8012ef8 <tcp_input+0x180>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012ec8:	2b0a      	cmp	r3, #10
 8012eca:	d021      	beq.n	8012f10 <tcp_input+0x198>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d028      	beq.n	8012f22 <tcp_input+0x1aa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ed0:	7a2a      	ldrb	r2, [r5, #8]
 8012ed2:	b132      	cbz	r2, 8012ee2 <tcp_input+0x16a>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012eda:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d104      	bne.n	8012eec <tcp_input+0x174>
    if (pcb->remote_port == tcphdr->src &&
 8012ee2:	6833      	ldr	r3, [r6, #0]
 8012ee4:	8b29      	ldrh	r1, [r5, #24]
 8012ee6:	881a      	ldrh	r2, [r3, #0]
 8012ee8:	4291      	cmp	r1, r2
 8012eea:	d04b      	beq.n	8012f84 <tcp_input+0x20c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eec:	68eb      	ldr	r3, [r5, #12]
 8012eee:	46a8      	mov	r8, r5
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f000 80c8 	beq.w	8013086 <tcp_input+0x30e>
 8012ef6:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012ef8:	7d2b      	ldrb	r3, [r5, #20]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1e4      	bne.n	8012ec8 <tcp_input+0x150>
 8012efe:	4653      	mov	r3, sl
 8012f00:	22fb      	movs	r2, #251	@ 0xfb
 8012f02:	4659      	mov	r1, fp
 8012f04:	4648      	mov	r0, r9
 8012f06:	f003 fad9 	bl	80164bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012f0a:	7d2b      	ldrb	r3, [r5, #20]
 8012f0c:	2b0a      	cmp	r3, #10
 8012f0e:	d1dd      	bne.n	8012ecc <tcp_input+0x154>
 8012f10:	4653      	mov	r3, sl
 8012f12:	22fc      	movs	r2, #252	@ 0xfc
 8012f14:	4915      	ldr	r1, [pc, #84]	@ (8012f6c <tcp_input+0x1f4>)
 8012f16:	4648      	mov	r0, r9
 8012f18:	f003 fad0 	bl	80164bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012f1c:	7d2b      	ldrb	r3, [r5, #20]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d1d6      	bne.n	8012ed0 <tcp_input+0x158>
 8012f22:	4653      	mov	r3, sl
 8012f24:	22fd      	movs	r2, #253	@ 0xfd
 8012f26:	4912      	ldr	r1, [pc, #72]	@ (8012f70 <tcp_input+0x1f8>)
 8012f28:	4648      	mov	r0, r9
 8012f2a:	f003 fac7 	bl	80164bc <iprintf>
 8012f2e:	e7cf      	b.n	8012ed0 <tcp_input+0x158>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012f30:	4b06      	ldr	r3, [pc, #24]	@ (8012f4c <tcp_input+0x1d4>)
 8012f32:	2283      	movs	r2, #131	@ 0x83
 8012f34:	490f      	ldr	r1, [pc, #60]	@ (8012f74 <tcp_input+0x1fc>)
 8012f36:	4807      	ldr	r0, [pc, #28]	@ (8012f54 <tcp_input+0x1dc>)
 8012f38:	f003 fac0 	bl	80164bc <iprintf>
 8012f3c:	e723      	b.n	8012d86 <tcp_input+0xe>
 8012f3e:	bf00      	nop
 8012f40:	200101a8 	.word	0x200101a8
 8012f44:	20009014 	.word	0x20009014
 8012f48:	200101a4 	.word	0x200101a4
 8012f4c:	0801b9a8 	.word	0x0801b9a8
 8012f50:	0801bbe8 	.word	0x0801bbe8
 8012f54:	080187f8 	.word	0x080187f8
 8012f58:	20010198 	.word	0x20010198
 8012f5c:	20010194 	.word	0x20010194
 8012f60:	2001018d 	.word	0x2001018d
 8012f64:	2001018e 	.word	0x2001018e
 8012f68:	20010174 	.word	0x20010174
 8012f6c:	0801bc30 	.word	0x0801bc30
 8012f70:	0801bc5c 	.word	0x0801bc5c
 8012f74:	0801bbb4 	.word	0x0801bbb4
 8012f78:	200101a6 	.word	0x200101a6
 8012f7c:	200101a0 	.word	0x200101a0
 8012f80:	0801bc08 	.word	0x0801bc08
    if (pcb->remote_port == tcphdr->src &&
 8012f84:	885b      	ldrh	r3, [r3, #2]
 8012f86:	8aea      	ldrh	r2, [r5, #22]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d1af      	bne.n	8012eec <tcp_input+0x174>
        pcb->local_port == tcphdr->dest &&
 8012f8c:	686a      	ldr	r2, [r5, #4]
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d1ab      	bne.n	8012eec <tcp_input+0x174>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f94:	682a      	ldr	r2, [r5, #0]
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d1a7      	bne.n	8012eec <tcp_input+0x174>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012f9c:	68eb      	ldr	r3, [r5, #12]
 8012f9e:	42ab      	cmp	r3, r5
 8012fa0:	f000 843d 	beq.w	801381e <tcp_input+0xaa6>
      if (prev != NULL) {
 8012fa4:	f1b8 0f00 	cmp.w	r8, #0
 8012fa8:	d009      	beq.n	8012fbe <tcp_input+0x246>
        pcb->next = tcp_active_pcbs;
 8012faa:	4a6f      	ldr	r2, [pc, #444]	@ (8013168 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 8012fac:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 8012fb0:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 8012fb2:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 8012fb4:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012fb6:	68eb      	ldr	r3, [r5, #12]
 8012fb8:	42ab      	cmp	r3, r5
 8012fba:	f000 843e 	beq.w	801383a <tcp_input+0xac2>
    inseg.next = NULL;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	4f6a      	ldr	r7, [pc, #424]	@ (801316c <tcp_input+0x3f4>)
    recv_data = NULL;
 8012fc2:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8013188 <tcp_input+0x410>
    recv_flags = 0;
 8012fc6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 801318c <tcp_input+0x414>
    recv_acked = 0;
 8012fca:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 8013190 <tcp_input+0x418>
    inseg.next = NULL;
 8012fce:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 8012fd0:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 8012fd4:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 8012fd8:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 8012fdc:	4b64      	ldr	r3, [pc, #400]	@ (8013170 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 8012fde:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 8012fe0:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 8012fe2:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 8012fe4:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 8012fe6:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 8012fe8:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 8012fea:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 8012fec:	d503      	bpl.n	8012ff6 <tcp_input+0x27e>
      p->flags |= PBUF_FLAG_PUSH;
 8012fee:	7b62      	ldrb	r2, [r4, #13]
 8012ff0:	f042 0201 	orr.w	r2, r2, #1
 8012ff4:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 8012ff6:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 8012ff8:	2a00      	cmp	r2, #0
 8012ffa:	f000 826c 	beq.w	80134d6 <tcp_input+0x75e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012ffe:	4628      	mov	r0, r5
 8013000:	f7fe ff8e 	bl	8011f20 <tcp_process_refused_data>
 8013004:	300d      	adds	r0, #13
 8013006:	f000 8269 	beq.w	80134dc <tcp_input+0x764>
 801300a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 801300c:	b123      	cbz	r3, 8013018 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801300e:	9b05      	ldr	r3, [sp, #20]
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f040 8262 	bne.w	80134dc <tcp_input+0x764>
  if (flags & TCP_RST) {
 8013018:	4b55      	ldr	r3, [pc, #340]	@ (8013170 <tcp_input+0x3f8>)
    tcp_input_pcb = pcb;
 801301a:	4c56      	ldr	r4, [pc, #344]	@ (8013174 <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 801301c:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801301e:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 8013020:	075a      	lsls	r2, r3, #29
 8013022:	f140 814d 	bpl.w	80132c0 <tcp_input+0x548>
    if (pcb->state == SYN_SENT) {
 8013026:	7d29      	ldrb	r1, [r5, #20]
 8013028:	2902      	cmp	r1, #2
 801302a:	f000 82d7 	beq.w	80135dc <tcp_input+0x864>
      if (seqno == pcb->rcv_nxt) {
 801302e:	4b52      	ldr	r3, [pc, #328]	@ (8013178 <tcp_input+0x400>)
 8013030:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	f000 8409 	beq.w	801384c <tcp_input+0xad4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801303a:	1a9b      	subs	r3, r3, r2
 801303c:	d404      	bmi.n	8013048 <tcp_input+0x2d0>
 801303e:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8013040:	1a9b      	subs	r3, r3, r2
 8013042:	2b00      	cmp	r3, #0
 8013044:	f340 833e 	ble.w	80136c4 <tcp_input+0x94c>
      if (recv_flags & TF_RESET) {
 8013048:	f899 3000 	ldrb.w	r3, [r9]
 801304c:	071a      	lsls	r2, r3, #28
 801304e:	f140 825a 	bpl.w	8013506 <tcp_input+0x78e>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013052:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8013056:	b11b      	cbz	r3, 8013060 <tcp_input+0x2e8>
 8013058:	f06f 010d 	mvn.w	r1, #13
 801305c:	6928      	ldr	r0, [r5, #16]
 801305e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013060:	4841      	ldr	r0, [pc, #260]	@ (8013168 <tcp_input+0x3f0>)
 8013062:	4629      	mov	r1, r5
 8013064:	f7fe fbb8 	bl	80117d8 <tcp_pcb_remove>
        tcp_free(pcb);
 8013068:	4628      	mov	r0, r5
 801306a:	f7fd fe89 	bl	8010d80 <tcp_free>
    tcp_input_pcb = NULL;
 801306e:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 8013070:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 8013072:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 8013074:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 8013078:	b110      	cbz	r0, 8013080 <tcp_input+0x308>
      pbuf_free(inseg.p);
 801307a:	f7fd fa6b 	bl	8010554 <pbuf_free>
      inseg.p = NULL;
 801307e:	607d      	str	r5, [r7, #4]
}
 8013080:	b007      	add	sp, #28
 8013082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013086:	4b3d      	ldr	r3, [pc, #244]	@ (801317c <tcp_input+0x404>)
 8013088:	681d      	ldr	r5, [r3, #0]
 801308a:	2d00      	cmp	r5, #0
 801308c:	d05b      	beq.n	8013146 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801308e:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8013194 <tcp_input+0x41c>
 8013092:	f8df a104 	ldr.w	sl, [pc, #260]	@ 8013198 <tcp_input+0x420>
 8013096:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 801319c <tcp_input+0x424>
 801309a:	e002      	b.n	80130a2 <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801309c:	68ed      	ldr	r5, [r5, #12]
 801309e:	2d00      	cmp	r5, #0
 80130a0:	d051      	beq.n	8013146 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80130a2:	7d2b      	ldrb	r3, [r5, #20]
 80130a4:	2b0a      	cmp	r3, #10
 80130a6:	4643      	mov	r3, r8
 80130a8:	d005      	beq.n	80130b6 <tcp_input+0x33e>
 80130aa:	f240 121f 	movw	r2, #287	@ 0x11f
 80130ae:	4651      	mov	r1, sl
 80130b0:	4648      	mov	r0, r9
 80130b2:	f003 fa03 	bl	80164bc <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130b6:	7a2a      	ldrb	r2, [r5, #8]
 80130b8:	b132      	cbz	r2, 80130c8 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80130c0:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d1e9      	bne.n	801309c <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 80130c8:	6833      	ldr	r3, [r6, #0]
 80130ca:	8b29      	ldrh	r1, [r5, #24]
 80130cc:	881a      	ldrh	r2, [r3, #0]
 80130ce:	4291      	cmp	r1, r2
 80130d0:	d1e4      	bne.n	801309c <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 80130d2:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 80130d4:	8aeb      	ldrh	r3, [r5, #22]
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d1e0      	bne.n	801309c <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 80130da:	6868      	ldr	r0, [r5, #4]
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	4290      	cmp	r0, r2
 80130e0:	d1dc      	bne.n	801309c <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80130e2:	6828      	ldr	r0, [r5, #0]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	4290      	cmp	r0, r2
 80130e8:	d1d8      	bne.n	801309c <tcp_input+0x324>
  if (flags & TCP_RST) {
 80130ea:	4a21      	ldr	r2, [pc, #132]	@ (8013170 <tcp_input+0x3f8>)
 80130ec:	7810      	ldrb	r0, [r2, #0]
 80130ee:	0742      	lsls	r2, r0, #29
 80130f0:	f53f ae4f 	bmi.w	8012d92 <tcp_input+0x1a>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130f4:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 80130f6:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130f8:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 80130fa:	f140 83b2 	bpl.w	8013862 <tcp_input+0xaea>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80130fe:	4a1e      	ldr	r2, [pc, #120]	@ (8013178 <tcp_input+0x400>)
 8013100:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8013102:	6812      	ldr	r2, [r2, #0]
 8013104:	1a10      	subs	r0, r2, r0
 8013106:	d404      	bmi.n	8013112 <tcp_input+0x39a>
 8013108:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 801310a:	1bc0      	subs	r0, r0, r7
 801310c:	2800      	cmp	r0, #0
 801310e:	f340 83c7 	ble.w	80138a0 <tcp_input+0xb28>
  if ((tcplen > 0)) {
 8013112:	2e00      	cmp	r6, #0
 8013114:	f43f ae3d 	beq.w	8012d92 <tcp_input+0x1a>
    tcp_ack_now(pcb);
 8013118:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801311a:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801311c:	f043 0302 	orr.w	r3, r3, #2
 8013120:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8013122:	f001 fb69 	bl	80147f8 <tcp_output>
        pbuf_free(p);
 8013126:	e634      	b.n	8012d92 <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 8013128:	4a15      	ldr	r2, [pc, #84]	@ (8013180 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801312a:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801312c:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801312e:	f7fd f9af 	bl	8010490 <pbuf_remove_header>
 8013132:	e68f      	b.n	8012e54 <tcp_input+0xdc>
    tcplen++;
 8013134:	1c53      	adds	r3, r2, #1
 8013136:	4913      	ldr	r1, [pc, #76]	@ (8013184 <tcp_input+0x40c>)
 8013138:	b29b      	uxth	r3, r3
 801313a:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801313c:	429a      	cmp	r2, r3
    tcplen++;
 801313e:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8013140:	f67f aeb4 	bls.w	8012eac <tcp_input+0x134>
 8013144:	e625      	b.n	8012d92 <tcp_input+0x1a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013146:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 80131a0 <tcp_input+0x428>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801314a:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801314e:	f8d8 2000 	ldr.w	r2, [r8]
 8013152:	2a00      	cmp	r2, #0
 8013154:	f000 8227 	beq.w	80135a6 <tcp_input+0x82e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013158:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801315a:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801315c:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 8013160:	2100      	movs	r1, #0
 8013162:	4692      	mov	sl, r2
 8013164:	e024      	b.n	80131b0 <tcp_input+0x438>
 8013166:	bf00      	nop
 8013168:	20010174 	.word	0x20010174
 801316c:	200101ac 	.word	0x200101ac
 8013170:	2001018d 	.word	0x2001018d
 8013174:	20010184 	.word	0x20010184
 8013178:	20010198 	.word	0x20010198
 801317c:	20010170 	.word	0x20010170
 8013180:	200101a4 	.word	0x200101a4
 8013184:	2001018e 	.word	0x2001018e
 8013188:	20010188 	.word	0x20010188
 801318c:	2001018c 	.word	0x2001018c
 8013190:	20010190 	.word	0x20010190
 8013194:	0801b9a8 	.word	0x0801b9a8
 8013198:	0801bcdc 	.word	0x0801bcdc
 801319c:	080187f8 	.word	0x080187f8
 80131a0:	20010178 	.word	0x20010178
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131a4:	68eb      	ldr	r3, [r5, #12]
 80131a6:	4629      	mov	r1, r5
 80131a8:	461d      	mov	r5, r3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f000 81fb 	beq.w	80135a6 <tcp_input+0x82e>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80131b0:	7a2a      	ldrb	r2, [r5, #8]
 80131b2:	b12a      	cbz	r2, 80131c0 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80131b4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80131b8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	429a      	cmp	r2, r3
 80131be:	d1f1      	bne.n	80131a4 <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 80131c0:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 80131c4:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 80131c8:	4599      	cmp	r9, r3
 80131ca:	d1eb      	bne.n	80131a4 <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80131cc:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80131ce:	b10b      	cbz	r3, 80131d4 <tcp_input+0x45c>
 80131d0:	4573      	cmp	r3, lr
 80131d2:	d1e7      	bne.n	80131a4 <tcp_input+0x42c>
      if (prev != NULL) {
 80131d4:	4652      	mov	r2, sl
 80131d6:	b121      	cbz	r1, 80131e2 <tcp_input+0x46a>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80131d8:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80131da:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80131de:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80131e0:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 80131e2:	4ba8      	ldr	r3, [pc, #672]	@ (8013484 <tcp_input+0x70c>)
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	075a      	lsls	r2, r3, #29
 80131e8:	f53f add3 	bmi.w	8012d92 <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 80131ec:	f013 0810 	ands.w	r8, r3, #16
 80131f0:	f040 826d 	bne.w	80136ce <tcp_input+0x956>
  } else if (flags & TCP_SYN) {
 80131f4:	0798      	lsls	r0, r3, #30
 80131f6:	f57f adcc 	bpl.w	8012d92 <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 80131fa:	7d68      	ldrb	r0, [r5, #21]
 80131fc:	f7fe fc96 	bl	8011b2c <tcp_alloc>
    if (npcb == NULL) {
 8013200:	4681      	mov	r9, r0
 8013202:	2800      	cmp	r0, #0
 8013204:	f000 82ca 	beq.w	801379c <tcp_input+0xa24>
    npcb->remote_port = tcphdr->src;
 8013208:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801320a:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 801320e:	4f9e      	ldr	r7, [pc, #632]	@ (8013488 <tcp_input+0x710>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013210:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 8013214:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 8013216:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 8013218:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801321a:	7849      	ldrb	r1, [r1, #1]
 801321c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 8013220:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 8013222:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013224:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 8013226:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 8013228:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 801322a:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 801322c:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801322e:	f7fe ff0f 	bl	8012050 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013232:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 8013234:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013236:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 8013238:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 801323c:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013240:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 8013244:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 8013248:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 801324c:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013250:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 8013252:	4a8e      	ldr	r2, [pc, #568]	@ (801348c <tcp_input+0x714>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013254:	f003 030c 	and.w	r3, r3, #12
 8013258:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801325c:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801325e:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 8013262:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 8013266:	6813      	ldr	r3, [r2, #0]
 8013268:	f8c2 9000 	str.w	r9, [r2]
 801326c:	f8c9 300c 	str.w	r3, [r9, #12]
 8013270:	f001 fddc 	bl	8014e2c <tcp_timer_needed>
 8013274:	4b86      	ldr	r3, [pc, #536]	@ (8013490 <tcp_input+0x718>)
 8013276:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8013278:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 801327a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801327c:	f7ff fcc0 	bl	8012c00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013280:	6832      	ldr	r2, [r6, #0]
 8013282:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013284:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 8013288:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 801328a:	89d2      	ldrh	r2, [r2, #14]
 801328c:	f362 030f 	bfi	r3, r2, #0, #16
 8013290:	f362 431f 	bfi	r3, r2, #16, #16
 8013294:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013298:	f7fb fb70 	bl	800e97c <ip4_route>
 801329c:	462a      	mov	r2, r5
 801329e:	4601      	mov	r1, r0
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7fe fef1 	bl	8012088 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80132a6:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80132a8:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80132ac:	4648      	mov	r0, r9
 80132ae:	f001 f895 	bl	80143dc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80132b2:	2800      	cmp	r0, #0
 80132b4:	f040 827d 	bne.w	80137b2 <tcp_input+0xa3a>
    tcp_output(npcb);
 80132b8:	4648      	mov	r0, r9
 80132ba:	f001 fa9d 	bl	80147f8 <tcp_output>
 80132be:	e568      	b.n	8012d92 <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80132c0:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 80132c2:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80132c4:	d504      	bpl.n	80132d0 <tcp_input+0x558>
 80132c6:	7d2b      	ldrb	r3, [r5, #20]
 80132c8:	3b02      	subs	r3, #2
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	f200 819c 	bhi.w	8013608 <tcp_input+0x890>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80132d0:	06d0      	lsls	r0, r2, #27
 80132d2:	d402      	bmi.n	80132da <tcp_input+0x562>
    pcb->tmr = tcp_ticks;
 80132d4:	4b6f      	ldr	r3, [pc, #444]	@ (8013494 <tcp_input+0x71c>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 80132da:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 80132dc:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 80132de:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 80132e2:	f7ff fc8d 	bl	8012c00 <tcp_parseopt>
  switch (pcb->state) {
 80132e6:	7d2b      	ldrb	r3, [r5, #20]
 80132e8:	3b02      	subs	r3, #2
 80132ea:	2b07      	cmp	r3, #7
 80132ec:	f63f aeac 	bhi.w	8013048 <tcp_input+0x2d0>
 80132f0:	e8df f003 	tbb	[pc, r3]
 80132f4:	8f041334 	.word	0x8f041334
 80132f8:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 80132fc:	4628      	mov	r0, r5
 80132fe:	f7fe fff1 	bl	80122e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013302:	f899 3000 	ldrb.w	r3, [r9]
 8013306:	0699      	lsls	r1, r3, #26
 8013308:	f57f ae9e 	bpl.w	8013048 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 801330c:	8b6b      	ldrh	r3, [r5, #26]
 801330e:	f043 0302 	orr.w	r3, r3, #2
 8013312:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 8013314:	2307      	movs	r3, #7
 8013316:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8013318:	e696      	b.n	8013048 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 801331a:	4b5a      	ldr	r3, [pc, #360]	@ (8013484 <tcp_input+0x70c>)
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	06da      	lsls	r2, r3, #27
 8013320:	f140 8210 	bpl.w	8013744 <tcp_input+0x9cc>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013324:	4b5c      	ldr	r3, [pc, #368]	@ (8013498 <tcp_input+0x720>)
 8013326:	6819      	ldr	r1, [r3, #0]
 8013328:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801332a:	43db      	mvns	r3, r3
 801332c:	42cb      	cmn	r3, r1
 801332e:	d404      	bmi.n	801333a <tcp_input+0x5c2>
 8013330:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013332:	1acb      	subs	r3, r1, r3
 8013334:	2b00      	cmp	r3, #0
 8013336:	f340 8242 	ble.w	80137be <tcp_input+0xa46>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801333a:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801333c:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801333e:	8810      	ldrh	r0, [r2, #0]
 8013340:	4a51      	ldr	r2, [pc, #324]	@ (8013488 <tcp_input+0x710>)
 8013342:	6812      	ldr	r2, [r2, #0]
 8013344:	4402      	add	r2, r0
 8013346:	8818      	ldrh	r0, [r3, #0]
 8013348:	9002      	str	r0, [sp, #8]
 801334a:	4628      	mov	r0, r5
 801334c:	885b      	ldrh	r3, [r3, #2]
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	4b52      	ldr	r3, [pc, #328]	@ (801349c <tcp_input+0x724>)
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	3304      	adds	r3, #4
 8013356:	f001 f9d5 	bl	8014704 <tcp_rst>
    if (err != ERR_ABRT) {
 801335a:	e675      	b.n	8013048 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801335c:	4b49      	ldr	r3, [pc, #292]	@ (8013484 <tcp_input+0x70c>)
 801335e:	781a      	ldrb	r2, [r3, #0]
 8013360:	f002 0312 	and.w	r3, r2, #18
 8013364:	2b12      	cmp	r3, #18
 8013366:	f000 8153 	beq.w	8013610 <tcp_input+0x898>
      else if (flags & TCP_ACK) {
 801336a:	06d1      	lsls	r1, r2, #27
 801336c:	f57f ae6c 	bpl.w	8013048 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013370:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013372:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013374:	8811      	ldrh	r1, [r2, #0]
 8013376:	4a44      	ldr	r2, [pc, #272]	@ (8013488 <tcp_input+0x710>)
 8013378:	8818      	ldrh	r0, [r3, #0]
 801337a:	6812      	ldr	r2, [r2, #0]
 801337c:	440a      	add	r2, r1
 801337e:	4946      	ldr	r1, [pc, #280]	@ (8013498 <tcp_input+0x720>)
 8013380:	6809      	ldr	r1, [r1, #0]
 8013382:	9002      	str	r0, [sp, #8]
 8013384:	4628      	mov	r0, r5
 8013386:	885b      	ldrh	r3, [r3, #2]
 8013388:	9301      	str	r3, [sp, #4]
 801338a:	4b44      	ldr	r3, [pc, #272]	@ (801349c <tcp_input+0x724>)
 801338c:	9300      	str	r3, [sp, #0]
 801338e:	3304      	adds	r3, #4
 8013390:	f001 f9b8 	bl	8014704 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013394:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 8013398:	2b05      	cmp	r3, #5
 801339a:	f63f ae55 	bhi.w	8013048 <tcp_input+0x2d0>
          pcb->rtime = 0;
 801339e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 80133a0:	4628      	mov	r0, r5
          pcb->rtime = 0;
 80133a2:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80133a4:	f001 fc18 	bl	8014bd8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 80133a8:	e64e      	b.n	8013048 <tcp_input+0x2d0>
      tcp_receive(pcb);
 80133aa:	4628      	mov	r0, r5
 80133ac:	f7fe ff9a 	bl	80122e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80133b0:	4b34      	ldr	r3, [pc, #208]	@ (8013484 <tcp_input+0x70c>)
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	06d9      	lsls	r1, r3, #27
 80133b6:	f57f ae47 	bpl.w	8013048 <tcp_input+0x2d0>
 80133ba:	4b37      	ldr	r3, [pc, #220]	@ (8013498 <tcp_input+0x720>)
 80133bc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80133be:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 80133c0:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80133c4:	4291      	cmp	r1, r2
 80133c6:	f47f ae3f 	bne.w	8013048 <tcp_input+0x2d0>
 80133ca:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 80133cc:	2a00      	cmp	r2, #0
 80133ce:	f47f ae3b 	bne.w	8013048 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 80133d2:	f043 0310 	orr.w	r3, r3, #16
 80133d6:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 80133da:	e635      	b.n	8013048 <tcp_input+0x2d0>
      tcp_receive(pcb);
 80133dc:	4628      	mov	r0, r5
 80133de:	f7fe ff81 	bl	80122e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80133e2:	f899 3000 	ldrb.w	r3, [r9]
 80133e6:	069e      	lsls	r6, r3, #26
 80133e8:	f57f ae2e 	bpl.w	8013048 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 80133ec:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 80133ee:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 80133f0:	f043 0302 	orr.w	r3, r3, #2
 80133f4:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 80133f6:	f7fd fefd 	bl	80111f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80133fa:	4b24      	ldr	r3, [pc, #144]	@ (801348c <tcp_input+0x714>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	42ab      	cmp	r3, r5
 8013400:	d05a      	beq.n	80134b8 <tcp_input+0x740>
 8013402:	2b00      	cmp	r3, #0
 8013404:	d05b      	beq.n	80134be <tcp_input+0x746>
 8013406:	68da      	ldr	r2, [r3, #12]
 8013408:	42aa      	cmp	r2, r5
 801340a:	f000 8205 	beq.w	8013818 <tcp_input+0xaa0>
 801340e:	4613      	mov	r3, r2
 8013410:	e7f7      	b.n	8013402 <tcp_input+0x68a>
      tcp_receive(pcb);
 8013412:	4628      	mov	r0, r5
 8013414:	f7fe ff66 	bl	80122e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013418:	f899 3000 	ldrb.w	r3, [r9]
 801341c:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013420:	4b18      	ldr	r3, [pc, #96]	@ (8013484 <tcp_input+0x70c>)
      if (recv_flags & TF_GOT_FIN) {
 8013422:	f000 817e 	beq.w	8013722 <tcp_input+0x9aa>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013426:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 8013428:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801342a:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 801342c:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013430:	d504      	bpl.n	801343c <tcp_input+0x6c4>
 8013432:	4a19      	ldr	r2, [pc, #100]	@ (8013498 <tcp_input+0x720>)
 8013434:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8013436:	6812      	ldr	r2, [r2, #0]
 8013438:	4291      	cmp	r1, r2
 801343a:	d031      	beq.n	80134a0 <tcp_input+0x728>
          tcp_ack_now(pcb);
 801343c:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801343e:	2308      	movs	r3, #8
 8013440:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8013442:	e601      	b.n	8013048 <tcp_input+0x2d0>
      tcp_receive(pcb);
 8013444:	4628      	mov	r0, r5
 8013446:	f7fe ff4d 	bl	80122e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801344a:	4b0e      	ldr	r3, [pc, #56]	@ (8013484 <tcp_input+0x70c>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	06d8      	lsls	r0, r3, #27
 8013450:	f57f adfa 	bpl.w	8013048 <tcp_input+0x2d0>
 8013454:	4b10      	ldr	r3, [pc, #64]	@ (8013498 <tcp_input+0x720>)
 8013456:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	429a      	cmp	r2, r3
 801345c:	f47f adf4 	bne.w	8013048 <tcp_input+0x2d0>
 8013460:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8013462:	2b00      	cmp	r3, #0
 8013464:	f47f adf0 	bne.w	8013048 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 8013468:	4628      	mov	r0, r5
 801346a:	f7fd fec3 	bl	80111f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801346e:	4b07      	ldr	r3, [pc, #28]	@ (801348c <tcp_input+0x714>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	42ab      	cmp	r3, r5
 8013474:	d020      	beq.n	80134b8 <tcp_input+0x740>
 8013476:	b313      	cbz	r3, 80134be <tcp_input+0x746>
 8013478:	68da      	ldr	r2, [r3, #12]
 801347a:	42aa      	cmp	r2, r5
 801347c:	f000 81cc 	beq.w	8013818 <tcp_input+0xaa0>
 8013480:	4613      	mov	r3, r2
 8013482:	e7f8      	b.n	8013476 <tcp_input+0x6fe>
 8013484:	2001018d 	.word	0x2001018d
 8013488:	20010198 	.word	0x20010198
 801348c:	20010174 	.word	0x20010174
 8013490:	2001016f 	.word	0x2001016f
 8013494:	20010180 	.word	0x20010180
 8013498:	20010194 	.word	0x20010194
 801349c:	20009024 	.word	0x20009024
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134a0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 80134a2:	2a00      	cmp	r2, #0
 80134a4:	d1ca      	bne.n	801343c <tcp_input+0x6c4>
          tcp_ack_now(pcb);
 80134a6:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 80134a8:	4628      	mov	r0, r5
 80134aa:	f7fd fea3 	bl	80111f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80134ae:	4bac      	ldr	r3, [pc, #688]	@ (8013760 <tcp_input+0x9e8>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	42ab      	cmp	r3, r5
 80134b4:	f040 81e0 	bne.w	8013878 <tcp_input+0xb00>
        TCP_RMV_ACTIVE(pcb);
 80134b8:	68eb      	ldr	r3, [r5, #12]
 80134ba:	4aa9      	ldr	r2, [pc, #676]	@ (8013760 <tcp_input+0x9e8>)
 80134bc:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134be:	4ba9      	ldr	r3, [pc, #676]	@ (8013764 <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 80134c0:	220a      	movs	r2, #10
 80134c2:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134c4:	681a      	ldr	r2, [r3, #0]
 80134c6:	601d      	str	r5, [r3, #0]
 80134c8:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 80134ca:	2201      	movs	r2, #1
 80134cc:	4ba6      	ldr	r3, [pc, #664]	@ (8013768 <tcp_input+0x9f0>)
 80134ce:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134d0:	f001 fcac 	bl	8014e2c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 80134d4:	e5b8      	b.n	8013048 <tcp_input+0x2d0>
    tcp_input_pcb = pcb;
 80134d6:	4ca5      	ldr	r4, [pc, #660]	@ (801376c <tcp_input+0x9f4>)
 80134d8:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80134da:	e5a1      	b.n	8013020 <tcp_input+0x2a8>
        if (pcb->rcv_ann_wnd == 0) {
 80134dc:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 808d 	beq.w	80135fe <tcp_input+0x886>
 80134e4:	4ca1      	ldr	r4, [pc, #644]	@ (801376c <tcp_input+0x9f4>)
 80134e6:	e5c2      	b.n	801306e <tcp_input+0x2f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80134e8:	4ba1      	ldr	r3, [pc, #644]	@ (8013770 <tcp_input+0x9f8>)
 80134ea:	22c2      	movs	r2, #194	@ 0xc2
 80134ec:	49a1      	ldr	r1, [pc, #644]	@ (8013774 <tcp_input+0x9fc>)
 80134ee:	48a2      	ldr	r0, [pc, #648]	@ (8013778 <tcp_input+0xa00>)
 80134f0:	f002 ffe4 	bl	80164bc <iprintf>
 80134f4:	e47f      	b.n	8012df6 <tcp_input+0x7e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80134f6:	4b9e      	ldr	r3, [pc, #632]	@ (8013770 <tcp_input+0x9f8>)
 80134f8:	22df      	movs	r2, #223	@ 0xdf
 80134fa:	49a0      	ldr	r1, [pc, #640]	@ (801377c <tcp_input+0xa04>)
 80134fc:	489e      	ldr	r0, [pc, #632]	@ (8013778 <tcp_input+0xa00>)
 80134fe:	f002 ffdd 	bl	80164bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013502:	8923      	ldrh	r3, [r4, #8]
 8013504:	e49c      	b.n	8012e40 <tcp_input+0xc8>
        if (recv_acked > 0) {
 8013506:	f8ba 2000 	ldrh.w	r2, [sl]
 801350a:	b15a      	cbz	r2, 8013524 <tcp_input+0x7ac>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801350c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8013510:	b12b      	cbz	r3, 801351e <tcp_input+0x7a6>
 8013512:	4629      	mov	r1, r5
 8013514:	6928      	ldr	r0, [r5, #16]
 8013516:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8013518:	300d      	adds	r0, #13
 801351a:	f43f ada8 	beq.w	801306e <tcp_input+0x2f6>
          recv_acked = 0;
 801351e:	2300      	movs	r3, #0
 8013520:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 8013524:	4628      	mov	r0, r5
 8013526:	f7fe fe57 	bl	80121d8 <tcp_input_delayed_close>
 801352a:	2800      	cmp	r0, #0
 801352c:	f47f ad9f 	bne.w	801306e <tcp_input+0x2f6>
        if (recv_data != NULL) {
 8013530:	f8d8 2000 	ldr.w	r2, [r8]
 8013534:	b1fa      	cbz	r2, 8013576 <tcp_input+0x7fe>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013536:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8013538:	b143      	cbz	r3, 801354c <tcp_input+0x7d4>
 801353a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801353e:	4b8c      	ldr	r3, [pc, #560]	@ (8013770 <tcp_input+0x9f8>)
 8013540:	498f      	ldr	r1, [pc, #572]	@ (8013780 <tcp_input+0xa08>)
 8013542:	488d      	ldr	r0, [pc, #564]	@ (8013778 <tcp_input+0xa00>)
 8013544:	f002 ffba 	bl	80164bc <iprintf>
            pbuf_free(recv_data);
 8013548:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 801354c:	8b6b      	ldrh	r3, [r5, #26]
 801354e:	f013 0310 	ands.w	r3, r3, #16
 8013552:	f040 80df 	bne.w	8013714 <tcp_input+0x99c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013556:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 801355a:	2e00      	cmp	r6, #0
 801355c:	f000 8118 	beq.w	8013790 <tcp_input+0xa18>
 8013560:	4629      	mov	r1, r5
 8013562:	6928      	ldr	r0, [r5, #16]
 8013564:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8013566:	f110 0f0d 	cmn.w	r0, #13
 801356a:	f43f ad80 	beq.w	801306e <tcp_input+0x2f6>
          if (err != ERR_OK) {
 801356e:	b110      	cbz	r0, 8013576 <tcp_input+0x7fe>
            pcb->refused_data = recv_data;
 8013570:	f8d8 3000 	ldr.w	r3, [r8]
 8013574:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 8013576:	f899 3000 	ldrb.w	r3, [r9]
 801357a:	069b      	lsls	r3, r3, #26
 801357c:	d507      	bpl.n	801358e <tcp_input+0x816>
          if (pcb->refused_data != NULL) {
 801357e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8013580:	2b00      	cmp	r3, #0
 8013582:	f000 80b2 	beq.w	80136ea <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013586:	7b5a      	ldrb	r2, [r3, #13]
 8013588:	f042 0220 	orr.w	r2, r2, #32
 801358c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801358e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 8013590:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 8013592:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013594:	f7fe fe20 	bl	80121d8 <tcp_input_delayed_close>
 8013598:	2800      	cmp	r0, #0
 801359a:	f47f ad68 	bne.w	801306e <tcp_input+0x2f6>
        tcp_output(pcb);
 801359e:	4628      	mov	r0, r5
 80135a0:	f001 f92a 	bl	80147f8 <tcp_output>
 80135a4:	e563      	b.n	801306e <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80135a6:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 80135aa:	f7fc f943 	bl	800f834 <lwip_htons>
 80135ae:	f010 0004 	ands.w	r0, r0, #4
 80135b2:	f47f abee 	bne.w	8012d92 <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135b6:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135b8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135ba:	8811      	ldrh	r1, [r2, #0]
 80135bc:	4a71      	ldr	r2, [pc, #452]	@ (8013784 <tcp_input+0xa0c>)
 80135be:	881d      	ldrh	r5, [r3, #0]
 80135c0:	6812      	ldr	r2, [r2, #0]
 80135c2:	440a      	add	r2, r1
 80135c4:	4970      	ldr	r1, [pc, #448]	@ (8013788 <tcp_input+0xa10>)
 80135c6:	6809      	ldr	r1, [r1, #0]
 80135c8:	9502      	str	r5, [sp, #8]
 80135ca:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135cc:	9301      	str	r3, [sp, #4]
 80135ce:	4b6f      	ldr	r3, [pc, #444]	@ (801378c <tcp_input+0xa14>)
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	3304      	adds	r3, #4
 80135d4:	f001 f896 	bl	8014704 <tcp_rst>
 80135d8:	f7ff bbdb 	b.w	8012d92 <tcp_input+0x1a>
      if (ackno == pcb->snd_nxt) {
 80135dc:	4b6a      	ldr	r3, [pc, #424]	@ (8013788 <tcp_input+0xa10>)
 80135de:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	f47f ad30 	bne.w	8013048 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 80135e8:	f899 3000 	ldrb.w	r3, [r9]
 80135ec:	f043 0308 	orr.w	r3, r3, #8
 80135f0:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80135f4:	8b6b      	ldrh	r3, [r5, #26]
 80135f6:	f023 0301 	bic.w	r3, r3, #1
 80135fa:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 80135fc:	e524      	b.n	8013048 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 80135fe:	4628      	mov	r0, r5
 8013600:	4c5a      	ldr	r4, [pc, #360]	@ (801376c <tcp_input+0x9f4>)
 8013602:	f001 f8c7 	bl	8014794 <tcp_send_empty_ack>
 8013606:	e532      	b.n	801306e <tcp_input+0x2f6>
    tcp_ack_now(pcb);
 8013608:	f042 0202 	orr.w	r2, r2, #2
 801360c:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 801360e:	e51b      	b.n	8013048 <tcp_input+0x2d0>
          && (ackno == pcb->lastack + 1)) {
 8013610:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8013612:	495d      	ldr	r1, [pc, #372]	@ (8013788 <tcp_input+0xa10>)
 8013614:	3301      	adds	r3, #1
 8013616:	6809      	ldr	r1, [r1, #0]
 8013618:	428b      	cmp	r3, r1
 801361a:	f47f aea6 	bne.w	801336a <tcp_input+0x5f2>
        pcb->lastack = ackno;
 801361e:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013620:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 8013622:	4b58      	ldr	r3, [pc, #352]	@ (8013784 <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 8013624:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013626:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 8013628:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801362a:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 801362e:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013630:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 8013632:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013634:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8013636:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013638:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801363a:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801363c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801363e:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 8013642:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 8013644:	f361 421f 	bfi	r2, r1, #16, #16
 8013648:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801364a:	f7fb f997 	bl	800e97c <ip4_route>
 801364e:	4632      	mov	r2, r6
 8013650:	4601      	mov	r1, r0
 8013652:	4658      	mov	r0, fp
 8013654:	f7fe fd18 	bl	8012088 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013658:	f241 131c 	movw	r3, #4380	@ 0x111c
 801365c:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801365e:	4602      	mov	r2, r0
 8013660:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013662:	0080      	lsls	r0, r0, #2
 8013664:	4299      	cmp	r1, r3
 8013666:	460e      	mov	r6, r1
 8013668:	bf38      	it	cc
 801366a:	461e      	movcc	r6, r3
 801366c:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 8013670:	f240 8130 	bls.w	80138d4 <tcp_input+0xb5c>
 8013674:	b283      	uxth	r3, r0
 8013676:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801367a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 8120 	beq.w	80138c4 <tcp_input+0xb4c>
        --pcb->snd_queuelen;
 8013684:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 8013688:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 801368a:	3b01      	subs	r3, #1
 801368c:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 8013690:	2e00      	cmp	r6, #0
 8013692:	f000 8112 	beq.w	80138ba <tcp_input+0xb42>
          pcb->unacked = rseg->next;
 8013696:	6833      	ldr	r3, [r6, #0]
 8013698:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 801369a:	4630      	mov	r0, r6
 801369c:	f7fd fcf4 	bl	8011088 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 80136a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f000 8106 	beq.w	80138b4 <tcp_input+0xb3c>
          pcb->nrtx = 0;
 80136a8:	2300      	movs	r3, #0
 80136aa:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 80136ae:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80136b0:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 80136b4:	b133      	cbz	r3, 80136c4 <tcp_input+0x94c>
 80136b6:	2200      	movs	r2, #0
 80136b8:	4629      	mov	r1, r5
 80136ba:	6928      	ldr	r0, [r5, #16]
 80136bc:	4798      	blx	r3
        if (err == ERR_ABRT) {
 80136be:	300d      	adds	r0, #13
 80136c0:	f43f acd5 	beq.w	801306e <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 80136c4:	8b6b      	ldrh	r3, [r5, #26]
 80136c6:	f043 0302 	orr.w	r3, r3, #2
 80136ca:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 80136cc:	e4bc      	b.n	8013048 <tcp_input+0x2d0>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136ce:	9b05      	ldr	r3, [sp, #20]
 80136d0:	4628      	mov	r0, r5
 80136d2:	881a      	ldrh	r2, [r3, #0]
 80136d4:	4b2b      	ldr	r3, [pc, #172]	@ (8013784 <tcp_input+0xa0c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	441a      	add	r2, r3
 80136da:	4b2b      	ldr	r3, [pc, #172]	@ (8013788 <tcp_input+0xa10>)
 80136dc:	6819      	ldr	r1, [r3, #0]
 80136de:	f8bc 3000 	ldrh.w	r3, [ip]
 80136e2:	9302      	str	r3, [sp, #8]
 80136e4:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 80136e8:	e770      	b.n	80135cc <tcp_input+0x854>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80136ea:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 80136ec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80136f0:	4293      	cmp	r3, r2
 80136f2:	d001      	beq.n	80136f8 <tcp_input+0x980>
              pcb->rcv_wnd++;
 80136f4:	3301      	adds	r3, #1
 80136f6:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80136f8:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 80136fc:	2e00      	cmp	r6, #0
 80136fe:	f43f af46 	beq.w	801358e <tcp_input+0x816>
 8013702:	2300      	movs	r3, #0
 8013704:	4629      	mov	r1, r5
 8013706:	6928      	ldr	r0, [r5, #16]
 8013708:	461a      	mov	r2, r3
 801370a:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801370c:	300d      	adds	r0, #13
 801370e:	f47f af3e 	bne.w	801358e <tcp_input+0x816>
 8013712:	e4ac      	b.n	801306e <tcp_input+0x2f6>
            pbuf_free(recv_data);
 8013714:	4610      	mov	r0, r2
 8013716:	f7fc ff1d 	bl	8010554 <pbuf_free>
            tcp_abort(pcb);
 801371a:	4628      	mov	r0, r5
 801371c:	f7fe f99e 	bl	8011a5c <tcp_abort>
            goto aborted;
 8013720:	e4a5      	b.n	801306e <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	06db      	lsls	r3, r3, #27
 8013726:	f57f ac8f 	bpl.w	8013048 <tcp_input+0x2d0>
 801372a:	4b17      	ldr	r3, [pc, #92]	@ (8013788 <tcp_input+0xa10>)
 801372c:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	429a      	cmp	r2, r3
 8013732:	f47f ac89 	bne.w	8013048 <tcp_input+0x2d0>
 8013736:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8013738:	2b00      	cmp	r3, #0
 801373a:	f47f ac85 	bne.w	8013048 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 801373e:	2306      	movs	r3, #6
 8013740:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8013742:	e481      	b.n	8013048 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013744:	0798      	lsls	r0, r3, #30
 8013746:	f57f ac7f 	bpl.w	8013048 <tcp_input+0x2d0>
 801374a:	4b0e      	ldr	r3, [pc, #56]	@ (8013784 <tcp_input+0xa0c>)
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013750:	3b01      	subs	r3, #1
 8013752:	4293      	cmp	r3, r2
 8013754:	f47f ac78 	bne.w	8013048 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 8013758:	4628      	mov	r0, r5
 801375a:	f000 ff55 	bl	8014608 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801375e:	e473      	b.n	8013048 <tcp_input+0x2d0>
 8013760:	20010174 	.word	0x20010174
 8013764:	20010170 	.word	0x20010170
 8013768:	2001016f 	.word	0x2001016f
 801376c:	20010184 	.word	0x20010184
 8013770:	0801b9a8 	.word	0x0801b9a8
 8013774:	0801bbcc 	.word	0x0801bbcc
 8013778:	080187f8 	.word	0x080187f8
 801377c:	0801bbdc 	.word	0x0801bbdc
 8013780:	0801bd78 	.word	0x0801bd78
 8013784:	20010198 	.word	0x20010198
 8013788:	20010194 	.word	0x20010194
 801378c:	20009024 	.word	0x20009024
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013790:	4633      	mov	r3, r6
 8013792:	4630      	mov	r0, r6
 8013794:	4629      	mov	r1, r5
 8013796:	f7fe fb97 	bl	8011ec8 <tcp_recv_null>
 801379a:	e6e4      	b.n	8013566 <tcp_input+0x7ee>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801379c:	69ab      	ldr	r3, [r5, #24]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f43f aaf7 	beq.w	8012d92 <tcp_input+0x1a>
 80137a4:	4601      	mov	r1, r0
 80137a6:	f04f 32ff 	mov.w	r2, #4294967295
 80137aa:	6928      	ldr	r0, [r5, #16]
 80137ac:	4798      	blx	r3
 80137ae:	f7ff baf0 	b.w	8012d92 <tcp_input+0x1a>
      tcp_abandon(npcb, 0);
 80137b2:	4641      	mov	r1, r8
 80137b4:	4648      	mov	r0, r9
 80137b6:	f7fe f87f 	bl	80118b8 <tcp_abandon>
      return;
 80137ba:	f7ff baea 	b.w	8012d92 <tcp_input+0x1a>
          pcb->state = ESTABLISHED;
 80137be:	2304      	movs	r3, #4
 80137c0:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 80137c2:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d0a8      	beq.n	801371a <tcp_input+0x9a2>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80137c8:	699b      	ldr	r3, [r3, #24]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d05c      	beq.n	8013888 <tcp_input+0xb10>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80137ce:	2200      	movs	r2, #0
 80137d0:	4629      	mov	r1, r5
 80137d2:	6928      	ldr	r0, [r5, #16]
 80137d4:	4798      	blx	r3
          if (err != ERR_OK) {
 80137d6:	4603      	mov	r3, r0
 80137d8:	2800      	cmp	r0, #0
 80137da:	d167      	bne.n	80138ac <tcp_input+0xb34>
          tcp_receive(pcb);
 80137dc:	4628      	mov	r0, r5
 80137de:	f7fe fd81 	bl	80122e4 <tcp_receive>
          if (recv_acked != 0) {
 80137e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80137e6:	b113      	cbz	r3, 80137ee <tcp_input+0xa76>
            recv_acked--;
 80137e8:	3b01      	subs	r3, #1
 80137ea:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80137ee:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 80137f0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80137f4:	004a      	lsls	r2, r1, #1
 80137f6:	0088      	lsls	r0, r1, #2
 80137f8:	429a      	cmp	r2, r3
 80137fa:	4616      	mov	r6, r2
 80137fc:	bf38      	it	cc
 80137fe:	461e      	movcc	r6, r3
 8013800:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 8013804:	d934      	bls.n	8013870 <tcp_input+0xaf8>
 8013806:	b283      	uxth	r3, r0
 8013808:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 801380c:	f899 3000 	ldrb.w	r3, [r9]
 8013810:	069e      	lsls	r6, r3, #26
 8013812:	f57f ac19 	bpl.w	8013048 <tcp_input+0x2d0>
 8013816:	e579      	b.n	801330c <tcp_input+0x594>
        TCP_RMV_ACTIVE(pcb);
 8013818:	68ea      	ldr	r2, [r5, #12]
 801381a:	60da      	str	r2, [r3, #12]
 801381c:	e64f      	b.n	80134be <tcp_input+0x746>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801381e:	4b33      	ldr	r3, [pc, #204]	@ (80138ec <tcp_input+0xb74>)
 8013820:	f240 120d 	movw	r2, #269	@ 0x10d
 8013824:	4932      	ldr	r1, [pc, #200]	@ (80138f0 <tcp_input+0xb78>)
 8013826:	4833      	ldr	r0, [pc, #204]	@ (80138f4 <tcp_input+0xb7c>)
 8013828:	f002 fe48 	bl	80164bc <iprintf>
      if (prev != NULL) {
 801382c:	f1b8 0f00 	cmp.w	r8, #0
 8013830:	f43f abc1 	beq.w	8012fb6 <tcp_input+0x23e>
 8013834:	68eb      	ldr	r3, [r5, #12]
 8013836:	f7ff bbb8 	b.w	8012faa <tcp_input+0x232>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801383a:	4b2c      	ldr	r3, [pc, #176]	@ (80138ec <tcp_input+0xb74>)
 801383c:	f240 1215 	movw	r2, #277	@ 0x115
 8013840:	492d      	ldr	r1, [pc, #180]	@ (80138f8 <tcp_input+0xb80>)
 8013842:	482c      	ldr	r0, [pc, #176]	@ (80138f4 <tcp_input+0xb7c>)
 8013844:	f002 fe3a 	bl	80164bc <iprintf>
  if (pcb == NULL) {
 8013848:	f7ff bbb9 	b.w	8012fbe <tcp_input+0x246>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801384c:	2900      	cmp	r1, #0
 801384e:	f47f aecb 	bne.w	80135e8 <tcp_input+0x870>
 8013852:	4b26      	ldr	r3, [pc, #152]	@ (80138ec <tcp_input+0xb74>)
 8013854:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013858:	4928      	ldr	r1, [pc, #160]	@ (80138fc <tcp_input+0xb84>)
 801385a:	4826      	ldr	r0, [pc, #152]	@ (80138f4 <tcp_input+0xb7c>)
 801385c:	f002 fe2e 	bl	80164bc <iprintf>
 8013860:	e6c2      	b.n	80135e8 <tcp_input+0x870>
  } else if (flags & TCP_FIN) {
 8013862:	07c1      	lsls	r1, r0, #31
 8013864:	f57f ac55 	bpl.w	8013112 <tcp_input+0x39a>
    pcb->tmr = tcp_ticks;
 8013868:	4b25      	ldr	r3, [pc, #148]	@ (8013900 <tcp_input+0xb88>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	622b      	str	r3, [r5, #32]
 801386e:	e450      	b.n	8013112 <tcp_input+0x39a>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013870:	429a      	cmp	r2, r3
 8013872:	bf88      	it	hi
 8013874:	b293      	uxthhi	r3, r2
 8013876:	e7c7      	b.n	8013808 <tcp_input+0xa90>
          TCP_RMV_ACTIVE(pcb);
 8013878:	2b00      	cmp	r3, #0
 801387a:	f43f ae20 	beq.w	80134be <tcp_input+0x746>
 801387e:	68da      	ldr	r2, [r3, #12]
 8013880:	42aa      	cmp	r2, r5
 8013882:	d0c9      	beq.n	8013818 <tcp_input+0xaa0>
 8013884:	4613      	mov	r3, r2
 8013886:	e7f7      	b.n	8013878 <tcp_input+0xb00>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013888:	4b18      	ldr	r3, [pc, #96]	@ (80138ec <tcp_input+0xb74>)
 801388a:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801388e:	491d      	ldr	r1, [pc, #116]	@ (8013904 <tcp_input+0xb8c>)
 8013890:	4818      	ldr	r0, [pc, #96]	@ (80138f4 <tcp_input+0xb7c>)
 8013892:	f002 fe13 	bl	80164bc <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013896:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8013898:	699b      	ldr	r3, [r3, #24]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d197      	bne.n	80137ce <tcp_input+0xa56>
 801389e:	e73c      	b.n	801371a <tcp_input+0x9a2>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138a0:	9102      	str	r1, [sp, #8]
 80138a2:	4432      	add	r2, r6
 80138a4:	4918      	ldr	r1, [pc, #96]	@ (8013908 <tcp_input+0xb90>)
 80138a6:	4628      	mov	r0, r5
 80138a8:	6809      	ldr	r1, [r1, #0]
 80138aa:	e68f      	b.n	80135cc <tcp_input+0x854>
            if (err != ERR_ABRT) {
 80138ac:	330d      	adds	r3, #13
 80138ae:	f43f abde 	beq.w	801306e <tcp_input+0x2f6>
 80138b2:	e732      	b.n	801371a <tcp_input+0x9a2>
          pcb->rtime = -1;
 80138b4:	f04f 33ff 	mov.w	r3, #4294967295
 80138b8:	e6f9      	b.n	80136ae <tcp_input+0x936>
          rseg = pcb->unsent;
 80138ba:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80138bc:	b176      	cbz	r6, 80138dc <tcp_input+0xb64>
          pcb->unsent = rseg->next;
 80138be:	6833      	ldr	r3, [r6, #0]
 80138c0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80138c2:	e6ea      	b.n	801369a <tcp_input+0x922>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80138c4:	4b09      	ldr	r3, [pc, #36]	@ (80138ec <tcp_input+0xb74>)
 80138c6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80138ca:	4910      	ldr	r1, [pc, #64]	@ (801390c <tcp_input+0xb94>)
 80138cc:	4809      	ldr	r0, [pc, #36]	@ (80138f4 <tcp_input+0xb7c>)
 80138ce:	f002 fdf5 	bl	80164bc <iprintf>
 80138d2:	e6d7      	b.n	8013684 <tcp_input+0x90c>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80138d4:	4299      	cmp	r1, r3
 80138d6:	bf88      	it	hi
 80138d8:	b28b      	uxthhi	r3, r1
 80138da:	e6cc      	b.n	8013676 <tcp_input+0x8fe>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80138dc:	4b03      	ldr	r3, [pc, #12]	@ (80138ec <tcp_input+0xb74>)
 80138de:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80138e2:	490b      	ldr	r1, [pc, #44]	@ (8013910 <tcp_input+0xb98>)
 80138e4:	4803      	ldr	r0, [pc, #12]	@ (80138f4 <tcp_input+0xb7c>)
 80138e6:	f002 fde9 	bl	80164bc <iprintf>
 80138ea:	e7e8      	b.n	80138be <tcp_input+0xb46>
 80138ec:	0801b9a8 	.word	0x0801b9a8
 80138f0:	0801bc84 	.word	0x0801bc84
 80138f4:	080187f8 	.word	0x080187f8
 80138f8:	0801bcb0 	.word	0x0801bcb0
 80138fc:	0801bd0c 	.word	0x0801bd0c
 8013900:	20010180 	.word	0x20010180
 8013904:	0801bd58 	.word	0x0801bd58
 8013908:	20010194 	.word	0x20010194
 801390c:	0801bd2c 	.word	0x0801bd2c
 8013910:	0801bd44 	.word	0x0801bd44

08013914 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8013914:	4a02      	ldr	r2, [pc, #8]	@ (8013920 <tcp_trigger_input_pcb_close+0xc>)
 8013916:	7813      	ldrb	r3, [r2, #0]
 8013918:	f043 0310 	orr.w	r3, r3, #16
 801391c:	7013      	strb	r3, [r2, #0]
}
 801391e:	4770      	bx	lr
 8013920:	2001018c 	.word	0x2001018c

08013924 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013928:	2600      	movs	r6, #0
 801392a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801392c:	460c      	mov	r4, r1
 801392e:	4681      	mov	r9, r0
 8013930:	f361 060f 	bfi	r6, r1, #0, #16
 8013934:	4615      	mov	r5, r2
 8013936:	4698      	mov	r8, r3
 8013938:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 801393c:	f361 461f 	bfi	r6, r1, #16, #16
 8013940:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013944:	2f00      	cmp	r7, #0
 8013946:	d033      	beq.n	80139b0 <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013948:	42ac      	cmp	r4, r5
 801394a:	d20e      	bcs.n	801396a <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801394c:	f01a 0f02 	tst.w	sl, #2
 8013950:	d008      	beq.n	8013964 <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013952:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 8013956:	f021 0103 	bic.w	r1, r1, #3
 801395a:	42a9      	cmp	r1, r5
 801395c:	bf28      	it	cs
 801395e:	4629      	movcs	r1, r5
 8013960:	b289      	uxth	r1, r1
 8013962:	e003      	b.n	801396c <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013964:	8b7b      	ldrh	r3, [r7, #26]
 8013966:	065b      	lsls	r3, r3, #25
 8013968:	d518      	bpl.n	801399c <tcp_pbuf_prealloc+0x78>
 801396a:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801396c:	4648      	mov	r0, r9
 801396e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013972:	f7fc fe5f 	bl	8010634 <pbuf_alloc>
  if (p == NULL) {
 8013976:	4605      	mov	r5, r0
 8013978:	b168      	cbz	r0, 8013996 <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801397a:	6803      	ldr	r3, [r0, #0]
 801397c:	b133      	cbz	r3, 801398c <tcp_pbuf_prealloc+0x68>
 801397e:	4b10      	ldr	r3, [pc, #64]	@ (80139c0 <tcp_pbuf_prealloc+0x9c>)
 8013980:	f240 120b 	movw	r2, #267	@ 0x10b
 8013984:	490f      	ldr	r1, [pc, #60]	@ (80139c4 <tcp_pbuf_prealloc+0xa0>)
 8013986:	4810      	ldr	r0, [pc, #64]	@ (80139c8 <tcp_pbuf_prealloc+0xa4>)
 8013988:	f002 fd98 	bl	80164bc <iprintf>
  *oversize = p->len - length;
 801398c:	896b      	ldrh	r3, [r5, #10]
 801398e:	1b1b      	subs	r3, r3, r4
 8013990:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013994:	60ae      	str	r6, [r5, #8]
  return p;
}
 8013996:	4628      	mov	r0, r5
 8013998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801399c:	f1bb 0f00 	cmp.w	fp, #0
 80139a0:	d0d7      	beq.n	8013952 <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 80139a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1d4      	bne.n	8013952 <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 80139a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d1d1      	bne.n	8013952 <tcp_pbuf_prealloc+0x2e>
 80139ae:	e7dc      	b.n	801396a <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80139b0:	4b03      	ldr	r3, [pc, #12]	@ (80139c0 <tcp_pbuf_prealloc+0x9c>)
 80139b2:	22e9      	movs	r2, #233	@ 0xe9
 80139b4:	4905      	ldr	r1, [pc, #20]	@ (80139cc <tcp_pbuf_prealloc+0xa8>)
 80139b6:	4804      	ldr	r0, [pc, #16]	@ (80139c8 <tcp_pbuf_prealloc+0xa4>)
 80139b8:	f002 fd80 	bl	80164bc <iprintf>
 80139bc:	e7c4      	b.n	8013948 <tcp_pbuf_prealloc+0x24>
 80139be:	bf00      	nop
 80139c0:	0801bd94 	.word	0x0801bd94
 80139c4:	0801be2c 	.word	0x0801be2c
 80139c8:	080187f8 	.word	0x080187f8
 80139cc:	0801be0c 	.word	0x0801be0c

080139d0 <tcp_create_segment>:
{
 80139d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139d4:	460e      	mov	r6, r1
 80139d6:	f89d a020 	ldrb.w	sl, [sp, #32]
 80139da:	4690      	mov	r8, r2
 80139dc:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80139de:	4607      	mov	r7, r0
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d047      	beq.n	8013a74 <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80139e4:	2e00      	cmp	r6, #0
 80139e6:	d04d      	beq.n	8013a84 <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139e8:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80139ec:	2003      	movs	r0, #3
 80139ee:	f7fc fa85 	bl	800fefc <memp_malloc>
 80139f2:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139f4:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d051      	beq.n	8013aa0 <tcp_create_segment+0xd0>
  seg->flags = optflags;
 80139fc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8013a00:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a02:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 8013a04:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a06:	42aa      	cmp	r2, r5
  seg->next = NULL;
 8013a08:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a0a:	d32b      	bcc.n	8013a64 <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 8013a0c:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013a0e:	4630      	mov	r0, r6
 8013a10:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8013a12:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013a14:	f7fc fd0c 	bl	8010430 <pbuf_add_header>
 8013a18:	4606      	mov	r6, r0
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	d139      	bne.n	8013a92 <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a1e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a20:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a22:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a24:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a28:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a2c:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a30:	f7fb ff00 	bl	800f834 <lwip_htons>
 8013a34:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a38:	8b38      	ldrh	r0, [r7, #24]
 8013a3a:	68e7      	ldr	r7, [r4, #12]
 8013a3c:	f7fb fefa 	bl	800f834 <lwip_htons>
 8013a40:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013a42:	4648      	mov	r0, r9
 8013a44:	68e7      	ldr	r7, [r4, #12]
 8013a46:	f7fb fef9 	bl	800f83c <lwip_htonl>
 8013a4a:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a4c:	ea48 0005 	orr.w	r0, r8, r5
 8013a50:	68e7      	ldr	r7, [r4, #12]
 8013a52:	f7fb feef 	bl	800f834 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8013a56:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a58:	81b8      	strh	r0, [r7, #12]
}
 8013a5a:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 8013a5c:	749e      	strb	r6, [r3, #18]
 8013a5e:	74de      	strb	r6, [r3, #19]
}
 8013a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a64:	22b0      	movs	r2, #176	@ 0xb0
 8013a66:	4b10      	ldr	r3, [pc, #64]	@ (8013aa8 <tcp_create_segment+0xd8>)
 8013a68:	4910      	ldr	r1, [pc, #64]	@ (8013aac <tcp_create_segment+0xdc>)
 8013a6a:	4811      	ldr	r0, [pc, #68]	@ (8013ab0 <tcp_create_segment+0xe0>)
 8013a6c:	f002 fd26 	bl	80164bc <iprintf>
  seg->len = p->tot_len - optlen;
 8013a70:	8932      	ldrh	r2, [r6, #8]
 8013a72:	e7cb      	b.n	8013a0c <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013a74:	4b0c      	ldr	r3, [pc, #48]	@ (8013aa8 <tcp_create_segment+0xd8>)
 8013a76:	22a3      	movs	r2, #163	@ 0xa3
 8013a78:	490e      	ldr	r1, [pc, #56]	@ (8013ab4 <tcp_create_segment+0xe4>)
 8013a7a:	480d      	ldr	r0, [pc, #52]	@ (8013ab0 <tcp_create_segment+0xe0>)
 8013a7c:	f002 fd1e 	bl	80164bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013a80:	2e00      	cmp	r6, #0
 8013a82:	d1b1      	bne.n	80139e8 <tcp_create_segment+0x18>
 8013a84:	4b08      	ldr	r3, [pc, #32]	@ (8013aa8 <tcp_create_segment+0xd8>)
 8013a86:	22a4      	movs	r2, #164	@ 0xa4
 8013a88:	490b      	ldr	r1, [pc, #44]	@ (8013ab8 <tcp_create_segment+0xe8>)
 8013a8a:	4809      	ldr	r0, [pc, #36]	@ (8013ab0 <tcp_create_segment+0xe0>)
 8013a8c:	f002 fd16 	bl	80164bc <iprintf>
 8013a90:	e7aa      	b.n	80139e8 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 8013a92:	4620      	mov	r0, r4
 8013a94:	f7fd faf8 	bl	8011088 <tcp_seg_free>
    return NULL;
 8013a98:	2400      	movs	r4, #0
}
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f7fc fd57 	bl	8010554 <pbuf_free>
    return NULL;
 8013aa6:	e7f7      	b.n	8013a98 <tcp_create_segment+0xc8>
 8013aa8:	0801bd94 	.word	0x0801bd94
 8013aac:	0801be84 	.word	0x0801be84
 8013ab0:	080187f8 	.word	0x080187f8
 8013ab4:	0801be40 	.word	0x0801be40
 8013ab8:	0801be60 	.word	0x0801be60

08013abc <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013abc:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8013abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013ac2:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8013ac4:	4606      	mov	r6, r0
 8013ac6:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013ac8:	2022      	movs	r0, #34	@ 0x22
 8013aca:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8013ace:	461c      	mov	r4, r3
 8013ad0:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8013ad4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013ad8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013adc:	f7fc fdaa 	bl	8010634 <pbuf_alloc>
  if (p != NULL) {
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	b300      	cbz	r0, 8013b26 <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013ae4:	8943      	ldrh	r3, [r0, #10]
 8013ae6:	2b13      	cmp	r3, #19
 8013ae8:	d920      	bls.n	8013b2c <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 8013aea:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 8013aec:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8013aee:	f7fb fea1 	bl	800f834 <lwip_htons>
 8013af2:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013af4:	4650      	mov	r0, sl
 8013af6:	f7fb fe9d 	bl	800f834 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8013afa:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8013afc:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8013afe:	4630      	mov	r0, r6
 8013b00:	f7fb fe9c 	bl	800f83c <lwip_htonl>
 8013b04:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013b06:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 8013b0a:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013b0c:	f7fb fe92 	bl	800f834 <lwip_htons>
 8013b10:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 8013b12:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013b14:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013b16:	f7fb fe8d 	bl	800f834 <lwip_htons>
    tcphdr->chksum = 0;
 8013b1a:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8013b1c:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8013b1e:	7423      	strb	r3, [r4, #16]
 8013b20:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8013b22:	74a3      	strb	r3, [r4, #18]
 8013b24:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 8013b26:	4628      	mov	r0, r5
 8013b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013b2c:	4b03      	ldr	r3, [pc, #12]	@ (8013b3c <tcp_output_alloc_header_common.constprop.0+0x80>)
 8013b2e:	f240 7223 	movw	r2, #1827	@ 0x723
 8013b32:	4903      	ldr	r1, [pc, #12]	@ (8013b40 <tcp_output_alloc_header_common.constprop.0+0x84>)
 8013b34:	4803      	ldr	r0, [pc, #12]	@ (8013b44 <tcp_output_alloc_header_common.constprop.0+0x88>)
 8013b36:	f002 fcc1 	bl	80164bc <iprintf>
 8013b3a:	e7d6      	b.n	8013aea <tcp_output_alloc_header_common.constprop.0+0x2e>
 8013b3c:	0801bd94 	.word	0x0801bd94
 8013b40:	0801be9c 	.word	0x0801be9c
 8013b44:	080187f8 	.word	0x080187f8

08013b48 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8013b48:	b570      	push	{r4, r5, r6, lr}
 8013b4a:	460d      	mov	r5, r1
 8013b4c:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013b4e:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8013b50:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013b52:	b190      	cbz	r0, 8013b7a <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013b54:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8013b56:	2210      	movs	r2, #16
 8013b58:	8b21      	ldrh	r1, [r4, #24]
 8013b5a:	9302      	str	r3, [sp, #8]
 8013b5c:	e9cd 1200 	strd	r1, r2, [sp]
 8013b60:	4632      	mov	r2, r6
 8013b62:	4629      	mov	r1, r5
 8013b64:	8ae3      	ldrh	r3, [r4, #22]
 8013b66:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013b68:	f7ff ffa8 	bl	8013abc <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013b6c:	b118      	cbz	r0, 8013b76 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013b6e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8013b70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013b72:	4413      	add	r3, r2
 8013b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 8013b76:	b004      	add	sp, #16
 8013b78:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013b7a:	4b04      	ldr	r3, [pc, #16]	@ (8013b8c <tcp_output_alloc_header.constprop.0+0x44>)
 8013b7c:	f240 7242 	movw	r2, #1858	@ 0x742
 8013b80:	4903      	ldr	r1, [pc, #12]	@ (8013b90 <tcp_output_alloc_header.constprop.0+0x48>)
 8013b82:	4804      	ldr	r0, [pc, #16]	@ (8013b94 <tcp_output_alloc_header.constprop.0+0x4c>)
 8013b84:	f002 fc9a 	bl	80164bc <iprintf>
 8013b88:	e7e4      	b.n	8013b54 <tcp_output_alloc_header.constprop.0+0xc>
 8013b8a:	bf00      	nop
 8013b8c:	0801bd94 	.word	0x0801bd94
 8013b90:	0801becc 	.word	0x0801becc
 8013b94:	080187f8 	.word	0x080187f8

08013b98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013b9e:	460d      	mov	r5, r1
{
 8013ba0:	4617      	mov	r7, r2
 8013ba2:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013ba4:	b1f9      	cbz	r1, 8013be6 <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013ba6:	b334      	cbz	r4, 8013bf6 <tcp_output_control_segment+0x5e>
 8013ba8:	7a20      	ldrb	r0, [r4, #8]
 8013baa:	b9a8      	cbnz	r0, 8013bd8 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 8013bac:	4630      	mov	r0, r6
 8013bae:	f7fa fee5 	bl	800e97c <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8013bb2:	b1a8      	cbz	r0, 8013be0 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013bb4:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 8013bb6:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013bb8:	9400      	str	r4, [sp, #0]
 8013bba:	2406      	movs	r4, #6
 8013bbc:	9002      	str	r0, [sp, #8]
 8013bbe:	4632      	mov	r2, r6
 8013bc0:	9401      	str	r4, [sp, #4]
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	f7fb f911 	bl	800edec <ip4_output_if>
 8013bca:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f7fc fcc1 	bl	8010554 <pbuf_free>
  return err;
}
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	b005      	add	sp, #20
 8013bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 8013bd8:	f7fc fbb6 	bl	8010348 <netif_get_by_index>
  if (netif == NULL) {
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1e9      	bne.n	8013bb4 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 8013be0:	f06f 0403 	mvn.w	r4, #3
 8013be4:	e7f2      	b.n	8013bcc <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013be6:	4b07      	ldr	r3, [pc, #28]	@ (8013c04 <tcp_output_control_segment+0x6c>)
 8013be8:	f240 7287 	movw	r2, #1927	@ 0x787
 8013bec:	4906      	ldr	r1, [pc, #24]	@ (8013c08 <tcp_output_control_segment+0x70>)
 8013bee:	4807      	ldr	r0, [pc, #28]	@ (8013c0c <tcp_output_control_segment+0x74>)
 8013bf0:	f002 fc64 	bl	80164bc <iprintf>
 8013bf4:	e7d7      	b.n	8013ba6 <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f7fa fec0 	bl	800e97c <ip4_route>
  if (netif == NULL) {
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d0ef      	beq.n	8013be0 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 8013c00:	23ff      	movs	r3, #255	@ 0xff
 8013c02:	e7d9      	b.n	8013bb8 <tcp_output_control_segment+0x20>
 8013c04:	0801bd94 	.word	0x0801bd94
 8013c08:	0801bef4 	.word	0x0801bef4
 8013c0c:	080187f8 	.word	0x080187f8

08013c10 <tcp_write>:
{
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 8013c14:	2400      	movs	r4, #0
{
 8013c16:	b091      	sub	sp, #68	@ 0x44
 8013c18:	9107      	str	r1, [sp, #28]
 8013c1a:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 8013c1c:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c20:	2800      	cmp	r0, #0
 8013c22:	f000 82d8 	beq.w	80141d6 <tcp_write+0x5c6>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013c26:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 8013c2a:	4691      	mov	r9, r2
 8013c2c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8013c2e:	4680      	mov	r8, r0
 8013c30:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8013c34:	459a      	cmp	sl, r3
 8013c36:	4652      	mov	r2, sl
 8013c38:	bf28      	it	cs
 8013c3a:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 8013c3c:	2a00      	cmp	r2, #0
 8013c3e:	bf08      	it	eq
 8013c40:	461a      	moveq	r2, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013c42:	9b07      	ldr	r3, [sp, #28]
  mss_local = mss_local ? mss_local : pcb->mss;
 8013c44:	9205      	str	r2, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	f000 82bb 	beq.w	80141c2 <tcp_write+0x5b2>
  if ((pcb->state != ESTABLISHED) &&
 8013c4c:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013c4e:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 8013c50:	2a02      	cmp	r2, #2
 8013c52:	d902      	bls.n	8013c5a <tcp_write+0x4a>
 8013c54:	2b07      	cmp	r3, #7
 8013c56:	f040 824c 	bne.w	80140f2 <tcp_write+0x4e2>
  } else if (len == 0) {
 8013c5a:	f1b9 0f00 	cmp.w	r9, #0
 8013c5e:	d05b      	beq.n	8013d18 <tcp_write+0x108>
  if (len > pcb->snd_buf) {
 8013c60:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 8013c64:	454b      	cmp	r3, r9
 8013c66:	f0c0 828f 	bcc.w	8014188 <tcp_write+0x578>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013c6a:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 8013c6e:	2d0f      	cmp	r5, #15
 8013c70:	f200 828a 	bhi.w	8014188 <tcp_write+0x578>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013c74:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 8013c78:	2d00      	cmp	r5, #0
 8013c7a:	d043      	beq.n	8013d04 <tcp_write+0xf4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013c7c:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f000 81da 	beq.w	801403a <tcp_write+0x42a>
  if (pcb->unsent != NULL) {
 8013c86:	2f00      	cmp	r7, #0
 8013c88:	f000 81c5 	beq.w	8014016 <tcp_write+0x406>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c8c:	463b      	mov	r3, r7
 8013c8e:	683f      	ldr	r7, [r7, #0]
 8013c90:	2f00      	cmp	r7, #0
 8013c92:	d1fb      	bne.n	8013c8c <tcp_write+0x7c>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013c94:	7a9c      	ldrb	r4, [r3, #10]
 8013c96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c98:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013c9a:	891b      	ldrh	r3, [r3, #8]
 8013c9c:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013c9e:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013ca2:	191a      	adds	r2, r3, r4
 8013ca4:	4291      	cmp	r1, r2
 8013ca6:	f2c0 81ea 	blt.w	801407e <tcp_write+0x46e>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013caa:	9a05      	ldr	r2, [sp, #20]
 8013cac:	eba2 0b04 	sub.w	fp, r2, r4
 8013cb0:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 8013cb4:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013cb8:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 8013cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cbe:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 8013cc2:	b383      	cbz	r3, 8013d26 <tcp_write+0x116>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013cc4:	455b      	cmp	r3, fp
 8013cc6:	f200 81ca 	bhi.w	801405e <tcp_write+0x44e>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013cca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ccc:	454b      	cmp	r3, r9
 8013cce:	461c      	mov	r4, r3
 8013cd0:	bf28      	it	cs
 8013cd2:	464c      	movcs	r4, r9
 8013cd4:	455c      	cmp	r4, fp
 8013cd6:	bf28      	it	cs
 8013cd8:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 8013cda:	1b1b      	subs	r3, r3, r4
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013ce2:	b143      	cbz	r3, 8013cf6 <tcp_write+0xe6>
 8013ce4:	45a1      	cmp	r9, r4
 8013ce6:	d006      	beq.n	8013cf6 <tcp_write+0xe6>
 8013ce8:	4bad      	ldr	r3, [pc, #692]	@ (8013fa0 <tcp_write+0x390>)
 8013cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cee:	49ad      	ldr	r1, [pc, #692]	@ (8013fa4 <tcp_write+0x394>)
 8013cf0:	48ad      	ldr	r0, [pc, #692]	@ (8013fa8 <tcp_write+0x398>)
 8013cf2:	f002 fbe3 	bl	80164bc <iprintf>
      space -= oversize_used;
 8013cf6:	ebab 0b04 	sub.w	fp, fp, r4
 8013cfa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 8013cfc:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 8013cfe:	fa1f fb8b 	uxth.w	fp, fp
 8013d02:	e011      	b.n	8013d28 <tcp_write+0x118>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f000 8181 	beq.w	801400c <tcp_write+0x3fc>
 8013d0a:	4ba5      	ldr	r3, [pc, #660]	@ (8013fa0 <tcp_write+0x390>)
 8013d0c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013d10:	49a6      	ldr	r1, [pc, #664]	@ (8013fac <tcp_write+0x39c>)
 8013d12:	48a5      	ldr	r0, [pc, #660]	@ (8013fa8 <tcp_write+0x398>)
 8013d14:	f002 fbd2 	bl	80164bc <iprintf>
  if (pcb->unsent != NULL) {
 8013d18:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 8013d1c:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 8013d20:	2f00      	cmp	r7, #0
 8013d22:	d1b3      	bne.n	8013c8c <tcp_write+0x7c>
 8013d24:	e177      	b.n	8014016 <tcp_write+0x406>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013d26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d2a:	454b      	cmp	r3, r9
 8013d2c:	d23b      	bcs.n	8013da6 <tcp_write+0x196>
 8013d2e:	f1bb 0f00 	cmp.w	fp, #0
 8013d32:	d038      	beq.n	8013da6 <tcp_write+0x196>
 8013d34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d36:	8912      	ldrh	r2, [r2, #8]
 8013d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8013d3a:	2a00      	cmp	r2, #0
 8013d3c:	f000 8179 	beq.w	8014032 <tcp_write+0x422>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013d40:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013d46:	455e      	cmp	r6, fp
 8013d48:	bfa8      	it	ge
 8013d4a:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d4c:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013d4e:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d50:	f100 81d2 	bmi.w	80140f8 <tcp_write+0x4e8>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d56:	685a      	ldr	r2, [r3, #4]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	6812      	ldr	r2, [r2, #0]
 8013d5c:	2a00      	cmp	r2, #0
 8013d5e:	d1fb      	bne.n	8013d58 <tcp_write+0x148>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013d60:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d62:	7b1a      	ldrb	r2, [r3, #12]
 8013d64:	2a3f      	cmp	r2, #63	@ 0x3f
 8013d66:	d806      	bhi.n	8013d76 <tcp_write+0x166>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013d68:	895a      	ldrh	r2, [r3, #10]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013d6e:	9a07      	ldr	r2, [sp, #28]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	f000 81b9 	beq.w	80140e8 <tcp_write+0x4d8>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013d76:	2201      	movs	r2, #1
 8013d78:	4621      	mov	r1, r4
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	f7fc fc5a 	bl	8010634 <pbuf_alloc>
 8013d80:	900c      	str	r0, [sp, #48]	@ 0x30
 8013d82:	2800      	cmp	r0, #0
 8013d84:	f000 8231 	beq.w	80141ea <tcp_write+0x5da>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013d88:	9b07      	ldr	r3, [sp, #28]
 8013d8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013d8c:	440b      	add	r3, r1
 8013d8e:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 8013d90:	f7fc fd6e 	bl	8010870 <pbuf_clen>
 8013d94:	1943      	adds	r3, r0, r5
 8013d96:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 8013d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013da0:	1919      	adds	r1, r3, r4
 8013da2:	b28c      	uxth	r4, r1
 8013da4:	e003      	b.n	8013dae <tcp_write+0x19e>
  struct pbuf *concat_p = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013daa:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 8013dac:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 8013dae:	45a1      	cmp	r9, r4
 8013db0:	f240 8083 	bls.w	8013eba <tcp_write+0x2aa>
 8013db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013db6:	2700      	movs	r7, #0
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	46bb      	mov	fp, r7
 8013dbe:	9308      	str	r3, [sp, #32]
 8013dc0:	e03f      	b.n	8013e42 <tcp_write+0x232>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013dc2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f040 80d2 	bne.w	8013f70 <tcp_write+0x360>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013dcc:	2201      	movs	r2, #1
 8013dce:	4651      	mov	r1, sl
 8013dd0:	2036      	movs	r0, #54	@ 0x36
 8013dd2:	f7fc fc2f 	bl	8010634 <pbuf_alloc>
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	f000 80f0 	beq.w	8013fbc <tcp_write+0x3ac>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013ddc:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013dde:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013de0:	9006      	str	r0, [sp, #24]
 8013de2:	4422      	add	r2, r4
 8013de4:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013de6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013dea:	2036      	movs	r0, #54	@ 0x36
 8013dec:	f7fc fc22 	bl	8010634 <pbuf_alloc>
 8013df0:	9b06      	ldr	r3, [sp, #24]
 8013df2:	4606      	mov	r6, r0
 8013df4:	2800      	cmp	r0, #0
 8013df6:	f000 814c 	beq.w	8014092 <tcp_write+0x482>
      pbuf_cat(p/*header*/, p2/*data*/);
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	f7fc fd60 	bl	80108c0 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8013e00:	4630      	mov	r0, r6
 8013e02:	f7fc fd35 	bl	8010870 <pbuf_clen>
 8013e06:	4428      	add	r0, r5
 8013e08:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013e0a:	2d10      	cmp	r5, #16
 8013e0c:	d849      	bhi.n	8013ea2 <tcp_write+0x292>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013e0e:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 8013e12:	2200      	movs	r2, #0
 8013e14:	4631      	mov	r1, r6
 8013e16:	4640      	mov	r0, r8
 8013e18:	4423      	add	r3, r4
 8013e1a:	9200      	str	r2, [sp, #0]
 8013e1c:	f7ff fdd8 	bl	80139d0 <tcp_create_segment>
 8013e20:	4606      	mov	r6, r0
 8013e22:	2800      	cmp	r0, #0
 8013e24:	f000 80ca 	beq.w	8013fbc <tcp_write+0x3ac>
    if (queue == NULL) {
 8013e28:	f1bb 0f00 	cmp.w	fp, #0
 8013e2c:	d03e      	beq.n	8013eac <tcp_write+0x29c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013e2e:	2f00      	cmp	r7, #0
 8013e30:	f000 80a6 	beq.w	8013f80 <tcp_write+0x370>
    pos += seglen;
 8013e34:	44a2      	add	sl, r4
      prev_seg->next = seg;
 8013e36:	603e      	str	r6, [r7, #0]
    pos += seglen;
 8013e38:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 8013e3c:	45a1      	cmp	r9, r4
 8013e3e:	d93b      	bls.n	8013eb8 <tcp_write+0x2a8>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013e40:	4637      	mov	r7, r6
    u16_t left = len - pos;
 8013e42:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 8013e46:	9b05      	ldr	r3, [sp, #20]
 8013e48:	fa1f fa8a 	uxth.w	sl, sl
 8013e4c:	459a      	cmp	sl, r3
 8013e4e:	bf28      	it	cs
 8013e50:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013e52:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013e54:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d0b2      	beq.n	8013dc2 <tcp_write+0x1b2>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e5e:	4651      	mov	r1, sl
 8013e60:	9a05      	ldr	r2, [sp, #20]
 8013e62:	2036      	movs	r0, #54	@ 0x36
 8013e64:	e9cd 8300 	strd	r8, r3, [sp]
 8013e68:	fabb f38b 	clz	r3, fp
 8013e6c:	095b      	lsrs	r3, r3, #5
 8013e6e:	9302      	str	r3, [sp, #8]
 8013e70:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 8013e74:	f7ff fd56 	bl	8013924 <tcp_pbuf_prealloc>
 8013e78:	4606      	mov	r6, r0
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	f000 809e 	beq.w	8013fbc <tcp_write+0x3ac>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013e80:	8943      	ldrh	r3, [r0, #10]
 8013e82:	4553      	cmp	r3, sl
 8013e84:	f0c0 8084 	bcc.w	8013f90 <tcp_write+0x380>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013e88:	9b07      	ldr	r3, [sp, #28]
 8013e8a:	4652      	mov	r2, sl
 8013e8c:	6870      	ldr	r0, [r6, #4]
 8013e8e:	1919      	adds	r1, r3, r4
 8013e90:	f002 fd41 	bl	8016916 <memcpy>
    queuelen += pbuf_clen(p);
 8013e94:	4630      	mov	r0, r6
 8013e96:	f7fc fceb 	bl	8010870 <pbuf_clen>
 8013e9a:	4428      	add	r0, r5
 8013e9c:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013e9e:	2d10      	cmp	r5, #16
 8013ea0:	d9b5      	bls.n	8013e0e <tcp_write+0x1fe>
      pbuf_free(p);
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	465f      	mov	r7, fp
 8013ea6:	f7fc fb55 	bl	8010554 <pbuf_free>
      goto memerr;
 8013eaa:	e088      	b.n	8013fbe <tcp_write+0x3ae>
    pos += seglen;
 8013eac:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013eae:	4683      	mov	fp, r0
    pos += seglen;
 8013eb0:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 8013eb4:	45a1      	cmp	r9, r4
 8013eb6:	d8c3      	bhi.n	8013e40 <tcp_write+0x230>
 8013eb8:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 8013eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 8013ebc:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 80eb 	beq.w	801409c <tcp_write+0x48c>
    for (p = last_unsent->p; p; p = p->next) {
 8013ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ec8:	685c      	ldr	r4, [r3, #4]
 8013eca:	b1d4      	cbz	r4, 8013f02 <tcp_write+0x2f2>
      p->tot_len += oversize_used;
 8013ecc:	8923      	ldrh	r3, [r4, #8]
 8013ece:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 8013ed2:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 8013ed4:	445b      	add	r3, fp
 8013ed6:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 8013ed8:	b131      	cbz	r1, 8013ee8 <tcp_write+0x2d8>
      pos += seglen;
 8013eda:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 8013edc:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 8013ede:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 8013ee0:	445b      	add	r3, fp
 8013ee2:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 8013ee4:	2900      	cmp	r1, #0
 8013ee6:	d1f8      	bne.n	8013eda <tcp_write+0x2ca>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013ee8:	8963      	ldrh	r3, [r4, #10]
 8013eea:	465a      	mov	r2, fp
 8013eec:	6860      	ldr	r0, [r4, #4]
 8013eee:	9907      	ldr	r1, [sp, #28]
 8013ef0:	4418      	add	r0, r3
 8013ef2:	f002 fd10 	bl	8016916 <memcpy>
        p->len += oversize_used;
 8013ef6:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013ef8:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 8013efa:	445b      	add	r3, fp
 8013efc:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013efe:	2900      	cmp	r1, #0
 8013f00:	d1eb      	bne.n	8013eda <tcp_write+0x2ca>
    last_unsent->len += oversize_used;
 8013f02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013f06:	8913      	ldrh	r3, [r2, #8]
 8013f08:	4419      	add	r1, r3
  if (concat_p != NULL) {
 8013f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 8013f0c:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8013f0e:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	f000 8109 	beq.w	801412a <tcp_write+0x51a>
    pbuf_cat(last_unsent->p, concat_p);
 8013f18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013f1a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013f1e:	6860      	ldr	r0, [r4, #4]
 8013f20:	4651      	mov	r1, sl
 8013f22:	f7fc fccd 	bl	80108c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013f26:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 8013f2a:	8923      	ldrh	r3, [r4, #8]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8013f30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f32:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 8013f34:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 8013f38:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 8013f3c:	444b      	add	r3, r9
 8013f3e:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8013f42:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 8013f46:	eba3 0309 	sub.w	r3, r3, r9
 8013f4a:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 8013f4e:	b125      	cbz	r5, 8013f5a <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013f50:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f000 80ba 	beq.w	80140ce <tcp_write+0x4be>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013f5a:	b12e      	cbz	r6, 8013f68 <tcp_write+0x358>
 8013f5c:	68f3      	ldr	r3, [r6, #12]
 8013f5e:	b11b      	cbz	r3, 8013f68 <tcp_write+0x358>
 8013f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f62:	0792      	lsls	r2, r2, #30
 8013f64:	f140 80ab 	bpl.w	80140be <tcp_write+0x4ae>
  return ERR_OK;
 8013f68:	2000      	movs	r0, #0
}
 8013f6a:	b011      	add	sp, #68	@ 0x44
 8013f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013f70:	4b0b      	ldr	r3, [pc, #44]	@ (8013fa0 <tcp_write+0x390>)
 8013f72:	f240 2271 	movw	r2, #625	@ 0x271
 8013f76:	490e      	ldr	r1, [pc, #56]	@ (8013fb0 <tcp_write+0x3a0>)
 8013f78:	480b      	ldr	r0, [pc, #44]	@ (8013fa8 <tcp_write+0x398>)
 8013f7a:	f002 fa9f 	bl	80164bc <iprintf>
 8013f7e:	e725      	b.n	8013dcc <tcp_write+0x1bc>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013f80:	4b07      	ldr	r3, [pc, #28]	@ (8013fa0 <tcp_write+0x390>)
 8013f82:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013f86:	490b      	ldr	r1, [pc, #44]	@ (8013fb4 <tcp_write+0x3a4>)
 8013f88:	4807      	ldr	r0, [pc, #28]	@ (8013fa8 <tcp_write+0x398>)
 8013f8a:	f002 fa97 	bl	80164bc <iprintf>
 8013f8e:	e751      	b.n	8013e34 <tcp_write+0x224>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013f90:	4b03      	ldr	r3, [pc, #12]	@ (8013fa0 <tcp_write+0x390>)
 8013f92:	f240 2266 	movw	r2, #614	@ 0x266
 8013f96:	4908      	ldr	r1, [pc, #32]	@ (8013fb8 <tcp_write+0x3a8>)
 8013f98:	4803      	ldr	r0, [pc, #12]	@ (8013fa8 <tcp_write+0x398>)
 8013f9a:	f002 fa8f 	bl	80164bc <iprintf>
 8013f9e:	e773      	b.n	8013e88 <tcp_write+0x278>
 8013fa0:	0801bd94 	.word	0x0801bd94
 8013fa4:	0801c014 	.word	0x0801c014
 8013fa8:	080187f8 	.word	0x080187f8
 8013fac:	0801bfa8 	.word	0x0801bfa8
 8013fb0:	0801c0d0 	.word	0x0801c0d0
 8013fb4:	0801c0e0 	.word	0x0801c0e0
 8013fb8:	0801c090 	.word	0x0801c090
 8013fbc:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fbe:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8013fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013fc6:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 8013fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013fcc:	b113      	cbz	r3, 8013fd4 <tcp_write+0x3c4>
    pbuf_free(concat_p);
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7fc fac0 	bl	8010554 <pbuf_free>
  if (queue != NULL) {
 8013fd4:	b117      	cbz	r7, 8013fdc <tcp_write+0x3cc>
    tcp_segs_free(queue);
 8013fd6:	4638      	mov	r0, r7
 8013fd8:	f7fd f844 	bl	8011064 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8013fdc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 8013fe0:	b923      	cbnz	r3, 8013fec <tcp_write+0x3dc>
  return ERR_MEM;
 8013fe2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013fe6:	b011      	add	sp, #68	@ 0x44
 8013fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013fec:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d1f6      	bne.n	8013fe2 <tcp_write+0x3d2>
 8013ff4:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1f2      	bne.n	8013fe2 <tcp_write+0x3d2>
 8013ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80141f8 <tcp_write+0x5e8>)
 8013ffe:	f240 3227 	movw	r2, #807	@ 0x327
 8014002:	497e      	ldr	r1, [pc, #504]	@ (80141fc <tcp_write+0x5ec>)
 8014004:	487e      	ldr	r0, [pc, #504]	@ (8014200 <tcp_write+0x5f0>)
 8014006:	f002 fa59 	bl	80164bc <iprintf>
 801400a:	e7ea      	b.n	8013fe2 <tcp_write+0x3d2>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801400c:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 8014010:	2b00      	cmp	r3, #0
 8014012:	f47f ae7a 	bne.w	8013d0a <tcp_write+0xfa>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014016:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 801401a:	bb43      	cbnz	r3, 801406e <tcp_write+0x45e>
  while (pos < len) {
 801401c:	f1b9 0f00 	cmp.w	r9, #0
 8014020:	f000 80c8 	beq.w	80141b4 <tcp_write+0x5a4>
 8014024:	2300      	movs	r3, #0
 8014026:	461c      	mov	r4, r3
 8014028:	930d      	str	r3, [sp, #52]	@ 0x34
 801402a:	930a      	str	r3, [sp, #40]	@ 0x28
 801402c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8014030:	e6c0      	b.n	8013db4 <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 8014032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014034:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014036:	930c      	str	r3, [sp, #48]	@ 0x30
 8014038:	e6bc      	b.n	8013db4 <tcp_write+0x1a4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801403a:	2f00      	cmp	r7, #0
 801403c:	f47f ae26 	bne.w	8013c8c <tcp_write+0x7c>
 8014040:	4b6d      	ldr	r3, [pc, #436]	@ (80141f8 <tcp_write+0x5e8>)
 8014042:	f240 1255 	movw	r2, #341	@ 0x155
 8014046:	496f      	ldr	r1, [pc, #444]	@ (8014204 <tcp_write+0x5f4>)
 8014048:	486d      	ldr	r0, [pc, #436]	@ (8014200 <tcp_write+0x5f0>)
 801404a:	f002 fa37 	bl	80164bc <iprintf>
  if (pcb->unsent != NULL) {
 801404e:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 8014052:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 8014056:	2f00      	cmp	r7, #0
 8014058:	f47f ae18 	bne.w	8013c8c <tcp_write+0x7c>
 801405c:	e7db      	b.n	8014016 <tcp_write+0x406>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801405e:	4b66      	ldr	r3, [pc, #408]	@ (80141f8 <tcp_write+0x5e8>)
 8014060:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8014064:	4968      	ldr	r1, [pc, #416]	@ (8014208 <tcp_write+0x5f8>)
 8014066:	4866      	ldr	r0, [pc, #408]	@ (8014200 <tcp_write+0x5f0>)
 8014068:	f002 fa28 	bl	80164bc <iprintf>
 801406c:	e62d      	b.n	8013cca <tcp_write+0xba>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801406e:	4b62      	ldr	r3, [pc, #392]	@ (80141f8 <tcp_write+0x5e8>)
 8014070:	f240 224a 	movw	r2, #586	@ 0x24a
 8014074:	4965      	ldr	r1, [pc, #404]	@ (801420c <tcp_write+0x5fc>)
 8014076:	4862      	ldr	r0, [pc, #392]	@ (8014200 <tcp_write+0x5f0>)
 8014078:	f002 fa20 	bl	80164bc <iprintf>
 801407c:	e7ce      	b.n	801401c <tcp_write+0x40c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801407e:	4b5e      	ldr	r3, [pc, #376]	@ (80141f8 <tcp_write+0x5e8>)
 8014080:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014084:	4962      	ldr	r1, [pc, #392]	@ (8014210 <tcp_write+0x600>)
 8014086:	485e      	ldr	r0, [pc, #376]	@ (8014200 <tcp_write+0x5f0>)
 8014088:	f002 fa18 	bl	80164bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801408c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801408e:	891b      	ldrh	r3, [r3, #8]
 8014090:	e60b      	b.n	8013caa <tcp_write+0x9a>
        pbuf_free(p2);
 8014092:	4618      	mov	r0, r3
 8014094:	465f      	mov	r7, fp
 8014096:	f7fc fa5d 	bl	8010554 <pbuf_free>
        goto memerr;
 801409a:	e790      	b.n	8013fbe <tcp_write+0x3ae>
  if (concat_p != NULL) {
 801409c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 801409e:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d061      	beq.n	801416a <tcp_write+0x55a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80140a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f47f af35 	bne.w	8013f18 <tcp_write+0x308>
 80140ae:	4b52      	ldr	r3, [pc, #328]	@ (80141f8 <tcp_write+0x5e8>)
 80140b0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80140b4:	4957      	ldr	r1, [pc, #348]	@ (8014214 <tcp_write+0x604>)
 80140b6:	4852      	ldr	r0, [pc, #328]	@ (8014200 <tcp_write+0x5f0>)
 80140b8:	f002 fa00 	bl	80164bc <iprintf>
 80140bc:	e72c      	b.n	8013f18 <tcp_write+0x308>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80140be:	899c      	ldrh	r4, [r3, #12]
 80140c0:	2008      	movs	r0, #8
 80140c2:	f7fb fbb7 	bl	800f834 <lwip_htons>
 80140c6:	68f3      	ldr	r3, [r6, #12]
 80140c8:	4304      	orrs	r4, r0
 80140ca:	819c      	strh	r4, [r3, #12]
 80140cc:	e74c      	b.n	8013f68 <tcp_write+0x358>
    LWIP_ASSERT("tcp_write: valid queue length",
 80140ce:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f47f af41 	bne.w	8013f5a <tcp_write+0x34a>
 80140d8:	4b47      	ldr	r3, [pc, #284]	@ (80141f8 <tcp_write+0x5e8>)
 80140da:	f240 3212 	movw	r2, #786	@ 0x312
 80140de:	4947      	ldr	r1, [pc, #284]	@ (80141fc <tcp_write+0x5ec>)
 80140e0:	4847      	ldr	r0, [pc, #284]	@ (8014200 <tcp_write+0x5f0>)
 80140e2:	f002 f9eb 	bl	80164bc <iprintf>
 80140e6:	e738      	b.n	8013f5a <tcp_write+0x34a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80140e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d15a      	bne.n	80141a4 <tcp_write+0x594>
          extendlen = seglen;
 80140ee:	940d      	str	r4, [sp, #52]	@ 0x34
 80140f0:	e654      	b.n	8013d9c <tcp_write+0x18c>
    return ERR_CONN;
 80140f2:	f06f 000a 	mvn.w	r0, #10
 80140f6:	e738      	b.n	8013f6a <tcp_write+0x35a>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80140f8:	e9cd 8300 	strd	r8, r3, [sp]
 80140fc:	2301      	movs	r3, #1
 80140fe:	465a      	mov	r2, fp
 8014100:	4621      	mov	r1, r4
 8014102:	2000      	movs	r0, #0
 8014104:	9302      	str	r3, [sp, #8]
 8014106:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801410a:	f7ff fc0b 	bl	8013924 <tcp_pbuf_prealloc>
 801410e:	4603      	mov	r3, r0
 8014110:	900c      	str	r0, [sp, #48]	@ 0x30
 8014112:	2800      	cmp	r0, #0
 8014114:	d069      	beq.n	80141ea <tcp_write+0x5da>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014116:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014118:	461e      	mov	r6, r3
 801411a:	9907      	ldr	r1, [sp, #28]
 801411c:	4622      	mov	r2, r4
 801411e:	4401      	add	r1, r0
 8014120:	6858      	ldr	r0, [r3, #4]
 8014122:	f002 fbf8 	bl	8016916 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8014126:	4630      	mov	r0, r6
 8014128:	e632      	b.n	8013d90 <tcp_write+0x180>
  } else if (extendlen > 0) {
 801412a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801412c:	2b00      	cmp	r3, #0
 801412e:	f43f aeff 	beq.w	8013f30 <tcp_write+0x320>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014134:	6859      	ldr	r1, [r3, #4]
 8014136:	b1e9      	cbz	r1, 8014174 <tcp_write+0x564>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014138:	680a      	ldr	r2, [r1, #0]
 801413a:	2a00      	cmp	r2, #0
 801413c:	d053      	beq.n	80141e6 <tcp_write+0x5d6>
 801413e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8014140:	e000      	b.n	8014144 <tcp_write+0x534>
 8014142:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 8014144:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014146:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8014148:	4423      	add	r3, r4
 801414a:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801414c:	4611      	mov	r1, r2
 801414e:	2800      	cmp	r0, #0
 8014150:	d1f7      	bne.n	8014142 <tcp_write+0x532>
    p->tot_len += extendlen;
 8014152:	8913      	ldrh	r3, [r2, #8]
 8014154:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014156:	440b      	add	r3, r1
 8014158:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801415a:	8953      	ldrh	r3, [r2, #10]
 801415c:	440b      	add	r3, r1
 801415e:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8014160:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014162:	8913      	ldrh	r3, [r2, #8]
 8014164:	440b      	add	r3, r1
 8014166:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 8014168:	e6e2      	b.n	8013f30 <tcp_write+0x320>
  } else if (extendlen > 0) {
 801416a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801416c:	b19b      	cbz	r3, 8014196 <tcp_write+0x586>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801416e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1de      	bne.n	8014132 <tcp_write+0x522>
 8014174:	4b20      	ldr	r3, [pc, #128]	@ (80141f8 <tcp_write+0x5e8>)
 8014176:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801417a:	4927      	ldr	r1, [pc, #156]	@ (8014218 <tcp_write+0x608>)
 801417c:	4820      	ldr	r0, [pc, #128]	@ (8014200 <tcp_write+0x5f0>)
 801417e:	f002 f99d 	bl	80164bc <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014184:	6859      	ldr	r1, [r3, #4]
 8014186:	e7d7      	b.n	8014138 <tcp_write+0x528>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014188:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801418c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014190:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 8014194:	e725      	b.n	8013fe2 <tcp_write+0x3d2>
  if (last_unsent == NULL) {
 8014196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014198:	2b00      	cmp	r3, #0
 801419a:	f47f aec9 	bne.w	8013f30 <tcp_write+0x320>
    pcb->unsent = queue;
 801419e:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 80141a2:	e6c7      	b.n	8013f34 <tcp_write+0x324>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80141a4:	4b14      	ldr	r3, [pc, #80]	@ (80141f8 <tcp_write+0x5e8>)
 80141a6:	f240 2231 	movw	r2, #561	@ 0x231
 80141aa:	491c      	ldr	r1, [pc, #112]	@ (801421c <tcp_write+0x60c>)
 80141ac:	4814      	ldr	r0, [pc, #80]	@ (8014200 <tcp_write+0x5f0>)
 80141ae:	f002 f985 	bl	80164bc <iprintf>
 80141b2:	e79c      	b.n	80140ee <tcp_write+0x4de>
  pcb->unsent_oversize = oversize;
 80141b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 80141b8:	464f      	mov	r7, r9
 80141ba:	464e      	mov	r6, r9
 80141bc:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 80141c0:	e7ed      	b.n	801419e <tcp_write+0x58e>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80141c2:	4b0d      	ldr	r3, [pc, #52]	@ (80141f8 <tcp_write+0x5e8>)
 80141c4:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80141c8:	4915      	ldr	r1, [pc, #84]	@ (8014220 <tcp_write+0x610>)
 80141ca:	480d      	ldr	r0, [pc, #52]	@ (8014200 <tcp_write+0x5f0>)
 80141cc:	f002 f976 	bl	80164bc <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80141d0:	f06f 000f 	mvn.w	r0, #15
 80141d4:	e6c9      	b.n	8013f6a <tcp_write+0x35a>
 80141d6:	4b08      	ldr	r3, [pc, #32]	@ (80141f8 <tcp_write+0x5e8>)
 80141d8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80141dc:	4911      	ldr	r1, [pc, #68]	@ (8014224 <tcp_write+0x614>)
 80141de:	4808      	ldr	r0, [pc, #32]	@ (8014200 <tcp_write+0x5f0>)
 80141e0:	f002 f96c 	bl	80164bc <iprintf>
 80141e4:	e7f4      	b.n	80141d0 <tcp_write+0x5c0>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80141e6:	460a      	mov	r2, r1
 80141e8:	e7b3      	b.n	8014152 <tcp_write+0x542>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80141ea:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80141ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141f2:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 80141f6:	e6f1      	b.n	8013fdc <tcp_write+0x3cc>
 80141f8:	0801bd94 	.word	0x0801bd94
 80141fc:	0801c164 	.word	0x0801c164
 8014200:	080187f8 	.word	0x080187f8
 8014204:	0801bf6c 	.word	0x0801bf6c
 8014208:	0801bff4 	.word	0x0801bff4
 801420c:	0801c060 	.word	0x0801c060
 8014210:	0801bfdc 	.word	0x0801bfdc
 8014214:	0801c0f4 	.word	0x0801c0f4
 8014218:	0801c12c 	.word	0x0801c12c
 801421c:	0801c034 	.word	0x0801c034
 8014220:	0801bf38 	.word	0x0801bf38
 8014224:	0801bf20 	.word	0x0801bf20

08014228 <tcp_split_unsent_seg>:
{
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801422c:	4606      	mov	r6, r0
{
 801422e:	b083      	sub	sp, #12
 8014230:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014232:	2800      	cmp	r0, #0
 8014234:	f000 80ad 	beq.w	8014392 <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 8014238:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 801423a:	2d00      	cmp	r5, #0
 801423c:	f000 80b4 	beq.w	80143a8 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 8014240:	2c00      	cmp	r4, #0
 8014242:	f000 80b4 	beq.w	80143ae <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 8014246:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801424a:	45a0      	cmp	r8, r4
 801424c:	d97e      	bls.n	801434c <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801424e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8014250:	42a3      	cmp	r3, r4
 8014252:	f0c0 8084 	bcc.w	801435e <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 8014256:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 801425a:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801425e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014262:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014264:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 8014268:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801426c:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014270:	eb0b 0109 	add.w	r1, fp, r9
 8014274:	b289      	uxth	r1, r1
 8014276:	f7fc f9dd 	bl	8010634 <pbuf_alloc>
  if (p == NULL) {
 801427a:	4607      	mov	r7, r0
 801427c:	2800      	cmp	r0, #0
 801427e:	f000 8093 	beq.w	80143a8 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 8014282:	6868      	ldr	r0, [r5, #4]
 8014284:	892a      	ldrh	r2, [r5, #8]
 8014286:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014288:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801428a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801428c:	464a      	mov	r2, r9
 801428e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 8014290:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014292:	b29b      	uxth	r3, r3
 8014294:	f7fc fc3e 	bl	8010b14 <pbuf_copy_partial>
 8014298:	4548      	cmp	r0, r9
 801429a:	f040 8082 	bne.w	80143a2 <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801429e:	68eb      	ldr	r3, [r5, #12]
 80142a0:	8998      	ldrh	r0, [r3, #12]
 80142a2:	f7fb fac7 	bl	800f834 <lwip_htons>
  if (split_flags & TCP_PSH) {
 80142a6:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80142aa:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 80142ae:	d151      	bne.n	8014354 <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80142b0:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 80142b4:	f019 0f01 	tst.w	r9, #1
 80142b8:	d003      	beq.n	80142c2 <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 80142ba:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 80142be:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80142c2:	68eb      	ldr	r3, [r5, #12]
 80142c4:	6858      	ldr	r0, [r3, #4]
 80142c6:	f7fb fab9 	bl	800f83c <lwip_htonl>
 80142ca:	f8cd a000 	str.w	sl, [sp]
 80142ce:	1823      	adds	r3, r4, r0
 80142d0:	465a      	mov	r2, fp
 80142d2:	4639      	mov	r1, r7
 80142d4:	4630      	mov	r0, r6
 80142d6:	f7ff fb7b 	bl	80139d0 <tcp_create_segment>
  if (seg == NULL) {
 80142da:	4682      	mov	sl, r0
 80142dc:	2800      	cmp	r0, #0
 80142de:	d060      	beq.n	80143a2 <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80142e0:	6868      	ldr	r0, [r5, #4]
 80142e2:	eba4 0408 	sub.w	r4, r4, r8
 80142e6:	f7fc fac3 	bl	8010870 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80142ea:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80142ec:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 80142f0:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80142f2:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80142f4:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80142f6:	4610      	mov	r0, r2
 80142f8:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80142fa:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80142fe:	b289      	uxth	r1, r1
 8014300:	f7fc fa3c 	bl	801077c <pbuf_realloc>
  useg->len -= remainder;
 8014304:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014306:	4648      	mov	r0, r9
  useg->len -= remainder;
 8014308:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801430a:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 801430c:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801430e:	899c      	ldrh	r4, [r3, #12]
 8014310:	f7fb fa90 	bl	800f834 <lwip_htons>
 8014314:	68eb      	ldr	r3, [r5, #12]
 8014316:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014318:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801431a:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801431c:	f7fc faa8 	bl	8010870 <pbuf_clen>
 8014320:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8014324:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014326:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801432a:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801432e:	f7fc fa9f 	bl	8010870 <pbuf_clen>
 8014332:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8014336:	4418      	add	r0, r3
  seg->next = useg->next;
 8014338:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801433a:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 801433e:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 8014342:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 8014346:	f8da 3000 	ldr.w	r3, [sl]
 801434a:	b1fb      	cbz	r3, 801438c <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 801434c:	2000      	movs	r0, #0
}
 801434e:	b003      	add	sp, #12
 8014350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 8014354:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 8014358:	f04f 0b08 	mov.w	fp, #8
 801435c:	e7aa      	b.n	80142b4 <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801435e:	4b19      	ldr	r3, [pc, #100]	@ (80143c4 <tcp_split_unsent_seg+0x19c>)
 8014360:	f240 325b 	movw	r2, #859	@ 0x35b
 8014364:	4918      	ldr	r1, [pc, #96]	@ (80143c8 <tcp_split_unsent_seg+0x1a0>)
 8014366:	4819      	ldr	r0, [pc, #100]	@ (80143cc <tcp_split_unsent_seg+0x1a4>)
 8014368:	f002 f8a8 	bl	80164bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801436c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8014370:	f1b8 0f00 	cmp.w	r8, #0
 8014374:	f47f af6f 	bne.w	8014256 <tcp_split_unsent_seg+0x2e>
 8014378:	4b12      	ldr	r3, [pc, #72]	@ (80143c4 <tcp_split_unsent_seg+0x19c>)
 801437a:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801437e:	4914      	ldr	r1, [pc, #80]	@ (80143d0 <tcp_split_unsent_seg+0x1a8>)
 8014380:	4812      	ldr	r0, [pc, #72]	@ (80143cc <tcp_split_unsent_seg+0x1a4>)
 8014382:	f002 f89b 	bl	80164bc <iprintf>
  remainder = useg->len - split;
 8014386:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801438a:	e764      	b.n	8014256 <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 801438c:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 8014390:	e7dc      	b.n	801434c <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014392:	4b0c      	ldr	r3, [pc, #48]	@ (80143c4 <tcp_split_unsent_seg+0x19c>)
 8014394:	f240 324b 	movw	r2, #843	@ 0x34b
 8014398:	490e      	ldr	r1, [pc, #56]	@ (80143d4 <tcp_split_unsent_seg+0x1ac>)
 801439a:	480c      	ldr	r0, [pc, #48]	@ (80143cc <tcp_split_unsent_seg+0x1a4>)
 801439c:	f002 f88e 	bl	80164bc <iprintf>
 80143a0:	e74a      	b.n	8014238 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 80143a2:	4638      	mov	r0, r7
 80143a4:	f7fc f8d6 	bl	8010554 <pbuf_free>
    return ERR_MEM;
 80143a8:	f04f 30ff 	mov.w	r0, #4294967295
 80143ac:	e7cf      	b.n	801434e <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80143ae:	4b05      	ldr	r3, [pc, #20]	@ (80143c4 <tcp_split_unsent_seg+0x19c>)
 80143b0:	f240 3253 	movw	r2, #851	@ 0x353
 80143b4:	4908      	ldr	r1, [pc, #32]	@ (80143d8 <tcp_split_unsent_seg+0x1b0>)
 80143b6:	4805      	ldr	r0, [pc, #20]	@ (80143cc <tcp_split_unsent_seg+0x1a4>)
 80143b8:	f002 f880 	bl	80164bc <iprintf>
    return ERR_VAL;
 80143bc:	f06f 0005 	mvn.w	r0, #5
 80143c0:	e7c5      	b.n	801434e <tcp_split_unsent_seg+0x126>
 80143c2:	bf00      	nop
 80143c4:	0801bd94 	.word	0x0801bd94
 80143c8:	0801c1cc 	.word	0x0801c1cc
 80143cc:	080187f8 	.word	0x080187f8
 80143d0:	0801c1dc 	.word	0x0801c1dc
 80143d4:	0801c184 	.word	0x0801c184
 80143d8:	0801c1a8 	.word	0x0801c1a8

080143dc <tcp_enqueue_flags>:
{
 80143dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80143e0:	f011 0703 	ands.w	r7, r1, #3
{
 80143e4:	b083      	sub	sp, #12
 80143e6:	460d      	mov	r5, r1
 80143e8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80143ea:	d053      	beq.n	8014494 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80143ec:	2c00      	cmp	r4, #0
 80143ee:	d05a      	beq.n	80144a6 <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 80143f0:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80143f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80143f8:	2036      	movs	r0, #54	@ 0x36
 80143fa:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80143fe:	4649      	mov	r1, r9
 8014400:	f7fc f918 	bl	8010634 <pbuf_alloc>
 8014404:	4606      	mov	r6, r0
 8014406:	2800      	cmp	r0, #0
 8014408:	d071      	beq.n	80144ee <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801440a:	8943      	ldrh	r3, [r0, #10]
 801440c:	454b      	cmp	r3, r9
 801440e:	d352      	bcc.n	80144b6 <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014410:	4631      	mov	r1, r6
 8014412:	f8cd 8000 	str.w	r8, [sp]
 8014416:	462a      	mov	r2, r5
 8014418:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801441a:	4620      	mov	r0, r4
 801441c:	f7ff fad8 	bl	80139d0 <tcp_create_segment>
 8014420:	4606      	mov	r6, r0
 8014422:	2800      	cmp	r0, #0
 8014424:	d063      	beq.n	80144ee <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014426:	68c3      	ldr	r3, [r0, #12]
 8014428:	079a      	lsls	r2, r3, #30
 801442a:	d158      	bne.n	80144de <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801442c:	8933      	ldrh	r3, [r6, #8]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d149      	bne.n	80144c6 <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 8014432:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8014434:	2b00      	cmp	r3, #0
 8014436:	d050      	beq.n	80144da <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014438:	461a      	mov	r2, r3
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d1fb      	bne.n	8014438 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 8014440:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8014442:	2300      	movs	r3, #0
 8014444:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014448:	b117      	cbz	r7, 8014450 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 801444a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801444c:	3301      	adds	r3, #1
 801444e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 8014450:	07eb      	lsls	r3, r5, #31
 8014452:	d503      	bpl.n	801445c <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 8014454:	8b63      	ldrh	r3, [r4, #26]
 8014456:	f043 0320 	orr.w	r3, r3, #32
 801445a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801445c:	6870      	ldr	r0, [r6, #4]
 801445e:	f7fc fa07 	bl	8010870 <pbuf_clen>
 8014462:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8014466:	4418      	add	r0, r3
 8014468:	b280      	uxth	r0, r0
 801446a:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 801446e:	b918      	cbnz	r0, 8014478 <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 8014470:	2000      	movs	r0, #0
}
 8014472:	b003      	add	sp, #12
 8014474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014478:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1f8      	bne.n	8014470 <tcp_enqueue_flags+0x94>
 801447e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8014480:	2b00      	cmp	r3, #0
 8014482:	d1f5      	bne.n	8014470 <tcp_enqueue_flags+0x94>
 8014484:	4b1d      	ldr	r3, [pc, #116]	@ (80144fc <tcp_enqueue_flags+0x120>)
 8014486:	f240 4265 	movw	r2, #1125	@ 0x465
 801448a:	491d      	ldr	r1, [pc, #116]	@ (8014500 <tcp_enqueue_flags+0x124>)
 801448c:	481d      	ldr	r0, [pc, #116]	@ (8014504 <tcp_enqueue_flags+0x128>)
 801448e:	f002 f815 	bl	80164bc <iprintf>
 8014492:	e7ed      	b.n	8014470 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014494:	4b19      	ldr	r3, [pc, #100]	@ (80144fc <tcp_enqueue_flags+0x120>)
 8014496:	f240 4211 	movw	r2, #1041	@ 0x411
 801449a:	491b      	ldr	r1, [pc, #108]	@ (8014508 <tcp_enqueue_flags+0x12c>)
 801449c:	4819      	ldr	r0, [pc, #100]	@ (8014504 <tcp_enqueue_flags+0x128>)
 801449e:	f002 f80d 	bl	80164bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80144a2:	2c00      	cmp	r4, #0
 80144a4:	d1a4      	bne.n	80143f0 <tcp_enqueue_flags+0x14>
 80144a6:	4b15      	ldr	r3, [pc, #84]	@ (80144fc <tcp_enqueue_flags+0x120>)
 80144a8:	f240 4213 	movw	r2, #1043	@ 0x413
 80144ac:	4917      	ldr	r1, [pc, #92]	@ (801450c <tcp_enqueue_flags+0x130>)
 80144ae:	4815      	ldr	r0, [pc, #84]	@ (8014504 <tcp_enqueue_flags+0x128>)
 80144b0:	f002 f804 	bl	80164bc <iprintf>
 80144b4:	e79c      	b.n	80143f0 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80144b6:	4b11      	ldr	r3, [pc, #68]	@ (80144fc <tcp_enqueue_flags+0x120>)
 80144b8:	f240 4239 	movw	r2, #1081	@ 0x439
 80144bc:	4914      	ldr	r1, [pc, #80]	@ (8014510 <tcp_enqueue_flags+0x134>)
 80144be:	4811      	ldr	r0, [pc, #68]	@ (8014504 <tcp_enqueue_flags+0x128>)
 80144c0:	f001 fffc 	bl	80164bc <iprintf>
 80144c4:	e7a4      	b.n	8014410 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80144c6:	4b0d      	ldr	r3, [pc, #52]	@ (80144fc <tcp_enqueue_flags+0x120>)
 80144c8:	f240 4243 	movw	r2, #1091	@ 0x443
 80144cc:	4911      	ldr	r1, [pc, #68]	@ (8014514 <tcp_enqueue_flags+0x138>)
 80144ce:	480d      	ldr	r0, [pc, #52]	@ (8014504 <tcp_enqueue_flags+0x128>)
 80144d0:	f001 fff4 	bl	80164bc <iprintf>
  if (pcb->unsent == NULL) {
 80144d4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1ae      	bne.n	8014438 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 80144da:	66e6      	str	r6, [r4, #108]	@ 0x6c
 80144dc:	e7b1      	b.n	8014442 <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80144de:	4b07      	ldr	r3, [pc, #28]	@ (80144fc <tcp_enqueue_flags+0x120>)
 80144e0:	f240 4242 	movw	r2, #1090	@ 0x442
 80144e4:	490c      	ldr	r1, [pc, #48]	@ (8014518 <tcp_enqueue_flags+0x13c>)
 80144e6:	4807      	ldr	r0, [pc, #28]	@ (8014504 <tcp_enqueue_flags+0x128>)
 80144e8:	f001 ffe8 	bl	80164bc <iprintf>
 80144ec:	e79e      	b.n	801442c <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80144ee:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80144f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144f8:	8363      	strh	r3, [r4, #26]
 80144fa:	e7ba      	b.n	8014472 <tcp_enqueue_flags+0x96>
 80144fc:	0801bd94 	.word	0x0801bd94
 8014500:	0801c2e4 	.word	0x0801c2e4
 8014504:	080187f8 	.word	0x080187f8
 8014508:	0801c1ec 	.word	0x0801c1ec
 801450c:	0801c244 	.word	0x0801c244
 8014510:	0801c264 	.word	0x0801c264
 8014514:	0801c2b8 	.word	0x0801c2b8
 8014518:	0801c2a0 	.word	0x0801c2a0

0801451c <tcp_send_fin>:
{
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801451e:	4606      	mov	r6, r0
 8014520:	b188      	cbz	r0, 8014546 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 8014522:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 8014524:	b14c      	cbz	r4, 801453a <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014526:	4625      	mov	r5, r4
 8014528:	6824      	ldr	r4, [r4, #0]
 801452a:	2c00      	cmp	r4, #0
 801452c:	d1fb      	bne.n	8014526 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801452e:	68eb      	ldr	r3, [r5, #12]
 8014530:	8998      	ldrh	r0, [r3, #12]
 8014532:	f7fb f97f 	bl	800f834 <lwip_htons>
 8014536:	0743      	lsls	r3, r0, #29
 8014538:	d00d      	beq.n	8014556 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801453a:	4630      	mov	r0, r6
 801453c:	2101      	movs	r1, #1
}
 801453e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014542:	f7ff bf4b 	b.w	80143dc <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014546:	4b0b      	ldr	r3, [pc, #44]	@ (8014574 <tcp_send_fin+0x58>)
 8014548:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801454c:	490a      	ldr	r1, [pc, #40]	@ (8014578 <tcp_send_fin+0x5c>)
 801454e:	480b      	ldr	r0, [pc, #44]	@ (801457c <tcp_send_fin+0x60>)
 8014550:	f001 ffb4 	bl	80164bc <iprintf>
 8014554:	e7e5      	b.n	8014522 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014556:	68eb      	ldr	r3, [r5, #12]
 8014558:	2001      	movs	r0, #1
 801455a:	899f      	ldrh	r7, [r3, #12]
 801455c:	f7fb f96a 	bl	800f834 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8014560:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014562:	4307      	orrs	r7, r0
 8014564:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014566:	f043 0320 	orr.w	r3, r3, #32
}
 801456a:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801456c:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 801456e:	8373      	strh	r3, [r6, #26]
}
 8014570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014572:	bf00      	nop
 8014574:	0801bd94 	.word	0x0801bd94
 8014578:	0801c30c 	.word	0x0801c30c
 801457c:	080187f8 	.word	0x080187f8

08014580 <tcp_rexmit_rto_prepare>:
{
 8014580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014582:	4605      	mov	r5, r0
 8014584:	2800      	cmp	r0, #0
 8014586:	d031      	beq.n	80145ec <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 8014588:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 801458a:	b132      	cbz	r2, 801459a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801458c:	6813      	ldr	r3, [r2, #0]
 801458e:	4614      	mov	r4, r2
 8014590:	b153      	cbz	r3, 80145a8 <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 8014592:	6863      	ldr	r3, [r4, #4]
 8014594:	7b9b      	ldrb	r3, [r3, #14]
 8014596:	2b01      	cmp	r3, #1
 8014598:	d002      	beq.n	80145a0 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 801459a:	f06f 0005 	mvn.w	r0, #5
}
 801459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145a0:	6824      	ldr	r4, [r4, #0]
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d1f4      	bne.n	8014592 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 80145a8:	6863      	ldr	r3, [r4, #4]
 80145aa:	7b9b      	ldrb	r3, [r3, #14]
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d1f4      	bne.n	801459a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80145b0:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80145b2:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80145b4:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80145b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 80145ba:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80145bc:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145be:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80145c0:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145c4:	6858      	ldr	r0, [r3, #4]
 80145c6:	f7fb f939 	bl	800f83c <lwip_htonl>
 80145ca:	68e3      	ldr	r3, [r4, #12]
 80145cc:	4606      	mov	r6, r0
 80145ce:	8924      	ldrh	r4, [r4, #8]
 80145d0:	8998      	ldrh	r0, [r3, #12]
 80145d2:	f7fb f92f 	bl	800f834 <lwip_htons>
 80145d6:	4603      	mov	r3, r0
 80145d8:	4426      	add	r6, r4
  return ERR_OK;
 80145da:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145dc:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 80145e0:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145e2:	bf18      	it	ne
 80145e4:	2301      	movne	r3, #1
 80145e6:	4433      	add	r3, r6
 80145e8:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 80145ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80145ec:	4b03      	ldr	r3, [pc, #12]	@ (80145fc <tcp_rexmit_rto_prepare+0x7c>)
 80145ee:	f240 6263 	movw	r2, #1635	@ 0x663
 80145f2:	4903      	ldr	r1, [pc, #12]	@ (8014600 <tcp_rexmit_rto_prepare+0x80>)
 80145f4:	4803      	ldr	r0, [pc, #12]	@ (8014604 <tcp_rexmit_rto_prepare+0x84>)
 80145f6:	f001 ff61 	bl	80164bc <iprintf>
 80145fa:	e7c5      	b.n	8014588 <tcp_rexmit_rto_prepare+0x8>
 80145fc:	0801bd94 	.word	0x0801bd94
 8014600:	0801c328 	.word	0x0801c328
 8014604:	080187f8 	.word	0x080187f8

08014608 <tcp_rexmit>:
{
 8014608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801460a:	4607      	mov	r7, r0
 801460c:	2800      	cmp	r0, #0
 801460e:	d031      	beq.n	8014674 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 8014610:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 8014612:	b34e      	cbz	r6, 8014668 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8014614:	6873      	ldr	r3, [r6, #4]
 8014616:	7b9b      	ldrb	r3, [r3, #14]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d125      	bne.n	8014668 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801461c:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801461e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 8014622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 8014624:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 8014626:	b91b      	cbnz	r3, 8014630 <tcp_rexmit+0x28>
 8014628:	e00f      	b.n	801464a <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801462a:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	b163      	cbz	r3, 801464a <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	6858      	ldr	r0, [r3, #4]
 8014634:	f7fb f902 	bl	800f83c <lwip_htonl>
 8014638:	68f3      	ldr	r3, [r6, #12]
 801463a:	4604      	mov	r4, r0
 801463c:	6858      	ldr	r0, [r3, #4]
 801463e:	f7fb f8fd 	bl	800f83c <lwip_htonl>
 8014642:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8014644:	2c00      	cmp	r4, #0
 8014646:	dbf0      	blt.n	801462a <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 8014648:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801464a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801464c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801464e:	6833      	ldr	r3, [r6, #0]
 8014650:	b16b      	cbz	r3, 801466e <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 8014652:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8014656:	2bff      	cmp	r3, #255	@ 0xff
 8014658:	d002      	beq.n	8014660 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801465a:	3301      	adds	r3, #1
 801465c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 8014660:	2300      	movs	r3, #0
  return ERR_OK;
 8014662:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8014664:	637b      	str	r3, [r7, #52]	@ 0x34
}
 8014666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8014668:	f06f 0005 	mvn.w	r0, #5
}
 801466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801466e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8014672:	e7ee      	b.n	8014652 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014674:	4b03      	ldr	r3, [pc, #12]	@ (8014684 <tcp_rexmit+0x7c>)
 8014676:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801467a:	4903      	ldr	r1, [pc, #12]	@ (8014688 <tcp_rexmit+0x80>)
 801467c:	4803      	ldr	r0, [pc, #12]	@ (801468c <tcp_rexmit+0x84>)
 801467e:	f001 ff1d 	bl	80164bc <iprintf>
 8014682:	e7c5      	b.n	8014610 <tcp_rexmit+0x8>
 8014684:	0801bd94 	.word	0x0801bd94
 8014688:	0801c34c 	.word	0x0801c34c
 801468c:	080187f8 	.word	0x080187f8

08014690 <tcp_rexmit_fast>:
{
 8014690:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014692:	4604      	mov	r4, r0
 8014694:	b340      	cbz	r0, 80146e8 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014696:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014698:	b113      	cbz	r3, 80146a0 <tcp_rexmit_fast+0x10>
 801469a:	8b63      	ldrh	r3, [r4, #26]
 801469c:	075b      	lsls	r3, r3, #29
 801469e:	d500      	bpl.n	80146a2 <tcp_rexmit_fast+0x12>
}
 80146a0:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 80146a2:	4620      	mov	r0, r4
 80146a4:	f7ff ffb0 	bl	8014608 <tcp_rexmit>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d1f9      	bne.n	80146a0 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146ac:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80146b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146b4:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146b6:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146b8:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146bc:	bf28      	it	cs
 80146be:	4619      	movcs	r1, r3
 80146c0:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146c2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146c6:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146ca:	d902      	bls.n	80146d2 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80146cc:	b283      	uxth	r3, r0
 80146ce:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80146d2:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146d4:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 80146d6:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146da:	4413      	add	r3, r2
      pcb->rtime = 0;
 80146dc:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146de:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80146e2:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 80146e4:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 80146e6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80146e8:	4b03      	ldr	r3, [pc, #12]	@ (80146f8 <tcp_rexmit_fast+0x68>)
 80146ea:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80146ee:	4903      	ldr	r1, [pc, #12]	@ (80146fc <tcp_rexmit_fast+0x6c>)
 80146f0:	4803      	ldr	r0, [pc, #12]	@ (8014700 <tcp_rexmit_fast+0x70>)
 80146f2:	f001 fee3 	bl	80164bc <iprintf>
 80146f6:	e7ce      	b.n	8014696 <tcp_rexmit_fast+0x6>
 80146f8:	0801bd94 	.word	0x0801bd94
 80146fc:	0801c364 	.word	0x0801c364
 8014700:	080187f8 	.word	0x080187f8

08014704 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014708:	b084      	sub	sp, #16
 801470a:	4607      	mov	r7, r0
 801470c:	460e      	mov	r6, r1
 801470e:	4615      	mov	r5, r2
 8014710:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014714:	461c      	mov	r4, r3
{
 8014716:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801471a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801471e:	b1fb      	cbz	r3, 8014760 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014720:	f1b8 0f00 	cmp.w	r8, #0
 8014724:	d026      	beq.n	8014774 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014726:	4630      	mov	r0, r6
 8014728:	f7fb f888 	bl	800f83c <lwip_htonl>
 801472c:	2114      	movs	r1, #20
 801472e:	4602      	mov	r2, r0
 8014730:	4628      	mov	r0, r5
 8014732:	f24d 0516 	movw	r5, #53270	@ 0xd016
 8014736:	464b      	mov	r3, r9
 8014738:	f8cd a000 	str.w	sl, [sp]
 801473c:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8014740:	2100      	movs	r1, #0
 8014742:	f7ff f9bb 	bl	8013abc <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014746:	4601      	mov	r1, r0
 8014748:	b138      	cbz	r0, 801475a <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801474a:	4643      	mov	r3, r8
 801474c:	4622      	mov	r2, r4
 801474e:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014750:	b004      	add	sp, #16
 8014752:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014756:	f7ff ba1f 	b.w	8013b98 <tcp_output_control_segment>
}
 801475a:	b004      	add	sp, #16
 801475c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014760:	4b08      	ldr	r3, [pc, #32]	@ (8014784 <tcp_rst+0x80>)
 8014762:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014766:	4908      	ldr	r1, [pc, #32]	@ (8014788 <tcp_rst+0x84>)
 8014768:	4808      	ldr	r0, [pc, #32]	@ (801478c <tcp_rst+0x88>)
 801476a:	f001 fea7 	bl	80164bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801476e:	f1b8 0f00 	cmp.w	r8, #0
 8014772:	d1d8      	bne.n	8014726 <tcp_rst+0x22>
 8014774:	4b03      	ldr	r3, [pc, #12]	@ (8014784 <tcp_rst+0x80>)
 8014776:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801477a:	4905      	ldr	r1, [pc, #20]	@ (8014790 <tcp_rst+0x8c>)
 801477c:	4803      	ldr	r0, [pc, #12]	@ (801478c <tcp_rst+0x88>)
 801477e:	f001 fe9d 	bl	80164bc <iprintf>
 8014782:	e7d0      	b.n	8014726 <tcp_rst+0x22>
 8014784:	0801bd94 	.word	0x0801bd94
 8014788:	0801c384 	.word	0x0801c384
 801478c:	080187f8 	.word	0x080187f8
 8014790:	0801c3a0 	.word	0x0801c3a0

08014794 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014794:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014796:	4604      	mov	r4, r0
 8014798:	b1c8      	cbz	r0, 80147ce <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801479a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801479c:	f7fb f84e 	bl	800f83c <lwip_htonl>
 80147a0:	2100      	movs	r1, #0
 80147a2:	4602      	mov	r2, r0
 80147a4:	4620      	mov	r0, r4
 80147a6:	f7ff f9cf 	bl	8013b48 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80147aa:	4601      	mov	r1, r0
 80147ac:	b1b8      	cbz	r0, 80147de <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147ae:	1d23      	adds	r3, r4, #4
 80147b0:	4622      	mov	r2, r4
 80147b2:	4620      	mov	r0, r4
 80147b4:	f7ff f9f0 	bl	8013b98 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147b8:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80147ba:	b920      	cbnz	r0, 80147c6 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147bc:	f023 0303 	bic.w	r3, r3, #3
 80147c0:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147c2:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 80147c4:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147c6:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147ca:	8363      	strh	r3, [r4, #26]
}
 80147cc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80147ce:	4b07      	ldr	r3, [pc, #28]	@ (80147ec <tcp_send_empty_ack+0x58>)
 80147d0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80147d4:	4906      	ldr	r1, [pc, #24]	@ (80147f0 <tcp_send_empty_ack+0x5c>)
 80147d6:	4807      	ldr	r0, [pc, #28]	@ (80147f4 <tcp_send_empty_ack+0x60>)
 80147d8:	f001 fe70 	bl	80164bc <iprintf>
 80147dc:	e7dd      	b.n	801479a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147de:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 80147e0:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147e4:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 80147e8:	e7eb      	b.n	80147c2 <tcp_send_empty_ack+0x2e>
 80147ea:	bf00      	nop
 80147ec:	0801bd94 	.word	0x0801bd94
 80147f0:	0801c3bc 	.word	0x0801c3bc
 80147f4:	080187f8 	.word	0x080187f8

080147f8 <tcp_output>:
{
 80147f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80147fc:	4604      	mov	r4, r0
{
 80147fe:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014800:	2800      	cmp	r0, #0
 8014802:	f000 81a5 	beq.w	8014b50 <tcp_output+0x358>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014806:	7d23      	ldrb	r3, [r4, #20]
 8014808:	2b01      	cmp	r3, #1
 801480a:	f000 8155 	beq.w	8014ab8 <tcp_output+0x2c0>
  if (tcp_input_pcb == pcb) {
 801480e:	4bb1      	ldr	r3, [pc, #708]	@ (8014ad4 <tcp_output+0x2dc>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	42a3      	cmp	r3, r4
 8014814:	d031      	beq.n	801487a <tcp_output+0x82>
  seg = pcb->unsent;
 8014816:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014818:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 801481c:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 8014820:	b325      	cbz	r5, 801486c <tcp_output+0x74>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014822:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014824:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014828:	2800      	cmp	r0, #0
 801482a:	f040 8199 	bne.w	8014b60 <tcp_output+0x368>
    return ip_route(src, dst);
 801482e:	4640      	mov	r0, r8
 8014830:	f7fa f8a4 	bl	800e97c <ip4_route>
 8014834:	4683      	mov	fp, r0
  if (netif == NULL) {
 8014836:	f1bb 0f00 	cmp.w	fp, #0
 801483a:	f000 81a5 	beq.w	8014b88 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 801483e:	6823      	ldr	r3, [r4, #0]
 8014840:	b913      	cbnz	r3, 8014848 <tcp_output+0x50>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014842:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014846:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014848:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801484a:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801484c:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801484e:	bf28      	it	cs
 8014850:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014852:	f7fa fff3 	bl	800f83c <lwip_htonl>
 8014856:	892b      	ldrh	r3, [r5, #8]
 8014858:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801485a:	1a9b      	subs	r3, r3, r2
 801485c:	4403      	add	r3, r0
 801485e:	42bb      	cmp	r3, r7
 8014860:	d90f      	bls.n	8014882 <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014862:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8014866:	42bb      	cmp	r3, r7
 8014868:	f000 8142 	beq.w	8014af0 <tcp_output+0x2f8>
    if (pcb->flags & TF_ACK_NOW) {
 801486c:	8b62      	ldrh	r2, [r4, #26]
 801486e:	0790      	lsls	r0, r2, #30
 8014870:	f100 812a 	bmi.w	8014ac8 <tcp_output+0x2d0>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014878:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 801487a:	2000      	movs	r0, #0
}
 801487c:	b005      	add	sp, #20
 801487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 8014882:	2300      	movs	r3, #0
 8014884:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 8014888:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 801488a:	2b00      	cmp	r3, #0
 801488c:	f000 8140 	beq.w	8014b10 <tcp_output+0x318>
    for (; useg->next != NULL; useg = useg->next);
 8014890:	4699      	mov	r9, r3
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d1fb      	bne.n	8014890 <tcp_output+0x98>
    LWIP_ASSERT("RST not expected here!",
 8014898:	465e      	mov	r6, fp
 801489a:	e0a6      	b.n	80149ea <tcp_output+0x1f2>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801489c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801489e:	b15b      	cbz	r3, 80148b8 <tcp_output+0xc0>
 80148a0:	8b62      	ldrh	r2, [r4, #26]
 80148a2:	f012 0f44 	tst.w	r2, #68	@ 0x44
 80148a6:	d107      	bne.n	80148b8 <tcp_output+0xc0>
 80148a8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80148aa:	2800      	cmp	r0, #0
 80148ac:	f000 80f2 	beq.w	8014a94 <tcp_output+0x29c>
 80148b0:	6803      	ldr	r3, [r0, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f000 80e9 	beq.w	8014a8a <tcp_output+0x292>
    if (pcb->state != SYN_SENT) {
 80148b8:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80148ba:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 80148be:	2b02      	cmp	r3, #2
 80148c0:	d00a      	beq.n	80148d8 <tcp_output+0xe0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80148c2:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 80148c6:	2010      	movs	r0, #16
 80148c8:	f7fa ffb4 	bl	800f834 <lwip_htons>
 80148cc:	ea4a 0000 	orr.w	r0, sl, r0
 80148d0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80148d4:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 80148d8:	686b      	ldr	r3, [r5, #4]
 80148da:	7b9b      	ldrb	r3, [r3, #14]
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d153      	bne.n	8014988 <tcp_output+0x190>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80148e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80148e2:	f7fa ffab 	bl	800f83c <lwip_htonl>
 80148e6:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80148ea:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80148ec:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80148f0:	f7fa ffa0 	bl	800f834 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80148f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80148f8:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148fc:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80148fe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014902:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014904:	7aab      	ldrb	r3, [r5, #10]
 8014906:	07da      	lsls	r2, r3, #31
 8014908:	f100 80ae 	bmi.w	8014a68 <tcp_output+0x270>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801490c:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 8014910:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8014914:	2b00      	cmp	r3, #0
 8014916:	da01      	bge.n	801491c <tcp_output+0x124>
    pcb->rtime = 0;
 8014918:	2300      	movs	r3, #0
 801491a:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 801491c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801491e:	2b00      	cmp	r3, #0
 8014920:	f000 8097 	beq.w	8014a52 <tcp_output+0x25a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014924:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 8014926:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014928:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 801492a:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801492c:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 8014930:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014934:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8014936:	1ac9      	subs	r1, r1, r3
 8014938:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801493a:	8901      	ldrh	r1, [r0, #8]
 801493c:	1acb      	subs	r3, r1, r3
 801493e:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8014940:	f88a 2010 	strb.w	r2, [sl, #16]
 8014944:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014948:	7aab      	ldrb	r3, [r5, #10]
 801494a:	f013 0f01 	tst.w	r3, #1
 801494e:	bf0c      	ite	eq
 8014950:	2314      	moveq	r3, #20
 8014952:	2318      	movne	r3, #24
 8014954:	449a      	add	sl, r3
 8014956:	45d3      	cmp	fp, sl
 8014958:	d007      	beq.n	801496a <tcp_output+0x172>
 801495a:	4b5f      	ldr	r3, [pc, #380]	@ (8014ad8 <tcp_output+0x2e0>)
 801495c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014960:	495e      	ldr	r1, [pc, #376]	@ (8014adc <tcp_output+0x2e4>)
 8014962:	485f      	ldr	r0, [pc, #380]	@ (8014ae0 <tcp_output+0x2e8>)
 8014964:	f001 fdaa 	bl	80164bc <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014968:	6868      	ldr	r0, [r5, #4]
 801496a:	9602      	str	r6, [sp, #8]
 801496c:	4642      	mov	r2, r8
 801496e:	7aa3      	ldrb	r3, [r4, #10]
 8014970:	4621      	mov	r1, r4
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	2306      	movs	r3, #6
 8014976:	9301      	str	r3, [sp, #4]
 8014978:	7ae3      	ldrb	r3, [r4, #11]
 801497a:	f7fa fa37 	bl	800edec <ip4_output_if>
    if (err != ERR_OK) {
 801497e:	2800      	cmp	r0, #0
 8014980:	f040 80f8 	bne.w	8014b74 <tcp_output+0x37c>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014984:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801498c:	7d23      	ldrb	r3, [r4, #20]
 801498e:	2b02      	cmp	r3, #2
 8014990:	d003      	beq.n	801499a <tcp_output+0x1a2>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014992:	8b63      	ldrh	r3, [r4, #26]
 8014994:	f023 0303 	bic.w	r3, r3, #3
 8014998:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801499a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801499e:	f7fa ff4d 	bl	800f83c <lwip_htonl>
 80149a2:	68eb      	ldr	r3, [r5, #12]
 80149a4:	4682      	mov	sl, r0
 80149a6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 80149aa:	8998      	ldrh	r0, [r3, #12]
 80149ac:	f7fa ff42 	bl	800f834 <lwip_htons>
 80149b0:	f010 0303 	ands.w	r3, r0, #3
 80149b4:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80149b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80149b8:	bf18      	it	ne
 80149ba:	2301      	movne	r3, #1
 80149bc:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 80149be:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80149c2:	1ad2      	subs	r2, r2, r3
 80149c4:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 80149c6:	bfb8      	it	lt
 80149c8:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 80149ca:	68eb      	ldr	r3, [r5, #12]
 80149cc:	8998      	ldrh	r0, [r3, #12]
 80149ce:	f7fa ff31 	bl	800f834 <lwip_htons>
 80149d2:	0783      	lsls	r3, r0, #30
 80149d4:	d123      	bne.n	8014a1e <tcp_output+0x226>
 80149d6:	f1ba 0f00 	cmp.w	sl, #0
 80149da:	d120      	bne.n	8014a1e <tcp_output+0x226>
      tcp_seg_free(seg);
 80149dc:	4628      	mov	r0, r5
 80149de:	f7fc fb53 	bl	8011088 <tcp_seg_free>
    seg = pcb->unsent;
 80149e2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 80149e4:	2d00      	cmp	r5, #0
 80149e6:	f000 80ca 	beq.w	8014b7e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80149ea:	68eb      	ldr	r3, [r5, #12]
 80149ec:	6858      	ldr	r0, [r3, #4]
 80149ee:	f7fa ff25 	bl	800f83c <lwip_htonl>
 80149f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80149f4:	1ac0      	subs	r0, r0, r3
 80149f6:	892b      	ldrh	r3, [r5, #8]
 80149f8:	4418      	add	r0, r3
  while (seg != NULL &&
 80149fa:	42b8      	cmp	r0, r7
 80149fc:	f200 80b4 	bhi.w	8014b68 <tcp_output+0x370>
    LWIP_ASSERT("RST not expected here!",
 8014a00:	68eb      	ldr	r3, [r5, #12]
 8014a02:	8998      	ldrh	r0, [r3, #12]
 8014a04:	f7fa ff16 	bl	800f834 <lwip_htons>
 8014a08:	0741      	lsls	r1, r0, #29
 8014a0a:	f57f af47 	bpl.w	801489c <tcp_output+0xa4>
 8014a0e:	4b32      	ldr	r3, [pc, #200]	@ (8014ad8 <tcp_output+0x2e0>)
 8014a10:	f240 5236 	movw	r2, #1334	@ 0x536
 8014a14:	4933      	ldr	r1, [pc, #204]	@ (8014ae4 <tcp_output+0x2ec>)
 8014a16:	4832      	ldr	r0, [pc, #200]	@ (8014ae0 <tcp_output+0x2e8>)
 8014a18:	f001 fd50 	bl	80164bc <iprintf>
 8014a1c:	e73e      	b.n	801489c <tcp_output+0xa4>
      seg->next = NULL;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8014a22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014a24:	b193      	cbz	r3, 8014a4c <tcp_output+0x254>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014a26:	68eb      	ldr	r3, [r5, #12]
 8014a28:	6858      	ldr	r0, [r3, #4]
 8014a2a:	f7fa ff07 	bl	800f83c <lwip_htonl>
 8014a2e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8014a32:	4682      	mov	sl, r0
 8014a34:	6858      	ldr	r0, [r3, #4]
 8014a36:	f7fa ff01 	bl	800f83c <lwip_htonl>
 8014a3a:	ebaa 0a00 	sub.w	sl, sl, r0
 8014a3e:	f1ba 0f00 	cmp.w	sl, #0
 8014a42:	db67      	blt.n	8014b14 <tcp_output+0x31c>
          useg->next = seg;
 8014a44:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014a48:	46a9      	mov	r9, r5
 8014a4a:	e7ca      	b.n	80149e2 <tcp_output+0x1ea>
 8014a4c:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 8014a4e:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 8014a50:	e7c7      	b.n	80149e2 <tcp_output+0x1ea>
    pcb->rttest = tcp_ticks;
 8014a52:	4b25      	ldr	r3, [pc, #148]	@ (8014ae8 <tcp_output+0x2f0>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014a58:	f8da 0004 	ldr.w	r0, [sl, #4]
 8014a5c:	f7fa feee 	bl	800f83c <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014a60:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014a64:	63a0      	str	r0, [r4, #56]	@ 0x38
 8014a66:	e75d      	b.n	8014924 <tcp_output+0x12c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014a68:	4642      	mov	r2, r8
 8014a6a:	4631      	mov	r1, r6
 8014a6c:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 8014a70:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014a74:	f7fd fb08 	bl	8012088 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014a78:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 8014a7c:	f7fa fede 	bl	800f83c <lwip_htonl>
 8014a80:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014a84:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8014a88:	e742      	b.n	8014910 <tcp_output+0x118>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014a8a:	8901      	ldrh	r1, [r0, #8]
 8014a8c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014a8e:	4299      	cmp	r1, r3
 8014a90:	f4bf af12 	bcs.w	80148b8 <tcp_output+0xc0>
 8014a94:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	f43f af0d 	beq.w	80148b8 <tcp_output+0xc0>
 8014a9e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8014aa2:	2b0f      	cmp	r3, #15
 8014aa4:	f63f af08 	bhi.w	80148b8 <tcp_output+0xc0>
 8014aa8:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 8014aac:	f47f af04 	bne.w	80148b8 <tcp_output+0xc0>
  if (pcb->unsent == NULL) {
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	f47f aedf 	bne.w	8014874 <tcp_output+0x7c>
 8014ab6:	e063      	b.n	8014b80 <tcp_output+0x388>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014ab8:	4b07      	ldr	r3, [pc, #28]	@ (8014ad8 <tcp_output+0x2e0>)
 8014aba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014abe:	490b      	ldr	r1, [pc, #44]	@ (8014aec <tcp_output+0x2f4>)
 8014ac0:	4807      	ldr	r0, [pc, #28]	@ (8014ae0 <tcp_output+0x2e8>)
 8014ac2:	f001 fcfb 	bl	80164bc <iprintf>
 8014ac6:	e6a2      	b.n	801480e <tcp_output+0x16>
      return tcp_send_empty_ack(pcb);
 8014ac8:	4620      	mov	r0, r4
}
 8014aca:	b005      	add	sp, #20
 8014acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8014ad0:	f7ff be60 	b.w	8014794 <tcp_send_empty_ack>
 8014ad4:	20010184 	.word	0x20010184
 8014ad8:	0801bd94 	.word	0x0801bd94
 8014adc:	0801c434 	.word	0x0801c434
 8014ae0:	080187f8 	.word	0x080187f8
 8014ae4:	0801c41c 	.word	0x0801c41c
 8014ae8:	20010180 	.word	0x20010180
 8014aec:	0801c3f4 	.word	0x0801c3f4
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014af0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	f47f aeba 	bne.w	801486c <tcp_output+0x74>
 8014af8:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f47f aeb5 	bne.w	801486c <tcp_output+0x74>
      pcb->persist_cnt = 0;
 8014b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 8014b06:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 8014b0a:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 8014b0e:	e6ad      	b.n	801486c <tcp_output+0x74>
  useg = pcb->unacked;
 8014b10:	4699      	mov	r9, r3
 8014b12:	e6c1      	b.n	8014898 <tcp_output+0xa0>
          while (*cur_seg &&
 8014b14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014b16:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 8014b1a:	b92b      	cbnz	r3, 8014b28 <tcp_output+0x330>
 8014b1c:	e014      	b.n	8014b48 <tcp_output+0x350>
            cur_seg = &((*cur_seg)->next );
 8014b1e:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8014b22:	f8db 3000 	ldr.w	r3, [fp]
 8014b26:	b17b      	cbz	r3, 8014b48 <tcp_output+0x350>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	6858      	ldr	r0, [r3, #4]
 8014b2c:	f7fa fe86 	bl	800f83c <lwip_htonl>
 8014b30:	68eb      	ldr	r3, [r5, #12]
 8014b32:	4682      	mov	sl, r0
 8014b34:	6858      	ldr	r0, [r3, #4]
 8014b36:	f7fa fe81 	bl	800f83c <lwip_htonl>
 8014b3a:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 8014b3e:	f1ba 0f00 	cmp.w	sl, #0
 8014b42:	dbec      	blt.n	8014b1e <tcp_output+0x326>
            cur_seg = &((*cur_seg)->next );
 8014b44:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8014b48:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8014b4a:	f8cb 5000 	str.w	r5, [fp]
 8014b4e:	e748      	b.n	80149e2 <tcp_output+0x1ea>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014b50:	4b0f      	ldr	r3, [pc, #60]	@ (8014b90 <tcp_output+0x398>)
 8014b52:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014b56:	490f      	ldr	r1, [pc, #60]	@ (8014b94 <tcp_output+0x39c>)
 8014b58:	480f      	ldr	r0, [pc, #60]	@ (8014b98 <tcp_output+0x3a0>)
 8014b5a:	f001 fcaf 	bl	80164bc <iprintf>
 8014b5e:	e652      	b.n	8014806 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 8014b60:	f7fb fbf2 	bl	8010348 <netif_get_by_index>
 8014b64:	4683      	mov	fp, r0
 8014b66:	e666      	b.n	8014836 <tcp_output+0x3e>
  if (pcb->unsent == NULL) {
 8014b68:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8014b6a:	8b62      	ldrh	r2, [r4, #26]
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	f47f ae81 	bne.w	8014874 <tcp_output+0x7c>
 8014b72:	e005      	b.n	8014b80 <tcp_output+0x388>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b74:	8b63      	ldrh	r3, [r4, #26]
 8014b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b7a:	8363      	strh	r3, [r4, #26]
      return err;
 8014b7c:	e67e      	b.n	801487c <tcp_output+0x84>
 8014b7e:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8014b86:	e675      	b.n	8014874 <tcp_output+0x7c>
    return ERR_RTE;
 8014b88:	f06f 0003 	mvn.w	r0, #3
 8014b8c:	e676      	b.n	801487c <tcp_output+0x84>
 8014b8e:	bf00      	nop
 8014b90:	0801bd94 	.word	0x0801bd94
 8014b94:	0801c3dc 	.word	0x0801c3dc
 8014b98:	080187f8 	.word	0x080187f8

08014b9c <tcp_rexmit_rto_commit>:
{
 8014b9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	b158      	cbz	r0, 8014bba <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8014ba2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8014ba6:	2bff      	cmp	r3, #255	@ 0xff
 8014ba8:	d002      	beq.n	8014bb0 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8014baa:	3301      	adds	r3, #1
 8014bac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 8014bb0:	4620      	mov	r0, r4
}
 8014bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8014bb6:	f7ff be1f 	b.w	80147f8 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014bba:	4b04      	ldr	r3, [pc, #16]	@ (8014bcc <tcp_rexmit_rto_commit+0x30>)
 8014bbc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014bc0:	4903      	ldr	r1, [pc, #12]	@ (8014bd0 <tcp_rexmit_rto_commit+0x34>)
 8014bc2:	4804      	ldr	r0, [pc, #16]	@ (8014bd4 <tcp_rexmit_rto_commit+0x38>)
 8014bc4:	f001 fc7a 	bl	80164bc <iprintf>
 8014bc8:	e7eb      	b.n	8014ba2 <tcp_rexmit_rto_commit+0x6>
 8014bca:	bf00      	nop
 8014bcc:	0801bd94 	.word	0x0801bd94
 8014bd0:	0801c448 	.word	0x0801c448
 8014bd4:	080187f8 	.word	0x080187f8

08014bd8 <tcp_rexmit_rto>:
{
 8014bd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014bda:	4604      	mov	r4, r0
 8014bdc:	b118      	cbz	r0, 8014be6 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014bde:	f7ff fccf 	bl	8014580 <tcp_rexmit_rto_prepare>
 8014be2:	b198      	cbz	r0, 8014c0c <tcp_rexmit_rto+0x34>
}
 8014be4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014be6:	4b0f      	ldr	r3, [pc, #60]	@ (8014c24 <tcp_rexmit_rto+0x4c>)
 8014be8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014bec:	490e      	ldr	r1, [pc, #56]	@ (8014c28 <tcp_rexmit_rto+0x50>)
 8014bee:	480f      	ldr	r0, [pc, #60]	@ (8014c2c <tcp_rexmit_rto+0x54>)
 8014bf0:	f001 fc64 	bl	80164bc <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	f7ff fcc3 	bl	8014580 <tcp_rexmit_rto_prepare>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d1f2      	bne.n	8014be4 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014bfe:	4b09      	ldr	r3, [pc, #36]	@ (8014c24 <tcp_rexmit_rto+0x4c>)
 8014c00:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014c04:	490a      	ldr	r1, [pc, #40]	@ (8014c30 <tcp_rexmit_rto+0x58>)
 8014c06:	4809      	ldr	r0, [pc, #36]	@ (8014c2c <tcp_rexmit_rto+0x54>)
 8014c08:	f001 fc58 	bl	80164bc <iprintf>
  if (pcb->nrtx < 0xFF) {
 8014c0c:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8014c10:	2bff      	cmp	r3, #255	@ 0xff
 8014c12:	d002      	beq.n	8014c1a <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8014c14:	3301      	adds	r3, #1
 8014c16:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 8014c1a:	4620      	mov	r0, r4
}
 8014c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8014c20:	f7ff bdea 	b.w	80147f8 <tcp_output>
 8014c24:	0801bd94 	.word	0x0801bd94
 8014c28:	0801c46c 	.word	0x0801c46c
 8014c2c:	080187f8 	.word	0x080187f8
 8014c30:	0801c448 	.word	0x0801c448

08014c34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014c34:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014c36:	4604      	mov	r4, r0
 8014c38:	b188      	cbz	r0, 8014c5e <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014c3a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8014c3c:	3801      	subs	r0, #1
 8014c3e:	f7fa fdfd 	bl	800f83c <lwip_htonl>
 8014c42:	2100      	movs	r1, #0
 8014c44:	4602      	mov	r2, r0
 8014c46:	4620      	mov	r0, r4
 8014c48:	f7fe ff7e 	bl	8013b48 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8014c4c:	4601      	mov	r1, r0
 8014c4e:	b170      	cbz	r0, 8014c6e <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c50:	1d23      	adds	r3, r4, #4
 8014c52:	4622      	mov	r2, r4
 8014c54:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8014c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c5a:	f7fe bf9d 	b.w	8013b98 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014c5e:	4b05      	ldr	r3, [pc, #20]	@ (8014c74 <tcp_keepalive+0x40>)
 8014c60:	f640 0224 	movw	r2, #2084	@ 0x824
 8014c64:	4904      	ldr	r1, [pc, #16]	@ (8014c78 <tcp_keepalive+0x44>)
 8014c66:	4805      	ldr	r0, [pc, #20]	@ (8014c7c <tcp_keepalive+0x48>)
 8014c68:	f001 fc28 	bl	80164bc <iprintf>
 8014c6c:	e7e5      	b.n	8014c3a <tcp_keepalive+0x6>
}
 8014c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c72:	bd10      	pop	{r4, pc}
 8014c74:	0801bd94 	.word	0x0801bd94
 8014c78:	0801c488 	.word	0x0801c488
 8014c7c:	080187f8 	.word	0x080187f8

08014c80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014c84:	4604      	mov	r4, r0
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d055      	beq.n	8014d36 <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014c8a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 8014c8c:	2d00      	cmp	r5, #0
 8014c8e:	d04f      	beq.n	8014d30 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014c90:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8014c94:	2bff      	cmp	r3, #255	@ 0xff
 8014c96:	d002      	beq.n	8014c9e <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8014c98:	3301      	adds	r3, #1
 8014c9a:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014c9e:	68eb      	ldr	r3, [r5, #12]
 8014ca0:	8998      	ldrh	r0, [r3, #12]
 8014ca2:	f7fa fdc7 	bl	800f834 <lwip_htons>
 8014ca6:	07c3      	lsls	r3, r0, #31
 8014ca8:	d427      	bmi.n	8014cfa <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014caa:	68eb      	ldr	r3, [r5, #12]
 8014cac:	2101      	movs	r1, #1
 8014cae:	4620      	mov	r0, r4
 8014cb0:	685a      	ldr	r2, [r3, #4]
 8014cb2:	f7fe ff49 	bl	8013b48 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d044      	beq.n	8014d46 <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014cbc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014cc0:	6868      	ldr	r0, [r5, #4]
 8014cc2:	f108 0114 	add.w	r1, r8, #20
 8014cc6:	892f      	ldrh	r7, [r5, #8]
 8014cc8:	2201      	movs	r2, #1
 8014cca:	8903      	ldrh	r3, [r0, #8]
 8014ccc:	1bdb      	subs	r3, r3, r7
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	f7fb ff20 	bl	8010b14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014cd4:	68eb      	ldr	r3, [r5, #12]
 8014cd6:	6858      	ldr	r0, [r3, #4]
 8014cd8:	f7fa fdb0 	bl	800f83c <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014cdc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014cde:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ce0:	4622      	mov	r2, r4
 8014ce2:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014ce4:	1a1b      	subs	r3, r3, r0
 8014ce6:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ce8:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8014cec:	bfb8      	it	lt
 8014cee:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cf0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8014cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cf6:	f7fe bf4f 	b.w	8013b98 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014cfa:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	68eb      	ldr	r3, [r5, #12]
 8014d00:	1e39      	subs	r1, r7, #0
 8014d02:	685a      	ldr	r2, [r3, #4]
 8014d04:	bf18      	it	ne
 8014d06:	2101      	movne	r1, #1
 8014d08:	f7fe ff1e 	bl	8013b48 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8014d0c:	4606      	mov	r6, r0
 8014d0e:	b1d0      	cbz	r0, 8014d46 <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 8014d10:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 8014d14:	2f00      	cmp	r7, #0
 8014d16:	d1d3      	bne.n	8014cc0 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014d18:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8014d1c:	2011      	movs	r0, #17
 8014d1e:	f7fa fd89 	bl	800f834 <lwip_htons>
 8014d22:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 8014d26:	b2bf      	uxth	r7, r7
 8014d28:	4338      	orrs	r0, r7
 8014d2a:	f8a8 000c 	strh.w	r0, [r8, #12]
 8014d2e:	e7d1      	b.n	8014cd4 <tcp_zero_window_probe+0x54>
    return ERR_OK;
 8014d30:	4628      	mov	r0, r5
}
 8014d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d36:	4b05      	ldr	r3, [pc, #20]	@ (8014d4c <tcp_zero_window_probe+0xcc>)
 8014d38:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014d3c:	4904      	ldr	r1, [pc, #16]	@ (8014d50 <tcp_zero_window_probe+0xd0>)
 8014d3e:	4805      	ldr	r0, [pc, #20]	@ (8014d54 <tcp_zero_window_probe+0xd4>)
 8014d40:	f001 fbbc 	bl	80164bc <iprintf>
 8014d44:	e7a1      	b.n	8014c8a <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 8014d46:	f04f 30ff 	mov.w	r0, #4294967295
 8014d4a:	e7f2      	b.n	8014d32 <tcp_zero_window_probe+0xb2>
 8014d4c:	0801bd94 	.word	0x0801bd94
 8014d50:	0801c4a4 	.word	0x0801c4a4
 8014d54:	080187f8 	.word	0x080187f8

08014d58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d58:	b570      	push	{r4, r5, r6, lr}
 8014d5a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d5c:	200b      	movs	r0, #11
{
 8014d5e:	460e      	mov	r6, r1
 8014d60:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d62:	f7fb f8cb 	bl	800fefc <memp_malloc>
  if (timeout == NULL) {
 8014d66:	b190      	cbz	r0, 8014d8e <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8014d68:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d6a:	490d      	ldr	r1, [pc, #52]	@ (8014da0 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 8014d6c:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8014d6e:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8014d70:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8014d74:	680b      	ldr	r3, [r1, #0]
 8014d76:	b91b      	cbnz	r3, 8014d80 <sys_timeout_abs+0x28>
 8014d78:	e007      	b.n	8014d8a <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	b11b      	cbz	r3, 8014d88 <sys_timeout_abs+0x30>
 8014d80:	685a      	ldr	r2, [r3, #4]
 8014d82:	1aa2      	subs	r2, r4, r2
 8014d84:	2a00      	cmp	r2, #0
 8014d86:	daf8      	bge.n	8014d7a <sys_timeout_abs+0x22>
        timeout->next = t->next;
 8014d88:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8014d8a:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8014d8c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d8e:	4b05      	ldr	r3, [pc, #20]	@ (8014da4 <sys_timeout_abs+0x4c>)
 8014d90:	22be      	movs	r2, #190	@ 0xbe
 8014d92:	4905      	ldr	r1, [pc, #20]	@ (8014da8 <sys_timeout_abs+0x50>)
 8014d94:	4805      	ldr	r0, [pc, #20]	@ (8014dac <sys_timeout_abs+0x54>)
}
 8014d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d9a:	f001 bb8f 	b.w	80164bc <iprintf>
 8014d9e:	bf00      	nop
 8014da0:	200101c4 	.word	0x200101c4
 8014da4:	0801c4c8 	.word	0x0801c4c8
 8014da8:	0801c540 	.word	0x0801c540
 8014dac:	080187f8 	.word	0x080187f8

08014db0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014db0:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014db2:	6843      	ldr	r3, [r0, #4]
{
 8014db4:	4604      	mov	r4, r0
  cyclic->handler();
 8014db6:	4798      	blx	r3

  now = sys_now();
 8014db8:	f7ec f8b4 	bl	8000f24 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8014de8 <lwip_cyclic_timer+0x38>)
 8014dbe:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 8014dc0:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dc2:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014dc4:	4622      	mov	r2, r4
 8014dc6:	4909      	ldr	r1, [pc, #36]	@ (8014dec <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dc8:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014dca:	eba0 030c 	sub.w	r3, r0, ip
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	da05      	bge.n	8014dde <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014dd2:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014dda:	f7ff bfbd 	b.w	8014d58 <sys_timeout_abs>
}
 8014dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014de2:	f7ff bfb9 	b.w	8014d58 <sys_timeout_abs>
 8014de6:	bf00      	nop
 8014de8:	200101c0 	.word	0x200101c0
 8014dec:	08014db1 	.word	0x08014db1

08014df0 <tcpip_tcp_timer>:
{
 8014df0:	b508      	push	{r3, lr}
  tcp_tmr();
 8014df2:	f7fd f91b 	bl	801202c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014df6:	4b09      	ldr	r3, [pc, #36]	@ (8014e1c <tcpip_tcp_timer+0x2c>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	b143      	cbz	r3, 8014e0e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014dfc:	f7ec f892 	bl	8000f24 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e00:	2200      	movs	r2, #0
 8014e02:	4907      	ldr	r1, [pc, #28]	@ (8014e20 <tcpip_tcp_timer+0x30>)
 8014e04:	30fa      	adds	r0, #250	@ 0xfa
}
 8014e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e0a:	f7ff bfa5 	b.w	8014d58 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e0e:	4b05      	ldr	r3, [pc, #20]	@ (8014e24 <tcpip_tcp_timer+0x34>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d1f2      	bne.n	8014dfc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8014e16:	4a04      	ldr	r2, [pc, #16]	@ (8014e28 <tcpip_tcp_timer+0x38>)
 8014e18:	6013      	str	r3, [r2, #0]
}
 8014e1a:	bd08      	pop	{r3, pc}
 8014e1c:	20010174 	.word	0x20010174
 8014e20:	08014df1 	.word	0x08014df1
 8014e24:	20010170 	.word	0x20010170
 8014e28:	200101bc 	.word	0x200101bc

08014e2c <tcp_timer_needed>:
{
 8014e2c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8014e5c <tcp_timer_needed+0x30>)
 8014e30:	681a      	ldr	r2, [r3, #0]
 8014e32:	b98a      	cbnz	r2, 8014e58 <tcp_timer_needed+0x2c>
 8014e34:	4a0a      	ldr	r2, [pc, #40]	@ (8014e60 <tcp_timer_needed+0x34>)
 8014e36:	6812      	ldr	r2, [r2, #0]
 8014e38:	b152      	cbz	r2, 8014e50 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e3e:	f7ec f871 	bl	8000f24 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e42:	2200      	movs	r2, #0
 8014e44:	4907      	ldr	r1, [pc, #28]	@ (8014e64 <tcp_timer_needed+0x38>)
 8014e46:	30fa      	adds	r0, #250	@ 0xfa
}
 8014e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e4c:	f7ff bf84 	b.w	8014d58 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e50:	4a05      	ldr	r2, [pc, #20]	@ (8014e68 <tcp_timer_needed+0x3c>)
 8014e52:	6812      	ldr	r2, [r2, #0]
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	d1f0      	bne.n	8014e3a <tcp_timer_needed+0xe>
}
 8014e58:	bd08      	pop	{r3, pc}
 8014e5a:	bf00      	nop
 8014e5c:	200101bc 	.word	0x200101bc
 8014e60:	20010174 	.word	0x20010174
 8014e64:	08014df1 	.word	0x08014df1
 8014e68:	20010170 	.word	0x20010170

08014e6c <sys_timeouts_init>:
{
 8014e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e70:	4c10      	ldr	r4, [pc, #64]	@ (8014eb4 <sys_timeouts_init+0x48>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e72:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8014ec0 <sys_timeouts_init+0x54>
 8014e76:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8014ec4 <sys_timeouts_init+0x58>
 8014e7a:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8014e7e:	4f0e      	ldr	r7, [pc, #56]	@ (8014eb8 <sys_timeouts_init+0x4c>)
 8014e80:	e008      	b.n	8014e94 <sys_timeouts_init+0x28>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e82:	f7ec f84f 	bl	8000f24 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e86:	4622      	mov	r2, r4
 8014e88:	490c      	ldr	r1, [pc, #48]	@ (8014ebc <sys_timeouts_init+0x50>)
 8014e8a:	4428      	add	r0, r5
 8014e8c:	f7ff ff64 	bl	8014d58 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e90:	42b4      	cmp	r4, r6
 8014e92:	d00c      	beq.n	8014eae <sys_timeouts_init+0x42>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e94:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e98:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
 8014e9c:	d3f1      	bcc.n	8014e82 <sys_timeouts_init+0x16>
 8014e9e:	464b      	mov	r3, r9
 8014ea0:	4641      	mov	r1, r8
 8014ea2:	f240 1229 	movw	r2, #297	@ 0x129
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	f001 fb08 	bl	80164bc <iprintf>
 8014eac:	e7e9      	b.n	8014e82 <sys_timeouts_init+0x16>
}
 8014eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eb2:	bf00      	nop
 8014eb4:	0801c5b8 	.word	0x0801c5b8
 8014eb8:	080187f8 	.word	0x080187f8
 8014ebc:	08014db1 	.word	0x08014db1
 8014ec0:	0801c4c8 	.word	0x0801c4c8
 8014ec4:	0801c580 	.word	0x0801c580

08014ec8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014ecc:	f7ec f82a 	bl	8000f24 <sys_now>
 8014ed0:	4c0f      	ldr	r4, [pc, #60]	@ (8014f10 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8014ed2:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8014f14 <sys_check_timeouts+0x4c>
  now = sys_now();
 8014ed6:	4607      	mov	r7, r0
 8014ed8:	e00f      	b.n	8014efa <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014eda:	685a      	ldr	r2, [r3, #4]
 8014edc:	eba7 0c02 	sub.w	ip, r7, r2
 8014ee0:	f1bc 0f00 	cmp.w	ip, #0
 8014ee4:	db0e      	blt.n	8014f04 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 8014ee6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8014ee8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 8014eea:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 8014eee:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8014ef2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ef4:	f7fb f848 	bl	800ff88 <memp_free>
    if (handler != NULL) {
 8014ef8:	b935      	cbnz	r5, 8014f08 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 8014efa:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014efc:	200b      	movs	r0, #11
 8014efe:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d1ea      	bne.n	8014eda <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8014f08:	4648      	mov	r0, r9
 8014f0a:	47a8      	blx	r5
 8014f0c:	e7f5      	b.n	8014efa <sys_check_timeouts+0x32>
 8014f0e:	bf00      	nop
 8014f10:	200101c4 	.word	0x200101c4
 8014f14:	200101c0 	.word	0x200101c0

08014f18 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f18:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f1a:	4c07      	ldr	r4, [pc, #28]	@ (8014f38 <sys_timeouts_sleeptime+0x20>)
 8014f1c:	6823      	ldr	r3, [r4, #0]
 8014f1e:	b13b      	cbz	r3, 8014f30 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8014f20:	f7ec f800 	bl	8000f24 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f24:	6823      	ldr	r3, [r4, #0]
 8014f26:	685b      	ldr	r3, [r3, #4]
    return 0;
 8014f28:	1a18      	subs	r0, r3, r0
 8014f2a:	bf48      	it	mi
 8014f2c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8014f2e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f30:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	bf00      	nop
 8014f38:	200101c4 	.word	0x200101c4

08014f3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014f3c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014f3e:	f000 fd85 	bl	8015a4c <rand>
 8014f42:	4b02      	ldr	r3, [pc, #8]	@ (8014f4c <udp_init+0x10>)
 8014f44:	4a02      	ldr	r2, [pc, #8]	@ (8014f50 <udp_init+0x14>)
 8014f46:	4303      	orrs	r3, r0
 8014f48:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8014f4a:	bd08      	pop	{r3, pc}
 8014f4c:	ffffc000 	.word	0xffffc000
 8014f50:	2000002e 	.word	0x2000002e

08014f54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014f58:	4680      	mov	r8, r0
{
 8014f5a:	b085      	sub	sp, #20
 8014f5c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	f000 80c4 	beq.w	80150ec <udp_input+0x198>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014f64:	2f00      	cmp	r7, #0
 8014f66:	f000 80ca 	beq.w	80150fe <udp_input+0x1aa>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014f6a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014f6e:	2b07      	cmp	r3, #7
 8014f70:	f240 808c 	bls.w	801508c <udp_input+0x138>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014f74:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8015150 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 8014f78:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014f7c:	f8d9 1000 	ldr.w	r1, [r9]
 8014f80:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014f84:	f7f9 ff48 	bl	800ee18 <ip4_addr_isbroadcast_u32>
 8014f88:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014f8a:	8820      	ldrh	r0, [r4, #0]
 8014f8c:	f7fa fc52 	bl	800f834 <lwip_htons>
 8014f90:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8014f92:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8014f94:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8014f96:	f7fa fc4d 	bl	800f834 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f9a:	4b65      	ldr	r3, [pc, #404]	@ (8015130 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 8014f9c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f9e:	681c      	ldr	r4, [r3, #0]
 8014fa0:	2c00      	cmp	r4, #0
 8014fa2:	d07c      	beq.n	801509e <udp_input+0x14a>
  uncon_pcb = NULL;
 8014fa4:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8014fa8:	465e      	mov	r6, fp
 8014faa:	e004      	b.n	8014fb6 <udp_input+0x62>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fac:	68e3      	ldr	r3, [r4, #12]
 8014fae:	4626      	mov	r6, r4
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d071      	beq.n	8015098 <udp_input+0x144>
 8014fb4:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014fb6:	8a63      	ldrh	r3, [r4, #18]
 8014fb8:	42ab      	cmp	r3, r5
 8014fba:	d1f7      	bne.n	8014fac <udp_input+0x58>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014fbc:	2f00      	cmp	r7, #0
 8014fbe:	f000 808e 	beq.w	80150de <udp_input+0x18a>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014fc2:	7a22      	ldrb	r2, [r4, #8]
 8014fc4:	b13a      	cbz	r2, 8014fd6 <udp_input+0x82>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014fc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014fca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014fce:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d1ea      	bne.n	8014fac <udp_input+0x58>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014fd6:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8014fd8:	f1ba 0f00 	cmp.w	sl, #0
 8014fdc:	d038      	beq.n	8015050 <udp_input+0xfc>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014fde:	b13b      	cbz	r3, 8014ff0 <udp_input+0x9c>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014fe0:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014fe4:	1c50      	adds	r0, r2, #1
 8014fe6:	d003      	beq.n	8014ff0 <udp_input+0x9c>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014fe8:	405a      	eors	r2, r3
 8014fea:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014fec:	420a      	tst	r2, r1
 8014fee:	d1dd      	bne.n	8014fac <udp_input+0x58>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014ff0:	7c22      	ldrb	r2, [r4, #16]
 8014ff2:	0752      	lsls	r2, r2, #29
 8014ff4:	d408      	bmi.n	8015008 <udp_input+0xb4>
        if (uncon_pcb == NULL) {
 8014ff6:	f1bb 0f00 	cmp.w	fp, #0
 8014ffa:	f000 8091 	beq.w	8015120 <udp_input+0x1cc>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014ffe:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8015002:	3201      	adds	r2, #1
 8015004:	f000 8082 	beq.w	801510c <udp_input+0x1b8>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015008:	8aa3      	ldrh	r3, [r4, #20]
 801500a:	9a03      	ldr	r2, [sp, #12]
 801500c:	4293      	cmp	r3, r2
 801500e:	d1cd      	bne.n	8014fac <udp_input+0x58>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015010:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8015012:	b11b      	cbz	r3, 801501c <udp_input+0xc8>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015014:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015018:	4293      	cmp	r3, r2
 801501a:	d1c7      	bne.n	8014fac <udp_input+0x58>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801501c:	b34e      	cbz	r6, 8015072 <udp_input+0x11e>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801501e:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 8015020:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 8015022:	4a43      	ldr	r2, [pc, #268]	@ (8015130 <udp_input+0x1dc>)
          prev->next = pcb->next;
 8015024:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 8015026:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 8015028:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801502a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801502c:	2108      	movs	r1, #8
 801502e:	4640      	mov	r0, r8
 8015030:	f7fb fa2e 	bl	8010490 <pbuf_remove_header>
 8015034:	bb18      	cbnz	r0, 801507e <udp_input+0x12a>
 8015036:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015038:	6a25      	ldr	r5, [r4, #32]
 801503a:	b33d      	cbz	r5, 801508c <udp_input+0x138>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801503c:	9b03      	ldr	r3, [sp, #12]
 801503e:	4642      	mov	r2, r8
 8015040:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015042:	4621      	mov	r1, r4
 8015044:	9300      	str	r3, [sp, #0]
 8015046:	4b3b      	ldr	r3, [pc, #236]	@ (8015134 <udp_input+0x1e0>)
 8015048:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801504a:	b005      	add	sp, #20
 801504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015050:	b11b      	cbz	r3, 801505a <udp_input+0x106>
 8015052:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8015056:	4293      	cmp	r3, r2
 8015058:	d1a8      	bne.n	8014fac <udp_input+0x58>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801505a:	7c23      	ldrb	r3, [r4, #16]
 801505c:	0759      	lsls	r1, r3, #29
 801505e:	d4d3      	bmi.n	8015008 <udp_input+0xb4>
      if ((pcb->remote_port == src) &&
 8015060:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8015062:	f1bb 0f00 	cmp.w	fp, #0
 8015066:	bf08      	it	eq
 8015068:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 801506a:	9a03      	ldr	r2, [sp, #12]
 801506c:	4293      	cmp	r3, r2
 801506e:	d19d      	bne.n	8014fac <udp_input+0x58>
 8015070:	e7ce      	b.n	8015010 <udp_input+0xbc>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015072:	2108      	movs	r1, #8
 8015074:	4640      	mov	r0, r8
 8015076:	f7fb fa0b 	bl	8010490 <pbuf_remove_header>
 801507a:	2800      	cmp	r0, #0
 801507c:	d0dc      	beq.n	8015038 <udp_input+0xe4>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801507e:	4b2e      	ldr	r3, [pc, #184]	@ (8015138 <udp_input+0x1e4>)
 8015080:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015084:	492d      	ldr	r1, [pc, #180]	@ (801513c <udp_input+0x1e8>)
 8015086:	482e      	ldr	r0, [pc, #184]	@ (8015140 <udp_input+0x1ec>)
 8015088:	f001 fa18 	bl	80164bc <iprintf>
      pbuf_free(p);
 801508c:	4640      	mov	r0, r8
}
 801508e:	b005      	add	sp, #20
 8015090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8015094:	f7fb ba5e 	b.w	8010554 <pbuf_free>
  if (pcb != NULL) {
 8015098:	f1bb 0f00 	cmp.w	fp, #0
 801509c:	d1c6      	bne.n	801502c <udp_input+0xd8>
  if (for_us) {
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d1f1      	bne.n	801508c <udp_input+0x138>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80150a8:	2108      	movs	r1, #8
 80150aa:	4640      	mov	r0, r8
 80150ac:	f7fb f9f0 	bl	8010490 <pbuf_remove_header>
 80150b0:	2800      	cmp	r0, #0
 80150b2:	d1e4      	bne.n	801507e <udp_input+0x12a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80150b4:	f1ba 0f00 	cmp.w	sl, #0
 80150b8:	d1e8      	bne.n	801508c <udp_input+0x138>
 80150ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80150be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80150c2:	2be0      	cmp	r3, #224	@ 0xe0
 80150c4:	d0e2      	beq.n	801508c <udp_input+0x138>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80150c6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 80150ca:	4640      	mov	r0, r8
 80150cc:	3108      	adds	r1, #8
 80150ce:	b209      	sxth	r1, r1
 80150d0:	f7fb fa0c 	bl	80104ec <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80150d4:	2103      	movs	r1, #3
 80150d6:	4640      	mov	r0, r8
 80150d8:	f7f9 f946 	bl	800e368 <icmp_dest_unreach>
 80150dc:	e7d6      	b.n	801508c <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80150de:	4b16      	ldr	r3, [pc, #88]	@ (8015138 <udp_input+0x1e4>)
 80150e0:	2288      	movs	r2, #136	@ 0x88
 80150e2:	4918      	ldr	r1, [pc, #96]	@ (8015144 <udp_input+0x1f0>)
 80150e4:	4816      	ldr	r0, [pc, #88]	@ (8015140 <udp_input+0x1ec>)
 80150e6:	f001 f9e9 	bl	80164bc <iprintf>
 80150ea:	e76a      	b.n	8014fc2 <udp_input+0x6e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80150ec:	4b12      	ldr	r3, [pc, #72]	@ (8015138 <udp_input+0x1e4>)
 80150ee:	22cf      	movs	r2, #207	@ 0xcf
 80150f0:	4915      	ldr	r1, [pc, #84]	@ (8015148 <udp_input+0x1f4>)
 80150f2:	4813      	ldr	r0, [pc, #76]	@ (8015140 <udp_input+0x1ec>)
 80150f4:	f001 f9e2 	bl	80164bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80150f8:	2f00      	cmp	r7, #0
 80150fa:	f47f af36 	bne.w	8014f6a <udp_input+0x16>
 80150fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015138 <udp_input+0x1e4>)
 8015100:	22d0      	movs	r2, #208	@ 0xd0
 8015102:	4912      	ldr	r1, [pc, #72]	@ (801514c <udp_input+0x1f8>)
 8015104:	480e      	ldr	r0, [pc, #56]	@ (8015140 <udp_input+0x1ec>)
 8015106:	f001 f9d9 	bl	80164bc <iprintf>
 801510a:	e72e      	b.n	8014f6a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	f8db 1000 	ldr.w	r1, [fp]
 8015112:	4291      	cmp	r1, r2
 8015114:	f43f af78 	beq.w	8015008 <udp_input+0xb4>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015118:	429a      	cmp	r2, r3
 801511a:	bf08      	it	eq
 801511c:	46a3      	moveq	fp, r4
 801511e:	e773      	b.n	8015008 <udp_input+0xb4>
      if ((pcb->remote_port == src) &&
 8015120:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8015122:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 8015124:	9a03      	ldr	r2, [sp, #12]
 8015126:	4293      	cmp	r3, r2
 8015128:	f47f af40 	bne.w	8014fac <udp_input+0x58>
 801512c:	e770      	b.n	8015010 <udp_input+0xbc>
 801512e:	bf00      	nop
 8015130:	200101c8 	.word	0x200101c8
 8015134:	20009024 	.word	0x20009024
 8015138:	0801c5e8 	.word	0x0801c5e8
 801513c:	0801c6b8 	.word	0x0801c6b8
 8015140:	080187f8 	.word	0x080187f8
 8015144:	0801c690 	.word	0x0801c690
 8015148:	0801c65c 	.word	0x0801c65c
 801514c:	0801c674 	.word	0x0801c674
 8015150:	20009014 	.word	0x20009014

08015154 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8015154:	2900      	cmp	r1, #0
{
 8015156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8015158:	4b35      	ldr	r3, [pc, #212]	@ (8015230 <udp_bind+0xdc>)
 801515a:	bf08      	it	eq
 801515c:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801515e:	2800      	cmp	r0, #0
 8015160:	d058      	beq.n	8015214 <udp_bind+0xc0>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015162:	4f34      	ldr	r7, [pc, #208]	@ (8015234 <udp_bind+0xe0>)
 8015164:	683e      	ldr	r6, [r7, #0]
 8015166:	b1ee      	cbz	r6, 80151a4 <udp_bind+0x50>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015168:	42b0      	cmp	r0, r6
 801516a:	d039      	beq.n	80151e0 <udp_bind+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801516c:	4634      	mov	r4, r6
 801516e:	e001      	b.n	8015174 <udp_bind+0x20>
    if (pcb == ipcb) {
 8015170:	42a0      	cmp	r0, r4
 8015172:	d035      	beq.n	80151e0 <udp_bind+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015174:	68e4      	ldr	r4, [r4, #12]
 8015176:	2c00      	cmp	r4, #0
 8015178:	d1fa      	bne.n	8015170 <udp_bind+0x1c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801517a:	b1aa      	cbz	r2, 80151a8 <udp_bind+0x54>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801517c:	680d      	ldr	r5, [r1, #0]
 801517e:	4633      	mov	r3, r6
 8015180:	e001      	b.n	8015186 <udp_bind+0x32>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	b303      	cbz	r3, 80151c8 <udp_bind+0x74>
      if (pcb != ipcb) {
 8015186:	4298      	cmp	r0, r3
 8015188:	d0fb      	beq.n	8015182 <udp_bind+0x2e>
          if ((ipcb->local_port == port) &&
 801518a:	8a59      	ldrh	r1, [r3, #18]
 801518c:	4291      	cmp	r1, r2
 801518e:	d1f8      	bne.n	8015182 <udp_bind+0x2e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015190:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8015192:	2900      	cmp	r1, #0
 8015194:	bf18      	it	ne
 8015196:	42a9      	cmpne	r1, r5
 8015198:	d001      	beq.n	801519e <udp_bind+0x4a>
 801519a:	2d00      	cmp	r5, #0
 801519c:	d1f1      	bne.n	8015182 <udp_bind+0x2e>
      return ERR_USE;
 801519e:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 80151a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 80151a4:	b9aa      	cbnz	r2, 80151d2 <udp_bind+0x7e>
  rebind = 0;
 80151a6:	4634      	mov	r4, r6
 80151a8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015244 <udp_bind+0xf0>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80151ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80151b0:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 80151b4:	f8be 2000 	ldrh.w	r2, [lr]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d026      	beq.n	801520a <udp_bind+0xb6>
 80151bc:	3201      	adds	r2, #1
 80151be:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151c0:	b9ce      	cbnz	r6, 80151f6 <udp_bind+0xa2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80151c2:	680d      	ldr	r5, [r1, #0]
 80151c4:	f8ae 2000 	strh.w	r2, [lr]
 80151c8:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 80151ca:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 80151cc:	b124      	cbz	r4, 80151d8 <udp_bind+0x84>
  return ERR_OK;
 80151ce:	2000      	movs	r0, #0
}
 80151d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80151d2:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 80151d4:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80151d6:	6003      	str	r3, [r0, #0]
    pcb->next = udp_pcbs;
 80151d8:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 80151da:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 80151dc:	2000      	movs	r0, #0
 80151de:	e7f7      	b.n	80151d0 <udp_bind+0x7c>
      rebind = 1;
 80151e0:	2401      	movs	r4, #1
 80151e2:	e7ca      	b.n	801517a <udp_bind+0x26>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80151e4:	3d01      	subs	r5, #1
 80151e6:	b2ad      	uxth	r5, r5
 80151e8:	b1f5      	cbz	r5, 8015228 <udp_bind+0xd4>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80151ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d1e4      	bne.n	80151bc <udp_bind+0x68>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80151f2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151f6:	4633      	mov	r3, r6
 80151f8:	e002      	b.n	8015200 <udp_bind+0xac>
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d0e0      	beq.n	80151c2 <udp_bind+0x6e>
    if (pcb->local_port == udp_port) {
 8015200:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8015204:	4594      	cmp	ip, r2
 8015206:	d1f8      	bne.n	80151fa <udp_bind+0xa6>
 8015208:	e7ec      	b.n	80151e4 <udp_bind+0x90>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801520a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801520e:	2e00      	cmp	r6, #0
 8015210:	d1f1      	bne.n	80151f6 <udp_bind+0xa2>
 8015212:	e7d6      	b.n	80151c2 <udp_bind+0x6e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015214:	4b08      	ldr	r3, [pc, #32]	@ (8015238 <udp_bind+0xe4>)
 8015216:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801521a:	4908      	ldr	r1, [pc, #32]	@ (801523c <udp_bind+0xe8>)
 801521c:	4808      	ldr	r0, [pc, #32]	@ (8015240 <udp_bind+0xec>)
 801521e:	f001 f94d 	bl	80164bc <iprintf>
 8015222:	f06f 000f 	mvn.w	r0, #15
}
 8015226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015228:	f8ae 2000 	strh.w	r2, [lr]
    if (port == 0) {
 801522c:	e7b7      	b.n	801519e <udp_bind+0x4a>
 801522e:	bf00      	nop
 8015230:	0801a7a0 	.word	0x0801a7a0
 8015234:	200101c8 	.word	0x200101c8
 8015238:	0801c5e8 	.word	0x0801c5e8
 801523c:	0801c6d4 	.word	0x0801c6d4
 8015240:	080187f8 	.word	0x080187f8
 8015244:	2000002e 	.word	0x2000002e

08015248 <udp_sendto_if_src>:
{
 8015248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801524c:	b085      	sub	sp, #20
 801524e:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015252:	2800      	cmp	r0, #0
 8015254:	f000 80a8 	beq.w	80153a8 <udp_sendto_if_src+0x160>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015258:	460d      	mov	r5, r1
 801525a:	2900      	cmp	r1, #0
 801525c:	f000 809c 	beq.w	8015398 <udp_sendto_if_src+0x150>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015260:	4617      	mov	r7, r2
 8015262:	2a00      	cmp	r2, #0
 8015264:	f000 8090 	beq.w	8015388 <udp_sendto_if_src+0x140>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015268:	f1ba 0f00 	cmp.w	sl, #0
 801526c:	f000 8084 	beq.w	8015378 <udp_sendto_if_src+0x130>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015270:	f1bb 0f00 	cmp.w	fp, #0
 8015274:	d076      	beq.n	8015364 <udp_sendto_if_src+0x11c>
  if (pcb->local_port == 0) {
 8015276:	8a42      	ldrh	r2, [r0, #18]
 8015278:	4699      	mov	r9, r3
 801527a:	4604      	mov	r4, r0
 801527c:	2a00      	cmp	r2, #0
 801527e:	d048      	beq.n	8015312 <udp_sendto_if_src+0xca>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015280:	892a      	ldrh	r2, [r5, #8]
 8015282:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8015286:	429a      	cmp	r2, r3
 8015288:	d869      	bhi.n	801535e <udp_sendto_if_src+0x116>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801528a:	2108      	movs	r1, #8
 801528c:	4628      	mov	r0, r5
 801528e:	f7fb f8cf 	bl	8010430 <pbuf_add_header>
 8015292:	2800      	cmp	r0, #0
 8015294:	d147      	bne.n	8015326 <udp_sendto_if_src+0xde>
 8015296:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015298:	8973      	ldrh	r3, [r6, #10]
 801529a:	2b07      	cmp	r3, #7
 801529c:	d952      	bls.n	8015344 <udp_sendto_if_src+0xfc>
  udphdr = (struct udp_hdr *)q->payload;
 801529e:	f8d6 8004 	ldr.w	r8, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80152a2:	8a60      	ldrh	r0, [r4, #18]
 80152a4:	f7fa fac6 	bl	800f834 <lwip_htons>
 80152a8:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 80152ac:	4648      	mov	r0, r9
 80152ae:	f7fa fac1 	bl	800f834 <lwip_htons>
  udphdr->chksum = 0x0000;
 80152b2:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80152b4:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 80152b8:	f888 3006 	strb.w	r3, [r8, #6]
 80152bc:	f888 3007 	strb.w	r3, [r8, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 80152c0:	7c23      	ldrb	r3, [r4, #16]
 80152c2:	071b      	lsls	r3, r3, #28
 80152c4:	d504      	bpl.n	80152d0 <udp_sendto_if_src+0x88>
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80152cc:	2be0      	cmp	r3, #224	@ 0xe0
 80152ce:	d041      	beq.n	8015354 <udp_sendto_if_src+0x10c>
    udphdr->len = lwip_htons(q->tot_len);
 80152d0:	8930      	ldrh	r0, [r6, #8]
 80152d2:	f7fa faaf 	bl	800f834 <lwip_htons>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80152d6:	683b      	ldr	r3, [r7, #0]
    udphdr->len = lwip_htons(q->tot_len);
 80152d8:	f8a8 0004 	strh.w	r0, [r8, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80152dc:	2011      	movs	r0, #17
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80152de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80152e2:	4651      	mov	r1, sl
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80152e4:	2be0      	cmp	r3, #224	@ 0xe0
 80152e6:	bf0c      	ite	eq
 80152e8:	7f63      	ldrbeq	r3, [r4, #29]
 80152ea:	7ae3      	ldrbne	r3, [r4, #11]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80152ec:	f8cd b008 	str.w	fp, [sp, #8]
 80152f0:	7aa2      	ldrb	r2, [r4, #10]
 80152f2:	9001      	str	r0, [sp, #4]
 80152f4:	4630      	mov	r0, r6
 80152f6:	9200      	str	r2, [sp, #0]
 80152f8:	463a      	mov	r2, r7
 80152fa:	f7f9 fd65 	bl	800edc8 <ip4_output_if_src>
  if (q != p) {
 80152fe:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015300:	4680      	mov	r8, r0
  if (q != p) {
 8015302:	d002      	beq.n	801530a <udp_sendto_if_src+0xc2>
    pbuf_free(q);
 8015304:	4630      	mov	r0, r6
 8015306:	f7fb f925 	bl	8010554 <pbuf_free>
}
 801530a:	4640      	mov	r0, r8
 801530c:	b005      	add	sp, #20
 801530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015312:	4601      	mov	r1, r0
 8015314:	f7ff ff1e 	bl	8015154 <udp_bind>
    if (err != ERR_OK) {
 8015318:	4680      	mov	r8, r0
 801531a:	2800      	cmp	r0, #0
 801531c:	d0b0      	beq.n	8015280 <udp_sendto_if_src+0x38>
}
 801531e:	4640      	mov	r0, r8
 8015320:	b005      	add	sp, #20
 8015322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015326:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801532a:	2108      	movs	r1, #8
 801532c:	2022      	movs	r0, #34	@ 0x22
 801532e:	f7fb f981 	bl	8010634 <pbuf_alloc>
    if (q == NULL) {
 8015332:	4606      	mov	r6, r0
 8015334:	b198      	cbz	r0, 801535e <udp_sendto_if_src+0x116>
    if (p->tot_len != 0) {
 8015336:	892b      	ldrh	r3, [r5, #8]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d0ad      	beq.n	8015298 <udp_sendto_if_src+0x50>
      pbuf_chain(q, p);
 801533c:	4629      	mov	r1, r5
 801533e:	f7fb fb03 	bl	8010948 <pbuf_chain>
 8015342:	e7a9      	b.n	8015298 <udp_sendto_if_src+0x50>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015344:	4b1c      	ldr	r3, [pc, #112]	@ (80153b8 <udp_sendto_if_src+0x170>)
 8015346:	f240 320d 	movw	r2, #781	@ 0x30d
 801534a:	491c      	ldr	r1, [pc, #112]	@ (80153bc <udp_sendto_if_src+0x174>)
 801534c:	481c      	ldr	r0, [pc, #112]	@ (80153c0 <udp_sendto_if_src+0x178>)
 801534e:	f001 f8b5 	bl	80164bc <iprintf>
 8015352:	e7a4      	b.n	801529e <udp_sendto_if_src+0x56>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8015354:	7b73      	ldrb	r3, [r6, #13]
 8015356:	f043 0304 	orr.w	r3, r3, #4
 801535a:	7373      	strb	r3, [r6, #13]
 801535c:	e7b8      	b.n	80152d0 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 801535e:	f04f 38ff 	mov.w	r8, #4294967295
 8015362:	e7d2      	b.n	801530a <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015364:	4b14      	ldr	r3, [pc, #80]	@ (80153b8 <udp_sendto_if_src+0x170>)
 8015366:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801536a:	4916      	ldr	r1, [pc, #88]	@ (80153c4 <udp_sendto_if_src+0x17c>)
 801536c:	4814      	ldr	r0, [pc, #80]	@ (80153c0 <udp_sendto_if_src+0x178>)
 801536e:	f001 f8a5 	bl	80164bc <iprintf>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015372:	f06f 080f 	mvn.w	r8, #15
 8015376:	e7c8      	b.n	801530a <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015378:	4b0f      	ldr	r3, [pc, #60]	@ (80153b8 <udp_sendto_if_src+0x170>)
 801537a:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801537e:	4912      	ldr	r1, [pc, #72]	@ (80153c8 <udp_sendto_if_src+0x180>)
 8015380:	480f      	ldr	r0, [pc, #60]	@ (80153c0 <udp_sendto_if_src+0x178>)
 8015382:	f001 f89b 	bl	80164bc <iprintf>
 8015386:	e7f4      	b.n	8015372 <udp_sendto_if_src+0x12a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015388:	4b0b      	ldr	r3, [pc, #44]	@ (80153b8 <udp_sendto_if_src+0x170>)
 801538a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801538e:	490f      	ldr	r1, [pc, #60]	@ (80153cc <udp_sendto_if_src+0x184>)
 8015390:	480b      	ldr	r0, [pc, #44]	@ (80153c0 <udp_sendto_if_src+0x178>)
 8015392:	f001 f893 	bl	80164bc <iprintf>
 8015396:	e7ec      	b.n	8015372 <udp_sendto_if_src+0x12a>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015398:	4b07      	ldr	r3, [pc, #28]	@ (80153b8 <udp_sendto_if_src+0x170>)
 801539a:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801539e:	490c      	ldr	r1, [pc, #48]	@ (80153d0 <udp_sendto_if_src+0x188>)
 80153a0:	4807      	ldr	r0, [pc, #28]	@ (80153c0 <udp_sendto_if_src+0x178>)
 80153a2:	f001 f88b 	bl	80164bc <iprintf>
 80153a6:	e7e4      	b.n	8015372 <udp_sendto_if_src+0x12a>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80153a8:	4b03      	ldr	r3, [pc, #12]	@ (80153b8 <udp_sendto_if_src+0x170>)
 80153aa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80153ae:	4909      	ldr	r1, [pc, #36]	@ (80153d4 <udp_sendto_if_src+0x18c>)
 80153b0:	4803      	ldr	r0, [pc, #12]	@ (80153c0 <udp_sendto_if_src+0x178>)
 80153b2:	f001 f883 	bl	80164bc <iprintf>
 80153b6:	e7dc      	b.n	8015372 <udp_sendto_if_src+0x12a>
 80153b8:	0801c5e8 	.word	0x0801c5e8
 80153bc:	0801c798 	.word	0x0801c798
 80153c0:	080187f8 	.word	0x080187f8
 80153c4:	0801c774 	.word	0x0801c774
 80153c8:	0801c750 	.word	0x0801c750
 80153cc:	0801c72c 	.word	0x0801c72c
 80153d0:	0801c70c 	.word	0x0801c70c
 80153d4:	0801c6ec 	.word	0x0801c6ec

080153d8 <udp_sendto_if>:
{
 80153d8:	b570      	push	{r4, r5, r6, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80153de:	b390      	cbz	r0, 8015446 <udp_sendto_if+0x6e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80153e0:	b349      	cbz	r1, 8015436 <udp_sendto_if+0x5e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80153e2:	b302      	cbz	r2, 8015426 <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80153e4:	b1ac      	cbz	r4, 8015412 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153e6:	6805      	ldr	r5, [r0, #0]
 80153e8:	b935      	cbnz	r5, 80153f8 <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 80153ea:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80153ec:	e9cd 4500 	strd	r4, r5, [sp]
 80153f0:	f7ff ff2a 	bl	8015248 <udp_sendto_if_src>
}
 80153f4:	b002      	add	sp, #8
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80153f8:	f005 0cf0 	and.w	ip, r5, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153fc:	f1bc 0fe0 	cmp.w	ip, #224	@ 0xe0
 8015400:	d0f3      	beq.n	80153ea <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015402:	6866      	ldr	r6, [r4, #4]
 8015404:	42b5      	cmp	r5, r6
 8015406:	d101      	bne.n	801540c <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015408:	4605      	mov	r5, r0
 801540a:	e7ef      	b.n	80153ec <udp_sendto_if+0x14>
        return ERR_RTE;
 801540c:	f06f 0003 	mvn.w	r0, #3
 8015410:	e7f0      	b.n	80153f4 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015412:	4b11      	ldr	r3, [pc, #68]	@ (8015458 <udp_sendto_if+0x80>)
 8015414:	f240 2283 	movw	r2, #643	@ 0x283
 8015418:	4910      	ldr	r1, [pc, #64]	@ (801545c <udp_sendto_if+0x84>)
 801541a:	4811      	ldr	r0, [pc, #68]	@ (8015460 <udp_sendto_if+0x88>)
 801541c:	f001 f84e 	bl	80164bc <iprintf>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015420:	f06f 000f 	mvn.w	r0, #15
 8015424:	e7e6      	b.n	80153f4 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015426:	4b0c      	ldr	r3, [pc, #48]	@ (8015458 <udp_sendto_if+0x80>)
 8015428:	f240 2282 	movw	r2, #642	@ 0x282
 801542c:	490d      	ldr	r1, [pc, #52]	@ (8015464 <udp_sendto_if+0x8c>)
 801542e:	480c      	ldr	r0, [pc, #48]	@ (8015460 <udp_sendto_if+0x88>)
 8015430:	f001 f844 	bl	80164bc <iprintf>
 8015434:	e7f4      	b.n	8015420 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015436:	4b08      	ldr	r3, [pc, #32]	@ (8015458 <udp_sendto_if+0x80>)
 8015438:	f240 2281 	movw	r2, #641	@ 0x281
 801543c:	490a      	ldr	r1, [pc, #40]	@ (8015468 <udp_sendto_if+0x90>)
 801543e:	4808      	ldr	r0, [pc, #32]	@ (8015460 <udp_sendto_if+0x88>)
 8015440:	f001 f83c 	bl	80164bc <iprintf>
 8015444:	e7ec      	b.n	8015420 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015446:	4b04      	ldr	r3, [pc, #16]	@ (8015458 <udp_sendto_if+0x80>)
 8015448:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801544c:	4907      	ldr	r1, [pc, #28]	@ (801546c <udp_sendto_if+0x94>)
 801544e:	4804      	ldr	r0, [pc, #16]	@ (8015460 <udp_sendto_if+0x88>)
 8015450:	f001 f834 	bl	80164bc <iprintf>
 8015454:	e7e4      	b.n	8015420 <udp_sendto_if+0x48>
 8015456:	bf00      	nop
 8015458:	0801c5e8 	.word	0x0801c5e8
 801545c:	0801c820 	.word	0x0801c820
 8015460:	080187f8 	.word	0x080187f8
 8015464:	0801c800 	.word	0x0801c800
 8015468:	0801c7e4 	.word	0x0801c7e4
 801546c:	0801c7c8 	.word	0x0801c7c8

08015470 <udp_sendto>:
{
 8015470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015474:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015476:	2800      	cmp	r0, #0
 8015478:	d049      	beq.n	801550e <udp_sendto+0x9e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801547a:	460f      	mov	r7, r1
 801547c:	2900      	cmp	r1, #0
 801547e:	d03e      	beq.n	80154fe <udp_sendto+0x8e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015480:	4615      	mov	r5, r2
 8015482:	b392      	cbz	r2, 80154ea <udp_sendto+0x7a>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015484:	4604      	mov	r4, r0
 8015486:	7a00      	ldrb	r0, [r0, #8]
 8015488:	4698      	mov	r8, r3
 801548a:	bb08      	cbnz	r0, 80154d0 <udp_sendto+0x60>
    if (ip_addr_ismulticast(dst_ip)) {
 801548c:	6813      	ldr	r3, [r2, #0]
 801548e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015492:	2be0      	cmp	r3, #224	@ 0xe0
 8015494:	d10d      	bne.n	80154b2 <udp_sendto+0x42>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 8015496:	7f20      	ldrb	r0, [r4, #28]
 8015498:	b9f0      	cbnz	r0, 80154d8 <udp_sendto+0x68>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 801549a:	69a3      	ldr	r3, [r4, #24]
 801549c:	b14b      	cbz	r3, 80154b2 <udp_sendto+0x42>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 801549e:	4a20      	ldr	r2, [pc, #128]	@ (8015520 <udp_sendto+0xb0>)
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 80154a0:	6812      	ldr	r2, [r2, #0]
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d005      	beq.n	80154b2 <udp_sendto+0x42>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 80154a6:	f104 0018 	add.w	r0, r4, #24
 80154aa:	f7f9 fa67 	bl	800e97c <ip4_route>
 80154ae:	4606      	mov	r6, r0
    if (netif == NULL)
 80154b0:	b926      	cbnz	r6, 80154bc <udp_sendto+0x4c>
      netif = ip_route(&pcb->local_ip, dst_ip);
 80154b2:	4628      	mov	r0, r5
 80154b4:	f7f9 fa62 	bl	800e97c <ip4_route>
 80154b8:	4606      	mov	r6, r0
  if (netif == NULL) {
 80154ba:	b19e      	cbz	r6, 80154e4 <udp_sendto+0x74>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80154bc:	4643      	mov	r3, r8
 80154be:	462a      	mov	r2, r5
 80154c0:	4639      	mov	r1, r7
 80154c2:	4620      	mov	r0, r4
 80154c4:	9600      	str	r6, [sp, #0]
 80154c6:	f7ff ff87 	bl	80153d8 <udp_sendto_if>
}
 80154ca:	b002      	add	sp, #8
 80154cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    netif = netif_get_by_index(pcb->netif_idx);
 80154d0:	f7fa ff3a 	bl	8010348 <netif_get_by_index>
 80154d4:	4606      	mov	r6, r0
 80154d6:	e7f0      	b.n	80154ba <udp_sendto+0x4a>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 80154d8:	f7fa ff36 	bl	8010348 <netif_get_by_index>
 80154dc:	4606      	mov	r6, r0
    if (netif == NULL)
 80154de:	2e00      	cmp	r6, #0
 80154e0:	d1ec      	bne.n	80154bc <udp_sendto+0x4c>
 80154e2:	e7e6      	b.n	80154b2 <udp_sendto+0x42>
    return ERR_RTE;
 80154e4:	f06f 0003 	mvn.w	r0, #3
 80154e8:	e7ef      	b.n	80154ca <udp_sendto+0x5a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80154ea:	4b0e      	ldr	r3, [pc, #56]	@ (8015524 <udp_sendto+0xb4>)
 80154ec:	f240 221a 	movw	r2, #538	@ 0x21a
 80154f0:	490d      	ldr	r1, [pc, #52]	@ (8015528 <udp_sendto+0xb8>)
 80154f2:	480e      	ldr	r0, [pc, #56]	@ (801552c <udp_sendto+0xbc>)
 80154f4:	f000 ffe2 	bl	80164bc <iprintf>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80154f8:	f06f 000f 	mvn.w	r0, #15
 80154fc:	e7e5      	b.n	80154ca <udp_sendto+0x5a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80154fe:	4b09      	ldr	r3, [pc, #36]	@ (8015524 <udp_sendto+0xb4>)
 8015500:	f240 2219 	movw	r2, #537	@ 0x219
 8015504:	490a      	ldr	r1, [pc, #40]	@ (8015530 <udp_sendto+0xc0>)
 8015506:	4809      	ldr	r0, [pc, #36]	@ (801552c <udp_sendto+0xbc>)
 8015508:	f000 ffd8 	bl	80164bc <iprintf>
 801550c:	e7f4      	b.n	80154f8 <udp_sendto+0x88>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801550e:	4b05      	ldr	r3, [pc, #20]	@ (8015524 <udp_sendto+0xb4>)
 8015510:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015514:	4907      	ldr	r1, [pc, #28]	@ (8015534 <udp_sendto+0xc4>)
 8015516:	4805      	ldr	r0, [pc, #20]	@ (801552c <udp_sendto+0xbc>)
 8015518:	f000 ffd0 	bl	80164bc <iprintf>
 801551c:	e7ec      	b.n	80154f8 <udp_sendto+0x88>
 801551e:	bf00      	nop
 8015520:	0801a79c 	.word	0x0801a79c
 8015524:	0801c5e8 	.word	0x0801c5e8
 8015528:	0801c874 	.word	0x0801c874
 801552c:	080187f8 	.word	0x080187f8
 8015530:	0801c858 	.word	0x0801c858
 8015534:	0801c840 	.word	0x0801c840

08015538 <udp_send>:
{
 8015538:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801553a:	b188      	cbz	r0, 8015560 <udp_send+0x28>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801553c:	b131      	cbz	r1, 801554c <udp_send+0x14>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801553e:	4602      	mov	r2, r0
 8015540:	8a83      	ldrh	r3, [r0, #20]
 8015542:	3204      	adds	r2, #4
}
 8015544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015548:	f7ff bf92 	b.w	8015470 <udp_sendto>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801554c:	4b08      	ldr	r3, [pc, #32]	@ (8015570 <udp_send+0x38>)
 801554e:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8015552:	4908      	ldr	r1, [pc, #32]	@ (8015574 <udp_send+0x3c>)
 8015554:	4808      	ldr	r0, [pc, #32]	@ (8015578 <udp_send+0x40>)
 8015556:	f000 ffb1 	bl	80164bc <iprintf>
}
 801555a:	f06f 000f 	mvn.w	r0, #15
 801555e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015560:	4b03      	ldr	r3, [pc, #12]	@ (8015570 <udp_send+0x38>)
 8015562:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8015566:	4905      	ldr	r1, [pc, #20]	@ (801557c <udp_send+0x44>)
 8015568:	4803      	ldr	r0, [pc, #12]	@ (8015578 <udp_send+0x40>)
 801556a:	f000 ffa7 	bl	80164bc <iprintf>
 801556e:	e7f4      	b.n	801555a <udp_send+0x22>
 8015570:	0801c5e8 	.word	0x0801c5e8
 8015574:	0801c8a8 	.word	0x0801c8a8
 8015578:	080187f8 	.word	0x080187f8
 801557c:	0801c890 	.word	0x0801c890

08015580 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015580:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015582:	b310      	cbz	r0, 80155ca <udp_connect+0x4a>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015584:	460d      	mov	r5, r1
 8015586:	b351      	cbz	r1, 80155de <udp_connect+0x5e>

  if (pcb->local_port == 0) {
 8015588:	4616      	mov	r6, r2
 801558a:	8a42      	ldrh	r2, [r0, #18]
 801558c:	4604      	mov	r4, r0
 801558e:	b1b2      	cbz	r2, 80155be <udp_connect+0x3e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015590:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015592:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015594:	4916      	ldr	r1, [pc, #88]	@ (80155f0 <udp_connect+0x70>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015596:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801559a:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801559c:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801559e:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80155a0:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155a2:	b142      	cbz	r2, 80155b6 <udp_connect+0x36>
    if (pcb == ipcb) {
 80155a4:	4294      	cmp	r4, r2
 80155a6:	d008      	beq.n	80155ba <udp_connect+0x3a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155a8:	4613      	mov	r3, r2
 80155aa:	e001      	b.n	80155b0 <udp_connect+0x30>
    if (pcb == ipcb) {
 80155ac:	429c      	cmp	r4, r3
 80155ae:	d004      	beq.n	80155ba <udp_connect+0x3a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155b0:	68db      	ldr	r3, [r3, #12]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1fa      	bne.n	80155ac <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80155b6:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 80155b8:	600c      	str	r4, [r1, #0]
      return ERR_OK;
 80155ba:	2000      	movs	r0, #0
  return ERR_OK;
}
 80155bc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80155be:	4601      	mov	r1, r0
 80155c0:	f7ff fdc8 	bl	8015154 <udp_bind>
    if (err != ERR_OK) {
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d0e3      	beq.n	8015590 <udp_connect+0x10>
}
 80155c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80155ca:	4b0a      	ldr	r3, [pc, #40]	@ (80155f4 <udp_connect+0x74>)
 80155cc:	f240 4235 	movw	r2, #1077	@ 0x435
 80155d0:	4909      	ldr	r1, [pc, #36]	@ (80155f8 <udp_connect+0x78>)
 80155d2:	480a      	ldr	r0, [pc, #40]	@ (80155fc <udp_connect+0x7c>)
 80155d4:	f000 ff72 	bl	80164bc <iprintf>
 80155d8:	f06f 000f 	mvn.w	r0, #15
}
 80155dc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80155de:	4b05      	ldr	r3, [pc, #20]	@ (80155f4 <udp_connect+0x74>)
 80155e0:	f240 4236 	movw	r2, #1078	@ 0x436
 80155e4:	4906      	ldr	r1, [pc, #24]	@ (8015600 <udp_connect+0x80>)
 80155e6:	4805      	ldr	r0, [pc, #20]	@ (80155fc <udp_connect+0x7c>)
 80155e8:	f000 ff68 	bl	80164bc <iprintf>
 80155ec:	e7f4      	b.n	80155d8 <udp_connect+0x58>
 80155ee:	bf00      	nop
 80155f0:	200101c8 	.word	0x200101c8
 80155f4:	0801c5e8 	.word	0x0801c5e8
 80155f8:	0801c8c0 	.word	0x0801c8c0
 80155fc:	080187f8 	.word	0x080187f8
 8015600:	0801c8dc 	.word	0x0801c8dc

08015604 <udp_disconnect>:
void
udp_disconnect(struct udp_pcb *pcb)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8015604:	b140      	cbz	r0, 8015618 <udp_disconnect+0x14>
  }
#endif
  pcb->remote_port = 0;
  pcb->netif_idx = NETIF_NO_INDEX;
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015606:	7c03      	ldrb	r3, [r0, #16]
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015608:	2200      	movs	r2, #0
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801560a:	f023 0304 	bic.w	r3, r3, #4
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801560e:	6042      	str	r2, [r0, #4]
  pcb->remote_port = 0;
 8015610:	8282      	strh	r2, [r0, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8015612:	7202      	strb	r2, [r0, #8]
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015614:	7403      	strb	r3, [r0, #16]
}
 8015616:	4770      	bx	lr
  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8015618:	4b03      	ldr	r3, [pc, #12]	@ (8015628 <udp_disconnect+0x24>)
 801561a:	f240 426a 	movw	r2, #1130	@ 0x46a
 801561e:	4903      	ldr	r1, [pc, #12]	@ (801562c <udp_disconnect+0x28>)
 8015620:	4803      	ldr	r0, [pc, #12]	@ (8015630 <udp_disconnect+0x2c>)
 8015622:	f000 bf4b 	b.w	80164bc <iprintf>
 8015626:	bf00      	nop
 8015628:	0801c5e8 	.word	0x0801c5e8
 801562c:	0801c8f8 	.word	0x0801c8f8
 8015630:	080187f8 	.word	0x080187f8

08015634 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015634:	b110      	cbz	r0, 801563c <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8015636:	e9c0 1208 	strd	r1, r2, [r0, #32]
}
 801563a:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801563c:	4b03      	ldr	r3, [pc, #12]	@ (801564c <udp_recv+0x18>)
 801563e:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015642:	4903      	ldr	r1, [pc, #12]	@ (8015650 <udp_recv+0x1c>)
 8015644:	4803      	ldr	r0, [pc, #12]	@ (8015654 <udp_recv+0x20>)
 8015646:	f000 bf39 	b.w	80164bc <iprintf>
 801564a:	bf00      	nop
 801564c:	0801c5e8 	.word	0x0801c5e8
 8015650:	0801c914 	.word	0x0801c914
 8015654:	080187f8 	.word	0x080187f8

08015658 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015658:	4601      	mov	r1, r0
 801565a:	b198      	cbz	r0, 8015684 <udp_remove+0x2c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801565c:	4a0d      	ldr	r2, [pc, #52]	@ (8015694 <udp_remove+0x3c>)
 801565e:	6813      	ldr	r3, [r2, #0]
 8015660:	4283      	cmp	r3, r0
 8015662:	d00a      	beq.n	801567a <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015664:	b133      	cbz	r3, 8015674 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015666:	461a      	mov	r2, r3
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	b11b      	cbz	r3, 8015674 <udp_remove+0x1c>
 801566c:	428b      	cmp	r3, r1
 801566e:	d1fa      	bne.n	8015666 <udp_remove+0xe>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015670:	68cb      	ldr	r3, [r1, #12]
 8015672:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015674:	2000      	movs	r0, #0
 8015676:	f7fa bc87 	b.w	800ff88 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801567a:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801567c:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 801567e:	6013      	str	r3, [r2, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8015680:	f7fa bc82 	b.w	800ff88 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015684:	4b04      	ldr	r3, [pc, #16]	@ (8015698 <udp_remove+0x40>)
 8015686:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801568a:	4904      	ldr	r1, [pc, #16]	@ (801569c <udp_remove+0x44>)
 801568c:	4804      	ldr	r0, [pc, #16]	@ (80156a0 <udp_remove+0x48>)
 801568e:	f000 bf15 	b.w	80164bc <iprintf>
 8015692:	bf00      	nop
 8015694:	200101c8 	.word	0x200101c8
 8015698:	0801c5e8 	.word	0x0801c5e8
 801569c:	0801c92c 	.word	0x0801c92c
 80156a0:	080187f8 	.word	0x080187f8

080156a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80156a4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80156a6:	2000      	movs	r0, #0
 80156a8:	f7fa fc28 	bl	800fefc <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80156ac:	4604      	mov	r4, r0
 80156ae:	b130      	cbz	r0, 80156be <udp_new+0x1a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80156b0:	2228      	movs	r2, #40	@ 0x28
 80156b2:	2100      	movs	r1, #0
 80156b4:	f001 f894 	bl	80167e0 <memset>
    pcb->ttl = UDP_TTL;
 80156b8:	23ff      	movs	r3, #255	@ 0xff
 80156ba:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 80156bc:	7763      	strb	r3, [r4, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80156be:	4620      	mov	r0, r4
 80156c0:	bd10      	pop	{r4, pc}
 80156c2:	bf00      	nop

080156c4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80156c4:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80156c6:	2000      	movs	r0, #0
 80156c8:	f7fa fc18 	bl	800fefc <memp_malloc>
  if (pcb != NULL) {
 80156cc:	4604      	mov	r4, r0
 80156ce:	b130      	cbz	r0, 80156de <udp_new_ip_type+0x1a>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80156d0:	2228      	movs	r2, #40	@ 0x28
 80156d2:	2100      	movs	r1, #0
 80156d4:	f001 f884 	bl	80167e0 <memset>
    pcb->ttl = UDP_TTL;
 80156d8:	23ff      	movs	r3, #255	@ 0xff
 80156da:	72e3      	strb	r3, [r4, #11]
    udp_set_multicast_ttl(pcb, UDP_TTL);
 80156dc:	7763      	strb	r3, [r4, #29]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80156de:	4620      	mov	r0, r4
 80156e0:	bd10      	pop	{r4, pc}
 80156e2:	bf00      	nop

080156e4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80156e4:	b110      	cbz	r0, 80156ec <udp_netif_ip_addr_changed+0x8>
 80156e6:	6802      	ldr	r2, [r0, #0]
 80156e8:	b101      	cbz	r1, 80156ec <udp_netif_ip_addr_changed+0x8>
 80156ea:	b902      	cbnz	r2, 80156ee <udp_netif_ip_addr_changed+0xa>
 80156ec:	4770      	bx	lr
 80156ee:	680b      	ldr	r3, [r1, #0]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d0fb      	beq.n	80156ec <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156f4:	4b08      	ldr	r3, [pc, #32]	@ (8015718 <udp_netif_ip_addr_changed+0x34>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d0f7      	beq.n	80156ec <udp_netif_ip_addr_changed+0x8>
{
 80156fc:	b410      	push	{r4}
 80156fe:	e000      	b.n	8015702 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015700:	6802      	ldr	r2, [r0, #0]
 8015702:	681c      	ldr	r4, [r3, #0]
 8015704:	4294      	cmp	r4, r2
 8015706:	d101      	bne.n	801570c <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015708:	680a      	ldr	r2, [r1, #0]
 801570a:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d1f6      	bne.n	8015700 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 8015712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	200101c8 	.word	0x200101c8

0801571c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801571c:	8943      	ldrh	r3, [r0, #10]
 801571e:	2b0e      	cmp	r3, #14
{
 8015720:	b570      	push	{r4, r5, r6, lr}
 8015722:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8015724:	d91b      	bls.n	801575e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015726:	7bc3      	ldrb	r3, [r0, #15]
 8015728:	460d      	mov	r5, r1
 801572a:	b91b      	cbnz	r3, 8015734 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801572c:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 8015730:	3301      	adds	r3, #1
 8015732:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015734:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015736:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8015738:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801573a:	07d9      	lsls	r1, r3, #31
 801573c:	d50a      	bpl.n	8015754 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801573e:	2b01      	cmp	r3, #1
 8015740:	d030      	beq.n	80157a4 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015742:	2206      	movs	r2, #6
 8015744:	491d      	ldr	r1, [pc, #116]	@ (80157bc <ethernet_input+0xa0>)
 8015746:	f001 f821 	bl	801678c <memcmp>
 801574a:	b918      	cbnz	r0, 8015754 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801574c:	7b63      	ldrb	r3, [r4, #13]
 801574e:	f043 0308 	orr.w	r3, r3, #8
 8015752:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8015754:	2e08      	cmp	r6, #8
 8015756:	d016      	beq.n	8015786 <ethernet_input+0x6a>
 8015758:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 801575c:	d004      	beq.n	8015768 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801575e:	4620      	mov	r0, r4
 8015760:	f7fa fef8 	bl	8010554 <pbuf_free>
  return ERR_OK;
}
 8015764:	2000      	movs	r0, #0
 8015766:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015768:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 801576c:	071b      	lsls	r3, r3, #28
 801576e:	d5f6      	bpl.n	801575e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015770:	210e      	movs	r1, #14
 8015772:	4620      	mov	r0, r4
 8015774:	f7fa fe8c 	bl	8010490 <pbuf_remove_header>
 8015778:	2800      	cmp	r0, #0
 801577a:	d1f0      	bne.n	801575e <ethernet_input+0x42>
        etharp_input(p, netif);
 801577c:	4629      	mov	r1, r5
 801577e:	4620      	mov	r0, r4
 8015780:	f7f8 fac6 	bl	800dd10 <etharp_input>
      break;
 8015784:	e7ee      	b.n	8015764 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015786:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 801578a:	071a      	lsls	r2, r3, #28
 801578c:	d5e7      	bpl.n	801575e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801578e:	210e      	movs	r1, #14
 8015790:	4620      	mov	r0, r4
 8015792:	f7fa fe7d 	bl	8010490 <pbuf_remove_header>
 8015796:	2800      	cmp	r0, #0
 8015798:	d1e1      	bne.n	801575e <ethernet_input+0x42>
        ip4_input(p, netif);
 801579a:	4629      	mov	r1, r5
 801579c:	4620      	mov	r0, r4
 801579e:	f7f9 f92b 	bl	800e9f8 <ip4_input>
      break;
 80157a2:	e7df      	b.n	8015764 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80157a4:	7843      	ldrb	r3, [r0, #1]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d1d4      	bne.n	8015754 <ethernet_input+0x38>
 80157aa:	7883      	ldrb	r3, [r0, #2]
 80157ac:	2b5e      	cmp	r3, #94	@ 0x5e
 80157ae:	d1d1      	bne.n	8015754 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 80157b0:	7b63      	ldrb	r3, [r4, #13]
 80157b2:	f043 0310 	orr.w	r3, r3, #16
 80157b6:	7363      	strb	r3, [r4, #13]
 80157b8:	e7cc      	b.n	8015754 <ethernet_input+0x38>
 80157ba:	bf00      	nop
 80157bc:	0801c9f8 	.word	0x0801c9f8

080157c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80157c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c4:	460c      	mov	r4, r1
 80157c6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80157c8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80157cc:	4616      	mov	r6, r2
 80157ce:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80157d0:	f7fa f830 	bl	800f834 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80157d4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80157d6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80157d8:	4620      	mov	r0, r4
 80157da:	f7fa fe29 	bl	8010430 <pbuf_add_header>
 80157de:	b9e0      	cbnz	r0, 801581a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80157e0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80157e2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	600b      	str	r3, [r1, #0]
 80157ea:	88bb      	ldrh	r3, [r7, #4]
 80157ec:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80157ee:	6833      	ldr	r3, [r6, #0]
 80157f0:	f8c1 3006 	str.w	r3, [r1, #6]
 80157f4:	88b3      	ldrh	r3, [r6, #4]
 80157f6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80157f8:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 80157fc:	2b06      	cmp	r3, #6
 80157fe:	d006      	beq.n	801580e <ethernet_output+0x4e>
 8015800:	4b08      	ldr	r3, [pc, #32]	@ (8015824 <ethernet_output+0x64>)
 8015802:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015806:	4908      	ldr	r1, [pc, #32]	@ (8015828 <ethernet_output+0x68>)
 8015808:	4808      	ldr	r0, [pc, #32]	@ (801582c <ethernet_output+0x6c>)
 801580a:	f000 fe57 	bl	80164bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801580e:	69ab      	ldr	r3, [r5, #24]
 8015810:	4621      	mov	r1, r4
 8015812:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8015814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8015818:	4718      	bx	r3
}
 801581a:	f06f 0001 	mvn.w	r0, #1
 801581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015822:	bf00      	nop
 8015824:	0801c944 	.word	0x0801c944
 8015828:	0801c9bc 	.word	0x0801c9bc
 801582c:	080187f8 	.word	0x080187f8

08015830 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015830:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015832:	2200      	movs	r2, #0
 8015834:	2104      	movs	r1, #4
{
 8015836:	b510      	push	{r4, lr}
 8015838:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801583a:	4618      	mov	r0, r3
 801583c:	f7f3 fd0a 	bl	8009254 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015840:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015844:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8015846:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8015848:	4258      	negs	r0, r3
 801584a:	bd10      	pop	{r4, pc}

0801584c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801584c:	b510      	push	{r4, lr}
 801584e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8015850:	6800      	ldr	r0, [r0, #0]
 8015852:	f7f3 fdb1 	bl	80093b8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8015856:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 801585c:	f7f3 bdb6 	b.w	80093cc <osMessageQueueDelete>

08015860 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015860:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015862:	2300      	movs	r3, #0
{
 8015864:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015866:	6800      	ldr	r0, [r0, #0]
{
 8015868:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801586a:	461a      	mov	r2, r3
 801586c:	a901      	add	r1, sp, #4
 801586e:	f7f3 fd2d 	bl	80092cc <osMessageQueuePut>
 8015872:	3800      	subs	r0, #0
 8015874:	bf18      	it	ne
 8015876:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8015878:	4240      	negs	r0, r0
 801587a:	b003      	add	sp, #12
 801587c:	f85d fb04 	ldr.w	pc, [sp], #4

08015880 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015882:	4615      	mov	r5, r2
 8015884:	4606      	mov	r6, r0
 8015886:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8015888:	f7f3 fb2e 	bl	8008ee8 <osKernelGetTickCount>
 801588c:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 801588e:	b14d      	cbz	r5, 80158a4 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8015890:	462b      	mov	r3, r5
 8015892:	2200      	movs	r2, #0
 8015894:	4639      	mov	r1, r7
 8015896:	6830      	ldr	r0, [r6, #0]
 8015898:	f7f3 fd54 	bl	8009344 <osMessageQueueGet>
    if (status == osOK)
 801589c:	b148      	cbz	r0, 80158b2 <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801589e:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80158a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80158a4:	f04f 33ff 	mov.w	r3, #4294967295
 80158a8:	462a      	mov	r2, r5
 80158aa:	4639      	mov	r1, r7
 80158ac:	6830      	ldr	r0, [r6, #0]
 80158ae:	f7f3 fd49 	bl	8009344 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80158b2:	f7f3 fb19 	bl	8008ee8 <osKernelGetTickCount>
 80158b6:	1b00      	subs	r0, r0, r4
}
 80158b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ba:	bf00      	nop

080158bc <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80158bc:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80158be:	2300      	movs	r3, #0
 80158c0:	6800      	ldr	r0, [r0, #0]
 80158c2:	461a      	mov	r2, r3
 80158c4:	f7f3 fd3e 	bl	8009344 <osMessageQueueGet>
 80158c8:	3800      	subs	r0, #0
 80158ca:	bf18      	it	ne
 80158cc:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 80158ce:	4240      	negs	r0, r0
 80158d0:	bd08      	pop	{r3, pc}
 80158d2:	bf00      	nop

080158d4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 80158d4:	6800      	ldr	r0, [r0, #0]
 80158d6:	3800      	subs	r0, #0
 80158d8:	bf18      	it	ne
 80158da:	2001      	movne	r0, #1
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop

080158e0 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 80158e0:	2300      	movs	r3, #0
 80158e2:	6003      	str	r3, [r0, #0]
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop

080158e8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80158ec:	2200      	movs	r2, #0
 80158ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 80158f2:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80158f4:	f7f3 fbf2 	bl	80090dc <osSemaphoreNew>
 80158f8:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 80158fa:	b130      	cbz	r0, 801590a <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 80158fc:	b10c      	cbz	r4, 8015902 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80158fe:	2000      	movs	r0, #0
}
 8015900:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 8015902:	4621      	mov	r1, r4
 8015904:	f7f3 fc36 	bl	8009174 <osSemaphoreAcquire>
 8015908:	e7f9      	b.n	80158fe <sys_sem_new+0x16>
    return ERR_MEM;
 801590a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801590e:	bd38      	pop	{r3, r4, r5, pc}

08015910 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015910:	b570      	push	{r4, r5, r6, lr}
 8015912:	460e      	mov	r6, r1
 8015914:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8015916:	f7f3 fae7 	bl	8008ee8 <osKernelGetTickCount>
 801591a:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 801591c:	b956      	cbnz	r6, 8015934 <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801591e:	f04f 31ff 	mov.w	r1, #4294967295
 8015922:	6820      	ldr	r0, [r4, #0]
 8015924:	f7f3 fc26 	bl	8009174 <osSemaphoreAcquire>
 8015928:	2800      	cmp	r0, #0
 801592a:	d1f8      	bne.n	801591e <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 801592c:	f7f3 fadc 	bl	8008ee8 <osKernelGetTickCount>
 8015930:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8015932:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8015934:	4631      	mov	r1, r6
 8015936:	6820      	ldr	r0, [r4, #0]
 8015938:	f7f3 fc1c 	bl	8009174 <osSemaphoreAcquire>
 801593c:	2800      	cmp	r0, #0
 801593e:	d0f5      	beq.n	801592c <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8015940:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015944:	bd70      	pop	{r4, r5, r6, pc}
 8015946:	bf00      	nop

08015948 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8015948:	6800      	ldr	r0, [r0, #0]
 801594a:	f7f3 bc45 	b.w	80091d8 <osSemaphoreRelease>
 801594e:	bf00      	nop

08015950 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015950:	6800      	ldr	r0, [r0, #0]
 8015952:	f7f3 bc6b 	b.w	800922c <osSemaphoreDelete>
 8015956:	bf00      	nop

08015958 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8015958:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 801595a:	3800      	subs	r0, #0
 801595c:	bf18      	it	ne
 801595e:	2001      	movne	r0, #1
 8015960:	4770      	bx	lr
 8015962:	bf00      	nop

08015964 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8015964:	2300      	movs	r3, #0
 8015966:	6003      	str	r3, [r0, #0]
}
 8015968:	4770      	bx	lr
 801596a:	bf00      	nop

0801596c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801596c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801596e:	2000      	movs	r0, #0
 8015970:	f7f3 fb2c 	bl	8008fcc <osMutexNew>
 8015974:	4b01      	ldr	r3, [pc, #4]	@ (801597c <sys_init+0x10>)
 8015976:	6018      	str	r0, [r3, #0]
#endif
}
 8015978:	bd08      	pop	{r3, pc}
 801597a:	bf00      	nop
 801597c:	200101cc 	.word	0x200101cc

08015980 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015980:	b510      	push	{r4, lr}
 8015982:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015984:	2000      	movs	r0, #0
 8015986:	f7f3 fb21 	bl	8008fcc <osMutexNew>
#endif

  if(*mutex == NULL)
 801598a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 801598e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8015990:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8015992:	4258      	negs	r0, r3
 8015994:	bd10      	pop	{r4, pc}
 8015996:	bf00      	nop

08015998 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015998:	f04f 31ff 	mov.w	r1, #4294967295
 801599c:	6800      	ldr	r0, [r0, #0]
 801599e:	f7f3 bb57 	b.w	8009050 <osMutexAcquire>
 80159a2:	bf00      	nop

080159a4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80159a4:	6800      	ldr	r0, [r0, #0]
 80159a6:	f7f3 bb77 	b.w	8009098 <osMutexRelease>
 80159aa:	bf00      	nop

080159ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80159ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ae:	b08b      	sub	sp, #44	@ 0x2c
 80159b0:	4617      	mov	r7, r2
 80159b2:	460e      	mov	r6, r1
 80159b4:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80159b6:	2220      	movs	r2, #32
 80159b8:	2100      	movs	r1, #0
 80159ba:	a802      	add	r0, sp, #8
{
 80159bc:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 80159be:	f000 ff0f 	bl	80167e0 <memset>
 80159c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80159c4:	4639      	mov	r1, r7
 80159c6:	aa01      	add	r2, sp, #4
 80159c8:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 80159ca:	9501      	str	r5, [sp, #4]
 80159cc:	9406      	str	r4, [sp, #24]
 80159ce:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 80159d0:	f7f3 fa92 	bl	8008ef8 <osThreadNew>
#endif
}
 80159d4:	b00b      	add	sp, #44	@ 0x2c
 80159d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80159d8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80159da:	4b04      	ldr	r3, [pc, #16]	@ (80159ec <sys_arch_protect+0x14>)
 80159dc:	f04f 31ff 	mov.w	r1, #4294967295
 80159e0:	6818      	ldr	r0, [r3, #0]
 80159e2:	f7f3 fb35 	bl	8009050 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 80159e6:	2001      	movs	r0, #1
 80159e8:	bd08      	pop	{r3, pc}
 80159ea:	bf00      	nop
 80159ec:	200101cc 	.word	0x200101cc

080159f0 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80159f0:	4b01      	ldr	r3, [pc, #4]	@ (80159f8 <sys_arch_unprotect+0x8>)
 80159f2:	6818      	ldr	r0, [r3, #0]
 80159f4:	f7f3 bb50 	b.w	8009098 <osMutexRelease>
 80159f8:	200101cc 	.word	0x200101cc

080159fc <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80159fc:	b1e8      	cbz	r0, 8015a3a <fs_open+0x3e>
{
 80159fe:	b570      	push	{r4, r5, r6, lr}
 8015a00:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8015a02:	b1b9      	cbz	r1, 8015a34 <fs_open+0x38>
 8015a04:	4606      	mov	r6, r0
 8015a06:	490e      	ldr	r1, [pc, #56]	@ (8015a40 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015a08:	4c0e      	ldr	r4, [pc, #56]	@ (8015a44 <fs_open+0x48>)
 8015a0a:	e002      	b.n	8015a12 <fs_open+0x16>
 8015a0c:	6824      	ldr	r4, [r4, #0]
 8015a0e:	b174      	cbz	r4, 8015a2e <fs_open+0x32>
    if (!strcmp(name, (const char *)f->name)) {
 8015a10:	6861      	ldr	r1, [r4, #4]
 8015a12:	4628      	mov	r0, r5
 8015a14:	f7ea fc7c 	bl	8000310 <strcmp>
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d1f7      	bne.n	8015a0c <fs_open+0x10>
      file->data = (const char *)f->data;
      file->len = f->len;
 8015a1c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->index = f->len;
      file->pextension = NULL;
 8015a20:	60f0      	str	r0, [r6, #12]
      file->len = f->len;
 8015a22:	60b3      	str	r3, [r6, #8]
 8015a24:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8015a28:	7c23      	ldrb	r3, [r4, #16]
 8015a2a:	7433      	strb	r3, [r6, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 8015a2c:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_VAL;
 8015a2e:	f06f 0005 	mvn.w	r0, #5
}
 8015a32:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8015a34:	f06f 000f 	mvn.w	r0, #15
}
 8015a38:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8015a3a:	f06f 000f 	mvn.w	r0, #15
}
 8015a3e:	4770      	bx	lr
 8015a40:	0801ca64 	.word	0x0801ca64
 8015a44:	0801ca00 	.word	0x0801ca00

08015a48 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop

08015a4c <rand>:
 8015a4c:	4b16      	ldr	r3, [pc, #88]	@ (8015aa8 <rand+0x5c>)
 8015a4e:	b510      	push	{r4, lr}
 8015a50:	681c      	ldr	r4, [r3, #0]
 8015a52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a54:	b9b3      	cbnz	r3, 8015a84 <rand+0x38>
 8015a56:	2018      	movs	r0, #24
 8015a58:	f001 fdb2 	bl	80175c0 <malloc>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015a60:	b920      	cbnz	r0, 8015a6c <rand+0x20>
 8015a62:	4b12      	ldr	r3, [pc, #72]	@ (8015aac <rand+0x60>)
 8015a64:	4812      	ldr	r0, [pc, #72]	@ (8015ab0 <rand+0x64>)
 8015a66:	2152      	movs	r1, #82	@ 0x52
 8015a68:	f000 ff64 	bl	8016934 <__assert_func>
 8015a6c:	4911      	ldr	r1, [pc, #68]	@ (8015ab4 <rand+0x68>)
 8015a6e:	4b12      	ldr	r3, [pc, #72]	@ (8015ab8 <rand+0x6c>)
 8015a70:	e9c0 1300 	strd	r1, r3, [r0]
 8015a74:	4b11      	ldr	r3, [pc, #68]	@ (8015abc <rand+0x70>)
 8015a76:	6083      	str	r3, [r0, #8]
 8015a78:	230b      	movs	r3, #11
 8015a7a:	8183      	strh	r3, [r0, #12]
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	2001      	movs	r0, #1
 8015a80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015a84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015a86:	480e      	ldr	r0, [pc, #56]	@ (8015ac0 <rand+0x74>)
 8015a88:	690b      	ldr	r3, [r1, #16]
 8015a8a:	694c      	ldr	r4, [r1, #20]
 8015a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8015ac4 <rand+0x78>)
 8015a8e:	4358      	muls	r0, r3
 8015a90:	fb02 0004 	mla	r0, r2, r4, r0
 8015a94:	fba3 3202 	umull	r3, r2, r3, r2
 8015a98:	3301      	adds	r3, #1
 8015a9a:	eb40 0002 	adc.w	r0, r0, r2
 8015a9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015aa2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015aa6:	bd10      	pop	{r4, pc}
 8015aa8:	2000003c 	.word	0x2000003c
 8015aac:	0802cab5 	.word	0x0802cab5
 8015ab0:	0802cacc 	.word	0x0802cacc
 8015ab4:	abcd330e 	.word	0xabcd330e
 8015ab8:	e66d1234 	.word	0xe66d1234
 8015abc:	0005deec 	.word	0x0005deec
 8015ac0:	5851f42d 	.word	0x5851f42d
 8015ac4:	4c957f2d 	.word	0x4c957f2d

08015ac8 <__cvt>:
 8015ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aca:	ed2d 8b02 	vpush	{d8}
 8015ace:	eeb0 8b40 	vmov.f64	d8, d0
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	4617      	mov	r7, r2
 8015ad6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015ad8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015ada:	ee18 2a90 	vmov	r2, s17
 8015ade:	f025 0520 	bic.w	r5, r5, #32
 8015ae2:	2a00      	cmp	r2, #0
 8015ae4:	bfb6      	itet	lt
 8015ae6:	222d      	movlt	r2, #45	@ 0x2d
 8015ae8:	2200      	movge	r2, #0
 8015aea:	eeb1 8b40 	vneglt.f64	d8, d0
 8015aee:	2d46      	cmp	r5, #70	@ 0x46
 8015af0:	460c      	mov	r4, r1
 8015af2:	701a      	strb	r2, [r3, #0]
 8015af4:	d004      	beq.n	8015b00 <__cvt+0x38>
 8015af6:	2d45      	cmp	r5, #69	@ 0x45
 8015af8:	d100      	bne.n	8015afc <__cvt+0x34>
 8015afa:	3401      	adds	r4, #1
 8015afc:	2102      	movs	r1, #2
 8015afe:	e000      	b.n	8015b02 <__cvt+0x3a>
 8015b00:	2103      	movs	r1, #3
 8015b02:	ab03      	add	r3, sp, #12
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	ab02      	add	r3, sp, #8
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	4622      	mov	r2, r4
 8015b0c:	4633      	mov	r3, r6
 8015b0e:	eeb0 0b48 	vmov.f64	d0, d8
 8015b12:	f000 ffb5 	bl	8016a80 <_dtoa_r>
 8015b16:	2d47      	cmp	r5, #71	@ 0x47
 8015b18:	d114      	bne.n	8015b44 <__cvt+0x7c>
 8015b1a:	07fb      	lsls	r3, r7, #31
 8015b1c:	d50a      	bpl.n	8015b34 <__cvt+0x6c>
 8015b1e:	1902      	adds	r2, r0, r4
 8015b20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b28:	bf08      	it	eq
 8015b2a:	9203      	streq	r2, [sp, #12]
 8015b2c:	2130      	movs	r1, #48	@ 0x30
 8015b2e:	9b03      	ldr	r3, [sp, #12]
 8015b30:	4293      	cmp	r3, r2
 8015b32:	d319      	bcc.n	8015b68 <__cvt+0xa0>
 8015b34:	9b03      	ldr	r3, [sp, #12]
 8015b36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b38:	1a1b      	subs	r3, r3, r0
 8015b3a:	6013      	str	r3, [r2, #0]
 8015b3c:	b005      	add	sp, #20
 8015b3e:	ecbd 8b02 	vpop	{d8}
 8015b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b44:	2d46      	cmp	r5, #70	@ 0x46
 8015b46:	eb00 0204 	add.w	r2, r0, r4
 8015b4a:	d1e9      	bne.n	8015b20 <__cvt+0x58>
 8015b4c:	7803      	ldrb	r3, [r0, #0]
 8015b4e:	2b30      	cmp	r3, #48	@ 0x30
 8015b50:	d107      	bne.n	8015b62 <__cvt+0x9a>
 8015b52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5a:	bf1c      	itt	ne
 8015b5c:	f1c4 0401 	rsbne	r4, r4, #1
 8015b60:	6034      	strne	r4, [r6, #0]
 8015b62:	6833      	ldr	r3, [r6, #0]
 8015b64:	441a      	add	r2, r3
 8015b66:	e7db      	b.n	8015b20 <__cvt+0x58>
 8015b68:	1c5c      	adds	r4, r3, #1
 8015b6a:	9403      	str	r4, [sp, #12]
 8015b6c:	7019      	strb	r1, [r3, #0]
 8015b6e:	e7de      	b.n	8015b2e <__cvt+0x66>

08015b70 <__exponent>:
 8015b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b72:	2900      	cmp	r1, #0
 8015b74:	bfba      	itte	lt
 8015b76:	4249      	neglt	r1, r1
 8015b78:	232d      	movlt	r3, #45	@ 0x2d
 8015b7a:	232b      	movge	r3, #43	@ 0x2b
 8015b7c:	2909      	cmp	r1, #9
 8015b7e:	7002      	strb	r2, [r0, #0]
 8015b80:	7043      	strb	r3, [r0, #1]
 8015b82:	dd29      	ble.n	8015bd8 <__exponent+0x68>
 8015b84:	f10d 0307 	add.w	r3, sp, #7
 8015b88:	461d      	mov	r5, r3
 8015b8a:	270a      	movs	r7, #10
 8015b8c:	461a      	mov	r2, r3
 8015b8e:	fbb1 f6f7 	udiv	r6, r1, r7
 8015b92:	fb07 1416 	mls	r4, r7, r6, r1
 8015b96:	3430      	adds	r4, #48	@ 0x30
 8015b98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015b9c:	460c      	mov	r4, r1
 8015b9e:	2c63      	cmp	r4, #99	@ 0x63
 8015ba0:	f103 33ff 	add.w	r3, r3, #4294967295
 8015ba4:	4631      	mov	r1, r6
 8015ba6:	dcf1      	bgt.n	8015b8c <__exponent+0x1c>
 8015ba8:	3130      	adds	r1, #48	@ 0x30
 8015baa:	1e94      	subs	r4, r2, #2
 8015bac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015bb0:	1c41      	adds	r1, r0, #1
 8015bb2:	4623      	mov	r3, r4
 8015bb4:	42ab      	cmp	r3, r5
 8015bb6:	d30a      	bcc.n	8015bce <__exponent+0x5e>
 8015bb8:	f10d 0309 	add.w	r3, sp, #9
 8015bbc:	1a9b      	subs	r3, r3, r2
 8015bbe:	42ac      	cmp	r4, r5
 8015bc0:	bf88      	it	hi
 8015bc2:	2300      	movhi	r3, #0
 8015bc4:	3302      	adds	r3, #2
 8015bc6:	4403      	add	r3, r0
 8015bc8:	1a18      	subs	r0, r3, r0
 8015bca:	b003      	add	sp, #12
 8015bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015bd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015bd6:	e7ed      	b.n	8015bb4 <__exponent+0x44>
 8015bd8:	2330      	movs	r3, #48	@ 0x30
 8015bda:	3130      	adds	r1, #48	@ 0x30
 8015bdc:	7083      	strb	r3, [r0, #2]
 8015bde:	70c1      	strb	r1, [r0, #3]
 8015be0:	1d03      	adds	r3, r0, #4
 8015be2:	e7f1      	b.n	8015bc8 <__exponent+0x58>
 8015be4:	0000      	movs	r0, r0
	...

08015be8 <_printf_float>:
 8015be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bec:	b08d      	sub	sp, #52	@ 0x34
 8015bee:	460c      	mov	r4, r1
 8015bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015bf4:	4616      	mov	r6, r2
 8015bf6:	461f      	mov	r7, r3
 8015bf8:	4605      	mov	r5, r0
 8015bfa:	f000 fe15 	bl	8016828 <_localeconv_r>
 8015bfe:	f8d0 b000 	ldr.w	fp, [r0]
 8015c02:	4658      	mov	r0, fp
 8015c04:	f7ea fbe4 	bl	80003d0 <strlen>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015c14:	6822      	ldr	r2, [r4, #0]
 8015c16:	9005      	str	r0, [sp, #20]
 8015c18:	3307      	adds	r3, #7
 8015c1a:	f023 0307 	bic.w	r3, r3, #7
 8015c1e:	f103 0108 	add.w	r1, r3, #8
 8015c22:	f8c8 1000 	str.w	r1, [r8]
 8015c26:	ed93 0b00 	vldr	d0, [r3]
 8015c2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015e88 <_printf_float+0x2a0>
 8015c2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8015c32:	eeb4 7b46 	vcmp.f64	d7, d6
 8015c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8015c3e:	dd24      	ble.n	8015c8a <_printf_float+0xa2>
 8015c40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c48:	d502      	bpl.n	8015c50 <_printf_float+0x68>
 8015c4a:	232d      	movs	r3, #45	@ 0x2d
 8015c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c50:	498f      	ldr	r1, [pc, #572]	@ (8015e90 <_printf_float+0x2a8>)
 8015c52:	4b90      	ldr	r3, [pc, #576]	@ (8015e94 <_printf_float+0x2ac>)
 8015c54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015c58:	bf94      	ite	ls
 8015c5a:	4688      	movls	r8, r1
 8015c5c:	4698      	movhi	r8, r3
 8015c5e:	f022 0204 	bic.w	r2, r2, #4
 8015c62:	2303      	movs	r3, #3
 8015c64:	6123      	str	r3, [r4, #16]
 8015c66:	6022      	str	r2, [r4, #0]
 8015c68:	f04f 0a00 	mov.w	sl, #0
 8015c6c:	9700      	str	r7, [sp, #0]
 8015c6e:	4633      	mov	r3, r6
 8015c70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015c72:	4621      	mov	r1, r4
 8015c74:	4628      	mov	r0, r5
 8015c76:	f000 f9d1 	bl	801601c <_printf_common>
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	f040 8089 	bne.w	8015d92 <_printf_float+0x1aa>
 8015c80:	f04f 30ff 	mov.w	r0, #4294967295
 8015c84:	b00d      	add	sp, #52	@ 0x34
 8015c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8015c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c92:	d709      	bvc.n	8015ca8 <_printf_float+0xc0>
 8015c94:	ee10 3a90 	vmov	r3, s1
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	bfbc      	itt	lt
 8015c9c:	232d      	movlt	r3, #45	@ 0x2d
 8015c9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015ca2:	497d      	ldr	r1, [pc, #500]	@ (8015e98 <_printf_float+0x2b0>)
 8015ca4:	4b7d      	ldr	r3, [pc, #500]	@ (8015e9c <_printf_float+0x2b4>)
 8015ca6:	e7d5      	b.n	8015c54 <_printf_float+0x6c>
 8015ca8:	6863      	ldr	r3, [r4, #4]
 8015caa:	1c59      	adds	r1, r3, #1
 8015cac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015cb0:	d139      	bne.n	8015d26 <_printf_float+0x13e>
 8015cb2:	2306      	movs	r3, #6
 8015cb4:	6063      	str	r3, [r4, #4]
 8015cb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015cba:	2300      	movs	r3, #0
 8015cbc:	6022      	str	r2, [r4, #0]
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8015cc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015cc6:	ab09      	add	r3, sp, #36	@ 0x24
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	6861      	ldr	r1, [r4, #4]
 8015ccc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	f7ff fef9 	bl	8015ac8 <__cvt>
 8015cd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015cda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015cdc:	4680      	mov	r8, r0
 8015cde:	d129      	bne.n	8015d34 <_printf_float+0x14c>
 8015ce0:	1cc8      	adds	r0, r1, #3
 8015ce2:	db02      	blt.n	8015cea <_printf_float+0x102>
 8015ce4:	6863      	ldr	r3, [r4, #4]
 8015ce6:	4299      	cmp	r1, r3
 8015ce8:	dd41      	ble.n	8015d6e <_printf_float+0x186>
 8015cea:	f1a9 0902 	sub.w	r9, r9, #2
 8015cee:	fa5f f989 	uxtb.w	r9, r9
 8015cf2:	3901      	subs	r1, #1
 8015cf4:	464a      	mov	r2, r9
 8015cf6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8015cfc:	f7ff ff38 	bl	8015b70 <__exponent>
 8015d00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015d02:	1813      	adds	r3, r2, r0
 8015d04:	2a01      	cmp	r2, #1
 8015d06:	4682      	mov	sl, r0
 8015d08:	6123      	str	r3, [r4, #16]
 8015d0a:	dc02      	bgt.n	8015d12 <_printf_float+0x12a>
 8015d0c:	6822      	ldr	r2, [r4, #0]
 8015d0e:	07d2      	lsls	r2, r2, #31
 8015d10:	d501      	bpl.n	8015d16 <_printf_float+0x12e>
 8015d12:	3301      	adds	r3, #1
 8015d14:	6123      	str	r3, [r4, #16]
 8015d16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d0a6      	beq.n	8015c6c <_printf_float+0x84>
 8015d1e:	232d      	movs	r3, #45	@ 0x2d
 8015d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d24:	e7a2      	b.n	8015c6c <_printf_float+0x84>
 8015d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015d2a:	d1c4      	bne.n	8015cb6 <_printf_float+0xce>
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d1c2      	bne.n	8015cb6 <_printf_float+0xce>
 8015d30:	2301      	movs	r3, #1
 8015d32:	e7bf      	b.n	8015cb4 <_printf_float+0xcc>
 8015d34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015d38:	d9db      	bls.n	8015cf2 <_printf_float+0x10a>
 8015d3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8015d3e:	d118      	bne.n	8015d72 <_printf_float+0x18a>
 8015d40:	2900      	cmp	r1, #0
 8015d42:	6863      	ldr	r3, [r4, #4]
 8015d44:	dd0b      	ble.n	8015d5e <_printf_float+0x176>
 8015d46:	6121      	str	r1, [r4, #16]
 8015d48:	b913      	cbnz	r3, 8015d50 <_printf_float+0x168>
 8015d4a:	6822      	ldr	r2, [r4, #0]
 8015d4c:	07d0      	lsls	r0, r2, #31
 8015d4e:	d502      	bpl.n	8015d56 <_printf_float+0x16e>
 8015d50:	3301      	adds	r3, #1
 8015d52:	440b      	add	r3, r1
 8015d54:	6123      	str	r3, [r4, #16]
 8015d56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015d58:	f04f 0a00 	mov.w	sl, #0
 8015d5c:	e7db      	b.n	8015d16 <_printf_float+0x12e>
 8015d5e:	b913      	cbnz	r3, 8015d66 <_printf_float+0x17e>
 8015d60:	6822      	ldr	r2, [r4, #0]
 8015d62:	07d2      	lsls	r2, r2, #31
 8015d64:	d501      	bpl.n	8015d6a <_printf_float+0x182>
 8015d66:	3302      	adds	r3, #2
 8015d68:	e7f4      	b.n	8015d54 <_printf_float+0x16c>
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	e7f2      	b.n	8015d54 <_printf_float+0x16c>
 8015d6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d74:	4299      	cmp	r1, r3
 8015d76:	db05      	blt.n	8015d84 <_printf_float+0x19c>
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	6121      	str	r1, [r4, #16]
 8015d7c:	07d8      	lsls	r0, r3, #31
 8015d7e:	d5ea      	bpl.n	8015d56 <_printf_float+0x16e>
 8015d80:	1c4b      	adds	r3, r1, #1
 8015d82:	e7e7      	b.n	8015d54 <_printf_float+0x16c>
 8015d84:	2900      	cmp	r1, #0
 8015d86:	bfd4      	ite	le
 8015d88:	f1c1 0202 	rsble	r2, r1, #2
 8015d8c:	2201      	movgt	r2, #1
 8015d8e:	4413      	add	r3, r2
 8015d90:	e7e0      	b.n	8015d54 <_printf_float+0x16c>
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	055a      	lsls	r2, r3, #21
 8015d96:	d407      	bmi.n	8015da8 <_printf_float+0x1c0>
 8015d98:	6923      	ldr	r3, [r4, #16]
 8015d9a:	4642      	mov	r2, r8
 8015d9c:	4631      	mov	r1, r6
 8015d9e:	4628      	mov	r0, r5
 8015da0:	47b8      	blx	r7
 8015da2:	3001      	adds	r0, #1
 8015da4:	d12a      	bne.n	8015dfc <_printf_float+0x214>
 8015da6:	e76b      	b.n	8015c80 <_printf_float+0x98>
 8015da8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015dac:	f240 80e0 	bls.w	8015f70 <_printf_float+0x388>
 8015db0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015db4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dbc:	d133      	bne.n	8015e26 <_printf_float+0x23e>
 8015dbe:	4a38      	ldr	r2, [pc, #224]	@ (8015ea0 <_printf_float+0x2b8>)
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	4631      	mov	r1, r6
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	47b8      	blx	r7
 8015dc8:	3001      	adds	r0, #1
 8015dca:	f43f af59 	beq.w	8015c80 <_printf_float+0x98>
 8015dce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015dd2:	4543      	cmp	r3, r8
 8015dd4:	db02      	blt.n	8015ddc <_printf_float+0x1f4>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	07d8      	lsls	r0, r3, #31
 8015dda:	d50f      	bpl.n	8015dfc <_printf_float+0x214>
 8015ddc:	9b05      	ldr	r3, [sp, #20]
 8015dde:	465a      	mov	r2, fp
 8015de0:	4631      	mov	r1, r6
 8015de2:	4628      	mov	r0, r5
 8015de4:	47b8      	blx	r7
 8015de6:	3001      	adds	r0, #1
 8015de8:	f43f af4a 	beq.w	8015c80 <_printf_float+0x98>
 8015dec:	f04f 0900 	mov.w	r9, #0
 8015df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8015df4:	f104 0a1a 	add.w	sl, r4, #26
 8015df8:	45c8      	cmp	r8, r9
 8015dfa:	dc09      	bgt.n	8015e10 <_printf_float+0x228>
 8015dfc:	6823      	ldr	r3, [r4, #0]
 8015dfe:	079b      	lsls	r3, r3, #30
 8015e00:	f100 8107 	bmi.w	8016012 <_printf_float+0x42a>
 8015e04:	68e0      	ldr	r0, [r4, #12]
 8015e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e08:	4298      	cmp	r0, r3
 8015e0a:	bfb8      	it	lt
 8015e0c:	4618      	movlt	r0, r3
 8015e0e:	e739      	b.n	8015c84 <_printf_float+0x9c>
 8015e10:	2301      	movs	r3, #1
 8015e12:	4652      	mov	r2, sl
 8015e14:	4631      	mov	r1, r6
 8015e16:	4628      	mov	r0, r5
 8015e18:	47b8      	blx	r7
 8015e1a:	3001      	adds	r0, #1
 8015e1c:	f43f af30 	beq.w	8015c80 <_printf_float+0x98>
 8015e20:	f109 0901 	add.w	r9, r9, #1
 8015e24:	e7e8      	b.n	8015df8 <_printf_float+0x210>
 8015e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	dc3b      	bgt.n	8015ea4 <_printf_float+0x2bc>
 8015e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8015ea0 <_printf_float+0x2b8>)
 8015e2e:	2301      	movs	r3, #1
 8015e30:	4631      	mov	r1, r6
 8015e32:	4628      	mov	r0, r5
 8015e34:	47b8      	blx	r7
 8015e36:	3001      	adds	r0, #1
 8015e38:	f43f af22 	beq.w	8015c80 <_printf_float+0x98>
 8015e3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015e40:	ea59 0303 	orrs.w	r3, r9, r3
 8015e44:	d102      	bne.n	8015e4c <_printf_float+0x264>
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	07d9      	lsls	r1, r3, #31
 8015e4a:	d5d7      	bpl.n	8015dfc <_printf_float+0x214>
 8015e4c:	9b05      	ldr	r3, [sp, #20]
 8015e4e:	465a      	mov	r2, fp
 8015e50:	4631      	mov	r1, r6
 8015e52:	4628      	mov	r0, r5
 8015e54:	47b8      	blx	r7
 8015e56:	3001      	adds	r0, #1
 8015e58:	f43f af12 	beq.w	8015c80 <_printf_float+0x98>
 8015e5c:	f04f 0a00 	mov.w	sl, #0
 8015e60:	f104 0b1a 	add.w	fp, r4, #26
 8015e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e66:	425b      	negs	r3, r3
 8015e68:	4553      	cmp	r3, sl
 8015e6a:	dc01      	bgt.n	8015e70 <_printf_float+0x288>
 8015e6c:	464b      	mov	r3, r9
 8015e6e:	e794      	b.n	8015d9a <_printf_float+0x1b2>
 8015e70:	2301      	movs	r3, #1
 8015e72:	465a      	mov	r2, fp
 8015e74:	4631      	mov	r1, r6
 8015e76:	4628      	mov	r0, r5
 8015e78:	47b8      	blx	r7
 8015e7a:	3001      	adds	r0, #1
 8015e7c:	f43f af00 	beq.w	8015c80 <_printf_float+0x98>
 8015e80:	f10a 0a01 	add.w	sl, sl, #1
 8015e84:	e7ee      	b.n	8015e64 <_printf_float+0x27c>
 8015e86:	bf00      	nop
 8015e88:	ffffffff 	.word	0xffffffff
 8015e8c:	7fefffff 	.word	0x7fefffff
 8015e90:	0802cc25 	.word	0x0802cc25
 8015e94:	0802cc29 	.word	0x0802cc29
 8015e98:	0802cc2d 	.word	0x0802cc2d
 8015e9c:	0802cc31 	.word	0x0802cc31
 8015ea0:	0802cc35 	.word	0x0802cc35
 8015ea4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015ea6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015eaa:	4553      	cmp	r3, sl
 8015eac:	bfa8      	it	ge
 8015eae:	4653      	movge	r3, sl
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	4699      	mov	r9, r3
 8015eb4:	dc37      	bgt.n	8015f26 <_printf_float+0x33e>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	9307      	str	r3, [sp, #28]
 8015eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ebe:	f104 021a 	add.w	r2, r4, #26
 8015ec2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015ec4:	9907      	ldr	r1, [sp, #28]
 8015ec6:	9306      	str	r3, [sp, #24]
 8015ec8:	eba3 0309 	sub.w	r3, r3, r9
 8015ecc:	428b      	cmp	r3, r1
 8015ece:	dc31      	bgt.n	8015f34 <_printf_float+0x34c>
 8015ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ed2:	459a      	cmp	sl, r3
 8015ed4:	dc3b      	bgt.n	8015f4e <_printf_float+0x366>
 8015ed6:	6823      	ldr	r3, [r4, #0]
 8015ed8:	07da      	lsls	r2, r3, #31
 8015eda:	d438      	bmi.n	8015f4e <_printf_float+0x366>
 8015edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ede:	ebaa 0903 	sub.w	r9, sl, r3
 8015ee2:	9b06      	ldr	r3, [sp, #24]
 8015ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8015ee8:	4599      	cmp	r9, r3
 8015eea:	bfa8      	it	ge
 8015eec:	4699      	movge	r9, r3
 8015eee:	f1b9 0f00 	cmp.w	r9, #0
 8015ef2:	dc34      	bgt.n	8015f5e <_printf_float+0x376>
 8015ef4:	f04f 0800 	mov.w	r8, #0
 8015ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015efc:	f104 0b1a 	add.w	fp, r4, #26
 8015f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f02:	ebaa 0303 	sub.w	r3, sl, r3
 8015f06:	eba3 0309 	sub.w	r3, r3, r9
 8015f0a:	4543      	cmp	r3, r8
 8015f0c:	f77f af76 	ble.w	8015dfc <_printf_float+0x214>
 8015f10:	2301      	movs	r3, #1
 8015f12:	465a      	mov	r2, fp
 8015f14:	4631      	mov	r1, r6
 8015f16:	4628      	mov	r0, r5
 8015f18:	47b8      	blx	r7
 8015f1a:	3001      	adds	r0, #1
 8015f1c:	f43f aeb0 	beq.w	8015c80 <_printf_float+0x98>
 8015f20:	f108 0801 	add.w	r8, r8, #1
 8015f24:	e7ec      	b.n	8015f00 <_printf_float+0x318>
 8015f26:	4642      	mov	r2, r8
 8015f28:	4631      	mov	r1, r6
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	47b8      	blx	r7
 8015f2e:	3001      	adds	r0, #1
 8015f30:	d1c1      	bne.n	8015eb6 <_printf_float+0x2ce>
 8015f32:	e6a5      	b.n	8015c80 <_printf_float+0x98>
 8015f34:	2301      	movs	r3, #1
 8015f36:	4631      	mov	r1, r6
 8015f38:	4628      	mov	r0, r5
 8015f3a:	9206      	str	r2, [sp, #24]
 8015f3c:	47b8      	blx	r7
 8015f3e:	3001      	adds	r0, #1
 8015f40:	f43f ae9e 	beq.w	8015c80 <_printf_float+0x98>
 8015f44:	9b07      	ldr	r3, [sp, #28]
 8015f46:	9a06      	ldr	r2, [sp, #24]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	9307      	str	r3, [sp, #28]
 8015f4c:	e7b9      	b.n	8015ec2 <_printf_float+0x2da>
 8015f4e:	9b05      	ldr	r3, [sp, #20]
 8015f50:	465a      	mov	r2, fp
 8015f52:	4631      	mov	r1, r6
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b8      	blx	r7
 8015f58:	3001      	adds	r0, #1
 8015f5a:	d1bf      	bne.n	8015edc <_printf_float+0x2f4>
 8015f5c:	e690      	b.n	8015c80 <_printf_float+0x98>
 8015f5e:	9a06      	ldr	r2, [sp, #24]
 8015f60:	464b      	mov	r3, r9
 8015f62:	4442      	add	r2, r8
 8015f64:	4631      	mov	r1, r6
 8015f66:	4628      	mov	r0, r5
 8015f68:	47b8      	blx	r7
 8015f6a:	3001      	adds	r0, #1
 8015f6c:	d1c2      	bne.n	8015ef4 <_printf_float+0x30c>
 8015f6e:	e687      	b.n	8015c80 <_printf_float+0x98>
 8015f70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015f74:	f1b9 0f01 	cmp.w	r9, #1
 8015f78:	dc01      	bgt.n	8015f7e <_printf_float+0x396>
 8015f7a:	07db      	lsls	r3, r3, #31
 8015f7c:	d536      	bpl.n	8015fec <_printf_float+0x404>
 8015f7e:	2301      	movs	r3, #1
 8015f80:	4642      	mov	r2, r8
 8015f82:	4631      	mov	r1, r6
 8015f84:	4628      	mov	r0, r5
 8015f86:	47b8      	blx	r7
 8015f88:	3001      	adds	r0, #1
 8015f8a:	f43f ae79 	beq.w	8015c80 <_printf_float+0x98>
 8015f8e:	9b05      	ldr	r3, [sp, #20]
 8015f90:	465a      	mov	r2, fp
 8015f92:	4631      	mov	r1, r6
 8015f94:	4628      	mov	r0, r5
 8015f96:	47b8      	blx	r7
 8015f98:	3001      	adds	r0, #1
 8015f9a:	f43f ae71 	beq.w	8015c80 <_printf_float+0x98>
 8015f9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015fa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015faa:	f109 39ff 	add.w	r9, r9, #4294967295
 8015fae:	d018      	beq.n	8015fe2 <_printf_float+0x3fa>
 8015fb0:	464b      	mov	r3, r9
 8015fb2:	f108 0201 	add.w	r2, r8, #1
 8015fb6:	4631      	mov	r1, r6
 8015fb8:	4628      	mov	r0, r5
 8015fba:	47b8      	blx	r7
 8015fbc:	3001      	adds	r0, #1
 8015fbe:	d10c      	bne.n	8015fda <_printf_float+0x3f2>
 8015fc0:	e65e      	b.n	8015c80 <_printf_float+0x98>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	465a      	mov	r2, fp
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	4628      	mov	r0, r5
 8015fca:	47b8      	blx	r7
 8015fcc:	3001      	adds	r0, #1
 8015fce:	f43f ae57 	beq.w	8015c80 <_printf_float+0x98>
 8015fd2:	f108 0801 	add.w	r8, r8, #1
 8015fd6:	45c8      	cmp	r8, r9
 8015fd8:	dbf3      	blt.n	8015fc2 <_printf_float+0x3da>
 8015fda:	4653      	mov	r3, sl
 8015fdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015fe0:	e6dc      	b.n	8015d9c <_printf_float+0x1b4>
 8015fe2:	f04f 0800 	mov.w	r8, #0
 8015fe6:	f104 0b1a 	add.w	fp, r4, #26
 8015fea:	e7f4      	b.n	8015fd6 <_printf_float+0x3ee>
 8015fec:	2301      	movs	r3, #1
 8015fee:	4642      	mov	r2, r8
 8015ff0:	e7e1      	b.n	8015fb6 <_printf_float+0x3ce>
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	464a      	mov	r2, r9
 8015ff6:	4631      	mov	r1, r6
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	47b8      	blx	r7
 8015ffc:	3001      	adds	r0, #1
 8015ffe:	f43f ae3f 	beq.w	8015c80 <_printf_float+0x98>
 8016002:	f108 0801 	add.w	r8, r8, #1
 8016006:	68e3      	ldr	r3, [r4, #12]
 8016008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801600a:	1a5b      	subs	r3, r3, r1
 801600c:	4543      	cmp	r3, r8
 801600e:	dcf0      	bgt.n	8015ff2 <_printf_float+0x40a>
 8016010:	e6f8      	b.n	8015e04 <_printf_float+0x21c>
 8016012:	f04f 0800 	mov.w	r8, #0
 8016016:	f104 0919 	add.w	r9, r4, #25
 801601a:	e7f4      	b.n	8016006 <_printf_float+0x41e>

0801601c <_printf_common>:
 801601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016020:	4616      	mov	r6, r2
 8016022:	4698      	mov	r8, r3
 8016024:	688a      	ldr	r2, [r1, #8]
 8016026:	690b      	ldr	r3, [r1, #16]
 8016028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801602c:	4293      	cmp	r3, r2
 801602e:	bfb8      	it	lt
 8016030:	4613      	movlt	r3, r2
 8016032:	6033      	str	r3, [r6, #0]
 8016034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016038:	4607      	mov	r7, r0
 801603a:	460c      	mov	r4, r1
 801603c:	b10a      	cbz	r2, 8016042 <_printf_common+0x26>
 801603e:	3301      	adds	r3, #1
 8016040:	6033      	str	r3, [r6, #0]
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	0699      	lsls	r1, r3, #26
 8016046:	bf42      	ittt	mi
 8016048:	6833      	ldrmi	r3, [r6, #0]
 801604a:	3302      	addmi	r3, #2
 801604c:	6033      	strmi	r3, [r6, #0]
 801604e:	6825      	ldr	r5, [r4, #0]
 8016050:	f015 0506 	ands.w	r5, r5, #6
 8016054:	d106      	bne.n	8016064 <_printf_common+0x48>
 8016056:	f104 0a19 	add.w	sl, r4, #25
 801605a:	68e3      	ldr	r3, [r4, #12]
 801605c:	6832      	ldr	r2, [r6, #0]
 801605e:	1a9b      	subs	r3, r3, r2
 8016060:	42ab      	cmp	r3, r5
 8016062:	dc26      	bgt.n	80160b2 <_printf_common+0x96>
 8016064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016068:	6822      	ldr	r2, [r4, #0]
 801606a:	3b00      	subs	r3, #0
 801606c:	bf18      	it	ne
 801606e:	2301      	movne	r3, #1
 8016070:	0692      	lsls	r2, r2, #26
 8016072:	d42b      	bmi.n	80160cc <_printf_common+0xb0>
 8016074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016078:	4641      	mov	r1, r8
 801607a:	4638      	mov	r0, r7
 801607c:	47c8      	blx	r9
 801607e:	3001      	adds	r0, #1
 8016080:	d01e      	beq.n	80160c0 <_printf_common+0xa4>
 8016082:	6823      	ldr	r3, [r4, #0]
 8016084:	6922      	ldr	r2, [r4, #16]
 8016086:	f003 0306 	and.w	r3, r3, #6
 801608a:	2b04      	cmp	r3, #4
 801608c:	bf02      	ittt	eq
 801608e:	68e5      	ldreq	r5, [r4, #12]
 8016090:	6833      	ldreq	r3, [r6, #0]
 8016092:	1aed      	subeq	r5, r5, r3
 8016094:	68a3      	ldr	r3, [r4, #8]
 8016096:	bf0c      	ite	eq
 8016098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801609c:	2500      	movne	r5, #0
 801609e:	4293      	cmp	r3, r2
 80160a0:	bfc4      	itt	gt
 80160a2:	1a9b      	subgt	r3, r3, r2
 80160a4:	18ed      	addgt	r5, r5, r3
 80160a6:	2600      	movs	r6, #0
 80160a8:	341a      	adds	r4, #26
 80160aa:	42b5      	cmp	r5, r6
 80160ac:	d11a      	bne.n	80160e4 <_printf_common+0xc8>
 80160ae:	2000      	movs	r0, #0
 80160b0:	e008      	b.n	80160c4 <_printf_common+0xa8>
 80160b2:	2301      	movs	r3, #1
 80160b4:	4652      	mov	r2, sl
 80160b6:	4641      	mov	r1, r8
 80160b8:	4638      	mov	r0, r7
 80160ba:	47c8      	blx	r9
 80160bc:	3001      	adds	r0, #1
 80160be:	d103      	bne.n	80160c8 <_printf_common+0xac>
 80160c0:	f04f 30ff 	mov.w	r0, #4294967295
 80160c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160c8:	3501      	adds	r5, #1
 80160ca:	e7c6      	b.n	801605a <_printf_common+0x3e>
 80160cc:	18e1      	adds	r1, r4, r3
 80160ce:	1c5a      	adds	r2, r3, #1
 80160d0:	2030      	movs	r0, #48	@ 0x30
 80160d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80160d6:	4422      	add	r2, r4
 80160d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80160dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80160e0:	3302      	adds	r3, #2
 80160e2:	e7c7      	b.n	8016074 <_printf_common+0x58>
 80160e4:	2301      	movs	r3, #1
 80160e6:	4622      	mov	r2, r4
 80160e8:	4641      	mov	r1, r8
 80160ea:	4638      	mov	r0, r7
 80160ec:	47c8      	blx	r9
 80160ee:	3001      	adds	r0, #1
 80160f0:	d0e6      	beq.n	80160c0 <_printf_common+0xa4>
 80160f2:	3601      	adds	r6, #1
 80160f4:	e7d9      	b.n	80160aa <_printf_common+0x8e>
	...

080160f8 <_printf_i>:
 80160f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160fc:	7e0f      	ldrb	r7, [r1, #24]
 80160fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016100:	2f78      	cmp	r7, #120	@ 0x78
 8016102:	4691      	mov	r9, r2
 8016104:	4680      	mov	r8, r0
 8016106:	460c      	mov	r4, r1
 8016108:	469a      	mov	sl, r3
 801610a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801610e:	d807      	bhi.n	8016120 <_printf_i+0x28>
 8016110:	2f62      	cmp	r7, #98	@ 0x62
 8016112:	d80a      	bhi.n	801612a <_printf_i+0x32>
 8016114:	2f00      	cmp	r7, #0
 8016116:	f000 80d2 	beq.w	80162be <_printf_i+0x1c6>
 801611a:	2f58      	cmp	r7, #88	@ 0x58
 801611c:	f000 80b9 	beq.w	8016292 <_printf_i+0x19a>
 8016120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016128:	e03a      	b.n	80161a0 <_printf_i+0xa8>
 801612a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801612e:	2b15      	cmp	r3, #21
 8016130:	d8f6      	bhi.n	8016120 <_printf_i+0x28>
 8016132:	a101      	add	r1, pc, #4	@ (adr r1, 8016138 <_printf_i+0x40>)
 8016134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016138:	08016191 	.word	0x08016191
 801613c:	080161a5 	.word	0x080161a5
 8016140:	08016121 	.word	0x08016121
 8016144:	08016121 	.word	0x08016121
 8016148:	08016121 	.word	0x08016121
 801614c:	08016121 	.word	0x08016121
 8016150:	080161a5 	.word	0x080161a5
 8016154:	08016121 	.word	0x08016121
 8016158:	08016121 	.word	0x08016121
 801615c:	08016121 	.word	0x08016121
 8016160:	08016121 	.word	0x08016121
 8016164:	080162a5 	.word	0x080162a5
 8016168:	080161cf 	.word	0x080161cf
 801616c:	0801625f 	.word	0x0801625f
 8016170:	08016121 	.word	0x08016121
 8016174:	08016121 	.word	0x08016121
 8016178:	080162c7 	.word	0x080162c7
 801617c:	08016121 	.word	0x08016121
 8016180:	080161cf 	.word	0x080161cf
 8016184:	08016121 	.word	0x08016121
 8016188:	08016121 	.word	0x08016121
 801618c:	08016267 	.word	0x08016267
 8016190:	6833      	ldr	r3, [r6, #0]
 8016192:	1d1a      	adds	r2, r3, #4
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	6032      	str	r2, [r6, #0]
 8016198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801619c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80161a0:	2301      	movs	r3, #1
 80161a2:	e09d      	b.n	80162e0 <_printf_i+0x1e8>
 80161a4:	6833      	ldr	r3, [r6, #0]
 80161a6:	6820      	ldr	r0, [r4, #0]
 80161a8:	1d19      	adds	r1, r3, #4
 80161aa:	6031      	str	r1, [r6, #0]
 80161ac:	0606      	lsls	r6, r0, #24
 80161ae:	d501      	bpl.n	80161b4 <_printf_i+0xbc>
 80161b0:	681d      	ldr	r5, [r3, #0]
 80161b2:	e003      	b.n	80161bc <_printf_i+0xc4>
 80161b4:	0645      	lsls	r5, r0, #25
 80161b6:	d5fb      	bpl.n	80161b0 <_printf_i+0xb8>
 80161b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80161bc:	2d00      	cmp	r5, #0
 80161be:	da03      	bge.n	80161c8 <_printf_i+0xd0>
 80161c0:	232d      	movs	r3, #45	@ 0x2d
 80161c2:	426d      	negs	r5, r5
 80161c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161c8:	4859      	ldr	r0, [pc, #356]	@ (8016330 <_printf_i+0x238>)
 80161ca:	230a      	movs	r3, #10
 80161cc:	e011      	b.n	80161f2 <_printf_i+0xfa>
 80161ce:	6821      	ldr	r1, [r4, #0]
 80161d0:	6833      	ldr	r3, [r6, #0]
 80161d2:	0608      	lsls	r0, r1, #24
 80161d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80161d8:	d402      	bmi.n	80161e0 <_printf_i+0xe8>
 80161da:	0649      	lsls	r1, r1, #25
 80161dc:	bf48      	it	mi
 80161de:	b2ad      	uxthmi	r5, r5
 80161e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80161e2:	4853      	ldr	r0, [pc, #332]	@ (8016330 <_printf_i+0x238>)
 80161e4:	6033      	str	r3, [r6, #0]
 80161e6:	bf14      	ite	ne
 80161e8:	230a      	movne	r3, #10
 80161ea:	2308      	moveq	r3, #8
 80161ec:	2100      	movs	r1, #0
 80161ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80161f2:	6866      	ldr	r6, [r4, #4]
 80161f4:	60a6      	str	r6, [r4, #8]
 80161f6:	2e00      	cmp	r6, #0
 80161f8:	bfa2      	ittt	ge
 80161fa:	6821      	ldrge	r1, [r4, #0]
 80161fc:	f021 0104 	bicge.w	r1, r1, #4
 8016200:	6021      	strge	r1, [r4, #0]
 8016202:	b90d      	cbnz	r5, 8016208 <_printf_i+0x110>
 8016204:	2e00      	cmp	r6, #0
 8016206:	d04b      	beq.n	80162a0 <_printf_i+0x1a8>
 8016208:	4616      	mov	r6, r2
 801620a:	fbb5 f1f3 	udiv	r1, r5, r3
 801620e:	fb03 5711 	mls	r7, r3, r1, r5
 8016212:	5dc7      	ldrb	r7, [r0, r7]
 8016214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016218:	462f      	mov	r7, r5
 801621a:	42bb      	cmp	r3, r7
 801621c:	460d      	mov	r5, r1
 801621e:	d9f4      	bls.n	801620a <_printf_i+0x112>
 8016220:	2b08      	cmp	r3, #8
 8016222:	d10b      	bne.n	801623c <_printf_i+0x144>
 8016224:	6823      	ldr	r3, [r4, #0]
 8016226:	07df      	lsls	r7, r3, #31
 8016228:	d508      	bpl.n	801623c <_printf_i+0x144>
 801622a:	6923      	ldr	r3, [r4, #16]
 801622c:	6861      	ldr	r1, [r4, #4]
 801622e:	4299      	cmp	r1, r3
 8016230:	bfde      	ittt	le
 8016232:	2330      	movle	r3, #48	@ 0x30
 8016234:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016238:	f106 36ff 	addle.w	r6, r6, #4294967295
 801623c:	1b92      	subs	r2, r2, r6
 801623e:	6122      	str	r2, [r4, #16]
 8016240:	f8cd a000 	str.w	sl, [sp]
 8016244:	464b      	mov	r3, r9
 8016246:	aa03      	add	r2, sp, #12
 8016248:	4621      	mov	r1, r4
 801624a:	4640      	mov	r0, r8
 801624c:	f7ff fee6 	bl	801601c <_printf_common>
 8016250:	3001      	adds	r0, #1
 8016252:	d14a      	bne.n	80162ea <_printf_i+0x1f2>
 8016254:	f04f 30ff 	mov.w	r0, #4294967295
 8016258:	b004      	add	sp, #16
 801625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801625e:	6823      	ldr	r3, [r4, #0]
 8016260:	f043 0320 	orr.w	r3, r3, #32
 8016264:	6023      	str	r3, [r4, #0]
 8016266:	4833      	ldr	r0, [pc, #204]	@ (8016334 <_printf_i+0x23c>)
 8016268:	2778      	movs	r7, #120	@ 0x78
 801626a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	6831      	ldr	r1, [r6, #0]
 8016272:	061f      	lsls	r7, r3, #24
 8016274:	f851 5b04 	ldr.w	r5, [r1], #4
 8016278:	d402      	bmi.n	8016280 <_printf_i+0x188>
 801627a:	065f      	lsls	r7, r3, #25
 801627c:	bf48      	it	mi
 801627e:	b2ad      	uxthmi	r5, r5
 8016280:	6031      	str	r1, [r6, #0]
 8016282:	07d9      	lsls	r1, r3, #31
 8016284:	bf44      	itt	mi
 8016286:	f043 0320 	orrmi.w	r3, r3, #32
 801628a:	6023      	strmi	r3, [r4, #0]
 801628c:	b11d      	cbz	r5, 8016296 <_printf_i+0x19e>
 801628e:	2310      	movs	r3, #16
 8016290:	e7ac      	b.n	80161ec <_printf_i+0xf4>
 8016292:	4827      	ldr	r0, [pc, #156]	@ (8016330 <_printf_i+0x238>)
 8016294:	e7e9      	b.n	801626a <_printf_i+0x172>
 8016296:	6823      	ldr	r3, [r4, #0]
 8016298:	f023 0320 	bic.w	r3, r3, #32
 801629c:	6023      	str	r3, [r4, #0]
 801629e:	e7f6      	b.n	801628e <_printf_i+0x196>
 80162a0:	4616      	mov	r6, r2
 80162a2:	e7bd      	b.n	8016220 <_printf_i+0x128>
 80162a4:	6833      	ldr	r3, [r6, #0]
 80162a6:	6825      	ldr	r5, [r4, #0]
 80162a8:	6961      	ldr	r1, [r4, #20]
 80162aa:	1d18      	adds	r0, r3, #4
 80162ac:	6030      	str	r0, [r6, #0]
 80162ae:	062e      	lsls	r6, r5, #24
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	d501      	bpl.n	80162b8 <_printf_i+0x1c0>
 80162b4:	6019      	str	r1, [r3, #0]
 80162b6:	e002      	b.n	80162be <_printf_i+0x1c6>
 80162b8:	0668      	lsls	r0, r5, #25
 80162ba:	d5fb      	bpl.n	80162b4 <_printf_i+0x1bc>
 80162bc:	8019      	strh	r1, [r3, #0]
 80162be:	2300      	movs	r3, #0
 80162c0:	6123      	str	r3, [r4, #16]
 80162c2:	4616      	mov	r6, r2
 80162c4:	e7bc      	b.n	8016240 <_printf_i+0x148>
 80162c6:	6833      	ldr	r3, [r6, #0]
 80162c8:	1d1a      	adds	r2, r3, #4
 80162ca:	6032      	str	r2, [r6, #0]
 80162cc:	681e      	ldr	r6, [r3, #0]
 80162ce:	6862      	ldr	r2, [r4, #4]
 80162d0:	2100      	movs	r1, #0
 80162d2:	4630      	mov	r0, r6
 80162d4:	f7ea f82c 	bl	8000330 <memchr>
 80162d8:	b108      	cbz	r0, 80162de <_printf_i+0x1e6>
 80162da:	1b80      	subs	r0, r0, r6
 80162dc:	6060      	str	r0, [r4, #4]
 80162de:	6863      	ldr	r3, [r4, #4]
 80162e0:	6123      	str	r3, [r4, #16]
 80162e2:	2300      	movs	r3, #0
 80162e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162e8:	e7aa      	b.n	8016240 <_printf_i+0x148>
 80162ea:	6923      	ldr	r3, [r4, #16]
 80162ec:	4632      	mov	r2, r6
 80162ee:	4649      	mov	r1, r9
 80162f0:	4640      	mov	r0, r8
 80162f2:	47d0      	blx	sl
 80162f4:	3001      	adds	r0, #1
 80162f6:	d0ad      	beq.n	8016254 <_printf_i+0x15c>
 80162f8:	6823      	ldr	r3, [r4, #0]
 80162fa:	079b      	lsls	r3, r3, #30
 80162fc:	d413      	bmi.n	8016326 <_printf_i+0x22e>
 80162fe:	68e0      	ldr	r0, [r4, #12]
 8016300:	9b03      	ldr	r3, [sp, #12]
 8016302:	4298      	cmp	r0, r3
 8016304:	bfb8      	it	lt
 8016306:	4618      	movlt	r0, r3
 8016308:	e7a6      	b.n	8016258 <_printf_i+0x160>
 801630a:	2301      	movs	r3, #1
 801630c:	4632      	mov	r2, r6
 801630e:	4649      	mov	r1, r9
 8016310:	4640      	mov	r0, r8
 8016312:	47d0      	blx	sl
 8016314:	3001      	adds	r0, #1
 8016316:	d09d      	beq.n	8016254 <_printf_i+0x15c>
 8016318:	3501      	adds	r5, #1
 801631a:	68e3      	ldr	r3, [r4, #12]
 801631c:	9903      	ldr	r1, [sp, #12]
 801631e:	1a5b      	subs	r3, r3, r1
 8016320:	42ab      	cmp	r3, r5
 8016322:	dcf2      	bgt.n	801630a <_printf_i+0x212>
 8016324:	e7eb      	b.n	80162fe <_printf_i+0x206>
 8016326:	2500      	movs	r5, #0
 8016328:	f104 0619 	add.w	r6, r4, #25
 801632c:	e7f5      	b.n	801631a <_printf_i+0x222>
 801632e:	bf00      	nop
 8016330:	0802cc37 	.word	0x0802cc37
 8016334:	0802cc48 	.word	0x0802cc48

08016338 <std>:
 8016338:	2300      	movs	r3, #0
 801633a:	b510      	push	{r4, lr}
 801633c:	4604      	mov	r4, r0
 801633e:	e9c0 3300 	strd	r3, r3, [r0]
 8016342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016346:	6083      	str	r3, [r0, #8]
 8016348:	8181      	strh	r1, [r0, #12]
 801634a:	6643      	str	r3, [r0, #100]	@ 0x64
 801634c:	81c2      	strh	r2, [r0, #14]
 801634e:	6183      	str	r3, [r0, #24]
 8016350:	4619      	mov	r1, r3
 8016352:	2208      	movs	r2, #8
 8016354:	305c      	adds	r0, #92	@ 0x5c
 8016356:	f000 fa43 	bl	80167e0 <memset>
 801635a:	4b0d      	ldr	r3, [pc, #52]	@ (8016390 <std+0x58>)
 801635c:	6263      	str	r3, [r4, #36]	@ 0x24
 801635e:	4b0d      	ldr	r3, [pc, #52]	@ (8016394 <std+0x5c>)
 8016360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016362:	4b0d      	ldr	r3, [pc, #52]	@ (8016398 <std+0x60>)
 8016364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016366:	4b0d      	ldr	r3, [pc, #52]	@ (801639c <std+0x64>)
 8016368:	6323      	str	r3, [r4, #48]	@ 0x30
 801636a:	4b0d      	ldr	r3, [pc, #52]	@ (80163a0 <std+0x68>)
 801636c:	6224      	str	r4, [r4, #32]
 801636e:	429c      	cmp	r4, r3
 8016370:	d006      	beq.n	8016380 <std+0x48>
 8016372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016376:	4294      	cmp	r4, r2
 8016378:	d002      	beq.n	8016380 <std+0x48>
 801637a:	33d0      	adds	r3, #208	@ 0xd0
 801637c:	429c      	cmp	r4, r3
 801637e:	d105      	bne.n	801638c <std+0x54>
 8016380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016388:	f000 bac2 	b.w	8016910 <__retarget_lock_init_recursive>
 801638c:	bd10      	pop	{r4, pc}
 801638e:	bf00      	nop
 8016390:	080165dd 	.word	0x080165dd
 8016394:	080165ff 	.word	0x080165ff
 8016398:	08016637 	.word	0x08016637
 801639c:	0801665b 	.word	0x0801665b
 80163a0:	200101d4 	.word	0x200101d4

080163a4 <stdio_exit_handler>:
 80163a4:	4a02      	ldr	r2, [pc, #8]	@ (80163b0 <stdio_exit_handler+0xc>)
 80163a6:	4903      	ldr	r1, [pc, #12]	@ (80163b4 <stdio_exit_handler+0x10>)
 80163a8:	4803      	ldr	r0, [pc, #12]	@ (80163b8 <stdio_exit_handler+0x14>)
 80163aa:	f000 b869 	b.w	8016480 <_fwalk_sglue>
 80163ae:	bf00      	nop
 80163b0:	20000030 	.word	0x20000030
 80163b4:	0801846d 	.word	0x0801846d
 80163b8:	20000040 	.word	0x20000040

080163bc <cleanup_stdio>:
 80163bc:	6841      	ldr	r1, [r0, #4]
 80163be:	4b0c      	ldr	r3, [pc, #48]	@ (80163f0 <cleanup_stdio+0x34>)
 80163c0:	4299      	cmp	r1, r3
 80163c2:	b510      	push	{r4, lr}
 80163c4:	4604      	mov	r4, r0
 80163c6:	d001      	beq.n	80163cc <cleanup_stdio+0x10>
 80163c8:	f002 f850 	bl	801846c <_fflush_r>
 80163cc:	68a1      	ldr	r1, [r4, #8]
 80163ce:	4b09      	ldr	r3, [pc, #36]	@ (80163f4 <cleanup_stdio+0x38>)
 80163d0:	4299      	cmp	r1, r3
 80163d2:	d002      	beq.n	80163da <cleanup_stdio+0x1e>
 80163d4:	4620      	mov	r0, r4
 80163d6:	f002 f849 	bl	801846c <_fflush_r>
 80163da:	68e1      	ldr	r1, [r4, #12]
 80163dc:	4b06      	ldr	r3, [pc, #24]	@ (80163f8 <cleanup_stdio+0x3c>)
 80163de:	4299      	cmp	r1, r3
 80163e0:	d004      	beq.n	80163ec <cleanup_stdio+0x30>
 80163e2:	4620      	mov	r0, r4
 80163e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163e8:	f002 b840 	b.w	801846c <_fflush_r>
 80163ec:	bd10      	pop	{r4, pc}
 80163ee:	bf00      	nop
 80163f0:	200101d4 	.word	0x200101d4
 80163f4:	2001023c 	.word	0x2001023c
 80163f8:	200102a4 	.word	0x200102a4

080163fc <global_stdio_init.part.0>:
 80163fc:	b510      	push	{r4, lr}
 80163fe:	4b0b      	ldr	r3, [pc, #44]	@ (801642c <global_stdio_init.part.0+0x30>)
 8016400:	4c0b      	ldr	r4, [pc, #44]	@ (8016430 <global_stdio_init.part.0+0x34>)
 8016402:	4a0c      	ldr	r2, [pc, #48]	@ (8016434 <global_stdio_init.part.0+0x38>)
 8016404:	601a      	str	r2, [r3, #0]
 8016406:	4620      	mov	r0, r4
 8016408:	2200      	movs	r2, #0
 801640a:	2104      	movs	r1, #4
 801640c:	f7ff ff94 	bl	8016338 <std>
 8016410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016414:	2201      	movs	r2, #1
 8016416:	2109      	movs	r1, #9
 8016418:	f7ff ff8e 	bl	8016338 <std>
 801641c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016420:	2202      	movs	r2, #2
 8016422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016426:	2112      	movs	r1, #18
 8016428:	f7ff bf86 	b.w	8016338 <std>
 801642c:	2001030c 	.word	0x2001030c
 8016430:	200101d4 	.word	0x200101d4
 8016434:	080163a5 	.word	0x080163a5

08016438 <__sfp_lock_acquire>:
 8016438:	4801      	ldr	r0, [pc, #4]	@ (8016440 <__sfp_lock_acquire+0x8>)
 801643a:	f000 ba6a 	b.w	8016912 <__retarget_lock_acquire_recursive>
 801643e:	bf00      	nop
 8016440:	20010311 	.word	0x20010311

08016444 <__sfp_lock_release>:
 8016444:	4801      	ldr	r0, [pc, #4]	@ (801644c <__sfp_lock_release+0x8>)
 8016446:	f000 ba65 	b.w	8016914 <__retarget_lock_release_recursive>
 801644a:	bf00      	nop
 801644c:	20010311 	.word	0x20010311

08016450 <__sinit>:
 8016450:	b510      	push	{r4, lr}
 8016452:	4604      	mov	r4, r0
 8016454:	f7ff fff0 	bl	8016438 <__sfp_lock_acquire>
 8016458:	6a23      	ldr	r3, [r4, #32]
 801645a:	b11b      	cbz	r3, 8016464 <__sinit+0x14>
 801645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016460:	f7ff bff0 	b.w	8016444 <__sfp_lock_release>
 8016464:	4b04      	ldr	r3, [pc, #16]	@ (8016478 <__sinit+0x28>)
 8016466:	6223      	str	r3, [r4, #32]
 8016468:	4b04      	ldr	r3, [pc, #16]	@ (801647c <__sinit+0x2c>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d1f5      	bne.n	801645c <__sinit+0xc>
 8016470:	f7ff ffc4 	bl	80163fc <global_stdio_init.part.0>
 8016474:	e7f2      	b.n	801645c <__sinit+0xc>
 8016476:	bf00      	nop
 8016478:	080163bd 	.word	0x080163bd
 801647c:	2001030c 	.word	0x2001030c

08016480 <_fwalk_sglue>:
 8016480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016484:	4607      	mov	r7, r0
 8016486:	4688      	mov	r8, r1
 8016488:	4614      	mov	r4, r2
 801648a:	2600      	movs	r6, #0
 801648c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016490:	f1b9 0901 	subs.w	r9, r9, #1
 8016494:	d505      	bpl.n	80164a2 <_fwalk_sglue+0x22>
 8016496:	6824      	ldr	r4, [r4, #0]
 8016498:	2c00      	cmp	r4, #0
 801649a:	d1f7      	bne.n	801648c <_fwalk_sglue+0xc>
 801649c:	4630      	mov	r0, r6
 801649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164a2:	89ab      	ldrh	r3, [r5, #12]
 80164a4:	2b01      	cmp	r3, #1
 80164a6:	d907      	bls.n	80164b8 <_fwalk_sglue+0x38>
 80164a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164ac:	3301      	adds	r3, #1
 80164ae:	d003      	beq.n	80164b8 <_fwalk_sglue+0x38>
 80164b0:	4629      	mov	r1, r5
 80164b2:	4638      	mov	r0, r7
 80164b4:	47c0      	blx	r8
 80164b6:	4306      	orrs	r6, r0
 80164b8:	3568      	adds	r5, #104	@ 0x68
 80164ba:	e7e9      	b.n	8016490 <_fwalk_sglue+0x10>

080164bc <iprintf>:
 80164bc:	b40f      	push	{r0, r1, r2, r3}
 80164be:	b507      	push	{r0, r1, r2, lr}
 80164c0:	4906      	ldr	r1, [pc, #24]	@ (80164dc <iprintf+0x20>)
 80164c2:	ab04      	add	r3, sp, #16
 80164c4:	6808      	ldr	r0, [r1, #0]
 80164c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80164ca:	6881      	ldr	r1, [r0, #8]
 80164cc:	9301      	str	r3, [sp, #4]
 80164ce:	f001 fe31 	bl	8018134 <_vfiprintf_r>
 80164d2:	b003      	add	sp, #12
 80164d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80164d8:	b004      	add	sp, #16
 80164da:	4770      	bx	lr
 80164dc:	2000003c 	.word	0x2000003c

080164e0 <_puts_r>:
 80164e0:	6a03      	ldr	r3, [r0, #32]
 80164e2:	b570      	push	{r4, r5, r6, lr}
 80164e4:	6884      	ldr	r4, [r0, #8]
 80164e6:	4605      	mov	r5, r0
 80164e8:	460e      	mov	r6, r1
 80164ea:	b90b      	cbnz	r3, 80164f0 <_puts_r+0x10>
 80164ec:	f7ff ffb0 	bl	8016450 <__sinit>
 80164f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80164f2:	07db      	lsls	r3, r3, #31
 80164f4:	d405      	bmi.n	8016502 <_puts_r+0x22>
 80164f6:	89a3      	ldrh	r3, [r4, #12]
 80164f8:	0598      	lsls	r0, r3, #22
 80164fa:	d402      	bmi.n	8016502 <_puts_r+0x22>
 80164fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80164fe:	f000 fa08 	bl	8016912 <__retarget_lock_acquire_recursive>
 8016502:	89a3      	ldrh	r3, [r4, #12]
 8016504:	0719      	lsls	r1, r3, #28
 8016506:	d502      	bpl.n	801650e <_puts_r+0x2e>
 8016508:	6923      	ldr	r3, [r4, #16]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d135      	bne.n	801657a <_puts_r+0x9a>
 801650e:	4621      	mov	r1, r4
 8016510:	4628      	mov	r0, r5
 8016512:	f000 f8e5 	bl	80166e0 <__swsetup_r>
 8016516:	b380      	cbz	r0, 801657a <_puts_r+0x9a>
 8016518:	f04f 35ff 	mov.w	r5, #4294967295
 801651c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801651e:	07da      	lsls	r2, r3, #31
 8016520:	d405      	bmi.n	801652e <_puts_r+0x4e>
 8016522:	89a3      	ldrh	r3, [r4, #12]
 8016524:	059b      	lsls	r3, r3, #22
 8016526:	d402      	bmi.n	801652e <_puts_r+0x4e>
 8016528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801652a:	f000 f9f3 	bl	8016914 <__retarget_lock_release_recursive>
 801652e:	4628      	mov	r0, r5
 8016530:	bd70      	pop	{r4, r5, r6, pc}
 8016532:	2b00      	cmp	r3, #0
 8016534:	da04      	bge.n	8016540 <_puts_r+0x60>
 8016536:	69a2      	ldr	r2, [r4, #24]
 8016538:	429a      	cmp	r2, r3
 801653a:	dc17      	bgt.n	801656c <_puts_r+0x8c>
 801653c:	290a      	cmp	r1, #10
 801653e:	d015      	beq.n	801656c <_puts_r+0x8c>
 8016540:	6823      	ldr	r3, [r4, #0]
 8016542:	1c5a      	adds	r2, r3, #1
 8016544:	6022      	str	r2, [r4, #0]
 8016546:	7019      	strb	r1, [r3, #0]
 8016548:	68a3      	ldr	r3, [r4, #8]
 801654a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801654e:	3b01      	subs	r3, #1
 8016550:	60a3      	str	r3, [r4, #8]
 8016552:	2900      	cmp	r1, #0
 8016554:	d1ed      	bne.n	8016532 <_puts_r+0x52>
 8016556:	2b00      	cmp	r3, #0
 8016558:	da11      	bge.n	801657e <_puts_r+0x9e>
 801655a:	4622      	mov	r2, r4
 801655c:	210a      	movs	r1, #10
 801655e:	4628      	mov	r0, r5
 8016560:	f000 f87f 	bl	8016662 <__swbuf_r>
 8016564:	3001      	adds	r0, #1
 8016566:	d0d7      	beq.n	8016518 <_puts_r+0x38>
 8016568:	250a      	movs	r5, #10
 801656a:	e7d7      	b.n	801651c <_puts_r+0x3c>
 801656c:	4622      	mov	r2, r4
 801656e:	4628      	mov	r0, r5
 8016570:	f000 f877 	bl	8016662 <__swbuf_r>
 8016574:	3001      	adds	r0, #1
 8016576:	d1e7      	bne.n	8016548 <_puts_r+0x68>
 8016578:	e7ce      	b.n	8016518 <_puts_r+0x38>
 801657a:	3e01      	subs	r6, #1
 801657c:	e7e4      	b.n	8016548 <_puts_r+0x68>
 801657e:	6823      	ldr	r3, [r4, #0]
 8016580:	1c5a      	adds	r2, r3, #1
 8016582:	6022      	str	r2, [r4, #0]
 8016584:	220a      	movs	r2, #10
 8016586:	701a      	strb	r2, [r3, #0]
 8016588:	e7ee      	b.n	8016568 <_puts_r+0x88>
	...

0801658c <puts>:
 801658c:	4b02      	ldr	r3, [pc, #8]	@ (8016598 <puts+0xc>)
 801658e:	4601      	mov	r1, r0
 8016590:	6818      	ldr	r0, [r3, #0]
 8016592:	f7ff bfa5 	b.w	80164e0 <_puts_r>
 8016596:	bf00      	nop
 8016598:	2000003c 	.word	0x2000003c

0801659c <siprintf>:
 801659c:	b40e      	push	{r1, r2, r3}
 801659e:	b500      	push	{lr}
 80165a0:	b09c      	sub	sp, #112	@ 0x70
 80165a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80165a4:	9002      	str	r0, [sp, #8]
 80165a6:	9006      	str	r0, [sp, #24]
 80165a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80165ac:	4809      	ldr	r0, [pc, #36]	@ (80165d4 <siprintf+0x38>)
 80165ae:	9107      	str	r1, [sp, #28]
 80165b0:	9104      	str	r1, [sp, #16]
 80165b2:	4909      	ldr	r1, [pc, #36]	@ (80165d8 <siprintf+0x3c>)
 80165b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80165b8:	9105      	str	r1, [sp, #20]
 80165ba:	6800      	ldr	r0, [r0, #0]
 80165bc:	9301      	str	r3, [sp, #4]
 80165be:	a902      	add	r1, sp, #8
 80165c0:	f001 fc92 	bl	8017ee8 <_svfiprintf_r>
 80165c4:	9b02      	ldr	r3, [sp, #8]
 80165c6:	2200      	movs	r2, #0
 80165c8:	701a      	strb	r2, [r3, #0]
 80165ca:	b01c      	add	sp, #112	@ 0x70
 80165cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80165d0:	b003      	add	sp, #12
 80165d2:	4770      	bx	lr
 80165d4:	2000003c 	.word	0x2000003c
 80165d8:	ffff0208 	.word	0xffff0208

080165dc <__sread>:
 80165dc:	b510      	push	{r4, lr}
 80165de:	460c      	mov	r4, r1
 80165e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165e4:	f000 f946 	bl	8016874 <_read_r>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	bfab      	itete	ge
 80165ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80165ee:	89a3      	ldrhlt	r3, [r4, #12]
 80165f0:	181b      	addge	r3, r3, r0
 80165f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80165f6:	bfac      	ite	ge
 80165f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80165fa:	81a3      	strhlt	r3, [r4, #12]
 80165fc:	bd10      	pop	{r4, pc}

080165fe <__swrite>:
 80165fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016602:	461f      	mov	r7, r3
 8016604:	898b      	ldrh	r3, [r1, #12]
 8016606:	05db      	lsls	r3, r3, #23
 8016608:	4605      	mov	r5, r0
 801660a:	460c      	mov	r4, r1
 801660c:	4616      	mov	r6, r2
 801660e:	d505      	bpl.n	801661c <__swrite+0x1e>
 8016610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016614:	2302      	movs	r3, #2
 8016616:	2200      	movs	r2, #0
 8016618:	f000 f91a 	bl	8016850 <_lseek_r>
 801661c:	89a3      	ldrh	r3, [r4, #12]
 801661e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016626:	81a3      	strh	r3, [r4, #12]
 8016628:	4632      	mov	r2, r6
 801662a:	463b      	mov	r3, r7
 801662c:	4628      	mov	r0, r5
 801662e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016632:	f000 b931 	b.w	8016898 <_write_r>

08016636 <__sseek>:
 8016636:	b510      	push	{r4, lr}
 8016638:	460c      	mov	r4, r1
 801663a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801663e:	f000 f907 	bl	8016850 <_lseek_r>
 8016642:	1c43      	adds	r3, r0, #1
 8016644:	89a3      	ldrh	r3, [r4, #12]
 8016646:	bf15      	itete	ne
 8016648:	6560      	strne	r0, [r4, #84]	@ 0x54
 801664a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801664e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016652:	81a3      	strheq	r3, [r4, #12]
 8016654:	bf18      	it	ne
 8016656:	81a3      	strhne	r3, [r4, #12]
 8016658:	bd10      	pop	{r4, pc}

0801665a <__sclose>:
 801665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801665e:	f000 b8e7 	b.w	8016830 <_close_r>

08016662 <__swbuf_r>:
 8016662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016664:	460e      	mov	r6, r1
 8016666:	4614      	mov	r4, r2
 8016668:	4605      	mov	r5, r0
 801666a:	b118      	cbz	r0, 8016674 <__swbuf_r+0x12>
 801666c:	6a03      	ldr	r3, [r0, #32]
 801666e:	b90b      	cbnz	r3, 8016674 <__swbuf_r+0x12>
 8016670:	f7ff feee 	bl	8016450 <__sinit>
 8016674:	69a3      	ldr	r3, [r4, #24]
 8016676:	60a3      	str	r3, [r4, #8]
 8016678:	89a3      	ldrh	r3, [r4, #12]
 801667a:	071a      	lsls	r2, r3, #28
 801667c:	d501      	bpl.n	8016682 <__swbuf_r+0x20>
 801667e:	6923      	ldr	r3, [r4, #16]
 8016680:	b943      	cbnz	r3, 8016694 <__swbuf_r+0x32>
 8016682:	4621      	mov	r1, r4
 8016684:	4628      	mov	r0, r5
 8016686:	f000 f82b 	bl	80166e0 <__swsetup_r>
 801668a:	b118      	cbz	r0, 8016694 <__swbuf_r+0x32>
 801668c:	f04f 37ff 	mov.w	r7, #4294967295
 8016690:	4638      	mov	r0, r7
 8016692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	6922      	ldr	r2, [r4, #16]
 8016698:	1a98      	subs	r0, r3, r2
 801669a:	6963      	ldr	r3, [r4, #20]
 801669c:	b2f6      	uxtb	r6, r6
 801669e:	4283      	cmp	r3, r0
 80166a0:	4637      	mov	r7, r6
 80166a2:	dc05      	bgt.n	80166b0 <__swbuf_r+0x4e>
 80166a4:	4621      	mov	r1, r4
 80166a6:	4628      	mov	r0, r5
 80166a8:	f001 fee0 	bl	801846c <_fflush_r>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d1ed      	bne.n	801668c <__swbuf_r+0x2a>
 80166b0:	68a3      	ldr	r3, [r4, #8]
 80166b2:	3b01      	subs	r3, #1
 80166b4:	60a3      	str	r3, [r4, #8]
 80166b6:	6823      	ldr	r3, [r4, #0]
 80166b8:	1c5a      	adds	r2, r3, #1
 80166ba:	6022      	str	r2, [r4, #0]
 80166bc:	701e      	strb	r6, [r3, #0]
 80166be:	6962      	ldr	r2, [r4, #20]
 80166c0:	1c43      	adds	r3, r0, #1
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d004      	beq.n	80166d0 <__swbuf_r+0x6e>
 80166c6:	89a3      	ldrh	r3, [r4, #12]
 80166c8:	07db      	lsls	r3, r3, #31
 80166ca:	d5e1      	bpl.n	8016690 <__swbuf_r+0x2e>
 80166cc:	2e0a      	cmp	r6, #10
 80166ce:	d1df      	bne.n	8016690 <__swbuf_r+0x2e>
 80166d0:	4621      	mov	r1, r4
 80166d2:	4628      	mov	r0, r5
 80166d4:	f001 feca 	bl	801846c <_fflush_r>
 80166d8:	2800      	cmp	r0, #0
 80166da:	d0d9      	beq.n	8016690 <__swbuf_r+0x2e>
 80166dc:	e7d6      	b.n	801668c <__swbuf_r+0x2a>
	...

080166e0 <__swsetup_r>:
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	4b29      	ldr	r3, [pc, #164]	@ (8016788 <__swsetup_r+0xa8>)
 80166e4:	4605      	mov	r5, r0
 80166e6:	6818      	ldr	r0, [r3, #0]
 80166e8:	460c      	mov	r4, r1
 80166ea:	b118      	cbz	r0, 80166f4 <__swsetup_r+0x14>
 80166ec:	6a03      	ldr	r3, [r0, #32]
 80166ee:	b90b      	cbnz	r3, 80166f4 <__swsetup_r+0x14>
 80166f0:	f7ff feae 	bl	8016450 <__sinit>
 80166f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166f8:	0719      	lsls	r1, r3, #28
 80166fa:	d422      	bmi.n	8016742 <__swsetup_r+0x62>
 80166fc:	06da      	lsls	r2, r3, #27
 80166fe:	d407      	bmi.n	8016710 <__swsetup_r+0x30>
 8016700:	2209      	movs	r2, #9
 8016702:	602a      	str	r2, [r5, #0]
 8016704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016708:	81a3      	strh	r3, [r4, #12]
 801670a:	f04f 30ff 	mov.w	r0, #4294967295
 801670e:	e033      	b.n	8016778 <__swsetup_r+0x98>
 8016710:	0758      	lsls	r0, r3, #29
 8016712:	d512      	bpl.n	801673a <__swsetup_r+0x5a>
 8016714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016716:	b141      	cbz	r1, 801672a <__swsetup_r+0x4a>
 8016718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801671c:	4299      	cmp	r1, r3
 801671e:	d002      	beq.n	8016726 <__swsetup_r+0x46>
 8016720:	4628      	mov	r0, r5
 8016722:	f000 ff03 	bl	801752c <_free_r>
 8016726:	2300      	movs	r3, #0
 8016728:	6363      	str	r3, [r4, #52]	@ 0x34
 801672a:	89a3      	ldrh	r3, [r4, #12]
 801672c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016730:	81a3      	strh	r3, [r4, #12]
 8016732:	2300      	movs	r3, #0
 8016734:	6063      	str	r3, [r4, #4]
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	6023      	str	r3, [r4, #0]
 801673a:	89a3      	ldrh	r3, [r4, #12]
 801673c:	f043 0308 	orr.w	r3, r3, #8
 8016740:	81a3      	strh	r3, [r4, #12]
 8016742:	6923      	ldr	r3, [r4, #16]
 8016744:	b94b      	cbnz	r3, 801675a <__swsetup_r+0x7a>
 8016746:	89a3      	ldrh	r3, [r4, #12]
 8016748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801674c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016750:	d003      	beq.n	801675a <__swsetup_r+0x7a>
 8016752:	4621      	mov	r1, r4
 8016754:	4628      	mov	r0, r5
 8016756:	f001 fee9 	bl	801852c <__smakebuf_r>
 801675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801675e:	f013 0201 	ands.w	r2, r3, #1
 8016762:	d00a      	beq.n	801677a <__swsetup_r+0x9a>
 8016764:	2200      	movs	r2, #0
 8016766:	60a2      	str	r2, [r4, #8]
 8016768:	6962      	ldr	r2, [r4, #20]
 801676a:	4252      	negs	r2, r2
 801676c:	61a2      	str	r2, [r4, #24]
 801676e:	6922      	ldr	r2, [r4, #16]
 8016770:	b942      	cbnz	r2, 8016784 <__swsetup_r+0xa4>
 8016772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016776:	d1c5      	bne.n	8016704 <__swsetup_r+0x24>
 8016778:	bd38      	pop	{r3, r4, r5, pc}
 801677a:	0799      	lsls	r1, r3, #30
 801677c:	bf58      	it	pl
 801677e:	6962      	ldrpl	r2, [r4, #20]
 8016780:	60a2      	str	r2, [r4, #8]
 8016782:	e7f4      	b.n	801676e <__swsetup_r+0x8e>
 8016784:	2000      	movs	r0, #0
 8016786:	e7f7      	b.n	8016778 <__swsetup_r+0x98>
 8016788:	2000003c 	.word	0x2000003c

0801678c <memcmp>:
 801678c:	b510      	push	{r4, lr}
 801678e:	3901      	subs	r1, #1
 8016790:	4402      	add	r2, r0
 8016792:	4290      	cmp	r0, r2
 8016794:	d101      	bne.n	801679a <memcmp+0xe>
 8016796:	2000      	movs	r0, #0
 8016798:	e005      	b.n	80167a6 <memcmp+0x1a>
 801679a:	7803      	ldrb	r3, [r0, #0]
 801679c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80167a0:	42a3      	cmp	r3, r4
 80167a2:	d001      	beq.n	80167a8 <memcmp+0x1c>
 80167a4:	1b18      	subs	r0, r3, r4
 80167a6:	bd10      	pop	{r4, pc}
 80167a8:	3001      	adds	r0, #1
 80167aa:	e7f2      	b.n	8016792 <memcmp+0x6>

080167ac <memmove>:
 80167ac:	4288      	cmp	r0, r1
 80167ae:	b510      	push	{r4, lr}
 80167b0:	eb01 0402 	add.w	r4, r1, r2
 80167b4:	d902      	bls.n	80167bc <memmove+0x10>
 80167b6:	4284      	cmp	r4, r0
 80167b8:	4623      	mov	r3, r4
 80167ba:	d807      	bhi.n	80167cc <memmove+0x20>
 80167bc:	1e43      	subs	r3, r0, #1
 80167be:	42a1      	cmp	r1, r4
 80167c0:	d008      	beq.n	80167d4 <memmove+0x28>
 80167c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80167ca:	e7f8      	b.n	80167be <memmove+0x12>
 80167cc:	4402      	add	r2, r0
 80167ce:	4601      	mov	r1, r0
 80167d0:	428a      	cmp	r2, r1
 80167d2:	d100      	bne.n	80167d6 <memmove+0x2a>
 80167d4:	bd10      	pop	{r4, pc}
 80167d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80167da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80167de:	e7f7      	b.n	80167d0 <memmove+0x24>

080167e0 <memset>:
 80167e0:	4402      	add	r2, r0
 80167e2:	4603      	mov	r3, r0
 80167e4:	4293      	cmp	r3, r2
 80167e6:	d100      	bne.n	80167ea <memset+0xa>
 80167e8:	4770      	bx	lr
 80167ea:	f803 1b01 	strb.w	r1, [r3], #1
 80167ee:	e7f9      	b.n	80167e4 <memset+0x4>

080167f0 <strncmp>:
 80167f0:	b510      	push	{r4, lr}
 80167f2:	b16a      	cbz	r2, 8016810 <strncmp+0x20>
 80167f4:	3901      	subs	r1, #1
 80167f6:	1884      	adds	r4, r0, r2
 80167f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016800:	429a      	cmp	r2, r3
 8016802:	d103      	bne.n	801680c <strncmp+0x1c>
 8016804:	42a0      	cmp	r0, r4
 8016806:	d001      	beq.n	801680c <strncmp+0x1c>
 8016808:	2a00      	cmp	r2, #0
 801680a:	d1f5      	bne.n	80167f8 <strncmp+0x8>
 801680c:	1ad0      	subs	r0, r2, r3
 801680e:	bd10      	pop	{r4, pc}
 8016810:	4610      	mov	r0, r2
 8016812:	e7fc      	b.n	801680e <strncmp+0x1e>

08016814 <stpcpy>:
 8016814:	4603      	mov	r3, r0
 8016816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801681a:	4618      	mov	r0, r3
 801681c:	f803 2b01 	strb.w	r2, [r3], #1
 8016820:	2a00      	cmp	r2, #0
 8016822:	d1f8      	bne.n	8016816 <stpcpy+0x2>
 8016824:	4770      	bx	lr
	...

08016828 <_localeconv_r>:
 8016828:	4800      	ldr	r0, [pc, #0]	@ (801682c <_localeconv_r+0x4>)
 801682a:	4770      	bx	lr
 801682c:	2000017c 	.word	0x2000017c

08016830 <_close_r>:
 8016830:	b538      	push	{r3, r4, r5, lr}
 8016832:	4d06      	ldr	r5, [pc, #24]	@ (801684c <_close_r+0x1c>)
 8016834:	2300      	movs	r3, #0
 8016836:	4604      	mov	r4, r0
 8016838:	4608      	mov	r0, r1
 801683a:	602b      	str	r3, [r5, #0]
 801683c:	f7eb f832 	bl	80018a4 <_close>
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	d102      	bne.n	801684a <_close_r+0x1a>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	b103      	cbz	r3, 801684a <_close_r+0x1a>
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	200101d0 	.word	0x200101d0

08016850 <_lseek_r>:
 8016850:	b538      	push	{r3, r4, r5, lr}
 8016852:	4d07      	ldr	r5, [pc, #28]	@ (8016870 <_lseek_r+0x20>)
 8016854:	4604      	mov	r4, r0
 8016856:	4608      	mov	r0, r1
 8016858:	4611      	mov	r1, r2
 801685a:	2200      	movs	r2, #0
 801685c:	602a      	str	r2, [r5, #0]
 801685e:	461a      	mov	r2, r3
 8016860:	f7eb f82c 	bl	80018bc <_lseek>
 8016864:	1c43      	adds	r3, r0, #1
 8016866:	d102      	bne.n	801686e <_lseek_r+0x1e>
 8016868:	682b      	ldr	r3, [r5, #0]
 801686a:	b103      	cbz	r3, 801686e <_lseek_r+0x1e>
 801686c:	6023      	str	r3, [r4, #0]
 801686e:	bd38      	pop	{r3, r4, r5, pc}
 8016870:	200101d0 	.word	0x200101d0

08016874 <_read_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	4d07      	ldr	r5, [pc, #28]	@ (8016894 <_read_r+0x20>)
 8016878:	4604      	mov	r4, r0
 801687a:	4608      	mov	r0, r1
 801687c:	4611      	mov	r1, r2
 801687e:	2200      	movs	r2, #0
 8016880:	602a      	str	r2, [r5, #0]
 8016882:	461a      	mov	r2, r3
 8016884:	f7eb f800 	bl	8001888 <_read>
 8016888:	1c43      	adds	r3, r0, #1
 801688a:	d102      	bne.n	8016892 <_read_r+0x1e>
 801688c:	682b      	ldr	r3, [r5, #0]
 801688e:	b103      	cbz	r3, 8016892 <_read_r+0x1e>
 8016890:	6023      	str	r3, [r4, #0]
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	200101d0 	.word	0x200101d0

08016898 <_write_r>:
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	4d07      	ldr	r5, [pc, #28]	@ (80168b8 <_write_r+0x20>)
 801689c:	4604      	mov	r4, r0
 801689e:	4608      	mov	r0, r1
 80168a0:	4611      	mov	r1, r2
 80168a2:	2200      	movs	r2, #0
 80168a4:	602a      	str	r2, [r5, #0]
 80168a6:	461a      	mov	r2, r3
 80168a8:	f7e9 ffd0 	bl	800084c <_write>
 80168ac:	1c43      	adds	r3, r0, #1
 80168ae:	d102      	bne.n	80168b6 <_write_r+0x1e>
 80168b0:	682b      	ldr	r3, [r5, #0]
 80168b2:	b103      	cbz	r3, 80168b6 <_write_r+0x1e>
 80168b4:	6023      	str	r3, [r4, #0]
 80168b6:	bd38      	pop	{r3, r4, r5, pc}
 80168b8:	200101d0 	.word	0x200101d0

080168bc <__errno>:
 80168bc:	4b01      	ldr	r3, [pc, #4]	@ (80168c4 <__errno+0x8>)
 80168be:	6818      	ldr	r0, [r3, #0]
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	2000003c 	.word	0x2000003c

080168c8 <__libc_init_array>:
 80168c8:	b570      	push	{r4, r5, r6, lr}
 80168ca:	4d0d      	ldr	r5, [pc, #52]	@ (8016900 <__libc_init_array+0x38>)
 80168cc:	4c0d      	ldr	r4, [pc, #52]	@ (8016904 <__libc_init_array+0x3c>)
 80168ce:	1b64      	subs	r4, r4, r5
 80168d0:	10a4      	asrs	r4, r4, #2
 80168d2:	2600      	movs	r6, #0
 80168d4:	42a6      	cmp	r6, r4
 80168d6:	d109      	bne.n	80168ec <__libc_init_array+0x24>
 80168d8:	4d0b      	ldr	r5, [pc, #44]	@ (8016908 <__libc_init_array+0x40>)
 80168da:	4c0c      	ldr	r4, [pc, #48]	@ (801690c <__libc_init_array+0x44>)
 80168dc:	f001 ff48 	bl	8018770 <_init>
 80168e0:	1b64      	subs	r4, r4, r5
 80168e2:	10a4      	asrs	r4, r4, #2
 80168e4:	2600      	movs	r6, #0
 80168e6:	42a6      	cmp	r6, r4
 80168e8:	d105      	bne.n	80168f6 <__libc_init_array+0x2e>
 80168ea:	bd70      	pop	{r4, r5, r6, pc}
 80168ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80168f0:	4798      	blx	r3
 80168f2:	3601      	adds	r6, #1
 80168f4:	e7ee      	b.n	80168d4 <__libc_init_array+0xc>
 80168f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80168fa:	4798      	blx	r3
 80168fc:	3601      	adds	r6, #1
 80168fe:	e7f2      	b.n	80168e6 <__libc_init_array+0x1e>
 8016900:	0802ce84 	.word	0x0802ce84
 8016904:	0802ce84 	.word	0x0802ce84
 8016908:	0802ce84 	.word	0x0802ce84
 801690c:	0802ce88 	.word	0x0802ce88

08016910 <__retarget_lock_init_recursive>:
 8016910:	4770      	bx	lr

08016912 <__retarget_lock_acquire_recursive>:
 8016912:	4770      	bx	lr

08016914 <__retarget_lock_release_recursive>:
 8016914:	4770      	bx	lr

08016916 <memcpy>:
 8016916:	440a      	add	r2, r1
 8016918:	4291      	cmp	r1, r2
 801691a:	f100 33ff 	add.w	r3, r0, #4294967295
 801691e:	d100      	bne.n	8016922 <memcpy+0xc>
 8016920:	4770      	bx	lr
 8016922:	b510      	push	{r4, lr}
 8016924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016928:	f803 4f01 	strb.w	r4, [r3, #1]!
 801692c:	4291      	cmp	r1, r2
 801692e:	d1f9      	bne.n	8016924 <memcpy+0xe>
 8016930:	bd10      	pop	{r4, pc}
	...

08016934 <__assert_func>:
 8016934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016936:	4614      	mov	r4, r2
 8016938:	461a      	mov	r2, r3
 801693a:	4b09      	ldr	r3, [pc, #36]	@ (8016960 <__assert_func+0x2c>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4605      	mov	r5, r0
 8016940:	68d8      	ldr	r0, [r3, #12]
 8016942:	b954      	cbnz	r4, 801695a <__assert_func+0x26>
 8016944:	4b07      	ldr	r3, [pc, #28]	@ (8016964 <__assert_func+0x30>)
 8016946:	461c      	mov	r4, r3
 8016948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801694c:	9100      	str	r1, [sp, #0]
 801694e:	462b      	mov	r3, r5
 8016950:	4905      	ldr	r1, [pc, #20]	@ (8016968 <__assert_func+0x34>)
 8016952:	f001 fdb3 	bl	80184bc <fiprintf>
 8016956:	f001 fe57 	bl	8018608 <abort>
 801695a:	4b04      	ldr	r3, [pc, #16]	@ (801696c <__assert_func+0x38>)
 801695c:	e7f4      	b.n	8016948 <__assert_func+0x14>
 801695e:	bf00      	nop
 8016960:	2000003c 	.word	0x2000003c
 8016964:	0802cc94 	.word	0x0802cc94
 8016968:	0802cc66 	.word	0x0802cc66
 801696c:	0802cc59 	.word	0x0802cc59

08016970 <quorem>:
 8016970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016974:	6903      	ldr	r3, [r0, #16]
 8016976:	690c      	ldr	r4, [r1, #16]
 8016978:	42a3      	cmp	r3, r4
 801697a:	4607      	mov	r7, r0
 801697c:	db7e      	blt.n	8016a7c <quorem+0x10c>
 801697e:	3c01      	subs	r4, #1
 8016980:	f101 0814 	add.w	r8, r1, #20
 8016984:	00a3      	lsls	r3, r4, #2
 8016986:	f100 0514 	add.w	r5, r0, #20
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016990:	9301      	str	r3, [sp, #4]
 8016992:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801699a:	3301      	adds	r3, #1
 801699c:	429a      	cmp	r2, r3
 801699e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80169a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80169a6:	d32e      	bcc.n	8016a06 <quorem+0x96>
 80169a8:	f04f 0a00 	mov.w	sl, #0
 80169ac:	46c4      	mov	ip, r8
 80169ae:	46ae      	mov	lr, r5
 80169b0:	46d3      	mov	fp, sl
 80169b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80169b6:	b298      	uxth	r0, r3
 80169b8:	fb06 a000 	mla	r0, r6, r0, sl
 80169bc:	0c02      	lsrs	r2, r0, #16
 80169be:	0c1b      	lsrs	r3, r3, #16
 80169c0:	fb06 2303 	mla	r3, r6, r3, r2
 80169c4:	f8de 2000 	ldr.w	r2, [lr]
 80169c8:	b280      	uxth	r0, r0
 80169ca:	b292      	uxth	r2, r2
 80169cc:	1a12      	subs	r2, r2, r0
 80169ce:	445a      	add	r2, fp
 80169d0:	f8de 0000 	ldr.w	r0, [lr]
 80169d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80169d8:	b29b      	uxth	r3, r3
 80169da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80169de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80169e2:	b292      	uxth	r2, r2
 80169e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80169e8:	45e1      	cmp	r9, ip
 80169ea:	f84e 2b04 	str.w	r2, [lr], #4
 80169ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80169f2:	d2de      	bcs.n	80169b2 <quorem+0x42>
 80169f4:	9b00      	ldr	r3, [sp, #0]
 80169f6:	58eb      	ldr	r3, [r5, r3]
 80169f8:	b92b      	cbnz	r3, 8016a06 <quorem+0x96>
 80169fa:	9b01      	ldr	r3, [sp, #4]
 80169fc:	3b04      	subs	r3, #4
 80169fe:	429d      	cmp	r5, r3
 8016a00:	461a      	mov	r2, r3
 8016a02:	d32f      	bcc.n	8016a64 <quorem+0xf4>
 8016a04:	613c      	str	r4, [r7, #16]
 8016a06:	4638      	mov	r0, r7
 8016a08:	f001 f90a 	bl	8017c20 <__mcmp>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	db25      	blt.n	8016a5c <quorem+0xec>
 8016a10:	4629      	mov	r1, r5
 8016a12:	2000      	movs	r0, #0
 8016a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8016a18:	f8d1 c000 	ldr.w	ip, [r1]
 8016a1c:	fa1f fe82 	uxth.w	lr, r2
 8016a20:	fa1f f38c 	uxth.w	r3, ip
 8016a24:	eba3 030e 	sub.w	r3, r3, lr
 8016a28:	4403      	add	r3, r0
 8016a2a:	0c12      	lsrs	r2, r2, #16
 8016a2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016a30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a3a:	45c1      	cmp	r9, r8
 8016a3c:	f841 3b04 	str.w	r3, [r1], #4
 8016a40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016a44:	d2e6      	bcs.n	8016a14 <quorem+0xa4>
 8016a46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016a4e:	b922      	cbnz	r2, 8016a5a <quorem+0xea>
 8016a50:	3b04      	subs	r3, #4
 8016a52:	429d      	cmp	r5, r3
 8016a54:	461a      	mov	r2, r3
 8016a56:	d30b      	bcc.n	8016a70 <quorem+0x100>
 8016a58:	613c      	str	r4, [r7, #16]
 8016a5a:	3601      	adds	r6, #1
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	b003      	add	sp, #12
 8016a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a64:	6812      	ldr	r2, [r2, #0]
 8016a66:	3b04      	subs	r3, #4
 8016a68:	2a00      	cmp	r2, #0
 8016a6a:	d1cb      	bne.n	8016a04 <quorem+0x94>
 8016a6c:	3c01      	subs	r4, #1
 8016a6e:	e7c6      	b.n	80169fe <quorem+0x8e>
 8016a70:	6812      	ldr	r2, [r2, #0]
 8016a72:	3b04      	subs	r3, #4
 8016a74:	2a00      	cmp	r2, #0
 8016a76:	d1ef      	bne.n	8016a58 <quorem+0xe8>
 8016a78:	3c01      	subs	r4, #1
 8016a7a:	e7ea      	b.n	8016a52 <quorem+0xe2>
 8016a7c:	2000      	movs	r0, #0
 8016a7e:	e7ee      	b.n	8016a5e <quorem+0xee>

08016a80 <_dtoa_r>:
 8016a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	ed2d 8b02 	vpush	{d8}
 8016a88:	69c7      	ldr	r7, [r0, #28]
 8016a8a:	b091      	sub	sp, #68	@ 0x44
 8016a8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016a90:	ec55 4b10 	vmov	r4, r5, d0
 8016a94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016a96:	9107      	str	r1, [sp, #28]
 8016a98:	4681      	mov	r9, r0
 8016a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8016a9e:	b97f      	cbnz	r7, 8016ac0 <_dtoa_r+0x40>
 8016aa0:	2010      	movs	r0, #16
 8016aa2:	f000 fd8d 	bl	80175c0 <malloc>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	f8c9 001c 	str.w	r0, [r9, #28]
 8016aac:	b920      	cbnz	r0, 8016ab8 <_dtoa_r+0x38>
 8016aae:	4ba0      	ldr	r3, [pc, #640]	@ (8016d30 <_dtoa_r+0x2b0>)
 8016ab0:	21ef      	movs	r1, #239	@ 0xef
 8016ab2:	48a0      	ldr	r0, [pc, #640]	@ (8016d34 <_dtoa_r+0x2b4>)
 8016ab4:	f7ff ff3e 	bl	8016934 <__assert_func>
 8016ab8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016abc:	6007      	str	r7, [r0, #0]
 8016abe:	60c7      	str	r7, [r0, #12]
 8016ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	b159      	cbz	r1, 8016ae0 <_dtoa_r+0x60>
 8016ac8:	685a      	ldr	r2, [r3, #4]
 8016aca:	604a      	str	r2, [r1, #4]
 8016acc:	2301      	movs	r3, #1
 8016ace:	4093      	lsls	r3, r2
 8016ad0:	608b      	str	r3, [r1, #8]
 8016ad2:	4648      	mov	r0, r9
 8016ad4:	f000 fe6a 	bl	80177ac <_Bfree>
 8016ad8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016adc:	2200      	movs	r2, #0
 8016ade:	601a      	str	r2, [r3, #0]
 8016ae0:	1e2b      	subs	r3, r5, #0
 8016ae2:	bfbb      	ittet	lt
 8016ae4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016ae8:	9303      	strlt	r3, [sp, #12]
 8016aea:	2300      	movge	r3, #0
 8016aec:	2201      	movlt	r2, #1
 8016aee:	bfac      	ite	ge
 8016af0:	6033      	strge	r3, [r6, #0]
 8016af2:	6032      	strlt	r2, [r6, #0]
 8016af4:	4b90      	ldr	r3, [pc, #576]	@ (8016d38 <_dtoa_r+0x2b8>)
 8016af6:	9e03      	ldr	r6, [sp, #12]
 8016af8:	43b3      	bics	r3, r6
 8016afa:	d110      	bne.n	8016b1e <_dtoa_r+0x9e>
 8016afc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016afe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016b02:	6013      	str	r3, [r2, #0]
 8016b04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016b08:	4323      	orrs	r3, r4
 8016b0a:	f000 84de 	beq.w	80174ca <_dtoa_r+0xa4a>
 8016b0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016b10:	4f8a      	ldr	r7, [pc, #552]	@ (8016d3c <_dtoa_r+0x2bc>)
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	f000 84e0 	beq.w	80174d8 <_dtoa_r+0xa58>
 8016b18:	1cfb      	adds	r3, r7, #3
 8016b1a:	f000 bcdb 	b.w	80174d4 <_dtoa_r+0xa54>
 8016b1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8016b22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b2a:	d10a      	bne.n	8016b42 <_dtoa_r+0xc2>
 8016b2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016b2e:	2301      	movs	r3, #1
 8016b30:	6013      	str	r3, [r2, #0]
 8016b32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016b34:	b113      	cbz	r3, 8016b3c <_dtoa_r+0xbc>
 8016b36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016b38:	4b81      	ldr	r3, [pc, #516]	@ (8016d40 <_dtoa_r+0x2c0>)
 8016b3a:	6013      	str	r3, [r2, #0]
 8016b3c:	4f81      	ldr	r7, [pc, #516]	@ (8016d44 <_dtoa_r+0x2c4>)
 8016b3e:	f000 bccb 	b.w	80174d8 <_dtoa_r+0xa58>
 8016b42:	aa0e      	add	r2, sp, #56	@ 0x38
 8016b44:	a90f      	add	r1, sp, #60	@ 0x3c
 8016b46:	4648      	mov	r0, r9
 8016b48:	eeb0 0b48 	vmov.f64	d0, d8
 8016b4c:	f001 f918 	bl	8017d80 <__d2b>
 8016b50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8016b54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b56:	9001      	str	r0, [sp, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d045      	beq.n	8016be8 <_dtoa_r+0x168>
 8016b5c:	eeb0 7b48 	vmov.f64	d7, d8
 8016b60:	ee18 1a90 	vmov	r1, s17
 8016b64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016b68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8016b6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016b70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016b74:	2500      	movs	r5, #0
 8016b76:	ee07 1a90 	vmov	s15, r1
 8016b7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016b7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016d18 <_dtoa_r+0x298>
 8016b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016b86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016d20 <_dtoa_r+0x2a0>
 8016b8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016b8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016d28 <_dtoa_r+0x2a8>
 8016b92:	ee07 3a90 	vmov	s15, r3
 8016b96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016b9a:	eeb0 7b46 	vmov.f64	d7, d6
 8016b9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016ba2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016ba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bae:	ee16 8a90 	vmov	r8, s13
 8016bb2:	d508      	bpl.n	8016bc6 <_dtoa_r+0x146>
 8016bb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016bb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8016bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc0:	bf18      	it	ne
 8016bc2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8016bc6:	f1b8 0f16 	cmp.w	r8, #22
 8016bca:	d82b      	bhi.n	8016c24 <_dtoa_r+0x1a4>
 8016bcc:	495e      	ldr	r1, [pc, #376]	@ (8016d48 <_dtoa_r+0x2c8>)
 8016bce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8016bd2:	ed91 7b00 	vldr	d7, [r1]
 8016bd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bde:	d501      	bpl.n	8016be4 <_dtoa_r+0x164>
 8016be0:	f108 38ff 	add.w	r8, r8, #4294967295
 8016be4:	2100      	movs	r1, #0
 8016be6:	e01e      	b.n	8016c26 <_dtoa_r+0x1a6>
 8016be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bea:	4413      	add	r3, r2
 8016bec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016bf0:	2920      	cmp	r1, #32
 8016bf2:	bfc1      	itttt	gt
 8016bf4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016bf8:	408e      	lslgt	r6, r1
 8016bfa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8016bfe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016c02:	bfd6      	itet	le
 8016c04:	f1c1 0120 	rsble	r1, r1, #32
 8016c08:	4331      	orrgt	r1, r6
 8016c0a:	fa04 f101 	lslle.w	r1, r4, r1
 8016c0e:	ee07 1a90 	vmov	s15, r1
 8016c12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016c16:	3b01      	subs	r3, #1
 8016c18:	ee17 1a90 	vmov	r1, s15
 8016c1c:	2501      	movs	r5, #1
 8016c1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8016c22:	e7a8      	b.n	8016b76 <_dtoa_r+0xf6>
 8016c24:	2101      	movs	r1, #1
 8016c26:	1ad2      	subs	r2, r2, r3
 8016c28:	1e53      	subs	r3, r2, #1
 8016c2a:	9306      	str	r3, [sp, #24]
 8016c2c:	bf45      	ittet	mi
 8016c2e:	f1c2 0301 	rsbmi	r3, r2, #1
 8016c32:	9305      	strmi	r3, [sp, #20]
 8016c34:	2300      	movpl	r3, #0
 8016c36:	2300      	movmi	r3, #0
 8016c38:	bf4c      	ite	mi
 8016c3a:	9306      	strmi	r3, [sp, #24]
 8016c3c:	9305      	strpl	r3, [sp, #20]
 8016c3e:	f1b8 0f00 	cmp.w	r8, #0
 8016c42:	910c      	str	r1, [sp, #48]	@ 0x30
 8016c44:	db18      	blt.n	8016c78 <_dtoa_r+0x1f8>
 8016c46:	9b06      	ldr	r3, [sp, #24]
 8016c48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8016c4c:	4443      	add	r3, r8
 8016c4e:	9306      	str	r3, [sp, #24]
 8016c50:	2300      	movs	r3, #0
 8016c52:	9a07      	ldr	r2, [sp, #28]
 8016c54:	2a09      	cmp	r2, #9
 8016c56:	d849      	bhi.n	8016cec <_dtoa_r+0x26c>
 8016c58:	2a05      	cmp	r2, #5
 8016c5a:	bfc4      	itt	gt
 8016c5c:	3a04      	subgt	r2, #4
 8016c5e:	9207      	strgt	r2, [sp, #28]
 8016c60:	9a07      	ldr	r2, [sp, #28]
 8016c62:	f1a2 0202 	sub.w	r2, r2, #2
 8016c66:	bfcc      	ite	gt
 8016c68:	2400      	movgt	r4, #0
 8016c6a:	2401      	movle	r4, #1
 8016c6c:	2a03      	cmp	r2, #3
 8016c6e:	d848      	bhi.n	8016d02 <_dtoa_r+0x282>
 8016c70:	e8df f002 	tbb	[pc, r2]
 8016c74:	3a2c2e0b 	.word	0x3a2c2e0b
 8016c78:	9b05      	ldr	r3, [sp, #20]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	eba3 0308 	sub.w	r3, r3, r8
 8016c80:	9305      	str	r3, [sp, #20]
 8016c82:	920a      	str	r2, [sp, #40]	@ 0x28
 8016c84:	f1c8 0300 	rsb	r3, r8, #0
 8016c88:	e7e3      	b.n	8016c52 <_dtoa_r+0x1d2>
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	9208      	str	r2, [sp, #32]
 8016c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c90:	2a00      	cmp	r2, #0
 8016c92:	dc39      	bgt.n	8016d08 <_dtoa_r+0x288>
 8016c94:	f04f 0b01 	mov.w	fp, #1
 8016c98:	46da      	mov	sl, fp
 8016c9a:	465a      	mov	r2, fp
 8016c9c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016ca0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	2004      	movs	r0, #4
 8016ca8:	f100 0614 	add.w	r6, r0, #20
 8016cac:	4296      	cmp	r6, r2
 8016cae:	d930      	bls.n	8016d12 <_dtoa_r+0x292>
 8016cb0:	6079      	str	r1, [r7, #4]
 8016cb2:	4648      	mov	r0, r9
 8016cb4:	9304      	str	r3, [sp, #16]
 8016cb6:	f000 fd39 	bl	801772c <_Balloc>
 8016cba:	9b04      	ldr	r3, [sp, #16]
 8016cbc:	4607      	mov	r7, r0
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	d146      	bne.n	8016d50 <_dtoa_r+0x2d0>
 8016cc2:	4b22      	ldr	r3, [pc, #136]	@ (8016d4c <_dtoa_r+0x2cc>)
 8016cc4:	4602      	mov	r2, r0
 8016cc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8016cca:	e6f2      	b.n	8016ab2 <_dtoa_r+0x32>
 8016ccc:	2201      	movs	r2, #1
 8016cce:	e7dd      	b.n	8016c8c <_dtoa_r+0x20c>
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	9208      	str	r2, [sp, #32]
 8016cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016cd6:	eb08 0b02 	add.w	fp, r8, r2
 8016cda:	f10b 0a01 	add.w	sl, fp, #1
 8016cde:	4652      	mov	r2, sl
 8016ce0:	2a01      	cmp	r2, #1
 8016ce2:	bfb8      	it	lt
 8016ce4:	2201      	movlt	r2, #1
 8016ce6:	e7db      	b.n	8016ca0 <_dtoa_r+0x220>
 8016ce8:	2201      	movs	r2, #1
 8016cea:	e7f2      	b.n	8016cd2 <_dtoa_r+0x252>
 8016cec:	2401      	movs	r4, #1
 8016cee:	2200      	movs	r2, #0
 8016cf0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016cf4:	f04f 3bff 	mov.w	fp, #4294967295
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	46da      	mov	sl, fp
 8016cfc:	2212      	movs	r2, #18
 8016cfe:	9109      	str	r1, [sp, #36]	@ 0x24
 8016d00:	e7ce      	b.n	8016ca0 <_dtoa_r+0x220>
 8016d02:	2201      	movs	r2, #1
 8016d04:	9208      	str	r2, [sp, #32]
 8016d06:	e7f5      	b.n	8016cf4 <_dtoa_r+0x274>
 8016d08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8016d0c:	46da      	mov	sl, fp
 8016d0e:	465a      	mov	r2, fp
 8016d10:	e7c6      	b.n	8016ca0 <_dtoa_r+0x220>
 8016d12:	3101      	adds	r1, #1
 8016d14:	0040      	lsls	r0, r0, #1
 8016d16:	e7c7      	b.n	8016ca8 <_dtoa_r+0x228>
 8016d18:	636f4361 	.word	0x636f4361
 8016d1c:	3fd287a7 	.word	0x3fd287a7
 8016d20:	8b60c8b3 	.word	0x8b60c8b3
 8016d24:	3fc68a28 	.word	0x3fc68a28
 8016d28:	509f79fb 	.word	0x509f79fb
 8016d2c:	3fd34413 	.word	0x3fd34413
 8016d30:	0802cab5 	.word	0x0802cab5
 8016d34:	0802cca2 	.word	0x0802cca2
 8016d38:	7ff00000 	.word	0x7ff00000
 8016d3c:	0802cc9e 	.word	0x0802cc9e
 8016d40:	0802cc36 	.word	0x0802cc36
 8016d44:	0802cc35 	.word	0x0802cc35
 8016d48:	0802cd98 	.word	0x0802cd98
 8016d4c:	0802ccfa 	.word	0x0802ccfa
 8016d50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8016d54:	f1ba 0f0e 	cmp.w	sl, #14
 8016d58:	6010      	str	r0, [r2, #0]
 8016d5a:	d86f      	bhi.n	8016e3c <_dtoa_r+0x3bc>
 8016d5c:	2c00      	cmp	r4, #0
 8016d5e:	d06d      	beq.n	8016e3c <_dtoa_r+0x3bc>
 8016d60:	f1b8 0f00 	cmp.w	r8, #0
 8016d64:	f340 80c2 	ble.w	8016eec <_dtoa_r+0x46c>
 8016d68:	4aca      	ldr	r2, [pc, #808]	@ (8017094 <_dtoa_r+0x614>)
 8016d6a:	f008 010f 	and.w	r1, r8, #15
 8016d6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016d72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8016d76:	ed92 7b00 	vldr	d7, [r2]
 8016d7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016d7e:	f000 80a9 	beq.w	8016ed4 <_dtoa_r+0x454>
 8016d82:	4ac5      	ldr	r2, [pc, #788]	@ (8017098 <_dtoa_r+0x618>)
 8016d84:	ed92 6b08 	vldr	d6, [r2, #32]
 8016d88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016d8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016d90:	f001 010f 	and.w	r1, r1, #15
 8016d94:	2203      	movs	r2, #3
 8016d96:	48c0      	ldr	r0, [pc, #768]	@ (8017098 <_dtoa_r+0x618>)
 8016d98:	2900      	cmp	r1, #0
 8016d9a:	f040 809d 	bne.w	8016ed8 <_dtoa_r+0x458>
 8016d9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016da2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016da6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016daa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016dac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016db0:	2900      	cmp	r1, #0
 8016db2:	f000 80c1 	beq.w	8016f38 <_dtoa_r+0x4b8>
 8016db6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016dba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc2:	f140 80b9 	bpl.w	8016f38 <_dtoa_r+0x4b8>
 8016dc6:	f1ba 0f00 	cmp.w	sl, #0
 8016dca:	f000 80b5 	beq.w	8016f38 <_dtoa_r+0x4b8>
 8016dce:	f1bb 0f00 	cmp.w	fp, #0
 8016dd2:	dd31      	ble.n	8016e38 <_dtoa_r+0x3b8>
 8016dd4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016dd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016de0:	f108 31ff 	add.w	r1, r8, #4294967295
 8016de4:	9104      	str	r1, [sp, #16]
 8016de6:	3201      	adds	r2, #1
 8016de8:	465c      	mov	r4, fp
 8016dea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016dee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016df2:	ee07 2a90 	vmov	s15, r2
 8016df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016dfa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016dfe:	ee15 2a90 	vmov	r2, s11
 8016e02:	ec51 0b15 	vmov	r0, r1, d5
 8016e06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8016e0a:	2c00      	cmp	r4, #0
 8016e0c:	f040 8098 	bne.w	8016f40 <_dtoa_r+0x4c0>
 8016e10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016e14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016e18:	ec41 0b17 	vmov	d7, r0, r1
 8016e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e24:	f300 8261 	bgt.w	80172ea <_dtoa_r+0x86a>
 8016e28:	eeb1 7b47 	vneg.f64	d7, d7
 8016e2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e34:	f100 80f5 	bmi.w	8017022 <_dtoa_r+0x5a2>
 8016e38:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e3e:	2a00      	cmp	r2, #0
 8016e40:	f2c0 812c 	blt.w	801709c <_dtoa_r+0x61c>
 8016e44:	f1b8 0f0e 	cmp.w	r8, #14
 8016e48:	f300 8128 	bgt.w	801709c <_dtoa_r+0x61c>
 8016e4c:	4b91      	ldr	r3, [pc, #580]	@ (8017094 <_dtoa_r+0x614>)
 8016e4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e52:	ed93 6b00 	vldr	d6, [r3]
 8016e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	da03      	bge.n	8016e64 <_dtoa_r+0x3e4>
 8016e5c:	f1ba 0f00 	cmp.w	sl, #0
 8016e60:	f340 80d2 	ble.w	8017008 <_dtoa_r+0x588>
 8016e64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e6c:	463e      	mov	r6, r7
 8016e6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016e72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016e76:	ee15 3a10 	vmov	r3, s10
 8016e7a:	3330      	adds	r3, #48	@ 0x30
 8016e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8016e80:	1bf3      	subs	r3, r6, r7
 8016e82:	459a      	cmp	sl, r3
 8016e84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016e88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016e8c:	f040 80f8 	bne.w	8017080 <_dtoa_r+0x600>
 8016e90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016e94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9c:	f300 80dd 	bgt.w	801705a <_dtoa_r+0x5da>
 8016ea0:	eeb4 7b46 	vcmp.f64	d7, d6
 8016ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea8:	d104      	bne.n	8016eb4 <_dtoa_r+0x434>
 8016eaa:	ee15 3a10 	vmov	r3, s10
 8016eae:	07db      	lsls	r3, r3, #31
 8016eb0:	f100 80d3 	bmi.w	801705a <_dtoa_r+0x5da>
 8016eb4:	9901      	ldr	r1, [sp, #4]
 8016eb6:	4648      	mov	r0, r9
 8016eb8:	f000 fc78 	bl	80177ac <_Bfree>
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016ec0:	7033      	strb	r3, [r6, #0]
 8016ec2:	f108 0301 	add.w	r3, r8, #1
 8016ec6:	6013      	str	r3, [r2, #0]
 8016ec8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	f000 8304 	beq.w	80174d8 <_dtoa_r+0xa58>
 8016ed0:	601e      	str	r6, [r3, #0]
 8016ed2:	e301      	b.n	80174d8 <_dtoa_r+0xa58>
 8016ed4:	2202      	movs	r2, #2
 8016ed6:	e75e      	b.n	8016d96 <_dtoa_r+0x316>
 8016ed8:	07cc      	lsls	r4, r1, #31
 8016eda:	d504      	bpl.n	8016ee6 <_dtoa_r+0x466>
 8016edc:	ed90 6b00 	vldr	d6, [r0]
 8016ee0:	3201      	adds	r2, #1
 8016ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ee6:	1049      	asrs	r1, r1, #1
 8016ee8:	3008      	adds	r0, #8
 8016eea:	e755      	b.n	8016d98 <_dtoa_r+0x318>
 8016eec:	d022      	beq.n	8016f34 <_dtoa_r+0x4b4>
 8016eee:	f1c8 0100 	rsb	r1, r8, #0
 8016ef2:	4a68      	ldr	r2, [pc, #416]	@ (8017094 <_dtoa_r+0x614>)
 8016ef4:	f001 000f 	and.w	r0, r1, #15
 8016ef8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016efc:	ed92 7b00 	vldr	d7, [r2]
 8016f00:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016f04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f08:	4863      	ldr	r0, [pc, #396]	@ (8017098 <_dtoa_r+0x618>)
 8016f0a:	1109      	asrs	r1, r1, #4
 8016f0c:	2400      	movs	r4, #0
 8016f0e:	2202      	movs	r2, #2
 8016f10:	b929      	cbnz	r1, 8016f1e <_dtoa_r+0x49e>
 8016f12:	2c00      	cmp	r4, #0
 8016f14:	f43f af49 	beq.w	8016daa <_dtoa_r+0x32a>
 8016f18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f1c:	e745      	b.n	8016daa <_dtoa_r+0x32a>
 8016f1e:	07ce      	lsls	r6, r1, #31
 8016f20:	d505      	bpl.n	8016f2e <_dtoa_r+0x4ae>
 8016f22:	ed90 6b00 	vldr	d6, [r0]
 8016f26:	3201      	adds	r2, #1
 8016f28:	2401      	movs	r4, #1
 8016f2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f2e:	1049      	asrs	r1, r1, #1
 8016f30:	3008      	adds	r0, #8
 8016f32:	e7ed      	b.n	8016f10 <_dtoa_r+0x490>
 8016f34:	2202      	movs	r2, #2
 8016f36:	e738      	b.n	8016daa <_dtoa_r+0x32a>
 8016f38:	f8cd 8010 	str.w	r8, [sp, #16]
 8016f3c:	4654      	mov	r4, sl
 8016f3e:	e754      	b.n	8016dea <_dtoa_r+0x36a>
 8016f40:	4a54      	ldr	r2, [pc, #336]	@ (8017094 <_dtoa_r+0x614>)
 8016f42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8016f46:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016f4a:	9a08      	ldr	r2, [sp, #32]
 8016f4c:	ec41 0b17 	vmov	d7, r0, r1
 8016f50:	443c      	add	r4, r7
 8016f52:	b34a      	cbz	r2, 8016fa8 <_dtoa_r+0x528>
 8016f54:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8016f58:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8016f5c:	463e      	mov	r6, r7
 8016f5e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016f62:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016f66:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016f6a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016f6e:	ee14 2a90 	vmov	r2, s9
 8016f72:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016f76:	3230      	adds	r2, #48	@ 0x30
 8016f78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016f7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f84:	f806 2b01 	strb.w	r2, [r6], #1
 8016f88:	d438      	bmi.n	8016ffc <_dtoa_r+0x57c>
 8016f8a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016f8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f96:	d462      	bmi.n	801705e <_dtoa_r+0x5de>
 8016f98:	42a6      	cmp	r6, r4
 8016f9a:	f43f af4d 	beq.w	8016e38 <_dtoa_r+0x3b8>
 8016f9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016fa2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016fa6:	e7e0      	b.n	8016f6a <_dtoa_r+0x4ea>
 8016fa8:	4621      	mov	r1, r4
 8016faa:	463e      	mov	r6, r7
 8016fac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016fb0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016fb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016fb8:	ee14 2a90 	vmov	r2, s9
 8016fbc:	3230      	adds	r2, #48	@ 0x30
 8016fbe:	f806 2b01 	strb.w	r2, [r6], #1
 8016fc2:	42a6      	cmp	r6, r4
 8016fc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016fc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016fcc:	d119      	bne.n	8017002 <_dtoa_r+0x582>
 8016fce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016fd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016fd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fde:	dc3e      	bgt.n	801705e <_dtoa_r+0x5de>
 8016fe0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016fe4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fec:	f57f af24 	bpl.w	8016e38 <_dtoa_r+0x3b8>
 8016ff0:	460e      	mov	r6, r1
 8016ff2:	3901      	subs	r1, #1
 8016ff4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016ff8:	2b30      	cmp	r3, #48	@ 0x30
 8016ffa:	d0f9      	beq.n	8016ff0 <_dtoa_r+0x570>
 8016ffc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017000:	e758      	b.n	8016eb4 <_dtoa_r+0x434>
 8017002:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017006:	e7d5      	b.n	8016fb4 <_dtoa_r+0x534>
 8017008:	d10b      	bne.n	8017022 <_dtoa_r+0x5a2>
 801700a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801700e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017012:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701e:	f2c0 8161 	blt.w	80172e4 <_dtoa_r+0x864>
 8017022:	2400      	movs	r4, #0
 8017024:	4625      	mov	r5, r4
 8017026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017028:	43db      	mvns	r3, r3
 801702a:	9304      	str	r3, [sp, #16]
 801702c:	463e      	mov	r6, r7
 801702e:	f04f 0800 	mov.w	r8, #0
 8017032:	4621      	mov	r1, r4
 8017034:	4648      	mov	r0, r9
 8017036:	f000 fbb9 	bl	80177ac <_Bfree>
 801703a:	2d00      	cmp	r5, #0
 801703c:	d0de      	beq.n	8016ffc <_dtoa_r+0x57c>
 801703e:	f1b8 0f00 	cmp.w	r8, #0
 8017042:	d005      	beq.n	8017050 <_dtoa_r+0x5d0>
 8017044:	45a8      	cmp	r8, r5
 8017046:	d003      	beq.n	8017050 <_dtoa_r+0x5d0>
 8017048:	4641      	mov	r1, r8
 801704a:	4648      	mov	r0, r9
 801704c:	f000 fbae 	bl	80177ac <_Bfree>
 8017050:	4629      	mov	r1, r5
 8017052:	4648      	mov	r0, r9
 8017054:	f000 fbaa 	bl	80177ac <_Bfree>
 8017058:	e7d0      	b.n	8016ffc <_dtoa_r+0x57c>
 801705a:	f8cd 8010 	str.w	r8, [sp, #16]
 801705e:	4633      	mov	r3, r6
 8017060:	461e      	mov	r6, r3
 8017062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017066:	2a39      	cmp	r2, #57	@ 0x39
 8017068:	d106      	bne.n	8017078 <_dtoa_r+0x5f8>
 801706a:	429f      	cmp	r7, r3
 801706c:	d1f8      	bne.n	8017060 <_dtoa_r+0x5e0>
 801706e:	9a04      	ldr	r2, [sp, #16]
 8017070:	3201      	adds	r2, #1
 8017072:	9204      	str	r2, [sp, #16]
 8017074:	2230      	movs	r2, #48	@ 0x30
 8017076:	703a      	strb	r2, [r7, #0]
 8017078:	781a      	ldrb	r2, [r3, #0]
 801707a:	3201      	adds	r2, #1
 801707c:	701a      	strb	r2, [r3, #0]
 801707e:	e7bd      	b.n	8016ffc <_dtoa_r+0x57c>
 8017080:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801708c:	f47f aeef 	bne.w	8016e6e <_dtoa_r+0x3ee>
 8017090:	e710      	b.n	8016eb4 <_dtoa_r+0x434>
 8017092:	bf00      	nop
 8017094:	0802cd98 	.word	0x0802cd98
 8017098:	0802cd70 	.word	0x0802cd70
 801709c:	9908      	ldr	r1, [sp, #32]
 801709e:	2900      	cmp	r1, #0
 80170a0:	f000 80e3 	beq.w	801726a <_dtoa_r+0x7ea>
 80170a4:	9907      	ldr	r1, [sp, #28]
 80170a6:	2901      	cmp	r1, #1
 80170a8:	f300 80c8 	bgt.w	801723c <_dtoa_r+0x7bc>
 80170ac:	2d00      	cmp	r5, #0
 80170ae:	f000 80c1 	beq.w	8017234 <_dtoa_r+0x7b4>
 80170b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80170b6:	9e05      	ldr	r6, [sp, #20]
 80170b8:	461c      	mov	r4, r3
 80170ba:	9304      	str	r3, [sp, #16]
 80170bc:	9b05      	ldr	r3, [sp, #20]
 80170be:	4413      	add	r3, r2
 80170c0:	9305      	str	r3, [sp, #20]
 80170c2:	9b06      	ldr	r3, [sp, #24]
 80170c4:	2101      	movs	r1, #1
 80170c6:	4413      	add	r3, r2
 80170c8:	4648      	mov	r0, r9
 80170ca:	9306      	str	r3, [sp, #24]
 80170cc:	f000 fc22 	bl	8017914 <__i2b>
 80170d0:	9b04      	ldr	r3, [sp, #16]
 80170d2:	4605      	mov	r5, r0
 80170d4:	b166      	cbz	r6, 80170f0 <_dtoa_r+0x670>
 80170d6:	9a06      	ldr	r2, [sp, #24]
 80170d8:	2a00      	cmp	r2, #0
 80170da:	dd09      	ble.n	80170f0 <_dtoa_r+0x670>
 80170dc:	42b2      	cmp	r2, r6
 80170de:	9905      	ldr	r1, [sp, #20]
 80170e0:	bfa8      	it	ge
 80170e2:	4632      	movge	r2, r6
 80170e4:	1a89      	subs	r1, r1, r2
 80170e6:	9105      	str	r1, [sp, #20]
 80170e8:	9906      	ldr	r1, [sp, #24]
 80170ea:	1ab6      	subs	r6, r6, r2
 80170ec:	1a8a      	subs	r2, r1, r2
 80170ee:	9206      	str	r2, [sp, #24]
 80170f0:	b1fb      	cbz	r3, 8017132 <_dtoa_r+0x6b2>
 80170f2:	9a08      	ldr	r2, [sp, #32]
 80170f4:	2a00      	cmp	r2, #0
 80170f6:	f000 80bc 	beq.w	8017272 <_dtoa_r+0x7f2>
 80170fa:	b19c      	cbz	r4, 8017124 <_dtoa_r+0x6a4>
 80170fc:	4629      	mov	r1, r5
 80170fe:	4622      	mov	r2, r4
 8017100:	4648      	mov	r0, r9
 8017102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017104:	f000 fcc6 	bl	8017a94 <__pow5mult>
 8017108:	9a01      	ldr	r2, [sp, #4]
 801710a:	4601      	mov	r1, r0
 801710c:	4605      	mov	r5, r0
 801710e:	4648      	mov	r0, r9
 8017110:	f000 fc16 	bl	8017940 <__multiply>
 8017114:	9901      	ldr	r1, [sp, #4]
 8017116:	9004      	str	r0, [sp, #16]
 8017118:	4648      	mov	r0, r9
 801711a:	f000 fb47 	bl	80177ac <_Bfree>
 801711e:	9a04      	ldr	r2, [sp, #16]
 8017120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017122:	9201      	str	r2, [sp, #4]
 8017124:	1b1a      	subs	r2, r3, r4
 8017126:	d004      	beq.n	8017132 <_dtoa_r+0x6b2>
 8017128:	9901      	ldr	r1, [sp, #4]
 801712a:	4648      	mov	r0, r9
 801712c:	f000 fcb2 	bl	8017a94 <__pow5mult>
 8017130:	9001      	str	r0, [sp, #4]
 8017132:	2101      	movs	r1, #1
 8017134:	4648      	mov	r0, r9
 8017136:	f000 fbed 	bl	8017914 <__i2b>
 801713a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801713c:	4604      	mov	r4, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	f000 81d0 	beq.w	80174e4 <_dtoa_r+0xa64>
 8017144:	461a      	mov	r2, r3
 8017146:	4601      	mov	r1, r0
 8017148:	4648      	mov	r0, r9
 801714a:	f000 fca3 	bl	8017a94 <__pow5mult>
 801714e:	9b07      	ldr	r3, [sp, #28]
 8017150:	2b01      	cmp	r3, #1
 8017152:	4604      	mov	r4, r0
 8017154:	f300 8095 	bgt.w	8017282 <_dtoa_r+0x802>
 8017158:	9b02      	ldr	r3, [sp, #8]
 801715a:	2b00      	cmp	r3, #0
 801715c:	f040 808b 	bne.w	8017276 <_dtoa_r+0x7f6>
 8017160:	9b03      	ldr	r3, [sp, #12]
 8017162:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017166:	2a00      	cmp	r2, #0
 8017168:	f040 8087 	bne.w	801727a <_dtoa_r+0x7fa>
 801716c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017170:	0d12      	lsrs	r2, r2, #20
 8017172:	0512      	lsls	r2, r2, #20
 8017174:	2a00      	cmp	r2, #0
 8017176:	f000 8082 	beq.w	801727e <_dtoa_r+0x7fe>
 801717a:	9b05      	ldr	r3, [sp, #20]
 801717c:	3301      	adds	r3, #1
 801717e:	9305      	str	r3, [sp, #20]
 8017180:	9b06      	ldr	r3, [sp, #24]
 8017182:	3301      	adds	r3, #1
 8017184:	9306      	str	r3, [sp, #24]
 8017186:	2301      	movs	r3, #1
 8017188:	930b      	str	r3, [sp, #44]	@ 0x2c
 801718a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801718c:	2b00      	cmp	r3, #0
 801718e:	f000 81af 	beq.w	80174f0 <_dtoa_r+0xa70>
 8017192:	6922      	ldr	r2, [r4, #16]
 8017194:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017198:	6910      	ldr	r0, [r2, #16]
 801719a:	f000 fb6f 	bl	801787c <__hi0bits>
 801719e:	f1c0 0020 	rsb	r0, r0, #32
 80171a2:	9b06      	ldr	r3, [sp, #24]
 80171a4:	4418      	add	r0, r3
 80171a6:	f010 001f 	ands.w	r0, r0, #31
 80171aa:	d076      	beq.n	801729a <_dtoa_r+0x81a>
 80171ac:	f1c0 0220 	rsb	r2, r0, #32
 80171b0:	2a04      	cmp	r2, #4
 80171b2:	dd69      	ble.n	8017288 <_dtoa_r+0x808>
 80171b4:	9b05      	ldr	r3, [sp, #20]
 80171b6:	f1c0 001c 	rsb	r0, r0, #28
 80171ba:	4403      	add	r3, r0
 80171bc:	9305      	str	r3, [sp, #20]
 80171be:	9b06      	ldr	r3, [sp, #24]
 80171c0:	4406      	add	r6, r0
 80171c2:	4403      	add	r3, r0
 80171c4:	9306      	str	r3, [sp, #24]
 80171c6:	9b05      	ldr	r3, [sp, #20]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	dd05      	ble.n	80171d8 <_dtoa_r+0x758>
 80171cc:	9901      	ldr	r1, [sp, #4]
 80171ce:	461a      	mov	r2, r3
 80171d0:	4648      	mov	r0, r9
 80171d2:	f000 fcb9 	bl	8017b48 <__lshift>
 80171d6:	9001      	str	r0, [sp, #4]
 80171d8:	9b06      	ldr	r3, [sp, #24]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	dd05      	ble.n	80171ea <_dtoa_r+0x76a>
 80171de:	4621      	mov	r1, r4
 80171e0:	461a      	mov	r2, r3
 80171e2:	4648      	mov	r0, r9
 80171e4:	f000 fcb0 	bl	8017b48 <__lshift>
 80171e8:	4604      	mov	r4, r0
 80171ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d056      	beq.n	801729e <_dtoa_r+0x81e>
 80171f0:	9801      	ldr	r0, [sp, #4]
 80171f2:	4621      	mov	r1, r4
 80171f4:	f000 fd14 	bl	8017c20 <__mcmp>
 80171f8:	2800      	cmp	r0, #0
 80171fa:	da50      	bge.n	801729e <_dtoa_r+0x81e>
 80171fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	9901      	ldr	r1, [sp, #4]
 8017204:	2300      	movs	r3, #0
 8017206:	220a      	movs	r2, #10
 8017208:	4648      	mov	r0, r9
 801720a:	f000 faf1 	bl	80177f0 <__multadd>
 801720e:	9b08      	ldr	r3, [sp, #32]
 8017210:	9001      	str	r0, [sp, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	f000 816e 	beq.w	80174f4 <_dtoa_r+0xa74>
 8017218:	4629      	mov	r1, r5
 801721a:	2300      	movs	r3, #0
 801721c:	220a      	movs	r2, #10
 801721e:	4648      	mov	r0, r9
 8017220:	f000 fae6 	bl	80177f0 <__multadd>
 8017224:	f1bb 0f00 	cmp.w	fp, #0
 8017228:	4605      	mov	r5, r0
 801722a:	dc64      	bgt.n	80172f6 <_dtoa_r+0x876>
 801722c:	9b07      	ldr	r3, [sp, #28]
 801722e:	2b02      	cmp	r3, #2
 8017230:	dc3e      	bgt.n	80172b0 <_dtoa_r+0x830>
 8017232:	e060      	b.n	80172f6 <_dtoa_r+0x876>
 8017234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017236:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801723a:	e73c      	b.n	80170b6 <_dtoa_r+0x636>
 801723c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8017240:	42a3      	cmp	r3, r4
 8017242:	bfbf      	itttt	lt
 8017244:	1ae2      	sublt	r2, r4, r3
 8017246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017248:	189b      	addlt	r3, r3, r2
 801724a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801724c:	bfae      	itee	ge
 801724e:	1b1c      	subge	r4, r3, r4
 8017250:	4623      	movlt	r3, r4
 8017252:	2400      	movlt	r4, #0
 8017254:	f1ba 0f00 	cmp.w	sl, #0
 8017258:	bfb5      	itete	lt
 801725a:	9a05      	ldrlt	r2, [sp, #20]
 801725c:	9e05      	ldrge	r6, [sp, #20]
 801725e:	eba2 060a 	sublt.w	r6, r2, sl
 8017262:	4652      	movge	r2, sl
 8017264:	bfb8      	it	lt
 8017266:	2200      	movlt	r2, #0
 8017268:	e727      	b.n	80170ba <_dtoa_r+0x63a>
 801726a:	9e05      	ldr	r6, [sp, #20]
 801726c:	9d08      	ldr	r5, [sp, #32]
 801726e:	461c      	mov	r4, r3
 8017270:	e730      	b.n	80170d4 <_dtoa_r+0x654>
 8017272:	461a      	mov	r2, r3
 8017274:	e758      	b.n	8017128 <_dtoa_r+0x6a8>
 8017276:	2300      	movs	r3, #0
 8017278:	e786      	b.n	8017188 <_dtoa_r+0x708>
 801727a:	9b02      	ldr	r3, [sp, #8]
 801727c:	e784      	b.n	8017188 <_dtoa_r+0x708>
 801727e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017280:	e783      	b.n	801718a <_dtoa_r+0x70a>
 8017282:	2300      	movs	r3, #0
 8017284:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017286:	e784      	b.n	8017192 <_dtoa_r+0x712>
 8017288:	d09d      	beq.n	80171c6 <_dtoa_r+0x746>
 801728a:	9b05      	ldr	r3, [sp, #20]
 801728c:	321c      	adds	r2, #28
 801728e:	4413      	add	r3, r2
 8017290:	9305      	str	r3, [sp, #20]
 8017292:	9b06      	ldr	r3, [sp, #24]
 8017294:	4416      	add	r6, r2
 8017296:	4413      	add	r3, r2
 8017298:	e794      	b.n	80171c4 <_dtoa_r+0x744>
 801729a:	4602      	mov	r2, r0
 801729c:	e7f5      	b.n	801728a <_dtoa_r+0x80a>
 801729e:	f1ba 0f00 	cmp.w	sl, #0
 80172a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80172a6:	46d3      	mov	fp, sl
 80172a8:	dc21      	bgt.n	80172ee <_dtoa_r+0x86e>
 80172aa:	9b07      	ldr	r3, [sp, #28]
 80172ac:	2b02      	cmp	r3, #2
 80172ae:	dd1e      	ble.n	80172ee <_dtoa_r+0x86e>
 80172b0:	f1bb 0f00 	cmp.w	fp, #0
 80172b4:	f47f aeb7 	bne.w	8017026 <_dtoa_r+0x5a6>
 80172b8:	4621      	mov	r1, r4
 80172ba:	465b      	mov	r3, fp
 80172bc:	2205      	movs	r2, #5
 80172be:	4648      	mov	r0, r9
 80172c0:	f000 fa96 	bl	80177f0 <__multadd>
 80172c4:	4601      	mov	r1, r0
 80172c6:	4604      	mov	r4, r0
 80172c8:	9801      	ldr	r0, [sp, #4]
 80172ca:	f000 fca9 	bl	8017c20 <__mcmp>
 80172ce:	2800      	cmp	r0, #0
 80172d0:	f77f aea9 	ble.w	8017026 <_dtoa_r+0x5a6>
 80172d4:	463e      	mov	r6, r7
 80172d6:	2331      	movs	r3, #49	@ 0x31
 80172d8:	f806 3b01 	strb.w	r3, [r6], #1
 80172dc:	9b04      	ldr	r3, [sp, #16]
 80172de:	3301      	adds	r3, #1
 80172e0:	9304      	str	r3, [sp, #16]
 80172e2:	e6a4      	b.n	801702e <_dtoa_r+0x5ae>
 80172e4:	f8cd 8010 	str.w	r8, [sp, #16]
 80172e8:	4654      	mov	r4, sl
 80172ea:	4625      	mov	r5, r4
 80172ec:	e7f2      	b.n	80172d4 <_dtoa_r+0x854>
 80172ee:	9b08      	ldr	r3, [sp, #32]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f000 8103 	beq.w	80174fc <_dtoa_r+0xa7c>
 80172f6:	2e00      	cmp	r6, #0
 80172f8:	dd05      	ble.n	8017306 <_dtoa_r+0x886>
 80172fa:	4629      	mov	r1, r5
 80172fc:	4632      	mov	r2, r6
 80172fe:	4648      	mov	r0, r9
 8017300:	f000 fc22 	bl	8017b48 <__lshift>
 8017304:	4605      	mov	r5, r0
 8017306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017308:	2b00      	cmp	r3, #0
 801730a:	d058      	beq.n	80173be <_dtoa_r+0x93e>
 801730c:	6869      	ldr	r1, [r5, #4]
 801730e:	4648      	mov	r0, r9
 8017310:	f000 fa0c 	bl	801772c <_Balloc>
 8017314:	4606      	mov	r6, r0
 8017316:	b928      	cbnz	r0, 8017324 <_dtoa_r+0x8a4>
 8017318:	4b82      	ldr	r3, [pc, #520]	@ (8017524 <_dtoa_r+0xaa4>)
 801731a:	4602      	mov	r2, r0
 801731c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017320:	f7ff bbc7 	b.w	8016ab2 <_dtoa_r+0x32>
 8017324:	692a      	ldr	r2, [r5, #16]
 8017326:	3202      	adds	r2, #2
 8017328:	0092      	lsls	r2, r2, #2
 801732a:	f105 010c 	add.w	r1, r5, #12
 801732e:	300c      	adds	r0, #12
 8017330:	f7ff faf1 	bl	8016916 <memcpy>
 8017334:	2201      	movs	r2, #1
 8017336:	4631      	mov	r1, r6
 8017338:	4648      	mov	r0, r9
 801733a:	f000 fc05 	bl	8017b48 <__lshift>
 801733e:	1c7b      	adds	r3, r7, #1
 8017340:	9305      	str	r3, [sp, #20]
 8017342:	eb07 030b 	add.w	r3, r7, fp
 8017346:	9309      	str	r3, [sp, #36]	@ 0x24
 8017348:	9b02      	ldr	r3, [sp, #8]
 801734a:	f003 0301 	and.w	r3, r3, #1
 801734e:	46a8      	mov	r8, r5
 8017350:	9308      	str	r3, [sp, #32]
 8017352:	4605      	mov	r5, r0
 8017354:	9b05      	ldr	r3, [sp, #20]
 8017356:	9801      	ldr	r0, [sp, #4]
 8017358:	4621      	mov	r1, r4
 801735a:	f103 3bff 	add.w	fp, r3, #4294967295
 801735e:	f7ff fb07 	bl	8016970 <quorem>
 8017362:	4641      	mov	r1, r8
 8017364:	9002      	str	r0, [sp, #8]
 8017366:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801736a:	9801      	ldr	r0, [sp, #4]
 801736c:	f000 fc58 	bl	8017c20 <__mcmp>
 8017370:	462a      	mov	r2, r5
 8017372:	9006      	str	r0, [sp, #24]
 8017374:	4621      	mov	r1, r4
 8017376:	4648      	mov	r0, r9
 8017378:	f000 fc6e 	bl	8017c58 <__mdiff>
 801737c:	68c2      	ldr	r2, [r0, #12]
 801737e:	4606      	mov	r6, r0
 8017380:	b9fa      	cbnz	r2, 80173c2 <_dtoa_r+0x942>
 8017382:	4601      	mov	r1, r0
 8017384:	9801      	ldr	r0, [sp, #4]
 8017386:	f000 fc4b 	bl	8017c20 <__mcmp>
 801738a:	4602      	mov	r2, r0
 801738c:	4631      	mov	r1, r6
 801738e:	4648      	mov	r0, r9
 8017390:	920a      	str	r2, [sp, #40]	@ 0x28
 8017392:	f000 fa0b 	bl	80177ac <_Bfree>
 8017396:	9b07      	ldr	r3, [sp, #28]
 8017398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801739a:	9e05      	ldr	r6, [sp, #20]
 801739c:	ea43 0102 	orr.w	r1, r3, r2
 80173a0:	9b08      	ldr	r3, [sp, #32]
 80173a2:	4319      	orrs	r1, r3
 80173a4:	d10f      	bne.n	80173c6 <_dtoa_r+0x946>
 80173a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80173aa:	d028      	beq.n	80173fe <_dtoa_r+0x97e>
 80173ac:	9b06      	ldr	r3, [sp, #24]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	dd02      	ble.n	80173b8 <_dtoa_r+0x938>
 80173b2:	9b02      	ldr	r3, [sp, #8]
 80173b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80173b8:	f88b a000 	strb.w	sl, [fp]
 80173bc:	e639      	b.n	8017032 <_dtoa_r+0x5b2>
 80173be:	4628      	mov	r0, r5
 80173c0:	e7bd      	b.n	801733e <_dtoa_r+0x8be>
 80173c2:	2201      	movs	r2, #1
 80173c4:	e7e2      	b.n	801738c <_dtoa_r+0x90c>
 80173c6:	9b06      	ldr	r3, [sp, #24]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	db04      	blt.n	80173d6 <_dtoa_r+0x956>
 80173cc:	9907      	ldr	r1, [sp, #28]
 80173ce:	430b      	orrs	r3, r1
 80173d0:	9908      	ldr	r1, [sp, #32]
 80173d2:	430b      	orrs	r3, r1
 80173d4:	d120      	bne.n	8017418 <_dtoa_r+0x998>
 80173d6:	2a00      	cmp	r2, #0
 80173d8:	ddee      	ble.n	80173b8 <_dtoa_r+0x938>
 80173da:	9901      	ldr	r1, [sp, #4]
 80173dc:	2201      	movs	r2, #1
 80173de:	4648      	mov	r0, r9
 80173e0:	f000 fbb2 	bl	8017b48 <__lshift>
 80173e4:	4621      	mov	r1, r4
 80173e6:	9001      	str	r0, [sp, #4]
 80173e8:	f000 fc1a 	bl	8017c20 <__mcmp>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	dc03      	bgt.n	80173f8 <_dtoa_r+0x978>
 80173f0:	d1e2      	bne.n	80173b8 <_dtoa_r+0x938>
 80173f2:	f01a 0f01 	tst.w	sl, #1
 80173f6:	d0df      	beq.n	80173b8 <_dtoa_r+0x938>
 80173f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80173fc:	d1d9      	bne.n	80173b2 <_dtoa_r+0x932>
 80173fe:	2339      	movs	r3, #57	@ 0x39
 8017400:	f88b 3000 	strb.w	r3, [fp]
 8017404:	4633      	mov	r3, r6
 8017406:	461e      	mov	r6, r3
 8017408:	3b01      	subs	r3, #1
 801740a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801740e:	2a39      	cmp	r2, #57	@ 0x39
 8017410:	d053      	beq.n	80174ba <_dtoa_r+0xa3a>
 8017412:	3201      	adds	r2, #1
 8017414:	701a      	strb	r2, [r3, #0]
 8017416:	e60c      	b.n	8017032 <_dtoa_r+0x5b2>
 8017418:	2a00      	cmp	r2, #0
 801741a:	dd07      	ble.n	801742c <_dtoa_r+0x9ac>
 801741c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017420:	d0ed      	beq.n	80173fe <_dtoa_r+0x97e>
 8017422:	f10a 0301 	add.w	r3, sl, #1
 8017426:	f88b 3000 	strb.w	r3, [fp]
 801742a:	e602      	b.n	8017032 <_dtoa_r+0x5b2>
 801742c:	9b05      	ldr	r3, [sp, #20]
 801742e:	9a05      	ldr	r2, [sp, #20]
 8017430:	f803 ac01 	strb.w	sl, [r3, #-1]
 8017434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017436:	4293      	cmp	r3, r2
 8017438:	d029      	beq.n	801748e <_dtoa_r+0xa0e>
 801743a:	9901      	ldr	r1, [sp, #4]
 801743c:	2300      	movs	r3, #0
 801743e:	220a      	movs	r2, #10
 8017440:	4648      	mov	r0, r9
 8017442:	f000 f9d5 	bl	80177f0 <__multadd>
 8017446:	45a8      	cmp	r8, r5
 8017448:	9001      	str	r0, [sp, #4]
 801744a:	f04f 0300 	mov.w	r3, #0
 801744e:	f04f 020a 	mov.w	r2, #10
 8017452:	4641      	mov	r1, r8
 8017454:	4648      	mov	r0, r9
 8017456:	d107      	bne.n	8017468 <_dtoa_r+0x9e8>
 8017458:	f000 f9ca 	bl	80177f0 <__multadd>
 801745c:	4680      	mov	r8, r0
 801745e:	4605      	mov	r5, r0
 8017460:	9b05      	ldr	r3, [sp, #20]
 8017462:	3301      	adds	r3, #1
 8017464:	9305      	str	r3, [sp, #20]
 8017466:	e775      	b.n	8017354 <_dtoa_r+0x8d4>
 8017468:	f000 f9c2 	bl	80177f0 <__multadd>
 801746c:	4629      	mov	r1, r5
 801746e:	4680      	mov	r8, r0
 8017470:	2300      	movs	r3, #0
 8017472:	220a      	movs	r2, #10
 8017474:	4648      	mov	r0, r9
 8017476:	f000 f9bb 	bl	80177f0 <__multadd>
 801747a:	4605      	mov	r5, r0
 801747c:	e7f0      	b.n	8017460 <_dtoa_r+0x9e0>
 801747e:	f1bb 0f00 	cmp.w	fp, #0
 8017482:	bfcc      	ite	gt
 8017484:	465e      	movgt	r6, fp
 8017486:	2601      	movle	r6, #1
 8017488:	443e      	add	r6, r7
 801748a:	f04f 0800 	mov.w	r8, #0
 801748e:	9901      	ldr	r1, [sp, #4]
 8017490:	2201      	movs	r2, #1
 8017492:	4648      	mov	r0, r9
 8017494:	f000 fb58 	bl	8017b48 <__lshift>
 8017498:	4621      	mov	r1, r4
 801749a:	9001      	str	r0, [sp, #4]
 801749c:	f000 fbc0 	bl	8017c20 <__mcmp>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	dcaf      	bgt.n	8017404 <_dtoa_r+0x984>
 80174a4:	d102      	bne.n	80174ac <_dtoa_r+0xa2c>
 80174a6:	f01a 0f01 	tst.w	sl, #1
 80174aa:	d1ab      	bne.n	8017404 <_dtoa_r+0x984>
 80174ac:	4633      	mov	r3, r6
 80174ae:	461e      	mov	r6, r3
 80174b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174b4:	2a30      	cmp	r2, #48	@ 0x30
 80174b6:	d0fa      	beq.n	80174ae <_dtoa_r+0xa2e>
 80174b8:	e5bb      	b.n	8017032 <_dtoa_r+0x5b2>
 80174ba:	429f      	cmp	r7, r3
 80174bc:	d1a3      	bne.n	8017406 <_dtoa_r+0x986>
 80174be:	9b04      	ldr	r3, [sp, #16]
 80174c0:	3301      	adds	r3, #1
 80174c2:	9304      	str	r3, [sp, #16]
 80174c4:	2331      	movs	r3, #49	@ 0x31
 80174c6:	703b      	strb	r3, [r7, #0]
 80174c8:	e5b3      	b.n	8017032 <_dtoa_r+0x5b2>
 80174ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80174cc:	4f16      	ldr	r7, [pc, #88]	@ (8017528 <_dtoa_r+0xaa8>)
 80174ce:	b11b      	cbz	r3, 80174d8 <_dtoa_r+0xa58>
 80174d0:	f107 0308 	add.w	r3, r7, #8
 80174d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80174d6:	6013      	str	r3, [r2, #0]
 80174d8:	4638      	mov	r0, r7
 80174da:	b011      	add	sp, #68	@ 0x44
 80174dc:	ecbd 8b02 	vpop	{d8}
 80174e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e4:	9b07      	ldr	r3, [sp, #28]
 80174e6:	2b01      	cmp	r3, #1
 80174e8:	f77f ae36 	ble.w	8017158 <_dtoa_r+0x6d8>
 80174ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174f0:	2001      	movs	r0, #1
 80174f2:	e656      	b.n	80171a2 <_dtoa_r+0x722>
 80174f4:	f1bb 0f00 	cmp.w	fp, #0
 80174f8:	f77f aed7 	ble.w	80172aa <_dtoa_r+0x82a>
 80174fc:	463e      	mov	r6, r7
 80174fe:	9801      	ldr	r0, [sp, #4]
 8017500:	4621      	mov	r1, r4
 8017502:	f7ff fa35 	bl	8016970 <quorem>
 8017506:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801750a:	f806 ab01 	strb.w	sl, [r6], #1
 801750e:	1bf2      	subs	r2, r6, r7
 8017510:	4593      	cmp	fp, r2
 8017512:	ddb4      	ble.n	801747e <_dtoa_r+0x9fe>
 8017514:	9901      	ldr	r1, [sp, #4]
 8017516:	2300      	movs	r3, #0
 8017518:	220a      	movs	r2, #10
 801751a:	4648      	mov	r0, r9
 801751c:	f000 f968 	bl	80177f0 <__multadd>
 8017520:	9001      	str	r0, [sp, #4]
 8017522:	e7ec      	b.n	80174fe <_dtoa_r+0xa7e>
 8017524:	0802ccfa 	.word	0x0802ccfa
 8017528:	0802cc95 	.word	0x0802cc95

0801752c <_free_r>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	4605      	mov	r5, r0
 8017530:	2900      	cmp	r1, #0
 8017532:	d041      	beq.n	80175b8 <_free_r+0x8c>
 8017534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017538:	1f0c      	subs	r4, r1, #4
 801753a:	2b00      	cmp	r3, #0
 801753c:	bfb8      	it	lt
 801753e:	18e4      	addlt	r4, r4, r3
 8017540:	f000 f8e8 	bl	8017714 <__malloc_lock>
 8017544:	4a1d      	ldr	r2, [pc, #116]	@ (80175bc <_free_r+0x90>)
 8017546:	6813      	ldr	r3, [r2, #0]
 8017548:	b933      	cbnz	r3, 8017558 <_free_r+0x2c>
 801754a:	6063      	str	r3, [r4, #4]
 801754c:	6014      	str	r4, [r2, #0]
 801754e:	4628      	mov	r0, r5
 8017550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017554:	f000 b8e4 	b.w	8017720 <__malloc_unlock>
 8017558:	42a3      	cmp	r3, r4
 801755a:	d908      	bls.n	801756e <_free_r+0x42>
 801755c:	6820      	ldr	r0, [r4, #0]
 801755e:	1821      	adds	r1, r4, r0
 8017560:	428b      	cmp	r3, r1
 8017562:	bf01      	itttt	eq
 8017564:	6819      	ldreq	r1, [r3, #0]
 8017566:	685b      	ldreq	r3, [r3, #4]
 8017568:	1809      	addeq	r1, r1, r0
 801756a:	6021      	streq	r1, [r4, #0]
 801756c:	e7ed      	b.n	801754a <_free_r+0x1e>
 801756e:	461a      	mov	r2, r3
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	b10b      	cbz	r3, 8017578 <_free_r+0x4c>
 8017574:	42a3      	cmp	r3, r4
 8017576:	d9fa      	bls.n	801756e <_free_r+0x42>
 8017578:	6811      	ldr	r1, [r2, #0]
 801757a:	1850      	adds	r0, r2, r1
 801757c:	42a0      	cmp	r0, r4
 801757e:	d10b      	bne.n	8017598 <_free_r+0x6c>
 8017580:	6820      	ldr	r0, [r4, #0]
 8017582:	4401      	add	r1, r0
 8017584:	1850      	adds	r0, r2, r1
 8017586:	4283      	cmp	r3, r0
 8017588:	6011      	str	r1, [r2, #0]
 801758a:	d1e0      	bne.n	801754e <_free_r+0x22>
 801758c:	6818      	ldr	r0, [r3, #0]
 801758e:	685b      	ldr	r3, [r3, #4]
 8017590:	6053      	str	r3, [r2, #4]
 8017592:	4408      	add	r0, r1
 8017594:	6010      	str	r0, [r2, #0]
 8017596:	e7da      	b.n	801754e <_free_r+0x22>
 8017598:	d902      	bls.n	80175a0 <_free_r+0x74>
 801759a:	230c      	movs	r3, #12
 801759c:	602b      	str	r3, [r5, #0]
 801759e:	e7d6      	b.n	801754e <_free_r+0x22>
 80175a0:	6820      	ldr	r0, [r4, #0]
 80175a2:	1821      	adds	r1, r4, r0
 80175a4:	428b      	cmp	r3, r1
 80175a6:	bf04      	itt	eq
 80175a8:	6819      	ldreq	r1, [r3, #0]
 80175aa:	685b      	ldreq	r3, [r3, #4]
 80175ac:	6063      	str	r3, [r4, #4]
 80175ae:	bf04      	itt	eq
 80175b0:	1809      	addeq	r1, r1, r0
 80175b2:	6021      	streq	r1, [r4, #0]
 80175b4:	6054      	str	r4, [r2, #4]
 80175b6:	e7ca      	b.n	801754e <_free_r+0x22>
 80175b8:	bd38      	pop	{r3, r4, r5, pc}
 80175ba:	bf00      	nop
 80175bc:	20010318 	.word	0x20010318

080175c0 <malloc>:
 80175c0:	4b02      	ldr	r3, [pc, #8]	@ (80175cc <malloc+0xc>)
 80175c2:	4601      	mov	r1, r0
 80175c4:	6818      	ldr	r0, [r3, #0]
 80175c6:	f000 b825 	b.w	8017614 <_malloc_r>
 80175ca:	bf00      	nop
 80175cc:	2000003c 	.word	0x2000003c

080175d0 <sbrk_aligned>:
 80175d0:	b570      	push	{r4, r5, r6, lr}
 80175d2:	4e0f      	ldr	r6, [pc, #60]	@ (8017610 <sbrk_aligned+0x40>)
 80175d4:	460c      	mov	r4, r1
 80175d6:	6831      	ldr	r1, [r6, #0]
 80175d8:	4605      	mov	r5, r0
 80175da:	b911      	cbnz	r1, 80175e2 <sbrk_aligned+0x12>
 80175dc:	f001 f804 	bl	80185e8 <_sbrk_r>
 80175e0:	6030      	str	r0, [r6, #0]
 80175e2:	4621      	mov	r1, r4
 80175e4:	4628      	mov	r0, r5
 80175e6:	f000 ffff 	bl	80185e8 <_sbrk_r>
 80175ea:	1c43      	adds	r3, r0, #1
 80175ec:	d103      	bne.n	80175f6 <sbrk_aligned+0x26>
 80175ee:	f04f 34ff 	mov.w	r4, #4294967295
 80175f2:	4620      	mov	r0, r4
 80175f4:	bd70      	pop	{r4, r5, r6, pc}
 80175f6:	1cc4      	adds	r4, r0, #3
 80175f8:	f024 0403 	bic.w	r4, r4, #3
 80175fc:	42a0      	cmp	r0, r4
 80175fe:	d0f8      	beq.n	80175f2 <sbrk_aligned+0x22>
 8017600:	1a21      	subs	r1, r4, r0
 8017602:	4628      	mov	r0, r5
 8017604:	f000 fff0 	bl	80185e8 <_sbrk_r>
 8017608:	3001      	adds	r0, #1
 801760a:	d1f2      	bne.n	80175f2 <sbrk_aligned+0x22>
 801760c:	e7ef      	b.n	80175ee <sbrk_aligned+0x1e>
 801760e:	bf00      	nop
 8017610:	20010314 	.word	0x20010314

08017614 <_malloc_r>:
 8017614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017618:	1ccd      	adds	r5, r1, #3
 801761a:	f025 0503 	bic.w	r5, r5, #3
 801761e:	3508      	adds	r5, #8
 8017620:	2d0c      	cmp	r5, #12
 8017622:	bf38      	it	cc
 8017624:	250c      	movcc	r5, #12
 8017626:	2d00      	cmp	r5, #0
 8017628:	4606      	mov	r6, r0
 801762a:	db01      	blt.n	8017630 <_malloc_r+0x1c>
 801762c:	42a9      	cmp	r1, r5
 801762e:	d904      	bls.n	801763a <_malloc_r+0x26>
 8017630:	230c      	movs	r3, #12
 8017632:	6033      	str	r3, [r6, #0]
 8017634:	2000      	movs	r0, #0
 8017636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801763a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017710 <_malloc_r+0xfc>
 801763e:	f000 f869 	bl	8017714 <__malloc_lock>
 8017642:	f8d8 3000 	ldr.w	r3, [r8]
 8017646:	461c      	mov	r4, r3
 8017648:	bb44      	cbnz	r4, 801769c <_malloc_r+0x88>
 801764a:	4629      	mov	r1, r5
 801764c:	4630      	mov	r0, r6
 801764e:	f7ff ffbf 	bl	80175d0 <sbrk_aligned>
 8017652:	1c43      	adds	r3, r0, #1
 8017654:	4604      	mov	r4, r0
 8017656:	d158      	bne.n	801770a <_malloc_r+0xf6>
 8017658:	f8d8 4000 	ldr.w	r4, [r8]
 801765c:	4627      	mov	r7, r4
 801765e:	2f00      	cmp	r7, #0
 8017660:	d143      	bne.n	80176ea <_malloc_r+0xd6>
 8017662:	2c00      	cmp	r4, #0
 8017664:	d04b      	beq.n	80176fe <_malloc_r+0xea>
 8017666:	6823      	ldr	r3, [r4, #0]
 8017668:	4639      	mov	r1, r7
 801766a:	4630      	mov	r0, r6
 801766c:	eb04 0903 	add.w	r9, r4, r3
 8017670:	f000 ffba 	bl	80185e8 <_sbrk_r>
 8017674:	4581      	cmp	r9, r0
 8017676:	d142      	bne.n	80176fe <_malloc_r+0xea>
 8017678:	6821      	ldr	r1, [r4, #0]
 801767a:	1a6d      	subs	r5, r5, r1
 801767c:	4629      	mov	r1, r5
 801767e:	4630      	mov	r0, r6
 8017680:	f7ff ffa6 	bl	80175d0 <sbrk_aligned>
 8017684:	3001      	adds	r0, #1
 8017686:	d03a      	beq.n	80176fe <_malloc_r+0xea>
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	442b      	add	r3, r5
 801768c:	6023      	str	r3, [r4, #0]
 801768e:	f8d8 3000 	ldr.w	r3, [r8]
 8017692:	685a      	ldr	r2, [r3, #4]
 8017694:	bb62      	cbnz	r2, 80176f0 <_malloc_r+0xdc>
 8017696:	f8c8 7000 	str.w	r7, [r8]
 801769a:	e00f      	b.n	80176bc <_malloc_r+0xa8>
 801769c:	6822      	ldr	r2, [r4, #0]
 801769e:	1b52      	subs	r2, r2, r5
 80176a0:	d420      	bmi.n	80176e4 <_malloc_r+0xd0>
 80176a2:	2a0b      	cmp	r2, #11
 80176a4:	d917      	bls.n	80176d6 <_malloc_r+0xc2>
 80176a6:	1961      	adds	r1, r4, r5
 80176a8:	42a3      	cmp	r3, r4
 80176aa:	6025      	str	r5, [r4, #0]
 80176ac:	bf18      	it	ne
 80176ae:	6059      	strne	r1, [r3, #4]
 80176b0:	6863      	ldr	r3, [r4, #4]
 80176b2:	bf08      	it	eq
 80176b4:	f8c8 1000 	streq.w	r1, [r8]
 80176b8:	5162      	str	r2, [r4, r5]
 80176ba:	604b      	str	r3, [r1, #4]
 80176bc:	4630      	mov	r0, r6
 80176be:	f000 f82f 	bl	8017720 <__malloc_unlock>
 80176c2:	f104 000b 	add.w	r0, r4, #11
 80176c6:	1d23      	adds	r3, r4, #4
 80176c8:	f020 0007 	bic.w	r0, r0, #7
 80176cc:	1ac2      	subs	r2, r0, r3
 80176ce:	bf1c      	itt	ne
 80176d0:	1a1b      	subne	r3, r3, r0
 80176d2:	50a3      	strne	r3, [r4, r2]
 80176d4:	e7af      	b.n	8017636 <_malloc_r+0x22>
 80176d6:	6862      	ldr	r2, [r4, #4]
 80176d8:	42a3      	cmp	r3, r4
 80176da:	bf0c      	ite	eq
 80176dc:	f8c8 2000 	streq.w	r2, [r8]
 80176e0:	605a      	strne	r2, [r3, #4]
 80176e2:	e7eb      	b.n	80176bc <_malloc_r+0xa8>
 80176e4:	4623      	mov	r3, r4
 80176e6:	6864      	ldr	r4, [r4, #4]
 80176e8:	e7ae      	b.n	8017648 <_malloc_r+0x34>
 80176ea:	463c      	mov	r4, r7
 80176ec:	687f      	ldr	r7, [r7, #4]
 80176ee:	e7b6      	b.n	801765e <_malloc_r+0x4a>
 80176f0:	461a      	mov	r2, r3
 80176f2:	685b      	ldr	r3, [r3, #4]
 80176f4:	42a3      	cmp	r3, r4
 80176f6:	d1fb      	bne.n	80176f0 <_malloc_r+0xdc>
 80176f8:	2300      	movs	r3, #0
 80176fa:	6053      	str	r3, [r2, #4]
 80176fc:	e7de      	b.n	80176bc <_malloc_r+0xa8>
 80176fe:	230c      	movs	r3, #12
 8017700:	6033      	str	r3, [r6, #0]
 8017702:	4630      	mov	r0, r6
 8017704:	f000 f80c 	bl	8017720 <__malloc_unlock>
 8017708:	e794      	b.n	8017634 <_malloc_r+0x20>
 801770a:	6005      	str	r5, [r0, #0]
 801770c:	e7d6      	b.n	80176bc <_malloc_r+0xa8>
 801770e:	bf00      	nop
 8017710:	20010318 	.word	0x20010318

08017714 <__malloc_lock>:
 8017714:	4801      	ldr	r0, [pc, #4]	@ (801771c <__malloc_lock+0x8>)
 8017716:	f7ff b8fc 	b.w	8016912 <__retarget_lock_acquire_recursive>
 801771a:	bf00      	nop
 801771c:	20010310 	.word	0x20010310

08017720 <__malloc_unlock>:
 8017720:	4801      	ldr	r0, [pc, #4]	@ (8017728 <__malloc_unlock+0x8>)
 8017722:	f7ff b8f7 	b.w	8016914 <__retarget_lock_release_recursive>
 8017726:	bf00      	nop
 8017728:	20010310 	.word	0x20010310

0801772c <_Balloc>:
 801772c:	b570      	push	{r4, r5, r6, lr}
 801772e:	69c6      	ldr	r6, [r0, #28]
 8017730:	4604      	mov	r4, r0
 8017732:	460d      	mov	r5, r1
 8017734:	b976      	cbnz	r6, 8017754 <_Balloc+0x28>
 8017736:	2010      	movs	r0, #16
 8017738:	f7ff ff42 	bl	80175c0 <malloc>
 801773c:	4602      	mov	r2, r0
 801773e:	61e0      	str	r0, [r4, #28]
 8017740:	b920      	cbnz	r0, 801774c <_Balloc+0x20>
 8017742:	4b18      	ldr	r3, [pc, #96]	@ (80177a4 <_Balloc+0x78>)
 8017744:	4818      	ldr	r0, [pc, #96]	@ (80177a8 <_Balloc+0x7c>)
 8017746:	216b      	movs	r1, #107	@ 0x6b
 8017748:	f7ff f8f4 	bl	8016934 <__assert_func>
 801774c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017750:	6006      	str	r6, [r0, #0]
 8017752:	60c6      	str	r6, [r0, #12]
 8017754:	69e6      	ldr	r6, [r4, #28]
 8017756:	68f3      	ldr	r3, [r6, #12]
 8017758:	b183      	cbz	r3, 801777c <_Balloc+0x50>
 801775a:	69e3      	ldr	r3, [r4, #28]
 801775c:	68db      	ldr	r3, [r3, #12]
 801775e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017762:	b9b8      	cbnz	r0, 8017794 <_Balloc+0x68>
 8017764:	2101      	movs	r1, #1
 8017766:	fa01 f605 	lsl.w	r6, r1, r5
 801776a:	1d72      	adds	r2, r6, #5
 801776c:	0092      	lsls	r2, r2, #2
 801776e:	4620      	mov	r0, r4
 8017770:	f000 ff51 	bl	8018616 <_calloc_r>
 8017774:	b160      	cbz	r0, 8017790 <_Balloc+0x64>
 8017776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801777a:	e00e      	b.n	801779a <_Balloc+0x6e>
 801777c:	2221      	movs	r2, #33	@ 0x21
 801777e:	2104      	movs	r1, #4
 8017780:	4620      	mov	r0, r4
 8017782:	f000 ff48 	bl	8018616 <_calloc_r>
 8017786:	69e3      	ldr	r3, [r4, #28]
 8017788:	60f0      	str	r0, [r6, #12]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d1e4      	bne.n	801775a <_Balloc+0x2e>
 8017790:	2000      	movs	r0, #0
 8017792:	bd70      	pop	{r4, r5, r6, pc}
 8017794:	6802      	ldr	r2, [r0, #0]
 8017796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801779a:	2300      	movs	r3, #0
 801779c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80177a0:	e7f7      	b.n	8017792 <_Balloc+0x66>
 80177a2:	bf00      	nop
 80177a4:	0802cab5 	.word	0x0802cab5
 80177a8:	0802cd0b 	.word	0x0802cd0b

080177ac <_Bfree>:
 80177ac:	b570      	push	{r4, r5, r6, lr}
 80177ae:	69c6      	ldr	r6, [r0, #28]
 80177b0:	4605      	mov	r5, r0
 80177b2:	460c      	mov	r4, r1
 80177b4:	b976      	cbnz	r6, 80177d4 <_Bfree+0x28>
 80177b6:	2010      	movs	r0, #16
 80177b8:	f7ff ff02 	bl	80175c0 <malloc>
 80177bc:	4602      	mov	r2, r0
 80177be:	61e8      	str	r0, [r5, #28]
 80177c0:	b920      	cbnz	r0, 80177cc <_Bfree+0x20>
 80177c2:	4b09      	ldr	r3, [pc, #36]	@ (80177e8 <_Bfree+0x3c>)
 80177c4:	4809      	ldr	r0, [pc, #36]	@ (80177ec <_Bfree+0x40>)
 80177c6:	218f      	movs	r1, #143	@ 0x8f
 80177c8:	f7ff f8b4 	bl	8016934 <__assert_func>
 80177cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80177d0:	6006      	str	r6, [r0, #0]
 80177d2:	60c6      	str	r6, [r0, #12]
 80177d4:	b13c      	cbz	r4, 80177e6 <_Bfree+0x3a>
 80177d6:	69eb      	ldr	r3, [r5, #28]
 80177d8:	6862      	ldr	r2, [r4, #4]
 80177da:	68db      	ldr	r3, [r3, #12]
 80177dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80177e0:	6021      	str	r1, [r4, #0]
 80177e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80177e6:	bd70      	pop	{r4, r5, r6, pc}
 80177e8:	0802cab5 	.word	0x0802cab5
 80177ec:	0802cd0b 	.word	0x0802cd0b

080177f0 <__multadd>:
 80177f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f4:	690d      	ldr	r5, [r1, #16]
 80177f6:	4607      	mov	r7, r0
 80177f8:	460c      	mov	r4, r1
 80177fa:	461e      	mov	r6, r3
 80177fc:	f101 0c14 	add.w	ip, r1, #20
 8017800:	2000      	movs	r0, #0
 8017802:	f8dc 3000 	ldr.w	r3, [ip]
 8017806:	b299      	uxth	r1, r3
 8017808:	fb02 6101 	mla	r1, r2, r1, r6
 801780c:	0c1e      	lsrs	r6, r3, #16
 801780e:	0c0b      	lsrs	r3, r1, #16
 8017810:	fb02 3306 	mla	r3, r2, r6, r3
 8017814:	b289      	uxth	r1, r1
 8017816:	3001      	adds	r0, #1
 8017818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801781c:	4285      	cmp	r5, r0
 801781e:	f84c 1b04 	str.w	r1, [ip], #4
 8017822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017826:	dcec      	bgt.n	8017802 <__multadd+0x12>
 8017828:	b30e      	cbz	r6, 801786e <__multadd+0x7e>
 801782a:	68a3      	ldr	r3, [r4, #8]
 801782c:	42ab      	cmp	r3, r5
 801782e:	dc19      	bgt.n	8017864 <__multadd+0x74>
 8017830:	6861      	ldr	r1, [r4, #4]
 8017832:	4638      	mov	r0, r7
 8017834:	3101      	adds	r1, #1
 8017836:	f7ff ff79 	bl	801772c <_Balloc>
 801783a:	4680      	mov	r8, r0
 801783c:	b928      	cbnz	r0, 801784a <__multadd+0x5a>
 801783e:	4602      	mov	r2, r0
 8017840:	4b0c      	ldr	r3, [pc, #48]	@ (8017874 <__multadd+0x84>)
 8017842:	480d      	ldr	r0, [pc, #52]	@ (8017878 <__multadd+0x88>)
 8017844:	21ba      	movs	r1, #186	@ 0xba
 8017846:	f7ff f875 	bl	8016934 <__assert_func>
 801784a:	6922      	ldr	r2, [r4, #16]
 801784c:	3202      	adds	r2, #2
 801784e:	f104 010c 	add.w	r1, r4, #12
 8017852:	0092      	lsls	r2, r2, #2
 8017854:	300c      	adds	r0, #12
 8017856:	f7ff f85e 	bl	8016916 <memcpy>
 801785a:	4621      	mov	r1, r4
 801785c:	4638      	mov	r0, r7
 801785e:	f7ff ffa5 	bl	80177ac <_Bfree>
 8017862:	4644      	mov	r4, r8
 8017864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017868:	3501      	adds	r5, #1
 801786a:	615e      	str	r6, [r3, #20]
 801786c:	6125      	str	r5, [r4, #16]
 801786e:	4620      	mov	r0, r4
 8017870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017874:	0802ccfa 	.word	0x0802ccfa
 8017878:	0802cd0b 	.word	0x0802cd0b

0801787c <__hi0bits>:
 801787c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017880:	4603      	mov	r3, r0
 8017882:	bf36      	itet	cc
 8017884:	0403      	lslcc	r3, r0, #16
 8017886:	2000      	movcs	r0, #0
 8017888:	2010      	movcc	r0, #16
 801788a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801788e:	bf3c      	itt	cc
 8017890:	021b      	lslcc	r3, r3, #8
 8017892:	3008      	addcc	r0, #8
 8017894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017898:	bf3c      	itt	cc
 801789a:	011b      	lslcc	r3, r3, #4
 801789c:	3004      	addcc	r0, #4
 801789e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80178a2:	bf3c      	itt	cc
 80178a4:	009b      	lslcc	r3, r3, #2
 80178a6:	3002      	addcc	r0, #2
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	db05      	blt.n	80178b8 <__hi0bits+0x3c>
 80178ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80178b0:	f100 0001 	add.w	r0, r0, #1
 80178b4:	bf08      	it	eq
 80178b6:	2020      	moveq	r0, #32
 80178b8:	4770      	bx	lr

080178ba <__lo0bits>:
 80178ba:	6803      	ldr	r3, [r0, #0]
 80178bc:	4602      	mov	r2, r0
 80178be:	f013 0007 	ands.w	r0, r3, #7
 80178c2:	d00b      	beq.n	80178dc <__lo0bits+0x22>
 80178c4:	07d9      	lsls	r1, r3, #31
 80178c6:	d421      	bmi.n	801790c <__lo0bits+0x52>
 80178c8:	0798      	lsls	r0, r3, #30
 80178ca:	bf49      	itett	mi
 80178cc:	085b      	lsrmi	r3, r3, #1
 80178ce:	089b      	lsrpl	r3, r3, #2
 80178d0:	2001      	movmi	r0, #1
 80178d2:	6013      	strmi	r3, [r2, #0]
 80178d4:	bf5c      	itt	pl
 80178d6:	6013      	strpl	r3, [r2, #0]
 80178d8:	2002      	movpl	r0, #2
 80178da:	4770      	bx	lr
 80178dc:	b299      	uxth	r1, r3
 80178de:	b909      	cbnz	r1, 80178e4 <__lo0bits+0x2a>
 80178e0:	0c1b      	lsrs	r3, r3, #16
 80178e2:	2010      	movs	r0, #16
 80178e4:	b2d9      	uxtb	r1, r3
 80178e6:	b909      	cbnz	r1, 80178ec <__lo0bits+0x32>
 80178e8:	3008      	adds	r0, #8
 80178ea:	0a1b      	lsrs	r3, r3, #8
 80178ec:	0719      	lsls	r1, r3, #28
 80178ee:	bf04      	itt	eq
 80178f0:	091b      	lsreq	r3, r3, #4
 80178f2:	3004      	addeq	r0, #4
 80178f4:	0799      	lsls	r1, r3, #30
 80178f6:	bf04      	itt	eq
 80178f8:	089b      	lsreq	r3, r3, #2
 80178fa:	3002      	addeq	r0, #2
 80178fc:	07d9      	lsls	r1, r3, #31
 80178fe:	d403      	bmi.n	8017908 <__lo0bits+0x4e>
 8017900:	085b      	lsrs	r3, r3, #1
 8017902:	f100 0001 	add.w	r0, r0, #1
 8017906:	d003      	beq.n	8017910 <__lo0bits+0x56>
 8017908:	6013      	str	r3, [r2, #0]
 801790a:	4770      	bx	lr
 801790c:	2000      	movs	r0, #0
 801790e:	4770      	bx	lr
 8017910:	2020      	movs	r0, #32
 8017912:	4770      	bx	lr

08017914 <__i2b>:
 8017914:	b510      	push	{r4, lr}
 8017916:	460c      	mov	r4, r1
 8017918:	2101      	movs	r1, #1
 801791a:	f7ff ff07 	bl	801772c <_Balloc>
 801791e:	4602      	mov	r2, r0
 8017920:	b928      	cbnz	r0, 801792e <__i2b+0x1a>
 8017922:	4b05      	ldr	r3, [pc, #20]	@ (8017938 <__i2b+0x24>)
 8017924:	4805      	ldr	r0, [pc, #20]	@ (801793c <__i2b+0x28>)
 8017926:	f240 1145 	movw	r1, #325	@ 0x145
 801792a:	f7ff f803 	bl	8016934 <__assert_func>
 801792e:	2301      	movs	r3, #1
 8017930:	6144      	str	r4, [r0, #20]
 8017932:	6103      	str	r3, [r0, #16]
 8017934:	bd10      	pop	{r4, pc}
 8017936:	bf00      	nop
 8017938:	0802ccfa 	.word	0x0802ccfa
 801793c:	0802cd0b 	.word	0x0802cd0b

08017940 <__multiply>:
 8017940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	4614      	mov	r4, r2
 8017946:	690a      	ldr	r2, [r1, #16]
 8017948:	6923      	ldr	r3, [r4, #16]
 801794a:	429a      	cmp	r2, r3
 801794c:	bfa8      	it	ge
 801794e:	4623      	movge	r3, r4
 8017950:	460f      	mov	r7, r1
 8017952:	bfa4      	itt	ge
 8017954:	460c      	movge	r4, r1
 8017956:	461f      	movge	r7, r3
 8017958:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801795c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017960:	68a3      	ldr	r3, [r4, #8]
 8017962:	6861      	ldr	r1, [r4, #4]
 8017964:	eb0a 0609 	add.w	r6, sl, r9
 8017968:	42b3      	cmp	r3, r6
 801796a:	b085      	sub	sp, #20
 801796c:	bfb8      	it	lt
 801796e:	3101      	addlt	r1, #1
 8017970:	f7ff fedc 	bl	801772c <_Balloc>
 8017974:	b930      	cbnz	r0, 8017984 <__multiply+0x44>
 8017976:	4602      	mov	r2, r0
 8017978:	4b44      	ldr	r3, [pc, #272]	@ (8017a8c <__multiply+0x14c>)
 801797a:	4845      	ldr	r0, [pc, #276]	@ (8017a90 <__multiply+0x150>)
 801797c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017980:	f7fe ffd8 	bl	8016934 <__assert_func>
 8017984:	f100 0514 	add.w	r5, r0, #20
 8017988:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801798c:	462b      	mov	r3, r5
 801798e:	2200      	movs	r2, #0
 8017990:	4543      	cmp	r3, r8
 8017992:	d321      	bcc.n	80179d8 <__multiply+0x98>
 8017994:	f107 0114 	add.w	r1, r7, #20
 8017998:	f104 0214 	add.w	r2, r4, #20
 801799c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80179a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80179a4:	9302      	str	r3, [sp, #8]
 80179a6:	1b13      	subs	r3, r2, r4
 80179a8:	3b15      	subs	r3, #21
 80179aa:	f023 0303 	bic.w	r3, r3, #3
 80179ae:	3304      	adds	r3, #4
 80179b0:	f104 0715 	add.w	r7, r4, #21
 80179b4:	42ba      	cmp	r2, r7
 80179b6:	bf38      	it	cc
 80179b8:	2304      	movcc	r3, #4
 80179ba:	9301      	str	r3, [sp, #4]
 80179bc:	9b02      	ldr	r3, [sp, #8]
 80179be:	9103      	str	r1, [sp, #12]
 80179c0:	428b      	cmp	r3, r1
 80179c2:	d80c      	bhi.n	80179de <__multiply+0x9e>
 80179c4:	2e00      	cmp	r6, #0
 80179c6:	dd03      	ble.n	80179d0 <__multiply+0x90>
 80179c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d05b      	beq.n	8017a88 <__multiply+0x148>
 80179d0:	6106      	str	r6, [r0, #16]
 80179d2:	b005      	add	sp, #20
 80179d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d8:	f843 2b04 	str.w	r2, [r3], #4
 80179dc:	e7d8      	b.n	8017990 <__multiply+0x50>
 80179de:	f8b1 a000 	ldrh.w	sl, [r1]
 80179e2:	f1ba 0f00 	cmp.w	sl, #0
 80179e6:	d024      	beq.n	8017a32 <__multiply+0xf2>
 80179e8:	f104 0e14 	add.w	lr, r4, #20
 80179ec:	46a9      	mov	r9, r5
 80179ee:	f04f 0c00 	mov.w	ip, #0
 80179f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80179f6:	f8d9 3000 	ldr.w	r3, [r9]
 80179fa:	fa1f fb87 	uxth.w	fp, r7
 80179fe:	b29b      	uxth	r3, r3
 8017a00:	fb0a 330b 	mla	r3, sl, fp, r3
 8017a04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017a08:	f8d9 7000 	ldr.w	r7, [r9]
 8017a0c:	4463      	add	r3, ip
 8017a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017a12:	fb0a c70b 	mla	r7, sl, fp, ip
 8017a16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017a20:	4572      	cmp	r2, lr
 8017a22:	f849 3b04 	str.w	r3, [r9], #4
 8017a26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017a2a:	d8e2      	bhi.n	80179f2 <__multiply+0xb2>
 8017a2c:	9b01      	ldr	r3, [sp, #4]
 8017a2e:	f845 c003 	str.w	ip, [r5, r3]
 8017a32:	9b03      	ldr	r3, [sp, #12]
 8017a34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017a38:	3104      	adds	r1, #4
 8017a3a:	f1b9 0f00 	cmp.w	r9, #0
 8017a3e:	d021      	beq.n	8017a84 <__multiply+0x144>
 8017a40:	682b      	ldr	r3, [r5, #0]
 8017a42:	f104 0c14 	add.w	ip, r4, #20
 8017a46:	46ae      	mov	lr, r5
 8017a48:	f04f 0a00 	mov.w	sl, #0
 8017a4c:	f8bc b000 	ldrh.w	fp, [ip]
 8017a50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017a54:	fb09 770b 	mla	r7, r9, fp, r7
 8017a58:	4457      	add	r7, sl
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017a60:	f84e 3b04 	str.w	r3, [lr], #4
 8017a64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017a68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017a6c:	f8be 3000 	ldrh.w	r3, [lr]
 8017a70:	fb09 330a 	mla	r3, r9, sl, r3
 8017a74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017a78:	4562      	cmp	r2, ip
 8017a7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017a7e:	d8e5      	bhi.n	8017a4c <__multiply+0x10c>
 8017a80:	9f01      	ldr	r7, [sp, #4]
 8017a82:	51eb      	str	r3, [r5, r7]
 8017a84:	3504      	adds	r5, #4
 8017a86:	e799      	b.n	80179bc <__multiply+0x7c>
 8017a88:	3e01      	subs	r6, #1
 8017a8a:	e79b      	b.n	80179c4 <__multiply+0x84>
 8017a8c:	0802ccfa 	.word	0x0802ccfa
 8017a90:	0802cd0b 	.word	0x0802cd0b

08017a94 <__pow5mult>:
 8017a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a98:	4615      	mov	r5, r2
 8017a9a:	f012 0203 	ands.w	r2, r2, #3
 8017a9e:	4607      	mov	r7, r0
 8017aa0:	460e      	mov	r6, r1
 8017aa2:	d007      	beq.n	8017ab4 <__pow5mult+0x20>
 8017aa4:	4c25      	ldr	r4, [pc, #148]	@ (8017b3c <__pow5mult+0xa8>)
 8017aa6:	3a01      	subs	r2, #1
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017aae:	f7ff fe9f 	bl	80177f0 <__multadd>
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	10ad      	asrs	r5, r5, #2
 8017ab6:	d03d      	beq.n	8017b34 <__pow5mult+0xa0>
 8017ab8:	69fc      	ldr	r4, [r7, #28]
 8017aba:	b97c      	cbnz	r4, 8017adc <__pow5mult+0x48>
 8017abc:	2010      	movs	r0, #16
 8017abe:	f7ff fd7f 	bl	80175c0 <malloc>
 8017ac2:	4602      	mov	r2, r0
 8017ac4:	61f8      	str	r0, [r7, #28]
 8017ac6:	b928      	cbnz	r0, 8017ad4 <__pow5mult+0x40>
 8017ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8017b40 <__pow5mult+0xac>)
 8017aca:	481e      	ldr	r0, [pc, #120]	@ (8017b44 <__pow5mult+0xb0>)
 8017acc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017ad0:	f7fe ff30 	bl	8016934 <__assert_func>
 8017ad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ad8:	6004      	str	r4, [r0, #0]
 8017ada:	60c4      	str	r4, [r0, #12]
 8017adc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017ae4:	b94c      	cbnz	r4, 8017afa <__pow5mult+0x66>
 8017ae6:	f240 2171 	movw	r1, #625	@ 0x271
 8017aea:	4638      	mov	r0, r7
 8017aec:	f7ff ff12 	bl	8017914 <__i2b>
 8017af0:	2300      	movs	r3, #0
 8017af2:	f8c8 0008 	str.w	r0, [r8, #8]
 8017af6:	4604      	mov	r4, r0
 8017af8:	6003      	str	r3, [r0, #0]
 8017afa:	f04f 0900 	mov.w	r9, #0
 8017afe:	07eb      	lsls	r3, r5, #31
 8017b00:	d50a      	bpl.n	8017b18 <__pow5mult+0x84>
 8017b02:	4631      	mov	r1, r6
 8017b04:	4622      	mov	r2, r4
 8017b06:	4638      	mov	r0, r7
 8017b08:	f7ff ff1a 	bl	8017940 <__multiply>
 8017b0c:	4631      	mov	r1, r6
 8017b0e:	4680      	mov	r8, r0
 8017b10:	4638      	mov	r0, r7
 8017b12:	f7ff fe4b 	bl	80177ac <_Bfree>
 8017b16:	4646      	mov	r6, r8
 8017b18:	106d      	asrs	r5, r5, #1
 8017b1a:	d00b      	beq.n	8017b34 <__pow5mult+0xa0>
 8017b1c:	6820      	ldr	r0, [r4, #0]
 8017b1e:	b938      	cbnz	r0, 8017b30 <__pow5mult+0x9c>
 8017b20:	4622      	mov	r2, r4
 8017b22:	4621      	mov	r1, r4
 8017b24:	4638      	mov	r0, r7
 8017b26:	f7ff ff0b 	bl	8017940 <__multiply>
 8017b2a:	6020      	str	r0, [r4, #0]
 8017b2c:	f8c0 9000 	str.w	r9, [r0]
 8017b30:	4604      	mov	r4, r0
 8017b32:	e7e4      	b.n	8017afe <__pow5mult+0x6a>
 8017b34:	4630      	mov	r0, r6
 8017b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b3a:	bf00      	nop
 8017b3c:	0802cd64 	.word	0x0802cd64
 8017b40:	0802cab5 	.word	0x0802cab5
 8017b44:	0802cd0b 	.word	0x0802cd0b

08017b48 <__lshift>:
 8017b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b4c:	460c      	mov	r4, r1
 8017b4e:	6849      	ldr	r1, [r1, #4]
 8017b50:	6923      	ldr	r3, [r4, #16]
 8017b52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017b56:	68a3      	ldr	r3, [r4, #8]
 8017b58:	4607      	mov	r7, r0
 8017b5a:	4691      	mov	r9, r2
 8017b5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017b60:	f108 0601 	add.w	r6, r8, #1
 8017b64:	42b3      	cmp	r3, r6
 8017b66:	db0b      	blt.n	8017b80 <__lshift+0x38>
 8017b68:	4638      	mov	r0, r7
 8017b6a:	f7ff fddf 	bl	801772c <_Balloc>
 8017b6e:	4605      	mov	r5, r0
 8017b70:	b948      	cbnz	r0, 8017b86 <__lshift+0x3e>
 8017b72:	4602      	mov	r2, r0
 8017b74:	4b28      	ldr	r3, [pc, #160]	@ (8017c18 <__lshift+0xd0>)
 8017b76:	4829      	ldr	r0, [pc, #164]	@ (8017c1c <__lshift+0xd4>)
 8017b78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017b7c:	f7fe feda 	bl	8016934 <__assert_func>
 8017b80:	3101      	adds	r1, #1
 8017b82:	005b      	lsls	r3, r3, #1
 8017b84:	e7ee      	b.n	8017b64 <__lshift+0x1c>
 8017b86:	2300      	movs	r3, #0
 8017b88:	f100 0114 	add.w	r1, r0, #20
 8017b8c:	f100 0210 	add.w	r2, r0, #16
 8017b90:	4618      	mov	r0, r3
 8017b92:	4553      	cmp	r3, sl
 8017b94:	db33      	blt.n	8017bfe <__lshift+0xb6>
 8017b96:	6920      	ldr	r0, [r4, #16]
 8017b98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017b9c:	f104 0314 	add.w	r3, r4, #20
 8017ba0:	f019 091f 	ands.w	r9, r9, #31
 8017ba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017bac:	d02b      	beq.n	8017c06 <__lshift+0xbe>
 8017bae:	f1c9 0e20 	rsb	lr, r9, #32
 8017bb2:	468a      	mov	sl, r1
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	6818      	ldr	r0, [r3, #0]
 8017bb8:	fa00 f009 	lsl.w	r0, r0, r9
 8017bbc:	4310      	orrs	r0, r2
 8017bbe:	f84a 0b04 	str.w	r0, [sl], #4
 8017bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bc6:	459c      	cmp	ip, r3
 8017bc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8017bcc:	d8f3      	bhi.n	8017bb6 <__lshift+0x6e>
 8017bce:	ebac 0304 	sub.w	r3, ip, r4
 8017bd2:	3b15      	subs	r3, #21
 8017bd4:	f023 0303 	bic.w	r3, r3, #3
 8017bd8:	3304      	adds	r3, #4
 8017bda:	f104 0015 	add.w	r0, r4, #21
 8017bde:	4584      	cmp	ip, r0
 8017be0:	bf38      	it	cc
 8017be2:	2304      	movcc	r3, #4
 8017be4:	50ca      	str	r2, [r1, r3]
 8017be6:	b10a      	cbz	r2, 8017bec <__lshift+0xa4>
 8017be8:	f108 0602 	add.w	r6, r8, #2
 8017bec:	3e01      	subs	r6, #1
 8017bee:	4638      	mov	r0, r7
 8017bf0:	612e      	str	r6, [r5, #16]
 8017bf2:	4621      	mov	r1, r4
 8017bf4:	f7ff fdda 	bl	80177ac <_Bfree>
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8017c02:	3301      	adds	r3, #1
 8017c04:	e7c5      	b.n	8017b92 <__lshift+0x4a>
 8017c06:	3904      	subs	r1, #4
 8017c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c10:	459c      	cmp	ip, r3
 8017c12:	d8f9      	bhi.n	8017c08 <__lshift+0xc0>
 8017c14:	e7ea      	b.n	8017bec <__lshift+0xa4>
 8017c16:	bf00      	nop
 8017c18:	0802ccfa 	.word	0x0802ccfa
 8017c1c:	0802cd0b 	.word	0x0802cd0b

08017c20 <__mcmp>:
 8017c20:	690a      	ldr	r2, [r1, #16]
 8017c22:	4603      	mov	r3, r0
 8017c24:	6900      	ldr	r0, [r0, #16]
 8017c26:	1a80      	subs	r0, r0, r2
 8017c28:	b530      	push	{r4, r5, lr}
 8017c2a:	d10e      	bne.n	8017c4a <__mcmp+0x2a>
 8017c2c:	3314      	adds	r3, #20
 8017c2e:	3114      	adds	r1, #20
 8017c30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017c34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017c38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017c40:	4295      	cmp	r5, r2
 8017c42:	d003      	beq.n	8017c4c <__mcmp+0x2c>
 8017c44:	d205      	bcs.n	8017c52 <__mcmp+0x32>
 8017c46:	f04f 30ff 	mov.w	r0, #4294967295
 8017c4a:	bd30      	pop	{r4, r5, pc}
 8017c4c:	42a3      	cmp	r3, r4
 8017c4e:	d3f3      	bcc.n	8017c38 <__mcmp+0x18>
 8017c50:	e7fb      	b.n	8017c4a <__mcmp+0x2a>
 8017c52:	2001      	movs	r0, #1
 8017c54:	e7f9      	b.n	8017c4a <__mcmp+0x2a>
	...

08017c58 <__mdiff>:
 8017c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c5c:	4689      	mov	r9, r1
 8017c5e:	4606      	mov	r6, r0
 8017c60:	4611      	mov	r1, r2
 8017c62:	4648      	mov	r0, r9
 8017c64:	4614      	mov	r4, r2
 8017c66:	f7ff ffdb 	bl	8017c20 <__mcmp>
 8017c6a:	1e05      	subs	r5, r0, #0
 8017c6c:	d112      	bne.n	8017c94 <__mdiff+0x3c>
 8017c6e:	4629      	mov	r1, r5
 8017c70:	4630      	mov	r0, r6
 8017c72:	f7ff fd5b 	bl	801772c <_Balloc>
 8017c76:	4602      	mov	r2, r0
 8017c78:	b928      	cbnz	r0, 8017c86 <__mdiff+0x2e>
 8017c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8017d78 <__mdiff+0x120>)
 8017c7c:	f240 2137 	movw	r1, #567	@ 0x237
 8017c80:	483e      	ldr	r0, [pc, #248]	@ (8017d7c <__mdiff+0x124>)
 8017c82:	f7fe fe57 	bl	8016934 <__assert_func>
 8017c86:	2301      	movs	r3, #1
 8017c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017c8c:	4610      	mov	r0, r2
 8017c8e:	b003      	add	sp, #12
 8017c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c94:	bfbc      	itt	lt
 8017c96:	464b      	movlt	r3, r9
 8017c98:	46a1      	movlt	r9, r4
 8017c9a:	4630      	mov	r0, r6
 8017c9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017ca0:	bfba      	itte	lt
 8017ca2:	461c      	movlt	r4, r3
 8017ca4:	2501      	movlt	r5, #1
 8017ca6:	2500      	movge	r5, #0
 8017ca8:	f7ff fd40 	bl	801772c <_Balloc>
 8017cac:	4602      	mov	r2, r0
 8017cae:	b918      	cbnz	r0, 8017cb8 <__mdiff+0x60>
 8017cb0:	4b31      	ldr	r3, [pc, #196]	@ (8017d78 <__mdiff+0x120>)
 8017cb2:	f240 2145 	movw	r1, #581	@ 0x245
 8017cb6:	e7e3      	b.n	8017c80 <__mdiff+0x28>
 8017cb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017cbc:	6926      	ldr	r6, [r4, #16]
 8017cbe:	60c5      	str	r5, [r0, #12]
 8017cc0:	f109 0310 	add.w	r3, r9, #16
 8017cc4:	f109 0514 	add.w	r5, r9, #20
 8017cc8:	f104 0e14 	add.w	lr, r4, #20
 8017ccc:	f100 0b14 	add.w	fp, r0, #20
 8017cd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017cd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017cd8:	9301      	str	r3, [sp, #4]
 8017cda:	46d9      	mov	r9, fp
 8017cdc:	f04f 0c00 	mov.w	ip, #0
 8017ce0:	9b01      	ldr	r3, [sp, #4]
 8017ce2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017ce6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	fa1f f38a 	uxth.w	r3, sl
 8017cf0:	4619      	mov	r1, r3
 8017cf2:	b283      	uxth	r3, r0
 8017cf4:	1acb      	subs	r3, r1, r3
 8017cf6:	0c00      	lsrs	r0, r0, #16
 8017cf8:	4463      	add	r3, ip
 8017cfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017cfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017d08:	4576      	cmp	r6, lr
 8017d0a:	f849 3b04 	str.w	r3, [r9], #4
 8017d0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017d12:	d8e5      	bhi.n	8017ce0 <__mdiff+0x88>
 8017d14:	1b33      	subs	r3, r6, r4
 8017d16:	3b15      	subs	r3, #21
 8017d18:	f023 0303 	bic.w	r3, r3, #3
 8017d1c:	3415      	adds	r4, #21
 8017d1e:	3304      	adds	r3, #4
 8017d20:	42a6      	cmp	r6, r4
 8017d22:	bf38      	it	cc
 8017d24:	2304      	movcc	r3, #4
 8017d26:	441d      	add	r5, r3
 8017d28:	445b      	add	r3, fp
 8017d2a:	461e      	mov	r6, r3
 8017d2c:	462c      	mov	r4, r5
 8017d2e:	4544      	cmp	r4, r8
 8017d30:	d30e      	bcc.n	8017d50 <__mdiff+0xf8>
 8017d32:	f108 0103 	add.w	r1, r8, #3
 8017d36:	1b49      	subs	r1, r1, r5
 8017d38:	f021 0103 	bic.w	r1, r1, #3
 8017d3c:	3d03      	subs	r5, #3
 8017d3e:	45a8      	cmp	r8, r5
 8017d40:	bf38      	it	cc
 8017d42:	2100      	movcc	r1, #0
 8017d44:	440b      	add	r3, r1
 8017d46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017d4a:	b191      	cbz	r1, 8017d72 <__mdiff+0x11a>
 8017d4c:	6117      	str	r7, [r2, #16]
 8017d4e:	e79d      	b.n	8017c8c <__mdiff+0x34>
 8017d50:	f854 1b04 	ldr.w	r1, [r4], #4
 8017d54:	46e6      	mov	lr, ip
 8017d56:	0c08      	lsrs	r0, r1, #16
 8017d58:	fa1c fc81 	uxtah	ip, ip, r1
 8017d5c:	4471      	add	r1, lr
 8017d5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017d62:	b289      	uxth	r1, r1
 8017d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017d68:	f846 1b04 	str.w	r1, [r6], #4
 8017d6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017d70:	e7dd      	b.n	8017d2e <__mdiff+0xd6>
 8017d72:	3f01      	subs	r7, #1
 8017d74:	e7e7      	b.n	8017d46 <__mdiff+0xee>
 8017d76:	bf00      	nop
 8017d78:	0802ccfa 	.word	0x0802ccfa
 8017d7c:	0802cd0b 	.word	0x0802cd0b

08017d80 <__d2b>:
 8017d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d84:	460f      	mov	r7, r1
 8017d86:	2101      	movs	r1, #1
 8017d88:	ec59 8b10 	vmov	r8, r9, d0
 8017d8c:	4616      	mov	r6, r2
 8017d8e:	f7ff fccd 	bl	801772c <_Balloc>
 8017d92:	4604      	mov	r4, r0
 8017d94:	b930      	cbnz	r0, 8017da4 <__d2b+0x24>
 8017d96:	4602      	mov	r2, r0
 8017d98:	4b23      	ldr	r3, [pc, #140]	@ (8017e28 <__d2b+0xa8>)
 8017d9a:	4824      	ldr	r0, [pc, #144]	@ (8017e2c <__d2b+0xac>)
 8017d9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8017da0:	f7fe fdc8 	bl	8016934 <__assert_func>
 8017da4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017dac:	b10d      	cbz	r5, 8017db2 <__d2b+0x32>
 8017dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017db2:	9301      	str	r3, [sp, #4]
 8017db4:	f1b8 0300 	subs.w	r3, r8, #0
 8017db8:	d023      	beq.n	8017e02 <__d2b+0x82>
 8017dba:	4668      	mov	r0, sp
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	f7ff fd7c 	bl	80178ba <__lo0bits>
 8017dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017dc6:	b1d0      	cbz	r0, 8017dfe <__d2b+0x7e>
 8017dc8:	f1c0 0320 	rsb	r3, r0, #32
 8017dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8017dd0:	430b      	orrs	r3, r1
 8017dd2:	40c2      	lsrs	r2, r0
 8017dd4:	6163      	str	r3, [r4, #20]
 8017dd6:	9201      	str	r2, [sp, #4]
 8017dd8:	9b01      	ldr	r3, [sp, #4]
 8017dda:	61a3      	str	r3, [r4, #24]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	bf0c      	ite	eq
 8017de0:	2201      	moveq	r2, #1
 8017de2:	2202      	movne	r2, #2
 8017de4:	6122      	str	r2, [r4, #16]
 8017de6:	b1a5      	cbz	r5, 8017e12 <__d2b+0x92>
 8017de8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017dec:	4405      	add	r5, r0
 8017dee:	603d      	str	r5, [r7, #0]
 8017df0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017df4:	6030      	str	r0, [r6, #0]
 8017df6:	4620      	mov	r0, r4
 8017df8:	b003      	add	sp, #12
 8017dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dfe:	6161      	str	r1, [r4, #20]
 8017e00:	e7ea      	b.n	8017dd8 <__d2b+0x58>
 8017e02:	a801      	add	r0, sp, #4
 8017e04:	f7ff fd59 	bl	80178ba <__lo0bits>
 8017e08:	9b01      	ldr	r3, [sp, #4]
 8017e0a:	6163      	str	r3, [r4, #20]
 8017e0c:	3020      	adds	r0, #32
 8017e0e:	2201      	movs	r2, #1
 8017e10:	e7e8      	b.n	8017de4 <__d2b+0x64>
 8017e12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017e16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017e1a:	6038      	str	r0, [r7, #0]
 8017e1c:	6918      	ldr	r0, [r3, #16]
 8017e1e:	f7ff fd2d 	bl	801787c <__hi0bits>
 8017e22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017e26:	e7e5      	b.n	8017df4 <__d2b+0x74>
 8017e28:	0802ccfa 	.word	0x0802ccfa
 8017e2c:	0802cd0b 	.word	0x0802cd0b

08017e30 <__ssputs_r>:
 8017e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e34:	688e      	ldr	r6, [r1, #8]
 8017e36:	461f      	mov	r7, r3
 8017e38:	42be      	cmp	r6, r7
 8017e3a:	680b      	ldr	r3, [r1, #0]
 8017e3c:	4682      	mov	sl, r0
 8017e3e:	460c      	mov	r4, r1
 8017e40:	4690      	mov	r8, r2
 8017e42:	d82d      	bhi.n	8017ea0 <__ssputs_r+0x70>
 8017e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e4c:	d026      	beq.n	8017e9c <__ssputs_r+0x6c>
 8017e4e:	6965      	ldr	r5, [r4, #20]
 8017e50:	6909      	ldr	r1, [r1, #16]
 8017e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e56:	eba3 0901 	sub.w	r9, r3, r1
 8017e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e5e:	1c7b      	adds	r3, r7, #1
 8017e60:	444b      	add	r3, r9
 8017e62:	106d      	asrs	r5, r5, #1
 8017e64:	429d      	cmp	r5, r3
 8017e66:	bf38      	it	cc
 8017e68:	461d      	movcc	r5, r3
 8017e6a:	0553      	lsls	r3, r2, #21
 8017e6c:	d527      	bpl.n	8017ebe <__ssputs_r+0x8e>
 8017e6e:	4629      	mov	r1, r5
 8017e70:	f7ff fbd0 	bl	8017614 <_malloc_r>
 8017e74:	4606      	mov	r6, r0
 8017e76:	b360      	cbz	r0, 8017ed2 <__ssputs_r+0xa2>
 8017e78:	6921      	ldr	r1, [r4, #16]
 8017e7a:	464a      	mov	r2, r9
 8017e7c:	f7fe fd4b 	bl	8016916 <memcpy>
 8017e80:	89a3      	ldrh	r3, [r4, #12]
 8017e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e8a:	81a3      	strh	r3, [r4, #12]
 8017e8c:	6126      	str	r6, [r4, #16]
 8017e8e:	6165      	str	r5, [r4, #20]
 8017e90:	444e      	add	r6, r9
 8017e92:	eba5 0509 	sub.w	r5, r5, r9
 8017e96:	6026      	str	r6, [r4, #0]
 8017e98:	60a5      	str	r5, [r4, #8]
 8017e9a:	463e      	mov	r6, r7
 8017e9c:	42be      	cmp	r6, r7
 8017e9e:	d900      	bls.n	8017ea2 <__ssputs_r+0x72>
 8017ea0:	463e      	mov	r6, r7
 8017ea2:	6820      	ldr	r0, [r4, #0]
 8017ea4:	4632      	mov	r2, r6
 8017ea6:	4641      	mov	r1, r8
 8017ea8:	f7fe fc80 	bl	80167ac <memmove>
 8017eac:	68a3      	ldr	r3, [r4, #8]
 8017eae:	1b9b      	subs	r3, r3, r6
 8017eb0:	60a3      	str	r3, [r4, #8]
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	4433      	add	r3, r6
 8017eb6:	6023      	str	r3, [r4, #0]
 8017eb8:	2000      	movs	r0, #0
 8017eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ebe:	462a      	mov	r2, r5
 8017ec0:	f000 fbcf 	bl	8018662 <_realloc_r>
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	d1e0      	bne.n	8017e8c <__ssputs_r+0x5c>
 8017eca:	6921      	ldr	r1, [r4, #16]
 8017ecc:	4650      	mov	r0, sl
 8017ece:	f7ff fb2d 	bl	801752c <_free_r>
 8017ed2:	230c      	movs	r3, #12
 8017ed4:	f8ca 3000 	str.w	r3, [sl]
 8017ed8:	89a3      	ldrh	r3, [r4, #12]
 8017eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ede:	81a3      	strh	r3, [r4, #12]
 8017ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee4:	e7e9      	b.n	8017eba <__ssputs_r+0x8a>
	...

08017ee8 <_svfiprintf_r>:
 8017ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eec:	4698      	mov	r8, r3
 8017eee:	898b      	ldrh	r3, [r1, #12]
 8017ef0:	061b      	lsls	r3, r3, #24
 8017ef2:	b09d      	sub	sp, #116	@ 0x74
 8017ef4:	4607      	mov	r7, r0
 8017ef6:	460d      	mov	r5, r1
 8017ef8:	4614      	mov	r4, r2
 8017efa:	d510      	bpl.n	8017f1e <_svfiprintf_r+0x36>
 8017efc:	690b      	ldr	r3, [r1, #16]
 8017efe:	b973      	cbnz	r3, 8017f1e <_svfiprintf_r+0x36>
 8017f00:	2140      	movs	r1, #64	@ 0x40
 8017f02:	f7ff fb87 	bl	8017614 <_malloc_r>
 8017f06:	6028      	str	r0, [r5, #0]
 8017f08:	6128      	str	r0, [r5, #16]
 8017f0a:	b930      	cbnz	r0, 8017f1a <_svfiprintf_r+0x32>
 8017f0c:	230c      	movs	r3, #12
 8017f0e:	603b      	str	r3, [r7, #0]
 8017f10:	f04f 30ff 	mov.w	r0, #4294967295
 8017f14:	b01d      	add	sp, #116	@ 0x74
 8017f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f1a:	2340      	movs	r3, #64	@ 0x40
 8017f1c:	616b      	str	r3, [r5, #20]
 8017f1e:	2300      	movs	r3, #0
 8017f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f22:	2320      	movs	r3, #32
 8017f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f2c:	2330      	movs	r3, #48	@ 0x30
 8017f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180cc <_svfiprintf_r+0x1e4>
 8017f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f36:	f04f 0901 	mov.w	r9, #1
 8017f3a:	4623      	mov	r3, r4
 8017f3c:	469a      	mov	sl, r3
 8017f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f42:	b10a      	cbz	r2, 8017f48 <_svfiprintf_r+0x60>
 8017f44:	2a25      	cmp	r2, #37	@ 0x25
 8017f46:	d1f9      	bne.n	8017f3c <_svfiprintf_r+0x54>
 8017f48:	ebba 0b04 	subs.w	fp, sl, r4
 8017f4c:	d00b      	beq.n	8017f66 <_svfiprintf_r+0x7e>
 8017f4e:	465b      	mov	r3, fp
 8017f50:	4622      	mov	r2, r4
 8017f52:	4629      	mov	r1, r5
 8017f54:	4638      	mov	r0, r7
 8017f56:	f7ff ff6b 	bl	8017e30 <__ssputs_r>
 8017f5a:	3001      	adds	r0, #1
 8017f5c:	f000 80a7 	beq.w	80180ae <_svfiprintf_r+0x1c6>
 8017f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f62:	445a      	add	r2, fp
 8017f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f66:	f89a 3000 	ldrb.w	r3, [sl]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	f000 809f 	beq.w	80180ae <_svfiprintf_r+0x1c6>
 8017f70:	2300      	movs	r3, #0
 8017f72:	f04f 32ff 	mov.w	r2, #4294967295
 8017f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f7a:	f10a 0a01 	add.w	sl, sl, #1
 8017f7e:	9304      	str	r3, [sp, #16]
 8017f80:	9307      	str	r3, [sp, #28]
 8017f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f88:	4654      	mov	r4, sl
 8017f8a:	2205      	movs	r2, #5
 8017f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f90:	484e      	ldr	r0, [pc, #312]	@ (80180cc <_svfiprintf_r+0x1e4>)
 8017f92:	f7e8 f9cd 	bl	8000330 <memchr>
 8017f96:	9a04      	ldr	r2, [sp, #16]
 8017f98:	b9d8      	cbnz	r0, 8017fd2 <_svfiprintf_r+0xea>
 8017f9a:	06d0      	lsls	r0, r2, #27
 8017f9c:	bf44      	itt	mi
 8017f9e:	2320      	movmi	r3, #32
 8017fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fa4:	0711      	lsls	r1, r2, #28
 8017fa6:	bf44      	itt	mi
 8017fa8:	232b      	movmi	r3, #43	@ 0x2b
 8017faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fae:	f89a 3000 	ldrb.w	r3, [sl]
 8017fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fb4:	d015      	beq.n	8017fe2 <_svfiprintf_r+0xfa>
 8017fb6:	9a07      	ldr	r2, [sp, #28]
 8017fb8:	4654      	mov	r4, sl
 8017fba:	2000      	movs	r0, #0
 8017fbc:	f04f 0c0a 	mov.w	ip, #10
 8017fc0:	4621      	mov	r1, r4
 8017fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fc6:	3b30      	subs	r3, #48	@ 0x30
 8017fc8:	2b09      	cmp	r3, #9
 8017fca:	d94b      	bls.n	8018064 <_svfiprintf_r+0x17c>
 8017fcc:	b1b0      	cbz	r0, 8017ffc <_svfiprintf_r+0x114>
 8017fce:	9207      	str	r2, [sp, #28]
 8017fd0:	e014      	b.n	8017ffc <_svfiprintf_r+0x114>
 8017fd2:	eba0 0308 	sub.w	r3, r0, r8
 8017fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8017fda:	4313      	orrs	r3, r2
 8017fdc:	9304      	str	r3, [sp, #16]
 8017fde:	46a2      	mov	sl, r4
 8017fe0:	e7d2      	b.n	8017f88 <_svfiprintf_r+0xa0>
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	1d19      	adds	r1, r3, #4
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	9103      	str	r1, [sp, #12]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	bfbb      	ittet	lt
 8017fee:	425b      	neglt	r3, r3
 8017ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8017ff4:	9307      	strge	r3, [sp, #28]
 8017ff6:	9307      	strlt	r3, [sp, #28]
 8017ff8:	bfb8      	it	lt
 8017ffa:	9204      	strlt	r2, [sp, #16]
 8017ffc:	7823      	ldrb	r3, [r4, #0]
 8017ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8018000:	d10a      	bne.n	8018018 <_svfiprintf_r+0x130>
 8018002:	7863      	ldrb	r3, [r4, #1]
 8018004:	2b2a      	cmp	r3, #42	@ 0x2a
 8018006:	d132      	bne.n	801806e <_svfiprintf_r+0x186>
 8018008:	9b03      	ldr	r3, [sp, #12]
 801800a:	1d1a      	adds	r2, r3, #4
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	9203      	str	r2, [sp, #12]
 8018010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018014:	3402      	adds	r4, #2
 8018016:	9305      	str	r3, [sp, #20]
 8018018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80180dc <_svfiprintf_r+0x1f4>
 801801c:	7821      	ldrb	r1, [r4, #0]
 801801e:	2203      	movs	r2, #3
 8018020:	4650      	mov	r0, sl
 8018022:	f7e8 f985 	bl	8000330 <memchr>
 8018026:	b138      	cbz	r0, 8018038 <_svfiprintf_r+0x150>
 8018028:	9b04      	ldr	r3, [sp, #16]
 801802a:	eba0 000a 	sub.w	r0, r0, sl
 801802e:	2240      	movs	r2, #64	@ 0x40
 8018030:	4082      	lsls	r2, r0
 8018032:	4313      	orrs	r3, r2
 8018034:	3401      	adds	r4, #1
 8018036:	9304      	str	r3, [sp, #16]
 8018038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801803c:	4824      	ldr	r0, [pc, #144]	@ (80180d0 <_svfiprintf_r+0x1e8>)
 801803e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018042:	2206      	movs	r2, #6
 8018044:	f7e8 f974 	bl	8000330 <memchr>
 8018048:	2800      	cmp	r0, #0
 801804a:	d036      	beq.n	80180ba <_svfiprintf_r+0x1d2>
 801804c:	4b21      	ldr	r3, [pc, #132]	@ (80180d4 <_svfiprintf_r+0x1ec>)
 801804e:	bb1b      	cbnz	r3, 8018098 <_svfiprintf_r+0x1b0>
 8018050:	9b03      	ldr	r3, [sp, #12]
 8018052:	3307      	adds	r3, #7
 8018054:	f023 0307 	bic.w	r3, r3, #7
 8018058:	3308      	adds	r3, #8
 801805a:	9303      	str	r3, [sp, #12]
 801805c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801805e:	4433      	add	r3, r6
 8018060:	9309      	str	r3, [sp, #36]	@ 0x24
 8018062:	e76a      	b.n	8017f3a <_svfiprintf_r+0x52>
 8018064:	fb0c 3202 	mla	r2, ip, r2, r3
 8018068:	460c      	mov	r4, r1
 801806a:	2001      	movs	r0, #1
 801806c:	e7a8      	b.n	8017fc0 <_svfiprintf_r+0xd8>
 801806e:	2300      	movs	r3, #0
 8018070:	3401      	adds	r4, #1
 8018072:	9305      	str	r3, [sp, #20]
 8018074:	4619      	mov	r1, r3
 8018076:	f04f 0c0a 	mov.w	ip, #10
 801807a:	4620      	mov	r0, r4
 801807c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018080:	3a30      	subs	r2, #48	@ 0x30
 8018082:	2a09      	cmp	r2, #9
 8018084:	d903      	bls.n	801808e <_svfiprintf_r+0x1a6>
 8018086:	2b00      	cmp	r3, #0
 8018088:	d0c6      	beq.n	8018018 <_svfiprintf_r+0x130>
 801808a:	9105      	str	r1, [sp, #20]
 801808c:	e7c4      	b.n	8018018 <_svfiprintf_r+0x130>
 801808e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018092:	4604      	mov	r4, r0
 8018094:	2301      	movs	r3, #1
 8018096:	e7f0      	b.n	801807a <_svfiprintf_r+0x192>
 8018098:	ab03      	add	r3, sp, #12
 801809a:	9300      	str	r3, [sp, #0]
 801809c:	462a      	mov	r2, r5
 801809e:	4b0e      	ldr	r3, [pc, #56]	@ (80180d8 <_svfiprintf_r+0x1f0>)
 80180a0:	a904      	add	r1, sp, #16
 80180a2:	4638      	mov	r0, r7
 80180a4:	f7fd fda0 	bl	8015be8 <_printf_float>
 80180a8:	1c42      	adds	r2, r0, #1
 80180aa:	4606      	mov	r6, r0
 80180ac:	d1d6      	bne.n	801805c <_svfiprintf_r+0x174>
 80180ae:	89ab      	ldrh	r3, [r5, #12]
 80180b0:	065b      	lsls	r3, r3, #25
 80180b2:	f53f af2d 	bmi.w	8017f10 <_svfiprintf_r+0x28>
 80180b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180b8:	e72c      	b.n	8017f14 <_svfiprintf_r+0x2c>
 80180ba:	ab03      	add	r3, sp, #12
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	462a      	mov	r2, r5
 80180c0:	4b05      	ldr	r3, [pc, #20]	@ (80180d8 <_svfiprintf_r+0x1f0>)
 80180c2:	a904      	add	r1, sp, #16
 80180c4:	4638      	mov	r0, r7
 80180c6:	f7fe f817 	bl	80160f8 <_printf_i>
 80180ca:	e7ed      	b.n	80180a8 <_svfiprintf_r+0x1c0>
 80180cc:	0802ce60 	.word	0x0802ce60
 80180d0:	0802ce6a 	.word	0x0802ce6a
 80180d4:	08015be9 	.word	0x08015be9
 80180d8:	08017e31 	.word	0x08017e31
 80180dc:	0802ce66 	.word	0x0802ce66

080180e0 <__sfputc_r>:
 80180e0:	6893      	ldr	r3, [r2, #8]
 80180e2:	3b01      	subs	r3, #1
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	b410      	push	{r4}
 80180e8:	6093      	str	r3, [r2, #8]
 80180ea:	da08      	bge.n	80180fe <__sfputc_r+0x1e>
 80180ec:	6994      	ldr	r4, [r2, #24]
 80180ee:	42a3      	cmp	r3, r4
 80180f0:	db01      	blt.n	80180f6 <__sfputc_r+0x16>
 80180f2:	290a      	cmp	r1, #10
 80180f4:	d103      	bne.n	80180fe <__sfputc_r+0x1e>
 80180f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180fa:	f7fe bab2 	b.w	8016662 <__swbuf_r>
 80180fe:	6813      	ldr	r3, [r2, #0]
 8018100:	1c58      	adds	r0, r3, #1
 8018102:	6010      	str	r0, [r2, #0]
 8018104:	7019      	strb	r1, [r3, #0]
 8018106:	4608      	mov	r0, r1
 8018108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801810c:	4770      	bx	lr

0801810e <__sfputs_r>:
 801810e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018110:	4606      	mov	r6, r0
 8018112:	460f      	mov	r7, r1
 8018114:	4614      	mov	r4, r2
 8018116:	18d5      	adds	r5, r2, r3
 8018118:	42ac      	cmp	r4, r5
 801811a:	d101      	bne.n	8018120 <__sfputs_r+0x12>
 801811c:	2000      	movs	r0, #0
 801811e:	e007      	b.n	8018130 <__sfputs_r+0x22>
 8018120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018124:	463a      	mov	r2, r7
 8018126:	4630      	mov	r0, r6
 8018128:	f7ff ffda 	bl	80180e0 <__sfputc_r>
 801812c:	1c43      	adds	r3, r0, #1
 801812e:	d1f3      	bne.n	8018118 <__sfputs_r+0xa>
 8018130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018134 <_vfiprintf_r>:
 8018134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018138:	460d      	mov	r5, r1
 801813a:	b09d      	sub	sp, #116	@ 0x74
 801813c:	4614      	mov	r4, r2
 801813e:	4698      	mov	r8, r3
 8018140:	4606      	mov	r6, r0
 8018142:	b118      	cbz	r0, 801814c <_vfiprintf_r+0x18>
 8018144:	6a03      	ldr	r3, [r0, #32]
 8018146:	b90b      	cbnz	r3, 801814c <_vfiprintf_r+0x18>
 8018148:	f7fe f982 	bl	8016450 <__sinit>
 801814c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801814e:	07d9      	lsls	r1, r3, #31
 8018150:	d405      	bmi.n	801815e <_vfiprintf_r+0x2a>
 8018152:	89ab      	ldrh	r3, [r5, #12]
 8018154:	059a      	lsls	r2, r3, #22
 8018156:	d402      	bmi.n	801815e <_vfiprintf_r+0x2a>
 8018158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801815a:	f7fe fbda 	bl	8016912 <__retarget_lock_acquire_recursive>
 801815e:	89ab      	ldrh	r3, [r5, #12]
 8018160:	071b      	lsls	r3, r3, #28
 8018162:	d501      	bpl.n	8018168 <_vfiprintf_r+0x34>
 8018164:	692b      	ldr	r3, [r5, #16]
 8018166:	b99b      	cbnz	r3, 8018190 <_vfiprintf_r+0x5c>
 8018168:	4629      	mov	r1, r5
 801816a:	4630      	mov	r0, r6
 801816c:	f7fe fab8 	bl	80166e0 <__swsetup_r>
 8018170:	b170      	cbz	r0, 8018190 <_vfiprintf_r+0x5c>
 8018172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018174:	07dc      	lsls	r4, r3, #31
 8018176:	d504      	bpl.n	8018182 <_vfiprintf_r+0x4e>
 8018178:	f04f 30ff 	mov.w	r0, #4294967295
 801817c:	b01d      	add	sp, #116	@ 0x74
 801817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018182:	89ab      	ldrh	r3, [r5, #12]
 8018184:	0598      	lsls	r0, r3, #22
 8018186:	d4f7      	bmi.n	8018178 <_vfiprintf_r+0x44>
 8018188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801818a:	f7fe fbc3 	bl	8016914 <__retarget_lock_release_recursive>
 801818e:	e7f3      	b.n	8018178 <_vfiprintf_r+0x44>
 8018190:	2300      	movs	r3, #0
 8018192:	9309      	str	r3, [sp, #36]	@ 0x24
 8018194:	2320      	movs	r3, #32
 8018196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801819a:	f8cd 800c 	str.w	r8, [sp, #12]
 801819e:	2330      	movs	r3, #48	@ 0x30
 80181a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018350 <_vfiprintf_r+0x21c>
 80181a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181a8:	f04f 0901 	mov.w	r9, #1
 80181ac:	4623      	mov	r3, r4
 80181ae:	469a      	mov	sl, r3
 80181b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181b4:	b10a      	cbz	r2, 80181ba <_vfiprintf_r+0x86>
 80181b6:	2a25      	cmp	r2, #37	@ 0x25
 80181b8:	d1f9      	bne.n	80181ae <_vfiprintf_r+0x7a>
 80181ba:	ebba 0b04 	subs.w	fp, sl, r4
 80181be:	d00b      	beq.n	80181d8 <_vfiprintf_r+0xa4>
 80181c0:	465b      	mov	r3, fp
 80181c2:	4622      	mov	r2, r4
 80181c4:	4629      	mov	r1, r5
 80181c6:	4630      	mov	r0, r6
 80181c8:	f7ff ffa1 	bl	801810e <__sfputs_r>
 80181cc:	3001      	adds	r0, #1
 80181ce:	f000 80a7 	beq.w	8018320 <_vfiprintf_r+0x1ec>
 80181d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181d4:	445a      	add	r2, fp
 80181d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80181d8:	f89a 3000 	ldrb.w	r3, [sl]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	f000 809f 	beq.w	8018320 <_vfiprintf_r+0x1ec>
 80181e2:	2300      	movs	r3, #0
 80181e4:	f04f 32ff 	mov.w	r2, #4294967295
 80181e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181ec:	f10a 0a01 	add.w	sl, sl, #1
 80181f0:	9304      	str	r3, [sp, #16]
 80181f2:	9307      	str	r3, [sp, #28]
 80181f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80181fa:	4654      	mov	r4, sl
 80181fc:	2205      	movs	r2, #5
 80181fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018202:	4853      	ldr	r0, [pc, #332]	@ (8018350 <_vfiprintf_r+0x21c>)
 8018204:	f7e8 f894 	bl	8000330 <memchr>
 8018208:	9a04      	ldr	r2, [sp, #16]
 801820a:	b9d8      	cbnz	r0, 8018244 <_vfiprintf_r+0x110>
 801820c:	06d1      	lsls	r1, r2, #27
 801820e:	bf44      	itt	mi
 8018210:	2320      	movmi	r3, #32
 8018212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018216:	0713      	lsls	r3, r2, #28
 8018218:	bf44      	itt	mi
 801821a:	232b      	movmi	r3, #43	@ 0x2b
 801821c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018220:	f89a 3000 	ldrb.w	r3, [sl]
 8018224:	2b2a      	cmp	r3, #42	@ 0x2a
 8018226:	d015      	beq.n	8018254 <_vfiprintf_r+0x120>
 8018228:	9a07      	ldr	r2, [sp, #28]
 801822a:	4654      	mov	r4, sl
 801822c:	2000      	movs	r0, #0
 801822e:	f04f 0c0a 	mov.w	ip, #10
 8018232:	4621      	mov	r1, r4
 8018234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018238:	3b30      	subs	r3, #48	@ 0x30
 801823a:	2b09      	cmp	r3, #9
 801823c:	d94b      	bls.n	80182d6 <_vfiprintf_r+0x1a2>
 801823e:	b1b0      	cbz	r0, 801826e <_vfiprintf_r+0x13a>
 8018240:	9207      	str	r2, [sp, #28]
 8018242:	e014      	b.n	801826e <_vfiprintf_r+0x13a>
 8018244:	eba0 0308 	sub.w	r3, r0, r8
 8018248:	fa09 f303 	lsl.w	r3, r9, r3
 801824c:	4313      	orrs	r3, r2
 801824e:	9304      	str	r3, [sp, #16]
 8018250:	46a2      	mov	sl, r4
 8018252:	e7d2      	b.n	80181fa <_vfiprintf_r+0xc6>
 8018254:	9b03      	ldr	r3, [sp, #12]
 8018256:	1d19      	adds	r1, r3, #4
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	9103      	str	r1, [sp, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	bfbb      	ittet	lt
 8018260:	425b      	neglt	r3, r3
 8018262:	f042 0202 	orrlt.w	r2, r2, #2
 8018266:	9307      	strge	r3, [sp, #28]
 8018268:	9307      	strlt	r3, [sp, #28]
 801826a:	bfb8      	it	lt
 801826c:	9204      	strlt	r2, [sp, #16]
 801826e:	7823      	ldrb	r3, [r4, #0]
 8018270:	2b2e      	cmp	r3, #46	@ 0x2e
 8018272:	d10a      	bne.n	801828a <_vfiprintf_r+0x156>
 8018274:	7863      	ldrb	r3, [r4, #1]
 8018276:	2b2a      	cmp	r3, #42	@ 0x2a
 8018278:	d132      	bne.n	80182e0 <_vfiprintf_r+0x1ac>
 801827a:	9b03      	ldr	r3, [sp, #12]
 801827c:	1d1a      	adds	r2, r3, #4
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	9203      	str	r2, [sp, #12]
 8018282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018286:	3402      	adds	r4, #2
 8018288:	9305      	str	r3, [sp, #20]
 801828a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018360 <_vfiprintf_r+0x22c>
 801828e:	7821      	ldrb	r1, [r4, #0]
 8018290:	2203      	movs	r2, #3
 8018292:	4650      	mov	r0, sl
 8018294:	f7e8 f84c 	bl	8000330 <memchr>
 8018298:	b138      	cbz	r0, 80182aa <_vfiprintf_r+0x176>
 801829a:	9b04      	ldr	r3, [sp, #16]
 801829c:	eba0 000a 	sub.w	r0, r0, sl
 80182a0:	2240      	movs	r2, #64	@ 0x40
 80182a2:	4082      	lsls	r2, r0
 80182a4:	4313      	orrs	r3, r2
 80182a6:	3401      	adds	r4, #1
 80182a8:	9304      	str	r3, [sp, #16]
 80182aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182ae:	4829      	ldr	r0, [pc, #164]	@ (8018354 <_vfiprintf_r+0x220>)
 80182b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80182b4:	2206      	movs	r2, #6
 80182b6:	f7e8 f83b 	bl	8000330 <memchr>
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d03f      	beq.n	801833e <_vfiprintf_r+0x20a>
 80182be:	4b26      	ldr	r3, [pc, #152]	@ (8018358 <_vfiprintf_r+0x224>)
 80182c0:	bb1b      	cbnz	r3, 801830a <_vfiprintf_r+0x1d6>
 80182c2:	9b03      	ldr	r3, [sp, #12]
 80182c4:	3307      	adds	r3, #7
 80182c6:	f023 0307 	bic.w	r3, r3, #7
 80182ca:	3308      	adds	r3, #8
 80182cc:	9303      	str	r3, [sp, #12]
 80182ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182d0:	443b      	add	r3, r7
 80182d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80182d4:	e76a      	b.n	80181ac <_vfiprintf_r+0x78>
 80182d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80182da:	460c      	mov	r4, r1
 80182dc:	2001      	movs	r0, #1
 80182de:	e7a8      	b.n	8018232 <_vfiprintf_r+0xfe>
 80182e0:	2300      	movs	r3, #0
 80182e2:	3401      	adds	r4, #1
 80182e4:	9305      	str	r3, [sp, #20]
 80182e6:	4619      	mov	r1, r3
 80182e8:	f04f 0c0a 	mov.w	ip, #10
 80182ec:	4620      	mov	r0, r4
 80182ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182f2:	3a30      	subs	r2, #48	@ 0x30
 80182f4:	2a09      	cmp	r2, #9
 80182f6:	d903      	bls.n	8018300 <_vfiprintf_r+0x1cc>
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d0c6      	beq.n	801828a <_vfiprintf_r+0x156>
 80182fc:	9105      	str	r1, [sp, #20]
 80182fe:	e7c4      	b.n	801828a <_vfiprintf_r+0x156>
 8018300:	fb0c 2101 	mla	r1, ip, r1, r2
 8018304:	4604      	mov	r4, r0
 8018306:	2301      	movs	r3, #1
 8018308:	e7f0      	b.n	80182ec <_vfiprintf_r+0x1b8>
 801830a:	ab03      	add	r3, sp, #12
 801830c:	9300      	str	r3, [sp, #0]
 801830e:	462a      	mov	r2, r5
 8018310:	4b12      	ldr	r3, [pc, #72]	@ (801835c <_vfiprintf_r+0x228>)
 8018312:	a904      	add	r1, sp, #16
 8018314:	4630      	mov	r0, r6
 8018316:	f7fd fc67 	bl	8015be8 <_printf_float>
 801831a:	4607      	mov	r7, r0
 801831c:	1c78      	adds	r0, r7, #1
 801831e:	d1d6      	bne.n	80182ce <_vfiprintf_r+0x19a>
 8018320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018322:	07d9      	lsls	r1, r3, #31
 8018324:	d405      	bmi.n	8018332 <_vfiprintf_r+0x1fe>
 8018326:	89ab      	ldrh	r3, [r5, #12]
 8018328:	059a      	lsls	r2, r3, #22
 801832a:	d402      	bmi.n	8018332 <_vfiprintf_r+0x1fe>
 801832c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801832e:	f7fe faf1 	bl	8016914 <__retarget_lock_release_recursive>
 8018332:	89ab      	ldrh	r3, [r5, #12]
 8018334:	065b      	lsls	r3, r3, #25
 8018336:	f53f af1f 	bmi.w	8018178 <_vfiprintf_r+0x44>
 801833a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801833c:	e71e      	b.n	801817c <_vfiprintf_r+0x48>
 801833e:	ab03      	add	r3, sp, #12
 8018340:	9300      	str	r3, [sp, #0]
 8018342:	462a      	mov	r2, r5
 8018344:	4b05      	ldr	r3, [pc, #20]	@ (801835c <_vfiprintf_r+0x228>)
 8018346:	a904      	add	r1, sp, #16
 8018348:	4630      	mov	r0, r6
 801834a:	f7fd fed5 	bl	80160f8 <_printf_i>
 801834e:	e7e4      	b.n	801831a <_vfiprintf_r+0x1e6>
 8018350:	0802ce60 	.word	0x0802ce60
 8018354:	0802ce6a 	.word	0x0802ce6a
 8018358:	08015be9 	.word	0x08015be9
 801835c:	0801810f 	.word	0x0801810f
 8018360:	0802ce66 	.word	0x0802ce66

08018364 <__sflush_r>:
 8018364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801836c:	0716      	lsls	r6, r2, #28
 801836e:	4605      	mov	r5, r0
 8018370:	460c      	mov	r4, r1
 8018372:	d454      	bmi.n	801841e <__sflush_r+0xba>
 8018374:	684b      	ldr	r3, [r1, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	dc02      	bgt.n	8018380 <__sflush_r+0x1c>
 801837a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801837c:	2b00      	cmp	r3, #0
 801837e:	dd48      	ble.n	8018412 <__sflush_r+0xae>
 8018380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018382:	2e00      	cmp	r6, #0
 8018384:	d045      	beq.n	8018412 <__sflush_r+0xae>
 8018386:	2300      	movs	r3, #0
 8018388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801838c:	682f      	ldr	r7, [r5, #0]
 801838e:	6a21      	ldr	r1, [r4, #32]
 8018390:	602b      	str	r3, [r5, #0]
 8018392:	d030      	beq.n	80183f6 <__sflush_r+0x92>
 8018394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018396:	89a3      	ldrh	r3, [r4, #12]
 8018398:	0759      	lsls	r1, r3, #29
 801839a:	d505      	bpl.n	80183a8 <__sflush_r+0x44>
 801839c:	6863      	ldr	r3, [r4, #4]
 801839e:	1ad2      	subs	r2, r2, r3
 80183a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80183a2:	b10b      	cbz	r3, 80183a8 <__sflush_r+0x44>
 80183a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80183a6:	1ad2      	subs	r2, r2, r3
 80183a8:	2300      	movs	r3, #0
 80183aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80183ac:	6a21      	ldr	r1, [r4, #32]
 80183ae:	4628      	mov	r0, r5
 80183b0:	47b0      	blx	r6
 80183b2:	1c43      	adds	r3, r0, #1
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	d106      	bne.n	80183c6 <__sflush_r+0x62>
 80183b8:	6829      	ldr	r1, [r5, #0]
 80183ba:	291d      	cmp	r1, #29
 80183bc:	d82b      	bhi.n	8018416 <__sflush_r+0xb2>
 80183be:	4a2a      	ldr	r2, [pc, #168]	@ (8018468 <__sflush_r+0x104>)
 80183c0:	410a      	asrs	r2, r1
 80183c2:	07d6      	lsls	r6, r2, #31
 80183c4:	d427      	bmi.n	8018416 <__sflush_r+0xb2>
 80183c6:	2200      	movs	r2, #0
 80183c8:	6062      	str	r2, [r4, #4]
 80183ca:	04d9      	lsls	r1, r3, #19
 80183cc:	6922      	ldr	r2, [r4, #16]
 80183ce:	6022      	str	r2, [r4, #0]
 80183d0:	d504      	bpl.n	80183dc <__sflush_r+0x78>
 80183d2:	1c42      	adds	r2, r0, #1
 80183d4:	d101      	bne.n	80183da <__sflush_r+0x76>
 80183d6:	682b      	ldr	r3, [r5, #0]
 80183d8:	b903      	cbnz	r3, 80183dc <__sflush_r+0x78>
 80183da:	6560      	str	r0, [r4, #84]	@ 0x54
 80183dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80183de:	602f      	str	r7, [r5, #0]
 80183e0:	b1b9      	cbz	r1, 8018412 <__sflush_r+0xae>
 80183e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80183e6:	4299      	cmp	r1, r3
 80183e8:	d002      	beq.n	80183f0 <__sflush_r+0x8c>
 80183ea:	4628      	mov	r0, r5
 80183ec:	f7ff f89e 	bl	801752c <_free_r>
 80183f0:	2300      	movs	r3, #0
 80183f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80183f4:	e00d      	b.n	8018412 <__sflush_r+0xae>
 80183f6:	2301      	movs	r3, #1
 80183f8:	4628      	mov	r0, r5
 80183fa:	47b0      	blx	r6
 80183fc:	4602      	mov	r2, r0
 80183fe:	1c50      	adds	r0, r2, #1
 8018400:	d1c9      	bne.n	8018396 <__sflush_r+0x32>
 8018402:	682b      	ldr	r3, [r5, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d0c6      	beq.n	8018396 <__sflush_r+0x32>
 8018408:	2b1d      	cmp	r3, #29
 801840a:	d001      	beq.n	8018410 <__sflush_r+0xac>
 801840c:	2b16      	cmp	r3, #22
 801840e:	d11e      	bne.n	801844e <__sflush_r+0xea>
 8018410:	602f      	str	r7, [r5, #0]
 8018412:	2000      	movs	r0, #0
 8018414:	e022      	b.n	801845c <__sflush_r+0xf8>
 8018416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801841a:	b21b      	sxth	r3, r3
 801841c:	e01b      	b.n	8018456 <__sflush_r+0xf2>
 801841e:	690f      	ldr	r7, [r1, #16]
 8018420:	2f00      	cmp	r7, #0
 8018422:	d0f6      	beq.n	8018412 <__sflush_r+0xae>
 8018424:	0793      	lsls	r3, r2, #30
 8018426:	680e      	ldr	r6, [r1, #0]
 8018428:	bf08      	it	eq
 801842a:	694b      	ldreq	r3, [r1, #20]
 801842c:	600f      	str	r7, [r1, #0]
 801842e:	bf18      	it	ne
 8018430:	2300      	movne	r3, #0
 8018432:	eba6 0807 	sub.w	r8, r6, r7
 8018436:	608b      	str	r3, [r1, #8]
 8018438:	f1b8 0f00 	cmp.w	r8, #0
 801843c:	dde9      	ble.n	8018412 <__sflush_r+0xae>
 801843e:	6a21      	ldr	r1, [r4, #32]
 8018440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018442:	4643      	mov	r3, r8
 8018444:	463a      	mov	r2, r7
 8018446:	4628      	mov	r0, r5
 8018448:	47b0      	blx	r6
 801844a:	2800      	cmp	r0, #0
 801844c:	dc08      	bgt.n	8018460 <__sflush_r+0xfc>
 801844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018456:	81a3      	strh	r3, [r4, #12]
 8018458:	f04f 30ff 	mov.w	r0, #4294967295
 801845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018460:	4407      	add	r7, r0
 8018462:	eba8 0800 	sub.w	r8, r8, r0
 8018466:	e7e7      	b.n	8018438 <__sflush_r+0xd4>
 8018468:	dfbffffe 	.word	0xdfbffffe

0801846c <_fflush_r>:
 801846c:	b538      	push	{r3, r4, r5, lr}
 801846e:	690b      	ldr	r3, [r1, #16]
 8018470:	4605      	mov	r5, r0
 8018472:	460c      	mov	r4, r1
 8018474:	b913      	cbnz	r3, 801847c <_fflush_r+0x10>
 8018476:	2500      	movs	r5, #0
 8018478:	4628      	mov	r0, r5
 801847a:	bd38      	pop	{r3, r4, r5, pc}
 801847c:	b118      	cbz	r0, 8018486 <_fflush_r+0x1a>
 801847e:	6a03      	ldr	r3, [r0, #32]
 8018480:	b90b      	cbnz	r3, 8018486 <_fflush_r+0x1a>
 8018482:	f7fd ffe5 	bl	8016450 <__sinit>
 8018486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d0f3      	beq.n	8018476 <_fflush_r+0xa>
 801848e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018490:	07d0      	lsls	r0, r2, #31
 8018492:	d404      	bmi.n	801849e <_fflush_r+0x32>
 8018494:	0599      	lsls	r1, r3, #22
 8018496:	d402      	bmi.n	801849e <_fflush_r+0x32>
 8018498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801849a:	f7fe fa3a 	bl	8016912 <__retarget_lock_acquire_recursive>
 801849e:	4628      	mov	r0, r5
 80184a0:	4621      	mov	r1, r4
 80184a2:	f7ff ff5f 	bl	8018364 <__sflush_r>
 80184a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184a8:	07da      	lsls	r2, r3, #31
 80184aa:	4605      	mov	r5, r0
 80184ac:	d4e4      	bmi.n	8018478 <_fflush_r+0xc>
 80184ae:	89a3      	ldrh	r3, [r4, #12]
 80184b0:	059b      	lsls	r3, r3, #22
 80184b2:	d4e1      	bmi.n	8018478 <_fflush_r+0xc>
 80184b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184b6:	f7fe fa2d 	bl	8016914 <__retarget_lock_release_recursive>
 80184ba:	e7dd      	b.n	8018478 <_fflush_r+0xc>

080184bc <fiprintf>:
 80184bc:	b40e      	push	{r1, r2, r3}
 80184be:	b503      	push	{r0, r1, lr}
 80184c0:	4601      	mov	r1, r0
 80184c2:	ab03      	add	r3, sp, #12
 80184c4:	4805      	ldr	r0, [pc, #20]	@ (80184dc <fiprintf+0x20>)
 80184c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80184ca:	6800      	ldr	r0, [r0, #0]
 80184cc:	9301      	str	r3, [sp, #4]
 80184ce:	f7ff fe31 	bl	8018134 <_vfiprintf_r>
 80184d2:	b002      	add	sp, #8
 80184d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80184d8:	b003      	add	sp, #12
 80184da:	4770      	bx	lr
 80184dc:	2000003c 	.word	0x2000003c

080184e0 <__swhatbuf_r>:
 80184e0:	b570      	push	{r4, r5, r6, lr}
 80184e2:	460c      	mov	r4, r1
 80184e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e8:	2900      	cmp	r1, #0
 80184ea:	b096      	sub	sp, #88	@ 0x58
 80184ec:	4615      	mov	r5, r2
 80184ee:	461e      	mov	r6, r3
 80184f0:	da0d      	bge.n	801850e <__swhatbuf_r+0x2e>
 80184f2:	89a3      	ldrh	r3, [r4, #12]
 80184f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80184f8:	f04f 0100 	mov.w	r1, #0
 80184fc:	bf14      	ite	ne
 80184fe:	2340      	movne	r3, #64	@ 0x40
 8018500:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018504:	2000      	movs	r0, #0
 8018506:	6031      	str	r1, [r6, #0]
 8018508:	602b      	str	r3, [r5, #0]
 801850a:	b016      	add	sp, #88	@ 0x58
 801850c:	bd70      	pop	{r4, r5, r6, pc}
 801850e:	466a      	mov	r2, sp
 8018510:	f000 f848 	bl	80185a4 <_fstat_r>
 8018514:	2800      	cmp	r0, #0
 8018516:	dbec      	blt.n	80184f2 <__swhatbuf_r+0x12>
 8018518:	9901      	ldr	r1, [sp, #4]
 801851a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801851e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018522:	4259      	negs	r1, r3
 8018524:	4159      	adcs	r1, r3
 8018526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801852a:	e7eb      	b.n	8018504 <__swhatbuf_r+0x24>

0801852c <__smakebuf_r>:
 801852c:	898b      	ldrh	r3, [r1, #12]
 801852e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018530:	079d      	lsls	r5, r3, #30
 8018532:	4606      	mov	r6, r0
 8018534:	460c      	mov	r4, r1
 8018536:	d507      	bpl.n	8018548 <__smakebuf_r+0x1c>
 8018538:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801853c:	6023      	str	r3, [r4, #0]
 801853e:	6123      	str	r3, [r4, #16]
 8018540:	2301      	movs	r3, #1
 8018542:	6163      	str	r3, [r4, #20]
 8018544:	b003      	add	sp, #12
 8018546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018548:	ab01      	add	r3, sp, #4
 801854a:	466a      	mov	r2, sp
 801854c:	f7ff ffc8 	bl	80184e0 <__swhatbuf_r>
 8018550:	9f00      	ldr	r7, [sp, #0]
 8018552:	4605      	mov	r5, r0
 8018554:	4639      	mov	r1, r7
 8018556:	4630      	mov	r0, r6
 8018558:	f7ff f85c 	bl	8017614 <_malloc_r>
 801855c:	b948      	cbnz	r0, 8018572 <__smakebuf_r+0x46>
 801855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018562:	059a      	lsls	r2, r3, #22
 8018564:	d4ee      	bmi.n	8018544 <__smakebuf_r+0x18>
 8018566:	f023 0303 	bic.w	r3, r3, #3
 801856a:	f043 0302 	orr.w	r3, r3, #2
 801856e:	81a3      	strh	r3, [r4, #12]
 8018570:	e7e2      	b.n	8018538 <__smakebuf_r+0xc>
 8018572:	89a3      	ldrh	r3, [r4, #12]
 8018574:	6020      	str	r0, [r4, #0]
 8018576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801857a:	81a3      	strh	r3, [r4, #12]
 801857c:	9b01      	ldr	r3, [sp, #4]
 801857e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018582:	b15b      	cbz	r3, 801859c <__smakebuf_r+0x70>
 8018584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018588:	4630      	mov	r0, r6
 801858a:	f000 f81d 	bl	80185c8 <_isatty_r>
 801858e:	b128      	cbz	r0, 801859c <__smakebuf_r+0x70>
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	f023 0303 	bic.w	r3, r3, #3
 8018596:	f043 0301 	orr.w	r3, r3, #1
 801859a:	81a3      	strh	r3, [r4, #12]
 801859c:	89a3      	ldrh	r3, [r4, #12]
 801859e:	431d      	orrs	r5, r3
 80185a0:	81a5      	strh	r5, [r4, #12]
 80185a2:	e7cf      	b.n	8018544 <__smakebuf_r+0x18>

080185a4 <_fstat_r>:
 80185a4:	b538      	push	{r3, r4, r5, lr}
 80185a6:	4d07      	ldr	r5, [pc, #28]	@ (80185c4 <_fstat_r+0x20>)
 80185a8:	2300      	movs	r3, #0
 80185aa:	4604      	mov	r4, r0
 80185ac:	4608      	mov	r0, r1
 80185ae:	4611      	mov	r1, r2
 80185b0:	602b      	str	r3, [r5, #0]
 80185b2:	f7e9 f97b 	bl	80018ac <_fstat>
 80185b6:	1c43      	adds	r3, r0, #1
 80185b8:	d102      	bne.n	80185c0 <_fstat_r+0x1c>
 80185ba:	682b      	ldr	r3, [r5, #0]
 80185bc:	b103      	cbz	r3, 80185c0 <_fstat_r+0x1c>
 80185be:	6023      	str	r3, [r4, #0]
 80185c0:	bd38      	pop	{r3, r4, r5, pc}
 80185c2:	bf00      	nop
 80185c4:	200101d0 	.word	0x200101d0

080185c8 <_isatty_r>:
 80185c8:	b538      	push	{r3, r4, r5, lr}
 80185ca:	4d06      	ldr	r5, [pc, #24]	@ (80185e4 <_isatty_r+0x1c>)
 80185cc:	2300      	movs	r3, #0
 80185ce:	4604      	mov	r4, r0
 80185d0:	4608      	mov	r0, r1
 80185d2:	602b      	str	r3, [r5, #0]
 80185d4:	f7e9 f970 	bl	80018b8 <_isatty>
 80185d8:	1c43      	adds	r3, r0, #1
 80185da:	d102      	bne.n	80185e2 <_isatty_r+0x1a>
 80185dc:	682b      	ldr	r3, [r5, #0]
 80185de:	b103      	cbz	r3, 80185e2 <_isatty_r+0x1a>
 80185e0:	6023      	str	r3, [r4, #0]
 80185e2:	bd38      	pop	{r3, r4, r5, pc}
 80185e4:	200101d0 	.word	0x200101d0

080185e8 <_sbrk_r>:
 80185e8:	b538      	push	{r3, r4, r5, lr}
 80185ea:	4d06      	ldr	r5, [pc, #24]	@ (8018604 <_sbrk_r+0x1c>)
 80185ec:	2300      	movs	r3, #0
 80185ee:	4604      	mov	r4, r0
 80185f0:	4608      	mov	r0, r1
 80185f2:	602b      	str	r3, [r5, #0]
 80185f4:	f7e9 f964 	bl	80018c0 <_sbrk>
 80185f8:	1c43      	adds	r3, r0, #1
 80185fa:	d102      	bne.n	8018602 <_sbrk_r+0x1a>
 80185fc:	682b      	ldr	r3, [r5, #0]
 80185fe:	b103      	cbz	r3, 8018602 <_sbrk_r+0x1a>
 8018600:	6023      	str	r3, [r4, #0]
 8018602:	bd38      	pop	{r3, r4, r5, pc}
 8018604:	200101d0 	.word	0x200101d0

08018608 <abort>:
 8018608:	b508      	push	{r3, lr}
 801860a:	2006      	movs	r0, #6
 801860c:	f000 f88c 	bl	8018728 <raise>
 8018610:	2001      	movs	r0, #1
 8018612:	f7e9 f933 	bl	800187c <_exit>

08018616 <_calloc_r>:
 8018616:	b570      	push	{r4, r5, r6, lr}
 8018618:	fba1 5402 	umull	r5, r4, r1, r2
 801861c:	b93c      	cbnz	r4, 801862e <_calloc_r+0x18>
 801861e:	4629      	mov	r1, r5
 8018620:	f7fe fff8 	bl	8017614 <_malloc_r>
 8018624:	4606      	mov	r6, r0
 8018626:	b928      	cbnz	r0, 8018634 <_calloc_r+0x1e>
 8018628:	2600      	movs	r6, #0
 801862a:	4630      	mov	r0, r6
 801862c:	bd70      	pop	{r4, r5, r6, pc}
 801862e:	220c      	movs	r2, #12
 8018630:	6002      	str	r2, [r0, #0]
 8018632:	e7f9      	b.n	8018628 <_calloc_r+0x12>
 8018634:	462a      	mov	r2, r5
 8018636:	4621      	mov	r1, r4
 8018638:	f7fe f8d2 	bl	80167e0 <memset>
 801863c:	e7f5      	b.n	801862a <_calloc_r+0x14>

0801863e <__ascii_mbtowc>:
 801863e:	b082      	sub	sp, #8
 8018640:	b901      	cbnz	r1, 8018644 <__ascii_mbtowc+0x6>
 8018642:	a901      	add	r1, sp, #4
 8018644:	b142      	cbz	r2, 8018658 <__ascii_mbtowc+0x1a>
 8018646:	b14b      	cbz	r3, 801865c <__ascii_mbtowc+0x1e>
 8018648:	7813      	ldrb	r3, [r2, #0]
 801864a:	600b      	str	r3, [r1, #0]
 801864c:	7812      	ldrb	r2, [r2, #0]
 801864e:	1e10      	subs	r0, r2, #0
 8018650:	bf18      	it	ne
 8018652:	2001      	movne	r0, #1
 8018654:	b002      	add	sp, #8
 8018656:	4770      	bx	lr
 8018658:	4610      	mov	r0, r2
 801865a:	e7fb      	b.n	8018654 <__ascii_mbtowc+0x16>
 801865c:	f06f 0001 	mvn.w	r0, #1
 8018660:	e7f8      	b.n	8018654 <__ascii_mbtowc+0x16>

08018662 <_realloc_r>:
 8018662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018666:	4680      	mov	r8, r0
 8018668:	4615      	mov	r5, r2
 801866a:	460c      	mov	r4, r1
 801866c:	b921      	cbnz	r1, 8018678 <_realloc_r+0x16>
 801866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018672:	4611      	mov	r1, r2
 8018674:	f7fe bfce 	b.w	8017614 <_malloc_r>
 8018678:	b92a      	cbnz	r2, 8018686 <_realloc_r+0x24>
 801867a:	f7fe ff57 	bl	801752c <_free_r>
 801867e:	2400      	movs	r4, #0
 8018680:	4620      	mov	r0, r4
 8018682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018686:	f000 f86b 	bl	8018760 <_malloc_usable_size_r>
 801868a:	4285      	cmp	r5, r0
 801868c:	4606      	mov	r6, r0
 801868e:	d802      	bhi.n	8018696 <_realloc_r+0x34>
 8018690:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018694:	d8f4      	bhi.n	8018680 <_realloc_r+0x1e>
 8018696:	4629      	mov	r1, r5
 8018698:	4640      	mov	r0, r8
 801869a:	f7fe ffbb 	bl	8017614 <_malloc_r>
 801869e:	4607      	mov	r7, r0
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d0ec      	beq.n	801867e <_realloc_r+0x1c>
 80186a4:	42b5      	cmp	r5, r6
 80186a6:	462a      	mov	r2, r5
 80186a8:	4621      	mov	r1, r4
 80186aa:	bf28      	it	cs
 80186ac:	4632      	movcs	r2, r6
 80186ae:	f7fe f932 	bl	8016916 <memcpy>
 80186b2:	4621      	mov	r1, r4
 80186b4:	4640      	mov	r0, r8
 80186b6:	f7fe ff39 	bl	801752c <_free_r>
 80186ba:	463c      	mov	r4, r7
 80186bc:	e7e0      	b.n	8018680 <_realloc_r+0x1e>

080186be <__ascii_wctomb>:
 80186be:	4603      	mov	r3, r0
 80186c0:	4608      	mov	r0, r1
 80186c2:	b141      	cbz	r1, 80186d6 <__ascii_wctomb+0x18>
 80186c4:	2aff      	cmp	r2, #255	@ 0xff
 80186c6:	d904      	bls.n	80186d2 <__ascii_wctomb+0x14>
 80186c8:	228a      	movs	r2, #138	@ 0x8a
 80186ca:	601a      	str	r2, [r3, #0]
 80186cc:	f04f 30ff 	mov.w	r0, #4294967295
 80186d0:	4770      	bx	lr
 80186d2:	700a      	strb	r2, [r1, #0]
 80186d4:	2001      	movs	r0, #1
 80186d6:	4770      	bx	lr

080186d8 <_raise_r>:
 80186d8:	291f      	cmp	r1, #31
 80186da:	b538      	push	{r3, r4, r5, lr}
 80186dc:	4605      	mov	r5, r0
 80186de:	460c      	mov	r4, r1
 80186e0:	d904      	bls.n	80186ec <_raise_r+0x14>
 80186e2:	2316      	movs	r3, #22
 80186e4:	6003      	str	r3, [r0, #0]
 80186e6:	f04f 30ff 	mov.w	r0, #4294967295
 80186ea:	bd38      	pop	{r3, r4, r5, pc}
 80186ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80186ee:	b112      	cbz	r2, 80186f6 <_raise_r+0x1e>
 80186f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186f4:	b94b      	cbnz	r3, 801870a <_raise_r+0x32>
 80186f6:	4628      	mov	r0, r5
 80186f8:	f000 f830 	bl	801875c <_getpid_r>
 80186fc:	4622      	mov	r2, r4
 80186fe:	4601      	mov	r1, r0
 8018700:	4628      	mov	r0, r5
 8018702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018706:	f000 b817 	b.w	8018738 <_kill_r>
 801870a:	2b01      	cmp	r3, #1
 801870c:	d00a      	beq.n	8018724 <_raise_r+0x4c>
 801870e:	1c59      	adds	r1, r3, #1
 8018710:	d103      	bne.n	801871a <_raise_r+0x42>
 8018712:	2316      	movs	r3, #22
 8018714:	6003      	str	r3, [r0, #0]
 8018716:	2001      	movs	r0, #1
 8018718:	e7e7      	b.n	80186ea <_raise_r+0x12>
 801871a:	2100      	movs	r1, #0
 801871c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018720:	4620      	mov	r0, r4
 8018722:	4798      	blx	r3
 8018724:	2000      	movs	r0, #0
 8018726:	e7e0      	b.n	80186ea <_raise_r+0x12>

08018728 <raise>:
 8018728:	4b02      	ldr	r3, [pc, #8]	@ (8018734 <raise+0xc>)
 801872a:	4601      	mov	r1, r0
 801872c:	6818      	ldr	r0, [r3, #0]
 801872e:	f7ff bfd3 	b.w	80186d8 <_raise_r>
 8018732:	bf00      	nop
 8018734:	2000003c 	.word	0x2000003c

08018738 <_kill_r>:
 8018738:	b538      	push	{r3, r4, r5, lr}
 801873a:	4d07      	ldr	r5, [pc, #28]	@ (8018758 <_kill_r+0x20>)
 801873c:	2300      	movs	r3, #0
 801873e:	4604      	mov	r4, r0
 8018740:	4608      	mov	r0, r1
 8018742:	4611      	mov	r1, r2
 8018744:	602b      	str	r3, [r5, #0]
 8018746:	f7e9 f88f 	bl	8001868 <_kill>
 801874a:	1c43      	adds	r3, r0, #1
 801874c:	d102      	bne.n	8018754 <_kill_r+0x1c>
 801874e:	682b      	ldr	r3, [r5, #0]
 8018750:	b103      	cbz	r3, 8018754 <_kill_r+0x1c>
 8018752:	6023      	str	r3, [r4, #0]
 8018754:	bd38      	pop	{r3, r4, r5, pc}
 8018756:	bf00      	nop
 8018758:	200101d0 	.word	0x200101d0

0801875c <_getpid_r>:
 801875c:	f7e9 b882 	b.w	8001864 <_getpid>

08018760 <_malloc_usable_size_r>:
 8018760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018764:	1f18      	subs	r0, r3, #4
 8018766:	2b00      	cmp	r3, #0
 8018768:	bfbc      	itt	lt
 801876a:	580b      	ldrlt	r3, [r1, r0]
 801876c:	18c0      	addlt	r0, r0, r3
 801876e:	4770      	bx	lr

08018770 <_init>:
 8018770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018772:	bf00      	nop
 8018774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018776:	bc08      	pop	{r3}
 8018778:	469e      	mov	lr, r3
 801877a:	4770      	bx	lr

0801877c <_fini>:
 801877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801877e:	bf00      	nop
 8018780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018782:	bc08      	pop	{r3}
 8018784:	469e      	mov	lr, r3
 8018786:	4770      	bx	lr
