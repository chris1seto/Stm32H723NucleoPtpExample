
LwIP_HTTP_Server_Socket_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023920  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000153e4  08023bf0  08023bf0  00024bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038fd4  08038fd4  0003a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08038fd4  08038fd4  00039fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038fdc  08038fdc  0003a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038fdc  08038fdc  00039fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08038fe0  08038fe0  00039fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08038fe4  0003a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010128  200000a0  08039084  0003a0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00002000  200101c8  08039084  0003a1c8  2**0
                  ALLOC
 11 .lwip_sec     00003583  30000000  08039084  0003b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003a0a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0004c60b  00000000  00000000  0003a0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  000866d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0004af35  00000000  00000000  00086761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a8ec  00000000  00000000  000d1696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003358  00000000  00000000  000dbf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179b6e  00000000  00000000  000df2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000028a2  00000000  00000000  00258e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00047d05  00000000  00000000  0025b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a33f5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e0b4  00000000  00000000  002a3438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000a0 	.word	0x200000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08023bd8 	.word	0x08023bd8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a4 	.word	0x200000a4
 800030c:	08023bd8 	.word	0x08023bd8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_ldivmod>:
 80003e0:	b97b      	cbnz	r3, 8000402 <__aeabi_ldivmod+0x22>
 80003e2:	b972      	cbnz	r2, 8000402 <__aeabi_ldivmod+0x22>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bfbe      	ittt	lt
 80003e8:	2000      	movlt	r0, #0
 80003ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ee:	e006      	blt.n	80003fe <__aeabi_ldivmod+0x1e>
 80003f0:	bf08      	it	eq
 80003f2:	2800      	cmpeq	r0, #0
 80003f4:	bf1c      	itt	ne
 80003f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003fa:	f04f 30ff 	movne.w	r0, #4294967295
 80003fe:	f000 b9b5 	b.w	800076c <__aeabi_idiv0>
 8000402:	f1ad 0c08 	sub.w	ip, sp, #8
 8000406:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040a:	2900      	cmp	r1, #0
 800040c:	db09      	blt.n	8000422 <__aeabi_ldivmod+0x42>
 800040e:	2b00      	cmp	r3, #0
 8000410:	db1a      	blt.n	8000448 <__aeabi_ldivmod+0x68>
 8000412:	f000 f84d 	bl	80004b0 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4770      	bx	lr
 8000422:	4240      	negs	r0, r0
 8000424:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000428:	2b00      	cmp	r3, #0
 800042a:	db1b      	blt.n	8000464 <__aeabi_ldivmod+0x84>
 800042c:	f000 f840 	bl	80004b0 <__udivmoddi4>
 8000430:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000438:	b004      	add	sp, #16
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	4252      	negs	r2, r2
 8000442:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000446:	4770      	bx	lr
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	f000 f82f 	bl	80004b0 <__udivmoddi4>
 8000452:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045a:	b004      	add	sp, #16
 800045c:	4240      	negs	r0, r0
 800045e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000462:	4770      	bx	lr
 8000464:	4252      	negs	r2, r2
 8000466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046a:	f000 f821 	bl	80004b0 <__udivmoddi4>
 800046e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000476:	b004      	add	sp, #16
 8000478:	4252      	negs	r2, r2
 800047a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800047e:	4770      	bx	lr

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b96a 	b.w	800076c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	460c      	mov	r4, r1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d14e      	bne.n	800055a <__udivmoddi4+0xaa>
 80004bc:	4694      	mov	ip, r2
 80004be:	458c      	cmp	ip, r1
 80004c0:	4686      	mov	lr, r0
 80004c2:	fab2 f282 	clz	r2, r2
 80004c6:	d962      	bls.n	800058e <__udivmoddi4+0xde>
 80004c8:	b14a      	cbz	r2, 80004de <__udivmoddi4+0x2e>
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	4091      	lsls	r1, r2
 80004d0:	fa20 f303 	lsr.w	r3, r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	4319      	orrs	r1, r3
 80004da:	fa00 fe02 	lsl.w	lr, r0, r2
 80004de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e2:	fa1f f68c 	uxth.w	r6, ip
 80004e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ee:	fb07 1114 	mls	r1, r7, r4, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb04 f106 	mul.w	r1, r4, r6
 80004fa:	4299      	cmp	r1, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x64>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f104 30ff 	add.w	r0, r4, #4294967295
 8000506:	f080 8112 	bcs.w	800072e <__udivmoddi4+0x27e>
 800050a:	4299      	cmp	r1, r3
 800050c:	f240 810f 	bls.w	800072e <__udivmoddi4+0x27e>
 8000510:	3c02      	subs	r4, #2
 8000512:	4463      	add	r3, ip
 8000514:	1a59      	subs	r1, r3, r1
 8000516:	fa1f f38e 	uxth.w	r3, lr
 800051a:	fbb1 f0f7 	udiv	r0, r1, r7
 800051e:	fb07 1110 	mls	r1, r7, r0, r1
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	fb00 f606 	mul.w	r6, r0, r6
 800052a:	429e      	cmp	r6, r3
 800052c:	d90a      	bls.n	8000544 <__udivmoddi4+0x94>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 31ff 	add.w	r1, r0, #4294967295
 8000536:	f080 80fc 	bcs.w	8000732 <__udivmoddi4+0x282>
 800053a:	429e      	cmp	r6, r3
 800053c:	f240 80f9 	bls.w	8000732 <__udivmoddi4+0x282>
 8000540:	4463      	add	r3, ip
 8000542:	3802      	subs	r0, #2
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800054a:	2100      	movs	r1, #0
 800054c:	b11d      	cbz	r5, 8000556 <__udivmoddi4+0xa6>
 800054e:	40d3      	lsrs	r3, r2
 8000550:	2200      	movs	r2, #0
 8000552:	e9c5 3200 	strd	r3, r2, [r5]
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	428b      	cmp	r3, r1
 800055c:	d905      	bls.n	800056a <__udivmoddi4+0xba>
 800055e:	b10d      	cbz	r5, 8000564 <__udivmoddi4+0xb4>
 8000560:	e9c5 0100 	strd	r0, r1, [r5]
 8000564:	2100      	movs	r1, #0
 8000566:	4608      	mov	r0, r1
 8000568:	e7f5      	b.n	8000556 <__udivmoddi4+0xa6>
 800056a:	fab3 f183 	clz	r1, r3
 800056e:	2900      	cmp	r1, #0
 8000570:	d146      	bne.n	8000600 <__udivmoddi4+0x150>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d302      	bcc.n	800057c <__udivmoddi4+0xcc>
 8000576:	4290      	cmp	r0, r2
 8000578:	f0c0 80f0 	bcc.w	800075c <__udivmoddi4+0x2ac>
 800057c:	1a86      	subs	r6, r0, r2
 800057e:	eb64 0303 	sbc.w	r3, r4, r3
 8000582:	2001      	movs	r0, #1
 8000584:	2d00      	cmp	r5, #0
 8000586:	d0e6      	beq.n	8000556 <__udivmoddi4+0xa6>
 8000588:	e9c5 6300 	strd	r6, r3, [r5]
 800058c:	e7e3      	b.n	8000556 <__udivmoddi4+0xa6>
 800058e:	2a00      	cmp	r2, #0
 8000590:	f040 8090 	bne.w	80006b4 <__udivmoddi4+0x204>
 8000594:	eba1 040c 	sub.w	r4, r1, ip
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa1f f78c 	uxth.w	r7, ip
 80005a0:	2101      	movs	r1, #1
 80005a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80005a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005aa:	fb08 4416 	mls	r4, r8, r6, r4
 80005ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b2:	fb07 f006 	mul.w	r0, r7, r6
 80005b6:	4298      	cmp	r0, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x11c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f106 34ff 	add.w	r4, r6, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x11a>
 80005c4:	4298      	cmp	r0, r3
 80005c6:	f200 80cd 	bhi.w	8000764 <__udivmoddi4+0x2b4>
 80005ca:	4626      	mov	r6, r4
 80005cc:	1a1c      	subs	r4, r3, r0
 80005ce:	fa1f f38e 	uxth.w	r3, lr
 80005d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005d6:	fb08 4410 	mls	r4, r8, r0, r4
 80005da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005de:	fb00 f707 	mul.w	r7, r0, r7
 80005e2:	429f      	cmp	r7, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x148>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x146>
 80005f0:	429f      	cmp	r7, r3
 80005f2:	f200 80b0 	bhi.w	8000756 <__udivmoddi4+0x2a6>
 80005f6:	4620      	mov	r0, r4
 80005f8:	1bdb      	subs	r3, r3, r7
 80005fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005fe:	e7a5      	b.n	800054c <__udivmoddi4+0x9c>
 8000600:	f1c1 0620 	rsb	r6, r1, #32
 8000604:	408b      	lsls	r3, r1
 8000606:	fa22 f706 	lsr.w	r7, r2, r6
 800060a:	431f      	orrs	r7, r3
 800060c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000610:	fa04 f301 	lsl.w	r3, r4, r1
 8000614:	ea43 030c 	orr.w	r3, r3, ip
 8000618:	40f4      	lsrs	r4, r6
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	0c38      	lsrs	r0, r7, #16
 8000620:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000624:	fbb4 fef0 	udiv	lr, r4, r0
 8000628:	fa1f fc87 	uxth.w	ip, r7
 800062c:	fb00 441e 	mls	r4, r0, lr, r4
 8000630:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000634:	fb0e f90c 	mul.w	r9, lr, ip
 8000638:	45a1      	cmp	r9, r4
 800063a:	fa02 f201 	lsl.w	r2, r2, r1
 800063e:	d90a      	bls.n	8000656 <__udivmoddi4+0x1a6>
 8000640:	193c      	adds	r4, r7, r4
 8000642:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000646:	f080 8084 	bcs.w	8000752 <__udivmoddi4+0x2a2>
 800064a:	45a1      	cmp	r9, r4
 800064c:	f240 8081 	bls.w	8000752 <__udivmoddi4+0x2a2>
 8000650:	f1ae 0e02 	sub.w	lr, lr, #2
 8000654:	443c      	add	r4, r7
 8000656:	eba4 0409 	sub.w	r4, r4, r9
 800065a:	fa1f f983 	uxth.w	r9, r3
 800065e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000662:	fb00 4413 	mls	r4, r0, r3, r4
 8000666:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800066a:	fb03 fc0c 	mul.w	ip, r3, ip
 800066e:	45a4      	cmp	ip, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x1d2>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f103 30ff 	add.w	r0, r3, #4294967295
 8000678:	d267      	bcs.n	800074a <__udivmoddi4+0x29a>
 800067a:	45a4      	cmp	ip, r4
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0x29a>
 800067e:	3b02      	subs	r3, #2
 8000680:	443c      	add	r4, r7
 8000682:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000686:	fba0 9302 	umull	r9, r3, r0, r2
 800068a:	eba4 040c 	sub.w	r4, r4, ip
 800068e:	429c      	cmp	r4, r3
 8000690:	46ce      	mov	lr, r9
 8000692:	469c      	mov	ip, r3
 8000694:	d351      	bcc.n	800073a <__udivmoddi4+0x28a>
 8000696:	d04e      	beq.n	8000736 <__udivmoddi4+0x286>
 8000698:	b155      	cbz	r5, 80006b0 <__udivmoddi4+0x200>
 800069a:	ebb8 030e 	subs.w	r3, r8, lr
 800069e:	eb64 040c 	sbc.w	r4, r4, ip
 80006a2:	fa04 f606 	lsl.w	r6, r4, r6
 80006a6:	40cb      	lsrs	r3, r1
 80006a8:	431e      	orrs	r6, r3
 80006aa:	40cc      	lsrs	r4, r1
 80006ac:	e9c5 6400 	strd	r6, r4, [r5]
 80006b0:	2100      	movs	r1, #0
 80006b2:	e750      	b.n	8000556 <__udivmoddi4+0xa6>
 80006b4:	f1c2 0320 	rsb	r3, r2, #32
 80006b8:	fa20 f103 	lsr.w	r1, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	fa24 f303 	lsr.w	r3, r4, r3
 80006c4:	4094      	lsls	r4, r2
 80006c6:	430c      	orrs	r4, r1
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d0:	fa1f f78c 	uxth.w	r7, ip
 80006d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d8:	fb08 3110 	mls	r1, r8, r0, r3
 80006dc:	0c23      	lsrs	r3, r4, #16
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb00 f107 	mul.w	r1, r0, r7
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x24c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80006f2:	d22c      	bcs.n	800074e <__udivmoddi4+0x29e>
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d92a      	bls.n	800074e <__udivmoddi4+0x29e>
 80006f8:	3802      	subs	r0, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f1f8 	udiv	r1, r3, r8
 8000704:	fb08 3311 	mls	r3, r8, r1, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb01 f307 	mul.w	r3, r1, r7
 8000710:	42a3      	cmp	r3, r4
 8000712:	d908      	bls.n	8000726 <__udivmoddi4+0x276>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f101 36ff 	add.w	r6, r1, #4294967295
 800071c:	d213      	bcs.n	8000746 <__udivmoddi4+0x296>
 800071e:	42a3      	cmp	r3, r4
 8000720:	d911      	bls.n	8000746 <__udivmoddi4+0x296>
 8000722:	3902      	subs	r1, #2
 8000724:	4464      	add	r4, ip
 8000726:	1ae4      	subs	r4, r4, r3
 8000728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800072c:	e739      	b.n	80005a2 <__udivmoddi4+0xf2>
 800072e:	4604      	mov	r4, r0
 8000730:	e6f0      	b.n	8000514 <__udivmoddi4+0x64>
 8000732:	4608      	mov	r0, r1
 8000734:	e706      	b.n	8000544 <__udivmoddi4+0x94>
 8000736:	45c8      	cmp	r8, r9
 8000738:	d2ae      	bcs.n	8000698 <__udivmoddi4+0x1e8>
 800073a:	ebb9 0e02 	subs.w	lr, r9, r2
 800073e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000742:	3801      	subs	r0, #1
 8000744:	e7a8      	b.n	8000698 <__udivmoddi4+0x1e8>
 8000746:	4631      	mov	r1, r6
 8000748:	e7ed      	b.n	8000726 <__udivmoddi4+0x276>
 800074a:	4603      	mov	r3, r0
 800074c:	e799      	b.n	8000682 <__udivmoddi4+0x1d2>
 800074e:	4630      	mov	r0, r6
 8000750:	e7d4      	b.n	80006fc <__udivmoddi4+0x24c>
 8000752:	46d6      	mov	lr, sl
 8000754:	e77f      	b.n	8000656 <__udivmoddi4+0x1a6>
 8000756:	4463      	add	r3, ip
 8000758:	3802      	subs	r0, #2
 800075a:	e74d      	b.n	80005f8 <__udivmoddi4+0x148>
 800075c:	4606      	mov	r6, r0
 800075e:	4623      	mov	r3, r4
 8000760:	4608      	mov	r0, r1
 8000762:	e70f      	b.n	8000584 <__udivmoddi4+0xd4>
 8000764:	3e02      	subs	r6, #2
 8000766:	4463      	add	r3, ip
 8000768:	e730      	b.n	80005cc <__udivmoddi4+0x11c>
 800076a:	bf00      	nop

0800076c <__aeabi_idiv0>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000776:	e003      	b.n	8000780 <LoopCopyDataInit>

08000778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800077a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800077c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800077e:	3104      	adds	r1, #4

08000780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000788:	d3f6      	bcc.n	8000778 <CopyDataInit>
  ldr  r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800078c:	e002      	b.n	8000794 <LoopFillZerobss>

0800078e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800078e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000790:	f842 3b04 	str.w	r3, [r2], #4

08000794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000798:	d3f9      	bcc.n	800078e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079a:	f006 f813 	bl	80067c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f022 fac3 	bl	8022d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f001 fa3b 	bl	8001c1c <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007ac:	08038fe4 	.word	0x08038fe4
  ldr  r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007b4:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 80007b8:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 80007bc:	200101c8 	.word	0x200101c8

080007c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC3_IRQHandler>
	...

080007c4 <Log_Init>:
#include <stdio.h>

static UART_HandleTypeDef uart_handle;

void Log_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

	// Enable clocks
	__GPIOD_CLK_ENABLE();
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <Log_Init+0xa8>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	4a26      	ldr	r2, [pc, #152]	@ (800086c <Log_Init+0xa8>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <Log_Init+0xa8>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
	__USART3_CLK_ENABLE();
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <Log_Init+0xa8>)
 80007ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007ee:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <Log_Init+0xa8>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <Log_Init+0xa8>)
 80007fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

	// Configure GPIO
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8000812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000816:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000818:	2307      	movs	r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <Log_Init+0xac>)
 8000824:	f008 f898 	bl	8008958 <HAL_GPIO_Init>

	// Configure the USART peripheral
	uart_handle.Instance          = USART3;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <Log_Init+0xb0>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <Log_Init+0xb4>)
 800082c:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = 4000000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <Log_Init+0xb0>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <Log_Init+0xb8>)
 8000832:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <Log_Init+0xb0>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <Log_Init+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <Log_Init+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <Log_Init+0xb0>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <Log_Init+0xb0>)
 800084e:	2208      	movs	r2, #8
 8000850:	615a      	str	r2, [r3, #20]

	// Commit the USART
	if (HAL_UART_Init(&uart_handle) != HAL_OK)
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <Log_Init+0xb0>)
 8000854:	f009 ffca 	bl	800a7ec <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <Log_Init+0x9e>
	{
		while (1);
 800085e:	bf00      	nop
 8000860:	e7fd      	b.n	800085e <Log_Init+0x9a>
	}
}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	58024400 	.word	0x58024400
 8000870:	58020c00 	.word	0x58020c00
 8000874:	200000bc 	.word	0x200000bc
 8000878:	40004800 	.word	0x40004800
 800087c:	003d0900 	.word	0x003d0900

08000880 <_write>:

int _write(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&uart_handle, (uint8_t*)ptr, len, 0xFFFF);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <_write+0x28>)
 8000898:	f00a f802 	bl	800a8a0 <HAL_UART_Transmit>
	return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000bc 	.word	0x200000bc

080008ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <ethernet_link_status_updated+0x20>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <ethernet_link_status_updated+0x34>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3);
#endif /* LWIP_DHCP */
  }
}
 80008ca:	e002      	b.n	80008d2 <ethernet_link_status_updated+0x26>
    DHCP_state = DHCP_LINK_DOWN;
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <ethernet_link_status_updated+0x34>)
 80008ce:	2205      	movs	r2, #5
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000150 	.word	0x20000150

080008e4 <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;

  for (;;)
  {
    switch (DHCP_state)
 80008f0:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <DHCP_Thread+0xe0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d051      	beq.n	800099e <DHCP_Thread+0xba>
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	dc59      	bgt.n	80009b2 <DHCP_Thread+0xce>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d002      	beq.n	8000908 <DHCP_Thread+0x24>
 8000902:	2b02      	cmp	r3, #2
 8000904:	d018      	beq.n	8000938 <DHCP_Thread+0x54>

      BSP_LED_Off(LED2);
      BSP_LED_On(LED3);
    }
    break;
    default: break;
 8000906:	e054      	b.n	80009b2 <DHCP_Thread+0xce>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 800091a:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <DHCP_Thread+0xe0>)
 800091c:	2202      	movs	r2, #2
 800091e:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED2);
 8000920:	2001      	movs	r0, #1
 8000922:	f005 ff25 	bl	8006770 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000926:	2002      	movs	r0, #2
 8000928:	f005 ff22 	bl	8006770 <BSP_LED_Off>
        netifapi_dhcp_start(netif);
 800092c:	4a26      	ldr	r2, [pc, #152]	@ (80009c8 <DHCP_Thread+0xe4>)
 800092e:	2100      	movs	r1, #0
 8000930:	69f8      	ldr	r0, [r7, #28]
 8000932:	f00f fe35 	bl	80105a0 <netifapi_netif_common>
      break;
 8000936:	e03f      	b.n	80009b8 <DHCP_Thread+0xd4>
        if (dhcp_supplied_address(netif))
 8000938:	69f8      	ldr	r0, [r7, #28]
 800093a:	f015 fb9d 	bl	8016078 <dhcp_supplied_address>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00b      	beq.n	800095c <DHCP_Thread+0x78>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <DHCP_Thread+0xe0>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
          BSP_LED_On(LED2);
 800094a:	2001      	movs	r0, #1
 800094c:	f005 fee6 	bl	800671c <BSP_LED_On>
          BSP_LED_Off(LED3);
 8000950:	2002      	movs	r0, #2
 8000952:	f005 ff0d 	bl	8006770 <BSP_LED_Off>
          ptpd_init();
 8000956:	f002 fb67 	bl	8003028 <ptpd_init>
      break;
 800095a:	e02c      	b.n	80009b6 <DHCP_Thread+0xd2>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000960:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d925      	bls.n	80009b6 <DHCP_Thread+0xd2>
            DHCP_state = DHCP_TIMEOUT;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <DHCP_Thread+0xe0>)
 800096c:	2204      	movs	r2, #4
 800096e:	701a      	strb	r2, [r3, #0]
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <DHCP_Thread+0xe8>)
 8000972:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000974:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000978:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <DHCP_Thread+0xec>)
 800097c:	60fb      	str	r3, [r7, #12]
            netifapi_netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	f107 0210 	add.w	r2, r7, #16
 8000986:	f107 0114 	add.w	r1, r7, #20
 800098a:	69f8      	ldr	r0, [r7, #28]
 800098c:	f00f fdd6 	bl	801053c <netifapi_netif_set_addr>
            BSP_LED_On(LED2);
 8000990:	2001      	movs	r0, #1
 8000992:	f005 fec3 	bl	800671c <BSP_LED_On>
            BSP_LED_Off(LED3);
 8000996:	2002      	movs	r0, #2
 8000998:	f005 feea 	bl	8006770 <BSP_LED_Off>
      break;
 800099c:	e00b      	b.n	80009b6 <DHCP_Thread+0xd2>
      DHCP_state = DHCP_OFF;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <DHCP_Thread+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED2);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f005 fee3 	bl	8006770 <BSP_LED_Off>
      BSP_LED_On(LED3);
 80009aa:	2002      	movs	r0, #2
 80009ac:	f005 feb6 	bl	800671c <BSP_LED_On>
    break;
 80009b0:	e002      	b.n	80009b8 <DHCP_Thread+0xd4>
    default: break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <DHCP_Thread+0xd4>
      break;
 80009b6:	bf00      	nop
    }

    /* wait 500 ms */
    osDelay(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009bc:	f00e fd19 	bl	800f3f2 <osDelay>
    switch (DHCP_state)
 80009c0:	e796      	b.n	80008f0 <DHCP_Thread+0xc>
 80009c2:	bf00      	nop
 80009c4:	20000150 	.word	0x20000150
 80009c8:	08014aa5 	.word	0x08014aa5
 80009cc:	0a00a8c0 	.word	0x0a00a8c0
 80009d0:	0100a8c0 	.word	0x0100a8c0

080009d4 <SubsecondToNanosecond>:
static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value);
static uint32_t NanosecondToSubsecond(const uint32_t nanosecond_value);
static void InitMac1588v2(void);

static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value)
{
 80009d4:	b4b0      	push	{r4, r5, r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint64_t val = subsecond_value * 1000000000ll;
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	2000      	movs	r0, #0
 80009e0:	460c      	mov	r4, r1
 80009e2:	4605      	mov	r5, r0
 80009e4:	490f      	ldr	r1, [pc, #60]	@ (8000a24 <SubsecondToNanosecond+0x50>)
 80009e6:	fb01 f005 	mul.w	r0, r1, r5
 80009ea:	2100      	movs	r1, #0
 80009ec:	fb04 f101 	mul.w	r1, r4, r1
 80009f0:	4401      	add	r1, r0
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <SubsecondToNanosecond+0x50>)
 80009f4:	fba4 2300 	umull	r2, r3, r4, r0
 80009f8:	4419      	add	r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  val >>= 31;
 8000a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	0fc2      	lsrs	r2, r0, #31
 8000a0e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000a12:	0fcb      	lsrs	r3, r1, #31
 8000a14:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return val;
 8000a18:	68bb      	ldr	r3, [r7, #8]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bcb0      	pop	{r4, r5, r7}
 8000a22:	4770      	bx	lr
 8000a24:	3b9aca00 	.word	0x3b9aca00

08000a28 <NanosecondToSubsecond>:

uint32_t NanosecondToSubsecond(const uint32_t nanosecond_value)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint64_t val = nanosecond_value * 0x80000000ll;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	461c      	mov	r4, r3
 8000a36:	4615      	mov	r5, r2
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	07eb      	lsls	r3, r5, #31
 8000a42:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
 8000a46:	07e2      	lsls	r2, r4, #31
 8000a48:	e9c7 2302 	strd	r2, r3, [r7, #8]
  val /= 1000000000;
 8000a4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a50:	a307      	add	r3, pc, #28	@ (adr r3, 8000a70 <NanosecondToSubsecond+0x48>)
 8000a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a56:	f7ff fd13 	bl	8000480 <__aeabi_uldivmod>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return val;
 8000a62:	68bb      	ldr	r3, [r7, #8]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	f3af 8000 	nop.w
 8000a70:	3b9aca00 	.word	0x3b9aca00
 8000a74:	00000000 	.word	0x00000000

08000a78 <ethernetif_GetTxTimestamp>:

bool ethernetif_GetTxTimestamp(PtpTime_t* const timestamp, const TickType_t block_time)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  TxTimestampRecord_t record;

  if (xQueueReceive(timestamp_queue, &record, 0) != pdTRUE)
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <ethernetif_GetTxTimestamp+0x3c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f107 0108 	add.w	r1, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00b ff0b 	bl	800c8a8 <xQueueReceive>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d001      	beq.n	8000a9c <ethernetif_GetTxTimestamp+0x24>
  {
    return false;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e007      	b.n	8000aac <ethernetif_GetTxTimestamp+0x34>
  }

  memcpy((void*)timestamp, (void*)&record.timestamp, sizeof(TxTimestampRecord_t));
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f022 f96e 	bl	8022d86 <memcpy>
  return true;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000154 	.word	0x20000154

08000ab8 <ethernetif_SetTime>:

void ethernetif_SetTime(const PtpTime_t* ptp_time)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  EthHandle.Instance->MACSTSUR = ptp_time->tv_sec;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = NanosecondToSubsecond(ptp_time->tv_nsec);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ad4:	681c      	ldr	r4, [r3, #0]
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	f7ff ffa6 	bl	8000a28 <NanosecondToSubsecond>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f8c4 3b14 	str.w	r3, [r4, #2836]	@ 0xb14

  // This is a clock overwrite operation (as opposed to an offset), so we need to re-init
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0204 	orr.w	r2, r2, #4
 8000af2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // The Time stamp counter starts operation as soon as it is initialized
  // with the value written in the Time stamp update register.
  while (EthHandle.Instance->MACTSCR & ETH_MACTSCR_TSINIT)
 8000af6:	bf00      	nop
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f7      	bne.n	8000af8 <ethernetif_SetTime+0x40>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000168 	.word	0x20000168

08000b18 <ethernetif_GetTime>:

void ethernetif_GetTime(PtpTime_t* const ptp_time)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  // a 64-bit value, but it's possible the high 32-bits of the value
  // rolls over before we read the low 32-bits of the value.  To avoid
  // this situation we read the high 32-bits twice and determine which
  // high 32-bits the low 32-bit are associated with.
  __disable_irq();
  hi_reg = READ_REG(EthHandle.Instance->MACSTSR);
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	@ 0xb08
 8000b2c:	617b      	str	r3, [r7, #20]
  lo_reg = READ_REG(EthHandle.Instance->MACSTNR);
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	@ 0xb0c
 8000b36:	613b      	str	r3, [r7, #16]
  hi_reg_after = READ_REG(EthHandle.Instance->MACSTSR);
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	@ 0xb08
 8000b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b42:	b662      	cpsie	i
}
 8000b44:	bf00      	nop
  __enable_irq();

  // Did a roll over occur while reading?
  if (hi_reg != hi_reg_after)
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d006      	beq.n	8000b5c <ethernetif_GetTime+0x44>
  {
    // We now know a roll over occurred. If the rollover occured before
    // the reading of the low 32-bits we move the substitute the second
    // 32-bit high value for the first 32-bit high value.
    if (lo_reg < (INT_MAX / 2)) hi_reg = hi_reg_after;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8000b54:	4293      	cmp	r3, r2
 8000b56:	da01      	bge.n	8000b5c <ethernetif_GetTime+0x44>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	617b      	str	r3, [r7, #20]
  }

  // Now convert the raw registers values into timestamp values.
  ptp_time->tv_nsec = SubsecondToNanosecond(lo_reg);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff38 	bl	80009d4 <SubsecondToNanosecond>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	605a      	str	r2, [r3, #4]
  ptp_time->tv_sec = hi_reg;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000168 	.word	0x20000168

08000b80 <ethernetif_PtpFxAdjust>:

void ethernetif_PtpFxAdjust(const int32_t adjustment_ppb)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t addend;

  // Adjust the fixed base frequency by parts-per-billion.
  // addend = base + ((base * adjustment_ppb) / 1000000000);
  addend = PTP_ADDEND
    + (int32_t)((((int64_t) PTP_ADDEND) * adjustment_ppb) / 1000000000);
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	17c8      	asrs	r0, r1, #31
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4917      	ldr	r1, [pc, #92]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000b92:	fb01 f003 	mul.w	r0, r1, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	fb02 f101 	mul.w	r1, r2, r1
 8000b9c:	4401      	add	r1, r0
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000ba0:	fba2 4500 	umull	r4, r5, r2, r0
 8000ba4:	194b      	adds	r3, r1, r5
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000be8 <ethernetif_PtpFxAdjust+0x68>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	4620      	mov	r0, r4
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	f7ff fc15 	bl	80003e0 <__aeabi_ldivmod>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000bbc:	4413      	add	r3, r2
  addend = PTP_ADDEND
 8000bbe:	60fb      	str	r3, [r7, #12]

  // Set the time stamp addend register with new rate value and set ETH_MACTSCR_TSADDREG
  WRITE_REG(EthHandle.Instance->MACTSAR, addend);
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bdb0      	pop	{r4, r5, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	3b9aca00 	.word	0x3b9aca00
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	2e84b2f4 	.word	0x2e84b2f4
 8000bf4:	20000168 	.word	0x20000168

08000bf8 <InitMac1588v2>:

static void InitMac1588v2(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  // RM0468 Rev 3 2925/3357

  // 1. Mask the Timestamp Trigger interrupt by clearing bit 12 of Interrupt enable register (ETH_MACIER).
  //__HAL_ETH_MAC_DISABLE_IT(&EthHandle, ETH_MAC_TIMESTAMP_IT);
  CLEAR_BIT(EthHandle.Instance->MACIER, ETH_MACIER_TSIE);
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  // 2. Set bit 0 of Timestamp control Register (ETH_MACTSCR) to enable timestamping.
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENA);
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV6ENA);
  //CLEAR_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV4ENA);*/
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSVER2ENA);

  // 3. Program Subsecond increment register (ETH_MACSSIR) based on the PTP clock frequency.
  WRITE_REG(EthHandle.Instance->MACSSIR, 43 << 16);
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 122c 	mov.w	r2, #2818048	@ 0x2b0000
 8000c2c:	f8c3 2b04 	str.w	r2, [r3, #2820]	@ 0xb04

  // 4. If you use the Fine Correction method,
  // program Timestamp addend register (ETH_MACTSAR) and set bit 5 of Timestamp control Register (ETH_MACTSCR)
  WRITE_REG(EthHandle.Instance->MACTSAR, PTP_ADDEND);
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <InitMac1588v2+0xbc>)
 8000c36:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 5. Poll the Timestamp control Register (ETH_MACTSCR) until bit 5 is cleared.
  while (READ_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG))
 8000c4e:	bf00      	nop
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f7      	bne.n	8000c50 <InitMac1588v2+0x58>
  {
  }

  // 6. Program bit 1 of Timestamp control Register (ETH_MACTSCR) to select the Fine Update method (if required).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 0202 	orr.w	r2, r2, #2
 8000c70:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 7. Program System time seconds update register (ETH_MACSTSUR) and System time
  // nanoseconds update register (ETH_MACSTNUR) with the appropriate time value.
  EthHandle.Instance->MACSTSUR = 0;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = 0;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14

  // 8. Set bit 2 in Timestamp control Register (ETH_MACTSCR).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f042 0204 	orr.w	r2, r2, #4
 8000c98:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  EthHandle.IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <InitMac1588v2+0xb8>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000168 	.word	0x20000168
 8000cb4:	2e84b2f4 	.word	0x2e84b2f4

08000cb8 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b6      	sub	sp, #216	@ 0xd8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t duplex, speed = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  int32_t PHYLinkState = 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  ETH_MACConfigTypeDef MACConf = {0};
 8000ccc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000cd0:	2264      	movs	r2, #100	@ 0x64
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f021 ffb1 	bl	8022c3c <memset>
  ETH_DMAConfigTypeDef dma_config = {0};
 8000cda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cde:	2224      	movs	r2, #36	@ 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f021 ffaa 	bl	8022c3c <memset>
  ETH_MACFilterConfigTypeDef pFilterConfig = {0};
 8000ce8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000cf6:	4aa2      	ldr	r2, [pc, #648]	@ (8000f80 <low_level_init+0x2c8>)
 8000cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d00:	6018      	str	r0, [r3, #0]
 8000d02:	3304      	adds	r3, #4
 8000d04:	8019      	strh	r1, [r3, #0]
  osThreadAttr_t attributes;
  EthHandle.Instance = ETH;
 8000d06:	4b9f      	ldr	r3, [pc, #636]	@ (8000f84 <low_level_init+0x2cc>)
 8000d08:	4a9f      	ldr	r2, [pc, #636]	@ (8000f88 <low_level_init+0x2d0>)
 8000d0a:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000d0c:	4a9d      	ldr	r2, [pc, #628]	@ (8000f84 <low_level_init+0x2cc>)
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d14:	4b9b      	ldr	r3, [pc, #620]	@ (8000f84 <low_level_init+0x2cc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000d1a:	4b9a      	ldr	r3, [pc, #616]	@ (8000f84 <low_level_init+0x2cc>)
 8000d1c:	4a9b      	ldr	r2, [pc, #620]	@ (8000f8c <low_level_init+0x2d4>)
 8000d1e:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000d20:	4b98      	ldr	r3, [pc, #608]	@ (8000f84 <low_level_init+0x2cc>)
 8000d22:	4a9b      	ldr	r2, [pc, #620]	@ (8000f90 <low_level_init+0x2d8>)
 8000d24:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8000d26:	4b97      	ldr	r3, [pc, #604]	@ (8000f84 <low_level_init+0x2cc>)
 8000d28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d2c:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000d2e:	4895      	ldr	r0, [pc, #596]	@ (8000f84 <low_level_init+0x2cc>)
 8000d30:	f005 ff80 	bl	8006c34 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2206      	movs	r2, #6
 8000d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d72:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d7a:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35


  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000d86:	4883      	ldr	r0, [pc, #524]	@ (8000f94 <low_level_init+0x2dc>)
 8000d88:	f018 fee0 	bl	8019b4c <memp_init_pool>

  // Configure MAC filter
  pFilterConfig.PromiscuousMode = ENABLE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pFilterConfig.ReceiveAllMode = ENABLE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pFilterConfig.HachOrPerfectFilter = DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  pFilterConfig.HashUnicast = DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  pFilterConfig.HashMulticast = DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  pFilterConfig.PassAllMulticast = ENABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  pFilterConfig.SrcAddrFiltering = DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  pFilterConfig.SrcAddrInverseFiltering = DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  pFilterConfig.DestAddrInverseFiltering = DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pFilterConfig.BroadcastFilter = DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pFilterConfig.ControlPacketsFilter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_ETH_SetMACFilterConfig(&EthHandle, &pFilterConfig);
 8000dcc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	486c      	ldr	r0, [pc, #432]	@ (8000f84 <low_level_init+0x2cc>)
 8000dd4:	f006 ffd8 	bl	8007d88 <HAL_ETH_SetMACFilterConfig>

  InitMac1588v2();
 8000dd8:	f7ff ff0e 	bl	8000bf8 <InitMac1588v2>

  // Enable enhanced descriptors for timestamp reception
  dma_config.DMAArbitration = ETH_DMAARBITRATION_TX1_RX1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	647b      	str	r3, [r7, #68]	@ 0x44
  dma_config.AddressAlignedBeats = ENABLE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  dma_config.BurstMode = ETH_BURSTLENGTH_UNSPECIFIED;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  dma_config.RebuildINCRxBurst = ENABLE;  /// ???
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  dma_config.PBLx8Mode = DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  dma_config.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000df6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dfa:	657b      	str	r3, [r7, #84]	@ 0x54
  dma_config.SecondPacketOperate = ENABLE;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  dma_config.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000e02:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  dma_config.FlushRxPacket = ENABLE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  dma_config.TCPSegmentation = DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
  dma_config.MaximumSegmentSize = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_ETH_SetDMAConfig(&EthHandle, &dma_config);
 8000e18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4859      	ldr	r0, [pc, #356]	@ (8000f84 <low_level_init+0x2cc>)
 8000e20:	f006 ff48 	bl	8007cb4 <HAL_ETH_SetDMAConfig>


  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e24:	2238      	movs	r2, #56	@ 0x38
 8000e26:	2100      	movs	r1, #0
 8000e28:	485b      	ldr	r0, [pc, #364]	@ (8000f98 <low_level_init+0x2e0>)
 8000e2a:	f021 ff07 	bl	8022c3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f98 <low_level_init+0x2e0>)
 8000e30:	2221      	movs	r2, #33	@ 0x21
 8000e32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e34:	4b58      	ldr	r3, [pc, #352]	@ (8000f98 <low_level_init+0x2e0>)
 8000e36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e3c:	4b56      	ldr	r3, [pc, #344]	@ (8000f98 <low_level_init+0x2e0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2001      	movs	r0, #1
 8000e48:	f00e fbfc 	bl	800f644 <osSemaphoreNew>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a53      	ldr	r2, [pc, #332]	@ (8000f9c <low_level_init+0x2e4>)
 8000e50:	6013      	str	r3, [r2, #0]
  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2001      	movs	r0, #1
 8000e58:	f00e fbf4 	bl	800f644 <osSemaphoreNew>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a50      	ldr	r2, [pc, #320]	@ (8000fa0 <low_level_init+0x2e8>)
 8000e60:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2224      	movs	r2, #36	@ 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f021 fee6 	bl	8022c3c <memset>
  attributes.name = "EthIf";
 8000e70:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa4 <low_level_init+0x2ec>)
 8000e72:	60bb      	str	r3, [r7, #8]
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 8000e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e78:	61fb      	str	r3, [r7, #28]
  attributes.priority = osPriorityRealtime;
 8000e7a:	2330      	movs	r3, #48	@ 0x30
 8000e7c:	623b      	str	r3, [r7, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	461a      	mov	r2, r3
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4848      	ldr	r0, [pc, #288]	@ (8000fa8 <low_level_init+0x2f0>)
 8000e88:	f00e f9f3 	bl	800f272 <osThreadNew>

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000e8c:	4947      	ldr	r1, [pc, #284]	@ (8000fac <low_level_init+0x2f4>)
 8000e8e:	4848      	ldr	r0, [pc, #288]	@ (8000fb0 <low_level_init+0x2f8>)
 8000e90:	f005 fac8 	bl	8006424 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000e94:	4846      	ldr	r0, [pc, #280]	@ (8000fb0 <low_level_init+0x2f8>)
 8000e96:	f005 faf7 	bl	8006488 <LAN8742_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <low_level_init+0x1f6>
  {
    netif_set_link_down(netif);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f019 fa4f 	bl	801a344 <netif_set_link_down>
    netif_set_down(netif);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f019 f9e2 	bl	801a270 <netif_set_down>
 8000eac:	e065      	b.n	8000f7a <low_level_init+0x2c2>
    return;
  }

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000eae:	4840      	ldr	r0, [pc, #256]	@ (8000fb0 <low_level_init+0x2f8>)
 8000eb0:	f005 fb37 	bl	8006522 <LAN8742_GetLinkState>
 8000eb4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

  /* Get link state */
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	dc06      	bgt.n	8000ece <low_level_init+0x216>
  {
    netif_set_link_down(netif);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f019 fa3f 	bl	801a344 <netif_set_link_down>
    netif_set_down(netif);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f019 f9d2 	bl	801a270 <netif_set_down>
 8000ecc:	e055      	b.n	8000f7a <low_level_init+0x2c2>
  }
  else
  {
    switch (PHYLinkState)
 8000ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d82b      	bhi.n	8000f30 <low_level_init+0x278>
 8000ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee0 <low_level_init+0x228>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08000f03 	.word	0x08000f03
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f23 	.word	0x08000f23
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000ef8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f00:	e01f      	b.n	8000f42 <low_level_init+0x28a>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f10:	e017      	b.n	8000f42 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f20:	e00f      	b.n	8000f42 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f2e:	e008      	b.n	8000f42 <low_level_init+0x28a>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8000f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f40:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000f42:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f46:	4619      	mov	r1, r3
 8000f48:	480e      	ldr	r0, [pc, #56]	@ (8000f84 <low_level_init+0x2cc>)
 8000f4a:	f006 fcc5 	bl	80078d8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8000f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    MACConf.Speed = speed;
 8000f56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000f5c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f60:	4619      	mov	r1, r3
 8000f62:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <low_level_init+0x2cc>)
 8000f64:	f006 fe8c 	bl	8007c80 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000f68:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <low_level_init+0x2cc>)
 8000f6a:	f005 ff61 	bl	8006e30 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f019 f908 	bl	801a184 <netif_set_up>
    netif_set_link_up(netif);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f019 f9ad 	bl	801a2d4 <netif_set_link_up>
  }
}
 8000f7a:	37d8      	adds	r7, #216	@ 0xd8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08023bf8 	.word	0x08023bf8
 8000f84:	20000168 	.word	0x20000168
 8000f88:	40028000 	.word	0x40028000
 8000f8c:	30000000 	.word	0x30000000
 8000f90:	30000200 	.word	0x30000200
 8000f94:	0802851c 	.word	0x0802851c
 8000f98:	20000230 	.word	0x20000230
 8000f9c:	20000160 	.word	0x20000160
 8000fa0:	20000164 	.word	0x20000164
 8000fa4:	08023bf0 	.word	0x08023bf0
 8000fa8:	08001189 	.word	0x08001189
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000268 	.word	0x20000268

08000fb4 <low_level_output>:
 *
 * @note ERR_OK means the packet was sent (but not necessarily transmit complete),
 * and ERR_IF means the packet has more chained buffers than what the interface supports.
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	@ 0x50
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  struct pbuf *q = NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  err_t errval = ERR_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  TxTimestampRecord_t new_timestamp_record;
  bool is_timestamp_requested = false;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (p->timestamp_sec == PTP_TIMESTAMP_RECORD_MAGIC)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001140 <low_level_output+0x18c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d102      	bne.n	8000fe2 <low_level_output+0x2e>
  {
    is_timestamp_requested = true;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2230      	movs	r2, #48	@ 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f021 fe26 	bl	8022c3c <memset>

  for(q = p; q != NULL; q = q->next)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ff4:	e045      	b.n	8001082 <low_level_output+0xce>
  {
    if(i >= ETH_TX_DESC_CNT)
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d902      	bls.n	8001002 <low_level_output+0x4e>
      return ERR_IF;
 8000ffc:	f06f 030b 	mvn.w	r3, #11
 8001000:	e09a      	b.n	8001138 <low_level_output+0x184>

    Txbuffer[i].buffer = q->payload;
 8001002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	3350      	adds	r3, #80	@ 0x50
 8001012:	443b      	add	r3, r7
 8001014:	3b3c      	subs	r3, #60	@ 0x3c
 8001016:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800101a:	895b      	ldrh	r3, [r3, #10]
 800101c:	4619      	mov	r1, r3
 800101e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	3350      	adds	r3, #80	@ 0x50
 800102a:	443b      	add	r3, r7
 800102c:	3b38      	subs	r3, #56	@ 0x38
 800102e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d011      	beq.n	800105a <low_level_output+0xa6>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	f107 0014 	add.w	r0, r7, #20
 800103e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001040:	460b      	mov	r3, r1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	440b      	add	r3, r1
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	18c1      	adds	r1, r0, r3
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	3350      	adds	r3, #80	@ 0x50
 8001054:	443b      	add	r3, r7
 8001056:	3b34      	subs	r3, #52	@ 0x34
 8001058:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800105a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <low_level_output+0xc2>
    {
      Txbuffer[i].next = NULL;
 8001062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	3350      	adds	r3, #80	@ 0x50
 800106e:	443b      	add	r3, r7
 8001070:	3b34      	subs	r3, #52	@ 0x34
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001078:	3301      	adds	r3, #1
 800107a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for(q = p; q != NULL; q = q->next)
 800107c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1b6      	bne.n	8000ff6 <low_level_output+0x42>
  }

  TxConfig.Length = p->tot_len;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	891b      	ldrh	r3, [r3, #8]
 800108c:	461a      	mov	r2, r3
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <low_level_output+0x190>)
 8001090:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8001092:	4a2c      	ldr	r2, [pc, #176]	@ (8001144 <low_level_output+0x190>)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800109a:	4a2a      	ldr	r2, [pc, #168]	@ (8001144 <low_level_output+0x190>)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f019 fe05 	bl	801acb0 <pbuf_ref>

  do
  {
    HAL_ETH_PTP_InsertTxTimestamp(&EthHandle);
 80010a6:	4828      	ldr	r0, [pc, #160]	@ (8001148 <low_level_output+0x194>)
 80010a8:	f006 fa11 	bl	80074ce <HAL_ETH_PTP_InsertTxTimestamp>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 80010ac:	4925      	ldr	r1, [pc, #148]	@ (8001144 <low_level_output+0x190>)
 80010ae:	4826      	ldr	r0, [pc, #152]	@ (8001148 <low_level_output+0x194>)
 80010b0:	f005 ffaa 	bl	8007008 <HAL_ETH_Transmit_IT>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d11b      	bne.n	80010f2 <low_level_output+0x13e>
    {
      if (is_timestamp_requested)
 80010ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d013      	beq.n	80010ea <low_level_output+0x136>
      {
        new_timestamp_record.timestamp.tv_sec = EthHandle.TxTimestamp.TimeStampHigh;
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <low_level_output+0x194>)
 80010c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010c8:	60fb      	str	r3, [r7, #12]
        new_timestamp_record.timestamp.tv_nsec = SubsecondToNanosecond(EthHandle.TxTimestamp.TimeStampLow);
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <low_level_output+0x194>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fc7f 	bl	80009d4 <SubsecondToNanosecond>
 80010d6:	4603      	mov	r3, r0
 80010d8:	613b      	str	r3, [r7, #16]
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <low_level_output+0x198>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f107 010c 	add.w	r1, r7, #12
 80010e2:	2302      	movs	r3, #2
 80010e4:	2200      	movs	r2, #0
 80010e6:	f00b f9af 	bl	800c448 <xQueueGenericSend>
      }

      errval = ERR_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80010f0:	e01b      	b.n	800112a <low_level_output+0x176>
    }
    else
    {

      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 80010f2:	4815      	ldr	r0, [pc, #84]	@ (8001148 <low_level_output+0x194>)
 80010f4:	f006 fe94 	bl	8007e20 <HAL_ETH_GetError>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <low_level_output+0x16a>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <low_level_output+0x19c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800110a:	4618      	mov	r0, r3
 800110c:	f00e fb24 	bl	800f758 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <low_level_output+0x194>)
 8001112:	f006 f912 	bl	800733a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8001116:	23fe      	movs	r3, #254	@ 0xfe
 8001118:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800111c:	e005      	b.n	800112a <low_level_output+0x176>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800111e:	6838      	ldr	r0, [r7, #0]
 8001120:	f019 fd20 	bl	801ab64 <pbuf_free>
        errval =  ERR_IF;
 8001124:	23f4      	movs	r3, #244	@ 0xf4
 8001126:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }while(errval == ERR_BUF);
 800112a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800112e:	f113 0f02 	cmn.w	r3, #2
 8001132:	d0b8      	beq.n	80010a6 <low_level_output+0xf2>



  return errval;
 8001134:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001138:	4618      	mov	r0, r3
 800113a:	3750      	adds	r7, #80	@ 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	55667788 	.word	0x55667788
 8001144:	20000230 	.word	0x20000230
 8001148:	20000168 	.word	0x20000168
 800114c:	20000154 	.word	0x20000154
 8001150:	20000164 	.word	0x20000164

08001154 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <low_level_input+0x2c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <low_level_input+0x30>)
 8001170:	f005 ff9b 	bl	80070aa <HAL_ETH_ReadData>
  }

  return p;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000015c 	.word	0x2000015c
 8001184:	20000168 	.word	0x20000168

08001188 <ethernetif_input>:
 * from the interface.
 *
 * @param argument the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void* argument )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  struct netif *netif = (struct netif *) argument;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	613b      	str	r3, [r7, #16]
  ETH_TimeStampTypeDef eth_timestamp;

  for( ;; )
  {
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <ethernetif_input+0x70>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e fad9 	bl	800f758 <osSemaphoreAcquire>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f5      	bne.n	8001198 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80011ac:	6938      	ldr	r0, [r7, #16]
 80011ae:	f7ff ffd1 	bl	8001154 <low_level_input>
 80011b2:	6178      	str	r0, [r7, #20]
        if (p != NULL)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01a      	beq.n	80011f0 <ethernetif_input+0x68>
        {
          // Collect the timestamp of the new packet
          HAL_ETH_PTP_GetRxTimestamp(&EthHandle, &eth_timestamp);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	480e      	ldr	r0, [pc, #56]	@ (80011fc <ethernetif_input+0x74>)
 80011c2:	f006 f9a7 	bl	8007514 <HAL_ETH_PTP_GetRxTimestamp>
          p->timestamp_sec = eth_timestamp.TimeStampHigh;
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	611a      	str	r2, [r3, #16]
          p->timestamp_nsec = SubsecondToNanosecond(eth_timestamp.TimeStampLow);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fc00 	bl	80009d4 <SubsecondToNanosecond>
 80011d4:	4602      	mov	r2, r0
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	615a      	str	r2, [r3, #20]

          if (netif->input( p, netif) != ERR_OK )
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	6939      	ldr	r1, [r7, #16]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	4798      	blx	r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <ethernetif_input+0x68>
          {
            pbuf_free(p);
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f019 fcba 	bl	801ab64 <pbuf_free>
          }
        }

      }while(p!=NULL);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1da      	bne.n	80011ac <ethernetif_input+0x24>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80011f6:	e7cf      	b.n	8001198 <ethernetif_input+0x10>
 80011f8:	20000160 	.word	0x20000160
 80011fc:	20000168 	.word	0x20000168

08001200 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <ethernetif_init+0x1c>
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <ethernetif_init+0x48>)
 8001210:	f240 227d 	movw	r2, #637	@ 0x27d
 8001214:	490d      	ldr	r1, [pc, #52]	@ (800124c <ethernetif_init+0x4c>)
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <ethernetif_init+0x50>)
 8001218:	f021 fb7e 	bl	8022918 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2273      	movs	r2, #115	@ 0x73
 8001220:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2274      	movs	r2, #116	@ 0x74
 8001228:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <ethernetif_init+0x54>)
 8001230:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <ethernetif_init+0x58>)
 8001236:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fd3d 	bl	8000cb8 <low_level_init>

  return ERR_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08023c00 	.word	0x08023c00
 800124c:	08023c58 	.word	0x08023c58
 8001250:	08023c68 	.word	0x08023c68
 8001254:	08016965 	.word	0x08016965
 8001258:	08000fb5 	.word	0x08000fb5

0800125c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	4809      	ldr	r0, [pc, #36]	@ (8001290 <pbuf_free_custom+0x34>)
 800126c:	f018 fd5e 	bl	8019d2c <memp_free_pool>

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <pbuf_free_custom+0x38>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <pbuf_free_custom+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <pbuf_free_custom+0x3c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f00e faba 	bl	800f7fc <osSemaphoreRelease>
  }
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0802851c 	.word	0x0802851c
 8001294:	2000015c 	.word	0x2000015c
 8001298:	20000160 	.word	0x20000160

0800129c <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012a0:	f005 fb40 	bl	8006924 <HAL_GetTick>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /* Ethernett MSP init: RMII Mode */

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b48      	ldr	r3, [pc, #288]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f2:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	4a3f      	ldr	r2, [pc, #252]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001310:	4b3c      	ldr	r3, [pc, #240]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800131e:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001324:	4a37      	ldr	r2, [pc, #220]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800133c:	2302      	movs	r3, #2
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8001348:	230b      	movs	r3, #11
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800134c:	2386      	movs	r3, #134	@ 0x86
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	482c      	ldr	r0, [pc, #176]	@ (8001408 <HAL_ETH_MspInit+0x15c>)
 8001358:	f007 fafe 	bl	8008958 <HAL_GPIO_Init>

  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800135c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4828      	ldr	r0, [pc, #160]	@ (800140c <HAL_ETH_MspInit+0x160>)
 800136a:	f007 faf5 	bl	8008958 <HAL_GPIO_Init>

  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800136e:	2332      	movs	r3, #50	@ 0x32
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4825      	ldr	r0, [pc, #148]	@ (8001410 <HAL_ETH_MspInit+0x164>)
 800137a:	f007 faed 	bl	8008958 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800137e:	f642 0304 	movw	r3, #10244	@ 0x2804
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4822      	ldr	r0, [pc, #136]	@ (8001414 <HAL_ETH_MspInit+0x168>)
 800138c:	f007 fae4 	bl	8008958 <HAL_GPIO_Init>

  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2107      	movs	r1, #7
 8001394:	203d      	movs	r0, #61	@ 0x3d
 8001396:	f005 fbad 	bl	8006af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800139a:	203d      	movs	r0, #61	@ 0x3d
 800139c:	f005 fbc4 	bl	8006b28 <HAL_NVIC_EnableIRQ>

  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013a6:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_ETH_MspInit+0x158>)
 80013ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
}
 80013fa:	bf00      	nop
 80013fc:	3738      	adds	r7, #56	@ 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58024400 	.word	0x58024400
 8001408:	58020000 	.word	0x58020000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800
 8001414:	58021800 	.word	0x58021800

08001418 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <HAL_ETH_RxCpltCallback+0x1c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f00e f9e9 	bl	800f7fc <osSemaphoreRelease>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000160 	.word	0x20000160

08001438 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <HAL_ETH_TxCpltCallback+0x1c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f00e f9d9 	bl	800f7fc <osSemaphoreRelease>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000164 	.word	0x20000164

08001458 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f006 fcea 	bl	8007e3a <HAL_ETH_GetDMAError>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146c:	2b80      	cmp	r3, #128	@ 0x80
 800146e:	d104      	bne.n	800147a <HAL_ETH_ErrorCallback+0x22>
  {
    osSemaphoreRelease(RxPktSemaphore);
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_ETH_ErrorCallback+0x44>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f00e f9c1 	bl	800f7fc <osSemaphoreRelease>
  }

  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_TBU) == ETH_DMACSR_TBU)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f006 fcdd 	bl	8007e3a <HAL_ETH_GetDMAError>
 8001480:	4603      	mov	r3, r0
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b04      	cmp	r3, #4
 8001488:	d104      	bne.n	8001494 <HAL_ETH_ErrorCallback+0x3c>
  {
    osSemaphoreRelease(TxPktSemaphore);
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_ETH_ErrorCallback+0x48>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f00e f9b4 	bl	800f7fc <osSemaphoreRelease>
  }
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000160 	.word	0x20000160
 80014a0:	20000164 	.word	0x20000164

080014a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <ETH_PHY_IO_Init+0x10>)
 80014aa:	f006 fc1d 	bl	8007ce8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000168 	.word	0x20000168

080014b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <ETH_PHY_IO_ReadReg+0x30>)
 80014dc:	f006 f954 	bl	8007788 <HAL_ETH_ReadPHYRegister>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e000      	b.n	80014ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000168 	.word	0x20000168

080014fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4807      	ldr	r0, [pc, #28]	@ (800152c <ETH_PHY_IO_WriteReg+0x30>)
 8001510:	f006 f98e 	bl	8007830 <HAL_ETH_WritePHYRegister>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e000      	b.n	8001522 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000168 	.word	0x20000168

08001530 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001534:	f005 f9f6 	bl	8006924 <HAL_GetTick>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0a0      	sub	sp, #128	@ 0x80
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	2264      	movs	r2, #100	@ 0x64
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f021 fb73 	bl	8022c3c <memset>
  int32_t PHYLinkState = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800155e:	2300      	movs	r3, #0
 8001560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001562:	2300      	movs	r3, #0
 8001564:	677b      	str	r3, [r7, #116]	@ 0x74
  struct netif *netif = (struct netif *) argument;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	66fb      	str	r3, [r7, #108]	@ 0x6c

  for(;;)
  {

    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800156a:	483e      	ldr	r0, [pc, #248]	@ (8001664 <ethernet_link_thread+0x124>)
 800156c:	f004 ffd9 	bl	8006522 <LAN8742_GetLinkState>
 8001570:	6738      	str	r0, [r7, #112]	@ 0x70

    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d010      	beq.n	80015a6 <ethernet_link_thread+0x66>
 8001584:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001586:	2b01      	cmp	r3, #1
 8001588:	dc0d      	bgt.n	80015a6 <ethernet_link_thread+0x66>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 800158a:	4837      	ldr	r0, [pc, #220]	@ (8001668 <ethernet_link_thread+0x128>)
 800158c:	f005 fcc4 	bl	8006f18 <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 8001590:	2200      	movs	r2, #0
 8001592:	4936      	ldr	r1, [pc, #216]	@ (800166c <ethernet_link_thread+0x12c>)
 8001594:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001596:	f00f f803 	bl	80105a0 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 800159a:	2200      	movs	r2, #0
 800159c:	4934      	ldr	r1, [pc, #208]	@ (8001670 <ethernet_link_thread+0x130>)
 800159e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015a0:	f00e fffe 	bl	80105a0 <netifapi_netif_common>
 80015a4:	e059      	b.n	800165a <ethernet_link_thread+0x11a>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80015a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d152      	bne.n	800165a <ethernet_link_thread+0x11a>
 80015b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	dd4f      	ble.n	800165a <ethernet_link_thread+0x11a>
    {
      switch (PHYLinkState)
 80015ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015bc:	3b02      	subs	r3, #2
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d82a      	bhi.n	8001618 <ethernet_link_thread+0xd8>
 80015c2:	a201      	add	r2, pc, #4	@ (adr r2, 80015c8 <ethernet_link_thread+0x88>)
 80015c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c8:	080015d9 	.word	0x080015d9
 80015cc:	080015eb 	.word	0x080015eb
 80015d0:	080015fb 	.word	0x080015fb
 80015d4:	0800160b 	.word	0x0800160b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80015d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015dc:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 80015de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e2:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 80015e8:	e017      	b.n	800161a <ethernet_link_thread+0xda>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 80015ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015f2:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 80015f8:	e00f      	b.n	800161a <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80015fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fe:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 8001600:	2300      	movs	r3, #0
 8001602:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 8001608:	e007      	b.n	800161a <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800160a:	2300      	movs	r3, #0
 800160c:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 800160e:	2300      	movs	r3, #0
 8001610:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 8001616:	e000      	b.n	800161a <ethernet_link_thread+0xda>
      default:
        break;
 8001618:	bf00      	nop
      }

      if(linkchanged)
 800161a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01c      	beq.n	800165a <ethernet_link_thread+0x11a>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	@ (8001668 <ethernet_link_thread+0x128>)
 8001628:	f006 f956 	bl	80078d8 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 800162c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800162e:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8001630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001632:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <ethernet_link_thread+0x128>)
 800163c:	f006 fb20 	bl	8007c80 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8001640:	4809      	ldr	r0, [pc, #36]	@ (8001668 <ethernet_link_thread+0x128>)
 8001642:	f005 fbf5 	bl	8006e30 <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 8001646:	2200      	movs	r2, #0
 8001648:	490a      	ldr	r1, [pc, #40]	@ (8001674 <ethernet_link_thread+0x134>)
 800164a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800164c:	f00e ffa8 	bl	80105a0 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8001650:	2200      	movs	r2, #0
 8001652:	4909      	ldr	r1, [pc, #36]	@ (8001678 <ethernet_link_thread+0x138>)
 8001654:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001656:	f00e ffa3 	bl	80105a0 <netifapi_netif_common>
      }
    }

    osDelay(100);
 800165a:	2064      	movs	r0, #100	@ 0x64
 800165c:	f00d fec9 	bl	800f3f2 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001660:	e783      	b.n	800156a <ethernet_link_thread+0x2a>
 8001662:	bf00      	nop
 8001664:	20000268 	.word	0x20000268
 8001668:	20000168 	.word	0x20000168
 800166c:	0801a271 	.word	0x0801a271
 8001670:	0801a345 	.word	0x0801a345
 8001674:	0801a185 	.word	0x0801a185
 8001678:	0801a2d5 	.word	0x0801a2d5

0800167c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001684:	4812      	ldr	r0, [pc, #72]	@ (80016d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8001686:	f018 fadd 	bl	8019c44 <memp_malloc_pool>
 800168a:	60f8      	str	r0, [r7, #12]
  if (p)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d014      	beq.n	80016bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f103 0220 	add.w	r2, r3, #32
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80016a0:	619a      	str	r2, [r3, #24]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2241      	movs	r2, #65	@ 0x41
 80016b2:	2100      	movs	r1, #0
 80016b4:	2000      	movs	r0, #0
 80016b6:	f019 f869 	bl	801a78c <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 80016ba:	e005      	b.n	80016c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0802851c 	.word	0x0802851c
 80016d4:	0800125d 	.word	0x0800125d
 80016d8:	2000015c 	.word	0x2000015c

080016dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08d      	sub	sp, #52	@ 0x34
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3b20      	subs	r3, #32
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001704:	2200      	movs	r2, #0
 8001706:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e003      	b.n	8001726 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001724:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800172a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800172c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001732:	e009      	b.n	8001748 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001736:	891a      	ldrh	r2, [r3, #8]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4413      	add	r3, r2
 800173c:	b29a      	uxth	r2, r3
 800173e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001740:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	623a      	str	r2, [r7, #32]
 8001754:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd1d      	ble.n	8001798 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f003 021f 	and.w	r2, r3, #31
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001772:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <HAL_ETH_RxLinkCallback+0xcc>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3320      	adds	r3, #32
 800177e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3b20      	subs	r3, #32
 8001784:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dcf2      	bgt.n	8001772 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
}
 8001790:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001792:	f3bf 8f6f 	isb	sy
}
 8001796:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001798:	bf00      	nop
}
 800179a:	bf00      	nop
 800179c:	3734      	adds	r7, #52	@ 0x34
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  pbuf_free((struct pbuf *)buff);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f019 f9d5 	bl	801ab64 <pbuf_free>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: connection socket 
  * @retval None
  */
void http_server_serve(int conn) 
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80017d0:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80017d4:	6018      	str	r0, [r3, #0]
  int buflen = 1500;
 80017d6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017da:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
  int ret;
  struct fs_file file;
  unsigned char recv_buffer[1500];
				
  /* Read in the request */
  ret = read(conn, recv_buffer, buflen); 
 80017de:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80017ea:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f012 f888 	bl	8013904 <lwip_read>
 80017f4:	f8c7 05f8 	str.w	r0, [r7, #1528]	@ 0x5f8
  if(ret < 0) return;
 80017f8:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	@ 0x5f8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f2c0 80c3 	blt.w	8001988 <http_server_serve+0x1c4>

  /* Check if request to get ST.gif */
  if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/ST.gif",27)==0)
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	221b      	movs	r2, #27
 8001808:	4962      	ldr	r1, [pc, #392]	@ (8001994 <http_server_serve+0x1d0>)
 800180a:	4618      	mov	r0, r3
 800180c:	f021 fa2d 	bl	8022c6a <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d117      	bne.n	8001846 <http_server_serve+0x82>
  {
    fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8001816:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800181a:	495f      	ldr	r1, [pc, #380]	@ (8001998 <http_server_serve+0x1d4>)
 800181c:	4618      	mov	r0, r3
 800181e:	f020 ff33 	bl	8022688 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001822:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 8001826:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800182a:	461a      	mov	r2, r3
 800182c:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001830:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	f012 f9e9 	bl	8013c0c <lwip_write>
    fs_close(&file);
 800183a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800183e:	4618      	mov	r0, r3
 8001840:	f020 ff60 	bl	8022704 <fs_close>
 8001844:	e098      	b.n	8001978 <http_server_serve+0x1b4>
  }
  /* Check if request to get stm32.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	221e      	movs	r2, #30
 800184c:	4953      	ldr	r1, [pc, #332]	@ (800199c <http_server_serve+0x1d8>)
 800184e:	4618      	mov	r0, r3
 8001850:	f021 fa0b 	bl	8022c6a <strncmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d117      	bne.n	800188a <http_server_serve+0xc6>
  {
    fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 800185a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800185e:	4950      	ldr	r1, [pc, #320]	@ (80019a0 <http_server_serve+0x1dc>)
 8001860:	4618      	mov	r0, r3
 8001862:	f020 ff11 	bl	8022688 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001866:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800186a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800186e:	461a      	mov	r2, r3
 8001870:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001874:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f012 f9c7 	bl	8013c0c <lwip_write>
    fs_close(&file);
 800187e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001882:	4618      	mov	r0, r3
 8001884:	f020 ff3e 	bl	8022704 <fs_close>
 8001888:	e076      	b.n	8001978 <http_server_serve+0x1b4>
  }
  /* Check if request to get ST logo.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	221d      	movs	r2, #29
 8001890:	4944      	ldr	r1, [pc, #272]	@ (80019a4 <http_server_serve+0x1e0>)
 8001892:	4618      	mov	r0, r3
 8001894:	f021 f9e9 	bl	8022c6a <strncmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d117      	bne.n	80018ce <http_server_serve+0x10a>
  {
    fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 800189e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80018a2:	4941      	ldr	r1, [pc, #260]	@ (80019a8 <http_server_serve+0x1e4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f020 feef 	bl	8022688 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 80018aa:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80018ae:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80018b2:	461a      	mov	r2, r3
 80018b4:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80018b8:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f012 f9a5 	bl	8013c0c <lwip_write>
    fs_close(&file);
 80018c2:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80018c6:	4618      	mov	r0, r3
 80018c8:	f020 ff1c 	bl	8022704 <fs_close>
 80018cc:	e054      	b.n	8001978 <http_server_serve+0x1b4>
  }
  else if(strncmp((char *)recv_buffer, "GET /STM32H7xxTASKS.html", 24) == 0)
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2218      	movs	r2, #24
 80018d4:	4935      	ldr	r1, [pc, #212]	@ (80019ac <http_server_serve+0x1e8>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f021 f9c7 	bl	8022c6a <strncmp>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <http_server_serve+0x12e>
  {
    /* Load dynamic page */
    DynWebPage(conn);
 80018e2:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80018e6:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f000 f8b6 	bl	8001a5c <DynWebPage>
 80018f0:	e042      	b.n	8001978 <http_server_serve+0x1b4>
  }
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2213      	movs	r2, #19
 80018f8:	492d      	ldr	r1, [pc, #180]	@ (80019b0 <http_server_serve+0x1ec>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f021 f9b5 	bl	8022c6a <strncmp>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <http_server_serve+0x156>
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	2206      	movs	r2, #6
 800190c:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <http_server_serve+0x1f0>)
 800190e:	4618      	mov	r0, r3
 8001910:	f021 f9ab 	bl	8022c6a <strncmp>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d117      	bne.n	800194a <http_server_serve+0x186>
  {
    /* Load STM32H7xxpage */
    fs_open(&file, "/STM32H7xx.html"); 
 800191a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800191e:	4926      	ldr	r1, [pc, #152]	@ (80019b8 <http_server_serve+0x1f4>)
 8001920:	4618      	mov	r0, r3
 8001922:	f020 feb1 	bl	8022688 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001926:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800192a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800192e:	461a      	mov	r2, r3
 8001930:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001934:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f012 f967 	bl	8013c0c <lwip_write>
    fs_close(&file);
 800193e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001942:	4618      	mov	r0, r3
 8001944:	f020 fede 	bl	8022704 <fs_close>
 8001948:	e016      	b.n	8001978 <http_server_serve+0x1b4>
  }
  else
  {
    /* Load 404 page */
    fs_open(&file, "/404.html");
 800194a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800194e:	491b      	ldr	r1, [pc, #108]	@ (80019bc <http_server_serve+0x1f8>)
 8001950:	4618      	mov	r0, r3
 8001952:	f020 fe99 	bl	8022688 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001956:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800195a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800195e:	461a      	mov	r2, r3
 8001960:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001964:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f012 f94f 	bl	8013c0c <lwip_write>
    fs_close(&file);
 800196e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001972:	4618      	mov	r0, r3
 8001974:	f020 fec6 	bl	8022704 <fs_close>
  }
  /* Close connection socket */
  close(conn);
 8001978:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800197c:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f011 fbfb 	bl	801317c <lwip_close>
 8001986:	e000      	b.n	800198a <http_server_serve+0x1c6>
  if(ret < 0) return;
 8001988:	bf00      	nop
}
 800198a:	f507 67c0 	add.w	r7, r7, #1536	@ 0x600
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08023c90 	.word	0x08023c90
 8001998:	08023cac 	.word	0x08023cac
 800199c:	08023cc4 	.word	0x08023cc4
 80019a0:	08023ce4 	.word	0x08023ce4
 80019a4:	08023d00 	.word	0x08023d00
 80019a8:	08023d20 	.word	0x08023d20
 80019ac:	08023d3c 	.word	0x08023d3c
 80019b0:	08023d58 	.word	0x08023d58
 80019b4:	08023d6c 	.word	0x08023d6c
 80019b8:	08023d74 	.word	0x08023d74
 80019bc:	08023d84 	.word	0x08023d84

080019c0 <http_server_socket_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_socket_thread(void *arg)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	@ 0x38
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  int sock, newconn, size;
  struct sockaddr_in address, remotehost;

 /* create a TCP socket */
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 80019c8:	2200      	movs	r2, #0
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f012 f8bf 	bl	8013b50 <lwip_socket>
 80019d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db26      	blt.n	8001a28 <http_server_socket_thread+0x68>
  {
    return;
  }
  
  /* bind to port 80 at any interface */
  address.sin_family = AF_INET;
 80019da:	2302      	movs	r3, #2
 80019dc:	777b      	strb	r3, [r7, #29]
  address.sin_port = htons(80);
 80019de:	2050      	movs	r0, #80	@ 0x50
 80019e0:	f017 fc0e 	bl	8019200 <lwip_htons>
 80019e4:	4603      	mov	r3, r0
 80019e6:	83fb      	strh	r3, [r7, #30]
  address.sin_addr.s_addr = INADDR_ANY;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]

  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2210      	movs	r2, #16
 80019f2:	4619      	mov	r1, r3
 80019f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019f6:	f011 fb53 	bl	80130a0 <lwip_bind>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db15      	blt.n	8001a2c <http_server_socket_thread+0x6c>
  {
    return;
  }
  
  /* listen for incoming connections (TCP listen backlog = 5) */
  listen(sock, 5);
 8001a00:	2105      	movs	r1, #5
 8001a02:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a04:	f011 fc14 	bl	8013230 <lwip_listen>
  
  size = sizeof(remotehost);
 8001a08:	2310      	movs	r3, #16
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  while (1) 
  {
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001a0c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a18:	f011 fa24 	bl	8012e64 <lwip_accept>
 8001a1c:	6338      	str	r0, [r7, #48]	@ 0x30
    http_server_serve(newconn);
 8001a1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a20:	f7ff fed0 	bl	80017c4 <http_server_serve>
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001a24:	bf00      	nop
 8001a26:	e7f1      	b.n	8001a0c <http_server_socket_thread+0x4c>
    return;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <http_server_socket_thread+0x6e>
    return;
 8001a2c:	bf00      	nop
  }
}
 8001a2e:	3738      	adds	r7, #56	@ 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a42:	2200      	movs	r2, #0
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <http_server_socket_init+0x20>)
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <http_server_socket_init+0x24>)
 8001a48:	f020 fde0 	bl	802260c <sys_thread_new>
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	080019c1 	.word	0x080019c1
 8001a58:	08023d90 	.word	0x08023d90

08001a5c <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a68:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a6c:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001a6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f021 f8d5 	bl	8022c3c <memset>

  /* Update the hit count */
  nPageHits++;
 8001a92:	4b5b      	ldr	r3, [pc, #364]	@ (8001c00 <DynWebPage+0x1a4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a59      	ldr	r2, [pc, #356]	@ (8001c00 <DynWebPage+0x1a4>)
 8001a9a:	6013      	str	r3, [r2, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8001a9c:	4b58      	ldr	r3, [pc, #352]	@ (8001c00 <DynWebPage+0x1a4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4957      	ldr	r1, [pc, #348]	@ (8001c04 <DynWebPage+0x1a8>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f020 ffa5 	bl	80229f8 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001aae:	f107 020c 	add.w	r2, r7, #12
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f021 f8c7 	bl	8022c4c <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fc2e 	bl	8000324 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a4d      	ldr	r2, [pc, #308]	@ (8001c08 <DynWebPage+0x1ac>)
 8001ad4:	4615      	mov	r5, r2
 8001ad6:	469c      	mov	ip, r3
 8001ad8:	f105 0e20 	add.w	lr, r5, #32
 8001adc:	4664      	mov	r4, ip
 8001ade:	462e      	mov	r6, r5
 8001ae0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ae2:	6020      	str	r0, [r4, #0]
 8001ae4:	6061      	str	r1, [r4, #4]
 8001ae6:	60a2      	str	r2, [r4, #8]
 8001ae8:	60e3      	str	r3, [r4, #12]
 8001aea:	3510      	adds	r5, #16
 8001aec:	f10c 0c10 	add.w	ip, ip, #16
 8001af0:	4575      	cmp	r5, lr
 8001af2:	d1f3      	bne.n	8001adc <DynWebPage+0x80>
 8001af4:	4664      	mov	r4, ip
 8001af6:	462b      	mov	r3, r5
 8001af8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001afa:	6020      	str	r0, [r4, #0]
 8001afc:	6061      	str	r1, [r4, #4]
 8001afe:	60a2      	str	r2, [r4, #8]
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	789b      	ldrb	r3, [r3, #2]
 8001b04:	81a2      	strh	r2, [r4, #12]
 8001b06:	73a3      	strb	r3, [r4, #14]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 8001b08:	f107 0318 	add.w	r3, r7, #24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc09 	bl	8000324 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c0c <DynWebPage+0x1b0>)
 8001b1e:	4614      	mov	r4, r2
 8001b20:	469c      	mov	ip, r3
 8001b22:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b26:	4665      	mov	r5, ip
 8001b28:	4626      	mov	r6, r4
 8001b2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b2c:	6028      	str	r0, [r5, #0]
 8001b2e:	6069      	str	r1, [r5, #4]
 8001b30:	60aa      	str	r2, [r5, #8]
 8001b32:	60eb      	str	r3, [r5, #12]
 8001b34:	3410      	adds	r4, #16
 8001b36:	f10c 0c10 	add.w	ip, ip, #16
 8001b3a:	4574      	cmp	r4, lr
 8001b3c:	d1f3      	bne.n	8001b26 <DynWebPage+0xca>
 8001b3e:	4663      	mov	r3, ip
 8001b40:	4622      	mov	r2, r4
 8001b42:	6810      	ldr	r0, [r2, #0]
 8001b44:	6018      	str	r0, [r3, #0]
 8001b46:	7912      	ldrb	r2, [r2, #4]
 8001b48:	711a      	strb	r2, [r3, #4]
    
  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbe8 	bl	8000324 <strlen>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00c fdf5 	bl	800e74c <vTaskList>
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fbdc 	bl	8000324 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4413      	add	r3, r2
 8001b76:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <DynWebPage+0x1b4>)
 8001b78:	4614      	mov	r4, r2
 8001b7a:	469c      	mov	ip, r3
 8001b7c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b80:	4665      	mov	r5, ip
 8001b82:	4626      	mov	r6, r4
 8001b84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b86:	6028      	str	r0, [r5, #0]
 8001b88:	6069      	str	r1, [r5, #4]
 8001b8a:	60aa      	str	r2, [r5, #8]
 8001b8c:	60eb      	str	r3, [r5, #12]
 8001b8e:	3410      	adds	r4, #16
 8001b90:	f10c 0c10 	add.w	ip, ip, #16
 8001b94:	4574      	cmp	r4, lr
 8001b96:	d1f3      	bne.n	8001b80 <DynWebPage+0x124>
 8001b98:	4663      	mov	r3, ip
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	6810      	ldr	r0, [r2, #0]
 8001b9e:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fbbd 	bl	8000324 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <DynWebPage+0x1b8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4611      	mov	r1, r2
 8001bba:	2348      	movs	r3, #72	@ 0x48
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f021 f8e2 	bl	8022d86 <memcpy>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001bc2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bc6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bca:	f240 624a 	movw	r2, #1610	@ 0x64a
 8001bce:	4912      	ldr	r1, [pc, #72]	@ (8001c18 <DynWebPage+0x1bc>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f012 f81b 	bl	8013c0c <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 8001bd6:	f107 0318 	add.w	r3, r7, #24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fba2 	bl	8000324 <strlen>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f107 0118 	add.w	r1, r7, #24
 8001be6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f012 f80c 	bl	8013c0c <lwip_write>
}
 8001bf4:	bf00      	nop
 8001bf6:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000288 	.word	0x20000288
 8001c04:	08023d98 	.word	0x08023d98
 8001c08:	08023d9c 	.word	0x08023d9c
 8001c0c:	08023dcc 	.word	0x08023dcc
 8001c10:	08023e04 	.word	0x08023e04
 8001c14:	08023e38 	.word	0x08023e38
 8001c18:	08028528 	.word	0x08028528

08001c1c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 8001c20:	f000 f948 	bl	8001eb4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001c24:	f000 f9a4 	bl	8001f70 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001c28:	f004 fe24 	bl	8006874 <HAL_Init>

  /* Configure the system clock to 520 MHz */
  SystemClock_Config();
 8001c2c:	f000 f8a8 	bl	8001d80 <SystemClock_Config>

  Log_Init();
 8001c30:	f7fe fdc8 	bl	80007c4 <Log_Init>
  printf("Up!\r\n");
 8001c34:	480e      	ldr	r0, [pc, #56]	@ (8001c70 <main+0x54>)
 8001c36:	f020 fed7 	bl	80229e8 <puts>

  /* Configure the LEDs ...*/
  BSP_Config();
 8001c3a:	f000 f837 	bl	8001cac <BSP_Config>

  /* Init thread */
  osKernelInitialize();
 8001c3e:	f00d fab9 	bl	800f1b4 <osKernelInitialize>
  
  attr.name = "Start";
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <main+0x58>)
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <main+0x5c>)
 8001c46:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <main+0x58>)
 8001c4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c4e:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <main+0x58>)
 8001c52:	2218      	movs	r2, #24
 8001c54:	619a      	str	r2, [r3, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 8001c56:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <main+0x58>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4808      	ldr	r0, [pc, #32]	@ (8001c7c <main+0x60>)
 8001c5c:	f00d fb09 	bl	800f272 <osThreadNew>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <main+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8001c66:	f00d fac9 	bl	800f1fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 8001c6a:	bf00      	nop
 8001c6c:	e7fd      	b.n	8001c6a <main+0x4e>
 8001c6e:	bf00      	nop
 8001c70:	08023e80 	.word	0x08023e80
 8001c74:	200002cc 	.word	0x200002cc
 8001c78:	08023e88 	.word	0x08023e88
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	200002f0 	.word	0x200002f0

08001c84 <StartThread>:
  * @brief  Start Thread
  * @param  argument not used
  * @retval None
  */
void StartThread(void* argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f012 fb40 	bl	8014314 <tcpip_init>

  /* Initialize the LwIP stack */
  Netif_Config();
 8001c94:	f000 f814 	bl	8001cc0 <Netif_Config>

  /* Initialize webserver demo */
  http_server_socket_init();
 8001c98:	f7ff fecc 	bl	8001a34 <http_server_socket_init>

  for( ;; )
  {
    /* Delete the Init Thread */
    osThreadTerminate(StartHandle);
 8001c9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ca8 <StartThread+0x24>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00d fb79 	bl	800f398 <osThreadTerminate>
 8001ca6:	e7f9      	b.n	8001c9c <StartThread+0x18>
 8001ca8:	200002f0 	.word	0x200002f0

08001cac <BSP_Config>:
  * @brief  BSP Configuration
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f004 fcbd 	bl	8006630 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f004 fcba 	bl	8006630 <BSP_LED_Init>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	f107 010c 	add.w	r1, r7, #12
 8001cdc:	481d      	ldr	r0, [pc, #116]	@ (8001d54 <Netif_Config+0x94>)
 8001cde:	9002      	str	r0, [sp, #8]
 8001ce0:	481d      	ldr	r0, [pc, #116]	@ (8001d58 <Netif_Config+0x98>)
 8001ce2:	9001      	str	r0, [sp, #4]
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	9000      	str	r0, [sp, #0]
 8001ce8:	481c      	ldr	r0, [pc, #112]	@ (8001d5c <Netif_Config+0x9c>)
 8001cea:	f018 f875 	bl	8019dd8 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001cee:	481b      	ldr	r0, [pc, #108]	@ (8001d5c <Netif_Config+0x9c>)
 8001cf0:	f018 fa38 	bl	801a164 <netif_set_default>

  ethernet_link_status_updated(&gnetif);
 8001cf4:	4819      	ldr	r0, [pc, #100]	@ (8001d5c <Netif_Config+0x9c>)
 8001cf6:	f7fe fdd9 	bl	80008ac <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001cfa:	4919      	ldr	r1, [pc, #100]	@ (8001d60 <Netif_Config+0xa0>)
 8001cfc:	4817      	ldr	r0, [pc, #92]	@ (8001d5c <Netif_Config+0x9c>)
 8001cfe:	f018 fb51 	bl	801a3a4 <netif_set_link_callback>

  attr.name = "EthLink";
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <Netif_Config+0xa4>)
 8001d04:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <Netif_Config+0xa8>)
 8001d06:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <Netif_Config+0xa4>)
 8001d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d0e:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <Netif_Config+0xa4>)
 8001d12:	2218      	movs	r2, #24
 8001d14:	619a      	str	r2, [r3, #24]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001d16:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <Netif_Config+0xa4>)
 8001d18:	4910      	ldr	r1, [pc, #64]	@ (8001d5c <Netif_Config+0x9c>)
 8001d1a:	4814      	ldr	r0, [pc, #80]	@ (8001d6c <Netif_Config+0xac>)
 8001d1c:	f00d faa9 	bl	800f272 <osThreadNew>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <Netif_Config+0xb0>)
 8001d24:	6013      	str	r3, [r2, #0]
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <Netif_Config+0xa4>)
 8001d28:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <Netif_Config+0xb4>)
 8001d2a:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <Netif_Config+0xa4>)
 8001d2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d32:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityBelowNormal;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <Netif_Config+0xa4>)
 8001d36:	2210      	movs	r2, #16
 8001d38:	619a      	str	r2, [r3, #24]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <Netif_Config+0xa4>)
 8001d3c:	4907      	ldr	r1, [pc, #28]	@ (8001d5c <Netif_Config+0x9c>)
 8001d3e:	480e      	ldr	r0, [pc, #56]	@ (8001d78 <Netif_Config+0xb8>)
 8001d40:	f00d fa97 	bl	800f272 <osThreadNew>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <Netif_Config+0xbc>)
 8001d48:	6013      	str	r3, [r2, #0]
#endif
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	080141f5 	.word	0x080141f5
 8001d58:	08001201 	.word	0x08001201
 8001d5c:	2000028c 	.word	0x2000028c
 8001d60:	080008ad 	.word	0x080008ad
 8001d64:	200002cc 	.word	0x200002cc
 8001d68:	08023e90 	.word	0x08023e90
 8001d6c:	08001541 	.word	0x08001541
 8001d70:	200002f4 	.word	0x200002f4
 8001d74:	08023e98 	.word	0x08023e98
 8001d78:	080008e5 	.word	0x080008e5
 8001d7c:	200002f8 	.word	0x200002f8

08001d80 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0a0      	sub	sp, #128	@ 0x80
 8001d84:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f006 ffa5 	bl	8008cdc <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <SystemClock_Config+0x12c>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a44      	ldr	r2, [pc, #272]	@ (8001eac <SystemClock_Config+0x12c>)
 8001d9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <SystemClock_Config+0x12c>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dae:	bf00      	nop
 8001db0:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <SystemClock_Config+0x12c>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dbc:	d1f8      	bne.n	8001db0 <SystemClock_Config+0x30>

  /* Enable D2 domain SRAM1 Clock (0x30000000 AXI)*/
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001dc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001dc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001dca:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001dd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001de0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001de4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dee:	2302      	movs	r3, #2
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df2:	2302      	movs	r3, #2
 8001df4:	63bb      	str	r3, [r7, #56]	@ 0x38

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001df6:	2304      	movs	r3, #4
 8001df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 260;
 8001dfa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	653b      	str	r3, [r7, #80]	@ 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 ff97 	bl	8008d50 <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001e28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0xb4>
  {
    while(1);
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <SystemClock_Config+0xb0>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001e34:	233f      	movs	r3, #63	@ 0x3f
 8001e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e40:	2308      	movs	r3, #8
 8001e42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e44:	2340      	movs	r3, #64	@ 0x40
 8001e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e48:	2340      	movs	r3, #64	@ 0x40
 8001e4a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e50:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e52:	2340      	movs	r3, #64	@ 0x40
 8001e54:	67bb      	str	r3, [r7, #120]	@ 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8001e56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 fb51 	bl	8009504 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001e68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0xf4>
  {
    while(1);
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <SystemClock_Config+0xf0>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7e:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <SystemClock_Config+0x130>)
 8001e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  HAL_EnableCompensationCell();
 8001e9e:	f004 fd61 	bl	8006964 <HAL_EnableCompensationCell>
}
 8001ea2:	bf00      	nop
 8001ea4:	3780      	adds	r7, #128	@ 0x80
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58024800 	.word	0x58024800
 8001eb0:	58024400 	.word	0x58024400

08001eb4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001eba:	f004 fe43 	bl	8006b44 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ec6:	231f      	movs	r3, #31
 8001ec8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001ee2:	2387      	movs	r3, #135	@ 0x87
 8001ee4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	733b      	strb	r3, [r7, #12]
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001eea:	463b      	mov	r3, r7
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fe61 	bl	8006bb4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001ef6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001efa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001efc:	2309      	movs	r3, #9
 8001efe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f00:	2303      	movs	r3, #3
 8001f02:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f20:	463b      	mov	r3, r7
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fe46 	bl	8006bb4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MPU_Config+0xb8>)
 8001f2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001f30:	230d      	movs	r3, #13
 8001f32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f34:	2303      	movs	r3, #3
 8001f36:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f54:	463b      	mov	r3, r7
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe2c 	bl	8006bb4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f004 fe09 	bl	8006b74 <HAL_MPU_Enable>
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	30004000 	.word	0x30004000

08001f70 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11b      	bne.n	8001fba <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f82:	f3bf 8f4f 	dsb	sy
}
 8001f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f88:	f3bf 8f6f 	isb	sy
}
 8001f8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
}
 8001f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f9c:	f3bf 8f6f 	isb	sy
}
 8001fa0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fae:	f3bf 8f4f 	dsb	sy
}
 8001fb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fb4:	f3bf 8f6f 	isb	sy
}
 8001fb8:	e000      	b.n	8001fbc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001fba:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d138      	bne.n	800203a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd0:	f3bf 8f4f 	dsb	sy
}
 8001fd4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8001fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fdc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0b5b      	lsrs	r3, r3, #13
 8001fe2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fe6:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	08db      	lsrs	r3, r3, #3
 8001fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001ffa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002000:	4911      	ldr	r1, [pc, #68]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e5      	bne.n	8001fe8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800201c:	f3bf 8f4f 	dsb	sy
}
 8002020:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <CPU_CACHE_Enable+0xd8>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800202e:	f3bf 8f4f 	dsb	sy
}
 8002032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002034:	f3bf 8f6f 	isb	sy
}
 8002038:	e000      	b.n	800203c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800203a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b090      	sub	sp, #64	@ 0x40
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d827      	bhi.n	80020aa <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800205a:	2200      	movs	r2, #0
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	2036      	movs	r0, #54	@ 0x36
 8002060:	f004 fd48 	bl	8006af4 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002064:	2036      	movs	r0, #54	@ 0x36
 8002066:	f004 fd5f 	bl	8006b28 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800206a:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <HAL_InitTick+0xc4>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_InitTick+0xc8>)
 8002072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002076:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <HAL_InitTick+0xc8>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_InitTick+0xc8>)
 8002082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800208e:	f107 0210 	add.w	r2, r7, #16
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f007 fdbf 	bl	8009c1c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_InitTick+0x6a>
 80020a8:	e001      	b.n	80020ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e02b      	b.n	8002106 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ae:	f007 fd89 	bl	8009bc4 <HAL_RCC_GetPCLK1Freq>
 80020b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80020b4:	e004      	b.n	80020c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020b6:	f007 fd85 	bl	8009bc4 <HAL_RCC_GetPCLK1Freq>
 80020ba:	4603      	mov	r3, r0
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020c2:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <HAL_InitTick+0xcc>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	3b01      	subs	r3, #1
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80020ce:	4b13      	ldr	r3, [pc, #76]	@ (800211c <HAL_InitTick+0xd0>)
 80020d0:	4a13      	ldr	r2, [pc, #76]	@ (8002120 <HAL_InitTick+0xd4>)
 80020d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_InitTick+0xd0>)
 80020d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020da:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80020dc:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_InitTick+0xd0>)
 80020de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e0:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_InitTick+0xd0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_InitTick+0xd0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80020ee:	480b      	ldr	r0, [pc, #44]	@ (800211c <HAL_InitTick+0xd0>)
 80020f0:	f008 f894 	bl	800a21c <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80020fa:	4808      	ldr	r0, [pc, #32]	@ (800211c <HAL_InitTick+0xd0>)
 80020fc:	f008 f8f0 	bl	800a2e0 <HAL_TIM_Base_Start_IT>
 8002100:	4603      	mov	r3, r0
 8002102:	e000      	b.n	8002106 <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	3740      	adds	r7, #64	@ 0x40
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000028 	.word	0x20000028
 8002114:	58024400 	.word	0x58024400
 8002118:	431bde83 	.word	0x431bde83
 800211c:	200002fc 	.word	0x200002fc
 8002120:	40001000 	.word	0x40001000

08002124 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800212c:	f004 fbe6 	bl	80068fc <HAL_IncTick>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <TIM6_DAC_IRQHandler+0x10>)
 800213e:	f008 f955 	bl	800a3ec <HAL_TIM_IRQHandler>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200002fc 	.word	0x200002fc

0800214c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800215e:	bf00      	nop
 8002160:	e7fd      	b.n	800215e <HardFault_Handler+0x4>

08002162 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002166:	bf00      	nop
 8002168:	e7fd      	b.n	8002166 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800216e:	bf00      	nop
 8002170:	e7fd      	b.n	800216e <BusFault_Handler+0x4>

08002172 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002176:	bf00      	nop
 8002178:	e7fd      	b.n	8002176 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <ETH_IRQHandler+0x10>)
 800218e:	f005 f9e9 	bl	8007564 <HAL_ETH_IRQHandler>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000168 	.word	0x20000168

0800219c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_kill>:

int _kill(int pid, int sig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b6:	f020 fdb1 	bl	8022d1c <__errno>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2216      	movs	r2, #22
 80021be:	601a      	str	r2, [r3, #0]
  return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_exit>:

void _exit (int status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffe7 	bl	80021ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <_exit+0x12>

080021e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e00a      	b.n	800220a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f4:	f3af 8000 	nop.w
 80021f8:	4601      	mov	r1, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	60ba      	str	r2, [r7, #8]
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	dbf0      	blt.n	80021f4 <_read+0x12>
  }

  return len;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_close>:
  }
  return len;
}*/

int _close(int file)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002244:	605a      	str	r2, [r3, #4]
  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_isatty>:

int _isatty(int file)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f020 fd32 	bl	8022d1c <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20020000 	.word	0x20020000
 80022e4:	00001000 	.word	0x00001000
 80022e8:	20000348 	.word	0x20000348
 80022ec:	200101c8 	.word	0x200101c8

080022f0 <ptpd_normalize_time>:
#include "ptpd.h"

// Normalize the time making sure there are never more
// than a billion nanoseconds represented.
static void ptpd_normalize_time(TimeInternal *r)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  r->seconds += r->nanoseconds / 1000000000;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4921      	ldr	r1, [pc, #132]	@ (8002388 <ptpd_normalize_time+0x98>)
 8002302:	fb81 0103 	smull	r0, r1, r1, r3
 8002306:	1709      	asrs	r1, r1, #28
 8002308:	17db      	asrs	r3, r3, #31
 800230a:	1acb      	subs	r3, r1, r3
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <ptpd_normalize_time+0x98>)
 8002318:	fb83 1302 	smull	r1, r3, r3, r2
 800231c:	1719      	asrs	r1, r3, #28
 800231e:	17d3      	asrs	r3, r2, #31
 8002320:	1acb      	subs	r3, r1, r3
 8002322:	491a      	ldr	r1, [pc, #104]	@ (800238c <ptpd_normalize_time+0x9c>)
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6053      	str	r3, [r2, #4]

  if ((r->seconds > 0) && (r->nanoseconds < 0))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	dd0f      	ble.n	8002356 <ptpd_normalize_time+0x66>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	da0b      	bge.n	8002356 <ptpd_normalize_time+0x66>
  {
    r->seconds -= 1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
    r->nanoseconds += 1000000000;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <ptpd_normalize_time+0x9c>)
 800234e:	4413      	add	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6053      	str	r3, [r2, #4]
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
  {
    r->seconds += 1;
    r->nanoseconds -= 1000000000;
  }
}
 8002354:	e012      	b.n	800237c <ptpd_normalize_time+0x8c>
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0e      	bge.n	800237c <ptpd_normalize_time+0x8c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	dd0a      	ble.n	800237c <ptpd_normalize_time+0x8c>
    r->seconds += 1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
    r->nanoseconds -= 1000000000;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <ptpd_normalize_time+0xa0>)
 8002376:	4413      	add	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6053      	str	r3, [r2, #4]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	44b82fa1 	.word	0x44b82fa1
 800238c:	3b9aca00 	.word	0x3b9aca00
 8002390:	c4653600 	.word	0xc4653600
 8002394:	00000000 	.word	0x00000000

08002398 <ptpd_scaled_nanoseconds_to_internal_time>:

// Convert scaled nanoseconds into TimeInternal structure.
void ptpd_scaled_nanoseconds_to_internal_time(TimeInternal *internal, const int64_t *scaled_nonoseconds)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  int sign;
  int64_t nanoseconds = *scaled_nonoseconds;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  // Determine sign of result big integer number.
  if (nanoseconds < 0)
 80023ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0b      	bge.n	80023cc <ptpd_scaled_nanoseconds_to_internal_time+0x34>
  {
    nanoseconds = -nanoseconds;
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	2100      	movs	r1, #0
 80023ba:	4254      	negs	r4, r2
 80023bc:	eb61 0503 	sbc.w	r5, r1, r3
 80023c0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    sign = -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e001      	b.n	80023d0 <ptpd_scaled_nanoseconds_to_internal_time+0x38>
  }
  else
  {
    sign = 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
  }

  // Fractional nanoseconds are excluded (see 5.3.2).
  nanoseconds >>= 16;
 80023d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	0c02      	lsrs	r2, r0, #16
 80023de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023e2:	140b      	asrs	r3, r1, #16
 80023e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  internal->seconds = sign * (nanoseconds / 1000000000);
 80023e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8002428 <ptpd_scaled_nanoseconds_to_internal_time+0x90>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fd fff5 	bl	80003e0 <__aeabi_ldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	461a      	mov	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
  internal->nanoseconds = sign * (nanoseconds % 1000000000);
 8002406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800240a:	a307      	add	r3, pc, #28	@ (adr r3, 8002428 <ptpd_scaled_nanoseconds_to_internal_time+0x90>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fd ffe6 	bl	80003e0 <__aeabi_ldivmod>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	605a      	str	r2, [r3, #4]
}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	3b9aca00 	.word	0x3b9aca00
 800242c:	00000000 	.word	0x00000000

08002430 <ptpd_from_internal_time>:

// Convert TimeInternal into Timestamp structure (defined by the spec).
void ptpd_from_internal_time(const TimeInternal *internal, Timestamp *external)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  // ptpd_from_internal_time() is only used to convert time given by the system
  // to a timestamp. As a consequence, no negative value can normally be found
  // in (internal). Note that offsets are also represented with TimeInternal
  // structure, and can be negative, but offset are never convert into Timestamp
  // so there is no problem here.
  if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db11      	blt.n	8002466 <ptpd_from_internal_time+0x36>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0d      	blt.n	8002466 <ptpd_from_internal_time+0x36>
    DBG("PTPD: Negative value cannot be converted into timestamp \n");
    return;
  }
  else
  {
    external->secondsField.lsb = internal->seconds;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	601a      	str	r2, [r3, #0]
    external->nanosecondsField = internal->nanoseconds;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	461a      	mov	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	609a      	str	r2, [r3, #8]
    external->secondsField.msb = 0;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2200      	movs	r2, #0
 8002462:	809a      	strh	r2, [r3, #4]
 8002464:	e000      	b.n	8002468 <ptpd_from_internal_time+0x38>
    return;
 8002466:	bf00      	nop
  }
}
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <ptpd_to_internal_time>:

// Convert Timestamp to TimeInternal structure (defined by the spec).
void ptpd_to_internal_time(TimeInternal *internal, const Timestamp *external)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  // NOTE: Program will not run after 2038...
  if (external->secondsField.lsb < INT_MAX)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002484:	4293      	cmp	r3, r2
 8002486:	d20a      	bcs.n	800249e <ptpd_to_internal_time+0x2c>
  {
    internal->seconds = external->secondsField.lsb;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
    internal->nanoseconds = external->nanosecondsField;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	e000      	b.n	80024a0 <ptpd_to_internal_time+0x2e>
  }
  else
  {
    DBG("PTPD: Clock servo cannot be executed: seconds field is higher than signed integer (32bits)\n");
    return;
 800249e:	bf00      	nop
  }
}
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <ptpd_add_time>:

// Add two TimeInternal structure and normalize.
void ptpd_add_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  r->seconds = x->seconds + y->seconds;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]
  r->nanoseconds = x->nanoseconds + y->nanoseconds;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	441a      	add	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ff0c 	bl	80022f0 <ptpd_normalize_time>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <ptpd_sub_time>:

// Substract two TimeInternal structure and normalize.
void ptpd_sub_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  r->seconds = x->seconds - y->seconds;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]
  r->nanoseconds = x->nanoseconds - y->nanoseconds;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fef1 	bl	80022f0 <ptpd_normalize_time>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <ptpd_div2_time>:

// Divide the TimeInternal by 2 and normalize.
void ptpd_div2_time(TimeInternal *r)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  r->nanoseconds += r->seconds % 2 * 1000000000;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	bfb8      	it	lt
 8002530:	425b      	neglt	r3, r3
 8002532:	490f      	ldr	r1, [pc, #60]	@ (8002570 <ptpd_div2_time+0x58>)
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	441a      	add	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	605a      	str	r2, [r3, #4]
  r->seconds /= 2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da00      	bge.n	8002548 <ptpd_div2_time+0x30>
 8002546:	3301      	adds	r3, #1
 8002548:	105b      	asrs	r3, r3, #1
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	601a      	str	r2, [r3, #0]
  r->nanoseconds /= 2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da00      	bge.n	800255a <ptpd_div2_time+0x42>
 8002558:	3301      	adds	r3, #1
 800255a:	105b      	asrs	r3, r3, #1
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fec4 	bl	80022f0 <ptpd_normalize_time>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	3b9aca00 	.word	0x3b9aca00

08002574 <ptpd_floor_log2>:

// Returns the floor form of binary logarithm for a 32 bit integer.
// -1 is returned if 'n' is 0.
int32_t ptpd_floor_log2(uint32_t n)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  int pos = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  // Sanity check.
  if (n == 0) return -1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <ptpd_floor_log2+0x18>
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e02b      	b.n	80025e4 <ptpd_floor_log2+0x70>

  if (n >= 1 << 16) { n >>= 16; pos += 16; }
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002592:	d305      	bcc.n	80025a0 <ptpd_floor_log2+0x2c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3310      	adds	r3, #16
 800259e:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  8) { n >>=  8; pos +=  8; }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2bff      	cmp	r3, #255	@ 0xff
 80025a4:	d905      	bls.n	80025b2 <ptpd_floor_log2+0x3e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3308      	adds	r3, #8
 80025b0:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  4) { n >>=  4; pos +=  4; }
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d905      	bls.n	80025c4 <ptpd_floor_log2+0x50>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3304      	adds	r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  2) { n >>=  2; pos +=  2; }
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d905      	bls.n	80025d6 <ptpd_floor_log2+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3302      	adds	r3, #2
 80025d4:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  1) {           pos +=  1; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d902      	bls.n	80025e2 <ptpd_floor_log2+0x6e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3301      	adds	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]

  return pos;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <eui48_to_eui64>:
#include <string.h>
#include "ptpd.h"

// Convert EUI48 format to EUI64.
static void eui48_to_eui64(const octet_t * eui48, octet_t * eui64)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  eui64[0] = eui48[0];
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	701a      	strb	r2, [r3, #0]
  eui64[1] = eui48[1];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
  eui64[2] = eui48[2];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1c9a      	adds	r2, r3, #2
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3302      	adds	r3, #2
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
  eui64[3] = 0xff;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3303      	adds	r3, #3
 800261e:	22ff      	movs	r2, #255	@ 0xff
 8002620:	701a      	strb	r2, [r3, #0]
  eui64[4] = 0xfe;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	22fe      	movs	r2, #254	@ 0xfe
 8002628:	701a      	strb	r2, [r3, #0]
  eui64[5] = eui48[3];
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1cda      	adds	r2, r3, #3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	3305      	adds	r3, #5
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]
  eui64[6] = eui48[4];
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1d1a      	adds	r2, r3, #4
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3306      	adds	r3, #6
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
  eui64[7] = eui48[5];
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	1d5a      	adds	r2, r3, #5
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	3307      	adds	r3, #7
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <ptpd_clock_init>:

// Initialize the ptp_clock with run time values.
void ptpd_clock_init(PtpClock *ptp_clock)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  RunTimeOpts *rtOpts;

  DBG("PTPD: ptpd_clock_init\n");

  // Point to the runtime options.
  rtOpts = &ptp_clock->rtOpts;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  // Default data set.
  ptp_clock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  // Init clockIdentity with MAC address and 0xFF and 0xFE. see spec 7.5.2.2.2.
  if ((CLOCK_IDENTITY_LENGTH == 8) && (PTP_UUID_LENGTH == 6))
  {
    DBGVV("ptpd_clock_init: eui48_to_eui64\n");
    eui48_to_eui64(ptp_clock->portUuidField, ptp_clock->defaultDS.clockIdentity);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f203 420a 	addw	r2, r3, #1034	@ 0x40a
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3381      	adds	r3, #129	@ 0x81
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f7ff ffb8 	bl	80025f0 <eui48_to_eui64>
  else
  {
    ERROR("ptpd_clock_init: UUID length is not valid");
  }

  ptp_clock->defaultDS.numberPorts = NUMBER_PORTS;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

  ptp_clock->defaultDS.clockQuality.clockAccuracy = rtOpts->clockQuality.clockAccuracy;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	78da      	ldrb	r2, [r3, #3]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  ptp_clock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	789a      	ldrb	r2, [r3, #2]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
  ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

  ptp_clock->defaultDS.priority1 = rtOpts->priority1;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	799a      	ldrb	r2, [r3, #6]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  ptp_clock->defaultDS.priority2 = rtOpts->priority2;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	79da      	ldrb	r2, [r3, #7]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  ptp_clock->defaultDS.domainNumber = rtOpts->domainNumber;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	7a1a      	ldrb	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  ptp_clock->defaultDS.slaveOnly = rtOpts->slaveOnly;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	7a5a      	ldrb	r2, [r3, #9]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

  // Port configuration data set.

  // PortIdentity Init (portNumber = 1 for an ardinary clock spec 7.5.2.3).
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
         ptp_clock->defaultDS.clockIdentity,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3381      	adds	r3, #129	@ 0x81
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 80026da:	2208      	movs	r2, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	f020 fb52 	bl	8022d86 <memcpy>
         CLOCK_IDENTITY_LENGTH);
  ptp_clock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  ptp_clock->portDS.peerMeanPathDelay.seconds = ptp_clock->portDS.peerMeanPathDelay.nanoseconds = 0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  ptp_clock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f993 2000 	ldrsb.w	r2, [r3]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  ptp_clock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  ptp_clock->portDS.logSyncInterval = rtOpts->syncInterval;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  ptp_clock->portDS.delayMechanism = rtOpts->delayMechanism;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
  ptp_clock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  ptp_clock->portDS.versionNumber = VERSION_PTP;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  // Initialize other stuff.
  ptp_clock->foreignMasterDS.count = 0;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  ptp_clock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002758:	3220      	adds	r2, #32
 800275a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800275e:	e883 0003 	stmia.w	r3, {r0, r1}
  ptp_clock->outboundLatency = rtOpts->outboundLatency;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800276a:	3228      	adds	r2, #40	@ 0x28
 800276c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002770:	e883 0003 	stmia.w	r3, {r0, r1}

  ptp_clock->servo.sDelay = rtOpts->servo.sDelay;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a
  ptp_clock->servo.sOffset = rtOpts->servo.sOffset;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8a3 246c 	strh.w	r2, [r3, #1132]	@ 0x46c
  ptp_clock->servo.ai = rtOpts->servo.ai;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8a3 2468 	strh.w	r2, [r3, #1128]	@ 0x468
  ptp_clock->servo.ap = rtOpts->servo.ap;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	@ 0x36
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8a3 2466 	strh.w	r2, [r3, #1126]	@ 0x466
  ptp_clock->servo.noAdjust = rtOpts->servo.noAdjust;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f883 2465 	strb.w	r2, [r3, #1125]	@ 0x465
  ptp_clock->servo.noResetClock = rtOpts->servo.noResetClock;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  ptp_clock->stats = rtOpts->stats;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	7b9a      	ldrb	r2, [r3, #14]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f883 2474 	strb.w	r2, [r3, #1140]	@ 0x474
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ptpd_is_same_port_identity>:

// Compare two port identities.
bool ptpd_is_same_port_identity(const PortIdentity *a, const PortIdentity *b)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  // Compare the clock identities and the port numbers.
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f020 fa02 	bl	8022be8 <memcmp>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <ptpd_is_same_port_identity+0x30>
                (a->portNumber == b->portNumber));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d101      	bne.n	80027fe <ptpd_is_same_port_identity+0x30>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <ptpd_is_same_port_identity+0x32>
 80027fe:	2300      	movs	r3, #0
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <ptpd_add_foreign>:

// Add foreign record defined by announce message.
void ptpd_add_foreign(PtpClock *ptp_clock, const MsgHeader *header, const MsgAnnounce *announce)
{
 800280e:	b5b0      	push	{r4, r5, r7, lr}
 8002810:	b088      	sub	sp, #32
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  int i, j;
  bool found = false;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]

  j = ptp_clock->foreignMasterDS.best;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 8002824:	61bb      	str	r3, [r7, #24]

  // Check if Foreign master is already known.
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e056      	b.n	80028da <ptpd_add_foreign+0xcc>
  {
    if (ptpd_is_same_port_identity(&header->sourcePortIdentity, &ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f103 0018 	add.w	r0, r3, #24
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2158      	movs	r1, #88	@ 0x58
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7ff ffc3 	bl	80027ce <ptpd_is_same_port_identity>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d037      	beq.n	80028be <ptpd_add_foreign+0xb0>
    {
      // Foreign Master is already in Foreignmaster data set.
      found = true;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2158      	movs	r1, #88	@ 0x58
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002866:	b292      	uxth	r2, r2
 8002868:	3201      	adds	r2, #1
 800286a:	b292      	uxth	r2, r2
 800286c:	b212      	sxth	r2, r2
 800286e:	815a      	strh	r2, [r3, #10]
      DBGV("PTPD: ptpd_add_foreign: AnnounceMessage incremented\n");
      ptp_clock->foreignMasterDS.records[j].header = *header;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2158      	movs	r1, #88	@ 0x58
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8002886:	4615      	mov	r5, r2
 8002888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800288c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002890:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002894:	e884 0003 	stmia.w	r4, {r0, r1}
      ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2158      	movs	r1, #88	@ 0x58
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f103 040c 	add.w	r4, r3, #12
 80028ae:	4615      	mov	r5, r2
 80028b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	6023      	str	r3, [r4, #0]
      break;
 80028bc:	e014      	b.n	80028e8 <ptpd_add_foreign+0xda>
    }

    j = (j + 1) % ptp_clock->foreignMasterDS.count;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3301      	adds	r3, #1
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f9b2 20ac 	ldrsh.w	r2, [r2, #172]	@ 0xac
 80028c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80028cc:	fb01 f202 	mul.w	r2, r1, r2
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 80028e0:	461a      	mov	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4293      	cmp	r3, r2
 80028e6:	dba1      	blt.n	800282c <ptpd_add_foreign+0x1e>
  }

  // If not found, we have a new foreign master.
  if (!found)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d070      	beq.n	80029d6 <ptpd_add_foreign+0x1c8>
  {
    if (ptp_clock->foreignMasterDS.count < ptp_clock->foreignMasterDS.capacity)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f9b3 20ac 	ldrsh.w	r2, [r3, #172]	@ 0xac
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8002900:	429a      	cmp	r2, r3
 8002902:	da09      	bge.n	8002918 <ptpd_add_foreign+0x10a>
    {
      ptp_clock->foreignMasterDS.count++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800290a:	b29b      	uxth	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	b29b      	uxth	r3, r3
 8002910:	b21a      	sxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }

    j = ptp_clock->foreignMasterDS.i;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 800291e:	61bb      	str	r3, [r7, #24]

    // Copy new foreign master data set from Announce message.
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2158      	movs	r1, #88	@ 0x58
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	4618      	mov	r0, r3
           header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3318      	adds	r3, #24
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8002936:	2208      	movs	r2, #8
 8002938:	4619      	mov	r1, r3
 800293a:	f020 fa24 	bl	8022d86 <memcpy>
    ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2158      	movs	r1, #88	@ 0x58
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8002954:	811a      	strh	r2, [r3, #8]
    ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2158      	movs	r1, #88	@ 0x58
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	815a      	strh	r2, [r3, #10]

    // Header and announce field of each foreign master are useful to run Best Master Clock Algorithm.
    ptp_clock->foreignMasterDS.records[j].header = *header;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2158      	movs	r1, #88	@ 0x58
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8002980:	4615      	mov	r5, r2
 8002982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800298a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800298e:	e884 0003 	stmia.w	r4, {r0, r1}
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2158      	movs	r1, #88	@ 0x58
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	f103 040c 	add.w	r4, r3, #12
 80029a8:	4615      	mov	r5, r2
 80029aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	6023      	str	r3, [r4, #0]

    DBGV("PTPD: ptpd_add_foreign: New foreign master added\n");

    ptp_clock->foreignMasterDS.i = (ptp_clock->foreignMasterDS.i + 1) % ptp_clock->foreignMasterDS.capacity;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 80029bc:	3301      	adds	r3, #1
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	f9b2 20ae 	ldrsh.w	r2, [r2, #174]	@ 0xae
 80029c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80029c8:	fb01 f202 	mul.w	r2, r1, r2
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  }
}
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}

080029de <ptpd_m1>:

// Local clock is becoming Master. Table 13 (9.3.5) of the spec.
// When recommended state is Master, copy local data into parent and grandmaster dataset.
void ptpd_m1(PtpClock *ptp_clock)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_m1\n");

  // Current data set update.
  ptp_clock->currentDS.stepsRemoved = 0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
  ptp_clock->currentDS.offsetFromMaster.seconds = ptp_clock->currentDS.offsetFromMaster.nanoseconds = 0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  ptp_clock->currentDS.meanPathDelay.seconds = ptp_clock->currentDS.meanPathDelay.nanoseconds = 0;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  // Parent data set.
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3381      	adds	r3, #129	@ 0x81
 8002a20:	2208      	movs	r2, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	f020 f9af 	bl	8022d86 <memcpy>
  ptp_clock->parentDS.parentPortIdentity.portNumber = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  memcpy(ptp_clock->parentDS.grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3381      	adds	r3, #129	@ 0x81
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f020 f9a2 	bl	8022d86 <memcpy>
  ptp_clock->parentDS.grandmasterClockQuality.clockAccuracy = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  ptp_clock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	@ 0x8e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
  ptp_clock->parentDS.grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  ptp_clock->parentDS.grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  // Time properties data set.
  ptp_clock->timePropertiesDS.currentUtcOffset = ptp_clock->rtOpts.currentUtcOffset;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.leap59 = false;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ptp_clock->timePropertiesDS.leap61 = false;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ptp_clock->timePropertiesDS.timeTraceable = DEFAULT_TIME_TRACEABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ptp_clock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ptp_clock->timePropertiesDS.ptpTimescale = (bool)(DEFAULT_TIMESCALE == PTP_TIMESCALE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ptp_clock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <ptpd_m2>:

// Local clock is becoming Master. Table 13 (9.3.5) of the spec.
void ptpd_m2(PtpClock *ptp_clock)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_m2\n");

  // For now, ptpd_m1 and ptpd_m2 are equivalent.
  ptpd_m1(ptp_clock);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff83 	bl	80029de <ptpd_m1>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <ptpd_p1>:

// When recommended state is Passive.
void ptpd_p1(PtpClock *ptp_clock)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_p1\n");
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <ptpd_s1>:

// Local clock is synchronized to Ebest Table 16 (9.3.5) of the spec.
// When recommended state is Slave, copy dataset of master into parent and grandmaster dataset.
void ptpd_s1(PtpClock *ptp_clock, const MsgHeader *header, const MsgAnnounce *announce)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  DBGV("PTPD: ptpd_s1\n");

  // Current DS.
  ptp_clock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94

  if (!ptpd_is_same_port_identity(&ptp_clock->parentDS.parentPortIdentity, &header->sourcePortIdentity))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7ff fe54 	bl	80027ce <ptpd_is_same_port_identity>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <ptpd_s1+0x4e>
  {
      set_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8002b38:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
  }

  // Parent DS.
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity,
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
         header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3318      	adds	r3, #24
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity,
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f020 f919 	bl	8022d86 <memcpy>
  ptp_clock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f103 0070 	add.w	r0, r3, #112	@ 0x70
         announce->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3315      	adds	r3, #21
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f020 f90a 	bl	8022d86 <memcpy>
  ptp_clock->parentDS.grandmasterClockQuality.clockAccuracy = announce->grandmasterClockQuality.clockAccuracy;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7c5a      	ldrb	r2, [r3, #17]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7c1a      	ldrb	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  ptp_clock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
  ptp_clock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7b9a      	ldrb	r2, [r3, #14]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  ptp_clock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7d1a      	ldrb	r2, [r3, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  // Time properties DS.
  ptp_clock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	7a1b      	ldrb	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.leap59 = get_flag(header->flagField[1], FLAG1_LEAP59);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	7a1b      	ldrb	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ptp_clock->timePropertiesDS.leap61 = get_flag(header->flagField[1], FLAG1_LEAP61);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	7a1b      	ldrb	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ptp_clock->timePropertiesDS.timeTraceable = get_flag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	7a1b      	ldrb	r3, [r3, #8]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ptp_clock->timePropertiesDS.frequencyTraceable = get_flag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	7a1b      	ldrb	r3, [r3, #8]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ptp_clock->timePropertiesDS.ptpTimescale = get_flag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	7a1b      	ldrb	r3, [r3, #8]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ptp_clock->timePropertiesDS.timeSource = announce->timeSource;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ptpd_copy_d0>:
    return A_better_then_B;                                             \
  }                                                                     \

// Copy local data set into header and announce message. 9.3.4 table 12.
static void ptpd_copy_d0(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptp_clock)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  announce->grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	739a      	strb	r2, [r3, #14]
  memcpy(announce->grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f103 0015 	add.w	r0, r3, #21
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3381      	adds	r3, #129	@ 0x81
 8002c76:	2208      	movs	r2, #8
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f020 f884 	bl	8022d86 <memcpy>
  announce->grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	741a      	strb	r2, [r3, #16]
  announce->grandmasterClockQuality.clockAccuracy = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	745a      	strb	r2, [r3, #17]
  announce->grandmasterClockQuality.offsetScaledLogVariance = ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	@ 0x8e
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	825a      	strh	r2, [r3, #18]
  announce->grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	751a      	strb	r2, [r3, #20]
  announce->stepsRemoved = 0;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	83da      	strh	r2, [r3, #30]
  memcpy(header->sourcePortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f103 0018 	add.w	r0, r3, #24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3381      	adds	r3, #129	@ 0x81
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f020 f864 	bl	8022d86 <memcpy>
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ptpd_data_set_comparison>:

// Data set comparison bewteen two foreign masters (9.3.4 fig 27). Return similar to memcmp().
static int8_t ptpd_data_set_comparison(MsgHeader *header_a, MsgAnnounce *announce_a,
                                       MsgHeader *header_b, MsgAnnounce *announce_b,
                                       PtpClock *ptp_clock)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
  int grandmaster_identity_comp;
  short comp = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	82fb      	strh	r3, [r7, #22]

  DBGV("PTPD: ptpd_data_set_comparison\n");

  // GM identity of A == GM identity of B 
  grandmaster_identity_comp = memcmp(announce_a->grandmasterIdentity, announce_b->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f103 0015 	add.w	r0, r3, #21
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3315      	adds	r3, #21
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f01f ff7f 	bl	8022be8 <memcmp>
 8002cea:	6138      	str	r0, [r7, #16]

  // Algoritgm part 1 - Figure 27.
  if (grandmaster_identity_comp != 0)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <ptpd_data_set_comparison+0xf4>
  {
    COMPARE_AB_RETURN_BETTER(grandmasterPriority1, "grandmaster.Priority1");
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	7b9a      	ldrb	r2, [r3, #14]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	7b9b      	ldrb	r3, [r3, #14]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d902      	bls.n	8002d04 <ptpd_data_set_comparison+0x3e>
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	e0d0      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7b9a      	ldrb	r2, [r3, #14]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	7b9b      	ldrb	r3, [r3, #14]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d901      	bls.n	8002d14 <ptpd_data_set_comparison+0x4e>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0c8      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass, "grandmaster.clockClass");
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	7c1a      	ldrb	r2, [r3, #16]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	7c1b      	ldrb	r3, [r3, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d902      	bls.n	8002d26 <ptpd_data_set_comparison+0x60>
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e0bf      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7c1a      	ldrb	r2, [r3, #16]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	7c1b      	ldrb	r3, [r3, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d901      	bls.n	8002d36 <ptpd_data_set_comparison+0x70>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0b7      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy, "grandmaster.clockAccuracy");
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	7c5a      	ldrb	r2, [r3, #17]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7c5b      	ldrb	r3, [r3, #17]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d902      	bls.n	8002d48 <ptpd_data_set_comparison+0x82>
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e0ae      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7c5a      	ldrb	r2, [r3, #17]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	7c5b      	ldrb	r3, [r3, #17]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d901      	bls.n	8002d58 <ptpd_data_set_comparison+0x92>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0a6      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance, "grandmaster.Variance");
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dd02      	ble.n	8002d6e <ptpd_data_set_comparison+0xa8>
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e09b      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dd01      	ble.n	8002d82 <ptpd_data_set_comparison+0xbc>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e091      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterPriority2, "grandmaster.Priority2");
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	7d1a      	ldrb	r2, [r3, #20]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	7d1b      	ldrb	r3, [r3, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d902      	bls.n	8002d94 <ptpd_data_set_comparison+0xce>
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e088      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	7d1a      	ldrb	r2, [r3, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	7d1b      	ldrb	r3, [r3, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d901      	bls.n	8002da4 <ptpd_data_set_comparison+0xde>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e080      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>

    if (grandmaster_identity_comp > 0)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dd02      	ble.n	8002db0 <ptpd_data_set_comparison+0xea>
    {
      DBGVV("PTPD: ptpd_data_set_comparison: grandmaster.Identity: B better then A\n");
      return B_better_then_A;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e07a      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (grandmaster_identity_comp < 0)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da01      	bge.n	8002dba <ptpd_data_set_comparison+0xf4>
    {
      DBGVV("PTPD: ptpd_data_set_comparison: grandmaster.Identity: A better then B\n");
      return A_better_then_B;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e075      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }
  }

  // Algoritgm part 2 - Figure 28.
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved + 1))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dd02      	ble.n	8002dd4 <ptpd_data_set_comparison+0x10e>
  {
    DBGVV("PTPD: ptpd_data_set_comparison: stepsRemoved: B better then A\n");
    return B_better_then_A;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e068      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_b->stepsRemoved) > (announce_a->stepsRemoved + 1))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002de2:	3301      	adds	r3, #1
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dd01      	ble.n	8002dec <ptpd_data_set_comparison+0x126>
  {
    DBGVV("PTPD: ptpd_data_set_comparison: stepsRemoved: A better then B\n");
    return A_better_then_B;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e05c      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dd1a      	ble.n	8002e32 <ptpd_data_set_comparison+0x16c>
  {
    comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f103 0018 	add.w	r0, r3, #24
                  ptp_clock->portDS.portIdentity.clockIdentity,
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	3340      	adds	r3, #64	@ 0x40
    comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e06:	2208      	movs	r2, #8
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f01f feed 	bl	8022be8 <memcmp>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	82fb      	strh	r3, [r7, #22]
                  CLOCK_IDENTITY_LENGTH);

    if (comp > 0)
 8002e12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dd02      	ble.n	8002e20 <ptpd_data_set_comparison+0x15a>
    {
      // Reciever less than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: B better then A\n");
      return B_better_then_A;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e042      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (comp < 0)
 8002e20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	da02      	bge.n	8002e2e <ptpd_data_set_comparison+0x168>
    {
      // Receiver greater than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: B better by topology then A\n");
      return B_better_by_topology_then_A;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	e03b      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }

    DBGVV("PTPD: ptpd_data_set_comparison: ERROR 1\n");
    return ERROR_1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e039      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_a->stepsRemoved) < (announce_b->stepsRemoved))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	da18      	bge.n	8002e74 <ptpd_data_set_comparison+0x1ae>
  {
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0018 	add.w	r0, r3, #24
                  ptp_clock->portDS.portIdentity.clockIdentity,
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	3340      	adds	r3, #64	@ 0x40
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f01f feca 	bl	8022be8 <memcmp>
 8002e54:	4603      	mov	r3, r0
 8002e56:	82fb      	strh	r3, [r7, #22]
                  CLOCK_IDENTITY_LENGTH);

    if (comp > 0)
 8002e58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dd01      	ble.n	8002e64 <ptpd_data_set_comparison+0x19e>
    {
      // Reciever less than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: A better then B\n");
      return A_better_then_B;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e020      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (comp < 0)
 8002e64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da01      	bge.n	8002e70 <ptpd_data_set_comparison+0x1aa>
    {
      // Receiver greater than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: A better by topology then B\n");
      return A_better_by_topology_then_B;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01a      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
    }

    DBGV("PTPD: ptpd_data_set_comparison: ERROR 1\n");
    return ERROR_1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e018      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }

  comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f103 0018 	add.w	r0, r3, #24
                header_b->sourcePortIdentity.clockIdentity,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3318      	adds	r3, #24
  comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e7e:	2208      	movs	r2, #8
 8002e80:	4619      	mov	r1, r3
 8002e82:	f01f feb1 	bl	8022be8 <memcmp>
 8002e86:	4603      	mov	r3, r0
 8002e88:	82fb      	strh	r3, [r7, #22]
                CLOCK_IDENTITY_LENGTH);
  if (comp > 0)
 8002e8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dd02      	ble.n	8002e98 <ptpd_data_set_comparison+0x1d2>
  {
    // A > B
    DBGVV("PTPD: ptpd_data_set_comparison: sourcePortIdentity: B better by topology then A\n");
    return B_better_by_topology_then_A;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e006      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }
  else if (comp < 0)
 8002e98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da01      	bge.n	8002ea4 <ptpd_data_set_comparison+0x1de>
  {
    // B > A
    DBGVV("PTPD: ptpd_data_set_comparison: sourcePortIdentity: A better by topology then B\n");
    return A_better_by_topology_then_B;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <ptpd_data_set_comparison+0x1e0>
  }

  // Compare port numbers of recievers of A and B - same as we have only one port.
  DBGV("PTPD: ptpd_data_set_comparison: ERROR 2\n");
  return ERROR_2;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ptpd_state_decision>:

// State decision algorithm 9.3.3 Fig 26.
static uint8_t ptpd_state_decision(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptp_clock)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b088      	sub	sp, #32
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  int comp;

  if ((!ptp_clock->foreignMasterDS.count) && (ptp_clock->portDS.portState == PTP_LISTENING))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <ptpd_state_decision+0x24>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d101      	bne.n	8002ed2 <ptpd_state_decision+0x24>
  {
    return PTP_LISTENING;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e037      	b.n	8002f42 <ptpd_state_decision+0x94>
  }

  ptpd_copy_d0(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, ptp_clock);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	33e8      	adds	r3, #232	@ 0xe8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7ff feb9 	bl	8002c56 <ptpd_copy_d0>

  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f103 01e8 	add.w	r1, r3, #232	@ 0xe8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f7ff fee5 	bl	8002cc6 <ptpd_data_set_comparison>
 8002efc:	4603      	mov	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]

  DBGV("PTPD: ptpd_state_decision: %li\n", comp);

  if (ptp_clock->defaultDS.clockQuality.clockClass < 128)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0c      	blt.n	8002f26 <ptpd_state_decision+0x78>
  {
    if (A_better_then_B == comp)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d104      	bne.n	8002f1c <ptpd_state_decision+0x6e>
    {
      // M1.
      ptpd_m1(ptp_clock);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fd63 	bl	80029de <ptpd_m1>
      return PTP_MASTER;
 8002f18:	2305      	movs	r3, #5
 8002f1a:	e012      	b.n	8002f42 <ptpd_state_decision+0x94>
    }
    else
    {
      ptpd_p1(ptp_clock);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fddf 	bl	8002ae0 <ptpd_p1>
      return PTP_PASSIVE;
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00d      	b.n	8002f42 <ptpd_state_decision+0x94>
    }
  }
  else
  {
    if (A_better_then_B == comp)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d104      	bne.n	8002f36 <ptpd_state_decision+0x88>
    {
      // M2.
      ptpd_m2(ptp_clock);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fdcc 	bl	8002aca <ptpd_m2>
      return PTP_MASTER;
 8002f32:	2305      	movs	r3, #5
 8002f34:	e005      	b.n	8002f42 <ptpd_state_decision+0x94>
    }
    else
    {
      ptpd_s1(ptp_clock, header, announce);
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fdda 	bl	8002af4 <ptpd_s1>
      return PTP_SLAVE;
 8002f40:	2308      	movs	r3, #8
    }
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <ptpd_bmc>:
//

// Compare data set of foreign masters and local data set to return the recommended
// state for the port.
uint8_t ptpd_bmc(PtpClock *ptp_clock)
{
 8002f4a:	b5b0      	push	{r4, r5, r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af02      	add	r7, sp, #8
 8002f50:	6078      	str	r0, [r7, #4]
  int16_t i;
  int16_t best;

  // Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same.
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002f52:	2301      	movs	r3, #1
 8002f54:	81fb      	strh	r3, [r7, #14]
 8002f56:	2300      	movs	r3, #0
 8002f58:	81bb      	strh	r3, [r7, #12]
 8002f5a:	e03c      	b.n	8002fd6 <ptpd_bmc+0x8c>
  {
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f66:	2158      	movs	r1, #88	@ 0x58
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
                                  &ptp_clock->foreignMasterDS.records[i].announce,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7c:	2158      	movs	r1, #88	@ 0x58
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002f84:	f103 010c 	add.w	r1, r3, #12
                                  &ptp_clock->foreignMasterDS.records[best].header,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f92:	2458      	movs	r4, #88	@ 0x58
 8002f94:	fb04 f303 	mul.w	r3, r4, r3
 8002f98:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002f9a:	f103 0430 	add.w	r4, r3, #48	@ 0x30
                                  &ptp_clock->foreignMasterDS.records[best].announce, ptp_clock)) < 0)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002fa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fa8:	2558      	movs	r5, #88	@ 0x58
 8002faa:	fb05 f303 	mul.w	r3, r5, r3
 8002fae:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002fb0:	f103 020c 	add.w	r2, r3, #12
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	4622      	mov	r2, r4
 8002fbc:	f7ff fe83 	bl	8002cc6 <ptpd_data_set_comparison>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da01      	bge.n	8002fca <ptpd_bmc+0x80>
    {
      best = i;
 8002fc6:	89fb      	ldrh	r3, [r7, #14]
 8002fc8:	81bb      	strh	r3, [r7, #12]
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	81fb      	strh	r3, [r7, #14]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8002fdc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	dbbb      	blt.n	8002f5c <ptpd_bmc+0x12>
    }
  }

  DBGV("PTPD: ptpd_bmc: best record %li\n", best);
  ptp_clock->foreignMasterDS.best = best;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	89ba      	ldrh	r2, [r7, #12]
 8002fe8:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2

  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002ff2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ff6:	2158      	movs	r1, #88	@ 0x58
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
                             &ptp_clock->foreignMasterDS.records[best].announce,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800300c:	2158      	movs	r1, #88	@ 0x58
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8003014:	330c      	adds	r3, #12
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	f7ff ff48 	bl	8002eae <ptpd_state_decision>
 800301e:	4603      	mov	r3, r0
                             ptp_clock);
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bdb0      	pop	{r4, r5, r7, pc}

08003028 <ptpd_init>:

static void ptpd_thread(void *arg);

// PTPD initialization.
void ptpd_init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af02      	add	r7, sp, #8
  ptp_alert_event_bits = xEventGroupCreate();
 800302e:	f008 fd51 	bl	800bad4 <xEventGroupCreate>
 8003032:	4603      	mov	r3, r0
 8003034:	4a07      	ldr	r2, [pc, #28]	@ (8003054 <ptpd_init+0x2c>)
 8003036:	6013      	str	r3, [r2, #0]

  xTaskCreate(ptpd_thread, "ptpd", 500, NULL, 0, NULL);
 8003038:	2300      	movs	r3, #0
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003046:	4904      	ldr	r1, [pc, #16]	@ (8003058 <ptpd_init+0x30>)
 8003048:	4804      	ldr	r0, [pc, #16]	@ (800305c <ptpd_init+0x34>)
 800304a:	f00a f913 	bl	800d274 <xTaskCreate>
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000980 	.word	0x20000980
 8003058:	08023ea0 	.word	0x08023ea0
 800305c:	08003061 	.word	0x08003061

08003060 <ptpd_thread>:

static void ptpd_thread(void *arg)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
  // Initialize the main PTP datastructure.
  memset(&ptp_clock, 0, sizeof(ptp_clock));
 8003068:	f44f 628f 	mov.w	r2, #1144	@ 0x478
 800306c:	2100      	movs	r1, #0
 800306e:	483c      	ldr	r0, [pc, #240]	@ (8003160 <ptpd_thread+0x100>)
 8003070:	f01f fde4 	bl	8022c3c <memset>

  // Run the clock in slave only?
  ptp_clock.rtOpts.slaveOnly = true;
 8003074:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <ptpd_thread+0x100>)
 8003076:	2201      	movs	r2, #1
 8003078:	725a      	strb	r2, [r3, #9]

  // Initialize run-time options to default values.
  ptp_clock.rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 800307a:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <ptpd_thread+0x100>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
  ptp_clock.rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
 8003080:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <ptpd_thread+0x100>)
 8003082:	2200      	movs	r2, #0
 8003084:	705a      	strb	r2, [r3, #1]
  ptp_clock.rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
 8003086:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <ptpd_thread+0x100>)
 8003088:	22fe      	movs	r2, #254	@ 0xfe
 800308a:	70da      	strb	r2, [r3, #3]
  ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
 800308c:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <ptpd_thread+0x100>)
 800308e:	22f8      	movs	r2, #248	@ 0xf8
 8003090:	709a      	strb	r2, [r3, #2]
  ptp_clock.rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; // 7.6.3.3
 8003092:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <ptpd_thread+0x100>)
 8003094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003098:	809a      	strh	r2, [r3, #4]
  ptp_clock.rtOpts.priority1 = DEFAULT_PRIORITY1;
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <ptpd_thread+0x100>)
 800309c:	22f8      	movs	r2, #248	@ 0xf8
 800309e:	719a      	strb	r2, [r3, #6]
  ptp_clock.rtOpts.priority2 = DEFAULT_PRIORITY2;
 80030a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <ptpd_thread+0x100>)
 80030a2:	22f8      	movs	r2, #248	@ 0xf8
 80030a4:	71da      	strb	r2, [r3, #7]
  ptp_clock.rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
 80030a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <ptpd_thread+0x100>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	721a      	strb	r2, [r3, #8]
  ptp_clock.rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 80030ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003160 <ptpd_thread+0x100>)
 80030ae:	2222      	movs	r2, #34	@ 0x22
 80030b0:	815a      	strh	r2, [r3, #10]
  ptp_clock.rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <ptpd_thread+0x100>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  ptp_clock.rtOpts.servo.noAdjust = NO_ADJUST;
 80030ba:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <ptpd_thread+0x100>)
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  ptp_clock.rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
 80030c2:	4b27      	ldr	r3, [pc, #156]	@ (8003160 <ptpd_thread+0x100>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24
  ptp_clock.rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
 80030c8:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <ptpd_thread+0x100>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  ptp_clock.rtOpts.servo.sDelay = DEFAULT_DELAY_S;
 80030ce:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <ptpd_thread+0x100>)
 80030d0:	2206      	movs	r2, #6
 80030d2:	875a      	strh	r2, [r3, #58]	@ 0x3a
  ptp_clock.rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
 80030d4:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <ptpd_thread+0x100>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 80030da:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <ptpd_thread+0x100>)
 80030dc:	2202      	movs	r2, #2
 80030de:	86da      	strh	r2, [r3, #54]	@ 0x36
  ptp_clock.rtOpts.servo.ai = DEFAULT_AI;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <ptpd_thread+0x100>)
 80030e2:	2210      	movs	r2, #16
 80030e4:	871a      	strh	r2, [r3, #56]	@ 0x38
  ptp_clock.rtOpts.maxForeignRecords = sizeof(ptp_foreign_records) / sizeof(ptp_foreign_records[0]);
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <ptpd_thread+0x100>)
 80030e8:	2205      	movs	r2, #5
 80030ea:	861a      	strh	r2, [r3, #48]	@ 0x30
  ptp_clock.rtOpts.stats = PTP_TEXT_STATS;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <ptpd_thread+0x100>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	739a      	strb	r2, [r3, #14]
  ptp_clock.rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <ptpd_thread+0x100>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  // Initialize the foriegn records buffers.
  ptp_clock.foreignMasterDS.records = ptp_foreign_records;
 80030fa:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <ptpd_thread+0x100>)
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <ptpd_thread+0x104>)
 80030fe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

  // See: 9.2.2
  if (ptp_clock.rtOpts.slaveOnly) ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 8003102:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <ptpd_thread+0x100>)
 8003104:	7a5b      	ldrb	r3, [r3, #9]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <ptpd_thread+0xb0>
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <ptpd_thread+0x100>)
 800310c:	22ff      	movs	r2, #255	@ 0xff
 800310e:	709a      	strb	r2, [r3, #2]

  // No negative or zero attenuation.
  if (ptp_clock.rtOpts.servo.ap < 1) ptp_clock.rtOpts.servo.ap = 1;
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <ptpd_thread+0x100>)
 8003112:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8003116:	2b00      	cmp	r3, #0
 8003118:	dc02      	bgt.n	8003120 <ptpd_thread+0xc0>
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <ptpd_thread+0x100>)
 800311c:	2201      	movs	r2, #1
 800311e:	86da      	strh	r2, [r3, #54]	@ 0x36
  if (ptp_clock.rtOpts.servo.ai < 1) ptp_clock.rtOpts.servo.ai = 1;
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <ptpd_thread+0x100>)
 8003122:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	dc02      	bgt.n	8003130 <ptpd_thread+0xd0>
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <ptpd_thread+0x100>)
 800312c:	2201      	movs	r2, #1
 800312e:	871a      	strh	r2, [r3, #56]	@ 0x38

  // Wait until the network interface is up.

  // Enter state PTP_INITIALIZING.
  ptpd_protocol_to_state(&ptp_clock, PTP_INITIALIZING);
 8003130:	2100      	movs	r1, #0
 8003132:	480b      	ldr	r0, [pc, #44]	@ (8003160 <ptpd_thread+0x100>)
 8003134:	f001 f980 	bl	8004438 <ptpd_protocol_to_state>
    {
      // ptpd_protocol_do_state() has a switch for the actions and events to be
      // checked for 'port_state'. The actions and events may or may not change
      // 'port_state' by calling ptpd_protocol_to_state(), but once they are done we loop around
      // again and perform the actions required for the new 'port_state'.
      ptpd_protocol_do_state(&ptp_clock);
 8003138:	4809      	ldr	r0, [pc, #36]	@ (8003160 <ptpd_thread+0x100>)
 800313a:	f001 fb85 	bl	8004848 <ptpd_protocol_do_state>
    }
    while (ptpd_net_select(&ptp_clock.netPath, 0) > 0);
 800313e:	2100      	movs	r1, #0
 8003140:	4809      	ldr	r0, [pc, #36]	@ (8003168 <ptpd_thread+0x108>)
 8003142:	f001 f80f 	bl	8004164 <ptpd_net_select>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	dcf5      	bgt.n	8003138 <ptpd_thread+0xd8>

    xEventGroupWaitBits(ptp_alert_event_bits, ALERT_EVENT_BIT, true, true, 100);
 800314c:	4b07      	ldr	r3, [pc, #28]	@ (800316c <ptpd_thread+0x10c>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	2364      	movs	r3, #100	@ 0x64
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	2201      	movs	r2, #1
 8003158:	2101      	movs	r1, #1
 800315a:	f008 fcd5 	bl	800bb08 <xEventGroupWaitBits>
  while (true)
 800315e:	e7eb      	b.n	8003138 <ptpd_thread+0xd8>
 8003160:	20000350 	.word	0x20000350
 8003164:	200007c8 	.word	0x200007c8
 8003168:	20000770 	.word	0x20000770
 800316c:	20000980 	.word	0x20000980

08003170 <ptpd_alert>:
  }
}

// Notify the PTPD thread of a pending operation.
void ptpd_alert(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  xEventGroupSetBits(ptp_alert_event_bits, ALERT_EVENT_BIT);
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <ptpd_alert+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	4618      	mov	r0, r3
 800317c:	f008 fd96 	bl	800bcac <xEventGroupSetBits>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000980 	.word	0x20000980

08003188 <ptpd_msg_unpack_header>:
#include <string.h>
#include "ptpd.h"

// Unpack header message.
void ptpd_msg_unpack_header(const octet_t *buf, MsgHeader *header)
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  int32_t msb;
  uint32_t lsb;

  header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	b2da      	uxtb	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	701a      	strb	r2, [r3, #0]
  header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	705a      	strb	r2, [r3, #1]
  header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; // Force reserved bit to zero if not.
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3301      	adds	r3, #1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	709a      	strb	r2, [r3, #2]
  header->messageLength = flip16(*(int16_t*)(buf  + 2));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3302      	adds	r3, #2
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f016 f819 	bl	8019200 <lwip_htons>
 80031ce:	4603      	mov	r3, r0
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	809a      	strh	r2, [r3, #4]
  header->domainNumber = (*(uint8_t*)(buf + 4));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	791a      	ldrb	r2, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	719a      	strb	r2, [r3, #6]
  memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3307      	adds	r3, #7
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	3206      	adds	r2, #6
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
  memcpy(&msb, (buf + 8), 4);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3308      	adds	r3, #8
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
  memcpy(&lsb, (buf + 12), 4);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	330c      	adds	r3, #12
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60bb      	str	r3, [r7, #8]
  header->correctionfield = flip32(msb);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f016 f813 	bl	801922a <lwip_htonl>
 8003204:	4603      	mov	r3, r0
 8003206:	2200      	movs	r2, #0
 8003208:	469a      	mov	sl, r3
 800320a:	4693      	mov	fp, r2
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	e9c3 ab04 	strd	sl, fp, [r3, #16]
  header->correctionfield <<= 32;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	0003      	movs	r3, r0
 8003222:	2200      	movs	r2, #0
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	e9c1 2304 	strd	r2, r3, [r1, #16]
  header->correctionfield += flip32(lsb);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f015 fffc 	bl	801922a <lwip_htonl>
 8003232:	4601      	mov	r1, r0
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800323a:	2000      	movs	r0, #0
 800323c:	460c      	mov	r4, r1
 800323e:	4605      	mov	r5, r0
 8003240:	eb12 0804 	adds.w	r8, r2, r4
 8003244:	eb43 0905 	adc.w	r9, r3, r5
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	e9c3 8904 	strd	r8, r9, [r3, #16]
  memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f103 0018 	add.w	r0, r3, #24
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3314      	adds	r3, #20
 8003258:	2208      	movs	r2, #8
 800325a:	4619      	mov	r1, r3
 800325c:	f01f fd93 	bl	8022d86 <memcpy>
  header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	331c      	adds	r3, #28
 8003264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f015 ffc8 	bl	8019200 <lwip_htons>
 8003270:	4603      	mov	r3, r0
 8003272:	b21a      	sxth	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	841a      	strh	r2, [r3, #32]
  header->sequenceId = flip16(*(int16_t*)(buf + 30));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	331e      	adds	r3, #30
 800327c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f015 ffbc 	bl	8019200 <lwip_htons>
 8003288:	4603      	mov	r3, r0
 800328a:	b21a      	sxth	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	845a      	strh	r2, [r3, #34]	@ 0x22
  header->controlField = (*(uint8_t*)(buf + 32));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  header->logMessageInterval = (*(int8_t*)(buf + 33));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f993 2021 	ldrsb.w	r2, [r3, #33]	@ 0x21
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032b2 <ptpd_msg_pack_header>:

// Pack header message.
void ptpd_msg_pack_header(const PtpClock *ptp_clock, octet_t *buf)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  nibble_t transport = 0x80; // (spec annex D)
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	73fb      	strb	r3, [r7, #15]
  *(uint8_t*)(buf + 0) = transport;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	701a      	strb	r2, [r3, #0]
  *(uint4bit_t*)(buf  + 1) = ptp_clock->portDS.versionNumber;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80032d0:	701a      	strb	r2, [r3, #0]
  *(uint8_t*)(buf + 4) = ptp_clock->defaultDS.domainNumber;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	3304      	adds	r3, #4
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	f892 2092 	ldrb.w	r2, [r2, #146]	@ 0x92
 80032dc:	701a      	strb	r2, [r3, #0]
  if (ptp_clock->defaultDS.twoStepFlag)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <ptpd_msg_pack_header+0x3e>
  {
      *(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	3306      	adds	r3, #6
 80032ec:	2202      	movs	r2, #2
 80032ee:	701a      	strb	r2, [r3, #0]
  }
  memset((buf + 8), 0, 8);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	3308      	adds	r3, #8
 80032f4:	2208      	movs	r2, #8
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f01f fc9f 	bl	8022c3c <memset>
  memcpy((buf + 20), ptp_clock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f103 0014 	add.w	r0, r3, #20
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3340      	adds	r3, #64	@ 0x40
 8003308:	2208      	movs	r2, #8
 800330a:	4619      	mov	r1, r3
 800330c:	f01f fd3b 	bl	8022d86 <memcpy>
  *(int16_t*)(buf + 28) = flip16(ptp_clock->portDS.portIdentity.portNumber);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	f015 ff71 	bl	8019200 <lwip_htons>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	331c      	adds	r3, #28
 8003326:	b212      	sxth	r2, r2
 8003328:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3321      	adds	r3, #33	@ 0x21
 800332e:	227f      	movs	r2, #127	@ 0x7f
 8003330:	701a      	strb	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ptpd_msg_pack_announce>:

// Pack Announce message.
void ptpd_msg_pack_announce(const PtpClock *ptp_clock, octet_t *buf)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	b2da      	uxtb	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	f043 030b 	orr.w	r3, r3, #11
 800335a:	b2da      	uxtb	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 8003360:	2040      	movs	r0, #64	@ 0x40
 8003362:	f015 ff4d 	bl	8019200 <lwip_htons>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	3302      	adds	r3, #2
 800336e:	b212      	sxth	r2, r2
 8003370:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentAnnounceSequenceId);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f9b3 33c6 	ldrsh.w	r3, [r3, #966]	@ 0x3c6
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	f015 ff40 	bl	8019200 <lwip_htons>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	331e      	adds	r3, #30
 8003388:	b212      	sxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23 - controlField
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3320      	adds	r3, #32
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logAnnounceInterval;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	3321      	adds	r3, #33	@ 0x21
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	f992 2054 	ldrsb.w	r2, [r2, #84]	@ 0x54
 800339e:	701a      	strb	r2, [r3, #0]

  // Announce message
  memset((buf + 34), 0, 10); // origin_timestamp
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3322      	adds	r3, #34	@ 0x22
 80033a4:	220a      	movs	r2, #10
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f01f fc47 	bl	8022c3c <memset>
  *(int16_t*)(buf + 44) = flip16(ptp_clock->timePropertiesDS.currentUtcOffset);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f015 ff22 	bl	8019200 <lwip_htons>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	332c      	adds	r3, #44	@ 0x2c
 80033c4:	b212      	sxth	r2, r2
 80033c6:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 47) = ptp_clock->parentDS.grandmasterPriority1;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	332f      	adds	r3, #47	@ 0x2f
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 80033d2:	701a      	strb	r2, [r3, #0]
  *(uint8_t*)(buf + 48) = ptp_clock->defaultDS.clockQuality.clockClass;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3330      	adds	r3, #48	@ 0x30
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 80033de:	701a      	strb	r2, [r3, #0]
  *(enum8bit_t*)(buf + 49) = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3331      	adds	r3, #49	@ 0x31
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 80033ea:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 50) = flip16(ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f015 ff03 	bl	8019200 <lwip_htons>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3332      	adds	r3, #50	@ 0x32
 8003402:	b212      	sxth	r2, r2
 8003404:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 52) = ptp_clock->parentDS.grandmasterPriority2;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3334      	adds	r3, #52	@ 0x34
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8003410:	701a      	strb	r2, [r3, #0]
  memcpy((buf + 53), ptp_clock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3370      	adds	r3, #112	@ 0x70
 800341c:	2208      	movs	r2, #8
 800341e:	4619      	mov	r1, r3
 8003420:	f01f fcb1 	bl	8022d86 <memcpy>
  *(int16_t*)(buf + 61) = flip16(ptp_clock->currentDS.stepsRemoved);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	f015 fee7 	bl	8019200 <lwip_htons>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	333d      	adds	r3, #61	@ 0x3d
 800343a:	b212      	sxth	r2, r2
 800343c:	801a      	strh	r2, [r3, #0]
  *(enum8bit_t*)(buf + 63) = ptp_clock->timePropertiesDS.timeSource;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	333f      	adds	r3, #63	@ 0x3f
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8003448:	701a      	strb	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <ptpd_msg_unpack_announce>:

// Unpack Announce message.
void ptpd_msg_unpack_announce(const octet_t *buf, MsgAnnounce *announce)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3322      	adds	r3, #34	@ 0x22
 8003460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f015 feca 	bl	8019200 <lwip_htons>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	809a      	strh	r2, [r3, #4]
  announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3324      	adds	r3, #36	@ 0x24
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f015 fed5 	bl	801922a <lwip_htonl>
 8003480:	4602      	mov	r2, r0
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	601a      	str	r2, [r3, #0]
  announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3328      	adds	r3, #40	@ 0x28
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f015 fecc 	bl	801922a <lwip_htonl>
 8003492:	4602      	mov	r2, r0
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]
  announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	332c      	adds	r3, #44	@ 0x2c
 800349c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f015 feac 	bl	8019200 <lwip_htons>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b21a      	sxth	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	819a      	strh	r2, [r3, #12]
  announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	739a      	strb	r2, [r3, #14]
  announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	741a      	strb	r2, [r3, #16]
  announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	745a      	strb	r2, [r3, #17]
  announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3332      	adds	r3, #50	@ 0x32
 80034d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	f015 fe91 	bl	8019200 <lwip_htons>
 80034de:	4603      	mov	r3, r0
 80034e0:	b21a      	sxth	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	825a      	strh	r2, [r3, #18]
  announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	751a      	strb	r2, [r3, #20]
  memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f103 0015 	add.w	r0, r3, #21
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3335      	adds	r3, #53	@ 0x35
 80034fa:	2208      	movs	r2, #8
 80034fc:	4619      	mov	r1, r3
 80034fe:	f01f fc42 	bl	8022d86 <memcpy>
  announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	333d      	adds	r3, #61	@ 0x3d
 8003506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350a:	b29b      	uxth	r3, r3
 800350c:	4618      	mov	r0, r3
 800350e:	f015 fe77 	bl	8019200 <lwip_htons>
 8003512:	4603      	mov	r3, r0
 8003514:	b21a      	sxth	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	83da      	strh	r2, [r3, #30]
  announce->timeSource = *(enum8bit_t*)(buf + 63);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ptpd_msg_pack_sync>:

// Pack Sync message.
void ptpd_msg_pack_sync(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 800352e:	b590      	push	{r4, r7, lr}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	f023 030f 	bic.w	r3, r3, #15
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; // Table 19
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 8003550:	202c      	movs	r0, #44	@ 0x2c
 8003552:	f015 fe55 	bl	8019200 <lwip_htons>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3302      	adds	r3, #2
 800355e:	b212      	sxth	r2, r2
 8003560:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 8003568:	b29b      	uxth	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f015 fe48 	bl	8019200 <lwip_htons>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	331e      	adds	r3, #30
 8003578:	b212      	sxth	r2, r2
 800357a:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_SYNC; // Table 23
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3320      	adds	r3, #32
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3321      	adds	r3, #33	@ 0x21
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	f992 2056 	ldrsb.w	r2, [r2, #86]	@ 0x56
 800358e:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8); // Correction field
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3308      	adds	r3, #8
 8003594:	2208      	movs	r2, #8
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f01f fb4f 	bl	8022c3c <memset>

  // Sync message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	889b      	ldrh	r3, [r3, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f015 fe2c 	bl	8019200 <lwip_htons>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3322      	adds	r3, #34	@ 0x22
 80035b0:	b212      	sxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80035be:	4610      	mov	r0, r2
 80035c0:	f015 fe33 	bl	801922a <lwip_htonl>
 80035c4:	4603      	mov	r3, r0
 80035c6:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80035d2:	4610      	mov	r0, r2
 80035d4:	f015 fe29 	bl	801922a <lwip_htonl>
 80035d8:	4603      	mov	r3, r0
 80035da:	6023      	str	r3, [r4, #0]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}

080035e4 <ptpd_msg_unpack_sync>:

// Unpack Sync message.
void ptpd_msg_unpack_sync(const octet_t *buf, MsgSync *sync)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3322      	adds	r3, #34	@ 0x22
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f015 fe01 	bl	8019200 <lwip_htons>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	809a      	strh	r2, [r3, #4]
  sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3324      	adds	r3, #36	@ 0x24
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f015 fe0c 	bl	801922a <lwip_htonl>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	601a      	str	r2, [r3, #0]
  sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3328      	adds	r3, #40	@ 0x28
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f015 fe03 	bl	801922a <lwip_htonl>
 8003624:	4602      	mov	r2, r0
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <ptpd_msg_pack_delay_req>:

// Pack DelayReq message.
void ptpd_msg_pack_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 8003632:	b590      	push	{r4, r7, lr}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f023 030f 	bic.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; // Table 19
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 800365a:	202c      	movs	r0, #44	@ 0x2c
 800365c:	f015 fdd0 	bl	8019200 <lwip_htons>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3302      	adds	r3, #2
 8003668:	b212      	sxth	r2, r2
 800366a:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentDelayReqSequenceId);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 8003672:	b29b      	uxth	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	f015 fdc3 	bl	8019200 <lwip_htons>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	331e      	adds	r3, #30
 8003682:	b212      	sxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; // Table 23
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	3320      	adds	r3, #32
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3321      	adds	r3, #33	@ 0x21
 8003692:	227f      	movs	r2, #127	@ 0x7f
 8003694:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3308      	adds	r3, #8
 800369a:	2208      	movs	r2, #8
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f01f facc 	bl	8022c3c <memset>

  // Delay_req message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	889b      	ldrh	r3, [r3, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f015 fda9 	bl	8019200 <lwip_htons>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3322      	adds	r3, #34	@ 0x22
 80036b6:	b212      	sxth	r2, r2
 80036b8:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80036c4:	4610      	mov	r0, r2
 80036c6:	f015 fdb0 	bl	801922a <lwip_htonl>
 80036ca:	4603      	mov	r3, r0
 80036cc:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80036d8:	4610      	mov	r0, r2
 80036da:	f015 fda6 	bl	801922a <lwip_htonl>
 80036de:	4603      	mov	r3, r0
 80036e0:	6023      	str	r3, [r4, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <ptpd_msg_pack_follow_up>:
  delay_req->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

// Pack FollowUp message.
void ptpd_msg_pack_follow_up(const PtpClock *ptp_clock, octet_t*buf, const Timestamp *precise_origin_timestamp)
{
 80036ea:	b590      	push	{r4, r7, lr}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f023 030f 	bic.w	r3, r3, #15
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; // Table 19
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8003712:	202c      	movs	r0, #44	@ 0x2c
 8003714:	f015 fd74 	bl	8019200 <lwip_htons>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3302      	adds	r3, #2
 8003720:	b212      	sxth	r2, r2
 8003722:	801a      	strh	r2, [r3, #0]
  // sentSyncSequenceId has already been incremented in issueSync.
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId - 1);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	4618      	mov	r0, r3
 8003732:	f015 fd65 	bl	8019200 <lwip_htons>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	331e      	adds	r3, #30
 800373e:	b212      	sxth	r2, r2
 8003740:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; // Table 23
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3320      	adds	r3, #32
 8003746:	2202      	movs	r2, #2
 8003748:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3321      	adds	r3, #33	@ 0x21
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	f992 2056 	ldrsb.w	r2, [r2, #86]	@ 0x56
 8003754:	701a      	strb	r2, [r3, #0]

  // Follow_up message.
  *(int16_t*)(buf + 34) = flip16(precise_origin_timestamp->secondsField.msb);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	889b      	ldrh	r3, [r3, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	f015 fd50 	bl	8019200 <lwip_htons>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3322      	adds	r3, #34	@ 0x22
 8003768:	b212      	sxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(precise_origin_timestamp->secondsField.lsb);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003776:	4610      	mov	r0, r2
 8003778:	f015 fd57 	bl	801922a <lwip_htonl>
 800377c:	4603      	mov	r3, r0
 800377e:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(precise_origin_timestamp->nanosecondsField);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800378a:	4610      	mov	r0, r2
 800378c:	f015 fd4d 	bl	801922a <lwip_htonl>
 8003790:	4603      	mov	r3, r0
 8003792:	6023      	str	r3, [r4, #0]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <ptpd_msg_unpack_follow_up>:

// Unpack FollowUp message.
void ptpd_msg_unpack_follow_up(const octet_t *buf, MsgFollowUp *follow)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3322      	adds	r3, #34	@ 0x22
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f015 fd25 	bl	8019200 <lwip_htons>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	809a      	strh	r2, [r3, #4]
  follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3324      	adds	r3, #36	@ 0x24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f015 fd30 	bl	801922a <lwip_htonl>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	601a      	str	r2, [r3, #0]
  follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3328      	adds	r3, #40	@ 0x28
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f015 fd27 	bl	801922a <lwip_htonl>
 80037dc:	4602      	mov	r2, r0
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <ptpd_msg_pack_delay_resp>:

// Pack DelayResp message.
void ptpd_msg_pack_delay_resp(const PtpClock *ptp_clock, octet_t *buf, const MsgHeader *header, const Timestamp *receive_timestamp)
{
 80037ea:	b590      	push	{r4, r7, lr}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	f023 030f 	bic.w	r3, r3, #15
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; // Table 19
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f043 0309 	orr.w	r3, r3, #9
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 8003814:	2036      	movs	r0, #54	@ 0x36
 8003816:	f015 fcf3 	bl	8019200 <lwip_htons>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3302      	adds	r3, #2
 8003822:	b212      	sxth	r2, r2
 8003824:	801a      	strh	r2, [r3, #0]
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3308      	adds	r3, #8
 800382a:	2208      	movs	r2, #8
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f01f fa04 	bl	8022c3c <memset>

  // Copy correctionField of delayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	000a      	movs	r2, r1
 8003844:	17cb      	asrs	r3, r1, #31
 8003846:	4613      	mov	r3, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f015 fcee 	bl	801922a <lwip_htonl>
 800384e:	4602      	mov	r2, r0
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3308      	adds	r3, #8
 8003854:	601a      	str	r2, [r3, #0]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800385c:	4613      	mov	r3, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f015 fce3 	bl	801922a <lwip_htonl>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	330c      	adds	r3, #12
 800386a:	601a      	str	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003872:	b29b      	uxth	r3, r3
 8003874:	4618      	mov	r0, r3
 8003876:	f015 fcc3 	bl	8019200 <lwip_htons>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	331e      	adds	r3, #30
 8003882:	b212      	sxth	r2, r2
 8003884:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; // Table 23
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3320      	adds	r3, #32
 800388a:	2203      	movs	r2, #3
 800388c:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logMinDelayReqInterval; //Table 24
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3321      	adds	r3, #33	@ 0x21
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	f992 204b 	ldrsb.w	r2, [r2, #75]	@ 0x4b
 8003898:	701a      	strb	r2, [r3, #0]

  // delay_resp message.
  *(int16_t*)(buf + 34) = flip16(receive_timestamp->secondsField.msb);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	889b      	ldrh	r3, [r3, #4]
 800389e:	4618      	mov	r0, r3
 80038a0:	f015 fcae 	bl	8019200 <lwip_htons>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3322      	adds	r3, #34	@ 0x22
 80038ac:	b212      	sxth	r2, r2
 80038ae:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(receive_timestamp->secondsField.lsb);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80038ba:	4610      	mov	r0, r2
 80038bc:	f015 fcb5 	bl	801922a <lwip_htonl>
 80038c0:	4603      	mov	r3, r0
 80038c2:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(receive_timestamp->nanosecondsField);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80038ce:	4610      	mov	r0, r2
 80038d0:	f015 fcab 	bl	801922a <lwip_htonl>
 80038d4:	4603      	mov	r3, r0
 80038d6:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3318      	adds	r3, #24
 80038e2:	2208      	movs	r2, #8
 80038e4:	4619      	mov	r1, r3
 80038e6:	f01f fa4e 	bl	8022d86 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f015 fc84 	bl	8019200 <lwip_htons>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3334      	adds	r3, #52	@ 0x34
 8003900:	b212      	sxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}

0800390c <ptpd_msg_unpack_delay_resp>:

// Unpack DelayResp message.
void ptpd_msg_unpack_delay_resp(const octet_t *buf, MsgDelayResp *resp)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3322      	adds	r3, #34	@ 0x22
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	f015 fc6d 	bl	8019200 <lwip_htons>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	809a      	strh	r2, [r3, #4]
  resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3324      	adds	r3, #36	@ 0x24
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f015 fc78 	bl	801922a <lwip_htonl>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	601a      	str	r2, [r3, #0]
  resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3328      	adds	r3, #40	@ 0x28
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f015 fc6f 	bl	801922a <lwip_htonl>
 800394c:	4602      	mov	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	609a      	str	r2, [r3, #8]
  memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f103 000c 	add.w	r0, r3, #12
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	332c      	adds	r3, #44	@ 0x2c
 800395c:	2208      	movs	r2, #8
 800395e:	4619      	mov	r1, r3
 8003960:	f01f fa11 	bl	8022d86 <memcpy>
  resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3334      	adds	r3, #52	@ 0x34
 8003968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4618      	mov	r0, r3
 8003970:	f015 fc46 	bl	8019200 <lwip_htons>
 8003974:	4603      	mov	r3, r0
 8003976:	b21a      	sxth	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	829a      	strh	r2, [r3, #20]
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <ptpd_msg_pack_peer_delay_req>:

// Pack PeerDelayReq message.
void ptpd_msg_pack_peer_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f023 030f 	bic.w	r3, r3, #15
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; // Table 19
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 80039ac:	2036      	movs	r0, #54	@ 0x36
 80039ae:	f015 fc27 	bl	8019200 <lwip_htons>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3302      	adds	r3, #2
 80039ba:	b212      	sxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentPDelayReqSequenceId);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f015 fc1a 	bl	8019200 <lwip_htons>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	331e      	adds	r3, #30
 80039d4:	b212      	sxth	r2, r2
 80039d6:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3320      	adds	r3, #32
 80039dc:	2205      	movs	r2, #5
 80039de:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3321      	adds	r3, #33	@ 0x21
 80039e4:	227f      	movs	r2, #127	@ 0x7f
 80039e6:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3308      	adds	r3, #8
 80039ec:	2208      	movs	r2, #8
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f01f f923 	bl	8022c3c <memset>

  // Pdelay_req message
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	889b      	ldrh	r3, [r3, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f015 fc00 	bl	8019200 <lwip_htons>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3322      	adds	r3, #34	@ 0x22
 8003a08:	b212      	sxth	r2, r2
 8003a0a:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003a16:	4610      	mov	r0, r2
 8003a18:	f015 fc07 	bl	801922a <lwip_htonl>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f015 fbfd 	bl	801922a <lwip_htonl>
 8003a30:	4603      	mov	r3, r0
 8003a32:	6023      	str	r3, [r4, #0]
  memset((buf + 44), 0, 10); // RAZ reserved octets.
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	332c      	adds	r3, #44	@ 0x2c
 8003a38:	220a      	movs	r2, #10
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f01f f8fd 	bl	8022c3c <memset>
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}

08003a4a <ptpd_msg_pack_peer_delay_resp>:
  pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

// Pack PeerDelayResp message.
void ptpd_msg_pack_peer_delay_resp(octet_t *buf, const MsgHeader *header, const Timestamp *request_receipt_timestamp)
{
 8003a4a:	b590      	push	{r4, r7, lr}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f023 030f 	bic.w	r3, r3, #15
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; // Table 19
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f043 0303 	orr.w	r3, r3, #3
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 8003a72:	2036      	movs	r0, #54	@ 0x36
 8003a74:	f015 fbc4 	bl	8019200 <lwip_htons>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3302      	adds	r3, #2
 8003a80:	b212      	sxth	r2, r2
 8003a82:	801a      	strh	r2, [r3, #0]
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3308      	adds	r3, #8
 8003a88:	2208      	movs	r2, #8
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f01f f8d5 	bl	8022c3c <memset>
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f015 fbb0 	bl	8019200 <lwip_htons>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	331e      	adds	r3, #30
 8003aa8:	b212      	sxth	r2, r2
 8003aaa:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3320      	adds	r3, #32
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3321      	adds	r3, #33	@ 0x21
 8003ab8:	227f      	movs	r2, #127	@ 0x7f
 8003aba:	701a      	strb	r2, [r3, #0]

  // Pdelay_resp message.
  *(int16_t*)(buf + 34) = flip16(request_receipt_timestamp->secondsField.msb);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	889b      	ldrh	r3, [r3, #4]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f015 fb9d 	bl	8019200 <lwip_htons>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3322      	adds	r3, #34	@ 0x22
 8003ace:	b212      	sxth	r2, r2
 8003ad0:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(request_receipt_timestamp->secondsField.lsb);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003adc:	4610      	mov	r0, r2
 8003ade:	f015 fba4 	bl	801922a <lwip_htonl>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(request_receipt_timestamp->nanosecondsField);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003af0:	4610      	mov	r0, r2
 8003af2:	f015 fb9a 	bl	801922a <lwip_htonl>
 8003af6:	4603      	mov	r3, r0
 8003af8:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3318      	adds	r3, #24
 8003b04:	2208      	movs	r2, #8
 8003b06:	4619      	mov	r1, r3
 8003b08:	f01f f93d 	bl	8022d86 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f015 fb73 	bl	8019200 <lwip_htons>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3334      	adds	r3, #52	@ 0x34
 8003b22:	b212      	sxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}

08003b2e <ptpd_msg_unpack_peer_delay_resp>:

// Unpack PeerDelayResp message.
void ptpd_msg_unpack_peer_delay_resp(const octet_t *buf, MsgPDelayResp *presp)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
  presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3322      	adds	r3, #34	@ 0x22
 8003b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f015 fb5c 	bl	8019200 <lwip_htons>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	809a      	strh	r2, [r3, #4]
  presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f015 fb67 	bl	801922a <lwip_htonl>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	601a      	str	r2, [r3, #0]
  presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3328      	adds	r3, #40	@ 0x28
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f015 fb5e 	bl	801922a <lwip_htonl>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]
  memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f103 000c 	add.w	r0, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	332c      	adds	r3, #44	@ 0x2c
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4619      	mov	r1, r3
 8003b82:	f01f f900 	bl	8022d86 <memcpy>
  presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3334      	adds	r3, #52	@ 0x34
 8003b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f015 fb35 	bl	8019200 <lwip_htons>
 8003b96:	4603      	mov	r3, r0
 8003b98:	b21a      	sxth	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	829a      	strh	r2, [r3, #20]
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <ptpd_msg_pack_peer_delay_resp_follow_up>:

// Pack PeerDelayRespFollowUp message.
void ptpd_msg_pack_peer_delay_resp_follow_up(octet_t *buf, const MsgHeader *header, const Timestamp *response_origin_timestamp)
{
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f023 030f 	bic.w	r3, r3, #15
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; // Table 19
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f043 030a 	orr.w	r3, r3, #10
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 8003bce:	2036      	movs	r0, #54	@ 0x36
 8003bd0:	f015 fb16 	bl	8019200 <lwip_htons>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3302      	adds	r3, #2
 8003bdc:	b212      	sxth	r2, r2
 8003bde:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f015 fb09 	bl	8019200 <lwip_htons>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	331e      	adds	r3, #30
 8003bf6:	b212      	sxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3320      	adds	r3, #32
 8003bfe:	2205      	movs	r2, #5
 8003c00:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3321      	adds	r3, #33	@ 0x21
 8003c06:	227f      	movs	r2, #127	@ 0x7f
 8003c08:	701a      	strb	r2, [r3, #0]

  // Copy correctionField of PdelayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	000a      	movs	r2, r1
 8003c1a:	17cb      	asrs	r3, r1, #31
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f015 fb03 	bl	801922a <lwip_htonl>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	601a      	str	r2, [r3, #0]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c32:	4613      	mov	r3, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f015 faf8 	bl	801922a <lwip_htonl>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	601a      	str	r2, [r3, #0]

  // Pdelay_resp_follow_up message.
  *(int16_t*)(buf + 34) = flip16(response_origin_timestamp->secondsField.msb);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	889b      	ldrh	r3, [r3, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f015 fada 	bl	8019200 <lwip_htons>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3322      	adds	r3, #34	@ 0x22
 8003c54:	b212      	sxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(response_origin_timestamp->secondsField.lsb);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003c62:	4610      	mov	r0, r2
 8003c64:	f015 fae1 	bl	801922a <lwip_htonl>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(response_origin_timestamp->nanosecondsField);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003c76:	4610      	mov	r0, r2
 8003c78:	f015 fad7 	bl	801922a <lwip_htonl>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f01f f87a 	bl	8022d86 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f015 fab0 	bl	8019200 <lwip_htons>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3334      	adds	r3, #52	@ 0x34
 8003ca8:	b212      	sxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <ptpd_msg_unpack_peer_delay_resp_follow_up>:

// Unpack PeerDelayRespFollowUp message.
void ptpd_msg_unpack_peer_delay_resp_follow_up(const octet_t *buf, MsgPDelayRespFollowUp *resp_follow_up)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  resp_follow_up->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3322      	adds	r3, #34	@ 0x22
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f015 fa99 	bl	8019200 <lwip_htons>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	809a      	strh	r2, [r3, #4]
  resp_follow_up->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3324      	adds	r3, #36	@ 0x24
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f015 faa4 	bl	801922a <lwip_htonl>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]
  resp_follow_up->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3328      	adds	r3, #40	@ 0x28
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f015 fa9b 	bl	801922a <lwip_htonl>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	609a      	str	r2, [r3, #8]
  memcpy(resp_follow_up->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f103 000c 	add.w	r0, r3, #12
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	332c      	adds	r3, #44	@ 0x2c
 8003d04:	2208      	movs	r2, #8
 8003d06:	4619      	mov	r1, r3
 8003d08:	f01f f83d 	bl	8022d86 <memcpy>
  resp_follow_up->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3334      	adds	r3, #52	@ 0x34
 8003d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4618      	mov	r0, r3
 8003d18:	f015 fa72 	bl	8019200 <lwip_htons>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	829a      	strh	r2, [r3, #20]
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <ptpd_net_queue_init>:
#include "ethernetif.h"
#include "../../Log.h"

// Initialize the network queue.
static void ptpd_net_queue_init(BufQueue *queue)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	821a      	strh	r2, [r3, #16]
  queue->tail = 0;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	825a      	strh	r2, [r3, #18]
  sys_mutex_new(&queue->mutex);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3314      	adds	r3, #20
 8003d44:	4618      	mov	r0, r3
 8003d46:	f01e fc2f 	bl	80225a8 <sys_mutex_new>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <ptpd_net_queue_put>:

// Put data to the network queue.
static bool ptpd_net_queue_put(BufQueue *queue, void *pbuf)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  bool retval = false;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  sys_mutex_lock(&queue->mutex);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3314      	adds	r3, #20
 8003d64:	4618      	mov	r0, r3
 8003d66:	f01e fc35 	bl	80225d4 <sys_mutex_lock>

  // Is there room on the queue for the buffer?
  if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d70:	3301      	adds	r3, #1
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d015      	beq.n	8003dac <ptpd_net_queue_put+0x5a>
  {
    // Place the buffer in the queue.
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	821a      	strh	r2, [r3, #16]
    queue->pbuf[queue->head] = pbuf;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    retval = true;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
  }

  sys_mutex_unlock(&queue->mutex);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3314      	adds	r3, #20
 8003db0:	4618      	mov	r0, r3
 8003db2:	f01e fc1e 	bl	80225f2 <sys_mutex_unlock>

  return retval;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <ptpd_net_queue_get>:

// Get data from the network queue.
static void *ptpd_net_queue_get(BufQueue *queue)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  void *pbuf = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  sys_mutex_lock(&queue->mutex);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3314      	adds	r3, #20
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f01e fbff 	bl	80225d4 <sys_mutex_lock>

  // Is there a buffer on the queue?
  if (queue->tail != queue->head)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d013      	beq.n	8003e0e <ptpd_net_queue_get+0x4e>
  {
    // Get the buffer from the queue.
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	b21a      	sxth	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	825a      	strh	r2, [r3, #18]
    pbuf = queue->pbuf[queue->tail];
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  sys_mutex_unlock(&queue->mutex);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3314      	adds	r3, #20
 8003e12:	4618      	mov	r0, r3
 8003e14:	f01e fbed 	bl	80225f2 <sys_mutex_unlock>

  return pbuf;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <ptpd_net_queue_empty>:

// Free any remaining pbufs in the queue.
static void ptpd_net_queue_empty(BufQueue *queue)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  sys_mutex_lock(&queue->mutex);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f01e fbd0 	bl	80225d4 <sys_mutex_lock>

  // Free each remaining buffer in the queue.
  while (queue->tail != queue->head)
 8003e34:	e015      	b.n	8003e62 <ptpd_net_queue_empty+0x40>
  {
    // Get the buffer from the queue.
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	b21a      	sxth	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	825a      	strh	r2, [r3, #18]
    pbuf_free(queue->pbuf[queue->tail]);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f016 fe81 	bl	801ab64 <pbuf_free>
  while (queue->tail != queue->head)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d1e1      	bne.n	8003e36 <ptpd_net_queue_empty+0x14>
  }

  sys_mutex_unlock(&queue->mutex);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3314      	adds	r3, #20
 8003e76:	4618      	mov	r0, r3
 8003e78:	f01e fbbb 	bl	80225f2 <sys_mutex_unlock>
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <ptpd_net_queue_check>:

// Return true if something is in the queue.
static bool ptpd_net_queue_check(BufQueue  *queue)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  bool  retval = false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  sys_mutex_lock(&queue->mutex);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3314      	adds	r3, #20
 8003e94:	4618      	mov	r0, r3
 8003e96:	f01e fb9d 	bl	80225d4 <sys_mutex_lock>

  if (queue->tail != queue->head) retval = true;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <ptpd_net_queue_check+0x2a>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]

  sys_mutex_unlock(&queue->mutex);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f01e fb9d 	bl	80225f2 <sys_mutex_unlock>

  return retval;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <ptpd_find_iface>:

// Find interface to be used. uuid will be filled with MAC address of the interface.
// The IPv4 address of the interface will be returned.
static int32_t ptpd_find_iface(const octet_t *ifaceName, octet_t *uuid, NetPath *net_path)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  struct netif *iface;

  // Use the default interface.
  iface = netif_default;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <ptpd_find_iface+0x34>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	617b      	str	r3, [r7, #20]

  // Copy the interface hardware address.
  memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f01e ff4e 	bl	8022d86 <memcpy>

  // Return the interface IP address.
  return iface->ip_addr.addr;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	685b      	ldr	r3, [r3, #4]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20010010 	.word	0x20010010

08003efc <ptpd_net_event_callback>:

// Process an incoming message on the event port.
static void ptpd_net_event_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                                    const ip_addr_t *addr, u16_t port)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  NetPath *net_path = (NetPath *) arg;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	617b      	str	r3, [r7, #20]

  // Place the incoming message on the event port queue.
  if (ptpd_net_queue_put(&net_path->eventQ, p))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	3314      	adds	r3, #20
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff1c 	bl	8003d52 <ptpd_net_queue_put>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <ptpd_net_event_callback+0x2a>
  {
    // Alert the PTP thread there is now something to do.
    ptpd_alert();
 8003f20:	f7ff f926 	bl	8003170 <ptpd_alert>
  else
  {
    pbuf_free(p);
    ERROR("PTPD: event port queue full\n");
  }
}
 8003f24:	e002      	b.n	8003f2c <ptpd_net_event_callback+0x30>
    pbuf_free(p);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f016 fe1c 	bl	801ab64 <pbuf_free>
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <ptpd_net_general_callback>:

// Process an incoming message on the general port.
static void ptpd_net_general_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                                      const ip_addr_t *addr, u16_t port)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  NetPath *net_path = (NetPath *) arg;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	617b      	str	r3, [r7, #20]

  // Place the incoming message on the event port queue.
  if (ptpd_net_queue_put(&net_path->generalQ, p))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	332c      	adds	r3, #44	@ 0x2c
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff00 	bl	8003d52 <ptpd_net_queue_put>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <ptpd_net_general_callback+0x2a>
  {
    // Alert the PTP thread there is now something to do.
    ptpd_alert();
 8003f58:	f7ff f90a 	bl	8003170 <ptpd_alert>
  else
  {
    pbuf_free(p);
    ERROR("PTPD: general port queue full\n");
  }
}
 8003f5c:	e002      	b.n	8003f64 <ptpd_net_general_callback+0x30>
    pbuf_free(p);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f016 fe00 	bl	801ab64 <pbuf_free>
}
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <ptpd_net_init>:

// Start all of the UDP stuff.
bool ptpd_net_init(NetPath *net_path, PtpClock *ptp_clock)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  in_addr_t net_addr;
  ip_addr_t interface_addr;
  char addr_str[NET_ADDRESS_LENGTH];

  // Initialize the buffer queues.
  ptpd_net_queue_init(&net_path->eventQ);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fed6 	bl	8003d2c <ptpd_net_queue_init>
  ptpd_net_queue_init(&net_path->generalQ);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	332c      	adds	r3, #44	@ 0x2c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fed1 	bl	8003d2c <ptpd_net_queue_init>

  // Find a network interface.
  interface_addr.addr = ptpd_find_iface(ptp_clock->rtOpts.ifaceName, ptp_clock->portUuidField, net_path);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f103 000c 	add.w	r0, r3, #12
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f203 430a 	addw	r3, r3, #1034	@ 0x40a
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7ff ff93 	bl	8003ec4 <ptpd_find_iface>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]
  if (!(interface_addr.addr))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 808a 	beq.w	80040be <ptpd_net_init+0x152>
    ERROR("PTPD: Failed to find interface address\n");
    goto fail01;
  }

  // Open lwip raw udp interfaces for the event port.
  net_path->eventPcb = udp_new();
 8003faa:	f01e f889 	bl	80220c0 <udp_new>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]
  if (NULL == net_path->eventPcb)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8082 	beq.w	80040c2 <ptpd_net_init+0x156>
    ERROR("PTPD: Failed to open event UDP PCB\n");
    goto fail02;
  }

  // Open lwip raw udp interfaces for the general port.
  net_path->generalPcb = udp_new();
 8003fbe:	f01e f87f 	bl	80220c0 <udp_new>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]
  if (NULL == net_path->generalPcb)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06f      	beq.n	80040b0 <ptpd_net_init+0x144>
    ERROR("PTPD: Failed to open general UDP PCB\n");
    goto fail03;
  }

  // Configure network (broadcast/unicast) addresses (unicast disabled).
  net_path->unicastAddr = 0;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

  // Init general multicast IP address.
  strcpy(addr_str, DEFAULT_PTP_DOMAIN_ADDRESS);
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	4a3d      	ldr	r2, [pc, #244]	@ (80040d0 <ptpd_net_init+0x164>)
 8003fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 8003fe2:	f107 021c 	add.w	r2, r7, #28
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f014 f99f 	bl	8018330 <ip4addr_aton>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d052      	beq.n	800409e <ptpd_net_init+0x132>
  {
    ERROR("PTPD: failed to encode multi-cast address: %s\n", addr_str);
    goto fail04;
  }
  net_path->multicastAddr = net_addr;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	605a      	str	r2, [r3, #4]

  // Join multicast group (for receiving) on specified interface.
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 8004000:	f107 021c 	add.w	r2, r7, #28
 8004004:	f107 0318 	add.w	r3, r7, #24
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f013 fafa 	bl	8017604 <igmp_joingroup>

  // Init peer multicast IP address.
  strcpy(addr_str, PEER_PTP_DOMAIN_ADDRESS);
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	4a2f      	ldr	r2, [pc, #188]	@ (80040d4 <ptpd_net_init+0x168>)
 8004016:	ca07      	ldmia	r2, {r0, r1, r2}
 8004018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 800401c:	f107 021c 	add.w	r2, r7, #28
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f014 f982 	bl	8018330 <ip4addr_aton>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d037      	beq.n	80040a2 <ptpd_net_init+0x136>
  {
    ERROR("PTPD: failed to encode peer multi-cast address: %s\n", addr_str);
    goto fail04;
  }
  net_path->peerMulticastAddr = net_addr;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]

  // Join peer multicast group (for receiving) on specified interface.
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 800403a:	f107 021c 	add.w	r2, r7, #28
 800403e:	f107 0318 	add.w	r3, r7, #24
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f013 fadd 	bl	8017604 <igmp_joingroup>

  // Multicast send only on specified interface.
  net_path->eventPcb->mcast_ip4.addr = net_path->multicastAddr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	619a      	str	r2, [r3, #24]
  net_path->generalPcb->mcast_ip4.addr = net_path->multicastAddr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	619a      	str	r2, [r3, #24]

  // Establish the appropriate UDP bindings/connections for event port.
  udp_recv(net_path->eventPcb, ptpd_net_event_callback, net_path);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	491c      	ldr	r1, [pc, #112]	@ (80040d8 <ptpd_net_init+0x16c>)
 8004066:	4618      	mov	r0, r3
 8004068:	f01d ffc8 	bl	8021ffc <udp_recv>
  udp_bind(net_path->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f240 123f 	movw	r2, #319	@ 0x13f
 8004074:	4919      	ldr	r1, [pc, #100]	@ (80040dc <ptpd_net_init+0x170>)
 8004076:	4618      	mov	r0, r3
 8004078:	f01d fea2 	bl	8021dc0 <udp_bind>

  // Establish the appropriate UDP bindings/connections for general port.
  udp_recv(net_path->generalPcb, ptpd_net_general_callback, net_path);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4917      	ldr	r1, [pc, #92]	@ (80040e0 <ptpd_net_init+0x174>)
 8004084:	4618      	mov	r0, r3
 8004086:	f01d ffb9 	bl	8021ffc <udp_recv>
  udp_bind(net_path->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004092:	4912      	ldr	r1, [pc, #72]	@ (80040dc <ptpd_net_init+0x170>)
 8004094:	4618      	mov	r0, r3
 8004096:	f01d fe93 	bl	8021dc0 <udp_bind>

  // Return success.
  return true;
 800409a:	2301      	movs	r3, #1
 800409c:	e013      	b.n	80040c6 <ptpd_net_init+0x15a>
    goto fail04;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <ptpd_net_init+0x138>
    goto fail04;
 80040a2:	bf00      	nop

fail04:
  udp_remove(net_path->generalPcb);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f01d ffc7 	bl	802203c <udp_remove>
 80040ae:	e000      	b.n	80040b2 <ptpd_net_init+0x146>
    goto fail03;
 80040b0:	bf00      	nop
fail03:
  udp_remove(net_path->eventPcb);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f01d ffc0 	bl	802203c <udp_remove>
 80040bc:	e002      	b.n	80040c4 <ptpd_net_init+0x158>
    goto fail01;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <ptpd_net_init+0x158>
    goto fail02;
 80040c2:	bf00      	nop
fail02:
fail01:
  return false;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	08023ea8 	.word	0x08023ea8
 80040d4:	08023eb4 	.word	0x08023eb4
 80040d8:	08003efd 	.word	0x08003efd
 80040dc:	08028bec 	.word	0x08028bec
 80040e0:	08003f35 	.word	0x08003f35

080040e4 <ptpd_net_shutdown>:

// Shut down the UDP and network stuff.
bool ptpd_net_shutdown(NetPath *net_path)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  ip_addr_t multicast_addr;

  DBG("ptpd_net_shutdown\n");

  // Leave multicast group.
  multicast_addr.addr = net_path->multicastAddr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
  if (multicast_addr.addr) igmp_leavegroup(IP_ADDR_ANY, &multicast_addr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <ptpd_net_shutdown+0x20>
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4619      	mov	r1, r3
 80040fe:	4818      	ldr	r0, [pc, #96]	@ (8004160 <ptpd_net_shutdown+0x7c>)
 8004100:	f013 fb5c 	bl	80177bc <igmp_leavegroup>

  // Disconnect and close the event UDP interface.
  if (net_path->eventPcb)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <ptpd_net_shutdown+0x42>
  {
    udp_disconnect(net_path->eventPcb);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f01d ff4b 	bl	8021fac <udp_disconnect>
    udp_remove(net_path->eventPcb);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f01d ff8e 	bl	802203c <udp_remove>
    net_path->eventPcb = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  }

  // Disconnect and close the general UDP interface.
  if (net_path->generalPcb)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <ptpd_net_shutdown+0x64>
  {
    udp_disconnect(net_path->generalPcb);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4618      	mov	r0, r3
 8004134:	f01d ff3a 	bl	8021fac <udp_disconnect>
    udp_remove(net_path->generalPcb);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4618      	mov	r0, r3
 800413e:	f01d ff7d 	bl	802203c <udp_remove>
    net_path->generalPcb = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  }

  // Clear the network addresses.
  net_path->multicastAddr = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
  net_path->unicastAddr = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

  // Return success.
  return true;
 8004154:	2301      	movs	r3, #1
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	08028bec 	.word	0x08028bec

08004164 <ptpd_net_select>:

// Wait for a packet  to come in on either port.  For now, there is no wait.
// Simply check to  see if a packet is available on either port and return 1,
// otherwise return 0.
int32_t ptpd_net_select(NetPath *net_path, const TimeInternal *timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  // Check the packet queues.  If there is data, return true.
  if (ptpd_net_queue_check(&net_path->eventQ) || ptpd_net_queue_check(&net_path->generalQ)) return 1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3314      	adds	r3, #20
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fe86 	bl	8003e84 <ptpd_net_queue_check>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <ptpd_net_select+0x2a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	332c      	adds	r3, #44	@ 0x2c
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fe7e 	bl	8003e84 <ptpd_net_queue_check>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <ptpd_net_select+0x2e>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <ptpd_net_select+0x30>

  return 0;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <ptpd_net_empty_event_queue>:

// Delete all waiting packets in event queue.
void ptpd_net_empty_event_queue(NetPath *net_path)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  ptpd_net_queue_empty(&net_path->eventQ);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3314      	adds	r3, #20
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe3a 	bl	8003e22 <ptpd_net_queue_empty>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <ptpd_net_recv>:

// Receive the next buffer from the given queue.
static ssize_t ptpd_net_recv(octet_t *buf, TimeInternal *time, BufQueue *queue)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08a      	sub	sp, #40	@ 0x28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  u16_t length;
  struct pbuf *p;
  struct pbuf *pcopy;

  // Get the next buffer from the queue.
  if ((p = (struct pbuf*) ptpd_net_queue_get(queue)) == NULL)
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fdfc 	bl	8003dc0 <ptpd_net_queue_get>
 80041c8:	61b8      	str	r0, [r7, #24]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <ptpd_net_recv+0x1e>
  {
    return 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e04a      	b.n	800426a <ptpd_net_recv+0xb4>
  }

  // Verify that we have enough space to store the contents.
  if (p->tot_len > PACKET_SIZE)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	891b      	ldrh	r3, [r3, #8]
 80041d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80041dc:	d904      	bls.n	80041e8 <ptpd_net_recv+0x32>
  {
    ERROR("PTPD: received truncated message\n");
    pbuf_free(p);
 80041de:	69b8      	ldr	r0, [r7, #24]
 80041e0:	f016 fcc0 	bl	801ab64 <pbuf_free>
    return 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e040      	b.n	800426a <ptpd_net_recv+0xb4>
  }

  // Verify there is contents to copy.
  if (p->tot_len == 0)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	891b      	ldrh	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <ptpd_net_recv+0x44>
  {
    ERROR("PTPD: received empty packet\n");
    pbuf_free(p);
 80041f0:	69b8      	ldr	r0, [r7, #24]
 80041f2:	f016 fcb7 	bl	801ab64 <pbuf_free>
    return 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e037      	b.n	800426a <ptpd_net_recv+0xb4>
  }

  // Get the timestamp of the packet.
  if (time != NULL)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <ptpd_net_recv+0x5e>
  {
    time->seconds = p->timestamp_sec;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	601a      	str	r2, [r3, #0]
    time->nanoseconds = p->timestamp_nsec;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	605a      	str	r2, [r3, #4]
  }

  // Get the length of the buffer to copy.
  length = p->tot_len;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	891b      	ldrh	r3, [r3, #8]
 8004218:	82fb      	strh	r3, [r7, #22]

  // Copy the pbuf payload into the buffer.
  pcopy = p;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	61fb      	str	r3, [r7, #28]
  j = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  for (i = 0; i < length; i++)
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
 8004226:	e018      	b.n	800425a <ptpd_net_recv+0xa4>
  {
    // Copy the next byte in the payload.
    buf[i] = ((u8_t *)pcopy->payload)[j++];
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	1c59      	adds	r1, r3, #1
 8004230:	6239      	str	r1, [r7, #32]
 8004232:	441a      	add	r2, r3
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	440b      	add	r3, r1
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	701a      	strb	r2, [r3, #0]

    // Skip to the next buffer in the payload?
    if (j == pcopy->len)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	895b      	ldrh	r3, [r3, #10]
 8004242:	461a      	mov	r2, r3
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	4293      	cmp	r3, r2
 8004248:	d104      	bne.n	8004254 <ptpd_net_recv+0x9e>
    {
      // Move to the next buffer.
      pcopy = pcopy->next;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61fb      	str	r3, [r7, #28]
      j = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  for (i = 0; i < length; i++)
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	3301      	adds	r3, #1
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
 800425a:	8afb      	ldrh	r3, [r7, #22]
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	429a      	cmp	r2, r3
 8004260:	dbe2      	blt.n	8004228 <ptpd_net_recv+0x72>
    }
  }

  // Free up the pbuf (chain).
  pbuf_free(p);
 8004262:	69b8      	ldr	r0, [r7, #24]
 8004264:	f016 fc7e 	bl	801ab64 <pbuf_free>

  return length;
 8004268:	8afb      	ldrh	r3, [r7, #22]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <ptpd_net_recv_event>:

ssize_t ptpd_net_recv_event(NetPath *net_path, octet_t *buf, TimeInternal *time)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  return ptpd_net_recv(buf, time, &net_path->eventQ);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3314      	adds	r3, #20
 8004282:	461a      	mov	r2, r3
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	68b8      	ldr	r0, [r7, #8]
 8004288:	f7ff ff95 	bl	80041b6 <ptpd_net_recv>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <ptpd_net_recv_general>:

ssize_t ptpd_net_recv_general(NetPath *net_path, octet_t *buf, TimeInternal *time)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  return ptpd_net_recv(buf, time, &net_path->generalQ);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	332c      	adds	r3, #44	@ 0x2c
 80042a6:	461a      	mov	r2, r3
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	68b8      	ldr	r0, [r7, #8]
 80042ac:	f7ff ff83 	bl	80041b6 <ptpd_net_recv>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <ptpd_net_send>:

static ssize_t ptpd_net_send(const octet_t *buf, int16_t  length, TimeInternal *time, const int32_t * addr, struct udp_pcb * pcb)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	460b      	mov	r3, r1
 80042ca:	817b      	strh	r3, [r7, #10]
  err_t result;
  struct pbuf *p;
  PtpTime_t timestamp;

  // Allocate the tx pbuf based on the current size.
  p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80042cc:	897b      	ldrh	r3, [r7, #10]
 80042ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80042d2:	4619      	mov	r1, r3
 80042d4:	2036      	movs	r0, #54	@ 0x36
 80042d6:	f016 f92f 	bl	801a538 <pbuf_alloc>
 80042da:	61f8      	str	r0, [r7, #28]
  if (NULL == p)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d03c      	beq.n	800435c <ptpd_net_send+0xa0>
    ERROR("PTPD: Failed to allocate transmit protocol buffer\n");
    goto fail01;
  }

  // Copy the incoming data into the pbuf payload.
  result = pbuf_take(p, buf, length);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	461a      	mov	r2, r3
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	69f8      	ldr	r0, [r7, #28]
 80042ea:	f016 feb3 	bl	801b054 <pbuf_take>
 80042ee:	4603      	mov	r3, r0
 80042f0:	76fb      	strb	r3, [r7, #27]

  // Fill in the magic timestamp word so that the MAC interface records the TX time
  p->timestamp_sec = PTP_TIMESTAMP_RECORD_MAGIC;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <ptpd_net_send+0xb0>)
 80042f6:	611a      	str	r2, [r3, #16]
  p->timestamp_nsec = PTP_TIMESTAMP_RECORD_MAGIC;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <ptpd_net_send+0xb0>)
 80042fc:	615a      	str	r2, [r3, #20]

  if (ERR_OK != result)
 80042fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <ptpd_net_send+0x50>
  {
    ERROR("PTPD: Failed to copy data into protocol buffer (%i)\n", result);
    length = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	817b      	strh	r3, [r7, #10]
    goto fail02;
 800430a:	e023      	b.n	8004354 <ptpd_net_send+0x98>
  }

  // Send the buffer.
  result = udp_sendto(pcb, p, (void *)addr, pcb->local_port);
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	8a5b      	ldrh	r3, [r3, #18]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004316:	f01d fb59 	bl	80219cc <udp_sendto>
 800431a:	4603      	mov	r3, r0
 800431c:	76fb      	strb	r3, [r7, #27]
  if (ERR_OK != result)
 800431e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <ptpd_net_send+0x70>
  {
    ERROR("PTPD: Failed to send data (%i)\n", result);
    length = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	817b      	strh	r3, [r7, #10]
    goto fail02;
 800432a:	e013      	b.n	8004354 <ptpd_net_send+0x98>
  }

  // Try to get the actual packet TX time from the MAC
  if (time != NULL && ethernetif_GetTxTimestamp(&timestamp, 100))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00f      	beq.n	8004352 <ptpd_net_send+0x96>
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	2164      	movs	r1, #100	@ 0x64
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc fb9d 	bl	8000a78 <ethernetif_GetTxTimestamp>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <ptpd_net_send+0x96>
  {
    time->seconds = timestamp.tv_sec;
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
    time->nanoseconds = timestamp.tv_nsec;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	e000      	b.n	8004354 <ptpd_net_send+0x98>
  }

fail02:
 8004352:	bf00      	nop
  pbuf_free(p);
 8004354:	69f8      	ldr	r0, [r7, #28]
 8004356:	f016 fc05 	bl	801ab64 <pbuf_free>
 800435a:	e000      	b.n	800435e <ptpd_net_send+0xa2>
    goto fail01;
 800435c:	bf00      	nop

fail01:
  return length;
 800435e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	55667788 	.word	0x55667788

08004370 <ptpd_net_send_event>:

ssize_t ptpd_net_send_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal *time)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, time, &net_path->multicastAddr, net_path->eventPcb);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	68b8      	ldr	r0, [r7, #8]
 8004394:	f7ff ff92 	bl	80042bc <ptpd_net_send>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ptpd_net_send_peer_event>:

ssize_t ptpd_net_send_peer_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal* time)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af02      	add	r7, sp, #8
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, time, &net_path->peerMulticastAddr, net_path->eventPcb);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f103 0208 	add.w	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f7ff ff78 	bl	80042bc <ptpd_net_send>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <ptpd_net_send_general>:

ssize_t ptpd_net_send_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af02      	add	r7, sp, #8
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	4613      	mov	r3, r2
 80043e2:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, NULL, &net_path->multicastAddr, net_path->generalPcb);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	2200      	movs	r2, #0
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	f7ff ff60 	bl	80042bc <ptpd_net_send>
 80043fc:	4603      	mov	r3, r0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <ptpd_net_send_peer_general>:

ssize_t ptpd_net_send_peer_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af02      	add	r7, sp, #8
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, NULL, &net_path->peerMulticastAddr, net_path->generalPcb);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f103 0208 	add.w	r2, r3, #8
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	2200      	movs	r2, #0
 8004428:	68b8      	ldr	r0, [r7, #8]
 800442a:	f7ff ff47 	bl	80042bc <ptpd_net_send>
 800442e:	4603      	mov	r3, r0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <ptpd_protocol_to_state>:
#endif

// Change state of PTP stack. Perform actions required when leaving
// 'port_state' and entering 'state'.
void ptpd_protocol_to_state(PtpClock *ptp_clock, uint8_t state)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  DBG("leaving state %s\n", state_string(ptp_clock->portDS.portState));

  ptp_clock->messageActivity = true;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  // Leaving state tasks.
  switch (ptp_clock->portDS.portState)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004452:	3b03      	subs	r3, #3
 8004454:	2b05      	cmp	r3, #5
 8004456:	d851      	bhi.n	80044fc <ptpd_protocol_to_state+0xc4>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <ptpd_protocol_to_state+0x28>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	080044e1 	.word	0x080044e1
 8004464:	080044ef 	.word	0x080044ef
 8004468:	08004479 	.word	0x08004479
 800446c:	080044cd 	.word	0x080044cd
 8004470:	08004493 	.word	0x08004493
 8004474:	08004493 	.word	0x08004493
  {
    case PTP_MASTER:
      ptpd_servo_init_clock(ptp_clock);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f001 fb59 	bl	8005b30 <ptpd_servo_init_clock>
      ptpd_timer_stop(SYNC_INTERVAL_TIMER);
 800447e:	2002      	movs	r0, #2
 8004480:	f001 ff8e 	bl	80063a0 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_INTERVAL_TIMER);
 8004484:	2004      	movs	r0, #4
 8004486:	f001 ff8b 	bl	80063a0 <ptpd_timer_stop>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 800448a:	2000      	movs	r0, #0
 800448c:	f001 ff88 	bl	80063a0 <ptpd_timer_stop>
      break;
 8004490:	e035      	b.n	80044fe <ptpd_protocol_to_state+0xc6>

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	2b07      	cmp	r3, #7
 8004496:	d032      	beq.n	80044fe <ptpd_protocol_to_state+0xc6>
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	2b08      	cmp	r3, #8
 800449c:	d02f      	beq.n	80044fe <ptpd_protocol_to_state+0xc6>
      {
        break;
      }
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 800449e:	2003      	movs	r0, #3
 80044a0:	f001 ff7e 	bl	80063a0 <ptpd_timer_stop>
      switch (ptp_clock->portDS.delayMechanism)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d002      	beq.n	80044b4 <ptpd_protocol_to_state+0x7c>
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d004      	beq.n	80044bc <ptpd_protocol_to_state+0x84>
        case P2P:
          ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
          break;
        default:
          // None.
          break;
 80044b2:	e007      	b.n	80044c4 <ptpd_protocol_to_state+0x8c>
          ptpd_timer_stop(DELAYREQ_INTERVAL_TIMER);
 80044b4:	2001      	movs	r0, #1
 80044b6:	f001 ff73 	bl	80063a0 <ptpd_timer_stop>
          break;
 80044ba:	e003      	b.n	80044c4 <ptpd_protocol_to_state+0x8c>
          ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 80044bc:	2000      	movs	r0, #0
 80044be:	f001 ff6f 	bl	80063a0 <ptpd_timer_stop>
          break;
 80044c2:	bf00      	nop
      }
      ptpd_servo_init_clock(ptp_clock);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 fb33 	bl	8005b30 <ptpd_servo_init_clock>
      break;
 80044ca:	e018      	b.n	80044fe <ptpd_protocol_to_state+0xc6>

    case PTP_PASSIVE:
      ptpd_servo_init_clock(ptp_clock);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 fb2f 	bl	8005b30 <ptpd_servo_init_clock>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f001 ff64 	bl	80063a0 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 80044d8:	2003      	movs	r0, #3
 80044da:	f001 ff61 	bl	80063a0 <ptpd_timer_stop>
      break;
 80044de:	e00e      	b.n	80044fe <ptpd_protocol_to_state+0xc6>

    case PTP_LISTENING:
      ptpd_servo_init_clock(ptp_clock);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 fb25 	bl	8005b30 <ptpd_servo_init_clock>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 80044e6:	2003      	movs	r0, #3
 80044e8:	f001 ff5a 	bl	80063a0 <ptpd_timer_stop>
      break;
 80044ec:	e007      	b.n	80044fe <ptpd_protocol_to_state+0xc6>

    case PTP_PRE_MASTER:
      ptpd_servo_init_clock(ptp_clock);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f001 fb1e 	bl	8005b30 <ptpd_servo_init_clock>
      ptpd_timer_stop(QUALIFICATION_TIMEOUT);
 80044f4:	2005      	movs	r0, #5
 80044f6:	f001 ff53 	bl	80063a0 <ptpd_timer_stop>
      break;
 80044fa:	e000      	b.n	80044fe <ptpd_protocol_to_state+0xc6>

    default:
      break;
 80044fc:	bf00      	nop
  }

  DBG("entering state %s\n", state_string(state));

  // Entering state tasks.
  switch (state)
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	2b08      	cmp	r3, #8
 8004502:	f200 816b 	bhi.w	80047dc <ptpd_protocol_to_state+0x3a4>
 8004506:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <ptpd_protocol_to_state+0xd4>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	08004543 	.word	0x08004543
 8004514:	0800454d 	.word	0x0800454d
 8004518:	08004557 	.word	0x08004557
 800451c:	080045a7 	.word	0x080045a7
 8004520:	080045a7 	.word	0x080045a7
 8004524:	08004671 	.word	0x08004671
 8004528:	080046ff 	.word	0x080046ff
 800452c:	080047d3 	.word	0x080047d3
  {
    case PTP_INITIALIZING:
      ptp_clock->portDS.portState = PTP_INITIALIZING;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_INITIALIZING;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering INITIALIZING state");
      break;
 8004540:	e14d      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_FAULTY:
      ptp_clock->portDS.portState = PTP_FAULTY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering FAULTY state");
      break;
 800454a:	e148      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_DISABLED:
      ptp_clock->portDS.portState = PTP_DISABLED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering DISABLED state");
      break;
 8004554:	e143      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_LISTENING:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800455c:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd07      	ble.n	8004578 <ptpd_protocol_to_state+0x140>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800456e:	461a      	mov	r2, r3
 8004570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004574:	4093      	lsls	r3, r2
 8004576:	e007      	b.n	8004588 <ptpd_protocol_to_state+0x150>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800457e:	425b      	negs	r3, r3
 8004580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004584:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4619      	mov	r1, r3
 800458e:	2003      	movs	r0, #3
 8004590:	f001 feca 	bl	8006328 <ptpd_timer_start>
      ptp_clock->portDS.portState = PTP_LISTENING;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2203      	movs	r2, #3
 8004598:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_LISTENING;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2203      	movs	r2, #3
 80045a0:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering LISTENING state");
      break;
 80045a4:	e11b      	b.n	80047de <ptpd_protocol_to_state+0x3a6>
      // ptp_clock->portDS.portState = PTP_PRE_MASTER;
      // break;

    case PTP_MASTER:
      // It may change during slave state.
      ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	dd07      	ble.n	80045c8 <ptpd_protocol_to_state+0x190>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045be:	461a      	mov	r2, r3
 80045c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045c4:	4093      	lsls	r3, r2
 80045c6:	e007      	b.n	80045d8 <ptpd_protocol_to_state+0x1a0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045ce:	425b      	negs	r3, r3
 80045d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045d4:	fa42 f303 	asr.w	r3, r2, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	2002      	movs	r0, #2
 80045dc:	f001 fea4 	bl	8006328 <ptpd_timer_start>
      DBG("SYNC INTERVAL TIMER : %li \n", pow2ms(ptp_clock->portDS.logSyncInterval));
      ptpd_timer_start(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logAnnounceInterval));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dd07      	ble.n	80045fa <ptpd_protocol_to_state+0x1c2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80045f0:	461a      	mov	r2, r3
 80045f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045f6:	4093      	lsls	r3, r2
 80045f8:	e007      	b.n	800460a <ptpd_protocol_to_state+0x1d2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004600:	425b      	negs	r3, r3
 8004602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004606:	fa42 f303 	asr.w	r3, r2, r3
 800460a:	4619      	mov	r1, r3
 800460c:	2004      	movs	r0, #4
 800460e:	f001 fe8b 	bl	8006328 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8004618:	2b01      	cmp	r3, #1
 800461a:	d021      	beq.n	8004660 <ptpd_protocol_to_state+0x228>
 800461c:	2b02      	cmp	r3, #2
 800461e:	d121      	bne.n	8004664 <ptpd_protocol_to_state+0x22c>
      {
        case E2E:
            // None.
            break;
        case P2P:
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval) + 1));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004626:	2b00      	cmp	r3, #0
 8004628:	dd08      	ble.n	800463c <ptpd_protocol_to_state+0x204>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004630:	461a      	mov	r2, r3
 8004632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004636:	4093      	lsls	r3, r2
 8004638:	3301      	adds	r3, #1
 800463a:	e008      	b.n	800464e <ptpd_protocol_to_state+0x216>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004642:	425b      	negs	r3, r3
 8004644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004648:	fa42 f303 	asr.w	r3, r2, r3
 800464c:	3301      	adds	r3, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f001 fdd2 	bl	80061f8 <ptpd_get_rand>
 8004654:	4603      	mov	r3, r0
 8004656:	4619      	mov	r1, r3
 8004658:	2000      	movs	r0, #0
 800465a:	f001 fe65 	bl	8006328 <ptpd_timer_start>
            break;
 800465e:	e002      	b.n	8004666 <ptpd_protocol_to_state+0x22e>
            break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <ptpd_protocol_to_state+0x22e>
        default:
            break;
 8004664:	bf00      	nop
      }
      ptp_clock->portDS.portState = PTP_MASTER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2205      	movs	r2, #5
 800466a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 800466e:	e0b6      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_PASSIVE:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004676:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800467e:	2b00      	cmp	r3, #0
 8004680:	dd07      	ble.n	8004692 <ptpd_protocol_to_state+0x25a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004688:	461a      	mov	r2, r3
 800468a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800468e:	4093      	lsls	r3, r2
 8004690:	e007      	b.n	80046a2 <ptpd_protocol_to_state+0x26a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004698:	425b      	negs	r3, r3
 800469a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800469e:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	2003      	movs	r0, #3
 80046aa:	f001 fe3d 	bl	8006328 <ptpd_timer_start>
      if (ptp_clock->portDS.delayMechanism == P2P)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d11d      	bne.n	80046f4 <ptpd_protocol_to_state+0x2bc>
      {
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db08      	blt.n	80046d4 <ptpd_protocol_to_state+0x29c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046c8:	3301      	adds	r3, #1
 80046ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	e007      	b.n	80046e4 <ptpd_protocol_to_state+0x2ac>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046da:	43db      	mvns	r3, r3
 80046dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046e0:	fa42 f303 	asr.w	r3, r2, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fd87 	bl	80061f8 <ptpd_get_rand>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4619      	mov	r1, r3
 80046ee:	2000      	movs	r0, #0
 80046f0:	f001 fe1a 	bl	8006328 <ptpd_timer_start>
      }
      ptp_clock->portDS.portState = PTP_PASSIVE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2206      	movs	r2, #6
 80046f8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 80046fc:	e06f      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_UNCALIBRATED:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004704:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800470c:	2b00      	cmp	r3, #0
 800470e:	dd07      	ble.n	8004720 <ptpd_protocol_to_state+0x2e8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004716:	461a      	mov	r2, r3
 8004718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800471c:	4093      	lsls	r3, r2
 800471e:	e007      	b.n	8004730 <ptpd_protocol_to_state+0x2f8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004726:	425b      	negs	r3, r3
 8004728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800472c:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4619      	mov	r1, r3
 8004736:	2003      	movs	r0, #3
 8004738:	f001 fdf6 	bl	8006328 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8004742:	2b01      	cmp	r3, #1
 8004744:	d002      	beq.n	800474c <ptpd_protocol_to_state+0x314>
 8004746:	2b02      	cmp	r3, #2
 8004748:	d01f      	beq.n	800478a <ptpd_protocol_to_state+0x352>
        case P2P:
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
            break;
        default:
            // None.
            break;
 800474a:	e03d      	b.n	80047c8 <ptpd_protocol_to_state+0x390>
            ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 8004752:	2b00      	cmp	r3, #0
 8004754:	db08      	blt.n	8004768 <ptpd_protocol_to_state+0x330>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 800475c:	3301      	adds	r3, #1
 800475e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	e007      	b.n	8004778 <ptpd_protocol_to_state+0x340>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 800476e:	43db      	mvns	r3, r3
 8004770:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004774:	fa42 f303 	asr.w	r3, r2, r3
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fd3d 	bl	80061f8 <ptpd_get_rand>
 800477e:	4603      	mov	r3, r0
 8004780:	4619      	mov	r1, r3
 8004782:	2001      	movs	r0, #1
 8004784:	f001 fdd0 	bl	8006328 <ptpd_timer_start>
            break;
 8004788:	e01e      	b.n	80047c8 <ptpd_protocol_to_state+0x390>
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004790:	2b00      	cmp	r3, #0
 8004792:	db08      	blt.n	80047a6 <ptpd_protocol_to_state+0x36e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 800479a:	3301      	adds	r3, #1
 800479c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	e007      	b.n	80047b6 <ptpd_protocol_to_state+0x37e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80047ac:	43db      	mvns	r3, r3
 80047ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047b2:	fa42 f303 	asr.w	r3, r2, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fd1e 	bl	80061f8 <ptpd_get_rand>
 80047bc:	4603      	mov	r3, r0
 80047be:	4619      	mov	r1, r3
 80047c0:	2000      	movs	r0, #0
 80047c2:	f001 fdb1 	bl	8006328 <ptpd_timer_start>
            break;
 80047c6:	bf00      	nop
      }
      ptp_clock->portDS.portState = PTP_UNCALIBRATED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2207      	movs	r2, #7
 80047cc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 80047d0:	e005      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    case PTP_SLAVE:
      ptp_clock->portDS.portState = PTP_SLAVE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2208      	movs	r2, #8
 80047d6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 80047da:	e000      	b.n	80047de <ptpd_protocol_to_state+0x3a6>

    default:
      break;
 80047dc:	bf00      	nop
  }
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop

080047e8 <ptpd_protocol_do_init>:

static bool ptpd_protocol_do_init(PtpClock *ptp_clock)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  // Initialize networking.
  ptpd_net_shutdown(&ptp_clock->netPath);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fc74 	bl	80040e4 <ptpd_net_shutdown>

  // Initialize the network.
  if (!ptpd_net_init(&ptp_clock->netPath, ptp_clock))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fbb1 	bl	8003f6c <ptpd_net_init>
 800480a:	4603      	mov	r3, r0
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <ptpd_protocol_do_init+0x32>
  {
    ERROR("ptpd_protocol_do_init: failed to initialize network\n");
    return false;
 8004816:	2300      	movs	r3, #0
 8004818:	e012      	b.n	8004840 <ptpd_protocol_do_init+0x58>
  }
  else
  {
    // Initialize other stuff.
    ptpd_clock_init(ptp_clock);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd ff1d 	bl	800265a <ptpd_clock_init>
    ptpd_timer_init();
 8004820:	f001 fd56 	bl	80062d0 <ptpd_timer_init>
    ptpd_servo_init_clock(ptp_clock);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 f983 	bl	8005b30 <ptpd_servo_init_clock>
    ptpd_m1(ptp_clock);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe f8d7 	bl	80029de <ptpd_m1>
    ptpd_msg_pack_header(ptp_clock, ptp_clock->msgObuf);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fe fd3a 	bl	80032b2 <ptpd_msg_pack_header>
    return true;
 800483e:	2301      	movs	r3, #1
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <ptpd_protocol_do_state>:

// Run PTP stack in current state.
// Handle actions and events for 'port_state'.
void ptpd_protocol_do_state(PtpClock *ptp_clock)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  ptp_clock->messageActivity = false;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  switch (ptp_clock->portDS.portState)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800485e:	3b03      	subs	r3, #3
 8004860:	2b05      	cmp	r3, #5
 8004862:	d82f      	bhi.n	80048c4 <ptpd_protocol_do_state+0x7c>
    case PTP_SLAVE:
    case PTP_PRE_MASTER:
    case PTP_MASTER:
    case PTP_PASSIVE:
      // State decision event.
      if (get_flag(ptp_clock->events, STATE_DECISION_EVENT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02a      	beq.n	80048c8 <ptpd_protocol_do_state+0x80>
      {
        DBGV("event STATE_DECISION_EVENT\n");
        clear_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004878:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
        ptp_clock->recommendedState = ptpd_bmc(ptp_clock);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe fb61 	bl	8002f4a <ptpd_bmc>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
        DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));

        switch (ptp_clock->recommendedState)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 8004898:	3b05      	subs	r3, #5
 800489a:	2b01      	cmp	r3, #1
 800489c:	d80e      	bhi.n	80048bc <ptpd_protocol_do_state+0x74>
        {
          case PTP_MASTER:
          case PTP_PASSIVE:
            if (ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <ptpd_protocol_do_state+0x6a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80048ae:	2bff      	cmp	r3, #255	@ 0xff
 80048b0:	d106      	bne.n	80048c0 <ptpd_protocol_do_state+0x78>
            {
                ptp_clock->recommendedState = PTP_LISTENING;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
                DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));
            }
            break;
 80048ba:	e001      	b.n	80048c0 <ptpd_protocol_do_state+0x78>

          default:
            break;
 80048bc:	bf00      	nop
 80048be:	e003      	b.n	80048c8 <ptpd_protocol_do_state+0x80>
            break;
 80048c0:	bf00      	nop
        }
      }
      break;
 80048c2:	e001      	b.n	80048c8 <ptpd_protocol_do_state+0x80>

    default:
      break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <ptpd_protocol_do_state+0x82>
      break;
 80048c8:	bf00      	nop
  }

  switch (ptp_clock->recommendedState)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	f200 80a6 	bhi.w	8004a22 <ptpd_protocol_do_state+0x1da>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <ptpd_protocol_do_state+0x94>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004a23 	.word	0x08004a23
 80048e0:	08004a23 	.word	0x08004a23
 80048e4:	08004a23 	.word	0x08004a23
 80048e8:	08004a09 	.word	0x08004a09
 80048ec:	08004a23 	.word	0x08004a23
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004a23 	.word	0x08004a23
 80048fc:	08004953 	.word	0x08004953
  {
    case PTP_MASTER:
      switch (ptp_clock->portDS.portState)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004906:	2b04      	cmp	r3, #4
 8004908:	d002      	beq.n	8004910 <ptpd_protocol_do_state+0xc8>
 800490a:	2b05      	cmp	r3, #5
 800490c:	d010      	beq.n	8004930 <ptpd_protocol_do_state+0xe8>
 800490e:	e00a      	b.n	8004926 <ptpd_protocol_do_state+0xde>
      {
        case PTP_PRE_MASTER:
          if (ptpd_timer_expired(QUALIFICATION_TIMEOUT))
 8004910:	2005      	movs	r0, #5
 8004912:	f001 fd65 	bl	80063e0 <ptpd_timer_expired>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <ptpd_protocol_do_state+0xec>
            ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 800491c:	2105      	movs	r1, #5
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fd8a 	bl	8004438 <ptpd_protocol_to_state>
          break;
 8004924:	e006      	b.n	8004934 <ptpd_protocol_do_state+0xec>
        case PTP_MASTER:
          break;
        default:
          ptpd_protocol_to_state(ptp_clock, PTP_PRE_MASTER);
 8004926:	2104      	movs	r1, #4
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fd85 	bl	8004438 <ptpd_protocol_to_state>
          break;
 800492e:	e002      	b.n	8004936 <ptpd_protocol_do_state+0xee>
          break;
 8004930:	bf00      	nop
 8004932:	e07b      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>
          break;
 8004934:	bf00      	nop
      }
      break;
 8004936:	e079      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>

    case PTP_PASSIVE:
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 8004944:	429a      	cmp	r2, r3
 8004946:	d06e      	beq.n	8004a26 <ptpd_protocol_do_state+0x1de>
        ptpd_protocol_to_state(ptp_clock, PTP_PASSIVE);
 8004948:	2106      	movs	r1, #6
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fd74 	bl	8004438 <ptpd_protocol_to_state>
      break;
 8004950:	e069      	b.n	8004a26 <ptpd_protocol_do_state+0x1de>

    case PTP_SLAVE:
      switch (ptp_clock->portDS.portState)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004958:	2b07      	cmp	r3, #7
 800495a:	d002      	beq.n	8004962 <ptpd_protocol_do_state+0x11a>
 800495c:	2b08      	cmp	r3, #8
 800495e:	d023      	beq.n	80049a8 <ptpd_protocol_do_state+0x160>
 8004960:	e049      	b.n	80049f6 <ptpd_protocol_do_state+0x1ae>
      {
        case PTP_UNCALIBRATED:
          if (get_flag(ptp_clock->events, MASTER_CLOCK_SELECTED))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <ptpd_protocol_do_state+0x140>
          {
            DBG("event MASTER_CLOCK_SELECTED\n");
            clear_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004976:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
            ptpd_protocol_to_state(ptp_clock, PTP_SLAVE);
 8004980:	2108      	movs	r1, #8
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fd58 	bl	8004438 <ptpd_protocol_to_state>
          }
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800498e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004992:	2b00      	cmp	r3, #0
 8004994:	d034      	beq.n	8004a00 <ptpd_protocol_do_state+0x1b8>
          {
            DBG("event MASTER_CLOCK_CHANGED\n");
            clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800499c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
          }
          break;
 80049a6:	e02b      	b.n	8004a00 <ptpd_protocol_do_state+0x1b8>

        case PTP_SLAVE:
          if (get_flag(ptp_clock->events, SYNCHRONIZATION_FAULT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <ptpd_protocol_do_state+0x186>
          {
              DBG("event SYNCHRONIZATION_FAULT\n");
              clear_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80049c6:	2107      	movs	r1, #7
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fd35 	bl	8004438 <ptpd_protocol_to_state>
          }
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <ptpd_protocol_do_state+0x1bc>
          {
              DBG("event MASTER_CLOCK_CHANGED\n");
              clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80049ec:	2107      	movs	r1, #7
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fd22 	bl	8004438 <ptpd_protocol_to_state>
          }
          break;
 80049f4:	e006      	b.n	8004a04 <ptpd_protocol_do_state+0x1bc>

        default:
          ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80049f6:	2107      	movs	r1, #7
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fd1d 	bl	8004438 <ptpd_protocol_to_state>
          break;
 80049fe:	e002      	b.n	8004a06 <ptpd_protocol_do_state+0x1be>
          break;
 8004a00:	bf00      	nop
 8004a02:	e013      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>
          break;
 8004a04:	bf00      	nop
      }
      break;
 8004a06:	e011      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>

    case PTP_LISTENING:
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d008      	beq.n	8004a2a <ptpd_protocol_do_state+0x1e2>
      {
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004a18:	2103      	movs	r1, #3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fd0c 	bl	8004438 <ptpd_protocol_to_state>
      }
      break;
 8004a20:	e003      	b.n	8004a2a <ptpd_protocol_do_state+0x1e2>
    case PTP_INITIALIZING:
      break;

    default:
      DBG("ptpd_protocol_do_state: unrecognized recommended state %li\n", ptp_clock->recommendedState);
      break;
 8004a22:	bf00      	nop
 8004a24:	e002      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>
      break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <ptpd_protocol_do_state+0x1e4>
      break;
 8004a2a:	bf00      	nop
  }

  switch (ptp_clock->portDS.portState)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d87b      	bhi.n	8004b2e <ptpd_protocol_do_state+0x2e6>
 8004a36:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <ptpd_protocol_do_state+0x1f4>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a8b 	.word	0x08004a8b
 8004a48:	08004a93 	.word	0x08004a93
 8004a4c:	08004b2f 	.word	0x08004b2f
 8004a50:	08004afd 	.word	0x08004afd
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a93 	.word	0x08004a93
 8004a5c:	08004a93 	.word	0x08004a93
  {
    case PTP_INITIALIZING:
      if (ptpd_protocol_do_init(ptp_clock) == true)
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fec1 	bl	80047e8 <ptpd_protocol_do_init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <ptpd_protocol_do_state+0x22e>
      {
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fce2 	bl	8004438 <ptpd_protocol_to_state>
      }
      else
      {
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
      }
      break;
 8004a74:	e05e      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004a76:	2101      	movs	r1, #1
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fcdd 	bl	8004438 <ptpd_protocol_to_state>
      break;
 8004a7e:	e059      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>

    case PTP_FAULTY:
      // Imaginary troubleshooting.
      DBG("event FAULT_CLEARED for state PTP_FAULT\n");
      ptpd_protocol_to_state(ptp_clock, PTP_INITIALIZING);
 8004a80:	2100      	movs	r1, #0
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fcd8 	bl	8004438 <ptpd_protocol_to_state>
      return;
 8004a88:	e054      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>

    case PTP_DISABLED:
      handle(ptp_clock);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f856 	bl	8004b3c <handle>
      break;
 8004a90:	e050      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>

    case PTP_LISTENING:
    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
    case PTP_PASSIVE:
      if (ptpd_timer_expired(ANNOUNCE_RECEIPT_TIMER))
 8004a92:	2003      	movs	r0, #3
 8004a94:	f001 fca4 	bl	80063e0 <ptpd_timer_expired>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02a      	beq.n	8004af4 <ptpd_protocol_do_state+0x2ac>
      {
        DBGV("event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES for state %s\n",
             state_string(ptp_clock->portDS.portState));
        ptp_clock->foreignMasterDS.count = 0;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ptp_clock->foreignMasterDS.i = 0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        if (!(ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8004ab4:	f083 0301 	eor.w	r3, r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d010      	beq.n	8004ae0 <ptpd_protocol_do_state+0x298>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004ac4:	2bff      	cmp	r3, #255	@ 0xff
 8004ac6:	d00b      	beq.n	8004ae0 <ptpd_protocol_do_state+0x298>
        {
          ptpd_m1(ptp_clock);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fd ff88 	bl	80029de <ptpd_m1>
          ptp_clock->recommendedState = PTP_MASTER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
          DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));
          ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 8004ad6:	2105      	movs	r1, #5
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fcad 	bl	8004438 <ptpd_protocol_to_state>
        }
        else if (ptp_clock->portDS.portState != PTP_LISTENING)
        {
          ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
        }
        break;
 8004ade:	e028      	b.n	8004b32 <ptpd_protocol_do_state+0x2ea>
        else if (ptp_clock->portDS.portState != PTP_LISTENING)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d023      	beq.n	8004b32 <ptpd_protocol_do_state+0x2ea>
          ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004aea:	2103      	movs	r1, #3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fca3 	bl	8004438 <ptpd_protocol_to_state>
        break;
 8004af2:	e01e      	b.n	8004b32 <ptpd_protocol_do_state+0x2ea>
      }
      handle(ptp_clock);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f821 	bl	8004b3c <handle>
      break;
 8004afa:	e01b      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>

    case PTP_MASTER:
      if (ptpd_timer_expired(SYNC_INTERVAL_TIMER))
 8004afc:	2002      	movs	r0, #2
 8004afe:	f001 fc6f 	bl	80063e0 <ptpd_timer_expired>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <ptpd_protocol_do_state+0x2c6>
      {
        DBGV("event SYNC_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
        issue_sync(ptp_clock);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fe48 	bl	800579e <issue_sync>
      }
      if (ptpd_timer_expired(ANNOUNCE_INTERVAL_TIMER))
 8004b0e:	2004      	movs	r0, #4
 8004b10:	f001 fc66 	bl	80063e0 <ptpd_timer_expired>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <ptpd_protocol_do_state+0x2d8>
      {
        DBGV("event ANNOUNCE_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
        issue_announce(ptp_clock);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fe14 	bl	8005748 <issue_announce>
      }
      handle(ptp_clock);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f80b 	bl	8004b3c <handle>
      issue_delay_req_timer_expired(ptp_clock);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fda4 	bl	8005674 <issue_delay_req_timer_expired>
      break;
 8004b2c:	e002      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>

    default:
      DBG("ptpd_protocol_do_state: do unrecognized state %li\n", ptp_clock->portDS.portState);
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <ptpd_protocol_do_state+0x2ec>
        break;
 8004b32:	bf00      	nop
  }
}
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop

08004b3c <handle>:

// Check and handle received messages.
static void handle(PtpClock *ptp_clock)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  int ret;
  bool is_from_self;
  TimeInternal time = { 0, 0 };
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  if (!ptp_clock->messageActivity)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3408 	ldrb.w	r3, [r3, #1032]	@ 0x408
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <handle+0x48>
  {
    ret = ptpd_net_select(&ptp_clock->netPath, 0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fafd 	bl	8004164 <ptpd_net_select>
 8004b6a:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da04      	bge.n	8004b7c <handle+0x40>
    {
      ERROR("handle: failed to poll sockets\n");
      ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004b72:	2101      	movs	r1, #1
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fc5f 	bl	8004438 <ptpd_protocol_to_state>
      return;
 8004b7a:	e0f8      	b.n	8004d6e <handle+0x232>
    }
    else if (!ret)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80ec 	beq.w	8004d5c <handle+0x220>
  }

  DBGVV("handle: something\n");

  // Receive an event.
  ptp_clock->msgIbufLength = ptpd_net_recv_event(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8004b90:	f107 0208 	add.w	r2, r7, #8
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7ff fb6c 	bl	8004272 <ptpd_net_recv_event>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364

  // Local time is not UTC, we can calculate UTC on demand, otherwise UTC time is not used
  // time.seconds += ptp_clock->timePropertiesDS.currentUtcOffset;
  DBGV("handle: ptpd_net_recv_event returned %li\n", ptp_clock->msgIbufLength);

  if (ptp_clock->msgIbufLength < 0)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da04      	bge.n	8004bb6 <handle+0x7a>
  {
    ERROR("handle: failed to receive on the event socket\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004bac:	2101      	movs	r1, #1
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fc42 	bl	8004438 <ptpd_protocol_to_state>
    return;
 8004bb4:	e0db      	b.n	8004d6e <handle+0x232>
  }
  else if (!ptp_clock->msgIbufLength)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11e      	bne.n	8004bfe <handle+0xc2>
  {
    // Receive a general packet.
    ptp_clock->msgIbufLength = ptpd_net_recv_general(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8004bcc:	f107 0208 	add.w	r2, r7, #8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7ff fb60 	bl	8004296 <ptpd_net_recv_general>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    DBGV("handle: ptpd_net_recv_general returned %li\n", ptp_clock->msgIbufLength);
    if (ptp_clock->msgIbufLength < 0)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da04      	bge.n	8004bf2 <handle+0xb6>
    {
      ERROR("handle: failed to receive on the general socket\n");
      ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004be8:	2101      	movs	r1, #1
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fc24 	bl	8004438 <ptpd_protocol_to_state>
      return;
 8004bf0:	e0bd      	b.n	8004d6e <handle+0x232>
    }
    else if (!ptp_clock->msgIbufLength)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80b1 	beq.w	8004d60 <handle+0x224>
      return;
  }

  ptp_clock->messageActivity = true;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  if (ptp_clock->msgIbufLength < HEADER_LENGTH)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004c0c:	2b21      	cmp	r3, #33	@ 0x21
 8004c0e:	dc04      	bgt.n	8004c1a <handle+0xde>
  {
    ERROR("handle: message shorter than header length\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fc10 	bl	8004438 <ptpd_protocol_to_state>
    return;
 8004c18:	e0a9      	b.n	8004d6e <handle+0x232>
  }

  ptpd_msg_unpack_header(ptp_clock->msgIbuf, &ptp_clock->msgTmpHeader);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	33c0      	adds	r3, #192	@ 0xc0
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe faae 	bl	8003188 <ptpd_msg_unpack_header>
  DBGV("handle: unpacked message type %li\n", ptp_clock->msgTmpHeader.messageType);

  if (ptp_clock->msgTmpHeader.versionPTP != ptp_clock->portDS.versionNumber)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 20c2 	ldrb.w	r2, [r3, #194]	@ 0xc2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	f040 8093 	bne.w	8004d64 <handle+0x228>
  {
    DBGV("handle: ignore version %li message\n", ptp_clock->msgTmpHeader.versionPTP);
    return;
  }

  if (ptp_clock->msgTmpHeader.domainNumber != ptp_clock->defaultDS.domainNumber)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 20c6 	ldrb.w	r2, [r3, #198]	@ 0xc6
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	f040 808c 	bne.w	8004d68 <handle+0x22c>
    DBGV("handle: ignore message from domainNumber %li\n", ptp_clock->msgTmpHeader.domainNumber);
    return;
  }

  // Spec 9.5.2.2
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                            &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	33d8      	adds	r3, #216	@ 0xd8
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fd fdb6 	bl	80027ce <ptpd_is_same_port_identity>
 8004c62:	4603      	mov	r3, r0
 8004c64:	74fb      	strb	r3, [r7, #19]

  // Subtract the inbound latency adjustment if it is not a loop back and the
  // time stamp seems reasonable.
  if (!is_from_self && time.seconds > 0)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	f083 0301 	eor.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <handle+0x150>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dd09      	ble.n	8004c8c <handle+0x150>
      ptpd_sub_time(&time, &time, &ptp_clock->inboundLatency);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8004c7e:	f107 0108 	add.w	r1, r7, #8
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd fc2a 	bl	80024e0 <ptpd_sub_time>

  switch (ptp_clock->msgTmpHeader.messageType)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004c92:	2b0d      	cmp	r3, #13
 8004c94:	d86a      	bhi.n	8004d6c <handle+0x230>
 8004c96:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <handle+0x160>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004ce1 	.word	0x08004ce1
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d6d 	.word	0x08004d6d
 8004cb0:	08004d6d 	.word	0x08004d6d
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d1d 	.word	0x08004d1d
 8004cc4:	08004d39 	.word	0x08004d39
 8004cc8:	08004cd5 	.word	0x08004cd5
 8004ccc:	08004d51 	.word	0x08004d51
 8004cd0:	08004d45 	.word	0x08004d45
  {
    case ANNOUNCE:
      handle_announce(ptp_clock, is_from_self);
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f84b 	bl	8004d74 <handle_announce>
      break;
 8004cde:	e046      	b.n	8004d6e <handle+0x232>

    case SYNC:
      handle_sync(ptp_clock, &time, is_from_self);
 8004ce0:	7cfa      	ldrb	r2, [r7, #19]
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8fb 	bl	8004ee4 <handle_sync>
      break;
 8004cee:	e03e      	b.n	8004d6e <handle+0x232>

    case FOLLOW_UP:
      handle_follow_up(ptp_clock, is_from_self);
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f9a1 	bl	800503c <handle_follow_up>
      break;
 8004cfa:	e038      	b.n	8004d6e <handle+0x232>

    case DELAY_REQ:
      handle_delay_req(ptp_clock, &time, is_from_self);
 8004cfc:	7cfa      	ldrb	r2, [r7, #19]
 8004cfe:	f107 0308 	add.w	r3, r7, #8
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa35 	bl	8005174 <handle_delay_req>
      break;
 8004d0a:	e030      	b.n	8004d6e <handle+0x232>

    case PDELAY_REQ:
      handle_peer_delay_req(ptp_clock, &time, is_from_self);
 8004d0c:	7cfa      	ldrb	r2, [r7, #19]
 8004d0e:	f107 0308 	add.w	r3, r7, #8
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 faf5 	bl	8005304 <handle_peer_delay_req>
      break;
 8004d1a:	e028      	b.n	8004d6e <handle+0x232>

    case DELAY_RESP:
      handle_delay_resp(ptp_clock, is_from_self);
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa6b 	bl	80051fc <handle_delay_resp>
      break;
 8004d26:	e022      	b.n	8004d6e <handle+0x232>

    case PDELAY_RESP:
      handle_peer_delay_resp(ptp_clock, &time, is_from_self);
 8004d28:	7cfa      	ldrb	r2, [r7, #19]
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fb45 	bl	80053c0 <handle_peer_delay_resp>
      break;
 8004d36:	e01a      	b.n	8004d6e <handle+0x232>

    case PDELAY_RESP_FOLLOW_UP:
      handle_peer_delay_resp_follow_up(ptp_clock, is_from_self);
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fbfb 	bl	8005538 <handle_peer_delay_resp_follow_up>
      break;
 8004d42:	e014      	b.n	8004d6e <handle+0x232>

    case MANAGEMENT:
      handle_management(ptp_clock, is_from_self);
 8004d44:	7cfb      	ldrb	r3, [r7, #19]
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fc7b 	bl	8005644 <handle_management>
      break;
 8004d4e:	e00e      	b.n	8004d6e <handle+0x232>

    case SIGNALING:
      handle_signaling(ptp_clock, is_from_self);
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fc81 	bl	800565c <handle_signaling>
      break;
 8004d5a:	e008      	b.n	8004d6e <handle+0x232>
      return;
 8004d5c:	bf00      	nop
 8004d5e:	e006      	b.n	8004d6e <handle+0x232>
      return;
 8004d60:	bf00      	nop
 8004d62:	e004      	b.n	8004d6e <handle+0x232>
    return;
 8004d64:	bf00      	nop
 8004d66:	e002      	b.n	8004d6e <handle+0x232>
    return;
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <handle+0x232>

    default:
      DBG("handle: unrecognized message %li\n", ptp_clock->msgTmpHeader.messageType);
      break;
 8004d6c:	bf00      	nop
  }
}
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <handle_announce>:

// Spec 9.5.3.
static void handle_announce(PtpClock *ptp_clock, bool is_from_self)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  bool is_from_current_parent = false;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]

  DBGV("handle_announce: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < ANNOUNCE_LENGTH)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d8c:	dc04      	bgt.n	8004d98 <handle_announce+0x24>
  {
    ERROR("handle_announce: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004d8e:	2101      	movs	r1, #1
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fb51 	bl	8004438 <ptpd_protocol_to_state>
    return;
 8004d96:	e0a2      	b.n	8004ede <handle_announce+0x16a>
  }

  if (is_from_self)
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 809c 	bne.w	8004ed8 <handle_announce+0x164>
  {
    DBGV("handle_announce: ignore from self\n");
    return;
  }

  switch (ptp_clock->portDS.portState)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	dc7b      	bgt.n	8004ea2 <handle_announce+0x12e>
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	da08      	bge.n	8004dc0 <handle_announce+0x4c>
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	dc03      	bgt.n	8004dba <handle_announce+0x46>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f280 8092 	bge.w	8004edc <handle_announce+0x168>
 8004db8:	e073      	b.n	8004ea2 <handle_announce+0x12e>
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d052      	beq.n	8004e64 <handle_announce+0xf0>
 8004dbe:	e070      	b.n	8004ea2 <handle_announce+0x12e>
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      // Valid announce message is received : BMC algorithm will be executed.
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fd fcf6 	bl	80027ce <ptpd_is_same_port_identity>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	33e8      	adds	r3, #232	@ 0xe8
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7fe fb2d 	bl	8003452 <ptpd_msg_unpack_announce>
      if (is_from_current_parent)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d028      	beq.n	8004e50 <handle_announce+0xdc>
      {
        ptpd_s1(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	33e8      	adds	r3, #232	@ 0xe8
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fe72 	bl	8002af4 <ptpd_s1>
        // Reset Timer handling Announce receipt timeout.
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004e16:	4619      	mov	r1, r3
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dd07      	ble.n	8004e32 <handle_announce+0xbe>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e2e:	4093      	lsls	r3, r2
 8004e30:	e007      	b.n	8004e42 <handle_announce+0xce>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e38:	425b      	negs	r3, r3
 8004e3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e3e:	fa42 f303 	asr.w	r3, r2, r3
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4619      	mov	r1, r3
 8004e48:	2003      	movs	r0, #3
 8004e4a:	f001 fa6d 	bl	8006328 <ptpd_timer_start>
      {
        DBGV("handle_announce: from another foreign master\n");
        // ptpd_add_foreign takes care  of AnnounceUnpacking.
        ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
      }
      break;
 8004e4e:	e046      	b.n	8004ede <handle_announce+0x16a>
        ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	33e8      	adds	r3, #232	@ 0xe8
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fd fcd6 	bl	800280e <ptpd_add_foreign>
      break;
 8004e62:	e03c      	b.n	8004ede <handle_announce+0x16a>

    case PTP_PASSIVE:
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004e6a:	4619      	mov	r1, r3
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dd07      	ble.n	8004e86 <handle_announce+0x112>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e82:	4093      	lsls	r3, r2
 8004e84:	e007      	b.n	8004e96 <handle_announce+0x122>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e8c:	425b      	negs	r3, r3
 8004e8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e92:	fa42 f303 	asr.w	r3, r2, r3
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	f001 fa43 	bl	8006328 <ptpd_timer_start>
    case PTP_PRE_MASTER:
    case PTP_LISTENING:
    default :

      DBGV("handle_announce: from another foreign master\n");
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	33e8      	adds	r3, #232	@ 0xe8
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fe facf 	bl	8003452 <ptpd_msg_unpack_announce>

      // Valid announce message is received : BMC algorithm will be executed.
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004eba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
      ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	33e8      	adds	r3, #232	@ 0xe8
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd fc9c 	bl	800280e <ptpd_add_foreign>

      break;
 8004ed6:	e002      	b.n	8004ede <handle_announce+0x16a>
    return;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <handle_announce+0x16a>
      break;
 8004edc:	bf00      	nop
  }
}
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <handle_sync>:

static void handle_sync(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	@ 0x28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]
  TimeInternal correction_field;
  TimeInternal origin_timestamp;
  bool is_from_current_parent = false;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  DBGV("handle_sync: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < SYNC_LENGTH)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004efe:	2b2b      	cmp	r3, #43	@ 0x2b
 8004f00:	dc04      	bgt.n	8004f0c <handle_sync+0x28>
  {
    ERROR("handle_sync: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004f02:	2101      	movs	r1, #1
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fa97 	bl	8004438 <ptpd_protocol_to_state>
 8004f0a:	e093      	b.n	8005034 <handle_sync+0x150>
    return;
  }

  switch (ptp_clock->portDS.portState)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	f200 8089 	bhi.w	800502a <handle_sync+0x146>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <handle_sync+0x3c>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	0800502b 	.word	0x0800502b
 8004f24:	0800502b 	.word	0x0800502b
 8004f28:	0800502b 	.word	0x0800502b
 8004f2c:	0800502b 	.word	0x0800502b
 8004f30:	0800502b 	.word	0x0800502b
 8004f34:	08005017 	.word	0x08005017
 8004f38:	08005023 	.word	0x08005023
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004f45 	.word	0x08004f45
      DBGV("handle_sync: disreguard\n");
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      if (is_from_self)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d171      	bne.n	800502e <handle_sync+0x14a>
      {
        DBGV("handle_sync: ignore from self\n");
        break;
      }
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fd fc39 	bl	80027ce <ptpd_is_same_port_identity>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if (!is_from_current_parent)
 8004f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f66:	f083 0301 	eor.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d160      	bne.n	8005032 <handle_sync+0x14e>
      {
        DBGV("handle_sync: ignore from another master\n");
        break;
      }
      ptp_clock->timestamp_syncRecv = *time;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8004f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f7c:	e883 0003 	stmia.w	r3, {r0, r1}
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8004f86:	f107 031c 	add.w	r3, r7, #28
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fa03 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>

      if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <handle_sync+0xe4>
      {
        ptp_clock->waitingForFollowUp = true;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
        ptp_clock->recvSyncSequenceId = ptp_clock->msgTmpHeader.sequenceId;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	@ 0xe2
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8a3 23ca 	strh.w	r2, [r3, #970]	@ 0x3ca
        // Save correction_field of Sync message for future use.
        ptp_clock->correctionField_sync = correction_field;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8004fba:	f107 021c 	add.w	r2, r7, #28
 8004fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fc2:	e883 0003 	stmia.w	r3, {r0, r1}
        // Use correction_field of Sync message for future use.
        ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &origin_timestamp, &correction_field);
        ptpd_servo_update_clock(ptp_clock);
        issue_delay_req_timer_expired(ptp_clock);
      }
      break;
 8004fc6:	e035      	b.n	8005034 <handle_sync+0x150>
        ptpd_msg_unpack_sync(ptp_clock->msgIbuf, &ptp_clock->msgTmp.sync);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	33e8      	adds	r3, #232	@ 0xe8
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7fe fb05 	bl	80035e4 <ptpd_msg_unpack_sync>
        ptp_clock->waitingForFollowUp = false;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
        ptpd_to_internal_time(&origin_timestamp, &ptp_clock->msgTmp.sync.originTimestamp);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fa3f 	bl	8002472 <ptpd_to_internal_time>
        ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &origin_timestamp, &correction_field);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 7166 	add.w	r1, r3, #920	@ 0x398
 8004ffa:	f107 031c 	add.w	r3, r7, #28
 8004ffe:	f107 0214 	add.w	r2, r7, #20
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fea6 	bl	8005d54 <ptpd_servo_update_offset>
        ptpd_servo_update_clock(ptp_clock);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f001 f823 	bl	8006054 <ptpd_servo_update_clock>
        issue_delay_req_timer_expired(ptp_clock);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fb30 	bl	8005674 <issue_delay_req_timer_expired>
      break;
 8005014:	e00e      	b.n	8005034 <handle_sync+0x150>

    case PTP_MASTER:
      if (!is_from_self)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f083 0301 	eor.w	r3, r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
        break;
      }
      else
      {
        DBGV("handle_sync: ignore from self\n");
        break;
 8005020:	e008      	b.n	8005034 <handle_sync+0x150>
      }

    case PTP_PASSIVE:
      DBGV("handle_sync: disreguard\n");
      issue_delay_req_timer_expired(ptp_clock);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb26 	bl	8005674 <issue_delay_req_timer_expired>
      break;
 8005028:	e004      	b.n	8005034 <handle_sync+0x150>

    default:
      DBGV("handle_sync: disreguard\n");
      break;
 800502a:	bf00      	nop
 800502c:	e002      	b.n	8005034 <handle_sync+0x150>
        break;
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <handle_sync+0x150>
        break;
 8005032:	bf00      	nop
  }
}
 8005034:	3728      	adds	r7, #40	@ 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop

0800503c <handle_follow_up>:

static void handle_follow_up(PtpClock *ptp_clock, bool is_from_self)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  TimeInternal precise_origin_timestamp;
  bool is_from_current_parent = false;
 8005048:	2300      	movs	r3, #0
 800504a:	77fb      	strb	r3, [r7, #31]

  DBGV("handle_followup: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < FOLLOW_UP_LENGTH)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005052:	2b2b      	cmp	r3, #43	@ 0x2b
 8005054:	dc04      	bgt.n	8005060 <handle_follow_up+0x24>
  {
    ERROR("handle_followup: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff f9ed 	bl	8004438 <ptpd_protocol_to_state>
    return;
 800505e:	e085      	b.n	800516c <handle_follow_up+0x130>
  }

  if (is_from_self)
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d179      	bne.n	800515a <handle_follow_up+0x11e>
  {
    DBGV("handle_followup: ignore from self\n");
    return;
  }

  switch (ptp_clock->portDS.portState)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800506c:	2b08      	cmp	r3, #8
 800506e:	d876      	bhi.n	800515e <handle_follow_up+0x122>
 8005070:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <handle_follow_up+0x3c>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	0800515f 	.word	0x0800515f
 800507c:	0800515f 	.word	0x0800515f
 8005080:	0800515f 	.word	0x0800515f
 8005084:	0800515f 	.word	0x0800515f
 8005088:	0800515f 	.word	0x0800515f
 800508c:	0800515f 	.word	0x0800515f
 8005090:	08005153 	.word	0x08005153
 8005094:	0800509d 	.word	0x0800509d
 8005098:	0800509d 	.word	0x0800509d
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fd fb90 	bl	80027ce <ptpd_is_same_port_identity>
 80050ae:	4603      	mov	r3, r0
 80050b0:	77fb      	strb	r3, [r7, #31]
      if (!ptp_clock->waitingForFollowUp)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d14f      	bne.n	8005162 <handle_follow_up+0x126>
      {
        DBGV("handle_followup: not waiting a message\n");
        break;
      }
      if (!is_from_current_parent)
 80050c2:	7ffb      	ldrb	r3, [r7, #31]
 80050c4:	f083 0301 	eor.w	r3, r3, #1
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d14b      	bne.n	8005166 <handle_follow_up+0x12a>
      {
        DBGV("handle_followup: not from current parent\n");
        break;
      }
      if (ptp_clock->recvSyncSequenceId !=  ptp_clock->msgTmpHeader.sequenceId)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f9b3 23ca 	ldrsh.w	r2, [r3, #970]	@ 0x3ca
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 80050da:	429a      	cmp	r2, r3
 80050dc:	d145      	bne.n	800516a <handle_follow_up+0x12e>
      {
        DBGV("handle_followup: SequenceID doesn't match with last Sync message\n");
        break;
      }
      ptpd_msg_unpack_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.follow);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	33e8      	adds	r3, #232	@ 0xe8
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe fb56 	bl	800379c <ptpd_msg_unpack_follow_up>
      ptp_clock->waitingForFollowUp = false;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

      // Synchronize local clock.

      // Get the time the sync message was sent that this follow-up message is associated with.
      ptpd_to_internal_time(&precise_origin_timestamp, &ptp_clock->msgTmp.follow.preciseOriginTimestamp);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80050fe:	f107 030c 	add.w	r3, r7, #12
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7fd f9b4 	bl	8002472 <ptpd_to_internal_time>

      // Get the correction field of the follow-up message.
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd f93e 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>

      // Add to the correction field the correction field of the sync message.  These two correction
      // fields are combined in a single value that is passed to determine the offset from the master.
      ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_sync);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f503 726c 	add.w	r2, r3, #944	@ 0x3b0
 8005122:	f107 0114 	add.w	r1, r7, #20
 8005126:	f107 0314 	add.w	r3, r7, #20
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd f9bd 	bl	80024aa <ptpd_add_time>
      // Note the sync_event_ingress_timestamp is adjusted by the ptp_clock->inboundLatency.
      // The precise_origin_timestamp is the time that the master sent the sync packet.
      // The meanPathDelay is an estimate of how long it takes the packet to traverse the
      // network from the master to slave.
      // The function also applies an exponential smoothing filter to the offsetFromMaster.
      ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &precise_origin_timestamp, &correction_field);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f503 7166 	add.w	r1, r3, #920	@ 0x398
 8005136:	f107 0314 	add.w	r3, r7, #20
 800513a:	f107 020c 	add.w	r2, r7, #12
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fe08 	bl	8005d54 <ptpd_servo_update_offset>

      // Now that we know the offset from the master, we can adjust our slave clock faster
      // or slower to bring it into alignment with the master clock.
      ptpd_servo_update_clock(ptp_clock);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 ff85 	bl	8006054 <ptpd_servo_update_clock>

      issue_delay_req_timer_expired(ptp_clock);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa92 	bl	8005674 <issue_delay_req_timer_expired>
      break;
 8005150:	e00c      	b.n	800516c <handle_follow_up+0x130>
      DBGV("handle_followup: from another master\n");
      break;

    case PTP_PASSIVE:
      DBGV("handle_followup: disreguard\n");
      issue_delay_req_timer_expired(ptp_clock);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa8e 	bl	8005674 <issue_delay_req_timer_expired>
      break;
 8005158:	e008      	b.n	800516c <handle_follow_up+0x130>
    return;
 800515a:	bf00      	nop
 800515c:	e006      	b.n	800516c <handle_follow_up+0x130>

    default:
      DBG("handle_followup: unrecognized state\n");
      break;
 800515e:	bf00      	nop
 8005160:	e004      	b.n	800516c <handle_follow_up+0x130>
        break;
 8005162:	bf00      	nop
 8005164:	e002      	b.n	800516c <handle_follow_up+0x130>
        break;
 8005166:	bf00      	nop
 8005168:	e000      	b.n	800516c <handle_follow_up+0x130>
        break;
 800516a:	bf00      	nop
  }
}
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <handle_delay_req>:

static void handle_delay_req(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  switch (ptp_clock->portDS.delayMechanism)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <handle_delay_req+0x1e>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d02f      	beq.n	80051f0 <handle_delay_req+0x7c>
      ERROR("handle_delay_req: disreguard in P2P mode\n");
      break;

    default:
      // None.
      break;
 8005190:	e031      	b.n	80051f6 <handle_delay_req+0x82>
      if (ptp_clock->msgIbufLength < DELAY_REQ_LENGTH)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005198:	2b2b      	cmp	r3, #43	@ 0x2b
 800519a:	dc04      	bgt.n	80051a6 <handle_delay_req+0x32>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800519c:	2101      	movs	r1, #1
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff f94a 	bl	8004438 <ptpd_protocol_to_state>
        return;
 80051a4:	e027      	b.n	80051f6 <handle_delay_req+0x82>
      switch (ptp_clock->portDS.portState)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d81d      	bhi.n	80051ec <handle_delay_req+0x78>
 80051b0:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <handle_delay_req+0x44>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051f5 	.word	0x080051f5
 80051bc:	080051f5 	.word	0x080051f5
 80051c0:	080051f5 	.word	0x080051f5
 80051c4:	080051f5 	.word	0x080051f5
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051ed 	.word	0x080051ed
 80051d4:	080051f5 	.word	0x080051f5
 80051d8:	080051ed 	.word	0x080051ed
          issue_delay_resp(ptp_clock, time, &ptp_clock->msgTmpHeader);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	33c0      	adds	r3, #192	@ 0xc0
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fc2f 	bl	8005a48 <issue_delay_resp>
          break;
 80051ea:	e000      	b.n	80051ee <handle_delay_req+0x7a>
          break;
 80051ec:	bf00      	nop
      break;
 80051ee:	e002      	b.n	80051f6 <handle_delay_req+0x82>
      break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <handle_delay_req+0x82>
          return;
 80051f4:	bf00      	nop
  }
}
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <handle_delay_resp>:

static void handle_delay_resp(PtpClock *ptp_clock, bool is_from_self)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  bool is_current_request = false;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  bool is_from_current_parent = false;
 800520c:	2300      	movs	r3, #0
 800520e:	75bb      	strb	r3, [r7, #22]

  switch (ptp_clock->portDS.delayMechanism)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005216:	2b01      	cmp	r3, #1
 8005218:	d002      	beq.n	8005220 <handle_delay_resp+0x24>
 800521a:	2b02      	cmp	r3, #2
 800521c:	d06b      	beq.n	80052f6 <handle_delay_resp+0xfa>
    case P2P:
      ERROR("handle_delay_resp: disreguard in P2P mode\n");
      break;

    default:
      break;
 800521e:	e06d      	b.n	80052fc <handle_delay_resp+0x100>
      if (ptp_clock->msgIbufLength < DELAY_RESP_LENGTH)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005226:	2b35      	cmp	r3, #53	@ 0x35
 8005228:	dc04      	bgt.n	8005234 <handle_delay_resp+0x38>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800522a:	2101      	movs	r1, #1
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff f903 	bl	8004438 <ptpd_protocol_to_state>
        return;
 8005232:	e063      	b.n	80052fc <handle_delay_resp+0x100>
      switch (ptp_clock->portDS.portState)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800523a:	2b03      	cmp	r3, #3
 800523c:	dc01      	bgt.n	8005242 <handle_delay_resp+0x46>
 800523e:	2b00      	cmp	r3, #0
          return;
 8005240:	e05c      	b.n	80052fc <handle_delay_resp+0x100>
 8005242:	3b07      	subs	r3, #7
 8005244:	2b01      	cmp	r3, #1
 8005246:	d858      	bhi.n	80052fa <handle_delay_resp+0xfe>
          ptpd_msg_unpack_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.resp);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	33e8      	adds	r3, #232	@ 0xe8
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7fe fb59 	bl	800390c <ptpd_msg_unpack_delay_resp>
                                      &ptp_clock->parentDS.parentPortIdentity,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                      &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	33d8      	adds	r3, #216	@ 0xd8
          is_from_current_parent = ptpd_is_same_port_identity(
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7fd fab1 	bl	80027ce <ptpd_is_same_port_identity>
 800526c:	4603      	mov	r3, r0
 800526e:	75bb      	strb	r3, [r7, #22]
                                    &ptp_clock->portDS.portIdentity,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                    &ptp_clock->msgTmp.resp.requestingPortIdentity);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	33f4      	adds	r3, #244	@ 0xf4
          is_current_request = ptpd_is_same_port_identity(
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7fd faa6 	bl	80027ce <ptpd_is_same_port_identity>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]
          if (((ptp_clock->sentDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request && is_from_current_parent)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 800528c:	3b01      	subs	r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	@ 0xe2
 8005294:	4293      	cmp	r3, r2
 8005296:	d130      	bne.n	80052fa <handle_delay_resp+0xfe>
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d02d      	beq.n	80052fa <handle_delay_resp+0xfe>
 800529e:	7dbb      	ldrb	r3, [r7, #22]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02a      	beq.n	80052fa <handle_delay_resp+0xfe>
            ptpd_to_internal_time(&ptp_clock->timestamp_delayReqRecv, &ptp_clock->msgTmp.resp.receiveTimestamp);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	33e8      	adds	r3, #232	@ 0xe8
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f7fd f8de 	bl	8002472 <ptpd_to_internal_time>
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd f868 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_servo_update_delay(ptp_clock, &ptp_clock->timestamp_delayReqSend, &ptp_clock->timestamp_delayReqRecv, &correction_field);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f503 7168 	add.w	r1, r3, #928	@ 0x3a0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fdd5 	bl	8005e88 <ptpd_servo_update_delay>
            if (ptp_clock->msgTmpHeader.logMessageInterval != 0x7f)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f993 30e5 	ldrsb.w	r3, [r3, #229]	@ 0xe5
 80052e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80052e6:	d008      	beq.n	80052fa <handle_delay_resp+0xfe>
              ptp_clock->portDS.logMinDelayReqInterval = ptp_clock->msgTmpHeader.logMessageInterval;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f993 20e5 	ldrsb.w	r2, [r3, #229]	@ 0xe5
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
      break;
 80052f4:	e001      	b.n	80052fa <handle_delay_resp+0xfe>
      break;
 80052f6:	bf00      	nop
 80052f8:	e000      	b.n	80052fc <handle_delay_resp+0x100>
      break;
 80052fa:	bf00      	nop
  }
}
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <handle_peer_delay_req>:


static void handle_peer_delay_req(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  switch (ptp_clock->portDS.delayMechanism)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005318:	2b01      	cmp	r3, #1
 800531a:	d04a      	beq.n	80053b2 <handle_peer_delay_req+0xae>
 800531c:	2b02      	cmp	r3, #2
 800531e:	d000      	beq.n	8005322 <handle_peer_delay_req+0x1e>
          break;
      }
      break;

    default:
      break;
 8005320:	e04a      	b.n	80053b8 <handle_peer_delay_req+0xb4>
      if (ptp_clock->msgIbufLength < PDELAY_REQ_LENGTH)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005328:	2b35      	cmp	r3, #53	@ 0x35
 800532a:	dc04      	bgt.n	8005336 <handle_peer_delay_req+0x32>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800532c:	2101      	movs	r1, #1
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff f882 	bl	8004438 <ptpd_protocol_to_state>
        return;
 8005334:	e040      	b.n	80053b8 <handle_peer_delay_req+0xb4>
      switch (ptp_clock->portDS.portState)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800533c:	2b08      	cmp	r3, #8
 800533e:	d832      	bhi.n	80053a6 <handle_peer_delay_req+0xa2>
 8005340:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <handle_peer_delay_req+0x44>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	080053b7 	.word	0x080053b7
 800534c:	080053b7 	.word	0x080053b7
 8005350:	080053b7 	.word	0x080053b7
 8005354:	080053b7 	.word	0x080053b7
 8005358:	080053a7 	.word	0x080053a7
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800536d 	.word	0x0800536d
 8005364:	080053b7 	.word	0x080053b7
 8005368:	0800536d 	.word	0x0800536d
          if (is_from_self)
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11b      	bne.n	80053aa <handle_peer_delay_req+0xa6>
          issue_peer_delay_resp(ptp_clock, time, &ptp_clock->msgTmpHeader);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	33c0      	adds	r3, #192	@ 0xc0
 8005376:	461a      	mov	r2, r3
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fb2d 	bl	80059da <issue_peer_delay_resp>
          if ((time->seconds != 0) && get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <handle_peer_delay_req+0xaa>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <handle_peer_delay_req+0xaa>
            issue_peer_delay_resp_follow_up(ptp_clock, time, &ptp_clock->msgTmpHeader);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	33c0      	adds	r3, #192	@ 0xc0
 800539a:	461a      	mov	r2, r3
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fb7c 	bl	8005a9c <issue_peer_delay_resp_follow_up>
          break;
 80053a4:	e003      	b.n	80053ae <handle_peer_delay_req+0xaa>
          break;
 80053a6:	bf00      	nop
 80053a8:	e006      	b.n	80053b8 <handle_peer_delay_req+0xb4>
            break;
 80053aa:	bf00      	nop
 80053ac:	e004      	b.n	80053b8 <handle_peer_delay_req+0xb4>
          break;
 80053ae:	bf00      	nop
      break;
 80053b0:	e002      	b.n	80053b8 <handle_peer_delay_req+0xb4>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <handle_peer_delay_req+0xb4>
          return;
 80053b6:	bf00      	nop
  }
}
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop

080053c0 <handle_peer_delay_resp>:

static void handle_peer_delay_resp(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	@ 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	71fb      	strb	r3, [r7, #7]
  bool is_current_request;
  TimeInternal correction_field;
  TimeInternal request_receipt_timestamp;

  switch (ptp_clock->portDS.delayMechanism)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f000 80a9 	beq.w	800552c <handle_peer_delay_resp+0x16c>
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d000      	beq.n	80053e0 <handle_peer_delay_resp+0x20>
          break;
      }
      break;

    default:
      break;
 80053de:	e0a8      	b.n	8005532 <handle_peer_delay_resp+0x172>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_LENGTH)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 80053e6:	2b35      	cmp	r3, #53	@ 0x35
 80053e8:	dc04      	bgt.n	80053f4 <handle_peer_delay_resp+0x34>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80053ea:	2101      	movs	r1, #1
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff f823 	bl	8004438 <ptpd_protocol_to_state>
        return;
 80053f2:	e09e      	b.n	8005532 <handle_peer_delay_resp+0x172>
      switch (ptp_clock->portDS.portState)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	f200 8090 	bhi.w	8005520 <handle_peer_delay_resp+0x160>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <handle_peer_delay_resp+0x48>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005531 	.word	0x08005531
 800540c:	08005531 	.word	0x08005531
 8005410:	08005531 	.word	0x08005531
 8005414:	08005531 	.word	0x08005531
 8005418:	08005521 	.word	0x08005521
 800541c:	0800542d 	.word	0x0800542d
 8005420:	08005521 	.word	0x08005521
 8005424:	08005531 	.word	0x08005531
 8005428:	0800542d 	.word	0x0800542d
          if (is_from_self)
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d178      	bne.n	8005524 <handle_peer_delay_resp+0x164>
          ptpd_msg_unpack_peer_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.presp);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	33e8      	adds	r3, #232	@ 0xe8
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f7fe fb75 	bl	8003b2e <ptpd_msg_unpack_peer_delay_resp>
                                  &ptp_clock->portDS.portIdentity,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                  &ptp_clock->msgTmp.presp.requestingPortIdentity);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	33f4      	adds	r3, #244	@ 0xf4
          is_current_request = ptpd_is_same_port_identity(
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fd f9bc 	bl	80027ce <ptpd_is_same_port_identity>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (((ptp_clock->sentPDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8005462:	3b01      	subs	r3, #1
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	@ 0xe2
 800546a:	4293      	cmp	r3, r2
 800546c:	d15c      	bne.n	8005528 <handle_peer_delay_resp+0x168>
 800546e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005472:	2b00      	cmp	r3, #0
 8005474:	d058      	beq.n	8005528 <handle_peer_delay_resp+0x168>
            if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d030      	beq.n	80054e6 <handle_peer_delay_resp+0x126>
              ptp_clock->waitingForPDelayRespFollowUp = true;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 8005494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005498:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_to_internal_time(&request_receipt_timestamp, &ptp_clock->msgTmp.presp.requestReceiptTimestamp);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc ffe2 	bl	8002472 <ptpd_to_internal_time>
              ptp_clock->pdelay_t2 = request_receipt_timestamp;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 80054b4:	f107 0214 	add.w	r2, r7, #20
 80054b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054bc:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80054c6:	f107 031c 	add.w	r3, r7, #28
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fc ff63 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>
              ptp_clock->correctionField_pDelayResp = correction_field;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80054d8:	f107 021c 	add.w	r2, r7, #28
 80054dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e0:	e883 0003 	stmia.w	r3, {r0, r1}
          break;
 80054e4:	e020      	b.n	8005528 <handle_peer_delay_resp+0x168>
              ptp_clock->waitingForPDelayRespFollowUp = false;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 80054f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054fa:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8005504:	f107 031c 	add.w	r3, r7, #28
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f7fc ff44 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>
              ptpd_servo_update_peer_delay(ptp_clock, &correction_field, false);
 8005510:	f107 031c 	add.w	r3, r7, #28
 8005514:	2200      	movs	r2, #0
 8005516:	4619      	mov	r1, r3
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fcf8 	bl	8005f0e <ptpd_servo_update_peer_delay>
          break;
 800551e:	e003      	b.n	8005528 <handle_peer_delay_resp+0x168>
          break;
 8005520:	bf00      	nop
 8005522:	e006      	b.n	8005532 <handle_peer_delay_resp+0x172>
            break;
 8005524:	bf00      	nop
 8005526:	e004      	b.n	8005532 <handle_peer_delay_resp+0x172>
          break;
 8005528:	bf00      	nop
      break;
 800552a:	e002      	b.n	8005532 <handle_peer_delay_resp+0x172>
      break;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <handle_peer_delay_resp+0x172>
          return;
 8005530:	bf00      	nop
  }
}
 8005532:	3728      	adds	r7, #40	@ 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <handle_peer_delay_resp_follow_up>:

static void handle_peer_delay_resp_follow_up(PtpClock *ptp_clock, bool is_from_self)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  TimeInternal response_origin_timestamp;

  switch (ptp_clock->portDS.delayMechanism)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800554a:	2b01      	cmp	r3, #1
 800554c:	d074      	beq.n	8005638 <handle_peer_delay_resp_follow_up+0x100>
 800554e:	2b02      	cmp	r3, #2
 8005550:	d000      	beq.n	8005554 <handle_peer_delay_resp_follow_up+0x1c>
          DBGV("handle_peer_delay_resp_follow_up: unrecognized state\n");
      }
      break;

    default:
      break;
 8005552:	e074      	b.n	800563e <handle_peer_delay_resp_follow_up+0x106>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 800555a:	2b35      	cmp	r3, #53	@ 0x35
 800555c:	dc04      	bgt.n	8005568 <handle_peer_delay_resp_follow_up+0x30>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800555e:	2101      	movs	r1, #1
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fe ff69 	bl	8004438 <ptpd_protocol_to_state>
        return;
 8005566:	e06a      	b.n	800563e <handle_peer_delay_resp_follow_up+0x106>
      switch (ptp_clock->portDS.portState)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800556e:	2b08      	cmp	r3, #8
 8005570:	d864      	bhi.n	800563c <handle_peer_delay_resp_follow_up+0x104>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <handle_peer_delay_resp_follow_up+0x40>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	0800563d 	.word	0x0800563d
 800557c:	0800563d 	.word	0x0800563d
 8005580:	0800563d 	.word	0x0800563d
 8005584:	0800563d 	.word	0x0800563d
 8005588:	0800563d 	.word	0x0800563d
 800558c:	0800559d 	.word	0x0800559d
 8005590:	0800563d 	.word	0x0800563d
 8005594:	0800563d 	.word	0x0800563d
 8005598:	0800559d 	.word	0x0800559d
          if (!ptp_clock->waitingForPDelayRespFollowUp)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 33cd 	ldrb.w	r3, [r3, #973]	@ 0x3cd
 80055a2:	f083 0301 	eor.w	r3, r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d143      	bne.n	8005634 <handle_peer_delay_resp_follow_up+0xfc>
          if (ptp_clock->msgTmpHeader.sequenceId == ptp_clock->sentPDelayReqSequenceId - 1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80055ba:	3b01      	subs	r3, #1
 80055bc:	429a      	cmp	r2, r3
 80055be:	d13d      	bne.n	800563c <handle_peer_delay_resp_follow_up+0x104>
            ptpd_msg_unpack_peer_delay_resp_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.prespfollow);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	33e8      	adds	r3, #232	@ 0xe8
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe fb71 	bl	8003cb4 <ptpd_msg_unpack_peer_delay_resp_follow_up>
            ptpd_to_internal_time(&response_origin_timestamp, &ptp_clock->msgTmp.prespfollow.responseOriginTimestamp);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fc ff47 	bl	8002472 <ptpd_to_internal_time>
            ptp_clock->pdelay_t3 = response_origin_timestamp;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 80055ea:	f107 0208 	add.w	r2, r7, #8
 80055ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055f2:	e883 0003 	stmia.w	r3, {r0, r1}
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	4611      	mov	r1, r2
 8005602:	4618      	mov	r0, r3
 8005604:	f7fc fec8 	bl	8002398 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_pDelayResp);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f503 726e 	add.w	r2, r3, #952	@ 0x3b8
 800560e:	f107 0110 	add.w	r1, r7, #16
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	4618      	mov	r0, r3
 8005618:	f7fc ff47 	bl	80024aa <ptpd_add_time>
            ptpd_servo_update_peer_delay(ptp_clock, &correction_field, true);
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	2201      	movs	r2, #1
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fc72 	bl	8005f0e <ptpd_servo_update_peer_delay>
            ptp_clock->waitingForPDelayRespFollowUp = false;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
            break;
 8005632:	e000      	b.n	8005636 <handle_peer_delay_resp_follow_up+0xfe>
            break;
 8005634:	bf00      	nop
      break;
 8005636:	e001      	b.n	800563c <handle_peer_delay_resp_follow_up+0x104>
      break;
 8005638:	bf00      	nop
 800563a:	e000      	b.n	800563e <handle_peer_delay_resp_follow_up+0x106>
      break;
 800563c:	bf00      	nop
  }
}
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <handle_management>:

static void handle_management(PtpClock *ptp_clock, bool is_from_self)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  // Do nothing.
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <handle_signaling>:

static void handle_signaling(PtpClock *ptp_clock, bool is_from_self)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  // Do nothing.
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <issue_delay_req_timer_expired>:

static void issue_delay_req_timer_expired(PtpClock *ptp_clock)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  switch (ptp_clock->portDS.delayMechanism)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005682:	2b01      	cmp	r3, #1
 8005684:	d002      	beq.n	800568c <issue_delay_req_timer_expired+0x18>
 8005686:	2b02      	cmp	r3, #2
 8005688:	d02d      	beq.n	80056e6 <issue_delay_req_timer_expired+0x72>
        issue_peer_delay_req(ptp_clock);
      }
      break;

    default:
        break;
 800568a:	e059      	b.n	8005740 <issue_delay_req_timer_expired+0xcc>
      if (ptp_clock->portDS.portState != PTP_SLAVE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005692:	2b08      	cmp	r3, #8
 8005694:	d14f      	bne.n	8005736 <issue_delay_req_timer_expired+0xc2>
      if (ptpd_timer_expired(DELAYREQ_INTERVAL_TIMER))
 8005696:	2001      	movs	r0, #1
 8005698:	f000 fea2 	bl	80063e0 <ptpd_timer_expired>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04b      	beq.n	800573a <issue_delay_req_timer_expired+0xc6>
        ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db08      	blt.n	80056be <issue_delay_req_timer_expired+0x4a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056b2:	3301      	adds	r3, #1
 80056b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	e007      	b.n	80056ce <issue_delay_req_timer_expired+0x5a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056c4:	43db      	mvns	r3, r3
 80056c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056ca:	fa42 f303 	asr.w	r3, r2, r3
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fd92 	bl	80061f8 <ptpd_get_rand>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4619      	mov	r1, r3
 80056d8:	2001      	movs	r0, #1
 80056da:	f000 fe25 	bl	8006328 <ptpd_timer_start>
        issue_delay_req(ptp_clock);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8d9 	bl	8005896 <issue_delay_req>
      break;
 80056e4:	e029      	b.n	800573a <issue_delay_req_timer_expired+0xc6>
      if (ptpd_timer_expired(PDELAYREQ_INTERVAL_TIMER))
 80056e6:	2000      	movs	r0, #0
 80056e8:	f000 fe7a 	bl	80063e0 <ptpd_timer_expired>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d025      	beq.n	800573e <issue_delay_req_timer_expired+0xca>
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db08      	blt.n	800570e <issue_delay_req_timer_expired+0x9a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8005702:	3301      	adds	r3, #1
 8005704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	e007      	b.n	800571e <issue_delay_req_timer_expired+0xaa>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8005714:	43db      	mvns	r3, r3
 8005716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800571a:	fa42 f303 	asr.w	r3, r2, r3
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fd6a 	bl	80061f8 <ptpd_get_rand>
 8005724:	4603      	mov	r3, r0
 8005726:	4619      	mov	r1, r3
 8005728:	2000      	movs	r0, #0
 800572a:	f000 fdfd 	bl	8006328 <ptpd_timer_start>
        issue_peer_delay_req(ptp_clock);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f902 	bl	8005938 <issue_peer_delay_req>
      break;
 8005734:	e003      	b.n	800573e <issue_delay_req_timer_expired+0xca>
        break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <issue_delay_req_timer_expired+0xcc>
      break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <issue_delay_req_timer_expired+0xcc>
      break;
 800573e:	bf00      	nop
  }
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <issue_announce>:


// Pack and send  on general multicast ip adress an Announce message.
static void issue_announce(PtpClock *ptp_clock)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  ptpd_msg_pack_announce(ptp_clock, ptp_clock->msgObuf);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fd fdee 	bl	800333a <ptpd_msg_pack_announce>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, ANNOUNCE_LENGTH))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800576a:	2240      	movs	r2, #64	@ 0x40
 800576c:	4619      	mov	r1, r3
 800576e:	f7fe fe32 	bl	80043d6 <ptpd_net_send_general>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <issue_announce+0x3a>
  {
    ERROR("issue_announce: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fe fe5c 	bl	8004438 <ptpd_protocol_to_state>
  else
  {
    DBGV("issue_announce\n");
    ptp_clock->sentAnnounceSequenceId++;
  }
}
 8005780:	e009      	b.n	8005796 <issue_announce+0x4e>
    ptp_clock->sentAnnounceSequenceId++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f9b3 33c6 	ldrsh.w	r3, [r3, #966]	@ 0x3c6
 8005788:	b29b      	uxth	r3, r3
 800578a:	3301      	adds	r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	b21a      	sxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8a3 23c6 	strh.w	r2, [r3, #966]	@ 0x3c6
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <issue_sync>:

// Pack and send  on event multicast ip adress a Sync message.
static void issue_sync(PtpClock *ptp_clock)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b088      	sub	sp, #32
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  // Try to predict outgoing time stamp.
  ptpd_get_time(&internal_time);
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fd2f 	bl	800620e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 80057b0:	f107 0214 	add.w	r2, r7, #20
 80057b4:	f107 030c 	add.w	r3, r7, #12
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fc fe38 	bl	8002430 <ptpd_from_internal_time>
  ptpd_msg_pack_sync(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80057c6:	f107 0214 	add.w	r2, r7, #20
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fd feae 	bl	800352e <ptpd_msg_pack_sync>

  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, SYNC_LENGTH, &internal_time))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	222c      	movs	r2, #44	@ 0x2c
 80057e4:	f7fe fdc4 	bl	8004370 <ptpd_net_send_event>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <issue_sync+0x5a>
  {
    ERROR("issue_sync: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80057ee:	2101      	movs	r1, #1
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fe fe21 	bl	8004438 <ptpd_protocol_to_state>
    {
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
      issue_follow_up(ptp_clock, &internal_time);
    }
  }
}
 80057f6:	e021      	b.n	800583c <issue_sync+0x9e>
    ptp_clock->sentSyncSequenceId++;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3301      	adds	r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	b21a      	sxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8a3 23c4 	strh.w	r2, [r3, #964]	@ 0x3c4
    if ((internal_time.seconds != 0) && (ptp_clock->defaultDS.twoStepFlag))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <issue_sync+0x9e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00f      	beq.n	800583c <issue_sync+0x9e>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8005822:	f107 010c 	add.w	r1, r7, #12
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	4618      	mov	r0, r3
 800582c:	f7fc fe3d 	bl	80024aa <ptpd_add_time>
      issue_follow_up(ptp_clock, &internal_time);
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f804 	bl	8005844 <issue_follow_up>
}
 800583c:	bf00      	nop
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <issue_follow_up>:

// Pack and send on general multicast ip adress a FollowUp message.
static void issue_follow_up(PtpClock *ptp_clock, const TimeInternal *time)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  Timestamp precise_origin_timestamp;

  ptpd_from_internal_time(time, &precise_origin_timestamp);
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	4619      	mov	r1, r3
 8005854:	6838      	ldr	r0, [r7, #0]
 8005856:	f7fc fdeb 	bl	8002430 <ptpd_from_internal_time>
  ptpd_msg_pack_follow_up(ptp_clock, ptp_clock->msgObuf, &precise_origin_timestamp);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005860:	f107 020c 	add.w	r2, r7, #12
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fd ff3f 	bl	80036ea <ptpd_msg_pack_follow_up>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, FOLLOW_UP_LENGTH))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005878:	222c      	movs	r2, #44	@ 0x2c
 800587a:	4619      	mov	r1, r3
 800587c:	f7fe fdab 	bl	80043d6 <ptpd_net_send_general>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <issue_follow_up+0x4a>
  {
    ERROR("issue_follow_up: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005886:	2101      	movs	r1, #1
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fe fdd5 	bl	8004438 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_follow_up\n");
  }
}
 800588e:	bf00      	nop
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <issue_delay_req>:


// Pack and send on event multicast ip address a DelayReq message.
static void issue_delay_req(PtpClock *ptp_clock)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b088      	sub	sp, #32
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  ptpd_get_time(&internal_time);
 800589e:	f107 030c 	add.w	r3, r7, #12
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fcb3 	bl	800620e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 80058a8:	f107 0214 	add.w	r2, r7, #20
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fc fdbc 	bl	8002430 <ptpd_from_internal_time>

  ptpd_msg_pack_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80058be:	f107 0214 	add.w	r2, r7, #20
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fd feb4 	bl	8003632 <ptpd_msg_pack_delay_req>

  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, DELAY_REQ_LENGTH, &internal_time))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	222c      	movs	r2, #44	@ 0x2c
 80058dc:	f7fe fd48 	bl	8004370 <ptpd_net_send_event>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <issue_delay_req+0x5a>
  {
    ERROR("issue_delay_req: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80058e6:	2101      	movs	r1, #1
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fe fda5 	bl	8004438 <ptpd_protocol_to_state>
    else
    {
      DBGV("issue_delay_req: internal time invalid\n");
    }
  }
}
 80058ee:	e01f      	b.n	8005930 <issue_delay_req+0x9a>
    ptp_clock->sentDelayReqSequenceId++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8a3 23c2 	strh.w	r2, [r3, #962]	@ 0x3c2
    if (internal_time.seconds != 0)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <issue_delay_req+0x9a>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8005910:	f107 010c 	add.w	r1, r7, #12
 8005914:	f107 030c 	add.w	r3, r7, #12
 8005918:	4618      	mov	r0, r3
 800591a:	f7fc fdc6 	bl	80024aa <ptpd_add_time>
      ptp_clock->timestamp_delayReqSend = internal_time;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8005924:	f107 020c 	add.w	r2, r7, #12
 8005928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800592c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005930:	bf00      	nop
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <issue_peer_delay_req>:

// Pack and send on event multicast ip adress a PDelayReq message.
static void issue_peer_delay_req(PtpClock *ptp_clock)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  ptpd_get_time(&internal_time);
 8005940:	f107 030c 	add.w	r3, r7, #12
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fc62 	bl	800620e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 800594a:	f107 0214 	add.w	r2, r7, #20
 800594e:	f107 030c 	add.w	r3, r7, #12
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc fd6b 	bl	8002430 <ptpd_from_internal_time>

  ptpd_msg_pack_peer_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005960:	f107 0214 	add.w	r2, r7, #20
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fe f80c 	bl	8003984 <ptpd_msg_pack_peer_delay_req>

  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_REQ_LENGTH, &internal_time))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	2236      	movs	r2, #54	@ 0x36
 800597e:	f7fe fd10 	bl	80043a2 <ptpd_net_send_peer_event>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <issue_peer_delay_req+0x5a>
  {
    ERROR("issue_peer_delay_req: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005988:	2101      	movs	r1, #1
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fe fd54 	bl	8004438 <ptpd_protocol_to_state>
    {
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
      ptp_clock->pdelay_t1 = internal_time;
    }
  }
}
 8005990:	e01f      	b.n	80059d2 <issue_peer_delay_req+0x9a>
    ptp_clock->sentPDelayReqSequenceId++;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8005998:	b29b      	uxth	r3, r3
 800599a:	3301      	adds	r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	b21a      	sxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
    if (internal_time.seconds != 0)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <issue_peer_delay_req+0x9a>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80059b2:	f107 010c 	add.w	r1, r7, #12
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fc fd75 	bl	80024aa <ptpd_add_time>
      ptp_clock->pdelay_t1 = internal_time;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80059c6:	f107 020c 	add.w	r2, r7, #12
 80059ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059ce:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80059d2:	bf00      	nop
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <issue_peer_delay_resp>:

// Pack and send on event multicast ip adress a PDelayResp message.
static void issue_peer_delay_resp(PtpClock *ptp_clock, TimeInternal *time, const MsgHeader *delay_req_header)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b088      	sub	sp, #32
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  Timestamp request_receipt_timestamp;

  ptpd_from_internal_time(time, &request_receipt_timestamp);
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	4619      	mov	r1, r3
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f7fc fd1f 	bl	8002430 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp(ptp_clock->msgObuf, delay_req_header, &request_receipt_timestamp);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80059f8:	f107 0214 	add.w	r2, r7, #20
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe f823 	bl	8003a4a <ptpd_msg_pack_peer_delay_resp>

  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH, time))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2236      	movs	r2, #54	@ 0x36
 8005a14:	f7fe fcc5 	bl	80043a2 <ptpd_net_send_peer_event>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <issue_peer_delay_resp+0x4e>
  {
    ERROR("issue_peer_delay_resp: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005a1e:	2101      	movs	r1, #1
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7fe fd09 	bl	8004438 <ptpd_protocol_to_state>
      ptpd_add_time(time, time, &ptp_clock->outboundLatency);
    }

    DBGV("issue_peer_delay_resp\n");
  }
}
 8005a26:	e00b      	b.n	8005a40 <issue_peer_delay_resp+0x66>
    if (time->seconds != 0)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <issue_peer_delay_resp+0x66>
      ptpd_add_time(time, time, &ptp_clock->outboundLatency);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8005a36:	461a      	mov	r2, r3
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68b8      	ldr	r0, [r7, #8]
 8005a3c:	f7fc fd35 	bl	80024aa <ptpd_add_time>
}
 8005a40:	bf00      	nop
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <issue_delay_resp>:


// Pack and send on event multicast ip adress a DelayResp message.
static void issue_delay_resp(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader * delayReqHeader)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  Timestamp request_receipt_timestamp;

  ptpd_from_internal_time(time, &request_receipt_timestamp);
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f7fc fce8 	bl	8002430 <ptpd_from_internal_time>
  ptpd_msg_pack_delay_resp(ptp_clock, ptp_clock->msgObuf, delayReqHeader, &request_receipt_timestamp);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7fd febc 	bl	80037ea <ptpd_msg_pack_delay_resp>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005a7e:	2236      	movs	r2, #54	@ 0x36
 8005a80:	4619      	mov	r1, r3
 8005a82:	f7fe fca8 	bl	80043d6 <ptpd_net_send_general>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <issue_delay_resp+0x4c>
  {
    ERROR("issue_delay_resp: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7fe fcd2 	bl	8004438 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_delay_resp\n");
  }
}
 8005a94:	bf00      	nop
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <issue_peer_delay_resp_follow_up>:

static void issue_peer_delay_resp_follow_up(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader *delay_req_header)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  Timestamp response_origin_timestamp;

  ptpd_from_internal_time(time, &response_origin_timestamp);
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	4619      	mov	r1, r3
 8005aae:	68b8      	ldr	r0, [r7, #8]
 8005ab0:	f7fc fcbe 	bl	8002430 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp_follow_up(ptp_clock->msgObuf, delay_req_header, &response_origin_timestamp);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005aba:	f107 0214 	add.w	r2, r7, #20
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe f870 	bl	8003ba6 <ptpd_msg_pack_peer_delay_resp_follow_up>

  if (!ptpd_net_send_peer_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_FOLLOW_UP_LENGTH))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005ad2:	2236      	movs	r2, #54	@ 0x36
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f7fe fc96 	bl	8004406 <ptpd_net_send_peer_general>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <issue_peer_delay_resp_follow_up+0x4c>
  {
    ERROR("issue_peer_delay_resp_follow_up: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7fe fca8 	bl	8004438 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_peer_delay_resp_follow_up\n");
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <max>:
void ptpd_div2_time(TimeInternal*);
int32_t ptpd_floor_log2(uint32_t);

// Return maximum of two numbers.
__STATIC_INLINE int32_t max(int32_t a, int32_t b)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  return a > b ? a : b;
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	bfb8      	it	lt
 8005b02:	4613      	movlt	r3, r2
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <min>:

// Return minimum of two numbers.
__STATIC_INLINE int32_t min(int32_t a, int32_t b)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  return a > b ? b : a;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfa8      	it	ge
 8005b22:	4613      	movge	r3, r2
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <ptpd_servo_init_clock>:
#include <stdlib.h>
#include "ptpd.h"

void ptpd_servo_init_clock(PtpClock *ptp_clock)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  DBG("ptpd_servo_init_clock\n");

  // Clear the time.
  ptp_clock->Tms.seconds = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
  ptp_clock->Tms.nanoseconds = 0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c

  // Clears clock servo accumulator (the I term).
  ptp_clock->observedDrift = 0;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  // One way delay.
  ptp_clock->owd_filt.n = 0;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
  ptp_clock->owd_filt.s = ptp_clock->servo.sDelay;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f9b3 246a 	ldrsh.w	r2, [r3, #1130]	@ 0x46a
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8a3 23e8 	strh.w	r2, [r3, #1000]	@ 0x3e8

  // Offset from master.
  ptp_clock->ofm_filt.n = 0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc
  ptp_clock->ofm_filt.s = ptp_clock->servo.sOffset;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f9b3 246c 	ldrsh.w	r2, [r3, #1132]	@ 0x46c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
    ptp_clock->offsetHistory[0] = 0;
    ptp_clock->offsetHistory[1] = 0;
  }

  // Clear the wait flags.
  ptp_clock->waitingForFollowUp = false;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
  ptp_clock->waitingForPDelayRespFollowUp = false;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd

  // Clear the peer delays.
  ptp_clock->pdelay_t1.seconds = ptp_clock->pdelay_t1.nanoseconds = 0;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
  ptp_clock->pdelay_t2.seconds = ptp_clock->pdelay_t2.nanoseconds = 0;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
  ptp_clock->pdelay_t3.seconds = ptp_clock->pdelay_t3.nanoseconds = 0;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 238c 	ldr.w	r2, [r3, #908]	@ 0x38c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
  ptp_clock->pdelay_t4.seconds = ptp_clock->pdelay_t4.nanoseconds = 0;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

  // Reset parent statistics.
  ptp_clock->parentDS.parentStats = false;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ptp_clock->parentDS.observedParentClockPhaseChangeRate = 0;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	66da      	str	r2, [r3, #108]	@ 0x6c
  ptp_clock->parentDS.observedParentOffsetScaledLogVariance = 0;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  // Level clock.
  if (!ptp_clock->servo.noAdjust)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <ptpd_servo_init_clock+0xd4>
    ptpd_adj_freq(0);
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f000 fb2c 	bl	800625c <ptpd_adj_freq>

  // Empty the event queue.
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fac6 	bl	800419c <ptpd_net_empty_event_queue>
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <ptpd_servo_order>:

static int32_t ptpd_servo_order(int32_t n)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  if (n < 0) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da02      	bge.n	8005c2c <ptpd_servo_order+0x14>
    n = -n;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	425b      	negs	r3, r3
 8005c2a:	607b      	str	r3, [r7, #4]
  }
  if (n == 0) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <ptpd_servo_order+0x1e>
    return 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e004      	b.n	8005c40 <ptpd_servo_order+0x28>
  }
  return ptpd_floor_log2(n);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fc fc9b 	bl	8002574 <ptpd_floor_log2>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <ptpd_servo_filter>:

// Exponential smoothing.
static void ptpd_servo_filter(int32_t *nsec_current, Filter *filter)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  // y_sum[1] = y[1] * 2^s
  // y_sum[n] = y_sum[n-1] + x[n-1] - y[n-1]
  // y[n] = y_sum[n] / 2^s

  // Increment number of samples.
  filter->n++;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	60da      	str	r2, [r3, #12]

  // If it is first time, we are running filter, initialize it.
  if (filter->n == 1)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10a      	bne.n	8005c7a <ptpd_servo_filter+0x32>
  {
    filter->y_prev = *nsec_current;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]
    filter->y_sum = *nsec_current;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	605a      	str	r2, [r3, #4]
    filter->s_prev = 0;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	815a      	strh	r2, [r3, #10]
  }

  s = filter->s;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c80:	60fb      	str	r3, [r7, #12]

  // Speedup filter, if not 2^s > n.
  if ((1 << s) > filter->n)
 8005c82:	2201      	movs	r2, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	409a      	lsls	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dd06      	ble.n	8005c9e <ptpd_servo_filter+0x56>
  {
    // Lower the filter order.
    s = ptpd_servo_order(filter->n);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ffbf 	bl	8005c18 <ptpd_servo_order>
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	e004      	b.n	8005ca8 <ptpd_servo_filter+0x60>
  }
  else
  {
    // Avoid overflowing of n.
    filter->n = 1 << s;
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	60da      	str	r2, [r3, #12]
  }

  // Avoid overflowing of filter. 30 is because using signed 32bit integers.
  s2 = 30 - ptpd_servo_order(max(filter->y_prev, *nsec_current));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f7ff ff1c 	bl	8005af0 <max>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff ffac 	bl	8005c18 <ptpd_servo_order>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f1c3 031e 	rsb	r3, r3, #30
 8005cc6:	60bb      	str	r3, [r7, #8]

  // Use the lower filter order, higher will overflow.
  s = min(s, s2);
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff ff20 	bl	8005b10 <min>
 8005cd0:	60f8      	str	r0, [r7, #12]

  // If the order of the filter changed, change also y_sum value.
  if (filter->s_prev > s)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	da0b      	bge.n	8005cf8 <ptpd_servo_filter+0xb0>
  {
    filter->y_sum >>= (filter->s_prev - s);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005cea:	4619      	mov	r1, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1acb      	subs	r3, r1, r3
 8005cf0:	411a      	asrs	r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e011      	b.n	8005d1c <ptpd_servo_filter+0xd4>
  }
  else if (filter->s_prev < s)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4293      	cmp	r3, r2
 8005d04:	dd0a      	ble.n	8005d1c <ptpd_servo_filter+0xd4>
  {
    filter->y_sum <<= (s - filter->s_prev);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005d10:	4619      	mov	r1, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1a5b      	subs	r3, r3, r1
 8005d16:	409a      	lsls	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  // Compute the filter itself.
  filter->y_sum += *nsec_current - filter->y_prev;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1acb      	subs	r3, r1, r3
 8005d2a:	441a      	add	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
  filter->y_prev = filter->y_sum >> s;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	411a      	asrs	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	601a      	str	r2, [r3, #0]

  // Save previous order of the filter.
  filter->s_prev = s;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	b21a      	sxth	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	815a      	strh	r2, [r3, #10]

  DBGV("PTPD: filter: %li -> %li (%li)\n", *nsec_current, filter->y_prev, s);

  // Actualize target value.
  *nsec_current = filter->y_prev;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <ptpd_servo_update_offset>:

// 11.2
void ptpd_servo_update_offset(PtpClock *ptp_clock, const TimeInternal *sync_event_ingress_timestamp,
                  const TimeInternal *precise_origin_timestamp, const TimeInternal *correction_field)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
        correction_field->seconds,
        correction_field->nanoseconds);
#endif

  // Compute offsetFromMaster.
  ptpd_sub_time(&ptp_clock->Tms, sync_event_ingress_timestamp, precise_origin_timestamp);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fc fbb7 	bl	80024e0 <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tms, &ptp_clock->Tms, correction_field);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f7fc fbad 	bl	80024e0 <ptpd_sub_time>

  ptp_clock->currentDS.offsetFromMaster = ptp_clock->Tms;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	3398      	adds	r3, #152	@ 0x98
 8005d8c:	f502 725a 	add.w	r2, r2, #872	@ 0x368
 8005d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d94:	e883 0003 	stmia.w	r3, {r0, r1}
  DBGVV("ptpd_servo_update_offset: mean_path_delay %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.meanPathDelay.seconds,
        ptp_clock->currentDS.meanPathDelay.nanoseconds);
#endif

  switch (ptp_clock->portDS.delayMechanism)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d002      	beq.n	8005da8 <ptpd_servo_update_offset+0x54>
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d00c      	beq.n	8005dc0 <ptpd_servo_update_offset+0x6c>
    case P2P:
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->portDS.peerMeanPathDelay);
        break;

    default:
        break;
 8005da6:	e017      	b.n	8005dd8 <ptpd_servo_update_offset+0x84>
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.meanPathDelay);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	33a0      	adds	r3, #160	@ 0xa0
 8005db8:	461a      	mov	r2, r3
 8005dba:	f7fc fb91 	bl	80024e0 <ptpd_sub_time>
        break;
 8005dbe:	e00b      	b.n	8005dd8 <ptpd_servo_update_offset+0x84>
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->portDS.peerMeanPathDelay);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	334c      	adds	r3, #76	@ 0x4c
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f7fc fb85 	bl	80024e0 <ptpd_sub_time>
        break;
 8005dd6:	bf00      	nop

  DBGVV("ptpd_servo_update_offset: offset %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.offsetFromMaster.seconds,
        ptp_clock->currentDS.offsetFromMaster.nanoseconds);

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <ptpd_servo_update_offset+0xaa>
  {
    if (ptp_clock->portDS.portState == PTP_SLAVE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d144      	bne.n	8005e76 <ptpd_servo_update_offset+0x122>
    {
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005df2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    }

    DBGV("ptpd_servo_update_offset: cannot filter seconds\n");

    return;
 8005dfc:	e03b      	b.n	8005e76 <ptpd_servo_update_offset+0x122>
  }

  // Filter offsetFromMaster.
  ptpd_servo_filter(&ptp_clock->currentDS.offsetFromMaster.nanoseconds, &ptp_clock->ofm_filt);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f7ff ff1b 	bl	8005c48 <ptpd_servo_filter>

  // Check results.
  if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <ptpd_servo_update_offset+0x12c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	db14      	blt.n	8005e48 <ptpd_servo_update_offset+0xf4>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e24:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	dc0d      	bgt.n	8005e48 <ptpd_servo_update_offset+0xf4>
  {
    if (ptp_clock->portDS.portState == PTP_UNCALIBRATED)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e32:	2b07      	cmp	r3, #7
 8005e34:	d120      	bne.n	8005e78 <ptpd_servo_update_offset+0x124>
    {
        set_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005e3c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    if (ptp_clock->portDS.portState == PTP_UNCALIBRATED)
 8005e46:	e017      	b.n	8005e78 <ptpd_servo_update_offset+0x124>
    }
  }
  else if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bfb8      	it	lt
 8005e52:	425b      	neglt	r3, r3
 8005e54:	4a0b      	ldr	r2, [pc, #44]	@ (8005e84 <ptpd_servo_update_offset+0x130>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	dd0e      	ble.n	8005e78 <ptpd_servo_update_offset+0x124>
  {
    if (ptp_clock->portDS.portState == PTP_SLAVE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d109      	bne.n	8005e78 <ptpd_servo_update_offset+0x124>
    {
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005e6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
 8005e74:	e000      	b.n	8005e78 <ptpd_servo_update_offset+0x124>
    return;
 8005e76:	bf00      	nop
    }
  }
}
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	ffffd8f1 	.word	0xffffd8f1
 8005e84:	000f4240 	.word	0x000f4240

08005e88 <ptpd_servo_update_delay>:

// 11.3.
void ptpd_servo_update_delay(PtpClock * ptp_clock, const TimeInternal *delay_event_egress_timestamp,
                 const TimeInternal *receive_timestamp, const TimeInternal *correction_field)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  // Tms valid?
  if (ptp_clock->ofm_filt.n == 0)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d032      	beq.n	8005f06 <ptpd_servo_update_delay+0x7e>
  DBGVV("ptpd_servo_update_delay: correction_field %li seconds %li nanoseconds\n",
        correction_field->seconds,
        correction_field->nanoseconds);
#endif

  ptpd_sub_time(&ptp_clock->Tsm, receive_timestamp, delay_event_egress_timestamp);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc fb18 	bl	80024e0 <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tsm, &ptp_clock->Tsm, correction_field);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 705c 	add.w	r0, r3, #880	@ 0x370
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f7fc fb0e 	bl	80024e0 <ptpd_sub_time>
  ptpd_add_time(&ptp_clock->currentDS.meanPathDelay, &ptp_clock->Tms, &ptp_clock->Tsm);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 715a 	add.w	r1, r3, #872	@ 0x368
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f7fc fae7 	bl	80024aa <ptpd_add_time>
  ptpd_div2_time(&ptp_clock->currentDS.meanPathDelay);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	33a0      	adds	r3, #160	@ 0xa0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fc fb19 	bl	8002518 <ptpd_div2_time>
  DBGVV("ptpd_servo_update_delay: meanPathDelay %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.meanPathDelay.seconds,
        ptp_clock->currentDS.meanPathDelay.nanoseconds);

  // Filter delay.
  if (ptp_clock->currentDS.meanPathDelay.seconds != 0)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <ptpd_servo_update_delay+0x80>
  {
    DBGV("PTPD: ptpd_servo_update_delay: cannot filter with seconds\n");
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->currentDS.meanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7ff fea2 	bl	8005c48 <ptpd_servo_filter>
 8005f04:	e000      	b.n	8005f08 <ptpd_servo_update_delay+0x80>
    return;
 8005f06:	bf00      	nop
  }
}
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <ptpd_servo_update_peer_delay>:

void ptpd_servo_update_peer_delay(PtpClock *ptp_clock, const TimeInternal *correction_field, bool two_step)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  DBGV("PTPD: ptpd_servo_update_peer_delay\n");

  if (two_step)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01f      	beq.n	8005f62 <ptpd_servo_update_peer_delay+0x54>
  {
    // Two-step clock.
    TimeInternal tab, tba;
    ptpd_sub_time(&tab, &ptp_clock->pdelay_t2 , &ptp_clock->pdelay_t1);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 7160 	add.w	r1, r3, #896	@ 0x380
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8005f2e:	f107 0318 	add.w	r3, r7, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fad4 	bl	80024e0 <ptpd_sub_time>
    ptpd_sub_time(&tba, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t3);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 7164 	add.w	r1, r3, #912	@ 0x390
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 7262 	add.w	r2, r3, #904	@ 0x388
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fc fac9 	bl	80024e0 <ptpd_sub_time>
    ptpd_add_time(&ptp_clock->portDS.peerMeanPathDelay, &tab, &tba);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	334c      	adds	r3, #76	@ 0x4c
 8005f52:	f107 0210 	add.w	r2, r7, #16
 8005f56:	f107 0118 	add.w	r1, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fc faa5 	bl	80024aa <ptpd_add_time>
 8005f60:	e00b      	b.n	8005f7a <ptpd_servo_update_peer_delay+0x6c>
  }
  else
  {
    // One-step clock.
    ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t1);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 7164 	add.w	r1, r3, #912	@ 0x390
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8005f74:	461a      	mov	r2, r3
 8005f76:	f7fc fab3 	bl	80024e0 <ptpd_sub_time>
  }

  ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->portDS.peerMeanPathDelay, correction_field);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	334c      	adds	r3, #76	@ 0x4c
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4619      	mov	r1, r3
 8005f88:	f7fc faaa 	bl	80024e0 <ptpd_sub_time>
  ptpd_div2_time(&ptp_clock->portDS.peerMeanPathDelay);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	334c      	adds	r3, #76	@ 0x4c
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fc fac1 	bl	8002518 <ptpd_div2_time>

  // Filter delay.
  if (ptp_clock->portDS.peerMeanPathDelay.seconds != 0)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <ptpd_servo_update_peer_delay+0xa6>
    DBGV("PTPD: ptpd_servo_update_peer_delay: cannot filter with seconds");
    return;
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->portDS.peerMeanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7ff fe4b 	bl	8005c48 <ptpd_servo_filter>
 8005fb2:	e000      	b.n	8005fb6 <ptpd_servo_update_peer_delay+0xa8>
    return;
 8005fb4:	bf00      	nop
  }
}
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <state_string>:

static char *state_string(uint8_t state)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	71fb      	strb	r3, [r7, #7]
  switch (state)
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d827      	bhi.n	800601c <state_string+0x60>
 8005fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <state_string+0x18>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006019 	.word	0x08006019
  {
    case PTP_INITIALIZING: return (char *) "PTP_INITIALIZING";
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <state_string+0x70>)
 8005ffa:	e011      	b.n	8006020 <state_string+0x64>
    case PTP_FAULTY: return (char *) "PTP_FAULTY";
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8006030 <state_string+0x74>)
 8005ffe:	e00f      	b.n	8006020 <state_string+0x64>
    case PTP_DISABLED: return (char *) "PTP_DISABLED";
 8006000:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <state_string+0x78>)
 8006002:	e00d      	b.n	8006020 <state_string+0x64>
    case PTP_LISTENING: return (char *) "PTP_LISTENING";
 8006004:	4b0c      	ldr	r3, [pc, #48]	@ (8006038 <state_string+0x7c>)
 8006006:	e00b      	b.n	8006020 <state_string+0x64>
    case PTP_PRE_MASTER: return (char *) "PTP_PRE_MASTER";
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <state_string+0x80>)
 800600a:	e009      	b.n	8006020 <state_string+0x64>
    case PTP_MASTER: return (char *) "PTP_MASTER";
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <state_string+0x84>)
 800600e:	e007      	b.n	8006020 <state_string+0x64>
    case PTP_PASSIVE: return (char *) "PTP_PASSIVE";
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <state_string+0x88>)
 8006012:	e005      	b.n	8006020 <state_string+0x64>
    case PTP_UNCALIBRATED: return (char *) "PTP_UNCALIBRATED";
 8006014:	4b0c      	ldr	r3, [pc, #48]	@ (8006048 <state_string+0x8c>)
 8006016:	e003      	b.n	8006020 <state_string+0x64>
    case PTP_SLAVE: return (char *) "PTP_SLAVE";
 8006018:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <state_string+0x90>)
 800601a:	e001      	b.n	8006020 <state_string+0x64>
    default: break;
 800601c:	bf00      	nop
  }
  return (char *) "UNKNOWN";
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <state_string+0x94>)
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	08023ec0 	.word	0x08023ec0
 8006030:	08023ed4 	.word	0x08023ed4
 8006034:	08023ee0 	.word	0x08023ee0
 8006038:	08023ef0 	.word	0x08023ef0
 800603c:	08023f00 	.word	0x08023f00
 8006040:	08023f10 	.word	0x08023f10
 8006044:	08023f1c 	.word	0x08023f1c
 8006048:	08023f28 	.word	0x08023f28
 800604c:	08023f3c 	.word	0x08023f3c
 8006050:	08023f48 	.word	0x08023f48

08006054 <ptpd_servo_update_clock>:

void ptpd_servo_update_clock(PtpClock *ptp_clock)
{
 8006054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006056:	b08b      	sub	sp, #44	@ 0x2c
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]

  DBGV("PTPD: ptpd_servo_update_clock offset %li sec %li nsec\n",
       ptp_clock->currentDS.offsetFromMaster.seconds,
       abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds));

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0 || abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <ptpd_servo_update_clock+0x24>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfb8      	it	lt
 8006070:	425b      	neglt	r3, r3
 8006072:	4a5c      	ldr	r2, [pc, #368]	@ (80061e4 <ptpd_servo_update_clock+0x190>)
 8006074:	4293      	cmp	r3, r2
 8006076:	dd37      	ble.n	80060e8 <ptpd_servo_update_clock+0x94>
  {
    // If secs, reset clock or set freq adjustment to max.
    if (!ptp_clock->servo.noAdjust)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 800607e:	f083 0301 	eor.w	r3, r3, #1
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8089 	beq.w	800619c <ptpd_servo_update_clock+0x148>
    {
      if (!ptp_clock->servo.noResetClock)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3464 	ldrb.w	r3, [r3, #1124]	@ 0x464
 8006090:	f083 0301 	eor.w	r3, r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <ptpd_servo_update_clock+0x76>
      {
        // Get the current time.
        ptpd_get_time(&timeTmp);
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f8b5 	bl	800620e <ptpd_get_time>

        // Subtract the offset from the master.
        ptpd_sub_time(&timeTmp, &timeTmp, &ptp_clock->currentDS.offsetFromMaster);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80060aa:	f107 0110 	add.w	r1, r7, #16
 80060ae:	f107 0310 	add.w	r3, r7, #16
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fc fa14 	bl	80024e0 <ptpd_sub_time>

        // Set the time with the offset.
        ptpd_set_time(&timeTmp);
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f8b9 	bl	8006234 <ptpd_set_time>

        // Reinitialize clock.
        ptpd_servo_init_clock(ptp_clock);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fd34 	bl	8005b30 <ptpd_servo_init_clock>
    if (!ptp_clock->servo.noAdjust)
 80060c8:	e068      	b.n	800619c <ptpd_servo_update_clock+0x148>
      }
      else
      {
        adj = ptp_clock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	dd01      	ble.n	80060d8 <ptpd_servo_update_clock+0x84>
 80060d4:	4b44      	ldr	r3, [pc, #272]	@ (80061e8 <ptpd_servo_update_clock+0x194>)
 80060d6:	e000      	b.n	80060da <ptpd_servo_update_clock+0x86>
 80060d8:	4b44      	ldr	r3, [pc, #272]	@ (80061ec <ptpd_servo_update_clock+0x198>)
 80060da:	61bb      	str	r3, [r7, #24]
        ptpd_adj_freq(-adj);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	425b      	negs	r3, r3
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f8bb 	bl	800625c <ptpd_adj_freq>
    if (!ptp_clock->servo.noAdjust)
 80060e6:	e059      	b.n	800619c <ptpd_servo_update_clock+0x148>
    // The PI controller.

    // Normalize offset to 1s sync interval -> response of the servo
    // will be same for all sync interval values, but faster/slower
    // (possible lost of precision/overflow but much more stable).
    offsetNorm = ptp_clock->currentDS.offsetFromMaster.nanoseconds;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060ee:	61fb      	str	r3, [r7, #28]
    if (ptp_clock->portDS.logSyncInterval > 0)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd07      	ble.n	800610a <ptpd_servo_update_clock+0xb6>
      offsetNorm >>= ptp_clock->portDS.logSyncInterval;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 8006100:	461a      	mov	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4113      	asrs	r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e00c      	b.n	8006124 <ptpd_servo_update_clock+0xd0>
    else if (ptp_clock->portDS.logSyncInterval < 0)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 8006110:	2b00      	cmp	r3, #0
 8006112:	da07      	bge.n	8006124 <ptpd_servo_update_clock+0xd0>
      offsetNorm <<= -ptp_clock->portDS.logSyncInterval;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 800611a:	425b      	negs	r3, r3
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	61fb      	str	r3, [r7, #28]

    // The accumulator for the I component.
    ptp_clock->observedDrift += offsetNorm / ptp_clock->servo.ai;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f9b3 3468 	ldrsh.w	r3, [r3, #1128]	@ 0x468
 8006130:	4619      	mov	r1, r3
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fb93 f3f1 	sdiv	r3, r3, r1
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    // Clamp the accumulator to ADJ_FREQ_MAX for sanity.
    if (ptp_clock->observedDrift > ADJ_FREQ_MAX)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006146:	4a28      	ldr	r2, [pc, #160]	@ (80061e8 <ptpd_servo_update_clock+0x194>)
 8006148:	4293      	cmp	r3, r2
 800614a:	dd04      	ble.n	8006156 <ptpd_servo_update_clock+0x102>
      ptp_clock->observedDrift = ADJ_FREQ_MAX;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a26      	ldr	r2, [pc, #152]	@ (80061e8 <ptpd_servo_update_clock+0x194>)
 8006150:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8006154:	e009      	b.n	800616a <ptpd_servo_update_clock+0x116>
    else if (ptp_clock->observedDrift < -ADJ_FREQ_MAX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800615c:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <ptpd_servo_update_clock+0x19c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	dc03      	bgt.n	800616a <ptpd_servo_update_clock+0x116>
      ptp_clock->observedDrift = -ADJ_FREQ_MAX;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a21      	ldr	r2, [pc, #132]	@ (80061ec <ptpd_servo_update_clock+0x198>)
 8006166:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    // Apply controller output as a clock tick rate adjustment.
    if (!ptp_clock->servo.noAdjust)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 8006170:	f083 0301 	eor.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d010      	beq.n	800619c <ptpd_servo_update_clock+0x148>
    {
      adj = offsetNorm / ptp_clock->servo.ap + ptp_clock->observedDrift;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f9b3 3466 	ldrsh.w	r3, [r3, #1126]	@ 0x466
 8006180:	461a      	mov	r2, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	fb93 f2f2 	sdiv	r2, r3, r2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800618e:	4413      	add	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
      ptpd_adj_freq(-adj);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	425b      	negs	r3, r3
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f860 	bl	800625c <ptpd_adj_freq>
      ptp_clock->parentDS.observedParentOffsetScaledLogVariance = 17000 + scaledLogVariance;
      DBGV("PTPD: ptpd_servo_update_clock: observed scalled log variance: 0x%x\n", ptp_clock->parentDS.observedParentOffsetScaledLogVariance);
    }
  }

  switch (ptp_clock->portDS.delayMechanism)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d001      	beq.n	80061aa <ptpd_servo_update_clock+0x156>
 80061a6:	2b02      	cmp	r3, #2
      break;

    case P2P:
      DBG("PTPD: ptpd_servo_update_clock: one-way delay averaged (P2P): %li sec %li nsec\n",
          ptp_clock->portDS.peerMeanPathDelay.seconds, ptp_clock->portDS.peerMeanPathDelay.nanoseconds);
      break;
 80061a8:	e000      	b.n	80061ac <ptpd_servo_update_clock+0x158>
      break;
 80061aa:	bf00      	nop

    default:
      DBG("PTPD: ptpd_servo_update_clock: one-way delay not computed\n");
  }

  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 4098 	ldr.w	r4, [r3, #152]	@ 0x98
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 6404 	ldr.w	r6, [r3, #1028]	@ 0x404
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fef9 	bl	8005fbc <state_string>
 80061ca:	4603      	mov	r3, r0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4633      	mov	r3, r6
 80061d0:	462a      	mov	r2, r5
 80061d2:	4621      	mov	r1, r4
 80061d4:	4807      	ldr	r0, [pc, #28]	@ (80061f4 <ptpd_servo_update_clock+0x1a0>)
 80061d6:	f01c fb9f 	bl	8022918 <iprintf>
      ptp_clock->currentDS.offsetFromMaster.seconds,
      ptp_clock->currentDS.offsetFromMaster.nanoseconds,
      ptp_clock->observedDrift,
      state_string(ptp_clock->portDS.portState));
}
 80061da:	bf00      	nop
 80061dc:	3724      	adds	r7, #36	@ 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e2:	bf00      	nop
 80061e4:	05f5e100 	.word	0x05f5e100
 80061e8:	004e2000 	.word	0x004e2000
 80061ec:	ffb1e000 	.word	0xffb1e000
 80061f0:	ffb1dfff 	.word	0xffb1dfff
 80061f4:	08023f50 	.word	0x08023f50

080061f8 <ptpd_get_rand>:
#include "ptpd.h"
#include "ethernetif.h"

uint32_t ptpd_get_rand(uint32_t rand_max)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  return rand_max;
 8006200:	687b      	ldr	r3, [r7, #4]
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <ptpd_get_time>:

void ptpd_get_time(TimeInternal *time)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  PtpTime_t ts;

  ethernetif_GetTime(&ts);
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa fc7c 	bl	8000b18 <ethernetif_GetTime>

  time->seconds = ts.tv_sec;
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
  time->nanoseconds = ts.tv_nsec;
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <ptpd_set_time>:

void ptpd_set_time(const TimeInternal *time)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  PtpTime_t ts;

  ts.tv_sec = time->seconds;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60bb      	str	r3, [r7, #8]
  ts.tv_nsec = time->nanoseconds;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  ethernetif_SetTime(&ts);
 8006248:	f107 0308 	add.w	r3, r7, #8
 800624c:	4618      	mov	r0, r3
 800624e:	f7fa fc33 	bl	8000ab8 <ethernetif_SetTime>
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <ptpd_adj_freq>:

bool ptpd_adj_freq(int32_t adj)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  if (adj > ADJ_FREQ_MAX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a0a      	ldr	r2, [pc, #40]	@ (8006290 <ptpd_adj_freq+0x34>)
 8006268:	4293      	cmp	r3, r2
 800626a:	dd02      	ble.n	8006272 <ptpd_adj_freq+0x16>
  {
    adj = ADJ_FREQ_MAX;
 800626c:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <ptpd_adj_freq+0x34>)
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e005      	b.n	800627e <ptpd_adj_freq+0x22>
  }
  else if (adj < -ADJ_FREQ_MAX)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a07      	ldr	r2, [pc, #28]	@ (8006294 <ptpd_adj_freq+0x38>)
 8006276:	4293      	cmp	r3, r2
 8006278:	dc01      	bgt.n	800627e <ptpd_adj_freq+0x22>
  {
    adj = -ADJ_FREQ_MAX;
 800627a:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <ptpd_adj_freq+0x3c>)
 800627c:	607b      	str	r3, [r7, #4]
  }

  ethernetif_PtpFxAdjust(adj);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa fc7e 	bl	8000b80 <ethernetif_PtpFxAdjust>

  return true;
 8006284:	2301      	movs	r3, #1
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	004e2000 	.word	0x004e2000
 8006294:	ffb1dfff 	.word	0xffb1dfff
 8006298:	ffb1e000 	.word	0xffb1e000

0800629c <ptpd_timer_callback>:
static TimerHandle_t ptpd_timer_id[TIMER_ARRAY_SIZE];
static bool ptpd_timers_expired[TIMER_ARRAY_SIZE];

// Callback for timers.
static void ptpd_timer_callback(TimerHandle_t xTimer)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  int index = (int)pvTimerGetTimerID(xTimer);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f008 ff1f 	bl	800f0e8 <pvTimerGetTimerID>
 80062aa:	4603      	mov	r3, r0
 80062ac:	60fb      	str	r3, [r7, #12]

  // Sanity check the index.
  if (index < TIMER_ARRAY_SIZE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	dc06      	bgt.n	80062c2 <ptpd_timer_callback+0x26>
  {
    // Mark the indicated timer as expired.
    ptpd_timers_expired[index] = true;
 80062b4:	4a05      	ldr	r2, [pc, #20]	@ (80062cc <ptpd_timer_callback+0x30>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]

    // Notify the PTP thread of a pending operation.
    ptpd_alert();
 80062be:	f7fc ff57 	bl	8003170 <ptpd_alert>
  }
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000099c 	.word	0x2000099c

080062d0 <ptpd_timer_init>:

// Initialize PTPD timers.
void ptpd_timer_init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af02      	add	r7, sp, #8
  int32_t i;

  // Create the various timers used in the system.
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	e014      	b.n	8006306 <ptpd_timer_init+0x36>
  {
    // Mark the timer as not expired.
    ptpd_timers_expired[i] = false;
 80062dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <ptpd_timer_init+0x48>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]

    // Create the timer.
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <ptpd_timer_init+0x4c>)
 80062ea:	9200      	str	r2, [sp, #0]
 80062ec:	2201      	movs	r2, #1
 80062ee:	2101      	movs	r1, #1
 80062f0:	480b      	ldr	r0, [pc, #44]	@ (8006320 <ptpd_timer_init+0x50>)
 80062f2:	f008 fb8b 	bl	800ea0c <xTimerCreate>
 80062f6:	4602      	mov	r2, r0
 80062f8:	490a      	ldr	r1, [pc, #40]	@ (8006324 <ptpd_timer_init+0x54>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3301      	adds	r3, #1
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b05      	cmp	r3, #5
 800630a:	dde7      	ble.n	80062dc <ptpd_timer_init+0xc>
  }
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	2000099c 	.word	0x2000099c
 800631c:	0800629d 	.word	0x0800629d
 8006320:	08023f9c 	.word	0x08023f9c
 8006324:	20000984 	.word	0x20000984

08006328 <ptpd_timer_start>:

// Start the indexed timer with the given interval.
void ptpd_timer_start(int32_t index, uint32_t interval_ms)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af02      	add	r7, sp, #8
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b05      	cmp	r3, #5
 8006336:	dc29      	bgt.n	800638c <ptpd_timer_start+0x64>
  if (ptpd_timer_id[index] == 0) return;
 8006338:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <ptpd_timer_start+0x70>)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d025      	beq.n	8006390 <ptpd_timer_start+0x68>

  // Reset the timer expired flag.
  ptpd_timers_expired[index] = false;
 8006344:	4a15      	ldr	r2, [pc, #84]	@ (800639c <ptpd_timer_start+0x74>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]

  if (interval_ms == 0)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <ptpd_timer_start+0x30>
  {
    interval_ms = 1;
 8006354:	2301      	movs	r3, #1
 8006356:	603b      	str	r3, [r7, #0]
  }
  xTimerChangePeriod(ptpd_timer_id[index], interval_ms, 100);
 8006358:	4a0f      	ldr	r2, [pc, #60]	@ (8006398 <ptpd_timer_start+0x70>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006360:	2364      	movs	r3, #100	@ 0x64
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	2104      	movs	r1, #4
 800636a:	f008 fbad 	bl	800eac8 <xTimerGenericCommand>
  xTimerStart(ptpd_timer_id[index], 100);
 800636e:	4a0a      	ldr	r2, [pc, #40]	@ (8006398 <ptpd_timer_start+0x70>)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006376:	f007 fae9 	bl	800d94c <xTaskGetTickCount>
 800637a:	4602      	mov	r2, r0
 800637c:	2364      	movs	r3, #100	@ 0x64
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2300      	movs	r3, #0
 8006382:	2101      	movs	r1, #1
 8006384:	4620      	mov	r0, r4
 8006386:	f008 fb9f 	bl	800eac8 <xTimerGenericCommand>
 800638a:	e002      	b.n	8006392 <ptpd_timer_start+0x6a>
  if (index >= TIMER_ARRAY_SIZE) return;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <ptpd_timer_start+0x6a>
  if (ptpd_timer_id[index] == 0) return;
 8006390:	bf00      	nop
}
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}
 8006398:	20000984 	.word	0x20000984
 800639c:	2000099c 	.word	0x2000099c

080063a0 <ptpd_timer_stop>:

// Stop the indexed timer.
void ptpd_timer_stop(int32_t index)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	6078      	str	r0, [r7, #4]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	dc10      	bgt.n	80063d0 <ptpd_timer_stop+0x30>

  DBGV("PTPD: stop timer %li\n", index);

  // Stop the timer.
  xTimerStop(ptpd_timer_id[index], 0);
 80063ae:	4a0a      	ldr	r2, [pc, #40]	@ (80063d8 <ptpd_timer_stop+0x38>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2300      	movs	r3, #0
 80063bc:	2200      	movs	r2, #0
 80063be:	2103      	movs	r1, #3
 80063c0:	f008 fb82 	bl	800eac8 <xTimerGenericCommand>

  // Reset the expired flag.
  ptpd_timers_expired[index] = false;
 80063c4:	4a05      	ldr	r2, [pc, #20]	@ (80063dc <ptpd_timer_stop+0x3c>)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4413      	add	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e000      	b.n	80063d2 <ptpd_timer_stop+0x32>
  if (index >= TIMER_ARRAY_SIZE) return;
 80063d0:	bf00      	nop
}
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000984 	.word	0x20000984
 80063dc:	2000099c 	.word	0x2000099c

080063e0 <ptpd_timer_expired>:

// If the timer has expired, this function will reset the
// expired flag and return true, otherwise it will false.
bool ptpd_timer_expired(int32_t index)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return false;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	dd01      	ble.n	80063f2 <ptpd_timer_expired+0x12>
 80063ee:	2300      	movs	r3, #0
 80063f0:	e010      	b.n	8006414 <ptpd_timer_expired+0x34>

  // Return false if the timer hasn't expired.
  if (!ptpd_timers_expired[index]) return false;
 80063f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006420 <ptpd_timer_expired+0x40>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f083 0301 	eor.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <ptpd_timer_expired+0x28>
 8006404:	2300      	movs	r3, #0
 8006406:	e005      	b.n	8006414 <ptpd_timer_expired+0x34>

  // We only return the timer expired once.
  ptpd_timers_expired[index] = false;
 8006408:	4a05      	ldr	r2, [pc, #20]	@ (8006420 <ptpd_timer_expired+0x40>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]

  // Return true since the timer expired.
  return true;
 8006412:	2301      	movs	r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	2000099c 	.word	0x2000099c

08006424 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <LAN8742_RegisterBusIO+0x28>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <LAN8742_RegisterBusIO+0x28>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <LAN8742_RegisterBusIO+0x28>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	e014      	b.n	800647c <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d139      	bne.n	8006518 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e01c      	b.n	80064f8 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f107 020c 	add.w	r2, r7, #12
 80064c6:	2112      	movs	r1, #18
 80064c8:	6978      	ldr	r0, [r7, #20]
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da03      	bge.n	80064da <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80064d2:	f06f 0304 	mvn.w	r3, #4
 80064d6:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80064d8:	e00b      	b.n	80064f2 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d105      	bne.n	80064f2 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
         break;
 80064f0:	e005      	b.n	80064fe <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	3301      	adds	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b1f      	cmp	r3, #31
 80064fc:	d9df      	bls.n	80064be <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b1f      	cmp	r3, #31
 8006504:	d902      	bls.n	800650c <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8006506:	f06f 0302 	mvn.w	r3, #2
 800650a:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8006518:	693b      	ldr	r3, [r7, #16]
 }
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6810      	ldr	r0, [r2, #0]
 8006536:	f107 020c 	add.w	r2, r7, #12
 800653a:	2101      	movs	r1, #1
 800653c:	4798      	blx	r3
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	da02      	bge.n	800654a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006544:	f06f 0304 	mvn.w	r3, #4
 8006548:	e06e      	b.n	8006628 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6810      	ldr	r0, [r2, #0]
 8006552:	f107 020c 	add.w	r2, r7, #12
 8006556:	2101      	movs	r1, #1
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	da02      	bge.n	8006566 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006560:	f06f 0304 	mvn.w	r3, #4
 8006564:	e060      	b.n	8006628 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006570:	2301      	movs	r3, #1
 8006572:	e059      	b.n	8006628 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6810      	ldr	r0, [r2, #0]
 800657c:	f107 020c 	add.w	r2, r7, #12
 8006580:	2100      	movs	r1, #0
 8006582:	4798      	blx	r3
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	da02      	bge.n	8006590 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800658a:	f06f 0304 	mvn.w	r3, #4
 800658e:	e04b      	b.n	8006628 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11b      	bne.n	80065d2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d006      	beq.n	80065b2 <LAN8742_GetLinkState+0x90>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80065ae:	2302      	movs	r3, #2
 80065b0:	e03a      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80065bc:	2303      	movs	r3, #3
 80065be:	e033      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80065ca:	2304      	movs	r3, #4
 80065cc:	e02c      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80065ce:	2305      	movs	r3, #5
 80065d0:	e02a      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6810      	ldr	r0, [r2, #0]
 80065da:	f107 020c 	add.w	r2, r7, #12
 80065de:	211f      	movs	r1, #31
 80065e0:	4798      	blx	r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da02      	bge.n	80065ee <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80065e8:	f06f 0304 	mvn.w	r3, #4
 80065ec:	e01c      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80065f8:	2306      	movs	r3, #6
 80065fa:	e015      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 031c 	and.w	r3, r3, #28
 8006602:	2b18      	cmp	r3, #24
 8006604:	d101      	bne.n	800660a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006606:	2302      	movs	r3, #2
 8006608:	e00e      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 031c 	and.w	r3, r3, #28
 8006610:	2b08      	cmp	r3, #8
 8006612:	d101      	bne.n	8006618 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006614:	2303      	movs	r3, #3
 8006616:	e007      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 031c 	and.w	r3, r3, #28
 800661e:	2b14      	cmp	r3, #20
 8006620:	d101      	bne.n	8006626 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006622:	2304      	movs	r3, #4
 8006624:	e000      	b.n	8006628 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006626:	2305      	movs	r3, #5
    }
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800663a:	2300      	movs	r3, #0
 800663c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <BSP_LED_Init+0x28>
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d006      	beq.n	8006658 <BSP_LED_Init+0x28>
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d003      	beq.n	8006658 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006650:	f06f 0301 	mvn.w	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006656:	e055      	b.n	8006704 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800665e:	4b2c      	ldr	r3, [pc, #176]	@ (8006710 <BSP_LED_Init+0xe0>)
 8006660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006664:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <BSP_LED_Init+0xe0>)
 8006666:	f043 0302 	orr.w	r3, r3, #2
 800666a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800666e:	4b28      	ldr	r3, [pc, #160]	@ (8006710 <BSP_LED_Init+0xe0>)
 8006670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e021      	b.n	80066c2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d10f      	bne.n	80066a4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8006684:	4b22      	ldr	r3, [pc, #136]	@ (8006710 <BSP_LED_Init+0xe0>)
 8006686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800668a:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <BSP_LED_Init+0xe0>)
 800668c:	f043 0310 	orr.w	r3, r3, #16
 8006690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006694:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <BSP_LED_Init+0xe0>)
 8006696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	e00e      	b.n	80066c2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80066a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006710 <BSP_LED_Init+0xe0>)
 80066a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066aa:	4a19      	ldr	r2, [pc, #100]	@ (8006710 <BSP_LED_Init+0xe0>)
 80066ac:	f043 0302 	orr.w	r3, r3, #2
 80066b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066b4:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <BSP_LED_Init+0xe0>)
 80066b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	4a13      	ldr	r2, [pc, #76]	@ (8006714 <BSP_LED_Init+0xe4>)
 80066c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80066cc:	2301      	movs	r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d4:	2303      	movs	r3, #3
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	4a0f      	ldr	r2, [pc, #60]	@ (8006718 <BSP_LED_Init+0xe8>)
 80066dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e0:	f107 0218 	add.w	r2, r7, #24
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f002 f936 	bl	8008958 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006718 <BSP_LED_Init+0xe8>)
 80066f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	4a07      	ldr	r2, [pc, #28]	@ (8006714 <BSP_LED_Init+0xe4>)
 80066f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	f002 fad2 	bl	8008ca8 <HAL_GPIO_WritePin>
  }

  return ret;
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006706:	4618      	mov	r0, r3
 8006708:	3730      	adds	r7, #48	@ 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	08028b74 	.word	0x08028b74
 8006718:	20000014 	.word	0x20000014

0800671c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <BSP_LED_On+0x28>
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d006      	beq.n	8006744 <BSP_LED_On+0x28>
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d003      	beq.n	8006744 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800673c:	f06f 0301 	mvn.w	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e00b      	b.n	800675c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	4a08      	ldr	r2, [pc, #32]	@ (8006768 <BSP_LED_On+0x4c>)
 8006748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	4a07      	ldr	r2, [pc, #28]	@ (800676c <BSP_LED_On+0x50>)
 8006750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006754:	2201      	movs	r2, #1
 8006756:	4619      	mov	r1, r3
 8006758:	f002 faa6 	bl	8008ca8 <HAL_GPIO_WritePin>
  }

  return ret;
 800675c:	68fb      	ldr	r3, [r7, #12]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000014 	.word	0x20000014
 800676c:	08028b74 	.word	0x08028b74

08006770 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <BSP_LED_Off+0x28>
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d006      	beq.n	8006798 <BSP_LED_Off+0x28>
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d003      	beq.n	8006798 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006790:	f06f 0301 	mvn.w	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e00b      	b.n	80067b0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	4a08      	ldr	r2, [pc, #32]	@ (80067bc <BSP_LED_Off+0x4c>)
 800679c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	4a07      	ldr	r2, [pc, #28]	@ (80067c0 <BSP_LED_Off+0x50>)
 80067a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a8:	2200      	movs	r2, #0
 80067aa:	4619      	mov	r1, r3
 80067ac:	f002 fa7c 	bl	8008ca8 <HAL_GPIO_WritePin>
  }

  return ret;
 80067b0:	68fb      	ldr	r3, [r7, #12]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000014 	.word	0x20000014
 80067c0:	08028b74 	.word	0x08028b74

080067c4 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80067c8:	4b26      	ldr	r3, [pc, #152]	@ (8006864 <SystemInit+0xa0>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ce:	4a25      	ldr	r2, [pc, #148]	@ (8006864 <SystemInit+0xa0>)
 80067d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80067d8:	4b23      	ldr	r3, [pc, #140]	@ (8006868 <SystemInit+0xa4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	@ (8006868 <SystemInit+0xa4>)
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80067e4:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <SystemInit+0xa4>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80067ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006868 <SystemInit+0xa4>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	491e      	ldr	r1, [pc, #120]	@ (8006868 <SystemInit+0xa4>)
 80067f0:	4b1e      	ldr	r3, [pc, #120]	@ (800686c <SystemInit+0xa8>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80067f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006868 <SystemInit+0xa4>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80067fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006868 <SystemInit+0xa4>)
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <SystemInit+0xa4>)
 8006804:	2200      	movs	r2, #0
 8006806:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8006808:	4b17      	ldr	r3, [pc, #92]	@ (8006868 <SystemInit+0xa4>)
 800680a:	2200      	movs	r2, #0
 800680c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800680e:	4b16      	ldr	r3, [pc, #88]	@ (8006868 <SystemInit+0xa4>)
 8006810:	2200      	movs	r2, #0
 8006812:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <SystemInit+0xa4>)
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800681a:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <SystemInit+0xa4>)
 800681c:	2200      	movs	r2, #0
 800681e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8006820:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <SystemInit+0xa4>)
 8006822:	2200      	movs	r2, #0
 8006824:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8006826:	4b10      	ldr	r3, [pc, #64]	@ (8006868 <SystemInit+0xa4>)
 8006828:	2200      	movs	r2, #0
 800682a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800682c:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <SystemInit+0xa4>)
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <SystemInit+0xa4>)
 8006834:	2200      	movs	r2, #0
 8006836:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006838:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <SystemInit+0xa4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0a      	ldr	r2, [pc, #40]	@ (8006868 <SystemInit+0xa4>)
 800683e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006842:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006844:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <SystemInit+0xa4>)
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	@ 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800684a:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <SystemInit+0xac>)
 800684c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006850:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006852:	4b04      	ldr	r3, [pc, #16]	@ (8006864 <SystemInit+0xa0>)
 8006854:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006858:	609a      	str	r2, [r3, #8]
#endif  


}
 800685a:	bf00      	nop
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	e000ed00 	.word	0xe000ed00
 8006868:	58024400 	.word	0x58024400
 800686c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006870:	52004000 	.word	0x52004000

08006874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800687a:	2003      	movs	r0, #3
 800687c:	f000 f92f 	bl	8006ade <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006880:	f002 fff6 	bl	8009870 <HAL_RCC_GetSysClockFreq>
 8006884:	4602      	mov	r2, r0
 8006886:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <HAL_Init+0x68>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4913      	ldr	r1, [pc, #76]	@ (80068e0 <HAL_Init+0x6c>)
 8006892:	5ccb      	ldrb	r3, [r1, r3]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800689e:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <HAL_Init+0x68>)
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	4a0e      	ldr	r2, [pc, #56]	@ (80068e0 <HAL_Init+0x6c>)
 80068a8:	5cd3      	ldrb	r3, [r2, r3]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	4a0b      	ldr	r2, [pc, #44]	@ (80068e4 <HAL_Init+0x70>)
 80068b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068b8:	4a0b      	ldr	r2, [pc, #44]	@ (80068e8 <HAL_Init+0x74>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068be:	200f      	movs	r0, #15
 80068c0:	f7fb fbc4 	bl	800204c <HAL_InitTick>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e002      	b.n	80068d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80068ce:	f000 f80d 	bl	80068ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	58024400 	.word	0x58024400
 80068e0:	08028b7c 	.word	0x08028b7c
 80068e4:	20000024 	.word	0x20000024
 80068e8:	20000020 	.word	0x20000020

080068ec <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006900:	4b06      	ldr	r3, [pc, #24]	@ (800691c <HAL_IncTick+0x20>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <HAL_IncTick+0x24>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4413      	add	r3, r2
 800690c:	4a04      	ldr	r2, [pc, #16]	@ (8006920 <HAL_IncTick+0x24>)
 800690e:	6013      	str	r3, [r2, #0]
}
 8006910:	bf00      	nop
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	2000002c 	.word	0x2000002c
 8006920:	200009a4 	.word	0x200009a4

08006924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return uwTick;
 8006928:	4b03      	ldr	r3, [pc, #12]	@ (8006938 <HAL_GetTick+0x14>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	200009a4 	.word	0x200009a4

0800693c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800694c:	4904      	ldr	r1, [pc, #16]	@ (8006960 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4313      	orrs	r3, r2
 8006952:	604b      	str	r3, [r1, #4]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	58000400 	.word	0x58000400

08006964 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8006968:	4b05      	ldr	r3, [pc, #20]	@ (8006980 <HAL_EnableCompensationCell+0x1c>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4a04      	ldr	r2, [pc, #16]	@ (8006980 <HAL_EnableCompensationCell+0x1c>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6213      	str	r3, [r2, #32]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	58000400 	.word	0x58000400

08006984 <__NVIC_SetPriorityGrouping>:
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <__NVIC_SetPriorityGrouping+0x40>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069a0:	4013      	ands	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80069ac:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <__NVIC_SetPriorityGrouping+0x44>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069b2:	4a04      	ldr	r2, [pc, #16]	@ (80069c4 <__NVIC_SetPriorityGrouping+0x40>)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	60d3      	str	r3, [r2, #12]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e000ed00 	.word	0xe000ed00
 80069c8:	05fa0000 	.word	0x05fa0000

080069cc <__NVIC_GetPriorityGrouping>:
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d0:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <__NVIC_GetPriorityGrouping+0x18>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	f003 0307 	and.w	r3, r3, #7
}
 80069da:	4618      	mov	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <__NVIC_EnableIRQ>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	db0b      	blt.n	8006a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	f003 021f 	and.w	r2, r3, #31
 8006a00:	4907      	ldr	r1, [pc, #28]	@ (8006a20 <__NVIC_EnableIRQ+0x38>)
 8006a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2001      	movs	r0, #1
 8006a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e100 	.word	0xe000e100

08006a24 <__NVIC_SetPriority>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	6039      	str	r1, [r7, #0]
 8006a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	db0a      	blt.n	8006a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	490c      	ldr	r1, [pc, #48]	@ (8006a70 <__NVIC_SetPriority+0x4c>)
 8006a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a42:	0112      	lsls	r2, r2, #4
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	440b      	add	r3, r1
 8006a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a4c:	e00a      	b.n	8006a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	4908      	ldr	r1, [pc, #32]	@ (8006a74 <__NVIC_SetPriority+0x50>)
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	0112      	lsls	r2, r2, #4
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	440b      	add	r3, r1
 8006a62:	761a      	strb	r2, [r3, #24]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	e000e100 	.word	0xe000e100
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <NVIC_EncodePriority>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	@ 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f1c3 0307 	rsb	r3, r3, #7
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	bf28      	it	cs
 8006a96:	2304      	movcs	r3, #4
 8006a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d902      	bls.n	8006aa8 <NVIC_EncodePriority+0x30>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3b03      	subs	r3, #3
 8006aa6:	e000      	b.n	8006aaa <NVIC_EncodePriority+0x32>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	401a      	ands	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	43d9      	mvns	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad0:	4313      	orrs	r3, r2
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3724      	adds	r7, #36	@ 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ff4c 	bl	8006984 <__NVIC_SetPriorityGrouping>
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b02:	f7ff ff63 	bl	80069cc <__NVIC_GetPriorityGrouping>
 8006b06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	6978      	ldr	r0, [r7, #20]
 8006b0e:	f7ff ffb3 	bl	8006a78 <NVIC_EncodePriority>
 8006b12:	4602      	mov	r2, r0
 8006b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ff82 	bl	8006a24 <__NVIC_SetPriority>
}
 8006b20:	bf00      	nop
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff ff56 	bl	80069e8 <__NVIC_EnableIRQ>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006b48:	f3bf 8f5f 	dmb	sy
}
 8006b4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <HAL_MPU_Disable+0x28>)
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	4a06      	ldr	r2, [pc, #24]	@ (8006b6c <HAL_MPU_Disable+0x28>)
 8006b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_MPU_Disable+0x2c>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	605a      	str	r2, [r3, #4]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	e000ed00 	.word	0xe000ed00
 8006b70:	e000ed90 	.word	0xe000ed90

08006b74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006bac <HAL_MPU_Enable+0x38>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006b86:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <HAL_MPU_Enable+0x3c>)
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <HAL_MPU_Enable+0x3c>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006b92:	f3bf 8f4f 	dsb	sy
}
 8006b96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b98:	f3bf 8f6f 	isb	sy
}
 8006b9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	e000ed90 	.word	0xe000ed90
 8006bb0:	e000ed00 	.word	0xe000ed00

08006bb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	785a      	ldrb	r2, [r3, #1]
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <HAL_MPU_ConfigRegion+0x7c>)
 8006bc2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c30 <HAL_MPU_ConfigRegion+0x7c>)
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <HAL_MPU_ConfigRegion+0x7c>)
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006bd0:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <HAL_MPU_ConfigRegion+0x7c>)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7b1b      	ldrb	r3, [r3, #12]
 8006bdc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7adb      	ldrb	r3, [r3, #11]
 8006be2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006be4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	7a9b      	ldrb	r3, [r3, #10]
 8006bea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7b5b      	ldrb	r3, [r3, #13]
 8006bf2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006bf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7b9b      	ldrb	r3, [r3, #14]
 8006bfa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006bfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7bdb      	ldrb	r3, [r3, #15]
 8006c02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7a5b      	ldrb	r3, [r3, #9]
 8006c0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	7a1b      	ldrb	r3, [r3, #8]
 8006c12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c1c:	4a04      	ldr	r2, [pc, #16]	@ (8006c30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c20:	6113      	str	r3, [r2, #16]
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000ed90 	.word	0xe000ed90

08006c34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e0e3      	b.n	8006e0e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2223      	movs	r2, #35	@ 0x23
 8006c54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fa fb27 	bl	80012ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e18 <HAL_ETH_Init+0x1e4>)
 8006c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c64:	4a6c      	ldr	r2, [pc, #432]	@ (8006e18 <HAL_ETH_Init+0x1e4>)
 8006c66:	f043 0302 	orr.w	r3, r3, #2
 8006c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <HAL_ETH_Init+0x1e4>)
 8006c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	7a1b      	ldrb	r3, [r3, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006c84:	2000      	movs	r0, #0
 8006c86:	f7ff fe59 	bl	800693c <HAL_SYSCFG_ETHInterfaceSelect>
 8006c8a:	e003      	b.n	8006c94 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006c8c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006c90:	f7ff fe54 	bl	800693c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006c94:	4b61      	ldr	r3, [pc, #388]	@ (8006e1c <HAL_ETH_Init+0x1e8>)
 8006c96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cb0:	f7ff fe38 	bl	8006924 <HAL_GetTick>
 8006cb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006cb6:	e011      	b.n	8006cdc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006cb8:	f7ff fe34 	bl	8006924 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006cc6:	d909      	bls.n	8006cdc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	22e0      	movs	r2, #224	@ 0xe0
 8006cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      /* Return Error */
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e098      	b.n	8006e0e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e4      	bne.n	8006cb8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fffa 	bl	8007ce8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006cf4:	f002 ff36 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4a49      	ldr	r2, [pc, #292]	@ (8006e20 <HAL_ETH_Init+0x1ec>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	0c9a      	lsrs	r2, r3, #18
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3a01      	subs	r2, #1
 8006d08:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fa43 	bl	8008198 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006d1e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d2e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	22e0      	movs	r2, #224	@ 0xe0
 8006d4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    /* Return Error */
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e05d      	b.n	8006e0e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006d5e:	4b31      	ldr	r3, [pc, #196]	@ (8006e24 <HAL_ETH_Init+0x1f0>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6952      	ldr	r2, [r2, #20]
 8006d66:	0051      	lsls	r1, r2, #1
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d72:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 faab 	bl	80082d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 faf1 	bl	8008364 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	3305      	adds	r3, #5
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	021a      	lsls	r2, r3, #8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	4619      	mov	r1, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	3303      	adds	r3, #3
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	061a      	lsls	r2, r3, #24
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	3302      	adds	r3, #2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006dc0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006dce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006dd0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b11      	ldr	r3, [pc, #68]	@ (8006e28 <HAL_ETH_Init+0x1f4>)
 8006de2:	430b      	orrs	r3, r1
 8006de4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <HAL_ETH_Init+0x1f8>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  heth->gState = HAL_ETH_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2210      	movs	r2, #16
 8006e08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	58000400 	.word	0x58000400
 8006e20:	431bde83 	.word	0x431bde83
 8006e24:	ffff8001 	.word	0xffff8001
 8006e28:	0c020060 	.word	0x0c020060
 8006e2c:	0c20c000 	.word	0x0c20c000

08006e30 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d165      	bne.n	8006f0e <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2223      	movs	r2, #35	@ 0x23
 8006e46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2208      	movs	r2, #8
 8006e54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9f6 	bl	8007248 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e64:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e74:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e90:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8006ea8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006eac:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0202 	orr.w	r2, r2, #2
 8006ed2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eec:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006efe:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2223      	movs	r2, #35	@ 0x23
 8006f06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e000      	b.n	8006f10 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f26:	2b23      	cmp	r3, #35	@ 0x23
 8006f28:	d165      	bne.n	8006ff6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2223      	movs	r2, #35	@ 0x23
 8006f2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f3a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b30      	ldr	r3, [pc, #192]	@ (8007004 <HAL_ETH_Stop_IT+0xec>)
 8006f44:	400b      	ands	r3, r1
 8006f46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f4a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f56:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f66:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f82:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0202 	bic.w	r2, r2, #2
 8006fb8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e00e      	b.n	8006fde <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	3212      	adds	r2, #18
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b07      	cmp	r3, #7
 8006fe2:	d9ed      	bls.n	8006fc0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	669a      	str	r2, [r3, #104]	@ 0x68

    heth->gState = HAL_ETH_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2210      	movs	r2, #16
 8006fee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
  }
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	ffff2f3e 	.word	0xffff2f3e

08007008 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800701e:	f043 0201 	orr.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e03a      	b.n	80070a2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007032:	2b23      	cmp	r3, #35	@ 0x23
 8007034:	d134      	bne.n	80070a0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800703e:	2201      	movs	r2, #1
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 f9ec 	bl	8008420 <ETH_Prepare_Tx_Descriptors>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007054:	f043 0202 	orr.w	r2, r3, #2
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e01f      	b.n	80070a2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007062:	f3bf 8f4f 	dsb	sy
}
 8007066:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	629a      	str	r2, [r3, #40]	@ 0x28
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	2b03      	cmp	r3, #3
 8007078:	d904      	bls.n	8007084 <HAL_ETH_Transmit_IT+0x7c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	1f1a      	subs	r2, r3, #4
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3106      	adds	r1, #6
 8007090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007094:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007098:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  uint8_t expecting_ts = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	73bb      	strb	r3, [r7, #14]

  if (pAppBuff == NULL)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_ETH_ReadData+0x30>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0b2      	b.n	8007240 <HAL_ETH_ReadData+0x196>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070e0:	2b23      	cmp	r3, #35	@ 0x23
 80070e2:	d001      	beq.n	80070e8 <HAL_ETH_ReadData+0x3e>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0ab      	b.n	8007240 <HAL_ETH_ReadData+0x196>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	3212      	adds	r2, #18
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fe:	f1c3 0308 	rsb	r3, r3, #8
 8007102:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 8007104:	e072      	b.n	80071ec <HAL_ETH_ReadData+0x142>
    && desccnt < desccntmax
    && !rxdataready)
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00f      	beq.n	8007132 <HAL_ETH_ReadData+0x88>
    {
      if (expecting_ts)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d057      	beq.n	80071c8 <HAL_ETH_ReadData+0x11e>
      {
        /* Get timestamp high */
        heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        /* Get timestamp low */
        heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        rxdataready = 1;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e04a      	b.n	80071c8 <HAL_ETH_ReadData+0x11e>
      }
    }
    else
    {
      if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <HAL_ETH_ReadData+0x9e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d029      	beq.n	800719c <HAL_ETH_ReadData+0xf2>
      {
        /* Check if first descriptor */
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_ETH_ReadData+0xb0>
        {
          heth->RxDescList.RxDataLength = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        /* Check if last descriptor */
        bufflength = heth->Init.RxBuffLen;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	613b      	str	r3, [r7, #16]
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d017      	beq.n	800719c <HAL_ETH_ReadData+0xf2>
        {
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	613b      	str	r3, [r7, #16]

          /* Save Last descriptor index */
          heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Packet ready */
          if (!READ_BIT(dmarxdesc->DESC1, (1 << 14)))
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <HAL_ETH_ReadData+0xee>
          {
            rxdataready = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e001      	b.n	800719c <HAL_ETH_ReadData+0xf2>
          }
          else
          {
            expecting_ts = 1;
 8007198:	2301      	movs	r3, #1
 800719a:	73bb      	strb	r3, [r7, #14]
          }
        }
      }

      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f103 0190 	add.w	r1, r3, #144	@ 0x90
        &heth->RxDescList.pRxEnd,
        (uint8_t *)dmarxdesc->BackupAddr0,
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 80071ac:	461a      	mov	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f7fa fa93 	bl	80016dc <HAL_ETH_RxLinkCallback>
        (uint16_t) bufflength);

      heth->RxDescList.RxDataLength += bufflength;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	441a      	add	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2200      	movs	r2, #0
 80071c6:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3301      	adds	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b07      	cmp	r3, #7
 80071d2:	d902      	bls.n	80071da <HAL_ETH_ReadData+0x130>
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	3b08      	subs	r3, #8
 80071d8:	61fb      	str	r3, [r7, #28]

    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	3212      	adds	r2, #18
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	3301      	adds	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	68db      	ldr	r3, [r3, #12]
    && !rxdataready)
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db06      	blt.n	8007202 <HAL_ETH_ReadData+0x158>
    && desccnt < desccntmax
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d202      	bcs.n	8007202 <HAL_ETH_ReadData+0x158>
    && !rxdataready)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d081      	beq.n	8007106 <HAL_ETH_ReadData+0x5c>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	67da      	str	r2, [r3, #124]	@ 0x7c

  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_ETH_ReadData+0x172>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f816 	bl	8007248 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (rxdataready == 1U)
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d10a      	bne.n	800723e <HAL_ETH_ReadData+0x194>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	e000      	b.n	8007240 <HAL_ETH_ReadData+0x196>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800725c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	3212      	adds	r2, #18
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800726e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8007270:	e038      	b.n	80072e4 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d112      	bne.n	80072a0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800727a:	f107 0308 	add.w	r3, r7, #8
 800727e:	4618      	mov	r0, r3
 8007280:	f7fa f9fc 	bl	800167c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	74fb      	strb	r3, [r7, #19]
 800728e:	e007      	b.n	80072a0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	461a      	mov	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	461a      	mov	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80072a0:	7cfb      	ldrb	r3, [r7, #19]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	e003      	b.n	80072c0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80072be:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	3301      	adds	r3, #1
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b07      	cmp	r3, #7
 80072ca:	d902      	bls.n	80072d2 <ETH_UpdateDescriptor+0x8a>
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	3b08      	subs	r3, #8
 80072d0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	3212      	adds	r2, #18
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	617b      	str	r3, [r7, #20]
      desccount--;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <ETH_UpdateDescriptor+0xa8>
 80072ea:	7cfb      	ldrb	r3, [r7, #19]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1c0      	bne.n	8007272 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d01b      	beq.n	8007332 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3301      	adds	r3, #1
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007304:	f3bf 8f5f 	dmb	sy
}
 8007308:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6919      	ldr	r1, [r3, #16]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	18ca      	adds	r2, r1, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007322:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	679a      	str	r2, [r3, #120]	@ 0x78
    heth->RxDescList.RxBuildDescCnt = desccount;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8007332:	bf00      	nop
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b088      	sub	sp, #32
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3318      	adds	r3, #24
 8007346:	613b      	str	r3, [r7, #16]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	61fb      	str	r3, [r7, #28]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	61bb      	str	r3, [r7, #24]
  uint8_t pktTxStatus = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
  uint8_t pktInUse;
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3394      	adds	r3, #148	@ 0x94
 800735c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800735e:	e0aa      	b.n	80074b6 <HAL_ETH_ReleaseTxPacket+0x17c>
  {
    pktInUse = 1U;
 8007360:	2301      	movs	r3, #1
 8007362:	75bb      	strb	r3, [r7, #22]
    numOfBuf--;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3b01      	subs	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	3304      	adds	r3, #4
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <HAL_ETH_ReleaseTxPacket+0x56>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	3301      	adds	r3, #1
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d902      	bls.n	800738c <HAL_ETH_ReleaseTxPacket+0x52>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	3b04      	subs	r3, #4
 800738a:	61bb      	str	r3, [r7, #24]
      pktInUse = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	75bb      	strb	r3, [r7, #22]
    }

    if (pktInUse != 0U)
 8007390:	7dbb      	ldrb	r3, [r7, #22]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 808f 	beq.w	80074b6 <HAL_ETH_ReleaseTxPacket+0x17c>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68d9      	ldr	r1, [r3, #12]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	440b      	add	r3, r1
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f2c0 8081 	blt.w	80074b2 <HAL_ETH_ReleaseTxPacket+0x178>
      {
#ifdef HAL_ETH_USE_PTP

        /* Disable Ptp transmission */
        CLEAR_BIT(heth->Init.TxDesc[idx].DESC3, (0x40000000U));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68d9      	ldr	r1, [r3, #12]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	440b      	add	r3, r1
 80073c0:	68d9      	ldr	r1, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68d8      	ldr	r0, [r3, #12]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	4613      	mov	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4413      	add	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4403      	add	r3, r0
 80073d2:	f021 4280 	bic.w	r2, r1, #1073741824	@ 0x40000000
 80073d6:	60da      	str	r2, [r3, #12]

        if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_LD)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68d9      	ldr	r1, [r3, #12]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	440b      	add	r3, r1
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d023      	beq.n	800743a <HAL_ETH_ReleaseTxPacket+0x100>
            && (heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_TTSS))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	440b      	add	r3, r1
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <HAL_ETH_ReleaseTxPacket+0x100>
        {
          /* Get timestamp low */
          timestamp->TimeStampLow = heth->Init.TxDesc[idx].DESC0;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68d9      	ldr	r1, [r3, #12]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]
          /* Get timestamp high */
          timestamp->TimeStampHigh = heth->Init.TxDesc[idx].DESC1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68d9      	ldr	r1, [r3, #12]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4613      	mov	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	440b      	add	r3, r1
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	e007      	b.n	800744a <HAL_ETH_ReleaseTxPacket+0x110>
        }
        else
        {
          timestamp->TimeStampHigh = timestamp->TimeStampLow = UINT32_MAX;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f04f 32ff 	mov.w	r2, #4294967295
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]
        heth->txFreeCallback(dmatxdesclist->PacketAddress[idx]);
#else
        /* Call callbacks */
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        if (timestamp->TimeStampHigh != UINT32_MAX && timestamp->TimeStampLow != UINT32_MAX)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d00e      	beq.n	8007472 <HAL_ETH_ReleaseTxPacket+0x138>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d009      	beq.n	8007472 <HAL_ETH_ReleaseTxPacket+0x138>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	3304      	adds	r3, #4
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68f9      	ldr	r1, [r7, #12]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f86e 	bl	800754e <HAL_ETH_TxPtpCallback>
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	3304      	adds	r3, #4
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	f7fa f994 	bl	80017ac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3304      	adds	r3, #4
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	2200      	movs	r2, #0
 8007490:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	3301      	adds	r3, #1
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d902      	bls.n	80074a4 <HAL_ETH_ReleaseTxPacket+0x16a>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	61bb      	str	r3, [r7, #24]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074b0:	e001      	b.n	80074b6 <HAL_ETH_ReleaseTxPacket+0x17c>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_ETH_ReleaseTxPacket+0x18a>
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af4e 	bne.w	8007360 <HAL_ETH_ReleaseTxPacket+0x26>
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_ETH_PTP_InsertTxTimestamp>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_InsertTxTimestamp(ETH_HandleTypeDef *heth)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3318      	adds	r3, #24
 80074da:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	613b      	str	r3, [r7, #16]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	60fb      	str	r3, [r7, #12]

  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <HAL_ETH_PTP_InsertTxTimestamp+0x38>
  {
    /* Enable Time Stamp transmission */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_TTSE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	609a      	str	r2, [r3, #8]

    /* Return function status */
    return HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	e000      	b.n	8007508 <HAL_ETH_PTP_InsertTxTimestamp+0x3a>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
  }
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_ETH_PTP_GetRxTimestamp>:
  * @param  timestamp: pointer to ETH_TIMESTAMPTypeDef structure that contains
  *         receive timestamp
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_GetRxTimestamp(ETH_HandleTypeDef *heth, ETH_TimeStampTypeDef *timestamp)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10b      	bne.n	8007540 <HAL_ETH_PTP_GetRxTimestamp+0x2c>
  {
    /* Get timestamp low */
    timestamp->TimeStampLow = heth->RxDescList.TimeStamp.TimeStampLow;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	601a      	str	r2, [r3, #0]
    /* Get timestamp high */
    timestamp->TimeStampHigh = heth->RxDescList.TimeStamp.TimeStampHigh;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	605a      	str	r2, [r3, #4]

    /* Return function status */
    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_ETH_PTP_GetRxTimestamp+0x2e>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_ETH_TxPtpCallback>:
  * @param  timestamp: pointer to ETH_TimeStampTypeDef structure that contains
  *         transmission timestamp
  * @retval None
  */
__weak void HAL_ETH_TxPtpCallback(uint32_t *buff, ETH_TimeStampTypeDef *timestamp)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxPtpCallback could be implemented in the user file
  */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007582:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800758c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8007590:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8007592:	4b6d      	ldr	r3, [pc, #436]	@ (8007748 <HAL_ETH_IRQHandler+0x1e4>)
 8007594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007596:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d010      	beq.n	80075c4 <HAL_ETH_IRQHandler+0x60>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b4:	461a      	mov	r2, r3
 80075b6:	f248 0340 	movw	r3, #32832	@ 0x8040
 80075ba:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7f9 ff2a 	bl	8001418 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d010      	beq.n	80075f0 <HAL_ETH_IRQHandler+0x8c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e0:	461a      	mov	r2, r3
 80075e2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80075e6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7f9 ff24 	bl	8001438 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d047      	beq.n	800768a <HAL_ETH_IRQHandler+0x126>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d042      	beq.n	800768a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800760a:	f043 0208 	orr.w	r2, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01e      	beq.n	800765c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007626:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800762a:	f241 1302 	movw	r3, #4354	@ 0x1102
 800762e:	4013      	ands	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800764a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800764e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	22e0      	movs	r2, #224	@ 0xe0
 8007656:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800765a:	e013      	b.n	8007684 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007664:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007668:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800767a:	461a      	mov	r2, r3
 800767c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8007680:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7f9 fee7 	bl	8001458 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800769a:	2b00      	cmp	r3, #0
 800769c:	d019      	beq.n	80076d2 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076a4:	f043 0210 	orr.w	r2, r3, #16
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    heth->gState = HAL_ETH_STATE_ERROR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	22e0      	movs	r2, #224	@ 0xe0
 80076c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7f9 fec7 	bl	8001458 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00f      	beq.n	80076fc <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80076e4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f82c 	bl	800774c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00f      	beq.n	8007726 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f821 	bl	8007760 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <HAL_ETH_IRQHandler+0x1e4>)
 8007732:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f81b 	bl	8007774 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800773e:	bf00      	nop
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	58000080 	.word	0x58000080

0800774c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e03e      	b.n	8007828 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077b2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	055b      	lsls	r3, r3, #21
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	041b      	lsls	r3, r3, #16
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f043 030c 	orr.w	r3, r3, #12
 80077d6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80077ea:	f7ff f89b 	bl	8006924 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80077f0:	e009      	b.n	8007806 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80077f2:	f7ff f897 	bl	8006924 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007800:	d901      	bls.n	8007806 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e010      	b.n	8007828 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ed      	bne.n	80077f2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e03c      	b.n	80078cc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800785a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	055b      	lsls	r3, r3, #21
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	041b      	lsls	r3, r3, #16
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 030c 	bic.w	r3, r3, #12
 800787e:	f043 0304 	orr.w	r3, r3, #4
 8007882:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <HAL_ETH_WritePHYRegister+0xa4>)
 8007892:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8007896:	4a0f      	ldr	r2, [pc, #60]	@ (80078d4 <HAL_ETH_WritePHYRegister+0xa4>)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800789e:	f7ff f841 	bl	8006924 <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078a4:	e009      	b.n	80078ba <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80078a6:	f7ff f83d 	bl	8006924 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078b4:	d901      	bls.n	80078ba <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e008      	b.n	80078cc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1ed      	bne.n	80078a6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40028000 	.word	0x40028000

080078d8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e1c3      	b.n	8007c74 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 020c 	and.w	r2, r3, #12
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf14      	ite	ne
 8007908:	2301      	movne	r3, #1
 800790a:	2300      	moveq	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792e:	2b00      	cmp	r3, #0
 8007930:	bf0c      	ite	eq
 8007932:	2301      	moveq	r3, #1
 8007934:	2300      	movne	r3, #0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf0c      	ite	eq
 8007968:	2301      	moveq	r3, #1
 800796a:	2300      	movne	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800797a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800797e:	2b00      	cmp	r3, #0
 8007980:	bf14      	ite	ne
 8007982:	2301      	movne	r3, #1
 8007984:	2300      	moveq	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf14      	ite	ne
 800799c:	2301      	movne	r3, #1
 800799e:	2300      	moveq	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bf0c      	ite	eq
 80079ec:	2301      	moveq	r3, #1
 80079ee:	2300      	movne	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bf14      	ite	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bf14      	ite	ne
 8007a54:	2301      	movne	r3, #1
 8007a56:	2300      	moveq	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8007a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bf14      	ite	ne
 8007a6e:	2301      	movne	r3, #1
 8007a70:	2300      	moveq	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf0c      	ite	eq
 8007acc:	2301      	moveq	r3, #1
 8007ace:	2300      	movne	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf14      	ite	ne
 8007ae8:	2301      	movne	r3, #1
 8007aea:	2300      	moveq	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	0e5b      	lsrs	r3, r3, #25
 8007b36:	f003 021f 	and.w	r2, r3, #31
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf14      	ite	ne
 8007b4c:	2301      	movne	r3, #1
 8007b4e:	2300      	moveq	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bf14      	ite	ne
 8007bcc:	2301      	movne	r3, #1
 8007bce:	2300      	moveq	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8007c00:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007c10:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf14      	ite	ne
 8007c28:	2301      	movne	r3, #1
 8007c2a:	2300      	moveq	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e00b      	b.n	8007cac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d105      	bne.n	8007caa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8d7 	bl	8007e54 <ETH_SetMACConfig>

    return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e000      	b.n	8007cac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e00b      	b.n	8007ce0 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d105      	bne.n	8007cde <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f9d9 	bl	800808c <ETH_SetDMAConfig>

    return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007d02:	f001 ff2f 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8007d06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8007d74 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d804      	bhi.n	8007d1a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	e022      	b.n	8007d60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4a16      	ldr	r2, [pc, #88]	@ (8007d78 <HAL_ETH_SetMDIOClockRange+0x90>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d204      	bcs.n	8007d2c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	e019      	b.n	8007d60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <HAL_ETH_SetMDIOClockRange+0x94>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d915      	bls.n	8007d60 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4a12      	ldr	r2, [pc, #72]	@ (8007d80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d804      	bhi.n	8007d46 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e00c      	b.n	8007d60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	4a0e      	ldr	r2, [pc, #56]	@ (8007d84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d804      	bhi.n	8007d58 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e003      	b.n	8007d60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	02160ebf 	.word	0x02160ebf
 8007d78:	03938700 	.word	0x03938700
 8007d7c:	05f5e0ff 	.word	0x05f5e0ff
 8007d80:	08f0d17f 	.word	0x08f0d17f
 8007d84:	0ee6b27f 	.word	0x0ee6b27f

08007d88 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e039      	b.n	8007e10 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007da8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	791b      	ldrb	r3, [r3, #4]
 8007dae:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8007db0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	7a1b      	ldrb	r3, [r3, #8]
 8007db6:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8007db8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8007dc0:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	7a52      	ldrb	r2, [r2, #9]
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_ETH_SetMACFilterConfig+0x46>
 8007dca:	2220      	movs	r2, #32
 8007dcc:	e000      	b.n	8007dd0 <HAL_ETH_SetMACFilterConfig+0x48>
 8007dce:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8007dd0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	79db      	ldrb	r3, [r3, #7]
 8007dd6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8007dd8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	799b      	ldrb	r3, [r3, #6]
 8007dde:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8007de0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	789b      	ldrb	r3, [r3, #2]
 8007de6:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8007de8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8007df0:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <HAL_ETH_SetMACFilterConfig+0x94>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	68f9      	ldr	r1, [r7, #12]
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	7ffff800 	.word	0x7ffff800

08007e20 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007e66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	791b      	ldrb	r3, [r3, #4]
 8007e6c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007e6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	7b1b      	ldrb	r3, [r3, #12]
 8007e74:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007e76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	7b5b      	ldrb	r3, [r3, #13]
 8007e7c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	7b9b      	ldrb	r3, [r3, #14]
 8007e84:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	7bdb      	ldrb	r3, [r3, #15]
 8007e8c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007e8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	7c12      	ldrb	r2, [r2, #16]
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	d102      	bne.n	8007e9e <ETH_SetMACConfig+0x4a>
 8007e98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007e9c:	e000      	b.n	8007ea0 <ETH_SetMACConfig+0x4c>
 8007e9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007ea0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	7c52      	ldrb	r2, [r2, #17]
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	d102      	bne.n	8007eb0 <ETH_SetMACConfig+0x5c>
 8007eaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007eae:	e000      	b.n	8007eb2 <ETH_SetMACConfig+0x5e>
 8007eb0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	7c9b      	ldrb	r3, [r3, #18]
 8007eb8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007eba:	431a      	orrs	r2, r3
               macconf->Speed |
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007ec0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	7f1b      	ldrb	r3, [r3, #28]
 8007ecc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007ece:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	7f5b      	ldrb	r3, [r3, #29]
 8007ed4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007ed6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	7f92      	ldrb	r2, [r2, #30]
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	d102      	bne.n	8007ee6 <ETH_SetMACConfig+0x92>
 8007ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ee4:	e000      	b.n	8007ee8 <ETH_SetMACConfig+0x94>
 8007ee6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007ee8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	7fdb      	ldrb	r3, [r3, #31]
 8007eee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007ef0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	d102      	bne.n	8007f02 <ETH_SetMACConfig+0xae>
 8007efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f00:	e000      	b.n	8007f04 <ETH_SetMACConfig+0xb0>
 8007f02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007f04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007f0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007f14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	4b56      	ldr	r3, [pc, #344]	@ (8008080 <ETH_SetMACConfig+0x22c>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	68f9      	ldr	r1, [r7, #12]
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007f54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8007f5c:	2a00      	cmp	r2, #0
 8007f5e:	d102      	bne.n	8007f66 <ETH_SetMACConfig+0x112>
 8007f60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007f64:	e000      	b.n	8007f68 <ETH_SetMACConfig+0x114>
 8007f66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007f68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	4b42      	ldr	r3, [pc, #264]	@ (8008084 <ETH_SetMACConfig+0x230>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	68f9      	ldr	r1, [r7, #12]
 8007f82:	430b      	orrs	r3, r1
 8007f84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8008088 <ETH_SetMACConfig+0x234>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007fb0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007fb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d101      	bne.n	8007fc6 <ETH_SetMACConfig+0x172>
 8007fc2:	2280      	movs	r2, #128	@ 0x80
 8007fc4:	e000      	b.n	8007fc8 <ETH_SetMACConfig+0x174>
 8007fc6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007fc8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007fda:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8007fde:	4013      	ands	r3, r2
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007ff0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007ff8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f023 0103 	bic.w	r1, r3, #3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	430a      	orrs	r2, r1
 8008012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800801e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800803a:	2a00      	cmp	r2, #0
 800803c:	d101      	bne.n	8008042 <ETH_SetMACConfig+0x1ee>
 800803e:	2240      	movs	r2, #64	@ 0x40
 8008040:	e000      	b.n	8008044 <ETH_SetMACConfig+0x1f0>
 8008042:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008044:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800804c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800804e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8008056:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8008064:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	430a      	orrs	r2, r1
 8008070:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	00048083 	.word	0x00048083
 8008084:	c0f88000 	.word	0xc0f88000
 8008088:	fffffef0 	.word	0xfffffef0

0800808c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b38      	ldr	r3, [pc, #224]	@ (8008184 <ETH_SetDMAConfig+0xf8>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	6811      	ldr	r1, [r2, #0]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	430b      	orrs	r3, r1
 80080ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	7b1b      	ldrb	r3, [r3, #12]
 80080c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008188 <ETH_SetDMAConfig+0xfc>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	430b      	orrs	r3, r1
 80080e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080e4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	7b5b      	ldrb	r3, [r3, #13]
 80080ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8008100:	4b22      	ldr	r3, [pc, #136]	@ (800818c <ETH_SetDMAConfig+0x100>)
 8008102:	4013      	ands	r3, r2
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	430b      	orrs	r3, r1
 800810c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008110:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	7d1b      	ldrb	r3, [r3, #20]
 800811c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800811e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	7f5b      	ldrb	r3, [r3, #29]
 8008124:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008132:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8008136:	4b16      	ldr	r3, [pc, #88]	@ (8008190 <ETH_SetDMAConfig+0x104>)
 8008138:	4013      	ands	r3, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	430b      	orrs	r3, r1
 8008142:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008146:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	7f1b      	ldrb	r3, [r3, #28]
 800814e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008160:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8008164:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <ETH_SetDMAConfig+0x108>)
 8008166:	4013      	ands	r3, r2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	68f9      	ldr	r1, [r7, #12]
 800816e:	430b      	orrs	r3, r1
 8008170:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008174:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	ffff87fd 	.word	0xffff87fd
 8008188:	ffff2ffe 	.word	0xffff2ffe
 800818c:	fffec000 	.word	0xfffec000
 8008190:	ffc0efef 	.word	0xffc0efef
 8008194:	7fc0ffff 	.word	0x7fc0ffff

08008198 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b0a4      	sub	sp, #144	@ 0x90
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80081a6:	2300      	movs	r3, #0
 80081a8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80081d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80081d8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80081f0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80081f4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80081fc:	2300      	movs	r3, #0
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008212:	2300      	movs	r3, #0
 8008214:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8008216:	2300      	movs	r3, #0
 8008218:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800821a:	2300      	movs	r3, #0
 800821c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800821e:	2300      	movs	r3, #0
 8008220:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800822a:	2301      	movs	r3, #1
 800822c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008230:	2320      	movs	r3, #32
 8008232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008242:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8008246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008248:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800824c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800824e:	2300      	movs	r3, #0
 8008250:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008254:	2302      	movs	r3, #2
 8008256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008266:	2300      	movs	r3, #0
 8008268:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008272:	2300      	movs	r3, #0
 8008274:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800827c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fde6 	bl	8007e54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008288:	2301      	movs	r3, #1
 800828a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800828c:	2301      	movs	r3, #1
 800828e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008290:	2300      	movs	r3, #0
 8008292:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800829a:	2300      	movs	r3, #0
 800829c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800829e:	2300      	movs	r3, #0
 80082a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80082a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80082ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80082b8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fee1 	bl	800808c <ETH_SetDMAConfig>
}
 80082ca:	bf00      	nop
 80082cc:	3790      	adds	r7, #144	@ 0x90
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	e01d      	b.n	800831c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68d9      	ldr	r1, [r3, #12]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4613      	mov	r3, r2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4413      	add	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	440b      	add	r3, r1
 80082f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2200      	movs	r2, #0
 8008302:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	3206      	adds	r2, #6
 8008312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b03      	cmp	r3, #3
 8008320:	d9de      	bls.n	80082e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008330:	461a      	mov	r2, r3
 8008332:	2303      	movs	r3, #3
 8008334:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008344:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008354:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8008358:	bf00      	nop
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	e023      	b.n	80083ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6919      	ldr	r1, [r3, #16]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	440b      	add	r3, r1
 8008382:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2200      	movs	r2, #0
 800839a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	3212      	adds	r2, #18
 80083b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b07      	cmp	r3, #7
 80083be:	d9d8      	bls.n	8008372 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	671a      	str	r2, [r3, #112]	@ 0x70
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	679a      	str	r2, [r3, #120]	@ 0x78
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e6:	461a      	mov	r2, r3
 80083e8:	2307      	movs	r3, #7
 80083ea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
	...

08008420 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8008420:	b480      	push	{r7}
 8008422:	b091      	sub	sp, #68	@ 0x44
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3318      	adds	r3, #24
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008462:	d007      	beq.n	8008474 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008468:	3304      	adds	r3, #4
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8008474:	2302      	movs	r3, #2
 8008476:	e266      	b.n	8008946 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d044      	beq.n	800850e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	4b75      	ldr	r3, [pc, #468]	@ (8008660 <ETH_Prepare_Tx_Descriptors+0x240>)
 800848a:	4013      	ands	r3, r2
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008490:	431a      	orrs	r2, r3
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80084b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d027      	beq.n	800850e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	041b      	lsls	r3, r3, #16
 80084ca:	431a      	orrs	r2, r3
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e8:	431a      	orrs	r2, r3
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80084fc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800850c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	4b51      	ldr	r3, [pc, #324]	@ (8008664 <ETH_Prepare_Tx_Descriptors+0x244>)
 8008520:	4013      	ands	r3, r2
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6992      	ldr	r2, [r2, #24]
 8008526:	431a      	orrs	r2, r3
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d036      	beq.n	80085be <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800855c:	f3bf 8f5f 	dmb	sy
}
 8008560:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800856e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008570:	3301      	adds	r3, #1
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008576:	2b03      	cmp	r3, #3
 8008578:	d902      	bls.n	8008580 <ETH_Prepare_Tx_Descriptors+0x160>
 800857a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857c:	3b04      	subs	r3, #4
 800857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008588:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800858a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858c:	3301      	adds	r3, #1
 800858e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800859c:	d10f      	bne.n	80085be <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80085a8:	f3bf 8f5f 	dmb	sy
}
 80085ac:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80085ba:	2302      	movs	r3, #2
 80085bc:	e1c3      	b.n	8008946 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	3301      	adds	r3, #1
 80085c2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80085c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	4b24      	ldr	r3, [pc, #144]	@ (8008664 <ETH_Prepare_Tx_Descriptors+0x244>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d8:	6852      	ldr	r2, [r2, #4]
 80085da:	431a      	orrs	r2, r3
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80085e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80085ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <ETH_Prepare_Tx_Descriptors+0x248>)
 80085fe:	4013      	ands	r3, r2
 8008600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	0412      	lsls	r2, r2, #16
 8008606:	431a      	orrs	r2, r3
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	e008      	b.n	8008620 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	2200      	movs	r2, #0
 8008612:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	4b13      	ldr	r3, [pc, #76]	@ (8008668 <ETH_Prepare_Tx_Descriptors+0x248>)
 800861a:	4013      	ands	r3, r2
 800861c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800861e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	d021      	beq.n	8008670 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	04db      	lsls	r3, r3, #19
 800863a:	431a      	orrs	r2, r3
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	4b09      	ldr	r3, [pc, #36]	@ (800866c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8008646:	4013      	ands	r3, r2
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	69d2      	ldr	r2, [r2, #28]
 800864c:	431a      	orrs	r2, r3
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	60da      	str	r2, [r3, #12]
 800865e:	e02e      	b.n	80086be <ETH_Prepare_Tx_Descriptors+0x29e>
 8008660:	ffff0000 	.word	0xffff0000
 8008664:	ffffc000 	.word	0xffffc000
 8008668:	c000ffff 	.word	0xc000ffff
 800866c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	4b7b      	ldr	r3, [pc, #492]	@ (8008864 <ETH_Prepare_Tx_Descriptors+0x444>)
 8008676:	4013      	ands	r3, r2
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	6852      	ldr	r2, [r2, #4]
 800867c:	431a      	orrs	r2, r3
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	431a      	orrs	r2, r3
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d6:	431a      	orrs	r2, r3
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80086f4:	f3bf 8f5f 	dmb	sy
}
 80086f8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80da 	beq.w	80088c8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	431a      	orrs	r2, r3
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8008726:	e0cf      	b.n	80088c8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008736:	3301      	adds	r3, #1
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873c:	2b03      	cmp	r3, #3
 800873e:	d902      	bls.n	8008746 <ETH_Prepare_Tx_Descriptors+0x326>
 8008740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008742:	3b04      	subs	r3, #4
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008768:	d007      	beq.n	800877a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800876a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800876e:	3304      	adds	r3, #4
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d029      	beq.n	80087ce <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8008788:	2300      	movs	r3, #0
 800878a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800878c:	e019      	b.n	80087c2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800878e:	f3bf 8f5f 	dmb	sy
}
 8008792:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80087a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a2:	3301      	adds	r3, #1
 80087a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d902      	bls.n	80087b2 <ETH_Prepare_Tx_Descriptors+0x392>
 80087ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ae:	3b04      	subs	r3, #4
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ba:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80087bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087be:	3301      	adds	r3, #1
 80087c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d3e1      	bcc.n	800878e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0bb      	b.n	8008946 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80087ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d0:	3301      	adds	r3, #1
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80087d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80087da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	4b1f      	ldr	r3, [pc, #124]	@ (8008868 <ETH_Prepare_Tx_Descriptors+0x448>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ee:	6852      	ldr	r2, [r2, #4]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80087f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80087fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8008804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	4b16      	ldr	r3, [pc, #88]	@ (800886c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8008814:	4013      	ands	r3, r2
 8008816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008818:	6852      	ldr	r2, [r2, #4]
 800881a:	0412      	lsls	r2, r2, #16
 800881c:	431a      	orrs	r2, r3
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	609a      	str	r2, [r3, #8]
 8008822:	e008      	b.n	8008836 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	2200      	movs	r2, #0
 8008828:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	4b0f      	ldr	r3, [pc, #60]	@ (800886c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8008830:	4013      	ands	r3, r2
 8008832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008834:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0310 	and.w	r3, r3, #16
 800883e:	2b00      	cmp	r3, #0
 8008840:	d018      	beq.n	8008874 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <ETH_Prepare_Tx_Descriptors+0x450>)
 8008848:	4013      	ands	r3, r2
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	69d2      	ldr	r2, [r2, #28]
 800884e:	431a      	orrs	r2, r3
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	60da      	str	r2, [r3, #12]
 8008860:	e020      	b.n	80088a4 <ETH_Prepare_Tx_Descriptors+0x484>
 8008862:	bf00      	nop
 8008864:	ffff8000 	.word	0xffff8000
 8008868:	ffffc000 	.word	0xffffc000
 800886c:	c000ffff 	.word	0xc000ffff
 8008870:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	4b36      	ldr	r3, [pc, #216]	@ (8008954 <ETH_Prepare_Tx_Descriptors+0x534>)
 800887a:	4013      	ands	r3, r2
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	6852      	ldr	r2, [r2, #4]
 8008880:	431a      	orrs	r2, r3
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d008      	beq.n	80088a4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	431a      	orrs	r2, r3
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	3301      	adds	r3, #1
 80088a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80088aa:	f3bf 8f5f 	dmb	sy
}
 80088ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80088c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f af2b 	bne.w	8008728 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d006      	beq.n	80088e6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	e005      	b.n	80088f2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008906:	3304      	adds	r3, #4
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008912:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008914:	f3ef 8310 	mrs	r3, PRIMASK
 8008918:	613b      	str	r3, [r7, #16]
  return(result);
 800891a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800891c:	61fb      	str	r3, [r7, #28]
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f383 8810 	msr	PRIMASK, r3
}
 8008928:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800892e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008930:	4413      	add	r3, r2
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	629a      	str	r2, [r3, #40]	@ 0x28
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f383 8810 	msr	PRIMASK, r3
}
 8008942:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3744      	adds	r7, #68	@ 0x44
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	ffff8000 	.word	0xffff8000

08008958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	@ 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008966:	4b86      	ldr	r3, [pc, #536]	@ (8008b80 <HAL_GPIO_Init+0x228>)
 8008968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800896a:	e18c      	b.n	8008c86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	2101      	movs	r1, #1
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	fa01 f303 	lsl.w	r3, r1, r3
 8008978:	4013      	ands	r3, r2
 800897a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 817e 	beq.w	8008c80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d005      	beq.n	800899c <HAL_GPIO_Init+0x44>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d130      	bne.n	80089fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	2203      	movs	r2, #3
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	4013      	ands	r3, r2
 80089b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089d2:	2201      	movs	r2, #1
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	43db      	mvns	r3, r3
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	4013      	ands	r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0201 	and.w	r2, r3, #1
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d017      	beq.n	8008a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	2203      	movs	r2, #3
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d123      	bne.n	8008a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	08da      	lsrs	r2, r3, #3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3208      	adds	r2, #8
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	220f      	movs	r2, #15
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	08da      	lsrs	r2, r3, #3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3208      	adds	r2, #8
 8008a88:	69b9      	ldr	r1, [r7, #24]
 8008a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	2203      	movs	r2, #3
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f003 0203 	and.w	r2, r3, #3
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80d8 	beq.w	8008c80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8008b84 <HAL_GPIO_Init+0x22c>)
 8008ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b84 <HAL_GPIO_Init+0x22c>)
 8008ad8:	f043 0302 	orr.w	r3, r3, #2
 8008adc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008ae0:	4b28      	ldr	r3, [pc, #160]	@ (8008b84 <HAL_GPIO_Init+0x22c>)
 8008ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008aee:	4a26      	ldr	r2, [pc, #152]	@ (8008b88 <HAL_GPIO_Init+0x230>)
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	089b      	lsrs	r3, r3, #2
 8008af4:	3302      	adds	r3, #2
 8008af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	220f      	movs	r2, #15
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	43db      	mvns	r3, r3
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1d      	ldr	r2, [pc, #116]	@ (8008b8c <HAL_GPIO_Init+0x234>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d04a      	beq.n	8008bb0 <HAL_GPIO_Init+0x258>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b90 <HAL_GPIO_Init+0x238>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d02b      	beq.n	8008b7a <HAL_GPIO_Init+0x222>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1b      	ldr	r2, [pc, #108]	@ (8008b94 <HAL_GPIO_Init+0x23c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d025      	beq.n	8008b76 <HAL_GPIO_Init+0x21e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8008b98 <HAL_GPIO_Init+0x240>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d01f      	beq.n	8008b72 <HAL_GPIO_Init+0x21a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a19      	ldr	r2, [pc, #100]	@ (8008b9c <HAL_GPIO_Init+0x244>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d019      	beq.n	8008b6e <HAL_GPIO_Init+0x216>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a18      	ldr	r2, [pc, #96]	@ (8008ba0 <HAL_GPIO_Init+0x248>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d013      	beq.n	8008b6a <HAL_GPIO_Init+0x212>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a17      	ldr	r2, [pc, #92]	@ (8008ba4 <HAL_GPIO_Init+0x24c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00d      	beq.n	8008b66 <HAL_GPIO_Init+0x20e>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a16      	ldr	r2, [pc, #88]	@ (8008ba8 <HAL_GPIO_Init+0x250>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d007      	beq.n	8008b62 <HAL_GPIO_Init+0x20a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a15      	ldr	r2, [pc, #84]	@ (8008bac <HAL_GPIO_Init+0x254>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d101      	bne.n	8008b5e <HAL_GPIO_Init+0x206>
 8008b5a:	2309      	movs	r3, #9
 8008b5c:	e029      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b5e:	230a      	movs	r3, #10
 8008b60:	e027      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b62:	2307      	movs	r3, #7
 8008b64:	e025      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b66:	2306      	movs	r3, #6
 8008b68:	e023      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b6a:	2305      	movs	r3, #5
 8008b6c:	e021      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b6e:	2304      	movs	r3, #4
 8008b70:	e01f      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b72:	2303      	movs	r3, #3
 8008b74:	e01d      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e01b      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e019      	b.n	8008bb2 <HAL_GPIO_Init+0x25a>
 8008b7e:	bf00      	nop
 8008b80:	58000080 	.word	0x58000080
 8008b84:	58024400 	.word	0x58024400
 8008b88:	58000400 	.word	0x58000400
 8008b8c:	58020000 	.word	0x58020000
 8008b90:	58020400 	.word	0x58020400
 8008b94:	58020800 	.word	0x58020800
 8008b98:	58020c00 	.word	0x58020c00
 8008b9c:	58021000 	.word	0x58021000
 8008ba0:	58021400 	.word	0x58021400
 8008ba4:	58021800 	.word	0x58021800
 8008ba8:	58021c00 	.word	0x58021c00
 8008bac:	58022400 	.word	0x58022400
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	f002 0203 	and.w	r2, r2, #3
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	4093      	lsls	r3, r2
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bc2:	4938      	ldr	r1, [pc, #224]	@ (8008ca4 <HAL_GPIO_Init+0x34c>)
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	089b      	lsrs	r3, r3, #2
 8008bc8:	3302      	adds	r3, #2
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	4013      	ands	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	43db      	mvns	r3, r3
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f ae6b 	bne.w	800896c <HAL_GPIO_Init+0x14>
  }
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3724      	adds	r7, #36	@ 0x24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	58000400 	.word	0x58000400

08008ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cb8:	787b      	ldrb	r3, [r7, #1]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cbe:	887a      	ldrh	r2, [r7, #2]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008cc4:	e003      	b.n	8008cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cc6:	887b      	ldrh	r3, [r7, #2]
 8008cc8:	041a      	lsls	r2, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	619a      	str	r2, [r3, #24]
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ce4:	4b19      	ldr	r3, [pc, #100]	@ (8008d4c <HAL_PWREx_ConfigSupply+0x70>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d00a      	beq.n	8008d06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cf0:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <HAL_PWREx_ConfigSupply+0x70>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d001      	beq.n	8008d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e01f      	b.n	8008d42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	e01d      	b.n	8008d42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d06:	4b11      	ldr	r3, [pc, #68]	@ (8008d4c <HAL_PWREx_ConfigSupply+0x70>)
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f023 0207 	bic.w	r2, r3, #7
 8008d0e:	490f      	ldr	r1, [pc, #60]	@ (8008d4c <HAL_PWREx_ConfigSupply+0x70>)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d16:	f7fd fe05 	bl	8006924 <HAL_GetTick>
 8008d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d1c:	e009      	b.n	8008d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d1e:	f7fd fe01 	bl	8006924 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d2c:	d901      	bls.n	8008d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e007      	b.n	8008d42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d32:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <HAL_PWREx_ConfigSupply+0x70>)
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d3e:	d1ee      	bne.n	8008d1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	58024800 	.word	0x58024800

08008d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08c      	sub	sp, #48	@ 0x30
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e3c8      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 8087 	beq.w	8008e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d70:	4b88      	ldr	r3, [pc, #544]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d7a:	4b86      	ldr	r3, [pc, #536]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d007      	beq.n	8008d96 <HAL_RCC_OscConfig+0x46>
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	2b18      	cmp	r3, #24
 8008d8a:	d110      	bne.n	8008dae <HAL_RCC_OscConfig+0x5e>
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d10b      	bne.n	8008dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d96:	4b7f      	ldr	r3, [pc, #508]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d06c      	beq.n	8008e7c <HAL_RCC_OscConfig+0x12c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d168      	bne.n	8008e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e3a2      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db6:	d106      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x76>
 8008db8:	4b76      	ldr	r3, [pc, #472]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a75      	ldr	r2, [pc, #468]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	e02e      	b.n	8008e24 <HAL_RCC_OscConfig+0xd4>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10c      	bne.n	8008de8 <HAL_RCC_OscConfig+0x98>
 8008dce:	4b71      	ldr	r3, [pc, #452]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a70      	ldr	r2, [pc, #448]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	4b6e      	ldr	r3, [pc, #440]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a6d      	ldr	r2, [pc, #436]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	e01d      	b.n	8008e24 <HAL_RCC_OscConfig+0xd4>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008df0:	d10c      	bne.n	8008e0c <HAL_RCC_OscConfig+0xbc>
 8008df2:	4b68      	ldr	r3, [pc, #416]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a67      	ldr	r2, [pc, #412]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4b65      	ldr	r3, [pc, #404]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a64      	ldr	r2, [pc, #400]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	e00b      	b.n	8008e24 <HAL_RCC_OscConfig+0xd4>
 8008e0c:	4b61      	ldr	r3, [pc, #388]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a60      	ldr	r2, [pc, #384]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	4b5e      	ldr	r3, [pc, #376]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d013      	beq.n	8008e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e2c:	f7fd fd7a 	bl	8006924 <HAL_GetTick>
 8008e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e32:	e008      	b.n	8008e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e34:	f7fd fd76 	bl	8006924 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b64      	cmp	r3, #100	@ 0x64
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e356      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e46:	4b53      	ldr	r3, [pc, #332]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0f0      	beq.n	8008e34 <HAL_RCC_OscConfig+0xe4>
 8008e52:	e014      	b.n	8008e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fd fd66 	bl	8006924 <HAL_GetTick>
 8008e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e5c:	f7fd fd62 	bl	8006924 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b64      	cmp	r3, #100	@ 0x64
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e342      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e6e:	4b49      	ldr	r3, [pc, #292]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1f0      	bne.n	8008e5c <HAL_RCC_OscConfig+0x10c>
 8008e7a:	e000      	b.n	8008e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 808c 	beq.w	8008fa4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e8c:	4b41      	ldr	r3, [pc, #260]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e96:	4b3f      	ldr	r3, [pc, #252]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x162>
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	2b18      	cmp	r3, #24
 8008ea6:	d137      	bne.n	8008f18 <HAL_RCC_OscConfig+0x1c8>
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d132      	bne.n	8008f18 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eb2:	4b38      	ldr	r3, [pc, #224]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <HAL_RCC_OscConfig+0x17a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e314      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008eca:	4b32      	ldr	r3, [pc, #200]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f023 0219 	bic.w	r2, r3, #25
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	492f      	ldr	r1, [pc, #188]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008edc:	f7fd fd22 	bl	8006924 <HAL_GetTick>
 8008ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ee2:	e008      	b.n	8008ef6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ee4:	f7fd fd1e 	bl	8006924 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e2fe      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ef6:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0f0      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f02:	4b24      	ldr	r3, [pc, #144]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	061b      	lsls	r3, r3, #24
 8008f10:	4920      	ldr	r1, [pc, #128]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f16:	e045      	b.n	8008fa4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d026      	beq.n	8008f6e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f20:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f023 0219 	bic.w	r2, r3, #25
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	4919      	ldr	r1, [pc, #100]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f32:	f7fd fcf7 	bl	8006924 <HAL_GetTick>
 8008f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f38:	e008      	b.n	8008f4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f3a:	f7fd fcf3 	bl	8006924 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e2d3      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f4c:	4b11      	ldr	r3, [pc, #68]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0f0      	beq.n	8008f3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f58:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	490b      	ldr	r1, [pc, #44]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	604b      	str	r3, [r1, #4]
 8008f6c:	e01a      	b.n	8008fa4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f6e:	4b09      	ldr	r3, [pc, #36]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a08      	ldr	r2, [pc, #32]	@ (8008f94 <HAL_RCC_OscConfig+0x244>)
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7a:	f7fd fcd3 	bl	8006924 <HAL_GetTick>
 8008f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f80:	e00a      	b.n	8008f98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f82:	f7fd fccf 	bl	8006924 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d903      	bls.n	8008f98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e2af      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
 8008f94:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f98:	4b96      	ldr	r3, [pc, #600]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1ee      	bne.n	8008f82 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d06a      	beq.n	8009086 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb0:	4b90      	ldr	r3, [pc, #576]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fb8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fba:	4b8e      	ldr	r3, [pc, #568]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d007      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x286>
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b18      	cmp	r3, #24
 8008fca:	d11b      	bne.n	8009004 <HAL_RCC_OscConfig+0x2b4>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d116      	bne.n	8009004 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fd6:	4b87      	ldr	r3, [pc, #540]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <HAL_RCC_OscConfig+0x29e>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d001      	beq.n	8008fee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e282      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fee:	4b81      	ldr	r3, [pc, #516]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	061b      	lsls	r3, r3, #24
 8008ffc:	497d      	ldr	r1, [pc, #500]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009002:	e040      	b.n	8009086 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d023      	beq.n	8009054 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800900c:	4b79      	ldr	r3, [pc, #484]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a78      	ldr	r2, [pc, #480]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009018:	f7fd fc84 	bl	8006924 <HAL_GetTick>
 800901c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009020:	f7fd fc80 	bl	8006924 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b02      	cmp	r3, #2
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e260      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009032:	4b70      	ldr	r3, [pc, #448]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0f0      	beq.n	8009020 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800903e:	4b6d      	ldr	r3, [pc, #436]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	061b      	lsls	r3, r3, #24
 800904c:	4969      	ldr	r1, [pc, #420]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800904e:	4313      	orrs	r3, r2
 8009050:	60cb      	str	r3, [r1, #12]
 8009052:	e018      	b.n	8009086 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009054:	4b67      	ldr	r3, [pc, #412]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a66      	ldr	r2, [pc, #408]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800905a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800905e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009060:	f7fd fc60 	bl	8006924 <HAL_GetTick>
 8009064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009066:	e008      	b.n	800907a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009068:	f7fd fc5c 	bl	8006924 <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d901      	bls.n	800907a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e23c      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800907a:	4b5e      	ldr	r3, [pc, #376]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1f0      	bne.n	8009068 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0308 	and.w	r3, r3, #8
 800908e:	2b00      	cmp	r3, #0
 8009090:	d036      	beq.n	8009100 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d019      	beq.n	80090ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800909a:	4b56      	ldr	r3, [pc, #344]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800909c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800909e:	4a55      	ldr	r2, [pc, #340]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80090a0:	f043 0301 	orr.w	r3, r3, #1
 80090a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a6:	f7fd fc3d 	bl	8006924 <HAL_GetTick>
 80090aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090ac:	e008      	b.n	80090c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ae:	f7fd fc39 	bl	8006924 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e219      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090c0:	4b4c      	ldr	r3, [pc, #304]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80090c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f0      	beq.n	80090ae <HAL_RCC_OscConfig+0x35e>
 80090cc:	e018      	b.n	8009100 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090ce:	4b49      	ldr	r3, [pc, #292]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80090d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d2:	4a48      	ldr	r2, [pc, #288]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80090d4:	f023 0301 	bic.w	r3, r3, #1
 80090d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090da:	f7fd fc23 	bl	8006924 <HAL_GetTick>
 80090de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090e0:	e008      	b.n	80090f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090e2:	f7fd fc1f 	bl	8006924 <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e1ff      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090f4:	4b3f      	ldr	r3, [pc, #252]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80090f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f0      	bne.n	80090e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d036      	beq.n	800917a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d019      	beq.n	8009148 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009114:	4b37      	ldr	r3, [pc, #220]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a36      	ldr	r2, [pc, #216]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800911a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800911e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009120:	f7fd fc00 	bl	8006924 <HAL_GetTick>
 8009124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009128:	f7fd fbfc 	bl	8006924 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e1dc      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800913a:	4b2e      	ldr	r3, [pc, #184]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <HAL_RCC_OscConfig+0x3d8>
 8009146:	e018      	b.n	800917a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009148:	4b2a      	ldr	r3, [pc, #168]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a29      	ldr	r2, [pc, #164]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 800914e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009152:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009154:	f7fd fbe6 	bl	8006924 <HAL_GetTick>
 8009158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800915c:	f7fd fbe2 	bl	8006924 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e1c2      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800916e:	4b21      	ldr	r3, [pc, #132]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f0      	bne.n	800915c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 8086 	beq.w	8009294 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009188:	4b1b      	ldr	r3, [pc, #108]	@ (80091f8 <HAL_RCC_OscConfig+0x4a8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1a      	ldr	r2, [pc, #104]	@ (80091f8 <HAL_RCC_OscConfig+0x4a8>)
 800918e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009194:	f7fd fbc6 	bl	8006924 <HAL_GetTick>
 8009198:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800919c:	f7fd fbc2 	bl	8006924 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b64      	cmp	r3, #100	@ 0x64
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e1a2      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <HAL_RCC_OscConfig+0x4a8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0f0      	beq.n	800919c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d106      	bne.n	80091d0 <HAL_RCC_OscConfig+0x480>
 80091c2:	4b0c      	ldr	r3, [pc, #48]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c6:	4a0b      	ldr	r2, [pc, #44]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ce:	e032      	b.n	8009236 <HAL_RCC_OscConfig+0x4e6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d111      	bne.n	80091fc <HAL_RCC_OscConfig+0x4ac>
 80091d8:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091dc:	4a05      	ldr	r2, [pc, #20]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e4:	4b03      	ldr	r3, [pc, #12]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e8:	4a02      	ldr	r2, [pc, #8]	@ (80091f4 <HAL_RCC_OscConfig+0x4a4>)
 80091ea:	f023 0304 	bic.w	r3, r3, #4
 80091ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80091f0:	e021      	b.n	8009236 <HAL_RCC_OscConfig+0x4e6>
 80091f2:	bf00      	nop
 80091f4:	58024400 	.word	0x58024400
 80091f8:	58024800 	.word	0x58024800
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b05      	cmp	r3, #5
 8009202:	d10c      	bne.n	800921e <HAL_RCC_OscConfig+0x4ce>
 8009204:	4b83      	ldr	r3, [pc, #524]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009208:	4a82      	ldr	r2, [pc, #520]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800920a:	f043 0304 	orr.w	r3, r3, #4
 800920e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009210:	4b80      	ldr	r3, [pc, #512]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009214:	4a7f      	ldr	r2, [pc, #508]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	6713      	str	r3, [r2, #112]	@ 0x70
 800921c:	e00b      	b.n	8009236 <HAL_RCC_OscConfig+0x4e6>
 800921e:	4b7d      	ldr	r3, [pc, #500]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009222:	4a7c      	ldr	r2, [pc, #496]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	6713      	str	r3, [r2, #112]	@ 0x70
 800922a:	4b7a      	ldr	r3, [pc, #488]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800922c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800922e:	4a79      	ldr	r2, [pc, #484]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009230:	f023 0304 	bic.w	r3, r3, #4
 8009234:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d015      	beq.n	800926a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923e:	f7fd fb71 	bl	8006924 <HAL_GetTick>
 8009242:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009244:	e00a      	b.n	800925c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009246:	f7fd fb6d 	bl	8006924 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009254:	4293      	cmp	r3, r2
 8009256:	d901      	bls.n	800925c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e14b      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800925c:	4b6d      	ldr	r3, [pc, #436]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0ee      	beq.n	8009246 <HAL_RCC_OscConfig+0x4f6>
 8009268:	e014      	b.n	8009294 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926a:	f7fd fb5b 	bl	8006924 <HAL_GetTick>
 800926e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fd fb57 	bl	8006924 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e135      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009288:	4b62      	ldr	r3, [pc, #392]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1ee      	bne.n	8009272 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 812a 	beq.w	80094f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800929e:	4b5d      	ldr	r3, [pc, #372]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092a6:	2b18      	cmp	r3, #24
 80092a8:	f000 80ba 	beq.w	8009420 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f040 8095 	bne.w	80093e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092b6:	4b57      	ldr	r3, [pc, #348]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a56      	ldr	r2, [pc, #344]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c2:	f7fd fb2f 	bl	8006924 <HAL_GetTick>
 80092c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092c8:	e008      	b.n	80092dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092ca:	f7fd fb2b 	bl	8006924 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e10b      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f0      	bne.n	80092ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092e8:	4b4a      	ldr	r3, [pc, #296]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009418 <HAL_RCC_OscConfig+0x6c8>)
 80092ee:	4013      	ands	r3, r2
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80092f8:	0112      	lsls	r2, r2, #4
 80092fa:	430a      	orrs	r2, r1
 80092fc:	4945      	ldr	r1, [pc, #276]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	628b      	str	r3, [r1, #40]	@ 0x28
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009306:	3b01      	subs	r3, #1
 8009308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009310:	3b01      	subs	r3, #1
 8009312:	025b      	lsls	r3, r3, #9
 8009314:	b29b      	uxth	r3, r3
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931c:	3b01      	subs	r3, #1
 800931e:	041b      	lsls	r3, r3, #16
 8009320:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	3b01      	subs	r3, #1
 800932c:	061b      	lsls	r3, r3, #24
 800932e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009332:	4938      	ldr	r1, [pc, #224]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009334:	4313      	orrs	r3, r2
 8009336:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009338:	4b36      	ldr	r3, [pc, #216]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933c:	4a35      	ldr	r2, [pc, #212]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800933e:	f023 0301 	bic.w	r3, r3, #1
 8009342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009344:	4b33      	ldr	r3, [pc, #204]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009348:	4b34      	ldr	r3, [pc, #208]	@ (800941c <HAL_RCC_OscConfig+0x6cc>)
 800934a:	4013      	ands	r3, r2
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009350:	00d2      	lsls	r2, r2, #3
 8009352:	4930      	ldr	r1, [pc, #192]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009354:	4313      	orrs	r3, r2
 8009356:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009358:	4b2e      	ldr	r3, [pc, #184]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	f023 020c 	bic.w	r2, r3, #12
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009364:	492b      	ldr	r1, [pc, #172]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009366:	4313      	orrs	r3, r2
 8009368:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800936a:	4b2a      	ldr	r3, [pc, #168]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	f023 0202 	bic.w	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	4927      	ldr	r1, [pc, #156]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009378:	4313      	orrs	r3, r2
 800937a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800937c:	4b25      	ldr	r3, [pc, #148]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	4a24      	ldr	r2, [pc, #144]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009388:	4b22      	ldr	r3, [pc, #136]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938c:	4a21      	ldr	r2, [pc, #132]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800938e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009394:	4b1f      	ldr	r3, [pc, #124]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	4a1e      	ldr	r2, [pc, #120]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 800939a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800939e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093a0:	4b1c      	ldr	r3, [pc, #112]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093ac:	4b19      	ldr	r3, [pc, #100]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a18      	ldr	r2, [pc, #96]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b8:	f7fd fab4 	bl	8006924 <HAL_GetTick>
 80093bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c0:	f7fd fab0 	bl	8006924 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e090      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093d2:	4b10      	ldr	r3, [pc, #64]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f0      	beq.n	80093c0 <HAL_RCC_OscConfig+0x670>
 80093de:	e088      	b.n	80094f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 80093e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ec:	f7fd fa9a 	bl	8006924 <HAL_GetTick>
 80093f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093f2:	e008      	b.n	8009406 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f4:	f7fd fa96 	bl	8006924 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e076      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009406:	4b03      	ldr	r3, [pc, #12]	@ (8009414 <HAL_RCC_OscConfig+0x6c4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f0      	bne.n	80093f4 <HAL_RCC_OscConfig+0x6a4>
 8009412:	e06e      	b.n	80094f2 <HAL_RCC_OscConfig+0x7a2>
 8009414:	58024400 	.word	0x58024400
 8009418:	fffffc0c 	.word	0xfffffc0c
 800941c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009420:	4b36      	ldr	r3, [pc, #216]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009426:	4b35      	ldr	r3, [pc, #212]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 8009428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	2b01      	cmp	r3, #1
 8009432:	d031      	beq.n	8009498 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f003 0203 	and.w	r2, r3, #3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800943e:	429a      	cmp	r2, r3
 8009440:	d12a      	bne.n	8009498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	091b      	lsrs	r3, r3, #4
 8009446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800944e:	429a      	cmp	r2, r3
 8009450:	d122      	bne.n	8009498 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800945e:	429a      	cmp	r2, r3
 8009460:	d11a      	bne.n	8009498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	0a5b      	lsrs	r3, r3, #9
 8009466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009470:	429a      	cmp	r2, r3
 8009472:	d111      	bne.n	8009498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009482:	429a      	cmp	r2, r3
 8009484:	d108      	bne.n	8009498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	0e1b      	lsrs	r3, r3, #24
 800948a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009492:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009494:	429a      	cmp	r2, r3
 8009496:	d001      	beq.n	800949c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e02b      	b.n	80094f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800949c:	4b17      	ldr	r3, [pc, #92]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 800949e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a0:	08db      	lsrs	r3, r3, #3
 80094a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d01f      	beq.n	80094f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094b2:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4a11      	ldr	r2, [pc, #68]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094be:	f7fd fa31 	bl	8006924 <HAL_GetTick>
 80094c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094c4:	bf00      	nop
 80094c6:	f7fd fa2d 	bl	8006924 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d0f9      	beq.n	80094c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094d2:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009500 <HAL_RCC_OscConfig+0x7b0>)
 80094d8:	4013      	ands	r3, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094de:	00d2      	lsls	r2, r2, #3
 80094e0:	4906      	ldr	r1, [pc, #24]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80094e6:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	4a04      	ldr	r2, [pc, #16]	@ (80094fc <HAL_RCC_OscConfig+0x7ac>)
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3730      	adds	r7, #48	@ 0x30
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	58024400 	.word	0x58024400
 8009500:	ffff0007 	.word	0xffff0007

08009504 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e19c      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009518:	4b8a      	ldr	r3, [pc, #552]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 030f 	and.w	r3, r3, #15
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d910      	bls.n	8009548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009526:	4b87      	ldr	r3, [pc, #540]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 020f 	bic.w	r2, r3, #15
 800952e:	4985      	ldr	r1, [pc, #532]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	4313      	orrs	r3, r2
 8009534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009536:	4b83      	ldr	r3, [pc, #524]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d001      	beq.n	8009548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e184      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d010      	beq.n	8009576 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	4b7b      	ldr	r3, [pc, #492]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009560:	429a      	cmp	r2, r3
 8009562:	d908      	bls.n	8009576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009564:	4b78      	ldr	r3, [pc, #480]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	4975      	ldr	r1, [pc, #468]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009572:	4313      	orrs	r3, r2
 8009574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d010      	beq.n	80095a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	695a      	ldr	r2, [r3, #20]
 8009586:	4b70      	ldr	r3, [pc, #448]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800958e:	429a      	cmp	r2, r3
 8009590:	d908      	bls.n	80095a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009592:	4b6d      	ldr	r3, [pc, #436]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	496a      	ldr	r1, [pc, #424]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d010      	beq.n	80095d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	4b64      	ldr	r3, [pc, #400]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095bc:	429a      	cmp	r2, r3
 80095be:	d908      	bls.n	80095d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095c0:	4b61      	ldr	r3, [pc, #388]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	495e      	ldr	r1, [pc, #376]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d010      	beq.n	8009600 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	4b59      	ldr	r3, [pc, #356]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d908      	bls.n	8009600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80095ee:	4b56      	ldr	r3, [pc, #344]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	4953      	ldr	r1, [pc, #332]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	4b4d      	ldr	r3, [pc, #308]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	429a      	cmp	r2, r3
 800961a:	d908      	bls.n	800962e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800961c:	4b4a      	ldr	r3, [pc, #296]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f023 020f 	bic.w	r2, r3, #15
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	4947      	ldr	r1, [pc, #284]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 800962a:	4313      	orrs	r3, r2
 800962c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d055      	beq.n	80096e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800963a:	4b43      	ldr	r3, [pc, #268]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	4940      	ldr	r1, [pc, #256]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009648:	4313      	orrs	r3, r2
 800964a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d107      	bne.n	8009664 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009654:	4b3c      	ldr	r3, [pc, #240]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d121      	bne.n	80096a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e0f6      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2b03      	cmp	r3, #3
 800966a:	d107      	bne.n	800967c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800966c:	4b36      	ldr	r3, [pc, #216]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d115      	bne.n	80096a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0ea      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d107      	bne.n	8009694 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009684:	4b30      	ldr	r3, [pc, #192]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0de      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009694:	4b2c      	ldr	r3, [pc, #176]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e0d6      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096a4:	4b28      	ldr	r3, [pc, #160]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f023 0207 	bic.w	r2, r3, #7
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4925      	ldr	r1, [pc, #148]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b6:	f7fd f935 	bl	8006924 <HAL_GetTick>
 80096ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096bc:	e00a      	b.n	80096d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096be:	f7fd f931 	bl	8006924 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e0be      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d1eb      	bne.n	80096be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d010      	beq.n	8009714 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	429a      	cmp	r2, r3
 8009700:	d208      	bcs.n	8009714 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009702:	4b11      	ldr	r3, [pc, #68]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f023 020f 	bic.w	r2, r3, #15
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	490e      	ldr	r1, [pc, #56]	@ (8009748 <HAL_RCC_ClockConfig+0x244>)
 8009710:	4313      	orrs	r3, r2
 8009712:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009714:	4b0b      	ldr	r3, [pc, #44]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d214      	bcs.n	800974c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009722:	4b08      	ldr	r3, [pc, #32]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f023 020f 	bic.w	r2, r3, #15
 800972a:	4906      	ldr	r1, [pc, #24]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	4313      	orrs	r3, r2
 8009730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009732:	4b04      	ldr	r3, [pc, #16]	@ (8009744 <HAL_RCC_ClockConfig+0x240>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d005      	beq.n	800974c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e086      	b.n	8009852 <HAL_RCC_ClockConfig+0x34e>
 8009744:	52002000 	.word	0x52002000
 8009748:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d010      	beq.n	800977a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	4b3f      	ldr	r3, [pc, #252]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009764:	429a      	cmp	r2, r3
 8009766:	d208      	bcs.n	800977a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009768:	4b3c      	ldr	r3, [pc, #240]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	4939      	ldr	r1, [pc, #228]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 8009776:	4313      	orrs	r3, r2
 8009778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0308 	and.w	r3, r3, #8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d010      	beq.n	80097a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695a      	ldr	r2, [r3, #20]
 800978a:	4b34      	ldr	r3, [pc, #208]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009792:	429a      	cmp	r2, r3
 8009794:	d208      	bcs.n	80097a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009796:	4b31      	ldr	r3, [pc, #196]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	492e      	ldr	r1, [pc, #184]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d010      	beq.n	80097d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	4b28      	ldr	r3, [pc, #160]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d208      	bcs.n	80097d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097c4:	4b25      	ldr	r3, [pc, #148]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	4922      	ldr	r1, [pc, #136]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d010      	beq.n	8009804 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	69da      	ldr	r2, [r3, #28]
 80097e6:	4b1d      	ldr	r3, [pc, #116]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d208      	bcs.n	8009804 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097f2:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	4917      	ldr	r1, [pc, #92]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 8009800:	4313      	orrs	r3, r2
 8009802:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009804:	f000 f834 	bl	8009870 <HAL_RCC_GetSysClockFreq>
 8009808:	4602      	mov	r2, r0
 800980a:	4b14      	ldr	r3, [pc, #80]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	f003 030f 	and.w	r3, r3, #15
 8009814:	4912      	ldr	r1, [pc, #72]	@ (8009860 <HAL_RCC_ClockConfig+0x35c>)
 8009816:	5ccb      	ldrb	r3, [r1, r3]
 8009818:	f003 031f 	and.w	r3, r3, #31
 800981c:	fa22 f303 	lsr.w	r3, r2, r3
 8009820:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009822:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <HAL_RCC_ClockConfig+0x358>)
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	4a0d      	ldr	r2, [pc, #52]	@ (8009860 <HAL_RCC_ClockConfig+0x35c>)
 800982c:	5cd3      	ldrb	r3, [r2, r3]
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
 8009838:	4a0a      	ldr	r2, [pc, #40]	@ (8009864 <HAL_RCC_ClockConfig+0x360>)
 800983a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800983c:	4a0a      	ldr	r2, [pc, #40]	@ (8009868 <HAL_RCC_ClockConfig+0x364>)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009842:	4b0a      	ldr	r3, [pc, #40]	@ (800986c <HAL_RCC_ClockConfig+0x368>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7f8 fc00 	bl	800204c <HAL_InitTick>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	08028b7c 	.word	0x08028b7c
 8009864:	20000024 	.word	0x20000024
 8009868:	20000020 	.word	0x20000020
 800986c:	20000028 	.word	0x20000028

08009870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009870:	b480      	push	{r7}
 8009872:	b089      	sub	sp, #36	@ 0x24
 8009874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009876:	4bb3      	ldr	r3, [pc, #716]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800987e:	2b18      	cmp	r3, #24
 8009880:	f200 8155 	bhi.w	8009b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8009884:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098f1 	.word	0x080098f1
 8009890:	08009b2f 	.word	0x08009b2f
 8009894:	08009b2f 	.word	0x08009b2f
 8009898:	08009b2f 	.word	0x08009b2f
 800989c:	08009b2f 	.word	0x08009b2f
 80098a0:	08009b2f 	.word	0x08009b2f
 80098a4:	08009b2f 	.word	0x08009b2f
 80098a8:	08009b2f 	.word	0x08009b2f
 80098ac:	08009917 	.word	0x08009917
 80098b0:	08009b2f 	.word	0x08009b2f
 80098b4:	08009b2f 	.word	0x08009b2f
 80098b8:	08009b2f 	.word	0x08009b2f
 80098bc:	08009b2f 	.word	0x08009b2f
 80098c0:	08009b2f 	.word	0x08009b2f
 80098c4:	08009b2f 	.word	0x08009b2f
 80098c8:	08009b2f 	.word	0x08009b2f
 80098cc:	0800991d 	.word	0x0800991d
 80098d0:	08009b2f 	.word	0x08009b2f
 80098d4:	08009b2f 	.word	0x08009b2f
 80098d8:	08009b2f 	.word	0x08009b2f
 80098dc:	08009b2f 	.word	0x08009b2f
 80098e0:	08009b2f 	.word	0x08009b2f
 80098e4:	08009b2f 	.word	0x08009b2f
 80098e8:	08009b2f 	.word	0x08009b2f
 80098ec:	08009923 	.word	0x08009923
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f0:	4b94      	ldr	r3, [pc, #592]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098fc:	4b91      	ldr	r3, [pc, #580]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	08db      	lsrs	r3, r3, #3
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	4a90      	ldr	r2, [pc, #576]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009908:	fa22 f303 	lsr.w	r3, r2, r3
 800990c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800990e:	e111      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009910:	4b8d      	ldr	r3, [pc, #564]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009912:	61bb      	str	r3, [r7, #24]
      break;
 8009914:	e10e      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009916:	4b8d      	ldr	r3, [pc, #564]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009918:	61bb      	str	r3, [r7, #24]
      break;
 800991a:	e10b      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800991c:	4b8c      	ldr	r3, [pc, #560]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800991e:	61bb      	str	r3, [r7, #24]
      break;
 8009920:	e108      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009922:	4b88      	ldr	r3, [pc, #544]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800992c:	4b85      	ldr	r3, [pc, #532]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	091b      	lsrs	r3, r3, #4
 8009932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009936:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009938:	4b82      	ldr	r3, [pc, #520]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009942:	4b80      	ldr	r3, [pc, #512]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009946:	08db      	lsrs	r3, r3, #3
 8009948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	fb02 f303 	mul.w	r3, r2, r3
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80e1 	beq.w	8009b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b02      	cmp	r3, #2
 800996a:	f000 8083 	beq.w	8009a74 <HAL_RCC_GetSysClockFreq+0x204>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b02      	cmp	r3, #2
 8009972:	f200 80a1 	bhi.w	8009ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_RCC_GetSysClockFreq+0x114>
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d056      	beq.n	8009a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009982:	e099      	b.n	8009ab8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009984:	4b6f      	ldr	r3, [pc, #444]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0320 	and.w	r3, r3, #32
 800998c:	2b00      	cmp	r3, #0
 800998e:	d02d      	beq.n	80099ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009990:	4b6c      	ldr	r3, [pc, #432]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	08db      	lsrs	r3, r3, #3
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	4a6b      	ldr	r2, [pc, #428]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800999c:	fa22 f303 	lsr.w	r3, r2, r3
 80099a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ba:	4b62      	ldr	r3, [pc, #392]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099ea:	e087      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b51      	ldr	r3, [pc, #324]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a2e:	e065      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b40      	ldr	r3, [pc, #256]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a72:	e043      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b2f      	ldr	r3, [pc, #188]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ab6:	e021      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b1e      	ldr	r3, [pc, #120]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ade:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009afa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009afc:	4b11      	ldr	r3, [pc, #68]	@ (8009b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b00:	0a5b      	lsrs	r3, r3, #9
 8009b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b06:	3301      	adds	r3, #1
 8009b08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	ee07 3a90 	vmov	s15, r3
 8009b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b20:	ee17 3a90 	vmov	r3, s15
 8009b24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b26:	e005      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61bb      	str	r3, [r7, #24]
      break;
 8009b2c:	e002      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b2e:	4b07      	ldr	r3, [pc, #28]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b30:	61bb      	str	r3, [r7, #24]
      break;
 8009b32:	bf00      	nop
  }

  return sysclockfreq;
 8009b34:	69bb      	ldr	r3, [r7, #24]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3724      	adds	r7, #36	@ 0x24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	58024400 	.word	0x58024400
 8009b48:	03d09000 	.word	0x03d09000
 8009b4c:	003d0900 	.word	0x003d0900
 8009b50:	007a1200 	.word	0x007a1200
 8009b54:	46000000 	.word	0x46000000
 8009b58:	4c742400 	.word	0x4c742400
 8009b5c:	4a742400 	.word	0x4a742400
 8009b60:	4af42400 	.word	0x4af42400

08009b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b6a:	f7ff fe81 	bl	8009870 <HAL_RCC_GetSysClockFreq>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b10      	ldr	r3, [pc, #64]	@ (8009bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	490f      	ldr	r1, [pc, #60]	@ (8009bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b7c:	5ccb      	ldrb	r3, [r1, r3]
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	fa22 f303 	lsr.w	r3, r2, r3
 8009b86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	4a09      	ldr	r2, [pc, #36]	@ (8009bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b92:	5cd3      	ldrb	r3, [r2, r3]
 8009b94:	f003 031f 	and.w	r3, r3, #31
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9e:	4a07      	ldr	r2, [pc, #28]	@ (8009bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009ba0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ba2:	4a07      	ldr	r2, [pc, #28]	@ (8009bc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ba8:	4b04      	ldr	r3, [pc, #16]	@ (8009bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009baa:	681b      	ldr	r3, [r3, #0]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	08028b7c 	.word	0x08028b7c
 8009bbc:	20000024 	.word	0x20000024
 8009bc0:	20000020 	.word	0x20000020

08009bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bc8:	f7ff ffcc 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	091b      	lsrs	r3, r3, #4
 8009bd4:	f003 0307 	and.w	r3, r3, #7
 8009bd8:	4904      	ldr	r1, [pc, #16]	@ (8009bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bda:	5ccb      	ldrb	r3, [r1, r3]
 8009bdc:	f003 031f 	and.w	r3, r3, #31
 8009be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	58024400 	.word	0x58024400
 8009bec:	08028b7c 	.word	0x08028b7c

08009bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bf4:	f7ff ffb6 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	f003 0307 	and.w	r3, r3, #7
 8009c04:	4904      	ldr	r1, [pc, #16]	@ (8009c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c06:	5ccb      	ldrb	r3, [r1, r3]
 8009c08:	f003 031f 	and.w	r3, r3, #31
 8009c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	58024400 	.word	0x58024400
 8009c18:	08028b7c 	.word	0x08028b7c

08009c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	223f      	movs	r2, #63	@ 0x3f
 8009c2a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	f003 0207 	and.w	r2, r3, #7
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009c38:	4b17      	ldr	r3, [pc, #92]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c44:	4b14      	ldr	r3, [pc, #80]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c50:	4b11      	ldr	r3, [pc, #68]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009c68:	4b0b      	ldr	r3, [pc, #44]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009c74:	4b08      	ldr	r3, [pc, #32]	@ (8009c98 <HAL_RCC_GetClockConfig+0x7c>)
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c80:	4b06      	ldr	r3, [pc, #24]	@ (8009c9c <HAL_RCC_GetClockConfig+0x80>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 020f 	and.w	r2, r3, #15
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	52002000 	.word	0x52002000

08009ca0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ca4:	f7ff ff5e 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	4b06      	ldr	r3, [pc, #24]	@ (8009cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	091b      	lsrs	r3, r3, #4
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	4904      	ldr	r1, [pc, #16]	@ (8009cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cb6:	5ccb      	ldrb	r3, [r1, r3]
 8009cb8:	f003 031f 	and.w	r3, r3, #31
 8009cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	08028b7c 	.word	0x08028b7c

08009ccc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b089      	sub	sp, #36	@ 0x24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cde:	4b9f      	ldr	r3, [pc, #636]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce2:	0b1b      	lsrs	r3, r3, #12
 8009ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ce8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cea:	4b9c      	ldr	r3, [pc, #624]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	091b      	lsrs	r3, r3, #4
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cf6:	4b99      	ldr	r3, [pc, #612]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cfa:	08db      	lsrs	r3, r3, #3
 8009cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	fb02 f303 	mul.w	r3, r2, r3
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 8111 	beq.w	8009f3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	f000 8083 	beq.w	8009e28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	f200 80a1 	bhi.w	8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d056      	beq.n	8009de4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d36:	e099      	b.n	8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d38:	4b88      	ldr	r3, [pc, #544]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d02d      	beq.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d44:	4b85      	ldr	r3, [pc, #532]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	08db      	lsrs	r3, r3, #3
 8009d4a:	f003 0303 	and.w	r3, r3, #3
 8009d4e:	4a84      	ldr	r2, [pc, #528]	@ (8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d50:	fa22 f303 	lsr.w	r3, r2, r3
 8009d54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d9e:	e087      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009daa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db2:	4b6a      	ldr	r3, [pc, #424]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009de2:	e065      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df6:	4b59      	ldr	r3, [pc, #356]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e26:	e043      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3a:	4b48      	ldr	r3, [pc, #288]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e6a:	e021      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e7e:	4b37      	ldr	r3, [pc, #220]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb4:	0a5b      	lsrs	r3, r3, #9
 8009eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed6:	ee17 2a90 	vmov	r2, s15
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ede:	4b1f      	ldr	r3, [pc, #124]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	0c1b      	lsrs	r3, r3, #16
 8009ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f04:	ee17 2a90 	vmov	r2, s15
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f0c:	4b13      	ldr	r3, [pc, #76]	@ (8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f10:	0e1b      	lsrs	r3, r3, #24
 8009f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f32:	ee17 2a90 	vmov	r2, s15
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f3a:	e008      	b.n	8009f4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	609a      	str	r2, [r3, #8]
}
 8009f4e:	bf00      	nop
 8009f50:	3724      	adds	r7, #36	@ 0x24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	58024400 	.word	0x58024400
 8009f60:	03d09000 	.word	0x03d09000
 8009f64:	46000000 	.word	0x46000000
 8009f68:	4c742400 	.word	0x4c742400
 8009f6c:	4a742400 	.word	0x4a742400
 8009f70:	4af42400 	.word	0x4af42400

08009f74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b089      	sub	sp, #36	@ 0x24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f7c:	4ba1      	ldr	r3, [pc, #644]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f86:	4b9f      	ldr	r3, [pc, #636]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8a:	0d1b      	lsrs	r3, r3, #20
 8009f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f92:	4b9c      	ldr	r3, [pc, #624]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f9e:	4b99      	ldr	r3, [pc, #612]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa2:	08db      	lsrs	r3, r3, #3
 8009fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	fb02 f303 	mul.w	r3, r2, r3
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8111 	beq.w	800a1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	f000 8083 	beq.w	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	f200 80a1 	bhi.w	800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d056      	beq.n	800a08c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fde:	e099      	b.n	800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fe0:	4b88      	ldr	r3, [pc, #544]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0320 	and.w	r3, r3, #32
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02d      	beq.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fec:	4b85      	ldr	r3, [pc, #532]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	08db      	lsrs	r3, r3, #3
 8009ff2:	f003 0303 	and.w	r3, r3, #3
 8009ff6:	4a84      	ldr	r2, [pc, #528]	@ (800a208 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	ee07 3a90 	vmov	s15, r3
 800a004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a016:	4b7b      	ldr	r3, [pc, #492]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a046:	e087      	b.n	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a210 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05a:	4b6a      	ldr	r3, [pc, #424]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a06e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a08a:	e065      	b.n	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b59      	ldr	r3, [pc, #356]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ce:	e043      	b.n	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b48      	ldr	r3, [pc, #288]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a112:	e021      	b.n	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a126:	4b37      	ldr	r3, [pc, #220]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a136:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a156:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a158:	4b2a      	ldr	r3, [pc, #168]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15c:	0a5b      	lsrs	r3, r3, #9
 800a15e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a172:	edd7 6a07 	vldr	s13, [r7, #28]
 800a176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17e:	ee17 2a90 	vmov	r2, s15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a186:	4b1f      	ldr	r3, [pc, #124]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18a:	0c1b      	lsrs	r3, r3, #16
 800a18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ac:	ee17 2a90 	vmov	r2, s15
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1b4:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b8:	0e1b      	lsrs	r3, r3, #24
 800a1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1da:	ee17 2a90 	vmov	r2, s15
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	609a      	str	r2, [r3, #8]
}
 800a1f6:	bf00      	nop
 800a1f8:	3724      	adds	r7, #36	@ 0x24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	58024400 	.word	0x58024400
 800a208:	03d09000 	.word	0x03d09000
 800a20c:	46000000 	.word	0x46000000
 800a210:	4c742400 	.word	0x4c742400
 800a214:	4a742400 	.word	0x4a742400
 800a218:	4af42400 	.word	0x4af42400

0800a21c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e049      	b.n	800a2c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f841 	bl	800a2ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f000 f9f6 	bl	800a64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d001      	beq.n	800a2f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e05e      	b.n	800a3b6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a2b      	ldr	r2, [pc, #172]	@ (800a3c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d02c      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a322:	d027      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a27      	ldr	r2, [pc, #156]	@ (800a3c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d022      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a26      	ldr	r2, [pc, #152]	@ (800a3cc <HAL_TIM_Base_Start_IT+0xec>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d01d      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a24      	ldr	r2, [pc, #144]	@ (800a3d0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d018      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a23      	ldr	r2, [pc, #140]	@ (800a3d4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d013      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a21      	ldr	r2, [pc, #132]	@ (800a3d8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00e      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a20      	ldr	r2, [pc, #128]	@ (800a3dc <HAL_TIM_Base_Start_IT+0xfc>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d009      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e0 <HAL_TIM_Base_Start_IT+0x100>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d004      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x94>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3e4 <HAL_TIM_Base_Start_IT+0x104>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d115      	bne.n	800a3a0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e8 <HAL_TIM_Base_Start_IT+0x108>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b06      	cmp	r3, #6
 800a384:	d015      	beq.n	800a3b2 <HAL_TIM_Base_Start_IT+0xd2>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a38c:	d011      	beq.n	800a3b2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39e:	e008      	b.n	800a3b2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e000      	b.n	800a3b4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	40010000 	.word	0x40010000
 800a3c8:	40000400 	.word	0x40000400
 800a3cc:	40000800 	.word	0x40000800
 800a3d0:	40000c00 	.word	0x40000c00
 800a3d4:	40010400 	.word	0x40010400
 800a3d8:	40001800 	.word	0x40001800
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	4000e000 	.word	0x4000e000
 800a3e4:	4000e400 	.word	0x4000e400
 800a3e8:	00010007 	.word	0x00010007

0800a3ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d020      	beq.n	800a450 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01b      	beq.n	800a450 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f06f 0202 	mvn.w	r2, #2
 800a420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f8e9 	bl	800a60e <HAL_TIM_IC_CaptureCallback>
 800a43c:	e005      	b.n	800a44a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f8db 	bl	800a5fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f8ec 	bl	800a622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d020      	beq.n	800a49c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01b      	beq.n	800a49c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0204 	mvn.w	r2, #4
 800a46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2202      	movs	r2, #2
 800a472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f8c3 	bl	800a60e <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f8b5 	bl	800a5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f8c6 	bl	800a622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d020      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d01b      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0208 	mvn.w	r2, #8
 800a4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f89d 	bl	800a60e <HAL_TIM_IC_CaptureCallback>
 800a4d4:	e005      	b.n	800a4e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f88f 	bl	800a5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8a0 	bl	800a622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0210 	mvn.w	r2, #16
 800a504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2208      	movs	r2, #8
 800a50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f877 	bl	800a60e <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f869 	bl	800a5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f87a 	bl	800a622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00c      	beq.n	800a558 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0201 	mvn.w	r2, #1
 800a550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7f7 fde6 	bl	8002124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d104      	bne.n	800a56c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00c      	beq.n	800a586 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f91f 	bl	800a7c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00c      	beq.n	800a5aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a596:	2b00      	cmp	r3, #0
 800a598:	d007      	beq.n	800a5aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f917 	bl	800a7d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00c      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d007      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f834 	bl	800a636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d007      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f06f 0220 	mvn.w	r2, #32
 800a5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f8df 	bl	800a7b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a602:	bf00      	nop
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a4a      	ldr	r2, [pc, #296]	@ (800a788 <TIM_Base_SetConfig+0x13c>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d013      	beq.n	800a68c <TIM_Base_SetConfig+0x40>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a66a:	d00f      	beq.n	800a68c <TIM_Base_SetConfig+0x40>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a47      	ldr	r2, [pc, #284]	@ (800a78c <TIM_Base_SetConfig+0x140>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d00b      	beq.n	800a68c <TIM_Base_SetConfig+0x40>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a46      	ldr	r2, [pc, #280]	@ (800a790 <TIM_Base_SetConfig+0x144>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d007      	beq.n	800a68c <TIM_Base_SetConfig+0x40>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a45      	ldr	r2, [pc, #276]	@ (800a794 <TIM_Base_SetConfig+0x148>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d003      	beq.n	800a68c <TIM_Base_SetConfig+0x40>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a44      	ldr	r2, [pc, #272]	@ (800a798 <TIM_Base_SetConfig+0x14c>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d108      	bne.n	800a69e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a39      	ldr	r2, [pc, #228]	@ (800a788 <TIM_Base_SetConfig+0x13c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d027      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ac:	d023      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a36      	ldr	r2, [pc, #216]	@ (800a78c <TIM_Base_SetConfig+0x140>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d01f      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a35      	ldr	r2, [pc, #212]	@ (800a790 <TIM_Base_SetConfig+0x144>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d01b      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a34      	ldr	r2, [pc, #208]	@ (800a794 <TIM_Base_SetConfig+0x148>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d017      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a33      	ldr	r2, [pc, #204]	@ (800a798 <TIM_Base_SetConfig+0x14c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d013      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a32      	ldr	r2, [pc, #200]	@ (800a79c <TIM_Base_SetConfig+0x150>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d00f      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a31      	ldr	r2, [pc, #196]	@ (800a7a0 <TIM_Base_SetConfig+0x154>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00b      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	@ (800a7a4 <TIM_Base_SetConfig+0x158>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d007      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a2f      	ldr	r2, [pc, #188]	@ (800a7a8 <TIM_Base_SetConfig+0x15c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <TIM_Base_SetConfig+0xaa>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a2e      	ldr	r2, [pc, #184]	@ (800a7ac <TIM_Base_SetConfig+0x160>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d108      	bne.n	800a708 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a16      	ldr	r2, [pc, #88]	@ (800a788 <TIM_Base_SetConfig+0x13c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d00f      	beq.n	800a754 <TIM_Base_SetConfig+0x108>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a18      	ldr	r2, [pc, #96]	@ (800a798 <TIM_Base_SetConfig+0x14c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00b      	beq.n	800a754 <TIM_Base_SetConfig+0x108>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a17      	ldr	r2, [pc, #92]	@ (800a79c <TIM_Base_SetConfig+0x150>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d007      	beq.n	800a754 <TIM_Base_SetConfig+0x108>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a16      	ldr	r2, [pc, #88]	@ (800a7a0 <TIM_Base_SetConfig+0x154>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d003      	beq.n	800a754 <TIM_Base_SetConfig+0x108>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a15      	ldr	r2, [pc, #84]	@ (800a7a4 <TIM_Base_SetConfig+0x158>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d103      	bne.n	800a75c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	691a      	ldr	r2, [r3, #16]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d105      	bne.n	800a77a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	f023 0201 	bic.w	r2, r3, #1
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	611a      	str	r2, [r3, #16]
  }
}
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40010000 	.word	0x40010000
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40000c00 	.word	0x40000c00
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800
 800a7a8:	4000e000 	.word	0x4000e000
 800a7ac:	4000e400 	.word	0x4000e400

0800a7b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e042      	b.n	800a884 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a804:	2b00      	cmp	r3, #0
 800a806:	d106      	bne.n	800a816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 f83b 	bl	800a88c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2224      	movs	r2, #36	@ 0x24
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0201 	bic.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 ff2c 	bl	800b694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f8bd 	bl	800a9bc <UART_SetConfig>
 800a842:	4603      	mov	r3, r0
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e01b      	b.n	800a884 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a85a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a86a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0201 	orr.w	r2, r2, #1
 800a87a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 ffab 	bl	800b7d8 <UART_CheckIdleState>
 800a882:	4603      	mov	r3, r0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08a      	sub	sp, #40	@ 0x28
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d17b      	bne.n	800a9b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <HAL_UART_Transmit+0x26>
 800a8c0:	88fb      	ldrh	r3, [r7, #6]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e074      	b.n	800a9b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2221      	movs	r2, #33	@ 0x21
 800a8d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8da:	f7fc f823 	bl	8006924 <HAL_GetTick>
 800a8de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	88fa      	ldrh	r2, [r7, #6]
 800a8e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	88fa      	ldrh	r2, [r7, #6]
 800a8ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f8:	d108      	bne.n	800a90c <HAL_UART_Transmit+0x6c>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a902:	2300      	movs	r3, #0
 800a904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	61bb      	str	r3, [r7, #24]
 800a90a:	e003      	b.n	800a914 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a914:	e030      	b.n	800a978 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2200      	movs	r2, #0
 800a91e:	2180      	movs	r1, #128	@ 0x80
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f001 f803 	bl	800b92c <UART_WaitOnFlagUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	e03d      	b.n	800a9b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10b      	bne.n	800a956 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a94c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	3302      	adds	r3, #2
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	e007      	b.n	800a966 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	3301      	adds	r3, #1
 800a964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	3b01      	subs	r3, #1
 800a970:	b29a      	uxth	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a97e:	b29b      	uxth	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1c8      	bne.n	800a916 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2200      	movs	r2, #0
 800a98c:	2140      	movs	r1, #64	@ 0x40
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 ffcc 	bl	800b92c <UART_WaitOnFlagUntilTimeout>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e006      	b.n	800a9b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e000      	b.n	800a9b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a9b2:	2302      	movs	r3, #2
  }
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3720      	adds	r7, #32
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9c0:	b092      	sub	sp, #72	@ 0x48
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4bbe      	ldr	r3, [pc, #760]	@ (800ace4 <UART_SetConfig+0x328>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	6812      	ldr	r2, [r2, #0]
 800a9f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a9f4:	430b      	orrs	r3, r1
 800a9f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4ab3      	ldr	r2, [pc, #716]	@ (800ace8 <UART_SetConfig+0x32c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d004      	beq.n	800aa28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa24:	4313      	orrs	r3, r2
 800aa26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	4baf      	ldr	r3, [pc, #700]	@ (800acec <UART_SetConfig+0x330>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa42:	f023 010f 	bic.w	r1, r3, #15
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4aa6      	ldr	r2, [pc, #664]	@ (800acf0 <UART_SetConfig+0x334>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d177      	bne.n	800ab4c <UART_SetConfig+0x190>
 800aa5c:	4ba5      	ldr	r3, [pc, #660]	@ (800acf4 <UART_SetConfig+0x338>)
 800aa5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa64:	2b28      	cmp	r3, #40	@ 0x28
 800aa66:	d86d      	bhi.n	800ab44 <UART_SetConfig+0x188>
 800aa68:	a201      	add	r2, pc, #4	@ (adr r2, 800aa70 <UART_SetConfig+0xb4>)
 800aa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6e:	bf00      	nop
 800aa70:	0800ab15 	.word	0x0800ab15
 800aa74:	0800ab45 	.word	0x0800ab45
 800aa78:	0800ab45 	.word	0x0800ab45
 800aa7c:	0800ab45 	.word	0x0800ab45
 800aa80:	0800ab45 	.word	0x0800ab45
 800aa84:	0800ab45 	.word	0x0800ab45
 800aa88:	0800ab45 	.word	0x0800ab45
 800aa8c:	0800ab45 	.word	0x0800ab45
 800aa90:	0800ab1d 	.word	0x0800ab1d
 800aa94:	0800ab45 	.word	0x0800ab45
 800aa98:	0800ab45 	.word	0x0800ab45
 800aa9c:	0800ab45 	.word	0x0800ab45
 800aaa0:	0800ab45 	.word	0x0800ab45
 800aaa4:	0800ab45 	.word	0x0800ab45
 800aaa8:	0800ab45 	.word	0x0800ab45
 800aaac:	0800ab45 	.word	0x0800ab45
 800aab0:	0800ab25 	.word	0x0800ab25
 800aab4:	0800ab45 	.word	0x0800ab45
 800aab8:	0800ab45 	.word	0x0800ab45
 800aabc:	0800ab45 	.word	0x0800ab45
 800aac0:	0800ab45 	.word	0x0800ab45
 800aac4:	0800ab45 	.word	0x0800ab45
 800aac8:	0800ab45 	.word	0x0800ab45
 800aacc:	0800ab45 	.word	0x0800ab45
 800aad0:	0800ab2d 	.word	0x0800ab2d
 800aad4:	0800ab45 	.word	0x0800ab45
 800aad8:	0800ab45 	.word	0x0800ab45
 800aadc:	0800ab45 	.word	0x0800ab45
 800aae0:	0800ab45 	.word	0x0800ab45
 800aae4:	0800ab45 	.word	0x0800ab45
 800aae8:	0800ab45 	.word	0x0800ab45
 800aaec:	0800ab45 	.word	0x0800ab45
 800aaf0:	0800ab35 	.word	0x0800ab35
 800aaf4:	0800ab45 	.word	0x0800ab45
 800aaf8:	0800ab45 	.word	0x0800ab45
 800aafc:	0800ab45 	.word	0x0800ab45
 800ab00:	0800ab45 	.word	0x0800ab45
 800ab04:	0800ab45 	.word	0x0800ab45
 800ab08:	0800ab45 	.word	0x0800ab45
 800ab0c:	0800ab45 	.word	0x0800ab45
 800ab10:	0800ab3d 	.word	0x0800ab3d
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1a:	e326      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e322      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab24:	2308      	movs	r3, #8
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e31e      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e31a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab34:	2320      	movs	r3, #32
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3a:	e316      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab3c:	2340      	movs	r3, #64	@ 0x40
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e312      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab44:	2380      	movs	r3, #128	@ 0x80
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	e30e      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a69      	ldr	r2, [pc, #420]	@ (800acf8 <UART_SetConfig+0x33c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d130      	bne.n	800abb8 <UART_SetConfig+0x1fc>
 800ab56:	4b67      	ldr	r3, [pc, #412]	@ (800acf4 <UART_SetConfig+0x338>)
 800ab58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d826      	bhi.n	800abb0 <UART_SetConfig+0x1f4>
 800ab62:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <UART_SetConfig+0x1ac>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ab81 	.word	0x0800ab81
 800ab6c:	0800ab89 	.word	0x0800ab89
 800ab70:	0800ab91 	.word	0x0800ab91
 800ab74:	0800ab99 	.word	0x0800ab99
 800ab78:	0800aba1 	.word	0x0800aba1
 800ab7c:	0800aba9 	.word	0x0800aba9
 800ab80:	2300      	movs	r3, #0
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab86:	e2f0      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab88:	2304      	movs	r3, #4
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e2ec      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab90:	2308      	movs	r3, #8
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e2e8      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e2e4      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aba0:	2320      	movs	r3, #32
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba6:	e2e0      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aba8:	2340      	movs	r3, #64	@ 0x40
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abae:	e2dc      	b.n	800b16a <UART_SetConfig+0x7ae>
 800abb0:	2380      	movs	r3, #128	@ 0x80
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e2d8      	b.n	800b16a <UART_SetConfig+0x7ae>
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a4f      	ldr	r2, [pc, #316]	@ (800acfc <UART_SetConfig+0x340>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d130      	bne.n	800ac24 <UART_SetConfig+0x268>
 800abc2:	4b4c      	ldr	r3, [pc, #304]	@ (800acf4 <UART_SetConfig+0x338>)
 800abc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	2b05      	cmp	r3, #5
 800abcc:	d826      	bhi.n	800ac1c <UART_SetConfig+0x260>
 800abce:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <UART_SetConfig+0x218>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800abed 	.word	0x0800abed
 800abd8:	0800abf5 	.word	0x0800abf5
 800abdc:	0800abfd 	.word	0x0800abfd
 800abe0:	0800ac05 	.word	0x0800ac05
 800abe4:	0800ac0d 	.word	0x0800ac0d
 800abe8:	0800ac15 	.word	0x0800ac15
 800abec:	2300      	movs	r3, #0
 800abee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf2:	e2ba      	b.n	800b16a <UART_SetConfig+0x7ae>
 800abf4:	2304      	movs	r3, #4
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e2b6      	b.n	800b16a <UART_SetConfig+0x7ae>
 800abfc:	2308      	movs	r3, #8
 800abfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac02:	e2b2      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac04:	2310      	movs	r3, #16
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0a:	e2ae      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac0c:	2320      	movs	r3, #32
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac12:	e2aa      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac14:	2340      	movs	r3, #64	@ 0x40
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1a:	e2a6      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac1c:	2380      	movs	r3, #128	@ 0x80
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e2a2      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a35      	ldr	r2, [pc, #212]	@ (800ad00 <UART_SetConfig+0x344>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d130      	bne.n	800ac90 <UART_SetConfig+0x2d4>
 800ac2e:	4b31      	ldr	r3, [pc, #196]	@ (800acf4 <UART_SetConfig+0x338>)
 800ac30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	2b05      	cmp	r3, #5
 800ac38:	d826      	bhi.n	800ac88 <UART_SetConfig+0x2cc>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <UART_SetConfig+0x284>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac59 	.word	0x0800ac59
 800ac44:	0800ac61 	.word	0x0800ac61
 800ac48:	0800ac69 	.word	0x0800ac69
 800ac4c:	0800ac71 	.word	0x0800ac71
 800ac50:	0800ac79 	.word	0x0800ac79
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5e:	e284      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac60:	2304      	movs	r3, #4
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e280      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac68:	2308      	movs	r3, #8
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6e:	e27c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac70:	2310      	movs	r3, #16
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac76:	e278      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac78:	2320      	movs	r3, #32
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7e:	e274      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac80:	2340      	movs	r3, #64	@ 0x40
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac86:	e270      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e26c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a1b      	ldr	r2, [pc, #108]	@ (800ad04 <UART_SetConfig+0x348>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d142      	bne.n	800ad20 <UART_SetConfig+0x364>
 800ac9a:	4b16      	ldr	r3, [pc, #88]	@ (800acf4 <UART_SetConfig+0x338>)
 800ac9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	2b05      	cmp	r3, #5
 800aca4:	d838      	bhi.n	800ad18 <UART_SetConfig+0x35c>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <UART_SetConfig+0x2f0>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acc5 	.word	0x0800acc5
 800acb0:	0800accd 	.word	0x0800accd
 800acb4:	0800acd5 	.word	0x0800acd5
 800acb8:	0800acdd 	.word	0x0800acdd
 800acbc:	0800ad09 	.word	0x0800ad09
 800acc0:	0800ad11 	.word	0x0800ad11
 800acc4:	2300      	movs	r3, #0
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e24e      	b.n	800b16a <UART_SetConfig+0x7ae>
 800accc:	2304      	movs	r3, #4
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e24a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800acd4:	2308      	movs	r3, #8
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acda:	e246      	b.n	800b16a <UART_SetConfig+0x7ae>
 800acdc:	2310      	movs	r3, #16
 800acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace2:	e242      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ace4:	cfff69f3 	.word	0xcfff69f3
 800ace8:	58000c00 	.word	0x58000c00
 800acec:	11fff4ff 	.word	0x11fff4ff
 800acf0:	40011000 	.word	0x40011000
 800acf4:	58024400 	.word	0x58024400
 800acf8:	40004400 	.word	0x40004400
 800acfc:	40004800 	.word	0x40004800
 800ad00:	40004c00 	.word	0x40004c00
 800ad04:	40005000 	.word	0x40005000
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e22c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ad10:	2340      	movs	r3, #64	@ 0x40
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e228      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ad18:	2380      	movs	r3, #128	@ 0x80
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e224      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4ab1      	ldr	r2, [pc, #708]	@ (800afec <UART_SetConfig+0x630>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d176      	bne.n	800ae18 <UART_SetConfig+0x45c>
 800ad2a:	4bb1      	ldr	r3, [pc, #708]	@ (800aff0 <UART_SetConfig+0x634>)
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad32:	2b28      	cmp	r3, #40	@ 0x28
 800ad34:	d86c      	bhi.n	800ae10 <UART_SetConfig+0x454>
 800ad36:	a201      	add	r2, pc, #4	@ (adr r2, 800ad3c <UART_SetConfig+0x380>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ade1 	.word	0x0800ade1
 800ad40:	0800ae11 	.word	0x0800ae11
 800ad44:	0800ae11 	.word	0x0800ae11
 800ad48:	0800ae11 	.word	0x0800ae11
 800ad4c:	0800ae11 	.word	0x0800ae11
 800ad50:	0800ae11 	.word	0x0800ae11
 800ad54:	0800ae11 	.word	0x0800ae11
 800ad58:	0800ae11 	.word	0x0800ae11
 800ad5c:	0800ade9 	.word	0x0800ade9
 800ad60:	0800ae11 	.word	0x0800ae11
 800ad64:	0800ae11 	.word	0x0800ae11
 800ad68:	0800ae11 	.word	0x0800ae11
 800ad6c:	0800ae11 	.word	0x0800ae11
 800ad70:	0800ae11 	.word	0x0800ae11
 800ad74:	0800ae11 	.word	0x0800ae11
 800ad78:	0800ae11 	.word	0x0800ae11
 800ad7c:	0800adf1 	.word	0x0800adf1
 800ad80:	0800ae11 	.word	0x0800ae11
 800ad84:	0800ae11 	.word	0x0800ae11
 800ad88:	0800ae11 	.word	0x0800ae11
 800ad8c:	0800ae11 	.word	0x0800ae11
 800ad90:	0800ae11 	.word	0x0800ae11
 800ad94:	0800ae11 	.word	0x0800ae11
 800ad98:	0800ae11 	.word	0x0800ae11
 800ad9c:	0800adf9 	.word	0x0800adf9
 800ada0:	0800ae11 	.word	0x0800ae11
 800ada4:	0800ae11 	.word	0x0800ae11
 800ada8:	0800ae11 	.word	0x0800ae11
 800adac:	0800ae11 	.word	0x0800ae11
 800adb0:	0800ae11 	.word	0x0800ae11
 800adb4:	0800ae11 	.word	0x0800ae11
 800adb8:	0800ae11 	.word	0x0800ae11
 800adbc:	0800ae01 	.word	0x0800ae01
 800adc0:	0800ae11 	.word	0x0800ae11
 800adc4:	0800ae11 	.word	0x0800ae11
 800adc8:	0800ae11 	.word	0x0800ae11
 800adcc:	0800ae11 	.word	0x0800ae11
 800add0:	0800ae11 	.word	0x0800ae11
 800add4:	0800ae11 	.word	0x0800ae11
 800add8:	0800ae11 	.word	0x0800ae11
 800addc:	0800ae09 	.word	0x0800ae09
 800ade0:	2301      	movs	r3, #1
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e1c0      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ade8:	2304      	movs	r3, #4
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e1bc      	b.n	800b16a <UART_SetConfig+0x7ae>
 800adf0:	2308      	movs	r3, #8
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e1b8      	b.n	800b16a <UART_SetConfig+0x7ae>
 800adf8:	2310      	movs	r3, #16
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e1b4      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae00:	2320      	movs	r3, #32
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e1b0      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae08:	2340      	movs	r3, #64	@ 0x40
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e1ac      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e1a8      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a75      	ldr	r2, [pc, #468]	@ (800aff4 <UART_SetConfig+0x638>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d130      	bne.n	800ae84 <UART_SetConfig+0x4c8>
 800ae22:	4b73      	ldr	r3, [pc, #460]	@ (800aff0 <UART_SetConfig+0x634>)
 800ae24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	d826      	bhi.n	800ae7c <UART_SetConfig+0x4c0>
 800ae2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <UART_SetConfig+0x478>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae4d 	.word	0x0800ae4d
 800ae38:	0800ae55 	.word	0x0800ae55
 800ae3c:	0800ae5d 	.word	0x0800ae5d
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800ae6d 	.word	0x0800ae6d
 800ae48:	0800ae75 	.word	0x0800ae75
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e18a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae54:	2304      	movs	r3, #4
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e186      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae5c:	2308      	movs	r3, #8
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e182      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae64:	2310      	movs	r3, #16
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e17e      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae72:	e17a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae74:	2340      	movs	r3, #64	@ 0x40
 800ae76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7a:	e176      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae7c:	2380      	movs	r3, #128	@ 0x80
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae82:	e172      	b.n	800b16a <UART_SetConfig+0x7ae>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a5b      	ldr	r2, [pc, #364]	@ (800aff8 <UART_SetConfig+0x63c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d130      	bne.n	800aef0 <UART_SetConfig+0x534>
 800ae8e:	4b58      	ldr	r3, [pc, #352]	@ (800aff0 <UART_SetConfig+0x634>)
 800ae90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b05      	cmp	r3, #5
 800ae98:	d826      	bhi.n	800aee8 <UART_SetConfig+0x52c>
 800ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <UART_SetConfig+0x4e4>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aeb9 	.word	0x0800aeb9
 800aea4:	0800aec1 	.word	0x0800aec1
 800aea8:	0800aec9 	.word	0x0800aec9
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aed9 	.word	0x0800aed9
 800aeb4:	0800aee1 	.word	0x0800aee1
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aebe:	e154      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aec0:	2304      	movs	r3, #4
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e150      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aec8:	2308      	movs	r3, #8
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e14c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aed0:	2310      	movs	r3, #16
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e148      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aed8:	2320      	movs	r3, #32
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aede:	e144      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aee0:	2340      	movs	r3, #64	@ 0x40
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee6:	e140      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aee8:	2380      	movs	r3, #128	@ 0x80
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeee:	e13c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a41      	ldr	r2, [pc, #260]	@ (800affc <UART_SetConfig+0x640>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	f040 8082 	bne.w	800b000 <UART_SetConfig+0x644>
 800aefc:	4b3c      	ldr	r3, [pc, #240]	@ (800aff0 <UART_SetConfig+0x634>)
 800aefe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af04:	2b28      	cmp	r3, #40	@ 0x28
 800af06:	d86d      	bhi.n	800afe4 <UART_SetConfig+0x628>
 800af08:	a201      	add	r2, pc, #4	@ (adr r2, 800af10 <UART_SetConfig+0x554>)
 800af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0e:	bf00      	nop
 800af10:	0800afb5 	.word	0x0800afb5
 800af14:	0800afe5 	.word	0x0800afe5
 800af18:	0800afe5 	.word	0x0800afe5
 800af1c:	0800afe5 	.word	0x0800afe5
 800af20:	0800afe5 	.word	0x0800afe5
 800af24:	0800afe5 	.word	0x0800afe5
 800af28:	0800afe5 	.word	0x0800afe5
 800af2c:	0800afe5 	.word	0x0800afe5
 800af30:	0800afbd 	.word	0x0800afbd
 800af34:	0800afe5 	.word	0x0800afe5
 800af38:	0800afe5 	.word	0x0800afe5
 800af3c:	0800afe5 	.word	0x0800afe5
 800af40:	0800afe5 	.word	0x0800afe5
 800af44:	0800afe5 	.word	0x0800afe5
 800af48:	0800afe5 	.word	0x0800afe5
 800af4c:	0800afe5 	.word	0x0800afe5
 800af50:	0800afc5 	.word	0x0800afc5
 800af54:	0800afe5 	.word	0x0800afe5
 800af58:	0800afe5 	.word	0x0800afe5
 800af5c:	0800afe5 	.word	0x0800afe5
 800af60:	0800afe5 	.word	0x0800afe5
 800af64:	0800afe5 	.word	0x0800afe5
 800af68:	0800afe5 	.word	0x0800afe5
 800af6c:	0800afe5 	.word	0x0800afe5
 800af70:	0800afcd 	.word	0x0800afcd
 800af74:	0800afe5 	.word	0x0800afe5
 800af78:	0800afe5 	.word	0x0800afe5
 800af7c:	0800afe5 	.word	0x0800afe5
 800af80:	0800afe5 	.word	0x0800afe5
 800af84:	0800afe5 	.word	0x0800afe5
 800af88:	0800afe5 	.word	0x0800afe5
 800af8c:	0800afe5 	.word	0x0800afe5
 800af90:	0800afd5 	.word	0x0800afd5
 800af94:	0800afe5 	.word	0x0800afe5
 800af98:	0800afe5 	.word	0x0800afe5
 800af9c:	0800afe5 	.word	0x0800afe5
 800afa0:	0800afe5 	.word	0x0800afe5
 800afa4:	0800afe5 	.word	0x0800afe5
 800afa8:	0800afe5 	.word	0x0800afe5
 800afac:	0800afe5 	.word	0x0800afe5
 800afb0:	0800afdd 	.word	0x0800afdd
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afba:	e0d6      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afbc:	2304      	movs	r3, #4
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e0d2      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afc4:	2308      	movs	r3, #8
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e0ce      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afcc:	2310      	movs	r3, #16
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e0ca      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afd4:	2320      	movs	r3, #32
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e0c6      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afdc:	2340      	movs	r3, #64	@ 0x40
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e0c2      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afe4:	2380      	movs	r3, #128	@ 0x80
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e0be      	b.n	800b16a <UART_SetConfig+0x7ae>
 800afec:	40011400 	.word	0x40011400
 800aff0:	58024400 	.word	0x58024400
 800aff4:	40007800 	.word	0x40007800
 800aff8:	40007c00 	.word	0x40007c00
 800affc:	40011800 	.word	0x40011800
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4aad      	ldr	r2, [pc, #692]	@ (800b2bc <UART_SetConfig+0x900>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d176      	bne.n	800b0f8 <UART_SetConfig+0x73c>
 800b00a:	4bad      	ldr	r3, [pc, #692]	@ (800b2c0 <UART_SetConfig+0x904>)
 800b00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b00e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b012:	2b28      	cmp	r3, #40	@ 0x28
 800b014:	d86c      	bhi.n	800b0f0 <UART_SetConfig+0x734>
 800b016:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <UART_SetConfig+0x660>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b0c1 	.word	0x0800b0c1
 800b020:	0800b0f1 	.word	0x0800b0f1
 800b024:	0800b0f1 	.word	0x0800b0f1
 800b028:	0800b0f1 	.word	0x0800b0f1
 800b02c:	0800b0f1 	.word	0x0800b0f1
 800b030:	0800b0f1 	.word	0x0800b0f1
 800b034:	0800b0f1 	.word	0x0800b0f1
 800b038:	0800b0f1 	.word	0x0800b0f1
 800b03c:	0800b0c9 	.word	0x0800b0c9
 800b040:	0800b0f1 	.word	0x0800b0f1
 800b044:	0800b0f1 	.word	0x0800b0f1
 800b048:	0800b0f1 	.word	0x0800b0f1
 800b04c:	0800b0f1 	.word	0x0800b0f1
 800b050:	0800b0f1 	.word	0x0800b0f1
 800b054:	0800b0f1 	.word	0x0800b0f1
 800b058:	0800b0f1 	.word	0x0800b0f1
 800b05c:	0800b0d1 	.word	0x0800b0d1
 800b060:	0800b0f1 	.word	0x0800b0f1
 800b064:	0800b0f1 	.word	0x0800b0f1
 800b068:	0800b0f1 	.word	0x0800b0f1
 800b06c:	0800b0f1 	.word	0x0800b0f1
 800b070:	0800b0f1 	.word	0x0800b0f1
 800b074:	0800b0f1 	.word	0x0800b0f1
 800b078:	0800b0f1 	.word	0x0800b0f1
 800b07c:	0800b0d9 	.word	0x0800b0d9
 800b080:	0800b0f1 	.word	0x0800b0f1
 800b084:	0800b0f1 	.word	0x0800b0f1
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b0f1 	.word	0x0800b0f1
 800b090:	0800b0f1 	.word	0x0800b0f1
 800b094:	0800b0f1 	.word	0x0800b0f1
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b0e1 	.word	0x0800b0e1
 800b0a0:	0800b0f1 	.word	0x0800b0f1
 800b0a4:	0800b0f1 	.word	0x0800b0f1
 800b0a8:	0800b0f1 	.word	0x0800b0f1
 800b0ac:	0800b0f1 	.word	0x0800b0f1
 800b0b0:	0800b0f1 	.word	0x0800b0f1
 800b0b4:	0800b0f1 	.word	0x0800b0f1
 800b0b8:	0800b0f1 	.word	0x0800b0f1
 800b0bc:	0800b0e9 	.word	0x0800b0e9
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e050      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0c8:	2304      	movs	r3, #4
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e04c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0d0:	2308      	movs	r3, #8
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e048      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0d8:	2310      	movs	r3, #16
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e044      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0e0:	2320      	movs	r3, #32
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e040      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0e8:	2340      	movs	r3, #64	@ 0x40
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e03c      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0f0:	2380      	movs	r3, #128	@ 0x80
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f6:	e038      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a71      	ldr	r2, [pc, #452]	@ (800b2c4 <UART_SetConfig+0x908>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d130      	bne.n	800b164 <UART_SetConfig+0x7a8>
 800b102:	4b6f      	ldr	r3, [pc, #444]	@ (800b2c0 <UART_SetConfig+0x904>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d826      	bhi.n	800b15c <UART_SetConfig+0x7a0>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <UART_SetConfig+0x758>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b12d 	.word	0x0800b12d
 800b118:	0800b135 	.word	0x0800b135
 800b11c:	0800b13d 	.word	0x0800b13d
 800b120:	0800b145 	.word	0x0800b145
 800b124:	0800b14d 	.word	0x0800b14d
 800b128:	0800b155 	.word	0x0800b155
 800b12c:	2302      	movs	r3, #2
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e01a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b134:	2304      	movs	r3, #4
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e016      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b13c:	2308      	movs	r3, #8
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e012      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b144:	2310      	movs	r3, #16
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e00e      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b14c:	2320      	movs	r3, #32
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e00a      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b154:	2340      	movs	r3, #64	@ 0x40
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15a:	e006      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b15c:	2380      	movs	r3, #128	@ 0x80
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e002      	b.n	800b16a <UART_SetConfig+0x7ae>
 800b164:	2380      	movs	r3, #128	@ 0x80
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a55      	ldr	r2, [pc, #340]	@ (800b2c4 <UART_SetConfig+0x908>)
 800b170:	4293      	cmp	r3, r2
 800b172:	f040 80f8 	bne.w	800b366 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b176:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	dc46      	bgt.n	800b20c <UART_SetConfig+0x850>
 800b17e:	2b02      	cmp	r3, #2
 800b180:	db75      	blt.n	800b26e <UART_SetConfig+0x8b2>
 800b182:	3b02      	subs	r3, #2
 800b184:	2b1e      	cmp	r3, #30
 800b186:	d872      	bhi.n	800b26e <UART_SetConfig+0x8b2>
 800b188:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <UART_SetConfig+0x7d4>)
 800b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18e:	bf00      	nop
 800b190:	0800b213 	.word	0x0800b213
 800b194:	0800b26f 	.word	0x0800b26f
 800b198:	0800b21b 	.word	0x0800b21b
 800b19c:	0800b26f 	.word	0x0800b26f
 800b1a0:	0800b26f 	.word	0x0800b26f
 800b1a4:	0800b26f 	.word	0x0800b26f
 800b1a8:	0800b22b 	.word	0x0800b22b
 800b1ac:	0800b26f 	.word	0x0800b26f
 800b1b0:	0800b26f 	.word	0x0800b26f
 800b1b4:	0800b26f 	.word	0x0800b26f
 800b1b8:	0800b26f 	.word	0x0800b26f
 800b1bc:	0800b26f 	.word	0x0800b26f
 800b1c0:	0800b26f 	.word	0x0800b26f
 800b1c4:	0800b26f 	.word	0x0800b26f
 800b1c8:	0800b23b 	.word	0x0800b23b
 800b1cc:	0800b26f 	.word	0x0800b26f
 800b1d0:	0800b26f 	.word	0x0800b26f
 800b1d4:	0800b26f 	.word	0x0800b26f
 800b1d8:	0800b26f 	.word	0x0800b26f
 800b1dc:	0800b26f 	.word	0x0800b26f
 800b1e0:	0800b26f 	.word	0x0800b26f
 800b1e4:	0800b26f 	.word	0x0800b26f
 800b1e8:	0800b26f 	.word	0x0800b26f
 800b1ec:	0800b26f 	.word	0x0800b26f
 800b1f0:	0800b26f 	.word	0x0800b26f
 800b1f4:	0800b26f 	.word	0x0800b26f
 800b1f8:	0800b26f 	.word	0x0800b26f
 800b1fc:	0800b26f 	.word	0x0800b26f
 800b200:	0800b26f 	.word	0x0800b26f
 800b204:	0800b26f 	.word	0x0800b26f
 800b208:	0800b261 	.word	0x0800b261
 800b20c:	2b40      	cmp	r3, #64	@ 0x40
 800b20e:	d02a      	beq.n	800b266 <UART_SetConfig+0x8aa>
 800b210:	e02d      	b.n	800b26e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b212:	f7fe fd45 	bl	8009ca0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b218:	e02f      	b.n	800b27a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fd54 	bl	8009ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b228:	e027      	b.n	800b27a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b22a:	f107 0318 	add.w	r3, r7, #24
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe fea0 	bl	8009f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b238:	e01f      	b.n	800b27a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b23a:	4b21      	ldr	r3, [pc, #132]	@ (800b2c0 <UART_SetConfig+0x904>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b00      	cmp	r3, #0
 800b244:	d009      	beq.n	800b25a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b246:	4b1e      	ldr	r3, [pc, #120]	@ (800b2c0 <UART_SetConfig+0x904>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	08db      	lsrs	r3, r3, #3
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c8 <UART_SetConfig+0x90c>)
 800b252:	fa22 f303 	lsr.w	r3, r2, r3
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b258:	e00f      	b.n	800b27a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b25a:	4b1b      	ldr	r3, [pc, #108]	@ (800b2c8 <UART_SetConfig+0x90c>)
 800b25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b25e:	e00c      	b.n	800b27a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b260:	4b1a      	ldr	r3, [pc, #104]	@ (800b2cc <UART_SetConfig+0x910>)
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b264:	e009      	b.n	800b27a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b26c:	e005      	b.n	800b27a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 81ee 	beq.w	800b65e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b286:	4a12      	ldr	r2, [pc, #72]	@ (800b2d0 <UART_SetConfig+0x914>)
 800b288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b28c:	461a      	mov	r2, r3
 800b28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b290:	fbb3 f3f2 	udiv	r3, r3, r2
 800b294:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	4613      	mov	r3, r2
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	4413      	add	r3, r2
 800b2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d305      	bcc.n	800b2b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d910      	bls.n	800b2d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2b8:	e1d1      	b.n	800b65e <UART_SetConfig+0xca2>
 800b2ba:	bf00      	nop
 800b2bc:	40011c00 	.word	0x40011c00
 800b2c0:	58024400 	.word	0x58024400
 800b2c4:	58000c00 	.word	0x58000c00
 800b2c8:	03d09000 	.word	0x03d09000
 800b2cc:	003d0900 	.word	0x003d0900
 800b2d0:	08028b8c 	.word	0x08028b8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	60bb      	str	r3, [r7, #8]
 800b2da:	60fa      	str	r2, [r7, #12]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e0:	4ac0      	ldr	r2, [pc, #768]	@ (800b5e4 <UART_SetConfig+0xc28>)
 800b2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	603b      	str	r3, [r7, #0]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2f6:	f7f5 f8c3 	bl	8000480 <__aeabi_uldivmod>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4610      	mov	r0, r2
 800b300:	4619      	mov	r1, r3
 800b302:	f04f 0200 	mov.w	r2, #0
 800b306:	f04f 0300 	mov.w	r3, #0
 800b30a:	020b      	lsls	r3, r1, #8
 800b30c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b310:	0202      	lsls	r2, r0, #8
 800b312:	6979      	ldr	r1, [r7, #20]
 800b314:	6849      	ldr	r1, [r1, #4]
 800b316:	0849      	lsrs	r1, r1, #1
 800b318:	2000      	movs	r0, #0
 800b31a:	460c      	mov	r4, r1
 800b31c:	4605      	mov	r5, r0
 800b31e:	eb12 0804 	adds.w	r8, r2, r4
 800b322:	eb43 0905 	adc.w	r9, r3, r5
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	469a      	mov	sl, r3
 800b32e:	4693      	mov	fp, r2
 800b330:	4652      	mov	r2, sl
 800b332:	465b      	mov	r3, fp
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f5 f8a2 	bl	8000480 <__aeabi_uldivmod>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4613      	mov	r3, r2
 800b342:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b34a:	d308      	bcc.n	800b35e <UART_SetConfig+0x9a2>
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b352:	d204      	bcs.n	800b35e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b35a:	60da      	str	r2, [r3, #12]
 800b35c:	e17f      	b.n	800b65e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b364:	e17b      	b.n	800b65e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b36e:	f040 80bd 	bne.w	800b4ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b372:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b376:	2b20      	cmp	r3, #32
 800b378:	dc48      	bgt.n	800b40c <UART_SetConfig+0xa50>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	db7b      	blt.n	800b476 <UART_SetConfig+0xaba>
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d879      	bhi.n	800b476 <UART_SetConfig+0xaba>
 800b382:	a201      	add	r2, pc, #4	@ (adr r2, 800b388 <UART_SetConfig+0x9cc>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b413 	.word	0x0800b413
 800b38c:	0800b41b 	.word	0x0800b41b
 800b390:	0800b477 	.word	0x0800b477
 800b394:	0800b477 	.word	0x0800b477
 800b398:	0800b423 	.word	0x0800b423
 800b39c:	0800b477 	.word	0x0800b477
 800b3a0:	0800b477 	.word	0x0800b477
 800b3a4:	0800b477 	.word	0x0800b477
 800b3a8:	0800b433 	.word	0x0800b433
 800b3ac:	0800b477 	.word	0x0800b477
 800b3b0:	0800b477 	.word	0x0800b477
 800b3b4:	0800b477 	.word	0x0800b477
 800b3b8:	0800b477 	.word	0x0800b477
 800b3bc:	0800b477 	.word	0x0800b477
 800b3c0:	0800b477 	.word	0x0800b477
 800b3c4:	0800b477 	.word	0x0800b477
 800b3c8:	0800b443 	.word	0x0800b443
 800b3cc:	0800b477 	.word	0x0800b477
 800b3d0:	0800b477 	.word	0x0800b477
 800b3d4:	0800b477 	.word	0x0800b477
 800b3d8:	0800b477 	.word	0x0800b477
 800b3dc:	0800b477 	.word	0x0800b477
 800b3e0:	0800b477 	.word	0x0800b477
 800b3e4:	0800b477 	.word	0x0800b477
 800b3e8:	0800b477 	.word	0x0800b477
 800b3ec:	0800b477 	.word	0x0800b477
 800b3f0:	0800b477 	.word	0x0800b477
 800b3f4:	0800b477 	.word	0x0800b477
 800b3f8:	0800b477 	.word	0x0800b477
 800b3fc:	0800b477 	.word	0x0800b477
 800b400:	0800b477 	.word	0x0800b477
 800b404:	0800b477 	.word	0x0800b477
 800b408:	0800b469 	.word	0x0800b469
 800b40c:	2b40      	cmp	r3, #64	@ 0x40
 800b40e:	d02e      	beq.n	800b46e <UART_SetConfig+0xab2>
 800b410:	e031      	b.n	800b476 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b412:	f7fe fbd7 	bl	8009bc4 <HAL_RCC_GetPCLK1Freq>
 800b416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b418:	e033      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b41a:	f7fe fbe9 	bl	8009bf0 <HAL_RCC_GetPCLK2Freq>
 800b41e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b420:	e02f      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fc50 	bl	8009ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b430:	e027      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b432:	f107 0318 	add.w	r3, r7, #24
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fd9c 	bl	8009f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b440:	e01f      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b442:	4b69      	ldr	r3, [pc, #420]	@ (800b5e8 <UART_SetConfig+0xc2c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d009      	beq.n	800b462 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b44e:	4b66      	ldr	r3, [pc, #408]	@ (800b5e8 <UART_SetConfig+0xc2c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	08db      	lsrs	r3, r3, #3
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	4a64      	ldr	r2, [pc, #400]	@ (800b5ec <UART_SetConfig+0xc30>)
 800b45a:	fa22 f303 	lsr.w	r3, r2, r3
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b460:	e00f      	b.n	800b482 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b462:	4b62      	ldr	r3, [pc, #392]	@ (800b5ec <UART_SetConfig+0xc30>)
 800b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b466:	e00c      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b468:	4b61      	ldr	r3, [pc, #388]	@ (800b5f0 <UART_SetConfig+0xc34>)
 800b46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b46c:	e009      	b.n	800b482 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b46e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b474:	e005      	b.n	800b482 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 80ea 	beq.w	800b65e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48e:	4a55      	ldr	r2, [pc, #340]	@ (800b5e4 <UART_SetConfig+0xc28>)
 800b490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b494:	461a      	mov	r2, r3
 800b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b498:	fbb3 f3f2 	udiv	r3, r3, r2
 800b49c:	005a      	lsls	r2, r3, #1
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	085b      	lsrs	r3, r3, #1
 800b4a4:	441a      	add	r2, r3
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	2b0f      	cmp	r3, #15
 800b4b4:	d916      	bls.n	800b4e4 <UART_SetConfig+0xb28>
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4bc:	d212      	bcs.n	800b4e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f023 030f 	bic.w	r3, r3, #15
 800b4c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ca:	085b      	lsrs	r3, r3, #1
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b4e0:	60da      	str	r2, [r3, #12]
 800b4e2:	e0bc      	b.n	800b65e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4ea:	e0b8      	b.n	800b65e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	dc4b      	bgt.n	800b58c <UART_SetConfig+0xbd0>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f2c0 8087 	blt.w	800b608 <UART_SetConfig+0xc4c>
 800b4fa:	2b20      	cmp	r3, #32
 800b4fc:	f200 8084 	bhi.w	800b608 <UART_SetConfig+0xc4c>
 800b500:	a201      	add	r2, pc, #4	@ (adr r2, 800b508 <UART_SetConfig+0xb4c>)
 800b502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b506:	bf00      	nop
 800b508:	0800b593 	.word	0x0800b593
 800b50c:	0800b59b 	.word	0x0800b59b
 800b510:	0800b609 	.word	0x0800b609
 800b514:	0800b609 	.word	0x0800b609
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b609 	.word	0x0800b609
 800b520:	0800b609 	.word	0x0800b609
 800b524:	0800b609 	.word	0x0800b609
 800b528:	0800b5b3 	.word	0x0800b5b3
 800b52c:	0800b609 	.word	0x0800b609
 800b530:	0800b609 	.word	0x0800b609
 800b534:	0800b609 	.word	0x0800b609
 800b538:	0800b609 	.word	0x0800b609
 800b53c:	0800b609 	.word	0x0800b609
 800b540:	0800b609 	.word	0x0800b609
 800b544:	0800b609 	.word	0x0800b609
 800b548:	0800b5c3 	.word	0x0800b5c3
 800b54c:	0800b609 	.word	0x0800b609
 800b550:	0800b609 	.word	0x0800b609
 800b554:	0800b609 	.word	0x0800b609
 800b558:	0800b609 	.word	0x0800b609
 800b55c:	0800b609 	.word	0x0800b609
 800b560:	0800b609 	.word	0x0800b609
 800b564:	0800b609 	.word	0x0800b609
 800b568:	0800b609 	.word	0x0800b609
 800b56c:	0800b609 	.word	0x0800b609
 800b570:	0800b609 	.word	0x0800b609
 800b574:	0800b609 	.word	0x0800b609
 800b578:	0800b609 	.word	0x0800b609
 800b57c:	0800b609 	.word	0x0800b609
 800b580:	0800b609 	.word	0x0800b609
 800b584:	0800b609 	.word	0x0800b609
 800b588:	0800b5fb 	.word	0x0800b5fb
 800b58c:	2b40      	cmp	r3, #64	@ 0x40
 800b58e:	d037      	beq.n	800b600 <UART_SetConfig+0xc44>
 800b590:	e03a      	b.n	800b608 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b592:	f7fe fb17 	bl	8009bc4 <HAL_RCC_GetPCLK1Freq>
 800b596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b598:	e03c      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b59a:	f7fe fb29 	bl	8009bf0 <HAL_RCC_GetPCLK2Freq>
 800b59e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5a0:	e038      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fb90 	bl	8009ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b0:	e030      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b2:	f107 0318 	add.w	r3, r7, #24
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe fcdc 	bl	8009f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c0:	e028      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5c2:	4b09      	ldr	r3, [pc, #36]	@ (800b5e8 <UART_SetConfig+0xc2c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d012      	beq.n	800b5f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5ce:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <UART_SetConfig+0xc2c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	08db      	lsrs	r3, r3, #3
 800b5d4:	f003 0303 	and.w	r3, r3, #3
 800b5d8:	4a04      	ldr	r2, [pc, #16]	@ (800b5ec <UART_SetConfig+0xc30>)
 800b5da:	fa22 f303 	lsr.w	r3, r2, r3
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5e0:	e018      	b.n	800b614 <UART_SetConfig+0xc58>
 800b5e2:	bf00      	nop
 800b5e4:	08028b8c 	.word	0x08028b8c
 800b5e8:	58024400 	.word	0x58024400
 800b5ec:	03d09000 	.word	0x03d09000
 800b5f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b5f4:	4b24      	ldr	r3, [pc, #144]	@ (800b688 <UART_SetConfig+0xccc>)
 800b5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f8:	e00c      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5fa:	4b24      	ldr	r3, [pc, #144]	@ (800b68c <UART_SetConfig+0xcd0>)
 800b5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5fe:	e009      	b.n	800b614 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b606:	e005      	b.n	800b614 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b612:	bf00      	nop
    }

    if (pclk != 0U)
 800b614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d021      	beq.n	800b65e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61e:	4a1c      	ldr	r2, [pc, #112]	@ (800b690 <UART_SetConfig+0xcd4>)
 800b620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b624:	461a      	mov	r2, r3
 800b626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b628:	fbb3 f2f2 	udiv	r2, r3, r2
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	085b      	lsrs	r3, r3, #1
 800b632:	441a      	add	r2, r3
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b640:	2b0f      	cmp	r3, #15
 800b642:	d909      	bls.n	800b658 <UART_SetConfig+0xc9c>
 800b644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b64a:	d205      	bcs.n	800b658 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64e:	b29a      	uxth	r2, r3
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e002      	b.n	800b65e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2201      	movs	r2, #1
 800b662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2201      	movs	r2, #1
 800b66a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2200      	movs	r2, #0
 800b672:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b67a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3748      	adds	r7, #72	@ 0x48
 800b682:	46bd      	mov	sp, r7
 800b684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b688:	03d09000 	.word	0x03d09000
 800b68c:	003d0900 	.word	0x003d0900
 800b690:	08028b8c 	.word	0x08028b8c

0800b694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a0:	f003 0308 	and.w	r3, r3, #8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00a      	beq.n	800b6be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	430a      	orrs	r2, r1
 800b6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00a      	beq.n	800b702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b706:	f003 0304 	and.w	r3, r3, #4
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00a      	beq.n	800b724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74a:	f003 0320 	and.w	r3, r3, #32
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01a      	beq.n	800b7aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b78e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b792:	d10a      	bne.n	800b7aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	605a      	str	r2, [r3, #4]
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b098      	sub	sp, #96	@ 0x60
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7e8:	f7fb f89c 	bl	8006924 <HAL_GetTick>
 800b7ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0308 	and.w	r3, r3, #8
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d12f      	bne.n	800b85c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b804:	2200      	movs	r2, #0
 800b806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f88e 	bl	800b92c <UART_WaitOnFlagUntilTimeout>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d022      	beq.n	800b85c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81e:	e853 3f00 	ldrex	r3, [r3]
 800b822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b82a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b834:	647b      	str	r3, [r7, #68]	@ 0x44
 800b836:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b83a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e6      	bne.n	800b816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2220      	movs	r2, #32
 800b84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b858:	2303      	movs	r3, #3
 800b85a:	e063      	b.n	800b924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b04      	cmp	r3, #4
 800b868:	d149      	bne.n	800b8fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b86a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b872:	2200      	movs	r2, #0
 800b874:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f857 	bl	800b92c <UART_WaitOnFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d03c      	beq.n	800b8fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	623b      	str	r3, [r7, #32]
   return(result);
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8aa:	e841 2300 	strex	r3, r2, [r1]
 800b8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1e6      	bne.n	800b884 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 0301 	bic.w	r3, r3, #1
 800b8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8d6:	61fa      	str	r2, [r7, #28]
 800b8d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	69b9      	ldr	r1, [r7, #24]
 800b8dc:	69fa      	ldr	r2, [r7, #28]
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e5      	bne.n	800b8b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e012      	b.n	800b924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3758      	adds	r7, #88	@ 0x58
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	4613      	mov	r3, r2
 800b93a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b93c:	e04f      	b.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b944:	d04b      	beq.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b946:	f7fa ffed 	bl	8006924 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	429a      	cmp	r2, r3
 800b954:	d302      	bcc.n	800b95c <UART_WaitOnFlagUntilTimeout+0x30>
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e04e      	b.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d037      	beq.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b80      	cmp	r3, #128	@ 0x80
 800b972:	d034      	beq.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b40      	cmp	r3, #64	@ 0x40
 800b978:	d031      	beq.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	69db      	ldr	r3, [r3, #28]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b08      	cmp	r3, #8
 800b986:	d110      	bne.n	800b9aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2208      	movs	r2, #8
 800b98e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 f839 	bl	800ba08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2208      	movs	r2, #8
 800b99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e029      	b.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9b8:	d111      	bne.n	800b9de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 f81f 	bl	800ba08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e00f      	b.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69da      	ldr	r2, [r3, #28]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	bf0c      	ite	eq
 800b9ee:	2301      	moveq	r3, #1
 800b9f0:	2300      	movne	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d0a0      	beq.n	800b93e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b095      	sub	sp, #84	@ 0x54
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e6      	bne.n	800ba10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	4b1e      	ldr	r3, [pc, #120]	@ (800bad0 <UART_EndRxTransfer+0xc8>)
 800ba56:	4013      	ands	r3, r2
 800ba58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba6a:	e841 2300 	strex	r3, r2, [r1]
 800ba6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1e5      	bne.n	800ba42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d118      	bne.n	800bab0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	e853 3f00 	ldrex	r3, [r3]
 800ba8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f023 0310 	bic.w	r3, r3, #16
 800ba92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba9c:	61bb      	str	r3, [r7, #24]
 800ba9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	6979      	ldr	r1, [r7, #20]
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	613b      	str	r3, [r7, #16]
   return(result);
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e6      	bne.n	800ba7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2220      	movs	r2, #32
 800bab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bac4:	bf00      	nop
 800bac6:	3754      	adds	r7, #84	@ 0x54
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	effffffe 	.word	0xeffffffe

0800bad4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bada:	2020      	movs	r0, #32
 800badc:	f004 f8a0 	bl	800fc20 <pvPortMalloc>
 800bae0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00a      	beq.n	800bafe <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f988 	bl	800be08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800bafe:	687b      	ldr	r3, [r7, #4]
	}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b090      	sub	sp, #64	@ 0x40
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb46:	d30b      	bcc.n	800bb60 <xEventGroupWaitBits+0x58>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	61fb      	str	r3, [r7, #28]
}
 800bb5a:	bf00      	nop
 800bb5c:	bf00      	nop
 800bb5e:	e7fd      	b.n	800bb5c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10b      	bne.n	800bb7e <xEventGroupWaitBits+0x76>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	61bb      	str	r3, [r7, #24]
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	e7fd      	b.n	800bb7a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb7e:	f002 fc45 	bl	800e40c <xTaskGetSchedulerState>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <xEventGroupWaitBits+0x86>
 800bb88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <xEventGroupWaitBits+0x8a>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <xEventGroupWaitBits+0x8c>
 800bb92:	2300      	movs	r3, #0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10b      	bne.n	800bbb0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	617b      	str	r3, [r7, #20]
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	e7fd      	b.n	800bbac <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800bbb0:	f001 fe20 	bl	800d7f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	68b9      	ldr	r1, [r7, #8]
 800bbbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbc0:	f000 f900 	bl	800bdc4 <prvTestWaitCondition>
 800bbc4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00e      	beq.n	800bbea <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800bbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d028      	beq.n	800bc2c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bbda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	43db      	mvns	r3, r3
 800bbe2:	401a      	ands	r2, r3
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	e020      	b.n	800bc2c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800bbea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d104      	bne.n	800bbfa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800bbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbf8:	e018      	b.n	800bc2c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc06:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc14:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc18:	1d18      	adds	r0, r3, #4
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc22:	4619      	mov	r1, r3
 800bc24:	f002 f880 	bl	800dd28 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800bc2c:	f001 fdf0 	bl	800d810 <xTaskResumeAll>
 800bc30:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800bc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d031      	beq.n	800bc9c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d107      	bne.n	800bc4e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800bc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bca8 <xEventGroupWaitBits+0x1a0>)
 800bc40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800bc4e:	f002 fe13 	bl	800e878 <uxTaskResetEventItemValue>
 800bc52:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800bc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d11a      	bne.n	800bc94 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800bc5e:	f004 fafb 	bl	8010258 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	68b9      	ldr	r1, [r7, #8]
 800bc6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc6e:	f000 f8a9 	bl	800bdc4 <prvTestWaitCondition>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d009      	beq.n	800bc8c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d006      	beq.n	800bc8c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	43db      	mvns	r3, r3
 800bc86:	401a      	ands	r2, r3
 800bc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800bc90:	f004 fb14 	bl	80102bc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3740      	adds	r7, #64	@ 0x40
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	@ 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10b      	bne.n	800bce0 <xEventGroupSetBits+0x34>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	613b      	str	r3, [r7, #16]
}
 800bcda:	bf00      	nop
 800bcdc:	bf00      	nop
 800bcde:	e7fd      	b.n	800bcdc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bce6:	d30b      	bcc.n	800bd00 <xEventGroupSetBits+0x54>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60fb      	str	r3, [r7, #12]
}
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	e7fd      	b.n	800bcfc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800bd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd02:	3304      	adds	r3, #4
 800bd04:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	3308      	adds	r3, #8
 800bd0a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800bd0c:	f001 fd72 	bl	800d7f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800bd22:	e03c      	b.n	800bd9e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800bd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800bd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bd3a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bd42:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d108      	bne.n	800bd60 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	4013      	ands	r3, r2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00b      	beq.n	800bd72 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd5e:	e008      	b.n	800bd72 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800bd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	4013      	ands	r3, r2
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d101      	bne.n	800bd72 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800bd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d010      	beq.n	800bd9a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800bd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bd92:	4619      	mov	r1, r3
 800bd94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bd96:	f002 f895 	bl	800dec4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800bd9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d1be      	bne.n	800bd24 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdac:	43db      	mvns	r3, r3
 800bdae:	401a      	ands	r2, r3
 800bdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800bdb4:	f001 fd2c 	bl	800d810 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800bdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdba:	681b      	ldr	r3, [r3, #0]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3738      	adds	r7, #56	@ 0x38
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d107      	bne.n	800bdea <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bde4:	2301      	movs	r3, #1
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	e007      	b.n	800bdfa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d101      	bne.n	800bdfa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800bdfa:	697b      	ldr	r3, [r7, #20]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	371c      	adds	r7, #28
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0208 	add.w	r2, r3, #8
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f04f 32ff 	mov.w	r2, #4294967295
 800be20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f103 0208 	add.w	r2, r3, #8
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 0208 	add.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d103      	bne.n	800beca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e00c      	b.n	800bee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3308      	adds	r3, #8
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e002      	b.n	800bed8 <vListInsert+0x2e>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d2f6      	bcs.n	800bed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	601a      	str	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6892      	ldr	r2, [r2, #8]
 800bf32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6852      	ldr	r2, [r2, #4]
 800bf3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d103      	bne.n	800bf50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10b      	bne.n	800bf9c <xQueueGenericReset+0x2c>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	60bb      	str	r3, [r7, #8]
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	e7fd      	b.n	800bf98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf9c:	f004 f95c 	bl	8010258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfac:	fb01 f303 	mul.w	r3, r1, r3
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	68f9      	ldr	r1, [r7, #12]
 800bfd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfd2:	fb01 f303 	mul.w	r3, r1, r3
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	22ff      	movs	r2, #255	@ 0xff
 800bfe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	22ff      	movs	r2, #255	@ 0xff
 800bfe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d114      	bne.n	800c01c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01a      	beq.n	800c030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3310      	adds	r3, #16
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 fefc 	bl	800ddfc <xTaskRemoveFromEventList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d012      	beq.n	800c030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c00a:	4b0d      	ldr	r3, [pc, #52]	@ (800c040 <xQueueGenericReset+0xd0>)
 800c00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	e009      	b.n	800c030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3310      	adds	r3, #16
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff fef1 	bl	800be08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3324      	adds	r3, #36	@ 0x24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff feec 	bl	800be08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c030:	f004 f944 	bl	80102bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c034:	2301      	movs	r3, #1
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	e000ed04 	.word	0xe000ed04

0800c044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08e      	sub	sp, #56	@ 0x38
 800c048:	af02      	add	r7, sp, #8
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	e7fd      	b.n	800c06c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10b      	bne.n	800c08e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	e7fd      	b.n	800c08a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <xQueueGenericCreateStatic+0x56>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <xQueueGenericCreateStatic+0x5a>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e000      	b.n	800c0a0 <xQueueGenericCreateStatic+0x5c>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10b      	bne.n	800c0bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	623b      	str	r3, [r7, #32]
}
 800c0b6:	bf00      	nop
 800c0b8:	bf00      	nop
 800c0ba:	e7fd      	b.n	800c0b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d102      	bne.n	800c0c8 <xQueueGenericCreateStatic+0x84>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <xQueueGenericCreateStatic+0x88>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <xQueueGenericCreateStatic+0x8a>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10b      	bne.n	800c0ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	61fb      	str	r3, [r7, #28]
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	e7fd      	b.n	800c0e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0ea:	2350      	movs	r3, #80	@ 0x50
 800c0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b50      	cmp	r3, #80	@ 0x50
 800c0f2:	d00b      	beq.n	800c10c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	61bb      	str	r3, [r7, #24]
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c10c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00d      	beq.n	800c134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	4613      	mov	r3, r2
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f840 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c136:	4618      	mov	r0, r3
 800c138:	3730      	adds	r7, #48	@ 0x30
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b08a      	sub	sp, #40	@ 0x28
 800c142:	af02      	add	r7, sp, #8
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	4613      	mov	r3, r2
 800c14a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10b      	bne.n	800c16a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	613b      	str	r3, [r7, #16]
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	e7fd      	b.n	800c166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	fb02 f303 	mul.w	r3, r2, r3
 800c172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	3350      	adds	r3, #80	@ 0x50
 800c178:	4618      	mov	r0, r3
 800c17a:	f003 fd51 	bl	800fc20 <pvPortMalloc>
 800c17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d011      	beq.n	800c1aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	3350      	adds	r3, #80	@ 0x50
 800c18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f805 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	69b8      	ldr	r0, [r7, #24]
 800c1e6:	f7ff fec3 	bl	800bf70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1f2:	bf00      	nop
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00e      	beq.n	800c226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c21a:	2300      	movs	r3, #0
 800c21c:	2200      	movs	r2, #0
 800c21e:	2100      	movs	r1, #0
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f911 	bl	800c448 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c226:	bf00      	nop
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af00      	add	r7, sp, #0
 800c234:	4603      	mov	r3, r0
 800c236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c238:	2301      	movs	r3, #1
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	461a      	mov	r2, r3
 800c244:	6939      	ldr	r1, [r7, #16]
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	f7ff ff79 	bl	800c13e <xQueueGenericCreate>
 800c24c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff ffd3 	bl	800c1fa <prvInitialiseMutex>

		return xNewQueue;
 800c254:	68fb      	ldr	r3, [r7, #12]
	}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b088      	sub	sp, #32
 800c262:	af02      	add	r7, sp, #8
 800c264:	4603      	mov	r3, r0
 800c266:	6039      	str	r1, [r7, #0]
 800c268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c26a:	2301      	movs	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	2300      	movs	r3, #0
 800c270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2200      	movs	r2, #0
 800c27a:	6939      	ldr	r1, [r7, #16]
 800c27c:	6978      	ldr	r0, [r7, #20]
 800c27e:	f7ff fee1 	bl	800c044 <xQueueGenericCreateStatic>
 800c282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff ffb8 	bl	800c1fa <prvInitialiseMutex>

		return xNewQueue;
 800c28a:	68fb      	ldr	r3, [r7, #12]
	}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60fb      	str	r3, [r7, #12]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	689c      	ldr	r4, [r3, #8]
 800c2c2:	f002 f893 	bl	800e3ec <xTaskGetCurrentTaskHandle>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	d111      	bne.n	800c2f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	1e5a      	subs	r2, r3, #1
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d105      	bne.n	800c2ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	6938      	ldr	r0, [r7, #16]
 800c2e6:	f000 f8af 	bl	800c448 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	e001      	b.n	800c2f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c2f4:	697b      	ldr	r3, [r7, #20]
	}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}

0800c2fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c2fe:	b590      	push	{r4, r7, lr}
 800c300:	b087      	sub	sp, #28
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10b      	bne.n	800c32a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60fb      	str	r3, [r7, #12]
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop
 800c328:	e7fd      	b.n	800c326 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	689c      	ldr	r4, [r3, #8]
 800c32e:	f002 f85d 	bl	800e3ec <xTaskGetCurrentTaskHandle>
 800c332:	4603      	mov	r3, r0
 800c334:	429c      	cmp	r4, r3
 800c336:	d107      	bne.n	800c348 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e00c      	b.n	800c362 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f000 fb8e 	bl	800ca6c <xQueueSemaphoreTake>
 800c350:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d004      	beq.n	800c362 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c362:	697b      	ldr	r3, [r7, #20]
	}
 800c364:	4618      	mov	r0, r3
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd90      	pop	{r4, r7, pc}

0800c36c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	@ 0x28
 800c370:	af02      	add	r7, sp, #8
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	61bb      	str	r3, [r7, #24]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d90b      	bls.n	800c3b6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	617b      	str	r3, [r7, #20]
}
 800c3b0:	bf00      	nop
 800c3b2:	bf00      	nop
 800c3b4:	e7fd      	b.n	800c3b2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2100      	movs	r1, #0
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff fe3f 	bl	800c044 <xQueueGenericCreateStatic>
 800c3c6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
	}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b086      	sub	sp, #24
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10b      	bne.n	800c406 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	613b      	str	r3, [r7, #16]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d90b      	bls.n	800c426 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	60fb      	str	r3, [r7, #12]
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c426:	2202      	movs	r2, #2
 800c428:	2100      	movs	r1, #0
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff fe87 	bl	800c13e <xQueueGenericCreate>
 800c430:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c43e:	697b      	ldr	r3, [r7, #20]
	}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08e      	sub	sp, #56	@ 0x38
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c456:	2300      	movs	r3, #0
 800c458:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10b      	bne.n	800c47c <xQueueGenericSend+0x34>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c476:	bf00      	nop
 800c478:	bf00      	nop
 800c47a:	e7fd      	b.n	800c478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d103      	bne.n	800c48a <xQueueGenericSend+0x42>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <xQueueGenericSend+0x46>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <xQueueGenericSend+0x48>
 800c48e:	2300      	movs	r3, #0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10b      	bne.n	800c4ac <xQueueGenericSend+0x64>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d103      	bne.n	800c4ba <xQueueGenericSend+0x72>
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d101      	bne.n	800c4be <xQueueGenericSend+0x76>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e000      	b.n	800c4c0 <xQueueGenericSend+0x78>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10b      	bne.n	800c4dc <xQueueGenericSend+0x94>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	623b      	str	r3, [r7, #32]
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	e7fd      	b.n	800c4d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4dc:	f001 ff96 	bl	800e40c <xTaskGetSchedulerState>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <xQueueGenericSend+0xa4>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueGenericSend+0xa8>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e000      	b.n	800c4f2 <xQueueGenericSend+0xaa>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10b      	bne.n	800c50e <xQueueGenericSend+0xc6>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61fb      	str	r3, [r7, #28]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c50e:	f003 fea3 	bl	8010258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d302      	bcc.n	800c524 <xQueueGenericSend+0xdc>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d129      	bne.n	800c578 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c52a:	f000 fcab 	bl	800ce84 <prvCopyDataToQueue>
 800c52e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d010      	beq.n	800c55a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	3324      	adds	r3, #36	@ 0x24
 800c53c:	4618      	mov	r0, r3
 800c53e:	f001 fc5d 	bl	800ddfc <xTaskRemoveFromEventList>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d013      	beq.n	800c570 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c548:	4b3f      	ldr	r3, [pc, #252]	@ (800c648 <xQueueGenericSend+0x200>)
 800c54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	e00a      	b.n	800c570 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c560:	4b39      	ldr	r3, [pc, #228]	@ (800c648 <xQueueGenericSend+0x200>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c570:	f003 fea4 	bl	80102bc <vPortExitCritical>
				return pdPASS;
 800c574:	2301      	movs	r3, #1
 800c576:	e063      	b.n	800c640 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c57e:	f003 fe9d 	bl	80102bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c582:	2300      	movs	r3, #0
 800c584:	e05c      	b.n	800c640 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c58c:	f107 0314 	add.w	r3, r7, #20
 800c590:	4618      	mov	r0, r3
 800c592:	f001 fcfb 	bl	800df8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c596:	2301      	movs	r3, #1
 800c598:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c59a:	f003 fe8f 	bl	80102bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c59e:	f001 f929 	bl	800d7f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5a2:	f003 fe59 	bl	8010258 <vPortEnterCritical>
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5ac:	b25b      	sxtb	r3, r3
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d103      	bne.n	800c5bc <xQueueGenericSend+0x174>
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5c2:	b25b      	sxtb	r3, r3
 800c5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c8:	d103      	bne.n	800c5d2 <xQueueGenericSend+0x18a>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d2:	f003 fe73 	bl	80102bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5d6:	1d3a      	adds	r2, r7, #4
 800c5d8:	f107 0314 	add.w	r3, r7, #20
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 fcea 	bl	800dfb8 <xTaskCheckForTimeOut>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d124      	bne.n	800c634 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ec:	f000 fd42 	bl	800d074 <prvIsQueueFull>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d018      	beq.n	800c628 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 fb6c 	bl	800dcdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c604:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c606:	f000 fccd 	bl	800cfa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c60a:	f001 f901 	bl	800d810 <xTaskResumeAll>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	f47f af7c 	bne.w	800c50e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c616:	4b0c      	ldr	r3, [pc, #48]	@ (800c648 <xQueueGenericSend+0x200>)
 800c618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	e772      	b.n	800c50e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c62a:	f000 fcbb 	bl	800cfa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c62e:	f001 f8ef 	bl	800d810 <xTaskResumeAll>
 800c632:	e76c      	b.n	800c50e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c636:	f000 fcb5 	bl	800cfa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c63a:	f001 f8e9 	bl	800d810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c63e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c640:	4618      	mov	r0, r3
 800c642:	3738      	adds	r7, #56	@ 0x38
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b090      	sub	sp, #64	@ 0x40
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10b      	bne.n	800c67c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d103      	bne.n	800c68a <xQueueGenericSendFromISR+0x3e>
 800c682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <xQueueGenericSendFromISR+0x42>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <xQueueGenericSendFromISR+0x44>
 800c68e:	2300      	movs	r3, #0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10b      	bne.n	800c6ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6a6:	bf00      	nop
 800c6a8:	bf00      	nop
 800c6aa:	e7fd      	b.n	800c6a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d103      	bne.n	800c6ba <xQueueGenericSendFromISR+0x6e>
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <xQueueGenericSendFromISR+0x72>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <xQueueGenericSendFromISR+0x74>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10b      	bne.n	800c6dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	623b      	str	r3, [r7, #32]
}
 800c6d6:	bf00      	nop
 800c6d8:	bf00      	nop
 800c6da:	e7fd      	b.n	800c6d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6dc:	f003 fe9c 	bl	8010418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6e0:	f3ef 8211 	mrs	r2, BASEPRI
 800c6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	61fa      	str	r2, [r7, #28]
 800c6f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c704:	429a      	cmp	r2, r3
 800c706:	d302      	bcc.n	800c70e <xQueueGenericSendFromISR+0xc2>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d12f      	bne.n	800c76e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c714:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c724:	f000 fbae 	bl	800ce84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c728:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c730:	d112      	bne.n	800c758 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c736:	2b00      	cmp	r3, #0
 800c738:	d016      	beq.n	800c768 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	3324      	adds	r3, #36	@ 0x24
 800c73e:	4618      	mov	r0, r3
 800c740:	f001 fb5c 	bl	800ddfc <xTaskRemoveFromEventList>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00e      	beq.n	800c768 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00b      	beq.n	800c768 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	e007      	b.n	800c768 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c75c:	3301      	adds	r3, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	b25a      	sxtb	r2, r3
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c768:	2301      	movs	r3, #1
 800c76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c76c:	e001      	b.n	800c772 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c774:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c77c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c780:	4618      	mov	r0, r3
 800c782:	3740      	adds	r7, #64	@ 0x40
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08e      	sub	sp, #56	@ 0x38
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10b      	bne.n	800c7b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	623b      	str	r3, [r7, #32]
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	e7fd      	b.n	800c7b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00b      	beq.n	800c7d4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	61fb      	str	r3, [r7, #28]
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	e7fd      	b.n	800c7d0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <xQueueGiveFromISR+0x5c>
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <xQueueGiveFromISR+0x60>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e000      	b.n	800c7ea <xQueueGiveFromISR+0x62>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10b      	bne.n	800c806 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	61bb      	str	r3, [r7, #24]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c806:	f003 fe07 	bl	8010418 <vPortValidateInterruptPriority>
	__asm volatile
 800c80a:	f3ef 8211 	mrs	r2, BASEPRI
 800c80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	617a      	str	r2, [r7, #20]
 800c820:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c822:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c824:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c82a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c832:	429a      	cmp	r2, r3
 800c834:	d22b      	bcs.n	800c88e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c838:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c83c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c846:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c848:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c850:	d112      	bne.n	800c878 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d016      	beq.n	800c888 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	3324      	adds	r3, #36	@ 0x24
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 facc 	bl	800ddfc <xTaskRemoveFromEventList>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00e      	beq.n	800c888 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2201      	movs	r2, #1
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	e007      	b.n	800c888 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c87c:	3301      	adds	r3, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	b25a      	sxtb	r2, r3
 800c882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c888:	2301      	movs	r3, #1
 800c88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c88c:	e001      	b.n	800c892 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	637b      	str	r3, [r7, #52]	@ 0x34
 800c892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c894:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f383 8811 	msr	BASEPRI, r3
}
 800c89c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3738      	adds	r7, #56	@ 0x38
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08c      	sub	sp, #48	@ 0x30
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10b      	bne.n	800c8da <xQueueReceive+0x32>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	623b      	str	r3, [r7, #32]
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop
 800c8d8:	e7fd      	b.n	800c8d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d103      	bne.n	800c8e8 <xQueueReceive+0x40>
 800c8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <xQueueReceive+0x44>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e000      	b.n	800c8ee <xQueueReceive+0x46>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10b      	bne.n	800c90a <xQueueReceive+0x62>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	61fb      	str	r3, [r7, #28]
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	e7fd      	b.n	800c906 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c90a:	f001 fd7f 	bl	800e40c <xTaskGetSchedulerState>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d102      	bne.n	800c91a <xQueueReceive+0x72>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <xQueueReceive+0x76>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <xQueueReceive+0x78>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <xQueueReceive+0x94>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	61bb      	str	r3, [r7, #24]
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	e7fd      	b.n	800c938 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c93c:	f003 fc8c 	bl	8010258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01f      	beq.n	800c98c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c950:	f000 fb02 	bl	800cf58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	1e5a      	subs	r2, r3, #1
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00f      	beq.n	800c984 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c966:	3310      	adds	r3, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	f001 fa47 	bl	800ddfc <xTaskRemoveFromEventList>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c974:	4b3c      	ldr	r3, [pc, #240]	@ (800ca68 <xQueueReceive+0x1c0>)
 800c976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97a:	601a      	str	r2, [r3, #0]
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c984:	f003 fc9a 	bl	80102bc <vPortExitCritical>
				return pdPASS;
 800c988:	2301      	movs	r3, #1
 800c98a:	e069      	b.n	800ca60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d103      	bne.n	800c99a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c992:	f003 fc93 	bl	80102bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c996:	2300      	movs	r3, #0
 800c998:	e062      	b.n	800ca60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d106      	bne.n	800c9ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9a0:	f107 0310 	add.w	r3, r7, #16
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 faf1 	bl	800df8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9ae:	f003 fc85 	bl	80102bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9b2:	f000 ff1f 	bl	800d7f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9b6:	f003 fc4f 	bl	8010258 <vPortEnterCritical>
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9c0:	b25b      	sxtb	r3, r3
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d103      	bne.n	800c9d0 <xQueueReceive+0x128>
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9d6:	b25b      	sxtb	r3, r3
 800c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9dc:	d103      	bne.n	800c9e6 <xQueueReceive+0x13e>
 800c9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9e6:	f003 fc69 	bl	80102bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9ea:	1d3a      	adds	r2, r7, #4
 800c9ec:	f107 0310 	add.w	r3, r7, #16
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f001 fae0 	bl	800dfb8 <xTaskCheckForTimeOut>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d123      	bne.n	800ca46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca00:	f000 fb22 	bl	800d048 <prvIsQueueEmpty>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d017      	beq.n	800ca3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0c:	3324      	adds	r3, #36	@ 0x24
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 f962 	bl	800dcdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca1a:	f000 fac3 	bl	800cfa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca1e:	f000 fef7 	bl	800d810 <xTaskResumeAll>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d189      	bne.n	800c93c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ca28:	4b0f      	ldr	r3, [pc, #60]	@ (800ca68 <xQueueReceive+0x1c0>)
 800ca2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	e780      	b.n	800c93c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca3c:	f000 fab2 	bl	800cfa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca40:	f000 fee6 	bl	800d810 <xTaskResumeAll>
 800ca44:	e77a      	b.n	800c93c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca48:	f000 faac 	bl	800cfa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca4c:	f000 fee0 	bl	800d810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca52:	f000 faf9 	bl	800d048 <prvIsQueueEmpty>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f43f af6f 	beq.w	800c93c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3730      	adds	r7, #48	@ 0x30
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	e000ed04 	.word	0xe000ed04

0800ca6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08e      	sub	sp, #56	@ 0x38
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca76:	2300      	movs	r3, #0
 800ca78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10b      	bne.n	800caa0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	623b      	str	r3, [r7, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	bf00      	nop
 800ca9e:	e7fd      	b.n	800ca9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	61fb      	str	r3, [r7, #28]
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	e7fd      	b.n	800cabc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cac0:	f001 fca4 	bl	800e40c <xTaskGetSchedulerState>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <xQueueSemaphoreTake+0x64>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <xQueueSemaphoreTake+0x68>
 800cad0:	2301      	movs	r3, #1
 800cad2:	e000      	b.n	800cad6 <xQueueSemaphoreTake+0x6a>
 800cad4:	2300      	movs	r3, #0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10b      	bne.n	800caf2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	61bb      	str	r3, [r7, #24]
}
 800caec:	bf00      	nop
 800caee:	bf00      	nop
 800caf0:	e7fd      	b.n	800caee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caf2:	f003 fbb1 	bl	8010258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800caf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d024      	beq.n	800cb4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb04:	1e5a      	subs	r2, r3, #1
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d104      	bne.n	800cb1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb12:	f001 fec9 	bl	800e8a8 <pvTaskIncrementMutexHeldCount>
 800cb16:	4602      	mov	r2, r0
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00f      	beq.n	800cb44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb26:	3310      	adds	r3, #16
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f001 f967 	bl	800ddfc <xTaskRemoveFromEventList>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d007      	beq.n	800cb44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb34:	4b54      	ldr	r3, [pc, #336]	@ (800cc88 <xQueueSemaphoreTake+0x21c>)
 800cb36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb44:	f003 fbba 	bl	80102bc <vPortExitCritical>
				return pdPASS;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e098      	b.n	800cc7e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d112      	bne.n	800cb78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	617b      	str	r3, [r7, #20]
}
 800cb6a:	bf00      	nop
 800cb6c:	bf00      	nop
 800cb6e:	e7fd      	b.n	800cb6c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb70:	f003 fba4 	bl	80102bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb74:	2300      	movs	r3, #0
 800cb76:	e082      	b.n	800cc7e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 fa02 	bl	800df8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb8c:	f003 fb96 	bl	80102bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb90:	f000 fe30 	bl	800d7f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb94:	f003 fb60 	bl	8010258 <vPortEnterCritical>
 800cb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba4:	d103      	bne.n	800cbae <xQueueSemaphoreTake+0x142>
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbba:	d103      	bne.n	800cbc4 <xQueueSemaphoreTake+0x158>
 800cbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbc4:	f003 fb7a 	bl	80102bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbc8:	463a      	mov	r2, r7
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f001 f9f1 	bl	800dfb8 <xTaskCheckForTimeOut>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d132      	bne.n	800cc42 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbde:	f000 fa33 	bl	800d048 <prvIsQueueEmpty>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d026      	beq.n	800cc36 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d109      	bne.n	800cc04 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cbf0:	f003 fb32 	bl	8010258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 fc25 	bl	800e448 <xTaskPriorityInherit>
 800cbfe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cc00:	f003 fb5c 	bl	80102bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	3324      	adds	r3, #36	@ 0x24
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 f865 	bl	800dcdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc14:	f000 f9c6 	bl	800cfa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc18:	f000 fdfa 	bl	800d810 <xTaskResumeAll>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f47f af67 	bne.w	800caf2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cc24:	4b18      	ldr	r3, [pc, #96]	@ (800cc88 <xQueueSemaphoreTake+0x21c>)
 800cc26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	e75d      	b.n	800caf2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cc36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc38:	f000 f9b4 	bl	800cfa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc3c:	f000 fde8 	bl	800d810 <xTaskResumeAll>
 800cc40:	e757      	b.n	800caf2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cc42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc44:	f000 f9ae 	bl	800cfa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc48:	f000 fde2 	bl	800d810 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc4e:	f000 f9fb 	bl	800d048 <prvIsQueueEmpty>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f43f af4c 	beq.w	800caf2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00d      	beq.n	800cc7c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cc60:	f003 fafa 	bl	8010258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc66:	f000 f8f5 	bl	800ce54 <prvGetDisinheritPriorityAfterTimeout>
 800cc6a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 fcc0 	bl	800e5f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc78:	f003 fb20 	bl	80102bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3738      	adds	r7, #56	@ 0x38
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08e      	sub	sp, #56	@ 0x38
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10b      	bne.n	800ccba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	623b      	str	r3, [r7, #32]
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	e7fd      	b.n	800ccb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d103      	bne.n	800ccc8 <xQueueReceiveFromISR+0x3c>
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <xQueueReceiveFromISR+0x40>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e000      	b.n	800ccce <xQueueReceiveFromISR+0x42>
 800cccc:	2300      	movs	r3, #0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10b      	bne.n	800ccea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	61fb      	str	r3, [r7, #28]
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccea:	f003 fb95 	bl	8010418 <vPortValidateInterruptPriority>
	__asm volatile
 800ccee:	f3ef 8211 	mrs	r2, BASEPRI
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	61ba      	str	r2, [r7, #24]
 800cd04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d02f      	beq.n	800cd76 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd24:	f000 f918 	bl	800cf58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2a:	1e5a      	subs	r2, r3, #1
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd38:	d112      	bne.n	800cd60 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d016      	beq.n	800cd70 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	3310      	adds	r3, #16
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 f858 	bl	800ddfc <xTaskRemoveFromEventList>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00e      	beq.n	800cd70 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00b      	beq.n	800cd70 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	e007      	b.n	800cd70 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd64:	3301      	adds	r3, #1
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	b25a      	sxtb	r2, r3
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cd70:	2301      	movs	r3, #1
 800cd72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd74:	e001      	b.n	800cd7a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f383 8811 	msr	BASEPRI, r3
}
 800cd84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3738      	adds	r7, #56	@ 0x38
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10b      	bne.n	800cdb6 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60bb      	str	r3, [r7, #8]
}
 800cdb0:	bf00      	nop
 800cdb2:	bf00      	nop
 800cdb4:	e7fd      	b.n	800cdb2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800cdb6:	f003 fa4f 	bl	8010258 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbe:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800cdc0:	f003 fa7c 	bl	80102bc <vPortExitCritical>

	return uxReturn;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b087      	sub	sp, #28
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10b      	bne.n	800cdf8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	e7fd      	b.n	800cdf4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdfc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800cdfe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ce00:	4618      	mov	r0, r3
 800ce02:	371c      	adds	r7, #28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10b      	bne.n	800ce36 <vQueueDelete+0x2a>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	60bb      	str	r3, [r7, #8]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 f95e 	bl	800d0f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d102      	bne.n	800ce4c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f002 ffb8 	bl	800fdbc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d006      	beq.n	800ce72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	e001      	b.n	800ce76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce76:	68fb      	ldr	r3, [r7, #12]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10d      	bne.n	800cebe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d14d      	bne.n	800cf46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f001 fb32 	bl	800e518 <xTaskPriorityDisinherit>
 800ceb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	609a      	str	r2, [r3, #8]
 800cebc:	e043      	b.n	800cf46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d119      	bne.n	800cef8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6858      	ldr	r0, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cecc:	461a      	mov	r2, r3
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	f015 ff59 	bl	8022d86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cedc:	441a      	add	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d32b      	bcc.n	800cf46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	605a      	str	r2, [r3, #4]
 800cef6:	e026      	b.n	800cf46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	68d8      	ldr	r0, [r3, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf00:	461a      	mov	r2, r3
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	f015 ff3f 	bl	8022d86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf10:	425b      	negs	r3, r3
 800cf12:	441a      	add	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	68da      	ldr	r2, [r3, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d207      	bcs.n	800cf34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2c:	425b      	negs	r3, r3
 800cf2e:	441a      	add	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d105      	bne.n	800cf46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cf4e:	697b      	ldr	r3, [r7, #20]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3718      	adds	r7, #24
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d018      	beq.n	800cf9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68da      	ldr	r2, [r3, #12]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf72:	441a      	add	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68da      	ldr	r2, [r3, #12]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d303      	bcc.n	800cf8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68d9      	ldr	r1, [r3, #12]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf94:	461a      	mov	r2, r3
 800cf96:	6838      	ldr	r0, [r7, #0]
 800cf98:	f015 fef5 	bl	8022d86 <memcpy>
	}
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfac:	f003 f954 	bl	8010258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfb8:	e011      	b.n	800cfde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d012      	beq.n	800cfe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3324      	adds	r3, #36	@ 0x24
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 ff18 	bl	800ddfc <xTaskRemoveFromEventList>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfd2:	f001 f855 	bl	800e080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dce9      	bgt.n	800cfba <prvUnlockQueue+0x16>
 800cfe6:	e000      	b.n	800cfea <prvUnlockQueue+0x46>
					break;
 800cfe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	22ff      	movs	r2, #255	@ 0xff
 800cfee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cff2:	f003 f963 	bl	80102bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cff6:	f003 f92f 	bl	8010258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d000:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d002:	e011      	b.n	800d028 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d012      	beq.n	800d032 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3310      	adds	r3, #16
 800d010:	4618      	mov	r0, r3
 800d012:	f000 fef3 	bl	800ddfc <xTaskRemoveFromEventList>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d01c:	f001 f830 	bl	800e080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	3b01      	subs	r3, #1
 800d024:	b2db      	uxtb	r3, r3
 800d026:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dce9      	bgt.n	800d004 <prvUnlockQueue+0x60>
 800d030:	e000      	b.n	800d034 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d032:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	22ff      	movs	r2, #255	@ 0xff
 800d038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d03c:	f003 f93e 	bl	80102bc <vPortExitCritical>
}
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d050:	f003 f902 	bl	8010258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d102      	bne.n	800d062 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d05c:	2301      	movs	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e001      	b.n	800d066 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d066:	f003 f929 	bl	80102bc <vPortExitCritical>

	return xReturn;
 800d06a:	68fb      	ldr	r3, [r7, #12]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d07c:	f003 f8ec 	bl	8010258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d088:	429a      	cmp	r2, r3
 800d08a:	d102      	bne.n	800d092 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d08c:	2301      	movs	r3, #1
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e001      	b.n	800d096 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d096:	f003 f911 	bl	80102bc <vPortExitCritical>

	return xReturn;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e014      	b.n	800d0de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f4 <vQueueAddToRegistry+0x50>)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10b      	bne.n	800d0d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0c0:	490c      	ldr	r1, [pc, #48]	@ (800d0f4 <vQueueAddToRegistry+0x50>)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d0f4 <vQueueAddToRegistry+0x50>)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0d6:	e006      	b.n	800d0e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b07      	cmp	r3, #7
 800d0e2:	d9e7      	bls.n	800d0b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	200009a8 	.word	0x200009a8

0800d0f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	e016      	b.n	800d134 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d106:	4a10      	ldr	r2, [pc, #64]	@ (800d148 <vQueueUnregisterQueue+0x50>)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	4413      	add	r3, r2
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	429a      	cmp	r2, r3
 800d114:	d10b      	bne.n	800d12e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d116:	4a0c      	ldr	r2, [pc, #48]	@ (800d148 <vQueueUnregisterQueue+0x50>)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2100      	movs	r1, #0
 800d11c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d120:	4a09      	ldr	r2, [pc, #36]	@ (800d148 <vQueueUnregisterQueue+0x50>)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	4413      	add	r3, r2
 800d128:	2200      	movs	r2, #0
 800d12a:	605a      	str	r2, [r3, #4]
				break;
 800d12c:	e006      	b.n	800d13c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3301      	adds	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b07      	cmp	r3, #7
 800d138:	d9e5      	bls.n	800d106 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d13a:	bf00      	nop
 800d13c:	bf00      	nop
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	200009a8 	.word	0x200009a8

0800d14c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d15c:	f003 f87c 	bl	8010258 <vPortEnterCritical>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d166:	b25b      	sxtb	r3, r3
 800d168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16c:	d103      	bne.n	800d176 <vQueueWaitForMessageRestricted+0x2a>
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d17c:	b25b      	sxtb	r3, r3
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d103      	bne.n	800d18c <vQueueWaitForMessageRestricted+0x40>
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d18c:	f003 f896 	bl	80102bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d194:	2b00      	cmp	r3, #0
 800d196:	d106      	bne.n	800d1a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	3324      	adds	r3, #36	@ 0x24
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fdff 	bl	800dda4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1a6:	6978      	ldr	r0, [r7, #20]
 800d1a8:	f7ff fefc 	bl	800cfa4 <prvUnlockQueue>
	}
 800d1ac:	bf00      	nop
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08e      	sub	sp, #56	@ 0x38
 800d1b8:	af04      	add	r7, sp, #16
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10b      	bne.n	800d1e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	623b      	str	r3, [r7, #32]
}
 800d1da:	bf00      	nop
 800d1dc:	bf00      	nop
 800d1de:	e7fd      	b.n	800d1dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800d1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ea:	f383 8811 	msr	BASEPRI, r3
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	f3bf 8f4f 	dsb	sy
 800d1f6:	61fb      	str	r3, [r7, #28]
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	e7fd      	b.n	800d1fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1fe:	235c      	movs	r3, #92	@ 0x5c
 800d200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b5c      	cmp	r3, #92	@ 0x5c
 800d206:	d00b      	beq.n	800d220 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61bb      	str	r3, [r7, #24]
}
 800d21a:	bf00      	nop
 800d21c:	bf00      	nop
 800d21e:	e7fd      	b.n	800d21c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01e      	beq.n	800d266 <xTaskCreateStatic+0xb2>
 800d228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d01b      	beq.n	800d266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d240:	2300      	movs	r3, #0
 800d242:	9303      	str	r3, [sp, #12]
 800d244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d246:	9302      	str	r3, [sp, #8]
 800d248:	f107 0314 	add.w	r3, r7, #20
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	68b9      	ldr	r1, [r7, #8]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f850 	bl	800d2fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d260:	f000 f8de 	bl	800d420 <prvAddNewTaskToReadyList>
 800d264:	e001      	b.n	800d26a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d26a:	697b      	ldr	r3, [r7, #20]
	}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3728      	adds	r7, #40	@ 0x28
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08c      	sub	sp, #48	@ 0x30
 800d278:	af04      	add	r7, sp, #16
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	603b      	str	r3, [r7, #0]
 800d280:	4613      	mov	r3, r2
 800d282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d284:	88fb      	ldrh	r3, [r7, #6]
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4618      	mov	r0, r3
 800d28a:	f002 fcc9 	bl	800fc20 <pvPortMalloc>
 800d28e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00e      	beq.n	800d2b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d296:	205c      	movs	r0, #92	@ 0x5c
 800d298:	f002 fcc2 	bl	800fc20 <pvPortMalloc>
 800d29c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d2aa:	e005      	b.n	800d2b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2ac:	6978      	ldr	r0, [r7, #20]
 800d2ae:	f002 fd85 	bl	800fdbc <vPortFree>
 800d2b2:	e001      	b.n	800d2b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d017      	beq.n	800d2ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2c6:	88fa      	ldrh	r2, [r7, #6]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	9303      	str	r3, [sp, #12]
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	9302      	str	r3, [sp, #8]
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 f80e 	bl	800d2fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2e2:	69f8      	ldr	r0, [r7, #28]
 800d2e4:	f000 f89c 	bl	800d420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	61bb      	str	r3, [r7, #24]
 800d2ec:	e002      	b.n	800d2f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2f4:	69bb      	ldr	r3, [r7, #24]
	}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3720      	adds	r7, #32
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b088      	sub	sp, #32
 800d302:	af00      	add	r7, sp, #0
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	60b9      	str	r1, [r7, #8]
 800d308:	607a      	str	r2, [r7, #4]
 800d30a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	461a      	mov	r2, r3
 800d316:	21a5      	movs	r1, #165	@ 0xa5
 800d318:	f015 fc90 	bl	8022c3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d326:	440b      	add	r3, r1
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	f023 0307 	bic.w	r3, r3, #7
 800d334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	f003 0307 	and.w	r3, r3, #7
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	617b      	str	r3, [r7, #20]
}
 800d352:	bf00      	nop
 800d354:	bf00      	nop
 800d356:	e7fd      	b.n	800d354 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01f      	beq.n	800d39e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d35e:	2300      	movs	r3, #0
 800d360:	61fb      	str	r3, [r7, #28]
 800d362:	e012      	b.n	800d38a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	4413      	add	r3, r2
 800d36a:	7819      	ldrb	r1, [r3, #0]
 800d36c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	4413      	add	r3, r2
 800d372:	3334      	adds	r3, #52	@ 0x34
 800d374:	460a      	mov	r2, r1
 800d376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	4413      	add	r3, r2
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d006      	beq.n	800d392 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	3301      	adds	r3, #1
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	2b0f      	cmp	r3, #15
 800d38e:	d9e9      	bls.n	800d364 <prvInitialiseNewTask+0x66>
 800d390:	e000      	b.n	800d394 <prvInitialiseNewTask+0x96>
			{
				break;
 800d392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d396:	2200      	movs	r2, #0
 800d398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d39c:	e003      	b.n	800d3a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a8:	2b37      	cmp	r3, #55	@ 0x37
 800d3aa:	d901      	bls.n	800d3b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3ac:	2337      	movs	r3, #55	@ 0x37
 800d3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3be:	2200      	movs	r2, #0
 800d3c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe fd3e 	bl	800be48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ce:	3318      	adds	r3, #24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fd39 	bl	800be48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	68f9      	ldr	r1, [r7, #12]
 800d3fe:	69b8      	ldr	r0, [r7, #24]
 800d400:	f002 fdfc 	bl	800fffc <pxPortInitialiseStack>
 800d404:	4602      	mov	r2, r0
 800d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d416:	bf00      	nop
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d428:	f002 ff16 	bl	8010258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d42c:	4b2d      	ldr	r3, [pc, #180]	@ (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3301      	adds	r3, #1
 800d432:	4a2c      	ldr	r2, [pc, #176]	@ (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d436:	4b2c      	ldr	r3, [pc, #176]	@ (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d43e:	4a2a      	ldr	r2, [pc, #168]	@ (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d444:	4b27      	ldr	r3, [pc, #156]	@ (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d110      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d44c:	f000 fe3c 	bl	800e0c8 <prvInitialiseTaskLists>
 800d450:	e00d      	b.n	800d46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d452:	4b26      	ldr	r3, [pc, #152]	@ (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d45a:	4b23      	ldr	r3, [pc, #140]	@ (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d464:	429a      	cmp	r2, r3
 800d466:	d802      	bhi.n	800d46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d468:	4a1f      	ldr	r2, [pc, #124]	@ (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d46e:	4b20      	ldr	r3, [pc, #128]	@ (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3301      	adds	r3, #1
 800d474:	4a1e      	ldr	r2, [pc, #120]	@ (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d478:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d484:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d903      	bls.n	800d494 <prvAddNewTaskToReadyList+0x74>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d490:	4a18      	ldr	r2, [pc, #96]	@ (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a15      	ldr	r2, [pc, #84]	@ (800d4f8 <prvAddNewTaskToReadyList+0xd8>)
 800d4a2:	441a      	add	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7fe fcd9 	bl	800be62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4b0:	f002 ff04 	bl	80102bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00e      	beq.n	800d4da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d207      	bcs.n	800d4da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d4fc <prvAddNewTaskToReadyList+0xdc>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4da:	bf00      	nop
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20000ebc 	.word	0x20000ebc
 800d4e8:	200009e8 	.word	0x200009e8
 800d4ec:	20000ec8 	.word	0x20000ec8
 800d4f0:	20000ed8 	.word	0x20000ed8
 800d4f4:	20000ec4 	.word	0x20000ec4
 800d4f8:	200009ec 	.word	0x200009ec
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d508:	f002 fea6 	bl	8010258 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <vTaskDelete+0x18>
 800d512:	4b2d      	ldr	r3, [pc, #180]	@ (800d5c8 <vTaskDelete+0xc8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	e000      	b.n	800d51a <vTaskDelete+0x1a>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	3304      	adds	r3, #4
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fcfb 	bl	800bf1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3318      	adds	r3, #24
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fcf2 	bl	800bf1c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d538:	4b24      	ldr	r3, [pc, #144]	@ (800d5cc <vTaskDelete+0xcc>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3301      	adds	r3, #1
 800d53e:	4a23      	ldr	r2, [pc, #140]	@ (800d5cc <vTaskDelete+0xcc>)
 800d540:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d542:	4b21      	ldr	r3, [pc, #132]	@ (800d5c8 <vTaskDelete+0xc8>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d10b      	bne.n	800d564 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3304      	adds	r3, #4
 800d550:	4619      	mov	r1, r3
 800d552:	481f      	ldr	r0, [pc, #124]	@ (800d5d0 <vTaskDelete+0xd0>)
 800d554:	f7fe fc85 	bl	800be62 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d558:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d4 <vTaskDelete+0xd4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3301      	adds	r3, #1
 800d55e:	4a1d      	ldr	r2, [pc, #116]	@ (800d5d4 <vTaskDelete+0xd4>)
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	e009      	b.n	800d578 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d564:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <vTaskDelete+0xd8>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3b01      	subs	r3, #1
 800d56a:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d8 <vTaskDelete+0xd8>)
 800d56c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 feec 	bl	800e34c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d574:	f000 ff1a 	bl	800e3ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d578:	f002 fea0 	bl	80102bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d57c:	4b17      	ldr	r3, [pc, #92]	@ (800d5dc <vTaskDelete+0xdc>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d01c      	beq.n	800d5be <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800d584:	4b10      	ldr	r3, [pc, #64]	@ (800d5c8 <vTaskDelete+0xc8>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d117      	bne.n	800d5be <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d58e:	4b14      	ldr	r3, [pc, #80]	@ (800d5e0 <vTaskDelete+0xe0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00b      	beq.n	800d5ae <vTaskDelete+0xae>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	60bb      	str	r3, [r7, #8]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d5e4 <vTaskDelete+0xe4>)
 800d5b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	200009e8 	.word	0x200009e8
 800d5cc:	20000ed8 	.word	0x20000ed8
 800d5d0:	20000e90 	.word	0x20000e90
 800d5d4:	20000ea4 	.word	0x20000ea4
 800d5d8:	20000ebc 	.word	0x20000ebc
 800d5dc:	20000ec8 	.word	0x20000ec8
 800d5e0:	20000ee4 	.word	0x20000ee4
 800d5e4:	e000ed04 	.word	0xe000ed04

0800d5e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d018      	beq.n	800d62c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5fa:	4b14      	ldr	r3, [pc, #80]	@ (800d64c <vTaskDelay+0x64>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <vTaskDelay+0x32>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60bb      	str	r3, [r7, #8]
}
 800d614:	bf00      	nop
 800d616:	bf00      	nop
 800d618:	e7fd      	b.n	800d616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d61a:	f000 f8eb 	bl	800d7f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d61e:	2100      	movs	r1, #0
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f001 f955 	bl	800e8d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d626:	f000 f8f3 	bl	800d810 <xTaskResumeAll>
 800d62a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d107      	bne.n	800d642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d632:	4b07      	ldr	r3, [pc, #28]	@ (800d650 <vTaskDelay+0x68>)
 800d634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d642:	bf00      	nop
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	20000ee4 	.word	0x20000ee4
 800d650:	e000ed04 	.word	0xe000ed04

0800d654 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10b      	bne.n	800d67e <eTaskGetState+0x2a>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	60bb      	str	r3, [r7, #8]
}
 800d678:	bf00      	nop
 800d67a:	bf00      	nop
 800d67c:	e7fd      	b.n	800d67a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d67e:	4b24      	ldr	r3, [pc, #144]	@ (800d710 <eTaskGetState+0xbc>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	429a      	cmp	r2, r3
 800d686:	d102      	bne.n	800d68e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d688:	2300      	movs	r3, #0
 800d68a:	77fb      	strb	r3, [r7, #31]
 800d68c:	e03a      	b.n	800d704 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800d68e:	f002 fde3 	bl	8010258 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d698:	4b1e      	ldr	r3, [pc, #120]	@ (800d714 <eTaskGetState+0xc0>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d69e:	4b1e      	ldr	r3, [pc, #120]	@ (800d718 <eTaskGetState+0xc4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d6a4:	f002 fe0a 	bl	80102bc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d003      	beq.n	800d6b8 <eTaskGetState+0x64>
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d102      	bne.n	800d6be <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	77fb      	strb	r3, [r7, #31]
 800d6bc:	e022      	b.n	800d704 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	4a16      	ldr	r2, [pc, #88]	@ (800d71c <eTaskGetState+0xc8>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d112      	bne.n	800d6ec <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d102      	bne.n	800d6e0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800d6da:	2302      	movs	r3, #2
 800d6dc:	77fb      	strb	r3, [r7, #31]
 800d6de:	e011      	b.n	800d704 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	77fb      	strb	r3, [r7, #31]
 800d6e4:	e00e      	b.n	800d704 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	77fb      	strb	r3, [r7, #31]
 800d6ea:	e00b      	b.n	800d704 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d720 <eTaskGetState+0xcc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d002      	beq.n	800d6fa <eTaskGetState+0xa6>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	77fb      	strb	r3, [r7, #31]
 800d6fe:	e001      	b.n	800d704 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d700:	2301      	movs	r3, #1
 800d702:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d704:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	200009e8 	.word	0x200009e8
 800d714:	20000e74 	.word	0x20000e74
 800d718:	20000e78 	.word	0x20000e78
 800d71c:	20000ea8 	.word	0x20000ea8
 800d720:	20000e90 	.word	0x20000e90

0800d724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08a      	sub	sp, #40	@ 0x28
 800d728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d732:	463a      	mov	r2, r7
 800d734:	1d39      	adds	r1, r7, #4
 800d736:	f107 0308 	add.w	r3, r7, #8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f002 fa3c 	bl	800fbb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	9202      	str	r2, [sp, #8]
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	2300      	movs	r3, #0
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	2300      	movs	r3, #0
 800d750:	460a      	mov	r2, r1
 800d752:	4922      	ldr	r1, [pc, #136]	@ (800d7dc <vTaskStartScheduler+0xb8>)
 800d754:	4822      	ldr	r0, [pc, #136]	@ (800d7e0 <vTaskStartScheduler+0xbc>)
 800d756:	f7ff fd2d 	bl	800d1b4 <xTaskCreateStatic>
 800d75a:	4603      	mov	r3, r0
 800d75c:	4a21      	ldr	r2, [pc, #132]	@ (800d7e4 <vTaskStartScheduler+0xc0>)
 800d75e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d760:	4b20      	ldr	r3, [pc, #128]	@ (800d7e4 <vTaskStartScheduler+0xc0>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d768:	2301      	movs	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	e001      	b.n	800d772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d102      	bne.n	800d77e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d778:	f001 f8fe 	bl	800e978 <xTimerCreateTimerTask>
 800d77c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d116      	bne.n	800d7b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	613b      	str	r3, [r7, #16]
}
 800d796:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d798:	4b13      	ldr	r3, [pc, #76]	@ (800d7e8 <vTaskStartScheduler+0xc4>)
 800d79a:	f04f 32ff 	mov.w	r2, #4294967295
 800d79e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7a0:	4b12      	ldr	r3, [pc, #72]	@ (800d7ec <vTaskStartScheduler+0xc8>)
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7a6:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <vTaskStartScheduler+0xcc>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7ac:	f002 fcb0 	bl	8010110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7b0:	e00f      	b.n	800d7d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b8:	d10b      	bne.n	800d7d2 <vTaskStartScheduler+0xae>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	60fb      	str	r3, [r7, #12]
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	e7fd      	b.n	800d7ce <vTaskStartScheduler+0xaa>
}
 800d7d2:	bf00      	nop
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	08023fa4 	.word	0x08023fa4
 800d7e0:	0800e099 	.word	0x0800e099
 800d7e4:	20000ee0 	.word	0x20000ee0
 800d7e8:	20000edc 	.word	0x20000edc
 800d7ec:	20000ec8 	.word	0x20000ec8
 800d7f0:	20000ec0 	.word	0x20000ec0

0800d7f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7f8:	4b04      	ldr	r3, [pc, #16]	@ (800d80c <vTaskSuspendAll+0x18>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	4a03      	ldr	r2, [pc, #12]	@ (800d80c <vTaskSuspendAll+0x18>)
 800d800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d802:	bf00      	nop
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20000ee4 	.word	0x20000ee4

0800d810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d81e:	4b42      	ldr	r3, [pc, #264]	@ (800d928 <xTaskResumeAll+0x118>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10b      	bne.n	800d83e <xTaskResumeAll+0x2e>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	603b      	str	r3, [r7, #0]
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	e7fd      	b.n	800d83a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d83e:	f002 fd0b 	bl	8010258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d842:	4b39      	ldr	r3, [pc, #228]	@ (800d928 <xTaskResumeAll+0x118>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3b01      	subs	r3, #1
 800d848:	4a37      	ldr	r2, [pc, #220]	@ (800d928 <xTaskResumeAll+0x118>)
 800d84a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d84c:	4b36      	ldr	r3, [pc, #216]	@ (800d928 <xTaskResumeAll+0x118>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d162      	bne.n	800d91a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d854:	4b35      	ldr	r3, [pc, #212]	@ (800d92c <xTaskResumeAll+0x11c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d05e      	beq.n	800d91a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d85c:	e02f      	b.n	800d8be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d85e:	4b34      	ldr	r3, [pc, #208]	@ (800d930 <xTaskResumeAll+0x120>)
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	3318      	adds	r3, #24
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fb56 	bl	800bf1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3304      	adds	r3, #4
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fb51 	bl	800bf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87e:	4b2d      	ldr	r3, [pc, #180]	@ (800d934 <xTaskResumeAll+0x124>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	429a      	cmp	r2, r3
 800d884:	d903      	bls.n	800d88e <xTaskResumeAll+0x7e>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88a:	4a2a      	ldr	r2, [pc, #168]	@ (800d934 <xTaskResumeAll+0x124>)
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d892:	4613      	mov	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4a27      	ldr	r2, [pc, #156]	@ (800d938 <xTaskResumeAll+0x128>)
 800d89c:	441a      	add	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	f7fe fadc 	bl	800be62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ae:	4b23      	ldr	r3, [pc, #140]	@ (800d93c <xTaskResumeAll+0x12c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d302      	bcc.n	800d8be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d8b8:	4b21      	ldr	r3, [pc, #132]	@ (800d940 <xTaskResumeAll+0x130>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8be:	4b1c      	ldr	r3, [pc, #112]	@ (800d930 <xTaskResumeAll+0x120>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1cb      	bne.n	800d85e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8cc:	f000 fd6e 	bl	800e3ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d944 <xTaskResumeAll+0x134>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d010      	beq.n	800d8fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8dc:	f000 f8e6 	bl	800daac <xTaskIncrementTick>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d8e6:	4b16      	ldr	r3, [pc, #88]	@ (800d940 <xTaskResumeAll+0x130>)
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f1      	bne.n	800d8dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d8f8:	4b12      	ldr	r3, [pc, #72]	@ (800d944 <xTaskResumeAll+0x134>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8fe:	4b10      	ldr	r3, [pc, #64]	@ (800d940 <xTaskResumeAll+0x130>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d009      	beq.n	800d91a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d906:	2301      	movs	r3, #1
 800d908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d90a:	4b0f      	ldr	r3, [pc, #60]	@ (800d948 <xTaskResumeAll+0x138>)
 800d90c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d91a:	f002 fccf 	bl	80102bc <vPortExitCritical>

	return xAlreadyYielded;
 800d91e:	68bb      	ldr	r3, [r7, #8]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20000ee4 	.word	0x20000ee4
 800d92c:	20000ebc 	.word	0x20000ebc
 800d930:	20000e7c 	.word	0x20000e7c
 800d934:	20000ec4 	.word	0x20000ec4
 800d938:	200009ec 	.word	0x200009ec
 800d93c:	200009e8 	.word	0x200009e8
 800d940:	20000ed0 	.word	0x20000ed0
 800d944:	20000ecc 	.word	0x20000ecc
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d952:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <xTaskGetTickCount+0x1c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d958:	687b      	ldr	r3, [r7, #4]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	20000ec0 	.word	0x20000ec0

0800d96c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d972:	f002 fd51 	bl	8010418 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d976:	2300      	movs	r3, #0
 800d978:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d97a:	4b04      	ldr	r3, [pc, #16]	@ (800d98c <xTaskGetTickCountFromISR+0x20>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d980:	683b      	ldr	r3, [r7, #0]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20000ec0 	.word	0x20000ec0

0800d990 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800d99c:	2300      	movs	r3, #0
 800d99e:	617b      	str	r3, [r7, #20]
 800d9a0:	2338      	movs	r3, #56	@ 0x38
 800d9a2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800d9a4:	f7ff ff26 	bl	800d7f4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d9a8:	4b3a      	ldr	r3, [pc, #232]	@ (800da94 <uxTaskGetSystemState+0x104>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d368      	bcc.n	800da84 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	4413      	add	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	1898      	adds	r0, r3, r2
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4a31      	ldr	r2, [pc, #196]	@ (800da98 <uxTaskGetSystemState+0x108>)
 800d9d4:	4413      	add	r3, r2
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4619      	mov	r1, r3
 800d9da:	f000 fc49 	bl	800e270 <prvListTasksWithinSingleList>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e2      	bne.n	800d9b2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	4a27      	ldr	r2, [pc, #156]	@ (800da9c <uxTaskGetSystemState+0x10c>)
 800d9fe:	6811      	ldr	r1, [r2, #0]
 800da00:	2202      	movs	r2, #2
 800da02:	4618      	mov	r0, r3
 800da04:	f000 fc34 	bl	800e270 <prvListTasksWithinSingleList>
 800da08:	4602      	mov	r2, r0
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	4413      	add	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	4613      	mov	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	4413      	add	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	461a      	mov	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4413      	add	r3, r2
 800da20:	4a1f      	ldr	r2, [pc, #124]	@ (800daa0 <uxTaskGetSystemState+0x110>)
 800da22:	6811      	ldr	r1, [r2, #0]
 800da24:	2202      	movs	r2, #2
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fc22 	bl	800e270 <prvListTasksWithinSingleList>
 800da2c:	4602      	mov	r2, r0
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	4413      	add	r3, r2
 800da32:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	4613      	mov	r3, r2
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	4413      	add	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	461a      	mov	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4413      	add	r3, r2
 800da44:	2204      	movs	r2, #4
 800da46:	4917      	ldr	r1, [pc, #92]	@ (800daa4 <uxTaskGetSystemState+0x114>)
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 fc11 	bl	800e270 <prvListTasksWithinSingleList>
 800da4e:	4602      	mov	r2, r0
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	4413      	add	r3, r2
 800da54:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	4613      	mov	r3, r2
 800da5a:	00db      	lsls	r3, r3, #3
 800da5c:	4413      	add	r3, r2
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	461a      	mov	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4413      	add	r3, r2
 800da66:	2203      	movs	r2, #3
 800da68:	490f      	ldr	r1, [pc, #60]	@ (800daa8 <uxTaskGetSystemState+0x118>)
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 fc00 	bl	800e270 <prvListTasksWithinSingleList>
 800da70:	4602      	mov	r2, r0
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	4413      	add	r3, r2
 800da76:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d002      	beq.n	800da84 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800da84:	f7ff fec4 	bl	800d810 <xTaskResumeAll>

		return uxTask;
 800da88:	697b      	ldr	r3, [r7, #20]
	}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3718      	adds	r7, #24
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	20000ebc 	.word	0x20000ebc
 800da98:	200009ec 	.word	0x200009ec
 800da9c:	20000e74 	.word	0x20000e74
 800daa0:	20000e78 	.word	0x20000e78
 800daa4:	20000e90 	.word	0x20000e90
 800daa8:	20000ea8 	.word	0x20000ea8

0800daac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab6:	4b4f      	ldr	r3, [pc, #316]	@ (800dbf4 <xTaskIncrementTick+0x148>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f040 8090 	bne.w	800dbe0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dac0:	4b4d      	ldr	r3, [pc, #308]	@ (800dbf8 <xTaskIncrementTick+0x14c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3301      	adds	r3, #1
 800dac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dac8:	4a4b      	ldr	r2, [pc, #300]	@ (800dbf8 <xTaskIncrementTick+0x14c>)
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d121      	bne.n	800db18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dad4:	4b49      	ldr	r3, [pc, #292]	@ (800dbfc <xTaskIncrementTick+0x150>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00b      	beq.n	800daf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	603b      	str	r3, [r7, #0]
}
 800daf0:	bf00      	nop
 800daf2:	bf00      	nop
 800daf4:	e7fd      	b.n	800daf2 <xTaskIncrementTick+0x46>
 800daf6:	4b41      	ldr	r3, [pc, #260]	@ (800dbfc <xTaskIncrementTick+0x150>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60fb      	str	r3, [r7, #12]
 800dafc:	4b40      	ldr	r3, [pc, #256]	@ (800dc00 <xTaskIncrementTick+0x154>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a3e      	ldr	r2, [pc, #248]	@ (800dbfc <xTaskIncrementTick+0x150>)
 800db02:	6013      	str	r3, [r2, #0]
 800db04:	4a3e      	ldr	r2, [pc, #248]	@ (800dc00 <xTaskIncrementTick+0x154>)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	4b3e      	ldr	r3, [pc, #248]	@ (800dc04 <xTaskIncrementTick+0x158>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3301      	adds	r3, #1
 800db10:	4a3c      	ldr	r2, [pc, #240]	@ (800dc04 <xTaskIncrementTick+0x158>)
 800db12:	6013      	str	r3, [r2, #0]
 800db14:	f000 fc4a 	bl	800e3ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db18:	4b3b      	ldr	r3, [pc, #236]	@ (800dc08 <xTaskIncrementTick+0x15c>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d349      	bcc.n	800dbb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db22:	4b36      	ldr	r3, [pc, #216]	@ (800dbfc <xTaskIncrementTick+0x150>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db2c:	4b36      	ldr	r3, [pc, #216]	@ (800dc08 <xTaskIncrementTick+0x15c>)
 800db2e:	f04f 32ff 	mov.w	r2, #4294967295
 800db32:	601a      	str	r2, [r3, #0]
					break;
 800db34:	e03f      	b.n	800dbb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db36:	4b31      	ldr	r3, [pc, #196]	@ (800dbfc <xTaskIncrementTick+0x150>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db46:	693a      	ldr	r2, [r7, #16]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d203      	bcs.n	800db56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db4e:	4a2e      	ldr	r2, [pc, #184]	@ (800dc08 <xTaskIncrementTick+0x15c>)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db54:	e02f      	b.n	800dbb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	3304      	adds	r3, #4
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe f9de 	bl	800bf1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db64:	2b00      	cmp	r3, #0
 800db66:	d004      	beq.n	800db72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3318      	adds	r3, #24
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe f9d5 	bl	800bf1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db76:	4b25      	ldr	r3, [pc, #148]	@ (800dc0c <xTaskIncrementTick+0x160>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d903      	bls.n	800db86 <xTaskIncrementTick+0xda>
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db82:	4a22      	ldr	r2, [pc, #136]	@ (800dc0c <xTaskIncrementTick+0x160>)
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4a1f      	ldr	r2, [pc, #124]	@ (800dc10 <xTaskIncrementTick+0x164>)
 800db94:	441a      	add	r2, r3
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	4610      	mov	r0, r2
 800db9e:	f7fe f960 	bl	800be62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba6:	4b1b      	ldr	r3, [pc, #108]	@ (800dc14 <xTaskIncrementTick+0x168>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d3b8      	bcc.n	800db22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbb4:	e7b5      	b.n	800db22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbb6:	4b17      	ldr	r3, [pc, #92]	@ (800dc14 <xTaskIncrementTick+0x168>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbbc:	4914      	ldr	r1, [pc, #80]	@ (800dc10 <xTaskIncrementTick+0x164>)
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	440b      	add	r3, r1
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d901      	bls.n	800dbd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dbd2:	4b11      	ldr	r3, [pc, #68]	@ (800dc18 <xTaskIncrementTick+0x16c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d007      	beq.n	800dbea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e004      	b.n	800dbea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dbe0:	4b0e      	ldr	r3, [pc, #56]	@ (800dc1c <xTaskIncrementTick+0x170>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a0d      	ldr	r2, [pc, #52]	@ (800dc1c <xTaskIncrementTick+0x170>)
 800dbe8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dbea:	697b      	ldr	r3, [r7, #20]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	20000ee4 	.word	0x20000ee4
 800dbf8:	20000ec0 	.word	0x20000ec0
 800dbfc:	20000e74 	.word	0x20000e74
 800dc00:	20000e78 	.word	0x20000e78
 800dc04:	20000ed4 	.word	0x20000ed4
 800dc08:	20000edc 	.word	0x20000edc
 800dc0c:	20000ec4 	.word	0x20000ec4
 800dc10:	200009ec 	.word	0x200009ec
 800dc14:	200009e8 	.word	0x200009e8
 800dc18:	20000ed0 	.word	0x20000ed0
 800dc1c:	20000ecc 	.word	0x20000ecc

0800dc20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc26:	4b28      	ldr	r3, [pc, #160]	@ (800dcc8 <vTaskSwitchContext+0xa8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d003      	beq.n	800dc36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc2e:	4b27      	ldr	r3, [pc, #156]	@ (800dccc <vTaskSwitchContext+0xac>)
 800dc30:	2201      	movs	r2, #1
 800dc32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc34:	e042      	b.n	800dcbc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dc36:	4b25      	ldr	r3, [pc, #148]	@ (800dccc <vTaskSwitchContext+0xac>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3c:	4b24      	ldr	r3, [pc, #144]	@ (800dcd0 <vTaskSwitchContext+0xb0>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e011      	b.n	800dc68 <vTaskSwitchContext+0x48>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10b      	bne.n	800dc62 <vTaskSwitchContext+0x42>
	__asm volatile
 800dc4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	607b      	str	r3, [r7, #4]
}
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	e7fd      	b.n	800dc5e <vTaskSwitchContext+0x3e>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	491a      	ldr	r1, [pc, #104]	@ (800dcd4 <vTaskSwitchContext+0xb4>)
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	440b      	add	r3, r1
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d0e3      	beq.n	800dc44 <vTaskSwitchContext+0x24>
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4a13      	ldr	r2, [pc, #76]	@ (800dcd4 <vTaskSwitchContext+0xb4>)
 800dc88:	4413      	add	r3, r2
 800dc8a:	60bb      	str	r3, [r7, #8]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	605a      	str	r2, [r3, #4]
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	685a      	ldr	r2, [r3, #4]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d104      	bne.n	800dcac <vTaskSwitchContext+0x8c>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	685a      	ldr	r2, [r3, #4]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	605a      	str	r2, [r3, #4]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	4a09      	ldr	r2, [pc, #36]	@ (800dcd8 <vTaskSwitchContext+0xb8>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	4a06      	ldr	r2, [pc, #24]	@ (800dcd0 <vTaskSwitchContext+0xb0>)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6013      	str	r3, [r2, #0]
}
 800dcbc:	bf00      	nop
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	20000ee4 	.word	0x20000ee4
 800dccc:	20000ed0 	.word	0x20000ed0
 800dcd0:	20000ec4 	.word	0x20000ec4
 800dcd4:	200009ec 	.word	0x200009ec
 800dcd8:	200009e8 	.word	0x200009e8

0800dcdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10b      	bne.n	800dd04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	60fb      	str	r3, [r7, #12]
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	e7fd      	b.n	800dd00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd04:	4b07      	ldr	r3, [pc, #28]	@ (800dd24 <vTaskPlaceOnEventList+0x48>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3318      	adds	r3, #24
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7fe f8cc 	bl	800beaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd12:	2101      	movs	r1, #1
 800dd14:	6838      	ldr	r0, [r7, #0]
 800dd16:	f000 fddb 	bl	800e8d0 <prvAddCurrentTaskToDelayedList>
}
 800dd1a:	bf00      	nop
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200009e8 	.word	0x200009e8

0800dd28 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	617b      	str	r3, [r7, #20]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800dd52:	4b12      	ldr	r3, [pc, #72]	@ (800dd9c <vTaskPlaceOnUnorderedEventList+0x74>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10b      	bne.n	800dd72 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	613b      	str	r3, [r7, #16]
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	e7fd      	b.n	800dd6e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800dd72:	4b0b      	ldr	r3, [pc, #44]	@ (800dda0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dd7c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd7e:	4b08      	ldr	r3, [pc, #32]	@ (800dda0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3318      	adds	r3, #24
 800dd84:	4619      	mov	r1, r3
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7fe f86b 	bl	800be62 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fd9e 	bl	800e8d0 <prvAddCurrentTaskToDelayedList>
}
 800dd94:	bf00      	nop
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20000ee4 	.word	0x20000ee4
 800dda0:	200009e8 	.word	0x200009e8

0800dda4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10b      	bne.n	800ddce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ddb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	617b      	str	r3, [r7, #20]
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	e7fd      	b.n	800ddca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddce:	4b0a      	ldr	r3, [pc, #40]	@ (800ddf8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3318      	adds	r3, #24
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7fe f843 	bl	800be62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d002      	beq.n	800dde8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800dde2:	f04f 33ff 	mov.w	r3, #4294967295
 800dde6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	68b8      	ldr	r0, [r7, #8]
 800ddec:	f000 fd70 	bl	800e8d0 <prvAddCurrentTaskToDelayedList>
	}
 800ddf0:	bf00      	nop
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	200009e8 	.word	0x200009e8

0800ddfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10b      	bne.n	800de2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60fb      	str	r3, [r7, #12]
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop
 800de28:	e7fd      	b.n	800de26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3318      	adds	r3, #24
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe f874 	bl	800bf1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de34:	4b1d      	ldr	r3, [pc, #116]	@ (800deac <xTaskRemoveFromEventList+0xb0>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d11d      	bne.n	800de78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3304      	adds	r3, #4
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe f86b 	bl	800bf1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4a:	4b19      	ldr	r3, [pc, #100]	@ (800deb0 <xTaskRemoveFromEventList+0xb4>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d903      	bls.n	800de5a <xTaskRemoveFromEventList+0x5e>
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de56:	4a16      	ldr	r2, [pc, #88]	@ (800deb0 <xTaskRemoveFromEventList+0xb4>)
 800de58:	6013      	str	r3, [r2, #0]
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de5e:	4613      	mov	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4a13      	ldr	r2, [pc, #76]	@ (800deb4 <xTaskRemoveFromEventList+0xb8>)
 800de68:	441a      	add	r2, r3
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	3304      	adds	r3, #4
 800de6e:	4619      	mov	r1, r3
 800de70:	4610      	mov	r0, r2
 800de72:	f7fd fff6 	bl	800be62 <vListInsertEnd>
 800de76:	e005      	b.n	800de84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	3318      	adds	r3, #24
 800de7c:	4619      	mov	r1, r3
 800de7e:	480e      	ldr	r0, [pc, #56]	@ (800deb8 <xTaskRemoveFromEventList+0xbc>)
 800de80:	f7fd ffef 	bl	800be62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de88:	4b0c      	ldr	r3, [pc, #48]	@ (800debc <xTaskRemoveFromEventList+0xc0>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8e:	429a      	cmp	r2, r3
 800de90:	d905      	bls.n	800de9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de92:	2301      	movs	r3, #1
 800de94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de96:	4b0a      	ldr	r3, [pc, #40]	@ (800dec0 <xTaskRemoveFromEventList+0xc4>)
 800de98:	2201      	movs	r2, #1
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	e001      	b.n	800dea2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dea2:	697b      	ldr	r3, [r7, #20]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20000ee4 	.word	0x20000ee4
 800deb0:	20000ec4 	.word	0x20000ec4
 800deb4:	200009ec 	.word	0x200009ec
 800deb8:	20000e7c 	.word	0x20000e7c
 800debc:	200009e8 	.word	0x200009e8
 800dec0:	20000ed0 	.word	0x20000ed0

0800dec4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800dece:	4b2a      	ldr	r3, [pc, #168]	@ (800df78 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10b      	bne.n	800deee <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	613b      	str	r3, [r7, #16]
}
 800dee8:	bf00      	nop
 800deea:	bf00      	nop
 800deec:	e7fd      	b.n	800deea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	60fb      	str	r3, [r7, #12]
}
 800df16:	bf00      	nop
 800df18:	bf00      	nop
 800df1a:	e7fd      	b.n	800df18 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7fd fffd 	bl	800bf1c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	3304      	adds	r3, #4
 800df26:	4618      	mov	r0, r3
 800df28:	f7fd fff8 	bl	800bf1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df30:	4b12      	ldr	r3, [pc, #72]	@ (800df7c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	d903      	bls.n	800df40 <vTaskRemoveFromUnorderedEventList+0x7c>
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3c:	4a0f      	ldr	r2, [pc, #60]	@ (800df7c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df44:	4613      	mov	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4a0c      	ldr	r2, [pc, #48]	@ (800df80 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800df4e:	441a      	add	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	3304      	adds	r3, #4
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f7fd ff83 	bl	800be62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df60:	4b08      	ldr	r3, [pc, #32]	@ (800df84 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df66:	429a      	cmp	r2, r3
 800df68:	d902      	bls.n	800df70 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800df6a:	4b07      	ldr	r3, [pc, #28]	@ (800df88 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800df6c:	2201      	movs	r2, #1
 800df6e:	601a      	str	r2, [r3, #0]
	}
}
 800df70:	bf00      	nop
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	20000ee4 	.word	0x20000ee4
 800df7c:	20000ec4 	.word	0x20000ec4
 800df80:	200009ec 	.word	0x200009ec
 800df84:	200009e8 	.word	0x200009e8
 800df88:	20000ed0 	.word	0x20000ed0

0800df8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df94:	4b06      	ldr	r3, [pc, #24]	@ (800dfb0 <vTaskInternalSetTimeOutState+0x24>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df9c:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <vTaskInternalSetTimeOutState+0x28>)
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	605a      	str	r2, [r3, #4]
}
 800dfa4:	bf00      	nop
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	20000ed4 	.word	0x20000ed4
 800dfb4:	20000ec0 	.word	0x20000ec0

0800dfb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10b      	bne.n	800dfe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	613b      	str	r3, [r7, #16]
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	e7fd      	b.n	800dfdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10b      	bne.n	800dffe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	60fb      	str	r3, [r7, #12]
}
 800dff8:	bf00      	nop
 800dffa:	bf00      	nop
 800dffc:	e7fd      	b.n	800dffa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dffe:	f002 f92b 	bl	8010258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e002:	4b1d      	ldr	r3, [pc, #116]	@ (800e078 <xTaskCheckForTimeOut+0xc0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e01a:	d102      	bne.n	800e022 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61fb      	str	r3, [r7, #28]
 800e020:	e023      	b.n	800e06a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	4b15      	ldr	r3, [pc, #84]	@ (800e07c <xTaskCheckForTimeOut+0xc4>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d007      	beq.n	800e03e <xTaskCheckForTimeOut+0x86>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	69ba      	ldr	r2, [r7, #24]
 800e034:	429a      	cmp	r2, r3
 800e036:	d302      	bcc.n	800e03e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	61fb      	str	r3, [r7, #28]
 800e03c:	e015      	b.n	800e06a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	429a      	cmp	r2, r3
 800e046:	d20b      	bcs.n	800e060 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff ff99 	bl	800df8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e05a:	2300      	movs	r3, #0
 800e05c:	61fb      	str	r3, [r7, #28]
 800e05e:	e004      	b.n	800e06a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e066:	2301      	movs	r3, #1
 800e068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e06a:	f002 f927 	bl	80102bc <vPortExitCritical>

	return xReturn;
 800e06e:	69fb      	ldr	r3, [r7, #28]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3720      	adds	r7, #32
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20000ec0 	.word	0x20000ec0
 800e07c:	20000ed4 	.word	0x20000ed4

0800e080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e080:	b480      	push	{r7}
 800e082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e084:	4b03      	ldr	r3, [pc, #12]	@ (800e094 <vTaskMissedYield+0x14>)
 800e086:	2201      	movs	r2, #1
 800e088:	601a      	str	r2, [r3, #0]
}
 800e08a:	bf00      	nop
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	20000ed0 	.word	0x20000ed0

0800e098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e0a0:	f000 f852 	bl	800e148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0a4:	4b06      	ldr	r3, [pc, #24]	@ (800e0c0 <prvIdleTask+0x28>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d9f9      	bls.n	800e0a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0ac:	4b05      	ldr	r3, [pc, #20]	@ (800e0c4 <prvIdleTask+0x2c>)
 800e0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0bc:	e7f0      	b.n	800e0a0 <prvIdleTask+0x8>
 800e0be:	bf00      	nop
 800e0c0:	200009ec 	.word	0x200009ec
 800e0c4:	e000ed04 	.word	0xe000ed04

0800e0c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	607b      	str	r3, [r7, #4]
 800e0d2:	e00c      	b.n	800e0ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4a12      	ldr	r2, [pc, #72]	@ (800e128 <prvInitialiseTaskLists+0x60>)
 800e0e0:	4413      	add	r3, r2
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fd fe90 	bl	800be08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	607b      	str	r3, [r7, #4]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b37      	cmp	r3, #55	@ 0x37
 800e0f2:	d9ef      	bls.n	800e0d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0f4:	480d      	ldr	r0, [pc, #52]	@ (800e12c <prvInitialiseTaskLists+0x64>)
 800e0f6:	f7fd fe87 	bl	800be08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0fa:	480d      	ldr	r0, [pc, #52]	@ (800e130 <prvInitialiseTaskLists+0x68>)
 800e0fc:	f7fd fe84 	bl	800be08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e100:	480c      	ldr	r0, [pc, #48]	@ (800e134 <prvInitialiseTaskLists+0x6c>)
 800e102:	f7fd fe81 	bl	800be08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e106:	480c      	ldr	r0, [pc, #48]	@ (800e138 <prvInitialiseTaskLists+0x70>)
 800e108:	f7fd fe7e 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e10c:	480b      	ldr	r0, [pc, #44]	@ (800e13c <prvInitialiseTaskLists+0x74>)
 800e10e:	f7fd fe7b 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e112:	4b0b      	ldr	r3, [pc, #44]	@ (800e140 <prvInitialiseTaskLists+0x78>)
 800e114:	4a05      	ldr	r2, [pc, #20]	@ (800e12c <prvInitialiseTaskLists+0x64>)
 800e116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e118:	4b0a      	ldr	r3, [pc, #40]	@ (800e144 <prvInitialiseTaskLists+0x7c>)
 800e11a:	4a05      	ldr	r2, [pc, #20]	@ (800e130 <prvInitialiseTaskLists+0x68>)
 800e11c:	601a      	str	r2, [r3, #0]
}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	200009ec 	.word	0x200009ec
 800e12c:	20000e4c 	.word	0x20000e4c
 800e130:	20000e60 	.word	0x20000e60
 800e134:	20000e7c 	.word	0x20000e7c
 800e138:	20000e90 	.word	0x20000e90
 800e13c:	20000ea8 	.word	0x20000ea8
 800e140:	20000e74 	.word	0x20000e74
 800e144:	20000e78 	.word	0x20000e78

0800e148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e14e:	e019      	b.n	800e184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e150:	f002 f882 	bl	8010258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e154:	4b10      	ldr	r3, [pc, #64]	@ (800e198 <prvCheckTasksWaitingTermination+0x50>)
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3304      	adds	r3, #4
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd fedb 	bl	800bf1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e166:	4b0d      	ldr	r3, [pc, #52]	@ (800e19c <prvCheckTasksWaitingTermination+0x54>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	4a0b      	ldr	r2, [pc, #44]	@ (800e19c <prvCheckTasksWaitingTermination+0x54>)
 800e16e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e170:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a0 <prvCheckTasksWaitingTermination+0x58>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	3b01      	subs	r3, #1
 800e176:	4a0a      	ldr	r2, [pc, #40]	@ (800e1a0 <prvCheckTasksWaitingTermination+0x58>)
 800e178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e17a:	f002 f89f 	bl	80102bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f8e4 	bl	800e34c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e184:	4b06      	ldr	r3, [pc, #24]	@ (800e1a0 <prvCheckTasksWaitingTermination+0x58>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1e1      	bne.n	800e150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20000e90 	.word	0x20000e90
 800e19c:	20000ebc 	.word	0x20000ebc
 800e1a0:	20000ea4 	.word	0x20000ea4

0800e1a4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
 800e1b0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <vTaskGetInfo+0x1a>
 800e1b8:	4b2c      	ldr	r3, [pc, #176]	@ (800e26c <vTaskGetInfo+0xc8>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	e000      	b.n	800e1c0 <vTaskGetInfo+0x1c>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	2b05      	cmp	r3, #5
 800e1fc:	d01a      	beq.n	800e234 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800e1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e26c <vTaskGetInfo+0xc8>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	429a      	cmp	r2, r3
 800e206:	d103      	bne.n	800e210 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2200      	movs	r2, #0
 800e20c:	731a      	strb	r2, [r3, #12]
 800e20e:	e018      	b.n	800e242 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	78fa      	ldrb	r2, [r7, #3]
 800e214:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e216:	78fb      	ldrb	r3, [r7, #3]
 800e218:	2b03      	cmp	r3, #3
 800e21a:	d112      	bne.n	800e242 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800e21c:	f7ff faea 	bl	800d7f4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2202      	movs	r2, #2
 800e22c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e22e:	f7ff faef 	bl	800d810 <xTaskResumeAll>
 800e232:	e006      	b.n	800e242 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e234:	6978      	ldr	r0, [r7, #20]
 800e236:	f7ff fa0d 	bl	800d654 <eTaskGetState>
 800e23a:	4603      	mov	r3, r0
 800e23c:	461a      	mov	r2, r3
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d009      	beq.n	800e25c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 f861 	bl	800e314 <prvTaskCheckFreeStackSpace>
 800e252:	4603      	mov	r3, r0
 800e254:	461a      	mov	r2, r3
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e25a:	e002      	b.n	800e262 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2200      	movs	r2, #0
 800e260:	841a      	strh	r2, [r3, #32]
	}
 800e262:	bf00      	nop
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200009e8 	.word	0x200009e8

0800e270 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	@ 0x28
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	4613      	mov	r3, r2
 800e27c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d03f      	beq.n	800e30a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	623b      	str	r3, [r7, #32]
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	685a      	ldr	r2, [r3, #4]
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	605a      	str	r2, [r3, #4]
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d104      	bne.n	800e2ae <prvListTasksWithinSingleList+0x3e>
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	605a      	str	r2, [r3, #4]
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	61bb      	str	r3, [r7, #24]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	605a      	str	r2, [r3, #4]
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	685a      	ldr	r2, [r3, #4]
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d104      	bne.n	800e2da <prvListTasksWithinSingleList+0x6a>
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	605a      	str	r2, [r3, #4]
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800e2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	00db      	lsls	r3, r3, #3
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1899      	adds	r1, r3, r2
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	6978      	ldr	r0, [r7, #20]
 800e2f8:	f7ff ff54 	bl	800e1a4 <vTaskGetInfo>
				uxTask++;
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	3301      	adds	r3, #1
 800e300:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	429a      	cmp	r2, r3
 800e308:	d1d5      	bne.n	800e2b6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800e30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3728      	adds	r7, #40	@ 0x28
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e31c:	2300      	movs	r3, #0
 800e31e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e320:	e005      	b.n	800e32e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3301      	adds	r3, #1
 800e326:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3301      	adds	r3, #1
 800e32c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2ba5      	cmp	r3, #165	@ 0xa5
 800e334:	d0f5      	beq.n	800e322 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	089b      	lsrs	r3, r3, #2
 800e33a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	b29b      	uxth	r3, r3
	}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d108      	bne.n	800e370 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e362:	4618      	mov	r0, r3
 800e364:	f001 fd2a 	bl	800fdbc <vPortFree>
				vPortFree( pxTCB );
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f001 fd27 	bl	800fdbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e36e:	e019      	b.n	800e3a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e376:	2b01      	cmp	r3, #1
 800e378:	d103      	bne.n	800e382 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f001 fd1e 	bl	800fdbc <vPortFree>
	}
 800e380:	e010      	b.n	800e3a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d00b      	beq.n	800e3a4 <prvDeleteTCB+0x58>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	60fb      	str	r3, [r7, #12]
}
 800e39e:	bf00      	nop
 800e3a0:	bf00      	nop
 800e3a2:	e7fd      	b.n	800e3a0 <prvDeleteTCB+0x54>
	}
 800e3a4:	bf00      	nop
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e3e4 <prvResetNextTaskUnblockTime+0x38>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d104      	bne.n	800e3c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e8 <prvResetNextTaskUnblockTime+0x3c>)
 800e3be:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3c4:	e008      	b.n	800e3d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c6:	4b07      	ldr	r3, [pc, #28]	@ (800e3e4 <prvResetNextTaskUnblockTime+0x38>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	4a04      	ldr	r2, [pc, #16]	@ (800e3e8 <prvResetNextTaskUnblockTime+0x3c>)
 800e3d6:	6013      	str	r3, [r2, #0]
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	20000e74 	.word	0x20000e74
 800e3e8:	20000edc 	.word	0x20000edc

0800e3ec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e3f2:	4b05      	ldr	r3, [pc, #20]	@ (800e408 <xTaskGetCurrentTaskHandle+0x1c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e3f8:	687b      	ldr	r3, [r7, #4]
	}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	370c      	adds	r7, #12
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	200009e8 	.word	0x200009e8

0800e40c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e412:	4b0b      	ldr	r3, [pc, #44]	@ (800e440 <xTaskGetSchedulerState+0x34>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e41a:	2301      	movs	r3, #1
 800e41c:	607b      	str	r3, [r7, #4]
 800e41e:	e008      	b.n	800e432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e420:	4b08      	ldr	r3, [pc, #32]	@ (800e444 <xTaskGetSchedulerState+0x38>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e428:	2302      	movs	r3, #2
 800e42a:	607b      	str	r3, [r7, #4]
 800e42c:	e001      	b.n	800e432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e42e:	2300      	movs	r3, #0
 800e430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e432:	687b      	ldr	r3, [r7, #4]
	}
 800e434:	4618      	mov	r0, r3
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	20000ec8 	.word	0x20000ec8
 800e444:	20000ee4 	.word	0x20000ee4

0800e448 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e454:	2300      	movs	r3, #0
 800e456:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d051      	beq.n	800e502 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e462:	4b2a      	ldr	r3, [pc, #168]	@ (800e50c <xTaskPriorityInherit+0xc4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e468:	429a      	cmp	r2, r3
 800e46a:	d241      	bcs.n	800e4f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	2b00      	cmp	r3, #0
 800e472:	db06      	blt.n	800e482 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e474:	4b25      	ldr	r3, [pc, #148]	@ (800e50c <xTaskPriorityInherit+0xc4>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	6959      	ldr	r1, [r3, #20]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48a:	4613      	mov	r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4a1f      	ldr	r2, [pc, #124]	@ (800e510 <xTaskPriorityInherit+0xc8>)
 800e494:	4413      	add	r3, r2
 800e496:	4299      	cmp	r1, r3
 800e498:	d122      	bne.n	800e4e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	3304      	adds	r3, #4
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd fd3c 	bl	800bf1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4a4:	4b19      	ldr	r3, [pc, #100]	@ (800e50c <xTaskPriorityInherit+0xc4>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b2:	4b18      	ldr	r3, [pc, #96]	@ (800e514 <xTaskPriorityInherit+0xcc>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d903      	bls.n	800e4c2 <xTaskPriorityInherit+0x7a>
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4be:	4a15      	ldr	r2, [pc, #84]	@ (800e514 <xTaskPriorityInherit+0xcc>)
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4a10      	ldr	r2, [pc, #64]	@ (800e510 <xTaskPriorityInherit+0xc8>)
 800e4d0:	441a      	add	r2, r3
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7fd fcc2 	bl	800be62 <vListInsertEnd>
 800e4de:	e004      	b.n	800e4ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e50c <xTaskPriorityInherit+0xc4>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	e008      	b.n	800e502 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e4f4:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <xTaskPriorityInherit+0xc4>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d201      	bcs.n	800e502 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e502:	68fb      	ldr	r3, [r7, #12]
	}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	200009e8 	.word	0x200009e8
 800e510:	200009ec 	.word	0x200009ec
 800e514:	20000ec4 	.word	0x20000ec4

0800e518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d058      	beq.n	800e5e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e52e:	4b2f      	ldr	r3, [pc, #188]	@ (800e5ec <xTaskPriorityDisinherit+0xd4>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	693a      	ldr	r2, [r7, #16]
 800e534:	429a      	cmp	r2, r3
 800e536:	d00b      	beq.n	800e550 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	e7fd      	b.n	800e54c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10b      	bne.n	800e570 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	60bb      	str	r3, [r7, #8]
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	e7fd      	b.n	800e56c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e574:	1e5a      	subs	r2, r3, #1
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e582:	429a      	cmp	r2, r3
 800e584:	d02c      	beq.n	800e5e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d128      	bne.n	800e5e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	3304      	adds	r3, #4
 800e592:	4618      	mov	r0, r3
 800e594:	f7fd fcc2 	bl	800bf1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b0:	4b0f      	ldr	r3, [pc, #60]	@ (800e5f0 <xTaskPriorityDisinherit+0xd8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d903      	bls.n	800e5c0 <xTaskPriorityDisinherit+0xa8>
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5bc:	4a0c      	ldr	r2, [pc, #48]	@ (800e5f0 <xTaskPriorityDisinherit+0xd8>)
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4a09      	ldr	r2, [pc, #36]	@ (800e5f4 <xTaskPriorityDisinherit+0xdc>)
 800e5ce:	441a      	add	r2, r3
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	f7fd fc43 	bl	800be62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5e0:	697b      	ldr	r3, [r7, #20]
	}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3718      	adds	r7, #24
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	200009e8 	.word	0x200009e8
 800e5f0:	20000ec4 	.word	0x20000ec4
 800e5f4:	200009ec 	.word	0x200009ec

0800e5f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e606:	2301      	movs	r3, #1
 800e608:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d06c      	beq.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10b      	bne.n	800e630 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60fb      	str	r3, [r7, #12]
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	e7fd      	b.n	800e62c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d902      	bls.n	800e640 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	61fb      	str	r3, [r7, #28]
 800e63e:	e002      	b.n	800e646 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e644:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e64a:	69fa      	ldr	r2, [r7, #28]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d04c      	beq.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	429a      	cmp	r2, r3
 800e658:	d147      	bne.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e65a:	4b26      	ldr	r3, [pc, #152]	@ (800e6f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	69ba      	ldr	r2, [r7, #24]
 800e660:	429a      	cmp	r2, r3
 800e662:	d10b      	bne.n	800e67c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	60bb      	str	r3, [r7, #8]
}
 800e676:	bf00      	nop
 800e678:	bf00      	nop
 800e67a:	e7fd      	b.n	800e678 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e680:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	69fa      	ldr	r2, [r7, #28]
 800e686:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	699b      	ldr	r3, [r3, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	db04      	blt.n	800e69a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	6959      	ldr	r1, [r3, #20]
 800e69e:	693a      	ldr	r2, [r7, #16]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4a13      	ldr	r2, [pc, #76]	@ (800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6aa:	4413      	add	r3, r2
 800e6ac:	4299      	cmp	r1, r3
 800e6ae:	d11c      	bne.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fc31 	bl	800bf1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6be:	4b0f      	ldr	r3, [pc, #60]	@ (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d903      	bls.n	800e6ce <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ca:	4a0c      	ldr	r2, [pc, #48]	@ (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4413      	add	r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4a07      	ldr	r2, [pc, #28]	@ (800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6dc:	441a      	add	r2, r3
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f7fd fbbc 	bl	800be62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6ea:	bf00      	nop
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	200009e8 	.word	0x200009e8
 800e6f8:	200009ec 	.word	0x200009ec
 800e6fc:	20000ec4 	.word	0x20000ec4

0800e700 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f014 fb32 	bl	8022d76 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7f1 fe06 	bl	8000324 <strlen>
 800e718:	60f8      	str	r0, [r7, #12]
 800e71a:	e007      	b.n	800e72c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	4413      	add	r3, r2
 800e722:	2220      	movs	r2, #32
 800e724:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3301      	adds	r3, #1
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b0e      	cmp	r3, #14
 800e730:	d9f4      	bls.n	800e71c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	4413      	add	r3, r2
 800e738:	2200      	movs	r2, #0
 800e73a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	4413      	add	r3, r2
	}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e74c:	b590      	push	{r4, r7, lr}
 800e74e:	b089      	sub	sp, #36	@ 0x24
 800e750:	af02      	add	r7, sp, #8
 800e752:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2200      	movs	r2, #0
 800e758:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e75a:	4b45      	ldr	r3, [pc, #276]	@ (800e870 <vTaskList+0x124>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800e760:	4b43      	ldr	r3, [pc, #268]	@ (800e870 <vTaskList+0x124>)
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	4613      	mov	r3, r2
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	4413      	add	r3, r2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4618      	mov	r0, r3
 800e76e:	f001 fa57 	bl	800fc20 <pvPortMalloc>
 800e772:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d076      	beq.n	800e868 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e77a:	2200      	movs	r2, #0
 800e77c:	68f9      	ldr	r1, [r7, #12]
 800e77e:	68b8      	ldr	r0, [r7, #8]
 800e780:	f7ff f906 	bl	800d990 <uxTaskGetSystemState>
 800e784:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e786:	2300      	movs	r3, #0
 800e788:	617b      	str	r3, [r7, #20]
 800e78a:	e066      	b.n	800e85a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	4613      	mov	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	4413      	add	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	461a      	mov	r2, r3
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	4413      	add	r3, r2
 800e79c:	7b1b      	ldrb	r3, [r3, #12]
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	d81b      	bhi.n	800e7da <vTaskList+0x8e>
 800e7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a8 <vTaskList+0x5c>)
 800e7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a8:	0800e7bd 	.word	0x0800e7bd
 800e7ac:	0800e7c3 	.word	0x0800e7c3
 800e7b0:	0800e7c9 	.word	0x0800e7c9
 800e7b4:	0800e7cf 	.word	0x0800e7cf
 800e7b8:	0800e7d5 	.word	0x0800e7d5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800e7bc:	2358      	movs	r3, #88	@ 0x58
 800e7be:	74fb      	strb	r3, [r7, #19]
										break;
 800e7c0:	e00e      	b.n	800e7e0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800e7c2:	2352      	movs	r3, #82	@ 0x52
 800e7c4:	74fb      	strb	r3, [r7, #19]
										break;
 800e7c6:	e00b      	b.n	800e7e0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800e7c8:	2342      	movs	r3, #66	@ 0x42
 800e7ca:	74fb      	strb	r3, [r7, #19]
										break;
 800e7cc:	e008      	b.n	800e7e0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e7ce:	2353      	movs	r3, #83	@ 0x53
 800e7d0:	74fb      	strb	r3, [r7, #19]
										break;
 800e7d2:	e005      	b.n	800e7e0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e7d4:	2344      	movs	r3, #68	@ 0x44
 800e7d6:	74fb      	strb	r3, [r7, #19]
										break;
 800e7d8:	e002      	b.n	800e7e0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	74fb      	strb	r3, [r7, #19]
										break;
 800e7de:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	00db      	lsls	r3, r3, #3
 800e7e6:	4413      	add	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff ff83 	bl	800e700 <prvWriteNameToBuffer>
 800e7fa:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e7fc:	7cf9      	ldrb	r1, [r7, #19]
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	4613      	mov	r3, r2
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	4413      	add	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	461a      	mov	r2, r3
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	4413      	add	r3, r2
 800e80e:	6918      	ldr	r0, [r3, #16]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4613      	mov	r3, r2
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	4413      	add	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	461a      	mov	r2, r3
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	4413      	add	r3, r2
 800e820:	8c1b      	ldrh	r3, [r3, #32]
 800e822:	461c      	mov	r4, r3
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	4613      	mov	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	461a      	mov	r2, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	4413      	add	r3, r2
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	9301      	str	r3, [sp, #4]
 800e838:	9400      	str	r4, [sp, #0]
 800e83a:	4603      	mov	r3, r0
 800e83c:	460a      	mov	r2, r1
 800e83e:	490d      	ldr	r1, [pc, #52]	@ (800e874 <vTaskList+0x128>)
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f014 f8d9 	bl	80229f8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7f1 fd6c 	bl	8000324 <strlen>
 800e84c:	4602      	mov	r2, r0
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4413      	add	r3, r2
 800e852:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	3301      	adds	r3, #1
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d394      	bcc.n	800e78c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f001 faaa 	bl	800fdbc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e868:	bf00      	nop
 800e86a:	371c      	adds	r7, #28
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd90      	pop	{r4, r7, pc}
 800e870:	20000ebc 	.word	0x20000ebc
 800e874:	08023fac 	.word	0x08023fac

0800e878 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e87e:	4b09      	ldr	r3, [pc, #36]	@ (800e8a4 <uxTaskResetEventItemValue+0x2c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e886:	4b07      	ldr	r3, [pc, #28]	@ (800e8a4 <uxTaskResetEventItemValue+0x2c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e88c:	4b05      	ldr	r3, [pc, #20]	@ (800e8a4 <uxTaskResetEventItemValue+0x2c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e894:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e896:	687b      	ldr	r3, [r7, #4]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	200009e8 	.word	0x200009e8

0800e8a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8a8:	b480      	push	{r7}
 800e8aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8ac:	4b07      	ldr	r3, [pc, #28]	@ (800e8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8b4:	4b05      	ldr	r3, [pc, #20]	@ (800e8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8ba:	3201      	adds	r2, #1
 800e8bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e8be:	4b03      	ldr	r3, [pc, #12]	@ (800e8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
	}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	200009e8 	.word	0x200009e8

0800e8d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8da:	4b21      	ldr	r3, [pc, #132]	@ (800e960 <prvAddCurrentTaskToDelayedList+0x90>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8e0:	4b20      	ldr	r3, [pc, #128]	@ (800e964 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fd fb18 	bl	800bf1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f2:	d10a      	bne.n	800e90a <prvAddCurrentTaskToDelayedList+0x3a>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d007      	beq.n	800e90a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8fa:	4b1a      	ldr	r3, [pc, #104]	@ (800e964 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3304      	adds	r3, #4
 800e900:	4619      	mov	r1, r3
 800e902:	4819      	ldr	r0, [pc, #100]	@ (800e968 <prvAddCurrentTaskToDelayedList+0x98>)
 800e904:	f7fd faad 	bl	800be62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e908:	e026      	b.n	800e958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4413      	add	r3, r2
 800e910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e912:	4b14      	ldr	r3, [pc, #80]	@ (800e964 <prvAddCurrentTaskToDelayedList+0x94>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e91a:	68ba      	ldr	r2, [r7, #8]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d209      	bcs.n	800e936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e922:	4b12      	ldr	r3, [pc, #72]	@ (800e96c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	4b0f      	ldr	r3, [pc, #60]	@ (800e964 <prvAddCurrentTaskToDelayedList+0x94>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3304      	adds	r3, #4
 800e92c:	4619      	mov	r1, r3
 800e92e:	4610      	mov	r0, r2
 800e930:	f7fd fabb 	bl	800beaa <vListInsert>
}
 800e934:	e010      	b.n	800e958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e936:	4b0e      	ldr	r3, [pc, #56]	@ (800e970 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b0a      	ldr	r3, [pc, #40]	@ (800e964 <prvAddCurrentTaskToDelayedList+0x94>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3304      	adds	r3, #4
 800e940:	4619      	mov	r1, r3
 800e942:	4610      	mov	r0, r2
 800e944:	f7fd fab1 	bl	800beaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e948:	4b0a      	ldr	r3, [pc, #40]	@ (800e974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d202      	bcs.n	800e958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e952:	4a08      	ldr	r2, [pc, #32]	@ (800e974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6013      	str	r3, [r2, #0]
}
 800e958:	bf00      	nop
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	20000ec0 	.word	0x20000ec0
 800e964:	200009e8 	.word	0x200009e8
 800e968:	20000ea8 	.word	0x20000ea8
 800e96c:	20000e78 	.word	0x20000e78
 800e970:	20000e74 	.word	0x20000e74
 800e974:	20000edc 	.word	0x20000edc

0800e978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	@ 0x28
 800e97c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e97e:	2300      	movs	r3, #0
 800e980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e982:	f000 fb71 	bl	800f068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e986:	4b1d      	ldr	r3, [pc, #116]	@ (800e9fc <xTimerCreateTimerTask+0x84>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d021      	beq.n	800e9d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e992:	2300      	movs	r3, #0
 800e994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e996:	1d3a      	adds	r2, r7, #4
 800e998:	f107 0108 	add.w	r1, r7, #8
 800e99c:	f107 030c 	add.w	r3, r7, #12
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f001 f923 	bl	800fbec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9a6:	6879      	ldr	r1, [r7, #4]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	9202      	str	r2, [sp, #8]
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	460a      	mov	r2, r1
 800e9b8:	4911      	ldr	r1, [pc, #68]	@ (800ea00 <xTimerCreateTimerTask+0x88>)
 800e9ba:	4812      	ldr	r0, [pc, #72]	@ (800ea04 <xTimerCreateTimerTask+0x8c>)
 800e9bc:	f7fe fbfa 	bl	800d1b4 <xTaskCreateStatic>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4a11      	ldr	r2, [pc, #68]	@ (800ea08 <xTimerCreateTimerTask+0x90>)
 800e9c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <xTimerCreateTimerTask+0x90>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10b      	bne.n	800e9f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	613b      	str	r3, [r7, #16]
}
 800e9ea:	bf00      	nop
 800e9ec:	bf00      	nop
 800e9ee:	e7fd      	b.n	800e9ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e9f0:	697b      	ldr	r3, [r7, #20]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20000f18 	.word	0x20000f18
 800ea00:	08023fbc 	.word	0x08023fbc
 800ea04:	0800ec01 	.word	0x0800ec01
 800ea08:	20000f1c 	.word	0x20000f1c

0800ea0c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b088      	sub	sp, #32
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ea1a:	202c      	movs	r0, #44	@ 0x2c
 800ea1c:	f001 f900 	bl	800fc20 <pvPortMalloc>
 800ea20:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00d      	beq.n	800ea44 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	9301      	str	r3, [sp, #4]
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 f805 	bl	800ea4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ea44:	697b      	ldr	r3, [r7, #20]
	}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b086      	sub	sp, #24
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	60f8      	str	r0, [r7, #12]
 800ea56:	60b9      	str	r1, [r7, #8]
 800ea58:	607a      	str	r2, [r7, #4]
 800ea5a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	617b      	str	r3, [r7, #20]
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	e7fd      	b.n	800ea76 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01e      	beq.n	800eabe <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ea80:	f000 faf2 	bl	800f068 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ea84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	6a3a      	ldr	r2, [r7, #32]
 800ea9a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fd f9d1 	bl	800be48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d008      	beq.n	800eabe <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eab2:	f043 0304 	orr.w	r3, r3, #4
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800eabe:	bf00      	nop
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
	...

0800eac8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b08a      	sub	sp, #40	@ 0x28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ead6:	2300      	movs	r3, #0
 800ead8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10b      	bne.n	800eaf8 <xTimerGenericCommand+0x30>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	623b      	str	r3, [r7, #32]
}
 800eaf2:	bf00      	nop
 800eaf4:	bf00      	nop
 800eaf6:	e7fd      	b.n	800eaf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaf8:	4b19      	ldr	r3, [pc, #100]	@ (800eb60 <xTimerGenericCommand+0x98>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d02a      	beq.n	800eb56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	dc18      	bgt.n	800eb44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb12:	f7ff fc7b 	bl	800e40c <xTaskGetSchedulerState>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d109      	bne.n	800eb30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb1c:	4b10      	ldr	r3, [pc, #64]	@ (800eb60 <xTimerGenericCommand+0x98>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	f107 0110 	add.w	r1, r7, #16
 800eb24:	2300      	movs	r3, #0
 800eb26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb28:	f7fd fc8e 	bl	800c448 <xQueueGenericSend>
 800eb2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb2e:	e012      	b.n	800eb56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb30:	4b0b      	ldr	r3, [pc, #44]	@ (800eb60 <xTimerGenericCommand+0x98>)
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	f107 0110 	add.w	r1, r7, #16
 800eb38:	2300      	movs	r3, #0
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f7fd fc84 	bl	800c448 <xQueueGenericSend>
 800eb40:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb42:	e008      	b.n	800eb56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb44:	4b06      	ldr	r3, [pc, #24]	@ (800eb60 <xTimerGenericCommand+0x98>)
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	f107 0110 	add.w	r1, r7, #16
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	f7fd fd7c 	bl	800c64c <xQueueGenericSendFromISR>
 800eb54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3728      	adds	r7, #40	@ 0x28
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	20000f18 	.word	0x20000f18

0800eb64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6e:	4b23      	ldr	r3, [pc, #140]	@ (800ebfc <prvProcessExpiredTimer+0x98>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	3304      	adds	r3, #4
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fd f9cd 	bl	800bf1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb88:	f003 0304 	and.w	r3, r3, #4
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d023      	beq.n	800ebd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	699a      	ldr	r2, [r3, #24]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	18d1      	adds	r1, r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	683a      	ldr	r2, [r7, #0]
 800eb9c:	6978      	ldr	r0, [r7, #20]
 800eb9e:	f000 f8d5 	bl	800ed4c <prvInsertTimerInActiveList>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d020      	beq.n	800ebea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eba8:	2300      	movs	r3, #0
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	2300      	movs	r3, #0
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	6978      	ldr	r0, [r7, #20]
 800ebb4:	f7ff ff88 	bl	800eac8 <xTimerGenericCommand>
 800ebb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d114      	bne.n	800ebea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	60fb      	str	r3, [r7, #12]
}
 800ebd2:	bf00      	nop
 800ebd4:	bf00      	nop
 800ebd6:	e7fd      	b.n	800ebd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebde:	f023 0301 	bic.w	r3, r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	6978      	ldr	r0, [r7, #20]
 800ebf0:	4798      	blx	r3
}
 800ebf2:	bf00      	nop
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000f10 	.word	0x20000f10

0800ec00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec08:	f107 0308 	add.w	r3, r7, #8
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 f859 	bl	800ecc4 <prvGetNextExpireTime>
 800ec12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	4619      	mov	r1, r3
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 f805 	bl	800ec28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec1e:	f000 f8d7 	bl	800edd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec22:	bf00      	nop
 800ec24:	e7f0      	b.n	800ec08 <prvTimerTask+0x8>
	...

0800ec28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec32:	f7fe fddf 	bl	800d7f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec36:	f107 0308 	add.w	r3, r7, #8
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f866 	bl	800ed0c <prvSampleTimeNow>
 800ec40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d130      	bne.n	800ecaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10a      	bne.n	800ec64 <prvProcessTimerOrBlockTask+0x3c>
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d806      	bhi.n	800ec64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec56:	f7fe fddb 	bl	800d810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec5a:	68f9      	ldr	r1, [r7, #12]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ff81 	bl	800eb64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec62:	e024      	b.n	800ecae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d008      	beq.n	800ec7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec6a:	4b13      	ldr	r3, [pc, #76]	@ (800ecb8 <prvProcessTimerOrBlockTask+0x90>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <prvProcessTimerOrBlockTask+0x50>
 800ec74:	2301      	movs	r3, #1
 800ec76:	e000      	b.n	800ec7a <prvProcessTimerOrBlockTask+0x52>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec7c:	4b0f      	ldr	r3, [pc, #60]	@ (800ecbc <prvProcessTimerOrBlockTask+0x94>)
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7fe fa5f 	bl	800d14c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec8e:	f7fe fdbf 	bl	800d810 <xTaskResumeAll>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10a      	bne.n	800ecae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec98:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <prvProcessTimerOrBlockTask+0x98>)
 800ec9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	f3bf 8f6f 	isb	sy
}
 800eca8:	e001      	b.n	800ecae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecaa:	f7fe fdb1 	bl	800d810 <xTaskResumeAll>
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	20000f14 	.word	0x20000f14
 800ecbc:	20000f18 	.word	0x20000f18
 800ecc0:	e000ed04 	.word	0xe000ed04

0800ecc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eccc:	4b0e      	ldr	r3, [pc, #56]	@ (800ed08 <prvGetNextExpireTime+0x44>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <prvGetNextExpireTime+0x16>
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	e000      	b.n	800ecdc <prvGetNextExpireTime+0x18>
 800ecda:	2200      	movs	r2, #0
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d105      	bne.n	800ecf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ece8:	4b07      	ldr	r3, [pc, #28]	@ (800ed08 <prvGetNextExpireTime+0x44>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	60fb      	str	r3, [r7, #12]
 800ecf2:	e001      	b.n	800ecf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	20000f10 	.word	0x20000f10

0800ed0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed14:	f7fe fe1a 	bl	800d94c <xTaskGetTickCount>
 800ed18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed48 <prvSampleTimeNow+0x3c>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d205      	bcs.n	800ed30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed24:	f000 f93a 	bl	800ef9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	e002      	b.n	800ed36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed36:	4a04      	ldr	r2, [pc, #16]	@ (800ed48 <prvSampleTimeNow+0x3c>)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20000f20 	.word	0x20000f20

0800ed4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d812      	bhi.n	800ed98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	1ad2      	subs	r2, r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d302      	bcc.n	800ed86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e01b      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed86:	4b10      	ldr	r3, [pc, #64]	@ (800edc8 <prvInsertTimerInActiveList+0x7c>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4610      	mov	r0, r2
 800ed92:	f7fd f88a 	bl	800beaa <vListInsert>
 800ed96:	e012      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d206      	bcs.n	800edae <prvInsertTimerInActiveList+0x62>
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d302      	bcc.n	800edae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eda8:	2301      	movs	r3, #1
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	e007      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edae:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <prvInsertTimerInActiveList+0x80>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3304      	adds	r3, #4
 800edb6:	4619      	mov	r1, r3
 800edb8:	4610      	mov	r0, r2
 800edba:	f7fd f876 	bl	800beaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edbe:	697b      	ldr	r3, [r7, #20]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20000f14 	.word	0x20000f14
 800edcc:	20000f10 	.word	0x20000f10

0800edd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b08e      	sub	sp, #56	@ 0x38
 800edd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edd6:	e0ce      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da19      	bge.n	800ee12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edde:	1d3b      	adds	r3, r7, #4
 800ede0:	3304      	adds	r3, #4
 800ede2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ede4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10b      	bne.n	800ee02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800edea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	61fb      	str	r3, [r7, #28]
}
 800edfc:	bf00      	nop
 800edfe:	bf00      	nop
 800ee00:	e7fd      	b.n	800edfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee08:	6850      	ldr	r0, [r2, #4]
 800ee0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee0c:	6892      	ldr	r2, [r2, #8]
 800ee0e:	4611      	mov	r1, r2
 800ee10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f2c0 80ae 	blt.w	800ef76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d004      	beq.n	800ee30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee28:	3304      	adds	r3, #4
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fd f876 	bl	800bf1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee30:	463b      	mov	r3, r7
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff ff6a 	bl	800ed0c <prvSampleTimeNow>
 800ee38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b09      	cmp	r3, #9
 800ee3e:	f200 8097 	bhi.w	800ef70 <prvProcessReceivedCommands+0x1a0>
 800ee42:	a201      	add	r2, pc, #4	@ (adr r2, 800ee48 <prvProcessReceivedCommands+0x78>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee71 	.word	0x0800ee71
 800ee4c:	0800ee71 	.word	0x0800ee71
 800ee50:	0800ee71 	.word	0x0800ee71
 800ee54:	0800eee7 	.word	0x0800eee7
 800ee58:	0800eefb 	.word	0x0800eefb
 800ee5c:	0800ef47 	.word	0x0800ef47
 800ee60:	0800ee71 	.word	0x0800ee71
 800ee64:	0800ee71 	.word	0x0800ee71
 800ee68:	0800eee7 	.word	0x0800eee7
 800ee6c:	0800eefb 	.word	0x0800eefb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee76:	f043 0301 	orr.w	r3, r3, #1
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	18d1      	adds	r1, r2, r3
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee90:	f7ff ff5c 	bl	800ed4c <prvInsertTimerInActiveList>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d06c      	beq.n	800ef74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eea8:	f003 0304 	and.w	r3, r3, #4
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d061      	beq.n	800ef74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	2300      	movs	r3, #0
 800eebe:	2100      	movs	r1, #0
 800eec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eec2:	f7ff fe01 	bl	800eac8 <xTimerGenericCommand>
 800eec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eec8:	6a3b      	ldr	r3, [r7, #32]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d152      	bne.n	800ef74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	61bb      	str	r3, [r7, #24]
}
 800eee0:	bf00      	nop
 800eee2:	bf00      	nop
 800eee4:	e7fd      	b.n	800eee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eeec:	f023 0301 	bic.w	r3, r3, #1
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eef8:	e03d      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef00:	f043 0301 	orr.w	r3, r3, #1
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d10b      	bne.n	800ef32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ef1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	617b      	str	r3, [r7, #20]
}
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
 800ef30:	e7fd      	b.n	800ef2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef34:	699a      	ldr	r2, [r3, #24]
 800ef36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef38:	18d1      	adds	r1, r2, r3
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef40:	f7ff ff04 	bl	800ed4c <prvInsertTimerInActiveList>
					break;
 800ef44:	e017      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d103      	bne.n	800ef5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ef54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef56:	f000 ff31 	bl	800fdbc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef5a:	e00c      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef62:	f023 0301 	bic.w	r3, r3, #1
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef6e:	e002      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ef70:	bf00      	nop
 800ef72:	e000      	b.n	800ef76 <prvProcessReceivedCommands+0x1a6>
					break;
 800ef74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef76:	4b08      	ldr	r3, [pc, #32]	@ (800ef98 <prvProcessReceivedCommands+0x1c8>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	1d39      	adds	r1, r7, #4
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fd fc92 	bl	800c8a8 <xQueueReceive>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f47f af26 	bne.w	800edd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef8c:	bf00      	nop
 800ef8e:	bf00      	nop
 800ef90:	3730      	adds	r7, #48	@ 0x30
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20000f18 	.word	0x20000f18

0800ef9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b088      	sub	sp, #32
 800efa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efa2:	e049      	b.n	800f038 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efa4:	4b2e      	ldr	r3, [pc, #184]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efae:	4b2c      	ldr	r3, [pc, #176]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3304      	adds	r3, #4
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fc ffad 	bl	800bf1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efd0:	f003 0304 	and.w	r3, r3, #4
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d02f      	beq.n	800f038 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	699b      	ldr	r3, [r3, #24]
 800efdc:	693a      	ldr	r2, [r7, #16]
 800efde:	4413      	add	r3, r2
 800efe0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d90e      	bls.n	800f008 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff6:	4b1a      	ldr	r3, [pc, #104]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3304      	adds	r3, #4
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f7fc ff52 	bl	800beaa <vListInsert>
 800f006:	e017      	b.n	800f038 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f008:	2300      	movs	r3, #0
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	2300      	movs	r3, #0
 800f00e:	693a      	ldr	r2, [r7, #16]
 800f010:	2100      	movs	r1, #0
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff fd58 	bl	800eac8 <xTimerGenericCommand>
 800f018:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10b      	bne.n	800f038 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	603b      	str	r3, [r7, #0]
}
 800f032:	bf00      	nop
 800f034:	bf00      	nop
 800f036:	e7fd      	b.n	800f034 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f038:	4b09      	ldr	r3, [pc, #36]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1b0      	bne.n	800efa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f042:	4b07      	ldr	r3, [pc, #28]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f048:	4b06      	ldr	r3, [pc, #24]	@ (800f064 <prvSwitchTimerLists+0xc8>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a04      	ldr	r2, [pc, #16]	@ (800f060 <prvSwitchTimerLists+0xc4>)
 800f04e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f050:	4a04      	ldr	r2, [pc, #16]	@ (800f064 <prvSwitchTimerLists+0xc8>)
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	6013      	str	r3, [r2, #0]
}
 800f056:	bf00      	nop
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20000f10 	.word	0x20000f10
 800f064:	20000f14 	.word	0x20000f14

0800f068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f06e:	f001 f8f3 	bl	8010258 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f072:	4b15      	ldr	r3, [pc, #84]	@ (800f0c8 <prvCheckForValidListAndQueue+0x60>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d120      	bne.n	800f0bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f07a:	4814      	ldr	r0, [pc, #80]	@ (800f0cc <prvCheckForValidListAndQueue+0x64>)
 800f07c:	f7fc fec4 	bl	800be08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f080:	4813      	ldr	r0, [pc, #76]	@ (800f0d0 <prvCheckForValidListAndQueue+0x68>)
 800f082:	f7fc fec1 	bl	800be08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f086:	4b13      	ldr	r3, [pc, #76]	@ (800f0d4 <prvCheckForValidListAndQueue+0x6c>)
 800f088:	4a10      	ldr	r2, [pc, #64]	@ (800f0cc <prvCheckForValidListAndQueue+0x64>)
 800f08a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f08c:	4b12      	ldr	r3, [pc, #72]	@ (800f0d8 <prvCheckForValidListAndQueue+0x70>)
 800f08e:	4a10      	ldr	r2, [pc, #64]	@ (800f0d0 <prvCheckForValidListAndQueue+0x68>)
 800f090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f092:	2300      	movs	r3, #0
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	4b11      	ldr	r3, [pc, #68]	@ (800f0dc <prvCheckForValidListAndQueue+0x74>)
 800f098:	4a11      	ldr	r2, [pc, #68]	@ (800f0e0 <prvCheckForValidListAndQueue+0x78>)
 800f09a:	2110      	movs	r1, #16
 800f09c:	200a      	movs	r0, #10
 800f09e:	f7fc ffd1 	bl	800c044 <xQueueGenericCreateStatic>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	4a08      	ldr	r2, [pc, #32]	@ (800f0c8 <prvCheckForValidListAndQueue+0x60>)
 800f0a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0a8:	4b07      	ldr	r3, [pc, #28]	@ (800f0c8 <prvCheckForValidListAndQueue+0x60>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d005      	beq.n	800f0bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0b0:	4b05      	ldr	r3, [pc, #20]	@ (800f0c8 <prvCheckForValidListAndQueue+0x60>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	490b      	ldr	r1, [pc, #44]	@ (800f0e4 <prvCheckForValidListAndQueue+0x7c>)
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fd fff4 	bl	800d0a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0bc:	f001 f8fe 	bl	80102bc <vPortExitCritical>
}
 800f0c0:	bf00      	nop
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20000f18 	.word	0x20000f18
 800f0cc:	20000ee8 	.word	0x20000ee8
 800f0d0:	20000efc 	.word	0x20000efc
 800f0d4:	20000f10 	.word	0x20000f10
 800f0d8:	20000f14 	.word	0x20000f14
 800f0dc:	20000fc4 	.word	0x20000fc4
 800f0e0:	20000f24 	.word	0x20000f24
 800f0e4:	08023fc4 	.word	0x08023fc4

0800f0e8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10b      	bne.n	800f112 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	60fb      	str	r3, [r7, #12]
}
 800f10c:	bf00      	nop
 800f10e:	bf00      	nop
 800f110:	e7fd      	b.n	800f10e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f112:	f001 f8a1 	bl	8010258 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	69db      	ldr	r3, [r3, #28]
 800f11a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f11c:	f001 f8ce 	bl	80102bc <vPortExitCritical>

	return pvReturn;
 800f120:	693b      	ldr	r3, [r7, #16]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3718      	adds	r7, #24
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <__NVIC_SetPriority>:
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	6039      	str	r1, [r7, #0]
 800f136:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	db0a      	blt.n	800f156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	b2da      	uxtb	r2, r3
 800f144:	490c      	ldr	r1, [pc, #48]	@ (800f178 <__NVIC_SetPriority+0x4c>)
 800f146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f14a:	0112      	lsls	r2, r2, #4
 800f14c:	b2d2      	uxtb	r2, r2
 800f14e:	440b      	add	r3, r1
 800f150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f154:	e00a      	b.n	800f16c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	4908      	ldr	r1, [pc, #32]	@ (800f17c <__NVIC_SetPriority+0x50>)
 800f15c:	88fb      	ldrh	r3, [r7, #6]
 800f15e:	f003 030f 	and.w	r3, r3, #15
 800f162:	3b04      	subs	r3, #4
 800f164:	0112      	lsls	r2, r2, #4
 800f166:	b2d2      	uxtb	r2, r2
 800f168:	440b      	add	r3, r1
 800f16a:	761a      	strb	r2, [r3, #24]
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr
 800f178:	e000e100 	.word	0xe000e100
 800f17c:	e000ed00 	.word	0xe000ed00

0800f180 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f184:	4b05      	ldr	r3, [pc, #20]	@ (800f19c <SysTick_Handler+0x1c>)
 800f186:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f188:	f7ff f940 	bl	800e40c <xTaskGetSchedulerState>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d001      	beq.n	800f196 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f192:	f001 f8f1 	bl	8010378 <xPortSysTickHandler>
  }
}
 800f196:	bf00      	nop
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	e000e010 	.word	0xe000e010

0800f1a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	f06f 0004 	mvn.w	r0, #4
 800f1aa:	f7ff ffbf 	bl	800f12c <__NVIC_SetPriority>
#endif
}
 800f1ae:	bf00      	nop
 800f1b0:	bd80      	pop	{r7, pc}
	...

0800f1b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ba:	f3ef 8305 	mrs	r3, IPSR
 800f1be:	603b      	str	r3, [r7, #0]
  return(result);
 800f1c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d003      	beq.n	800f1ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f1c6:	f06f 0305 	mvn.w	r3, #5
 800f1ca:	607b      	str	r3, [r7, #4]
 800f1cc:	e00c      	b.n	800f1e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f8 <osKernelInitialize+0x44>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d105      	bne.n	800f1e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f1d6:	4b08      	ldr	r3, [pc, #32]	@ (800f1f8 <osKernelInitialize+0x44>)
 800f1d8:	2201      	movs	r2, #1
 800f1da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	607b      	str	r3, [r7, #4]
 800f1e0:	e002      	b.n	800f1e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f1e8:	687b      	ldr	r3, [r7, #4]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	20001014 	.word	0x20001014

0800f1fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f202:	f3ef 8305 	mrs	r3, IPSR
 800f206:	603b      	str	r3, [r7, #0]
  return(result);
 800f208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f20e:	f06f 0305 	mvn.w	r3, #5
 800f212:	607b      	str	r3, [r7, #4]
 800f214:	e010      	b.n	800f238 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f216:	4b0b      	ldr	r3, [pc, #44]	@ (800f244 <osKernelStart+0x48>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d109      	bne.n	800f232 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f21e:	f7ff ffbf 	bl	800f1a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f222:	4b08      	ldr	r3, [pc, #32]	@ (800f244 <osKernelStart+0x48>)
 800f224:	2202      	movs	r2, #2
 800f226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f228:	f7fe fa7c 	bl	800d724 <vTaskStartScheduler>
      stat = osOK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	607b      	str	r3, [r7, #4]
 800f230:	e002      	b.n	800f238 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f232:	f04f 33ff 	mov.w	r3, #4294967295
 800f236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f238:	687b      	ldr	r3, [r7, #4]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3708      	adds	r7, #8
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20001014 	.word	0x20001014

0800f248 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f24e:	f3ef 8305 	mrs	r3, IPSR
 800f252:	603b      	str	r3, [r7, #0]
  return(result);
 800f254:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f256:	2b00      	cmp	r3, #0
 800f258:	d003      	beq.n	800f262 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f25a:	f7fe fb87 	bl	800d96c <xTaskGetTickCountFromISR>
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	e002      	b.n	800f268 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f262:	f7fe fb73 	bl	800d94c <xTaskGetTickCount>
 800f266:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f268:	687b      	ldr	r3, [r7, #4]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f272:	b580      	push	{r7, lr}
 800f274:	b08e      	sub	sp, #56	@ 0x38
 800f276:	af04      	add	r7, sp, #16
 800f278:	60f8      	str	r0, [r7, #12]
 800f27a:	60b9      	str	r1, [r7, #8]
 800f27c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f282:	f3ef 8305 	mrs	r3, IPSR
 800f286:	617b      	str	r3, [r7, #20]
  return(result);
 800f288:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d17f      	bne.n	800f38e <osThreadNew+0x11c>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d07c      	beq.n	800f38e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800f294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f298:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f29a:	2318      	movs	r3, #24
 800f29c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d045      	beq.n	800f33a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <osThreadNew+0x4a>
        name = attr->name;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d008      	beq.n	800f2e2 <osThreadNew+0x70>
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	2b38      	cmp	r3, #56	@ 0x38
 800f2d4:	d805      	bhi.n	800f2e2 <osThreadNew+0x70>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	f003 0301 	and.w	r3, r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <osThreadNew+0x74>
        return (NULL);
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e054      	b.n	800f390 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	089b      	lsrs	r3, r3, #2
 800f2f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00e      	beq.n	800f31c <osThreadNew+0xaa>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	2b5b      	cmp	r3, #91	@ 0x5b
 800f304:	d90a      	bls.n	800f31c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d006      	beq.n	800f31c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d002      	beq.n	800f31c <osThreadNew+0xaa>
        mem = 1;
 800f316:	2301      	movs	r3, #1
 800f318:	61bb      	str	r3, [r7, #24]
 800f31a:	e010      	b.n	800f33e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10c      	bne.n	800f33e <osThreadNew+0xcc>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d108      	bne.n	800f33e <osThreadNew+0xcc>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	691b      	ldr	r3, [r3, #16]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d104      	bne.n	800f33e <osThreadNew+0xcc>
          mem = 0;
 800f334:	2300      	movs	r3, #0
 800f336:	61bb      	str	r3, [r7, #24]
 800f338:	e001      	b.n	800f33e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d110      	bne.n	800f366 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f34c:	9202      	str	r2, [sp, #8]
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	6a3a      	ldr	r2, [r7, #32]
 800f358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f7fd ff2a 	bl	800d1b4 <xTaskCreateStatic>
 800f360:	4603      	mov	r3, r0
 800f362:	613b      	str	r3, [r7, #16]
 800f364:	e013      	b.n	800f38e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d110      	bne.n	800f38e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f36c:	6a3b      	ldr	r3, [r7, #32]
 800f36e:	b29a      	uxth	r2, r3
 800f370:	f107 0310 	add.w	r3, r7, #16
 800f374:	9301      	str	r3, [sp, #4]
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7fd ff78 	bl	800d274 <xTaskCreate>
 800f384:	4603      	mov	r3, r0
 800f386:	2b01      	cmp	r3, #1
 800f388:	d001      	beq.n	800f38e <osThreadNew+0x11c>
            hTask = NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f38e:	693b      	ldr	r3, [r7, #16]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3728      	adds	r7, #40	@ 0x28
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3a4:	f3ef 8305 	mrs	r3, IPSR
 800f3a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d003      	beq.n	800f3b8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800f3b0:	f06f 0305 	mvn.w	r3, #5
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	e017      	b.n	800f3e8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d103      	bne.n	800f3c6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800f3be:	f06f 0303 	mvn.w	r3, #3
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e010      	b.n	800f3e8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800f3c6:	6938      	ldr	r0, [r7, #16]
 800f3c8:	f7fe f944 	bl	800d654 <eTaskGetState>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800f3d0:	7bfb      	ldrb	r3, [r7, #15]
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d005      	beq.n	800f3e2 <osThreadTerminate+0x4a>
      stat = osOK;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800f3da:	6938      	ldr	r0, [r7, #16]
 800f3dc:	f7fe f890 	bl	800d500 <vTaskDelete>
 800f3e0:	e002      	b.n	800f3e8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800f3e2:	f06f 0302 	mvn.w	r3, #2
 800f3e6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800f3e8:	697b      	ldr	r3, [r7, #20]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b084      	sub	sp, #16
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3fa:	f3ef 8305 	mrs	r3, IPSR
 800f3fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800f400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f402:	2b00      	cmp	r3, #0
 800f404:	d003      	beq.n	800f40e <osDelay+0x1c>
    stat = osErrorISR;
 800f406:	f06f 0305 	mvn.w	r3, #5
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	e007      	b.n	800f41e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f40e:	2300      	movs	r3, #0
 800f410:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <osDelay+0x2c>
      vTaskDelay(ticks);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7fe f8e5 	bl	800d5e8 <vTaskDelay>
    }
  }

  return (stat);
 800f41e:	68fb      	ldr	r3, [r7, #12]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f434:	f3ef 8305 	mrs	r3, IPSR
 800f438:	60bb      	str	r3, [r7, #8]
  return(result);
 800f43a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d174      	bne.n	800f52a <osMutexNew+0x102>
    if (attr != NULL) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d003      	beq.n	800f44e <osMutexNew+0x26>
      type = attr->attr_bits;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	61bb      	str	r3, [r7, #24]
 800f44c:	e001      	b.n	800f452 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f44e:	2300      	movs	r3, #0
 800f450:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d002      	beq.n	800f462 <osMutexNew+0x3a>
      rmtx = 1U;
 800f45c:	2301      	movs	r3, #1
 800f45e:	617b      	str	r3, [r7, #20]
 800f460:	e001      	b.n	800f466 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f462:	2300      	movs	r3, #0
 800f464:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	f003 0308 	and.w	r3, r3, #8
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d15c      	bne.n	800f52a <osMutexNew+0x102>
      mem = -1;
 800f470:	f04f 33ff 	mov.w	r3, #4294967295
 800f474:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d015      	beq.n	800f4a8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <osMutexNew+0x6a>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	2b4f      	cmp	r3, #79	@ 0x4f
 800f48a:	d902      	bls.n	800f492 <osMutexNew+0x6a>
          mem = 1;
 800f48c:	2301      	movs	r3, #1
 800f48e:	613b      	str	r3, [r7, #16]
 800f490:	e00c      	b.n	800f4ac <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d108      	bne.n	800f4ac <osMutexNew+0x84>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d104      	bne.n	800f4ac <osMutexNew+0x84>
            mem = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	613b      	str	r3, [r7, #16]
 800f4a6:	e001      	b.n	800f4ac <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d112      	bne.n	800f4d8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	2004      	movs	r0, #4
 800f4c0:	f7fc fecd 	bl	800c25e <xQueueCreateMutexStatic>
 800f4c4:	61f8      	str	r0, [r7, #28]
 800f4c6:	e016      	b.n	800f4f6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	2001      	movs	r0, #1
 800f4d0:	f7fc fec5 	bl	800c25e <xQueueCreateMutexStatic>
 800f4d4:	61f8      	str	r0, [r7, #28]
 800f4d6:	e00e      	b.n	800f4f6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10b      	bne.n	800f4f6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d004      	beq.n	800f4ee <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f4e4:	2004      	movs	r0, #4
 800f4e6:	f7fc fea2 	bl	800c22e <xQueueCreateMutex>
 800f4ea:	61f8      	str	r0, [r7, #28]
 800f4ec:	e003      	b.n	800f4f6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	f7fc fe9d 	bl	800c22e <xQueueCreateMutex>
 800f4f4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00c      	beq.n	800f516 <osMutexNew+0xee>
        if (attr != NULL) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d003      	beq.n	800f50a <osMutexNew+0xe2>
          name = attr->name;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	60fb      	str	r3, [r7, #12]
 800f508:	e001      	b.n	800f50e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	69f8      	ldr	r0, [r7, #28]
 800f512:	f7fd fdc7 	bl	800d0a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d006      	beq.n	800f52a <osMutexNew+0x102>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	f043 0301 	orr.w	r3, r3, #1
 800f528:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f52a:	69fb      	ldr	r3, [r7, #28]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f023 0301 	bic.w	r3, r3, #1
 800f544:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f003 0301 	and.w	r3, r3, #1
 800f54c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f54e:	2300      	movs	r3, #0
 800f550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f552:	f3ef 8305 	mrs	r3, IPSR
 800f556:	60bb      	str	r3, [r7, #8]
  return(result);
 800f558:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f55e:	f06f 0305 	mvn.w	r3, #5
 800f562:	617b      	str	r3, [r7, #20]
 800f564:	e02c      	b.n	800f5c0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d103      	bne.n	800f574 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f56c:	f06f 0303 	mvn.w	r3, #3
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	e025      	b.n	800f5c0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d011      	beq.n	800f59e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f57a:	6839      	ldr	r1, [r7, #0]
 800f57c:	6938      	ldr	r0, [r7, #16]
 800f57e:	f7fc febe 	bl	800c2fe <xQueueTakeMutexRecursive>
 800f582:	4603      	mov	r3, r0
 800f584:	2b01      	cmp	r3, #1
 800f586:	d01b      	beq.n	800f5c0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d003      	beq.n	800f596 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f58e:	f06f 0301 	mvn.w	r3, #1
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	e014      	b.n	800f5c0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f596:	f06f 0302 	mvn.w	r3, #2
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	e010      	b.n	800f5c0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	6938      	ldr	r0, [r7, #16]
 800f5a2:	f7fd fa63 	bl	800ca6c <xQueueSemaphoreTake>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d009      	beq.n	800f5c0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d003      	beq.n	800f5ba <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f5b2:	f06f 0301 	mvn.w	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	e002      	b.n	800f5c0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f5ba:	f06f 0302 	mvn.w	r3, #2
 800f5be:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f5c0:	697b      	ldr	r3, [r7, #20]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f023 0301 	bic.w	r3, r3, #1
 800f5d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f003 0301 	and.w	r3, r3, #1
 800f5e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5e6:	f3ef 8305 	mrs	r3, IPSR
 800f5ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d003      	beq.n	800f5fa <osMutexRelease+0x30>
    stat = osErrorISR;
 800f5f2:	f06f 0305 	mvn.w	r3, #5
 800f5f6:	617b      	str	r3, [r7, #20]
 800f5f8:	e01f      	b.n	800f63a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d103      	bne.n	800f608 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f600:	f06f 0303 	mvn.w	r3, #3
 800f604:	617b      	str	r3, [r7, #20]
 800f606:	e018      	b.n	800f63a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d009      	beq.n	800f622 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f60e:	6938      	ldr	r0, [r7, #16]
 800f610:	f7fc fe40 	bl	800c294 <xQueueGiveMutexRecursive>
 800f614:	4603      	mov	r3, r0
 800f616:	2b01      	cmp	r3, #1
 800f618:	d00f      	beq.n	800f63a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f61a:	f06f 0302 	mvn.w	r3, #2
 800f61e:	617b      	str	r3, [r7, #20]
 800f620:	e00b      	b.n	800f63a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f622:	2300      	movs	r3, #0
 800f624:	2200      	movs	r2, #0
 800f626:	2100      	movs	r1, #0
 800f628:	6938      	ldr	r0, [r7, #16]
 800f62a:	f7fc ff0d 	bl	800c448 <xQueueGenericSend>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b01      	cmp	r3, #1
 800f632:	d002      	beq.n	800f63a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f634:	f06f 0302 	mvn.w	r3, #2
 800f638:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f63a:	697b      	ldr	r3, [r7, #20]
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3718      	adds	r7, #24
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f644:	b580      	push	{r7, lr}
 800f646:	b08a      	sub	sp, #40	@ 0x28
 800f648:	af02      	add	r7, sp, #8
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f650:	2300      	movs	r3, #0
 800f652:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f654:	f3ef 8305 	mrs	r3, IPSR
 800f658:	613b      	str	r3, [r7, #16]
  return(result);
 800f65a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d175      	bne.n	800f74c <osSemaphoreNew+0x108>
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d072      	beq.n	800f74c <osSemaphoreNew+0x108>
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d86e      	bhi.n	800f74c <osSemaphoreNew+0x108>
    mem = -1;
 800f66e:	f04f 33ff 	mov.w	r3, #4294967295
 800f672:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d015      	beq.n	800f6a6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d006      	beq.n	800f690 <osSemaphoreNew+0x4c>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	2b4f      	cmp	r3, #79	@ 0x4f
 800f688:	d902      	bls.n	800f690 <osSemaphoreNew+0x4c>
        mem = 1;
 800f68a:	2301      	movs	r3, #1
 800f68c:	61bb      	str	r3, [r7, #24]
 800f68e:	e00c      	b.n	800f6aa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d108      	bne.n	800f6aa <osSemaphoreNew+0x66>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d104      	bne.n	800f6aa <osSemaphoreNew+0x66>
          mem = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	61bb      	str	r3, [r7, #24]
 800f6a4:	e001      	b.n	800f6aa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b0:	d04c      	beq.n	800f74c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d128      	bne.n	800f70a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d10a      	bne.n	800f6d4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	2203      	movs	r2, #3
 800f6c4:	9200      	str	r2, [sp, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	2001      	movs	r0, #1
 800f6cc:	f7fc fcba 	bl	800c044 <xQueueGenericCreateStatic>
 800f6d0:	61f8      	str	r0, [r7, #28]
 800f6d2:	e005      	b.n	800f6e0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f6d4:	2203      	movs	r2, #3
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	2001      	movs	r0, #1
 800f6da:	f7fc fd30 	bl	800c13e <xQueueGenericCreate>
 800f6de:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d022      	beq.n	800f72c <osSemaphoreNew+0xe8>
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01f      	beq.n	800f72c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	69f8      	ldr	r0, [r7, #28]
 800f6f4:	f7fc fea8 	bl	800c448 <xQueueGenericSend>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d016      	beq.n	800f72c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f6fe:	69f8      	ldr	r0, [r7, #28]
 800f700:	f7fd fb84 	bl	800ce0c <vQueueDelete>
            hSemaphore = NULL;
 800f704:	2300      	movs	r3, #0
 800f706:	61fb      	str	r3, [r7, #28]
 800f708:	e010      	b.n	800f72c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d108      	bne.n	800f722 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	461a      	mov	r2, r3
 800f716:	68b9      	ldr	r1, [r7, #8]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f7fc fe27 	bl	800c36c <xQueueCreateCountingSemaphoreStatic>
 800f71e:	61f8      	str	r0, [r7, #28]
 800f720:	e004      	b.n	800f72c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f722:	68b9      	ldr	r1, [r7, #8]
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f7fc fe5a 	bl	800c3de <xQueueCreateCountingSemaphore>
 800f72a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00c      	beq.n	800f74c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	617b      	str	r3, [r7, #20]
 800f73e:	e001      	b.n	800f744 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f744:	6979      	ldr	r1, [r7, #20]
 800f746:	69f8      	ldr	r0, [r7, #28]
 800f748:	f7fd fcac 	bl	800d0a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f74c:	69fb      	ldr	r3, [r7, #28]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3720      	adds	r7, #32
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
	...

0800f758 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d103      	bne.n	800f778 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f770:	f06f 0303 	mvn.w	r3, #3
 800f774:	617b      	str	r3, [r7, #20]
 800f776:	e039      	b.n	800f7ec <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f778:	f3ef 8305 	mrs	r3, IPSR
 800f77c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f77e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f780:	2b00      	cmp	r3, #0
 800f782:	d022      	beq.n	800f7ca <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f78a:	f06f 0303 	mvn.w	r3, #3
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e02c      	b.n	800f7ec <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f792:	2300      	movs	r3, #0
 800f794:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f796:	f107 0308 	add.w	r3, r7, #8
 800f79a:	461a      	mov	r2, r3
 800f79c:	2100      	movs	r1, #0
 800f79e:	6938      	ldr	r0, [r7, #16]
 800f7a0:	f7fd fa74 	bl	800cc8c <xQueueReceiveFromISR>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d003      	beq.n	800f7b2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f7aa:	f06f 0302 	mvn.w	r3, #2
 800f7ae:	617b      	str	r3, [r7, #20]
 800f7b0:	e01c      	b.n	800f7ec <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d019      	beq.n	800f7ec <osSemaphoreAcquire+0x94>
 800f7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f7f8 <osSemaphoreAcquire+0xa0>)
 800f7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	e010      	b.n	800f7ec <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f7ca:	6839      	ldr	r1, [r7, #0]
 800f7cc:	6938      	ldr	r0, [r7, #16]
 800f7ce:	f7fd f94d 	bl	800ca6c <xQueueSemaphoreTake>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d009      	beq.n	800f7ec <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d003      	beq.n	800f7e6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f7de:	f06f 0301 	mvn.w	r3, #1
 800f7e2:	617b      	str	r3, [r7, #20]
 800f7e4:	e002      	b.n	800f7ec <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f7e6:	f06f 0302 	mvn.w	r3, #2
 800f7ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f7ec:	697b      	ldr	r3, [r7, #20]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	e000ed04 	.word	0xe000ed04

0800f7fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f808:	2300      	movs	r3, #0
 800f80a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d103      	bne.n	800f81a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f812:	f06f 0303 	mvn.w	r3, #3
 800f816:	617b      	str	r3, [r7, #20]
 800f818:	e02c      	b.n	800f874 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f81a:	f3ef 8305 	mrs	r3, IPSR
 800f81e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f820:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f822:	2b00      	cmp	r3, #0
 800f824:	d01a      	beq.n	800f85c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f826:	2300      	movs	r3, #0
 800f828:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f82a:	f107 0308 	add.w	r3, r7, #8
 800f82e:	4619      	mov	r1, r3
 800f830:	6938      	ldr	r0, [r7, #16]
 800f832:	f7fc ffa9 	bl	800c788 <xQueueGiveFromISR>
 800f836:	4603      	mov	r3, r0
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d003      	beq.n	800f844 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f83c:	f06f 0302 	mvn.w	r3, #2
 800f840:	617b      	str	r3, [r7, #20]
 800f842:	e017      	b.n	800f874 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d014      	beq.n	800f874 <osSemaphoreRelease+0x78>
 800f84a:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <osSemaphoreRelease+0x84>)
 800f84c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	f3bf 8f4f 	dsb	sy
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	e00b      	b.n	800f874 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f85c:	2300      	movs	r3, #0
 800f85e:	2200      	movs	r2, #0
 800f860:	2100      	movs	r1, #0
 800f862:	6938      	ldr	r0, [r7, #16]
 800f864:	f7fc fdf0 	bl	800c448 <xQueueGenericSend>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d002      	beq.n	800f874 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f86e:	f06f 0302 	mvn.w	r3, #2
 800f872:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f874:	697b      	ldr	r3, [r7, #20]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	e000ed04 	.word	0xe000ed04

0800f884 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f890:	f3ef 8305 	mrs	r3, IPSR
 800f894:	60fb      	str	r3, [r7, #12]
  return(result);
 800f896:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f89c:	f06f 0305 	mvn.w	r3, #5
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	e00e      	b.n	800f8c2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d103      	bne.n	800f8b2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f8aa:	f06f 0303 	mvn.w	r3, #3
 800f8ae:	617b      	str	r3, [r7, #20]
 800f8b0:	e007      	b.n	800f8c2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f8b2:	6938      	ldr	r0, [r7, #16]
 800f8b4:	f7fd fc20 	bl	800d0f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f8bc:	6938      	ldr	r0, [r7, #16]
 800f8be:	f7fd faa5 	bl	800ce0c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f8c2:	697b      	ldr	r3, [r7, #20]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3718      	adds	r7, #24
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08a      	sub	sp, #40	@ 0x28
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8dc:	f3ef 8305 	mrs	r3, IPSR
 800f8e0:	613b      	str	r3, [r7, #16]
  return(result);
 800f8e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d15f      	bne.n	800f9a8 <osMessageQueueNew+0xdc>
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d05c      	beq.n	800f9a8 <osMessageQueueNew+0xdc>
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d059      	beq.n	800f9a8 <osMessageQueueNew+0xdc>
    mem = -1;
 800f8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d029      	beq.n	800f954 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d012      	beq.n	800f92e <osMessageQueueNew+0x62>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	2b4f      	cmp	r3, #79	@ 0x4f
 800f90e:	d90e      	bls.n	800f92e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00a      	beq.n	800f92e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	695a      	ldr	r2, [r3, #20]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68b9      	ldr	r1, [r7, #8]
 800f920:	fb01 f303 	mul.w	r3, r1, r3
 800f924:	429a      	cmp	r2, r3
 800f926:	d302      	bcc.n	800f92e <osMessageQueueNew+0x62>
        mem = 1;
 800f928:	2301      	movs	r3, #1
 800f92a:	61bb      	str	r3, [r7, #24]
 800f92c:	e014      	b.n	800f958 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d110      	bne.n	800f958 <osMessageQueueNew+0x8c>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10c      	bne.n	800f958 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f942:	2b00      	cmp	r3, #0
 800f944:	d108      	bne.n	800f958 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	695b      	ldr	r3, [r3, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d104      	bne.n	800f958 <osMessageQueueNew+0x8c>
          mem = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	61bb      	str	r3, [r7, #24]
 800f952:	e001      	b.n	800f958 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d10b      	bne.n	800f976 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	691a      	ldr	r2, [r3, #16]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	2100      	movs	r1, #0
 800f968:	9100      	str	r1, [sp, #0]
 800f96a:	68b9      	ldr	r1, [r7, #8]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7fc fb69 	bl	800c044 <xQueueGenericCreateStatic>
 800f972:	61f8      	str	r0, [r7, #28]
 800f974:	e008      	b.n	800f988 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d105      	bne.n	800f988 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f97c:	2200      	movs	r2, #0
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7fc fbdc 	bl	800c13e <xQueueGenericCreate>
 800f986:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00c      	beq.n	800f9a8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d003      	beq.n	800f99c <osMessageQueueNew+0xd0>
        name = attr->name;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	617b      	str	r3, [r7, #20]
 800f99a:	e001      	b.n	800f9a0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f99c:	2300      	movs	r3, #0
 800f99e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f9a0:	6979      	ldr	r1, [r7, #20]
 800f9a2:	69f8      	ldr	r0, [r7, #28]
 800f9a4:	f7fd fb7e 	bl	800d0a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f9a8:	69fb      	ldr	r3, [r7, #28]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3720      	adds	r7, #32
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
	...

0800f9b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	603b      	str	r3, [r7, #0]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9cc:	f3ef 8305 	mrs	r3, IPSR
 800f9d0:	617b      	str	r3, [r7, #20]
  return(result);
 800f9d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d028      	beq.n	800fa2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d005      	beq.n	800f9ea <osMessageQueuePut+0x36>
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <osMessageQueuePut+0x36>
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d003      	beq.n	800f9f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f9ea:	f06f 0303 	mvn.w	r3, #3
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	e038      	b.n	800fa64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f9f6:	f107 0210 	add.w	r2, r7, #16
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	68b9      	ldr	r1, [r7, #8]
 800f9fe:	69b8      	ldr	r0, [r7, #24]
 800fa00:	f7fc fe24 	bl	800c64c <xQueueGenericSendFromISR>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d003      	beq.n	800fa12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fa0a:	f06f 0302 	mvn.w	r3, #2
 800fa0e:	61fb      	str	r3, [r7, #28]
 800fa10:	e028      	b.n	800fa64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d025      	beq.n	800fa64 <osMessageQueuePut+0xb0>
 800fa18:	4b15      	ldr	r3, [pc, #84]	@ (800fa70 <osMessageQueuePut+0xbc>)
 800fa1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	f3bf 8f4f 	dsb	sy
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	e01c      	b.n	800fa64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <osMessageQueuePut+0x82>
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d103      	bne.n	800fa3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fa36:	f06f 0303 	mvn.w	r3, #3
 800fa3a:	61fb      	str	r3, [r7, #28]
 800fa3c:	e012      	b.n	800fa64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa3e:	2300      	movs	r3, #0
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	69b8      	ldr	r0, [r7, #24]
 800fa46:	f7fc fcff 	bl	800c448 <xQueueGenericSend>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d009      	beq.n	800fa64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d003      	beq.n	800fa5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fa56:	f06f 0301 	mvn.w	r3, #1
 800fa5a:	61fb      	str	r3, [r7, #28]
 800fa5c:	e002      	b.n	800fa64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fa5e:	f06f 0302 	mvn.w	r3, #2
 800fa62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa64:	69fb      	ldr	r3, [r7, #28]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3720      	adds	r7, #32
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	e000ed04 	.word	0xe000ed04

0800fa74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b088      	sub	sp, #32
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
 800fa80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa8a:	f3ef 8305 	mrs	r3, IPSR
 800fa8e:	617b      	str	r3, [r7, #20]
  return(result);
 800fa90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d028      	beq.n	800fae8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d005      	beq.n	800faa8 <osMessageQueueGet+0x34>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <osMessageQueueGet+0x34>
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d003      	beq.n	800fab0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800faa8:	f06f 0303 	mvn.w	r3, #3
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	e037      	b.n	800fb20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fab0:	2300      	movs	r3, #0
 800fab2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fab4:	f107 0310 	add.w	r3, r7, #16
 800fab8:	461a      	mov	r2, r3
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	69b8      	ldr	r0, [r7, #24]
 800fabe:	f7fd f8e5 	bl	800cc8c <xQueueReceiveFromISR>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d003      	beq.n	800fad0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fac8:	f06f 0302 	mvn.w	r3, #2
 800facc:	61fb      	str	r3, [r7, #28]
 800face:	e027      	b.n	800fb20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d024      	beq.n	800fb20 <osMessageQueueGet+0xac>
 800fad6:	4b15      	ldr	r3, [pc, #84]	@ (800fb2c <osMessageQueueGet+0xb8>)
 800fad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fadc:	601a      	str	r2, [r3, #0]
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	e01b      	b.n	800fb20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <osMessageQueueGet+0x80>
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d103      	bne.n	800fafc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800faf4:	f06f 0303 	mvn.w	r3, #3
 800faf8:	61fb      	str	r3, [r7, #28]
 800fafa:	e011      	b.n	800fb20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	69b8      	ldr	r0, [r7, #24]
 800fb02:	f7fc fed1 	bl	800c8a8 <xQueueReceive>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d009      	beq.n	800fb20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d003      	beq.n	800fb1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fb12:	f06f 0301 	mvn.w	r3, #1
 800fb16:	61fb      	str	r3, [r7, #28]
 800fb18:	e002      	b.n	800fb20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fb1a:	f06f 0302 	mvn.w	r3, #2
 800fb1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fb20:	69fb      	ldr	r3, [r7, #28]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3720      	adds	r7, #32
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	e000ed04 	.word	0xe000ed04

0800fb30 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d102      	bne.n	800fb48 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fb42:	2300      	movs	r3, #0
 800fb44:	617b      	str	r3, [r7, #20]
 800fb46:	e00e      	b.n	800fb66 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb48:	f3ef 8305 	mrs	r3, IPSR
 800fb4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d004      	beq.n	800fb5e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fb54:	6938      	ldr	r0, [r7, #16]
 800fb56:	f7fd f93a 	bl	800cdce <uxQueueMessagesWaitingFromISR>
 800fb5a:	6178      	str	r0, [r7, #20]
 800fb5c:	e003      	b.n	800fb66 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fb5e:	6938      	ldr	r0, [r7, #16]
 800fb60:	f7fd f916 	bl	800cd90 <uxQueueMessagesWaiting>
 800fb64:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800fb66:	697b      	ldr	r3, [r7, #20]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3718      	adds	r7, #24
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb7c:	f3ef 8305 	mrs	r3, IPSR
 800fb80:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb82:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d003      	beq.n	800fb90 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800fb88:	f06f 0305 	mvn.w	r3, #5
 800fb8c:	617b      	str	r3, [r7, #20]
 800fb8e:	e00e      	b.n	800fbae <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d103      	bne.n	800fb9e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800fb96:	f06f 0303 	mvn.w	r3, #3
 800fb9a:	617b      	str	r3, [r7, #20]
 800fb9c:	e007      	b.n	800fbae <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800fb9e:	6938      	ldr	r0, [r7, #16]
 800fba0:	f7fd faaa 	bl	800d0f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800fba8:	6938      	ldr	r0, [r7, #16]
 800fbaa:	f7fd f92f 	bl	800ce0c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800fbae:	697b      	ldr	r3, [r7, #20]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3718      	adds	r7, #24
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	4a07      	ldr	r2, [pc, #28]	@ (800fbe4 <vApplicationGetIdleTaskMemory+0x2c>)
 800fbc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	4a06      	ldr	r2, [pc, #24]	@ (800fbe8 <vApplicationGetIdleTaskMemory+0x30>)
 800fbce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbd6:	601a      	str	r2, [r3, #0]
}
 800fbd8:	bf00      	nop
 800fbda:	3714      	adds	r7, #20
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr
 800fbe4:	20001018 	.word	0x20001018
 800fbe8:	20001074 	.word	0x20001074

0800fbec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4a07      	ldr	r2, [pc, #28]	@ (800fc18 <vApplicationGetTimerTaskMemory+0x2c>)
 800fbfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	4a06      	ldr	r2, [pc, #24]	@ (800fc1c <vApplicationGetTimerTaskMemory+0x30>)
 800fc02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fc0a:	601a      	str	r2, [r3, #0]
}
 800fc0c:	bf00      	nop
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	20001874 	.word	0x20001874
 800fc1c:	200018d0 	.word	0x200018d0

0800fc20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b08a      	sub	sp, #40	@ 0x28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc2c:	f7fd fde2 	bl	800d7f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc30:	4b5c      	ldr	r3, [pc, #368]	@ (800fda4 <pvPortMalloc+0x184>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc38:	f000 f924 	bl	800fe84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc3c:	4b5a      	ldr	r3, [pc, #360]	@ (800fda8 <pvPortMalloc+0x188>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4013      	ands	r3, r2
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f040 8095 	bne.w	800fd74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d01e      	beq.n	800fc8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc50:	2208      	movs	r2, #8
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4413      	add	r3, r2
 800fc56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f003 0307 	and.w	r3, r3, #7
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d015      	beq.n	800fc8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f023 0307 	bic.w	r3, r3, #7
 800fc68:	3308      	adds	r3, #8
 800fc6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f003 0307 	and.w	r3, r3, #7
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d00b      	beq.n	800fc8e <pvPortMalloc+0x6e>
	__asm volatile
 800fc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7a:	f383 8811 	msr	BASEPRI, r3
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	f3bf 8f4f 	dsb	sy
 800fc86:	617b      	str	r3, [r7, #20]
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	e7fd      	b.n	800fc8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d06f      	beq.n	800fd74 <pvPortMalloc+0x154>
 800fc94:	4b45      	ldr	r3, [pc, #276]	@ (800fdac <pvPortMalloc+0x18c>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d86a      	bhi.n	800fd74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc9e:	4b44      	ldr	r3, [pc, #272]	@ (800fdb0 <pvPortMalloc+0x190>)
 800fca0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fca2:	4b43      	ldr	r3, [pc, #268]	@ (800fdb0 <pvPortMalloc+0x190>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fca8:	e004      	b.n	800fcb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d903      	bls.n	800fcc6 <pvPortMalloc+0xa6>
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1f1      	bne.n	800fcaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcc6:	4b37      	ldr	r3, [pc, #220]	@ (800fda4 <pvPortMalloc+0x184>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d051      	beq.n	800fd74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fcd0:	6a3b      	ldr	r3, [r7, #32]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	4413      	add	r3, r2
 800fcd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	1ad2      	subs	r2, r2, r3
 800fcea:	2308      	movs	r3, #8
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d920      	bls.n	800fd34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	f003 0307 	and.w	r3, r3, #7
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d00b      	beq.n	800fd1c <pvPortMalloc+0xfc>
	__asm volatile
 800fd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	613b      	str	r3, [r7, #16]
}
 800fd16:	bf00      	nop
 800fd18:	bf00      	nop
 800fd1a:	e7fd      	b.n	800fd18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	1ad2      	subs	r2, r2, r3
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd2e:	69b8      	ldr	r0, [r7, #24]
 800fd30:	f000 f90a 	bl	800ff48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd34:	4b1d      	ldr	r3, [pc, #116]	@ (800fdac <pvPortMalloc+0x18c>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	4a1b      	ldr	r2, [pc, #108]	@ (800fdac <pvPortMalloc+0x18c>)
 800fd40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd42:	4b1a      	ldr	r3, [pc, #104]	@ (800fdac <pvPortMalloc+0x18c>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb4 <pvPortMalloc+0x194>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d203      	bcs.n	800fd56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd4e:	4b17      	ldr	r3, [pc, #92]	@ (800fdac <pvPortMalloc+0x18c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a18      	ldr	r2, [pc, #96]	@ (800fdb4 <pvPortMalloc+0x194>)
 800fd54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	4b13      	ldr	r3, [pc, #76]	@ (800fda8 <pvPortMalloc+0x188>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	431a      	orrs	r2, r3
 800fd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd6a:	4b13      	ldr	r3, [pc, #76]	@ (800fdb8 <pvPortMalloc+0x198>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	4a11      	ldr	r2, [pc, #68]	@ (800fdb8 <pvPortMalloc+0x198>)
 800fd72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd74:	f7fd fd4c 	bl	800d810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <pvPortMalloc+0x17a>
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	60fb      	str	r3, [r7, #12]
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop
 800fd98:	e7fd      	b.n	800fd96 <pvPortMalloc+0x176>
	return pvReturn;
 800fd9a:	69fb      	ldr	r3, [r7, #28]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3728      	adds	r7, #40	@ 0x28
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	20008cd8 	.word	0x20008cd8
 800fda8:	20008cec 	.word	0x20008cec
 800fdac:	20008cdc 	.word	0x20008cdc
 800fdb0:	20008cd0 	.word	0x20008cd0
 800fdb4:	20008ce0 	.word	0x20008ce0
 800fdb8:	20008ce4 	.word	0x20008ce4

0800fdbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d04f      	beq.n	800fe6e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fdce:	2308      	movs	r3, #8
 800fdd0:	425b      	negs	r3, r3
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	685a      	ldr	r2, [r3, #4]
 800fde0:	4b25      	ldr	r3, [pc, #148]	@ (800fe78 <vPortFree+0xbc>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4013      	ands	r3, r2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d10b      	bne.n	800fe02 <vPortFree+0x46>
	__asm volatile
 800fdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	60fb      	str	r3, [r7, #12]
}
 800fdfc:	bf00      	nop
 800fdfe:	bf00      	nop
 800fe00:	e7fd      	b.n	800fdfe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00b      	beq.n	800fe22 <vPortFree+0x66>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	60bb      	str	r3, [r7, #8]
}
 800fe1c:	bf00      	nop
 800fe1e:	bf00      	nop
 800fe20:	e7fd      	b.n	800fe1e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	685a      	ldr	r2, [r3, #4]
 800fe26:	4b14      	ldr	r3, [pc, #80]	@ (800fe78 <vPortFree+0xbc>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01e      	beq.n	800fe6e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d11a      	bne.n	800fe6e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	4b0e      	ldr	r3, [pc, #56]	@ (800fe78 <vPortFree+0xbc>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	43db      	mvns	r3, r3
 800fe42:	401a      	ands	r2, r3
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe48:	f7fd fcd4 	bl	800d7f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	685a      	ldr	r2, [r3, #4]
 800fe50:	4b0a      	ldr	r3, [pc, #40]	@ (800fe7c <vPortFree+0xc0>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4413      	add	r3, r2
 800fe56:	4a09      	ldr	r2, [pc, #36]	@ (800fe7c <vPortFree+0xc0>)
 800fe58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe5a:	6938      	ldr	r0, [r7, #16]
 800fe5c:	f000 f874 	bl	800ff48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe60:	4b07      	ldr	r3, [pc, #28]	@ (800fe80 <vPortFree+0xc4>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	4a06      	ldr	r2, [pc, #24]	@ (800fe80 <vPortFree+0xc4>)
 800fe68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe6a:	f7fd fcd1 	bl	800d810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe6e:	bf00      	nop
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20008cec 	.word	0x20008cec
 800fe7c:	20008cdc 	.word	0x20008cdc
 800fe80:	20008ce8 	.word	0x20008ce8

0800fe84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe8a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800fe8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe90:	4b27      	ldr	r3, [pc, #156]	@ (800ff30 <prvHeapInit+0xac>)
 800fe92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f003 0307 	and.w	r3, r3, #7
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00c      	beq.n	800feb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	3307      	adds	r3, #7
 800fea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f023 0307 	bic.w	r3, r3, #7
 800feaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ff30 <prvHeapInit+0xac>)
 800feb4:	4413      	add	r3, r2
 800feb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800febc:	4a1d      	ldr	r2, [pc, #116]	@ (800ff34 <prvHeapInit+0xb0>)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fec2:	4b1c      	ldr	r3, [pc, #112]	@ (800ff34 <prvHeapInit+0xb0>)
 800fec4:	2200      	movs	r2, #0
 800fec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	68ba      	ldr	r2, [r7, #8]
 800fecc:	4413      	add	r3, r2
 800fece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fed0:	2208      	movs	r2, #8
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f023 0307 	bic.w	r3, r3, #7
 800fede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	4a15      	ldr	r2, [pc, #84]	@ (800ff38 <prvHeapInit+0xb4>)
 800fee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fee6:	4b14      	ldr	r3, [pc, #80]	@ (800ff38 <prvHeapInit+0xb4>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2200      	movs	r2, #0
 800feec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800feee:	4b12      	ldr	r3, [pc, #72]	@ (800ff38 <prvHeapInit+0xb4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	1ad2      	subs	r2, r2, r3
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff04:	4b0c      	ldr	r3, [pc, #48]	@ (800ff38 <prvHeapInit+0xb4>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	4a0a      	ldr	r2, [pc, #40]	@ (800ff3c <prvHeapInit+0xb8>)
 800ff12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	4a09      	ldr	r2, [pc, #36]	@ (800ff40 <prvHeapInit+0xbc>)
 800ff1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff1c:	4b09      	ldr	r3, [pc, #36]	@ (800ff44 <prvHeapInit+0xc0>)
 800ff1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff22:	601a      	str	r2, [r3, #0]
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	200028d0 	.word	0x200028d0
 800ff34:	20008cd0 	.word	0x20008cd0
 800ff38:	20008cd8 	.word	0x20008cd8
 800ff3c:	20008ce0 	.word	0x20008ce0
 800ff40:	20008cdc 	.word	0x20008cdc
 800ff44:	20008cec 	.word	0x20008cec

0800ff48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff50:	4b28      	ldr	r3, [pc, #160]	@ (800fff4 <prvInsertBlockIntoFreeList+0xac>)
 800ff52:	60fb      	str	r3, [r7, #12]
 800ff54:	e002      	b.n	800ff5c <prvInsertBlockIntoFreeList+0x14>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	60fb      	str	r3, [r7, #12]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d8f7      	bhi.n	800ff56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	4413      	add	r3, r2
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d108      	bne.n	800ff8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	685a      	ldr	r2, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	441a      	add	r2, r3
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	441a      	add	r2, r3
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d118      	bne.n	800ffd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	4b15      	ldr	r3, [pc, #84]	@ (800fff8 <prvInsertBlockIntoFreeList+0xb0>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d00d      	beq.n	800ffc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685a      	ldr	r2, [r3, #4]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	441a      	add	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	e008      	b.n	800ffd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fff8 <prvInsertBlockIntoFreeList+0xb0>)
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	e003      	b.n	800ffd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d002      	beq.n	800ffe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffe6:	bf00      	nop
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	20008cd0 	.word	0x20008cd0
 800fff8:	20008cd8 	.word	0x20008cd8

0800fffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	3b04      	subs	r3, #4
 801000c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	3b04      	subs	r3, #4
 801001a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	f023 0201 	bic.w	r2, r3, #1
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	3b04      	subs	r3, #4
 801002a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801002c:	4a0c      	ldr	r2, [pc, #48]	@ (8010060 <pxPortInitialiseStack+0x64>)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	3b14      	subs	r3, #20
 8010036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3b04      	subs	r3, #4
 8010042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f06f 0202 	mvn.w	r2, #2
 801004a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	3b20      	subs	r3, #32
 8010050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010052:	68fb      	ldr	r3, [r7, #12]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	08010065 	.word	0x08010065

08010064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801006a:	2300      	movs	r3, #0
 801006c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801006e:	4b13      	ldr	r3, [pc, #76]	@ (80100bc <prvTaskExitError+0x58>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010076:	d00b      	beq.n	8010090 <prvTaskExitError+0x2c>
	__asm volatile
 8010078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007c:	f383 8811 	msr	BASEPRI, r3
 8010080:	f3bf 8f6f 	isb	sy
 8010084:	f3bf 8f4f 	dsb	sy
 8010088:	60fb      	str	r3, [r7, #12]
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	e7fd      	b.n	801008c <prvTaskExitError+0x28>
	__asm volatile
 8010090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	60bb      	str	r3, [r7, #8]
}
 80100a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100a4:	bf00      	nop
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d0fc      	beq.n	80100a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100ac:	bf00      	nop
 80100ae:	bf00      	nop
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	20000030 	.word	0x20000030

080100c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100c0:	4b07      	ldr	r3, [pc, #28]	@ (80100e0 <pxCurrentTCBConst2>)
 80100c2:	6819      	ldr	r1, [r3, #0]
 80100c4:	6808      	ldr	r0, [r1, #0]
 80100c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ca:	f380 8809 	msr	PSP, r0
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	f04f 0000 	mov.w	r0, #0
 80100d6:	f380 8811 	msr	BASEPRI, r0
 80100da:	4770      	bx	lr
 80100dc:	f3af 8000 	nop.w

080100e0 <pxCurrentTCBConst2>:
 80100e0:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop

080100e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100e8:	4808      	ldr	r0, [pc, #32]	@ (801010c <prvPortStartFirstTask+0x24>)
 80100ea:	6800      	ldr	r0, [r0, #0]
 80100ec:	6800      	ldr	r0, [r0, #0]
 80100ee:	f380 8808 	msr	MSP, r0
 80100f2:	f04f 0000 	mov.w	r0, #0
 80100f6:	f380 8814 	msr	CONTROL, r0
 80100fa:	b662      	cpsie	i
 80100fc:	b661      	cpsie	f
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	df00      	svc	0
 8010108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801010a:	bf00      	nop
 801010c:	e000ed08 	.word	0xe000ed08

08010110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010116:	4b47      	ldr	r3, [pc, #284]	@ (8010234 <xPortStartScheduler+0x124>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a47      	ldr	r2, [pc, #284]	@ (8010238 <xPortStartScheduler+0x128>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d10b      	bne.n	8010138 <xPortStartScheduler+0x28>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	613b      	str	r3, [r7, #16]
}
 8010132:	bf00      	nop
 8010134:	bf00      	nop
 8010136:	e7fd      	b.n	8010134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010138:	4b3e      	ldr	r3, [pc, #248]	@ (8010234 <xPortStartScheduler+0x124>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a3f      	ldr	r2, [pc, #252]	@ (801023c <xPortStartScheduler+0x12c>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d10b      	bne.n	801015a <xPortStartScheduler+0x4a>
	__asm volatile
 8010142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010146:	f383 8811 	msr	BASEPRI, r3
 801014a:	f3bf 8f6f 	isb	sy
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	60fb      	str	r3, [r7, #12]
}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	e7fd      	b.n	8010156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801015a:	4b39      	ldr	r3, [pc, #228]	@ (8010240 <xPortStartScheduler+0x130>)
 801015c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	b2db      	uxtb	r3, r3
 8010164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	22ff      	movs	r2, #255	@ 0xff
 801016a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	b2db      	uxtb	r3, r3
 8010178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801017c:	b2da      	uxtb	r2, r3
 801017e:	4b31      	ldr	r3, [pc, #196]	@ (8010244 <xPortStartScheduler+0x134>)
 8010180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010182:	4b31      	ldr	r3, [pc, #196]	@ (8010248 <xPortStartScheduler+0x138>)
 8010184:	2207      	movs	r2, #7
 8010186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010188:	e009      	b.n	801019e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801018a:	4b2f      	ldr	r3, [pc, #188]	@ (8010248 <xPortStartScheduler+0x138>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	3b01      	subs	r3, #1
 8010190:	4a2d      	ldr	r2, [pc, #180]	@ (8010248 <xPortStartScheduler+0x138>)
 8010192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010194:	78fb      	ldrb	r3, [r7, #3]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	005b      	lsls	r3, r3, #1
 801019a:	b2db      	uxtb	r3, r3
 801019c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801019e:	78fb      	ldrb	r3, [r7, #3]
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101a6:	2b80      	cmp	r3, #128	@ 0x80
 80101a8:	d0ef      	beq.n	801018a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101aa:	4b27      	ldr	r3, [pc, #156]	@ (8010248 <xPortStartScheduler+0x138>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f1c3 0307 	rsb	r3, r3, #7
 80101b2:	2b04      	cmp	r3, #4
 80101b4:	d00b      	beq.n	80101ce <xPortStartScheduler+0xbe>
	__asm volatile
 80101b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	60bb      	str	r3, [r7, #8]
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	e7fd      	b.n	80101ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010248 <xPortStartScheduler+0x138>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	021b      	lsls	r3, r3, #8
 80101d4:	4a1c      	ldr	r2, [pc, #112]	@ (8010248 <xPortStartScheduler+0x138>)
 80101d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101d8:	4b1b      	ldr	r3, [pc, #108]	@ (8010248 <xPortStartScheduler+0x138>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80101e0:	4a19      	ldr	r2, [pc, #100]	@ (8010248 <xPortStartScheduler+0x138>)
 80101e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101ec:	4b17      	ldr	r3, [pc, #92]	@ (801024c <xPortStartScheduler+0x13c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a16      	ldr	r2, [pc, #88]	@ (801024c <xPortStartScheduler+0x13c>)
 80101f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80101f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101f8:	4b14      	ldr	r3, [pc, #80]	@ (801024c <xPortStartScheduler+0x13c>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a13      	ldr	r2, [pc, #76]	@ (801024c <xPortStartScheduler+0x13c>)
 80101fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010204:	f000 f8da 	bl	80103bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010208:	4b11      	ldr	r3, [pc, #68]	@ (8010250 <xPortStartScheduler+0x140>)
 801020a:	2200      	movs	r2, #0
 801020c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801020e:	f000 f8f9 	bl	8010404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010212:	4b10      	ldr	r3, [pc, #64]	@ (8010254 <xPortStartScheduler+0x144>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a0f      	ldr	r2, [pc, #60]	@ (8010254 <xPortStartScheduler+0x144>)
 8010218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801021c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801021e:	f7ff ff63 	bl	80100e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010222:	f7fd fcfd 	bl	800dc20 <vTaskSwitchContext>
	prvTaskExitError();
 8010226:	f7ff ff1d 	bl	8010064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	e000ed00 	.word	0xe000ed00
 8010238:	410fc271 	.word	0x410fc271
 801023c:	410fc270 	.word	0x410fc270
 8010240:	e000e400 	.word	0xe000e400
 8010244:	20008cf0 	.word	0x20008cf0
 8010248:	20008cf4 	.word	0x20008cf4
 801024c:	e000ed20 	.word	0xe000ed20
 8010250:	20000030 	.word	0x20000030
 8010254:	e000ef34 	.word	0xe000ef34

08010258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	607b      	str	r3, [r7, #4]
}
 8010270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010272:	4b10      	ldr	r3, [pc, #64]	@ (80102b4 <vPortEnterCritical+0x5c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	3301      	adds	r3, #1
 8010278:	4a0e      	ldr	r2, [pc, #56]	@ (80102b4 <vPortEnterCritical+0x5c>)
 801027a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801027c:	4b0d      	ldr	r3, [pc, #52]	@ (80102b4 <vPortEnterCritical+0x5c>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d110      	bne.n	80102a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010284:	4b0c      	ldr	r3, [pc, #48]	@ (80102b8 <vPortEnterCritical+0x60>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00b      	beq.n	80102a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	603b      	str	r3, [r7, #0]
}
 80102a0:	bf00      	nop
 80102a2:	bf00      	nop
 80102a4:	e7fd      	b.n	80102a2 <vPortEnterCritical+0x4a>
	}
}
 80102a6:	bf00      	nop
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	20000030 	.word	0x20000030
 80102b8:	e000ed04 	.word	0xe000ed04

080102bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102c2:	4b12      	ldr	r3, [pc, #72]	@ (801030c <vPortExitCritical+0x50>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d10b      	bne.n	80102e2 <vPortExitCritical+0x26>
	__asm volatile
 80102ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	607b      	str	r3, [r7, #4]
}
 80102dc:	bf00      	nop
 80102de:	bf00      	nop
 80102e0:	e7fd      	b.n	80102de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102e2:	4b0a      	ldr	r3, [pc, #40]	@ (801030c <vPortExitCritical+0x50>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	4a08      	ldr	r2, [pc, #32]	@ (801030c <vPortExitCritical+0x50>)
 80102ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102ec:	4b07      	ldr	r3, [pc, #28]	@ (801030c <vPortExitCritical+0x50>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <vPortExitCritical+0x44>
 80102f4:	2300      	movs	r3, #0
 80102f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	f383 8811 	msr	BASEPRI, r3
}
 80102fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20000030 	.word	0x20000030

08010310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010310:	f3ef 8009 	mrs	r0, PSP
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	4b15      	ldr	r3, [pc, #84]	@ (8010370 <pxCurrentTCBConst>)
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	f01e 0f10 	tst.w	lr, #16
 8010320:	bf08      	it	eq
 8010322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032a:	6010      	str	r0, [r2, #0]
 801032c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010334:	f380 8811 	msr	BASEPRI, r0
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f7fd fc6e 	bl	800dc20 <vTaskSwitchContext>
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	f380 8811 	msr	BASEPRI, r0
 801034c:	bc09      	pop	{r0, r3}
 801034e:	6819      	ldr	r1, [r3, #0]
 8010350:	6808      	ldr	r0, [r1, #0]
 8010352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010356:	f01e 0f10 	tst.w	lr, #16
 801035a:	bf08      	it	eq
 801035c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010360:	f380 8809 	msr	PSP, r0
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	f3af 8000 	nop.w

08010370 <pxCurrentTCBConst>:
 8010370:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010374:	bf00      	nop
 8010376:	bf00      	nop

08010378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	607b      	str	r3, [r7, #4]
}
 8010390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010392:	f7fd fb8b 	bl	800daac <xTaskIncrementTick>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d003      	beq.n	80103a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801039c:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <xPortSysTickHandler+0x40>)
 801039e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	2300      	movs	r3, #0
 80103a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	f383 8811 	msr	BASEPRI, r3
}
 80103ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	e000ed04 	.word	0xe000ed04

080103bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103c0:	4b0b      	ldr	r3, [pc, #44]	@ (80103f0 <vPortSetupTimerInterrupt+0x34>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103c6:	4b0b      	ldr	r3, [pc, #44]	@ (80103f4 <vPortSetupTimerInterrupt+0x38>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103cc:	4b0a      	ldr	r3, [pc, #40]	@ (80103f8 <vPortSetupTimerInterrupt+0x3c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a0a      	ldr	r2, [pc, #40]	@ (80103fc <vPortSetupTimerInterrupt+0x40>)
 80103d2:	fba2 2303 	umull	r2, r3, r2, r3
 80103d6:	099b      	lsrs	r3, r3, #6
 80103d8:	4a09      	ldr	r2, [pc, #36]	@ (8010400 <vPortSetupTimerInterrupt+0x44>)
 80103da:	3b01      	subs	r3, #1
 80103dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103de:	4b04      	ldr	r3, [pc, #16]	@ (80103f0 <vPortSetupTimerInterrupt+0x34>)
 80103e0:	2207      	movs	r2, #7
 80103e2:	601a      	str	r2, [r3, #0]
}
 80103e4:	bf00      	nop
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	e000e010 	.word	0xe000e010
 80103f4:	e000e018 	.word	0xe000e018
 80103f8:	20000020 	.word	0x20000020
 80103fc:	10624dd3 	.word	0x10624dd3
 8010400:	e000e014 	.word	0xe000e014

08010404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010414 <vPortEnableVFP+0x10>
 8010408:	6801      	ldr	r1, [r0, #0]
 801040a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801040e:	6001      	str	r1, [r0, #0]
 8010410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010412:	bf00      	nop
 8010414:	e000ed88 	.word	0xe000ed88

08010418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801041e:	f3ef 8305 	mrs	r3, IPSR
 8010422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2b0f      	cmp	r3, #15
 8010428:	d915      	bls.n	8010456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801042a:	4a18      	ldr	r2, [pc, #96]	@ (801048c <vPortValidateInterruptPriority+0x74>)
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	4413      	add	r3, r2
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010434:	4b16      	ldr	r3, [pc, #88]	@ (8010490 <vPortValidateInterruptPriority+0x78>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	7afa      	ldrb	r2, [r7, #11]
 801043a:	429a      	cmp	r2, r3
 801043c:	d20b      	bcs.n	8010456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010442:	f383 8811 	msr	BASEPRI, r3
 8010446:	f3bf 8f6f 	isb	sy
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	607b      	str	r3, [r7, #4]
}
 8010450:	bf00      	nop
 8010452:	bf00      	nop
 8010454:	e7fd      	b.n	8010452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010456:	4b0f      	ldr	r3, [pc, #60]	@ (8010494 <vPortValidateInterruptPriority+0x7c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801045e:	4b0e      	ldr	r3, [pc, #56]	@ (8010498 <vPortValidateInterruptPriority+0x80>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	d90b      	bls.n	801047e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	603b      	str	r3, [r7, #0]
}
 8010478:	bf00      	nop
 801047a:	bf00      	nop
 801047c:	e7fd      	b.n	801047a <vPortValidateInterruptPriority+0x62>
	}
 801047e:	bf00      	nop
 8010480:	3714      	adds	r7, #20
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	e000e3f0 	.word	0xe000e3f0
 8010490:	20008cf0 	.word	0x20008cf0
 8010494:	e000ed0c 	.word	0xe000ed0c
 8010498:	20008cf4 	.word	0x20008cf4

0801049c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	4603      	mov	r3, r0
 80104a4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80104a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dc04      	bgt.n	80104b8 <err_to_errno+0x1c>
 80104ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b2:	f113 0f10 	cmn.w	r3, #16
 80104b6:	da01      	bge.n	80104bc <err_to_errno+0x20>
    return EIO;
 80104b8:	2305      	movs	r3, #5
 80104ba:	e005      	b.n	80104c8 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80104bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104c0:	425b      	negs	r3, r3
 80104c2:	4a04      	ldr	r2, [pc, #16]	@ (80104d4 <err_to_errno+0x38>)
 80104c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	08028ba4 	.word	0x08028ba4

080104d8 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	60fb      	str	r3, [r7, #12]

  netif_set_addr( msg->netif,
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6858      	ldr	r0, [r3, #4]
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6899      	ldr	r1, [r3, #8]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	f009 fdec 	bl	801a0d0 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b084      	sub	sp, #16
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d007      	beq.n	8010526 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	68fa      	ldr	r2, [r7, #12]
 801051c:	6852      	ldr	r2, [r2, #4]
 801051e:	4610      	mov	r0, r2
 8010520:	4798      	blx	r3
 8010522:	4603      	mov	r3, r0
 8010524:	e006      	b.n	8010534 <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	689b      	ldr	r3, [r3, #8]
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	6852      	ldr	r2, [r2, #4]
 801052e:	4610      	mov	r0, r2
 8010530:	4798      	blx	r3
    return ERR_OK;
 8010532:	2300      	movs	r3, #0
  }
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08e      	sub	sp, #56	@ 0x38
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d101      	bne.n	8010554 <netifapi_netif_set_addr+0x18>
    ipaddr = IP4_ADDR_ANY4;
 8010550:	4b11      	ldr	r3, [pc, #68]	@ (8010598 <netifapi_netif_set_addr+0x5c>)
 8010552:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <netifapi_netif_set_addr+0x22>
    netmask = IP4_ADDR_ANY4;
 801055a:	4b0f      	ldr	r3, [pc, #60]	@ (8010598 <netifapi_netif_set_addr+0x5c>)
 801055c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <netifapi_netif_set_addr+0x2c>
    gw = IP4_ADDR_ANY4;
 8010564:	4b0c      	ldr	r3, [pc, #48]	@ (8010598 <netifapi_netif_set_addr+0x5c>)
 8010566:	603b      	str	r3, [r7, #0]
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	623b      	str	r3, [r7, #32]
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	627b      	str	r3, [r7, #36]	@ 0x24
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 8010578:	f107 0314 	add.w	r3, r7, #20
 801057c:	4619      	mov	r1, r3
 801057e:	4807      	ldr	r0, [pc, #28]	@ (801059c <netifapi_netif_set_addr+0x60>)
 8010580:	f003 feb0 	bl	80142e4 <tcpip_api_call>
 8010584:	4603      	mov	r3, r0
 8010586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 801058a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801058e:	4618      	mov	r0, r3
 8010590:	3738      	adds	r7, #56	@ 0x38
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	08028bec 	.word	0x08028bec
 801059c:	080104d9 	.word	0x080104d9

080105a0 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b08e      	sub	sp, #56	@ 0x38
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 80105b8:	f107 0314 	add.w	r3, r7, #20
 80105bc:	4619      	mov	r1, r3
 80105be:	4806      	ldr	r0, [pc, #24]	@ (80105d8 <netifapi_netif_common+0x38>)
 80105c0:	f003 fe90 	bl	80142e4 <tcpip_api_call>
 80105c4:	4603      	mov	r3, r0
 80105c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 80105ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3738      	adds	r7, #56	@ 0x38
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08010503 	.word	0x08010503

080105dc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80105e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105ea:	f113 0f0d 	cmn.w	r3, #13
 80105ee:	d009      	beq.n	8010604 <lwip_netconn_err_to_msg+0x28>
 80105f0:	f113 0f0d 	cmn.w	r3, #13
 80105f4:	dc0c      	bgt.n	8010610 <lwip_netconn_err_to_msg+0x34>
 80105f6:	f113 0f0f 	cmn.w	r3, #15
 80105fa:	d007      	beq.n	801060c <lwip_netconn_err_to_msg+0x30>
 80105fc:	f113 0f0e 	cmn.w	r3, #14
 8010600:	d002      	beq.n	8010608 <lwip_netconn_err_to_msg+0x2c>
 8010602:	e005      	b.n	8010610 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010604:	4b0a      	ldr	r3, [pc, #40]	@ (8010630 <lwip_netconn_err_to_msg+0x54>)
 8010606:	e00e      	b.n	8010626 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010608:	4b0a      	ldr	r3, [pc, #40]	@ (8010634 <lwip_netconn_err_to_msg+0x58>)
 801060a:	e00c      	b.n	8010626 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801060c:	4b0a      	ldr	r3, [pc, #40]	@ (8010638 <lwip_netconn_err_to_msg+0x5c>)
 801060e:	e00a      	b.n	8010626 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d005      	beq.n	8010624 <lwip_netconn_err_to_msg+0x48>
 8010618:	4b08      	ldr	r3, [pc, #32]	@ (801063c <lwip_netconn_err_to_msg+0x60>)
 801061a:	227d      	movs	r2, #125	@ 0x7d
 801061c:	4908      	ldr	r1, [pc, #32]	@ (8010640 <lwip_netconn_err_to_msg+0x64>)
 801061e:	4809      	ldr	r0, [pc, #36]	@ (8010644 <lwip_netconn_err_to_msg+0x68>)
 8010620:	f012 f97a 	bl	8022918 <iprintf>
      return NULL;
 8010624:	2300      	movs	r3, #0
  }
}
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	08028be8 	.word	0x08028be8
 8010634:	08028be9 	.word	0x08028be9
 8010638:	08028bea 	.word	0x08028bea
 801063c:	08023fcc 	.word	0x08023fcc
 8010640:	08024044 	.word	0x08024044
 8010644:	08024054 	.word	0x08024054

08010648 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d105      	bne.n	8010664 <lwip_netconn_is_err_msg+0x1c>
 8010658:	4b12      	ldr	r3, [pc, #72]	@ (80106a4 <lwip_netconn_is_err_msg+0x5c>)
 801065a:	2285      	movs	r2, #133	@ 0x85
 801065c:	4912      	ldr	r1, [pc, #72]	@ (80106a8 <lwip_netconn_is_err_msg+0x60>)
 801065e:	4813      	ldr	r0, [pc, #76]	@ (80106ac <lwip_netconn_is_err_msg+0x64>)
 8010660:	f012 f95a 	bl	8022918 <iprintf>

  if (msg == &netconn_aborted) {
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4a12      	ldr	r2, [pc, #72]	@ (80106b0 <lwip_netconn_is_err_msg+0x68>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d104      	bne.n	8010676 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	22f3      	movs	r2, #243	@ 0xf3
 8010670:	701a      	strb	r2, [r3, #0]
    return 1;
 8010672:	2301      	movs	r3, #1
 8010674:	e012      	b.n	801069c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a0e      	ldr	r2, [pc, #56]	@ (80106b4 <lwip_netconn_is_err_msg+0x6c>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d104      	bne.n	8010688 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	22f2      	movs	r2, #242	@ 0xf2
 8010682:	701a      	strb	r2, [r3, #0]
    return 1;
 8010684:	2301      	movs	r3, #1
 8010686:	e009      	b.n	801069c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4a0b      	ldr	r2, [pc, #44]	@ (80106b8 <lwip_netconn_is_err_msg+0x70>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d104      	bne.n	801069a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	22f1      	movs	r2, #241	@ 0xf1
 8010694:	701a      	strb	r2, [r3, #0]
    return 1;
 8010696:	2301      	movs	r3, #1
 8010698:	e000      	b.n	801069c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	08023fcc 	.word	0x08023fcc
 80106a8:	0802407c 	.word	0x0802407c
 80106ac:	08024054 	.word	0x08024054
 80106b0:	08028be8 	.word	0x08028be8
 80106b4:	08028be9 	.word	0x08028be9
 80106b8:	08028bea 	.word	0x08028bea

080106bc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
 80106c8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d105      	bne.n	80106dc <recv_udp+0x20>
 80106d0:	4b34      	ldr	r3, [pc, #208]	@ (80107a4 <recv_udp+0xe8>)
 80106d2:	22e5      	movs	r2, #229	@ 0xe5
 80106d4:	4934      	ldr	r1, [pc, #208]	@ (80107a8 <recv_udp+0xec>)
 80106d6:	4835      	ldr	r0, [pc, #212]	@ (80107ac <recv_udp+0xf0>)
 80106d8:	f012 f91e 	bl	8022918 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d105      	bne.n	80106ee <recv_udp+0x32>
 80106e2:	4b30      	ldr	r3, [pc, #192]	@ (80107a4 <recv_udp+0xe8>)
 80106e4:	22e6      	movs	r2, #230	@ 0xe6
 80106e6:	4932      	ldr	r1, [pc, #200]	@ (80107b0 <recv_udp+0xf4>)
 80106e8:	4830      	ldr	r0, [pc, #192]	@ (80107ac <recv_udp+0xf0>)
 80106ea:	f012 f915 	bl	8022918 <iprintf>
  conn = (struct netconn *)arg;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d103      	bne.n	8010700 <recv_udp+0x44>
    pbuf_free(p);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f00a fa33 	bl	801ab64 <pbuf_free>
    return;
 80106fe:	e04d      	b.n	801079c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	d005      	beq.n	8010716 <recv_udp+0x5a>
 801070a:	4b26      	ldr	r3, [pc, #152]	@ (80107a4 <recv_udp+0xe8>)
 801070c:	22ee      	movs	r2, #238	@ 0xee
 801070e:	4929      	ldr	r1, [pc, #164]	@ (80107b4 <recv_udp+0xf8>)
 8010710:	4826      	ldr	r0, [pc, #152]	@ (80107ac <recv_udp+0xf0>)
 8010712:	f012 f901 	bl	8022918 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	3310      	adds	r3, #16
 801071a:	4618      	mov	r0, r3
 801071c:	f011 fe8c 	bl	8022438 <sys_mbox_valid>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d103      	bne.n	801072e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f00a fa1c 	bl	801ab64 <pbuf_free>
    return;
 801072c:	e036      	b.n	801079c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801072e:	2006      	movs	r0, #6
 8010730:	f009 faaa 	bl	8019c88 <memp_malloc>
 8010734:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d103      	bne.n	8010744 <recv_udp+0x88>
    pbuf_free(p);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f00a fa11 	bl	801ab64 <pbuf_free>
    return;
 8010742:	e02b      	b.n	801079c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d002      	beq.n	801075c <recv_udp+0xa0>
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	e000      	b.n	801075e <recv_udp+0xa2>
 801075c:	2300      	movs	r3, #0
 801075e:	69ba      	ldr	r2, [r7, #24]
 8010760:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010762:	69bb      	ldr	r3, [r7, #24]
 8010764:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010766:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	891b      	ldrh	r3, [r3, #8]
 801076c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	3310      	adds	r3, #16
 8010772:	69b9      	ldr	r1, [r7, #24]
 8010774:	4618      	mov	r0, r3
 8010776:	f011 fdfd 	bl	8022374 <sys_mbox_trypost>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d003      	beq.n	8010788 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010780:	69b8      	ldr	r0, [r7, #24]
 8010782:	f002 f9bb 	bl	8012afc <netbuf_delete>
    return;
 8010786:	e009      	b.n	801079c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801078c:	2b00      	cmp	r3, #0
 801078e:	d005      	beq.n	801079c <recv_udp+0xe0>
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010794:	8afa      	ldrh	r2, [r7, #22]
 8010796:	2100      	movs	r1, #0
 8010798:	69f8      	ldr	r0, [r7, #28]
 801079a:	4798      	blx	r3
  }
}
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08023fcc 	.word	0x08023fcc
 80107a8:	08024088 	.word	0x08024088
 80107ac:	08024054 	.word	0x08024054
 80107b0:	080240ac 	.word	0x080240ac
 80107b4:	080240cc 	.word	0x080240cc

080107b8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b088      	sub	sp, #32
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
 80107c4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d106      	bne.n	80107da <recv_tcp+0x22>
 80107cc:	4b36      	ldr	r3, [pc, #216]	@ (80108a8 <recv_tcp+0xf0>)
 80107ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80107d2:	4936      	ldr	r1, [pc, #216]	@ (80108ac <recv_tcp+0xf4>)
 80107d4:	4836      	ldr	r0, [pc, #216]	@ (80108b0 <recv_tcp+0xf8>)
 80107d6:	f012 f89f 	bl	8022918 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d106      	bne.n	80107ee <recv_tcp+0x36>
 80107e0:	4b31      	ldr	r3, [pc, #196]	@ (80108a8 <recv_tcp+0xf0>)
 80107e2:	f240 122d 	movw	r2, #301	@ 0x12d
 80107e6:	4933      	ldr	r1, [pc, #204]	@ (80108b4 <recv_tcp+0xfc>)
 80107e8:	4831      	ldr	r0, [pc, #196]	@ (80108b0 <recv_tcp+0xf8>)
 80107ea:	f012 f895 	bl	8022918 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80107ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d006      	beq.n	8010804 <recv_tcp+0x4c>
 80107f6:	4b2c      	ldr	r3, [pc, #176]	@ (80108a8 <recv_tcp+0xf0>)
 80107f8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80107fc:	492e      	ldr	r1, [pc, #184]	@ (80108b8 <recv_tcp+0x100>)
 80107fe:	482c      	ldr	r0, [pc, #176]	@ (80108b0 <recv_tcp+0xf8>)
 8010800:	f012 f88a 	bl	8022918 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d102      	bne.n	8010814 <recv_tcp+0x5c>
    return ERR_VAL;
 801080e:	f06f 0305 	mvn.w	r3, #5
 8010812:	e045      	b.n	80108a0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	429a      	cmp	r2, r3
 801081c:	d006      	beq.n	801082c <recv_tcp+0x74>
 801081e:	4b22      	ldr	r3, [pc, #136]	@ (80108a8 <recv_tcp+0xf0>)
 8010820:	f240 1235 	movw	r2, #309	@ 0x135
 8010824:	4925      	ldr	r1, [pc, #148]	@ (80108bc <recv_tcp+0x104>)
 8010826:	4822      	ldr	r0, [pc, #136]	@ (80108b0 <recv_tcp+0xf8>)
 8010828:	f012 f876 	bl	8022918 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	3310      	adds	r3, #16
 8010830:	4618      	mov	r0, r3
 8010832:	f011 fe01 	bl	8022438 <sys_mbox_valid>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10d      	bne.n	8010858 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d008      	beq.n	8010854 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	891b      	ldrh	r3, [r3, #8]
 8010846:	4619      	mov	r1, r3
 8010848:	68b8      	ldr	r0, [r7, #8]
 801084a:	f00b f9e5 	bl	801bc18 <tcp_recved>
      pbuf_free(p);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f00a f988 	bl	801ab64 <pbuf_free>
    }
    return ERR_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	e023      	b.n	80108a0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d005      	beq.n	801086a <recv_tcp+0xb2>
    msg = p;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	891b      	ldrh	r3, [r3, #8]
 8010866:	83fb      	strh	r3, [r7, #30]
 8010868:	e003      	b.n	8010872 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801086a:	4b15      	ldr	r3, [pc, #84]	@ (80108c0 <recv_tcp+0x108>)
 801086c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	3310      	adds	r3, #16
 8010876:	69b9      	ldr	r1, [r7, #24]
 8010878:	4618      	mov	r0, r3
 801087a:	f011 fd7b 	bl	8022374 <sys_mbox_trypost>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	e00a      	b.n	80108a0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088e:	2b00      	cmp	r3, #0
 8010890:	d005      	beq.n	801089e <recv_tcp+0xe6>
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010896:	8bfa      	ldrh	r2, [r7, #30]
 8010898:	2100      	movs	r1, #0
 801089a:	6978      	ldr	r0, [r7, #20]
 801089c:	4798      	blx	r3
  }

  return ERR_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3720      	adds	r7, #32
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	08023fcc 	.word	0x08023fcc
 80108ac:	080240ec 	.word	0x080240ec
 80108b0:	08024054 	.word	0x08024054
 80108b4:	08024110 	.word	0x08024110
 80108b8:	08024130 	.word	0x08024130
 80108bc:	08024148 	.word	0x08024148
 80108c0:	08028bea 	.word	0x08028bea

080108c4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d106      	bne.n	80108e6 <poll_tcp+0x22>
 80108d8:	4b2a      	ldr	r3, [pc, #168]	@ (8010984 <poll_tcp+0xc0>)
 80108da:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80108de:	492a      	ldr	r1, [pc, #168]	@ (8010988 <poll_tcp+0xc4>)
 80108e0:	482a      	ldr	r0, [pc, #168]	@ (801098c <poll_tcp+0xc8>)
 80108e2:	f012 f819 	bl	8022918 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	785b      	ldrb	r3, [r3, #1]
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d104      	bne.n	80108f8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80108ee:	2101      	movs	r1, #1
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f000 ffb5 	bl	8011860 <lwip_netconn_do_writemore>
 80108f6:	e016      	b.n	8010926 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	785b      	ldrb	r3, [r3, #1]
 80108fc:	2b04      	cmp	r3, #4
 80108fe:	d112      	bne.n	8010926 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6a1b      	ldr	r3, [r3, #32]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00a      	beq.n	801091e <poll_tcp+0x5a>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	7a5b      	ldrb	r3, [r3, #9]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d005      	beq.n	801091e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6a1b      	ldr	r3, [r3, #32]
 8010916:	7a5a      	ldrb	r2, [r3, #9]
 8010918:	3a01      	subs	r2, #1
 801091a:	b2d2      	uxtb	r2, r2
 801091c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801091e:	2101      	movs	r1, #1
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f000 fbfb 	bl	801111c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	7f1b      	ldrb	r3, [r3, #28]
 801092a:	f003 0310 	and.w	r3, r3, #16
 801092e:	2b00      	cmp	r3, #0
 8010930:	d022      	beq.n	8010978 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d01e      	beq.n	8010978 <poll_tcp+0xb4>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010942:	f640 3269 	movw	r2, #2921	@ 0xb69
 8010946:	4293      	cmp	r3, r2
 8010948:	d916      	bls.n	8010978 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010952:	2b07      	cmp	r3, #7
 8010954:	d810      	bhi.n	8010978 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	7f1b      	ldrb	r3, [r3, #28]
 801095a:	f023 0310 	bic.w	r3, r3, #16
 801095e:	b2da      	uxtb	r2, r3
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010968:	2b00      	cmp	r3, #0
 801096a:	d005      	beq.n	8010978 <poll_tcp+0xb4>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010970:	2200      	movs	r2, #0
 8010972:	2102      	movs	r1, #2
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	08023fcc 	.word	0x08023fcc
 8010988:	08024168 	.word	0x08024168
 801098c:	08024054 	.word	0x08024054

08010990 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	4613      	mov	r3, r2
 801099c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d106      	bne.n	80109b6 <sent_tcp+0x26>
 80109a8:	4b21      	ldr	r3, [pc, #132]	@ (8010a30 <sent_tcp+0xa0>)
 80109aa:	f240 1293 	movw	r2, #403	@ 0x193
 80109ae:	4921      	ldr	r1, [pc, #132]	@ (8010a34 <sent_tcp+0xa4>)
 80109b0:	4821      	ldr	r0, [pc, #132]	@ (8010a38 <sent_tcp+0xa8>)
 80109b2:	f011 ffb1 	bl	8022918 <iprintf>

  if (conn) {
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d033      	beq.n	8010a24 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	785b      	ldrb	r3, [r3, #1]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d104      	bne.n	80109ce <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80109c4:	2101      	movs	r1, #1
 80109c6:	6978      	ldr	r0, [r7, #20]
 80109c8:	f000 ff4a 	bl	8011860 <lwip_netconn_do_writemore>
 80109cc:	e007      	b.n	80109de <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	d103      	bne.n	80109de <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80109d6:	2101      	movs	r1, #1
 80109d8:	6978      	ldr	r0, [r7, #20]
 80109da:	f000 fb9f 	bl	801111c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d01e      	beq.n	8010a24 <sent_tcp+0x94>
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80109ee:	f640 3269 	movw	r2, #2921	@ 0xb69
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d916      	bls.n	8010a24 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109fe:	2b07      	cmp	r3, #7
 8010a00:	d810      	bhi.n	8010a24 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	7f1b      	ldrb	r3, [r3, #28]
 8010a06:	f023 0310 	bic.w	r3, r3, #16
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d005      	beq.n	8010a24 <sent_tcp+0x94>
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a1c:	88fa      	ldrh	r2, [r7, #6]
 8010a1e:	2102      	movs	r1, #2
 8010a20:	6978      	ldr	r0, [r7, #20]
 8010a22:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	08023fcc 	.word	0x08023fcc
 8010a34:	08024168 	.word	0x08024168
 8010a38:	08024054 	.word	0x08024054

08010a3c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	460b      	mov	r3, r1
 8010a46:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <err_tcp+0x24>
 8010a52:	4b5f      	ldr	r3, [pc, #380]	@ (8010bd0 <err_tcp+0x194>)
 8010a54:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010a58:	495e      	ldr	r1, [pc, #376]	@ (8010bd4 <err_tcp+0x198>)
 8010a5a:	485f      	ldr	r0, [pc, #380]	@ (8010bd8 <err_tcp+0x19c>)
 8010a5c:	f011 ff5c 	bl	8022918 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010a60:	f011 fdf4 	bl	802264c <sys_arch_protect>
 8010a64:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	78fa      	ldrb	r2, [r7, #3]
 8010a70:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	7f1b      	ldrb	r3, [r3, #28]
 8010a76:	f043 0301 	orr.w	r3, r3, #1
 8010a7a:	b2da      	uxtb	r2, r3
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010a8c:	69b8      	ldr	r0, [r7, #24]
 8010a8e:	f011 fdeb 	bl	8022668 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d005      	beq.n	8010aa6 <err_tcp+0x6a>
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	2104      	movs	r1, #4
 8010aa2:	69f8      	ldr	r0, [r7, #28]
 8010aa4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d005      	beq.n	8010aba <err_tcp+0x7e>
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	69f8      	ldr	r0, [r7, #28]
 8010ab8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d005      	beq.n	8010ace <err_tcp+0x92>
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	2102      	movs	r1, #2
 8010aca:	69f8      	ldr	r0, [r7, #28]
 8010acc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7ff fd82 	bl	80105dc <lwip_netconn_err_to_msg>
 8010ad8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	3310      	adds	r3, #16
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f011 fcaa 	bl	8022438 <sys_mbox_valid>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	3310      	adds	r3, #16
 8010aee:	6939      	ldr	r1, [r7, #16]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f011 fc3f 	bl	8022374 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	3314      	adds	r3, #20
 8010afa:	4618      	mov	r0, r3
 8010afc:	f011 fc9c 	bl	8022438 <sys_mbox_valid>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	3314      	adds	r3, #20
 8010b0a:	6939      	ldr	r1, [r7, #16]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f011 fc31 	bl	8022374 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010b12:	7dfb      	ldrb	r3, [r7, #23]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d005      	beq.n	8010b24 <err_tcp+0xe8>
 8010b18:	7dfb      	ldrb	r3, [r7, #23]
 8010b1a:	2b04      	cmp	r3, #4
 8010b1c:	d002      	beq.n	8010b24 <err_tcp+0xe8>
 8010b1e:	7dfb      	ldrb	r3, [r7, #23]
 8010b20:	2b03      	cmp	r3, #3
 8010b22:	d143      	bne.n	8010bac <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	7f1b      	ldrb	r3, [r3, #28]
 8010b28:	f003 0304 	and.w	r3, r3, #4
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	bf14      	ite	ne
 8010b30:	2301      	movne	r3, #1
 8010b32:	2300      	moveq	r3, #0
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	7f1b      	ldrb	r3, [r3, #28]
 8010b3c:	f023 0304 	bic.w	r3, r3, #4
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d13b      	bne.n	8010bc4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	6a1b      	ldr	r3, [r3, #32]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <err_tcp+0x126>
 8010b54:	4b1e      	ldr	r3, [pc, #120]	@ (8010bd0 <err_tcp+0x194>)
 8010b56:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010b5a:	4920      	ldr	r1, [pc, #128]	@ (8010bdc <err_tcp+0x1a0>)
 8010b5c:	481e      	ldr	r0, [pc, #120]	@ (8010bd8 <err_tcp+0x19c>)
 8010b5e:	f011 fedb 	bl	8022918 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	d104      	bne.n	8010b72 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	6a1b      	ldr	r3, [r3, #32]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	711a      	strb	r2, [r3, #4]
 8010b70:	e003      	b.n	8010b7a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	78fa      	ldrb	r2, [r7, #3]
 8010b78:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	6a1b      	ldr	r3, [r3, #32]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	330c      	adds	r3, #12
 8010b82:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010b84:	68b8      	ldr	r0, [r7, #8]
 8010b86:	f011 fce5 	bl	8022554 <sys_sem_valid>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d106      	bne.n	8010b9e <err_tcp+0x162>
 8010b90:	4b0f      	ldr	r3, [pc, #60]	@ (8010bd0 <err_tcp+0x194>)
 8010b92:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010b96:	4912      	ldr	r1, [pc, #72]	@ (8010be0 <err_tcp+0x1a4>)
 8010b98:	480f      	ldr	r0, [pc, #60]	@ (8010bd8 <err_tcp+0x19c>)
 8010b9a:	f011 febd 	bl	8022918 <iprintf>
      conn->current_msg = NULL;
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f011 fcbb 	bl	8022520 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010baa:	e00b      	b.n	8010bc4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d008      	beq.n	8010bc6 <err_tcp+0x18a>
 8010bb4:	4b06      	ldr	r3, [pc, #24]	@ (8010bd0 <err_tcp+0x194>)
 8010bb6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8010bba:	490a      	ldr	r1, [pc, #40]	@ (8010be4 <err_tcp+0x1a8>)
 8010bbc:	4806      	ldr	r0, [pc, #24]	@ (8010bd8 <err_tcp+0x19c>)
 8010bbe:	f011 feab 	bl	8022918 <iprintf>
  }
}
 8010bc2:	e000      	b.n	8010bc6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010bc4:	bf00      	nop
}
 8010bc6:	bf00      	nop
 8010bc8:	3720      	adds	r7, #32
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	08023fcc 	.word	0x08023fcc
 8010bd4:	08024168 	.word	0x08024168
 8010bd8:	08024054 	.word	0x08024054
 8010bdc:	08024178 	.word	0x08024178
 8010be0:	08024194 	.word	0x08024194
 8010be4:	080241b0 	.word	0x080241b0

08010be8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010bf6:	6879      	ldr	r1, [r7, #4]
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	f00b fed9 	bl	801c9b0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010bfe:	490a      	ldr	r1, [pc, #40]	@ (8010c28 <setup_tcp+0x40>)
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f00b fee7 	bl	801c9d4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010c06:	4909      	ldr	r1, [pc, #36]	@ (8010c2c <setup_tcp+0x44>)
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f00b ff05 	bl	801ca18 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010c0e:	2202      	movs	r2, #2
 8010c10:	4907      	ldr	r1, [pc, #28]	@ (8010c30 <setup_tcp+0x48>)
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f00b ff5c 	bl	801cad0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010c18:	4906      	ldr	r1, [pc, #24]	@ (8010c34 <setup_tcp+0x4c>)
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f00b ff1e 	bl	801ca5c <tcp_err>
}
 8010c20:	bf00      	nop
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	080107b9 	.word	0x080107b9
 8010c2c:	08010991 	.word	0x08010991
 8010c30:	080108c5 	.word	0x080108c5
 8010c34:	08010a3d 	.word	0x08010a3d

08010c38 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010c38:	b590      	push	{r4, r7, lr}
 8010c3a:	b089      	sub	sp, #36	@ 0x24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	4613      	mov	r3, r2
 8010c44:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d102      	bne.n	8010c56 <accept_function+0x1e>
    return ERR_VAL;
 8010c50:	f06f 0305 	mvn.w	r3, #5
 8010c54:	e0a1      	b.n	8010d9a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	3314      	adds	r3, #20
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f011 fbec 	bl	8022438 <sys_mbox_valid>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d102      	bne.n	8010c6c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8010c66:	f06f 0305 	mvn.w	r3, #5
 8010c6a:	e096      	b.n	8010d9a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d11b      	bne.n	8010caa <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	f103 0414 	add.w	r4, r3, #20
 8010c78:	f06f 000c 	mvn.w	r0, #12
 8010c7c:	f7ff fcae 	bl	80105dc <lwip_netconn_err_to_msg>
 8010c80:	4603      	mov	r3, r0
 8010c82:	4619      	mov	r1, r3
 8010c84:	4620      	mov	r0, r4
 8010c86:	f011 fb75 	bl	8022374 <sys_mbox_trypost>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d109      	bne.n	8010ca4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d005      	beq.n	8010ca4 <accept_function+0x6c>
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	69f8      	ldr	r0, [r7, #28]
 8010ca2:	4798      	blx	r3
    }
    return ERR_VAL;
 8010ca4:	f06f 0305 	mvn.w	r3, #5
 8010ca8:	e077      	b.n	8010d9a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8010caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d006      	beq.n	8010cc0 <accept_function+0x88>
 8010cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8010da4 <accept_function+0x16c>)
 8010cb4:	f240 222a 	movw	r2, #554	@ 0x22a
 8010cb8:	493b      	ldr	r1, [pc, #236]	@ (8010da8 <accept_function+0x170>)
 8010cba:	483c      	ldr	r0, [pc, #240]	@ (8010dac <accept_function+0x174>)
 8010cbc:	f011 fe2c 	bl	8022918 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	781a      	ldrb	r2, [r3, #0]
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cc8:	4619      	mov	r1, r3
 8010cca:	4610      	mov	r0, r2
 8010ccc:	f000 f8f0 	bl	8010eb0 <netconn_alloc>
 8010cd0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d11b      	bne.n	8010d10 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	f103 0414 	add.w	r4, r3, #20
 8010cde:	f06f 000c 	mvn.w	r0, #12
 8010ce2:	f7ff fc7b 	bl	80105dc <lwip_netconn_err_to_msg>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	4619      	mov	r1, r3
 8010cea:	4620      	mov	r0, r4
 8010cec:	f011 fb42 	bl	8022374 <sys_mbox_trypost>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d109      	bne.n	8010d0a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d005      	beq.n	8010d0a <accept_function+0xd2>
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d02:	2200      	movs	r2, #0
 8010d04:	2100      	movs	r1, #0
 8010d06:	69f8      	ldr	r0, [r7, #28]
 8010d08:	4798      	blx	r3
    }
    return ERR_MEM;
 8010d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d0e:	e044      	b.n	8010d9a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8010d16:	69b8      	ldr	r0, [r7, #24]
 8010d18:	f7ff ff66 	bl	8010be8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	3314      	adds	r3, #20
 8010d20:	69b9      	ldr	r1, [r7, #24]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f011 fb26 	bl	8022374 <sys_mbox_trypost>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d02a      	beq.n	8010d84 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8010d34:	2100      	movs	r1, #0
 8010d36:	6978      	ldr	r0, [r7, #20]
 8010d38:	f00b fe3a 	bl	801c9b0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	6978      	ldr	r0, [r7, #20]
 8010d40:	f00b fe48 	bl	801c9d4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8010d44:	2100      	movs	r1, #0
 8010d46:	6978      	ldr	r0, [r7, #20]
 8010d48:	f00b fe66 	bl	801ca18 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2100      	movs	r1, #0
 8010d50:	6978      	ldr	r0, [r7, #20]
 8010d52:	f00b febd 	bl	801cad0 <tcp_poll>
    tcp_err(pcb, NULL);
 8010d56:	2100      	movs	r1, #0
 8010d58:	6978      	ldr	r0, [r7, #20]
 8010d5a:	f00b fe7f 	bl	801ca5c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	2200      	movs	r2, #0
 8010d62:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	3310      	adds	r3, #16
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f011 faf1 	bl	8022350 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	3310      	adds	r3, #16
 8010d72:	4618      	mov	r0, r3
 8010d74:	f011 fb71 	bl	802245a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8010d78:	69b8      	ldr	r0, [r7, #24]
 8010d7a:	f000 f907 	bl	8010f8c <netconn_free>
    return ERR_MEM;
 8010d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d82:	e00a      	b.n	8010d9a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d005      	beq.n	8010d98 <accept_function+0x160>
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d90:	2200      	movs	r2, #0
 8010d92:	2100      	movs	r1, #0
 8010d94:	69f8      	ldr	r0, [r7, #28]
 8010d96:	4798      	blx	r3
  }

  return ERR_OK;
 8010d98:	2300      	movs	r3, #0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3724      	adds	r7, #36	@ 0x24
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd90      	pop	{r4, r7, pc}
 8010da2:	bf00      	nop
 8010da4:	08023fcc 	.word	0x08023fcc
 8010da8:	080241cc 	.word	0x080241cc
 8010dac:	08024054 	.word	0x08024054

08010db0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010db0:	b590      	push	{r4, r7, lr}
 8010db2:	b085      	sub	sp, #20
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010db8:	2300      	movs	r3, #0
 8010dba:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d006      	beq.n	8010dd4 <pcb_new+0x24>
 8010dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8010e74 <pcb_new+0xc4>)
 8010dc8:	f240 2265 	movw	r2, #613	@ 0x265
 8010dcc:	492a      	ldr	r1, [pc, #168]	@ (8010e78 <pcb_new+0xc8>)
 8010dce:	482b      	ldr	r0, [pc, #172]	@ (8010e7c <pcb_new+0xcc>)
 8010dd0:	f011 fda2 	bl	8022918 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010dde:	2b10      	cmp	r3, #16
 8010de0:	d022      	beq.n	8010e28 <pcb_new+0x78>
 8010de2:	2b20      	cmp	r3, #32
 8010de4:	d133      	bne.n	8010e4e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681c      	ldr	r4, [r3, #0]
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f011 f981 	bl	80220f4 <udp_new_ip_type>
 8010df2:	4603      	mov	r3, r0
 8010df4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d02a      	beq.n	8010e56 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	2b22      	cmp	r3, #34	@ 0x22
 8010e08:	d104      	bne.n	8010e14 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	2201      	movs	r2, #1
 8010e12:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6858      	ldr	r0, [r3, #4]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	4917      	ldr	r1, [pc, #92]	@ (8010e80 <pcb_new+0xd0>)
 8010e22:	f011 f8eb 	bl	8021ffc <udp_recv>
      }
      break;
 8010e26:	e016      	b.n	8010e56 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681c      	ldr	r4, [r3, #0]
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f00b fdb0 	bl	801c994 <tcp_new_ip_type>
 8010e34:	4603      	mov	r3, r0
 8010e36:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00b      	beq.n	8010e5a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fece 	bl	8010be8 <setup_tcp>
      }
      break;
 8010e4c:	e005      	b.n	8010e5a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	22fa      	movs	r2, #250	@ 0xfa
 8010e52:	711a      	strb	r2, [r3, #4]
      return;
 8010e54:	e00a      	b.n	8010e6c <pcb_new+0xbc>
      break;
 8010e56:	bf00      	nop
 8010e58:	e000      	b.n	8010e5c <pcb_new+0xac>
      break;
 8010e5a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d102      	bne.n	8010e6c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	22ff      	movs	r2, #255	@ 0xff
 8010e6a:	711a      	strb	r2, [r3, #4]
  }
}
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd90      	pop	{r4, r7, pc}
 8010e72:	bf00      	nop
 8010e74:	08023fcc 	.word	0x08023fcc
 8010e78:	080241f4 	.word	0x080241f4
 8010e7c:	08024054 	.word	0x08024054
 8010e80:	080106bd 	.word	0x080106bd

08010e84 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f7ff ff85 	bl	8010db0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010ea6:	bf00      	nop
 8010ea8:	3710      	adds	r7, #16
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
	...

08010eb0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	6039      	str	r1, [r7, #0]
 8010eba:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010ec0:	2007      	movs	r0, #7
 8010ec2:	f008 fee1 	bl	8019c88 <memp_malloc>
 8010ec6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <netconn_alloc+0x22>
    return NULL;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e052      	b.n	8010f78 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	79fa      	ldrb	r2, [r7, #7]
 8010edc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010ee4:	79fb      	ldrb	r3, [r7, #7]
 8010ee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	d004      	beq.n	8010ef8 <netconn_alloc+0x48>
 8010eee:	2b20      	cmp	r3, #32
 8010ef0:	d105      	bne.n	8010efe <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010ef2:	2306      	movs	r3, #6
 8010ef4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010ef6:	e00a      	b.n	8010f0e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010ef8:	2306      	movs	r3, #6
 8010efa:	617b      	str	r3, [r7, #20]
      break;
 8010efc:	e007      	b.n	8010f0e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010efe:	4b20      	ldr	r3, [pc, #128]	@ (8010f80 <netconn_alloc+0xd0>)
 8010f00:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8010f04:	491f      	ldr	r1, [pc, #124]	@ (8010f84 <netconn_alloc+0xd4>)
 8010f06:	4820      	ldr	r0, [pc, #128]	@ (8010f88 <netconn_alloc+0xd8>)
 8010f08:	f011 fd06 	bl	8022918 <iprintf>
      goto free_and_return;
 8010f0c:	e02f      	b.n	8010f6e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3310      	adds	r3, #16
 8010f12:	6979      	ldr	r1, [r7, #20]
 8010f14:	4618      	mov	r0, r3
 8010f16:	f011 fa01 	bl	802231c <sys_mbox_new>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d125      	bne.n	8010f6c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	330c      	adds	r3, #12
 8010f24:	2100      	movs	r1, #0
 8010f26:	4618      	mov	r0, r3
 8010f28:	f011 faa4 	bl	8022474 <sys_sem_new>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d005      	beq.n	8010f3e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3310      	adds	r3, #16
 8010f36:	4618      	mov	r0, r3
 8010f38:	f011 fa0a 	bl	8022350 <sys_mbox_free>
    goto free_and_return;
 8010f3c:	e017      	b.n	8010f6e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	3314      	adds	r3, #20
 8010f42:	4618      	mov	r0, r3
 8010f44:	f011 fa89 	bl	802245a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f04f 32ff 	mov.w	r2, #4294967295
 8010f54:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	7cfa      	ldrb	r2, [r7, #19]
 8010f66:	771a      	strb	r2, [r3, #28]
  return conn;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	e005      	b.n	8010f78 <netconn_alloc+0xc8>
    goto free_and_return;
 8010f6c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010f6e:	68f9      	ldr	r1, [r7, #12]
 8010f70:	2007      	movs	r0, #7
 8010f72:	f008 feff 	bl	8019d74 <memp_free>
  return NULL;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	08023fcc 	.word	0x08023fcc
 8010f84:	08024214 	.word	0x08024214
 8010f88:	08024054 	.word	0x08024054

08010f8c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d006      	beq.n	8010faa <netconn_free+0x1e>
 8010f9c:	4b1b      	ldr	r3, [pc, #108]	@ (801100c <netconn_free+0x80>)
 8010f9e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010fa2:	491b      	ldr	r1, [pc, #108]	@ (8011010 <netconn_free+0x84>)
 8010fa4:	481b      	ldr	r0, [pc, #108]	@ (8011014 <netconn_free+0x88>)
 8010fa6:	f011 fcb7 	bl	8022918 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3310      	adds	r3, #16
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f011 fa42 	bl	8022438 <sys_mbox_valid>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d006      	beq.n	8010fc8 <netconn_free+0x3c>
 8010fba:	4b14      	ldr	r3, [pc, #80]	@ (801100c <netconn_free+0x80>)
 8010fbc:	f240 3223 	movw	r2, #803	@ 0x323
 8010fc0:	4915      	ldr	r1, [pc, #84]	@ (8011018 <netconn_free+0x8c>)
 8010fc2:	4814      	ldr	r0, [pc, #80]	@ (8011014 <netconn_free+0x88>)
 8010fc4:	f011 fca8 	bl	8022918 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	3314      	adds	r3, #20
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f011 fa33 	bl	8022438 <sys_mbox_valid>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d006      	beq.n	8010fe6 <netconn_free+0x5a>
 8010fd8:	4b0c      	ldr	r3, [pc, #48]	@ (801100c <netconn_free+0x80>)
 8010fda:	f240 3226 	movw	r2, #806	@ 0x326
 8010fde:	490f      	ldr	r1, [pc, #60]	@ (801101c <netconn_free+0x90>)
 8010fe0:	480c      	ldr	r0, [pc, #48]	@ (8011014 <netconn_free+0x88>)
 8010fe2:	f011 fc99 	bl	8022918 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	330c      	adds	r3, #12
 8010fea:	4618      	mov	r0, r3
 8010fec:	f011 faa5 	bl	802253a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	330c      	adds	r3, #12
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f011 fabe 	bl	8022576 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010ffa:	6879      	ldr	r1, [r7, #4]
 8010ffc:	2007      	movs	r0, #7
 8010ffe:	f008 feb9 	bl	8019d74 <memp_free>
}
 8011002:	bf00      	nop
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	08023fcc 	.word	0x08023fcc
 8011010:	0802423c 	.word	0x0802423c
 8011014:	08024054 	.word	0x08024054
 8011018:	0802426c 	.word	0x0802426c
 801101c:	080242a8 	.word	0x080242a8

08011020 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b086      	sub	sp, #24
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3310      	adds	r3, #16
 801102c:	4618      	mov	r0, r3
 801102e:	f011 fa03 	bl	8022438 <sys_mbox_valid>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d02f      	beq.n	8011098 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011038:	e018      	b.n	801106c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011042:	2b10      	cmp	r3, #16
 8011044:	d10e      	bne.n	8011064 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	f107 020f 	add.w	r2, r7, #15
 801104c:	4611      	mov	r1, r2
 801104e:	4618      	mov	r0, r3
 8011050:	f7ff fafa 	bl	8010648 <lwip_netconn_is_err_msg>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d108      	bne.n	801106c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	4618      	mov	r0, r3
 801105e:	f009 fd81 	bl	801ab64 <pbuf_free>
 8011062:	e003      	b.n	801106c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	4618      	mov	r0, r3
 8011068:	f001 fd48 	bl	8012afc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3310      	adds	r3, #16
 8011070:	f107 0210 	add.w	r2, r7, #16
 8011074:	4611      	mov	r1, r2
 8011076:	4618      	mov	r0, r3
 8011078:	f011 f9c7 	bl	802240a <sys_arch_mbox_tryfetch>
 801107c:	4603      	mov	r3, r0
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d1da      	bne.n	801103a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3310      	adds	r3, #16
 8011088:	4618      	mov	r0, r3
 801108a:	f011 f961 	bl	8022350 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	3310      	adds	r3, #16
 8011092:	4618      	mov	r0, r3
 8011094:	f011 f9e1 	bl	802245a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3314      	adds	r3, #20
 801109c:	4618      	mov	r0, r3
 801109e:	f011 f9cb 	bl	8022438 <sys_mbox_valid>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d034      	beq.n	8011112 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80110a8:	e01d      	b.n	80110e6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	f107 020e 	add.w	r2, r7, #14
 80110b0:	4611      	mov	r1, r2
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff fac8 	bl	8010648 <lwip_netconn_is_err_msg>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d113      	bne.n	80110e6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80110c2:	6978      	ldr	r0, [r7, #20]
 80110c4:	f7ff ffac 	bl	8011020 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d007      	beq.n	80110e0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f00a fbd7 	bl	801b888 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	2200      	movs	r2, #0
 80110de:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80110e0:	6978      	ldr	r0, [r7, #20]
 80110e2:	f7ff ff53 	bl	8010f8c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	3314      	adds	r3, #20
 80110ea:	f107 0210 	add.w	r2, r7, #16
 80110ee:	4611      	mov	r1, r2
 80110f0:	4618      	mov	r0, r3
 80110f2:	f011 f98a 	bl	802240a <sys_arch_mbox_tryfetch>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fc:	d1d5      	bne.n	80110aa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	3314      	adds	r3, #20
 8011102:	4618      	mov	r0, r3
 8011104:	f011 f924 	bl	8022350 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	3314      	adds	r3, #20
 801110c:	4618      	mov	r0, r3
 801110e:	f011 f9a4 	bl	802245a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011112:	bf00      	nop
 8011114:	3718      	adds	r7, #24
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
	...

0801111c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	460b      	mov	r3, r1
 8011126:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011128:	2300      	movs	r3, #0
 801112a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d106      	bne.n	8011140 <lwip_netconn_do_close_internal+0x24>
 8011132:	4b87      	ldr	r3, [pc, #540]	@ (8011350 <lwip_netconn_do_close_internal+0x234>)
 8011134:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011138:	4986      	ldr	r1, [pc, #536]	@ (8011354 <lwip_netconn_do_close_internal+0x238>)
 801113a:	4887      	ldr	r0, [pc, #540]	@ (8011358 <lwip_netconn_do_close_internal+0x23c>)
 801113c:	f011 fbec 	bl	8022918 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011148:	2b10      	cmp	r3, #16
 801114a:	d006      	beq.n	801115a <lwip_netconn_do_close_internal+0x3e>
 801114c:	4b80      	ldr	r3, [pc, #512]	@ (8011350 <lwip_netconn_do_close_internal+0x234>)
 801114e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011152:	4982      	ldr	r1, [pc, #520]	@ (801135c <lwip_netconn_do_close_internal+0x240>)
 8011154:	4880      	ldr	r0, [pc, #512]	@ (8011358 <lwip_netconn_do_close_internal+0x23c>)
 8011156:	f011 fbdf 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	785b      	ldrb	r3, [r3, #1]
 801115e:	2b04      	cmp	r3, #4
 8011160:	d006      	beq.n	8011170 <lwip_netconn_do_close_internal+0x54>
 8011162:	4b7b      	ldr	r3, [pc, #492]	@ (8011350 <lwip_netconn_do_close_internal+0x234>)
 8011164:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011168:	497d      	ldr	r1, [pc, #500]	@ (8011360 <lwip_netconn_do_close_internal+0x244>)
 801116a:	487b      	ldr	r0, [pc, #492]	@ (8011358 <lwip_netconn_do_close_internal+0x23c>)
 801116c:	f011 fbd4 	bl	8022918 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d106      	bne.n	8011186 <lwip_netconn_do_close_internal+0x6a>
 8011178:	4b75      	ldr	r3, [pc, #468]	@ (8011350 <lwip_netconn_do_close_internal+0x234>)
 801117a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801117e:	4979      	ldr	r1, [pc, #484]	@ (8011364 <lwip_netconn_do_close_internal+0x248>)
 8011180:	4875      	ldr	r0, [pc, #468]	@ (8011358 <lwip_netconn_do_close_internal+0x23c>)
 8011182:	f011 fbc9 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6a1b      	ldr	r3, [r3, #32]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <lwip_netconn_do_close_internal+0x80>
 801118e:	4b70      	ldr	r3, [pc, #448]	@ (8011350 <lwip_netconn_do_close_internal+0x234>)
 8011190:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011194:	4974      	ldr	r1, [pc, #464]	@ (8011368 <lwip_netconn_do_close_internal+0x24c>)
 8011196:	4870      	ldr	r0, [pc, #448]	@ (8011358 <lwip_netconn_do_close_internal+0x23c>)
 8011198:	f011 fbbe 	bl	8022918 <iprintf>

  tpcb = conn->pcb.tcp;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a1b      	ldr	r3, [r3, #32]
 80111a6:	7a1b      	ldrb	r3, [r3, #8]
 80111a8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80111aa:	7bfb      	ldrb	r3, [r7, #15]
 80111ac:	f003 0301 	and.w	r3, r3, #1
 80111b0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	f003 0302 	and.w	r3, r3, #2
 80111b8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80111ba:	7bfb      	ldrb	r3, [r7, #15]
 80111bc:	2b03      	cmp	r3, #3
 80111be:	d102      	bne.n	80111c6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80111c0:	2301      	movs	r3, #1
 80111c2:	75bb      	strb	r3, [r7, #22]
 80111c4:	e01f      	b.n	8011206 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00e      	beq.n	80111ea <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80111d0:	2b05      	cmp	r3, #5
 80111d2:	d007      	beq.n	80111e4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80111d8:	2b06      	cmp	r3, #6
 80111da:	d003      	beq.n	80111e4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80111e0:	2b08      	cmp	r3, #8
 80111e2:	d102      	bne.n	80111ea <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80111e4:	2301      	movs	r3, #1
 80111e6:	75bb      	strb	r3, [r7, #22]
 80111e8:	e00d      	b.n	8011206 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80111ea:	7b7b      	ldrb	r3, [r7, #13]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d008      	beq.n	8011202 <lwip_netconn_do_close_internal+0xe6>
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	8b5b      	ldrh	r3, [r3, #26]
 80111f4:	f003 0310 	and.w	r3, r3, #16
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d002      	beq.n	8011202 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80111fc:	2301      	movs	r3, #1
 80111fe:	75bb      	strb	r3, [r7, #22]
 8011200:	e001      	b.n	8011206 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011202:	2300      	movs	r3, #0
 8011204:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011206:	7dbb      	ldrb	r3, [r7, #22]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d003      	beq.n	8011214 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801120c:	2100      	movs	r1, #0
 801120e:	6938      	ldr	r0, [r7, #16]
 8011210:	f00b fbce 	bl	801c9b0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	7d1b      	ldrb	r3, [r3, #20]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d104      	bne.n	8011226 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801121c:	2100      	movs	r1, #0
 801121e:	6938      	ldr	r0, [r7, #16]
 8011220:	f00b fc3e 	bl	801caa0 <tcp_accept>
 8011224:	e01d      	b.n	8011262 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011226:	7bbb      	ldrb	r3, [r7, #14]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d007      	beq.n	801123c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801122c:	2100      	movs	r1, #0
 801122e:	6938      	ldr	r0, [r7, #16]
 8011230:	f00b fbd0 	bl	801c9d4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011234:	2100      	movs	r1, #0
 8011236:	6938      	ldr	r0, [r7, #16]
 8011238:	f00b fc32 	bl	801caa0 <tcp_accept>
    }
    if (shut_tx) {
 801123c:	7b7b      	ldrb	r3, [r7, #13]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d003      	beq.n	801124a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011242:	2100      	movs	r1, #0
 8011244:	6938      	ldr	r0, [r7, #16]
 8011246:	f00b fbe7 	bl	801ca18 <tcp_sent>
    }
    if (shut_close) {
 801124a:	7dbb      	ldrb	r3, [r7, #22]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d008      	beq.n	8011262 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011250:	2200      	movs	r2, #0
 8011252:	2100      	movs	r1, #0
 8011254:	6938      	ldr	r0, [r7, #16]
 8011256:	f00b fc3b 	bl	801cad0 <tcp_poll>
      tcp_err(tpcb, NULL);
 801125a:	2100      	movs	r1, #0
 801125c:	6938      	ldr	r0, [r7, #16]
 801125e:	f00b fbfd 	bl	801ca5c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011262:	7dbb      	ldrb	r3, [r7, #22]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d005      	beq.n	8011274 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011268:	6938      	ldr	r0, [r7, #16]
 801126a:	f00a f9c7 	bl	801b5fc <tcp_close>
 801126e:	4603      	mov	r3, r0
 8011270:	75fb      	strb	r3, [r7, #23]
 8011272:	e007      	b.n	8011284 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011274:	7bbb      	ldrb	r3, [r7, #14]
 8011276:	7b7a      	ldrb	r2, [r7, #13]
 8011278:	4619      	mov	r1, r3
 801127a:	6938      	ldr	r0, [r7, #16]
 801127c:	f00a f9ea 	bl	801b654 <tcp_shutdown>
 8011280:	4603      	mov	r3, r0
 8011282:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d102      	bne.n	8011292 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801128c:	2301      	movs	r3, #1
 801128e:	757b      	strb	r3, [r7, #21]
 8011290:	e016      	b.n	80112c0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011292:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801129a:	d10f      	bne.n	80112bc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6a1b      	ldr	r3, [r3, #32]
 80112a0:	7a5b      	ldrb	r3, [r3, #9]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10c      	bne.n	80112c0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80112a6:	2301      	movs	r3, #1
 80112a8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80112aa:	7dbb      	ldrb	r3, [r7, #22]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d007      	beq.n	80112c0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80112b0:	6938      	ldr	r0, [r7, #16]
 80112b2:	f00a fae9 	bl	801b888 <tcp_abort>
          err = ERR_OK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	75fb      	strb	r3, [r7, #23]
 80112ba:	e001      	b.n	80112c0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80112bc:	2301      	movs	r3, #1
 80112be:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80112c0:	7d7b      	ldrb	r3, [r7, #21]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d052      	beq.n	801136c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a1b      	ldr	r3, [r3, #32]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	330c      	adds	r3, #12
 80112ce:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6a1b      	ldr	r3, [r3, #32]
 80112d4:	7dfa      	ldrb	r2, [r7, #23]
 80112d6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80112e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d129      	bne.n	8011340 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80112ec:	7dbb      	ldrb	r3, [r7, #22]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00c      	beq.n	801130c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d005      	beq.n	801130c <lwip_netconn_do_close_internal+0x1f0>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011304:	2200      	movs	r2, #0
 8011306:	2104      	movs	r1, #4
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	4798      	blx	r3
      }
      if (shut_rx) {
 801130c:	7bbb      	ldrb	r3, [r7, #14]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d009      	beq.n	8011326 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011316:	2b00      	cmp	r3, #0
 8011318:	d005      	beq.n	8011326 <lwip_netconn_do_close_internal+0x20a>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131e:	2200      	movs	r2, #0
 8011320:	2100      	movs	r1, #0
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	4798      	blx	r3
      }
      if (shut_tx) {
 8011326:	7b7b      	ldrb	r3, [r7, #13]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d009      	beq.n	8011340 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011330:	2b00      	cmp	r3, #0
 8011332:	d005      	beq.n	8011340 <lwip_netconn_do_close_internal+0x224>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011338:	2200      	movs	r2, #0
 801133a:	2102      	movs	r1, #2
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011340:	78fb      	ldrb	r3, [r7, #3]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011346:	68b8      	ldr	r0, [r7, #8]
 8011348:	f011 f8ea 	bl	8022520 <sys_sem_signal>
    }
    return ERR_OK;
 801134c:	2300      	movs	r3, #0
 801134e:	e03c      	b.n	80113ca <lwip_netconn_do_close_internal+0x2ae>
 8011350:	08023fcc 	.word	0x08023fcc
 8011354:	080242e4 	.word	0x080242e4
 8011358:	08024054 	.word	0x08024054
 801135c:	080242f4 	.word	0x080242f4
 8011360:	08024314 	.word	0x08024314
 8011364:	08024338 	.word	0x08024338
 8011368:	08024178 	.word	0x08024178
  }
  if (!close_finished) {
 801136c:	7d7b      	ldrb	r3, [r7, #21]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d11e      	bne.n	80113b0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	7d1b      	ldrb	r3, [r3, #20]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d106      	bne.n	8011388 <lwip_netconn_do_close_internal+0x26c>
 801137a:	4b16      	ldr	r3, [pc, #88]	@ (80113d4 <lwip_netconn_do_close_internal+0x2b8>)
 801137c:	f240 4241 	movw	r2, #1089	@ 0x441
 8011380:	4915      	ldr	r1, [pc, #84]	@ (80113d8 <lwip_netconn_do_close_internal+0x2bc>)
 8011382:	4816      	ldr	r0, [pc, #88]	@ (80113dc <lwip_netconn_do_close_internal+0x2c0>)
 8011384:	f011 fac8 	bl	8022918 <iprintf>
    if (shut_tx) {
 8011388:	7b7b      	ldrb	r3, [r7, #13]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d003      	beq.n	8011396 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801138e:	4914      	ldr	r1, [pc, #80]	@ (80113e0 <lwip_netconn_do_close_internal+0x2c4>)
 8011390:	6938      	ldr	r0, [r7, #16]
 8011392:	f00b fb41 	bl	801ca18 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011396:	2201      	movs	r2, #1
 8011398:	4912      	ldr	r1, [pc, #72]	@ (80113e4 <lwip_netconn_do_close_internal+0x2c8>)
 801139a:	6938      	ldr	r0, [r7, #16]
 801139c:	f00b fb98 	bl	801cad0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80113a0:	4911      	ldr	r1, [pc, #68]	@ (80113e8 <lwip_netconn_do_close_internal+0x2cc>)
 80113a2:	6938      	ldr	r0, [r7, #16]
 80113a4:	f00b fb5a 	bl	801ca5c <tcp_err>
    tcp_arg(tpcb, conn);
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	6938      	ldr	r0, [r7, #16]
 80113ac:	f00b fb00 	bl	801c9b0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80113b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d106      	bne.n	80113c6 <lwip_netconn_do_close_internal+0x2aa>
 80113b8:	4b06      	ldr	r3, [pc, #24]	@ (80113d4 <lwip_netconn_do_close_internal+0x2b8>)
 80113ba:	f240 424d 	movw	r2, #1101	@ 0x44d
 80113be:	490b      	ldr	r1, [pc, #44]	@ (80113ec <lwip_netconn_do_close_internal+0x2d0>)
 80113c0:	4806      	ldr	r0, [pc, #24]	@ (80113dc <lwip_netconn_do_close_internal+0x2c0>)
 80113c2:	f011 faa9 	bl	8022918 <iprintf>
  return err;
 80113c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3718      	adds	r7, #24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	08023fcc 	.word	0x08023fcc
 80113d8:	0802434c 	.word	0x0802434c
 80113dc:	08024054 	.word	0x08024054
 80113e0:	08010991 	.word	0x08010991
 80113e4:	080108c5 	.word	0x080108c5
 80113e8:	08010a3d 	.word	0x08010a3d
 80113ec:	08024370 	.word	0x08024370

080113f0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	785b      	ldrb	r3, [r3, #1]
 8011402:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011404:	7afb      	ldrb	r3, [r7, #11]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00d      	beq.n	8011426 <lwip_netconn_do_delconn+0x36>
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011414:	2b10      	cmp	r3, #16
 8011416:	d006      	beq.n	8011426 <lwip_netconn_do_delconn+0x36>
 8011418:	4b60      	ldr	r3, [pc, #384]	@ (801159c <lwip_netconn_do_delconn+0x1ac>)
 801141a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801141e:	4960      	ldr	r1, [pc, #384]	@ (80115a0 <lwip_netconn_do_delconn+0x1b0>)
 8011420:	4860      	ldr	r0, [pc, #384]	@ (80115a4 <lwip_netconn_do_delconn+0x1b4>)
 8011422:	f011 fa79 	bl	8022918 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011426:	7afb      	ldrb	r3, [r7, #11]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d005      	beq.n	8011438 <lwip_netconn_do_delconn+0x48>
 801142c:	7afb      	ldrb	r3, [r7, #11]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d002      	beq.n	8011438 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011432:	7afb      	ldrb	r3, [r7, #11]
 8011434:	2b03      	cmp	r3, #3
 8011436:	d109      	bne.n	801144c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011438:	7afb      	ldrb	r3, [r7, #11]
 801143a:	2b03      	cmp	r3, #3
 801143c:	d10a      	bne.n	8011454 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	7f1b      	ldrb	r3, [r3, #28]
 8011444:	f003 0304 	and.w	r3, r3, #4
 8011448:	2b00      	cmp	r3, #0
 801144a:	d103      	bne.n	8011454 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	22fb      	movs	r2, #251	@ 0xfb
 8011450:	711a      	strb	r2, [r3, #4]
 8011452:	e097      	b.n	8011584 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011454:	7afb      	ldrb	r3, [r7, #11]
 8011456:	2b03      	cmp	r3, #3
 8011458:	d10d      	bne.n	8011476 <lwip_netconn_do_delconn+0x86>
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	7f1b      	ldrb	r3, [r3, #28]
 8011460:	f003 0304 	and.w	r3, r3, #4
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <lwip_netconn_do_delconn+0x86>
 8011468:	4b4c      	ldr	r3, [pc, #304]	@ (801159c <lwip_netconn_do_delconn+0x1ac>)
 801146a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801146e:	494e      	ldr	r1, [pc, #312]	@ (80115a8 <lwip_netconn_do_delconn+0x1b8>)
 8011470:	484c      	ldr	r0, [pc, #304]	@ (80115a4 <lwip_netconn_do_delconn+0x1b4>)
 8011472:	f011 fa51 	bl	8022918 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2200      	movs	r2, #0
 801147a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff fdcd 	bl	8011020 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d05f      	beq.n	8011550 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801149a:	2b10      	cmp	r3, #16
 801149c:	d00d      	beq.n	80114ba <lwip_netconn_do_delconn+0xca>
 801149e:	2b20      	cmp	r3, #32
 80114a0:	d151      	bne.n	8011546 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	2200      	movs	r2, #0
 80114aa:	625a      	str	r2, [r3, #36]	@ 0x24
          udp_remove(msg->conn->pcb.udp);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f010 fdc2 	bl	802203c <udp_remove>
          break;
 80114b8:	e046      	b.n	8011548 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	6a1b      	ldr	r3, [r3, #32]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d006      	beq.n	80114d2 <lwip_netconn_do_delconn+0xe2>
 80114c4:	4b35      	ldr	r3, [pc, #212]	@ (801159c <lwip_netconn_do_delconn+0x1ac>)
 80114c6:	f240 4294 	movw	r2, #1172	@ 0x494
 80114ca:	4938      	ldr	r1, [pc, #224]	@ (80115ac <lwip_netconn_do_delconn+0x1bc>)
 80114cc:	4835      	ldr	r0, [pc, #212]	@ (80115a4 <lwip_netconn_do_delconn+0x1b4>)
 80114ce:	f011 fa23 	bl	8022918 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	2204      	movs	r2, #4
 80114d8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2203      	movs	r2, #3
 80114de:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2100      	movs	r1, #0
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff fe14 	bl	801111c <lwip_netconn_do_close_internal>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d04b      	beq.n	8011592 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	785b      	ldrb	r3, [r3, #1]
 8011500:	2b04      	cmp	r3, #4
 8011502:	d006      	beq.n	8011512 <lwip_netconn_do_delconn+0x122>
 8011504:	4b25      	ldr	r3, [pc, #148]	@ (801159c <lwip_netconn_do_delconn+0x1ac>)
 8011506:	f240 429a 	movw	r2, #1178	@ 0x49a
 801150a:	4929      	ldr	r1, [pc, #164]	@ (80115b0 <lwip_netconn_do_delconn+0x1c0>)
 801150c:	4825      	ldr	r0, [pc, #148]	@ (80115a4 <lwip_netconn_do_delconn+0x1b4>)
 801150e:	f011 fa03 	bl	8022918 <iprintf>
            UNLOCK_TCPIP_CORE();
 8011512:	4828      	ldr	r0, [pc, #160]	@ (80115b4 <lwip_netconn_do_delconn+0x1c4>)
 8011514:	f011 f86d 	bl	80225f2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	330c      	adds	r3, #12
 801151e:	2100      	movs	r1, #0
 8011520:	4618      	mov	r0, r3
 8011522:	f010 ffcc 	bl	80224be <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011526:	4823      	ldr	r0, [pc, #140]	@ (80115b4 <lwip_netconn_do_delconn+0x1c4>)
 8011528:	f011 f854 	bl	80225d4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	785b      	ldrb	r3, [r3, #1]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d02d      	beq.n	8011592 <lwip_netconn_do_delconn+0x1a2>
 8011536:	4b19      	ldr	r3, [pc, #100]	@ (801159c <lwip_netconn_do_delconn+0x1ac>)
 8011538:	f240 429e 	movw	r2, #1182	@ 0x49e
 801153c:	491c      	ldr	r1, [pc, #112]	@ (80115b0 <lwip_netconn_do_delconn+0x1c0>)
 801153e:	4819      	ldr	r0, [pc, #100]	@ (80115a4 <lwip_netconn_do_delconn+0x1b4>)
 8011540:	f011 f9ea 	bl	8022918 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011544:	e025      	b.n	8011592 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8011546:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2200      	movs	r2, #0
 801154e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011556:	2b00      	cmp	r3, #0
 8011558:	d007      	beq.n	801156a <lwip_netconn_do_delconn+0x17a>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	6810      	ldr	r0, [r2, #0]
 8011564:	2200      	movs	r2, #0
 8011566:	2100      	movs	r1, #0
 8011568:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011570:	2b00      	cmp	r3, #0
 8011572:	d007      	beq.n	8011584 <lwip_netconn_do_delconn+0x194>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	6810      	ldr	r0, [r2, #0]
 801157e:	2200      	movs	r2, #0
 8011580:	2102      	movs	r1, #2
 8011582:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	330c      	adds	r3, #12
 801158a:	4618      	mov	r0, r3
 801158c:	f010 ffe2 	bl	8022554 <sys_sem_valid>
 8011590:	e000      	b.n	8011594 <lwip_netconn_do_delconn+0x1a4>
          return;
 8011592:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011594:	3710      	adds	r7, #16
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	08023fcc 	.word	0x08023fcc
 80115a0:	08024380 	.word	0x08024380
 80115a4:	08024054 	.word	0x08024054
 80115a8:	08024394 	.word	0x08024394
 80115ac:	080243b4 	.word	0x080243b4
 80115b0:	080243d0 	.word	0x080243d0
 80115b4:	20008d78 	.word	0x20008d78

080115b8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d025      	beq.n	801161a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115d8:	2b10      	cmp	r3, #16
 80115da:	d00e      	beq.n	80115fa <lwip_netconn_do_bind+0x42>
 80115dc:	2b20      	cmp	r3, #32
 80115de:	d119      	bne.n	8011614 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	6858      	ldr	r0, [r3, #4]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	6899      	ldr	r1, [r3, #8]
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	899b      	ldrh	r3, [r3, #12]
 80115ee:	461a      	mov	r2, r3
 80115f0:	f010 fbe6 	bl	8021dc0 <udp_bind>
 80115f4:	4603      	mov	r3, r0
 80115f6:	73fb      	strb	r3, [r7, #15]
        break;
 80115f8:	e011      	b.n	801161e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6858      	ldr	r0, [r3, #4]
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	6899      	ldr	r1, [r3, #8]
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	899b      	ldrh	r3, [r3, #12]
 8011608:	461a      	mov	r2, r3
 801160a:	f00a f949 	bl	801b8a0 <tcp_bind>
 801160e:	4603      	mov	r3, r0
 8011610:	73fb      	strb	r3, [r7, #15]
        break;
 8011612:	e004      	b.n	801161e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011614:	23fa      	movs	r3, #250	@ 0xfa
 8011616:	73fb      	strb	r3, [r7, #15]
        break;
 8011618:	e001      	b.n	801161e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801161a:	23fa      	movs	r3, #250	@ 0xfa
 801161c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	7bfa      	ldrb	r2, [r7, #15]
 8011622:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011624:	bf00      	nop
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b086      	sub	sp, #24
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d07f      	beq.n	8011742 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801164c:	2b10      	cmp	r3, #16
 801164e:	d175      	bne.n	801173c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	785b      	ldrb	r3, [r3, #1]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d165      	bne.n	8011726 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	7d1b      	ldrb	r3, [r3, #20]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d002      	beq.n	801166c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011666:	23fa      	movs	r3, #250	@ 0xfa
 8011668:	72fb      	strb	r3, [r7, #11]
 801166a:	e06c      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 801166c:	23ff      	movs	r3, #255	@ 0xff
 801166e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	f107 020b 	add.w	r2, r7, #11
 801167a:	7cf9      	ldrb	r1, [r7, #19]
 801167c:	4618      	mov	r0, r3
 801167e:	f00a f9c7 	bl	801ba10 <tcp_listen_with_backlog_and_err>
 8011682:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d05d      	beq.n	8011746 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	3310      	adds	r3, #16
 8011690:	4618      	mov	r0, r3
 8011692:	f010 fed1 	bl	8022438 <sys_mbox_valid>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d00b      	beq.n	80116b4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	3310      	adds	r3, #16
 80116a2:	4618      	mov	r0, r3
 80116a4:	f010 fe54 	bl	8022350 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	3310      	adds	r3, #16
 80116ae:	4618      	mov	r0, r3
 80116b0:	f010 fed3 	bl	802245a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3314      	adds	r3, #20
 80116be:	4618      	mov	r0, r3
 80116c0:	f010 feba 	bl	8022438 <sys_mbox_valid>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d108      	bne.n	80116dc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	3314      	adds	r3, #20
 80116d0:	2106      	movs	r1, #6
 80116d2:	4618      	mov	r0, r3
 80116d4:	f010 fe22 	bl	802231c <sys_mbox_new>
 80116d8:	4603      	mov	r3, r0
 80116da:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80116dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d118      	bne.n	8011716 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2202      	movs	r2, #2
 80116ea:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	685a      	ldr	r2, [r3, #4]
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4619      	mov	r1, r3
 8011700:	4610      	mov	r0, r2
 8011702:	f00b f955 	bl	801c9b0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	4912      	ldr	r1, [pc, #72]	@ (8011758 <lwip_netconn_do_listen+0x12c>)
 801170e:	4618      	mov	r0, r3
 8011710:	f00b f9c6 	bl	801caa0 <tcp_accept>
 8011714:	e017      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f009 ff70 	bl	801b5fc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2200      	movs	r2, #0
 8011722:	605a      	str	r2, [r3, #4]
 8011724:	e00f      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	785b      	ldrb	r3, [r3, #1]
 801172c:	2b02      	cmp	r3, #2
 801172e:	d102      	bne.n	8011736 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8011730:	2300      	movs	r3, #0
 8011732:	72fb      	strb	r3, [r7, #11]
 8011734:	e007      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8011736:	23f5      	movs	r3, #245	@ 0xf5
 8011738:	72fb      	strb	r3, [r7, #11]
 801173a:	e004      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 801173c:	23f0      	movs	r3, #240	@ 0xf0
 801173e:	72fb      	strb	r3, [r7, #11]
 8011740:	e001      	b.n	8011746 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8011742:	23f5      	movs	r3, #245	@ 0xf5
 8011744:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8011746:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801174e:	bf00      	nop
 8011750:	3718      	adds	r7, #24
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	08010c39 	.word	0x08010c39

0801175c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4618      	mov	r0, r3
 801176e:	f001 f969 	bl	8012a44 <netconn_err>
 8011772:	4603      	mov	r3, r0
 8011774:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d134      	bne.n	80117e8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d02d      	beq.n	80117e4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011792:	2b20      	cmp	r3, #32
 8011794:	d123      	bne.n	80117de <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d10c      	bne.n	80117ba <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	685a      	ldr	r2, [r3, #4]
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4619      	mov	r1, r3
 80117ae:	4610      	mov	r0, r2
 80117b0:	f010 f8d8 	bl	8021964 <udp_send>
 80117b4:	4603      	mov	r3, r0
 80117b6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80117b8:	e016      	b.n	80117e8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6858      	ldr	r0, [r3, #4]
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	6819      	ldr	r1, [r3, #0]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	f103 0208 	add.w	r2, r3, #8
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	899b      	ldrh	r3, [r3, #12]
 80117d4:	f010 f8fa 	bl	80219cc <udp_sendto>
 80117d8:	4603      	mov	r3, r0
 80117da:	73fb      	strb	r3, [r7, #15]
          break;
 80117dc:	e004      	b.n	80117e8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80117de:	23f5      	movs	r3, #245	@ 0xf5
 80117e0:	73fb      	strb	r3, [r7, #15]
          break;
 80117e2:	e001      	b.n	80117e8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80117e4:	23f5      	movs	r3, #245	@ 0xf5
 80117e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	7bfa      	ldrb	r2, [r7, #15]
 80117ec:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80117ee:	bf00      	nop
 80117f0:	3710      	adds	r7, #16
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}

080117f6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80117f6:	b580      	push	{r7, lr}
 80117f8:	b086      	sub	sp, #24
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	2200      	movs	r2, #0
 8011806:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d022      	beq.n	8011858 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801181c:	2b10      	cmp	r3, #16
 801181e:	d11b      	bne.n	8011858 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801182c:	d202      	bcs.n	8011834 <lwip_netconn_do_recv+0x3e>
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	b29b      	uxth	r3, r3
 8011832:	e001      	b.n	8011838 <lwip_netconn_do_recv+0x42>
 8011834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011838:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	89fa      	ldrh	r2, [r7, #14]
 8011842:	4611      	mov	r1, r2
 8011844:	4618      	mov	r0, r3
 8011846:	f00a f9e7 	bl	801bc18 <tcp_recved>
        remaining -= recved;
 801184a:	89fb      	ldrh	r3, [r7, #14]
 801184c:	697a      	ldr	r2, [r7, #20]
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1e6      	bne.n	8011826 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011858:	bf00      	nop
 801185a:	3718      	adds	r7, #24
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	460b      	mov	r3, r1
 801186a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801186c:	2300      	movs	r3, #0
 801186e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <lwip_netconn_do_writemore+0x24>
 8011876:	4b96      	ldr	r3, [pc, #600]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 8011878:	f240 6273 	movw	r2, #1651	@ 0x673
 801187c:	4995      	ldr	r1, [pc, #596]	@ (8011ad4 <lwip_netconn_do_writemore+0x274>)
 801187e:	4896      	ldr	r0, [pc, #600]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 8011880:	f011 f84a 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	785b      	ldrb	r3, [r3, #1]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d006      	beq.n	801189a <lwip_netconn_do_writemore+0x3a>
 801188c:	4b90      	ldr	r3, [pc, #576]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 801188e:	f240 6274 	movw	r2, #1652	@ 0x674
 8011892:	4992      	ldr	r1, [pc, #584]	@ (8011adc <lwip_netconn_do_writemore+0x27c>)
 8011894:	4890      	ldr	r0, [pc, #576]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 8011896:	f011 f83f 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a1b      	ldr	r3, [r3, #32]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d106      	bne.n	80118b0 <lwip_netconn_do_writemore+0x50>
 80118a2:	4b8b      	ldr	r3, [pc, #556]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 80118a4:	f240 6275 	movw	r2, #1653	@ 0x675
 80118a8:	498d      	ldr	r1, [pc, #564]	@ (8011ae0 <lwip_netconn_do_writemore+0x280>)
 80118aa:	488b      	ldr	r0, [pc, #556]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 80118ac:	f011 f834 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d106      	bne.n	80118c6 <lwip_netconn_do_writemore+0x66>
 80118b8:	4b85      	ldr	r3, [pc, #532]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 80118ba:	f240 6276 	movw	r2, #1654	@ 0x676
 80118be:	4989      	ldr	r1, [pc, #548]	@ (8011ae4 <lwip_netconn_do_writemore+0x284>)
 80118c0:	4885      	ldr	r0, [pc, #532]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 80118c2:	f011 f829 	bl	8022918 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a1b      	ldr	r3, [r3, #32]
 80118ca:	699a      	ldr	r2, [r3, #24]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a1b      	ldr	r3, [r3, #32]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d306      	bcc.n	80118e4 <lwip_netconn_do_writemore+0x84>
 80118d6:	4b7e      	ldr	r3, [pc, #504]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 80118d8:	f240 6277 	movw	r2, #1655	@ 0x677
 80118dc:	4982      	ldr	r1, [pc, #520]	@ (8011ae8 <lwip_netconn_do_writemore+0x288>)
 80118de:	487e      	ldr	r0, [pc, #504]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 80118e0:	f011 f81a 	bl	8022918 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a1b      	ldr	r3, [r3, #32]
 80118e8:	899b      	ldrh	r3, [r3, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <lwip_netconn_do_writemore+0x9c>
 80118ee:	4b78      	ldr	r3, [pc, #480]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 80118f0:	f240 6279 	movw	r2, #1657	@ 0x679
 80118f4:	497d      	ldr	r1, [pc, #500]	@ (8011aec <lwip_netconn_do_writemore+0x28c>)
 80118f6:	4878      	ldr	r0, [pc, #480]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 80118f8:	f011 f80e 	bl	8022918 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a1b      	ldr	r3, [r3, #32]
 8011900:	7f1b      	ldrb	r3, [r3, #28]
 8011902:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	7f1b      	ldrb	r3, [r3, #28]
 8011908:	f003 0302 	and.w	r3, r3, #2
 801190c:	2b00      	cmp	r3, #0
 801190e:	d104      	bne.n	801191a <lwip_netconn_do_writemore+0xba>
 8011910:	7ebb      	ldrb	r3, [r7, #26]
 8011912:	f003 0304 	and.w	r3, r3, #4
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <lwip_netconn_do_writemore+0xbe>
 801191a:	2301      	movs	r3, #1
 801191c:	e000      	b.n	8011920 <lwip_netconn_do_writemore+0xc0>
 801191e:	2300      	movs	r3, #0
 8011920:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a1b      	ldr	r3, [r3, #32]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6a1b      	ldr	r3, [r3, #32]
 801192e:	691b      	ldr	r3, [r3, #16]
 8011930:	4413      	add	r3, r2
 8011932:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a1b      	ldr	r3, [r3, #32]
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	685a      	ldr	r2, [r3, #4]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6a1b      	ldr	r3, [r3, #32]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801194c:	d307      	bcc.n	801195e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801194e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011952:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011954:	7ebb      	ldrb	r3, [r7, #26]
 8011956:	f043 0302 	orr.w	r3, r3, #2
 801195a:	76bb      	strb	r3, [r7, #26]
 801195c:	e001      	b.n	8011962 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801196a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801196c:	89fa      	ldrh	r2, [r7, #14]
 801196e:	8bbb      	ldrh	r3, [r7, #28]
 8011970:	429a      	cmp	r2, r3
 8011972:	d216      	bcs.n	80119a2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011974:	89fb      	ldrh	r3, [r7, #14]
 8011976:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011978:	7e3b      	ldrb	r3, [r7, #24]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00d      	beq.n	801199a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801197e:	8bbb      	ldrh	r3, [r7, #28]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d10e      	bne.n	80119a2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6a1b      	ldr	r3, [r3, #32]
 8011988:	699b      	ldr	r3, [r3, #24]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d102      	bne.n	8011994 <lwip_netconn_do_writemore+0x134>
 801198e:	f06f 0306 	mvn.w	r3, #6
 8011992:	e000      	b.n	8011996 <lwip_netconn_do_writemore+0x136>
 8011994:	2300      	movs	r3, #0
 8011996:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011998:	e07d      	b.n	8011a96 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801199a:	7ebb      	ldrb	r3, [r7, #26]
 801199c:	f043 0302 	orr.w	r3, r3, #2
 80119a0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6a1b      	ldr	r3, [r3, #32]
 80119a6:	691a      	ldr	r2, [r3, #16]
 80119a8:	8bbb      	ldrh	r3, [r7, #28]
 80119aa:	441a      	add	r2, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a1b      	ldr	r3, [r3, #32]
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d906      	bls.n	80119c6 <lwip_netconn_do_writemore+0x166>
 80119b8:	4b45      	ldr	r3, [pc, #276]	@ (8011ad0 <lwip_netconn_do_writemore+0x270>)
 80119ba:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80119be:	494c      	ldr	r1, [pc, #304]	@ (8011af0 <lwip_netconn_do_writemore+0x290>)
 80119c0:	4845      	ldr	r0, [pc, #276]	@ (8011ad8 <lwip_netconn_do_writemore+0x278>)
 80119c2:	f010 ffa9 	bl	8022918 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80119c6:	8bbb      	ldrh	r3, [r7, #28]
 80119c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d103      	bne.n	80119d8 <lwip_netconn_do_writemore+0x178>
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119d6:	d209      	bcs.n	80119ec <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80119dc:	8bba      	ldrh	r2, [r7, #28]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d10b      	bne.n	80119fa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6a1b      	ldr	r3, [r3, #32]
 80119e6:	899b      	ldrh	r3, [r3, #12]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d906      	bls.n	80119fa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80119ec:	2301      	movs	r3, #1
 80119ee:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80119f0:	7ebb      	ldrb	r3, [r7, #26]
 80119f2:	f043 0302 	orr.w	r3, r3, #2
 80119f6:	76bb      	strb	r3, [r7, #26]
 80119f8:	e001      	b.n	80119fe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6858      	ldr	r0, [r3, #4]
 8011a02:	7ebb      	ldrb	r3, [r7, #26]
 8011a04:	8bba      	ldrh	r2, [r7, #28]
 8011a06:	6979      	ldr	r1, [r7, #20]
 8011a08:	f00d ff10 	bl	801f82c <tcp_write>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d12c      	bne.n	8011a72 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a1b      	ldr	r3, [r3, #32]
 8011a1c:	6999      	ldr	r1, [r3, #24]
 8011a1e:	8bba      	ldrh	r2, [r7, #28]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6a1b      	ldr	r3, [r3, #32]
 8011a24:	440a      	add	r2, r1
 8011a26:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a1b      	ldr	r3, [r3, #32]
 8011a2c:	6919      	ldr	r1, [r3, #16]
 8011a2e:	8bba      	ldrh	r2, [r7, #28]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6a1b      	ldr	r3, [r3, #32]
 8011a34:	440a      	add	r2, r1
 8011a36:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6a1b      	ldr	r3, [r3, #32]
 8011a3c:	691a      	ldr	r2, [r3, #16]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d113      	bne.n	8011a72 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6a1b      	ldr	r3, [r3, #32]
 8011a4e:	899a      	ldrh	r2, [r3, #12]
 8011a50:	3a01      	subs	r2, #1
 8011a52:	b292      	uxth	r2, r2
 8011a54:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6a1b      	ldr	r3, [r3, #32]
 8011a5a:	899b      	ldrh	r3, [r3, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d008      	beq.n	8011a72 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	689a      	ldr	r2, [r3, #8]
 8011a66:	3208      	adds	r2, #8
 8011a68:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6a1b      	ldr	r3, [r3, #32]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8011a72:	7e7b      	ldrb	r3, [r7, #25]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d004      	beq.n	8011a82 <lwip_netconn_do_writemore+0x222>
 8011a78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f43f af50 	beq.w	8011922 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8011a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d004      	beq.n	8011a94 <lwip_netconn_do_writemore+0x234>
 8011a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a92:	d147      	bne.n	8011b24 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8011a94:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8011a96:	7e3b      	ldrb	r3, [r7, #24]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d02b      	beq.n	8011af4 <lwip_netconn_do_writemore+0x294>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6a1b      	ldr	r3, [r3, #32]
 8011aa0:	699a      	ldr	r2, [r3, #24]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a1b      	ldr	r3, [r3, #32]
 8011aa6:	695b      	ldr	r3, [r3, #20]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d223      	bcs.n	8011af4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d005      	beq.n	8011ac0 <lwip_netconn_do_writemore+0x260>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2103      	movs	r1, #3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7f1b      	ldrb	r3, [r3, #28]
 8011ac4:	f043 0310 	orr.w	r3, r3, #16
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	771a      	strb	r2, [r3, #28]
 8011ace:	e029      	b.n	8011b24 <lwip_netconn_do_writemore+0x2c4>
 8011ad0:	08023fcc 	.word	0x08023fcc
 8011ad4:	08024168 	.word	0x08024168
 8011ad8:	08024054 	.word	0x08024054
 8011adc:	08024470 	.word	0x08024470
 8011ae0:	08024178 	.word	0x08024178
 8011ae4:	08024490 	.word	0x08024490
 8011ae8:	080244a8 	.word	0x080244a8
 8011aec:	080244e8 	.word	0x080244e8
 8011af0:	08024510 	.word	0x08024510
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011afc:	f640 3269 	movw	r2, #2921	@ 0xb69
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d905      	bls.n	8011b10 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011b0c:	2b07      	cmp	r3, #7
 8011b0e:	d909      	bls.n	8011b24 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d005      	beq.n	8011b24 <lwip_netconn_do_writemore+0x2c4>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	2103      	movs	r1, #3
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d11d      	bne.n	8011b68 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6a1b      	ldr	r3, [r3, #32]
 8011b30:	699a      	ldr	r2, [r3, #24]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6a1b      	ldr	r3, [r3, #32]
 8011b36:	695b      	ldr	r3, [r3, #20]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d002      	beq.n	8011b42 <lwip_netconn_do_writemore+0x2e2>
 8011b3c:	7e3b      	ldrb	r3, [r7, #24]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011b42:	2301      	movs	r3, #1
 8011b44:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f00e fc58 	bl	8020400 <tcp_output>
 8011b50:	4603      	mov	r3, r0
 8011b52:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011b54:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011b58:	f113 0f04 	cmn.w	r3, #4
 8011b5c:	d12c      	bne.n	8011bb8 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011b5e:	7b3b      	ldrb	r3, [r7, #12]
 8011b60:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011b62:	2301      	movs	r3, #1
 8011b64:	76fb      	strb	r3, [r7, #27]
 8011b66:	e027      	b.n	8011bb8 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8011b68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b70:	d120      	bne.n	8011bb4 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f00e fc42 	bl	8020400 <tcp_output>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011b80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011b84:	f113 0f04 	cmn.w	r3, #4
 8011b88:	d104      	bne.n	8011b94 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011b8a:	7b7b      	ldrb	r3, [r7, #13]
 8011b8c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	76fb      	strb	r3, [r7, #27]
 8011b92:	e011      	b.n	8011bb8 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8011b94:	7e3b      	ldrb	r3, [r7, #24]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00e      	beq.n	8011bb8 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a1b      	ldr	r3, [r3, #32]
 8011b9e:	699b      	ldr	r3, [r3, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d102      	bne.n	8011baa <lwip_netconn_do_writemore+0x34a>
 8011ba4:	f06f 0306 	mvn.w	r3, #6
 8011ba8:	e000      	b.n	8011bac <lwip_netconn_do_writemore+0x34c>
 8011baa:	2300      	movs	r3, #0
 8011bac:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	76fb      	strb	r3, [r7, #27]
 8011bb2:	e001      	b.n	8011bb8 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011bb8:	7efb      	ldrb	r3, [r7, #27]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d015      	beq.n	8011bea <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	330c      	adds	r3, #12
 8011bc6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6a1b      	ldr	r3, [r3, #32]
 8011bcc:	7ffa      	ldrb	r2, [r7, #31]
 8011bce:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011bdc:	78fb      	ldrb	r3, [r7, #3]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d006      	beq.n	8011bf0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011be2:	68b8      	ldr	r0, [r7, #8]
 8011be4:	f010 fc9c 	bl	8022520 <sys_sem_signal>
 8011be8:	e002      	b.n	8011bf0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011bea:	f04f 33ff 	mov.w	r3, #4294967295
 8011bee:	e000      	b.n	8011bf2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 8011bf0:	2300      	movs	r3, #0
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3720      	adds	r7, #32
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop

08011bfc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 ff19 	bl	8012a44 <netconn_err>
 8011c12:	4603      	mov	r3, r0
 8011c14:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d166      	bne.n	8011cec <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c28:	2b10      	cmp	r3, #16
 8011c2a:	d15d      	bne.n	8011ce8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	785b      	ldrb	r3, [r3, #1]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d002      	beq.n	8011c3c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011c36:	23fb      	movs	r3, #251	@ 0xfb
 8011c38:	73fb      	strb	r3, [r7, #15]
 8011c3a:	e057      	b.n	8011cec <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d04d      	beq.n	8011ce2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6a1b      	ldr	r3, [r3, #32]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d006      	beq.n	8011c66 <lwip_netconn_do_write+0x6a>
 8011c58:	4b28      	ldr	r3, [pc, #160]	@ (8011cfc <lwip_netconn_do_write+0x100>)
 8011c5a:	f240 7223 	movw	r2, #1827	@ 0x723
 8011c5e:	4928      	ldr	r1, [pc, #160]	@ (8011d00 <lwip_netconn_do_write+0x104>)
 8011c60:	4828      	ldr	r0, [pc, #160]	@ (8011d04 <lwip_netconn_do_write+0x108>)
 8011c62:	f010 fe59 	bl	8022918 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	695b      	ldr	r3, [r3, #20]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <lwip_netconn_do_write+0x80>
 8011c6e:	4b23      	ldr	r3, [pc, #140]	@ (8011cfc <lwip_netconn_do_write+0x100>)
 8011c70:	f240 7224 	movw	r2, #1828	@ 0x724
 8011c74:	4924      	ldr	r1, [pc, #144]	@ (8011d08 <lwip_netconn_do_write+0x10c>)
 8011c76:	4823      	ldr	r0, [pc, #140]	@ (8011d04 <lwip_netconn_do_write+0x108>)
 8011c78:	f010 fe4e 	bl	8022918 <iprintf>
        msg->conn->current_msg = msg;
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2100      	movs	r1, #0
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff fde8 	bl	8011860 <lwip_netconn_do_writemore>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d02e      	beq.n	8011cf4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	785b      	ldrb	r3, [r3, #1]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d006      	beq.n	8011cae <lwip_netconn_do_write+0xb2>
 8011ca0:	4b16      	ldr	r3, [pc, #88]	@ (8011cfc <lwip_netconn_do_write+0x100>)
 8011ca2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8011ca6:	4919      	ldr	r1, [pc, #100]	@ (8011d0c <lwip_netconn_do_write+0x110>)
 8011ca8:	4816      	ldr	r0, [pc, #88]	@ (8011d04 <lwip_netconn_do_write+0x108>)
 8011caa:	f010 fe35 	bl	8022918 <iprintf>
          UNLOCK_TCPIP_CORE();
 8011cae:	4818      	ldr	r0, [pc, #96]	@ (8011d10 <lwip_netconn_do_write+0x114>)
 8011cb0:	f010 fc9f 	bl	80225f2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	330c      	adds	r3, #12
 8011cba:	2100      	movs	r1, #0
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f010 fbfe 	bl	80224be <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011cc2:	4813      	ldr	r0, [pc, #76]	@ (8011d10 <lwip_netconn_do_write+0x114>)
 8011cc4:	f010 fc86 	bl	80225d4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	785b      	ldrb	r3, [r3, #1]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d110      	bne.n	8011cf4 <lwip_netconn_do_write+0xf8>
 8011cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8011cfc <lwip_netconn_do_write+0x100>)
 8011cd4:	f240 722c 	movw	r2, #1836	@ 0x72c
 8011cd8:	490c      	ldr	r1, [pc, #48]	@ (8011d0c <lwip_netconn_do_write+0x110>)
 8011cda:	480a      	ldr	r0, [pc, #40]	@ (8011d04 <lwip_netconn_do_write+0x108>)
 8011cdc:	f010 fe1c 	bl	8022918 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011ce0:	e008      	b.n	8011cf4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011ce2:	23f5      	movs	r3, #245	@ 0xf5
 8011ce4:	73fb      	strb	r3, [r7, #15]
 8011ce6:	e001      	b.n	8011cec <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011ce8:	23fa      	movs	r3, #250	@ 0xfa
 8011cea:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	7bfa      	ldrb	r2, [r7, #15]
 8011cf0:	711a      	strb	r2, [r3, #4]
 8011cf2:	e000      	b.n	8011cf6 <lwip_netconn_do_write+0xfa>
        return;
 8011cf4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	08023fcc 	.word	0x08023fcc
 8011d00:	080243b4 	.word	0x080243b4
 8011d04:	08024054 	.word	0x08024054
 8011d08:	0802453c 	.word	0x0802453c
 8011d0c:	080243d0 	.word	0x080243d0
 8011d10:	20008d78 	.word	0x20008d78

08011d14 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d06b      	beq.n	8011e02 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	7c1b      	ldrb	r3, [r3, #16]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d007      	beq.n	8011d42 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	685a      	ldr	r2, [r3, #4]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	6812      	ldr	r2, [r2, #0]
 8011d3e:	601a      	str	r2, [r3, #0]
 8011d40:	e006      	b.n	8011d50 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	685a      	ldr	r2, [r3, #4]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	6852      	ldr	r2, [r2, #4]
 8011d4e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2200      	movs	r2, #0
 8011d54:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011d60:	2b10      	cmp	r3, #16
 8011d62:	d021      	beq.n	8011da8 <lwip_netconn_do_getaddr+0x94>
 8011d64:	2b20      	cmp	r3, #32
 8011d66:	d144      	bne.n	8011df2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	7c1b      	ldrb	r3, [r3, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d007      	beq.n	8011d80 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	68db      	ldr	r3, [r3, #12]
 8011d7a:	8a52      	ldrh	r2, [r2, #18]
 8011d7c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8011d7e:	e044      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	7c1b      	ldrb	r3, [r3, #16]
 8011d88:	f003 0304 	and.w	r3, r3, #4
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d103      	bne.n	8011d98 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	22f5      	movs	r2, #245	@ 0xf5
 8011d94:	711a      	strb	r2, [r3, #4]
        break;
 8011d96:	e038      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	685a      	ldr	r2, [r3, #4]
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	8a92      	ldrh	r2, [r2, #20]
 8011da4:	801a      	strh	r2, [r3, #0]
        break;
 8011da6:	e030      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	7c1b      	ldrb	r3, [r3, #16]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d10f      	bne.n	8011dd0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d005      	beq.n	8011dc8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	7d1b      	ldrb	r3, [r3, #20]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d103      	bne.n	8011dd0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	22f5      	movs	r2, #245	@ 0xf5
 8011dcc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8011dce:	e01c      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	7c1b      	ldrb	r3, [r3, #16]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d004      	beq.n	8011de2 <lwip_netconn_do_getaddr+0xce>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	8adb      	ldrh	r3, [r3, #22]
 8011de0:	e003      	b.n	8011dea <lwip_netconn_do_getaddr+0xd6>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	8b1b      	ldrh	r3, [r3, #24]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	68d2      	ldr	r2, [r2, #12]
 8011dee:	8013      	strh	r3, [r2, #0]
        break;
 8011df0:	e00b      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8011df2:	4b08      	ldr	r3, [pc, #32]	@ (8011e14 <lwip_netconn_do_getaddr+0x100>)
 8011df4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011df8:	4907      	ldr	r1, [pc, #28]	@ (8011e18 <lwip_netconn_do_getaddr+0x104>)
 8011dfa:	4808      	ldr	r0, [pc, #32]	@ (8011e1c <lwip_netconn_do_getaddr+0x108>)
 8011dfc:	f010 fd8c 	bl	8022918 <iprintf>
        break;
 8011e00:	e003      	b.n	8011e0a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	22f5      	movs	r2, #245	@ 0xf5
 8011e06:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011e08:	bf00      	nop
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	08023fcc 	.word	0x08023fcc
 8011e18:	08024550 	.word	0x08024550
 8011e1c:	08024054 	.word	0x08024054

08011e20 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	785b      	ldrb	r3, [r3, #1]
 8011e32:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d069      	beq.n	8011f12 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e48:	2b10      	cmp	r3, #16
 8011e4a:	d162      	bne.n	8011f12 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d002      	beq.n	8011e5a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e54:	7afb      	ldrb	r3, [r7, #11]
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d05b      	beq.n	8011f12 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011e5a:	7afb      	ldrb	r3, [r7, #11]
 8011e5c:	2b03      	cmp	r3, #3
 8011e5e:	d103      	bne.n	8011e68 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	22f5      	movs	r2, #245	@ 0xf5
 8011e64:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e66:	e059      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011e68:	7afb      	ldrb	r3, [r7, #11]
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d103      	bne.n	8011e76 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	22fb      	movs	r2, #251	@ 0xfb
 8011e72:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e74:	e052      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	7a1b      	ldrb	r3, [r3, #8]
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff f8ca 	bl	8011020 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6a1b      	ldr	r3, [r3, #32]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d006      	beq.n	8011ea4 <lwip_netconn_do_close+0x84>
 8011e96:	4b23      	ldr	r3, [pc, #140]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011e98:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8011e9c:	4922      	ldr	r1, [pc, #136]	@ (8011f28 <lwip_netconn_do_close+0x108>)
 8011e9e:	4823      	ldr	r0, [pc, #140]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011ea0:	f010 fd3a 	bl	8022918 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2204      	movs	r2, #4
 8011eaa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2100      	movs	r1, #0
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff f92e 	bl	801111c <lwip_netconn_do_close_internal>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d029      	beq.n	8011f1a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	785b      	ldrb	r3, [r3, #1]
 8011ecc:	2b04      	cmp	r3, #4
 8011ece:	d006      	beq.n	8011ede <lwip_netconn_do_close+0xbe>
 8011ed0:	4b14      	ldr	r3, [pc, #80]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011ed2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8011ed6:	4916      	ldr	r1, [pc, #88]	@ (8011f30 <lwip_netconn_do_close+0x110>)
 8011ed8:	4814      	ldr	r0, [pc, #80]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011eda:	f010 fd1d 	bl	8022918 <iprintf>
        UNLOCK_TCPIP_CORE();
 8011ede:	4815      	ldr	r0, [pc, #84]	@ (8011f34 <lwip_netconn_do_close+0x114>)
 8011ee0:	f010 fb87 	bl	80225f2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	330c      	adds	r3, #12
 8011eea:	2100      	movs	r1, #0
 8011eec:	4618      	mov	r0, r3
 8011eee:	f010 fae6 	bl	80224be <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011ef2:	4810      	ldr	r0, [pc, #64]	@ (8011f34 <lwip_netconn_do_close+0x114>)
 8011ef4:	f010 fb6e 	bl	80225d4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	785b      	ldrb	r3, [r3, #1]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00b      	beq.n	8011f1a <lwip_netconn_do_close+0xfa>
 8011f02:	4b08      	ldr	r3, [pc, #32]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011f04:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8011f08:	4909      	ldr	r1, [pc, #36]	@ (8011f30 <lwip_netconn_do_close+0x110>)
 8011f0a:	4808      	ldr	r0, [pc, #32]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011f0c:	f010 fd04 	bl	8022918 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011f10:	e003      	b.n	8011f1a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	22f5      	movs	r2, #245	@ 0xf5
 8011f16:	711a      	strb	r2, [r3, #4]
 8011f18:	e000      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
      return;
 8011f1a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	08023fcc 	.word	0x08023fcc
 8011f28:	080243b4 	.word	0x080243b4
 8011f2c:	08024054 	.word	0x08024054
 8011f30:	080243d0 	.word	0x080243d0
 8011f34:	20008d78 	.word	0x20008d78

08011f38 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_CONN;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	22f5      	movs	r2, #245	@ 0xf5
 8011f48:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d027      	beq.n	8011fa4 <lwip_netconn_do_join_leave_group+0x6c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f5e:	2b20      	cmp	r3, #32
 8011f60:	d11d      	bne.n	8011f9e <lwip_netconn_do_join_leave_group+0x66>
        }
      } else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
      {
#if LWIP_IGMP
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	7c5b      	ldrb	r3, [r3, #17]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d10c      	bne.n	8011f84 <lwip_netconn_do_join_leave_group+0x4c>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68da      	ldr	r2, [r3, #12]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f72:	4619      	mov	r1, r3
 8011f74:	4610      	mov	r0, r2
 8011f76:	f005 fb45 	bl	8017604 <igmp_joingroup>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	711a      	strb	r2, [r3, #4]
      msg->err = ERR_VAL;
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011f82:	e00f      	b.n	8011fa4 <lwip_netconn_do_join_leave_group+0x6c>
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	68da      	ldr	r2, [r3, #12]
                                     ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4610      	mov	r0, r2
 8011f90:	f005 fc14 	bl	80177bc <igmp_leavegroup>
 8011f94:	4603      	mov	r3, r0
 8011f96:	461a      	mov	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	711a      	strb	r2, [r3, #4]
}
 8011f9c:	e002      	b.n	8011fa4 <lwip_netconn_do_join_leave_group+0x6c>
      msg->err = ERR_VAL;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	22fa      	movs	r2, #250	@ 0xfa
 8011fa2:	711a      	strb	r2, [r3, #4]
}
 8011fa4:	bf00      	nop
 8011fa6:	3710      	adds	r7, #16
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	330c      	adds	r3, #12
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f002 f979 	bl	80142b8 <tcpip_send_msg_wait_sem>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d103      	bne.n	8011fda <netconn_apimsg+0x2e>
    return apimsg->err;
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011fd8:	e001      	b.n	8011fde <netconn_apimsg+0x32>
  }
  return err;
 8011fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
	...

08011fe8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08c      	sub	sp, #48	@ 0x30
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	603a      	str	r2, [r7, #0]
 8011ff2:	71fb      	strb	r3, [r7, #7]
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011ff8:	79fb      	ldrb	r3, [r7, #7]
 8011ffa:	6839      	ldr	r1, [r7, #0]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fe ff57 	bl	8010eb0 <netconn_alloc>
 8012002:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8012004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012006:	2b00      	cmp	r3, #0
 8012008:	d054      	beq.n	80120b4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 801200a:	79bb      	ldrb	r3, [r7, #6]
 801200c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801200e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012010:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8012012:	f107 0308 	add.w	r3, r7, #8
 8012016:	4619      	mov	r1, r3
 8012018:	4829      	ldr	r0, [pc, #164]	@ (80120c0 <netconn_new_with_proto_and_callback+0xd8>)
 801201a:	f7ff ffc7 	bl	8011fac <netconn_apimsg>
 801201e:	4603      	mov	r3, r0
 8012020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8012024:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012028:	2b00      	cmp	r3, #0
 801202a:	d043      	beq.n	80120b4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 801202c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d005      	beq.n	8012040 <netconn_new_with_proto_and_callback+0x58>
 8012034:	4b23      	ldr	r3, [pc, #140]	@ (80120c4 <netconn_new_with_proto_and_callback+0xdc>)
 8012036:	22a3      	movs	r2, #163	@ 0xa3
 8012038:	4923      	ldr	r1, [pc, #140]	@ (80120c8 <netconn_new_with_proto_and_callback+0xe0>)
 801203a:	4824      	ldr	r0, [pc, #144]	@ (80120cc <netconn_new_with_proto_and_callback+0xe4>)
 801203c:	f010 fc6c 	bl	8022918 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8012040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012042:	3310      	adds	r3, #16
 8012044:	4618      	mov	r0, r3
 8012046:	f010 f9f7 	bl	8022438 <sys_mbox_valid>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d105      	bne.n	801205c <netconn_new_with_proto_and_callback+0x74>
 8012050:	4b1c      	ldr	r3, [pc, #112]	@ (80120c4 <netconn_new_with_proto_and_callback+0xdc>)
 8012052:	22a4      	movs	r2, #164	@ 0xa4
 8012054:	491e      	ldr	r1, [pc, #120]	@ (80120d0 <netconn_new_with_proto_and_callback+0xe8>)
 8012056:	481d      	ldr	r0, [pc, #116]	@ (80120cc <netconn_new_with_proto_and_callback+0xe4>)
 8012058:	f010 fc5e 	bl	8022918 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 801205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801205e:	3314      	adds	r3, #20
 8012060:	4618      	mov	r0, r3
 8012062:	f010 f9e9 	bl	8022438 <sys_mbox_valid>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d005      	beq.n	8012078 <netconn_new_with_proto_and_callback+0x90>
 801206c:	4b15      	ldr	r3, [pc, #84]	@ (80120c4 <netconn_new_with_proto_and_callback+0xdc>)
 801206e:	22a6      	movs	r2, #166	@ 0xa6
 8012070:	4918      	ldr	r1, [pc, #96]	@ (80120d4 <netconn_new_with_proto_and_callback+0xec>)
 8012072:	4816      	ldr	r0, [pc, #88]	@ (80120cc <netconn_new_with_proto_and_callback+0xe4>)
 8012074:	f010 fc50 	bl	8022918 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8012078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801207a:	330c      	adds	r3, #12
 801207c:	4618      	mov	r0, r3
 801207e:	f010 fa69 	bl	8022554 <sys_sem_valid>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d105      	bne.n	8012094 <netconn_new_with_proto_and_callback+0xac>
 8012088:	4b0e      	ldr	r3, [pc, #56]	@ (80120c4 <netconn_new_with_proto_and_callback+0xdc>)
 801208a:	22a9      	movs	r2, #169	@ 0xa9
 801208c:	4912      	ldr	r1, [pc, #72]	@ (80120d8 <netconn_new_with_proto_and_callback+0xf0>)
 801208e:	480f      	ldr	r0, [pc, #60]	@ (80120cc <netconn_new_with_proto_and_callback+0xe4>)
 8012090:	f010 fc42 	bl	8022918 <iprintf>
      sys_sem_free(&conn->op_completed);
 8012094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012096:	330c      	adds	r3, #12
 8012098:	4618      	mov	r0, r3
 801209a:	f010 fa4e 	bl	802253a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801209e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a0:	3310      	adds	r3, #16
 80120a2:	4618      	mov	r0, r3
 80120a4:	f010 f954 	bl	8022350 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80120a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120aa:	2007      	movs	r0, #7
 80120ac:	f007 fe62 	bl	8019d74 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80120b0:	2300      	movs	r3, #0
 80120b2:	e000      	b.n	80120b6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80120b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3730      	adds	r7, #48	@ 0x30
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	08010e85 	.word	0x08010e85
 80120c4:	08024568 	.word	0x08024568
 80120c8:	080245e0 	.word	0x080245e0
 80120cc:	08024054 	.word	0x08024054
 80120d0:	08024604 	.word	0x08024604
 80120d4:	0802461c 	.word	0x0802461c
 80120d8:	08024640 	.word	0x08024640

080120dc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08c      	sub	sp, #48	@ 0x30
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <netconn_prepare_delete+0x12>
    return ERR_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	e014      	b.n	8012118 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80120f2:	2329      	movs	r3, #41	@ 0x29
 80120f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80120f6:	f107 030c 	add.w	r3, r7, #12
 80120fa:	4619      	mov	r1, r3
 80120fc:	4808      	ldr	r0, [pc, #32]	@ (8012120 <netconn_prepare_delete+0x44>)
 80120fe:	f7ff ff55 	bl	8011fac <netconn_apimsg>
 8012102:	4603      	mov	r3, r0
 8012104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8012108:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801210c:	2b00      	cmp	r3, #0
 801210e:	d002      	beq.n	8012116 <netconn_prepare_delete+0x3a>
    return err;
 8012110:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8012114:	e000      	b.n	8012118 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8012116:	2300      	movs	r3, #0
}
 8012118:	4618      	mov	r0, r3
 801211a:	3730      	adds	r7, #48	@ 0x30
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	080113f1 	.word	0x080113f1

08012124 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d101      	bne.n	8012136 <netconn_delete+0x12>
    return ERR_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	e00d      	b.n	8012152 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f7ff ffd0 	bl	80120dc <netconn_prepare_delete>
 801213c:	4603      	mov	r3, r0
 801213e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8012140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d102      	bne.n	801214e <netconn_delete+0x2a>
    netconn_free(conn);
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7fe ff1f 	bl	8010f8c <netconn_free>
  }
  return err;
 801214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3710      	adds	r7, #16
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
	...

0801215c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08e      	sub	sp, #56	@ 0x38
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
 8012168:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d109      	bne.n	8012184 <netconn_getaddr+0x28>
 8012170:	4b1d      	ldr	r3, [pc, #116]	@ (80121e8 <netconn_getaddr+0x8c>)
 8012172:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012176:	491d      	ldr	r1, [pc, #116]	@ (80121ec <netconn_getaddr+0x90>)
 8012178:	481d      	ldr	r0, [pc, #116]	@ (80121f0 <netconn_getaddr+0x94>)
 801217a:	f010 fbcd 	bl	8022918 <iprintf>
 801217e:	f06f 030f 	mvn.w	r3, #15
 8012182:	e02d      	b.n	80121e0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d109      	bne.n	801219e <netconn_getaddr+0x42>
 801218a:	4b17      	ldr	r3, [pc, #92]	@ (80121e8 <netconn_getaddr+0x8c>)
 801218c:	f240 1213 	movw	r2, #275	@ 0x113
 8012190:	4918      	ldr	r1, [pc, #96]	@ (80121f4 <netconn_getaddr+0x98>)
 8012192:	4817      	ldr	r0, [pc, #92]	@ (80121f0 <netconn_getaddr+0x94>)
 8012194:	f010 fbc0 	bl	8022918 <iprintf>
 8012198:	f06f 030f 	mvn.w	r3, #15
 801219c:	e020      	b.n	80121e0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d109      	bne.n	80121b8 <netconn_getaddr+0x5c>
 80121a4:	4b10      	ldr	r3, [pc, #64]	@ (80121e8 <netconn_getaddr+0x8c>)
 80121a6:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80121aa:	4913      	ldr	r1, [pc, #76]	@ (80121f8 <netconn_getaddr+0x9c>)
 80121ac:	4810      	ldr	r0, [pc, #64]	@ (80121f0 <netconn_getaddr+0x94>)
 80121ae:	f010 fbb3 	bl	8022918 <iprintf>
 80121b2:	f06f 030f 	mvn.w	r3, #15
 80121b6:	e013      	b.n	80121e0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80121bc:	78fb      	ldrb	r3, [r7, #3]
 80121be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80121ca:	f107 0314 	add.w	r3, r7, #20
 80121ce:	4619      	mov	r1, r3
 80121d0:	480a      	ldr	r0, [pc, #40]	@ (80121fc <netconn_getaddr+0xa0>)
 80121d2:	f7ff feeb 	bl	8011fac <netconn_apimsg>
 80121d6:	4603      	mov	r3, r0
 80121d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80121dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3738      	adds	r7, #56	@ 0x38
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	08024568 	.word	0x08024568
 80121ec:	0802465c 	.word	0x0802465c
 80121f0:	08024054 	.word	0x08024054
 80121f4:	0802467c 	.word	0x0802467c
 80121f8:	0802469c 	.word	0x0802469c
 80121fc:	08011d15 	.word	0x08011d15

08012200 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b08e      	sub	sp, #56	@ 0x38
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	4613      	mov	r3, r2
 801220c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d109      	bne.n	8012228 <netconn_bind+0x28>
 8012214:	4b11      	ldr	r3, [pc, #68]	@ (801225c <netconn_bind+0x5c>)
 8012216:	f44f 729c 	mov.w	r2, #312	@ 0x138
 801221a:	4911      	ldr	r1, [pc, #68]	@ (8012260 <netconn_bind+0x60>)
 801221c:	4811      	ldr	r0, [pc, #68]	@ (8012264 <netconn_bind+0x64>)
 801221e:	f010 fb7b 	bl	8022918 <iprintf>
 8012222:	f06f 030f 	mvn.w	r3, #15
 8012226:	e015      	b.n	8012254 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d101      	bne.n	8012232 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801222e:	4b0e      	ldr	r3, [pc, #56]	@ (8012268 <netconn_bind+0x68>)
 8012230:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801223a:	88fb      	ldrh	r3, [r7, #6]
 801223c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801223e:	f107 0314 	add.w	r3, r7, #20
 8012242:	4619      	mov	r1, r3
 8012244:	4809      	ldr	r0, [pc, #36]	@ (801226c <netconn_bind+0x6c>)
 8012246:	f7ff feb1 	bl	8011fac <netconn_apimsg>
 801224a:	4603      	mov	r3, r0
 801224c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012250:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012254:	4618      	mov	r0, r3
 8012256:	3738      	adds	r7, #56	@ 0x38
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	08024568 	.word	0x08024568
 8012260:	080246bc 	.word	0x080246bc
 8012264:	08024054 	.word	0x08024054
 8012268:	08028bec 	.word	0x08028bec
 801226c:	080115b9 	.word	0x080115b9

08012270 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b08c      	sub	sp, #48	@ 0x30
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	460b      	mov	r3, r1
 801227a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d109      	bne.n	8012296 <netconn_listen_with_backlog+0x26>
 8012282:	4b0d      	ldr	r3, [pc, #52]	@ (80122b8 <netconn_listen_with_backlog+0x48>)
 8012284:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8012288:	490c      	ldr	r1, [pc, #48]	@ (80122bc <netconn_listen_with_backlog+0x4c>)
 801228a:	480d      	ldr	r0, [pc, #52]	@ (80122c0 <netconn_listen_with_backlog+0x50>)
 801228c:	f010 fb44 	bl	8022918 <iprintf>
 8012290:	f06f 030f 	mvn.w	r3, #15
 8012294:	e00c      	b.n	80122b0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801229a:	f107 030c 	add.w	r3, r7, #12
 801229e:	4619      	mov	r1, r3
 80122a0:	4808      	ldr	r0, [pc, #32]	@ (80122c4 <netconn_listen_with_backlog+0x54>)
 80122a2:	f7ff fe83 	bl	8011fac <netconn_apimsg>
 80122a6:	4603      	mov	r3, r0
 80122a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80122ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3730      	adds	r7, #48	@ 0x30
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	08024568 	.word	0x08024568
 80122bc:	0802473c 	.word	0x0802473c
 80122c0:	08024054 	.word	0x08024054
 80122c4:	0801162d 	.word	0x0801162d

080122c8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d109      	bne.n	80122ec <netconn_accept+0x24>
 80122d8:	4b3d      	ldr	r3, [pc, #244]	@ (80123d0 <netconn_accept+0x108>)
 80122da:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80122de:	493d      	ldr	r1, [pc, #244]	@ (80123d4 <netconn_accept+0x10c>)
 80122e0:	483d      	ldr	r0, [pc, #244]	@ (80123d8 <netconn_accept+0x110>)
 80122e2:	f010 fb19 	bl	8022918 <iprintf>
 80122e6:	f06f 030f 	mvn.w	r3, #15
 80122ea:	e06c      	b.n	80123c6 <netconn_accept+0xfe>
  *new_conn = NULL;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2200      	movs	r2, #0
 80122f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d109      	bne.n	801230c <netconn_accept+0x44>
 80122f8:	4b35      	ldr	r3, [pc, #212]	@ (80123d0 <netconn_accept+0x108>)
 80122fa:	f240 12e3 	movw	r2, #483	@ 0x1e3
 80122fe:	4937      	ldr	r1, [pc, #220]	@ (80123dc <netconn_accept+0x114>)
 8012300:	4835      	ldr	r0, [pc, #212]	@ (80123d8 <netconn_accept+0x110>)
 8012302:	f010 fb09 	bl	8022918 <iprintf>
 8012306:	f06f 030f 	mvn.w	r3, #15
 801230a:	e05c      	b.n	80123c6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fb99 	bl	8012a44 <netconn_err>
 8012312:	4603      	mov	r3, r0
 8012314:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8012316:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 801231e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012322:	e050      	b.n	80123c6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3314      	adds	r3, #20
 8012328:	4618      	mov	r0, r3
 801232a:	f010 f885 	bl	8022438 <sys_mbox_valid>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d005      	beq.n	8012340 <netconn_accept+0x78>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	7f1b      	ldrb	r3, [r3, #28]
 8012338:	f003 0301 	and.w	r3, r3, #1
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8012340:	f06f 030e 	mvn.w	r3, #14
 8012344:	e03f      	b.n	80123c6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7f1b      	ldrb	r3, [r3, #28]
 801234a:	f003 0302 	and.w	r3, r3, #2
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00e      	beq.n	8012370 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	3314      	adds	r3, #20
 8012356:	f107 020c 	add.w	r2, r7, #12
 801235a:	4611      	mov	r1, r2
 801235c:	4618      	mov	r0, r3
 801235e:	f010 f854 	bl	802240a <sys_arch_mbox_tryfetch>
 8012362:	4603      	mov	r3, r0
 8012364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012368:	d10a      	bne.n	8012380 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801236a:	f06f 0306 	mvn.w	r3, #6
 801236e:	e02a      	b.n	80123c6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	3314      	adds	r3, #20
 8012374:	f107 010c 	add.w	r1, r7, #12
 8012378:	2200      	movs	r2, #0
 801237a:	4618      	mov	r0, r3
 801237c:	f010 f814 	bl	80223a8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012384:	2b00      	cmp	r3, #0
 8012386:	d005      	beq.n	8012394 <netconn_accept+0xcc>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238c:	2200      	movs	r2, #0
 801238e:	2101      	movs	r1, #1
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f107 0213 	add.w	r2, r7, #19
 801239a:	4611      	mov	r1, r2
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe f953 	bl	8010648 <lwip_netconn_is_err_msg>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80123a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123ac:	e00b      	b.n	80123c6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d102      	bne.n	80123ba <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80123b4:	f06f 030e 	mvn.w	r3, #14
 80123b8:	e005      	b.n	80123c6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	697a      	ldr	r2, [r7, #20]
 80123c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80123c4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3718      	adds	r7, #24
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	08024568 	.word	0x08024568
 80123d4:	0802475c 	.word	0x0802475c
 80123d8:	08024054 	.word	0x08024054
 80123dc:	0802477c 	.word	0x0802477c

080123e0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b088      	sub	sp, #32
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	4613      	mov	r3, r2
 80123ec:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80123ee:	2300      	movs	r3, #0
 80123f0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d109      	bne.n	801240c <netconn_recv_data+0x2c>
 80123f8:	4b58      	ldr	r3, [pc, #352]	@ (801255c <netconn_recv_data+0x17c>)
 80123fa:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80123fe:	4958      	ldr	r1, [pc, #352]	@ (8012560 <netconn_recv_data+0x180>)
 8012400:	4858      	ldr	r0, [pc, #352]	@ (8012564 <netconn_recv_data+0x184>)
 8012402:	f010 fa89 	bl	8022918 <iprintf>
 8012406:	f06f 030f 	mvn.w	r3, #15
 801240a:	e0a2      	b.n	8012552 <netconn_recv_data+0x172>
  *new_buf = NULL;
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	2200      	movs	r2, #0
 8012410:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d109      	bne.n	801242c <netconn_recv_data+0x4c>
 8012418:	4b50      	ldr	r3, [pc, #320]	@ (801255c <netconn_recv_data+0x17c>)
 801241a:	f240 224a 	movw	r2, #586	@ 0x24a
 801241e:	4952      	ldr	r1, [pc, #328]	@ (8012568 <netconn_recv_data+0x188>)
 8012420:	4850      	ldr	r0, [pc, #320]	@ (8012564 <netconn_recv_data+0x184>)
 8012422:	f010 fa79 	bl	8022918 <iprintf>
 8012426:	f06f 030f 	mvn.w	r3, #15
 801242a:	e092      	b.n	8012552 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	3310      	adds	r3, #16
 8012430:	4618      	mov	r0, r3
 8012432:	f010 f801 	bl	8022438 <sys_mbox_valid>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	d10e      	bne.n	801245a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f000 fb01 	bl	8012a44 <netconn_err>
 8012442:	4603      	mov	r3, r0
 8012444:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8012446:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d002      	beq.n	8012454 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801244e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8012452:	e07e      	b.n	8012552 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8012454:	f06f 030a 	mvn.w	r3, #10
 8012458:	e07b      	b.n	8012552 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	7f1b      	ldrb	r3, [r3, #28]
 801245e:	f003 0302 	and.w	r3, r3, #2
 8012462:	2b00      	cmp	r3, #0
 8012464:	d10f      	bne.n	8012486 <netconn_recv_data+0xa6>
 8012466:	79fb      	ldrb	r3, [r7, #7]
 8012468:	f003 0304 	and.w	r3, r3, #4
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10a      	bne.n	8012486 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	7f1b      	ldrb	r3, [r3, #28]
 8012474:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012478:	2b00      	cmp	r3, #0
 801247a:	d104      	bne.n	8012486 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d023      	beq.n	80124ce <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	3310      	adds	r3, #16
 801248a:	f107 0218 	add.w	r2, r7, #24
 801248e:	4611      	mov	r1, r2
 8012490:	4618      	mov	r0, r3
 8012492:	f00f ffba 	bl	802240a <sys_arch_mbox_tryfetch>
 8012496:	4603      	mov	r3, r0
 8012498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801249c:	d11f      	bne.n	80124de <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 fad0 	bl	8012a44 <netconn_err>
 80124a4:	4603      	mov	r3, r0
 80124a6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80124a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d002      	beq.n	80124b6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80124b0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124b4:	e04d      	b.n	8012552 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7f1b      	ldrb	r3, [r3, #28]
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d002      	beq.n	80124c8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80124c2:	f06f 030a 	mvn.w	r3, #10
 80124c6:	e044      	b.n	8012552 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80124c8:	f06f 0306 	mvn.w	r3, #6
 80124cc:	e041      	b.n	8012552 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3310      	adds	r3, #16
 80124d2:	f107 0118 	add.w	r1, r7, #24
 80124d6:	2200      	movs	r2, #0
 80124d8:	4618      	mov	r0, r3
 80124da:	f00f ff65 	bl	80223a8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124e6:	2b10      	cmp	r3, #16
 80124e8:	d117      	bne.n	801251a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	f107 0217 	add.w	r2, r7, #23
 80124f0:	4611      	mov	r1, r2
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fe f8a8 	bl	8010648 <lwip_netconn_is_err_msg>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d009      	beq.n	8012512 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80124fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012502:	f113 0f0f 	cmn.w	r3, #15
 8012506:	d101      	bne.n	801250c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8012508:	2300      	movs	r3, #0
 801250a:	e022      	b.n	8012552 <netconn_recv_data+0x172>
      }
      return err;
 801250c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012510:	e01f      	b.n	8012552 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	891b      	ldrh	r3, [r3, #8]
 8012516:	83fb      	strh	r3, [r7, #30]
 8012518:	e00d      	b.n	8012536 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d106      	bne.n	801252e <netconn_recv_data+0x14e>
 8012520:	4b0e      	ldr	r3, [pc, #56]	@ (801255c <netconn_recv_data+0x17c>)
 8012522:	f240 2291 	movw	r2, #657	@ 0x291
 8012526:	4911      	ldr	r1, [pc, #68]	@ (801256c <netconn_recv_data+0x18c>)
 8012528:	480e      	ldr	r0, [pc, #56]	@ (8012564 <netconn_recv_data+0x184>)
 801252a:	f010 f9f5 	bl	8022918 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	891b      	ldrh	r3, [r3, #8]
 8012534:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801253a:	2b00      	cmp	r3, #0
 801253c:	d005      	beq.n	801254a <netconn_recv_data+0x16a>
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012542:	8bfa      	ldrh	r2, [r7, #30]
 8012544:	2101      	movs	r1, #1
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801254a:	69ba      	ldr	r2, [r7, #24]
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3720      	adds	r7, #32
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	08024568 	.word	0x08024568
 8012560:	0802479c 	.word	0x0802479c
 8012564:	08024054 	.word	0x08024054
 8012568:	080247bc 	.word	0x080247bc
 801256c:	080247d8 	.word	0x080247d8

08012570 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d005      	beq.n	801258e <netconn_tcp_recvd_msg+0x1e>
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801258a:	2b10      	cmp	r3, #16
 801258c:	d009      	beq.n	80125a2 <netconn_tcp_recvd_msg+0x32>
 801258e:	4b0c      	ldr	r3, [pc, #48]	@ (80125c0 <netconn_tcp_recvd_msg+0x50>)
 8012590:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8012594:	490b      	ldr	r1, [pc, #44]	@ (80125c4 <netconn_tcp_recvd_msg+0x54>)
 8012596:	480c      	ldr	r0, [pc, #48]	@ (80125c8 <netconn_tcp_recvd_msg+0x58>)
 8012598:	f010 f9be 	bl	8022918 <iprintf>
 801259c:	f06f 030f 	mvn.w	r3, #15
 80125a0:	e00a      	b.n	80125b8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80125ae:	6879      	ldr	r1, [r7, #4]
 80125b0:	4806      	ldr	r0, [pc, #24]	@ (80125cc <netconn_tcp_recvd_msg+0x5c>)
 80125b2:	f7ff fcfb 	bl	8011fac <netconn_apimsg>
 80125b6:	4603      	mov	r3, r0
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	08024568 	.word	0x08024568
 80125c4:	080247e4 	.word	0x080247e4
 80125c8:	08024054 	.word	0x08024054
 80125cc:	080117f7 	.word	0x080117f7

080125d0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b08c      	sub	sp, #48	@ 0x30
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d005      	beq.n	80125ec <netconn_tcp_recvd+0x1c>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125e8:	2b10      	cmp	r3, #16
 80125ea:	d009      	beq.n	8012600 <netconn_tcp_recvd+0x30>
 80125ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012620 <netconn_tcp_recvd+0x50>)
 80125ee:	f240 22b5 	movw	r2, #693	@ 0x2b5
 80125f2:	490c      	ldr	r1, [pc, #48]	@ (8012624 <netconn_tcp_recvd+0x54>)
 80125f4:	480c      	ldr	r0, [pc, #48]	@ (8012628 <netconn_tcp_recvd+0x58>)
 80125f6:	f010 f98f 	bl	8022918 <iprintf>
 80125fa:	f06f 030f 	mvn.w	r3, #15
 80125fe:	e00b      	b.n	8012618 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8012600:	f107 030c 	add.w	r3, r7, #12
 8012604:	461a      	mov	r2, r3
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7ff ffb1 	bl	8012570 <netconn_tcp_recvd_msg>
 801260e:	4603      	mov	r3, r0
 8012610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8012614:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012618:	4618      	mov	r0, r3
 801261a:	3730      	adds	r7, #48	@ 0x30
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	08024568 	.word	0x08024568
 8012624:	080247e4 	.word	0x080247e4
 8012628:	08024054 	.word	0x08024054

0801262c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b090      	sub	sp, #64	@ 0x40
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	4613      	mov	r3, r2
 8012638:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	3310      	adds	r3, #16
 801263e:	4618      	mov	r0, r3
 8012640:	f00f fefa 	bl	8022438 <sys_mbox_valid>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d102      	bne.n	8012650 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801264a:	f06f 030a 	mvn.w	r3, #10
 801264e:	e06d      	b.n	801272c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	7f1b      	ldrb	r3, [r3, #28]
 8012654:	b25b      	sxtb	r3, r3
 8012656:	2b00      	cmp	r3, #0
 8012658:	da07      	bge.n	801266a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	7f1b      	ldrb	r3, [r3, #28]
 801265e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012662:	b2da      	uxtb	r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8012668:	e039      	b.n	80126de <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801266a:	79fb      	ldrb	r3, [r7, #7]
 801266c:	461a      	mov	r2, r3
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f7ff feb5 	bl	80123e0 <netconn_recv_data>
 8012676:	4603      	mov	r3, r0
 8012678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801267c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8012680:	2b00      	cmp	r3, #0
 8012682:	d002      	beq.n	801268a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8012684:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8012688:	e050      	b.n	801272c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8012690:	79fb      	ldrb	r3, [r7, #7]
 8012692:	f003 0308 	and.w	r3, r3, #8
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10e      	bne.n	80126b8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <netconn_recv_data_tcp+0x7a>
 80126a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126a2:	891b      	ldrh	r3, [r3, #8]
 80126a4:	e000      	b.n	80126a8 <netconn_recv_data_tcp+0x7c>
 80126a6:	2301      	movs	r3, #1
 80126a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80126aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80126ac:	f107 0214 	add.w	r2, r7, #20
 80126b0:	4619      	mov	r1, r3
 80126b2:	68f8      	ldr	r0, [r7, #12]
 80126b4:	f7ff ff5c 	bl	8012570 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80126b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d134      	bne.n	8012728 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80126be:	79fb      	ldrb	r3, [r7, #7]
 80126c0:	f003 0310 	and.w	r3, r3, #16
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d009      	beq.n	80126dc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	7f1b      	ldrb	r3, [r3, #28]
 80126cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80126d6:	f06f 0306 	mvn.w	r3, #6
 80126da:	e027      	b.n	801272c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80126dc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d005      	beq.n	80126f2 <netconn_recv_data_tcp+0xc6>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126ea:	2200      	movs	r2, #0
 80126ec:	2101      	movs	r1, #1
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10f      	bne.n	801271a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80126fa:	68f8      	ldr	r0, [r7, #12]
 80126fc:	f000 f9a2 	bl	8012a44 <netconn_err>
 8012700:	4603      	mov	r3, r0
 8012702:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8012706:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801270a:	2b00      	cmp	r3, #0
 801270c:	d002      	beq.n	8012714 <netconn_recv_data_tcp+0xe8>
          return err;
 801270e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8012712:	e00b      	b.n	801272c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8012714:	f06f 030d 	mvn.w	r3, #13
 8012718:	e008      	b.n	801272c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801271a:	2101      	movs	r1, #1
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f000 f961 	bl	80129e4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012722:	f06f 030e 	mvn.w	r3, #14
 8012726:	e001      	b.n	801272c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8012728:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801272c:	4618      	mov	r0, r3
 801272e:	3740      	adds	r7, #64	@ 0x40
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	4613      	mov	r3, r2
 8012740:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d005      	beq.n	8012754 <netconn_recv_tcp_pbuf_flags+0x20>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012750:	2b10      	cmp	r3, #16
 8012752:	d009      	beq.n	8012768 <netconn_recv_tcp_pbuf_flags+0x34>
 8012754:	4b0a      	ldr	r3, [pc, #40]	@ (8012780 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8012756:	f240 3225 	movw	r2, #805	@ 0x325
 801275a:	490a      	ldr	r1, [pc, #40]	@ (8012784 <netconn_recv_tcp_pbuf_flags+0x50>)
 801275c:	480a      	ldr	r0, [pc, #40]	@ (8012788 <netconn_recv_tcp_pbuf_flags+0x54>)
 801275e:	f010 f8db 	bl	8022918 <iprintf>
 8012762:	f06f 030f 	mvn.w	r3, #15
 8012766:	e006      	b.n	8012776 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8012768:	79fb      	ldrb	r3, [r7, #7]
 801276a:	461a      	mov	r2, r3
 801276c:	68b9      	ldr	r1, [r7, #8]
 801276e:	68f8      	ldr	r0, [r7, #12]
 8012770:	f7ff ff5c 	bl	801262c <netconn_recv_data_tcp>
 8012774:	4603      	mov	r3, r0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	08024568 	.word	0x08024568
 8012784:	080247e4 	.word	0x080247e4
 8012788:	08024054 	.word	0x08024054

0801278c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	4613      	mov	r3, r2
 8012798:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d005      	beq.n	80127ac <netconn_recv_udp_raw_netbuf_flags+0x20>
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127a8:	2b10      	cmp	r3, #16
 80127aa:	d109      	bne.n	80127c0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80127ac:	4b0a      	ldr	r3, [pc, #40]	@ (80127d8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80127ae:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80127b2:	490a      	ldr	r1, [pc, #40]	@ (80127dc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80127b4:	480a      	ldr	r0, [pc, #40]	@ (80127e0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80127b6:	f010 f8af 	bl	8022918 <iprintf>
 80127ba:	f06f 030f 	mvn.w	r3, #15
 80127be:	e006      	b.n	80127ce <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80127c0:	79fb      	ldrb	r3, [r7, #7]
 80127c2:	461a      	mov	r2, r3
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7ff fe0a 	bl	80123e0 <netconn_recv_data>
 80127cc:	4603      	mov	r3, r0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3710      	adds	r7, #16
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	08024568 	.word	0x08024568
 80127dc:	08024808 	.word	0x08024808
 80127e0:	08024054 	.word	0x08024054

080127e4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b08c      	sub	sp, #48	@ 0x30
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d109      	bne.n	8012808 <netconn_send+0x24>
 80127f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012830 <netconn_send+0x4c>)
 80127f6:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80127fa:	490e      	ldr	r1, [pc, #56]	@ (8012834 <netconn_send+0x50>)
 80127fc:	480e      	ldr	r0, [pc, #56]	@ (8012838 <netconn_send+0x54>)
 80127fe:	f010 f88b 	bl	8022918 <iprintf>
 8012802:	f06f 030f 	mvn.w	r3, #15
 8012806:	e00e      	b.n	8012826 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8012810:	f107 030c 	add.w	r3, r7, #12
 8012814:	4619      	mov	r1, r3
 8012816:	4809      	ldr	r0, [pc, #36]	@ (801283c <netconn_send+0x58>)
 8012818:	f7ff fbc8 	bl	8011fac <netconn_apimsg>
 801281c:	4603      	mov	r3, r0
 801281e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012822:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012826:	4618      	mov	r0, r3
 8012828:	3730      	adds	r7, #48	@ 0x30
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	08024568 	.word	0x08024568
 8012834:	08024840 	.word	0x08024840
 8012838:	08024054 	.word	0x08024054
 801283c:	0801175d 	.word	0x0801175d

08012840 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af02      	add	r7, sp, #8
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
 801284c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012856:	78fa      	ldrb	r2, [r7, #3]
 8012858:	f107 0110 	add.w	r1, r7, #16
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	9300      	str	r3, [sp, #0]
 8012860:	4613      	mov	r3, r2
 8012862:	2201      	movs	r2, #1
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f000 f805 	bl	8012874 <netconn_write_vectors_partly>
 801286a:	4603      	mov	r3, r0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b092      	sub	sp, #72	@ 0x48
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	4611      	mov	r1, r2
 8012880:	461a      	mov	r2, r3
 8012882:	460b      	mov	r3, r1
 8012884:	80fb      	strh	r3, [r7, #6]
 8012886:	4613      	mov	r3, r2
 8012888:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d109      	bne.n	80128a4 <netconn_write_vectors_partly+0x30>
 8012890:	4b4e      	ldr	r3, [pc, #312]	@ (80129cc <netconn_write_vectors_partly+0x158>)
 8012892:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012896:	494e      	ldr	r1, [pc, #312]	@ (80129d0 <netconn_write_vectors_partly+0x15c>)
 8012898:	484e      	ldr	r0, [pc, #312]	@ (80129d4 <netconn_write_vectors_partly+0x160>)
 801289a:	f010 f83d 	bl	8022918 <iprintf>
 801289e:	f06f 030f 	mvn.w	r3, #15
 80128a2:	e08e      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128ac:	2b10      	cmp	r3, #16
 80128ae:	d009      	beq.n	80128c4 <netconn_write_vectors_partly+0x50>
 80128b0:	4b46      	ldr	r3, [pc, #280]	@ (80129cc <netconn_write_vectors_partly+0x158>)
 80128b2:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80128b6:	4948      	ldr	r1, [pc, #288]	@ (80129d8 <netconn_write_vectors_partly+0x164>)
 80128b8:	4846      	ldr	r0, [pc, #280]	@ (80129d4 <netconn_write_vectors_partly+0x160>)
 80128ba:	f010 f82d 	bl	8022918 <iprintf>
 80128be:	f06f 0305 	mvn.w	r3, #5
 80128c2:	e07e      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	7f1b      	ldrb	r3, [r3, #28]
 80128c8:	f003 0302 	and.w	r3, r3, #2
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d104      	bne.n	80128da <netconn_write_vectors_partly+0x66>
 80128d0:	797b      	ldrb	r3, [r7, #5]
 80128d2:	f003 0304 	and.w	r3, r3, #4
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <netconn_write_vectors_partly+0x6a>
 80128da:	2301      	movs	r3, #1
 80128dc:	e000      	b.n	80128e0 <netconn_write_vectors_partly+0x6c>
 80128de:	2300      	movs	r3, #0
 80128e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80128e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d005      	beq.n	80128f8 <netconn_write_vectors_partly+0x84>
 80128ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d102      	bne.n	80128f8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80128f2:	f06f 0305 	mvn.w	r3, #5
 80128f6:	e064      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80128fc:	2300      	movs	r3, #0
 80128fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8012900:	e015      	b.n	801292e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8012902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012904:	00db      	lsls	r3, r3, #3
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	4413      	add	r3, r2
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801290e:	4413      	add	r3, r2
 8012910:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8012912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012914:	00db      	lsls	r3, r3, #3
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	4413      	add	r3, r2
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801291e:	429a      	cmp	r2, r3
 8012920:	d202      	bcs.n	8012928 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8012922:	f06f 0305 	mvn.w	r3, #5
 8012926:	e04c      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8012928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801292a:	3301      	adds	r3, #1
 801292c:	643b      	str	r3, [r7, #64]	@ 0x40
 801292e:	88fb      	ldrh	r3, [r7, #6]
 8012930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012932:	429a      	cmp	r2, r3
 8012934:	dbe5      	blt.n	8012902 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8012936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012938:	2b00      	cmp	r3, #0
 801293a:	d101      	bne.n	8012940 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	e040      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8012940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012942:	2b00      	cmp	r3, #0
 8012944:	da0a      	bge.n	801295c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 801294c:	f06f 0305 	mvn.w	r3, #5
 8012950:	e037      	b.n	80129c2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012952:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012956:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8012958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801295a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012964:	88fb      	ldrh	r3, [r7, #6]
 8012966:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012968:	2300      	movs	r3, #0
 801296a:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801296c:	797b      	ldrb	r3, [r7, #5]
 801296e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012974:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012976:	2300      	movs	r3, #0
 8012978:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 801297a:	f107 0314 	add.w	r3, r7, #20
 801297e:	4619      	mov	r1, r3
 8012980:	4816      	ldr	r0, [pc, #88]	@ (80129dc <netconn_write_vectors_partly+0x168>)
 8012982:	f7ff fb13 	bl	8011fac <netconn_apimsg>
 8012986:	4603      	mov	r3, r0
 8012988:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 801298c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012990:	2b00      	cmp	r3, #0
 8012992:	d114      	bne.n	80129be <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8012994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012996:	2b00      	cmp	r3, #0
 8012998:	d002      	beq.n	80129a0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 801299a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801299c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801299e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80129a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d10a      	bne.n	80129be <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80129a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d006      	beq.n	80129be <netconn_write_vectors_partly+0x14a>
 80129b0:	4b06      	ldr	r3, [pc, #24]	@ (80129cc <netconn_write_vectors_partly+0x158>)
 80129b2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80129b6:	490a      	ldr	r1, [pc, #40]	@ (80129e0 <netconn_write_vectors_partly+0x16c>)
 80129b8:	4806      	ldr	r0, [pc, #24]	@ (80129d4 <netconn_write_vectors_partly+0x160>)
 80129ba:	f00f ffad 	bl	8022918 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80129be:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3748      	adds	r7, #72	@ 0x48
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	08024568 	.word	0x08024568
 80129d0:	0802485c 	.word	0x0802485c
 80129d4:	08024054 	.word	0x08024054
 80129d8:	08024878 	.word	0x08024878
 80129dc:	08011bfd 	.word	0x08011bfd
 80129e0:	0802489c 	.word	0x0802489c

080129e4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b08c      	sub	sp, #48	@ 0x30
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	460b      	mov	r3, r1
 80129ee:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d109      	bne.n	8012a0a <netconn_close_shutdown+0x26>
 80129f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012a34 <netconn_close_shutdown+0x50>)
 80129f8:	f240 4247 	movw	r2, #1095	@ 0x447
 80129fc:	490e      	ldr	r1, [pc, #56]	@ (8012a38 <netconn_close_shutdown+0x54>)
 80129fe:	480f      	ldr	r0, [pc, #60]	@ (8012a3c <netconn_close_shutdown+0x58>)
 8012a00:	f00f ff8a 	bl	8022918 <iprintf>
 8012a04:	f06f 030f 	mvn.w	r3, #15
 8012a08:	e010      	b.n	8012a2c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8012a0e:	78fb      	ldrb	r3, [r7, #3]
 8012a10:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012a12:	2329      	movs	r3, #41	@ 0x29
 8012a14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8012a16:	f107 030c 	add.w	r3, r7, #12
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	4808      	ldr	r0, [pc, #32]	@ (8012a40 <netconn_close_shutdown+0x5c>)
 8012a1e:	f7ff fac5 	bl	8011fac <netconn_apimsg>
 8012a22:	4603      	mov	r3, r0
 8012a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012a28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3730      	adds	r7, #48	@ 0x30
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	08024568 	.word	0x08024568
 8012a38:	080248c0 	.word	0x080248c0
 8012a3c:	08024054 	.word	0x08024054
 8012a40:	08011e21 	.word	0x08011e21

08012a44 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <netconn_err+0x12>
    return ERR_OK;
 8012a52:	2300      	movs	r3, #0
 8012a54:	e00d      	b.n	8012a72 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012a56:	f00f fdf9 	bl	802264c <sys_arch_protect>
 8012a5a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	7a1b      	ldrb	r3, [r3, #8]
 8012a60:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2200      	movs	r2, #0
 8012a66:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f00f fdfd 	bl	8022668 <sys_arch_unprotect>
  return err;
 8012a6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3710      	adds	r7, #16
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
	...

08012a7c <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b08e      	sub	sp, #56	@ 0x38
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
 8012a88:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d109      	bne.n	8012aa4 <netconn_join_leave_group+0x28>
 8012a90:	4b15      	ldr	r3, [pc, #84]	@ (8012ae8 <netconn_join_leave_group+0x6c>)
 8012a92:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 8012a96:	4915      	ldr	r1, [pc, #84]	@ (8012aec <netconn_join_leave_group+0x70>)
 8012a98:	4815      	ldr	r0, [pc, #84]	@ (8012af0 <netconn_join_leave_group+0x74>)
 8012a9a:	f00f ff3d 	bl	8022918 <iprintf>
 8012a9e:	f06f 030f 	mvn.w	r3, #15
 8012aa2:	e01d      	b.n	8012ae0 <netconn_join_leave_group+0x64>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d101      	bne.n	8012aae <netconn_join_leave_group+0x32>
    multiaddr = IP4_ADDR_ANY;
 8012aaa:	4b12      	ldr	r3, [pc, #72]	@ (8012af4 <netconn_join_leave_group+0x78>)
 8012aac:	60bb      	str	r3, [r7, #8]
  }
  if (netif_addr == NULL) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d101      	bne.n	8012ab8 <netconn_join_leave_group+0x3c>
    netif_addr = IP4_ADDR_ANY;
 8012ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8012af4 <netconn_join_leave_group+0x78>)
 8012ab6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 8012ac4:	78fb      	ldrb	r3, [r7, #3]
 8012ac6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
 8012aca:	f107 0314 	add.w	r3, r7, #20
 8012ace:	4619      	mov	r1, r3
 8012ad0:	4809      	ldr	r0, [pc, #36]	@ (8012af8 <netconn_join_leave_group+0x7c>)
 8012ad2:	f7ff fa6b 	bl	8011fac <netconn_apimsg>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012adc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3738      	adds	r7, #56	@ 0x38
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	08024568 	.word	0x08024568
 8012aec:	080248dc 	.word	0x080248dc
 8012af0:	08024054 	.word	0x08024054
 8012af4:	08028bec 	.word	0x08028bec
 8012af8:	08011f39 	.word	0x08011f39

08012afc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d013      	beq.n	8012b32 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d00b      	beq.n	8012b2a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f008 f824 	bl	801ab64 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	605a      	str	r2, [r3, #4]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	685a      	ldr	r2, [r3, #4]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012b2a:	6879      	ldr	r1, [r7, #4]
 8012b2c:	2006      	movs	r0, #6
 8012b2e:	f007 f921 	bl	8019d74 <memp_free>
  }
}
 8012b32:	bf00      	nop
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
	...

08012b3c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <netbuf_free+0x1c>
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b80 <netbuf_free+0x44>)
 8012b4c:	2281      	movs	r2, #129	@ 0x81
 8012b4e:	490d      	ldr	r1, [pc, #52]	@ (8012b84 <netbuf_free+0x48>)
 8012b50:	480d      	ldr	r0, [pc, #52]	@ (8012b88 <netbuf_free+0x4c>)
 8012b52:	f00f fee1 	bl	8022918 <iprintf>
 8012b56:	e00f      	b.n	8012b78 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d004      	beq.n	8012b6a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f007 fffd 	bl	801ab64 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	605a      	str	r2, [r3, #4]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8012b78:	3708      	adds	r7, #8
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	08024904 	.word	0x08024904
 8012b84:	080249b8 	.word	0x080249b8
 8012b88:	08024054 	.word	0x08024054

08012b8c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	4613      	mov	r3, r2
 8012b98:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d108      	bne.n	8012bb2 <netbuf_ref+0x26>
 8012ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8012c14 <netbuf_ref+0x88>)
 8012ba2:	2299      	movs	r2, #153	@ 0x99
 8012ba4:	491c      	ldr	r1, [pc, #112]	@ (8012c18 <netbuf_ref+0x8c>)
 8012ba6:	481d      	ldr	r0, [pc, #116]	@ (8012c1c <netbuf_ref+0x90>)
 8012ba8:	f00f feb6 	bl	8022918 <iprintf>
 8012bac:	f06f 030f 	mvn.w	r3, #15
 8012bb0:	e02b      	b.n	8012c0a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d004      	beq.n	8012bc4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f007 ffd0 	bl	801ab64 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012bc4:	2241      	movs	r2, #65	@ 0x41
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	2036      	movs	r0, #54	@ 0x36
 8012bca:	f007 fcb5 	bl	801a538 <pbuf_alloc>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d105      	bne.n	8012be8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2200      	movs	r2, #0
 8012be0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012be2:	f04f 33ff 	mov.w	r3, #4294967295
 8012be6:	e010      	b.n	8012c0a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68ba      	ldr	r2, [r7, #8]
 8012bee:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	88fa      	ldrh	r2, [r7, #6]
 8012bf6:	811a      	strh	r2, [r3, #8]
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	6812      	ldr	r2, [r2, #0]
 8012bfc:	891b      	ldrh	r3, [r3, #8]
 8012bfe:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	08024904 	.word	0x08024904
 8012c18:	080249d4 	.word	0x080249d4
 8012c1c:	08024054 	.word	0x08024054

08012c20 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	db02      	blt.n	8012c38 <tryget_socket_unconn_nouse+0x18>
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2b03      	cmp	r3, #3
 8012c36:	dd01      	ble.n	8012c3c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	e003      	b.n	8012c44 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	011b      	lsls	r3, r3, #4
 8012c40:	4a03      	ldr	r2, [pc, #12]	@ (8012c50 <tryget_socket_unconn_nouse+0x30>)
 8012c42:	4413      	add	r3, r2
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3714      	adds	r7, #20
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	20008d28 	.word	0x20008d28

08012c54 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ffdf 	bl	8012c20 <tryget_socket_unconn_nouse>
 8012c62:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8012c64:	68fb      	ldr	r3, [r7, #12]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3710      	adds	r7, #16
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b084      	sub	sp, #16
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff ffec 	bl	8012c54 <tryget_socket_unconn>
 8012c7c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d005      	beq.n	8012c90 <tryget_socket+0x22>
    if (sock->conn) {
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <tryget_socket+0x22>
      return sock;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	e000      	b.n	8012c92 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
	...

08012c9c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7ff ffe2 	bl	8012c6e <tryget_socket>
 8012caa:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d104      	bne.n	8012cbc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8012cb2:	4b05      	ldr	r3, [pc, #20]	@ (8012cc8 <get_socket+0x2c>)
 8012cb4:	2209      	movs	r2, #9
 8012cb6:	601a      	str	r2, [r3, #0]
    return NULL;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e000      	b.n	8012cbe <get_socket+0x22>
  }
  return sock;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20010078 	.word	0x20010078

08012ccc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	60fb      	str	r3, [r7, #12]
 8012cda:	e052      	b.n	8012d82 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8012cdc:	f00f fcb6 	bl	802264c <sys_arch_protect>
 8012ce0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8012ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8012d94 <alloc_socket+0xc8>)
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	011b      	lsls	r3, r3, #4
 8012ce8:	4413      	add	r3, r2
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d142      	bne.n	8012d76 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8012cf0:	4a28      	ldr	r2, [pc, #160]	@ (8012d94 <alloc_socket+0xc8>)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	011b      	lsls	r3, r3, #4
 8012cf6:	4413      	add	r3, r2
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8012cfc:	68b8      	ldr	r0, [r7, #8]
 8012cfe:	f00f fcb3 	bl	8022668 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8012d02:	4a24      	ldr	r2, [pc, #144]	@ (8012d94 <alloc_socket+0xc8>)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	011b      	lsls	r3, r3, #4
 8012d08:	4413      	add	r3, r2
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8012d10:	4a20      	ldr	r2, [pc, #128]	@ (8012d94 <alloc_socket+0xc8>)
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	011b      	lsls	r3, r3, #4
 8012d16:	4413      	add	r3, r2
 8012d18:	330e      	adds	r3, #14
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d006      	beq.n	8012d2e <alloc_socket+0x62>
 8012d20:	4b1d      	ldr	r3, [pc, #116]	@ (8012d98 <alloc_socket+0xcc>)
 8012d22:	f240 220e 	movw	r2, #526	@ 0x20e
 8012d26:	491d      	ldr	r1, [pc, #116]	@ (8012d9c <alloc_socket+0xd0>)
 8012d28:	481d      	ldr	r0, [pc, #116]	@ (8012da0 <alloc_socket+0xd4>)
 8012d2a:	f00f fdf5 	bl	8022918 <iprintf>
      sockets[i].rcvevent   = 0;
 8012d2e:	4a19      	ldr	r2, [pc, #100]	@ (8012d94 <alloc_socket+0xc8>)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	011b      	lsls	r3, r3, #4
 8012d34:	4413      	add	r3, r2
 8012d36:	3308      	adds	r3, #8
 8012d38:	2200      	movs	r2, #0
 8012d3a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d44:	2b10      	cmp	r3, #16
 8012d46:	d102      	bne.n	8012d4e <alloc_socket+0x82>
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d001      	beq.n	8012d52 <alloc_socket+0x86>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e000      	b.n	8012d54 <alloc_socket+0x88>
 8012d52:	2300      	movs	r3, #0
 8012d54:	b299      	uxth	r1, r3
 8012d56:	4a0f      	ldr	r2, [pc, #60]	@ (8012d94 <alloc_socket+0xc8>)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	011b      	lsls	r3, r3, #4
 8012d5c:	4413      	add	r3, r2
 8012d5e:	330a      	adds	r3, #10
 8012d60:	460a      	mov	r2, r1
 8012d62:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8012d64:	4a0b      	ldr	r2, [pc, #44]	@ (8012d94 <alloc_socket+0xc8>)
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	011b      	lsls	r3, r3, #4
 8012d6a:	4413      	add	r3, r2
 8012d6c:	330c      	adds	r3, #12
 8012d6e:	2200      	movs	r2, #0
 8012d70:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	e00a      	b.n	8012d8c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8012d76:	68b8      	ldr	r0, [r7, #8]
 8012d78:	f00f fc76 	bl	8022668 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	60fb      	str	r3, [r7, #12]
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b03      	cmp	r3, #3
 8012d86:	dda9      	ble.n	8012cdc <alloc_socket+0x10>
  }
  return -1;
 8012d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3710      	adds	r7, #16
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	20008d28 	.word	0x20008d28
 8012d98:	08024ab4 	.word	0x08024ab4
 8012d9c:	08024b2c 	.word	0x08024b2c
 8012da0:	08024054 	.word	0x08024054

08012da4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	6852      	ldr	r2, [r2, #4]
 8012db8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	601a      	str	r2, [r3, #0]
  return 1;
 8012dce:	2301      	movs	r3, #1
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d00d      	beq.n	8012e0c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d005      	beq.n	8012e02 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f007 feb2 	bl	801ab64 <pbuf_free>
 8012e00:	e004      	b.n	8012e0c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fe78 	bl	8012afc <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d002      	beq.n	8012e18 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8012e12:	68b8      	ldr	r0, [r7, #8]
 8012e14:	f7ff f986 	bl	8012124 <netconn_delete>
  }
}
 8012e18:	bf00      	nop
 8012e1a:	3710      	adds	r7, #16
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8012e2a:	f00f fc0f 	bl	802264c <sys_arch_protect>
 8012e2e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8012e30:	f107 0308 	add.w	r3, r7, #8
 8012e34:	f107 020c 	add.w	r2, r7, #12
 8012e38:	6839      	ldr	r1, [r7, #0]
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7ff ffb2 	bl	8012da4 <free_socket_locked>
 8012e40:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8012e42:	6978      	ldr	r0, [r7, #20]
 8012e44:	f00f fc10 	bl	8022668 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d006      	beq.n	8012e5c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f107 0208 	add.w	r2, r7, #8
 8012e54:	4619      	mov	r1, r3
 8012e56:	6838      	ldr	r0, [r7, #0]
 8012e58:	f7ff ffc0 	bl	8012ddc <free_socket_free_elements>
  }
}
 8012e5c:	bf00      	nop
 8012e5e:	3718      	adds	r7, #24
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8012e64:	b590      	push	{r4, r7, lr}
 8012e66:	b099      	sub	sp, #100	@ 0x64
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 8012e74:	68f8      	ldr	r0, [r7, #12]
 8012e76:	f7ff ff11 	bl	8012c9c <get_socket>
 8012e7a:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 8012e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d102      	bne.n	8012e88 <lwip_accept+0x24>
    return -1;
 8012e82:	f04f 33ff 	mov.w	r3, #4294967295
 8012e86:	e0f8      	b.n	801307a <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8012e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012e90:	4611      	mov	r1, r2
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7ff fa18 	bl	80122c8 <netconn_accept>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 8012e9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d02c      	beq.n	8012f00 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8012ea6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012eb0:	2b10      	cmp	r3, #16
 8012eb2:	d008      	beq.n	8012ec6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 8012eb4:	235f      	movs	r3, #95	@ 0x5f
 8012eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d01d      	beq.n	8012efa <lwip_accept+0x96>
 8012ebe:	4a71      	ldr	r2, [pc, #452]	@ (8013084 <lwip_accept+0x220>)
 8012ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	e019      	b.n	8012efa <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 8012ec6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012eca:	f113 0f0f 	cmn.w	r3, #15
 8012ece:	d108      	bne.n	8012ee2 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8012ed0:	2316      	movs	r3, #22
 8012ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00f      	beq.n	8012efa <lwip_accept+0x96>
 8012eda:	4a6a      	ldr	r2, [pc, #424]	@ (8013084 <lwip_accept+0x220>)
 8012edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ede:	6013      	str	r3, [r2, #0]
 8012ee0:	e00b      	b.n	8012efa <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8012ee2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7fd fad8 	bl	801049c <err_to_errno>
 8012eec:	63b8      	str	r0, [r7, #56]	@ 0x38
 8012eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <lwip_accept+0x96>
 8012ef4:	4a63      	ldr	r2, [pc, #396]	@ (8013084 <lwip_accept+0x220>)
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef8:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8012efa:	f04f 33ff 	mov.w	r3, #4294967295
 8012efe:	e0bc      	b.n	801307a <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8012f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d106      	bne.n	8012f14 <lwip_accept+0xb0>
 8012f06:	4b60      	ldr	r3, [pc, #384]	@ (8013088 <lwip_accept+0x224>)
 8012f08:	f240 228b 	movw	r2, #651	@ 0x28b
 8012f0c:	495f      	ldr	r1, [pc, #380]	@ (801308c <lwip_accept+0x228>)
 8012f0e:	4860      	ldr	r0, [pc, #384]	@ (8013090 <lwip_accept+0x22c>)
 8012f10:	f00f fd02 	bl	8022918 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8012f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f16:	2101      	movs	r1, #1
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fed7 	bl	8012ccc <alloc_socket>
 8012f1e:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 8012f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f26:	d10e      	bne.n	8012f46 <lwip_accept+0xe2>
    netconn_delete(newconn);
 8012f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff f8fa 	bl	8012124 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8012f30:	2317      	movs	r3, #23
 8012f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d002      	beq.n	8012f40 <lwip_accept+0xdc>
 8012f3a:	4a52      	ldr	r2, [pc, #328]	@ (8013084 <lwip_accept+0x220>)
 8012f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f3e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012f40:	f04f 33ff 	mov.w	r3, #4294967295
 8012f44:	e099      	b.n	801307a <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8012f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	db02      	blt.n	8012f52 <lwip_accept+0xee>
 8012f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	dd06      	ble.n	8012f60 <lwip_accept+0xfc>
 8012f52:	4b4d      	ldr	r3, [pc, #308]	@ (8013088 <lwip_accept+0x224>)
 8012f54:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8012f58:	494e      	ldr	r1, [pc, #312]	@ (8013094 <lwip_accept+0x230>)
 8012f5a:	484d      	ldr	r0, [pc, #308]	@ (8013090 <lwip_accept+0x22c>)
 8012f5c:	f00f fcdc 	bl	8022918 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8012f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f62:	011b      	lsls	r3, r3, #4
 8012f64:	4a4c      	ldr	r2, [pc, #304]	@ (8013098 <lwip_accept+0x234>)
 8012f66:	4413      	add	r3, r2
 8012f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8012f6a:	f00f fb6f 	bl	802264c <sys_arch_protect>
 8012f6e:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 8012f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f72:	699b      	ldr	r3, [r3, #24]
 8012f74:	b21b      	sxth	r3, r3
 8012f76:	43db      	mvns	r3, r3
 8012f78:	b21b      	sxth	r3, r3
 8012f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 8012f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f80:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8012f82:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012f84:	f00f fb70 	bl	8022668 <sys_arch_unprotect>

  if (newconn->callback) {
 8012f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d012      	beq.n	8012fb6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 8012f90:	4842      	ldr	r0, [pc, #264]	@ (801309c <lwip_accept+0x238>)
 8012f92:	f00f fb1f 	bl	80225d4 <sys_mutex_lock>
    while (recvevent > 0) {
 8012f96:	e008      	b.n	8012faa <lwip_accept+0x146>
      recvevent--;
 8012f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8012f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	4798      	blx	r3
    while (recvevent > 0) {
 8012faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	dcf3      	bgt.n	8012f98 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8012fb0:	483a      	ldr	r0, [pc, #232]	@ (801309c <lwip_accept+0x238>)
 8012fb2:	f00f fb1e 	bl	80225f2 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d055      	beq.n	8013068 <lwip_accept+0x204>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d052      	beq.n	8013068 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8012fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012fc4:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8012fc8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f7ff f8c5 	bl	801215c <netconn_getaddr>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 8012fd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d016      	beq.n	801300e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8012fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff f89e 	bl	8012124 <netconn_delete>
      free_socket(nsock, 1);
 8012fe8:	2101      	movs	r1, #1
 8012fea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012fec:	f7ff ff18 	bl	8012e20 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8012ff0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fd fa51 	bl	801049c <err_to_errno>
 8012ffa:	6478      	str	r0, [r7, #68]	@ 0x44
 8012ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <lwip_accept+0x1a4>
 8013002:	4a20      	ldr	r2, [pc, #128]	@ (8013084 <lwip_accept+0x220>)
 8013004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013006:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8013008:	f04f 33ff 	mov.w	r3, #4294967295
 801300c:	e035      	b.n	801307a <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801300e:	f107 0314 	add.w	r3, r7, #20
 8013012:	2210      	movs	r2, #16
 8013014:	701a      	strb	r2, [r3, #0]
 8013016:	f107 0314 	add.w	r3, r7, #20
 801301a:	2202      	movs	r2, #2
 801301c:	705a      	strb	r2, [r3, #1]
 801301e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013020:	f107 0414 	add.w	r4, r7, #20
 8013024:	4618      	mov	r0, r3
 8013026:	f006 f8eb 	bl	8019200 <lwip_htons>
 801302a:	4603      	mov	r3, r0
 801302c:	8063      	strh	r3, [r4, #2]
 801302e:	f107 0314 	add.w	r3, r7, #20
 8013032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013034:	605a      	str	r2, [r3, #4]
 8013036:	f107 0314 	add.w	r3, r7, #20
 801303a:	3308      	adds	r3, #8
 801303c:	2208      	movs	r2, #8
 801303e:	2100      	movs	r1, #0
 8013040:	4618      	mov	r0, r3
 8013042:	f00f fdfb 	bl	8022c3c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	7d3a      	ldrb	r2, [r7, #20]
 801304c:	4293      	cmp	r3, r2
 801304e:	d903      	bls.n	8013058 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8013050:	7d3b      	ldrb	r3, [r7, #20]
 8013052:	461a      	mov	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	f107 0314 	add.w	r3, r7, #20
 8013060:	4619      	mov	r1, r3
 8013062:	68b8      	ldr	r0, [r7, #8]
 8013064:	f00f fe8f 	bl	8022d86 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8013068:	2300      	movs	r3, #0
 801306a:	643b      	str	r3, [r7, #64]	@ 0x40
 801306c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801306e:	2b00      	cmp	r3, #0
 8013070:	d002      	beq.n	8013078 <lwip_accept+0x214>
 8013072:	4a04      	ldr	r2, [pc, #16]	@ (8013084 <lwip_accept+0x220>)
 8013074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013076:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8013078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 801307a:	4618      	mov	r0, r3
 801307c:	3764      	adds	r7, #100	@ 0x64
 801307e:	46bd      	mov	sp, r7
 8013080:	bd90      	pop	{r4, r7, pc}
 8013082:	bf00      	nop
 8013084:	20010078 	.word	0x20010078
 8013088:	08024ab4 	.word	0x08024ab4
 801308c:	08024b4c 	.word	0x08024b4c
 8013090:	08024054 	.word	0x08024054
 8013094:	08024b5c 	.word	0x08024b5c
 8013098:	20008d28 	.word	0x20008d28
 801309c:	20008d78 	.word	0x20008d78

080130a0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b08a      	sub	sp, #40	@ 0x28
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80130ac:	68f8      	ldr	r0, [r7, #12]
 80130ae:	f7ff fdf5 	bl	8012c9c <get_socket>
 80130b2:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 80130b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d102      	bne.n	80130c0 <lwip_bind+0x20>
    return -1;
 80130ba:	f04f 33ff 	mov.w	r3, #4294967295
 80130be:	e051      	b.n	8013164 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b10      	cmp	r3, #16
 80130c4:	d108      	bne.n	80130d8 <lwip_bind+0x38>
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	785b      	ldrb	r3, [r3, #1]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d104      	bne.n	80130d8 <lwip_bind+0x38>
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	f003 0303 	and.w	r3, r3, #3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d014      	beq.n	8013102 <lwip_bind+0x62>
 80130d8:	4b24      	ldr	r3, [pc, #144]	@ (801316c <lwip_bind+0xcc>)
 80130da:	f240 22e2 	movw	r2, #738	@ 0x2e2
 80130de:	4924      	ldr	r1, [pc, #144]	@ (8013170 <lwip_bind+0xd0>)
 80130e0:	4824      	ldr	r0, [pc, #144]	@ (8013174 <lwip_bind+0xd4>)
 80130e2:	f00f fc19 	bl	8022918 <iprintf>
 80130e6:	f06f 000f 	mvn.w	r0, #15
 80130ea:	f7fd f9d7 	bl	801049c <err_to_errno>
 80130ee:	6178      	str	r0, [r7, #20]
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d002      	beq.n	80130fc <lwip_bind+0x5c>
 80130f6:	4a20      	ldr	r2, [pc, #128]	@ (8013178 <lwip_bind+0xd8>)
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	6013      	str	r3, [r2, #0]
 80130fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013100:	e030      	b.n	8013164 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	613b      	str	r3, [r7, #16]
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	885b      	ldrh	r3, [r3, #2]
 801310c:	4618      	mov	r0, r3
 801310e:	f006 f877 	bl	8019200 <lwip_htons>
 8013112:	4603      	mov	r3, r0
 8013114:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8013116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801311c:	f107 0110 	add.w	r1, r7, #16
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff f86d 	bl	8012200 <netconn_bind>
 8013126:	4603      	mov	r3, r0
 8013128:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 801312c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00e      	beq.n	8013152 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8013134:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013138:	4618      	mov	r0, r3
 801313a:	f7fd f9af 	bl	801049c <err_to_errno>
 801313e:	61b8      	str	r0, [r7, #24]
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d002      	beq.n	801314c <lwip_bind+0xac>
 8013146:	4a0c      	ldr	r2, [pc, #48]	@ (8013178 <lwip_bind+0xd8>)
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801314c:	f04f 33ff 	mov.w	r3, #4294967295
 8013150:	e008      	b.n	8013164 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8013152:	2300      	movs	r3, #0
 8013154:	61fb      	str	r3, [r7, #28]
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <lwip_bind+0xc2>
 801315c:	4a06      	ldr	r2, [pc, #24]	@ (8013178 <lwip_bind+0xd8>)
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3728      	adds	r7, #40	@ 0x28
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	08024ab4 	.word	0x08024ab4
 8013170:	08024b74 	.word	0x08024b74
 8013174:	08024054 	.word	0x08024054
 8013178:	20010078 	.word	0x20010078

0801317c <lwip_close>:

int
lwip_close(int s)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8013184:	2300      	movs	r3, #0
 8013186:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7ff fd87 	bl	8012c9c <get_socket>
 801318e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d102      	bne.n	801319c <lwip_close+0x20>
    return -1;
 8013196:	f04f 33ff 	mov.w	r3, #4294967295
 801319a:	e03c      	b.n	8013216 <lwip_close+0x9a>
  }

  if (sock->conn != NULL) {
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d00b      	beq.n	80131bc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80131a4:	693b      	ldr	r3, [r7, #16]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80131ae:	2b10      	cmp	r3, #16
 80131b0:	bf0c      	ite	eq
 80131b2:	2301      	moveq	r3, #1
 80131b4:	2300      	movne	r3, #0
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	617b      	str	r3, [r7, #20]
 80131ba:	e00a      	b.n	80131d2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d006      	beq.n	80131d2 <lwip_close+0x56>
 80131c4:	4b16      	ldr	r3, [pc, #88]	@ (8013220 <lwip_close+0xa4>)
 80131c6:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80131ca:	4916      	ldr	r1, [pc, #88]	@ (8013224 <lwip_close+0xa8>)
 80131cc:	4816      	ldr	r0, [pc, #88]	@ (8013228 <lwip_close+0xac>)
 80131ce:	f00f fba3 	bl	8022918 <iprintf>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 feb8 	bl	8013f48 <lwip_socket_drop_registered_memberships>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fe ff7d 	bl	80120dc <netconn_prepare_delete>
 80131e2:	4603      	mov	r3, r0
 80131e4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80131e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d00e      	beq.n	801320c <lwip_close+0x90>
    sock_set_errno(sock, err_to_errno(err));
 80131ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fd f952 	bl	801049c <err_to_errno>
 80131f8:	60b8      	str	r0, [r7, #8]
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <lwip_close+0x8a>
 8013200:	4a0a      	ldr	r2, [pc, #40]	@ (801322c <lwip_close+0xb0>)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8013206:	f04f 33ff 	mov.w	r3, #4294967295
 801320a:	e004      	b.n	8013216 <lwip_close+0x9a>
  }

  free_socket(sock, is_tcp);
 801320c:	6979      	ldr	r1, [r7, #20]
 801320e:	6938      	ldr	r0, [r7, #16]
 8013210:	f7ff fe06 	bl	8012e20 <free_socket>
  set_errno(0);
  return 0;
 8013214:	2300      	movs	r3, #0
}
 8013216:	4618      	mov	r0, r3
 8013218:	3718      	adds	r7, #24
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	08024ab4 	.word	0x08024ab4
 8013224:	08024b90 	.word	0x08024b90
 8013228:	08024054 	.word	0x08024054
 801322c:	20010078 	.word	0x20010078

08013230 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b088      	sub	sp, #32
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fd2e 	bl	8012c9c <get_socket>
 8013240:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <lwip_listen+0x1e>
    return -1;
 8013248:	f04f 33ff 	mov.w	r3, #4294967295
 801324c:	e03e      	b.n	80132cc <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	2bfe      	cmp	r3, #254	@ 0xfe
 8013252:	dc03      	bgt.n	801325c <lwip_listen+0x2c>
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801325a:	e000      	b.n	801325e <lwip_listen+0x2e>
 801325c:	23ff      	movs	r3, #255	@ 0xff
 801325e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	683a      	ldr	r2, [r7, #0]
 8013266:	b2d2      	uxtb	r2, r2
 8013268:	4611      	mov	r1, r2
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff f800 	bl	8012270 <netconn_listen_with_backlog>
 8013270:	4603      	mov	r3, r0
 8013272:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8013274:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d01e      	beq.n	80132ba <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013286:	2b10      	cmp	r3, #16
 8013288:	d008      	beq.n	801329c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 801328a:	235f      	movs	r3, #95	@ 0x5f
 801328c:	60fb      	str	r3, [r7, #12]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d00f      	beq.n	80132b4 <lwip_listen+0x84>
 8013294:	4a0f      	ldr	r2, [pc, #60]	@ (80132d4 <lwip_listen+0xa4>)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	6013      	str	r3, [r2, #0]
 801329a:	e00b      	b.n	80132b4 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 801329c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fd f8fb 	bl	801049c <err_to_errno>
 80132a6:	6138      	str	r0, [r7, #16]
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <lwip_listen+0x84>
 80132ae:	4a09      	ldr	r2, [pc, #36]	@ (80132d4 <lwip_listen+0xa4>)
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80132b4:	f04f 33ff 	mov.w	r3, #4294967295
 80132b8:	e008      	b.n	80132cc <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 80132ba:	2300      	movs	r3, #0
 80132bc:	617b      	str	r3, [r7, #20]
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <lwip_listen+0x9a>
 80132c4:	4a03      	ldr	r2, [pc, #12]	@ (80132d4 <lwip_listen+0xa4>)
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3720      	adds	r7, #32
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	20010078 	.word	0x20010078

080132d8 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08c      	sub	sp, #48	@ 0x30
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 80132e6:	2308      	movs	r3, #8
 80132e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 80132ec:	2300      	movs	r3, #0
 80132ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	db01      	blt.n	80132fa <lwip_recv_tcp+0x22>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	e001      	b.n	80132fe <lwip_recv_tcp+0x26>
 80132fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80132fe:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d106      	bne.n	8013314 <lwip_recv_tcp+0x3c>
 8013306:	4b74      	ldr	r3, [pc, #464]	@ (80134d8 <lwip_recv_tcp+0x200>)
 8013308:	f240 329e 	movw	r2, #926	@ 0x39e
 801330c:	4973      	ldr	r1, [pc, #460]	@ (80134dc <lwip_recv_tcp+0x204>)
 801330e:	4874      	ldr	r0, [pc, #464]	@ (80134e0 <lwip_recv_tcp+0x208>)
 8013310:	f00f fb02 	bl	8022918 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801331e:	2b10      	cmp	r3, #16
 8013320:	d006      	beq.n	8013330 <lwip_recv_tcp+0x58>
 8013322:	4b6d      	ldr	r3, [pc, #436]	@ (80134d8 <lwip_recv_tcp+0x200>)
 8013324:	f240 329f 	movw	r2, #927	@ 0x39f
 8013328:	496e      	ldr	r1, [pc, #440]	@ (80134e4 <lwip_recv_tcp+0x20c>)
 801332a:	486d      	ldr	r0, [pc, #436]	@ (80134e0 <lwip_recv_tcp+0x208>)
 801332c:	f00f faf4 	bl	8022918 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	f003 0308 	and.w	r3, r3, #8
 8013336:	2b00      	cmp	r3, #0
 8013338:	d005      	beq.n	8013346 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 801333a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801333e:	f043 0304 	orr.w	r3, r3, #4
 8013342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d003      	beq.n	8013356 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	617b      	str	r3, [r7, #20]
 8013354:	e036      	b.n	80133c4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801335e:	f107 0114 	add.w	r1, r7, #20
 8013362:	4618      	mov	r0, r3
 8013364:	f7ff f9e6 	bl	8012734 <netconn_recv_tcp_pbuf_flags>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 801336e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013372:	2b00      	cmp	r3, #0
 8013374:	d019      	beq.n	80133aa <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8013376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013378:	2b00      	cmp	r3, #0
 801337a:	f300 808d 	bgt.w	8013498 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 801337e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013382:	4618      	mov	r0, r3
 8013384:	f7fd f88a 	bl	801049c <err_to_errno>
 8013388:	61f8      	str	r0, [r7, #28]
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <lwip_recv_tcp+0xbe>
 8013390:	4a55      	ldr	r2, [pc, #340]	@ (80134e8 <lwip_recv_tcp+0x210>)
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8013396:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 801339a:	f113 0f0f 	cmn.w	r3, #15
 801339e:	d101      	bne.n	80133a4 <lwip_recv_tcp+0xcc>
          return 0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	e094      	b.n	80134ce <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 80133a4:	f04f 33ff 	mov.w	r3, #4294967295
 80133a8:	e091      	b.n	80134ce <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d106      	bne.n	80133be <lwip_recv_tcp+0xe6>
 80133b0:	4b49      	ldr	r3, [pc, #292]	@ (80134d8 <lwip_recv_tcp+0x200>)
 80133b2:	f240 32c5 	movw	r2, #965	@ 0x3c5
 80133b6:	494d      	ldr	r1, [pc, #308]	@ (80134ec <lwip_recv_tcp+0x214>)
 80133b8:	4849      	ldr	r0, [pc, #292]	@ (80134e0 <lwip_recv_tcp+0x208>)
 80133ba:	f00f faad 	bl	8022918 <iprintf>
      sock->lastdata.pbuf = p;
 80133be:	697a      	ldr	r2, [r7, #20]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	891b      	ldrh	r3, [r3, #8]
 80133c8:	461a      	mov	r2, r3
 80133ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133cc:	4293      	cmp	r3, r2
 80133ce:	dd03      	ble.n	80133d8 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	891b      	ldrh	r3, [r3, #8]
 80133d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80133d6:	e001      	b.n	80133dc <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 80133d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133da:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 80133dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e0:	4413      	add	r3, r2
 80133e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133e4:	429a      	cmp	r2, r3
 80133e6:	dd03      	ble.n	80133f0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 80133e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	43db      	mvns	r3, r3
 80133ee:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 80133f0:	6978      	ldr	r0, [r7, #20]
 80133f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f4:	68ba      	ldr	r2, [r7, #8]
 80133f6:	18d1      	adds	r1, r2, r3
 80133f8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133fa:	2300      	movs	r3, #0
 80133fc:	f007 fdb8 	bl	801af70 <pbuf_copy_partial>

    recvd += copylen;
 8013400:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013404:	4413      	add	r3, r2
 8013406:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8013408:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801340c:	429a      	cmp	r2, r3
 801340e:	da06      	bge.n	801341e <lwip_recv_tcp+0x146>
 8013410:	4b31      	ldr	r3, [pc, #196]	@ (80134d8 <lwip_recv_tcp+0x200>)
 8013412:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8013416:	4936      	ldr	r1, [pc, #216]	@ (80134f0 <lwip_recv_tcp+0x218>)
 8013418:	4831      	ldr	r0, [pc, #196]	@ (80134e0 <lwip_recv_tcp+0x208>)
 801341a:	f00f fa7d 	bl	8022918 <iprintf>
    recv_left -= copylen;
 801341e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	2b00      	cmp	r3, #0
 801342e:	d123      	bne.n	8013478 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	891b      	ldrh	r3, [r3, #8]
 8013434:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013436:	429a      	cmp	r2, r3
 8013438:	d906      	bls.n	8013448 <lwip_recv_tcp+0x170>
 801343a:	4b27      	ldr	r3, [pc, #156]	@ (80134d8 <lwip_recv_tcp+0x200>)
 801343c:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8013440:	492c      	ldr	r1, [pc, #176]	@ (80134f4 <lwip_recv_tcp+0x21c>)
 8013442:	4827      	ldr	r0, [pc, #156]	@ (80134e0 <lwip_recv_tcp+0x208>)
 8013444:	f00f fa68 	bl	8022918 <iprintf>
      if (p->tot_len - copylen > 0) {
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	891b      	ldrh	r3, [r3, #8]
 801344c:	461a      	mov	r2, r3
 801344e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013450:	1ad3      	subs	r3, r2, r3
 8013452:	2b00      	cmp	r3, #0
 8013454:	dd09      	ble.n	801346a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f007 fb4e 	bl	801aafe <pbuf_free_header>
 8013462:	4602      	mov	r2, r0
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	605a      	str	r2, [r3, #4]
 8013468:	e006      	b.n	8013478 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2200      	movs	r2, #0
 801346e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	4618      	mov	r0, r3
 8013474:	f007 fb76 	bl	801ab64 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8013478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801347c:	f043 0314 	orr.w	r3, r3, #20
 8013480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8013484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013486:	2b00      	cmp	r3, #0
 8013488:	dd08      	ble.n	801349c <lwip_recv_tcp+0x1c4>
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	2b00      	cmp	r3, #0
 8013492:	f43f af58 	beq.w	8013346 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8013496:	e001      	b.n	801349c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8013498:	bf00      	nop
 801349a:	e000      	b.n	801349e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 801349c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 801349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	dd0b      	ble.n	80134bc <lwip_recv_tcp+0x1e4>
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	f003 0301 	and.w	r3, r3, #1
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134b4:	4611      	mov	r1, r2
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7ff f88a 	bl	80125d0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 80134bc:	2300      	movs	r3, #0
 80134be:	61bb      	str	r3, [r7, #24]
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d002      	beq.n	80134cc <lwip_recv_tcp+0x1f4>
 80134c6:	4a08      	ldr	r2, [pc, #32]	@ (80134e8 <lwip_recv_tcp+0x210>)
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	6013      	str	r3, [r2, #0]
  return recvd;
 80134cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3730      	adds	r7, #48	@ 0x30
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	08024ab4 	.word	0x08024ab4
 80134dc:	08024bc8 	.word	0x08024bc8
 80134e0:	08024054 	.word	0x08024054
 80134e4:	08024bd8 	.word	0x08024bd8
 80134e8:	20010078 	.word	0x20010078
 80134ec:	08024834 	.word	0x08024834
 80134f0:	08024bfc 	.word	0x08024bfc
 80134f4:	08024c24 	.word	0x08024c24

080134f8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 80134f8:	b590      	push	{r4, r7, lr}
 80134fa:	b08b      	sub	sp, #44	@ 0x2c
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	603b      	str	r3, [r7, #0]
 8013504:	4613      	mov	r3, r2
 8013506:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d106      	bne.n	8013520 <lwip_sock_make_addr+0x28>
 8013512:	4b2b      	ldr	r3, [pc, #172]	@ (80135c0 <lwip_sock_make_addr+0xc8>)
 8013514:	f240 4207 	movw	r2, #1031	@ 0x407
 8013518:	492a      	ldr	r1, [pc, #168]	@ (80135c4 <lwip_sock_make_addr+0xcc>)
 801351a:	482b      	ldr	r0, [pc, #172]	@ (80135c8 <lwip_sock_make_addr+0xd0>)
 801351c:	f00f f9fc 	bl	8022918 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d106      	bne.n	8013534 <lwip_sock_make_addr+0x3c>
 8013526:	4b26      	ldr	r3, [pc, #152]	@ (80135c0 <lwip_sock_make_addr+0xc8>)
 8013528:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 801352c:	4927      	ldr	r1, [pc, #156]	@ (80135cc <lwip_sock_make_addr+0xd4>)
 801352e:	4826      	ldr	r0, [pc, #152]	@ (80135c8 <lwip_sock_make_addr+0xd0>)
 8013530:	f00f f9f2 	bl	8022918 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8013534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013536:	2b00      	cmp	r3, #0
 8013538:	d106      	bne.n	8013548 <lwip_sock_make_addr+0x50>
 801353a:	4b21      	ldr	r3, [pc, #132]	@ (80135c0 <lwip_sock_make_addr+0xc8>)
 801353c:	f240 4209 	movw	r2, #1033	@ 0x409
 8013540:	4923      	ldr	r1, [pc, #140]	@ (80135d0 <lwip_sock_make_addr+0xd8>)
 8013542:	4821      	ldr	r0, [pc, #132]	@ (80135c8 <lwip_sock_make_addr+0xd0>)
 8013544:	f00f f9e8 	bl	8022918 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8013548:	f107 0314 	add.w	r3, r7, #20
 801354c:	2210      	movs	r2, #16
 801354e:	701a      	strb	r2, [r3, #0]
 8013550:	f107 0314 	add.w	r3, r7, #20
 8013554:	2202      	movs	r2, #2
 8013556:	705a      	strb	r2, [r3, #1]
 8013558:	f107 0414 	add.w	r4, r7, #20
 801355c:	88fb      	ldrh	r3, [r7, #6]
 801355e:	4618      	mov	r0, r3
 8013560:	f005 fe4e 	bl	8019200 <lwip_htons>
 8013564:	4603      	mov	r3, r0
 8013566:	8063      	strh	r3, [r4, #2]
 8013568:	f107 0314 	add.w	r3, r7, #20
 801356c:	68ba      	ldr	r2, [r7, #8]
 801356e:	6812      	ldr	r2, [r2, #0]
 8013570:	605a      	str	r2, [r3, #4]
 8013572:	f107 0314 	add.w	r3, r7, #20
 8013576:	3308      	adds	r3, #8
 8013578:	2208      	movs	r2, #8
 801357a:	2100      	movs	r1, #0
 801357c:	4618      	mov	r0, r3
 801357e:	f00f fb5d 	bl	8022c3c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8013582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	7d3a      	ldrb	r2, [r7, #20]
 8013588:	4293      	cmp	r3, r2
 801358a:	d202      	bcs.n	8013592 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 801358c:	2301      	movs	r3, #1
 801358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013590:	e008      	b.n	80135a4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8013592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	7d3a      	ldrb	r2, [r7, #20]
 8013598:	4293      	cmp	r3, r2
 801359a:	d903      	bls.n	80135a4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 801359c:	7d3b      	ldrb	r3, [r7, #20]
 801359e:	461a      	mov	r2, r3
 80135a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 80135a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	f107 0314 	add.w	r3, r7, #20
 80135ac:	4619      	mov	r1, r3
 80135ae:	6838      	ldr	r0, [r7, #0]
 80135b0:	f00f fbe9 	bl	8022d86 <memcpy>
  return truncated;
 80135b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	372c      	adds	r7, #44	@ 0x2c
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd90      	pop	{r4, r7, pc}
 80135be:	bf00      	nop
 80135c0:	08024ab4 	.word	0x08024ab4
 80135c4:	08024c34 	.word	0x08024c34
 80135c8:	08024054 	.word	0x08024054
 80135cc:	08024c48 	.word	0x08024c48
 80135d0:	08024c58 	.word	0x08024c58

080135d4 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b088      	sub	sp, #32
 80135d8:	af02      	add	r7, sp, #8
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d101      	bne.n	80135ec <lwip_recv_tcp_from+0x18>
    return 0;
 80135e8:	2300      	movs	r3, #0
 80135ea:	e021      	b.n	8013630 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d01d      	beq.n	801362e <lwip_recv_tcp_from+0x5a>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d01a      	beq.n	801362e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	6818      	ldr	r0, [r3, #0]
 80135fc:	f107 0216 	add.w	r2, r7, #22
 8013600:	f107 0110 	add.w	r1, r7, #16
 8013604:	2300      	movs	r3, #0
 8013606:	f7fe fda9 	bl	801215c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d00e      	beq.n	801362e <lwip_recv_tcp_from+0x5a>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d00b      	beq.n	801362e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6818      	ldr	r0, [r3, #0]
 801361a:	8afa      	ldrh	r2, [r7, #22]
 801361c:	f107 0110 	add.w	r1, r7, #16
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	f7ff ff67 	bl	80134f8 <lwip_sock_make_addr>
 801362a:	4603      	mov	r3, r0
 801362c:	e000      	b.n	8013630 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 801362e:	2300      	movs	r3, #0
}
 8013630:	4618      	mov	r0, r3
 8013632:	3718      	adds	r7, #24
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b08d      	sub	sp, #52	@ 0x34
 801363c:	af02      	add	r7, sp, #8
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
 8013644:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d10d      	bne.n	801366a <lwip_recvfrom_udp_raw+0x32>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	2b00      	cmp	r3, #0
 8013654:	dd09      	ble.n	801366a <lwip_recvfrom_udp_raw+0x32>
 8013656:	4b5e      	ldr	r3, [pc, #376]	@ (80137d0 <lwip_recvfrom_udp_raw+0x198>)
 8013658:	f240 4249 	movw	r2, #1097	@ 0x449
 801365c:	495d      	ldr	r1, [pc, #372]	@ (80137d4 <lwip_recvfrom_udp_raw+0x19c>)
 801365e:	485e      	ldr	r0, [pc, #376]	@ (80137d8 <lwip_recvfrom_udp_raw+0x1a0>)
 8013660:	f00f f95a 	bl	8022918 <iprintf>
 8013664:	f06f 030f 	mvn.w	r3, #15
 8013668:	e0ad      	b.n	80137c6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	f003 0308 	and.w	r3, r3, #8
 8013670:	2b00      	cmp	r3, #0
 8013672:	d003      	beq.n	801367c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8013674:	2304      	movs	r3, #4
 8013676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801367a:	e002      	b.n	8013682 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 801367c:	2300      	movs	r3, #0
 801367e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d11e      	bne.n	80136cc <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013696:	f107 0110 	add.w	r1, r7, #16
 801369a:	4618      	mov	r0, r3
 801369c:	f7ff f876 	bl	801278c <netconn_recv_udp_raw_netbuf_flags>
 80136a0:	4603      	mov	r3, r0
 80136a2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 80136a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 80136ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136b0:	e089      	b.n	80137c6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d106      	bne.n	80136c6 <lwip_recvfrom_udp_raw+0x8e>
 80136b8:	4b45      	ldr	r3, [pc, #276]	@ (80137d0 <lwip_recvfrom_udp_raw+0x198>)
 80136ba:	f240 425e 	movw	r2, #1118	@ 0x45e
 80136be:	4947      	ldr	r1, [pc, #284]	@ (80137dc <lwip_recvfrom_udp_raw+0x1a4>)
 80136c0:	4845      	ldr	r0, [pc, #276]	@ (80137d8 <lwip_recvfrom_udp_raw+0x1a0>)
 80136c2:	f00f f929 	bl	8022918 <iprintf>
    sock->lastdata.netbuf = buf;
 80136c6:	693a      	ldr	r2, [r7, #16]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	891b      	ldrh	r3, [r3, #8]
 80136d2:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 80136d4:	2300      	movs	r3, #0
 80136d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80136d8:	2300      	movs	r3, #0
 80136da:	61fb      	str	r3, [r7, #28]
 80136dc:	e029      	b.n	8013732 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 80136de:	8b3a      	ldrh	r2, [r7, #24]
 80136e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136e2:	1ad3      	subs	r3, r2, r3
 80136e4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	689a      	ldr	r2, [r3, #8]
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	00db      	lsls	r3, r3, #3
 80136ee:	4413      	add	r3, r2
 80136f0:	685a      	ldr	r2, [r3, #4]
 80136f2:	8afb      	ldrh	r3, [r7, #22]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d902      	bls.n	80136fe <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 80136f8:	8afb      	ldrh	r3, [r7, #22]
 80136fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80136fc:	e006      	b.n	801370c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	689a      	ldr	r2, [r3, #8]
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	00db      	lsls	r3, r3, #3
 8013706:	4413      	add	r3, r2
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	6818      	ldr	r0, [r3, #0]
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	689a      	ldr	r2, [r3, #8]
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	00db      	lsls	r3, r3, #3
 8013718:	4413      	add	r3, r2
 801371a:	6819      	ldr	r1, [r3, #0]
 801371c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801371e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013720:	f007 fc26 	bl	801af70 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8013724:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013728:	4413      	add	r3, r2
 801372a:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	3301      	adds	r3, #1
 8013730:	61fb      	str	r3, [r7, #28]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	69fa      	ldr	r2, [r7, #28]
 8013738:	429a      	cmp	r2, r3
 801373a:	da03      	bge.n	8013744 <lwip_recvfrom_udp_raw+0x10c>
 801373c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801373e:	8b3b      	ldrh	r3, [r7, #24]
 8013740:	429a      	cmp	r2, r3
 8013742:	d3cc      	bcc.n	80136de <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d01a      	beq.n	8013782 <lwip_recvfrom_udp_raw+0x14a>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d016      	beq.n	8013782 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d012      	beq.n	8013782 <lwip_recvfrom_udp_raw+0x14a>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	685b      	ldr	r3, [r3, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d00e      	beq.n	8013782 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6818      	ldr	r0, [r3, #0]
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	f103 0108 	add.w	r1, r3, #8
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3304      	adds	r3, #4
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4623      	mov	r3, r4
 801377e:	f7ff febb 	bl	80134f8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2200      	movs	r2, #0
 8013786:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	691b      	ldr	r3, [r3, #16]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d007      	beq.n	80137a0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8013790:	2300      	movs	r3, #0
 8013792:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8013794:	7d7b      	ldrb	r3, [r7, #21]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d102      	bne.n	80137a0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d106      	bne.n	80137b8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2200      	movs	r2, #0
 80137ae:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff f9a2 	bl	8012afc <netbuf_delete>
  }
  if (datagram_len) {
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d002      	beq.n	80137c4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	8b3a      	ldrh	r2, [r7, #24]
 80137c2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80137c4:	2300      	movs	r3, #0
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	372c      	adds	r7, #44	@ 0x2c
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd90      	pop	{r4, r7, pc}
 80137ce:	bf00      	nop
 80137d0:	08024ab4 	.word	0x08024ab4
 80137d4:	08024c68 	.word	0x08024c68
 80137d8:	08024054 	.word	0x08024054
 80137dc:	080247d8 	.word	0x080247d8

080137e0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b096      	sub	sp, #88	@ 0x58
 80137e4:	af02      	add	r7, sp, #8
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	607a      	str	r2, [r7, #4]
 80137ec:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 80137ee:	68f8      	ldr	r0, [r7, #12]
 80137f0:	f7ff fa54 	bl	8012c9c <get_socket>
 80137f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 80137f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <lwip_recvfrom+0x22>
    return -1;
 80137fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013800:	e078      	b.n	80138f4 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8013802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801380c:	2b10      	cmp	r3, #16
 801380e:	d112      	bne.n	8013836 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8013818:	f7ff fd5e 	bl	80132d8 <lwip_recv_tcp>
 801381c:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 801381e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013820:	9301      	str	r3, [sp, #4]
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	4b35      	ldr	r3, [pc, #212]	@ (80138fc <lwip_recvfrom+0x11c>)
 8013828:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801382a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801382c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801382e:	f7ff fed1 	bl	80135d4 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8013832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013834:	e05e      	b.n	80138f4 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 8013846:	2300      	movs	r3, #0
 8013848:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 801384a:	2300      	movs	r3, #0
 801384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 801384e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013852:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8013854:	2301      	movs	r3, #1
 8013856:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8013858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801385a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 801385c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <lwip_recvfrom+0x88>
 8013862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	e000      	b.n	801386a <lwip_recvfrom+0x8a>
 8013868:	2300      	movs	r3, #0
 801386a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 801386c:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8013870:	f107 0214 	add.w	r2, r7, #20
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	460b      	mov	r3, r1
 801387a:	6839      	ldr	r1, [r7, #0]
 801387c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801387e:	f7ff fedb 	bl	8013638 <lwip_recvfrom_udp_raw>
 8013882:	4603      	mov	r3, r0
 8013884:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 8013888:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00e      	beq.n	80138ae <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8013890:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8013894:	4618      	mov	r0, r3
 8013896:	f7fc fe01 	bl	801049c <err_to_errno>
 801389a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d002      	beq.n	80138a8 <lwip_recvfrom+0xc8>
 80138a2:	4a17      	ldr	r2, [pc, #92]	@ (8013900 <lwip_recvfrom+0x120>)
 80138a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138a6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80138a8:	f04f 33ff 	mov.w	r3, #4294967295
 80138ac:	e022      	b.n	80138f4 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80138ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80138b0:	461a      	mov	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4293      	cmp	r3, r2
 80138b6:	bf28      	it	cs
 80138b8:	4613      	movcs	r3, r2
 80138ba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80138be:	4293      	cmp	r3, r2
 80138c0:	d206      	bcs.n	80138d0 <lwip_recvfrom+0xf0>
 80138c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80138c4:	461a      	mov	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4293      	cmp	r3, r2
 80138ca:	bf28      	it	cs
 80138cc:	4613      	movcs	r3, r2
 80138ce:	e001      	b.n	80138d4 <lwip_recvfrom+0xf4>
 80138d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80138d4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 80138d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d002      	beq.n	80138e2 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 80138dc:	69ba      	ldr	r2, [r7, #24]
 80138de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138e0:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 80138e2:	2300      	movs	r3, #0
 80138e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80138e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d002      	beq.n	80138f2 <lwip_recvfrom+0x112>
 80138ec:	4a04      	ldr	r2, [pc, #16]	@ (8013900 <lwip_recvfrom+0x120>)
 80138ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138f0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 80138f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3750      	adds	r7, #80	@ 0x50
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	08024c94 	.word	0x08024c94
 8013900:	20010078 	.word	0x20010078

08013904 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b086      	sub	sp, #24
 8013908:	af02      	add	r7, sp, #8
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	60b9      	str	r1, [r7, #8]
 801390e:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8013910:	2300      	movs	r3, #0
 8013912:	9301      	str	r3, [sp, #4]
 8013914:	2300      	movs	r3, #0
 8013916:	9300      	str	r3, [sp, #0]
 8013918:	2300      	movs	r3, #0
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	68b9      	ldr	r1, [r7, #8]
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f7ff ff5e 	bl	80137e0 <lwip_recvfrom>
 8013924:	4603      	mov	r3, r0
}
 8013926:	4618      	mov	r0, r3
 8013928:	3710      	adds	r7, #16
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
	...

08013930 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b08a      	sub	sp, #40	@ 0x28
 8013934:	af02      	add	r7, sp, #8
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
 801393c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	f7ff f9ac 	bl	8012c9c <get_socket>
 8013944:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d102      	bne.n	8013952 <lwip_send+0x22>
    return -1;
 801394c:	f04f 33ff 	mov.w	r3, #4294967295
 8013950:	e046      	b.n	80139e0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801395c:	2b10      	cmp	r3, #16
 801395e:	d00b      	beq.n	8013978 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8013960:	2300      	movs	r3, #0
 8013962:	9301      	str	r3, [sp, #4]
 8013964:	2300      	movs	r3, #0
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	68b9      	ldr	r1, [r7, #8]
 801396e:	68f8      	ldr	r0, [r7, #12]
 8013970:	f000 f83c 	bl	80139ec <lwip_sendto>
 8013974:	4603      	mov	r3, r0
 8013976:	e033      	b.n	80139e0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801397e:	2b00      	cmp	r3, #0
 8013980:	d001      	beq.n	8013986 <lwip_send+0x56>
 8013982:	2203      	movs	r2, #3
 8013984:	e000      	b.n	8013988 <lwip_send+0x58>
 8013986:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	105b      	asrs	r3, r3, #1
 801398c:	b25b      	sxtb	r3, r3
 801398e:	f003 0304 	and.w	r3, r3, #4
 8013992:	b25b      	sxtb	r3, r3
 8013994:	4313      	orrs	r3, r2
 8013996:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8013998:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	6818      	ldr	r0, [r3, #0]
 80139a2:	7efa      	ldrb	r2, [r7, #27]
 80139a4:	f107 0310 	add.w	r3, r7, #16
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	4613      	mov	r3, r2
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	68b9      	ldr	r1, [r7, #8]
 80139b0:	f7fe ff46 	bl	8012840 <netconn_write_partly>
 80139b4:	4603      	mov	r3, r0
 80139b6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80139b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fc fd6d 	bl	801049c <err_to_errno>
 80139c2:	6178      	str	r0, [r7, #20]
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d002      	beq.n	80139d0 <lwip_send+0xa0>
 80139ca:	4a07      	ldr	r2, [pc, #28]	@ (80139e8 <lwip_send+0xb8>)
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80139d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d101      	bne.n	80139dc <lwip_send+0xac>
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	e001      	b.n	80139e0 <lwip_send+0xb0>
 80139dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3720      	adds	r7, #32
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	20010078 	.word	0x20010078

080139ec <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b08e      	sub	sp, #56	@ 0x38
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	60f8      	str	r0, [r7, #12]
 80139f4:	60b9      	str	r1, [r7, #8]
 80139f6:	607a      	str	r2, [r7, #4]
 80139f8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80139fa:	68f8      	ldr	r0, [r7, #12]
 80139fc:	f7ff f94e 	bl	8012c9c <get_socket>
 8013a00:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 8013a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d102      	bne.n	8013a0e <lwip_sendto+0x22>
    return -1;
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	e093      	b.n	8013b36 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013a18:	2b10      	cmp	r3, #16
 8013a1a:	d107      	bne.n	8013a2c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	68b9      	ldr	r1, [r7, #8]
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f7ff ff84 	bl	8013930 <lwip_send>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	e084      	b.n	8013b36 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a32:	d30a      	bcc.n	8013a4a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8013a34:	235a      	movs	r3, #90	@ 0x5a
 8013a36:	623b      	str	r3, [r7, #32]
 8013a38:	6a3b      	ldr	r3, [r7, #32]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d002      	beq.n	8013a44 <lwip_sendto+0x58>
 8013a3e:	4a40      	ldr	r2, [pc, #256]	@ (8013b40 <lwip_sendto+0x154>)
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8013a44:	f04f 33ff 	mov.w	r3, #4294967295
 8013a48:	e075      	b.n	8013b36 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8013a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <lwip_sendto+0x6e>
 8013a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d023      	beq.n	8013aa2 <lwip_sendto+0xb6>
 8013a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a5c:	2b10      	cmp	r3, #16
 8013a5e:	d10b      	bne.n	8013a78 <lwip_sendto+0x8c>
 8013a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d008      	beq.n	8013a78 <lwip_sendto+0x8c>
 8013a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a68:	785b      	ldrb	r3, [r3, #1]
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d104      	bne.n	8013a78 <lwip_sendto+0x8c>
 8013a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a70:	f003 0303 	and.w	r3, r3, #3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d014      	beq.n	8013aa2 <lwip_sendto+0xb6>
 8013a78:	4b32      	ldr	r3, [pc, #200]	@ (8013b44 <lwip_sendto+0x158>)
 8013a7a:	f240 6252 	movw	r2, #1618	@ 0x652
 8013a7e:	4932      	ldr	r1, [pc, #200]	@ (8013b48 <lwip_sendto+0x15c>)
 8013a80:	4832      	ldr	r0, [pc, #200]	@ (8013b4c <lwip_sendto+0x160>)
 8013a82:	f00e ff49 	bl	8022918 <iprintf>
 8013a86:	f06f 000f 	mvn.w	r0, #15
 8013a8a:	f7fc fd07 	bl	801049c <err_to_errno>
 8013a8e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d002      	beq.n	8013a9c <lwip_sendto+0xb0>
 8013a96:	4a2a      	ldr	r2, [pc, #168]	@ (8013b40 <lwip_sendto+0x154>)
 8013a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a9a:	6013      	str	r3, [r2, #0]
 8013a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa0:	e049      	b.n	8013b36 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8013aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00a      	beq.n	8013ac6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8013ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	61bb      	str	r3, [r7, #24]
 8013ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ab8:	885b      	ldrh	r3, [r3, #2]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f005 fba0 	bl	8019200 <lwip_htons>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8013ac4:	e003      	b.n	8013ace <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8013aca:	2300      	movs	r3, #0
 8013acc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8013ace:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013ad0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8013ad2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013ad4:	f107 0310 	add.w	r3, r7, #16
 8013ad8:	68b9      	ldr	r1, [r7, #8]
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff f856 	bl	8012b8c <netbuf_ref>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8013ae6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d10a      	bne.n	8013b04 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8013aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f107 0210 	add.w	r2, r7, #16
 8013af6:	4611      	mov	r1, r2
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7fe fe73 	bl	80127e4 <netconn_send>
 8013afe:	4603      	mov	r3, r0
 8013b00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8013b04:	f107 0310 	add.w	r3, r7, #16
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff f817 	bl	8012b3c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8013b0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fc fcc2 	bl	801049c <err_to_errno>
 8013b18:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <lwip_sendto+0x13a>
 8013b20:	4a07      	ldr	r2, [pc, #28]	@ (8013b40 <lwip_sendto+0x154>)
 8013b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b24:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8013b26:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <lwip_sendto+0x146>
 8013b2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013b30:	e001      	b.n	8013b36 <lwip_sendto+0x14a>
 8013b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3738      	adds	r7, #56	@ 0x38
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	20010078 	.word	0x20010078
 8013b44:	08024ab4 	.word	0x08024ab4
 8013b48:	08024d98 	.word	0x08024d98
 8013b4c:	08024054 	.word	0x08024054

08013b50 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	2b03      	cmp	r3, #3
 8013b60:	d009      	beq.n	8013b76 <lwip_socket+0x26>
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	2b03      	cmp	r3, #3
 8013b66:	dc23      	bgt.n	8013bb0 <lwip_socket+0x60>
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d019      	beq.n	8013ba2 <lwip_socket+0x52>
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	2b02      	cmp	r3, #2
 8013b72:	d009      	beq.n	8013b88 <lwip_socket+0x38>
 8013b74:	e01c      	b.n	8013bb0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	4a22      	ldr	r2, [pc, #136]	@ (8013c04 <lwip_socket+0xb4>)
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	2040      	movs	r0, #64	@ 0x40
 8013b80:	f7fe fa32 	bl	8011fe8 <netconn_new_with_proto_and_callback>
 8013b84:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8013b86:	e019      	b.n	8013bbc <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2b88      	cmp	r3, #136	@ 0x88
 8013b8c:	d101      	bne.n	8013b92 <lwip_socket+0x42>
 8013b8e:	2321      	movs	r3, #33	@ 0x21
 8013b90:	e000      	b.n	8013b94 <lwip_socket+0x44>
 8013b92:	2320      	movs	r3, #32
 8013b94:	4a1b      	ldr	r2, [pc, #108]	@ (8013c04 <lwip_socket+0xb4>)
 8013b96:	2100      	movs	r1, #0
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe fa25 	bl	8011fe8 <netconn_new_with_proto_and_callback>
 8013b9e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8013ba0:	e00c      	b.n	8013bbc <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8013ba2:	4a18      	ldr	r2, [pc, #96]	@ (8013c04 <lwip_socket+0xb4>)
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	2010      	movs	r0, #16
 8013ba8:	f7fe fa1e 	bl	8011fe8 <netconn_new_with_proto_and_callback>
 8013bac:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8013bae:	e005      	b.n	8013bbc <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8013bb0:	4b15      	ldr	r3, [pc, #84]	@ (8013c08 <lwip_socket+0xb8>)
 8013bb2:	2216      	movs	r2, #22
 8013bb4:	601a      	str	r2, [r3, #0]
      return -1;
 8013bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bba:	e01e      	b.n	8013bfa <lwip_socket+0xaa>
  }

  if (!conn) {
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d105      	bne.n	8013bce <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8013bc2:	4b11      	ldr	r3, [pc, #68]	@ (8013c08 <lwip_socket+0xb8>)
 8013bc4:	2269      	movs	r2, #105	@ 0x69
 8013bc6:	601a      	str	r2, [r3, #0]
    return -1;
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bcc:	e015      	b.n	8013bfa <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8013bce:	2100      	movs	r1, #0
 8013bd0:	6978      	ldr	r0, [r7, #20]
 8013bd2:	f7ff f87b 	bl	8012ccc <alloc_socket>
 8013bd6:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bde:	d108      	bne.n	8013bf2 <lwip_socket+0xa2>
    netconn_delete(conn);
 8013be0:	6978      	ldr	r0, [r7, #20]
 8013be2:	f7fe fa9f 	bl	8012124 <netconn_delete>
    set_errno(ENFILE);
 8013be6:	4b08      	ldr	r3, [pc, #32]	@ (8013c08 <lwip_socket+0xb8>)
 8013be8:	2217      	movs	r2, #23
 8013bea:	601a      	str	r2, [r3, #0]
    return -1;
 8013bec:	f04f 33ff 	mov.w	r3, #4294967295
 8013bf0:	e003      	b.n	8013bfa <lwip_socket+0xaa>
  }
  conn->socket = i;
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	693a      	ldr	r2, [r7, #16]
 8013bf6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8013bf8:	693b      	ldr	r3, [r7, #16]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	08013cb5 	.word	0x08013cb5
 8013c08:	20010078 	.word	0x20010078

08013c0c <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8013c18:	2300      	movs	r3, #0
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	68b9      	ldr	r1, [r7, #8]
 8013c1e:	68f8      	ldr	r0, [r7, #12]
 8013c20:	f7ff fe86 	bl	8013930 <lwip_send>
 8013c24:	4603      	mov	r3, r0
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b087      	sub	sp, #28
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	60f8      	str	r0, [r7, #12]
 8013c36:	60b9      	str	r1, [r7, #8]
 8013c38:	607a      	str	r2, [r7, #4]
 8013c3a:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	617b      	str	r3, [r7, #20]
 8013c40:	e02c      	b.n	8013c9c <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	695a      	ldr	r2, [r3, #20]
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	00db      	lsls	r3, r3, #3
 8013c4a:	4413      	add	r3, r2
 8013c4c:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d11e      	bne.n	8013c96 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <lwip_poll_should_wake+0x44>
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	f003 0301 	and.w	r3, r3, #1
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d001      	beq.n	8013c72 <lwip_poll_should_wake+0x44>
        return 1;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	e01a      	b.n	8013ca8 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d009      	beq.n	8013c8c <lwip_poll_should_wake+0x5e>
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	f003 0302 	and.w	r3, r3, #2
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d001      	beq.n	8013c8c <lwip_poll_should_wake+0x5e>
        return 1;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e00d      	b.n	8013ca8 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8013c8c:	6a3b      	ldr	r3, [r7, #32]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d001      	beq.n	8013c96 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8013c92:	2301      	movs	r3, #1
 8013c94:	e008      	b.n	8013ca8 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	617b      	str	r3, [r7, #20]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	699b      	ldr	r3, [r3, #24]
 8013ca0:	697a      	ldr	r2, [r7, #20]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d3cd      	bcc.n	8013c42 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8013ca6:	2300      	movs	r3, #0
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	371c      	adds	r7, #28
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b08a      	sub	sp, #40	@ 0x28
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	70fb      	strb	r3, [r7, #3]
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	f000 80a4 	beq.w	8013e14 <event_callback+0x160>
    s = conn->socket;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	699b      	ldr	r3, [r3, #24]
 8013cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 8013cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	da18      	bge.n	8013d0a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8013cd8:	f00e fcb8 	bl	802264c <sys_arch_protect>
 8013cdc:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	699b      	ldr	r3, [r3, #24]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	da0b      	bge.n	8013cfe <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8013ce6:	78fb      	ldrb	r3, [r7, #3]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d104      	bne.n	8013cf6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	699b      	ldr	r3, [r3, #24]
 8013cf0:	1e5a      	subs	r2, r3, #1
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8013cf6:	69f8      	ldr	r0, [r7, #28]
 8013cf8:	f00e fcb6 	bl	8022668 <sys_arch_unprotect>
        return;
 8013cfc:	e08d      	b.n	8013e1a <event_callback+0x166>
      }
      s = conn->socket;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	699b      	ldr	r3, [r3, #24]
 8013d02:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8013d04:	69f8      	ldr	r0, [r7, #28]
 8013d06:	f00e fcaf 	bl	8022668 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8013d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d0c:	f7fe ffc6 	bl	8012c9c <get_socket>
 8013d10:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d07f      	beq.n	8013e18 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8013d1c:	f00e fc96 	bl	802264c <sys_arch_protect>
 8013d20:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8013d22:	78fb      	ldrb	r3, [r7, #3]
 8013d24:	2b04      	cmp	r3, #4
 8013d26:	d83e      	bhi.n	8013da6 <event_callback+0xf2>
 8013d28:	a201      	add	r2, pc, #4	@ (adr r2, 8013d30 <event_callback+0x7c>)
 8013d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d2e:	bf00      	nop
 8013d30:	08013d45 	.word	0x08013d45
 8013d34:	08013d67 	.word	0x08013d67
 8013d38:	08013d7f 	.word	0x08013d7f
 8013d3c:	08013d93 	.word	0x08013d93
 8013d40:	08013d9f 	.word	0x08013d9f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	b21a      	sxth	r2, r3
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	dd2a      	ble.n	8013db6 <event_callback+0x102>
        check_waiters = 0;
 8013d60:	2300      	movs	r3, #0
 8013d62:	623b      	str	r3, [r7, #32]
      }
      break;
 8013d64:	e027      	b.n	8013db6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	b21a      	sxth	r2, r3
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	623b      	str	r3, [r7, #32]
      break;
 8013d7c:	e01c      	b.n	8013db8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	895b      	ldrh	r3, [r3, #10]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d001      	beq.n	8013d8a <event_callback+0xd6>
        check_waiters = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	815a      	strh	r2, [r3, #10]
      break;
 8013d90:	e012      	b.n	8013db8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8013d92:	69bb      	ldr	r3, [r7, #24]
 8013d94:	2200      	movs	r2, #0
 8013d96:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	623b      	str	r3, [r7, #32]
      break;
 8013d9c:	e00c      	b.n	8013db8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8013d9e:	69bb      	ldr	r3, [r7, #24]
 8013da0:	2201      	movs	r2, #1
 8013da2:	819a      	strh	r2, [r3, #12]
      break;
 8013da4:	e008      	b.n	8013db8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8013da6:	4b1e      	ldr	r3, [pc, #120]	@ (8013e20 <event_callback+0x16c>)
 8013da8:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8013dac:	491d      	ldr	r1, [pc, #116]	@ (8013e24 <event_callback+0x170>)
 8013dae:	481e      	ldr	r0, [pc, #120]	@ (8013e28 <event_callback+0x174>)
 8013db0:	f00e fdb2 	bl	8022918 <iprintf>
      break;
 8013db4:	e000      	b.n	8013db8 <event_callback+0x104>
      break;
 8013db6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	7b9b      	ldrb	r3, [r3, #14]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d025      	beq.n	8013e0c <event_callback+0x158>
 8013dc0:	6a3b      	ldr	r3, [r7, #32]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d022      	beq.n	8013e0c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	bfcc      	ite	gt
 8013dd0:	2301      	movgt	r3, #1
 8013dd2:	2300      	movle	r3, #0
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	895b      	ldrh	r3, [r3, #10]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	bf14      	ite	ne
 8013de0:	2301      	movne	r3, #1
 8013de2:	2300      	moveq	r3, #0
 8013de4:	b2db      	uxtb	r3, r3
 8013de6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	899b      	ldrh	r3, [r3, #12]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	bf14      	ite	ne
 8013df0:	2301      	movne	r3, #1
 8013df2:	2300      	moveq	r3, #0
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8013df8:	69f8      	ldr	r0, [r7, #28]
 8013dfa:	f00e fc35 	bl	8022668 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	6979      	ldr	r1, [r7, #20]
 8013e04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e06:	f000 f811 	bl	8013e2c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8013e0a:	e006      	b.n	8013e1a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8013e0c:	69f8      	ldr	r0, [r7, #28]
 8013e0e:	f00e fc2b 	bl	8022668 <sys_arch_unprotect>
 8013e12:	e002      	b.n	8013e1a <event_callback+0x166>
    return;
 8013e14:	bf00      	nop
 8013e16:	e000      	b.n	8013e1a <event_callback+0x166>
      return;
 8013e18:	bf00      	nop
  }
  done_socket(sock);
}
 8013e1a:	3728      	adds	r7, #40	@ 0x28
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	08024ab4 	.word	0x08024ab4
 8013e24:	08024e34 	.word	0x08024e34
 8013e28:	08024054 	.word	0x08024054

08013e2c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b088      	sub	sp, #32
 8013e30:	af02      	add	r7, sp, #8
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8013e3a:	4b42      	ldr	r3, [pc, #264]	@ (8013f44 <select_check_waiters+0x118>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	617b      	str	r3, [r7, #20]
 8013e40:	e078      	b.n	8013f34 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	69db      	ldr	r3, [r3, #28]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d171      	bne.n	8013f2e <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	695b      	ldr	r3, [r3, #20]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d009      	beq.n	8013e6a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	68ba      	ldr	r2, [r7, #8]
 8013e5e:	68f9      	ldr	r1, [r7, #12]
 8013e60:	6978      	ldr	r0, [r7, #20]
 8013e62:	f7ff fee4 	bl	8013c2e <lwip_poll_should_wake>
 8013e66:	6138      	str	r0, [r7, #16]
 8013e68:	e056      	b.n	8013f18 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d017      	beq.n	8013ea0 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d013      	beq.n	8013ea0 <select_check_waiters+0x74>
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	689a      	ldr	r2, [r3, #8]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	da00      	bge.n	8013e84 <select_check_waiters+0x58>
 8013e82:	331f      	adds	r3, #31
 8013e84:	115b      	asrs	r3, r3, #5
 8013e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f003 031f 	and.w	r3, r3, #31
 8013e90:	fa22 f303 	lsr.w	r3, r2, r3
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d001      	beq.n	8013ea0 <select_check_waiters+0x74>
            do_signal = 1;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d01a      	beq.n	8013edc <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d117      	bne.n	8013edc <select_check_waiters+0xb0>
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d013      	beq.n	8013edc <select_check_waiters+0xb0>
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	68da      	ldr	r2, [r3, #12]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	da00      	bge.n	8013ec0 <select_check_waiters+0x94>
 8013ebe:	331f      	adds	r3, #31
 8013ec0:	115b      	asrs	r3, r3, #5
 8013ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f003 031f 	and.w	r3, r3, #31
 8013ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8013ed0:	f003 0301 	and.w	r3, r3, #1
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d001      	beq.n	8013edc <select_check_waiters+0xb0>
            do_signal = 1;
 8013ed8:	2301      	movs	r3, #1
 8013eda:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d01a      	beq.n	8013f18 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d117      	bne.n	8013f18 <select_check_waiters+0xec>
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	691b      	ldr	r3, [r3, #16]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d013      	beq.n	8013f18 <select_check_waiters+0xec>
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	691a      	ldr	r2, [r3, #16]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	da00      	bge.n	8013efc <select_check_waiters+0xd0>
 8013efa:	331f      	adds	r3, #31
 8013efc:	115b      	asrs	r3, r3, #5
 8013efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	f003 031f 	and.w	r3, r3, #31
 8013f08:	fa22 f303 	lsr.w	r3, r2, r3
 8013f0c:	f003 0301 	and.w	r3, r3, #1
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d001      	beq.n	8013f18 <select_check_waiters+0xec>
            do_signal = 1;
 8013f14:	2301      	movs	r3, #1
 8013f16:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d007      	beq.n	8013f2e <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	2201      	movs	r2, #1
 8013f22:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	3320      	adds	r3, #32
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f00e faf9 	bl	8022520 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	617b      	str	r3, [r7, #20]
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d183      	bne.n	8013e42 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8013f3a:	bf00      	nop
 8013f3c:	bf00      	nop
 8013f3e:	3718      	adds	r7, #24
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	20008d68 	.word	0x20008d68

08013f48 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7fe fea3 	bl	8012c9c <get_socket>
 8013f56:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d04e      	beq.n	8013ffc <lwip_socket_drop_registered_memberships+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8013f5e:	2300      	movs	r3, #0
 8013f60:	617b      	str	r3, [r7, #20]
 8013f62:	e047      	b.n	8013ff4 <lwip_socket_drop_registered_memberships+0xac>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 8013f64:	4927      	ldr	r1, [pc, #156]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013f66:	697a      	ldr	r2, [r7, #20]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	440b      	add	r3, r1
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	693a      	ldr	r2, [r7, #16]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d139      	bne.n	8013fee <lwip_socket_drop_registered_memberships+0xa6>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 8013f7a:	4922      	ldr	r1, [pc, #136]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013f7c:	697a      	ldr	r2, [r7, #20]
 8013f7e:	4613      	mov	r3, r2
 8013f80:	005b      	lsls	r3, r3, #1
 8013f82:	4413      	add	r3, r2
 8013f84:	009b      	lsls	r3, r3, #2
 8013f86:	440b      	add	r3, r1
 8013f88:	3308      	adds	r3, #8
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	60fb      	str	r3, [r7, #12]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 8013f8e:	491d      	ldr	r1, [pc, #116]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013f90:	697a      	ldr	r2, [r7, #20]
 8013f92:	4613      	mov	r3, r2
 8013f94:	005b      	lsls	r3, r3, #1
 8013f96:	4413      	add	r3, r2
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	440b      	add	r3, r1
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	60bb      	str	r3, [r7, #8]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 8013fa2:	4918      	ldr	r1, [pc, #96]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fa4:	697a      	ldr	r2, [r7, #20]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	005b      	lsls	r3, r3, #1
 8013faa:	4413      	add	r3, r2
 8013fac:	009b      	lsls	r3, r3, #2
 8013fae:	440b      	add	r3, r1
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 8013fb4:	4913      	ldr	r1, [pc, #76]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fb6:	697a      	ldr	r2, [r7, #20]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4413      	add	r3, r2
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	440b      	add	r3, r1
 8013fc2:	3304      	adds	r3, #4
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 8013fc8:	490e      	ldr	r1, [pc, #56]	@ (8014004 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	005b      	lsls	r3, r3, #1
 8013fd0:	4413      	add	r3, r2
 8013fd2:	009b      	lsls	r3, r3, #2
 8013fd4:	440b      	add	r3, r1
 8013fd6:	3308      	adds	r3, #8
 8013fd8:	2200      	movs	r2, #0
 8013fda:	601a      	str	r2, [r3, #0]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	6818      	ldr	r0, [r3, #0]
 8013fe0:	f107 0208 	add.w	r2, r7, #8
 8013fe4:	f107 010c 	add.w	r1, r7, #12
 8013fe8:	2301      	movs	r3, #1
 8013fea:	f7fe fd47 	bl	8012a7c <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	617b      	str	r3, [r7, #20]
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	2b03      	cmp	r3, #3
 8013ff8:	ddb4      	ble.n	8013f64 <lwip_socket_drop_registered_memberships+0x1c>
 8013ffa:	e000      	b.n	8013ffe <lwip_socket_drop_registered_memberships+0xb6>
    return;
 8013ffc:	bf00      	nop
    }
  }
  done_socket(sock);
}
 8013ffe:	3718      	adds	r7, #24
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20008cf8 	.word	0x20008cf8

08014008 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8014012:	f00d faad 	bl	8021570 <sys_timeouts_sleeptime>
 8014016:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801401e:	d10b      	bne.n	8014038 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014020:	4813      	ldr	r0, [pc, #76]	@ (8014070 <tcpip_timeouts_mbox_fetch+0x68>)
 8014022:	f00e fae6 	bl	80225f2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014026:	2200      	movs	r2, #0
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f00e f9bc 	bl	80223a8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014030:	480f      	ldr	r0, [pc, #60]	@ (8014070 <tcpip_timeouts_mbox_fetch+0x68>)
 8014032:	f00e facf 	bl	80225d4 <sys_mutex_lock>
    return;
 8014036:	e018      	b.n	801406a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d102      	bne.n	8014044 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801403e:	f00d fa5d 	bl	80214fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014042:	e7e6      	b.n	8014012 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014044:	480a      	ldr	r0, [pc, #40]	@ (8014070 <tcpip_timeouts_mbox_fetch+0x68>)
 8014046:	f00e fad4 	bl	80225f2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801404a:	68fa      	ldr	r2, [r7, #12]
 801404c:	6839      	ldr	r1, [r7, #0]
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f00e f9aa 	bl	80223a8 <sys_arch_mbox_fetch>
 8014054:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8014056:	4806      	ldr	r0, [pc, #24]	@ (8014070 <tcpip_timeouts_mbox_fetch+0x68>)
 8014058:	f00e fabc 	bl	80225d4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014062:	d102      	bne.n	801406a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014064:	f00d fa4a 	bl	80214fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014068:	e7d3      	b.n	8014012 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801406a:	3710      	adds	r7, #16
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	20008d78 	.word	0x20008d78

08014074 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801407c:	4810      	ldr	r0, [pc, #64]	@ (80140c0 <tcpip_thread+0x4c>)
 801407e:	f00e faa9 	bl	80225d4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8014082:	4b10      	ldr	r3, [pc, #64]	@ (80140c4 <tcpip_thread+0x50>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d005      	beq.n	8014096 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801408a:	4b0e      	ldr	r3, [pc, #56]	@ (80140c4 <tcpip_thread+0x50>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	4a0e      	ldr	r2, [pc, #56]	@ (80140c8 <tcpip_thread+0x54>)
 8014090:	6812      	ldr	r2, [r2, #0]
 8014092:	4610      	mov	r0, r2
 8014094:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8014096:	f107 030c 	add.w	r3, r7, #12
 801409a:	4619      	mov	r1, r3
 801409c:	480b      	ldr	r0, [pc, #44]	@ (80140cc <tcpip_thread+0x58>)
 801409e:	f7ff ffb3 	bl	8014008 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d106      	bne.n	80140b6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80140a8:	4b09      	ldr	r3, [pc, #36]	@ (80140d0 <tcpip_thread+0x5c>)
 80140aa:	2291      	movs	r2, #145	@ 0x91
 80140ac:	4909      	ldr	r1, [pc, #36]	@ (80140d4 <tcpip_thread+0x60>)
 80140ae:	480a      	ldr	r0, [pc, #40]	@ (80140d8 <tcpip_thread+0x64>)
 80140b0:	f00e fc32 	bl	8022918 <iprintf>
      continue;
 80140b4:	e003      	b.n	80140be <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	4618      	mov	r0, r3
 80140ba:	f000 f80f 	bl	80140dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80140be:	e7ea      	b.n	8014096 <tcpip_thread+0x22>
 80140c0:	20008d78 	.word	0x20008d78
 80140c4:	20008d6c 	.word	0x20008d6c
 80140c8:	20008d70 	.word	0x20008d70
 80140cc:	20008d74 	.word	0x20008d74
 80140d0:	08024e88 	.word	0x08024e88
 80140d4:	08024efc 	.word	0x08024efc
 80140d8:	08024f1c 	.word	0x08024f1c

080140dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d026      	beq.n	801413a <tcpip_thread_handle_msg+0x5e>
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	dc2b      	bgt.n	8014148 <tcpip_thread_handle_msg+0x6c>
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d002      	beq.n	80140fa <tcpip_thread_handle_msg+0x1e>
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d015      	beq.n	8014124 <tcpip_thread_handle_msg+0x48>
 80140f8:	e026      	b.n	8014148 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	6850      	ldr	r0, [r2, #4]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	6892      	ldr	r2, [r2, #8]
 8014106:	4611      	mov	r1, r2
 8014108:	4798      	blx	r3
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d004      	beq.n	801411a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	4618      	mov	r0, r3
 8014116:	f006 fd25 	bl	801ab64 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801411a:	6879      	ldr	r1, [r7, #4]
 801411c:	2009      	movs	r0, #9
 801411e:	f005 fe29 	bl	8019d74 <memp_free>
      break;
 8014122:	e018      	b.n	8014156 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	685b      	ldr	r3, [r3, #4]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	6892      	ldr	r2, [r2, #8]
 801412c:	4610      	mov	r0, r2
 801412e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014130:	6879      	ldr	r1, [r7, #4]
 8014132:	2008      	movs	r0, #8
 8014134:	f005 fe1e 	bl	8019d74 <memp_free>
      break;
 8014138:	e00d      	b.n	8014156 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	6892      	ldr	r2, [r2, #8]
 8014142:	4610      	mov	r0, r2
 8014144:	4798      	blx	r3
      break;
 8014146:	e006      	b.n	8014156 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014148:	4b05      	ldr	r3, [pc, #20]	@ (8014160 <tcpip_thread_handle_msg+0x84>)
 801414a:	22cf      	movs	r2, #207	@ 0xcf
 801414c:	4905      	ldr	r1, [pc, #20]	@ (8014164 <tcpip_thread_handle_msg+0x88>)
 801414e:	4806      	ldr	r0, [pc, #24]	@ (8014168 <tcpip_thread_handle_msg+0x8c>)
 8014150:	f00e fbe2 	bl	8022918 <iprintf>
      break;
 8014154:	bf00      	nop
  }
}
 8014156:	bf00      	nop
 8014158:	3708      	adds	r7, #8
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	08024e88 	.word	0x08024e88
 8014164:	08024efc 	.word	0x08024efc
 8014168:	08024f1c 	.word	0x08024f1c

0801416c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b086      	sub	sp, #24
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014178:	481a      	ldr	r0, [pc, #104]	@ (80141e4 <tcpip_inpkt+0x78>)
 801417a:	f00e f95d 	bl	8022438 <sys_mbox_valid>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d105      	bne.n	8014190 <tcpip_inpkt+0x24>
 8014184:	4b18      	ldr	r3, [pc, #96]	@ (80141e8 <tcpip_inpkt+0x7c>)
 8014186:	22fc      	movs	r2, #252	@ 0xfc
 8014188:	4918      	ldr	r1, [pc, #96]	@ (80141ec <tcpip_inpkt+0x80>)
 801418a:	4819      	ldr	r0, [pc, #100]	@ (80141f0 <tcpip_inpkt+0x84>)
 801418c:	f00e fbc4 	bl	8022918 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014190:	2009      	movs	r0, #9
 8014192:	f005 fd79 	bl	8019c88 <memp_malloc>
 8014196:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d102      	bne.n	80141a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801419e:	f04f 33ff 	mov.w	r3, #4294967295
 80141a2:	e01a      	b.n	80141da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2200      	movs	r2, #0
 80141a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	68fa      	ldr	r2, [r7, #12]
 80141ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	68ba      	ldr	r2, [r7, #8]
 80141b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80141bc:	6979      	ldr	r1, [r7, #20]
 80141be:	4809      	ldr	r0, [pc, #36]	@ (80141e4 <tcpip_inpkt+0x78>)
 80141c0:	f00e f8d8 	bl	8022374 <sys_mbox_trypost>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d006      	beq.n	80141d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80141ca:	6979      	ldr	r1, [r7, #20]
 80141cc:	2009      	movs	r0, #9
 80141ce:	f005 fdd1 	bl	8019d74 <memp_free>
    return ERR_MEM;
 80141d2:	f04f 33ff 	mov.w	r3, #4294967295
 80141d6:	e000      	b.n	80141da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80141d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	20008d74 	.word	0x20008d74
 80141e8:	08024e88 	.word	0x08024e88
 80141ec:	08024f44 	.word	0x08024f44
 80141f0:	08024f1c 	.word	0x08024f1c

080141f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014204:	f003 0318 	and.w	r3, r3, #24
 8014208:	2b00      	cmp	r3, #0
 801420a:	d006      	beq.n	801421a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801420c:	4a08      	ldr	r2, [pc, #32]	@ (8014230 <tcpip_input+0x3c>)
 801420e:	6839      	ldr	r1, [r7, #0]
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f7ff ffab 	bl	801416c <tcpip_inpkt>
 8014216:	4603      	mov	r3, r0
 8014218:	e005      	b.n	8014226 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801421a:	4a06      	ldr	r2, [pc, #24]	@ (8014234 <tcpip_input+0x40>)
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7ff ffa4 	bl	801416c <tcpip_inpkt>
 8014224:	4603      	mov	r3, r0
}
 8014226:	4618      	mov	r0, r3
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	08022171 	.word	0x08022171
 8014234:	08017d1d 	.word	0x08017d1d

08014238 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014242:	4819      	ldr	r0, [pc, #100]	@ (80142a8 <tcpip_try_callback+0x70>)
 8014244:	f00e f8f8 	bl	8022438 <sys_mbox_valid>
 8014248:	4603      	mov	r3, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	d106      	bne.n	801425c <tcpip_try_callback+0x24>
 801424e:	4b17      	ldr	r3, [pc, #92]	@ (80142ac <tcpip_try_callback+0x74>)
 8014250:	f240 125d 	movw	r2, #349	@ 0x15d
 8014254:	4916      	ldr	r1, [pc, #88]	@ (80142b0 <tcpip_try_callback+0x78>)
 8014256:	4817      	ldr	r0, [pc, #92]	@ (80142b4 <tcpip_try_callback+0x7c>)
 8014258:	f00e fb5e 	bl	8022918 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801425c:	2008      	movs	r0, #8
 801425e:	f005 fd13 	bl	8019c88 <memp_malloc>
 8014262:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d102      	bne.n	8014270 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801426a:	f04f 33ff 	mov.w	r3, #4294967295
 801426e:	e017      	b.n	80142a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2201      	movs	r2, #1
 8014274:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	683a      	ldr	r2, [r7, #0]
 8014280:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014282:	68f9      	ldr	r1, [r7, #12]
 8014284:	4808      	ldr	r0, [pc, #32]	@ (80142a8 <tcpip_try_callback+0x70>)
 8014286:	f00e f875 	bl	8022374 <sys_mbox_trypost>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d006      	beq.n	801429e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8014290:	68f9      	ldr	r1, [r7, #12]
 8014292:	2008      	movs	r0, #8
 8014294:	f005 fd6e 	bl	8019d74 <memp_free>
    return ERR_MEM;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295
 801429c:	e000      	b.n	80142a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	20008d74 	.word	0x20008d74
 80142ac:	08024e88 	.word	0x08024e88
 80142b0:	08024f44 	.word	0x08024f44
 80142b4:	08024f1c 	.word	0x08024f1c

080142b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80142c4:	4806      	ldr	r0, [pc, #24]	@ (80142e0 <tcpip_send_msg_wait_sem+0x28>)
 80142c6:	f00e f985 	bl	80225d4 <sys_mutex_lock>
  fn(apimsg);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	68b8      	ldr	r0, [r7, #8]
 80142ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80142d0:	4803      	ldr	r0, [pc, #12]	@ (80142e0 <tcpip_send_msg_wait_sem+0x28>)
 80142d2:	f00e f98e 	bl	80225f2 <sys_mutex_unlock>
  return ERR_OK;
 80142d6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	20008d78 	.word	0x20008d78

080142e4 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 80142ee:	4808      	ldr	r0, [pc, #32]	@ (8014310 <tcpip_api_call+0x2c>)
 80142f0:	f00e f970 	bl	80225d4 <sys_mutex_lock>
  err = fn(call);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6838      	ldr	r0, [r7, #0]
 80142f8:	4798      	blx	r3
 80142fa:	4603      	mov	r3, r0
 80142fc:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 80142fe:	4804      	ldr	r0, [pc, #16]	@ (8014310 <tcpip_api_call+0x2c>)
 8014300:	f00e f977 	bl	80225f2 <sys_mutex_unlock>
  return err;
 8014304:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8014308:	4618      	mov	r0, r3
 801430a:	3710      	adds	r7, #16
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	20008d78 	.word	0x20008d78

08014314 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af02      	add	r7, sp, #8
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801431e:	f005 f80c 	bl	801933a <lwip_init>

  tcpip_init_done = initfunc;
 8014322:	4a17      	ldr	r2, [pc, #92]	@ (8014380 <tcpip_init+0x6c>)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014328:	4a16      	ldr	r2, [pc, #88]	@ (8014384 <tcpip_init+0x70>)
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801432e:	2106      	movs	r1, #6
 8014330:	4815      	ldr	r0, [pc, #84]	@ (8014388 <tcpip_init+0x74>)
 8014332:	f00d fff3 	bl	802231c <sys_mbox_new>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d006      	beq.n	801434a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801433c:	4b13      	ldr	r3, [pc, #76]	@ (801438c <tcpip_init+0x78>)
 801433e:	f240 2261 	movw	r2, #609	@ 0x261
 8014342:	4913      	ldr	r1, [pc, #76]	@ (8014390 <tcpip_init+0x7c>)
 8014344:	4813      	ldr	r0, [pc, #76]	@ (8014394 <tcpip_init+0x80>)
 8014346:	f00e fae7 	bl	8022918 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801434a:	4813      	ldr	r0, [pc, #76]	@ (8014398 <tcpip_init+0x84>)
 801434c:	f00e f92c 	bl	80225a8 <sys_mutex_new>
 8014350:	4603      	mov	r3, r0
 8014352:	2b00      	cmp	r3, #0
 8014354:	d006      	beq.n	8014364 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014356:	4b0d      	ldr	r3, [pc, #52]	@ (801438c <tcpip_init+0x78>)
 8014358:	f240 2265 	movw	r2, #613	@ 0x265
 801435c:	490f      	ldr	r1, [pc, #60]	@ (801439c <tcpip_init+0x88>)
 801435e:	480d      	ldr	r0, [pc, #52]	@ (8014394 <tcpip_init+0x80>)
 8014360:	f00e fada 	bl	8022918 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014364:	2328      	movs	r3, #40	@ 0x28
 8014366:	9300      	str	r3, [sp, #0]
 8014368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801436c:	2200      	movs	r2, #0
 801436e:	490c      	ldr	r1, [pc, #48]	@ (80143a0 <tcpip_init+0x8c>)
 8014370:	480c      	ldr	r0, [pc, #48]	@ (80143a4 <tcpip_init+0x90>)
 8014372:	f00e f94b 	bl	802260c <sys_thread_new>
}
 8014376:	bf00      	nop
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop
 8014380:	20008d6c 	.word	0x20008d6c
 8014384:	20008d70 	.word	0x20008d70
 8014388:	20008d74 	.word	0x20008d74
 801438c:	08024e88 	.word	0x08024e88
 8014390:	08024f54 	.word	0x08024f54
 8014394:	08024f1c 	.word	0x08024f1c
 8014398:	20008d78 	.word	0x20008d78
 801439c:	08024f78 	.word	0x08024f78
 80143a0:	08014075 	.word	0x08014075
 80143a4:	08024f9c 	.word	0x08024f9c

080143a8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80143ac:	4b20      	ldr	r3, [pc, #128]	@ (8014430 <dhcp_inc_pcb_refcount+0x88>)
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d133      	bne.n	801441c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80143b4:	4b1f      	ldr	r3, [pc, #124]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d005      	beq.n	80143c8 <dhcp_inc_pcb_refcount+0x20>
 80143bc:	4b1e      	ldr	r3, [pc, #120]	@ (8014438 <dhcp_inc_pcb_refcount+0x90>)
 80143be:	22e5      	movs	r2, #229	@ 0xe5
 80143c0:	491e      	ldr	r1, [pc, #120]	@ (801443c <dhcp_inc_pcb_refcount+0x94>)
 80143c2:	481f      	ldr	r0, [pc, #124]	@ (8014440 <dhcp_inc_pcb_refcount+0x98>)
 80143c4:	f00e faa8 	bl	8022918 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80143c8:	f00d fe7a 	bl	80220c0 <udp_new>
 80143cc:	4603      	mov	r3, r0
 80143ce:	4a19      	ldr	r2, [pc, #100]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143d0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80143d2:	4b18      	ldr	r3, [pc, #96]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d102      	bne.n	80143e0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80143da:	f04f 33ff 	mov.w	r3, #4294967295
 80143de:	e024      	b.n	801442a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80143e0:	4b14      	ldr	r3, [pc, #80]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	7a5a      	ldrb	r2, [r3, #9]
 80143e6:	4b13      	ldr	r3, [pc, #76]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	f042 0220 	orr.w	r2, r2, #32
 80143ee:	b2d2      	uxtb	r2, r2
 80143f0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80143f2:	4b10      	ldr	r3, [pc, #64]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2244      	movs	r2, #68	@ 0x44
 80143f8:	4912      	ldr	r1, [pc, #72]	@ (8014444 <dhcp_inc_pcb_refcount+0x9c>)
 80143fa:	4618      	mov	r0, r3
 80143fc:	f00d fce0 	bl	8021dc0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014400:	4b0c      	ldr	r3, [pc, #48]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2243      	movs	r2, #67	@ 0x43
 8014406:	490f      	ldr	r1, [pc, #60]	@ (8014444 <dhcp_inc_pcb_refcount+0x9c>)
 8014408:	4618      	mov	r0, r3
 801440a:	f00d fd61 	bl	8021ed0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801440e:	4b09      	ldr	r3, [pc, #36]	@ (8014434 <dhcp_inc_pcb_refcount+0x8c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2200      	movs	r2, #0
 8014414:	490c      	ldr	r1, [pc, #48]	@ (8014448 <dhcp_inc_pcb_refcount+0xa0>)
 8014416:	4618      	mov	r0, r3
 8014418:	f00d fdf0 	bl	8021ffc <udp_recv>
  }

  dhcp_pcb_refcount++;
 801441c:	4b04      	ldr	r3, [pc, #16]	@ (8014430 <dhcp_inc_pcb_refcount+0x88>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	3301      	adds	r3, #1
 8014422:	b2da      	uxtb	r2, r3
 8014424:	4b02      	ldr	r3, [pc, #8]	@ (8014430 <dhcp_inc_pcb_refcount+0x88>)
 8014426:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	20008da8 	.word	0x20008da8
 8014434:	20008da4 	.word	0x20008da4
 8014438:	08024fa4 	.word	0x08024fa4
 801443c:	0802501c 	.word	0x0802501c
 8014440:	08025044 	.word	0x08025044
 8014444:	08028bec 	.word	0x08028bec
 8014448:	08015cd5 	.word	0x08015cd5

0801444c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014450:	4b0e      	ldr	r3, [pc, #56]	@ (801448c <dhcp_dec_pcb_refcount+0x40>)
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d105      	bne.n	8014464 <dhcp_dec_pcb_refcount+0x18>
 8014458:	4b0d      	ldr	r3, [pc, #52]	@ (8014490 <dhcp_dec_pcb_refcount+0x44>)
 801445a:	22ff      	movs	r2, #255	@ 0xff
 801445c:	490d      	ldr	r1, [pc, #52]	@ (8014494 <dhcp_dec_pcb_refcount+0x48>)
 801445e:	480e      	ldr	r0, [pc, #56]	@ (8014498 <dhcp_dec_pcb_refcount+0x4c>)
 8014460:	f00e fa5a 	bl	8022918 <iprintf>
  dhcp_pcb_refcount--;
 8014464:	4b09      	ldr	r3, [pc, #36]	@ (801448c <dhcp_dec_pcb_refcount+0x40>)
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	3b01      	subs	r3, #1
 801446a:	b2da      	uxtb	r2, r3
 801446c:	4b07      	ldr	r3, [pc, #28]	@ (801448c <dhcp_dec_pcb_refcount+0x40>)
 801446e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014470:	4b06      	ldr	r3, [pc, #24]	@ (801448c <dhcp_dec_pcb_refcount+0x40>)
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d107      	bne.n	8014488 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014478:	4b08      	ldr	r3, [pc, #32]	@ (801449c <dhcp_dec_pcb_refcount+0x50>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4618      	mov	r0, r3
 801447e:	f00d fddd 	bl	802203c <udp_remove>
    dhcp_pcb = NULL;
 8014482:	4b06      	ldr	r3, [pc, #24]	@ (801449c <dhcp_dec_pcb_refcount+0x50>)
 8014484:	2200      	movs	r2, #0
 8014486:	601a      	str	r2, [r3, #0]
  }
}
 8014488:	bf00      	nop
 801448a:	bd80      	pop	{r7, pc}
 801448c:	20008da8 	.word	0x20008da8
 8014490:	08024fa4 	.word	0x08024fa4
 8014494:	0802506c 	.word	0x0802506c
 8014498:	08025044 	.word	0x08025044
 801449c:	20008da4 	.word	0x20008da4

080144a0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80144ae:	210c      	movs	r1, #12
 80144b0:	68f8      	ldr	r0, [r7, #12]
 80144b2:	f001 f851 	bl	8015558 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80144b6:	4b06      	ldr	r3, [pc, #24]	@ (80144d0 <dhcp_handle_nak+0x30>)
 80144b8:	4a05      	ldr	r2, [pc, #20]	@ (80144d0 <dhcp_handle_nak+0x30>)
 80144ba:	4905      	ldr	r1, [pc, #20]	@ (80144d0 <dhcp_handle_nak+0x30>)
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f005 fe07 	bl	801a0d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 fc4a 	bl	8014d5c <dhcp_discover>
}
 80144c8:	bf00      	nop
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	08028bec 	.word	0x08028bec

080144d4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144e0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80144e2:	2108      	movs	r1, #8
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f001 f837 	bl	8015558 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	331c      	adds	r3, #28
 80144ee:	2200      	movs	r2, #0
 80144f0:	4619      	mov	r1, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f002 fb38 	bl	8016b68 <etharp_query>
 80144f8:	4603      	mov	r3, r0
 80144fa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	799b      	ldrb	r3, [r3, #6]
 8014500:	2bff      	cmp	r3, #255	@ 0xff
 8014502:	d005      	beq.n	8014510 <dhcp_check+0x3c>
    dhcp->tries++;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	799b      	ldrb	r3, [r3, #6]
 8014508:	3301      	adds	r3, #1
 801450a:	b2da      	uxtb	r2, r3
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014510:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014514:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014516:	893b      	ldrh	r3, [r7, #8]
 8014518:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801451c:	4a06      	ldr	r2, [pc, #24]	@ (8014538 <dhcp_check+0x64>)
 801451e:	fb82 1203 	smull	r1, r2, r2, r3
 8014522:	1152      	asrs	r2, r2, #5
 8014524:	17db      	asrs	r3, r3, #31
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	b29a      	uxth	r2, r3
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801452e:	bf00      	nop
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	10624dd3 	.word	0x10624dd3

0801453c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801454a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801454c:	4b0c      	ldr	r3, [pc, #48]	@ (8014580 <dhcp_handle_offer+0x44>)
 801454e:	789b      	ldrb	r3, [r3, #2]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d011      	beq.n	8014578 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2200      	movs	r2, #0
 8014558:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801455a:	4b0a      	ldr	r3, [pc, #40]	@ (8014584 <dhcp_handle_offer+0x48>)
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	4618      	mov	r0, r3
 8014560:	f004 fe63 	bl	801922a <lwip_htonl>
 8014564:	4602      	mov	r2, r0
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	691a      	ldr	r2, [r3, #16]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 f808 	bl	8014588 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014578:	bf00      	nop
 801457a:	3710      	adds	r7, #16
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	20008d9c 	.word	0x20008d9c
 8014584:	20008d7c 	.word	0x20008d7c

08014588 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014588:	b5b0      	push	{r4, r5, r7, lr}
 801458a:	b08a      	sub	sp, #40	@ 0x28
 801458c:	af02      	add	r7, sp, #8
 801458e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d109      	bne.n	80145aa <dhcp_select+0x22>
 8014596:	4b71      	ldr	r3, [pc, #452]	@ (801475c <dhcp_select+0x1d4>)
 8014598:	f240 1277 	movw	r2, #375	@ 0x177
 801459c:	4970      	ldr	r1, [pc, #448]	@ (8014760 <dhcp_select+0x1d8>)
 801459e:	4871      	ldr	r0, [pc, #452]	@ (8014764 <dhcp_select+0x1dc>)
 80145a0:	f00e f9ba 	bl	8022918 <iprintf>
 80145a4:	f06f 030f 	mvn.w	r3, #15
 80145a8:	e0d3      	b.n	8014752 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145ae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d109      	bne.n	80145ca <dhcp_select+0x42>
 80145b6:	4b69      	ldr	r3, [pc, #420]	@ (801475c <dhcp_select+0x1d4>)
 80145b8:	f240 1279 	movw	r2, #377	@ 0x179
 80145bc:	496a      	ldr	r1, [pc, #424]	@ (8014768 <dhcp_select+0x1e0>)
 80145be:	4869      	ldr	r0, [pc, #420]	@ (8014764 <dhcp_select+0x1dc>)
 80145c0:	f00e f9aa 	bl	8022918 <iprintf>
 80145c4:	f06f 0305 	mvn.w	r3, #5
 80145c8:	e0c3      	b.n	8014752 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80145ca:	2101      	movs	r1, #1
 80145cc:	69b8      	ldr	r0, [r7, #24]
 80145ce:	f000 ffc3 	bl	8015558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80145d2:	f107 030c 	add.w	r3, r7, #12
 80145d6:	2203      	movs	r2, #3
 80145d8:	69b9      	ldr	r1, [r7, #24]
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f001 fc48 	bl	8015e70 <dhcp_create_msg>
 80145e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f000 8085 	beq.w	80146f4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80145f0:	89b8      	ldrh	r0, [r7, #12]
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80145f8:	2302      	movs	r3, #2
 80145fa:	2239      	movs	r2, #57	@ 0x39
 80145fc:	f000 ffc6 	bl	801558c <dhcp_option>
 8014600:	4603      	mov	r3, r0
 8014602:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014604:	89b8      	ldrh	r0, [r7, #12]
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014610:	461a      	mov	r2, r3
 8014612:	f001 f815 	bl	8015640 <dhcp_option_short>
 8014616:	4603      	mov	r3, r0
 8014618:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801461a:	89b8      	ldrh	r0, [r7, #12]
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014622:	2304      	movs	r3, #4
 8014624:	2232      	movs	r2, #50	@ 0x32
 8014626:	f000 ffb1 	bl	801558c <dhcp_option>
 801462a:	4603      	mov	r3, r0
 801462c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801462e:	89bc      	ldrh	r4, [r7, #12]
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	69db      	ldr	r3, [r3, #28]
 801463a:	4618      	mov	r0, r3
 801463c:	f004 fdf5 	bl	801922a <lwip_htonl>
 8014640:	4603      	mov	r3, r0
 8014642:	461a      	mov	r2, r3
 8014644:	4629      	mov	r1, r5
 8014646:	4620      	mov	r0, r4
 8014648:	f001 f82c 	bl	80156a4 <dhcp_option_long>
 801464c:	4603      	mov	r3, r0
 801464e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014650:	89b8      	ldrh	r0, [r7, #12]
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014658:	2304      	movs	r3, #4
 801465a:	2236      	movs	r2, #54	@ 0x36
 801465c:	f000 ff96 	bl	801558c <dhcp_option>
 8014660:	4603      	mov	r3, r0
 8014662:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014664:	89bc      	ldrh	r4, [r7, #12]
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	699b      	ldr	r3, [r3, #24]
 8014670:	4618      	mov	r0, r3
 8014672:	f004 fdda 	bl	801922a <lwip_htonl>
 8014676:	4603      	mov	r3, r0
 8014678:	461a      	mov	r2, r3
 801467a:	4629      	mov	r1, r5
 801467c:	4620      	mov	r0, r4
 801467e:	f001 f811 	bl	80156a4 <dhcp_option_long>
 8014682:	4603      	mov	r3, r0
 8014684:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014686:	89b8      	ldrh	r0, [r7, #12]
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801468e:	2303      	movs	r3, #3
 8014690:	2237      	movs	r2, #55	@ 0x37
 8014692:	f000 ff7b 	bl	801558c <dhcp_option>
 8014696:	4603      	mov	r3, r0
 8014698:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801469a:	2300      	movs	r3, #0
 801469c:	77bb      	strb	r3, [r7, #30]
 801469e:	e00e      	b.n	80146be <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146a0:	89b8      	ldrh	r0, [r7, #12]
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146a8:	7fbb      	ldrb	r3, [r7, #30]
 80146aa:	4a30      	ldr	r2, [pc, #192]	@ (801476c <dhcp_select+0x1e4>)
 80146ac:	5cd3      	ldrb	r3, [r2, r3]
 80146ae:	461a      	mov	r2, r3
 80146b0:	f000 ffa0 	bl	80155f4 <dhcp_option_byte>
 80146b4:	4603      	mov	r3, r0
 80146b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146b8:	7fbb      	ldrb	r3, [r7, #30]
 80146ba:	3301      	adds	r3, #1
 80146bc:	77bb      	strb	r3, [r7, #30]
 80146be:	7fbb      	ldrb	r3, [r7, #30]
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d9ed      	bls.n	80146a0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146c4:	89b8      	ldrh	r0, [r7, #12]
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	33f0      	adds	r3, #240	@ 0xf0
 80146ca:	697a      	ldr	r2, [r7, #20]
 80146cc:	4619      	mov	r1, r3
 80146ce:	f001 fca5 	bl	801601c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80146d2:	4b27      	ldr	r3, [pc, #156]	@ (8014770 <dhcp_select+0x1e8>)
 80146d4:	6818      	ldr	r0, [r3, #0]
 80146d6:	4b27      	ldr	r3, [pc, #156]	@ (8014774 <dhcp_select+0x1ec>)
 80146d8:	9301      	str	r3, [sp, #4]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	9300      	str	r3, [sp, #0]
 80146de:	2343      	movs	r3, #67	@ 0x43
 80146e0:	4a25      	ldr	r2, [pc, #148]	@ (8014778 <dhcp_select+0x1f0>)
 80146e2:	6979      	ldr	r1, [r7, #20]
 80146e4:	f00d fa6a 	bl	8021bbc <udp_sendto_if_src>
 80146e8:	4603      	mov	r3, r0
 80146ea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80146ec:	6978      	ldr	r0, [r7, #20]
 80146ee:	f006 fa39 	bl	801ab64 <pbuf_free>
 80146f2:	e001      	b.n	80146f8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80146f4:	23ff      	movs	r3, #255	@ 0xff
 80146f6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	799b      	ldrb	r3, [r3, #6]
 80146fc:	2bff      	cmp	r3, #255	@ 0xff
 80146fe:	d005      	beq.n	801470c <dhcp_select+0x184>
    dhcp->tries++;
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	799b      	ldrb	r3, [r3, #6]
 8014704:	3301      	adds	r3, #1
 8014706:	b2da      	uxtb	r2, r3
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	799b      	ldrb	r3, [r3, #6]
 8014710:	2b05      	cmp	r3, #5
 8014712:	d80d      	bhi.n	8014730 <dhcp_select+0x1a8>
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	799b      	ldrb	r3, [r3, #6]
 8014718:	461a      	mov	r2, r3
 801471a:	2301      	movs	r3, #1
 801471c:	4093      	lsls	r3, r2
 801471e:	b29b      	uxth	r3, r3
 8014720:	461a      	mov	r2, r3
 8014722:	0152      	lsls	r2, r2, #5
 8014724:	1ad2      	subs	r2, r2, r3
 8014726:	0092      	lsls	r2, r2, #2
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	b29b      	uxth	r3, r3
 801472e:	e001      	b.n	8014734 <dhcp_select+0x1ac>
 8014730:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014734:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014736:	89fb      	ldrh	r3, [r7, #14]
 8014738:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801473c:	4a0f      	ldr	r2, [pc, #60]	@ (801477c <dhcp_select+0x1f4>)
 801473e:	fb82 1203 	smull	r1, r2, r2, r3
 8014742:	1152      	asrs	r2, r2, #5
 8014744:	17db      	asrs	r3, r3, #31
 8014746:	1ad3      	subs	r3, r2, r3
 8014748:	b29a      	uxth	r2, r3
 801474a:	69bb      	ldr	r3, [r7, #24]
 801474c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801474e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3720      	adds	r7, #32
 8014756:	46bd      	mov	sp, r7
 8014758:	bdb0      	pop	{r4, r5, r7, pc}
 801475a:	bf00      	nop
 801475c:	08024fa4 	.word	0x08024fa4
 8014760:	08025090 	.word	0x08025090
 8014764:	08025044 	.word	0x08025044
 8014768:	080250ac 	.word	0x080250ac
 801476c:	20000034 	.word	0x20000034
 8014770:	20008da4 	.word	0x20008da4
 8014774:	08028bec 	.word	0x08028bec
 8014778:	08028bf0 	.word	0x08028bf0
 801477c:	10624dd3 	.word	0x10624dd3

08014780 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014786:	4b27      	ldr	r3, [pc, #156]	@ (8014824 <dhcp_coarse_tmr+0xa4>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	607b      	str	r3, [r7, #4]
 801478c:	e042      	b.n	8014814 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014792:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d039      	beq.n	801480e <dhcp_coarse_tmr+0x8e>
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	795b      	ldrb	r3, [r3, #5]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d035      	beq.n	801480e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	8a9b      	ldrh	r3, [r3, #20]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d012      	beq.n	80147d0 <dhcp_coarse_tmr+0x50>
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	8a5b      	ldrh	r3, [r3, #18]
 80147ae:	3301      	adds	r3, #1
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	825a      	strh	r2, [r3, #18]
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	8a5a      	ldrh	r2, [r3, #18]
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	8a9b      	ldrh	r3, [r3, #20]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d106      	bne.n	80147d0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 fe2e 	bl	8015424 <dhcp_release_and_stop>
        dhcp_start(netif);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 f96b 	bl	8014aa4 <dhcp_start>
 80147ce:	e01e      	b.n	801480e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	8a1b      	ldrh	r3, [r3, #16]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00b      	beq.n	80147f0 <dhcp_coarse_tmr+0x70>
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	8a1b      	ldrh	r3, [r3, #16]
 80147dc:	1e5a      	subs	r2, r3, #1
 80147de:	b291      	uxth	r1, r2
 80147e0:	683a      	ldr	r2, [r7, #0]
 80147e2:	8211      	strh	r1, [r2, #16]
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d103      	bne.n	80147f0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 f8c7 	bl	801497c <dhcp_t2_timeout>
 80147ee:	e00e      	b.n	801480e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	89db      	ldrh	r3, [r3, #14]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d00a      	beq.n	801480e <dhcp_coarse_tmr+0x8e>
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	89db      	ldrh	r3, [r3, #14]
 80147fc:	1e5a      	subs	r2, r3, #1
 80147fe:	b291      	uxth	r1, r2
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	81d1      	strh	r1, [r2, #14]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d102      	bne.n	801480e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f888 	bl	801491e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	607b      	str	r3, [r7, #4]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1b9      	bne.n	801478e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801481a:	bf00      	nop
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	2001000c 	.word	0x2001000c

08014828 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801482e:	4b16      	ldr	r3, [pc, #88]	@ (8014888 <dhcp_fine_tmr+0x60>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	607b      	str	r3, [r7, #4]
 8014834:	e020      	b.n	8014878 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801483a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d017      	beq.n	8014872 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	891b      	ldrh	r3, [r3, #8]
 8014846:	2b01      	cmp	r3, #1
 8014848:	d906      	bls.n	8014858 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	891b      	ldrh	r3, [r3, #8]
 801484e:	3b01      	subs	r3, #1
 8014850:	b29a      	uxth	r2, r3
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	811a      	strh	r2, [r3, #8]
 8014856:	e00c      	b.n	8014872 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	891b      	ldrh	r3, [r3, #8]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d108      	bne.n	8014872 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	891b      	ldrh	r3, [r3, #8]
 8014864:	3b01      	subs	r3, #1
 8014866:	b29a      	uxth	r2, r3
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 f80d 	bl	801488c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	607b      	str	r3, [r7, #4]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d1db      	bne.n	8014836 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801487e:	bf00      	nop
 8014880:	bf00      	nop
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	2001000c 	.word	0x2001000c

0801488c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014898:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	795b      	ldrb	r3, [r3, #5]
 801489e:	2b0c      	cmp	r3, #12
 80148a0:	d003      	beq.n	80148aa <dhcp_timeout+0x1e>
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	795b      	ldrb	r3, [r3, #5]
 80148a6:	2b06      	cmp	r3, #6
 80148a8:	d103      	bne.n	80148b2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f000 fa56 	bl	8014d5c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80148b0:	e031      	b.n	8014916 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	795b      	ldrb	r3, [r3, #5]
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d10e      	bne.n	80148d8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	799b      	ldrb	r3, [r3, #6]
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d803      	bhi.n	80148ca <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f7ff fe60 	bl	8014588 <dhcp_select>
}
 80148c8:	e025      	b.n	8014916 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fdaa 	bl	8015424 <dhcp_release_and_stop>
      dhcp_start(netif);
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 f8e7 	bl	8014aa4 <dhcp_start>
}
 80148d6:	e01e      	b.n	8014916 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	795b      	ldrb	r3, [r3, #5]
 80148dc:	2b08      	cmp	r3, #8
 80148de:	d10b      	bne.n	80148f8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	799b      	ldrb	r3, [r3, #6]
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d803      	bhi.n	80148f0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7ff fdf3 	bl	80144d4 <dhcp_check>
}
 80148ee:	e012      	b.n	8014916 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 fad5 	bl	8014ea0 <dhcp_bind>
}
 80148f6:	e00e      	b.n	8014916 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	795b      	ldrb	r3, [r3, #5]
 80148fc:	2b03      	cmp	r3, #3
 80148fe:	d10a      	bne.n	8014916 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	799b      	ldrb	r3, [r3, #6]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d803      	bhi.n	8014910 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fcd7 	bl	80152bc <dhcp_reboot>
}
 801490e:	e002      	b.n	8014916 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f000 fa23 	bl	8014d5c <dhcp_discover>
}
 8014916:	bf00      	nop
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}

0801491e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801491e:	b580      	push	{r7, lr}
 8014920:	b084      	sub	sp, #16
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801492a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	795b      	ldrb	r3, [r3, #5]
 8014930:	2b01      	cmp	r3, #1
 8014932:	d007      	beq.n	8014944 <dhcp_t1_timeout+0x26>
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	795b      	ldrb	r3, [r3, #5]
 8014938:	2b0a      	cmp	r3, #10
 801493a:	d003      	beq.n	8014944 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014940:	2b05      	cmp	r3, #5
 8014942:	d117      	bne.n	8014974 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fb85 	bl	8015054 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	899b      	ldrh	r3, [r3, #12]
 801494e:	461a      	mov	r2, r3
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	8a5b      	ldrh	r3, [r3, #18]
 8014954:	1ad3      	subs	r3, r2, r3
 8014956:	2b01      	cmp	r3, #1
 8014958:	dd0c      	ble.n	8014974 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	899b      	ldrh	r3, [r3, #12]
 801495e:	461a      	mov	r2, r3
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	8a5b      	ldrh	r3, [r3, #18]
 8014964:	1ad3      	subs	r3, r2, r3
 8014966:	2b00      	cmp	r3, #0
 8014968:	da00      	bge.n	801496c <dhcp_t1_timeout+0x4e>
 801496a:	3301      	adds	r3, #1
 801496c:	105b      	asrs	r3, r3, #1
 801496e:	b29a      	uxth	r2, r3
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014974:	bf00      	nop
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014988:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	795b      	ldrb	r3, [r3, #5]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d00b      	beq.n	80149aa <dhcp_t2_timeout+0x2e>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	795b      	ldrb	r3, [r3, #5]
 8014996:	2b0a      	cmp	r3, #10
 8014998:	d007      	beq.n	80149aa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801499e:	2b05      	cmp	r3, #5
 80149a0:	d003      	beq.n	80149aa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	795b      	ldrb	r3, [r3, #5]
 80149a6:	2b04      	cmp	r3, #4
 80149a8:	d117      	bne.n	80149da <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fbec 	bl	8015188 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	8a9b      	ldrh	r3, [r3, #20]
 80149b4:	461a      	mov	r2, r3
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	8a5b      	ldrh	r3, [r3, #18]
 80149ba:	1ad3      	subs	r3, r2, r3
 80149bc:	2b01      	cmp	r3, #1
 80149be:	dd0c      	ble.n	80149da <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	8a9b      	ldrh	r3, [r3, #20]
 80149c4:	461a      	mov	r2, r3
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	8a5b      	ldrh	r3, [r3, #18]
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	da00      	bge.n	80149d2 <dhcp_t2_timeout+0x56>
 80149d0:	3301      	adds	r3, #1
 80149d2:	105b      	asrs	r3, r3, #1
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80149da:	bf00      	nop
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2200      	movs	r2, #0
 80149f8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2200      	movs	r2, #0
 80149fe:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014a00:	4b26      	ldr	r3, [pc, #152]	@ (8014a9c <dhcp_handle_ack+0xb8>)
 8014a02:	78db      	ldrb	r3, [r3, #3]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d003      	beq.n	8014a10 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014a08:	4b25      	ldr	r3, [pc, #148]	@ (8014aa0 <dhcp_handle_ack+0xbc>)
 8014a0a:	68da      	ldr	r2, [r3, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014a10:	4b22      	ldr	r3, [pc, #136]	@ (8014a9c <dhcp_handle_ack+0xb8>)
 8014a12:	791b      	ldrb	r3, [r3, #4]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d004      	beq.n	8014a22 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014a18:	4b21      	ldr	r3, [pc, #132]	@ (8014aa0 <dhcp_handle_ack+0xbc>)
 8014a1a:	691a      	ldr	r2, [r3, #16]
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014a20:	e004      	b.n	8014a2c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a26:	085a      	lsrs	r2, r3, #1
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8014a9c <dhcp_handle_ack+0xb8>)
 8014a2e:	795b      	ldrb	r3, [r3, #5]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d004      	beq.n	8014a3e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014a34:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa0 <dhcp_handle_ack+0xbc>)
 8014a36:	695a      	ldr	r2, [r3, #20]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014a3c:	e007      	b.n	8014a4e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014a42:	4613      	mov	r3, r2
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	1a9b      	subs	r3, r3, r2
 8014a48:	08da      	lsrs	r2, r3, #3
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	691a      	ldr	r2, [r3, #16]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014a56:	4b11      	ldr	r3, [pc, #68]	@ (8014a9c <dhcp_handle_ack+0xb8>)
 8014a58:	799b      	ldrb	r3, [r3, #6]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d00b      	beq.n	8014a76 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014a5e:	4b10      	ldr	r3, [pc, #64]	@ (8014aa0 <dhcp_handle_ack+0xbc>)
 8014a60:	699b      	ldr	r3, [r3, #24]
 8014a62:	4618      	mov	r0, r3
 8014a64:	f004 fbe1 	bl	801922a <lwip_htonl>
 8014a68:	4602      	mov	r2, r0
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2201      	movs	r2, #1
 8014a72:	71da      	strb	r2, [r3, #7]
 8014a74:	e002      	b.n	8014a7c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014a7c:	4b07      	ldr	r3, [pc, #28]	@ (8014a9c <dhcp_handle_ack+0xb8>)
 8014a7e:	79db      	ldrb	r3, [r3, #7]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d007      	beq.n	8014a94 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014a84:	4b06      	ldr	r3, [pc, #24]	@ (8014aa0 <dhcp_handle_ack+0xbc>)
 8014a86:	69db      	ldr	r3, [r3, #28]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f004 fbce 	bl	801922a <lwip_htonl>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014a94:	bf00      	nop
 8014a96:	3710      	adds	r7, #16
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	20008d9c 	.word	0x20008d9c
 8014aa0:	20008d7c 	.word	0x20008d7c

08014aa4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d109      	bne.n	8014ac6 <dhcp_start+0x22>
 8014ab2:	4b37      	ldr	r3, [pc, #220]	@ (8014b90 <dhcp_start+0xec>)
 8014ab4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8014ab8:	4936      	ldr	r1, [pc, #216]	@ (8014b94 <dhcp_start+0xf0>)
 8014aba:	4837      	ldr	r0, [pc, #220]	@ (8014b98 <dhcp_start+0xf4>)
 8014abc:	f00d ff2c 	bl	8022918 <iprintf>
 8014ac0:	f06f 030f 	mvn.w	r3, #15
 8014ac4:	e060      	b.n	8014b88 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014acc:	f003 0301 	and.w	r3, r3, #1
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d109      	bne.n	8014ae8 <dhcp_start+0x44>
 8014ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8014b90 <dhcp_start+0xec>)
 8014ad6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8014ada:	4930      	ldr	r1, [pc, #192]	@ (8014b9c <dhcp_start+0xf8>)
 8014adc:	482e      	ldr	r0, [pc, #184]	@ (8014b98 <dhcp_start+0xf4>)
 8014ade:	f00d ff1b 	bl	8022918 <iprintf>
 8014ae2:	f06f 030f 	mvn.w	r3, #15
 8014ae6:	e04f      	b.n	8014b88 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014af2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014af6:	d202      	bcs.n	8014afe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
 8014afc:	e044      	b.n	8014b88 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d10d      	bne.n	8014b20 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014b04:	2034      	movs	r0, #52	@ 0x34
 8014b06:	f004 ff1b 	bl	8019940 <mem_malloc>
 8014b0a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d102      	bne.n	8014b18 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014b12:	f04f 33ff 	mov.w	r3, #4294967295
 8014b16:	e037      	b.n	8014b88 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	68fa      	ldr	r2, [r7, #12]
 8014b1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014b1e:	e005      	b.n	8014b2c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	791b      	ldrb	r3, [r3, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014b28:	f7ff fc90 	bl	801444c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014b2c:	2234      	movs	r2, #52	@ 0x34
 8014b2e:	2100      	movs	r1, #0
 8014b30:	68f8      	ldr	r0, [r7, #12]
 8014b32:	f00e f883 	bl	8022c3c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014b36:	f7ff fc37 	bl	80143a8 <dhcp_inc_pcb_refcount>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d002      	beq.n	8014b46 <dhcp_start+0xa2>
    return ERR_MEM;
 8014b40:	f04f 33ff 	mov.w	r3, #4294967295
 8014b44:	e020      	b.n	8014b88 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	2201      	movs	r2, #1
 8014b4a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014b52:	f003 0304 	and.w	r3, r3, #4
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d105      	bne.n	8014b66 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014b5a:	2102      	movs	r1, #2
 8014b5c:	68f8      	ldr	r0, [r7, #12]
 8014b5e:	f000 fcfb 	bl	8015558 <dhcp_set_state>
    return ERR_OK;
 8014b62:	2300      	movs	r3, #0
 8014b64:	e010      	b.n	8014b88 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 f8f8 	bl	8014d5c <dhcp_discover>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014b70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d005      	beq.n	8014b84 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f000 fc53 	bl	8015424 <dhcp_release_and_stop>
    return ERR_MEM;
 8014b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b82:	e001      	b.n	8014b88 <dhcp_start+0xe4>
  }
  return result;
 8014b84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	08024fa4 	.word	0x08024fa4
 8014b94:	080250c8 	.word	0x080250c8
 8014b98:	08025044 	.word	0x08025044
 8014b9c:	0802510c 	.word	0x0802510c

08014ba0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bac:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d025      	beq.n	8014c00 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	795b      	ldrb	r3, [r3, #5]
 8014bb8:	2b0a      	cmp	r3, #10
 8014bba:	d008      	beq.n	8014bce <dhcp_network_changed+0x2e>
 8014bbc:	2b0a      	cmp	r3, #10
 8014bbe:	dc0d      	bgt.n	8014bdc <dhcp_network_changed+0x3c>
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d01f      	beq.n	8014c04 <dhcp_network_changed+0x64>
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	db09      	blt.n	8014bdc <dhcp_network_changed+0x3c>
 8014bc8:	3b03      	subs	r3, #3
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	d806      	bhi.n	8014bdc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fb71 	bl	80152bc <dhcp_reboot>
      break;
 8014bda:	e014      	b.n	8014c06 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	795b      	ldrb	r3, [r3, #5]
 8014be0:	2b0c      	cmp	r3, #12
 8014be2:	d906      	bls.n	8014bf2 <dhcp_network_changed+0x52>
 8014be4:	4b09      	ldr	r3, [pc, #36]	@ (8014c0c <dhcp_network_changed+0x6c>)
 8014be6:	f240 326d 	movw	r2, #877	@ 0x36d
 8014bea:	4909      	ldr	r1, [pc, #36]	@ (8014c10 <dhcp_network_changed+0x70>)
 8014bec:	4809      	ldr	r0, [pc, #36]	@ (8014c14 <dhcp_network_changed+0x74>)
 8014bee:	f00d fe93 	bl	8022918 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 f8af 	bl	8014d5c <dhcp_discover>
      break;
 8014bfe:	e002      	b.n	8014c06 <dhcp_network_changed+0x66>
    return;
 8014c00:	bf00      	nop
 8014c02:	e000      	b.n	8014c06 <dhcp_network_changed+0x66>
      break;
 8014c04:	bf00      	nop
  }
}
 8014c06:	3710      	adds	r7, #16
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	08024fa4 	.word	0x08024fa4
 8014c10:	08025130 	.word	0x08025130
 8014c14:	08025044 	.word	0x08025044

08014c18 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d107      	bne.n	8014c38 <dhcp_arp_reply+0x20>
 8014c28:	4b0e      	ldr	r3, [pc, #56]	@ (8014c64 <dhcp_arp_reply+0x4c>)
 8014c2a:	f240 328b 	movw	r2, #907	@ 0x38b
 8014c2e:	490e      	ldr	r1, [pc, #56]	@ (8014c68 <dhcp_arp_reply+0x50>)
 8014c30:	480e      	ldr	r0, [pc, #56]	@ (8014c6c <dhcp_arp_reply+0x54>)
 8014c32:	f00d fe71 	bl	8022918 <iprintf>
 8014c36:	e012      	b.n	8014c5e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c3c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00c      	beq.n	8014c5e <dhcp_arp_reply+0x46>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	795b      	ldrb	r3, [r3, #5]
 8014c48:	2b08      	cmp	r3, #8
 8014c4a:	d108      	bne.n	8014c5e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	69db      	ldr	r3, [r3, #28]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d102      	bne.n	8014c5e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 f809 	bl	8014c70 <dhcp_decline>
    }
  }
}
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	08024fa4 	.word	0x08024fa4
 8014c68:	080250c8 	.word	0x080250c8
 8014c6c:	08025044 	.word	0x08025044

08014c70 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014c70:	b5b0      	push	{r4, r5, r7, lr}
 8014c72:	b08a      	sub	sp, #40	@ 0x28
 8014c74:	af02      	add	r7, sp, #8
 8014c76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c7c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014c7e:	210c      	movs	r1, #12
 8014c80:	69b8      	ldr	r0, [r7, #24]
 8014c82:	f000 fc69 	bl	8015558 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014c86:	f107 030c 	add.w	r3, r7, #12
 8014c8a:	2204      	movs	r2, #4
 8014c8c:	69b9      	ldr	r1, [r7, #24]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f001 f8ee 	bl	8015e70 <dhcp_create_msg>
 8014c94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d035      	beq.n	8014d08 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ca2:	89b8      	ldrh	r0, [r7, #12]
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014caa:	2304      	movs	r3, #4
 8014cac:	2232      	movs	r2, #50	@ 0x32
 8014cae:	f000 fc6d 	bl	801558c <dhcp_option>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cb6:	89bc      	ldrh	r4, [r7, #12]
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	69db      	ldr	r3, [r3, #28]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f004 fab1 	bl	801922a <lwip_htonl>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	4629      	mov	r1, r5
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f000 fce8 	bl	80156a4 <dhcp_option_long>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014cd8:	89b8      	ldrh	r0, [r7, #12]
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	33f0      	adds	r3, #240	@ 0xf0
 8014cde:	697a      	ldr	r2, [r7, #20]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	f001 f99b 	bl	801601c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014ce6:	4b19      	ldr	r3, [pc, #100]	@ (8014d4c <dhcp_decline+0xdc>)
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	4b19      	ldr	r3, [pc, #100]	@ (8014d50 <dhcp_decline+0xe0>)
 8014cec:	9301      	str	r3, [sp, #4]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	2343      	movs	r3, #67	@ 0x43
 8014cf4:	4a17      	ldr	r2, [pc, #92]	@ (8014d54 <dhcp_decline+0xe4>)
 8014cf6:	6979      	ldr	r1, [r7, #20]
 8014cf8:	f00c ff60 	bl	8021bbc <udp_sendto_if_src>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d00:	6978      	ldr	r0, [r7, #20]
 8014d02:	f005 ff2f 	bl	801ab64 <pbuf_free>
 8014d06:	e001      	b.n	8014d0c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d08:	23ff      	movs	r3, #255	@ 0xff
 8014d0a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d0c:	69bb      	ldr	r3, [r7, #24]
 8014d0e:	799b      	ldrb	r3, [r3, #6]
 8014d10:	2bff      	cmp	r3, #255	@ 0xff
 8014d12:	d005      	beq.n	8014d20 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	799b      	ldrb	r3, [r3, #6]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	b2da      	uxtb	r2, r3
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014d20:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014d24:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d26:	89fb      	ldrh	r3, [r7, #14]
 8014d28:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8014d58 <dhcp_decline+0xe8>)
 8014d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8014d32:	1152      	asrs	r2, r2, #5
 8014d34:	17db      	asrs	r3, r3, #31
 8014d36:	1ad3      	subs	r3, r2, r3
 8014d38:	b29a      	uxth	r2, r3
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3720      	adds	r7, #32
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bdb0      	pop	{r4, r5, r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	20008da4 	.word	0x20008da4
 8014d50:	08028bec 	.word	0x08028bec
 8014d54:	08028bf0 	.word	0x08028bf0
 8014d58:	10624dd3 	.word	0x10624dd3

08014d5c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b08a      	sub	sp, #40	@ 0x28
 8014d60:	af02      	add	r7, sp, #8
 8014d62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d68:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	2200      	movs	r2, #0
 8014d72:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014d74:	2106      	movs	r1, #6
 8014d76:	69b8      	ldr	r0, [r7, #24]
 8014d78:	f000 fbee 	bl	8015558 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014d7c:	f107 0308 	add.w	r3, r7, #8
 8014d80:	2201      	movs	r2, #1
 8014d82:	69b9      	ldr	r1, [r7, #24]
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f001 f873 	bl	8015e70 <dhcp_create_msg>
 8014d8a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d04b      	beq.n	8014e2a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014d98:	8938      	ldrh	r0, [r7, #8]
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014da0:	2302      	movs	r3, #2
 8014da2:	2239      	movs	r2, #57	@ 0x39
 8014da4:	f000 fbf2 	bl	801558c <dhcp_option>
 8014da8:	4603      	mov	r3, r0
 8014daa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014dac:	8938      	ldrh	r0, [r7, #8]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014db8:	461a      	mov	r2, r3
 8014dba:	f000 fc41 	bl	8015640 <dhcp_option_short>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014dc2:	8938      	ldrh	r0, [r7, #8]
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014dca:	2303      	movs	r3, #3
 8014dcc:	2237      	movs	r2, #55	@ 0x37
 8014dce:	f000 fbdd 	bl	801558c <dhcp_option>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	77fb      	strb	r3, [r7, #31]
 8014dda:	e00e      	b.n	8014dfa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ddc:	8938      	ldrh	r0, [r7, #8]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014de4:	7ffb      	ldrb	r3, [r7, #31]
 8014de6:	4a29      	ldr	r2, [pc, #164]	@ (8014e8c <dhcp_discover+0x130>)
 8014de8:	5cd3      	ldrb	r3, [r2, r3]
 8014dea:	461a      	mov	r2, r3
 8014dec:	f000 fc02 	bl	80155f4 <dhcp_option_byte>
 8014df0:	4603      	mov	r3, r0
 8014df2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014df4:	7ffb      	ldrb	r3, [r7, #31]
 8014df6:	3301      	adds	r3, #1
 8014df8:	77fb      	strb	r3, [r7, #31]
 8014dfa:	7ffb      	ldrb	r3, [r7, #31]
 8014dfc:	2b02      	cmp	r3, #2
 8014dfe:	d9ed      	bls.n	8014ddc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e00:	8938      	ldrh	r0, [r7, #8]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	33f0      	adds	r3, #240	@ 0xf0
 8014e06:	693a      	ldr	r2, [r7, #16]
 8014e08:	4619      	mov	r1, r3
 8014e0a:	f001 f907 	bl	801601c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014e0e:	4b20      	ldr	r3, [pc, #128]	@ (8014e90 <dhcp_discover+0x134>)
 8014e10:	6818      	ldr	r0, [r3, #0]
 8014e12:	4b20      	ldr	r3, [pc, #128]	@ (8014e94 <dhcp_discover+0x138>)
 8014e14:	9301      	str	r3, [sp, #4]
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	9300      	str	r3, [sp, #0]
 8014e1a:	2343      	movs	r3, #67	@ 0x43
 8014e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8014e98 <dhcp_discover+0x13c>)
 8014e1e:	6939      	ldr	r1, [r7, #16]
 8014e20:	f00c fecc 	bl	8021bbc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014e24:	6938      	ldr	r0, [r7, #16]
 8014e26:	f005 fe9d 	bl	801ab64 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014e2a:	69bb      	ldr	r3, [r7, #24]
 8014e2c:	799b      	ldrb	r3, [r3, #6]
 8014e2e:	2bff      	cmp	r3, #255	@ 0xff
 8014e30:	d005      	beq.n	8014e3e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014e32:	69bb      	ldr	r3, [r7, #24]
 8014e34:	799b      	ldrb	r3, [r3, #6]
 8014e36:	3301      	adds	r3, #1
 8014e38:	b2da      	uxtb	r2, r3
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	799b      	ldrb	r3, [r3, #6]
 8014e42:	2b05      	cmp	r3, #5
 8014e44:	d80d      	bhi.n	8014e62 <dhcp_discover+0x106>
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	799b      	ldrb	r3, [r3, #6]
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	4093      	lsls	r3, r2
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	461a      	mov	r2, r3
 8014e54:	0152      	lsls	r2, r2, #5
 8014e56:	1ad2      	subs	r2, r2, r3
 8014e58:	0092      	lsls	r2, r2, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	e001      	b.n	8014e66 <dhcp_discover+0x10a>
 8014e62:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014e66:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e68:	897b      	ldrh	r3, [r7, #10]
 8014e6a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8014e9c <dhcp_discover+0x140>)
 8014e70:	fb82 1203 	smull	r1, r2, r2, r3
 8014e74:	1152      	asrs	r2, r2, #5
 8014e76:	17db      	asrs	r3, r3, #31
 8014e78:	1ad3      	subs	r3, r2, r3
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	3720      	adds	r7, #32
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	20000034 	.word	0x20000034
 8014e90:	20008da4 	.word	0x20008da4
 8014e94:	08028bec 	.word	0x08028bec
 8014e98:	08028bf0 	.word	0x08028bf0
 8014e9c:	10624dd3 	.word	0x10624dd3

08014ea0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b088      	sub	sp, #32
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d107      	bne.n	8014ebe <dhcp_bind+0x1e>
 8014eae:	4b64      	ldr	r3, [pc, #400]	@ (8015040 <dhcp_bind+0x1a0>)
 8014eb0:	f240 4215 	movw	r2, #1045	@ 0x415
 8014eb4:	4963      	ldr	r1, [pc, #396]	@ (8015044 <dhcp_bind+0x1a4>)
 8014eb6:	4864      	ldr	r0, [pc, #400]	@ (8015048 <dhcp_bind+0x1a8>)
 8014eb8:	f00d fd2e 	bl	8022918 <iprintf>
 8014ebc:	e0bc      	b.n	8015038 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ec2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014ec4:	69bb      	ldr	r3, [r7, #24]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d107      	bne.n	8014eda <dhcp_bind+0x3a>
 8014eca:	4b5d      	ldr	r3, [pc, #372]	@ (8015040 <dhcp_bind+0x1a0>)
 8014ecc:	f240 4217 	movw	r2, #1047	@ 0x417
 8014ed0:	495e      	ldr	r1, [pc, #376]	@ (801504c <dhcp_bind+0x1ac>)
 8014ed2:	485d      	ldr	r0, [pc, #372]	@ (8015048 <dhcp_bind+0x1a8>)
 8014ed4:	f00d fd20 	bl	8022918 <iprintf>
 8014ed8:	e0ae      	b.n	8015038 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014eda:	69bb      	ldr	r3, [r7, #24]
 8014edc:	2200      	movs	r2, #0
 8014ede:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014ee0:	69bb      	ldr	r3, [r7, #24]
 8014ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee8:	d019      	beq.n	8014f1e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014eee:	331e      	adds	r3, #30
 8014ef0:	4a57      	ldr	r2, [pc, #348]	@ (8015050 <dhcp_bind+0x1b0>)
 8014ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ef6:	095b      	lsrs	r3, r3, #5
 8014ef8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014efa:	69fb      	ldr	r3, [r7, #28]
 8014efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f00:	d302      	bcc.n	8014f08 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f06:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	8a9b      	ldrh	r3, [r3, #20]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d102      	bne.n	8014f1e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f26:	d01d      	beq.n	8014f64 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f2c:	331e      	adds	r3, #30
 8014f2e:	4a48      	ldr	r2, [pc, #288]	@ (8015050 <dhcp_bind+0x1b0>)
 8014f30:	fba2 2303 	umull	r2, r3, r2, r3
 8014f34:	095b      	lsrs	r3, r3, #5
 8014f36:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f3e:	d302      	bcc.n	8014f46 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f44:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	895b      	ldrh	r3, [r3, #10]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d102      	bne.n	8014f5c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	2201      	movs	r2, #1
 8014f5a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	895a      	ldrh	r2, [r3, #10]
 8014f60:	69bb      	ldr	r3, [r7, #24]
 8014f62:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f6c:	d01d      	beq.n	8014faa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f6e:	69bb      	ldr	r3, [r7, #24]
 8014f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f72:	331e      	adds	r3, #30
 8014f74:	4a36      	ldr	r2, [pc, #216]	@ (8015050 <dhcp_bind+0x1b0>)
 8014f76:	fba2 2303 	umull	r2, r3, r2, r3
 8014f7a:	095b      	lsrs	r3, r3, #5
 8014f7c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f84:	d302      	bcc.n	8014f8c <dhcp_bind+0xec>
      timeout = 0xffff;
 8014f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f8a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	899b      	ldrh	r3, [r3, #12]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d102      	bne.n	8014fa2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	899a      	ldrh	r2, [r3, #12]
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	895a      	ldrh	r2, [r3, #10]
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	899b      	ldrh	r3, [r3, #12]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d306      	bcc.n	8014fc4 <dhcp_bind+0x124>
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	899b      	ldrh	r3, [r3, #12]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d002      	beq.n	8014fc4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	79db      	ldrb	r3, [r3, #7]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d003      	beq.n	8014fd4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	6a1b      	ldr	r3, [r3, #32]
 8014fd0:	613b      	str	r3, [r7, #16]
 8014fd2:	e014      	b.n	8014ffe <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	331c      	adds	r3, #28
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	db02      	blt.n	8014fea <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014fe4:	23ff      	movs	r3, #255	@ 0xff
 8014fe6:	613b      	str	r3, [r7, #16]
 8014fe8:	e009      	b.n	8014ffe <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014fea:	7dfb      	ldrb	r3, [r7, #23]
 8014fec:	2bbf      	cmp	r3, #191	@ 0xbf
 8014fee:	d903      	bls.n	8014ff8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014ff0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8014ff4:	613b      	str	r3, [r7, #16]
 8014ff6:	e002      	b.n	8014ffe <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ffc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015002:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d108      	bne.n	801501c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	69da      	ldr	r2, [r3, #28]
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	4013      	ands	r3, r2
 8015012:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801501a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801501c:	210a      	movs	r1, #10
 801501e:	69b8      	ldr	r0, [r7, #24]
 8015020:	f000 fa9a 	bl	8015558 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f103 011c 	add.w	r1, r3, #28
 801502a:	f107 030c 	add.w	r3, r7, #12
 801502e:	f107 0210 	add.w	r2, r7, #16
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f005 f84c 	bl	801a0d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015038:	3720      	adds	r7, #32
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	08024fa4 	.word	0x08024fa4
 8015044:	08025144 	.word	0x08025144
 8015048:	08025044 	.word	0x08025044
 801504c:	08025160 	.word	0x08025160
 8015050:	88888889 	.word	0x88888889

08015054 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b08a      	sub	sp, #40	@ 0x28
 8015058:	af02      	add	r7, sp, #8
 801505a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015060:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015062:	2105      	movs	r1, #5
 8015064:	69b8      	ldr	r0, [r7, #24]
 8015066:	f000 fa77 	bl	8015558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801506a:	f107 030c 	add.w	r3, r7, #12
 801506e:	2203      	movs	r2, #3
 8015070:	69b9      	ldr	r1, [r7, #24]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 fefc 	bl	8015e70 <dhcp_create_msg>
 8015078:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d04e      	beq.n	801511e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015086:	89b8      	ldrh	r0, [r7, #12]
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801508e:	2302      	movs	r3, #2
 8015090:	2239      	movs	r2, #57	@ 0x39
 8015092:	f000 fa7b 	bl	801558c <dhcp_option>
 8015096:	4603      	mov	r3, r0
 8015098:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801509a:	89b8      	ldrh	r0, [r7, #12]
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80150a6:	461a      	mov	r2, r3
 80150a8:	f000 faca 	bl	8015640 <dhcp_option_short>
 80150ac:	4603      	mov	r3, r0
 80150ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150b0:	89b8      	ldrh	r0, [r7, #12]
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150b8:	2303      	movs	r3, #3
 80150ba:	2237      	movs	r2, #55	@ 0x37
 80150bc:	f000 fa66 	bl	801558c <dhcp_option>
 80150c0:	4603      	mov	r3, r0
 80150c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150c4:	2300      	movs	r3, #0
 80150c6:	77bb      	strb	r3, [r7, #30]
 80150c8:	e00e      	b.n	80150e8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150ca:	89b8      	ldrh	r0, [r7, #12]
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150d2:	7fbb      	ldrb	r3, [r7, #30]
 80150d4:	4a29      	ldr	r2, [pc, #164]	@ (801517c <dhcp_renew+0x128>)
 80150d6:	5cd3      	ldrb	r3, [r2, r3]
 80150d8:	461a      	mov	r2, r3
 80150da:	f000 fa8b 	bl	80155f4 <dhcp_option_byte>
 80150de:	4603      	mov	r3, r0
 80150e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150e2:	7fbb      	ldrb	r3, [r7, #30]
 80150e4:	3301      	adds	r3, #1
 80150e6:	77bb      	strb	r3, [r7, #30]
 80150e8:	7fbb      	ldrb	r3, [r7, #30]
 80150ea:	2b02      	cmp	r3, #2
 80150ec:	d9ed      	bls.n	80150ca <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80150ee:	89b8      	ldrh	r0, [r7, #12]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	33f0      	adds	r3, #240	@ 0xf0
 80150f4:	697a      	ldr	r2, [r7, #20]
 80150f6:	4619      	mov	r1, r3
 80150f8:	f000 ff90 	bl	801601c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80150fc:	4b20      	ldr	r3, [pc, #128]	@ (8015180 <dhcp_renew+0x12c>)
 80150fe:	6818      	ldr	r0, [r3, #0]
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	f103 0218 	add.w	r2, r3, #24
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	2343      	movs	r3, #67	@ 0x43
 801510c:	6979      	ldr	r1, [r7, #20]
 801510e:	f00c fce1 	bl	8021ad4 <udp_sendto_if>
 8015112:	4603      	mov	r3, r0
 8015114:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015116:	6978      	ldr	r0, [r7, #20]
 8015118:	f005 fd24 	bl	801ab64 <pbuf_free>
 801511c:	e001      	b.n	8015122 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801511e:	23ff      	movs	r3, #255	@ 0xff
 8015120:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	799b      	ldrb	r3, [r3, #6]
 8015126:	2bff      	cmp	r3, #255	@ 0xff
 8015128:	d005      	beq.n	8015136 <dhcp_renew+0xe2>
    dhcp->tries++;
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	799b      	ldrb	r3, [r3, #6]
 801512e:	3301      	adds	r3, #1
 8015130:	b2da      	uxtb	r2, r3
 8015132:	69bb      	ldr	r3, [r7, #24]
 8015134:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	799b      	ldrb	r3, [r3, #6]
 801513a:	2b09      	cmp	r3, #9
 801513c:	d809      	bhi.n	8015152 <dhcp_renew+0xfe>
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	799b      	ldrb	r3, [r3, #6]
 8015142:	461a      	mov	r2, r3
 8015144:	0152      	lsls	r2, r2, #5
 8015146:	1ad2      	subs	r2, r2, r3
 8015148:	0092      	lsls	r2, r2, #2
 801514a:	4413      	add	r3, r2
 801514c:	011b      	lsls	r3, r3, #4
 801514e:	b29b      	uxth	r3, r3
 8015150:	e001      	b.n	8015156 <dhcp_renew+0x102>
 8015152:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8015156:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015158:	89fb      	ldrh	r3, [r7, #14]
 801515a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801515e:	4a09      	ldr	r2, [pc, #36]	@ (8015184 <dhcp_renew+0x130>)
 8015160:	fb82 1203 	smull	r1, r2, r2, r3
 8015164:	1152      	asrs	r2, r2, #5
 8015166:	17db      	asrs	r3, r3, #31
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	b29a      	uxth	r2, r3
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015170:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015174:	4618      	mov	r0, r3
 8015176:	3720      	adds	r7, #32
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20000034 	.word	0x20000034
 8015180:	20008da4 	.word	0x20008da4
 8015184:	10624dd3 	.word	0x10624dd3

08015188 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b08a      	sub	sp, #40	@ 0x28
 801518c:	af02      	add	r7, sp, #8
 801518e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015194:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015196:	2104      	movs	r1, #4
 8015198:	69b8      	ldr	r0, [r7, #24]
 801519a:	f000 f9dd 	bl	8015558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801519e:	f107 030c 	add.w	r3, r7, #12
 80151a2:	2203      	movs	r2, #3
 80151a4:	69b9      	ldr	r1, [r7, #24]
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f000 fe62 	bl	8015e70 <dhcp_create_msg>
 80151ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d04c      	beq.n	801524e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151ba:	89b8      	ldrh	r0, [r7, #12]
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80151c2:	2302      	movs	r3, #2
 80151c4:	2239      	movs	r2, #57	@ 0x39
 80151c6:	f000 f9e1 	bl	801558c <dhcp_option>
 80151ca:	4603      	mov	r3, r0
 80151cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80151ce:	89b8      	ldrh	r0, [r7, #12]
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80151da:	461a      	mov	r2, r3
 80151dc:	f000 fa30 	bl	8015640 <dhcp_option_short>
 80151e0:	4603      	mov	r3, r0
 80151e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80151e4:	89b8      	ldrh	r0, [r7, #12]
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80151ec:	2303      	movs	r3, #3
 80151ee:	2237      	movs	r2, #55	@ 0x37
 80151f0:	f000 f9cc 	bl	801558c <dhcp_option>
 80151f4:	4603      	mov	r3, r0
 80151f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151f8:	2300      	movs	r3, #0
 80151fa:	77bb      	strb	r3, [r7, #30]
 80151fc:	e00e      	b.n	801521c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80151fe:	89b8      	ldrh	r0, [r7, #12]
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015206:	7fbb      	ldrb	r3, [r7, #30]
 8015208:	4a28      	ldr	r2, [pc, #160]	@ (80152ac <dhcp_rebind+0x124>)
 801520a:	5cd3      	ldrb	r3, [r2, r3]
 801520c:	461a      	mov	r2, r3
 801520e:	f000 f9f1 	bl	80155f4 <dhcp_option_byte>
 8015212:	4603      	mov	r3, r0
 8015214:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015216:	7fbb      	ldrb	r3, [r7, #30]
 8015218:	3301      	adds	r3, #1
 801521a:	77bb      	strb	r3, [r7, #30]
 801521c:	7fbb      	ldrb	r3, [r7, #30]
 801521e:	2b02      	cmp	r3, #2
 8015220:	d9ed      	bls.n	80151fe <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015222:	89b8      	ldrh	r0, [r7, #12]
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	33f0      	adds	r3, #240	@ 0xf0
 8015228:	697a      	ldr	r2, [r7, #20]
 801522a:	4619      	mov	r1, r3
 801522c:	f000 fef6 	bl	801601c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015230:	4b1f      	ldr	r3, [pc, #124]	@ (80152b0 <dhcp_rebind+0x128>)
 8015232:	6818      	ldr	r0, [r3, #0]
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	9300      	str	r3, [sp, #0]
 8015238:	2343      	movs	r3, #67	@ 0x43
 801523a:	4a1e      	ldr	r2, [pc, #120]	@ (80152b4 <dhcp_rebind+0x12c>)
 801523c:	6979      	ldr	r1, [r7, #20]
 801523e:	f00c fc49 	bl	8021ad4 <udp_sendto_if>
 8015242:	4603      	mov	r3, r0
 8015244:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015246:	6978      	ldr	r0, [r7, #20]
 8015248:	f005 fc8c 	bl	801ab64 <pbuf_free>
 801524c:	e001      	b.n	8015252 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801524e:	23ff      	movs	r3, #255	@ 0xff
 8015250:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	799b      	ldrb	r3, [r3, #6]
 8015256:	2bff      	cmp	r3, #255	@ 0xff
 8015258:	d005      	beq.n	8015266 <dhcp_rebind+0xde>
    dhcp->tries++;
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	799b      	ldrb	r3, [r3, #6]
 801525e:	3301      	adds	r3, #1
 8015260:	b2da      	uxtb	r2, r3
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	799b      	ldrb	r3, [r3, #6]
 801526a:	2b09      	cmp	r3, #9
 801526c:	d809      	bhi.n	8015282 <dhcp_rebind+0xfa>
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	799b      	ldrb	r3, [r3, #6]
 8015272:	461a      	mov	r2, r3
 8015274:	0152      	lsls	r2, r2, #5
 8015276:	1ad2      	subs	r2, r2, r3
 8015278:	0092      	lsls	r2, r2, #2
 801527a:	4413      	add	r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	b29b      	uxth	r3, r3
 8015280:	e001      	b.n	8015286 <dhcp_rebind+0xfe>
 8015282:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015286:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015288:	89fb      	ldrh	r3, [r7, #14]
 801528a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801528e:	4a0a      	ldr	r2, [pc, #40]	@ (80152b8 <dhcp_rebind+0x130>)
 8015290:	fb82 1203 	smull	r1, r2, r2, r3
 8015294:	1152      	asrs	r2, r2, #5
 8015296:	17db      	asrs	r3, r3, #31
 8015298:	1ad3      	subs	r3, r2, r3
 801529a:	b29a      	uxth	r2, r3
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80152a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3720      	adds	r7, #32
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	20000034 	.word	0x20000034
 80152b0:	20008da4 	.word	0x20008da4
 80152b4:	08028bf0 	.word	0x08028bf0
 80152b8:	10624dd3 	.word	0x10624dd3

080152bc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80152bc:	b5b0      	push	{r4, r5, r7, lr}
 80152be:	b08a      	sub	sp, #40	@ 0x28
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152c8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80152ca:	2103      	movs	r1, #3
 80152cc:	69b8      	ldr	r0, [r7, #24]
 80152ce:	f000 f943 	bl	8015558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80152d2:	f107 030c 	add.w	r3, r7, #12
 80152d6:	2203      	movs	r2, #3
 80152d8:	69b9      	ldr	r1, [r7, #24]
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 fdc8 	bl	8015e70 <dhcp_create_msg>
 80152e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d066      	beq.n	80153b6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152ee:	89b8      	ldrh	r0, [r7, #12]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152f6:	2302      	movs	r3, #2
 80152f8:	2239      	movs	r2, #57	@ 0x39
 80152fa:	f000 f947 	bl	801558c <dhcp_option>
 80152fe:	4603      	mov	r3, r0
 8015300:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015302:	89b8      	ldrh	r0, [r7, #12]
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	33f0      	adds	r3, #240	@ 0xf0
 8015308:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801530c:	4619      	mov	r1, r3
 801530e:	f000 f997 	bl	8015640 <dhcp_option_short>
 8015312:	4603      	mov	r3, r0
 8015314:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015316:	89b8      	ldrh	r0, [r7, #12]
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801531e:	2304      	movs	r3, #4
 8015320:	2232      	movs	r2, #50	@ 0x32
 8015322:	f000 f933 	bl	801558c <dhcp_option>
 8015326:	4603      	mov	r3, r0
 8015328:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801532a:	89bc      	ldrh	r4, [r7, #12]
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015332:	69bb      	ldr	r3, [r7, #24]
 8015334:	69db      	ldr	r3, [r3, #28]
 8015336:	4618      	mov	r0, r3
 8015338:	f003 ff77 	bl	801922a <lwip_htonl>
 801533c:	4603      	mov	r3, r0
 801533e:	461a      	mov	r2, r3
 8015340:	4629      	mov	r1, r5
 8015342:	4620      	mov	r0, r4
 8015344:	f000 f9ae 	bl	80156a4 <dhcp_option_long>
 8015348:	4603      	mov	r3, r0
 801534a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801534c:	89b8      	ldrh	r0, [r7, #12]
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015354:	2303      	movs	r3, #3
 8015356:	2237      	movs	r2, #55	@ 0x37
 8015358:	f000 f918 	bl	801558c <dhcp_option>
 801535c:	4603      	mov	r3, r0
 801535e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015360:	2300      	movs	r3, #0
 8015362:	77bb      	strb	r3, [r7, #30]
 8015364:	e00e      	b.n	8015384 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015366:	89b8      	ldrh	r0, [r7, #12]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801536e:	7fbb      	ldrb	r3, [r7, #30]
 8015370:	4a28      	ldr	r2, [pc, #160]	@ (8015414 <dhcp_reboot+0x158>)
 8015372:	5cd3      	ldrb	r3, [r2, r3]
 8015374:	461a      	mov	r2, r3
 8015376:	f000 f93d 	bl	80155f4 <dhcp_option_byte>
 801537a:	4603      	mov	r3, r0
 801537c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801537e:	7fbb      	ldrb	r3, [r7, #30]
 8015380:	3301      	adds	r3, #1
 8015382:	77bb      	strb	r3, [r7, #30]
 8015384:	7fbb      	ldrb	r3, [r7, #30]
 8015386:	2b02      	cmp	r3, #2
 8015388:	d9ed      	bls.n	8015366 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801538a:	89b8      	ldrh	r0, [r7, #12]
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	33f0      	adds	r3, #240	@ 0xf0
 8015390:	697a      	ldr	r2, [r7, #20]
 8015392:	4619      	mov	r1, r3
 8015394:	f000 fe42 	bl	801601c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015398:	4b1f      	ldr	r3, [pc, #124]	@ (8015418 <dhcp_reboot+0x15c>)
 801539a:	6818      	ldr	r0, [r3, #0]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	2343      	movs	r3, #67	@ 0x43
 80153a2:	4a1e      	ldr	r2, [pc, #120]	@ (801541c <dhcp_reboot+0x160>)
 80153a4:	6979      	ldr	r1, [r7, #20]
 80153a6:	f00c fb95 	bl	8021ad4 <udp_sendto_if>
 80153aa:	4603      	mov	r3, r0
 80153ac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80153ae:	6978      	ldr	r0, [r7, #20]
 80153b0:	f005 fbd8 	bl	801ab64 <pbuf_free>
 80153b4:	e001      	b.n	80153ba <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80153b6:	23ff      	movs	r3, #255	@ 0xff
 80153b8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	799b      	ldrb	r3, [r3, #6]
 80153be:	2bff      	cmp	r3, #255	@ 0xff
 80153c0:	d005      	beq.n	80153ce <dhcp_reboot+0x112>
    dhcp->tries++;
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	799b      	ldrb	r3, [r3, #6]
 80153c6:	3301      	adds	r3, #1
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	69bb      	ldr	r3, [r7, #24]
 80153cc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	799b      	ldrb	r3, [r3, #6]
 80153d2:	2b09      	cmp	r3, #9
 80153d4:	d809      	bhi.n	80153ea <dhcp_reboot+0x12e>
 80153d6:	69bb      	ldr	r3, [r7, #24]
 80153d8:	799b      	ldrb	r3, [r3, #6]
 80153da:	461a      	mov	r2, r3
 80153dc:	0152      	lsls	r2, r2, #5
 80153de:	1ad2      	subs	r2, r2, r3
 80153e0:	0092      	lsls	r2, r2, #2
 80153e2:	4413      	add	r3, r2
 80153e4:	00db      	lsls	r3, r3, #3
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	e001      	b.n	80153ee <dhcp_reboot+0x132>
 80153ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80153ee:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153f0:	89fb      	ldrh	r3, [r7, #14]
 80153f2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80153f6:	4a0a      	ldr	r2, [pc, #40]	@ (8015420 <dhcp_reboot+0x164>)
 80153f8:	fb82 1203 	smull	r1, r2, r2, r3
 80153fc:	1152      	asrs	r2, r2, #5
 80153fe:	17db      	asrs	r3, r3, #31
 8015400:	1ad3      	subs	r3, r2, r3
 8015402:	b29a      	uxth	r2, r3
 8015404:	69bb      	ldr	r3, [r7, #24]
 8015406:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015408:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801540c:	4618      	mov	r0, r3
 801540e:	3720      	adds	r7, #32
 8015410:	46bd      	mov	sp, r7
 8015412:	bdb0      	pop	{r4, r5, r7, pc}
 8015414:	20000034 	.word	0x20000034
 8015418:	20008da4 	.word	0x20008da4
 801541c:	08028bf0 	.word	0x08028bf0
 8015420:	10624dd3 	.word	0x10624dd3

08015424 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015424:	b5b0      	push	{r4, r5, r7, lr}
 8015426:	b08a      	sub	sp, #40	@ 0x28
 8015428:	af02      	add	r7, sp, #8
 801542a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015430:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015432:	69fb      	ldr	r3, [r7, #28]
 8015434:	2b00      	cmp	r3, #0
 8015436:	f000 8084 	beq.w	8015542 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	795b      	ldrb	r3, [r3, #5]
 801543e:	2b00      	cmp	r3, #0
 8015440:	f000 8081 	beq.w	8015546 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	699b      	ldr	r3, [r3, #24]
 8015448:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	2200      	movs	r2, #0
 801544e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	2200      	movs	r2, #0
 8015454:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	2200      	movs	r2, #0
 801545a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	2200      	movs	r2, #0
 8015460:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015462:	69fb      	ldr	r3, [r7, #28]
 8015464:	2200      	movs	r2, #0
 8015466:	631a      	str	r2, [r3, #48]	@ 0x30
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	2200      	movs	r2, #0
 801547c:	829a      	strh	r2, [r3, #20]
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	8a9a      	ldrh	r2, [r3, #20]
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	825a      	strh	r2, [r3, #18]
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	8a5a      	ldrh	r2, [r3, #18]
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	821a      	strh	r2, [r3, #16]
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	8a1a      	ldrh	r2, [r3, #16]
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 fdee 	bl	8016078 <dhcp_supplied_address>
 801549c:	4603      	mov	r3, r0
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d03b      	beq.n	801551a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80154a2:	f107 030e 	add.w	r3, r7, #14
 80154a6:	2207      	movs	r2, #7
 80154a8:	69f9      	ldr	r1, [r7, #28]
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f000 fce0 	bl	8015e70 <dhcp_create_msg>
 80154b0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d030      	beq.n	801551a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80154be:	89f8      	ldrh	r0, [r7, #14]
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80154c6:	2304      	movs	r3, #4
 80154c8:	2236      	movs	r2, #54	@ 0x36
 80154ca:	f000 f85f 	bl	801558c <dhcp_option>
 80154ce:	4603      	mov	r3, r0
 80154d0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80154d2:	89fc      	ldrh	r4, [r7, #14]
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	4618      	mov	r0, r3
 80154de:	f003 fea4 	bl	801922a <lwip_htonl>
 80154e2:	4603      	mov	r3, r0
 80154e4:	461a      	mov	r2, r3
 80154e6:	4629      	mov	r1, r5
 80154e8:	4620      	mov	r0, r4
 80154ea:	f000 f8db 	bl	80156a4 <dhcp_option_long>
 80154ee:	4603      	mov	r3, r0
 80154f0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154f2:	89f8      	ldrh	r0, [r7, #14]
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	33f0      	adds	r3, #240	@ 0xf0
 80154f8:	69ba      	ldr	r2, [r7, #24]
 80154fa:	4619      	mov	r1, r3
 80154fc:	f000 fd8e 	bl	801601c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015500:	4b13      	ldr	r3, [pc, #76]	@ (8015550 <dhcp_release_and_stop+0x12c>)
 8015502:	6818      	ldr	r0, [r3, #0]
 8015504:	f107 0210 	add.w	r2, r7, #16
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	2343      	movs	r3, #67	@ 0x43
 801550e:	69b9      	ldr	r1, [r7, #24]
 8015510:	f00c fae0 	bl	8021ad4 <udp_sendto_if>
      pbuf_free(p_out);
 8015514:	69b8      	ldr	r0, [r7, #24]
 8015516:	f005 fb25 	bl	801ab64 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801551a:	4b0e      	ldr	r3, [pc, #56]	@ (8015554 <dhcp_release_and_stop+0x130>)
 801551c:	4a0d      	ldr	r2, [pc, #52]	@ (8015554 <dhcp_release_and_stop+0x130>)
 801551e:	490d      	ldr	r1, [pc, #52]	@ (8015554 <dhcp_release_and_stop+0x130>)
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f004 fdd5 	bl	801a0d0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015526:	2100      	movs	r1, #0
 8015528:	69f8      	ldr	r0, [r7, #28]
 801552a:	f000 f815 	bl	8015558 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	791b      	ldrb	r3, [r3, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d008      	beq.n	8015548 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015536:	f7fe ff89 	bl	801444c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	2200      	movs	r2, #0
 801553e:	711a      	strb	r2, [r3, #4]
 8015540:	e002      	b.n	8015548 <dhcp_release_and_stop+0x124>
    return;
 8015542:	bf00      	nop
 8015544:	e000      	b.n	8015548 <dhcp_release_and_stop+0x124>
    return;
 8015546:	bf00      	nop
  }
}
 8015548:	3720      	adds	r7, #32
 801554a:	46bd      	mov	sp, r7
 801554c:	bdb0      	pop	{r4, r5, r7, pc}
 801554e:	bf00      	nop
 8015550:	20008da4 	.word	0x20008da4
 8015554:	08028bec 	.word	0x08028bec

08015558 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	460b      	mov	r3, r1
 8015562:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	795b      	ldrb	r3, [r3, #5]
 8015568:	78fa      	ldrb	r2, [r7, #3]
 801556a:	429a      	cmp	r2, r3
 801556c:	d008      	beq.n	8015580 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	78fa      	ldrb	r2, [r7, #3]
 8015572:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2200      	movs	r2, #0
 8015578:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	811a      	strh	r2, [r3, #8]
  }
}
 8015580:	bf00      	nop
 8015582:	370c      	adds	r7, #12
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr

0801558c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af00      	add	r7, sp, #0
 8015592:	6039      	str	r1, [r7, #0]
 8015594:	4611      	mov	r1, r2
 8015596:	461a      	mov	r2, r3
 8015598:	4603      	mov	r3, r0
 801559a:	80fb      	strh	r3, [r7, #6]
 801559c:	460b      	mov	r3, r1
 801559e:	717b      	strb	r3, [r7, #5]
 80155a0:	4613      	mov	r3, r2
 80155a2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80155a4:	88fa      	ldrh	r2, [r7, #6]
 80155a6:	793b      	ldrb	r3, [r7, #4]
 80155a8:	4413      	add	r3, r2
 80155aa:	3302      	adds	r3, #2
 80155ac:	2b44      	cmp	r3, #68	@ 0x44
 80155ae:	d906      	bls.n	80155be <dhcp_option+0x32>
 80155b0:	4b0d      	ldr	r3, [pc, #52]	@ (80155e8 <dhcp_option+0x5c>)
 80155b2:	f240 529a 	movw	r2, #1434	@ 0x59a
 80155b6:	490d      	ldr	r1, [pc, #52]	@ (80155ec <dhcp_option+0x60>)
 80155b8:	480d      	ldr	r0, [pc, #52]	@ (80155f0 <dhcp_option+0x64>)
 80155ba:	f00d f9ad 	bl	8022918 <iprintf>
  options[options_out_len++] = option_type;
 80155be:	88fb      	ldrh	r3, [r7, #6]
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	80fa      	strh	r2, [r7, #6]
 80155c4:	461a      	mov	r2, r3
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	4413      	add	r3, r2
 80155ca:	797a      	ldrb	r2, [r7, #5]
 80155cc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80155ce:	88fb      	ldrh	r3, [r7, #6]
 80155d0:	1c5a      	adds	r2, r3, #1
 80155d2:	80fa      	strh	r2, [r7, #6]
 80155d4:	461a      	mov	r2, r3
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	4413      	add	r3, r2
 80155da:	793a      	ldrb	r2, [r7, #4]
 80155dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80155de:	88fb      	ldrh	r3, [r7, #6]
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	08024fa4 	.word	0x08024fa4
 80155ec:	08025178 	.word	0x08025178
 80155f0:	08025044 	.word	0x08025044

080155f4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	4603      	mov	r3, r0
 80155fc:	6039      	str	r1, [r7, #0]
 80155fe:	80fb      	strh	r3, [r7, #6]
 8015600:	4613      	mov	r3, r2
 8015602:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015604:	88fb      	ldrh	r3, [r7, #6]
 8015606:	2b43      	cmp	r3, #67	@ 0x43
 8015608:	d906      	bls.n	8015618 <dhcp_option_byte+0x24>
 801560a:	4b0a      	ldr	r3, [pc, #40]	@ (8015634 <dhcp_option_byte+0x40>)
 801560c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8015610:	4909      	ldr	r1, [pc, #36]	@ (8015638 <dhcp_option_byte+0x44>)
 8015612:	480a      	ldr	r0, [pc, #40]	@ (801563c <dhcp_option_byte+0x48>)
 8015614:	f00d f980 	bl	8022918 <iprintf>
  options[options_out_len++] = value;
 8015618:	88fb      	ldrh	r3, [r7, #6]
 801561a:	1c5a      	adds	r2, r3, #1
 801561c:	80fa      	strh	r2, [r7, #6]
 801561e:	461a      	mov	r2, r3
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	4413      	add	r3, r2
 8015624:	797a      	ldrb	r2, [r7, #5]
 8015626:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015628:	88fb      	ldrh	r3, [r7, #6]
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	08024fa4 	.word	0x08024fa4
 8015638:	080251bc 	.word	0x080251bc
 801563c:	08025044 	.word	0x08025044

08015640 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	4603      	mov	r3, r0
 8015648:	6039      	str	r1, [r7, #0]
 801564a:	80fb      	strh	r3, [r7, #6]
 801564c:	4613      	mov	r3, r2
 801564e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015650:	88fb      	ldrh	r3, [r7, #6]
 8015652:	3302      	adds	r3, #2
 8015654:	2b44      	cmp	r3, #68	@ 0x44
 8015656:	d906      	bls.n	8015666 <dhcp_option_short+0x26>
 8015658:	4b0f      	ldr	r3, [pc, #60]	@ (8015698 <dhcp_option_short+0x58>)
 801565a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801565e:	490f      	ldr	r1, [pc, #60]	@ (801569c <dhcp_option_short+0x5c>)
 8015660:	480f      	ldr	r0, [pc, #60]	@ (80156a0 <dhcp_option_short+0x60>)
 8015662:	f00d f959 	bl	8022918 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015666:	88bb      	ldrh	r3, [r7, #4]
 8015668:	0a1b      	lsrs	r3, r3, #8
 801566a:	b29a      	uxth	r2, r3
 801566c:	88fb      	ldrh	r3, [r7, #6]
 801566e:	1c59      	adds	r1, r3, #1
 8015670:	80f9      	strh	r1, [r7, #6]
 8015672:	4619      	mov	r1, r3
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	440b      	add	r3, r1
 8015678:	b2d2      	uxtb	r2, r2
 801567a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801567c:	88fb      	ldrh	r3, [r7, #6]
 801567e:	1c5a      	adds	r2, r3, #1
 8015680:	80fa      	strh	r2, [r7, #6]
 8015682:	461a      	mov	r2, r3
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	4413      	add	r3, r2
 8015688:	88ba      	ldrh	r2, [r7, #4]
 801568a:	b2d2      	uxtb	r2, r2
 801568c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801568e:	88fb      	ldrh	r3, [r7, #6]
}
 8015690:	4618      	mov	r0, r3
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	08024fa4 	.word	0x08024fa4
 801569c:	080251f4 	.word	0x080251f4
 80156a0:	08025044 	.word	0x08025044

080156a4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	4603      	mov	r3, r0
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
 80156b0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80156b2:	89fb      	ldrh	r3, [r7, #14]
 80156b4:	3304      	adds	r3, #4
 80156b6:	2b44      	cmp	r3, #68	@ 0x44
 80156b8:	d906      	bls.n	80156c8 <dhcp_option_long+0x24>
 80156ba:	4b19      	ldr	r3, [pc, #100]	@ (8015720 <dhcp_option_long+0x7c>)
 80156bc:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80156c0:	4918      	ldr	r1, [pc, #96]	@ (8015724 <dhcp_option_long+0x80>)
 80156c2:	4819      	ldr	r0, [pc, #100]	@ (8015728 <dhcp_option_long+0x84>)
 80156c4:	f00d f928 	bl	8022918 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	0e1a      	lsrs	r2, r3, #24
 80156cc:	89fb      	ldrh	r3, [r7, #14]
 80156ce:	1c59      	adds	r1, r3, #1
 80156d0:	81f9      	strh	r1, [r7, #14]
 80156d2:	4619      	mov	r1, r3
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	440b      	add	r3, r1
 80156d8:	b2d2      	uxtb	r2, r2
 80156da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	0c1a      	lsrs	r2, r3, #16
 80156e0:	89fb      	ldrh	r3, [r7, #14]
 80156e2:	1c59      	adds	r1, r3, #1
 80156e4:	81f9      	strh	r1, [r7, #14]
 80156e6:	4619      	mov	r1, r3
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	440b      	add	r3, r1
 80156ec:	b2d2      	uxtb	r2, r2
 80156ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	0a1a      	lsrs	r2, r3, #8
 80156f4:	89fb      	ldrh	r3, [r7, #14]
 80156f6:	1c59      	adds	r1, r3, #1
 80156f8:	81f9      	strh	r1, [r7, #14]
 80156fa:	4619      	mov	r1, r3
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	440b      	add	r3, r1
 8015700:	b2d2      	uxtb	r2, r2
 8015702:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015704:	89fb      	ldrh	r3, [r7, #14]
 8015706:	1c5a      	adds	r2, r3, #1
 8015708:	81fa      	strh	r2, [r7, #14]
 801570a:	461a      	mov	r2, r3
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	4413      	add	r3, r2
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	b2d2      	uxtb	r2, r2
 8015714:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015716:	89fb      	ldrh	r3, [r7, #14]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3710      	adds	r7, #16
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}
 8015720:	08024fa4 	.word	0x08024fa4
 8015724:	08025230 	.word	0x08025230
 8015728:	08025044 	.word	0x08025044

0801572c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b090      	sub	sp, #64	@ 0x40
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015736:	2300      	movs	r3, #0
 8015738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801573a:	2300      	movs	r3, #0
 801573c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801573e:	2208      	movs	r2, #8
 8015740:	2100      	movs	r1, #0
 8015742:	48b5      	ldr	r0, [pc, #724]	@ (8015a18 <dhcp_parse_reply+0x2ec>)
 8015744:	f00d fa7a 	bl	8022c3c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	895b      	ldrh	r3, [r3, #10]
 801574c:	2b2b      	cmp	r3, #43	@ 0x2b
 801574e:	d802      	bhi.n	8015756 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015750:	f06f 0301 	mvn.w	r3, #1
 8015754:	e2a7      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801575c:	23f0      	movs	r3, #240	@ 0xf0
 801575e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	891b      	ldrh	r3, [r3, #8]
 8015764:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801576a:	e00c      	b.n	8015786 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801576e:	895b      	ldrh	r3, [r3, #10]
 8015770:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015778:	895b      	ldrh	r3, [r3, #10]
 801577a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801577c:	1ad3      	subs	r3, r2, r3
 801577e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8015780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015788:	2b00      	cmp	r3, #0
 801578a:	d004      	beq.n	8015796 <dhcp_parse_reply+0x6a>
 801578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578e:	895b      	ldrh	r3, [r3, #10]
 8015790:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015792:	429a      	cmp	r2, r3
 8015794:	d2ea      	bcs.n	801576c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015798:	2b00      	cmp	r3, #0
 801579a:	d102      	bne.n	80157a2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801579c:	f06f 0301 	mvn.w	r3, #1
 80157a0:	e281      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80157a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80157a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80157a8:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80157aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80157b0:	e239      	b.n	8015c26 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80157b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80157b6:	4413      	add	r3, r2
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80157bc:	2300      	movs	r3, #0
 80157be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80157c2:	f04f 33ff 	mov.w	r3, #4294967295
 80157c6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80157c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157ca:	3302      	adds	r3, #2
 80157cc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80157ce:	8bfa      	ldrh	r2, [r7, #30]
 80157d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d202      	bcs.n	80157dc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80157d6:	f06f 0301 	mvn.w	r3, #1
 80157da:	e264      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80157dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157de:	3301      	adds	r3, #1
 80157e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80157e2:	8952      	ldrh	r2, [r2, #10]
 80157e4:	4293      	cmp	r3, r2
 80157e6:	da07      	bge.n	80157f8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80157e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157ea:	3301      	adds	r3, #1
 80157ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80157ee:	4413      	add	r3, r2
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80157f6:	e00b      	b.n	8015810 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80157f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d004      	beq.n	801580a <dhcp_parse_reply+0xde>
 8015800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	e000      	b.n	801580c <dhcp_parse_reply+0xe0>
 801580a:	2300      	movs	r3, #0
 801580c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015814:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8015818:	7dfb      	ldrb	r3, [r7, #23]
 801581a:	2b3b      	cmp	r3, #59	@ 0x3b
 801581c:	f200 812c 	bhi.w	8015a78 <dhcp_parse_reply+0x34c>
 8015820:	a201      	add	r2, pc, #4	@ (adr r2, 8015828 <dhcp_parse_reply+0xfc>)
 8015822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015826:	bf00      	nop
 8015828:	08015919 	.word	0x08015919
 801582c:	08015929 	.word	0x08015929
 8015830:	08015a79 	.word	0x08015a79
 8015834:	0801594b 	.word	0x0801594b
 8015838:	08015a79 	.word	0x08015a79
 801583c:	08015a79 	.word	0x08015a79
 8015840:	08015a79 	.word	0x08015a79
 8015844:	08015a79 	.word	0x08015a79
 8015848:	08015a79 	.word	0x08015a79
 801584c:	08015a79 	.word	0x08015a79
 8015850:	08015a79 	.word	0x08015a79
 8015854:	08015a79 	.word	0x08015a79
 8015858:	08015a79 	.word	0x08015a79
 801585c:	08015a79 	.word	0x08015a79
 8015860:	08015a79 	.word	0x08015a79
 8015864:	08015a79 	.word	0x08015a79
 8015868:	08015a79 	.word	0x08015a79
 801586c:	08015a79 	.word	0x08015a79
 8015870:	08015a79 	.word	0x08015a79
 8015874:	08015a79 	.word	0x08015a79
 8015878:	08015a79 	.word	0x08015a79
 801587c:	08015a79 	.word	0x08015a79
 8015880:	08015a79 	.word	0x08015a79
 8015884:	08015a79 	.word	0x08015a79
 8015888:	08015a79 	.word	0x08015a79
 801588c:	08015a79 	.word	0x08015a79
 8015890:	08015a79 	.word	0x08015a79
 8015894:	08015a79 	.word	0x08015a79
 8015898:	08015a79 	.word	0x08015a79
 801589c:	08015a79 	.word	0x08015a79
 80158a0:	08015a79 	.word	0x08015a79
 80158a4:	08015a79 	.word	0x08015a79
 80158a8:	08015a79 	.word	0x08015a79
 80158ac:	08015a79 	.word	0x08015a79
 80158b0:	08015a79 	.word	0x08015a79
 80158b4:	08015a79 	.word	0x08015a79
 80158b8:	08015a79 	.word	0x08015a79
 80158bc:	08015a79 	.word	0x08015a79
 80158c0:	08015a79 	.word	0x08015a79
 80158c4:	08015a79 	.word	0x08015a79
 80158c8:	08015a79 	.word	0x08015a79
 80158cc:	08015a79 	.word	0x08015a79
 80158d0:	08015a79 	.word	0x08015a79
 80158d4:	08015a79 	.word	0x08015a79
 80158d8:	08015a79 	.word	0x08015a79
 80158dc:	08015a79 	.word	0x08015a79
 80158e0:	08015a79 	.word	0x08015a79
 80158e4:	08015a79 	.word	0x08015a79
 80158e8:	08015a79 	.word	0x08015a79
 80158ec:	08015a79 	.word	0x08015a79
 80158f0:	08015a79 	.word	0x08015a79
 80158f4:	08015977 	.word	0x08015977
 80158f8:	08015999 	.word	0x08015999
 80158fc:	080159d5 	.word	0x080159d5
 8015900:	080159f7 	.word	0x080159f7
 8015904:	08015a79 	.word	0x08015a79
 8015908:	08015a79 	.word	0x08015a79
 801590c:	08015a79 	.word	0x08015a79
 8015910:	08015a35 	.word	0x08015a35
 8015914:	08015a57 	.word	0x08015a57
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015918:	2300      	movs	r3, #0
 801591a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801591e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015922:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015926:	e0ab      	b.n	8015a80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801592c:	2b04      	cmp	r3, #4
 801592e:	d009      	beq.n	8015944 <dhcp_parse_reply+0x218>
 8015930:	4b3a      	ldr	r3, [pc, #232]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 8015932:	f240 622e 	movw	r2, #1582	@ 0x62e
 8015936:	493a      	ldr	r1, [pc, #232]	@ (8015a20 <dhcp_parse_reply+0x2f4>)
 8015938:	483a      	ldr	r0, [pc, #232]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 801593a:	f00c ffed 	bl	8022918 <iprintf>
 801593e:	f06f 0305 	mvn.w	r3, #5
 8015942:	e1b0      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015944:	2306      	movs	r3, #6
 8015946:	623b      	str	r3, [r7, #32]
        break;
 8015948:	e09a      	b.n	8015a80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801594a:	2304      	movs	r3, #4
 801594c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015950:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015958:	429a      	cmp	r2, r3
 801595a:	d209      	bcs.n	8015970 <dhcp_parse_reply+0x244>
 801595c:	4b2f      	ldr	r3, [pc, #188]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 801595e:	f240 6233 	movw	r2, #1587	@ 0x633
 8015962:	4931      	ldr	r1, [pc, #196]	@ (8015a28 <dhcp_parse_reply+0x2fc>)
 8015964:	482f      	ldr	r0, [pc, #188]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 8015966:	f00c ffd7 	bl	8022918 <iprintf>
 801596a:	f06f 0305 	mvn.w	r3, #5
 801596e:	e19a      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015970:	2307      	movs	r3, #7
 8015972:	623b      	str	r3, [r7, #32]
        break;
 8015974:	e084      	b.n	8015a80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801597a:	2b04      	cmp	r3, #4
 801597c:	d009      	beq.n	8015992 <dhcp_parse_reply+0x266>
 801597e:	4b27      	ldr	r3, [pc, #156]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 8015980:	f240 6241 	movw	r2, #1601	@ 0x641
 8015984:	4926      	ldr	r1, [pc, #152]	@ (8015a20 <dhcp_parse_reply+0x2f4>)
 8015986:	4827      	ldr	r0, [pc, #156]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 8015988:	f00c ffc6 	bl	8022918 <iprintf>
 801598c:	f06f 0305 	mvn.w	r3, #5
 8015990:	e189      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015992:	2303      	movs	r3, #3
 8015994:	623b      	str	r3, [r7, #32]
        break;
 8015996:	e073      	b.n	8015a80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801599c:	2b01      	cmp	r3, #1
 801599e:	d009      	beq.n	80159b4 <dhcp_parse_reply+0x288>
 80159a0:	4b1e      	ldr	r3, [pc, #120]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 80159a2:	f240 624f 	movw	r2, #1615	@ 0x64f
 80159a6:	4921      	ldr	r1, [pc, #132]	@ (8015a2c <dhcp_parse_reply+0x300>)
 80159a8:	481e      	ldr	r0, [pc, #120]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 80159aa:	f00c ffb5 	bl	8022918 <iprintf>
 80159ae:	f06f 0305 	mvn.w	r3, #5
 80159b2:	e178      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80159b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80159b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80159b8:	d009      	beq.n	80159ce <dhcp_parse_reply+0x2a2>
 80159ba:	4b18      	ldr	r3, [pc, #96]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 80159bc:	f240 6251 	movw	r2, #1617	@ 0x651
 80159c0:	491b      	ldr	r1, [pc, #108]	@ (8015a30 <dhcp_parse_reply+0x304>)
 80159c2:	4818      	ldr	r0, [pc, #96]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 80159c4:	f00c ffa8 	bl	8022918 <iprintf>
 80159c8:	f06f 0305 	mvn.w	r3, #5
 80159cc:	e16b      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80159ce:	2300      	movs	r3, #0
 80159d0:	623b      	str	r3, [r7, #32]
        break;
 80159d2:	e055      	b.n	8015a80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80159d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d009      	beq.n	80159f0 <dhcp_parse_reply+0x2c4>
 80159dc:	4b0f      	ldr	r3, [pc, #60]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 80159de:	f240 6255 	movw	r2, #1621	@ 0x655
 80159e2:	4912      	ldr	r1, [pc, #72]	@ (8015a2c <dhcp_parse_reply+0x300>)
 80159e4:	480f      	ldr	r0, [pc, #60]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 80159e6:	f00c ff97 	bl	8022918 <iprintf>
 80159ea:	f06f 0305 	mvn.w	r3, #5
 80159ee:	e15a      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80159f0:	2301      	movs	r3, #1
 80159f2:	623b      	str	r3, [r7, #32]
        break;
 80159f4:	e044      	b.n	8015a80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80159f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159fa:	2b04      	cmp	r3, #4
 80159fc:	d009      	beq.n	8015a12 <dhcp_parse_reply+0x2e6>
 80159fe:	4b07      	ldr	r3, [pc, #28]	@ (8015a1c <dhcp_parse_reply+0x2f0>)
 8015a00:	f240 6259 	movw	r2, #1625	@ 0x659
 8015a04:	4906      	ldr	r1, [pc, #24]	@ (8015a20 <dhcp_parse_reply+0x2f4>)
 8015a06:	4807      	ldr	r0, [pc, #28]	@ (8015a24 <dhcp_parse_reply+0x2f8>)
 8015a08:	f00c ff86 	bl	8022918 <iprintf>
 8015a0c:	f06f 0305 	mvn.w	r3, #5
 8015a10:	e149      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015a12:	2302      	movs	r3, #2
 8015a14:	623b      	str	r3, [r7, #32]
        break;
 8015a16:	e033      	b.n	8015a80 <dhcp_parse_reply+0x354>
 8015a18:	20008d9c 	.word	0x20008d9c
 8015a1c:	08024fa4 	.word	0x08024fa4
 8015a20:	0802526c 	.word	0x0802526c
 8015a24:	08025044 	.word	0x08025044
 8015a28:	08025278 	.word	0x08025278
 8015a2c:	0802528c 	.word	0x0802528c
 8015a30:	08025298 	.word	0x08025298
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a38:	2b04      	cmp	r3, #4
 8015a3a:	d009      	beq.n	8015a50 <dhcp_parse_reply+0x324>
 8015a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015a3e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8015a42:	499c      	ldr	r1, [pc, #624]	@ (8015cb4 <dhcp_parse_reply+0x588>)
 8015a44:	489c      	ldr	r0, [pc, #624]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015a46:	f00c ff67 	bl	8022918 <iprintf>
 8015a4a:	f06f 0305 	mvn.w	r3, #5
 8015a4e:	e12a      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015a50:	2304      	movs	r3, #4
 8015a52:	623b      	str	r3, [r7, #32]
        break;
 8015a54:	e014      	b.n	8015a80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a5a:	2b04      	cmp	r3, #4
 8015a5c:	d009      	beq.n	8015a72 <dhcp_parse_reply+0x346>
 8015a5e:	4b94      	ldr	r3, [pc, #592]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015a60:	f240 6261 	movw	r2, #1633	@ 0x661
 8015a64:	4993      	ldr	r1, [pc, #588]	@ (8015cb4 <dhcp_parse_reply+0x588>)
 8015a66:	4894      	ldr	r0, [pc, #592]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015a68:	f00c ff56 	bl	8022918 <iprintf>
 8015a6c:	f06f 0305 	mvn.w	r3, #5
 8015a70:	e119      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015a72:	2305      	movs	r3, #5
 8015a74:	623b      	str	r3, [r7, #32]
        break;
 8015a76:	e003      	b.n	8015a80 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015a7e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015a80:	7dfb      	ldrb	r3, [r7, #23]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d103      	bne.n	8015a8e <dhcp_parse_reply+0x362>
      offset++;
 8015a86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a88:	3301      	adds	r3, #1
 8015a8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015a8c:	e0a1      	b.n	8015bd2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015a8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a94:	4413      	add	r3, r2
 8015a96:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	dd02      	ble.n	8015aa4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015a9e:	f06f 0301 	mvn.w	r3, #1
 8015aa2:	e100      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015aac:	4413      	add	r3, r2
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	3302      	adds	r3, #2
 8015ab2:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	f000 808a 	beq.w	8015bd2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015ac2:	6a3b      	ldr	r3, [r7, #32]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	db02      	blt.n	8015ace <dhcp_parse_reply+0x3a2>
 8015ac8:	6a3b      	ldr	r3, [r7, #32]
 8015aca:	2b07      	cmp	r3, #7
 8015acc:	dd06      	ble.n	8015adc <dhcp_parse_reply+0x3b0>
 8015ace:	4b78      	ldr	r3, [pc, #480]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015ad0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8015ad4:	4979      	ldr	r1, [pc, #484]	@ (8015cbc <dhcp_parse_reply+0x590>)
 8015ad6:	4878      	ldr	r0, [pc, #480]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015ad8:	f00c ff1e 	bl	8022918 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015adc:	4a78      	ldr	r2, [pc, #480]	@ (8015cc0 <dhcp_parse_reply+0x594>)
 8015ade:	6a3b      	ldr	r3, [r7, #32]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d174      	bne.n	8015bd2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015aec:	2b04      	cmp	r3, #4
 8015aee:	bf28      	it	cs
 8015af0:	2304      	movcs	r3, #4
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015af6:	8bfb      	ldrh	r3, [r7, #30]
 8015af8:	8aba      	ldrh	r2, [r7, #20]
 8015afa:	f107 0108 	add.w	r1, r7, #8
 8015afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015b00:	f005 fa36 	bl	801af70 <pbuf_copy_partial>
 8015b04:	4603      	mov	r3, r0
 8015b06:	461a      	mov	r2, r3
 8015b08:	8abb      	ldrh	r3, [r7, #20]
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d002      	beq.n	8015b14 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015b0e:	f06f 0301 	mvn.w	r3, #1
 8015b12:	e0c8      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015b14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b18:	2b04      	cmp	r3, #4
 8015b1a:	d933      	bls.n	8015b84 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b20:	f003 0303 	and.w	r3, r3, #3
 8015b24:	b2db      	uxtb	r3, r3
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d009      	beq.n	8015b3e <dhcp_parse_reply+0x412>
 8015b2a:	4b61      	ldr	r3, [pc, #388]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015b2c:	f240 6281 	movw	r2, #1665	@ 0x681
 8015b30:	4964      	ldr	r1, [pc, #400]	@ (8015cc4 <dhcp_parse_reply+0x598>)
 8015b32:	4861      	ldr	r0, [pc, #388]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015b34:	f00c fef0 	bl	8022918 <iprintf>
 8015b38:	f06f 0305 	mvn.w	r3, #5
 8015b3c:	e0b3      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015b3e:	4a60      	ldr	r2, [pc, #384]	@ (8015cc0 <dhcp_parse_reply+0x594>)
 8015b40:	6a3b      	ldr	r3, [r7, #32]
 8015b42:	4413      	add	r3, r2
 8015b44:	2201      	movs	r2, #1
 8015b46:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f003 fb6d 	bl	801922a <lwip_htonl>
 8015b50:	4602      	mov	r2, r0
 8015b52:	495d      	ldr	r1, [pc, #372]	@ (8015cc8 <dhcp_parse_reply+0x59c>)
 8015b54:	6a3b      	ldr	r3, [r7, #32]
 8015b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b5e:	3b04      	subs	r3, #4
 8015b60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015b64:	8bfb      	ldrh	r3, [r7, #30]
 8015b66:	3304      	adds	r3, #4
 8015b68:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015b6a:	8a7a      	ldrh	r2, [r7, #18]
 8015b6c:	8bfb      	ldrh	r3, [r7, #30]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d202      	bcs.n	8015b78 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015b72:	f06f 0301 	mvn.w	r3, #1
 8015b76:	e096      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015b78:	8a7b      	ldrh	r3, [r7, #18]
 8015b7a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015b7c:	6a3b      	ldr	r3, [r7, #32]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015b82:	e79e      	b.n	8015ac2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015b84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	d106      	bne.n	8015b9a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f003 fb4b 	bl	801922a <lwip_htonl>
 8015b94:	4603      	mov	r3, r0
 8015b96:	60bb      	str	r3, [r7, #8]
 8015b98:	e011      	b.n	8015bbe <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	d009      	beq.n	8015bb6 <dhcp_parse_reply+0x48a>
 8015ba2:	4b43      	ldr	r3, [pc, #268]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015ba4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8015ba8:	4948      	ldr	r1, [pc, #288]	@ (8015ccc <dhcp_parse_reply+0x5a0>)
 8015baa:	4843      	ldr	r0, [pc, #268]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015bac:	f00c feb4 	bl	8022918 <iprintf>
 8015bb0:	f06f 0305 	mvn.w	r3, #5
 8015bb4:	e077      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015bb6:	f107 0308 	add.w	r3, r7, #8
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015bbe:	4a40      	ldr	r2, [pc, #256]	@ (8015cc0 <dhcp_parse_reply+0x594>)
 8015bc0:	6a3b      	ldr	r3, [r7, #32]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	493f      	ldr	r1, [pc, #252]	@ (8015cc8 <dhcp_parse_reply+0x59c>)
 8015bcc:	6a3b      	ldr	r3, [r7, #32]
 8015bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bd4:	895b      	ldrh	r3, [r3, #10]
 8015bd6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d324      	bcc.n	8015c26 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bde:	895b      	ldrh	r3, [r3, #10]
 8015be0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be8:	895b      	ldrh	r3, [r3, #10]
 8015bea:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015bf0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015bf2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d213      	bcs.n	8015c20 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d109      	bne.n	8015c18 <dhcp_parse_reply+0x4ec>
 8015c04:	4b2a      	ldr	r3, [pc, #168]	@ (8015cb0 <dhcp_parse_reply+0x584>)
 8015c06:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015c0a:	4931      	ldr	r1, [pc, #196]	@ (8015cd0 <dhcp_parse_reply+0x5a4>)
 8015c0c:	482a      	ldr	r0, [pc, #168]	@ (8015cb8 <dhcp_parse_reply+0x58c>)
 8015c0e:	f00c fe83 	bl	8022918 <iprintf>
 8015c12:	f06f 0305 	mvn.w	r3, #5
 8015c16:	e046      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015c1e:	e002      	b.n	8015c26 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015c20:	f06f 0301 	mvn.w	r3, #1
 8015c24:	e03f      	b.n	8015ca6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00a      	beq.n	8015c42 <dhcp_parse_reply+0x516>
 8015c2c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c2e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d206      	bcs.n	8015c42 <dhcp_parse_reply+0x516>
 8015c34:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c38:	4413      	add	r3, r2
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2bff      	cmp	r3, #255	@ 0xff
 8015c3e:	f47f adb8 	bne.w	80157b2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015c42:	4b1f      	ldr	r3, [pc, #124]	@ (8015cc0 <dhcp_parse_reply+0x594>)
 8015c44:	781b      	ldrb	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d018      	beq.n	8015c7c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8015cc8 <dhcp_parse_reply+0x59c>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c50:	4b1b      	ldr	r3, [pc, #108]	@ (8015cc0 <dhcp_parse_reply+0x594>)
 8015c52:	2200      	movs	r2, #0
 8015c54:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	d102      	bne.n	8015c62 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c60:	e00c      	b.n	8015c7c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d102      	bne.n	8015c6e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c6c:	e006      	b.n	8015c7c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2b03      	cmp	r3, #3
 8015c72:	d103      	bne.n	8015c7c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015c74:	2301      	movs	r3, #1
 8015c76:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d006      	beq.n	8015c90 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015c82:	2300      	movs	r3, #0
 8015c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015c86:	236c      	movs	r3, #108	@ 0x6c
 8015c88:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015c8a:	23ec      	movs	r3, #236	@ 0xec
 8015c8c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015c8e:	e56a      	b.n	8015766 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d006      	beq.n	8015ca4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015c96:	2300      	movs	r3, #0
 8015c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015c9a:	232c      	movs	r3, #44	@ 0x2c
 8015c9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015c9e:	236c      	movs	r3, #108	@ 0x6c
 8015ca0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015ca2:	e560      	b.n	8015766 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015ca4:	2300      	movs	r3, #0
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3740      	adds	r7, #64	@ 0x40
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	08024fa4 	.word	0x08024fa4
 8015cb4:	0802526c 	.word	0x0802526c
 8015cb8:	08025044 	.word	0x08025044
 8015cbc:	080252b0 	.word	0x080252b0
 8015cc0:	20008d9c 	.word	0x20008d9c
 8015cc4:	080252c4 	.word	0x080252c4
 8015cc8:	20008d7c 	.word	0x20008d7c
 8015ccc:	080252dc 	.word	0x080252dc
 8015cd0:	080252f0 	.word	0x080252f0

08015cd4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b08a      	sub	sp, #40	@ 0x28
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
 8015ce0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015ce2:	4b60      	ldr	r3, [pc, #384]	@ (8015e64 <dhcp_recv+0x190>)
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cec:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	f000 809d 	beq.w	8015e36 <dhcp_recv+0x162>
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	791b      	ldrb	r3, [r3, #4]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	f000 8098 	beq.w	8015e36 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	895b      	ldrh	r3, [r3, #10]
 8015d0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d0c:	f240 8095 	bls.w	8015e3a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015d10:	69bb      	ldr	r3, [r7, #24]
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	2b02      	cmp	r3, #2
 8015d16:	f040 8092 	bne.w	8015e3e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d20:	e012      	b.n	8015d48 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d26:	6a3a      	ldr	r2, [r7, #32]
 8015d28:	4413      	add	r3, r2
 8015d2a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8015d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d32:	69b9      	ldr	r1, [r7, #24]
 8015d34:	440b      	add	r3, r1
 8015d36:	7f1b      	ldrb	r3, [r3, #28]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	f040 8082 	bne.w	8015e42 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d42:	3301      	adds	r3, #1
 8015d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d48:	6a3b      	ldr	r3, [r7, #32]
 8015d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015d4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d203      	bcs.n	8015d5e <dhcp_recv+0x8a>
 8015d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d5a:	2b05      	cmp	r3, #5
 8015d5c:	d9e1      	bls.n	8015d22 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015d5e:	69bb      	ldr	r3, [r7, #24]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f003 fa61 	bl	801922a <lwip_htonl>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d169      	bne.n	8015e46 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015d72:	69f9      	ldr	r1, [r7, #28]
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7ff fcd9 	bl	801572c <dhcp_parse_reply>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d164      	bne.n	8015e4a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015d80:	4b39      	ldr	r3, [pc, #228]	@ (8015e68 <dhcp_recv+0x194>)
 8015d82:	785b      	ldrb	r3, [r3, #1]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d062      	beq.n	8015e4e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015d8e:	4b37      	ldr	r3, [pc, #220]	@ (8015e6c <dhcp_recv+0x198>)
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015d94:	7cfb      	ldrb	r3, [r7, #19]
 8015d96:	2b05      	cmp	r3, #5
 8015d98:	d12a      	bne.n	8015df0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	795b      	ldrb	r3, [r3, #5]
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d112      	bne.n	8015dc8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015da2:	6979      	ldr	r1, [r7, #20]
 8015da4:	6a38      	ldr	r0, [r7, #32]
 8015da6:	f7fe fe1d 	bl	80149e4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015db0:	f003 0308 	and.w	r3, r3, #8
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d003      	beq.n	8015dc0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015db8:	6a38      	ldr	r0, [r7, #32]
 8015dba:	f7fe fb8b 	bl	80144d4 <dhcp_check>
 8015dbe:	e049      	b.n	8015e54 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015dc0:	6a38      	ldr	r0, [r7, #32]
 8015dc2:	f7ff f86d 	bl	8014ea0 <dhcp_bind>
 8015dc6:	e045      	b.n	8015e54 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	795b      	ldrb	r3, [r3, #5]
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	d007      	beq.n	8015de0 <dhcp_recv+0x10c>
 8015dd0:	69fb      	ldr	r3, [r7, #28]
 8015dd2:	795b      	ldrb	r3, [r3, #5]
 8015dd4:	2b04      	cmp	r3, #4
 8015dd6:	d003      	beq.n	8015de0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ddc:	2b05      	cmp	r3, #5
 8015dde:	d139      	bne.n	8015e54 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015de0:	6979      	ldr	r1, [r7, #20]
 8015de2:	6a38      	ldr	r0, [r7, #32]
 8015de4:	f7fe fdfe 	bl	80149e4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015de8:	6a38      	ldr	r0, [r7, #32]
 8015dea:	f7ff f859 	bl	8014ea0 <dhcp_bind>
 8015dee:	e031      	b.n	8015e54 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015df0:	7cfb      	ldrb	r3, [r7, #19]
 8015df2:	2b06      	cmp	r3, #6
 8015df4:	d113      	bne.n	8015e1e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015dfa:	2b03      	cmp	r3, #3
 8015dfc:	d00b      	beq.n	8015e16 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	795b      	ldrb	r3, [r3, #5]
 8015e02:	2b01      	cmp	r3, #1
 8015e04:	d007      	beq.n	8015e16 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e0a:	2b04      	cmp	r3, #4
 8015e0c:	d003      	beq.n	8015e16 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	795b      	ldrb	r3, [r3, #5]
 8015e12:	2b05      	cmp	r3, #5
 8015e14:	d103      	bne.n	8015e1e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015e16:	6a38      	ldr	r0, [r7, #32]
 8015e18:	f7fe fb42 	bl	80144a0 <dhcp_handle_nak>
 8015e1c:	e01a      	b.n	8015e54 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015e1e:	7cfb      	ldrb	r3, [r7, #19]
 8015e20:	2b02      	cmp	r3, #2
 8015e22:	d116      	bne.n	8015e52 <dhcp_recv+0x17e>
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	795b      	ldrb	r3, [r3, #5]
 8015e28:	2b06      	cmp	r3, #6
 8015e2a:	d112      	bne.n	8015e52 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015e2c:	6979      	ldr	r1, [r7, #20]
 8015e2e:	6a38      	ldr	r0, [r7, #32]
 8015e30:	f7fe fb84 	bl	801453c <dhcp_handle_offer>
 8015e34:	e00e      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e36:	bf00      	nop
 8015e38:	e00c      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e3a:	bf00      	nop
 8015e3c:	e00a      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e3e:	bf00      	nop
 8015e40:	e008      	b.n	8015e54 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015e42:	bf00      	nop
 8015e44:	e006      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e46:	bf00      	nop
 8015e48:	e004      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e4a:	bf00      	nop
 8015e4c:	e002      	b.n	8015e54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e4e:	bf00      	nop
 8015e50:	e000      	b.n	8015e54 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015e52:	bf00      	nop
  pbuf_free(p);
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f004 fe85 	bl	801ab64 <pbuf_free>
}
 8015e5a:	bf00      	nop
 8015e5c:	3728      	adds	r7, #40	@ 0x28
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	20008ebc 	.word	0x20008ebc
 8015e68:	20008d9c 	.word	0x20008d9c
 8015e6c:	20008d7c 	.word	0x20008d7c

08015e70 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b088      	sub	sp, #32
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	603b      	str	r3, [r7, #0]
 8015e7c:	4613      	mov	r3, r2
 8015e7e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d108      	bne.n	8015e98 <dhcp_create_msg+0x28>
 8015e86:	4b5f      	ldr	r3, [pc, #380]	@ (8016004 <dhcp_create_msg+0x194>)
 8015e88:	f240 7269 	movw	r2, #1897	@ 0x769
 8015e8c:	495e      	ldr	r1, [pc, #376]	@ (8016008 <dhcp_create_msg+0x198>)
 8015e8e:	485f      	ldr	r0, [pc, #380]	@ (801600c <dhcp_create_msg+0x19c>)
 8015e90:	f00c fd42 	bl	8022918 <iprintf>
 8015e94:	2300      	movs	r3, #0
 8015e96:	e0b1      	b.n	8015ffc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d108      	bne.n	8015eb0 <dhcp_create_msg+0x40>
 8015e9e:	4b59      	ldr	r3, [pc, #356]	@ (8016004 <dhcp_create_msg+0x194>)
 8015ea0:	f240 726a 	movw	r2, #1898	@ 0x76a
 8015ea4:	495a      	ldr	r1, [pc, #360]	@ (8016010 <dhcp_create_msg+0x1a0>)
 8015ea6:	4859      	ldr	r0, [pc, #356]	@ (801600c <dhcp_create_msg+0x19c>)
 8015ea8:	f00c fd36 	bl	8022918 <iprintf>
 8015eac:	2300      	movs	r3, #0
 8015eae:	e0a5      	b.n	8015ffc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015eb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015eb4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015eb8:	2036      	movs	r0, #54	@ 0x36
 8015eba:	f004 fb3d 	bl	801a538 <pbuf_alloc>
 8015ebe:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d101      	bne.n	8015eca <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e098      	b.n	8015ffc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	895b      	ldrh	r3, [r3, #10]
 8015ece:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8015ed2:	d206      	bcs.n	8015ee2 <dhcp_create_msg+0x72>
 8015ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8016004 <dhcp_create_msg+0x194>)
 8015ed6:	f240 7271 	movw	r2, #1905	@ 0x771
 8015eda:	494e      	ldr	r1, [pc, #312]	@ (8016014 <dhcp_create_msg+0x1a4>)
 8015edc:	484b      	ldr	r0, [pc, #300]	@ (801600c <dhcp_create_msg+0x19c>)
 8015ede:	f00c fd1b 	bl	8022918 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015ee2:	79fb      	ldrb	r3, [r7, #7]
 8015ee4:	2b03      	cmp	r3, #3
 8015ee6:	d103      	bne.n	8015ef0 <dhcp_create_msg+0x80>
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	795b      	ldrb	r3, [r3, #5]
 8015eec:	2b03      	cmp	r3, #3
 8015eee:	d10d      	bne.n	8015f0c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	799b      	ldrb	r3, [r3, #6]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d105      	bne.n	8015f04 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015ef8:	f00c fc0e 	bl	8022718 <rand>
 8015efc:	4603      	mov	r3, r0
 8015efe:	461a      	mov	r2, r3
 8015f00:	4b45      	ldr	r3, [pc, #276]	@ (8016018 <dhcp_create_msg+0x1a8>)
 8015f02:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015f04:	4b44      	ldr	r3, [pc, #272]	@ (8016018 <dhcp_create_msg+0x1a8>)
 8015f06:	681a      	ldr	r2, [r3, #0]
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015f12:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8015f16:	2100      	movs	r1, #0
 8015f18:	6978      	ldr	r0, [r7, #20]
 8015f1a:	f00c fe8f 	bl	8022c3c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	2201      	movs	r2, #1
 8015f22:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	2201      	movs	r2, #1
 8015f28:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f003 f976 	bl	801922a <lwip_htonl>
 8015f3e:	4602      	mov	r2, r0
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015f44:	79fb      	ldrb	r3, [r7, #7]
 8015f46:	2b08      	cmp	r3, #8
 8015f48:	d010      	beq.n	8015f6c <dhcp_create_msg+0xfc>
 8015f4a:	79fb      	ldrb	r3, [r7, #7]
 8015f4c:	2b04      	cmp	r3, #4
 8015f4e:	d00d      	beq.n	8015f6c <dhcp_create_msg+0xfc>
 8015f50:	79fb      	ldrb	r3, [r7, #7]
 8015f52:	2b07      	cmp	r3, #7
 8015f54:	d00a      	beq.n	8015f6c <dhcp_create_msg+0xfc>
 8015f56:	79fb      	ldrb	r3, [r7, #7]
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d10c      	bne.n	8015f76 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015f60:	2b05      	cmp	r3, #5
 8015f62:	d003      	beq.n	8015f6c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	795b      	ldrb	r3, [r3, #5]
 8015f68:	2b04      	cmp	r3, #4
 8015f6a:	d104      	bne.n	8015f76 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	3304      	adds	r3, #4
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f76:	2300      	movs	r3, #0
 8015f78:	83fb      	strh	r3, [r7, #30]
 8015f7a:	e00c      	b.n	8015f96 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015f7c:	8bfa      	ldrh	r2, [r7, #30]
 8015f7e:	8bfb      	ldrh	r3, [r7, #30]
 8015f80:	68f9      	ldr	r1, [r7, #12]
 8015f82:	440a      	add	r2, r1
 8015f84:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8015f88:	697a      	ldr	r2, [r7, #20]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	460a      	mov	r2, r1
 8015f8e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f90:	8bfb      	ldrh	r3, [r7, #30]
 8015f92:	3301      	adds	r3, #1
 8015f94:	83fb      	strh	r3, [r7, #30]
 8015f96:	8bfb      	ldrh	r3, [r7, #30]
 8015f98:	2b05      	cmp	r3, #5
 8015f9a:	d9ef      	bls.n	8015f7c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015fa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8015fa8:	2200      	movs	r2, #0
 8015faa:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8015fae:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8015fb8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015fc2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015fcc:	2301      	movs	r3, #1
 8015fce:	2235      	movs	r2, #53	@ 0x35
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	f7ff fadb 	bl	801558c <dhcp_option>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015fe0:	79fa      	ldrb	r2, [r7, #7]
 8015fe2:	8a7b      	ldrh	r3, [r7, #18]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7ff fb05 	bl	80155f4 <dhcp_option_byte>
 8015fea:	4603      	mov	r3, r0
 8015fec:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d002      	beq.n	8015ffa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	8a7a      	ldrh	r2, [r7, #18]
 8015ff8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015ffa:	69bb      	ldr	r3, [r7, #24]
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3720      	adds	r7, #32
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}
 8016004:	08024fa4 	.word	0x08024fa4
 8016008:	08025304 	.word	0x08025304
 801600c:	08025044 	.word	0x08025044
 8016010:	08025324 	.word	0x08025324
 8016014:	08025344 	.word	0x08025344
 8016018:	20008dac 	.word	0x20008dac

0801601c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	4603      	mov	r3, r0
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
 8016028:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801602a:	89fb      	ldrh	r3, [r7, #14]
 801602c:	1c5a      	adds	r2, r3, #1
 801602e:	81fa      	strh	r2, [r7, #14]
 8016030:	461a      	mov	r2, r3
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	4413      	add	r3, r2
 8016036:	22ff      	movs	r2, #255	@ 0xff
 8016038:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801603a:	e007      	b.n	801604c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801603c:	89fb      	ldrh	r3, [r7, #14]
 801603e:	1c5a      	adds	r2, r3, #1
 8016040:	81fa      	strh	r2, [r7, #14]
 8016042:	461a      	mov	r2, r3
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	4413      	add	r3, r2
 8016048:	2200      	movs	r2, #0
 801604a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801604c:	89fb      	ldrh	r3, [r7, #14]
 801604e:	2b43      	cmp	r3, #67	@ 0x43
 8016050:	d904      	bls.n	801605c <dhcp_option_trailer+0x40>
 8016052:	89fb      	ldrh	r3, [r7, #14]
 8016054:	f003 0303 	and.w	r3, r3, #3
 8016058:	2b00      	cmp	r3, #0
 801605a:	d002      	beq.n	8016062 <dhcp_option_trailer+0x46>
 801605c:	89fb      	ldrh	r3, [r7, #14]
 801605e:	2b43      	cmp	r3, #67	@ 0x43
 8016060:	d9ec      	bls.n	801603c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016062:	89fb      	ldrh	r3, [r7, #14]
 8016064:	33f0      	adds	r3, #240	@ 0xf0
 8016066:	b29b      	uxth	r3, r3
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f004 fbc2 	bl	801a7f4 <pbuf_realloc>
}
 8016070:	bf00      	nop
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016078:	b480      	push	{r7}
 801607a:	b085      	sub	sp, #20
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d017      	beq.n	80160b6 <dhcp_supplied_address+0x3e>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801608a:	2b00      	cmp	r3, #0
 801608c:	d013      	beq.n	80160b6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016092:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	795b      	ldrb	r3, [r3, #5]
 8016098:	2b0a      	cmp	r3, #10
 801609a:	d007      	beq.n	80160ac <dhcp_supplied_address+0x34>
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	795b      	ldrb	r3, [r3, #5]
 80160a0:	2b05      	cmp	r3, #5
 80160a2:	d003      	beq.n	80160ac <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80160a8:	2b04      	cmp	r3, #4
 80160aa:	d101      	bne.n	80160b0 <dhcp_supplied_address+0x38>
 80160ac:	2301      	movs	r3, #1
 80160ae:	e000      	b.n	80160b2 <dhcp_supplied_address+0x3a>
 80160b0:	2300      	movs	r3, #0
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	e000      	b.n	80160b8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3714      	adds	r7, #20
 80160bc:	46bd      	mov	sp, r7
 80160be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c2:	4770      	bx	lr

080160c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80160cc:	4915      	ldr	r1, [pc, #84]	@ (8016124 <etharp_free_entry+0x60>)
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	4613      	mov	r3, r2
 80160d2:	005b      	lsls	r3, r3, #1
 80160d4:	4413      	add	r3, r2
 80160d6:	00db      	lsls	r3, r3, #3
 80160d8:	440b      	add	r3, r1
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d013      	beq.n	8016108 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80160e0:	4910      	ldr	r1, [pc, #64]	@ (8016124 <etharp_free_entry+0x60>)
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	4613      	mov	r3, r2
 80160e6:	005b      	lsls	r3, r3, #1
 80160e8:	4413      	add	r3, r2
 80160ea:	00db      	lsls	r3, r3, #3
 80160ec:	440b      	add	r3, r1
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f004 fd37 	bl	801ab64 <pbuf_free>
    arp_table[i].q = NULL;
 80160f6:	490b      	ldr	r1, [pc, #44]	@ (8016124 <etharp_free_entry+0x60>)
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	4613      	mov	r3, r2
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4413      	add	r3, r2
 8016100:	00db      	lsls	r3, r3, #3
 8016102:	440b      	add	r3, r1
 8016104:	2200      	movs	r2, #0
 8016106:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016108:	4906      	ldr	r1, [pc, #24]	@ (8016124 <etharp_free_entry+0x60>)
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	4613      	mov	r3, r2
 801610e:	005b      	lsls	r3, r3, #1
 8016110:	4413      	add	r3, r2
 8016112:	00db      	lsls	r3, r3, #3
 8016114:	440b      	add	r3, r1
 8016116:	3314      	adds	r3, #20
 8016118:	2200      	movs	r2, #0
 801611a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	20008db0 	.word	0x20008db0

08016128 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801612e:	2300      	movs	r3, #0
 8016130:	607b      	str	r3, [r7, #4]
 8016132:	e096      	b.n	8016262 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016134:	494f      	ldr	r1, [pc, #316]	@ (8016274 <etharp_tmr+0x14c>)
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	440b      	add	r3, r1
 8016142:	3314      	adds	r3, #20
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016148:	78fb      	ldrb	r3, [r7, #3]
 801614a:	2b00      	cmp	r3, #0
 801614c:	f000 8086 	beq.w	801625c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016150:	4948      	ldr	r1, [pc, #288]	@ (8016274 <etharp_tmr+0x14c>)
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	440b      	add	r3, r1
 801615e:	3312      	adds	r3, #18
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	3301      	adds	r3, #1
 8016164:	b298      	uxth	r0, r3
 8016166:	4943      	ldr	r1, [pc, #268]	@ (8016274 <etharp_tmr+0x14c>)
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	4613      	mov	r3, r2
 801616c:	005b      	lsls	r3, r3, #1
 801616e:	4413      	add	r3, r2
 8016170:	00db      	lsls	r3, r3, #3
 8016172:	440b      	add	r3, r1
 8016174:	3312      	adds	r3, #18
 8016176:	4602      	mov	r2, r0
 8016178:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801617a:	493e      	ldr	r1, [pc, #248]	@ (8016274 <etharp_tmr+0x14c>)
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	4613      	mov	r3, r2
 8016180:	005b      	lsls	r3, r3, #1
 8016182:	4413      	add	r3, r2
 8016184:	00db      	lsls	r3, r3, #3
 8016186:	440b      	add	r3, r1
 8016188:	3312      	adds	r3, #18
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016190:	d215      	bcs.n	80161be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016192:	4938      	ldr	r1, [pc, #224]	@ (8016274 <etharp_tmr+0x14c>)
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	4613      	mov	r3, r2
 8016198:	005b      	lsls	r3, r3, #1
 801619a:	4413      	add	r3, r2
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	440b      	add	r3, r1
 80161a0:	3314      	adds	r3, #20
 80161a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d10e      	bne.n	80161c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80161a8:	4932      	ldr	r1, [pc, #200]	@ (8016274 <etharp_tmr+0x14c>)
 80161aa:	687a      	ldr	r2, [r7, #4]
 80161ac:	4613      	mov	r3, r2
 80161ae:	005b      	lsls	r3, r3, #1
 80161b0:	4413      	add	r3, r2
 80161b2:	00db      	lsls	r3, r3, #3
 80161b4:	440b      	add	r3, r1
 80161b6:	3312      	adds	r3, #18
 80161b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161ba:	2b04      	cmp	r3, #4
 80161bc:	d903      	bls.n	80161c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f7ff ff80 	bl	80160c4 <etharp_free_entry>
 80161c4:	e04a      	b.n	801625c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80161c6:	492b      	ldr	r1, [pc, #172]	@ (8016274 <etharp_tmr+0x14c>)
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	4613      	mov	r3, r2
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	4413      	add	r3, r2
 80161d0:	00db      	lsls	r3, r3, #3
 80161d2:	440b      	add	r3, r1
 80161d4:	3314      	adds	r3, #20
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	2b03      	cmp	r3, #3
 80161da:	d10a      	bne.n	80161f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80161dc:	4925      	ldr	r1, [pc, #148]	@ (8016274 <etharp_tmr+0x14c>)
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	4613      	mov	r3, r2
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	4413      	add	r3, r2
 80161e6:	00db      	lsls	r3, r3, #3
 80161e8:	440b      	add	r3, r1
 80161ea:	3314      	adds	r3, #20
 80161ec:	2204      	movs	r2, #4
 80161ee:	701a      	strb	r2, [r3, #0]
 80161f0:	e034      	b.n	801625c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80161f2:	4920      	ldr	r1, [pc, #128]	@ (8016274 <etharp_tmr+0x14c>)
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	4613      	mov	r3, r2
 80161f8:	005b      	lsls	r3, r3, #1
 80161fa:	4413      	add	r3, r2
 80161fc:	00db      	lsls	r3, r3, #3
 80161fe:	440b      	add	r3, r1
 8016200:	3314      	adds	r3, #20
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	2b04      	cmp	r3, #4
 8016206:	d10a      	bne.n	801621e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016208:	491a      	ldr	r1, [pc, #104]	@ (8016274 <etharp_tmr+0x14c>)
 801620a:	687a      	ldr	r2, [r7, #4]
 801620c:	4613      	mov	r3, r2
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	4413      	add	r3, r2
 8016212:	00db      	lsls	r3, r3, #3
 8016214:	440b      	add	r3, r1
 8016216:	3314      	adds	r3, #20
 8016218:	2202      	movs	r2, #2
 801621a:	701a      	strb	r2, [r3, #0]
 801621c:	e01e      	b.n	801625c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801621e:	4915      	ldr	r1, [pc, #84]	@ (8016274 <etharp_tmr+0x14c>)
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	4613      	mov	r3, r2
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	4413      	add	r3, r2
 8016228:	00db      	lsls	r3, r3, #3
 801622a:	440b      	add	r3, r1
 801622c:	3314      	adds	r3, #20
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b01      	cmp	r3, #1
 8016232:	d113      	bne.n	801625c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016234:	490f      	ldr	r1, [pc, #60]	@ (8016274 <etharp_tmr+0x14c>)
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	4613      	mov	r3, r2
 801623a:	005b      	lsls	r3, r3, #1
 801623c:	4413      	add	r3, r2
 801623e:	00db      	lsls	r3, r3, #3
 8016240:	440b      	add	r3, r1
 8016242:	3308      	adds	r3, #8
 8016244:	6818      	ldr	r0, [r3, #0]
 8016246:	687a      	ldr	r2, [r7, #4]
 8016248:	4613      	mov	r3, r2
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4413      	add	r3, r2
 801624e:	00db      	lsls	r3, r3, #3
 8016250:	4a08      	ldr	r2, [pc, #32]	@ (8016274 <etharp_tmr+0x14c>)
 8016252:	4413      	add	r3, r2
 8016254:	3304      	adds	r3, #4
 8016256:	4619      	mov	r1, r3
 8016258:	f000 fe72 	bl	8016f40 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	3301      	adds	r3, #1
 8016260:	607b      	str	r3, [r7, #4]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2b09      	cmp	r3, #9
 8016266:	f77f af65 	ble.w	8016134 <etharp_tmr+0xc>
      }
    }
  }
}
 801626a:	bf00      	nop
 801626c:	bf00      	nop
 801626e:	3708      	adds	r7, #8
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	20008db0 	.word	0x20008db0

08016278 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b08a      	sub	sp, #40	@ 0x28
 801627c:	af00      	add	r7, sp, #0
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	460b      	mov	r3, r1
 8016282:	607a      	str	r2, [r7, #4]
 8016284:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016286:	230a      	movs	r3, #10
 8016288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801628a:	230a      	movs	r3, #10
 801628c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801628e:	230a      	movs	r3, #10
 8016290:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016296:	230a      	movs	r3, #10
 8016298:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801629a:	2300      	movs	r3, #0
 801629c:	83bb      	strh	r3, [r7, #28]
 801629e:	2300      	movs	r3, #0
 80162a0:	837b      	strh	r3, [r7, #26]
 80162a2:	2300      	movs	r3, #0
 80162a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162a6:	2300      	movs	r3, #0
 80162a8:	843b      	strh	r3, [r7, #32]
 80162aa:	e0ae      	b.n	801640a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80162ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162b0:	49a6      	ldr	r1, [pc, #664]	@ (801654c <etharp_find_entry+0x2d4>)
 80162b2:	4613      	mov	r3, r2
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	4413      	add	r3, r2
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	440b      	add	r3, r1
 80162bc:	3314      	adds	r3, #20
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80162c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80162c6:	2b0a      	cmp	r3, #10
 80162c8:	d105      	bne.n	80162d6 <etharp_find_entry+0x5e>
 80162ca:	7dfb      	ldrb	r3, [r7, #23]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d102      	bne.n	80162d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80162d0:	8c3b      	ldrh	r3, [r7, #32]
 80162d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80162d4:	e095      	b.n	8016402 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80162d6:	7dfb      	ldrb	r3, [r7, #23]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f000 8092 	beq.w	8016402 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80162de:	7dfb      	ldrb	r3, [r7, #23]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d009      	beq.n	80162f8 <etharp_find_entry+0x80>
 80162e4:	7dfb      	ldrb	r3, [r7, #23]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d806      	bhi.n	80162f8 <etharp_find_entry+0x80>
 80162ea:	4b99      	ldr	r3, [pc, #612]	@ (8016550 <etharp_find_entry+0x2d8>)
 80162ec:	f240 1223 	movw	r2, #291	@ 0x123
 80162f0:	4998      	ldr	r1, [pc, #608]	@ (8016554 <etharp_find_entry+0x2dc>)
 80162f2:	4899      	ldr	r0, [pc, #612]	@ (8016558 <etharp_find_entry+0x2e0>)
 80162f4:	f00c fb10 	bl	8022918 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d020      	beq.n	8016340 <etharp_find_entry+0xc8>
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	6819      	ldr	r1, [r3, #0]
 8016302:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016306:	4891      	ldr	r0, [pc, #580]	@ (801654c <etharp_find_entry+0x2d4>)
 8016308:	4613      	mov	r3, r2
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	4413      	add	r3, r2
 801630e:	00db      	lsls	r3, r3, #3
 8016310:	4403      	add	r3, r0
 8016312:	3304      	adds	r3, #4
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4299      	cmp	r1, r3
 8016318:	d112      	bne.n	8016340 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00c      	beq.n	801633a <etharp_find_entry+0xc2>
 8016320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016324:	4989      	ldr	r1, [pc, #548]	@ (801654c <etharp_find_entry+0x2d4>)
 8016326:	4613      	mov	r3, r2
 8016328:	005b      	lsls	r3, r3, #1
 801632a:	4413      	add	r3, r2
 801632c:	00db      	lsls	r3, r3, #3
 801632e:	440b      	add	r3, r1
 8016330:	3308      	adds	r3, #8
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	429a      	cmp	r2, r3
 8016338:	d102      	bne.n	8016340 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801633a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801633e:	e100      	b.n	8016542 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016340:	7dfb      	ldrb	r3, [r7, #23]
 8016342:	2b01      	cmp	r3, #1
 8016344:	d140      	bne.n	80163c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801634a:	4980      	ldr	r1, [pc, #512]	@ (801654c <etharp_find_entry+0x2d4>)
 801634c:	4613      	mov	r3, r2
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	4413      	add	r3, r2
 8016352:	00db      	lsls	r3, r3, #3
 8016354:	440b      	add	r3, r1
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d01a      	beq.n	8016392 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801635c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016360:	497a      	ldr	r1, [pc, #488]	@ (801654c <etharp_find_entry+0x2d4>)
 8016362:	4613      	mov	r3, r2
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	4413      	add	r3, r2
 8016368:	00db      	lsls	r3, r3, #3
 801636a:	440b      	add	r3, r1
 801636c:	3312      	adds	r3, #18
 801636e:	881b      	ldrh	r3, [r3, #0]
 8016370:	8bba      	ldrh	r2, [r7, #28]
 8016372:	429a      	cmp	r2, r3
 8016374:	d845      	bhi.n	8016402 <etharp_find_entry+0x18a>
            old_queue = i;
 8016376:	8c3b      	ldrh	r3, [r7, #32]
 8016378:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801637a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801637e:	4973      	ldr	r1, [pc, #460]	@ (801654c <etharp_find_entry+0x2d4>)
 8016380:	4613      	mov	r3, r2
 8016382:	005b      	lsls	r3, r3, #1
 8016384:	4413      	add	r3, r2
 8016386:	00db      	lsls	r3, r3, #3
 8016388:	440b      	add	r3, r1
 801638a:	3312      	adds	r3, #18
 801638c:	881b      	ldrh	r3, [r3, #0]
 801638e:	83bb      	strh	r3, [r7, #28]
 8016390:	e037      	b.n	8016402 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016396:	496d      	ldr	r1, [pc, #436]	@ (801654c <etharp_find_entry+0x2d4>)
 8016398:	4613      	mov	r3, r2
 801639a:	005b      	lsls	r3, r3, #1
 801639c:	4413      	add	r3, r2
 801639e:	00db      	lsls	r3, r3, #3
 80163a0:	440b      	add	r3, r1
 80163a2:	3312      	adds	r3, #18
 80163a4:	881b      	ldrh	r3, [r3, #0]
 80163a6:	8b7a      	ldrh	r2, [r7, #26]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d82a      	bhi.n	8016402 <etharp_find_entry+0x18a>
            old_pending = i;
 80163ac:	8c3b      	ldrh	r3, [r7, #32]
 80163ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80163b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163b4:	4965      	ldr	r1, [pc, #404]	@ (801654c <etharp_find_entry+0x2d4>)
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	3312      	adds	r3, #18
 80163c2:	881b      	ldrh	r3, [r3, #0]
 80163c4:	837b      	strh	r3, [r7, #26]
 80163c6:	e01c      	b.n	8016402 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80163c8:	7dfb      	ldrb	r3, [r7, #23]
 80163ca:	2b01      	cmp	r3, #1
 80163cc:	d919      	bls.n	8016402 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80163ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163d2:	495e      	ldr	r1, [pc, #376]	@ (801654c <etharp_find_entry+0x2d4>)
 80163d4:	4613      	mov	r3, r2
 80163d6:	005b      	lsls	r3, r3, #1
 80163d8:	4413      	add	r3, r2
 80163da:	00db      	lsls	r3, r3, #3
 80163dc:	440b      	add	r3, r1
 80163de:	3312      	adds	r3, #18
 80163e0:	881b      	ldrh	r3, [r3, #0]
 80163e2:	8b3a      	ldrh	r2, [r7, #24]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d80c      	bhi.n	8016402 <etharp_find_entry+0x18a>
            old_stable = i;
 80163e8:	8c3b      	ldrh	r3, [r7, #32]
 80163ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80163ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163f0:	4956      	ldr	r1, [pc, #344]	@ (801654c <etharp_find_entry+0x2d4>)
 80163f2:	4613      	mov	r3, r2
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	4413      	add	r3, r2
 80163f8:	00db      	lsls	r3, r3, #3
 80163fa:	440b      	add	r3, r1
 80163fc:	3312      	adds	r3, #18
 80163fe:	881b      	ldrh	r3, [r3, #0]
 8016400:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016402:	8c3b      	ldrh	r3, [r7, #32]
 8016404:	3301      	adds	r3, #1
 8016406:	b29b      	uxth	r3, r3
 8016408:	843b      	strh	r3, [r7, #32]
 801640a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801640e:	2b09      	cmp	r3, #9
 8016410:	f77f af4c 	ble.w	80162ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016414:	7afb      	ldrb	r3, [r7, #11]
 8016416:	f003 0302 	and.w	r3, r3, #2
 801641a:	2b00      	cmp	r3, #0
 801641c:	d108      	bne.n	8016430 <etharp_find_entry+0x1b8>
 801641e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016422:	2b0a      	cmp	r3, #10
 8016424:	d107      	bne.n	8016436 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016426:	7afb      	ldrb	r3, [r7, #11]
 8016428:	f003 0301 	and.w	r3, r3, #1
 801642c:	2b00      	cmp	r3, #0
 801642e:	d102      	bne.n	8016436 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016430:	f04f 33ff 	mov.w	r3, #4294967295
 8016434:	e085      	b.n	8016542 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801643a:	2b09      	cmp	r3, #9
 801643c:	dc02      	bgt.n	8016444 <etharp_find_entry+0x1cc>
    i = empty;
 801643e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016440:	843b      	strh	r3, [r7, #32]
 8016442:	e039      	b.n	80164b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016444:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016448:	2b09      	cmp	r3, #9
 801644a:	dc14      	bgt.n	8016476 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801644c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801644e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016454:	493d      	ldr	r1, [pc, #244]	@ (801654c <etharp_find_entry+0x2d4>)
 8016456:	4613      	mov	r3, r2
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	4413      	add	r3, r2
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	440b      	add	r3, r1
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d018      	beq.n	8016498 <etharp_find_entry+0x220>
 8016466:	4b3a      	ldr	r3, [pc, #232]	@ (8016550 <etharp_find_entry+0x2d8>)
 8016468:	f240 126d 	movw	r2, #365	@ 0x16d
 801646c:	493b      	ldr	r1, [pc, #236]	@ (801655c <etharp_find_entry+0x2e4>)
 801646e:	483a      	ldr	r0, [pc, #232]	@ (8016558 <etharp_find_entry+0x2e0>)
 8016470:	f00c fa52 	bl	8022918 <iprintf>
 8016474:	e010      	b.n	8016498 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016476:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801647a:	2b09      	cmp	r3, #9
 801647c:	dc02      	bgt.n	8016484 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801647e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016480:	843b      	strh	r3, [r7, #32]
 8016482:	e009      	b.n	8016498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016484:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016488:	2b09      	cmp	r3, #9
 801648a:	dc02      	bgt.n	8016492 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801648c:	8bfb      	ldrh	r3, [r7, #30]
 801648e:	843b      	strh	r3, [r7, #32]
 8016490:	e002      	b.n	8016498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016492:	f04f 33ff 	mov.w	r3, #4294967295
 8016496:	e054      	b.n	8016542 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801649c:	2b09      	cmp	r3, #9
 801649e:	dd06      	ble.n	80164ae <etharp_find_entry+0x236>
 80164a0:	4b2b      	ldr	r3, [pc, #172]	@ (8016550 <etharp_find_entry+0x2d8>)
 80164a2:	f240 127f 	movw	r2, #383	@ 0x17f
 80164a6:	492e      	ldr	r1, [pc, #184]	@ (8016560 <etharp_find_entry+0x2e8>)
 80164a8:	482b      	ldr	r0, [pc, #172]	@ (8016558 <etharp_find_entry+0x2e0>)
 80164aa:	f00c fa35 	bl	8022918 <iprintf>
    etharp_free_entry(i);
 80164ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7ff fe06 	bl	80160c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164bc:	2b09      	cmp	r3, #9
 80164be:	dd06      	ble.n	80164ce <etharp_find_entry+0x256>
 80164c0:	4b23      	ldr	r3, [pc, #140]	@ (8016550 <etharp_find_entry+0x2d8>)
 80164c2:	f240 1283 	movw	r2, #387	@ 0x183
 80164c6:	4926      	ldr	r1, [pc, #152]	@ (8016560 <etharp_find_entry+0x2e8>)
 80164c8:	4823      	ldr	r0, [pc, #140]	@ (8016558 <etharp_find_entry+0x2e0>)
 80164ca:	f00c fa25 	bl	8022918 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80164ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164d2:	491e      	ldr	r1, [pc, #120]	@ (801654c <etharp_find_entry+0x2d4>)
 80164d4:	4613      	mov	r3, r2
 80164d6:	005b      	lsls	r3, r3, #1
 80164d8:	4413      	add	r3, r2
 80164da:	00db      	lsls	r3, r3, #3
 80164dc:	440b      	add	r3, r1
 80164de:	3314      	adds	r3, #20
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d006      	beq.n	80164f4 <etharp_find_entry+0x27c>
 80164e6:	4b1a      	ldr	r3, [pc, #104]	@ (8016550 <etharp_find_entry+0x2d8>)
 80164e8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80164ec:	491d      	ldr	r1, [pc, #116]	@ (8016564 <etharp_find_entry+0x2ec>)
 80164ee:	481a      	ldr	r0, [pc, #104]	@ (8016558 <etharp_find_entry+0x2e0>)
 80164f0:	f00c fa12 	bl	8022918 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00b      	beq.n	8016512 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80164fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	6819      	ldr	r1, [r3, #0]
 8016502:	4812      	ldr	r0, [pc, #72]	@ (801654c <etharp_find_entry+0x2d4>)
 8016504:	4613      	mov	r3, r2
 8016506:	005b      	lsls	r3, r3, #1
 8016508:	4413      	add	r3, r2
 801650a:	00db      	lsls	r3, r3, #3
 801650c:	4403      	add	r3, r0
 801650e:	3304      	adds	r3, #4
 8016510:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016516:	490d      	ldr	r1, [pc, #52]	@ (801654c <etharp_find_entry+0x2d4>)
 8016518:	4613      	mov	r3, r2
 801651a:	005b      	lsls	r3, r3, #1
 801651c:	4413      	add	r3, r2
 801651e:	00db      	lsls	r3, r3, #3
 8016520:	440b      	add	r3, r1
 8016522:	3312      	adds	r3, #18
 8016524:	2200      	movs	r2, #0
 8016526:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801652c:	4907      	ldr	r1, [pc, #28]	@ (801654c <etharp_find_entry+0x2d4>)
 801652e:	4613      	mov	r3, r2
 8016530:	005b      	lsls	r3, r3, #1
 8016532:	4413      	add	r3, r2
 8016534:	00db      	lsls	r3, r3, #3
 8016536:	440b      	add	r3, r1
 8016538:	3308      	adds	r3, #8
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801653e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016542:	4618      	mov	r0, r3
 8016544:	3728      	adds	r7, #40	@ 0x28
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	20008db0 	.word	0x20008db0
 8016550:	08025384 	.word	0x08025384
 8016554:	08025400 	.word	0x08025400
 8016558:	08025440 	.word	0x08025440
 801655c:	08025468 	.word	0x08025468
 8016560:	08025480 	.word	0x08025480
 8016564:	08025494 	.word	0x08025494

08016568 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b088      	sub	sp, #32
 801656c:	af02      	add	r7, sp, #8
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801657c:	2b06      	cmp	r3, #6
 801657e:	d006      	beq.n	801658e <etharp_update_arp_entry+0x26>
 8016580:	4b48      	ldr	r3, [pc, #288]	@ (80166a4 <etharp_update_arp_entry+0x13c>)
 8016582:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016586:	4948      	ldr	r1, [pc, #288]	@ (80166a8 <etharp_update_arp_entry+0x140>)
 8016588:	4848      	ldr	r0, [pc, #288]	@ (80166ac <etharp_update_arp_entry+0x144>)
 801658a:	f00c f9c5 	bl	8022918 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d012      	beq.n	80165ba <etharp_update_arp_entry+0x52>
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d00e      	beq.n	80165ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	68f9      	ldr	r1, [r7, #12]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f001 fe82 	bl	80182ac <ip4_addr_isbroadcast_u32>
 80165a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d105      	bne.n	80165ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165b6:	2be0      	cmp	r3, #224	@ 0xe0
 80165b8:	d102      	bne.n	80165c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80165ba:	f06f 030f 	mvn.w	r3, #15
 80165be:	e06c      	b.n	801669a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80165c0:	78fb      	ldrb	r3, [r7, #3]
 80165c2:	68fa      	ldr	r2, [r7, #12]
 80165c4:	4619      	mov	r1, r3
 80165c6:	68b8      	ldr	r0, [r7, #8]
 80165c8:	f7ff fe56 	bl	8016278 <etharp_find_entry>
 80165cc:	4603      	mov	r3, r0
 80165ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80165d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	da02      	bge.n	80165de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80165d8:	8afb      	ldrh	r3, [r7, #22]
 80165da:	b25b      	sxtb	r3, r3
 80165dc:	e05d      	b.n	801669a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80165de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165e2:	4933      	ldr	r1, [pc, #204]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 80165e4:	4613      	mov	r3, r2
 80165e6:	005b      	lsls	r3, r3, #1
 80165e8:	4413      	add	r3, r2
 80165ea:	00db      	lsls	r3, r3, #3
 80165ec:	440b      	add	r3, r1
 80165ee:	3314      	adds	r3, #20
 80165f0:	2202      	movs	r2, #2
 80165f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80165f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165f8:	492d      	ldr	r1, [pc, #180]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 80165fa:	4613      	mov	r3, r2
 80165fc:	005b      	lsls	r3, r3, #1
 80165fe:	4413      	add	r3, r2
 8016600:	00db      	lsls	r3, r3, #3
 8016602:	440b      	add	r3, r1
 8016604:	3308      	adds	r3, #8
 8016606:	68fa      	ldr	r2, [r7, #12]
 8016608:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801660a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801660e:	4613      	mov	r3, r2
 8016610:	005b      	lsls	r3, r3, #1
 8016612:	4413      	add	r3, r2
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	3308      	adds	r3, #8
 8016618:	4a25      	ldr	r2, [pc, #148]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 801661a:	4413      	add	r3, r2
 801661c:	3304      	adds	r3, #4
 801661e:	2206      	movs	r2, #6
 8016620:	6879      	ldr	r1, [r7, #4]
 8016622:	4618      	mov	r0, r3
 8016624:	f00c fbaf 	bl	8022d86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801662c:	4920      	ldr	r1, [pc, #128]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 801662e:	4613      	mov	r3, r2
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	4413      	add	r3, r2
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	440b      	add	r3, r1
 8016638:	3312      	adds	r3, #18
 801663a:	2200      	movs	r2, #0
 801663c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801663e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016642:	491b      	ldr	r1, [pc, #108]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 8016644:	4613      	mov	r3, r2
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	4413      	add	r3, r2
 801664a:	00db      	lsls	r3, r3, #3
 801664c:	440b      	add	r3, r1
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d021      	beq.n	8016698 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016658:	4915      	ldr	r1, [pc, #84]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 801665a:	4613      	mov	r3, r2
 801665c:	005b      	lsls	r3, r3, #1
 801665e:	4413      	add	r3, r2
 8016660:	00db      	lsls	r3, r3, #3
 8016662:	440b      	add	r3, r1
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801666c:	4910      	ldr	r1, [pc, #64]	@ (80166b0 <etharp_update_arp_entry+0x148>)
 801666e:	4613      	mov	r3, r2
 8016670:	005b      	lsls	r3, r3, #1
 8016672:	4413      	add	r3, r2
 8016674:	00db      	lsls	r3, r3, #3
 8016676:	440b      	add	r3, r1
 8016678:	2200      	movs	r2, #0
 801667a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8016682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6939      	ldr	r1, [r7, #16]
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f00b fdfd 	bl	802228c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016692:	6938      	ldr	r0, [r7, #16]
 8016694:	f004 fa66 	bl	801ab64 <pbuf_free>
  }
  return ERR_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3718      	adds	r7, #24
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	08025384 	.word	0x08025384
 80166a8:	080254c0 	.word	0x080254c0
 80166ac:	08025440 	.word	0x08025440
 80166b0:	20008db0 	.word	0x20008db0

080166b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b084      	sub	sp, #16
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166bc:	2300      	movs	r3, #0
 80166be:	60fb      	str	r3, [r7, #12]
 80166c0:	e01e      	b.n	8016700 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80166c2:	4913      	ldr	r1, [pc, #76]	@ (8016710 <etharp_cleanup_netif+0x5c>)
 80166c4:	68fa      	ldr	r2, [r7, #12]
 80166c6:	4613      	mov	r3, r2
 80166c8:	005b      	lsls	r3, r3, #1
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	440b      	add	r3, r1
 80166d0:	3314      	adds	r3, #20
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80166d6:	7afb      	ldrb	r3, [r7, #11]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00e      	beq.n	80166fa <etharp_cleanup_netif+0x46>
 80166dc:	490c      	ldr	r1, [pc, #48]	@ (8016710 <etharp_cleanup_netif+0x5c>)
 80166de:	68fa      	ldr	r2, [r7, #12]
 80166e0:	4613      	mov	r3, r2
 80166e2:	005b      	lsls	r3, r3, #1
 80166e4:	4413      	add	r3, r2
 80166e6:	00db      	lsls	r3, r3, #3
 80166e8:	440b      	add	r3, r1
 80166ea:	3308      	adds	r3, #8
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d102      	bne.n	80166fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f7ff fce5 	bl	80160c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	3301      	adds	r3, #1
 80166fe:	60fb      	str	r3, [r7, #12]
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2b09      	cmp	r3, #9
 8016704:	dddd      	ble.n	80166c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016706:	bf00      	nop
 8016708:	bf00      	nop
 801670a:	3710      	adds	r7, #16
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	20008db0 	.word	0x20008db0

08016714 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016714:	b5b0      	push	{r4, r5, r7, lr}
 8016716:	b08a      	sub	sp, #40	@ 0x28
 8016718:	af04      	add	r7, sp, #16
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d107      	bne.n	8016734 <etharp_input+0x20>
 8016724:	4b3f      	ldr	r3, [pc, #252]	@ (8016824 <etharp_input+0x110>)
 8016726:	f240 228a 	movw	r2, #650	@ 0x28a
 801672a:	493f      	ldr	r1, [pc, #252]	@ (8016828 <etharp_input+0x114>)
 801672c:	483f      	ldr	r0, [pc, #252]	@ (801682c <etharp_input+0x118>)
 801672e:	f00c f8f3 	bl	8022918 <iprintf>
 8016732:	e074      	b.n	801681e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	881b      	ldrh	r3, [r3, #0]
 801673e:	b29b      	uxth	r3, r3
 8016740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016744:	d10c      	bne.n	8016760 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801674a:	2b06      	cmp	r3, #6
 801674c:	d108      	bne.n	8016760 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016752:	2b04      	cmp	r3, #4
 8016754:	d104      	bne.n	8016760 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	885b      	ldrh	r3, [r3, #2]
 801675a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801675c:	2b08      	cmp	r3, #8
 801675e:	d003      	beq.n	8016768 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f004 f9ff 	bl	801ab64 <pbuf_free>
    return;
 8016766:	e05a      	b.n	801681e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	330e      	adds	r3, #14
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	3318      	adds	r3, #24
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	3304      	adds	r3, #4
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d102      	bne.n	8016788 <etharp_input+0x74>
    for_us = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	75fb      	strb	r3, [r7, #23]
 8016786:	e009      	b.n	801679c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016788:	68ba      	ldr	r2, [r7, #8]
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	3304      	adds	r3, #4
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	429a      	cmp	r2, r3
 8016792:	bf0c      	ite	eq
 8016794:	2301      	moveq	r3, #1
 8016796:	2300      	movne	r3, #0
 8016798:	b2db      	uxtb	r3, r3
 801679a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	f103 0208 	add.w	r2, r3, #8
 80167a2:	7dfb      	ldrb	r3, [r7, #23]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <etharp_input+0x98>
 80167a8:	2301      	movs	r3, #1
 80167aa:	e000      	b.n	80167ae <etharp_input+0x9a>
 80167ac:	2302      	movs	r3, #2
 80167ae:	f107 010c 	add.w	r1, r7, #12
 80167b2:	6838      	ldr	r0, [r7, #0]
 80167b4:	f7ff fed8 	bl	8016568 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	88db      	ldrh	r3, [r3, #6]
 80167bc:	b29b      	uxth	r3, r3
 80167be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80167c2:	d003      	beq.n	80167cc <etharp_input+0xb8>
 80167c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80167c8:	d01e      	beq.n	8016808 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80167ca:	e025      	b.n	8016818 <etharp_input+0x104>
      if (for_us) {
 80167cc:	7dfb      	ldrb	r3, [r7, #23]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d021      	beq.n	8016816 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80167e8:	693a      	ldr	r2, [r7, #16]
 80167ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80167ec:	2102      	movs	r1, #2
 80167ee:	9103      	str	r1, [sp, #12]
 80167f0:	f107 010c 	add.w	r1, r7, #12
 80167f4:	9102      	str	r1, [sp, #8]
 80167f6:	9201      	str	r2, [sp, #4]
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	462b      	mov	r3, r5
 80167fc:	4622      	mov	r2, r4
 80167fe:	4601      	mov	r1, r0
 8016800:	6838      	ldr	r0, [r7, #0]
 8016802:	f000 faef 	bl	8016de4 <etharp_raw>
      break;
 8016806:	e006      	b.n	8016816 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016808:	f107 030c 	add.w	r3, r7, #12
 801680c:	4619      	mov	r1, r3
 801680e:	6838      	ldr	r0, [r7, #0]
 8016810:	f7fe fa02 	bl	8014c18 <dhcp_arp_reply>
      break;
 8016814:	e000      	b.n	8016818 <etharp_input+0x104>
      break;
 8016816:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f004 f9a3 	bl	801ab64 <pbuf_free>
}
 801681e:	3718      	adds	r7, #24
 8016820:	46bd      	mov	sp, r7
 8016822:	bdb0      	pop	{r4, r5, r7, pc}
 8016824:	08025384 	.word	0x08025384
 8016828:	08025518 	.word	0x08025518
 801682c:	08025440 	.word	0x08025440

08016830 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b086      	sub	sp, #24
 8016834:	af02      	add	r7, sp, #8
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	4613      	mov	r3, r2
 801683c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801683e:	79fa      	ldrb	r2, [r7, #7]
 8016840:	4944      	ldr	r1, [pc, #272]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 8016842:	4613      	mov	r3, r2
 8016844:	005b      	lsls	r3, r3, #1
 8016846:	4413      	add	r3, r2
 8016848:	00db      	lsls	r3, r3, #3
 801684a:	440b      	add	r3, r1
 801684c:	3314      	adds	r3, #20
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	2b01      	cmp	r3, #1
 8016852:	d806      	bhi.n	8016862 <etharp_output_to_arp_index+0x32>
 8016854:	4b40      	ldr	r3, [pc, #256]	@ (8016958 <etharp_output_to_arp_index+0x128>)
 8016856:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801685a:	4940      	ldr	r1, [pc, #256]	@ (801695c <etharp_output_to_arp_index+0x12c>)
 801685c:	4840      	ldr	r0, [pc, #256]	@ (8016960 <etharp_output_to_arp_index+0x130>)
 801685e:	f00c f85b 	bl	8022918 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016862:	79fa      	ldrb	r2, [r7, #7]
 8016864:	493b      	ldr	r1, [pc, #236]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 8016866:	4613      	mov	r3, r2
 8016868:	005b      	lsls	r3, r3, #1
 801686a:	4413      	add	r3, r2
 801686c:	00db      	lsls	r3, r3, #3
 801686e:	440b      	add	r3, r1
 8016870:	3314      	adds	r3, #20
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	2b02      	cmp	r3, #2
 8016876:	d153      	bne.n	8016920 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016878:	79fa      	ldrb	r2, [r7, #7]
 801687a:	4936      	ldr	r1, [pc, #216]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 801687c:	4613      	mov	r3, r2
 801687e:	005b      	lsls	r3, r3, #1
 8016880:	4413      	add	r3, r2
 8016882:	00db      	lsls	r3, r3, #3
 8016884:	440b      	add	r3, r1
 8016886:	3312      	adds	r3, #18
 8016888:	881b      	ldrh	r3, [r3, #0]
 801688a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801688e:	d919      	bls.n	80168c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016890:	79fa      	ldrb	r2, [r7, #7]
 8016892:	4613      	mov	r3, r2
 8016894:	005b      	lsls	r3, r3, #1
 8016896:	4413      	add	r3, r2
 8016898:	00db      	lsls	r3, r3, #3
 801689a:	4a2e      	ldr	r2, [pc, #184]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 801689c:	4413      	add	r3, r2
 801689e:	3304      	adds	r3, #4
 80168a0:	4619      	mov	r1, r3
 80168a2:	68f8      	ldr	r0, [r7, #12]
 80168a4:	f000 fb4c 	bl	8016f40 <etharp_request>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d138      	bne.n	8016920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80168ae:	79fa      	ldrb	r2, [r7, #7]
 80168b0:	4928      	ldr	r1, [pc, #160]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 80168b2:	4613      	mov	r3, r2
 80168b4:	005b      	lsls	r3, r3, #1
 80168b6:	4413      	add	r3, r2
 80168b8:	00db      	lsls	r3, r3, #3
 80168ba:	440b      	add	r3, r1
 80168bc:	3314      	adds	r3, #20
 80168be:	2203      	movs	r2, #3
 80168c0:	701a      	strb	r2, [r3, #0]
 80168c2:	e02d      	b.n	8016920 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80168c4:	79fa      	ldrb	r2, [r7, #7]
 80168c6:	4923      	ldr	r1, [pc, #140]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 80168c8:	4613      	mov	r3, r2
 80168ca:	005b      	lsls	r3, r3, #1
 80168cc:	4413      	add	r3, r2
 80168ce:	00db      	lsls	r3, r3, #3
 80168d0:	440b      	add	r3, r1
 80168d2:	3312      	adds	r3, #18
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80168da:	d321      	bcc.n	8016920 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80168dc:	79fa      	ldrb	r2, [r7, #7]
 80168de:	4613      	mov	r3, r2
 80168e0:	005b      	lsls	r3, r3, #1
 80168e2:	4413      	add	r3, r2
 80168e4:	00db      	lsls	r3, r3, #3
 80168e6:	4a1b      	ldr	r2, [pc, #108]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 80168e8:	4413      	add	r3, r2
 80168ea:	1d19      	adds	r1, r3, #4
 80168ec:	79fa      	ldrb	r2, [r7, #7]
 80168ee:	4613      	mov	r3, r2
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	4413      	add	r3, r2
 80168f4:	00db      	lsls	r3, r3, #3
 80168f6:	3308      	adds	r3, #8
 80168f8:	4a16      	ldr	r2, [pc, #88]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 80168fa:	4413      	add	r3, r2
 80168fc:	3304      	adds	r3, #4
 80168fe:	461a      	mov	r2, r3
 8016900:	68f8      	ldr	r0, [r7, #12]
 8016902:	f000 fafb 	bl	8016efc <etharp_request_dst>
 8016906:	4603      	mov	r3, r0
 8016908:	2b00      	cmp	r3, #0
 801690a:	d109      	bne.n	8016920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801690c:	79fa      	ldrb	r2, [r7, #7]
 801690e:	4911      	ldr	r1, [pc, #68]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 8016910:	4613      	mov	r3, r2
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4413      	add	r3, r2
 8016916:	00db      	lsls	r3, r3, #3
 8016918:	440b      	add	r3, r1
 801691a:	3314      	adds	r3, #20
 801691c:	2203      	movs	r2, #3
 801691e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8016926:	79fa      	ldrb	r2, [r7, #7]
 8016928:	4613      	mov	r3, r2
 801692a:	005b      	lsls	r3, r3, #1
 801692c:	4413      	add	r3, r2
 801692e:	00db      	lsls	r3, r3, #3
 8016930:	3308      	adds	r3, #8
 8016932:	4a08      	ldr	r2, [pc, #32]	@ (8016954 <etharp_output_to_arp_index+0x124>)
 8016934:	4413      	add	r3, r2
 8016936:	3304      	adds	r3, #4
 8016938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801693c:	9200      	str	r2, [sp, #0]
 801693e:	460a      	mov	r2, r1
 8016940:	68b9      	ldr	r1, [r7, #8]
 8016942:	68f8      	ldr	r0, [r7, #12]
 8016944:	f00b fca2 	bl	802228c <ethernet_output>
 8016948:	4603      	mov	r3, r0
}
 801694a:	4618      	mov	r0, r3
 801694c:	3710      	adds	r7, #16
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	20008db0 	.word	0x20008db0
 8016958:	08025384 	.word	0x08025384
 801695c:	08025538 	.word	0x08025538
 8016960:	08025440 	.word	0x08025440

08016964 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b08a      	sub	sp, #40	@ 0x28
 8016968:	af02      	add	r7, sp, #8
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d106      	bne.n	8016988 <etharp_output+0x24>
 801697a:	4b73      	ldr	r3, [pc, #460]	@ (8016b48 <etharp_output+0x1e4>)
 801697c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016980:	4972      	ldr	r1, [pc, #456]	@ (8016b4c <etharp_output+0x1e8>)
 8016982:	4873      	ldr	r0, [pc, #460]	@ (8016b50 <etharp_output+0x1ec>)
 8016984:	f00b ffc8 	bl	8022918 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d106      	bne.n	801699c <etharp_output+0x38>
 801698e:	4b6e      	ldr	r3, [pc, #440]	@ (8016b48 <etharp_output+0x1e4>)
 8016990:	f240 321f 	movw	r2, #799	@ 0x31f
 8016994:	496f      	ldr	r1, [pc, #444]	@ (8016b54 <etharp_output+0x1f0>)
 8016996:	486e      	ldr	r0, [pc, #440]	@ (8016b50 <etharp_output+0x1ec>)
 8016998:	f00b ffbe 	bl	8022918 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d106      	bne.n	80169b0 <etharp_output+0x4c>
 80169a2:	4b69      	ldr	r3, [pc, #420]	@ (8016b48 <etharp_output+0x1e4>)
 80169a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80169a8:	496b      	ldr	r1, [pc, #428]	@ (8016b58 <etharp_output+0x1f4>)
 80169aa:	4869      	ldr	r0, [pc, #420]	@ (8016b50 <etharp_output+0x1ec>)
 80169ac:	f00b ffb4 	bl	8022918 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	68f9      	ldr	r1, [r7, #12]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f001 fc78 	bl	80182ac <ip4_addr_isbroadcast_u32>
 80169bc:	4603      	mov	r3, r0
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d002      	beq.n	80169c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80169c2:	4b66      	ldr	r3, [pc, #408]	@ (8016b5c <etharp_output+0x1f8>)
 80169c4:	61fb      	str	r3, [r7, #28]
 80169c6:	e0af      	b.n	8016b28 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80169d0:	2be0      	cmp	r3, #224	@ 0xe0
 80169d2:	d118      	bne.n	8016a06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80169d4:	2301      	movs	r3, #1
 80169d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80169d8:	2300      	movs	r3, #0
 80169da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80169dc:	235e      	movs	r3, #94	@ 0x5e
 80169de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3301      	adds	r3, #1
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	3302      	adds	r3, #2
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	3303      	adds	r3, #3
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80169fe:	f107 0310 	add.w	r3, r7, #16
 8016a02:	61fb      	str	r3, [r7, #28]
 8016a04:	e090      	b.n	8016b28 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	405a      	eors	r2, r3
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	3308      	adds	r3, #8
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	4013      	ands	r3, r2
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d012      	beq.n	8016a44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a24:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	d00b      	beq.n	8016a44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	330c      	adds	r3, #12
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d003      	beq.n	8016a3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	330c      	adds	r3, #12
 8016a3a:	61bb      	str	r3, [r7, #24]
 8016a3c:	e002      	b.n	8016a44 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016a3e:	f06f 0303 	mvn.w	r3, #3
 8016a42:	e07d      	b.n	8016b40 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a44:	4b46      	ldr	r3, [pc, #280]	@ (8016b60 <etharp_output+0x1fc>)
 8016a46:	781b      	ldrb	r3, [r3, #0]
 8016a48:	4619      	mov	r1, r3
 8016a4a:	4a46      	ldr	r2, [pc, #280]	@ (8016b64 <etharp_output+0x200>)
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	005b      	lsls	r3, r3, #1
 8016a50:	440b      	add	r3, r1
 8016a52:	00db      	lsls	r3, r3, #3
 8016a54:	4413      	add	r3, r2
 8016a56:	3314      	adds	r3, #20
 8016a58:	781b      	ldrb	r3, [r3, #0]
 8016a5a:	2b01      	cmp	r3, #1
 8016a5c:	d925      	bls.n	8016aaa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a5e:	4b40      	ldr	r3, [pc, #256]	@ (8016b60 <etharp_output+0x1fc>)
 8016a60:	781b      	ldrb	r3, [r3, #0]
 8016a62:	4619      	mov	r1, r3
 8016a64:	4a3f      	ldr	r2, [pc, #252]	@ (8016b64 <etharp_output+0x200>)
 8016a66:	460b      	mov	r3, r1
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	440b      	add	r3, r1
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	4413      	add	r3, r2
 8016a70:	3308      	adds	r3, #8
 8016a72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a74:	68fa      	ldr	r2, [r7, #12]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d117      	bne.n	8016aaa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	4b38      	ldr	r3, [pc, #224]	@ (8016b60 <etharp_output+0x1fc>)
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	4618      	mov	r0, r3
 8016a84:	4937      	ldr	r1, [pc, #220]	@ (8016b64 <etharp_output+0x200>)
 8016a86:	4603      	mov	r3, r0
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	4403      	add	r3, r0
 8016a8c:	00db      	lsls	r3, r3, #3
 8016a8e:	440b      	add	r3, r1
 8016a90:	3304      	adds	r3, #4
 8016a92:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d108      	bne.n	8016aaa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016a98:	4b31      	ldr	r3, [pc, #196]	@ (8016b60 <etharp_output+0x1fc>)
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	68b9      	ldr	r1, [r7, #8]
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	f7ff fec5 	bl	8016830 <etharp_output_to_arp_index>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	e04a      	b.n	8016b40 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016aaa:	2300      	movs	r3, #0
 8016aac:	75fb      	strb	r3, [r7, #23]
 8016aae:	e031      	b.n	8016b14 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ab0:	7dfa      	ldrb	r2, [r7, #23]
 8016ab2:	492c      	ldr	r1, [pc, #176]	@ (8016b64 <etharp_output+0x200>)
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	005b      	lsls	r3, r3, #1
 8016ab8:	4413      	add	r3, r2
 8016aba:	00db      	lsls	r3, r3, #3
 8016abc:	440b      	add	r3, r1
 8016abe:	3314      	adds	r3, #20
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d923      	bls.n	8016b0e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016ac6:	7dfa      	ldrb	r2, [r7, #23]
 8016ac8:	4926      	ldr	r1, [pc, #152]	@ (8016b64 <etharp_output+0x200>)
 8016aca:	4613      	mov	r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	4413      	add	r3, r2
 8016ad0:	00db      	lsls	r3, r3, #3
 8016ad2:	440b      	add	r3, r1
 8016ad4:	3308      	adds	r3, #8
 8016ad6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ad8:	68fa      	ldr	r2, [r7, #12]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d117      	bne.n	8016b0e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	6819      	ldr	r1, [r3, #0]
 8016ae2:	7dfa      	ldrb	r2, [r7, #23]
 8016ae4:	481f      	ldr	r0, [pc, #124]	@ (8016b64 <etharp_output+0x200>)
 8016ae6:	4613      	mov	r3, r2
 8016ae8:	005b      	lsls	r3, r3, #1
 8016aea:	4413      	add	r3, r2
 8016aec:	00db      	lsls	r3, r3, #3
 8016aee:	4403      	add	r3, r0
 8016af0:	3304      	adds	r3, #4
 8016af2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016af4:	4299      	cmp	r1, r3
 8016af6:	d10a      	bne.n	8016b0e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016af8:	4a19      	ldr	r2, [pc, #100]	@ (8016b60 <etharp_output+0x1fc>)
 8016afa:	7dfb      	ldrb	r3, [r7, #23]
 8016afc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016afe:	7dfb      	ldrb	r3, [r7, #23]
 8016b00:	461a      	mov	r2, r3
 8016b02:	68b9      	ldr	r1, [r7, #8]
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f7ff fe93 	bl	8016830 <etharp_output_to_arp_index>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	e018      	b.n	8016b40 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b0e:	7dfb      	ldrb	r3, [r7, #23]
 8016b10:	3301      	adds	r3, #1
 8016b12:	75fb      	strb	r3, [r7, #23]
 8016b14:	7dfb      	ldrb	r3, [r7, #23]
 8016b16:	2b09      	cmp	r3, #9
 8016b18:	d9ca      	bls.n	8016ab0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016b1a:	68ba      	ldr	r2, [r7, #8]
 8016b1c:	69b9      	ldr	r1, [r7, #24]
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	f000 f822 	bl	8016b68 <etharp_query>
 8016b24:	4603      	mov	r3, r0
 8016b26:	e00b      	b.n	8016b40 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8016b2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016b32:	9300      	str	r3, [sp, #0]
 8016b34:	69fb      	ldr	r3, [r7, #28]
 8016b36:	68b9      	ldr	r1, [r7, #8]
 8016b38:	68f8      	ldr	r0, [r7, #12]
 8016b3a:	f00b fba7 	bl	802228c <ethernet_output>
 8016b3e:	4603      	mov	r3, r0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3720      	adds	r7, #32
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}
 8016b48:	08025384 	.word	0x08025384
 8016b4c:	08025518 	.word	0x08025518
 8016b50:	08025440 	.word	0x08025440
 8016b54:	08025568 	.word	0x08025568
 8016b58:	08025508 	.word	0x08025508
 8016b5c:	08028d2c 	.word	0x08028d2c
 8016b60:	20008ea0 	.word	0x20008ea0
 8016b64:	20008db0 	.word	0x20008db0

08016b68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b08c      	sub	sp, #48	@ 0x30
 8016b6c:	af02      	add	r7, sp, #8
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	332e      	adds	r3, #46	@ 0x2e
 8016b78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016b7a:	23ff      	movs	r3, #255	@ 0xff
 8016b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	68f9      	ldr	r1, [r7, #12]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f001 fb8e 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8016b90:	4603      	mov	r3, r0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d10c      	bne.n	8016bb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b9e:	2be0      	cmp	r3, #224	@ 0xe0
 8016ba0:	d006      	beq.n	8016bb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d003      	beq.n	8016bb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d102      	bne.n	8016bb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016bb0:	f06f 030f 	mvn.w	r3, #15
 8016bb4:	e101      	b.n	8016dba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016bb6:	68fa      	ldr	r2, [r7, #12]
 8016bb8:	2101      	movs	r1, #1
 8016bba:	68b8      	ldr	r0, [r7, #8]
 8016bbc:	f7ff fb5c 	bl	8016278 <etharp_find_entry>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016bc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	da02      	bge.n	8016bd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016bcc:	8a7b      	ldrh	r3, [r7, #18]
 8016bce:	b25b      	sxtb	r3, r3
 8016bd0:	e0f3      	b.n	8016dba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016bd2:	8a7b      	ldrh	r3, [r7, #18]
 8016bd4:	2b7e      	cmp	r3, #126	@ 0x7e
 8016bd6:	d906      	bls.n	8016be6 <etharp_query+0x7e>
 8016bd8:	4b7a      	ldr	r3, [pc, #488]	@ (8016dc4 <etharp_query+0x25c>)
 8016bda:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016bde:	497a      	ldr	r1, [pc, #488]	@ (8016dc8 <etharp_query+0x260>)
 8016be0:	487a      	ldr	r0, [pc, #488]	@ (8016dcc <etharp_query+0x264>)
 8016be2:	f00b fe99 	bl	8022918 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016be6:	8a7b      	ldrh	r3, [r7, #18]
 8016be8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016bea:	7c7a      	ldrb	r2, [r7, #17]
 8016bec:	4978      	ldr	r1, [pc, #480]	@ (8016dd0 <etharp_query+0x268>)
 8016bee:	4613      	mov	r3, r2
 8016bf0:	005b      	lsls	r3, r3, #1
 8016bf2:	4413      	add	r3, r2
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	440b      	add	r3, r1
 8016bf8:	3314      	adds	r3, #20
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d115      	bne.n	8016c2c <etharp_query+0xc4>
    is_new_entry = 1;
 8016c00:	2301      	movs	r3, #1
 8016c02:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c04:	7c7a      	ldrb	r2, [r7, #17]
 8016c06:	4972      	ldr	r1, [pc, #456]	@ (8016dd0 <etharp_query+0x268>)
 8016c08:	4613      	mov	r3, r2
 8016c0a:	005b      	lsls	r3, r3, #1
 8016c0c:	4413      	add	r3, r2
 8016c0e:	00db      	lsls	r3, r3, #3
 8016c10:	440b      	add	r3, r1
 8016c12:	3314      	adds	r3, #20
 8016c14:	2201      	movs	r2, #1
 8016c16:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016c18:	7c7a      	ldrb	r2, [r7, #17]
 8016c1a:	496d      	ldr	r1, [pc, #436]	@ (8016dd0 <etharp_query+0x268>)
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	4413      	add	r3, r2
 8016c22:	00db      	lsls	r3, r3, #3
 8016c24:	440b      	add	r3, r1
 8016c26:	3308      	adds	r3, #8
 8016c28:	68fa      	ldr	r2, [r7, #12]
 8016c2a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016c2c:	7c7a      	ldrb	r2, [r7, #17]
 8016c2e:	4968      	ldr	r1, [pc, #416]	@ (8016dd0 <etharp_query+0x268>)
 8016c30:	4613      	mov	r3, r2
 8016c32:	005b      	lsls	r3, r3, #1
 8016c34:	4413      	add	r3, r2
 8016c36:	00db      	lsls	r3, r3, #3
 8016c38:	440b      	add	r3, r1
 8016c3a:	3314      	adds	r3, #20
 8016c3c:	781b      	ldrb	r3, [r3, #0]
 8016c3e:	2b01      	cmp	r3, #1
 8016c40:	d011      	beq.n	8016c66 <etharp_query+0xfe>
 8016c42:	7c7a      	ldrb	r2, [r7, #17]
 8016c44:	4962      	ldr	r1, [pc, #392]	@ (8016dd0 <etharp_query+0x268>)
 8016c46:	4613      	mov	r3, r2
 8016c48:	005b      	lsls	r3, r3, #1
 8016c4a:	4413      	add	r3, r2
 8016c4c:	00db      	lsls	r3, r3, #3
 8016c4e:	440b      	add	r3, r1
 8016c50:	3314      	adds	r3, #20
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b01      	cmp	r3, #1
 8016c56:	d806      	bhi.n	8016c66 <etharp_query+0xfe>
 8016c58:	4b5a      	ldr	r3, [pc, #360]	@ (8016dc4 <etharp_query+0x25c>)
 8016c5a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016c5e:	495d      	ldr	r1, [pc, #372]	@ (8016dd4 <etharp_query+0x26c>)
 8016c60:	485a      	ldr	r0, [pc, #360]	@ (8016dcc <etharp_query+0x264>)
 8016c62:	f00b fe59 	bl	8022918 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016c66:	6a3b      	ldr	r3, [r7, #32]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d102      	bne.n	8016c72 <etharp_query+0x10a>
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d10c      	bne.n	8016c8c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016c72:	68b9      	ldr	r1, [r7, #8]
 8016c74:	68f8      	ldr	r0, [r7, #12]
 8016c76:	f000 f963 	bl	8016f40 <etharp_request>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d102      	bne.n	8016c8c <etharp_query+0x124>
      return result;
 8016c86:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016c8a:	e096      	b.n	8016dba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d106      	bne.n	8016ca0 <etharp_query+0x138>
 8016c92:	4b4c      	ldr	r3, [pc, #304]	@ (8016dc4 <etharp_query+0x25c>)
 8016c94:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016c98:	494f      	ldr	r1, [pc, #316]	@ (8016dd8 <etharp_query+0x270>)
 8016c9a:	484c      	ldr	r0, [pc, #304]	@ (8016dcc <etharp_query+0x264>)
 8016c9c:	f00b fe3c 	bl	8022918 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ca0:	7c7a      	ldrb	r2, [r7, #17]
 8016ca2:	494b      	ldr	r1, [pc, #300]	@ (8016dd0 <etharp_query+0x268>)
 8016ca4:	4613      	mov	r3, r2
 8016ca6:	005b      	lsls	r3, r3, #1
 8016ca8:	4413      	add	r3, r2
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	440b      	add	r3, r1
 8016cae:	3314      	adds	r3, #20
 8016cb0:	781b      	ldrb	r3, [r3, #0]
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d917      	bls.n	8016ce6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016cb6:	4a49      	ldr	r2, [pc, #292]	@ (8016ddc <etharp_query+0x274>)
 8016cb8:	7c7b      	ldrb	r3, [r7, #17]
 8016cba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016cbc:	7c7a      	ldrb	r2, [r7, #17]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4413      	add	r3, r2
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	3308      	adds	r3, #8
 8016cc8:	4a41      	ldr	r2, [pc, #260]	@ (8016dd0 <etharp_query+0x268>)
 8016cca:	4413      	add	r3, r2
 8016ccc:	3304      	adds	r3, #4
 8016cce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016cd2:	9200      	str	r2, [sp, #0]
 8016cd4:	697a      	ldr	r2, [r7, #20]
 8016cd6:	6879      	ldr	r1, [r7, #4]
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	f00b fad7 	bl	802228c <ethernet_output>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016ce4:	e067      	b.n	8016db6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016ce6:	7c7a      	ldrb	r2, [r7, #17]
 8016ce8:	4939      	ldr	r1, [pc, #228]	@ (8016dd0 <etharp_query+0x268>)
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	440b      	add	r3, r1
 8016cf4:	3314      	adds	r3, #20
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d15c      	bne.n	8016db6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d04:	e01c      	b.n	8016d40 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d06:	69fb      	ldr	r3, [r7, #28]
 8016d08:	895a      	ldrh	r2, [r3, #10]
 8016d0a:	69fb      	ldr	r3, [r7, #28]
 8016d0c:	891b      	ldrh	r3, [r3, #8]
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d10a      	bne.n	8016d28 <etharp_query+0x1c0>
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d006      	beq.n	8016d28 <etharp_query+0x1c0>
 8016d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8016dc4 <etharp_query+0x25c>)
 8016d1c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016d20:	492f      	ldr	r1, [pc, #188]	@ (8016de0 <etharp_query+0x278>)
 8016d22:	482a      	ldr	r0, [pc, #168]	@ (8016dcc <etharp_query+0x264>)
 8016d24:	f00b fdf8 	bl	8022918 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	7b1b      	ldrb	r3, [r3, #12]
 8016d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d002      	beq.n	8016d3a <etharp_query+0x1d2>
        copy_needed = 1;
 8016d34:	2301      	movs	r3, #1
 8016d36:	61bb      	str	r3, [r7, #24]
        break;
 8016d38:	e005      	b.n	8016d46 <etharp_query+0x1de>
      }
      p = p->next;
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d1df      	bne.n	8016d06 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d007      	beq.n	8016d5c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016d52:	200e      	movs	r0, #14
 8016d54:	f004 fa10 	bl	801b178 <pbuf_clone>
 8016d58:	61f8      	str	r0, [r7, #28]
 8016d5a:	e004      	b.n	8016d66 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016d60:	69f8      	ldr	r0, [r7, #28]
 8016d62:	f003 ffa5 	bl	801acb0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016d66:	69fb      	ldr	r3, [r7, #28]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d021      	beq.n	8016db0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016d6c:	7c7a      	ldrb	r2, [r7, #17]
 8016d6e:	4918      	ldr	r1, [pc, #96]	@ (8016dd0 <etharp_query+0x268>)
 8016d70:	4613      	mov	r3, r2
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	4413      	add	r3, r2
 8016d76:	00db      	lsls	r3, r3, #3
 8016d78:	440b      	add	r3, r1
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d00a      	beq.n	8016d96 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016d80:	7c7a      	ldrb	r2, [r7, #17]
 8016d82:	4913      	ldr	r1, [pc, #76]	@ (8016dd0 <etharp_query+0x268>)
 8016d84:	4613      	mov	r3, r2
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	4413      	add	r3, r2
 8016d8a:	00db      	lsls	r3, r3, #3
 8016d8c:	440b      	add	r3, r1
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	4618      	mov	r0, r3
 8016d92:	f003 fee7 	bl	801ab64 <pbuf_free>
      }
      arp_table[i].q = p;
 8016d96:	7c7a      	ldrb	r2, [r7, #17]
 8016d98:	490d      	ldr	r1, [pc, #52]	@ (8016dd0 <etharp_query+0x268>)
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	005b      	lsls	r3, r3, #1
 8016d9e:	4413      	add	r3, r2
 8016da0:	00db      	lsls	r3, r3, #3
 8016da2:	440b      	add	r3, r1
 8016da4:	69fa      	ldr	r2, [r7, #28]
 8016da6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016dae:	e002      	b.n	8016db6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016db0:	23ff      	movs	r3, #255	@ 0xff
 8016db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016dba:	4618      	mov	r0, r3
 8016dbc:	3728      	adds	r7, #40	@ 0x28
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	08025384 	.word	0x08025384
 8016dc8:	08025574 	.word	0x08025574
 8016dcc:	08025440 	.word	0x08025440
 8016dd0:	20008db0 	.word	0x20008db0
 8016dd4:	08025584 	.word	0x08025584
 8016dd8:	08025568 	.word	0x08025568
 8016ddc:	20008ea0 	.word	0x20008ea0
 8016de0:	080255ac 	.word	0x080255ac

08016de4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b08a      	sub	sp, #40	@ 0x28
 8016de8:	af02      	add	r7, sp, #8
 8016dea:	60f8      	str	r0, [r7, #12]
 8016dec:	60b9      	str	r1, [r7, #8]
 8016dee:	607a      	str	r2, [r7, #4]
 8016df0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016df2:	2300      	movs	r3, #0
 8016df4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d106      	bne.n	8016e0a <etharp_raw+0x26>
 8016dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8016ee8 <etharp_raw+0x104>)
 8016dfe:	f240 4257 	movw	r2, #1111	@ 0x457
 8016e02:	493a      	ldr	r1, [pc, #232]	@ (8016eec <etharp_raw+0x108>)
 8016e04:	483a      	ldr	r0, [pc, #232]	@ (8016ef0 <etharp_raw+0x10c>)
 8016e06:	f00b fd87 	bl	8022918 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e0e:	211c      	movs	r1, #28
 8016e10:	200e      	movs	r0, #14
 8016e12:	f003 fb91 	bl	801a538 <pbuf_alloc>
 8016e16:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016e18:	69bb      	ldr	r3, [r7, #24]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d102      	bne.n	8016e24 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e22:	e05d      	b.n	8016ee0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016e24:	69bb      	ldr	r3, [r7, #24]
 8016e26:	895b      	ldrh	r3, [r3, #10]
 8016e28:	2b1b      	cmp	r3, #27
 8016e2a:	d806      	bhi.n	8016e3a <etharp_raw+0x56>
 8016e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8016ee8 <etharp_raw+0x104>)
 8016e2e:	f240 4262 	movw	r2, #1122	@ 0x462
 8016e32:	4930      	ldr	r1, [pc, #192]	@ (8016ef4 <etharp_raw+0x110>)
 8016e34:	482e      	ldr	r0, [pc, #184]	@ (8016ef0 <etharp_raw+0x10c>)
 8016e36:	f00b fd6f 	bl	8022918 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016e3a:	69bb      	ldr	r3, [r7, #24]
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016e40:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e42:	4618      	mov	r0, r3
 8016e44:	f002 f9dc 	bl	8019200 <lwip_htons>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016e56:	2b06      	cmp	r3, #6
 8016e58:	d006      	beq.n	8016e68 <etharp_raw+0x84>
 8016e5a:	4b23      	ldr	r3, [pc, #140]	@ (8016ee8 <etharp_raw+0x104>)
 8016e5c:	f240 4269 	movw	r2, #1129	@ 0x469
 8016e60:	4925      	ldr	r1, [pc, #148]	@ (8016ef8 <etharp_raw+0x114>)
 8016e62:	4823      	ldr	r0, [pc, #140]	@ (8016ef0 <etharp_raw+0x10c>)
 8016e64:	f00b fd58 	bl	8022918 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	3308      	adds	r3, #8
 8016e6c:	2206      	movs	r2, #6
 8016e6e:	6839      	ldr	r1, [r7, #0]
 8016e70:	4618      	mov	r0, r3
 8016e72:	f00b ff88 	bl	8022d86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	3312      	adds	r3, #18
 8016e7a:	2206      	movs	r2, #6
 8016e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f00b ff81 	bl	8022d86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	330e      	adds	r3, #14
 8016e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e8a:	6812      	ldr	r2, [r2, #0]
 8016e8c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	3318      	adds	r3, #24
 8016e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016e94:	6812      	ldr	r2, [r2, #0]
 8016e96:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	701a      	strb	r2, [r3, #0]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	f042 0201 	orr.w	r2, r2, #1
 8016ea4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	f042 0208 	orr.w	r2, r2, #8
 8016eae:	709a      	strb	r2, [r3, #2]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	2206      	movs	r2, #6
 8016eb8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	2204      	movs	r2, #4
 8016ebe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016ec0:	f640 0306 	movw	r3, #2054	@ 0x806
 8016ec4:	9300      	str	r3, [sp, #0]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	68ba      	ldr	r2, [r7, #8]
 8016eca:	69b9      	ldr	r1, [r7, #24]
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f00b f9dd 	bl	802228c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016ed2:	69b8      	ldr	r0, [r7, #24]
 8016ed4:	f003 fe46 	bl	801ab64 <pbuf_free>
  p = NULL;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3720      	adds	r7, #32
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	08025384 	.word	0x08025384
 8016eec:	08025518 	.word	0x08025518
 8016ef0:	08025440 	.word	0x08025440
 8016ef4:	080255c8 	.word	0x080255c8
 8016ef8:	080255fc 	.word	0x080255fc

08016efc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b088      	sub	sp, #32
 8016f00:	af04      	add	r7, sp, #16
 8016f02:	60f8      	str	r0, [r7, #12]
 8016f04:	60b9      	str	r1, [r7, #8]
 8016f06:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f18:	2201      	movs	r2, #1
 8016f1a:	9203      	str	r2, [sp, #12]
 8016f1c:	68ba      	ldr	r2, [r7, #8]
 8016f1e:	9202      	str	r2, [sp, #8]
 8016f20:	4a06      	ldr	r2, [pc, #24]	@ (8016f3c <etharp_request_dst+0x40>)
 8016f22:	9201      	str	r2, [sp, #4]
 8016f24:	9300      	str	r3, [sp, #0]
 8016f26:	4603      	mov	r3, r0
 8016f28:	687a      	ldr	r2, [r7, #4]
 8016f2a:	68f8      	ldr	r0, [r7, #12]
 8016f2c:	f7ff ff5a 	bl	8016de4 <etharp_raw>
 8016f30:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	08028d34 	.word	0x08028d34

08016f40 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016f4a:	4a05      	ldr	r2, [pc, #20]	@ (8016f60 <etharp_request+0x20>)
 8016f4c:	6839      	ldr	r1, [r7, #0]
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f7ff ffd4 	bl	8016efc <etharp_request_dst>
 8016f54:	4603      	mov	r3, r0
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3708      	adds	r7, #8
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd80      	pop	{r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	08028d2c 	.word	0x08028d2c

08016f64 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b08e      	sub	sp, #56	@ 0x38
 8016f68:	af04      	add	r7, sp, #16
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016f6e:	4b82      	ldr	r3, [pc, #520]	@ (8017178 <icmp_input+0x214>)
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	f003 030f 	and.w	r3, r3, #15
 8016f7c:	b2db      	uxtb	r3, r3
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016f84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f86:	2b13      	cmp	r3, #19
 8016f88:	f240 80de 	bls.w	8017148 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	895b      	ldrh	r3, [r3, #10]
 8016f90:	2b03      	cmp	r3, #3
 8016f92:	f240 80db 	bls.w	801714c <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	781b      	ldrb	r3, [r3, #0]
 8016f9c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016fa0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f000 80c8 	beq.w	801713a <icmp_input+0x1d6>
 8016faa:	2b08      	cmp	r3, #8
 8016fac:	f040 80c8 	bne.w	8017140 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016fb0:	4b72      	ldr	r3, [pc, #456]	@ (801717c <icmp_input+0x218>)
 8016fb2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016fb4:	4b70      	ldr	r3, [pc, #448]	@ (8017178 <icmp_input+0x214>)
 8016fb6:	695b      	ldr	r3, [r3, #20]
 8016fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fbc:	2be0      	cmp	r3, #224	@ 0xe0
 8016fbe:	f000 80cc 	beq.w	801715a <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8017178 <icmp_input+0x214>)
 8016fc4:	695b      	ldr	r3, [r3, #20]
 8016fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8017178 <icmp_input+0x214>)
 8016fc8:	6812      	ldr	r2, [r2, #0]
 8016fca:	4611      	mov	r1, r2
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f001 f96d 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	f040 80c2 	bne.w	801715e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	891b      	ldrh	r3, [r3, #8]
 8016fde:	2b07      	cmp	r3, #7
 8016fe0:	f240 80b6 	bls.w	8017150 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016fe4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016fe6:	330e      	adds	r3, #14
 8016fe8:	4619      	mov	r1, r3
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f003 fcf2 	bl	801a9d4 <pbuf_add_header>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d04b      	beq.n	801708e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	891a      	ldrh	r2, [r3, #8]
 8016ffa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016ffc:	4413      	add	r3, r2
 8016ffe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	891b      	ldrh	r3, [r3, #8]
 8017004:	8b7a      	ldrh	r2, [r7, #26]
 8017006:	429a      	cmp	r2, r3
 8017008:	f0c0 80ab 	bcc.w	8017162 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801700c:	8b7b      	ldrh	r3, [r7, #26]
 801700e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017012:	4619      	mov	r1, r3
 8017014:	200e      	movs	r0, #14
 8017016:	f003 fa8f 	bl	801a538 <pbuf_alloc>
 801701a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	f000 80a1 	beq.w	8017166 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	895b      	ldrh	r3, [r3, #10]
 8017028:	461a      	mov	r2, r3
 801702a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801702c:	3308      	adds	r3, #8
 801702e:	429a      	cmp	r2, r3
 8017030:	d203      	bcs.n	801703a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017032:	6978      	ldr	r0, [r7, #20]
 8017034:	f003 fd96 	bl	801ab64 <pbuf_free>
          goto icmperr;
 8017038:	e096      	b.n	8017168 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017042:	4618      	mov	r0, r3
 8017044:	f00b fe9f 	bl	8022d86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801704a:	4619      	mov	r1, r3
 801704c:	6978      	ldr	r0, [r7, #20]
 801704e:	f003 fcd1 	bl	801a9f4 <pbuf_remove_header>
 8017052:	4603      	mov	r3, r0
 8017054:	2b00      	cmp	r3, #0
 8017056:	d009      	beq.n	801706c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017058:	4b49      	ldr	r3, [pc, #292]	@ (8017180 <icmp_input+0x21c>)
 801705a:	22b6      	movs	r2, #182	@ 0xb6
 801705c:	4949      	ldr	r1, [pc, #292]	@ (8017184 <icmp_input+0x220>)
 801705e:	484a      	ldr	r0, [pc, #296]	@ (8017188 <icmp_input+0x224>)
 8017060:	f00b fc5a 	bl	8022918 <iprintf>
          pbuf_free(r);
 8017064:	6978      	ldr	r0, [r7, #20]
 8017066:	f003 fd7d 	bl	801ab64 <pbuf_free>
          goto icmperr;
 801706a:	e07d      	b.n	8017168 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801706c:	6879      	ldr	r1, [r7, #4]
 801706e:	6978      	ldr	r0, [r7, #20]
 8017070:	f003 feac 	bl	801adcc <pbuf_copy>
 8017074:	4603      	mov	r3, r0
 8017076:	2b00      	cmp	r3, #0
 8017078:	d003      	beq.n	8017082 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801707a:	6978      	ldr	r0, [r7, #20]
 801707c:	f003 fd72 	bl	801ab64 <pbuf_free>
          goto icmperr;
 8017080:	e072      	b.n	8017168 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f003 fd6e 	bl	801ab64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	607b      	str	r3, [r7, #4]
 801708c:	e00f      	b.n	80170ae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801708e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017090:	330e      	adds	r3, #14
 8017092:	4619      	mov	r1, r3
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f003 fcad 	bl	801a9f4 <pbuf_remove_header>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d006      	beq.n	80170ae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80170a0:	4b37      	ldr	r3, [pc, #220]	@ (8017180 <icmp_input+0x21c>)
 80170a2:	22c7      	movs	r2, #199	@ 0xc7
 80170a4:	4939      	ldr	r1, [pc, #228]	@ (801718c <icmp_input+0x228>)
 80170a6:	4838      	ldr	r0, [pc, #224]	@ (8017188 <icmp_input+0x224>)
 80170a8:	f00b fc36 	bl	8022918 <iprintf>
          goto icmperr;
 80170ac:	e05c      	b.n	8017168 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80170b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170b6:	4619      	mov	r1, r3
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f003 fc8b 	bl	801a9d4 <pbuf_add_header>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d13c      	bne.n	801713e <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	681a      	ldr	r2, [r3, #0]
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80170d2:	4b29      	ldr	r3, [pc, #164]	@ (8017178 <icmp_input+0x214>)
 80170d4:	691a      	ldr	r2, [r3, #16]
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	2200      	movs	r2, #0
 80170de:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	885b      	ldrh	r3, [r3, #2]
 80170e4:	b29b      	uxth	r3, r3
 80170e6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d907      	bls.n	80170fe <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	885b      	ldrh	r3, [r3, #2]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	3309      	adds	r3, #9
 80170f6:	b29a      	uxth	r2, r3
 80170f8:	693b      	ldr	r3, [r7, #16]
 80170fa:	805a      	strh	r2, [r3, #2]
 80170fc:	e006      	b.n	801710c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	885b      	ldrh	r3, [r3, #2]
 8017102:	b29b      	uxth	r3, r3
 8017104:	3308      	adds	r3, #8
 8017106:	b29a      	uxth	r2, r3
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	22ff      	movs	r2, #255	@ 0xff
 8017110:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	2200      	movs	r2, #0
 8017116:	729a      	strb	r2, [r3, #10]
 8017118:	2200      	movs	r2, #0
 801711a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	9302      	str	r3, [sp, #8]
 8017120:	2301      	movs	r3, #1
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	2300      	movs	r3, #0
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	23ff      	movs	r3, #255	@ 0xff
 801712a:	2200      	movs	r2, #0
 801712c:	69f9      	ldr	r1, [r7, #28]
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f000 ff6e 	bl	8018010 <ip4_output_if>
 8017134:	4603      	mov	r3, r0
 8017136:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017138:	e001      	b.n	801713e <icmp_input+0x1da>
      break;
 801713a:	bf00      	nop
 801713c:	e000      	b.n	8017140 <icmp_input+0x1dc>
      break;
 801713e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f003 fd0f 	bl	801ab64 <pbuf_free>
  return;
 8017146:	e013      	b.n	8017170 <icmp_input+0x20c>
    goto lenerr;
 8017148:	bf00      	nop
 801714a:	e002      	b.n	8017152 <icmp_input+0x1ee>
    goto lenerr;
 801714c:	bf00      	nop
 801714e:	e000      	b.n	8017152 <icmp_input+0x1ee>
        goto lenerr;
 8017150:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f003 fd06 	bl	801ab64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017158:	e00a      	b.n	8017170 <icmp_input+0x20c>
        goto icmperr;
 801715a:	bf00      	nop
 801715c:	e004      	b.n	8017168 <icmp_input+0x204>
        goto icmperr;
 801715e:	bf00      	nop
 8017160:	e002      	b.n	8017168 <icmp_input+0x204>
          goto icmperr;
 8017162:	bf00      	nop
 8017164:	e000      	b.n	8017168 <icmp_input+0x204>
          goto icmperr;
 8017166:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f003 fcfb 	bl	801ab64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801716e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017170:	3728      	adds	r7, #40	@ 0x28
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop
 8017178:	20008ebc 	.word	0x20008ebc
 801717c:	20008ed0 	.word	0x20008ed0
 8017180:	08025640 	.word	0x08025640
 8017184:	080256b8 	.word	0x080256b8
 8017188:	080256f0 	.word	0x080256f0
 801718c:	08025718 	.word	0x08025718

08017190 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	460b      	mov	r3, r1
 801719a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801719c:	78fb      	ldrb	r3, [r7, #3]
 801719e:	461a      	mov	r2, r3
 80171a0:	2103      	movs	r1, #3
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 f814 	bl	80171d0 <icmp_send_response>
}
 80171a8:	bf00      	nop
 80171aa:	3708      	adds	r7, #8
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
 80171b8:	460b      	mov	r3, r1
 80171ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80171bc:	78fb      	ldrb	r3, [r7, #3]
 80171be:	461a      	mov	r2, r3
 80171c0:	210b      	movs	r1, #11
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f000 f804 	bl	80171d0 <icmp_send_response>
}
 80171c8:	bf00      	nop
 80171ca:	3708      	adds	r7, #8
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b08c      	sub	sp, #48	@ 0x30
 80171d4:	af04      	add	r7, sp, #16
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	460b      	mov	r3, r1
 80171da:	70fb      	strb	r3, [r7, #3]
 80171dc:	4613      	mov	r3, r2
 80171de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80171e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80171e4:	2124      	movs	r1, #36	@ 0x24
 80171e6:	2022      	movs	r0, #34	@ 0x22
 80171e8:	f003 f9a6 	bl	801a538 <pbuf_alloc>
 80171ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80171ee:	69fb      	ldr	r3, [r7, #28]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d056      	beq.n	80172a2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80171f4:	69fb      	ldr	r3, [r7, #28]
 80171f6:	895b      	ldrh	r3, [r3, #10]
 80171f8:	2b23      	cmp	r3, #35	@ 0x23
 80171fa:	d806      	bhi.n	801720a <icmp_send_response+0x3a>
 80171fc:	4b2b      	ldr	r3, [pc, #172]	@ (80172ac <icmp_send_response+0xdc>)
 80171fe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017202:	492b      	ldr	r1, [pc, #172]	@ (80172b0 <icmp_send_response+0xe0>)
 8017204:	482b      	ldr	r0, [pc, #172]	@ (80172b4 <icmp_send_response+0xe4>)
 8017206:	f00b fb87 	bl	8022918 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	78fa      	ldrb	r2, [r7, #3]
 801721a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	78ba      	ldrb	r2, [r7, #2]
 8017220:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	2200      	movs	r2, #0
 8017226:	711a      	strb	r2, [r3, #4]
 8017228:	2200      	movs	r2, #0
 801722a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	2200      	movs	r2, #0
 8017230:	719a      	strb	r2, [r3, #6]
 8017232:	2200      	movs	r2, #0
 8017234:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	f103 0008 	add.w	r0, r3, #8
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	685b      	ldr	r3, [r3, #4]
 8017242:	221c      	movs	r2, #28
 8017244:	4619      	mov	r1, r3
 8017246:	f00b fd9e 	bl	8022d86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801724a:	69bb      	ldr	r3, [r7, #24]
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017250:	f107 030c 	add.w	r3, r7, #12
 8017254:	4618      	mov	r0, r3
 8017256:	f000 fcb9 	bl	8017bcc <ip4_route>
 801725a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d01b      	beq.n	801729a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	2200      	movs	r2, #0
 8017266:	709a      	strb	r2, [r3, #2]
 8017268:	2200      	movs	r2, #0
 801726a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	895b      	ldrh	r3, [r3, #10]
 8017270:	4619      	mov	r1, r3
 8017272:	6978      	ldr	r0, [r7, #20]
 8017274:	f002 f84f 	bl	8019316 <inet_chksum>
 8017278:	4603      	mov	r3, r0
 801727a:	461a      	mov	r2, r3
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017280:	f107 020c 	add.w	r2, r7, #12
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	9302      	str	r3, [sp, #8]
 8017288:	2301      	movs	r3, #1
 801728a:	9301      	str	r3, [sp, #4]
 801728c:	2300      	movs	r3, #0
 801728e:	9300      	str	r3, [sp, #0]
 8017290:	23ff      	movs	r3, #255	@ 0xff
 8017292:	2100      	movs	r1, #0
 8017294:	69f8      	ldr	r0, [r7, #28]
 8017296:	f000 febb 	bl	8018010 <ip4_output_if>
  }
  pbuf_free(q);
 801729a:	69f8      	ldr	r0, [r7, #28]
 801729c:	f003 fc62 	bl	801ab64 <pbuf_free>
 80172a0:	e000      	b.n	80172a4 <icmp_send_response+0xd4>
    return;
 80172a2:	bf00      	nop
}
 80172a4:	3720      	adds	r7, #32
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop
 80172ac:	08025640 	.word	0x08025640
 80172b0:	0802574c 	.word	0x0802574c
 80172b4:	080256f0 	.word	0x080256f0

080172b8 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 80172b8:	b480      	push	{r7}
 80172ba:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80172bc:	4b05      	ldr	r3, [pc, #20]	@ (80172d4 <igmp_init+0x1c>)
 80172be:	4a06      	ldr	r2, [pc, #24]	@ (80172d8 <igmp_init+0x20>)
 80172c0:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80172c2:	4b06      	ldr	r3, [pc, #24]	@ (80172dc <igmp_init+0x24>)
 80172c4:	4a06      	ldr	r2, [pc, #24]	@ (80172e0 <igmp_init+0x28>)
 80172c6:	601a      	str	r2, [r3, #0]
}
 80172c8:	bf00      	nop
 80172ca:	46bd      	mov	sp, r7
 80172cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d0:	4770      	bx	lr
 80172d2:	bf00      	nop
 80172d4:	20008ea4 	.word	0x20008ea4
 80172d8:	010000e0 	.word	0x010000e0
 80172dc:	20008ea8 	.word	0x20008ea8
 80172e0:	020000e0 	.word	0x020000e0

080172e4 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b084      	sub	sp, #16
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 80172ec:	4911      	ldr	r1, [pc, #68]	@ (8017334 <igmp_start+0x50>)
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f000 f85e 	bl	80173b0 <igmp_lookup_group>
 80172f4:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d014      	beq.n	8017326 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2202      	movs	r2, #2
 8017300:	725a      	strb	r2, [r3, #9]
    group->use++;
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	7b1b      	ldrb	r3, [r3, #12]
 8017306:	3301      	adds	r3, #1
 8017308:	b2da      	uxtb	r2, r3
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017312:	2b00      	cmp	r3, #0
 8017314:	d005      	beq.n	8017322 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801731a:	2201      	movs	r2, #1
 801731c:	4905      	ldr	r1, [pc, #20]	@ (8017334 <igmp_start+0x50>)
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	4798      	blx	r3
    }

    return ERR_OK;
 8017322:	2300      	movs	r3, #0
 8017324:	e001      	b.n	801732a <igmp_start+0x46>
  }

  return ERR_MEM;
 8017326:	f04f 33ff 	mov.w	r3, #4294967295
}
 801732a:	4618      	mov	r0, r3
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	20008ea4 	.word	0x20008ea4

08017338 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017344:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d00a      	beq.n	8017362 <igmp_report_groups+0x2a>
    group = group->next;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8017352:	e006      	b.n	8017362 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8017354:	2105      	movs	r1, #5
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f000 fb7d 	bl	8017a56 <igmp_delaying_member>
    group = group->next;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d1f5      	bne.n	8017354 <igmp_report_groups+0x1c>
  }
}
 8017368:	bf00      	nop
 801736a:	bf00      	nop
 801736c:	3710      	adds	r7, #16
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}

08017372 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8017372:	b480      	push	{r7}
 8017374:	b085      	sub	sp, #20
 8017376:	af00      	add	r7, sp, #0
 8017378:	6078      	str	r0, [r7, #4]
 801737a:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017380:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8017382:	e00a      	b.n	801739a <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	685a      	ldr	r2, [r3, #4]
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	429a      	cmp	r2, r3
 801738e:	d101      	bne.n	8017394 <igmp_lookfor_group+0x22>
      return group;
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	e006      	b.n	80173a2 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d1f1      	bne.n	8017384 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3714      	adds	r7, #20
 80173a6:	46bd      	mov	sp, r7
 80173a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ac:	4770      	bx	lr
	...

080173b0 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b084      	sub	sp, #16
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173be:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 80173c0:	6839      	ldr	r1, [r7, #0]
 80173c2:	6878      	ldr	r0, [r7, #4]
 80173c4:	f7ff ffd5 	bl	8017372 <igmp_lookfor_group>
 80173c8:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d001      	beq.n	80173d4 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	e047      	b.n	8017464 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 80173d4:	200a      	movs	r0, #10
 80173d6:	f002 fc57 	bl	8019c88 <memp_malloc>
 80173da:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d03f      	beq.n	8017462 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d002      	beq.n	80173ee <igmp_lookup_group+0x3e>
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	e000      	b.n	80173f0 <igmp_lookup_group+0x40>
 80173ee:	2300      	movs	r3, #0
 80173f0:	68ba      	ldr	r2, [r7, #8]
 80173f2:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	2200      	movs	r2, #0
 80173f8:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	2200      	movs	r2, #0
 80173fe:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	2200      	movs	r2, #0
 8017404:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	2200      	movs	r2, #0
 801740a:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d113      	bne.n	801743a <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	4b15      	ldr	r3, [pc, #84]	@ (801746c <igmp_lookup_group+0xbc>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	429a      	cmp	r2, r3
 801741c:	d006      	beq.n	801742c <igmp_lookup_group+0x7c>
 801741e:	4b14      	ldr	r3, [pc, #80]	@ (8017470 <igmp_lookup_group+0xc0>)
 8017420:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8017424:	4913      	ldr	r1, [pc, #76]	@ (8017474 <igmp_lookup_group+0xc4>)
 8017426:	4814      	ldr	r0, [pc, #80]	@ (8017478 <igmp_lookup_group+0xc8>)
 8017428:	f00b fa76 	bl	8022918 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	2200      	movs	r2, #0
 8017430:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	68ba      	ldr	r2, [r7, #8]
 8017436:	629a      	str	r2, [r3, #40]	@ 0x28
 8017438:	e013      	b.n	8017462 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	681a      	ldr	r2, [r3, #0]
 801743e:	4b0b      	ldr	r3, [pc, #44]	@ (801746c <igmp_lookup_group+0xbc>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	429a      	cmp	r2, r3
 8017444:	d106      	bne.n	8017454 <igmp_lookup_group+0xa4>
 8017446:	4b0a      	ldr	r3, [pc, #40]	@ (8017470 <igmp_lookup_group+0xc0>)
 8017448:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801744c:	490b      	ldr	r1, [pc, #44]	@ (801747c <igmp_lookup_group+0xcc>)
 801744e:	480a      	ldr	r0, [pc, #40]	@ (8017478 <igmp_lookup_group+0xc8>)
 8017450:	f00b fa62 	bl	8022918 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	68ba      	ldr	r2, [r7, #8]
 8017460:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8017462:	68bb      	ldr	r3, [r7, #8]
}
 8017464:	4618      	mov	r0, r3
 8017466:	3710      	adds	r7, #16
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}
 801746c:	20008ea4 	.word	0x20008ea4
 8017470:	08025778 	.word	0x08025778
 8017474:	080257f0 	.word	0x080257f0
 8017478:	08025824 	.word	0x08025824
 801747c:	0802584c 	.word	0x0802584c

08017480 <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 8017480:	b480      	push	{r7}
 8017482:	b085      	sub	sp, #20
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 801748a:	2300      	movs	r3, #0
 801748c:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017492:	60bb      	str	r3, [r7, #8]
 8017494:	e00c      	b.n	80174b0 <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	683a      	ldr	r2, [r7, #0]
 801749c:	429a      	cmp	r2, r3
 801749e:	d104      	bne.n	80174aa <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	681a      	ldr	r2, [r3, #0]
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	601a      	str	r2, [r3, #0]
      break;
 80174a8:	e005      	b.n	80174b6 <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	60bb      	str	r3, [r7, #8]
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d1ef      	bne.n	8017496 <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d101      	bne.n	80174c0 <igmp_remove_group+0x40>
    err = ERR_ARG;
 80174bc:	23f0      	movs	r3, #240	@ 0xf0
 80174be:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80174c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3714      	adds	r7, #20
 80174c8:	46bd      	mov	sp, r7
 80174ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ce:	4770      	bx	lr

080174d0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b088      	sub	sp, #32
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	895b      	ldrh	r3, [r3, #10]
 80174e0:	2b07      	cmp	r3, #7
 80174e2:	d803      	bhi.n	80174ec <igmp_input+0x1c>
    pbuf_free(p);
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f003 fb3d 	bl	801ab64 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 80174ea:	e086      	b.n	80175fa <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	685b      	ldr	r3, [r3, #4]
 80174f0:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	895b      	ldrh	r3, [r3, #10]
 80174f6:	4619      	mov	r1, r3
 80174f8:	6978      	ldr	r0, [r7, #20]
 80174fa:	f001 ff0c 	bl	8019316 <inet_chksum>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d003      	beq.n	801750c <igmp_input+0x3c>
    pbuf_free(p);
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f003 fb2d 	bl	801ab64 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801750a:	e076      	b.n	80175fa <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801750c:	6879      	ldr	r1, [r7, #4]
 801750e:	68b8      	ldr	r0, [r7, #8]
 8017510:	f7ff ff2f 	bl	8017372 <igmp_lookfor_group>
 8017514:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d103      	bne.n	8017524 <igmp_input+0x54>
    pbuf_free(p);
 801751c:	68f8      	ldr	r0, [r7, #12]
 801751e:	f003 fb21 	bl	801ab64 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8017522:	e06a      	b.n	80175fa <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8017524:	697b      	ldr	r3, [r7, #20]
 8017526:	781b      	ldrb	r3, [r3, #0]
 8017528:	2b11      	cmp	r3, #17
 801752a:	d002      	beq.n	8017532 <igmp_input+0x62>
 801752c:	2b16      	cmp	r3, #22
 801752e:	d04f      	beq.n	80175d0 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8017530:	e05f      	b.n	80175f2 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681a      	ldr	r2, [r3, #0]
 8017536:	4b32      	ldr	r3, [pc, #200]	@ (8017600 <igmp_input+0x130>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	429a      	cmp	r2, r3
 801753c:	d125      	bne.n	801758a <igmp_input+0xba>
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	3304      	adds	r3, #4
 8017542:	2b00      	cmp	r3, #0
 8017544:	d003      	beq.n	801754e <igmp_input+0x7e>
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d11d      	bne.n	801758a <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801754e:	697b      	ldr	r3, [r7, #20]
 8017550:	785b      	ldrb	r3, [r3, #1]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d102      	bne.n	801755c <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	220a      	movs	r2, #10
 801755a:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017560:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d00c      	beq.n	8017582 <igmp_input+0xb2>
          groupref = groupref->next;
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801756e:	e008      	b.n	8017582 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	785b      	ldrb	r3, [r3, #1]
 8017574:	4619      	mov	r1, r3
 8017576:	69b8      	ldr	r0, [r7, #24]
 8017578:	f000 fa6d 	bl	8017a56 <igmp_delaying_member>
          groupref = groupref->next;
 801757c:	69bb      	ldr	r3, [r7, #24]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d1f3      	bne.n	8017570 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8017588:	e021      	b.n	80175ce <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	3304      	adds	r3, #4
 801758e:	2b00      	cmp	r3, #0
 8017590:	d02c      	beq.n	80175ec <igmp_input+0x11c>
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d028      	beq.n	80175ec <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681a      	ldr	r2, [r3, #0]
 801759e:	4b18      	ldr	r3, [pc, #96]	@ (8017600 <igmp_input+0x130>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	429a      	cmp	r2, r3
 80175a4:	d109      	bne.n	80175ba <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80175ac:	f107 0310 	add.w	r3, r7, #16
 80175b0:	4619      	mov	r1, r3
 80175b2:	68b8      	ldr	r0, [r7, #8]
 80175b4:	f7ff fedd 	bl	8017372 <igmp_lookfor_group>
 80175b8:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 80175ba:	69fb      	ldr	r3, [r7, #28]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d015      	beq.n	80175ec <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	785b      	ldrb	r3, [r3, #1]
 80175c4:	4619      	mov	r1, r3
 80175c6:	69f8      	ldr	r0, [r7, #28]
 80175c8:	f000 fa45 	bl	8017a56 <igmp_delaying_member>
      break;
 80175cc:	e00e      	b.n	80175ec <igmp_input+0x11c>
 80175ce:	e00d      	b.n	80175ec <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	7a5b      	ldrb	r3, [r3, #9]
 80175d4:	2b01      	cmp	r3, #1
 80175d6:	d10b      	bne.n	80175f0 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 80175d8:	69fb      	ldr	r3, [r7, #28]
 80175da:	2200      	movs	r2, #0
 80175dc:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	2202      	movs	r2, #2
 80175e2:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 80175e4:	69fb      	ldr	r3, [r7, #28]
 80175e6:	2200      	movs	r2, #0
 80175e8:	721a      	strb	r2, [r3, #8]
      break;
 80175ea:	e001      	b.n	80175f0 <igmp_input+0x120>
      break;
 80175ec:	bf00      	nop
 80175ee:	e000      	b.n	80175f2 <igmp_input+0x122>
      break;
 80175f0:	bf00      	nop
  }

  pbuf_free(p);
 80175f2:	68f8      	ldr	r0, [r7, #12]
 80175f4:	f003 fab6 	bl	801ab64 <pbuf_free>
  return;
 80175f8:	bf00      	nop
}
 80175fa:	3720      	adds	r7, #32
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}
 8017600:	20008ea4 	.word	0x20008ea4

08017604 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b084      	sub	sp, #16
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 801760e:	23fa      	movs	r3, #250	@ 0xfa
 8017610:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801761a:	2be0      	cmp	r3, #224	@ 0xe0
 801761c:	d009      	beq.n	8017632 <igmp_joingroup+0x2e>
 801761e:	4b26      	ldr	r3, [pc, #152]	@ (80176b8 <igmp_joingroup+0xb4>)
 8017620:	f240 12c9 	movw	r2, #457	@ 0x1c9
 8017624:	4925      	ldr	r1, [pc, #148]	@ (80176bc <igmp_joingroup+0xb8>)
 8017626:	4826      	ldr	r0, [pc, #152]	@ (80176c0 <igmp_joingroup+0xbc>)
 8017628:	f00b f976 	bl	8022918 <iprintf>
 801762c:	f06f 0305 	mvn.w	r3, #5
 8017630:	e03d      	b.n	80176ae <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	4b23      	ldr	r3, [pc, #140]	@ (80176c4 <igmp_joingroup+0xc0>)
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	429a      	cmp	r2, r3
 801763c:	d109      	bne.n	8017652 <igmp_joingroup+0x4e>
 801763e:	4b1e      	ldr	r3, [pc, #120]	@ (80176b8 <igmp_joingroup+0xb4>)
 8017640:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8017644:	4920      	ldr	r1, [pc, #128]	@ (80176c8 <igmp_joingroup+0xc4>)
 8017646:	481e      	ldr	r0, [pc, #120]	@ (80176c0 <igmp_joingroup+0xbc>)
 8017648:	f00b f966 	bl	8022918 <iprintf>
 801764c:	f06f 0305 	mvn.w	r3, #5
 8017650:	e02d      	b.n	80176ae <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8017652:	4b1e      	ldr	r3, [pc, #120]	@ (80176cc <igmp_joingroup+0xc8>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	60bb      	str	r3, [r7, #8]
 8017658:	e024      	b.n	80176a4 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017660:	f003 0320 	and.w	r3, r3, #32
 8017664:	2b00      	cmp	r3, #0
 8017666:	d01a      	beq.n	801769e <igmp_joingroup+0x9a>
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d00a      	beq.n	8017684 <igmp_joingroup+0x80>
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d006      	beq.n	8017684 <igmp_joingroup+0x80>
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	3304      	adds	r3, #4
 801767a:	681a      	ldr	r2, [r3, #0]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	429a      	cmp	r2, r3
 8017682:	d10c      	bne.n	801769e <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8017684:	6839      	ldr	r1, [r7, #0]
 8017686:	68b8      	ldr	r0, [r7, #8]
 8017688:	f000 f822 	bl	80176d0 <igmp_joingroup_netif>
 801768c:	4603      	mov	r3, r0
 801768e:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8017690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d002      	beq.n	801769e <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8017698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801769c:	e007      	b.n	80176ae <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	60bb      	str	r3, [r7, #8]
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d1d7      	bne.n	801765a <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 80176aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3710      	adds	r7, #16
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
 80176b6:	bf00      	nop
 80176b8:	08025778 	.word	0x08025778
 80176bc:	08025890 	.word	0x08025890
 80176c0:	08025824 	.word	0x08025824
 80176c4:	20008ea4 	.word	0x20008ea4
 80176c8:	080258c8 	.word	0x080258c8
 80176cc:	2001000c 	.word	0x2001000c

080176d0 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
 80176d8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80176e2:	2be0      	cmp	r3, #224	@ 0xe0
 80176e4:	d009      	beq.n	80176fa <igmp_joingroup_netif+0x2a>
 80176e6:	4b2f      	ldr	r3, [pc, #188]	@ (80177a4 <igmp_joingroup_netif+0xd4>)
 80176e8:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 80176ec:	492e      	ldr	r1, [pc, #184]	@ (80177a8 <igmp_joingroup_netif+0xd8>)
 80176ee:	482f      	ldr	r0, [pc, #188]	@ (80177ac <igmp_joingroup_netif+0xdc>)
 80176f0:	f00b f912 	bl	8022918 <iprintf>
 80176f4:	f06f 0305 	mvn.w	r3, #5
 80176f8:	e050      	b.n	801779c <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	681a      	ldr	r2, [r3, #0]
 80176fe:	4b2c      	ldr	r3, [pc, #176]	@ (80177b0 <igmp_joingroup_netif+0xe0>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	429a      	cmp	r2, r3
 8017704:	d109      	bne.n	801771a <igmp_joingroup_netif+0x4a>
 8017706:	4b27      	ldr	r3, [pc, #156]	@ (80177a4 <igmp_joingroup_netif+0xd4>)
 8017708:	f240 12ed 	movw	r2, #493	@ 0x1ed
 801770c:	4929      	ldr	r1, [pc, #164]	@ (80177b4 <igmp_joingroup_netif+0xe4>)
 801770e:	4827      	ldr	r0, [pc, #156]	@ (80177ac <igmp_joingroup_netif+0xdc>)
 8017710:	f00b f902 	bl	8022918 <iprintf>
 8017714:	f06f 0305 	mvn.w	r3, #5
 8017718:	e040      	b.n	801779c <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017720:	f003 0320 	and.w	r3, r3, #32
 8017724:	2b00      	cmp	r3, #0
 8017726:	d109      	bne.n	801773c <igmp_joingroup_netif+0x6c>
 8017728:	4b1e      	ldr	r3, [pc, #120]	@ (80177a4 <igmp_joingroup_netif+0xd4>)
 801772a:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 801772e:	4922      	ldr	r1, [pc, #136]	@ (80177b8 <igmp_joingroup_netif+0xe8>)
 8017730:	481e      	ldr	r0, [pc, #120]	@ (80177ac <igmp_joingroup_netif+0xdc>)
 8017732:	f00b f8f1 	bl	8022918 <iprintf>
 8017736:	f06f 0305 	mvn.w	r3, #5
 801773a:	e02f      	b.n	801779c <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 801773c:	6839      	ldr	r1, [r7, #0]
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7ff fe36 	bl	80173b0 <igmp_lookup_group>
 8017744:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d025      	beq.n	8017798 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	7a5b      	ldrb	r3, [r3, #9]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d119      	bne.n	8017788 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	7b1b      	ldrb	r3, [r3, #12]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d109      	bne.n	8017770 <igmp_joingroup_netif+0xa0>
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017760:	2b00      	cmp	r3, #0
 8017762:	d005      	beq.n	8017770 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017768:	2201      	movs	r2, #1
 801776a:	6839      	ldr	r1, [r7, #0]
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8017770:	2216      	movs	r2, #22
 8017772:	68f9      	ldr	r1, [r7, #12]
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f000 f9b5 	bl	8017ae4 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801777a:	2105      	movs	r1, #5
 801777c:	68f8      	ldr	r0, [r7, #12]
 801777e:	f000 f947 	bl	8017a10 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2201      	movs	r2, #1
 8017786:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	7b1b      	ldrb	r3, [r3, #12]
 801778c:	3301      	adds	r3, #1
 801778e:	b2da      	uxtb	r2, r3
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8017794:	2300      	movs	r3, #0
 8017796:	e001      	b.n	801779c <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8017798:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801779c:	4618      	mov	r0, r3
 801779e:	3710      	adds	r7, #16
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	08025778 	.word	0x08025778
 80177a8:	080258fc 	.word	0x080258fc
 80177ac:	08025824 	.word	0x08025824
 80177b0:	20008ea4 	.word	0x20008ea4
 80177b4:	08025938 	.word	0x08025938
 80177b8:	08025974 	.word	0x08025974

080177bc <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b086      	sub	sp, #24
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 80177c6:	23fa      	movs	r3, #250	@ 0xfa
 80177c8:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80177d2:	2be0      	cmp	r3, #224	@ 0xe0
 80177d4:	d009      	beq.n	80177ea <igmp_leavegroup+0x2e>
 80177d6:	4b25      	ldr	r3, [pc, #148]	@ (801786c <igmp_leavegroup+0xb0>)
 80177d8:	f240 222a 	movw	r2, #554	@ 0x22a
 80177dc:	4924      	ldr	r1, [pc, #144]	@ (8017870 <igmp_leavegroup+0xb4>)
 80177de:	4825      	ldr	r0, [pc, #148]	@ (8017874 <igmp_leavegroup+0xb8>)
 80177e0:	f00b f89a 	bl	8022918 <iprintf>
 80177e4:	f06f 0305 	mvn.w	r3, #5
 80177e8:	e03c      	b.n	8017864 <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	4b22      	ldr	r3, [pc, #136]	@ (8017878 <igmp_leavegroup+0xbc>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d109      	bne.n	801780a <igmp_leavegroup+0x4e>
 80177f6:	4b1d      	ldr	r3, [pc, #116]	@ (801786c <igmp_leavegroup+0xb0>)
 80177f8:	f240 222b 	movw	r2, #555	@ 0x22b
 80177fc:	491f      	ldr	r1, [pc, #124]	@ (801787c <igmp_leavegroup+0xc0>)
 80177fe:	481d      	ldr	r0, [pc, #116]	@ (8017874 <igmp_leavegroup+0xb8>)
 8017800:	f00b f88a 	bl	8022918 <iprintf>
 8017804:	f06f 0305 	mvn.w	r3, #5
 8017808:	e02c      	b.n	8017864 <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801780a:	4b1d      	ldr	r3, [pc, #116]	@ (8017880 <igmp_leavegroup+0xc4>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	613b      	str	r3, [r7, #16]
 8017810:	e023      	b.n	801785a <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017818:	f003 0320 	and.w	r3, r3, #32
 801781c:	2b00      	cmp	r3, #0
 801781e:	d019      	beq.n	8017854 <igmp_leavegroup+0x98>
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d00a      	beq.n	801783c <igmp_leavegroup+0x80>
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d006      	beq.n	801783c <igmp_leavegroup+0x80>
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	3304      	adds	r3, #4
 8017832:	681a      	ldr	r2, [r3, #0]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	429a      	cmp	r2, r3
 801783a:	d10b      	bne.n	8017854 <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 801783c:	6839      	ldr	r1, [r7, #0]
 801783e:	6938      	ldr	r0, [r7, #16]
 8017840:	f000 f820 	bl	8017884 <igmp_leavegroup_netif>
 8017844:	4603      	mov	r3, r0
 8017846:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8017848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d001      	beq.n	8017854 <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8017850:	7bfb      	ldrb	r3, [r7, #15]
 8017852:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	613b      	str	r3, [r7, #16]
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d1d8      	bne.n	8017812 <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 8017860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017864:	4618      	mov	r0, r3
 8017866:	3718      	adds	r7, #24
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}
 801786c:	08025778 	.word	0x08025778
 8017870:	080259ac 	.word	0x080259ac
 8017874:	08025824 	.word	0x08025824
 8017878:	20008ea4 	.word	0x20008ea4
 801787c:	080259e4 	.word	0x080259e4
 8017880:	2001000c 	.word	0x2001000c

08017884 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017896:	2be0      	cmp	r3, #224	@ 0xe0
 8017898:	d009      	beq.n	80178ae <igmp_leavegroup_netif+0x2a>
 801789a:	4b30      	ldr	r3, [pc, #192]	@ (801795c <igmp_leavegroup_netif+0xd8>)
 801789c:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 80178a0:	492f      	ldr	r1, [pc, #188]	@ (8017960 <igmp_leavegroup_netif+0xdc>)
 80178a2:	4830      	ldr	r0, [pc, #192]	@ (8017964 <igmp_leavegroup_netif+0xe0>)
 80178a4:	f00b f838 	bl	8022918 <iprintf>
 80178a8:	f06f 0305 	mvn.w	r3, #5
 80178ac:	e052      	b.n	8017954 <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	4b2d      	ldr	r3, [pc, #180]	@ (8017968 <igmp_leavegroup_netif+0xe4>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	429a      	cmp	r2, r3
 80178b8:	d109      	bne.n	80178ce <igmp_leavegroup_netif+0x4a>
 80178ba:	4b28      	ldr	r3, [pc, #160]	@ (801795c <igmp_leavegroup_netif+0xd8>)
 80178bc:	f240 224d 	movw	r2, #589	@ 0x24d
 80178c0:	492a      	ldr	r1, [pc, #168]	@ (801796c <igmp_leavegroup_netif+0xe8>)
 80178c2:	4828      	ldr	r0, [pc, #160]	@ (8017964 <igmp_leavegroup_netif+0xe0>)
 80178c4:	f00b f828 	bl	8022918 <iprintf>
 80178c8:	f06f 0305 	mvn.w	r3, #5
 80178cc:	e042      	b.n	8017954 <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80178d4:	f003 0320 	and.w	r3, r3, #32
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d109      	bne.n	80178f0 <igmp_leavegroup_netif+0x6c>
 80178dc:	4b1f      	ldr	r3, [pc, #124]	@ (801795c <igmp_leavegroup_netif+0xd8>)
 80178de:	f44f 7214 	mov.w	r2, #592	@ 0x250
 80178e2:	4923      	ldr	r1, [pc, #140]	@ (8017970 <igmp_leavegroup_netif+0xec>)
 80178e4:	481f      	ldr	r0, [pc, #124]	@ (8017964 <igmp_leavegroup_netif+0xe0>)
 80178e6:	f00b f817 	bl	8022918 <iprintf>
 80178ea:	f06f 0305 	mvn.w	r3, #5
 80178ee:	e031      	b.n	8017954 <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 80178f0:	6839      	ldr	r1, [r7, #0]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ff fd3d 	bl	8017372 <igmp_lookfor_group>
 80178f8:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d027      	beq.n	8017950 <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	7b1b      	ldrb	r3, [r3, #12]
 8017904:	2b01      	cmp	r3, #1
 8017906:	d81b      	bhi.n	8017940 <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8017908:	68f9      	ldr	r1, [r7, #12]
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff fdb8 	bl	8017480 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	7a1b      	ldrb	r3, [r3, #8]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d004      	beq.n	8017922 <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8017918:	2217      	movs	r2, #23
 801791a:	68f9      	ldr	r1, [r7, #12]
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	f000 f8e1 	bl	8017ae4 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017926:	2b00      	cmp	r3, #0
 8017928:	d005      	beq.n	8017936 <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801792e:	2200      	movs	r2, #0
 8017930:	6839      	ldr	r1, [r7, #0]
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8017936:	68f9      	ldr	r1, [r7, #12]
 8017938:	200a      	movs	r0, #10
 801793a:	f002 fa1b 	bl	8019d74 <memp_free>
 801793e:	e005      	b.n	801794c <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	7b1b      	ldrb	r3, [r3, #12]
 8017944:	3b01      	subs	r3, #1
 8017946:	b2da      	uxtb	r2, r3
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 801794c:	2300      	movs	r3, #0
 801794e:	e001      	b.n	8017954 <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8017950:	f06f 0305 	mvn.w	r3, #5
  }
}
 8017954:	4618      	mov	r0, r3
 8017956:	3710      	adds	r7, #16
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	08025778 	.word	0x08025778
 8017960:	08025a1c 	.word	0x08025a1c
 8017964:	08025824 	.word	0x08025824
 8017968:	20008ea4 	.word	0x20008ea4
 801796c:	08025a5c 	.word	0x08025a5c
 8017970:	08025a98 	.word	0x08025a98

08017974 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801797a:	4b15      	ldr	r3, [pc, #84]	@ (80179d0 <igmp_tmr+0x5c>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	607b      	str	r3, [r7, #4]
 8017980:	e01e      	b.n	80179c0 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017986:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8017988:	e014      	b.n	80179b4 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801798a:	683b      	ldr	r3, [r7, #0]
 801798c:	895b      	ldrh	r3, [r3, #10]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d00d      	beq.n	80179ae <igmp_tmr+0x3a>
        group->timer--;
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	895b      	ldrh	r3, [r3, #10]
 8017996:	3b01      	subs	r3, #1
 8017998:	b29a      	uxth	r2, r3
 801799a:	683b      	ldr	r3, [r7, #0]
 801799c:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	895b      	ldrh	r3, [r3, #10]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d103      	bne.n	80179ae <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 80179a6:	6839      	ldr	r1, [r7, #0]
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f000 f813 	bl	80179d4 <igmp_timeout>
        }
      }
      group = group->next;
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d1e7      	bne.n	801798a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	607b      	str	r3, [r7, #4]
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1dd      	bne.n	8017982 <igmp_tmr+0xe>
    }
  }
}
 80179c6:	bf00      	nop
 80179c8:	bf00      	nop
 80179ca:	3708      	adds	r7, #8
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	2001000c 	.word	0x2001000c

080179d4 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	7a5b      	ldrb	r3, [r3, #9]
 80179e2:	2b01      	cmp	r3, #1
 80179e4:	d10d      	bne.n	8017a02 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	685a      	ldr	r2, [r3, #4]
 80179ea:	4b08      	ldr	r3, [pc, #32]	@ (8017a0c <igmp_timeout+0x38>)
 80179ec:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d007      	beq.n	8017a02 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	2202      	movs	r2, #2
 80179f6:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80179f8:	2216      	movs	r2, #22
 80179fa:	6839      	ldr	r1, [r7, #0]
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f000 f871 	bl	8017ae4 <igmp_send>
  }
}
 8017a02:	bf00      	nop
 8017a04:	3708      	adds	r7, #8
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20008ea4 	.word	0x20008ea4

08017a10 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
 8017a18:	460b      	mov	r3, r1
 8017a1a:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8017a1c:	78fb      	ldrb	r3, [r7, #3]
 8017a1e:	2b02      	cmp	r3, #2
 8017a20:	d90b      	bls.n	8017a3a <igmp_start_timer+0x2a>
 8017a22:	f00a fe79 	bl	8022718 <rand>
 8017a26:	4603      	mov	r3, r0
 8017a28:	461a      	mov	r2, r3
 8017a2a:	78fb      	ldrb	r3, [r7, #3]
 8017a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8017a30:	fb01 f303 	mul.w	r3, r1, r3
 8017a34:	1ad3      	subs	r3, r2, r3
 8017a36:	b29a      	uxth	r2, r3
 8017a38:	e000      	b.n	8017a3c <igmp_start_timer+0x2c>
 8017a3a:	2201      	movs	r2, #1
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	895b      	ldrh	r3, [r3, #10]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d102      	bne.n	8017a4e <igmp_start_timer+0x3e>
    group->timer = 1;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	815a      	strh	r2, [r3, #10]
  }
}
 8017a4e:	bf00      	nop
 8017a50:	3708      	adds	r7, #8
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}

08017a56 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8017a56:	b580      	push	{r7, lr}
 8017a58:	b082      	sub	sp, #8
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	6078      	str	r0, [r7, #4]
 8017a5e:	460b      	mov	r3, r1
 8017a60:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	7a5b      	ldrb	r3, [r3, #9]
 8017a66:	2b02      	cmp	r3, #2
 8017a68:	d00d      	beq.n	8017a86 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8017a6e:	2b01      	cmp	r3, #1
 8017a70:	d111      	bne.n	8017a96 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d005      	beq.n	8017a86 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8017a7a:	78fb      	ldrb	r3, [r7, #3]
 8017a7c:	b29a      	uxth	r2, r3
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	895b      	ldrh	r3, [r3, #10]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d207      	bcs.n	8017a96 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8017a86:	78fb      	ldrb	r3, [r7, #3]
 8017a88:	4619      	mov	r1, r3
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff ffc0 	bl	8017a10 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2201      	movs	r2, #1
 8017a94:	725a      	strb	r2, [r3, #9]
  }
}
 8017a96:	bf00      	nop
 8017a98:	3708      	adds	r7, #8
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}

08017a9e <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8017a9e:	b580      	push	{r7, lr}
 8017aa0:	b08c      	sub	sp, #48	@ 0x30
 8017aa2:	af06      	add	r7, sp, #24
 8017aa4:	60f8      	str	r0, [r7, #12]
 8017aa6:	60b9      	str	r1, [r7, #8]
 8017aa8:	607a      	str	r2, [r7, #4]
 8017aaa:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8017aac:	f240 4394 	movw	r3, #1172	@ 0x494
 8017ab0:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8017ab6:	2304      	movs	r3, #4
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	f107 0314 	add.w	r3, r7, #20
 8017abe:	9303      	str	r3, [sp, #12]
 8017ac0:	683b      	ldr	r3, [r7, #0]
 8017ac2:	9302      	str	r3, [sp, #8]
 8017ac4:	2302      	movs	r3, #2
 8017ac6:	9301      	str	r3, [sp, #4]
 8017ac8:	2300      	movs	r3, #0
 8017aca:	9300      	str	r3, [sp, #0]
 8017acc:	2301      	movs	r3, #1
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	68b9      	ldr	r1, [r7, #8]
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f000 fab9 	bl	801804a <ip4_output_if_opt>
 8017ad8:	4603      	mov	r3, r0
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3718      	adds	r7, #24
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
	...

08017ae4 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b088      	sub	sp, #32
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	60f8      	str	r0, [r7, #12]
 8017aec:	60b9      	str	r1, [r7, #8]
 8017aee:	4613      	mov	r3, r2
 8017af0:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8017af2:	2300      	movs	r3, #0
 8017af4:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8017afa:	4b2f      	ldr	r3, [pc, #188]	@ (8017bb8 <igmp_send+0xd4>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8017b00:	2300      	movs	r3, #0
 8017b02:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8017b04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b08:	2108      	movs	r1, #8
 8017b0a:	2036      	movs	r0, #54	@ 0x36
 8017b0c:	f002 fd14 	bl	801a538 <pbuf_alloc>
 8017b10:	61b8      	str	r0, [r7, #24]

  if (p) {
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d04b      	beq.n	8017bb0 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	685b      	ldr	r3, [r3, #4]
 8017b1c:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	895b      	ldrh	r3, [r3, #10]
 8017b22:	2b07      	cmp	r3, #7
 8017b24:	d806      	bhi.n	8017b34 <igmp_send+0x50>
 8017b26:	4b25      	ldr	r3, [pc, #148]	@ (8017bbc <igmp_send+0xd8>)
 8017b28:	f240 3202 	movw	r2, #770	@ 0x302
 8017b2c:	4924      	ldr	r1, [pc, #144]	@ (8017bc0 <igmp_send+0xdc>)
 8017b2e:	4825      	ldr	r0, [pc, #148]	@ (8017bc4 <igmp_send+0xe0>)
 8017b30:	f00a fef2 	bl	8022918 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	3304      	adds	r3, #4
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8017b3c:	79fb      	ldrb	r3, [r7, #7]
 8017b3e:	2b16      	cmp	r3, #22
 8017b40:	d10a      	bne.n	8017b58 <igmp_send+0x74>
      dest = &(group->group_address);
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	3304      	adds	r3, #4
 8017b46:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	685a      	ldr	r2, [r3, #4]
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	2201      	movs	r2, #1
 8017b54:	721a      	strb	r2, [r3, #8]
 8017b56:	e008      	b.n	8017b6a <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8017b58:	79fb      	ldrb	r3, [r7, #7]
 8017b5a:	2b17      	cmp	r3, #23
 8017b5c:	d105      	bne.n	8017b6a <igmp_send+0x86>
        dest = &allrouters;
 8017b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8017bc8 <igmp_send+0xe4>)
 8017b60:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	685a      	ldr	r2, [r3, #4]
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8017b6a:	79fb      	ldrb	r3, [r7, #7]
 8017b6c:	2b16      	cmp	r3, #22
 8017b6e:	d002      	beq.n	8017b76 <igmp_send+0x92>
 8017b70:	79fb      	ldrb	r3, [r7, #7]
 8017b72:	2b17      	cmp	r3, #23
 8017b74:	d119      	bne.n	8017baa <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	79fa      	ldrb	r2, [r7, #7]
 8017b7a:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	2200      	movs	r2, #0
 8017b80:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	2200      	movs	r2, #0
 8017b86:	709a      	strb	r2, [r3, #2]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8017b8c:	2108      	movs	r1, #8
 8017b8e:	6978      	ldr	r0, [r7, #20]
 8017b90:	f001 fbc1 	bl	8019316 <inet_chksum>
 8017b94:	4603      	mov	r3, r0
 8017b96:	461a      	mov	r2, r3
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8017b9c:	f107 0110 	add.w	r1, r7, #16
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	69fa      	ldr	r2, [r7, #28]
 8017ba4:	69b8      	ldr	r0, [r7, #24]
 8017ba6:	f7ff ff7a 	bl	8017a9e <igmp_ip_output_if>
    }

    pbuf_free(p);
 8017baa:	69b8      	ldr	r0, [r7, #24]
 8017bac:	f002 ffda 	bl	801ab64 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8017bb0:	bf00      	nop
 8017bb2:	3720      	adds	r7, #32
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	08028bec 	.word	0x08028bec
 8017bbc:	08025778 	.word	0x08025778
 8017bc0:	08025ad4 	.word	0x08025ad4
 8017bc4:	08025824 	.word	0x08025824
 8017bc8:	20008ea8 	.word	0x20008ea8

08017bcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b085      	sub	sp, #20
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bdc:	2be0      	cmp	r3, #224	@ 0xe0
 8017bde:	d106      	bne.n	8017bee <ip4_route+0x22>
 8017be0:	4b36      	ldr	r3, [pc, #216]	@ (8017cbc <ip4_route+0xf0>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d002      	beq.n	8017bee <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8017be8:	4b34      	ldr	r3, [pc, #208]	@ (8017cbc <ip4_route+0xf0>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	e060      	b.n	8017cb0 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017bee:	4b34      	ldr	r3, [pc, #208]	@ (8017cc0 <ip4_route+0xf4>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	60fb      	str	r3, [r7, #12]
 8017bf4:	e036      	b.n	8017c64 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017bfc:	f003 0301 	and.w	r3, r3, #1
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d02b      	beq.n	8017c5e <ip4_route+0x92>
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c0c:	089b      	lsrs	r3, r3, #2
 8017c0e:	f003 0301 	and.w	r3, r3, #1
 8017c12:	b2db      	uxtb	r3, r3
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d022      	beq.n	8017c5e <ip4_route+0x92>
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	3304      	adds	r3, #4
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d01d      	beq.n	8017c5e <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681a      	ldr	r2, [r3, #0]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	3304      	adds	r3, #4
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	405a      	eors	r2, r3
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	3308      	adds	r3, #8
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	4013      	ands	r3, r2
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d101      	bne.n	8017c3e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	e038      	b.n	8017cb0 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c44:	f003 0302 	and.w	r3, r3, #2
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d108      	bne.n	8017c5e <ip4_route+0x92>
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	330c      	adds	r3, #12
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	429a      	cmp	r2, r3
 8017c58:	d101      	bne.n	8017c5e <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	e028      	b.n	8017cb0 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	60fb      	str	r3, [r7, #12]
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d1c5      	bne.n	8017bf6 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c6a:	4b16      	ldr	r3, [pc, #88]	@ (8017cc4 <ip4_route+0xf8>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d01a      	beq.n	8017ca8 <ip4_route+0xdc>
 8017c72:	4b14      	ldr	r3, [pc, #80]	@ (8017cc4 <ip4_route+0xf8>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c7a:	f003 0301 	and.w	r3, r3, #1
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d012      	beq.n	8017ca8 <ip4_route+0xdc>
 8017c82:	4b10      	ldr	r3, [pc, #64]	@ (8017cc4 <ip4_route+0xf8>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c8a:	f003 0304 	and.w	r3, r3, #4
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d00a      	beq.n	8017ca8 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c92:	4b0c      	ldr	r3, [pc, #48]	@ (8017cc4 <ip4_route+0xf8>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	3304      	adds	r3, #4
 8017c98:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d004      	beq.n	8017ca8 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8017ca6:	d101      	bne.n	8017cac <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	e001      	b.n	8017cb0 <ip4_route+0xe4>
  }

  return netif_default;
 8017cac:	4b05      	ldr	r3, [pc, #20]	@ (8017cc4 <ip4_route+0xf8>)
 8017cae:	681b      	ldr	r3, [r3, #0]
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3714      	adds	r7, #20
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cba:	4770      	bx	lr
 8017cbc:	20008eb0 	.word	0x20008eb0
 8017cc0:	2001000c 	.word	0x2001000c
 8017cc4:	20010010 	.word	0x20010010

08017cc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017cd6:	f003 0301 	and.w	r3, r3, #1
 8017cda:	b2db      	uxtb	r3, r3
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d016      	beq.n	8017d0e <ip4_input_accept+0x46>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	3304      	adds	r3, #4
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d011      	beq.n	8017d0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017cea:	4b0b      	ldr	r3, [pc, #44]	@ (8017d18 <ip4_input_accept+0x50>)
 8017cec:	695a      	ldr	r2, [r3, #20]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	3304      	adds	r3, #4
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d008      	beq.n	8017d0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017cf8:	4b07      	ldr	r3, [pc, #28]	@ (8017d18 <ip4_input_accept+0x50>)
 8017cfa:	695b      	ldr	r3, [r3, #20]
 8017cfc:	6879      	ldr	r1, [r7, #4]
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f000 fad4 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8017d04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d001      	beq.n	8017d0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e000      	b.n	8017d10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017d0e:	2300      	movs	r3, #0
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	3708      	adds	r7, #8
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	20008ebc 	.word	0x20008ebc

08017d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b088      	sub	sp, #32
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017d26:	2301      	movs	r3, #1
 8017d28:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	685b      	ldr	r3, [r3, #4]
 8017d2e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017d30:	69fb      	ldr	r3, [r7, #28]
 8017d32:	781b      	ldrb	r3, [r3, #0]
 8017d34:	091b      	lsrs	r3, r3, #4
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	2b04      	cmp	r3, #4
 8017d3a:	d004      	beq.n	8017d46 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f002 ff11 	bl	801ab64 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017d42:	2300      	movs	r3, #0
 8017d44:	e157      	b.n	8017ff6 <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	781b      	ldrb	r3, [r3, #0]
 8017d4a:	f003 030f 	and.w	r3, r3, #15
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	009b      	lsls	r3, r3, #2
 8017d52:	b2db      	uxtb	r3, r3
 8017d54:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017d56:	69fb      	ldr	r3, [r7, #28]
 8017d58:	885b      	ldrh	r3, [r3, #2]
 8017d5a:	b29b      	uxth	r3, r3
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f001 fa4f 	bl	8019200 <lwip_htons>
 8017d62:	4603      	mov	r3, r0
 8017d64:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	891b      	ldrh	r3, [r3, #8]
 8017d6a:	8a3a      	ldrh	r2, [r7, #16]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d204      	bcs.n	8017d7a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017d70:	8a3b      	ldrh	r3, [r7, #16]
 8017d72:	4619      	mov	r1, r3
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f002 fd3d 	bl	801a7f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	895b      	ldrh	r3, [r3, #10]
 8017d7e:	8a7a      	ldrh	r2, [r7, #18]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d807      	bhi.n	8017d94 <ip4_input+0x78>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	891b      	ldrh	r3, [r3, #8]
 8017d88:	8a3a      	ldrh	r2, [r7, #16]
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d802      	bhi.n	8017d94 <ip4_input+0x78>
 8017d8e:	8a7b      	ldrh	r3, [r7, #18]
 8017d90:	2b13      	cmp	r3, #19
 8017d92:	d804      	bhi.n	8017d9e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f002 fee5 	bl	801ab64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	e12b      	b.n	8017ff6 <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017d9e:	69fb      	ldr	r3, [r7, #28]
 8017da0:	691b      	ldr	r3, [r3, #16]
 8017da2:	4a97      	ldr	r2, [pc, #604]	@ (8018000 <ip4_input+0x2e4>)
 8017da4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	4a95      	ldr	r2, [pc, #596]	@ (8018000 <ip4_input+0x2e4>)
 8017dac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017dae:	4b94      	ldr	r3, [pc, #592]	@ (8018000 <ip4_input+0x2e4>)
 8017db0:	695b      	ldr	r3, [r3, #20]
 8017db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017db6:	2be0      	cmp	r3, #224	@ 0xe0
 8017db8:	d120      	bne.n	8017dfc <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017dc0:	f003 0320 	and.w	r3, r3, #32
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d016      	beq.n	8017df6 <ip4_input+0xda>
 8017dc8:	498e      	ldr	r1, [pc, #568]	@ (8018004 <ip4_input+0x2e8>)
 8017dca:	6838      	ldr	r0, [r7, #0]
 8017dcc:	f7ff fad1 	bl	8017372 <igmp_lookfor_group>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d00f      	beq.n	8017df6 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8017dd6:	4b8c      	ldr	r3, [pc, #560]	@ (8018008 <ip4_input+0x2ec>)
 8017dd8:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8017dda:	4b89      	ldr	r3, [pc, #548]	@ (8018000 <ip4_input+0x2e4>)
 8017ddc:	695a      	ldr	r2, [r3, #20]
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d105      	bne.n	8017df0 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8017de4:	4b86      	ldr	r3, [pc, #536]	@ (8018000 <ip4_input+0x2e4>)
 8017de6:	691b      	ldr	r3, [r3, #16]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d101      	bne.n	8017df0 <ip4_input+0xd4>
        check_ip_src = 0;
 8017dec:	2300      	movs	r3, #0
 8017dee:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8017df4:	e02a      	b.n	8017e4c <ip4_input+0x130>
    } else {
      netif = NULL;
 8017df6:	2300      	movs	r3, #0
 8017df8:	61bb      	str	r3, [r7, #24]
 8017dfa:	e027      	b.n	8017e4c <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017dfc:	6838      	ldr	r0, [r7, #0]
 8017dfe:	f7ff ff63 	bl	8017cc8 <ip4_input_accept>
 8017e02:	4603      	mov	r3, r0
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d002      	beq.n	8017e0e <ip4_input+0xf2>
      netif = inp;
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	61bb      	str	r3, [r7, #24]
 8017e0c:	e01e      	b.n	8017e4c <ip4_input+0x130>
    } else {
      netif = NULL;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017e12:	4b7b      	ldr	r3, [pc, #492]	@ (8018000 <ip4_input+0x2e4>)
 8017e14:	695b      	ldr	r3, [r3, #20]
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8017e1a:	d017      	beq.n	8017e4c <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017e1c:	4b7b      	ldr	r3, [pc, #492]	@ (801800c <ip4_input+0x2f0>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	61bb      	str	r3, [r7, #24]
 8017e22:	e00e      	b.n	8017e42 <ip4_input+0x126>
          if (netif == inp) {
 8017e24:	69ba      	ldr	r2, [r7, #24]
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d006      	beq.n	8017e3a <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017e2c:	69b8      	ldr	r0, [r7, #24]
 8017e2e:	f7ff ff4b 	bl	8017cc8 <ip4_input_accept>
 8017e32:	4603      	mov	r3, r0
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d108      	bne.n	8017e4a <ip4_input+0x12e>
 8017e38:	e000      	b.n	8017e3c <ip4_input+0x120>
            continue;
 8017e3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017e3c:	69bb      	ldr	r3, [r7, #24]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	61bb      	str	r3, [r7, #24]
 8017e42:	69bb      	ldr	r3, [r7, #24]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d1ed      	bne.n	8017e24 <ip4_input+0x108>
 8017e48:	e000      	b.n	8017e4c <ip4_input+0x130>
            break;
 8017e4a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017e4c:	69bb      	ldr	r3, [r7, #24]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d111      	bne.n	8017e76 <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017e52:	69fb      	ldr	r3, [r7, #28]
 8017e54:	7a5b      	ldrb	r3, [r3, #9]
 8017e56:	2b11      	cmp	r3, #17
 8017e58:	d10d      	bne.n	8017e76 <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017e5a:	8a7b      	ldrh	r3, [r7, #18]
 8017e5c:	69fa      	ldr	r2, [r7, #28]
 8017e5e:	4413      	add	r3, r2
 8017e60:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	885b      	ldrh	r3, [r3, #2]
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8017e6c:	d103      	bne.n	8017e76 <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017e72:	2300      	movs	r3, #0
 8017e74:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d017      	beq.n	8017eac <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017e7c:	4b60      	ldr	r3, [pc, #384]	@ (8018000 <ip4_input+0x2e4>)
 8017e7e:	691b      	ldr	r3, [r3, #16]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d013      	beq.n	8017eac <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e84:	4b5e      	ldr	r3, [pc, #376]	@ (8018000 <ip4_input+0x2e4>)
 8017e86:	691b      	ldr	r3, [r3, #16]
 8017e88:	6839      	ldr	r1, [r7, #0]
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f000 fa0e 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8017e90:	4603      	mov	r3, r0
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d105      	bne.n	8017ea2 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017e96:	4b5a      	ldr	r3, [pc, #360]	@ (8018000 <ip4_input+0x2e4>)
 8017e98:	691b      	ldr	r3, [r3, #16]
 8017e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e9e:	2be0      	cmp	r3, #224	@ 0xe0
 8017ea0:	d104      	bne.n	8017eac <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f002 fe5e 	bl	801ab64 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	e0a4      	b.n	8017ff6 <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017eac:	69bb      	ldr	r3, [r7, #24]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d104      	bne.n	8017ebc <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f002 fe56 	bl	801ab64 <pbuf_free>
    return ERR_OK;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	e09c      	b.n	8017ff6 <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	88db      	ldrh	r3, [r3, #6]
 8017ec0:	b29b      	uxth	r3, r3
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017ec8:	4013      	ands	r3, r2
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00b      	beq.n	8017ee6 <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f000 fe5c 	bl	8018b8c <ip4_reass>
 8017ed4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d101      	bne.n	8017ee0 <ip4_input+0x1c4>
      return ERR_OK;
 8017edc:	2300      	movs	r3, #0
 8017ede:	e08a      	b.n	8017ff6 <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ee6:	4a46      	ldr	r2, [pc, #280]	@ (8018000 <ip4_input+0x2e4>)
 8017ee8:	69bb      	ldr	r3, [r7, #24]
 8017eea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017eec:	4a44      	ldr	r2, [pc, #272]	@ (8018000 <ip4_input+0x2e4>)
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ef2:	4a43      	ldr	r2, [pc, #268]	@ (8018000 <ip4_input+0x2e4>)
 8017ef4:	69fb      	ldr	r3, [r7, #28]
 8017ef6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017ef8:	69fb      	ldr	r3, [r7, #28]
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	f003 030f 	and.w	r3, r3, #15
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	009b      	lsls	r3, r3, #2
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	461a      	mov	r2, r3
 8017f08:	4b3d      	ldr	r3, [pc, #244]	@ (8018000 <ip4_input+0x2e4>)
 8017f0a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017f0c:	8a7b      	ldrh	r3, [r7, #18]
 8017f0e:	4619      	mov	r1, r3
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f002 fd6f 	bl	801a9f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	7a5b      	ldrb	r3, [r3, #9]
 8017f1a:	3b01      	subs	r3, #1
 8017f1c:	2b10      	cmp	r3, #16
 8017f1e:	d83a      	bhi.n	8017f96 <ip4_input+0x27a>
 8017f20:	a201      	add	r2, pc, #4	@ (adr r2, 8017f28 <ip4_input+0x20c>)
 8017f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f26:	bf00      	nop
 8017f28:	08017f81 	.word	0x08017f81
 8017f2c:	08017f8b 	.word	0x08017f8b
 8017f30:	08017f97 	.word	0x08017f97
 8017f34:	08017f97 	.word	0x08017f97
 8017f38:	08017f97 	.word	0x08017f97
 8017f3c:	08017f77 	.word	0x08017f77
 8017f40:	08017f97 	.word	0x08017f97
 8017f44:	08017f97 	.word	0x08017f97
 8017f48:	08017f97 	.word	0x08017f97
 8017f4c:	08017f97 	.word	0x08017f97
 8017f50:	08017f97 	.word	0x08017f97
 8017f54:	08017f97 	.word	0x08017f97
 8017f58:	08017f97 	.word	0x08017f97
 8017f5c:	08017f97 	.word	0x08017f97
 8017f60:	08017f97 	.word	0x08017f97
 8017f64:	08017f97 	.word	0x08017f97
 8017f68:	08017f6d 	.word	0x08017f6d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017f6c:	6839      	ldr	r1, [r7, #0]
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f009 fbe4 	bl	802173c <udp_input>
        break;
 8017f74:	e02c      	b.n	8017fd0 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017f76:	6839      	ldr	r1, [r7, #0]
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f004 ffa1 	bl	801cec0 <tcp_input>
        break;
 8017f7e:	e027      	b.n	8017fd0 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017f80:	6839      	ldr	r1, [r7, #0]
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f7fe ffee 	bl	8016f64 <icmp_input>
        break;
 8017f88:	e022      	b.n	8017fd0 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 8017f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8018004 <ip4_input+0x2e8>)
 8017f8c:	6839      	ldr	r1, [r7, #0]
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f7ff fa9e 	bl	80174d0 <igmp_input>
        break;
 8017f94:	e01c      	b.n	8017fd0 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017f96:	4b1a      	ldr	r3, [pc, #104]	@ (8018000 <ip4_input+0x2e4>)
 8017f98:	695b      	ldr	r3, [r3, #20]
 8017f9a:	69b9      	ldr	r1, [r7, #24]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f000 f985 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d10f      	bne.n	8017fc8 <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fa8:	4b15      	ldr	r3, [pc, #84]	@ (8018000 <ip4_input+0x2e4>)
 8017faa:	695b      	ldr	r3, [r3, #20]
 8017fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017fb0:	2be0      	cmp	r3, #224	@ 0xe0
 8017fb2:	d009      	beq.n	8017fc8 <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017fb8:	4619      	mov	r1, r3
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f002 fd8d 	bl	801aada <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017fc0:	2102      	movs	r1, #2
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f7ff f8e4 	bl	8017190 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f002 fdcb 	bl	801ab64 <pbuf_free>
        break;
 8017fce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8018000 <ip4_input+0x2e4>)
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8018000 <ip4_input+0x2e4>)
 8017fd8:	2200      	movs	r2, #0
 8017fda:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017fdc:	4b08      	ldr	r3, [pc, #32]	@ (8018000 <ip4_input+0x2e4>)
 8017fde:	2200      	movs	r2, #0
 8017fe0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017fe2:	4b07      	ldr	r3, [pc, #28]	@ (8018000 <ip4_input+0x2e4>)
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017fe8:	4b05      	ldr	r3, [pc, #20]	@ (8018000 <ip4_input+0x2e4>)
 8017fea:	2200      	movs	r2, #0
 8017fec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017fee:	4b04      	ldr	r3, [pc, #16]	@ (8018000 <ip4_input+0x2e4>)
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017ff4:	2300      	movs	r3, #0
}
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3720      	adds	r7, #32
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
 8017ffe:	bf00      	nop
 8018000:	20008ebc 	.word	0x20008ebc
 8018004:	20008ed0 	.word	0x20008ed0
 8018008:	010000e0 	.word	0x010000e0
 801800c:	2001000c 	.word	0x2001000c

08018010 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b08a      	sub	sp, #40	@ 0x28
 8018014:	af06      	add	r7, sp, #24
 8018016:	60f8      	str	r0, [r7, #12]
 8018018:	60b9      	str	r1, [r7, #8]
 801801a:	607a      	str	r2, [r7, #4]
 801801c:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801801e:	78fa      	ldrb	r2, [r7, #3]
 8018020:	2300      	movs	r3, #0
 8018022:	9304      	str	r3, [sp, #16]
 8018024:	2300      	movs	r3, #0
 8018026:	9303      	str	r3, [sp, #12]
 8018028:	6a3b      	ldr	r3, [r7, #32]
 801802a:	9302      	str	r3, [sp, #8]
 801802c:	7f3b      	ldrb	r3, [r7, #28]
 801802e:	9301      	str	r3, [sp, #4]
 8018030:	7e3b      	ldrb	r3, [r7, #24]
 8018032:	9300      	str	r3, [sp, #0]
 8018034:	4613      	mov	r3, r2
 8018036:	687a      	ldr	r2, [r7, #4]
 8018038:	68b9      	ldr	r1, [r7, #8]
 801803a:	68f8      	ldr	r0, [r7, #12]
 801803c:	f000 f805 	bl	801804a <ip4_output_if_opt>
 8018040:	4603      	mov	r3, r0
}
 8018042:	4618      	mov	r0, r3
 8018044:	3710      	adds	r7, #16
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}

0801804a <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801804a:	b580      	push	{r7, lr}
 801804c:	b08c      	sub	sp, #48	@ 0x30
 801804e:	af06      	add	r7, sp, #24
 8018050:	60f8      	str	r0, [r7, #12]
 8018052:	60b9      	str	r1, [r7, #8]
 8018054:	607a      	str	r2, [r7, #4]
 8018056:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d009      	beq.n	8018076 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d003      	beq.n	8018070 <ip4_output_if_opt+0x26>
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d102      	bne.n	8018076 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8018070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018072:	3304      	adds	r3, #4
 8018074:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8018076:	78fa      	ldrb	r2, [r7, #3]
 8018078:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801807a:	9304      	str	r3, [sp, #16]
 801807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801807e:	9303      	str	r3, [sp, #12]
 8018080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018082:	9302      	str	r3, [sp, #8]
 8018084:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018088:	9301      	str	r3, [sp, #4]
 801808a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	4613      	mov	r3, r2
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	6979      	ldr	r1, [r7, #20]
 8018096:	68f8      	ldr	r0, [r7, #12]
 8018098:	f000 f822 	bl	80180e0 <ip4_output_if_opt_src>
 801809c:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801809e:	4618      	mov	r0, r3
 80180a0:	3718      	adds	r7, #24
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}

080180a6 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80180a6:	b580      	push	{r7, lr}
 80180a8:	b08a      	sub	sp, #40	@ 0x28
 80180aa:	af06      	add	r7, sp, #24
 80180ac:	60f8      	str	r0, [r7, #12]
 80180ae:	60b9      	str	r1, [r7, #8]
 80180b0:	607a      	str	r2, [r7, #4]
 80180b2:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80180b4:	78fa      	ldrb	r2, [r7, #3]
 80180b6:	2300      	movs	r3, #0
 80180b8:	9304      	str	r3, [sp, #16]
 80180ba:	2300      	movs	r3, #0
 80180bc:	9303      	str	r3, [sp, #12]
 80180be:	6a3b      	ldr	r3, [r7, #32]
 80180c0:	9302      	str	r3, [sp, #8]
 80180c2:	7f3b      	ldrb	r3, [r7, #28]
 80180c4:	9301      	str	r3, [sp, #4]
 80180c6:	7e3b      	ldrb	r3, [r7, #24]
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	4613      	mov	r3, r2
 80180cc:	687a      	ldr	r2, [r7, #4]
 80180ce:	68b9      	ldr	r1, [r7, #8]
 80180d0:	68f8      	ldr	r0, [r7, #12]
 80180d2:	f000 f805 	bl	80180e0 <ip4_output_if_opt_src>
 80180d6:	4603      	mov	r3, r0
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3710      	adds	r7, #16
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}

080180e0 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b088      	sub	sp, #32
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	60f8      	str	r0, [r7, #12]
 80180e8:	60b9      	str	r1, [r7, #8]
 80180ea:	607a      	str	r2, [r7, #4]
 80180ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	7b9b      	ldrb	r3, [r3, #14]
 80180f2:	2b01      	cmp	r3, #1
 80180f4:	d006      	beq.n	8018104 <ip4_output_if_opt_src+0x24>
 80180f6:	4b67      	ldr	r3, [pc, #412]	@ (8018294 <ip4_output_if_opt_src+0x1b4>)
 80180f8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80180fc:	4966      	ldr	r1, [pc, #408]	@ (8018298 <ip4_output_if_opt_src+0x1b8>)
 80180fe:	4867      	ldr	r0, [pc, #412]	@ (801829c <ip4_output_if_opt_src+0x1bc>)
 8018100:	f00a fc0a 	bl	8022918 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	2b00      	cmp	r3, #0
 8018108:	f000 8097 	beq.w	801823a <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801810c:	2314      	movs	r3, #20
 801810e:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8018110:	2300      	movs	r3, #0
 8018112:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8018114:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018116:	2b00      	cmp	r3, #0
 8018118:	d030      	beq.n	801817c <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801811a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801811c:	2b28      	cmp	r3, #40	@ 0x28
 801811e:	d902      	bls.n	8018126 <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8018120:	f06f 0305 	mvn.w	r3, #5
 8018124:	e0b1      	b.n	801828a <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8018126:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018128:	3303      	adds	r3, #3
 801812a:	b29b      	uxth	r3, r3
 801812c:	f023 0303 	bic.w	r3, r3, #3
 8018130:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8018132:	8bfa      	ldrh	r2, [r7, #30]
 8018134:	8afb      	ldrh	r3, [r7, #22]
 8018136:	4413      	add	r3, r2
 8018138:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801813a:	8afb      	ldrh	r3, [r7, #22]
 801813c:	4619      	mov	r1, r3
 801813e:	68f8      	ldr	r0, [r7, #12]
 8018140:	f002 fc48 	bl	801a9d4 <pbuf_add_header>
 8018144:	4603      	mov	r3, r0
 8018146:	2b00      	cmp	r3, #0
 8018148:	d002      	beq.n	8018150 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801814a:	f06f 0301 	mvn.w	r3, #1
 801814e:	e09c      	b.n	801828a <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8018156:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018158:	4618      	mov	r0, r3
 801815a:	f00a fe14 	bl	8022d86 <memcpy>
      if (optlen < optlen_aligned) {
 801815e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8018160:	8afb      	ldrh	r3, [r7, #22]
 8018162:	429a      	cmp	r2, r3
 8018164:	d20a      	bcs.n	801817c <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	685a      	ldr	r2, [r3, #4]
 801816a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801816c:	18d0      	adds	r0, r2, r3
 801816e:	8afa      	ldrh	r2, [r7, #22]
 8018170:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018172:	1ad3      	subs	r3, r2, r3
 8018174:	461a      	mov	r2, r3
 8018176:	2100      	movs	r1, #0
 8018178:	f00a fd60 	bl	8022c3c <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801817c:	2114      	movs	r1, #20
 801817e:	68f8      	ldr	r0, [r7, #12]
 8018180:	f002 fc28 	bl	801a9d4 <pbuf_add_header>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d002      	beq.n	8018190 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801818a:	f06f 0301 	mvn.w	r3, #1
 801818e:	e07c      	b.n	801828a <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	685b      	ldr	r3, [r3, #4]
 8018194:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	895b      	ldrh	r3, [r3, #10]
 801819a:	2b13      	cmp	r3, #19
 801819c:	d806      	bhi.n	80181ac <ip4_output_if_opt_src+0xcc>
 801819e:	4b3d      	ldr	r3, [pc, #244]	@ (8018294 <ip4_output_if_opt_src+0x1b4>)
 80181a0:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80181a4:	493e      	ldr	r1, [pc, #248]	@ (80182a0 <ip4_output_if_opt_src+0x1c0>)
 80181a6:	483d      	ldr	r0, [pc, #244]	@ (801829c <ip4_output_if_opt_src+0x1bc>)
 80181a8:	f00a fbb6 	bl	8022918 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80181ac:	69bb      	ldr	r3, [r7, #24]
 80181ae:	78fa      	ldrb	r2, [r7, #3]
 80181b0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80181b8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681a      	ldr	r2, [r3, #0]
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80181c2:	8bfb      	ldrh	r3, [r7, #30]
 80181c4:	089b      	lsrs	r3, r3, #2
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	b2db      	uxtb	r3, r3
 80181ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181ce:	b2da      	uxtb	r2, r3
 80181d0:	69bb      	ldr	r3, [r7, #24]
 80181d2:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181d4:	69bb      	ldr	r3, [r7, #24]
 80181d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80181da:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	891b      	ldrh	r3, [r3, #8]
 80181e0:	4618      	mov	r0, r3
 80181e2:	f001 f80d 	bl	8019200 <lwip_htons>
 80181e6:	4603      	mov	r3, r0
 80181e8:	461a      	mov	r2, r3
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80181ee:	69bb      	ldr	r3, [r7, #24]
 80181f0:	2200      	movs	r2, #0
 80181f2:	719a      	strb	r2, [r3, #6]
 80181f4:	2200      	movs	r2, #0
 80181f6:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80181f8:	4b2a      	ldr	r3, [pc, #168]	@ (80182a4 <ip4_output_if_opt_src+0x1c4>)
 80181fa:	881b      	ldrh	r3, [r3, #0]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f000 ffff 	bl	8019200 <lwip_htons>
 8018202:	4603      	mov	r3, r0
 8018204:	461a      	mov	r2, r3
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801820a:	4b26      	ldr	r3, [pc, #152]	@ (80182a4 <ip4_output_if_opt_src+0x1c4>)
 801820c:	881b      	ldrh	r3, [r3, #0]
 801820e:	3301      	adds	r3, #1
 8018210:	b29a      	uxth	r2, r3
 8018212:	4b24      	ldr	r3, [pc, #144]	@ (80182a4 <ip4_output_if_opt_src+0x1c4>)
 8018214:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d104      	bne.n	8018226 <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801821c:	4b22      	ldr	r3, [pc, #136]	@ (80182a8 <ip4_output_if_opt_src+0x1c8>)
 801821e:	681a      	ldr	r2, [r3, #0]
 8018220:	69bb      	ldr	r3, [r7, #24]
 8018222:	60da      	str	r2, [r3, #12]
 8018224:	e003      	b.n	801822e <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	681a      	ldr	r2, [r3, #0]
 801822a:	69bb      	ldr	r3, [r7, #24]
 801822c:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	2200      	movs	r2, #0
 8018232:	729a      	strb	r2, [r3, #10]
 8018234:	2200      	movs	r2, #0
 8018236:	72da      	strb	r2, [r3, #11]
 8018238:	e00f      	b.n	801825a <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	895b      	ldrh	r3, [r3, #10]
 801823e:	2b13      	cmp	r3, #19
 8018240:	d802      	bhi.n	8018248 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018242:	f06f 0301 	mvn.w	r3, #1
 8018246:	e020      	b.n	801828a <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	685b      	ldr	r3, [r3, #4]
 801824c:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	691b      	ldr	r3, [r3, #16]
 8018252:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8018254:	f107 0310 	add.w	r3, r7, #16
 8018258:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801825e:	2b00      	cmp	r3, #0
 8018260:	d00c      	beq.n	801827c <ip4_output_if_opt_src+0x19c>
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	891a      	ldrh	r2, [r3, #8]
 8018266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018268:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801826a:	429a      	cmp	r2, r3
 801826c:	d906      	bls.n	801827c <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801826e:	687a      	ldr	r2, [r7, #4]
 8018270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018272:	68f8      	ldr	r0, [r7, #12]
 8018274:	f000 fe7e 	bl	8018f74 <ip4_frag>
 8018278:	4603      	mov	r3, r0
 801827a:	e006      	b.n	801828a <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801827e:	695b      	ldr	r3, [r3, #20]
 8018280:	687a      	ldr	r2, [r7, #4]
 8018282:	68f9      	ldr	r1, [r7, #12]
 8018284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018286:	4798      	blx	r3
 8018288:	4603      	mov	r3, r0
}
 801828a:	4618      	mov	r0, r3
 801828c:	3720      	adds	r7, #32
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}
 8018292:	bf00      	nop
 8018294:	08025b10 	.word	0x08025b10
 8018298:	08025b88 	.word	0x08025b88
 801829c:	08025b94 	.word	0x08025b94
 80182a0:	08025bbc 	.word	0x08025bbc
 80182a4:	20008eac 	.word	0x20008eac
 80182a8:	08028bec 	.word	0x08028bec

080182ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80182ac:	b480      	push	{r7}
 80182ae:	b085      	sub	sp, #20
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
 80182b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182c0:	d002      	beq.n	80182c8 <ip4_addr_isbroadcast_u32+0x1c>
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d101      	bne.n	80182cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80182c8:	2301      	movs	r3, #1
 80182ca:	e02a      	b.n	8018322 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80182d2:	f003 0302 	and.w	r3, r3, #2
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d101      	bne.n	80182de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80182da:	2300      	movs	r3, #0
 80182dc:	e021      	b.n	8018322 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	3304      	adds	r3, #4
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d101      	bne.n	80182ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80182ea:	2300      	movs	r3, #0
 80182ec:	e019      	b.n	8018322 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80182ee:	68fa      	ldr	r2, [r7, #12]
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	3304      	adds	r3, #4
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	405a      	eors	r2, r3
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	3308      	adds	r3, #8
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	4013      	ands	r3, r2
 8018300:	2b00      	cmp	r3, #0
 8018302:	d10d      	bne.n	8018320 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	3308      	adds	r3, #8
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	43da      	mvns	r2, r3
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	3308      	adds	r3, #8
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018318:	429a      	cmp	r2, r3
 801831a:	d101      	bne.n	8018320 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801831c:	2301      	movs	r3, #1
 801831e:	e000      	b.n	8018322 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018320:	2300      	movs	r3, #0
  }
}
 8018322:	4618      	mov	r0, r3
 8018324:	3714      	adds	r7, #20
 8018326:	46bd      	mov	sp, r7
 8018328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832c:	4770      	bx	lr
	...

08018330 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b08a      	sub	sp, #40	@ 0x28
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801833a:	f107 030c 	add.w	r3, r7, #12
 801833e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8018348:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801834c:	3301      	adds	r3, #1
 801834e:	4a89      	ldr	r2, [pc, #548]	@ (8018574 <ip4addr_aton+0x244>)
 8018350:	4413      	add	r3, r2
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	f003 0304 	and.w	r3, r3, #4
 8018358:	2b00      	cmp	r3, #0
 801835a:	d101      	bne.n	8018360 <ip4addr_aton+0x30>
      return 0;
 801835c:	2300      	movs	r3, #0
 801835e:	e105      	b.n	801856c <ip4addr_aton+0x23c>
    }
    val = 0;
 8018360:	2300      	movs	r3, #0
 8018362:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8018364:	230a      	movs	r3, #10
 8018366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801836a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801836e:	2b30      	cmp	r3, #48	@ 0x30
 8018370:	d11c      	bne.n	80183ac <ip4addr_aton+0x7c>
      c = *++cp;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	3301      	adds	r3, #1
 8018376:	607b      	str	r3, [r7, #4]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	781b      	ldrb	r3, [r3, #0]
 801837c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8018380:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018384:	2b78      	cmp	r3, #120	@ 0x78
 8018386:	d003      	beq.n	8018390 <ip4addr_aton+0x60>
 8018388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801838c:	2b58      	cmp	r3, #88	@ 0x58
 801838e:	d10a      	bne.n	80183a6 <ip4addr_aton+0x76>
        base = 16;
 8018390:	2310      	movs	r3, #16
 8018392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	3301      	adds	r3, #1
 801839a:	607b      	str	r3, [r7, #4]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80183a4:	e002      	b.n	80183ac <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80183a6:	2308      	movs	r3, #8
 80183a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80183ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183b0:	3301      	adds	r3, #1
 80183b2:	4a70      	ldr	r2, [pc, #448]	@ (8018574 <ip4addr_aton+0x244>)
 80183b4:	4413      	add	r3, r2
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	f003 0304 	and.w	r3, r3, #4
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d011      	beq.n	80183e4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80183c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80183c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80183c6:	fb03 f202 	mul.w	r2, r3, r2
 80183ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183ce:	4413      	add	r3, r2
 80183d0:	3b30      	subs	r3, #48	@ 0x30
 80183d2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	3301      	adds	r3, #1
 80183d8:	607b      	str	r3, [r7, #4]
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80183e2:	e7e3      	b.n	80183ac <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80183e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80183e8:	2b10      	cmp	r3, #16
 80183ea:	d127      	bne.n	801843c <ip4addr_aton+0x10c>
 80183ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183f0:	3301      	adds	r3, #1
 80183f2:	4a60      	ldr	r2, [pc, #384]	@ (8018574 <ip4addr_aton+0x244>)
 80183f4:	4413      	add	r3, r2
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d01d      	beq.n	801843c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8018400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018402:	011b      	lsls	r3, r3, #4
 8018404:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8018408:	f102 010a 	add.w	r1, r2, #10
 801840c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8018410:	3201      	adds	r2, #1
 8018412:	4858      	ldr	r0, [pc, #352]	@ (8018574 <ip4addr_aton+0x244>)
 8018414:	4402      	add	r2, r0
 8018416:	7812      	ldrb	r2, [r2, #0]
 8018418:	f002 0203 	and.w	r2, r2, #3
 801841c:	2a02      	cmp	r2, #2
 801841e:	d101      	bne.n	8018424 <ip4addr_aton+0xf4>
 8018420:	2261      	movs	r2, #97	@ 0x61
 8018422:	e000      	b.n	8018426 <ip4addr_aton+0xf6>
 8018424:	2241      	movs	r2, #65	@ 0x41
 8018426:	1a8a      	subs	r2, r1, r2
 8018428:	4313      	orrs	r3, r2
 801842a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	3301      	adds	r3, #1
 8018430:	607b      	str	r3, [r7, #4]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801843a:	e7b7      	b.n	80183ac <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801843c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018440:	2b2e      	cmp	r3, #46	@ 0x2e
 8018442:	d114      	bne.n	801846e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8018444:	f107 030c 	add.w	r3, r7, #12
 8018448:	330c      	adds	r3, #12
 801844a:	69fa      	ldr	r2, [r7, #28]
 801844c:	429a      	cmp	r2, r3
 801844e:	d301      	bcc.n	8018454 <ip4addr_aton+0x124>
        return 0;
 8018450:	2300      	movs	r3, #0
 8018452:	e08b      	b.n	801856c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	1d1a      	adds	r2, r3, #4
 8018458:	61fa      	str	r2, [r7, #28]
 801845a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801845c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	3301      	adds	r3, #1
 8018462:	607b      	str	r3, [r7, #4]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	781b      	ldrb	r3, [r3, #0]
 8018468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801846c:	e76c      	b.n	8018348 <ip4addr_aton+0x18>
    } else {
      break;
 801846e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018470:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018474:	2b00      	cmp	r3, #0
 8018476:	d00b      	beq.n	8018490 <ip4addr_aton+0x160>
 8018478:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801847c:	3301      	adds	r3, #1
 801847e:	4a3d      	ldr	r2, [pc, #244]	@ (8018574 <ip4addr_aton+0x244>)
 8018480:	4413      	add	r3, r2
 8018482:	781b      	ldrb	r3, [r3, #0]
 8018484:	f003 0308 	and.w	r3, r3, #8
 8018488:	2b00      	cmp	r3, #0
 801848a:	d101      	bne.n	8018490 <ip4addr_aton+0x160>
    return 0;
 801848c:	2300      	movs	r3, #0
 801848e:	e06d      	b.n	801856c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8018490:	f107 030c 	add.w	r3, r7, #12
 8018494:	69fa      	ldr	r2, [r7, #28]
 8018496:	1ad3      	subs	r3, r2, r3
 8018498:	109b      	asrs	r3, r3, #2
 801849a:	3301      	adds	r3, #1
 801849c:	2b04      	cmp	r3, #4
 801849e:	d853      	bhi.n	8018548 <ip4addr_aton+0x218>
 80184a0:	a201      	add	r2, pc, #4	@ (adr r2, 80184a8 <ip4addr_aton+0x178>)
 80184a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184a6:	bf00      	nop
 80184a8:	080184bd 	.word	0x080184bd
 80184ac:	08018557 	.word	0x08018557
 80184b0:	080184c1 	.word	0x080184c1
 80184b4:	080184e3 	.word	0x080184e3
 80184b8:	08018511 	.word	0x08018511

    case 0:
      return 0;       /* initial nondigit */
 80184bc:	2300      	movs	r3, #0
 80184be:	e055      	b.n	801856c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80184c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80184c6:	d301      	bcc.n	80184cc <ip4addr_aton+0x19c>
        return 0;
 80184c8:	2300      	movs	r3, #0
 80184ca:	e04f      	b.n	801856c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	2bff      	cmp	r3, #255	@ 0xff
 80184d0:	d901      	bls.n	80184d6 <ip4addr_aton+0x1a6>
        return 0;
 80184d2:	2300      	movs	r3, #0
 80184d4:	e04a      	b.n	801856c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	061b      	lsls	r3, r3, #24
 80184da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184dc:	4313      	orrs	r3, r2
 80184de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80184e0:	e03a      	b.n	8018558 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80184e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80184e8:	d301      	bcc.n	80184ee <ip4addr_aton+0x1be>
        return 0;
 80184ea:	2300      	movs	r3, #0
 80184ec:	e03e      	b.n	801856c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	2bff      	cmp	r3, #255	@ 0xff
 80184f2:	d802      	bhi.n	80184fa <ip4addr_aton+0x1ca>
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	2bff      	cmp	r3, #255	@ 0xff
 80184f8:	d901      	bls.n	80184fe <ip4addr_aton+0x1ce>
        return 0;
 80184fa:	2300      	movs	r3, #0
 80184fc:	e036      	b.n	801856c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	061a      	lsls	r2, r3, #24
 8018502:	693b      	ldr	r3, [r7, #16]
 8018504:	041b      	lsls	r3, r3, #16
 8018506:	4313      	orrs	r3, r2
 8018508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801850a:	4313      	orrs	r3, r2
 801850c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801850e:	e023      	b.n	8018558 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8018510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018512:	2bff      	cmp	r3, #255	@ 0xff
 8018514:	d901      	bls.n	801851a <ip4addr_aton+0x1ea>
        return 0;
 8018516:	2300      	movs	r3, #0
 8018518:	e028      	b.n	801856c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	2bff      	cmp	r3, #255	@ 0xff
 801851e:	d805      	bhi.n	801852c <ip4addr_aton+0x1fc>
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	2bff      	cmp	r3, #255	@ 0xff
 8018524:	d802      	bhi.n	801852c <ip4addr_aton+0x1fc>
 8018526:	697b      	ldr	r3, [r7, #20]
 8018528:	2bff      	cmp	r3, #255	@ 0xff
 801852a:	d901      	bls.n	8018530 <ip4addr_aton+0x200>
        return 0;
 801852c:	2300      	movs	r3, #0
 801852e:	e01d      	b.n	801856c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	061a      	lsls	r2, r3, #24
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	041b      	lsls	r3, r3, #16
 8018538:	431a      	orrs	r2, r3
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	021b      	lsls	r3, r3, #8
 801853e:	4313      	orrs	r3, r2
 8018540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018542:	4313      	orrs	r3, r2
 8018544:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8018546:	e007      	b.n	8018558 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8018548:	4b0b      	ldr	r3, [pc, #44]	@ (8018578 <ip4addr_aton+0x248>)
 801854a:	22f9      	movs	r2, #249	@ 0xf9
 801854c:	490b      	ldr	r1, [pc, #44]	@ (801857c <ip4addr_aton+0x24c>)
 801854e:	480c      	ldr	r0, [pc, #48]	@ (8018580 <ip4addr_aton+0x250>)
 8018550:	f00a f9e2 	bl	8022918 <iprintf>
      break;
 8018554:	e000      	b.n	8018558 <ip4addr_aton+0x228>
      break;
 8018556:	bf00      	nop
  }
  if (addr) {
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d005      	beq.n	801856a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801855e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018560:	f000 fe63 	bl	801922a <lwip_htonl>
 8018564:	4602      	mov	r2, r0
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801856a:	2301      	movs	r3, #1
}
 801856c:	4618      	mov	r0, r3
 801856e:	3728      	adds	r7, #40	@ 0x28
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	08038e63 	.word	0x08038e63
 8018578:	08025bec 	.word	0x08025bec
 801857c:	08025c68 	.word	0x08025c68
 8018580:	08025c74 	.word	0x08025c74

08018584 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801858a:	2300      	movs	r3, #0
 801858c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801858e:	4b12      	ldr	r3, [pc, #72]	@ (80185d8 <ip_reass_tmr+0x54>)
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018594:	e018      	b.n	80185c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	7fdb      	ldrb	r3, [r3, #31]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00b      	beq.n	80185b6 <ip_reass_tmr+0x32>
      r->timer--;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	7fdb      	ldrb	r3, [r3, #31]
 80185a2:	3b01      	subs	r3, #1
 80185a4:	b2da      	uxtb	r2, r3
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	60fb      	str	r3, [r7, #12]
 80185b4:	e008      	b.n	80185c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80185c0:	68b9      	ldr	r1, [r7, #8]
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f000 f80a 	bl	80185dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d1e3      	bne.n	8018596 <ip_reass_tmr+0x12>
    }
  }
}
 80185ce:	bf00      	nop
 80185d0:	bf00      	nop
 80185d2:	3710      	adds	r7, #16
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}
 80185d8:	20008eb4 	.word	0x20008eb4

080185dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b088      	sub	sp, #32
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80185ea:	683a      	ldr	r2, [r7, #0]
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	429a      	cmp	r2, r3
 80185f0:	d105      	bne.n	80185fe <ip_reass_free_complete_datagram+0x22>
 80185f2:	4b45      	ldr	r3, [pc, #276]	@ (8018708 <ip_reass_free_complete_datagram+0x12c>)
 80185f4:	22ab      	movs	r2, #171	@ 0xab
 80185f6:	4945      	ldr	r1, [pc, #276]	@ (801870c <ip_reass_free_complete_datagram+0x130>)
 80185f8:	4845      	ldr	r0, [pc, #276]	@ (8018710 <ip_reass_free_complete_datagram+0x134>)
 80185fa:	f00a f98d 	bl	8022918 <iprintf>
  if (prev != NULL) {
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d00a      	beq.n	801861a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	687a      	ldr	r2, [r7, #4]
 801860a:	429a      	cmp	r2, r3
 801860c:	d005      	beq.n	801861a <ip_reass_free_complete_datagram+0x3e>
 801860e:	4b3e      	ldr	r3, [pc, #248]	@ (8018708 <ip_reass_free_complete_datagram+0x12c>)
 8018610:	22ad      	movs	r2, #173	@ 0xad
 8018612:	4940      	ldr	r1, [pc, #256]	@ (8018714 <ip_reass_free_complete_datagram+0x138>)
 8018614:	483e      	ldr	r0, [pc, #248]	@ (8018710 <ip_reass_free_complete_datagram+0x134>)
 8018616:	f00a f97f 	bl	8022918 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	685b      	ldr	r3, [r3, #4]
 801861e:	685b      	ldr	r3, [r3, #4]
 8018620:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018622:	697b      	ldr	r3, [r7, #20]
 8018624:	889b      	ldrh	r3, [r3, #4]
 8018626:	b29b      	uxth	r3, r3
 8018628:	2b00      	cmp	r3, #0
 801862a:	d12a      	bne.n	8018682 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	681a      	ldr	r2, [r3, #0]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801863a:	69bb      	ldr	r3, [r7, #24]
 801863c:	6858      	ldr	r0, [r3, #4]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	3308      	adds	r3, #8
 8018642:	2214      	movs	r2, #20
 8018644:	4619      	mov	r1, r3
 8018646:	f00a fb9e 	bl	8022d86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801864a:	2101      	movs	r1, #1
 801864c:	69b8      	ldr	r0, [r7, #24]
 801864e:	f7fe fdaf 	bl	80171b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018652:	69b8      	ldr	r0, [r7, #24]
 8018654:	f002 fb14 	bl	801ac80 <pbuf_clen>
 8018658:	4603      	mov	r3, r0
 801865a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801865c:	8bfa      	ldrh	r2, [r7, #30]
 801865e:	8a7b      	ldrh	r3, [r7, #18]
 8018660:	4413      	add	r3, r2
 8018662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018666:	db05      	blt.n	8018674 <ip_reass_free_complete_datagram+0x98>
 8018668:	4b27      	ldr	r3, [pc, #156]	@ (8018708 <ip_reass_free_complete_datagram+0x12c>)
 801866a:	22bc      	movs	r2, #188	@ 0xbc
 801866c:	492a      	ldr	r1, [pc, #168]	@ (8018718 <ip_reass_free_complete_datagram+0x13c>)
 801866e:	4828      	ldr	r0, [pc, #160]	@ (8018710 <ip_reass_free_complete_datagram+0x134>)
 8018670:	f00a f952 	bl	8022918 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018674:	8bfa      	ldrh	r2, [r7, #30]
 8018676:	8a7b      	ldrh	r3, [r7, #18]
 8018678:	4413      	add	r3, r2
 801867a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801867c:	69b8      	ldr	r0, [r7, #24]
 801867e:	f002 fa71 	bl	801ab64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018688:	e01f      	b.n	80186ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	685b      	ldr	r3, [r3, #4]
 801868e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018690:	69bb      	ldr	r3, [r7, #24]
 8018692:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801869a:	68f8      	ldr	r0, [r7, #12]
 801869c:	f002 faf0 	bl	801ac80 <pbuf_clen>
 80186a0:	4603      	mov	r3, r0
 80186a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186a4:	8bfa      	ldrh	r2, [r7, #30]
 80186a6:	8a7b      	ldrh	r3, [r7, #18]
 80186a8:	4413      	add	r3, r2
 80186aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80186ae:	db05      	blt.n	80186bc <ip_reass_free_complete_datagram+0xe0>
 80186b0:	4b15      	ldr	r3, [pc, #84]	@ (8018708 <ip_reass_free_complete_datagram+0x12c>)
 80186b2:	22cc      	movs	r2, #204	@ 0xcc
 80186b4:	4918      	ldr	r1, [pc, #96]	@ (8018718 <ip_reass_free_complete_datagram+0x13c>)
 80186b6:	4816      	ldr	r0, [pc, #88]	@ (8018710 <ip_reass_free_complete_datagram+0x134>)
 80186b8:	f00a f92e 	bl	8022918 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186bc:	8bfa      	ldrh	r2, [r7, #30]
 80186be:	8a7b      	ldrh	r3, [r7, #18]
 80186c0:	4413      	add	r3, r2
 80186c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f002 fa4d 	bl	801ab64 <pbuf_free>
  while (p != NULL) {
 80186ca:	69bb      	ldr	r3, [r7, #24]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d1dc      	bne.n	801868a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f000 f8c2 	bl	801885c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80186d8:	4b10      	ldr	r3, [pc, #64]	@ (801871c <ip_reass_free_complete_datagram+0x140>)
 80186da:	881b      	ldrh	r3, [r3, #0]
 80186dc:	8bfa      	ldrh	r2, [r7, #30]
 80186de:	429a      	cmp	r2, r3
 80186e0:	d905      	bls.n	80186ee <ip_reass_free_complete_datagram+0x112>
 80186e2:	4b09      	ldr	r3, [pc, #36]	@ (8018708 <ip_reass_free_complete_datagram+0x12c>)
 80186e4:	22d2      	movs	r2, #210	@ 0xd2
 80186e6:	490e      	ldr	r1, [pc, #56]	@ (8018720 <ip_reass_free_complete_datagram+0x144>)
 80186e8:	4809      	ldr	r0, [pc, #36]	@ (8018710 <ip_reass_free_complete_datagram+0x134>)
 80186ea:	f00a f915 	bl	8022918 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80186ee:	4b0b      	ldr	r3, [pc, #44]	@ (801871c <ip_reass_free_complete_datagram+0x140>)
 80186f0:	881a      	ldrh	r2, [r3, #0]
 80186f2:	8bfb      	ldrh	r3, [r7, #30]
 80186f4:	1ad3      	subs	r3, r2, r3
 80186f6:	b29a      	uxth	r2, r3
 80186f8:	4b08      	ldr	r3, [pc, #32]	@ (801871c <ip_reass_free_complete_datagram+0x140>)
 80186fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80186fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3720      	adds	r7, #32
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	08025c9c 	.word	0x08025c9c
 801870c:	08025d18 	.word	0x08025d18
 8018710:	08025d24 	.word	0x08025d24
 8018714:	08025d4c 	.word	0x08025d4c
 8018718:	08025d60 	.word	0x08025d60
 801871c:	20008eb8 	.word	0x20008eb8
 8018720:	08025d80 	.word	0x08025d80

08018724 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b08a      	sub	sp, #40	@ 0x28
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801872e:	2300      	movs	r3, #0
 8018730:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018732:	2300      	movs	r3, #0
 8018734:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018736:	2300      	movs	r3, #0
 8018738:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801873a:	2300      	movs	r3, #0
 801873c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801873e:	2300      	movs	r3, #0
 8018740:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018742:	4b28      	ldr	r3, [pc, #160]	@ (80187e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018748:	e030      	b.n	80187ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801874c:	695a      	ldr	r2, [r3, #20]
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	68db      	ldr	r3, [r3, #12]
 8018752:	429a      	cmp	r2, r3
 8018754:	d10c      	bne.n	8018770 <ip_reass_remove_oldest_datagram+0x4c>
 8018756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018758:	699a      	ldr	r2, [r3, #24]
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	691b      	ldr	r3, [r3, #16]
 801875e:	429a      	cmp	r2, r3
 8018760:	d106      	bne.n	8018770 <ip_reass_remove_oldest_datagram+0x4c>
 8018762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018764:	899a      	ldrh	r2, [r3, #12]
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	889b      	ldrh	r3, [r3, #4]
 801876a:	b29b      	uxth	r3, r3
 801876c:	429a      	cmp	r2, r3
 801876e:	d014      	beq.n	801879a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	3301      	adds	r3, #1
 8018774:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018776:	6a3b      	ldr	r3, [r7, #32]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d104      	bne.n	8018786 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801877e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	61bb      	str	r3, [r7, #24]
 8018784:	e009      	b.n	801879a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018788:	7fda      	ldrb	r2, [r3, #31]
 801878a:	6a3b      	ldr	r3, [r7, #32]
 801878c:	7fdb      	ldrb	r3, [r3, #31]
 801878e:	429a      	cmp	r2, r3
 8018790:	d803      	bhi.n	801879a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018794:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018796:	69fb      	ldr	r3, [r7, #28]
 8018798:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d001      	beq.n	80187a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80187ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d1cb      	bne.n	801874a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80187b2:	6a3b      	ldr	r3, [r7, #32]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d008      	beq.n	80187ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80187b8:	69b9      	ldr	r1, [r7, #24]
 80187ba:	6a38      	ldr	r0, [r7, #32]
 80187bc:	f7ff ff0e 	bl	80185dc <ip_reass_free_complete_datagram>
 80187c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80187c2:	697a      	ldr	r2, [r7, #20]
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	4413      	add	r3, r2
 80187c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80187ca:	697a      	ldr	r2, [r7, #20]
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	da02      	bge.n	80187d8 <ip_reass_remove_oldest_datagram+0xb4>
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	dcac      	bgt.n	8018732 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80187d8:	697b      	ldr	r3, [r7, #20]
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3728      	adds	r7, #40	@ 0x28
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}
 80187e2:	bf00      	nop
 80187e4:	20008eb4 	.word	0x20008eb4

080187e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b084      	sub	sp, #16
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80187f2:	2004      	movs	r0, #4
 80187f4:	f001 fa48 	bl	8019c88 <memp_malloc>
 80187f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d110      	bne.n	8018822 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018800:	6839      	ldr	r1, [r7, #0]
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7ff ff8e 	bl	8018724 <ip_reass_remove_oldest_datagram>
 8018808:	4602      	mov	r2, r0
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	4293      	cmp	r3, r2
 801880e:	dc03      	bgt.n	8018818 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018810:	2004      	movs	r0, #4
 8018812:	f001 fa39 	bl	8019c88 <memp_malloc>
 8018816:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d101      	bne.n	8018822 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801881e:	2300      	movs	r3, #0
 8018820:	e016      	b.n	8018850 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018822:	2220      	movs	r2, #32
 8018824:	2100      	movs	r1, #0
 8018826:	68f8      	ldr	r0, [r7, #12]
 8018828:	f00a fa08 	bl	8022c3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	220f      	movs	r2, #15
 8018830:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018832:	4b09      	ldr	r3, [pc, #36]	@ (8018858 <ip_reass_enqueue_new_datagram+0x70>)
 8018834:	681a      	ldr	r2, [r3, #0]
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801883a:	4a07      	ldr	r2, [pc, #28]	@ (8018858 <ip_reass_enqueue_new_datagram+0x70>)
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	3308      	adds	r3, #8
 8018844:	2214      	movs	r2, #20
 8018846:	6879      	ldr	r1, [r7, #4]
 8018848:	4618      	mov	r0, r3
 801884a:	f00a fa9c 	bl	8022d86 <memcpy>
  return ipr;
 801884e:	68fb      	ldr	r3, [r7, #12]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	20008eb4 	.word	0x20008eb4

0801885c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b082      	sub	sp, #8
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018866:	4b10      	ldr	r3, [pc, #64]	@ (80188a8 <ip_reass_dequeue_datagram+0x4c>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	687a      	ldr	r2, [r7, #4]
 801886c:	429a      	cmp	r2, r3
 801886e:	d104      	bne.n	801887a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	4a0c      	ldr	r2, [pc, #48]	@ (80188a8 <ip_reass_dequeue_datagram+0x4c>)
 8018876:	6013      	str	r3, [r2, #0]
 8018878:	e00d      	b.n	8018896 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d106      	bne.n	801888e <ip_reass_dequeue_datagram+0x32>
 8018880:	4b0a      	ldr	r3, [pc, #40]	@ (80188ac <ip_reass_dequeue_datagram+0x50>)
 8018882:	f240 1245 	movw	r2, #325	@ 0x145
 8018886:	490a      	ldr	r1, [pc, #40]	@ (80188b0 <ip_reass_dequeue_datagram+0x54>)
 8018888:	480a      	ldr	r0, [pc, #40]	@ (80188b4 <ip_reass_dequeue_datagram+0x58>)
 801888a:	f00a f845 	bl	8022918 <iprintf>
    prev->next = ipr->next;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018896:	6879      	ldr	r1, [r7, #4]
 8018898:	2004      	movs	r0, #4
 801889a:	f001 fa6b 	bl	8019d74 <memp_free>
}
 801889e:	bf00      	nop
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20008eb4 	.word	0x20008eb4
 80188ac:	08025c9c 	.word	0x08025c9c
 80188b0:	08025da4 	.word	0x08025da4
 80188b4:	08025d24 	.word	0x08025d24

080188b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b08c      	sub	sp, #48	@ 0x30
 80188bc:	af00      	add	r7, sp, #0
 80188be:	60f8      	str	r0, [r7, #12]
 80188c0:	60b9      	str	r1, [r7, #8]
 80188c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80188c4:	2300      	movs	r3, #0
 80188c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80188c8:	2301      	movs	r3, #1
 80188ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80188d2:	69fb      	ldr	r3, [r7, #28]
 80188d4:	885b      	ldrh	r3, [r3, #2]
 80188d6:	b29b      	uxth	r3, r3
 80188d8:	4618      	mov	r0, r3
 80188da:	f000 fc91 	bl	8019200 <lwip_htons>
 80188de:	4603      	mov	r3, r0
 80188e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80188e2:	69fb      	ldr	r3, [r7, #28]
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	f003 030f 	and.w	r3, r3, #15
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	009b      	lsls	r3, r3, #2
 80188ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80188f0:	7e7b      	ldrb	r3, [r7, #25]
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	8b7a      	ldrh	r2, [r7, #26]
 80188f6:	429a      	cmp	r2, r3
 80188f8:	d202      	bcs.n	8018900 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80188fa:	f04f 33ff 	mov.w	r3, #4294967295
 80188fe:	e135      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018900:	7e7b      	ldrb	r3, [r7, #25]
 8018902:	b29b      	uxth	r3, r3
 8018904:	8b7a      	ldrh	r2, [r7, #26]
 8018906:	1ad3      	subs	r3, r2, r3
 8018908:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	88db      	ldrh	r3, [r3, #6]
 801890e:	b29b      	uxth	r3, r3
 8018910:	4618      	mov	r0, r3
 8018912:	f000 fc75 	bl	8019200 <lwip_htons>
 8018916:	4603      	mov	r3, r0
 8018918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801891c:	b29b      	uxth	r3, r3
 801891e:	00db      	lsls	r3, r3, #3
 8018920:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	685b      	ldr	r3, [r3, #4]
 8018926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801892a:	2200      	movs	r2, #0
 801892c:	701a      	strb	r2, [r3, #0]
 801892e:	2200      	movs	r2, #0
 8018930:	705a      	strb	r2, [r3, #1]
 8018932:	2200      	movs	r2, #0
 8018934:	709a      	strb	r2, [r3, #2]
 8018936:	2200      	movs	r2, #0
 8018938:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801893c:	8afa      	ldrh	r2, [r7, #22]
 801893e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018940:	8afa      	ldrh	r2, [r7, #22]
 8018942:	8b7b      	ldrh	r3, [r7, #26]
 8018944:	4413      	add	r3, r2
 8018946:	b29a      	uxth	r2, r3
 8018948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801894a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801894e:	88db      	ldrh	r3, [r3, #6]
 8018950:	b29b      	uxth	r3, r3
 8018952:	8afa      	ldrh	r2, [r7, #22]
 8018954:	429a      	cmp	r2, r3
 8018956:	d902      	bls.n	801895e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018958:	f04f 33ff 	mov.w	r3, #4294967295
 801895c:	e106      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	627b      	str	r3, [r7, #36]	@ 0x24
 8018964:	e068      	b.n	8018a38 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801896e:	889b      	ldrh	r3, [r3, #4]
 8018970:	b29a      	uxth	r2, r3
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	889b      	ldrh	r3, [r3, #4]
 8018976:	b29b      	uxth	r3, r3
 8018978:	429a      	cmp	r2, r3
 801897a:	d235      	bcs.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801897e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018980:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018984:	2b00      	cmp	r3, #0
 8018986:	d020      	beq.n	80189ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801898a:	889b      	ldrh	r3, [r3, #4]
 801898c:	b29a      	uxth	r2, r3
 801898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018990:	88db      	ldrh	r3, [r3, #6]
 8018992:	b29b      	uxth	r3, r3
 8018994:	429a      	cmp	r2, r3
 8018996:	d307      	bcc.n	80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801899a:	88db      	ldrh	r3, [r3, #6]
 801899c:	b29a      	uxth	r2, r3
 801899e:	693b      	ldr	r3, [r7, #16]
 80189a0:	889b      	ldrh	r3, [r3, #4]
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	429a      	cmp	r2, r3
 80189a6:	d902      	bls.n	80189ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189a8:	f04f 33ff 	mov.w	r3, #4294967295
 80189ac:	e0de      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80189ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189b0:	68ba      	ldr	r2, [r7, #8]
 80189b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80189b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189b6:	88db      	ldrh	r3, [r3, #6]
 80189b8:	b29a      	uxth	r2, r3
 80189ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189bc:	889b      	ldrh	r3, [r3, #4]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d03d      	beq.n	8018a40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80189c4:	2300      	movs	r3, #0
 80189c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80189c8:	e03a      	b.n	8018a40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80189ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189cc:	88db      	ldrh	r3, [r3, #6]
 80189ce:	b29a      	uxth	r2, r3
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	889b      	ldrh	r3, [r3, #4]
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d902      	bls.n	80189e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189da:	f04f 33ff 	mov.w	r3, #4294967295
 80189de:	e0c5      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	68ba      	ldr	r2, [r7, #8]
 80189e4:	605a      	str	r2, [r3, #4]
      break;
 80189e6:	e02b      	b.n	8018a40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80189e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189ea:	889b      	ldrh	r3, [r3, #4]
 80189ec:	b29a      	uxth	r2, r3
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	889b      	ldrh	r3, [r3, #4]
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	429a      	cmp	r2, r3
 80189f6:	d102      	bne.n	80189fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189f8:	f04f 33ff 	mov.w	r3, #4294967295
 80189fc:	e0b6      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80189fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a00:	889b      	ldrh	r3, [r3, #4]
 8018a02:	b29a      	uxth	r2, r3
 8018a04:	693b      	ldr	r3, [r7, #16]
 8018a06:	88db      	ldrh	r3, [r3, #6]
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d202      	bcs.n	8018a14 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a12:	e0ab      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d009      	beq.n	8018a2e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a1c:	88db      	ldrh	r3, [r3, #6]
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	889b      	ldrh	r3, [r3, #4]
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	429a      	cmp	r2, r3
 8018a28:	d001      	beq.n	8018a2e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a2e:	693b      	ldr	r3, [r7, #16]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018a34:	693b      	ldr	r3, [r7, #16]
 8018a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d193      	bne.n	8018966 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a3e:	e000      	b.n	8018a42 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a40:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d12d      	bne.n	8018aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d01c      	beq.n	8018a88 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a50:	88db      	ldrh	r3, [r3, #6]
 8018a52:	b29a      	uxth	r2, r3
 8018a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a56:	889b      	ldrh	r3, [r3, #4]
 8018a58:	b29b      	uxth	r3, r3
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d906      	bls.n	8018a6c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018a5e:	4b45      	ldr	r3, [pc, #276]	@ (8018b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a60:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018a64:	4944      	ldr	r1, [pc, #272]	@ (8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018a66:	4845      	ldr	r0, [pc, #276]	@ (8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a68:	f009 ff56 	bl	8022918 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a6e:	68ba      	ldr	r2, [r7, #8]
 8018a70:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a74:	88db      	ldrh	r3, [r3, #6]
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a7a:	889b      	ldrh	r3, [r3, #4]
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d010      	beq.n	8018aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018a82:	2300      	movs	r3, #0
 8018a84:	623b      	str	r3, [r7, #32]
 8018a86:	e00d      	b.n	8018aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d006      	beq.n	8018a9e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018a90:	4b38      	ldr	r3, [pc, #224]	@ (8018b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a92:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018a96:	493a      	ldr	r1, [pc, #232]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018a98:	4838      	ldr	r0, [pc, #224]	@ (8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a9a:	f009 ff3d 	bl	8022918 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	68ba      	ldr	r2, [r7, #8]
 8018aa2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d105      	bne.n	8018ab6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	7f9b      	ldrb	r3, [r3, #30]
 8018aae:	f003 0301 	and.w	r3, r3, #1
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d059      	beq.n	8018b6a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d04f      	beq.n	8018b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d006      	beq.n	8018ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	889b      	ldrh	r3, [r3, #4]
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d002      	beq.n	8018ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	623b      	str	r3, [r7, #32]
 8018ad6:	e041      	b.n	8018b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ada:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018ae2:	e012      	b.n	8018b0a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aec:	88db      	ldrh	r3, [r3, #6]
 8018aee:	b29a      	uxth	r2, r3
 8018af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018af2:	889b      	ldrh	r3, [r3, #4]
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d002      	beq.n	8018b00 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018afa:	2300      	movs	r3, #0
 8018afc:	623b      	str	r3, [r7, #32]
            break;
 8018afe:	e007      	b.n	8018b10 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b02:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d1e9      	bne.n	8018ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b10:	6a3b      	ldr	r3, [r7, #32]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d022      	beq.n	8018b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d106      	bne.n	8018b2c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b1e:	4b15      	ldr	r3, [pc, #84]	@ (8018b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b20:	f240 12df 	movw	r2, #479	@ 0x1df
 8018b24:	4917      	ldr	r1, [pc, #92]	@ (8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b26:	4815      	ldr	r0, [pc, #84]	@ (8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b28:	f009 fef6 	bl	8022918 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d106      	bne.n	8018b46 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b38:	4b0e      	ldr	r3, [pc, #56]	@ (8018b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b3a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018b3e:	4911      	ldr	r1, [pc, #68]	@ (8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b40:	480e      	ldr	r0, [pc, #56]	@ (8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b42:	f009 fee9 	bl	8022918 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d006      	beq.n	8018b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018b4e:	4b09      	ldr	r3, [pc, #36]	@ (8018b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b50:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018b54:	490c      	ldr	r1, [pc, #48]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018b56:	4809      	ldr	r0, [pc, #36]	@ (8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b58:	f009 fede 	bl	8022918 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	bf14      	ite	ne
 8018b62:	2301      	movne	r3, #1
 8018b64:	2300      	moveq	r3, #0
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	e000      	b.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018b6a:	2300      	movs	r3, #0
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3730      	adds	r7, #48	@ 0x30
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}
 8018b74:	08025c9c 	.word	0x08025c9c
 8018b78:	08025dc0 	.word	0x08025dc0
 8018b7c:	08025d24 	.word	0x08025d24
 8018b80:	08025de0 	.word	0x08025de0
 8018b84:	08025e18 	.word	0x08025e18
 8018b88:	08025e28 	.word	0x08025e28

08018b8c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b08e      	sub	sp, #56	@ 0x38
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	f003 030f 	and.w	r3, r3, #15
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	b2db      	uxtb	r3, r3
 8018ba8:	2b14      	cmp	r3, #20
 8018baa:	f040 8171 	bne.w	8018e90 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bb0:	88db      	ldrh	r3, [r3, #6]
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f000 fb23 	bl	8019200 <lwip_htons>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bc0:	b29b      	uxth	r3, r3
 8018bc2:	00db      	lsls	r3, r3, #3
 8018bc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc8:	885b      	ldrh	r3, [r3, #2]
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f000 fb17 	bl	8019200 <lwip_htons>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	f003 030f 	and.w	r3, r3, #15
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	009b      	lsls	r3, r3, #2
 8018be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018be6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	f0c0 8150 	bcc.w	8018e94 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018bfc:	1ad3      	subs	r3, r2, r3
 8018bfe:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f002 f83d 	bl	801ac80 <pbuf_clen>
 8018c06:	4603      	mov	r3, r0
 8018c08:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c0a:	4b8c      	ldr	r3, [pc, #560]	@ (8018e3c <ip4_reass+0x2b0>)
 8018c0c:	881b      	ldrh	r3, [r3, #0]
 8018c0e:	461a      	mov	r2, r3
 8018c10:	8c3b      	ldrh	r3, [r7, #32]
 8018c12:	4413      	add	r3, r2
 8018c14:	2b0a      	cmp	r3, #10
 8018c16:	dd10      	ble.n	8018c3a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c18:	8c3b      	ldrh	r3, [r7, #32]
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c1e:	f7ff fd81 	bl	8018724 <ip_reass_remove_oldest_datagram>
 8018c22:	4603      	mov	r3, r0
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	f000 8137 	beq.w	8018e98 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c2a:	4b84      	ldr	r3, [pc, #528]	@ (8018e3c <ip4_reass+0x2b0>)
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	461a      	mov	r2, r3
 8018c30:	8c3b      	ldrh	r3, [r7, #32]
 8018c32:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c34:	2b0a      	cmp	r3, #10
 8018c36:	f300 812f 	bgt.w	8018e98 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c3a:	4b81      	ldr	r3, [pc, #516]	@ (8018e40 <ip4_reass+0x2b4>)
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c40:	e015      	b.n	8018c6e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c44:	695a      	ldr	r2, [r3, #20]
 8018c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c48:	68db      	ldr	r3, [r3, #12]
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d10c      	bne.n	8018c68 <ip4_reass+0xdc>
 8018c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c50:	699a      	ldr	r2, [r3, #24]
 8018c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c54:	691b      	ldr	r3, [r3, #16]
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d106      	bne.n	8018c68 <ip4_reass+0xdc>
 8018c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c5c:	899a      	ldrh	r2, [r3, #12]
 8018c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c60:	889b      	ldrh	r3, [r3, #4]
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d006      	beq.n	8018c76 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d1e6      	bne.n	8018c42 <ip4_reass+0xb6>
 8018c74:	e000      	b.n	8018c78 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018c76:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d109      	bne.n	8018c92 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018c7e:	8c3b      	ldrh	r3, [r7, #32]
 8018c80:	4619      	mov	r1, r3
 8018c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c84:	f7ff fdb0 	bl	80187e8 <ip_reass_enqueue_new_datagram>
 8018c88:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d11c      	bne.n	8018cca <ip4_reass+0x13e>
      goto nullreturn;
 8018c90:	e105      	b.n	8018e9e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c94:	88db      	ldrh	r3, [r3, #6]
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f000 fab1 	bl	8019200 <lwip_htons>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d110      	bne.n	8018cca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018caa:	89db      	ldrh	r3, [r3, #14]
 8018cac:	4618      	mov	r0, r3
 8018cae:	f000 faa7 	bl	8019200 <lwip_htons>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d006      	beq.n	8018cca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cbe:	3308      	adds	r3, #8
 8018cc0:	2214      	movs	r2, #20
 8018cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f00a f85e 	bl	8022d86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ccc:	88db      	ldrh	r3, [r3, #6]
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	f003 0320 	and.w	r3, r3, #32
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	bf0c      	ite	eq
 8018cd8:	2301      	moveq	r3, #1
 8018cda:	2300      	movne	r3, #0
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018ce0:	69fb      	ldr	r3, [r7, #28]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d00e      	beq.n	8018d04 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018ce6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018ce8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018cea:	4413      	add	r3, r2
 8018cec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018cee:	8b7a      	ldrh	r2, [r7, #26]
 8018cf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	f0c0 80a0 	bcc.w	8018e38 <ip4_reass+0x2ac>
 8018cf8:	8b7b      	ldrh	r3, [r7, #26]
 8018cfa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	f200 809a 	bhi.w	8018e38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d04:	69fa      	ldr	r2, [r7, #28]
 8018d06:	6879      	ldr	r1, [r7, #4]
 8018d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018d0a:	f7ff fdd5 	bl	80188b8 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d0e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d16:	f000 809b 	beq.w	8018e50 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d1a:	4b48      	ldr	r3, [pc, #288]	@ (8018e3c <ip4_reass+0x2b0>)
 8018d1c:	881a      	ldrh	r2, [r3, #0]
 8018d1e:	8c3b      	ldrh	r3, [r7, #32]
 8018d20:	4413      	add	r3, r2
 8018d22:	b29a      	uxth	r2, r3
 8018d24:	4b45      	ldr	r3, [pc, #276]	@ (8018e3c <ip4_reass+0x2b0>)
 8018d26:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d28:	69fb      	ldr	r3, [r7, #28]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d00d      	beq.n	8018d4a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d2e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018d30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d32:	4413      	add	r3, r2
 8018d34:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d38:	8a7a      	ldrh	r2, [r7, #18]
 8018d3a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d3e:	7f9b      	ldrb	r3, [r3, #30]
 8018d40:	f043 0301 	orr.w	r3, r3, #1
 8018d44:	b2da      	uxtb	r2, r3
 8018d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d48:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018d4a:	697b      	ldr	r3, [r7, #20]
 8018d4c:	2b01      	cmp	r3, #1
 8018d4e:	d171      	bne.n	8018e34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d52:	8b9b      	ldrh	r3, [r3, #28]
 8018d54:	3314      	adds	r3, #20
 8018d56:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d6c:	3308      	adds	r3, #8
 8018d6e:	2214      	movs	r2, #20
 8018d70:	4619      	mov	r1, r3
 8018d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018d74:	f00a f807 	bl	8022d86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018d78:	8a3b      	ldrh	r3, [r7, #16]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f000 fa40 	bl	8019200 <lwip_htons>
 8018d80:	4603      	mov	r3, r0
 8018d82:	461a      	mov	r2, r3
 8018d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d86:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	719a      	strb	r2, [r3, #6]
 8018d8e:	2200      	movs	r2, #0
 8018d90:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d94:	2200      	movs	r2, #0
 8018d96:	729a      	strb	r2, [r3, #10]
 8018d98:	2200      	movs	r2, #0
 8018d9a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018da2:	e00d      	b.n	8018dc0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018daa:	2114      	movs	r1, #20
 8018dac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018dae:	f001 fe21 	bl	801a9f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018db2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018db4:	6878      	ldr	r0, [r7, #4]
 8018db6:	f001 ffa3 	bl	801ad00 <pbuf_cat>
      r = iprh->next_pbuf;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d1ee      	bne.n	8018da4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8018e40 <ip4_reass+0x2b4>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d102      	bne.n	8018dd6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018dd4:	e010      	b.n	8018df8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8018e40 <ip4_reass+0x2b4>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ddc:	e007      	b.n	8018dee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018de4:	429a      	cmp	r2, r3
 8018de6:	d006      	beq.n	8018df6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d1f4      	bne.n	8018dde <ip4_reass+0x252>
 8018df4:	e000      	b.n	8018df8 <ip4_reass+0x26c>
          break;
 8018df6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018dfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018dfc:	f7ff fd2e 	bl	801885c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e00:	6878      	ldr	r0, [r7, #4]
 8018e02:	f001 ff3d 	bl	801ac80 <pbuf_clen>
 8018e06:	4603      	mov	r3, r0
 8018e08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8018e3c <ip4_reass+0x2b0>)
 8018e0c:	881b      	ldrh	r3, [r3, #0]
 8018e0e:	8c3a      	ldrh	r2, [r7, #32]
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d906      	bls.n	8018e22 <ip4_reass+0x296>
 8018e14:	4b0b      	ldr	r3, [pc, #44]	@ (8018e44 <ip4_reass+0x2b8>)
 8018e16:	f240 229b 	movw	r2, #667	@ 0x29b
 8018e1a:	490b      	ldr	r1, [pc, #44]	@ (8018e48 <ip4_reass+0x2bc>)
 8018e1c:	480b      	ldr	r0, [pc, #44]	@ (8018e4c <ip4_reass+0x2c0>)
 8018e1e:	f009 fd7b 	bl	8022918 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e22:	4b06      	ldr	r3, [pc, #24]	@ (8018e3c <ip4_reass+0x2b0>)
 8018e24:	881a      	ldrh	r2, [r3, #0]
 8018e26:	8c3b      	ldrh	r3, [r7, #32]
 8018e28:	1ad3      	subs	r3, r2, r3
 8018e2a:	b29a      	uxth	r2, r3
 8018e2c:	4b03      	ldr	r3, [pc, #12]	@ (8018e3c <ip4_reass+0x2b0>)
 8018e2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	e038      	b.n	8018ea6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e34:	2300      	movs	r3, #0
 8018e36:	e036      	b.n	8018ea6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018e38:	bf00      	nop
 8018e3a:	e00a      	b.n	8018e52 <ip4_reass+0x2c6>
 8018e3c:	20008eb8 	.word	0x20008eb8
 8018e40:	20008eb4 	.word	0x20008eb4
 8018e44:	08025c9c 	.word	0x08025c9c
 8018e48:	08025e4c 	.word	0x08025e4c
 8018e4c:	08025d24 	.word	0x08025d24
    goto nullreturn_ipr;
 8018e50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d106      	bne.n	8018e66 <ip4_reass+0x2da>
 8018e58:	4b15      	ldr	r3, [pc, #84]	@ (8018eb0 <ip4_reass+0x324>)
 8018e5a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018e5e:	4915      	ldr	r1, [pc, #84]	@ (8018eb4 <ip4_reass+0x328>)
 8018e60:	4815      	ldr	r0, [pc, #84]	@ (8018eb8 <ip4_reass+0x32c>)
 8018e62:	f009 fd59 	bl	8022918 <iprintf>
  if (ipr->p == NULL) {
 8018e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e68:	685b      	ldr	r3, [r3, #4]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d116      	bne.n	8018e9c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018e6e:	4b13      	ldr	r3, [pc, #76]	@ (8018ebc <ip4_reass+0x330>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e74:	429a      	cmp	r2, r3
 8018e76:	d006      	beq.n	8018e86 <ip4_reass+0x2fa>
 8018e78:	4b0d      	ldr	r3, [pc, #52]	@ (8018eb0 <ip4_reass+0x324>)
 8018e7a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018e7e:	4910      	ldr	r1, [pc, #64]	@ (8018ec0 <ip4_reass+0x334>)
 8018e80:	480d      	ldr	r0, [pc, #52]	@ (8018eb8 <ip4_reass+0x32c>)
 8018e82:	f009 fd49 	bl	8022918 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018e86:	2100      	movs	r1, #0
 8018e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e8a:	f7ff fce7 	bl	801885c <ip_reass_dequeue_datagram>
 8018e8e:	e006      	b.n	8018e9e <ip4_reass+0x312>
    goto nullreturn;
 8018e90:	bf00      	nop
 8018e92:	e004      	b.n	8018e9e <ip4_reass+0x312>
    goto nullreturn;
 8018e94:	bf00      	nop
 8018e96:	e002      	b.n	8018e9e <ip4_reass+0x312>
      goto nullreturn;
 8018e98:	bf00      	nop
 8018e9a:	e000      	b.n	8018e9e <ip4_reass+0x312>
  }

nullreturn:
 8018e9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f001 fe60 	bl	801ab64 <pbuf_free>
  return NULL;
 8018ea4:	2300      	movs	r3, #0
}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	3738      	adds	r7, #56	@ 0x38
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	08025c9c 	.word	0x08025c9c
 8018eb4:	08025e68 	.word	0x08025e68
 8018eb8:	08025d24 	.word	0x08025d24
 8018ebc:	20008eb4 	.word	0x20008eb4
 8018ec0:	08025e74 	.word	0x08025e74

08018ec4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018ec8:	2005      	movs	r0, #5
 8018eca:	f000 fedd 	bl	8019c88 <memp_malloc>
 8018ece:	4603      	mov	r3, r0
}
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	bd80      	pop	{r7, pc}

08018ed4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b082      	sub	sp, #8
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d106      	bne.n	8018ef0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018ee2:	4b07      	ldr	r3, [pc, #28]	@ (8018f00 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018ee4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018ee8:	4906      	ldr	r1, [pc, #24]	@ (8018f04 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018eea:	4807      	ldr	r0, [pc, #28]	@ (8018f08 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018eec:	f009 fd14 	bl	8022918 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018ef0:	6879      	ldr	r1, [r7, #4]
 8018ef2:	2005      	movs	r0, #5
 8018ef4:	f000 ff3e 	bl	8019d74 <memp_free>
}
 8018ef8:	bf00      	nop
 8018efa:	3708      	adds	r7, #8
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}
 8018f00:	08025c9c 	.word	0x08025c9c
 8018f04:	08025e94 	.word	0x08025e94
 8018f08:	08025d24 	.word	0x08025d24

08018f0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b084      	sub	sp, #16
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d106      	bne.n	8018f2c <ipfrag_free_pbuf_custom+0x20>
 8018f1e:	4b11      	ldr	r3, [pc, #68]	@ (8018f64 <ipfrag_free_pbuf_custom+0x58>)
 8018f20:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018f24:	4910      	ldr	r1, [pc, #64]	@ (8018f68 <ipfrag_free_pbuf_custom+0x5c>)
 8018f26:	4811      	ldr	r0, [pc, #68]	@ (8018f6c <ipfrag_free_pbuf_custom+0x60>)
 8018f28:	f009 fcf6 	bl	8022918 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f2c:	68fa      	ldr	r2, [r7, #12]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d006      	beq.n	8018f42 <ipfrag_free_pbuf_custom+0x36>
 8018f34:	4b0b      	ldr	r3, [pc, #44]	@ (8018f64 <ipfrag_free_pbuf_custom+0x58>)
 8018f36:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018f3a:	490d      	ldr	r1, [pc, #52]	@ (8018f70 <ipfrag_free_pbuf_custom+0x64>)
 8018f3c:	480b      	ldr	r0, [pc, #44]	@ (8018f6c <ipfrag_free_pbuf_custom+0x60>)
 8018f3e:	f009 fceb 	bl	8022918 <iprintf>
  if (pcr->original != NULL) {
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	69db      	ldr	r3, [r3, #28]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d004      	beq.n	8018f54 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	69db      	ldr	r3, [r3, #28]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f001 fe08 	bl	801ab64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018f54:	68f8      	ldr	r0, [r7, #12]
 8018f56:	f7ff ffbd 	bl	8018ed4 <ip_frag_free_pbuf_custom_ref>
}
 8018f5a:	bf00      	nop
 8018f5c:	3710      	adds	r7, #16
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}
 8018f62:	bf00      	nop
 8018f64:	08025c9c 	.word	0x08025c9c
 8018f68:	08025ea0 	.word	0x08025ea0
 8018f6c:	08025d24 	.word	0x08025d24
 8018f70:	08025eac 	.word	0x08025eac

08018f74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b094      	sub	sp, #80	@ 0x50
 8018f78:	af02      	add	r7, sp, #8
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018f80:	2300      	movs	r3, #0
 8018f82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018f8a:	3b14      	subs	r3, #20
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	da00      	bge.n	8018f92 <ip4_frag+0x1e>
 8018f90:	3307      	adds	r3, #7
 8018f92:	10db      	asrs	r3, r3, #3
 8018f94:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018f96:	2314      	movs	r3, #20
 8018f98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	f003 030f 	and.w	r3, r3, #15
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	2b14      	cmp	r3, #20
 8018fb4:	d002      	beq.n	8018fbc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018fb6:	f06f 0305 	mvn.w	r3, #5
 8018fba:	e110      	b.n	80191de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	895b      	ldrh	r3, [r3, #10]
 8018fc0:	2b13      	cmp	r3, #19
 8018fc2:	d809      	bhi.n	8018fd8 <ip4_frag+0x64>
 8018fc4:	4b88      	ldr	r3, [pc, #544]	@ (80191e8 <ip4_frag+0x274>)
 8018fc6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018fca:	4988      	ldr	r1, [pc, #544]	@ (80191ec <ip4_frag+0x278>)
 8018fcc:	4888      	ldr	r0, [pc, #544]	@ (80191f0 <ip4_frag+0x27c>)
 8018fce:	f009 fca3 	bl	8022918 <iprintf>
 8018fd2:	f06f 0305 	mvn.w	r3, #5
 8018fd6:	e102      	b.n	80191de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fda:	88db      	ldrh	r3, [r3, #6]
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f000 f90e 	bl	8019200 <lwip_htons>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018fe8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018fee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018ff2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	891b      	ldrh	r3, [r3, #8]
 8018ffe:	3b14      	subs	r3, #20
 8019000:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019004:	e0e1      	b.n	80191ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019006:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019008:	00db      	lsls	r3, r3, #3
 801900a:	b29b      	uxth	r3, r3
 801900c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019010:	4293      	cmp	r3, r2
 8019012:	bf28      	it	cs
 8019014:	4613      	movcs	r3, r2
 8019016:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019018:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801901c:	2114      	movs	r1, #20
 801901e:	200e      	movs	r0, #14
 8019020:	f001 fa8a 	bl	801a538 <pbuf_alloc>
 8019024:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019028:	2b00      	cmp	r3, #0
 801902a:	f000 80d5 	beq.w	80191d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019030:	895b      	ldrh	r3, [r3, #10]
 8019032:	2b13      	cmp	r3, #19
 8019034:	d806      	bhi.n	8019044 <ip4_frag+0xd0>
 8019036:	4b6c      	ldr	r3, [pc, #432]	@ (80191e8 <ip4_frag+0x274>)
 8019038:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801903c:	496d      	ldr	r1, [pc, #436]	@ (80191f4 <ip4_frag+0x280>)
 801903e:	486c      	ldr	r0, [pc, #432]	@ (80191f0 <ip4_frag+0x27c>)
 8019040:	f009 fc6a 	bl	8022918 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019046:	685b      	ldr	r3, [r3, #4]
 8019048:	2214      	movs	r2, #20
 801904a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801904c:	4618      	mov	r0, r3
 801904e:	f009 fe9a 	bl	8022d86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019054:	685b      	ldr	r3, [r3, #4]
 8019056:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019058:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801905a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801905e:	e064      	b.n	801912a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	895a      	ldrh	r2, [r3, #10]
 8019064:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019066:	1ad3      	subs	r3, r2, r3
 8019068:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	895b      	ldrh	r3, [r3, #10]
 801906e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019070:	429a      	cmp	r2, r3
 8019072:	d906      	bls.n	8019082 <ip4_frag+0x10e>
 8019074:	4b5c      	ldr	r3, [pc, #368]	@ (80191e8 <ip4_frag+0x274>)
 8019076:	f240 322d 	movw	r2, #813	@ 0x32d
 801907a:	495f      	ldr	r1, [pc, #380]	@ (80191f8 <ip4_frag+0x284>)
 801907c:	485c      	ldr	r0, [pc, #368]	@ (80191f0 <ip4_frag+0x27c>)
 801907e:	f009 fc4b 	bl	8022918 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019082:	8bfa      	ldrh	r2, [r7, #30]
 8019084:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019088:	4293      	cmp	r3, r2
 801908a:	bf28      	it	cs
 801908c:	4613      	movcs	r3, r2
 801908e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019092:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019096:	2b00      	cmp	r3, #0
 8019098:	d105      	bne.n	80190a6 <ip4_frag+0x132>
        poff = 0;
 801909a:	2300      	movs	r3, #0
 801909c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	60fb      	str	r3, [r7, #12]
        continue;
 80190a4:	e041      	b.n	801912a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190a6:	f7ff ff0d 	bl	8018ec4 <ip_frag_alloc_pbuf_custom_ref>
 80190aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190ac:	69bb      	ldr	r3, [r7, #24]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d103      	bne.n	80190ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80190b4:	f001 fd56 	bl	801ab64 <pbuf_free>
        goto memerr;
 80190b8:	e08f      	b.n	80191da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190c2:	4413      	add	r3, r2
 80190c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80190c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80190cc:	9201      	str	r2, [sp, #4]
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	4603      	mov	r3, r0
 80190d2:	2241      	movs	r2, #65	@ 0x41
 80190d4:	2000      	movs	r0, #0
 80190d6:	f001 fb59 	bl	801a78c <pbuf_alloced_custom>
 80190da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d106      	bne.n	80190f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80190e2:	69b8      	ldr	r0, [r7, #24]
 80190e4:	f7ff fef6 	bl	8018ed4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80190e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80190ea:	f001 fd3b 	bl	801ab64 <pbuf_free>
        goto memerr;
 80190ee:	e074      	b.n	80191da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80190f0:	68f8      	ldr	r0, [r7, #12]
 80190f2:	f001 fddd 	bl	801acb0 <pbuf_ref>
      pcr->original = p;
 80190f6:	69bb      	ldr	r3, [r7, #24]
 80190f8:	68fa      	ldr	r2, [r7, #12]
 80190fa:	61da      	str	r2, [r3, #28]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80190fc:	69bb      	ldr	r3, [r7, #24]
 80190fe:	4a3f      	ldr	r2, [pc, #252]	@ (80191fc <ip4_frag+0x288>)
 8019100:	619a      	str	r2, [r3, #24]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019102:	6979      	ldr	r1, [r7, #20]
 8019104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019106:	f001 fdfb 	bl	801ad00 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801910a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801910e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019112:	1ad3      	subs	r3, r2, r3
 8019114:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801911c:	2b00      	cmp	r3, #0
 801911e:	d004      	beq.n	801912a <ip4_frag+0x1b6>
        poff = 0;
 8019120:	2300      	movs	r3, #0
 8019122:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801912a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801912e:	2b00      	cmp	r3, #0
 8019130:	d196      	bne.n	8019060 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019132:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019134:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019138:	4413      	add	r3, r2
 801913a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8019140:	f1a3 0213 	sub.w	r2, r3, #19
 8019144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019148:	429a      	cmp	r2, r3
 801914a:	bfcc      	ite	gt
 801914c:	2301      	movgt	r3, #1
 801914e:	2300      	movle	r3, #0
 8019150:	b2db      	uxtb	r3, r3
 8019152:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801915c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801915e:	6a3b      	ldr	r3, [r7, #32]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d002      	beq.n	801916a <ip4_frag+0x1f6>
 8019164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019166:	2b00      	cmp	r3, #0
 8019168:	d003      	beq.n	8019172 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801916a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801916c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019170:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019172:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019174:	4618      	mov	r0, r3
 8019176:	f000 f843 	bl	8019200 <lwip_htons>
 801917a:	4603      	mov	r3, r0
 801917c:	461a      	mov	r2, r3
 801917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019180:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019182:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019184:	3314      	adds	r3, #20
 8019186:	b29b      	uxth	r3, r3
 8019188:	4618      	mov	r0, r3
 801918a:	f000 f839 	bl	8019200 <lwip_htons>
 801918e:	4603      	mov	r3, r0
 8019190:	461a      	mov	r2, r3
 8019192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019194:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019198:	2200      	movs	r2, #0
 801919a:	729a      	strb	r2, [r3, #10]
 801919c:	2200      	movs	r2, #0
 801919e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191a0:	68bb      	ldr	r3, [r7, #8]
 80191a2:	695b      	ldr	r3, [r3, #20]
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80191a8:	68b8      	ldr	r0, [r7, #8]
 80191aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80191ae:	f001 fcd9 	bl	801ab64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80191b8:	1ad3      	subs	r3, r2, r3
 80191ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80191be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80191c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80191c4:	4413      	add	r3, r2
 80191c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80191ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	f47f af19 	bne.w	8019006 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80191d4:	2300      	movs	r3, #0
 80191d6:	e002      	b.n	80191de <ip4_frag+0x26a>
      goto memerr;
 80191d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80191da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3748      	adds	r7, #72	@ 0x48
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	08025c9c 	.word	0x08025c9c
 80191ec:	08025eb8 	.word	0x08025eb8
 80191f0:	08025d24 	.word	0x08025d24
 80191f4:	08025ed4 	.word	0x08025ed4
 80191f8:	08025ef4 	.word	0x08025ef4
 80191fc:	08018f0d 	.word	0x08018f0d

08019200 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	4603      	mov	r3, r0
 8019208:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801920a:	88fb      	ldrh	r3, [r7, #6]
 801920c:	021b      	lsls	r3, r3, #8
 801920e:	b21a      	sxth	r2, r3
 8019210:	88fb      	ldrh	r3, [r7, #6]
 8019212:	0a1b      	lsrs	r3, r3, #8
 8019214:	b29b      	uxth	r3, r3
 8019216:	b21b      	sxth	r3, r3
 8019218:	4313      	orrs	r3, r2
 801921a:	b21b      	sxth	r3, r3
 801921c:	b29b      	uxth	r3, r3
}
 801921e:	4618      	mov	r0, r3
 8019220:	370c      	adds	r7, #12
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801922a:	b480      	push	{r7}
 801922c:	b083      	sub	sp, #12
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	061a      	lsls	r2, r3, #24
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	021b      	lsls	r3, r3, #8
 801923a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801923e:	431a      	orrs	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	0a1b      	lsrs	r3, r3, #8
 8019244:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019248:	431a      	orrs	r2, r3
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	0e1b      	lsrs	r3, r3, #24
 801924e:	4313      	orrs	r3, r2
}
 8019250:	4618      	mov	r0, r3
 8019252:	370c      	adds	r7, #12
 8019254:	46bd      	mov	sp, r7
 8019256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925a:	4770      	bx	lr

0801925c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801925c:	b480      	push	{r7}
 801925e:	b089      	sub	sp, #36	@ 0x24
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801926a:	2300      	movs	r3, #0
 801926c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801926e:	2300      	movs	r3, #0
 8019270:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	f003 0301 	and.w	r3, r3, #1
 8019278:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d00d      	beq.n	801929c <lwip_standard_chksum+0x40>
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	dd0a      	ble.n	801929c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8019286:	69fa      	ldr	r2, [r7, #28]
 8019288:	1c53      	adds	r3, r2, #1
 801928a:	61fb      	str	r3, [r7, #28]
 801928c:	f107 030e 	add.w	r3, r7, #14
 8019290:	3301      	adds	r3, #1
 8019292:	7812      	ldrb	r2, [r2, #0]
 8019294:	701a      	strb	r2, [r3, #0]
    len--;
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	3b01      	subs	r3, #1
 801929a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801929c:	69fb      	ldr	r3, [r7, #28]
 801929e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80192a0:	e00a      	b.n	80192b8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80192a2:	69bb      	ldr	r3, [r7, #24]
 80192a4:	1c9a      	adds	r2, r3, #2
 80192a6:	61ba      	str	r2, [r7, #24]
 80192a8:	881b      	ldrh	r3, [r3, #0]
 80192aa:	461a      	mov	r2, r3
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	4413      	add	r3, r2
 80192b0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	3b02      	subs	r3, #2
 80192b6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	2b01      	cmp	r3, #1
 80192bc:	dcf1      	bgt.n	80192a2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	dd04      	ble.n	80192ce <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80192c4:	f107 030e 	add.w	r3, r7, #14
 80192c8:	69ba      	ldr	r2, [r7, #24]
 80192ca:	7812      	ldrb	r2, [r2, #0]
 80192cc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80192ce:	89fb      	ldrh	r3, [r7, #14]
 80192d0:	461a      	mov	r2, r3
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	4413      	add	r3, r2
 80192d6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	0c1a      	lsrs	r2, r3, #16
 80192dc:	697b      	ldr	r3, [r7, #20]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	4413      	add	r3, r2
 80192e2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	0c1a      	lsrs	r2, r3, #16
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	4413      	add	r3, r2
 80192ee:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d007      	beq.n	8019306 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	021b      	lsls	r3, r3, #8
 80192fa:	b29a      	uxth	r2, r3
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	0a1b      	lsrs	r3, r3, #8
 8019300:	b2db      	uxtb	r3, r3
 8019302:	4313      	orrs	r3, r2
 8019304:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	b29b      	uxth	r3, r3
}
 801930a:	4618      	mov	r0, r3
 801930c:	3724      	adds	r7, #36	@ 0x24
 801930e:	46bd      	mov	sp, r7
 8019310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019314:	4770      	bx	lr

08019316 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019316:	b580      	push	{r7, lr}
 8019318:	b082      	sub	sp, #8
 801931a:	af00      	add	r7, sp, #0
 801931c:	6078      	str	r0, [r7, #4]
 801931e:	460b      	mov	r3, r1
 8019320:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8019322:	887b      	ldrh	r3, [r7, #2]
 8019324:	4619      	mov	r1, r3
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f7ff ff98 	bl	801925c <lwip_standard_chksum>
 801932c:	4603      	mov	r3, r0
 801932e:	43db      	mvns	r3, r3
 8019330:	b29b      	uxth	r3, r3
}
 8019332:	4618      	mov	r0, r3
 8019334:	3708      	adds	r7, #8
 8019336:	46bd      	mov	sp, r7
 8019338:	bd80      	pop	{r7, pc}

0801933a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801933a:	b580      	push	{r7, lr}
 801933c:	b082      	sub	sp, #8
 801933e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019340:	2300      	movs	r3, #0
 8019342:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019344:	f009 f924 	bl	8022590 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019348:	f000 f8d6 	bl	80194f8 <mem_init>
  memp_init();
 801934c:	f000 fc2e 	bl	8019bac <memp_init>
  pbuf_init();
  netif_init();
 8019350:	f000 fd3a 	bl	8019dc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019354:	f008 f944 	bl	80215e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019358:	f001 ff40 	bl	801b1dc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 801935c:	f7fd ffac 	bl	80172b8 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8019360:	f008 f884 	bl	802146c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019364:	bf00      	nop
 8019366:	3708      	adds	r7, #8
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}

0801936c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801936c:	b480      	push	{r7}
 801936e:	b083      	sub	sp, #12
 8019370:	af00      	add	r7, sp, #0
 8019372:	4603      	mov	r3, r0
 8019374:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8019376:	4b05      	ldr	r3, [pc, #20]	@ (801938c <ptr_to_mem+0x20>)
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	88fb      	ldrh	r3, [r7, #6]
 801937c:	4413      	add	r3, r2
}
 801937e:	4618      	mov	r0, r3
 8019380:	370c      	adds	r7, #12
 8019382:	46bd      	mov	sp, r7
 8019384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop
 801938c:	20008ed4 	.word	0x20008ed4

08019390 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8019398:	4b05      	ldr	r3, [pc, #20]	@ (80193b0 <mem_to_ptr+0x20>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	687a      	ldr	r2, [r7, #4]
 801939e:	1ad3      	subs	r3, r2, r3
 80193a0:	b29b      	uxth	r3, r3
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	370c      	adds	r7, #12
 80193a6:	46bd      	mov	sp, r7
 80193a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ac:	4770      	bx	lr
 80193ae:	bf00      	nop
 80193b0:	20008ed4 	.word	0x20008ed4

080193b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80193b4:	b590      	push	{r4, r7, lr}
 80193b6:	b085      	sub	sp, #20
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80193bc:	4b45      	ldr	r3, [pc, #276]	@ (80194d4 <plug_holes+0x120>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	687a      	ldr	r2, [r7, #4]
 80193c2:	429a      	cmp	r2, r3
 80193c4:	d206      	bcs.n	80193d4 <plug_holes+0x20>
 80193c6:	4b44      	ldr	r3, [pc, #272]	@ (80194d8 <plug_holes+0x124>)
 80193c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80193cc:	4943      	ldr	r1, [pc, #268]	@ (80194dc <plug_holes+0x128>)
 80193ce:	4844      	ldr	r0, [pc, #272]	@ (80194e0 <plug_holes+0x12c>)
 80193d0:	f009 faa2 	bl	8022918 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80193d4:	4b43      	ldr	r3, [pc, #268]	@ (80194e4 <plug_holes+0x130>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	429a      	cmp	r2, r3
 80193dc:	d306      	bcc.n	80193ec <plug_holes+0x38>
 80193de:	4b3e      	ldr	r3, [pc, #248]	@ (80194d8 <plug_holes+0x124>)
 80193e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80193e4:	4940      	ldr	r1, [pc, #256]	@ (80194e8 <plug_holes+0x134>)
 80193e6:	483e      	ldr	r0, [pc, #248]	@ (80194e0 <plug_holes+0x12c>)
 80193e8:	f009 fa96 	bl	8022918 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	791b      	ldrb	r3, [r3, #4]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d006      	beq.n	8019402 <plug_holes+0x4e>
 80193f4:	4b38      	ldr	r3, [pc, #224]	@ (80194d8 <plug_holes+0x124>)
 80193f6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80193fa:	493c      	ldr	r1, [pc, #240]	@ (80194ec <plug_holes+0x138>)
 80193fc:	4838      	ldr	r0, [pc, #224]	@ (80194e0 <plug_holes+0x12c>)
 80193fe:	f009 fa8b 	bl	8022918 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	881b      	ldrh	r3, [r3, #0]
 8019406:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 801940a:	d906      	bls.n	801941a <plug_holes+0x66>
 801940c:	4b32      	ldr	r3, [pc, #200]	@ (80194d8 <plug_holes+0x124>)
 801940e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8019412:	4937      	ldr	r1, [pc, #220]	@ (80194f0 <plug_holes+0x13c>)
 8019414:	4832      	ldr	r0, [pc, #200]	@ (80194e0 <plug_holes+0x12c>)
 8019416:	f009 fa7f 	bl	8022918 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	4618      	mov	r0, r3
 8019420:	f7ff ffa4 	bl	801936c <ptr_to_mem>
 8019424:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	429a      	cmp	r2, r3
 801942c:	d024      	beq.n	8019478 <plug_holes+0xc4>
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	791b      	ldrb	r3, [r3, #4]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d120      	bne.n	8019478 <plug_holes+0xc4>
 8019436:	4b2b      	ldr	r3, [pc, #172]	@ (80194e4 <plug_holes+0x130>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	68fa      	ldr	r2, [r7, #12]
 801943c:	429a      	cmp	r2, r3
 801943e:	d01b      	beq.n	8019478 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8019440:	4b2c      	ldr	r3, [pc, #176]	@ (80194f4 <plug_holes+0x140>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	68fa      	ldr	r2, [r7, #12]
 8019446:	429a      	cmp	r2, r3
 8019448:	d102      	bne.n	8019450 <plug_holes+0x9c>
      lfree = mem;
 801944a:	4a2a      	ldr	r2, [pc, #168]	@ (80194f4 <plug_holes+0x140>)
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	881a      	ldrh	r2, [r3, #0]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	881b      	ldrh	r3, [r3, #0]
 801945c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019460:	d00a      	beq.n	8019478 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	881b      	ldrh	r3, [r3, #0]
 8019466:	4618      	mov	r0, r3
 8019468:	f7ff ff80 	bl	801936c <ptr_to_mem>
 801946c:	4604      	mov	r4, r0
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	f7ff ff8e 	bl	8019390 <mem_to_ptr>
 8019474:	4603      	mov	r3, r0
 8019476:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	885b      	ldrh	r3, [r3, #2]
 801947c:	4618      	mov	r0, r3
 801947e:	f7ff ff75 	bl	801936c <ptr_to_mem>
 8019482:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8019484:	68ba      	ldr	r2, [r7, #8]
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	429a      	cmp	r2, r3
 801948a:	d01f      	beq.n	80194cc <plug_holes+0x118>
 801948c:	68bb      	ldr	r3, [r7, #8]
 801948e:	791b      	ldrb	r3, [r3, #4]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d11b      	bne.n	80194cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8019494:	4b17      	ldr	r3, [pc, #92]	@ (80194f4 <plug_holes+0x140>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	687a      	ldr	r2, [r7, #4]
 801949a:	429a      	cmp	r2, r3
 801949c:	d102      	bne.n	80194a4 <plug_holes+0xf0>
      lfree = pmem;
 801949e:	4a15      	ldr	r2, [pc, #84]	@ (80194f4 <plug_holes+0x140>)
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	881a      	ldrh	r2, [r3, #0]
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	881b      	ldrh	r3, [r3, #0]
 80194b0:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80194b4:	d00a      	beq.n	80194cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	881b      	ldrh	r3, [r3, #0]
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7ff ff56 	bl	801936c <ptr_to_mem>
 80194c0:	4604      	mov	r4, r0
 80194c2:	68b8      	ldr	r0, [r7, #8]
 80194c4:	f7ff ff64 	bl	8019390 <mem_to_ptr>
 80194c8:	4603      	mov	r3, r0
 80194ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80194cc:	bf00      	nop
 80194ce:	3714      	adds	r7, #20
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd90      	pop	{r4, r7, pc}
 80194d4:	20008ed4 	.word	0x20008ed4
 80194d8:	08025f04 	.word	0x08025f04
 80194dc:	08025f78 	.word	0x08025f78
 80194e0:	08025f90 	.word	0x08025f90
 80194e4:	20008ed8 	.word	0x20008ed8
 80194e8:	08025fb8 	.word	0x08025fb8
 80194ec:	08025fd4 	.word	0x08025fd4
 80194f0:	08025ff0 	.word	0x08025ff0
 80194f4:	20008ee0 	.word	0x20008ee0

080194f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b082      	sub	sp, #8
 80194fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80194fe:	4b1d      	ldr	r3, [pc, #116]	@ (8019574 <mem_init+0x7c>)
 8019500:	4a1d      	ldr	r2, [pc, #116]	@ (8019578 <mem_init+0x80>)
 8019502:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8019504:	4b1b      	ldr	r3, [pc, #108]	@ (8019574 <mem_init+0x7c>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8019510:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2200      	movs	r2, #0
 8019516:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	2200      	movs	r2, #0
 801951c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801951e:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 8019522:	f7ff ff23 	bl	801936c <ptr_to_mem>
 8019526:	4603      	mov	r3, r0
 8019528:	4a14      	ldr	r2, [pc, #80]	@ (801957c <mem_init+0x84>)
 801952a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801952c:	4b13      	ldr	r3, [pc, #76]	@ (801957c <mem_init+0x84>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	2201      	movs	r2, #1
 8019532:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8019534:	4b11      	ldr	r3, [pc, #68]	@ (801957c <mem_init+0x84>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 801953c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801953e:	4b0f      	ldr	r3, [pc, #60]	@ (801957c <mem_init+0x84>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8019546:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019548:	4b0a      	ldr	r3, [pc, #40]	@ (8019574 <mem_init+0x7c>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	4a0c      	ldr	r2, [pc, #48]	@ (8019580 <mem_init+0x88>)
 801954e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019550:	480c      	ldr	r0, [pc, #48]	@ (8019584 <mem_init+0x8c>)
 8019552:	f009 f829 	bl	80225a8 <sys_mutex_new>
 8019556:	4603      	mov	r3, r0
 8019558:	2b00      	cmp	r3, #0
 801955a:	d006      	beq.n	801956a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801955c:	4b0a      	ldr	r3, [pc, #40]	@ (8019588 <mem_init+0x90>)
 801955e:	f240 221f 	movw	r2, #543	@ 0x21f
 8019562:	490a      	ldr	r1, [pc, #40]	@ (801958c <mem_init+0x94>)
 8019564:	480a      	ldr	r0, [pc, #40]	@ (8019590 <mem_init+0x98>)
 8019566:	f009 f9d7 	bl	8022918 <iprintf>
  }
}
 801956a:	bf00      	nop
 801956c:	3708      	adds	r7, #8
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	20008ed4 	.word	0x20008ed4
 8019578:	30004000 	.word	0x30004000
 801957c:	20008ed8 	.word	0x20008ed8
 8019580:	20008ee0 	.word	0x20008ee0
 8019584:	20008edc 	.word	0x20008edc
 8019588:	08025f04 	.word	0x08025f04
 801958c:	0802601c 	.word	0x0802601c
 8019590:	08025f90 	.word	0x08025f90

08019594 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b086      	sub	sp, #24
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f7ff fef7 	bl	8019390 <mem_to_ptr>
 80195a2:	4603      	mov	r3, r0
 80195a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	881b      	ldrh	r3, [r3, #0]
 80195aa:	4618      	mov	r0, r3
 80195ac:	f7ff fede 	bl	801936c <ptr_to_mem>
 80195b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	885b      	ldrh	r3, [r3, #2]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7ff fed8 	bl	801936c <ptr_to_mem>
 80195bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	881b      	ldrh	r3, [r3, #0]
 80195c2:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80195c6:	d818      	bhi.n	80195fa <mem_link_valid+0x66>
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	885b      	ldrh	r3, [r3, #2]
 80195cc:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80195d0:	d813      	bhi.n	80195fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80195d6:	8afa      	ldrh	r2, [r7, #22]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d004      	beq.n	80195e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	881b      	ldrh	r3, [r3, #0]
 80195e0:	8afa      	ldrh	r2, [r7, #22]
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d109      	bne.n	80195fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80195e6:	4b08      	ldr	r3, [pc, #32]	@ (8019608 <mem_link_valid+0x74>)
 80195e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80195ea:	693a      	ldr	r2, [r7, #16]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d006      	beq.n	80195fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80195f0:	693b      	ldr	r3, [r7, #16]
 80195f2:	885b      	ldrh	r3, [r3, #2]
 80195f4:	8afa      	ldrh	r2, [r7, #22]
 80195f6:	429a      	cmp	r2, r3
 80195f8:	d001      	beq.n	80195fe <mem_link_valid+0x6a>
    return 0;
 80195fa:	2300      	movs	r3, #0
 80195fc:	e000      	b.n	8019600 <mem_link_valid+0x6c>
  }
  return 1;
 80195fe:	2301      	movs	r3, #1
}
 8019600:	4618      	mov	r0, r3
 8019602:	3718      	adds	r7, #24
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}
 8019608:	20008ed8 	.word	0x20008ed8

0801960c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b088      	sub	sp, #32
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d070      	beq.n	80196fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	f003 0303 	and.w	r3, r3, #3
 8019620:	2b00      	cmp	r3, #0
 8019622:	d00d      	beq.n	8019640 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019624:	4b37      	ldr	r3, [pc, #220]	@ (8019704 <mem_free+0xf8>)
 8019626:	f240 2273 	movw	r2, #627	@ 0x273
 801962a:	4937      	ldr	r1, [pc, #220]	@ (8019708 <mem_free+0xfc>)
 801962c:	4837      	ldr	r0, [pc, #220]	@ (801970c <mem_free+0x100>)
 801962e:	f009 f973 	bl	8022918 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019632:	f009 f80b 	bl	802264c <sys_arch_protect>
 8019636:	60f8      	str	r0, [r7, #12]
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	f009 f815 	bl	8022668 <sys_arch_unprotect>
    return;
 801963e:	e05e      	b.n	80196fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	3b08      	subs	r3, #8
 8019644:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019646:	4b32      	ldr	r3, [pc, #200]	@ (8019710 <mem_free+0x104>)
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	69fa      	ldr	r2, [r7, #28]
 801964c:	429a      	cmp	r2, r3
 801964e:	d306      	bcc.n	801965e <mem_free+0x52>
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	f103 020c 	add.w	r2, r3, #12
 8019656:	4b2f      	ldr	r3, [pc, #188]	@ (8019714 <mem_free+0x108>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	429a      	cmp	r2, r3
 801965c:	d90d      	bls.n	801967a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801965e:	4b29      	ldr	r3, [pc, #164]	@ (8019704 <mem_free+0xf8>)
 8019660:	f240 227f 	movw	r2, #639	@ 0x27f
 8019664:	492c      	ldr	r1, [pc, #176]	@ (8019718 <mem_free+0x10c>)
 8019666:	4829      	ldr	r0, [pc, #164]	@ (801970c <mem_free+0x100>)
 8019668:	f009 f956 	bl	8022918 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801966c:	f008 ffee 	bl	802264c <sys_arch_protect>
 8019670:	6138      	str	r0, [r7, #16]
 8019672:	6938      	ldr	r0, [r7, #16]
 8019674:	f008 fff8 	bl	8022668 <sys_arch_unprotect>
    return;
 8019678:	e041      	b.n	80196fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801967a:	4828      	ldr	r0, [pc, #160]	@ (801971c <mem_free+0x110>)
 801967c:	f008 ffaa 	bl	80225d4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8019680:	69fb      	ldr	r3, [r7, #28]
 8019682:	791b      	ldrb	r3, [r3, #4]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d110      	bne.n	80196aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019688:	4b1e      	ldr	r3, [pc, #120]	@ (8019704 <mem_free+0xf8>)
 801968a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801968e:	4924      	ldr	r1, [pc, #144]	@ (8019720 <mem_free+0x114>)
 8019690:	481e      	ldr	r0, [pc, #120]	@ (801970c <mem_free+0x100>)
 8019692:	f009 f941 	bl	8022918 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8019696:	4821      	ldr	r0, [pc, #132]	@ (801971c <mem_free+0x110>)
 8019698:	f008 ffab 	bl	80225f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801969c:	f008 ffd6 	bl	802264c <sys_arch_protect>
 80196a0:	6178      	str	r0, [r7, #20]
 80196a2:	6978      	ldr	r0, [r7, #20]
 80196a4:	f008 ffe0 	bl	8022668 <sys_arch_unprotect>
    return;
 80196a8:	e029      	b.n	80196fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80196aa:	69f8      	ldr	r0, [r7, #28]
 80196ac:	f7ff ff72 	bl	8019594 <mem_link_valid>
 80196b0:	4603      	mov	r3, r0
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d110      	bne.n	80196d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80196b6:	4b13      	ldr	r3, [pc, #76]	@ (8019704 <mem_free+0xf8>)
 80196b8:	f240 2295 	movw	r2, #661	@ 0x295
 80196bc:	4919      	ldr	r1, [pc, #100]	@ (8019724 <mem_free+0x118>)
 80196be:	4813      	ldr	r0, [pc, #76]	@ (801970c <mem_free+0x100>)
 80196c0:	f009 f92a 	bl	8022918 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80196c4:	4815      	ldr	r0, [pc, #84]	@ (801971c <mem_free+0x110>)
 80196c6:	f008 ff94 	bl	80225f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80196ca:	f008 ffbf 	bl	802264c <sys_arch_protect>
 80196ce:	61b8      	str	r0, [r7, #24]
 80196d0:	69b8      	ldr	r0, [r7, #24]
 80196d2:	f008 ffc9 	bl	8022668 <sys_arch_unprotect>
    return;
 80196d6:	e012      	b.n	80196fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80196d8:	69fb      	ldr	r3, [r7, #28]
 80196da:	2200      	movs	r2, #0
 80196dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80196de:	4b12      	ldr	r3, [pc, #72]	@ (8019728 <mem_free+0x11c>)
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	69fa      	ldr	r2, [r7, #28]
 80196e4:	429a      	cmp	r2, r3
 80196e6:	d202      	bcs.n	80196ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80196e8:	4a0f      	ldr	r2, [pc, #60]	@ (8019728 <mem_free+0x11c>)
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80196ee:	69f8      	ldr	r0, [r7, #28]
 80196f0:	f7ff fe60 	bl	80193b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80196f4:	4809      	ldr	r0, [pc, #36]	@ (801971c <mem_free+0x110>)
 80196f6:	f008 ff7c 	bl	80225f2 <sys_mutex_unlock>
 80196fa:	e000      	b.n	80196fe <mem_free+0xf2>
    return;
 80196fc:	bf00      	nop
}
 80196fe:	3720      	adds	r7, #32
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	08025f04 	.word	0x08025f04
 8019708:	08026038 	.word	0x08026038
 801970c:	08025f90 	.word	0x08025f90
 8019710:	20008ed4 	.word	0x20008ed4
 8019714:	20008ed8 	.word	0x20008ed8
 8019718:	0802605c 	.word	0x0802605c
 801971c:	20008edc 	.word	0x20008edc
 8019720:	08026078 	.word	0x08026078
 8019724:	080260a0 	.word	0x080260a0
 8019728:	20008ee0 	.word	0x20008ee0

0801972c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b088      	sub	sp, #32
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
 8019734:	460b      	mov	r3, r1
 8019736:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019738:	887b      	ldrh	r3, [r7, #2]
 801973a:	3303      	adds	r3, #3
 801973c:	b29b      	uxth	r3, r3
 801973e:	f023 0303 	bic.w	r3, r3, #3
 8019742:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8019744:	8bfb      	ldrh	r3, [r7, #30]
 8019746:	2b0b      	cmp	r3, #11
 8019748:	d801      	bhi.n	801974e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801974a:	230c      	movs	r3, #12
 801974c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801974e:	8bfb      	ldrh	r3, [r7, #30]
 8019750:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019754:	d803      	bhi.n	801975e <mem_trim+0x32>
 8019756:	8bfa      	ldrh	r2, [r7, #30]
 8019758:	887b      	ldrh	r3, [r7, #2]
 801975a:	429a      	cmp	r2, r3
 801975c:	d201      	bcs.n	8019762 <mem_trim+0x36>
    return NULL;
 801975e:	2300      	movs	r3, #0
 8019760:	e0d8      	b.n	8019914 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019762:	4b6e      	ldr	r3, [pc, #440]	@ (801991c <mem_trim+0x1f0>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	687a      	ldr	r2, [r7, #4]
 8019768:	429a      	cmp	r2, r3
 801976a:	d304      	bcc.n	8019776 <mem_trim+0x4a>
 801976c:	4b6c      	ldr	r3, [pc, #432]	@ (8019920 <mem_trim+0x1f4>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	687a      	ldr	r2, [r7, #4]
 8019772:	429a      	cmp	r2, r3
 8019774:	d306      	bcc.n	8019784 <mem_trim+0x58>
 8019776:	4b6b      	ldr	r3, [pc, #428]	@ (8019924 <mem_trim+0x1f8>)
 8019778:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801977c:	496a      	ldr	r1, [pc, #424]	@ (8019928 <mem_trim+0x1fc>)
 801977e:	486b      	ldr	r0, [pc, #428]	@ (801992c <mem_trim+0x200>)
 8019780:	f009 f8ca 	bl	8022918 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019784:	4b65      	ldr	r3, [pc, #404]	@ (801991c <mem_trim+0x1f0>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	687a      	ldr	r2, [r7, #4]
 801978a:	429a      	cmp	r2, r3
 801978c:	d304      	bcc.n	8019798 <mem_trim+0x6c>
 801978e:	4b64      	ldr	r3, [pc, #400]	@ (8019920 <mem_trim+0x1f4>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	687a      	ldr	r2, [r7, #4]
 8019794:	429a      	cmp	r2, r3
 8019796:	d307      	bcc.n	80197a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019798:	f008 ff58 	bl	802264c <sys_arch_protect>
 801979c:	60b8      	str	r0, [r7, #8]
 801979e:	68b8      	ldr	r0, [r7, #8]
 80197a0:	f008 ff62 	bl	8022668 <sys_arch_unprotect>
    return rmem;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	e0b5      	b.n	8019914 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	3b08      	subs	r3, #8
 80197ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80197ae:	69b8      	ldr	r0, [r7, #24]
 80197b0:	f7ff fdee 	bl	8019390 <mem_to_ptr>
 80197b4:	4603      	mov	r3, r0
 80197b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80197b8:	69bb      	ldr	r3, [r7, #24]
 80197ba:	881a      	ldrh	r2, [r3, #0]
 80197bc:	8afb      	ldrh	r3, [r7, #22]
 80197be:	1ad3      	subs	r3, r2, r3
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	3b08      	subs	r3, #8
 80197c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80197c6:	8bfa      	ldrh	r2, [r7, #30]
 80197c8:	8abb      	ldrh	r3, [r7, #20]
 80197ca:	429a      	cmp	r2, r3
 80197cc:	d906      	bls.n	80197dc <mem_trim+0xb0>
 80197ce:	4b55      	ldr	r3, [pc, #340]	@ (8019924 <mem_trim+0x1f8>)
 80197d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80197d4:	4956      	ldr	r1, [pc, #344]	@ (8019930 <mem_trim+0x204>)
 80197d6:	4855      	ldr	r0, [pc, #340]	@ (801992c <mem_trim+0x200>)
 80197d8:	f009 f89e 	bl	8022918 <iprintf>
  if (newsize > size) {
 80197dc:	8bfa      	ldrh	r2, [r7, #30]
 80197de:	8abb      	ldrh	r3, [r7, #20]
 80197e0:	429a      	cmp	r2, r3
 80197e2:	d901      	bls.n	80197e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80197e4:	2300      	movs	r3, #0
 80197e6:	e095      	b.n	8019914 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80197e8:	8bfa      	ldrh	r2, [r7, #30]
 80197ea:	8abb      	ldrh	r3, [r7, #20]
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d101      	bne.n	80197f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	e08f      	b.n	8019914 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80197f4:	484f      	ldr	r0, [pc, #316]	@ (8019934 <mem_trim+0x208>)
 80197f6:	f008 feed 	bl	80225d4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80197fa:	69bb      	ldr	r3, [r7, #24]
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	4618      	mov	r0, r3
 8019800:	f7ff fdb4 	bl	801936c <ptr_to_mem>
 8019804:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8019806:	693b      	ldr	r3, [r7, #16]
 8019808:	791b      	ldrb	r3, [r3, #4]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d13f      	bne.n	801988e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801980e:	69bb      	ldr	r3, [r7, #24]
 8019810:	881b      	ldrh	r3, [r3, #0]
 8019812:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019816:	d106      	bne.n	8019826 <mem_trim+0xfa>
 8019818:	4b42      	ldr	r3, [pc, #264]	@ (8019924 <mem_trim+0x1f8>)
 801981a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801981e:	4946      	ldr	r1, [pc, #280]	@ (8019938 <mem_trim+0x20c>)
 8019820:	4842      	ldr	r0, [pc, #264]	@ (801992c <mem_trim+0x200>)
 8019822:	f009 f879 	bl	8022918 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	881b      	ldrh	r3, [r3, #0]
 801982a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801982c:	8afa      	ldrh	r2, [r7, #22]
 801982e:	8bfb      	ldrh	r3, [r7, #30]
 8019830:	4413      	add	r3, r2
 8019832:	b29b      	uxth	r3, r3
 8019834:	3308      	adds	r3, #8
 8019836:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8019838:	4b40      	ldr	r3, [pc, #256]	@ (801993c <mem_trim+0x210>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	693a      	ldr	r2, [r7, #16]
 801983e:	429a      	cmp	r2, r3
 8019840:	d106      	bne.n	8019850 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8019842:	89fb      	ldrh	r3, [r7, #14]
 8019844:	4618      	mov	r0, r3
 8019846:	f7ff fd91 	bl	801936c <ptr_to_mem>
 801984a:	4603      	mov	r3, r0
 801984c:	4a3b      	ldr	r2, [pc, #236]	@ (801993c <mem_trim+0x210>)
 801984e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8019850:	89fb      	ldrh	r3, [r7, #14]
 8019852:	4618      	mov	r0, r3
 8019854:	f7ff fd8a 	bl	801936c <ptr_to_mem>
 8019858:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	2200      	movs	r2, #0
 801985e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019860:	693b      	ldr	r3, [r7, #16]
 8019862:	89ba      	ldrh	r2, [r7, #12]
 8019864:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	8afa      	ldrh	r2, [r7, #22]
 801986a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801986c:	69bb      	ldr	r3, [r7, #24]
 801986e:	89fa      	ldrh	r2, [r7, #14]
 8019870:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	881b      	ldrh	r3, [r3, #0]
 8019876:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 801987a:	d047      	beq.n	801990c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	881b      	ldrh	r3, [r3, #0]
 8019880:	4618      	mov	r0, r3
 8019882:	f7ff fd73 	bl	801936c <ptr_to_mem>
 8019886:	4602      	mov	r2, r0
 8019888:	89fb      	ldrh	r3, [r7, #14]
 801988a:	8053      	strh	r3, [r2, #2]
 801988c:	e03e      	b.n	801990c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801988e:	8bfb      	ldrh	r3, [r7, #30]
 8019890:	f103 0214 	add.w	r2, r3, #20
 8019894:	8abb      	ldrh	r3, [r7, #20]
 8019896:	429a      	cmp	r2, r3
 8019898:	d838      	bhi.n	801990c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801989a:	8afa      	ldrh	r2, [r7, #22]
 801989c:	8bfb      	ldrh	r3, [r7, #30]
 801989e:	4413      	add	r3, r2
 80198a0:	b29b      	uxth	r3, r3
 80198a2:	3308      	adds	r3, #8
 80198a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80198a6:	69bb      	ldr	r3, [r7, #24]
 80198a8:	881b      	ldrh	r3, [r3, #0]
 80198aa:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80198ae:	d106      	bne.n	80198be <mem_trim+0x192>
 80198b0:	4b1c      	ldr	r3, [pc, #112]	@ (8019924 <mem_trim+0x1f8>)
 80198b2:	f240 3216 	movw	r2, #790	@ 0x316
 80198b6:	4920      	ldr	r1, [pc, #128]	@ (8019938 <mem_trim+0x20c>)
 80198b8:	481c      	ldr	r0, [pc, #112]	@ (801992c <mem_trim+0x200>)
 80198ba:	f009 f82d 	bl	8022918 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80198be:	89fb      	ldrh	r3, [r7, #14]
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7ff fd53 	bl	801936c <ptr_to_mem>
 80198c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80198c8:	4b1c      	ldr	r3, [pc, #112]	@ (801993c <mem_trim+0x210>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	693a      	ldr	r2, [r7, #16]
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d202      	bcs.n	80198d8 <mem_trim+0x1ac>
      lfree = mem2;
 80198d2:	4a1a      	ldr	r2, [pc, #104]	@ (801993c <mem_trim+0x210>)
 80198d4:	693b      	ldr	r3, [r7, #16]
 80198d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80198d8:	693b      	ldr	r3, [r7, #16]
 80198da:	2200      	movs	r2, #0
 80198dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80198de:	69bb      	ldr	r3, [r7, #24]
 80198e0:	881a      	ldrh	r2, [r3, #0]
 80198e2:	693b      	ldr	r3, [r7, #16]
 80198e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	8afa      	ldrh	r2, [r7, #22]
 80198ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80198ec:	69bb      	ldr	r3, [r7, #24]
 80198ee:	89fa      	ldrh	r2, [r7, #14]
 80198f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80198fa:	d007      	beq.n	801990c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80198fc:	693b      	ldr	r3, [r7, #16]
 80198fe:	881b      	ldrh	r3, [r3, #0]
 8019900:	4618      	mov	r0, r3
 8019902:	f7ff fd33 	bl	801936c <ptr_to_mem>
 8019906:	4602      	mov	r2, r0
 8019908:	89fb      	ldrh	r3, [r7, #14]
 801990a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801990c:	4809      	ldr	r0, [pc, #36]	@ (8019934 <mem_trim+0x208>)
 801990e:	f008 fe70 	bl	80225f2 <sys_mutex_unlock>
  return rmem;
 8019912:	687b      	ldr	r3, [r7, #4]
}
 8019914:	4618      	mov	r0, r3
 8019916:	3720      	adds	r7, #32
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	20008ed4 	.word	0x20008ed4
 8019920:	20008ed8 	.word	0x20008ed8
 8019924:	08025f04 	.word	0x08025f04
 8019928:	080260d4 	.word	0x080260d4
 801992c:	08025f90 	.word	0x08025f90
 8019930:	080260ec 	.word	0x080260ec
 8019934:	20008edc 	.word	0x20008edc
 8019938:	0802610c 	.word	0x0802610c
 801993c:	20008ee0 	.word	0x20008ee0

08019940 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b088      	sub	sp, #32
 8019944:	af00      	add	r7, sp, #0
 8019946:	4603      	mov	r3, r0
 8019948:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801994a:	88fb      	ldrh	r3, [r7, #6]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d101      	bne.n	8019954 <mem_malloc+0x14>
    return NULL;
 8019950:	2300      	movs	r3, #0
 8019952:	e0e2      	b.n	8019b1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019954:	88fb      	ldrh	r3, [r7, #6]
 8019956:	3303      	adds	r3, #3
 8019958:	b29b      	uxth	r3, r3
 801995a:	f023 0303 	bic.w	r3, r3, #3
 801995e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019960:	8bbb      	ldrh	r3, [r7, #28]
 8019962:	2b0b      	cmp	r3, #11
 8019964:	d801      	bhi.n	801996a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8019966:	230c      	movs	r3, #12
 8019968:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801996a:	8bbb      	ldrh	r3, [r7, #28]
 801996c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019970:	d803      	bhi.n	801997a <mem_malloc+0x3a>
 8019972:	8bba      	ldrh	r2, [r7, #28]
 8019974:	88fb      	ldrh	r3, [r7, #6]
 8019976:	429a      	cmp	r2, r3
 8019978:	d201      	bcs.n	801997e <mem_malloc+0x3e>
    return NULL;
 801997a:	2300      	movs	r3, #0
 801997c:	e0cd      	b.n	8019b1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801997e:	4869      	ldr	r0, [pc, #420]	@ (8019b24 <mem_malloc+0x1e4>)
 8019980:	f008 fe28 	bl	80225d4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019984:	4b68      	ldr	r3, [pc, #416]	@ (8019b28 <mem_malloc+0x1e8>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4618      	mov	r0, r3
 801998a:	f7ff fd01 	bl	8019390 <mem_to_ptr>
 801998e:	4603      	mov	r3, r0
 8019990:	83fb      	strh	r3, [r7, #30]
 8019992:	e0b7      	b.n	8019b04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8019994:	8bfb      	ldrh	r3, [r7, #30]
 8019996:	4618      	mov	r0, r3
 8019998:	f7ff fce8 	bl	801936c <ptr_to_mem>
 801999c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801999e:	697b      	ldr	r3, [r7, #20]
 80199a0:	791b      	ldrb	r3, [r3, #4]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	f040 80a7 	bne.w	8019af6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	881b      	ldrh	r3, [r3, #0]
 80199ac:	461a      	mov	r2, r3
 80199ae:	8bfb      	ldrh	r3, [r7, #30]
 80199b0:	1ad3      	subs	r3, r2, r3
 80199b2:	f1a3 0208 	sub.w	r2, r3, #8
 80199b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80199b8:	429a      	cmp	r2, r3
 80199ba:	f0c0 809c 	bcc.w	8019af6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	881b      	ldrh	r3, [r3, #0]
 80199c2:	461a      	mov	r2, r3
 80199c4:	8bfb      	ldrh	r3, [r7, #30]
 80199c6:	1ad3      	subs	r3, r2, r3
 80199c8:	f1a3 0208 	sub.w	r2, r3, #8
 80199cc:	8bbb      	ldrh	r3, [r7, #28]
 80199ce:	3314      	adds	r3, #20
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d333      	bcc.n	8019a3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80199d4:	8bfa      	ldrh	r2, [r7, #30]
 80199d6:	8bbb      	ldrh	r3, [r7, #28]
 80199d8:	4413      	add	r3, r2
 80199da:	b29b      	uxth	r3, r3
 80199dc:	3308      	adds	r3, #8
 80199de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80199e0:	8a7b      	ldrh	r3, [r7, #18]
 80199e2:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80199e6:	d106      	bne.n	80199f6 <mem_malloc+0xb6>
 80199e8:	4b50      	ldr	r3, [pc, #320]	@ (8019b2c <mem_malloc+0x1ec>)
 80199ea:	f240 3287 	movw	r2, #903	@ 0x387
 80199ee:	4950      	ldr	r1, [pc, #320]	@ (8019b30 <mem_malloc+0x1f0>)
 80199f0:	4850      	ldr	r0, [pc, #320]	@ (8019b34 <mem_malloc+0x1f4>)
 80199f2:	f008 ff91 	bl	8022918 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80199f6:	8a7b      	ldrh	r3, [r7, #18]
 80199f8:	4618      	mov	r0, r3
 80199fa:	f7ff fcb7 	bl	801936c <ptr_to_mem>
 80199fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	2200      	movs	r2, #0
 8019a04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8019a06:	697b      	ldr	r3, [r7, #20]
 8019a08:	881a      	ldrh	r2, [r3, #0]
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	8bfa      	ldrh	r2, [r7, #30]
 8019a12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	8a7a      	ldrh	r2, [r7, #18]
 8019a18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	2201      	movs	r2, #1
 8019a1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	881b      	ldrh	r3, [r3, #0]
 8019a24:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019a28:	d00b      	beq.n	8019a42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	881b      	ldrh	r3, [r3, #0]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7ff fc9c 	bl	801936c <ptr_to_mem>
 8019a34:	4602      	mov	r2, r0
 8019a36:	8a7b      	ldrh	r3, [r7, #18]
 8019a38:	8053      	strh	r3, [r2, #2]
 8019a3a:	e002      	b.n	8019a42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	2201      	movs	r2, #1
 8019a40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8019a42:	4b39      	ldr	r3, [pc, #228]	@ (8019b28 <mem_malloc+0x1e8>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	697a      	ldr	r2, [r7, #20]
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d127      	bne.n	8019a9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8019a4c:	4b36      	ldr	r3, [pc, #216]	@ (8019b28 <mem_malloc+0x1e8>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8019a52:	e005      	b.n	8019a60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8019a54:	69bb      	ldr	r3, [r7, #24]
 8019a56:	881b      	ldrh	r3, [r3, #0]
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f7ff fc87 	bl	801936c <ptr_to_mem>
 8019a5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	791b      	ldrb	r3, [r3, #4]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d004      	beq.n	8019a72 <mem_malloc+0x132>
 8019a68:	4b33      	ldr	r3, [pc, #204]	@ (8019b38 <mem_malloc+0x1f8>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	69ba      	ldr	r2, [r7, #24]
 8019a6e:	429a      	cmp	r2, r3
 8019a70:	d1f0      	bne.n	8019a54 <mem_malloc+0x114>
          }
          lfree = cur;
 8019a72:	4a2d      	ldr	r2, [pc, #180]	@ (8019b28 <mem_malloc+0x1e8>)
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019a78:	4b2b      	ldr	r3, [pc, #172]	@ (8019b28 <mem_malloc+0x1e8>)
 8019a7a:	681a      	ldr	r2, [r3, #0]
 8019a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8019b38 <mem_malloc+0x1f8>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	429a      	cmp	r2, r3
 8019a82:	d00b      	beq.n	8019a9c <mem_malloc+0x15c>
 8019a84:	4b28      	ldr	r3, [pc, #160]	@ (8019b28 <mem_malloc+0x1e8>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	791b      	ldrb	r3, [r3, #4]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d006      	beq.n	8019a9c <mem_malloc+0x15c>
 8019a8e:	4b27      	ldr	r3, [pc, #156]	@ (8019b2c <mem_malloc+0x1ec>)
 8019a90:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8019a94:	4929      	ldr	r1, [pc, #164]	@ (8019b3c <mem_malloc+0x1fc>)
 8019a96:	4827      	ldr	r0, [pc, #156]	@ (8019b34 <mem_malloc+0x1f4>)
 8019a98:	f008 ff3e 	bl	8022918 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8019a9c:	4821      	ldr	r0, [pc, #132]	@ (8019b24 <mem_malloc+0x1e4>)
 8019a9e:	f008 fda8 	bl	80225f2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019aa2:	8bba      	ldrh	r2, [r7, #28]
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	4413      	add	r3, r2
 8019aa8:	3308      	adds	r3, #8
 8019aaa:	4a23      	ldr	r2, [pc, #140]	@ (8019b38 <mem_malloc+0x1f8>)
 8019aac:	6812      	ldr	r2, [r2, #0]
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d906      	bls.n	8019ac0 <mem_malloc+0x180>
 8019ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8019b2c <mem_malloc+0x1ec>)
 8019ab4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8019ab8:	4921      	ldr	r1, [pc, #132]	@ (8019b40 <mem_malloc+0x200>)
 8019aba:	481e      	ldr	r0, [pc, #120]	@ (8019b34 <mem_malloc+0x1f4>)
 8019abc:	f008 ff2c 	bl	8022918 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019ac0:	697b      	ldr	r3, [r7, #20]
 8019ac2:	f003 0303 	and.w	r3, r3, #3
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d006      	beq.n	8019ad8 <mem_malloc+0x198>
 8019aca:	4b18      	ldr	r3, [pc, #96]	@ (8019b2c <mem_malloc+0x1ec>)
 8019acc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8019ad0:	491c      	ldr	r1, [pc, #112]	@ (8019b44 <mem_malloc+0x204>)
 8019ad2:	4818      	ldr	r0, [pc, #96]	@ (8019b34 <mem_malloc+0x1f4>)
 8019ad4:	f008 ff20 	bl	8022918 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019ad8:	697b      	ldr	r3, [r7, #20]
 8019ada:	f003 0303 	and.w	r3, r3, #3
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d006      	beq.n	8019af0 <mem_malloc+0x1b0>
 8019ae2:	4b12      	ldr	r3, [pc, #72]	@ (8019b2c <mem_malloc+0x1ec>)
 8019ae4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8019ae8:	4917      	ldr	r1, [pc, #92]	@ (8019b48 <mem_malloc+0x208>)
 8019aea:	4812      	ldr	r0, [pc, #72]	@ (8019b34 <mem_malloc+0x1f4>)
 8019aec:	f008 ff14 	bl	8022918 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	3308      	adds	r3, #8
 8019af4:	e011      	b.n	8019b1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8019af6:	8bfb      	ldrh	r3, [r7, #30]
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7ff fc37 	bl	801936c <ptr_to_mem>
 8019afe:	4603      	mov	r3, r0
 8019b00:	881b      	ldrh	r3, [r3, #0]
 8019b02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019b04:	8bfa      	ldrh	r2, [r7, #30]
 8019b06:	8bbb      	ldrh	r3, [r7, #28]
 8019b08:	f5c3 5360 	rsb	r3, r3, #14336	@ 0x3800
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	f4ff af41 	bcc.w	8019994 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8019b12:	4804      	ldr	r0, [pc, #16]	@ (8019b24 <mem_malloc+0x1e4>)
 8019b14:	f008 fd6d 	bl	80225f2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8019b18:	2300      	movs	r3, #0
}
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	3720      	adds	r7, #32
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}
 8019b22:	bf00      	nop
 8019b24:	20008edc 	.word	0x20008edc
 8019b28:	20008ee0 	.word	0x20008ee0
 8019b2c:	08025f04 	.word	0x08025f04
 8019b30:	0802610c 	.word	0x0802610c
 8019b34:	08025f90 	.word	0x08025f90
 8019b38:	20008ed8 	.word	0x20008ed8
 8019b3c:	08026120 	.word	0x08026120
 8019b40:	0802613c 	.word	0x0802613c
 8019b44:	0802616c 	.word	0x0802616c
 8019b48:	0802619c 	.word	0x0802619c

08019b4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8019b4c:	b480      	push	{r7}
 8019b4e:	b085      	sub	sp, #20
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	689b      	ldr	r3, [r3, #8]
 8019b58:	2200      	movs	r2, #0
 8019b5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	685b      	ldr	r3, [r3, #4]
 8019b60:	3303      	adds	r3, #3
 8019b62:	f023 0303 	bic.w	r3, r3, #3
 8019b66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019b68:	2300      	movs	r3, #0
 8019b6a:	60fb      	str	r3, [r7, #12]
 8019b6c:	e011      	b.n	8019b92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	689b      	ldr	r3, [r3, #8]
 8019b72:	681a      	ldr	r2, [r3, #0]
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	689b      	ldr	r3, [r3, #8]
 8019b7c:	68ba      	ldr	r2, [r7, #8]
 8019b7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	881b      	ldrh	r3, [r3, #0]
 8019b84:	461a      	mov	r2, r3
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	4413      	add	r3, r2
 8019b8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	3301      	adds	r3, #1
 8019b90:	60fb      	str	r3, [r7, #12]
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	885b      	ldrh	r3, [r3, #2]
 8019b96:	461a      	mov	r2, r3
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	dbe7      	blt.n	8019b6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8019b9e:	bf00      	nop
 8019ba0:	bf00      	nop
 8019ba2:	3714      	adds	r7, #20
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr

08019bac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b082      	sub	sp, #8
 8019bb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	80fb      	strh	r3, [r7, #6]
 8019bb6:	e009      	b.n	8019bcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019bb8:	88fb      	ldrh	r3, [r7, #6]
 8019bba:	4a08      	ldr	r2, [pc, #32]	@ (8019bdc <memp_init+0x30>)
 8019bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f7ff ffc3 	bl	8019b4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019bc6:	88fb      	ldrh	r3, [r7, #6]
 8019bc8:	3301      	adds	r3, #1
 8019bca:	80fb      	strh	r3, [r7, #6]
 8019bcc:	88fb      	ldrh	r3, [r7, #6]
 8019bce:	2b0d      	cmp	r3, #13
 8019bd0:	d9f2      	bls.n	8019bb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8019bd2:	bf00      	nop
 8019bd4:	bf00      	nop
 8019bd6:	3708      	adds	r7, #8
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd80      	pop	{r7, pc}
 8019bdc:	08028c9c 	.word	0x08028c9c

08019be0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8019be8:	f008 fd30 	bl	802264c <sys_arch_protect>
 8019bec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	689b      	ldr	r3, [r3, #8]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d015      	beq.n	8019c28 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	689b      	ldr	r3, [r3, #8]
 8019c00:	68ba      	ldr	r2, [r7, #8]
 8019c02:	6812      	ldr	r2, [r2, #0]
 8019c04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	f003 0303 	and.w	r3, r3, #3
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d006      	beq.n	8019c1e <do_memp_malloc_pool+0x3e>
 8019c10:	4b09      	ldr	r3, [pc, #36]	@ (8019c38 <do_memp_malloc_pool+0x58>)
 8019c12:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8019c16:	4909      	ldr	r1, [pc, #36]	@ (8019c3c <do_memp_malloc_pool+0x5c>)
 8019c18:	4809      	ldr	r0, [pc, #36]	@ (8019c40 <do_memp_malloc_pool+0x60>)
 8019c1a:	f008 fe7d 	bl	8022918 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019c1e:	68f8      	ldr	r0, [r7, #12]
 8019c20:	f008 fd22 	bl	8022668 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	e003      	b.n	8019c30 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f008 fd1d 	bl	8022668 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8019c2e:	2300      	movs	r3, #0
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3710      	adds	r7, #16
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	080261c0 	.word	0x080261c0
 8019c3c:	08026234 	.word	0x08026234
 8019c40:	08026258 	.word	0x08026258

08019c44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b082      	sub	sp, #8
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d106      	bne.n	8019c60 <memp_malloc_pool+0x1c>
 8019c52:	4b0a      	ldr	r3, [pc, #40]	@ (8019c7c <memp_malloc_pool+0x38>)
 8019c54:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8019c58:	4909      	ldr	r1, [pc, #36]	@ (8019c80 <memp_malloc_pool+0x3c>)
 8019c5a:	480a      	ldr	r0, [pc, #40]	@ (8019c84 <memp_malloc_pool+0x40>)
 8019c5c:	f008 fe5c 	bl	8022918 <iprintf>
  if (desc == NULL) {
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d101      	bne.n	8019c6a <memp_malloc_pool+0x26>
    return NULL;
 8019c66:	2300      	movs	r3, #0
 8019c68:	e003      	b.n	8019c72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f7ff ffb8 	bl	8019be0 <do_memp_malloc_pool>
 8019c70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3708      	adds	r7, #8
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}
 8019c7a:	bf00      	nop
 8019c7c:	080261c0 	.word	0x080261c0
 8019c80:	08026280 	.word	0x08026280
 8019c84:	08026258 	.word	0x08026258

08019c88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b084      	sub	sp, #16
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	4603      	mov	r3, r0
 8019c90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019c92:	79fb      	ldrb	r3, [r7, #7]
 8019c94:	2b0d      	cmp	r3, #13
 8019c96:	d908      	bls.n	8019caa <memp_malloc+0x22>
 8019c98:	4b0a      	ldr	r3, [pc, #40]	@ (8019cc4 <memp_malloc+0x3c>)
 8019c9a:	f240 1257 	movw	r2, #343	@ 0x157
 8019c9e:	490a      	ldr	r1, [pc, #40]	@ (8019cc8 <memp_malloc+0x40>)
 8019ca0:	480a      	ldr	r0, [pc, #40]	@ (8019ccc <memp_malloc+0x44>)
 8019ca2:	f008 fe39 	bl	8022918 <iprintf>
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	e008      	b.n	8019cbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019caa:	79fb      	ldrb	r3, [r7, #7]
 8019cac:	4a08      	ldr	r2, [pc, #32]	@ (8019cd0 <memp_malloc+0x48>)
 8019cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7ff ff94 	bl	8019be0 <do_memp_malloc_pool>
 8019cb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019cba:	68fb      	ldr	r3, [r7, #12]
}
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	3710      	adds	r7, #16
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	bd80      	pop	{r7, pc}
 8019cc4:	080261c0 	.word	0x080261c0
 8019cc8:	08026294 	.word	0x08026294
 8019ccc:	08026258 	.word	0x08026258
 8019cd0:	08028c9c 	.word	0x08028c9c

08019cd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b084      	sub	sp, #16
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	f003 0303 	and.w	r3, r3, #3
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d006      	beq.n	8019cf6 <do_memp_free_pool+0x22>
 8019ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8019d20 <do_memp_free_pool+0x4c>)
 8019cea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8019cee:	490d      	ldr	r1, [pc, #52]	@ (8019d24 <do_memp_free_pool+0x50>)
 8019cf0:	480d      	ldr	r0, [pc, #52]	@ (8019d28 <do_memp_free_pool+0x54>)
 8019cf2:	f008 fe11 	bl	8022918 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019cfa:	f008 fca7 	bl	802264c <sys_arch_protect>
 8019cfe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	689b      	ldr	r3, [r3, #8]
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	689b      	ldr	r3, [r3, #8]
 8019d0e:	68fa      	ldr	r2, [r7, #12]
 8019d10:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8019d12:	68b8      	ldr	r0, [r7, #8]
 8019d14:	f008 fca8 	bl	8022668 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019d18:	bf00      	nop
 8019d1a:	3710      	adds	r7, #16
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	080261c0 	.word	0x080261c0
 8019d24:	080262b4 	.word	0x080262b4
 8019d28:	08026258 	.word	0x08026258

08019d2c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b082      	sub	sp, #8
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d106      	bne.n	8019d4a <memp_free_pool+0x1e>
 8019d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8019d68 <memp_free_pool+0x3c>)
 8019d3e:	f240 1295 	movw	r2, #405	@ 0x195
 8019d42:	490a      	ldr	r1, [pc, #40]	@ (8019d6c <memp_free_pool+0x40>)
 8019d44:	480a      	ldr	r0, [pc, #40]	@ (8019d70 <memp_free_pool+0x44>)
 8019d46:	f008 fde7 	bl	8022918 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d007      	beq.n	8019d60 <memp_free_pool+0x34>
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d004      	beq.n	8019d60 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8019d56:	6839      	ldr	r1, [r7, #0]
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f7ff ffbb 	bl	8019cd4 <do_memp_free_pool>
 8019d5e:	e000      	b.n	8019d62 <memp_free_pool+0x36>
    return;
 8019d60:	bf00      	nop
}
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	080261c0 	.word	0x080261c0
 8019d6c:	08026280 	.word	0x08026280
 8019d70:	08026258 	.word	0x08026258

08019d74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b082      	sub	sp, #8
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	6039      	str	r1, [r7, #0]
 8019d7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019d80:	79fb      	ldrb	r3, [r7, #7]
 8019d82:	2b0d      	cmp	r3, #13
 8019d84:	d907      	bls.n	8019d96 <memp_free+0x22>
 8019d86:	4b0c      	ldr	r3, [pc, #48]	@ (8019db8 <memp_free+0x44>)
 8019d88:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8019d8c:	490b      	ldr	r1, [pc, #44]	@ (8019dbc <memp_free+0x48>)
 8019d8e:	480c      	ldr	r0, [pc, #48]	@ (8019dc0 <memp_free+0x4c>)
 8019d90:	f008 fdc2 	bl	8022918 <iprintf>
 8019d94:	e00c      	b.n	8019db0 <memp_free+0x3c>

  if (mem == NULL) {
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d008      	beq.n	8019dae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019d9c:	79fb      	ldrb	r3, [r7, #7]
 8019d9e:	4a09      	ldr	r2, [pc, #36]	@ (8019dc4 <memp_free+0x50>)
 8019da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019da4:	6839      	ldr	r1, [r7, #0]
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7ff ff94 	bl	8019cd4 <do_memp_free_pool>
 8019dac:	e000      	b.n	8019db0 <memp_free+0x3c>
    return;
 8019dae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019db0:	3708      	adds	r7, #8
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}
 8019db6:	bf00      	nop
 8019db8:	080261c0 	.word	0x080261c0
 8019dbc:	080262d4 	.word	0x080262d4
 8019dc0:	08026258 	.word	0x08026258
 8019dc4:	08028c9c 	.word	0x08028c9c

08019dc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8019dc8:	b480      	push	{r7}
 8019dca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8019dcc:	bf00      	nop
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd4:	4770      	bx	lr
	...

08019dd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b086      	sub	sp, #24
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	60f8      	str	r0, [r7, #12]
 8019de0:	60b9      	str	r1, [r7, #8]
 8019de2:	607a      	str	r2, [r7, #4]
 8019de4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d108      	bne.n	8019dfe <netif_add+0x26>
 8019dec:	4b61      	ldr	r3, [pc, #388]	@ (8019f74 <netif_add+0x19c>)
 8019dee:	f240 1227 	movw	r2, #295	@ 0x127
 8019df2:	4961      	ldr	r1, [pc, #388]	@ (8019f78 <netif_add+0x1a0>)
 8019df4:	4861      	ldr	r0, [pc, #388]	@ (8019f7c <netif_add+0x1a4>)
 8019df6:	f008 fd8f 	bl	8022918 <iprintf>
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	e0b6      	b.n	8019f6c <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8019dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d108      	bne.n	8019e16 <netif_add+0x3e>
 8019e04:	4b5b      	ldr	r3, [pc, #364]	@ (8019f74 <netif_add+0x19c>)
 8019e06:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8019e0a:	495d      	ldr	r1, [pc, #372]	@ (8019f80 <netif_add+0x1a8>)
 8019e0c:	485b      	ldr	r0, [pc, #364]	@ (8019f7c <netif_add+0x1a4>)
 8019e0e:	f008 fd83 	bl	8022918 <iprintf>
 8019e12:	2300      	movs	r3, #0
 8019e14:	e0aa      	b.n	8019f6c <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8019e16:	68bb      	ldr	r3, [r7, #8]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d101      	bne.n	8019e20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019e1c:	4b59      	ldr	r3, [pc, #356]	@ (8019f84 <netif_add+0x1ac>)
 8019e1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d101      	bne.n	8019e2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8019e26:	4b57      	ldr	r3, [pc, #348]	@ (8019f84 <netif_add+0x1ac>)
 8019e28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d101      	bne.n	8019e34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019e30:	4b54      	ldr	r3, [pc, #336]	@ (8019f84 <netif_add+0x1ac>)
 8019e32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	2200      	movs	r2, #0
 8019e38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	2200      	movs	r2, #0
 8019e3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	2200      	movs	r2, #0
 8019e44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	4a4f      	ldr	r2, [pc, #316]	@ (8019f88 <netif_add+0x1b0>)
 8019e4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	2200      	movs	r2, #0
 8019e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	3324      	adds	r3, #36	@ 0x24
 8019e5e:	2208      	movs	r2, #8
 8019e60:	2100      	movs	r1, #0
 8019e62:	4618      	mov	r0, r3
 8019e64:	f008 feea 	bl	8022c3c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	2200      	movs	r2, #0
 8019e72:	63da      	str	r2, [r3, #60]	@ 0x3c
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	6a3a      	ldr	r2, [r7, #32]
 8019e78:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8019e7a:	4b44      	ldr	r3, [pc, #272]	@ (8019f8c <netif_add+0x1b4>)
 8019e7c:	781a      	ldrb	r2, [r3, #0]
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e88:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	687a      	ldr	r2, [r7, #4]
 8019e8e:	68b9      	ldr	r1, [r7, #8]
 8019e90:	68f8      	ldr	r0, [r7, #12]
 8019e92:	f000 f91d 	bl	801a0d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8019e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e98:	68f8      	ldr	r0, [r7, #12]
 8019e9a:	4798      	blx	r3
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d001      	beq.n	8019ea6 <netif_add+0xce>
    return NULL;
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	e062      	b.n	8019f6c <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019eac:	2bff      	cmp	r3, #255	@ 0xff
 8019eae:	d103      	bne.n	8019eb8 <netif_add+0xe0>
        netif->num = 0;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 8019eb8:	2300      	movs	r3, #0
 8019eba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019ebc:	4b34      	ldr	r3, [pc, #208]	@ (8019f90 <netif_add+0x1b8>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	617b      	str	r3, [r7, #20]
 8019ec2:	e02b      	b.n	8019f1c <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019ec4:	697a      	ldr	r2, [r7, #20]
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	429a      	cmp	r2, r3
 8019eca:	d106      	bne.n	8019eda <netif_add+0x102>
 8019ecc:	4b29      	ldr	r3, [pc, #164]	@ (8019f74 <netif_add+0x19c>)
 8019ece:	f240 128b 	movw	r2, #395	@ 0x18b
 8019ed2:	4930      	ldr	r1, [pc, #192]	@ (8019f94 <netif_add+0x1bc>)
 8019ed4:	4829      	ldr	r0, [pc, #164]	@ (8019f7c <netif_add+0x1a4>)
 8019ed6:	f008 fd1f 	bl	8022918 <iprintf>
        num_netifs++;
 8019eda:	693b      	ldr	r3, [r7, #16]
 8019edc:	3301      	adds	r3, #1
 8019ede:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	2bff      	cmp	r3, #255	@ 0xff
 8019ee4:	dd06      	ble.n	8019ef4 <netif_add+0x11c>
 8019ee6:	4b23      	ldr	r3, [pc, #140]	@ (8019f74 <netif_add+0x19c>)
 8019ee8:	f240 128d 	movw	r2, #397	@ 0x18d
 8019eec:	492a      	ldr	r1, [pc, #168]	@ (8019f98 <netif_add+0x1c0>)
 8019eee:	4823      	ldr	r0, [pc, #140]	@ (8019f7c <netif_add+0x1a4>)
 8019ef0:	f008 fd12 	bl	8022918 <iprintf>
        if (netif2->num == netif->num) {
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d108      	bne.n	8019f16 <netif_add+0x13e>
          netif->num++;
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f0a:	3301      	adds	r3, #1
 8019f0c:	b2da      	uxtb	r2, r3
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 8019f14:	e005      	b.n	8019f22 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019f16:	697b      	ldr	r3, [r7, #20]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	617b      	str	r3, [r7, #20]
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d1d0      	bne.n	8019ec4 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 8019f22:	697b      	ldr	r3, [r7, #20]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d1be      	bne.n	8019ea6 <netif_add+0xce>
  }
  if (netif->num == 254) {
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8019f30:	d103      	bne.n	8019f3a <netif_add+0x162>
    netif_num = 0;
 8019f32:	4b16      	ldr	r3, [pc, #88]	@ (8019f8c <netif_add+0x1b4>)
 8019f34:	2200      	movs	r2, #0
 8019f36:	701a      	strb	r2, [r3, #0]
 8019f38:	e006      	b.n	8019f48 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f40:	3301      	adds	r3, #1
 8019f42:	b2da      	uxtb	r2, r3
 8019f44:	4b11      	ldr	r3, [pc, #68]	@ (8019f8c <netif_add+0x1b4>)
 8019f46:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019f48:	4b11      	ldr	r3, [pc, #68]	@ (8019f90 <netif_add+0x1b8>)
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8019f50:	4a0f      	ldr	r2, [pc, #60]	@ (8019f90 <netif_add+0x1b8>)
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019f5c:	f003 0320 	and.w	r3, r3, #32
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d002      	beq.n	8019f6a <netif_add+0x192>
    igmp_start(netif);
 8019f64:	68f8      	ldr	r0, [r7, #12]
 8019f66:	f7fd f9bd 	bl	80172e4 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3718      	adds	r7, #24
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}
 8019f74:	080262f0 	.word	0x080262f0
 8019f78:	080263c4 	.word	0x080263c4
 8019f7c:	08026380 	.word	0x08026380
 8019f80:	080263e0 	.word	0x080263e0
 8019f84:	08028bec 	.word	0x08028bec
 8019f88:	0801a3c7 	.word	0x0801a3c7
 8019f8c:	20010014 	.word	0x20010014
 8019f90:	2001000c 	.word	0x2001000c
 8019f94:	08026404 	.word	0x08026404
 8019f98:	08026418 	.word	0x08026418

08019f9c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b082      	sub	sp, #8
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019fa6:	6839      	ldr	r1, [r7, #0]
 8019fa8:	6878      	ldr	r0, [r7, #4]
 8019faa:	f002 ff37 	bl	801ce1c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019fae:	6839      	ldr	r1, [r7, #0]
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	f008 f8ad 	bl	8022110 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019fb6:	bf00      	nop
 8019fb8:	3708      	adds	r7, #8
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
	...

08019fc0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b086      	sub	sp, #24
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	60f8      	str	r0, [r7, #12]
 8019fc8:	60b9      	str	r1, [r7, #8]
 8019fca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d106      	bne.n	8019fe0 <netif_do_set_ipaddr+0x20>
 8019fd2:	4b1d      	ldr	r3, [pc, #116]	@ (801a048 <netif_do_set_ipaddr+0x88>)
 8019fd4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8019fd8:	491c      	ldr	r1, [pc, #112]	@ (801a04c <netif_do_set_ipaddr+0x8c>)
 8019fda:	481d      	ldr	r0, [pc, #116]	@ (801a050 <netif_do_set_ipaddr+0x90>)
 8019fdc:	f008 fc9c 	bl	8022918 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d106      	bne.n	8019ff4 <netif_do_set_ipaddr+0x34>
 8019fe6:	4b18      	ldr	r3, [pc, #96]	@ (801a048 <netif_do_set_ipaddr+0x88>)
 8019fe8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8019fec:	4917      	ldr	r1, [pc, #92]	@ (801a04c <netif_do_set_ipaddr+0x8c>)
 8019fee:	4818      	ldr	r0, [pc, #96]	@ (801a050 <netif_do_set_ipaddr+0x90>)
 8019ff0:	f008 fc92 	bl	8022918 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	3304      	adds	r3, #4
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	429a      	cmp	r2, r3
 801a000:	d01c      	beq.n	801a03c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	3304      	adds	r3, #4
 801a00c:	681a      	ldr	r2, [r3, #0]
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801a012:	f107 0314 	add.w	r3, r7, #20
 801a016:	4619      	mov	r1, r3
 801a018:	6878      	ldr	r0, [r7, #4]
 801a01a:	f7ff ffbf 	bl	8019f9c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d002      	beq.n	801a02a <netif_do_set_ipaddr+0x6a>
 801a024:	68bb      	ldr	r3, [r7, #8]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	e000      	b.n	801a02c <netif_do_set_ipaddr+0x6c>
 801a02a:	2300      	movs	r3, #0
 801a02c:	68fa      	ldr	r2, [r7, #12]
 801a02e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a030:	2101      	movs	r1, #1
 801a032:	68f8      	ldr	r0, [r7, #12]
 801a034:	f000 f8d2 	bl	801a1dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801a038:	2301      	movs	r3, #1
 801a03a:	e000      	b.n	801a03e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801a03c:	2300      	movs	r3, #0
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3718      	adds	r7, #24
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	080262f0 	.word	0x080262f0
 801a04c:	08026448 	.word	0x08026448
 801a050:	08026380 	.word	0x08026380

0801a054 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801a054:	b480      	push	{r7}
 801a056:	b085      	sub	sp, #20
 801a058:	af00      	add	r7, sp, #0
 801a05a:	60f8      	str	r0, [r7, #12]
 801a05c:	60b9      	str	r1, [r7, #8]
 801a05e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	681a      	ldr	r2, [r3, #0]
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	3308      	adds	r3, #8
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	429a      	cmp	r2, r3
 801a06c:	d00a      	beq.n	801a084 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a06e:	68bb      	ldr	r3, [r7, #8]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d002      	beq.n	801a07a <netif_do_set_netmask+0x26>
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	e000      	b.n	801a07c <netif_do_set_netmask+0x28>
 801a07a:	2300      	movs	r3, #0
 801a07c:	68fa      	ldr	r2, [r7, #12]
 801a07e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801a080:	2301      	movs	r3, #1
 801a082:	e000      	b.n	801a086 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801a084:	2300      	movs	r3, #0
}
 801a086:	4618      	mov	r0, r3
 801a088:	3714      	adds	r7, #20
 801a08a:	46bd      	mov	sp, r7
 801a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a090:	4770      	bx	lr

0801a092 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801a092:	b480      	push	{r7}
 801a094:	b085      	sub	sp, #20
 801a096:	af00      	add	r7, sp, #0
 801a098:	60f8      	str	r0, [r7, #12]
 801a09a:	60b9      	str	r1, [r7, #8]
 801a09c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	681a      	ldr	r2, [r3, #0]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	330c      	adds	r3, #12
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d00a      	beq.n	801a0c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d002      	beq.n	801a0b8 <netif_do_set_gw+0x26>
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	e000      	b.n	801a0ba <netif_do_set_gw+0x28>
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	68fa      	ldr	r2, [r7, #12]
 801a0bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801a0be:	2301      	movs	r3, #1
 801a0c0:	e000      	b.n	801a0c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801a0c2:	2300      	movs	r3, #0
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3714      	adds	r7, #20
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b088      	sub	sp, #32
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	60f8      	str	r0, [r7, #12]
 801a0d8:	60b9      	str	r1, [r7, #8]
 801a0da:	607a      	str	r2, [r7, #4]
 801a0dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801a0de:	2300      	movs	r3, #0
 801a0e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d101      	bne.n	801a0f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801a0ec:	4b1c      	ldr	r3, [pc, #112]	@ (801a160 <netif_set_addr+0x90>)
 801a0ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d101      	bne.n	801a0fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801a0f6:	4b1a      	ldr	r3, [pc, #104]	@ (801a160 <netif_set_addr+0x90>)
 801a0f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801a0fa:	683b      	ldr	r3, [r7, #0]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d101      	bne.n	801a104 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801a100:	4b17      	ldr	r3, [pc, #92]	@ (801a160 <netif_set_addr+0x90>)
 801a102:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d003      	beq.n	801a112 <netif_set_addr+0x42>
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d101      	bne.n	801a116 <netif_set_addr+0x46>
 801a112:	2301      	movs	r3, #1
 801a114:	e000      	b.n	801a118 <netif_set_addr+0x48>
 801a116:	2300      	movs	r3, #0
 801a118:	617b      	str	r3, [r7, #20]
  if (remove) {
 801a11a:	697b      	ldr	r3, [r7, #20]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d006      	beq.n	801a12e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a120:	f107 0310 	add.w	r3, r7, #16
 801a124:	461a      	mov	r2, r3
 801a126:	68b9      	ldr	r1, [r7, #8]
 801a128:	68f8      	ldr	r0, [r7, #12]
 801a12a:	f7ff ff49 	bl	8019fc0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801a12e:	69fa      	ldr	r2, [r7, #28]
 801a130:	6879      	ldr	r1, [r7, #4]
 801a132:	68f8      	ldr	r0, [r7, #12]
 801a134:	f7ff ff8e 	bl	801a054 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801a138:	69ba      	ldr	r2, [r7, #24]
 801a13a:	6839      	ldr	r1, [r7, #0]
 801a13c:	68f8      	ldr	r0, [r7, #12]
 801a13e:	f7ff ffa8 	bl	801a092 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801a142:	697b      	ldr	r3, [r7, #20]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d106      	bne.n	801a156 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a148:	f107 0310 	add.w	r3, r7, #16
 801a14c:	461a      	mov	r2, r3
 801a14e:	68b9      	ldr	r1, [r7, #8]
 801a150:	68f8      	ldr	r0, [r7, #12]
 801a152:	f7ff ff35 	bl	8019fc0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801a156:	bf00      	nop
 801a158:	3720      	adds	r7, #32
 801a15a:	46bd      	mov	sp, r7
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	08028bec 	.word	0x08028bec

0801a164 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801a164:	b480      	push	{r7}
 801a166:	b083      	sub	sp, #12
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801a16c:	4a04      	ldr	r2, [pc, #16]	@ (801a180 <netif_set_default+0x1c>)
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801a172:	bf00      	nop
 801a174:	370c      	adds	r7, #12
 801a176:	46bd      	mov	sp, r7
 801a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17c:	4770      	bx	lr
 801a17e:	bf00      	nop
 801a180:	20010010 	.word	0x20010010

0801a184 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d107      	bne.n	801a1a2 <netif_set_up+0x1e>
 801a192:	4b0f      	ldr	r3, [pc, #60]	@ (801a1d0 <netif_set_up+0x4c>)
 801a194:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801a198:	490e      	ldr	r1, [pc, #56]	@ (801a1d4 <netif_set_up+0x50>)
 801a19a:	480f      	ldr	r0, [pc, #60]	@ (801a1d8 <netif_set_up+0x54>)
 801a19c:	f008 fbbc 	bl	8022918 <iprintf>
 801a1a0:	e013      	b.n	801a1ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a1a8:	f003 0301 	and.w	r3, r3, #1
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d10c      	bne.n	801a1ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a1b6:	f043 0301 	orr.w	r3, r3, #1
 801a1ba:	b2da      	uxtb	r2, r3
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a1c2:	2103      	movs	r1, #3
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f000 f809 	bl	801a1dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801a1ca:	3708      	adds	r7, #8
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bd80      	pop	{r7, pc}
 801a1d0:	080262f0 	.word	0x080262f0
 801a1d4:	080264b8 	.word	0x080264b8
 801a1d8:	08026380 	.word	0x08026380

0801a1dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
 801a1e4:	460b      	mov	r3, r1
 801a1e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d106      	bne.n	801a1fc <netif_issue_reports+0x20>
 801a1ee:	4b1d      	ldr	r3, [pc, #116]	@ (801a264 <netif_issue_reports+0x88>)
 801a1f0:	f240 326d 	movw	r2, #877	@ 0x36d
 801a1f4:	491c      	ldr	r1, [pc, #112]	@ (801a268 <netif_issue_reports+0x8c>)
 801a1f6:	481d      	ldr	r0, [pc, #116]	@ (801a26c <netif_issue_reports+0x90>)
 801a1f8:	f008 fb8e 	bl	8022918 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a202:	f003 0304 	and.w	r3, r3, #4
 801a206:	2b00      	cmp	r3, #0
 801a208:	d028      	beq.n	801a25c <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a210:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a214:	2b00      	cmp	r3, #0
 801a216:	d021      	beq.n	801a25c <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a218:	78fb      	ldrb	r3, [r7, #3]
 801a21a:	f003 0301 	and.w	r3, r3, #1
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d01d      	beq.n	801a25e <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	3304      	adds	r3, #4
 801a226:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d018      	beq.n	801a25e <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a232:	f003 0308 	and.w	r3, r3, #8
 801a236:	2b00      	cmp	r3, #0
 801a238:	d005      	beq.n	801a246 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	3304      	adds	r3, #4
 801a23e:	4619      	mov	r1, r3
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f7fc fe7d 	bl	8016f40 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a24c:	f003 0320 	and.w	r3, r3, #32
 801a250:	2b00      	cmp	r3, #0
 801a252:	d004      	beq.n	801a25e <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 801a254:	6878      	ldr	r0, [r7, #4]
 801a256:	f7fd f86f 	bl	8017338 <igmp_report_groups>
 801a25a:	e000      	b.n	801a25e <netif_issue_reports+0x82>
    return;
 801a25c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801a25e:	3708      	adds	r7, #8
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}
 801a264:	080262f0 	.word	0x080262f0
 801a268:	080264d4 	.word	0x080264d4
 801a26c:	08026380 	.word	0x08026380

0801a270 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b082      	sub	sp, #8
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d107      	bne.n	801a28e <netif_set_down+0x1e>
 801a27e:	4b12      	ldr	r3, [pc, #72]	@ (801a2c8 <netif_set_down+0x58>)
 801a280:	f240 329b 	movw	r2, #923	@ 0x39b
 801a284:	4911      	ldr	r1, [pc, #68]	@ (801a2cc <netif_set_down+0x5c>)
 801a286:	4812      	ldr	r0, [pc, #72]	@ (801a2d0 <netif_set_down+0x60>)
 801a288:	f008 fb46 	bl	8022918 <iprintf>
 801a28c:	e019      	b.n	801a2c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a294:	f003 0301 	and.w	r3, r3, #1
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d012      	beq.n	801a2c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2a2:	f023 0301 	bic.w	r3, r3, #1
 801a2a6:	b2da      	uxtb	r2, r3
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2b4:	f003 0308 	and.w	r3, r3, #8
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d002      	beq.n	801a2c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801a2bc:	6878      	ldr	r0, [r7, #4]
 801a2be:	f7fc f9f9 	bl	80166b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801a2c2:	3708      	adds	r7, #8
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd80      	pop	{r7, pc}
 801a2c8:	080262f0 	.word	0x080262f0
 801a2cc:	080264f8 	.word	0x080264f8
 801a2d0:	08026380 	.word	0x08026380

0801a2d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b082      	sub	sp, #8
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d107      	bne.n	801a2f2 <netif_set_link_up+0x1e>
 801a2e2:	4b15      	ldr	r3, [pc, #84]	@ (801a338 <netif_set_link_up+0x64>)
 801a2e4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801a2e8:	4914      	ldr	r1, [pc, #80]	@ (801a33c <netif_set_link_up+0x68>)
 801a2ea:	4815      	ldr	r0, [pc, #84]	@ (801a340 <netif_set_link_up+0x6c>)
 801a2ec:	f008 fb14 	bl	8022918 <iprintf>
 801a2f0:	e01e      	b.n	801a330 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2f8:	f003 0304 	and.w	r3, r3, #4
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d117      	bne.n	801a330 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a306:	f043 0304 	orr.w	r3, r3, #4
 801a30a:	b2da      	uxtb	r2, r3
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f7fa fc44 	bl	8014ba0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a318:	2103      	movs	r1, #3
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f7ff ff5e 	bl	801a1dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	69db      	ldr	r3, [r3, #28]
 801a324:	2b00      	cmp	r3, #0
 801a326:	d003      	beq.n	801a330 <netif_set_link_up+0x5c>
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	69db      	ldr	r3, [r3, #28]
 801a32c:	6878      	ldr	r0, [r7, #4]
 801a32e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801a330:	3708      	adds	r7, #8
 801a332:	46bd      	mov	sp, r7
 801a334:	bd80      	pop	{r7, pc}
 801a336:	bf00      	nop
 801a338:	080262f0 	.word	0x080262f0
 801a33c:	08026518 	.word	0x08026518
 801a340:	08026380 	.word	0x08026380

0801a344 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b082      	sub	sp, #8
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d107      	bne.n	801a362 <netif_set_link_down+0x1e>
 801a352:	4b11      	ldr	r3, [pc, #68]	@ (801a398 <netif_set_link_down+0x54>)
 801a354:	f240 4206 	movw	r2, #1030	@ 0x406
 801a358:	4910      	ldr	r1, [pc, #64]	@ (801a39c <netif_set_link_down+0x58>)
 801a35a:	4811      	ldr	r0, [pc, #68]	@ (801a3a0 <netif_set_link_down+0x5c>)
 801a35c:	f008 fadc 	bl	8022918 <iprintf>
 801a360:	e017      	b.n	801a392 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a368:	f003 0304 	and.w	r3, r3, #4
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d010      	beq.n	801a392 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a376:	f023 0304 	bic.w	r3, r3, #4
 801a37a:	b2da      	uxtb	r2, r3
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	69db      	ldr	r3, [r3, #28]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d003      	beq.n	801a392 <netif_set_link_down+0x4e>
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	69db      	ldr	r3, [r3, #28]
 801a38e:	6878      	ldr	r0, [r7, #4]
 801a390:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	080262f0 	.word	0x080262f0
 801a39c:	0802653c 	.word	0x0802653c
 801a3a0:	08026380 	.word	0x08026380

0801a3a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801a3a4:	b480      	push	{r7}
 801a3a6:	b083      	sub	sp, #12
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d002      	beq.n	801a3ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	683a      	ldr	r2, [r7, #0]
 801a3b8:	61da      	str	r2, [r3, #28]
  }
}
 801a3ba:	bf00      	nop
 801a3bc:	370c      	adds	r7, #12
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c4:	4770      	bx	lr

0801a3c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801a3c6:	b480      	push	{r7}
 801a3c8:	b085      	sub	sp, #20
 801a3ca:	af00      	add	r7, sp, #0
 801a3cc:	60f8      	str	r0, [r7, #12]
 801a3ce:	60b9      	str	r1, [r7, #8]
 801a3d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801a3d2:	f06f 030b 	mvn.w	r3, #11
}
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	3714      	adds	r7, #20
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e0:	4770      	bx	lr
	...

0801a3e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b085      	sub	sp, #20
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801a3ee:	79fb      	ldrb	r3, [r7, #7]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d013      	beq.n	801a41c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801a3f4:	4b0d      	ldr	r3, [pc, #52]	@ (801a42c <netif_get_by_index+0x48>)
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	60fb      	str	r3, [r7, #12]
 801a3fa:	e00c      	b.n	801a416 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a402:	3301      	adds	r3, #1
 801a404:	b2db      	uxtb	r3, r3
 801a406:	79fa      	ldrb	r2, [r7, #7]
 801a408:	429a      	cmp	r2, r3
 801a40a:	d101      	bne.n	801a410 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	e006      	b.n	801a41e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	60fb      	str	r3, [r7, #12]
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d1ef      	bne.n	801a3fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801a41c:	2300      	movs	r3, #0
}
 801a41e:	4618      	mov	r0, r3
 801a420:	3714      	adds	r7, #20
 801a422:	46bd      	mov	sp, r7
 801a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a428:	4770      	bx	lr
 801a42a:	bf00      	nop
 801a42c:	2001000c 	.word	0x2001000c

0801a430 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a436:	f008 f909 	bl	802264c <sys_arch_protect>
 801a43a:	6038      	str	r0, [r7, #0]
 801a43c:	4b0d      	ldr	r3, [pc, #52]	@ (801a474 <pbuf_free_ooseq+0x44>)
 801a43e:	2200      	movs	r2, #0
 801a440:	701a      	strb	r2, [r3, #0]
 801a442:	6838      	ldr	r0, [r7, #0]
 801a444:	f008 f910 	bl	8022668 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a448:	4b0b      	ldr	r3, [pc, #44]	@ (801a478 <pbuf_free_ooseq+0x48>)
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	607b      	str	r3, [r7, #4]
 801a44e:	e00a      	b.n	801a466 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a454:	2b00      	cmp	r3, #0
 801a456:	d003      	beq.n	801a460 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801a458:	6878      	ldr	r0, [r7, #4]
 801a45a:	f002 fd1d 	bl	801ce98 <tcp_free_ooseq>
      return;
 801a45e:	e005      	b.n	801a46c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	68db      	ldr	r3, [r3, #12]
 801a464:	607b      	str	r3, [r7, #4]
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d1f1      	bne.n	801a450 <pbuf_free_ooseq+0x20>
    }
  }
}
 801a46c:	3708      	adds	r7, #8
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}
 801a472:	bf00      	nop
 801a474:	20010015 	.word	0x20010015
 801a478:	20010024 	.word	0x20010024

0801a47c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b082      	sub	sp, #8
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801a484:	f7ff ffd4 	bl	801a430 <pbuf_free_ooseq>
}
 801a488:	bf00      	nop
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}

0801a490 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b082      	sub	sp, #8
 801a494:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801a496:	f008 f8d9 	bl	802264c <sys_arch_protect>
 801a49a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801a49c:	4b0f      	ldr	r3, [pc, #60]	@ (801a4dc <pbuf_pool_is_empty+0x4c>)
 801a49e:	781b      	ldrb	r3, [r3, #0]
 801a4a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801a4a2:	4b0e      	ldr	r3, [pc, #56]	@ (801a4dc <pbuf_pool_is_empty+0x4c>)
 801a4a4:	2201      	movs	r2, #1
 801a4a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801a4a8:	6878      	ldr	r0, [r7, #4]
 801a4aa:	f008 f8dd 	bl	8022668 <sys_arch_unprotect>

  if (!queued) {
 801a4ae:	78fb      	ldrb	r3, [r7, #3]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d10f      	bne.n	801a4d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801a4b4:	2100      	movs	r1, #0
 801a4b6:	480a      	ldr	r0, [pc, #40]	@ (801a4e0 <pbuf_pool_is_empty+0x50>)
 801a4b8:	f7f9 febe 	bl	8014238 <tcpip_try_callback>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d008      	beq.n	801a4d4 <pbuf_pool_is_empty+0x44>
 801a4c2:	f008 f8c3 	bl	802264c <sys_arch_protect>
 801a4c6:	6078      	str	r0, [r7, #4]
 801a4c8:	4b04      	ldr	r3, [pc, #16]	@ (801a4dc <pbuf_pool_is_empty+0x4c>)
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	701a      	strb	r2, [r3, #0]
 801a4ce:	6878      	ldr	r0, [r7, #4]
 801a4d0:	f008 f8ca 	bl	8022668 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801a4d4:	bf00      	nop
 801a4d6:	3708      	adds	r7, #8
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bd80      	pop	{r7, pc}
 801a4dc:	20010015 	.word	0x20010015
 801a4e0:	0801a47d 	.word	0x0801a47d

0801a4e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	60f8      	str	r0, [r7, #12]
 801a4ec:	60b9      	str	r1, [r7, #8]
 801a4ee:	4611      	mov	r1, r2
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	460b      	mov	r3, r1
 801a4f4:	80fb      	strh	r3, [r7, #6]
 801a4f6:	4613      	mov	r3, r2
 801a4f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	68ba      	ldr	r2, [r7, #8]
 801a504:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	88fa      	ldrh	r2, [r7, #6]
 801a50a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	88ba      	ldrh	r2, [r7, #4]
 801a510:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801a512:	8b3b      	ldrh	r3, [r7, #24]
 801a514:	b2da      	uxtb	r2, r3
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	7f3a      	ldrb	r2, [r7, #28]
 801a51e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	2201      	movs	r2, #1
 801a524:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	2200      	movs	r2, #0
 801a52a:	73da      	strb	r2, [r3, #15]
}
 801a52c:	bf00      	nop
 801a52e:	3714      	adds	r7, #20
 801a530:	46bd      	mov	sp, r7
 801a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a536:	4770      	bx	lr

0801a538 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b08c      	sub	sp, #48	@ 0x30
 801a53c:	af02      	add	r7, sp, #8
 801a53e:	4603      	mov	r3, r0
 801a540:	71fb      	strb	r3, [r7, #7]
 801a542:	460b      	mov	r3, r1
 801a544:	80bb      	strh	r3, [r7, #4]
 801a546:	4613      	mov	r3, r2
 801a548:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801a54a:	79fb      	ldrb	r3, [r7, #7]
 801a54c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801a54e:	887b      	ldrh	r3, [r7, #2]
 801a550:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a554:	d07f      	beq.n	801a656 <pbuf_alloc+0x11e>
 801a556:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a55a:	f300 80c8 	bgt.w	801a6ee <pbuf_alloc+0x1b6>
 801a55e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a562:	d010      	beq.n	801a586 <pbuf_alloc+0x4e>
 801a564:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a568:	f300 80c1 	bgt.w	801a6ee <pbuf_alloc+0x1b6>
 801a56c:	2b01      	cmp	r3, #1
 801a56e:	d002      	beq.n	801a576 <pbuf_alloc+0x3e>
 801a570:	2b41      	cmp	r3, #65	@ 0x41
 801a572:	f040 80bc 	bne.w	801a6ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801a576:	887a      	ldrh	r2, [r7, #2]
 801a578:	88bb      	ldrh	r3, [r7, #4]
 801a57a:	4619      	mov	r1, r3
 801a57c:	2000      	movs	r0, #0
 801a57e:	f000 f8d1 	bl	801a724 <pbuf_alloc_reference>
 801a582:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801a584:	e0bd      	b.n	801a702 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801a586:	2300      	movs	r3, #0
 801a588:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801a58a:	2300      	movs	r3, #0
 801a58c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801a58e:	88bb      	ldrh	r3, [r7, #4]
 801a590:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a592:	200d      	movs	r0, #13
 801a594:	f7ff fb78 	bl	8019c88 <memp_malloc>
 801a598:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d109      	bne.n	801a5b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801a5a0:	f7ff ff76 	bl	801a490 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d002      	beq.n	801a5b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 801a5aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a5ac:	f000 fada 	bl	801ab64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	e0a7      	b.n	801a704 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a5b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5b6:	3303      	adds	r3, #3
 801a5b8:	b29b      	uxth	r3, r3
 801a5ba:	f023 0303 	bic.w	r3, r3, #3
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
 801a5c4:	b29b      	uxth	r3, r3
 801a5c6:	8b7a      	ldrh	r2, [r7, #26]
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	bf28      	it	cs
 801a5cc:	4613      	movcs	r3, r2
 801a5ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a5d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5d2:	3318      	adds	r3, #24
 801a5d4:	693a      	ldr	r2, [r7, #16]
 801a5d6:	4413      	add	r3, r2
 801a5d8:	3303      	adds	r3, #3
 801a5da:	f023 0303 	bic.w	r3, r3, #3
 801a5de:	4618      	mov	r0, r3
 801a5e0:	89f9      	ldrh	r1, [r7, #14]
 801a5e2:	8b7a      	ldrh	r2, [r7, #26]
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	9301      	str	r3, [sp, #4]
 801a5e8:	887b      	ldrh	r3, [r7, #2]
 801a5ea:	9300      	str	r3, [sp, #0]
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	4601      	mov	r1, r0
 801a5f0:	6938      	ldr	r0, [r7, #16]
 801a5f2:	f7ff ff77 	bl	801a4e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	f003 0303 	and.w	r3, r3, #3
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d006      	beq.n	801a610 <pbuf_alloc+0xd8>
 801a602:	4b42      	ldr	r3, [pc, #264]	@ (801a70c <pbuf_alloc+0x1d4>)
 801a604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a608:	4941      	ldr	r1, [pc, #260]	@ (801a710 <pbuf_alloc+0x1d8>)
 801a60a:	4842      	ldr	r0, [pc, #264]	@ (801a714 <pbuf_alloc+0x1dc>)
 801a60c:	f008 f984 	bl	8022918 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801a610:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a612:	3303      	adds	r3, #3
 801a614:	f023 0303 	bic.w	r3, r3, #3
 801a618:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801a61c:	d106      	bne.n	801a62c <pbuf_alloc+0xf4>
 801a61e:	4b3b      	ldr	r3, [pc, #236]	@ (801a70c <pbuf_alloc+0x1d4>)
 801a620:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801a624:	493c      	ldr	r1, [pc, #240]	@ (801a718 <pbuf_alloc+0x1e0>)
 801a626:	483b      	ldr	r0, [pc, #236]	@ (801a714 <pbuf_alloc+0x1dc>)
 801a628:	f008 f976 	bl	8022918 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d102      	bne.n	801a638 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	627b      	str	r3, [r7, #36]	@ 0x24
 801a636:	e002      	b.n	801a63e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801a638:	69fb      	ldr	r3, [r7, #28]
 801a63a:	693a      	ldr	r2, [r7, #16]
 801a63c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801a63e:	693b      	ldr	r3, [r7, #16]
 801a640:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801a642:	8b7a      	ldrh	r2, [r7, #26]
 801a644:	89fb      	ldrh	r3, [r7, #14]
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801a64a:	2300      	movs	r3, #0
 801a64c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801a64e:	8b7b      	ldrh	r3, [r7, #26]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d19e      	bne.n	801a592 <pbuf_alloc+0x5a>
      break;
 801a654:	e055      	b.n	801a702 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a656:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a658:	3303      	adds	r3, #3
 801a65a:	b29b      	uxth	r3, r3
 801a65c:	f023 0303 	bic.w	r3, r3, #3
 801a660:	b29a      	uxth	r2, r3
 801a662:	88bb      	ldrh	r3, [r7, #4]
 801a664:	3303      	adds	r3, #3
 801a666:	b29b      	uxth	r3, r3
 801a668:	f023 0303 	bic.w	r3, r3, #3
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	4413      	add	r3, r2
 801a670:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a672:	8b3b      	ldrh	r3, [r7, #24]
 801a674:	3318      	adds	r3, #24
 801a676:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a678:	8b3a      	ldrh	r2, [r7, #24]
 801a67a:	88bb      	ldrh	r3, [r7, #4]
 801a67c:	3303      	adds	r3, #3
 801a67e:	f023 0303 	bic.w	r3, r3, #3
 801a682:	429a      	cmp	r2, r3
 801a684:	d306      	bcc.n	801a694 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801a686:	8afa      	ldrh	r2, [r7, #22]
 801a688:	88bb      	ldrh	r3, [r7, #4]
 801a68a:	3303      	adds	r3, #3
 801a68c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a690:	429a      	cmp	r2, r3
 801a692:	d201      	bcs.n	801a698 <pbuf_alloc+0x160>
        return NULL;
 801a694:	2300      	movs	r3, #0
 801a696:	e035      	b.n	801a704 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a698:	8afb      	ldrh	r3, [r7, #22]
 801a69a:	4618      	mov	r0, r3
 801a69c:	f7ff f950 	bl	8019940 <mem_malloc>
 801a6a0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d101      	bne.n	801a6ac <pbuf_alloc+0x174>
        return NULL;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	e02b      	b.n	801a704 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a6ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a6ae:	3318      	adds	r3, #24
 801a6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6b2:	4413      	add	r3, r2
 801a6b4:	3303      	adds	r3, #3
 801a6b6:	f023 0303 	bic.w	r3, r3, #3
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	88b9      	ldrh	r1, [r7, #4]
 801a6be:	88ba      	ldrh	r2, [r7, #4]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	887b      	ldrh	r3, [r7, #2]
 801a6c6:	9300      	str	r3, [sp, #0]
 801a6c8:	460b      	mov	r3, r1
 801a6ca:	4601      	mov	r1, r0
 801a6cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6ce:	f7ff ff09 	bl	801a4e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6d4:	685b      	ldr	r3, [r3, #4]
 801a6d6:	f003 0303 	and.w	r3, r3, #3
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d010      	beq.n	801a700 <pbuf_alloc+0x1c8>
 801a6de:	4b0b      	ldr	r3, [pc, #44]	@ (801a70c <pbuf_alloc+0x1d4>)
 801a6e0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801a6e4:	490d      	ldr	r1, [pc, #52]	@ (801a71c <pbuf_alloc+0x1e4>)
 801a6e6:	480b      	ldr	r0, [pc, #44]	@ (801a714 <pbuf_alloc+0x1dc>)
 801a6e8:	f008 f916 	bl	8022918 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801a6ec:	e008      	b.n	801a700 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a6ee:	4b07      	ldr	r3, [pc, #28]	@ (801a70c <pbuf_alloc+0x1d4>)
 801a6f0:	f240 1227 	movw	r2, #295	@ 0x127
 801a6f4:	490a      	ldr	r1, [pc, #40]	@ (801a720 <pbuf_alloc+0x1e8>)
 801a6f6:	4807      	ldr	r0, [pc, #28]	@ (801a714 <pbuf_alloc+0x1dc>)
 801a6f8:	f008 f90e 	bl	8022918 <iprintf>
      return NULL;
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	e001      	b.n	801a704 <pbuf_alloc+0x1cc>
      break;
 801a700:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a704:	4618      	mov	r0, r3
 801a706:	3728      	adds	r7, #40	@ 0x28
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd80      	pop	{r7, pc}
 801a70c:	08026560 	.word	0x08026560
 801a710:	080265d4 	.word	0x080265d4
 801a714:	08026604 	.word	0x08026604
 801a718:	0802662c 	.word	0x0802662c
 801a71c:	08026660 	.word	0x08026660
 801a720:	0802668c 	.word	0x0802668c

0801a724 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b086      	sub	sp, #24
 801a728:	af02      	add	r7, sp, #8
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	460b      	mov	r3, r1
 801a72e:	807b      	strh	r3, [r7, #2]
 801a730:	4613      	mov	r3, r2
 801a732:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a734:	883b      	ldrh	r3, [r7, #0]
 801a736:	2b41      	cmp	r3, #65	@ 0x41
 801a738:	d009      	beq.n	801a74e <pbuf_alloc_reference+0x2a>
 801a73a:	883b      	ldrh	r3, [r7, #0]
 801a73c:	2b01      	cmp	r3, #1
 801a73e:	d006      	beq.n	801a74e <pbuf_alloc_reference+0x2a>
 801a740:	4b0f      	ldr	r3, [pc, #60]	@ (801a780 <pbuf_alloc_reference+0x5c>)
 801a742:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801a746:	490f      	ldr	r1, [pc, #60]	@ (801a784 <pbuf_alloc_reference+0x60>)
 801a748:	480f      	ldr	r0, [pc, #60]	@ (801a788 <pbuf_alloc_reference+0x64>)
 801a74a:	f008 f8e5 	bl	8022918 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a74e:	200c      	movs	r0, #12
 801a750:	f7ff fa9a 	bl	8019c88 <memp_malloc>
 801a754:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d101      	bne.n	801a760 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801a75c:	2300      	movs	r3, #0
 801a75e:	e00b      	b.n	801a778 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801a760:	8879      	ldrh	r1, [r7, #2]
 801a762:	887a      	ldrh	r2, [r7, #2]
 801a764:	2300      	movs	r3, #0
 801a766:	9301      	str	r3, [sp, #4]
 801a768:	883b      	ldrh	r3, [r7, #0]
 801a76a:	9300      	str	r3, [sp, #0]
 801a76c:	460b      	mov	r3, r1
 801a76e:	6879      	ldr	r1, [r7, #4]
 801a770:	68f8      	ldr	r0, [r7, #12]
 801a772:	f7ff feb7 	bl	801a4e4 <pbuf_init_alloced_pbuf>
  return p;
 801a776:	68fb      	ldr	r3, [r7, #12]
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3710      	adds	r7, #16
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}
 801a780:	08026560 	.word	0x08026560
 801a784:	080266a8 	.word	0x080266a8
 801a788:	08026604 	.word	0x08026604

0801a78c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b088      	sub	sp, #32
 801a790:	af02      	add	r7, sp, #8
 801a792:	607b      	str	r3, [r7, #4]
 801a794:	4603      	mov	r3, r0
 801a796:	73fb      	strb	r3, [r7, #15]
 801a798:	460b      	mov	r3, r1
 801a79a:	81bb      	strh	r3, [r7, #12]
 801a79c:	4613      	mov	r3, r2
 801a79e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a7a0:	7bfb      	ldrb	r3, [r7, #15]
 801a7a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a7a4:	8a7b      	ldrh	r3, [r7, #18]
 801a7a6:	3303      	adds	r3, #3
 801a7a8:	f023 0203 	bic.w	r2, r3, #3
 801a7ac:	89bb      	ldrh	r3, [r7, #12]
 801a7ae:	441a      	add	r2, r3
 801a7b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d901      	bls.n	801a7ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	e018      	b.n	801a7ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a7ba:	6a3b      	ldr	r3, [r7, #32]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d007      	beq.n	801a7d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a7c0:	8a7b      	ldrh	r3, [r7, #18]
 801a7c2:	3303      	adds	r3, #3
 801a7c4:	f023 0303 	bic.w	r3, r3, #3
 801a7c8:	6a3a      	ldr	r2, [r7, #32]
 801a7ca:	4413      	add	r3, r2
 801a7cc:	617b      	str	r3, [r7, #20]
 801a7ce:	e001      	b.n	801a7d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	89b9      	ldrh	r1, [r7, #12]
 801a7d8:	89ba      	ldrh	r2, [r7, #12]
 801a7da:	2302      	movs	r3, #2
 801a7dc:	9301      	str	r3, [sp, #4]
 801a7de:	897b      	ldrh	r3, [r7, #10]
 801a7e0:	9300      	str	r3, [sp, #0]
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	6979      	ldr	r1, [r7, #20]
 801a7e6:	f7ff fe7d 	bl	801a4e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a7ea:	687b      	ldr	r3, [r7, #4]
}
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	3718      	adds	r7, #24
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd80      	pop	{r7, pc}

0801a7f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b084      	sub	sp, #16
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
 801a7fc:	460b      	mov	r3, r1
 801a7fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d106      	bne.n	801a814 <pbuf_realloc+0x20>
 801a806:	4b3a      	ldr	r3, [pc, #232]	@ (801a8f0 <pbuf_realloc+0xfc>)
 801a808:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801a80c:	4939      	ldr	r1, [pc, #228]	@ (801a8f4 <pbuf_realloc+0x100>)
 801a80e:	483a      	ldr	r0, [pc, #232]	@ (801a8f8 <pbuf_realloc+0x104>)
 801a810:	f008 f882 	bl	8022918 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	891b      	ldrh	r3, [r3, #8]
 801a818:	887a      	ldrh	r2, [r7, #2]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d263      	bcs.n	801a8e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	891a      	ldrh	r2, [r3, #8]
 801a822:	887b      	ldrh	r3, [r7, #2]
 801a824:	1ad3      	subs	r3, r2, r3
 801a826:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a828:	887b      	ldrh	r3, [r7, #2]
 801a82a:	817b      	strh	r3, [r7, #10]
  q = p;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a830:	e018      	b.n	801a864 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	895b      	ldrh	r3, [r3, #10]
 801a836:	897a      	ldrh	r2, [r7, #10]
 801a838:	1ad3      	subs	r3, r2, r3
 801a83a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	891a      	ldrh	r2, [r3, #8]
 801a840:	893b      	ldrh	r3, [r7, #8]
 801a842:	1ad3      	subs	r3, r2, r3
 801a844:	b29a      	uxth	r2, r3
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d106      	bne.n	801a864 <pbuf_realloc+0x70>
 801a856:	4b26      	ldr	r3, [pc, #152]	@ (801a8f0 <pbuf_realloc+0xfc>)
 801a858:	f240 12af 	movw	r2, #431	@ 0x1af
 801a85c:	4927      	ldr	r1, [pc, #156]	@ (801a8fc <pbuf_realloc+0x108>)
 801a85e:	4826      	ldr	r0, [pc, #152]	@ (801a8f8 <pbuf_realloc+0x104>)
 801a860:	f008 f85a 	bl	8022918 <iprintf>
  while (rem_len > q->len) {
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	895b      	ldrh	r3, [r3, #10]
 801a868:	897a      	ldrh	r2, [r7, #10]
 801a86a:	429a      	cmp	r2, r3
 801a86c:	d8e1      	bhi.n	801a832 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	7b1b      	ldrb	r3, [r3, #12]
 801a872:	f003 030f 	and.w	r3, r3, #15
 801a876:	2b00      	cmp	r3, #0
 801a878:	d121      	bne.n	801a8be <pbuf_realloc+0xca>
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	895b      	ldrh	r3, [r3, #10]
 801a87e:	897a      	ldrh	r2, [r7, #10]
 801a880:	429a      	cmp	r2, r3
 801a882:	d01c      	beq.n	801a8be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	7b5b      	ldrb	r3, [r3, #13]
 801a888:	f003 0302 	and.w	r3, r3, #2
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d116      	bne.n	801a8be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	685a      	ldr	r2, [r3, #4]
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	1ad3      	subs	r3, r2, r3
 801a898:	b29a      	uxth	r2, r3
 801a89a:	897b      	ldrh	r3, [r7, #10]
 801a89c:	4413      	add	r3, r2
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	4619      	mov	r1, r3
 801a8a2:	68f8      	ldr	r0, [r7, #12]
 801a8a4:	f7fe ff42 	bl	801972c <mem_trim>
 801a8a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d106      	bne.n	801a8be <pbuf_realloc+0xca>
 801a8b0:	4b0f      	ldr	r3, [pc, #60]	@ (801a8f0 <pbuf_realloc+0xfc>)
 801a8b2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801a8b6:	4912      	ldr	r1, [pc, #72]	@ (801a900 <pbuf_realloc+0x10c>)
 801a8b8:	480f      	ldr	r0, [pc, #60]	@ (801a8f8 <pbuf_realloc+0x104>)
 801a8ba:	f008 f82d 	bl	8022918 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	897a      	ldrh	r2, [r7, #10]
 801a8c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	895a      	ldrh	r2, [r3, #10]
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d004      	beq.n	801a8de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f000 f943 	bl	801ab64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	601a      	str	r2, [r3, #0]
 801a8e4:	e000      	b.n	801a8e8 <pbuf_realloc+0xf4>
    return;
 801a8e6:	bf00      	nop

}
 801a8e8:	3710      	adds	r7, #16
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	08026560 	.word	0x08026560
 801a8f4:	080266bc 	.word	0x080266bc
 801a8f8:	08026604 	.word	0x08026604
 801a8fc:	080266d4 	.word	0x080266d4
 801a900:	080266ec 	.word	0x080266ec

0801a904 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b086      	sub	sp, #24
 801a908:	af00      	add	r7, sp, #0
 801a90a:	60f8      	str	r0, [r7, #12]
 801a90c:	60b9      	str	r1, [r7, #8]
 801a90e:	4613      	mov	r3, r2
 801a910:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d106      	bne.n	801a926 <pbuf_add_header_impl+0x22>
 801a918:	4b2b      	ldr	r3, [pc, #172]	@ (801a9c8 <pbuf_add_header_impl+0xc4>)
 801a91a:	f240 12df 	movw	r2, #479	@ 0x1df
 801a91e:	492b      	ldr	r1, [pc, #172]	@ (801a9cc <pbuf_add_header_impl+0xc8>)
 801a920:	482b      	ldr	r0, [pc, #172]	@ (801a9d0 <pbuf_add_header_impl+0xcc>)
 801a922:	f007 fff9 	bl	8022918 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d003      	beq.n	801a934 <pbuf_add_header_impl+0x30>
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a932:	d301      	bcc.n	801a938 <pbuf_add_header_impl+0x34>
    return 1;
 801a934:	2301      	movs	r3, #1
 801a936:	e043      	b.n	801a9c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d101      	bne.n	801a942 <pbuf_add_header_impl+0x3e>
    return 0;
 801a93e:	2300      	movs	r3, #0
 801a940:	e03e      	b.n	801a9c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	891a      	ldrh	r2, [r3, #8]
 801a94a:	8a7b      	ldrh	r3, [r7, #18]
 801a94c:	4413      	add	r3, r2
 801a94e:	b29b      	uxth	r3, r3
 801a950:	8a7a      	ldrh	r2, [r7, #18]
 801a952:	429a      	cmp	r2, r3
 801a954:	d901      	bls.n	801a95a <pbuf_add_header_impl+0x56>
    return 1;
 801a956:	2301      	movs	r3, #1
 801a958:	e032      	b.n	801a9c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	7b1b      	ldrb	r3, [r3, #12]
 801a95e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a960:	8a3b      	ldrh	r3, [r7, #16]
 801a962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a966:	2b00      	cmp	r3, #0
 801a968:	d00c      	beq.n	801a984 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	685a      	ldr	r2, [r3, #4]
 801a96e:	68bb      	ldr	r3, [r7, #8]
 801a970:	425b      	negs	r3, r3
 801a972:	4413      	add	r3, r2
 801a974:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	3318      	adds	r3, #24
 801a97a:	697a      	ldr	r2, [r7, #20]
 801a97c:	429a      	cmp	r2, r3
 801a97e:	d20d      	bcs.n	801a99c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a980:	2301      	movs	r3, #1
 801a982:	e01d      	b.n	801a9c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a984:	79fb      	ldrb	r3, [r7, #7]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d006      	beq.n	801a998 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	685a      	ldr	r2, [r3, #4]
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	425b      	negs	r3, r3
 801a992:	4413      	add	r3, r2
 801a994:	617b      	str	r3, [r7, #20]
 801a996:	e001      	b.n	801a99c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a998:	2301      	movs	r3, #1
 801a99a:	e011      	b.n	801a9c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	697a      	ldr	r2, [r7, #20]
 801a9a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	895a      	ldrh	r2, [r3, #10]
 801a9a6:	8a7b      	ldrh	r3, [r7, #18]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	891a      	ldrh	r2, [r3, #8]
 801a9b4:	8a7b      	ldrh	r3, [r7, #18]
 801a9b6:	4413      	add	r3, r2
 801a9b8:	b29a      	uxth	r2, r3
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	811a      	strh	r2, [r3, #8]


  return 0;
 801a9be:	2300      	movs	r3, #0
}
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	3718      	adds	r7, #24
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}
 801a9c8:	08026560 	.word	0x08026560
 801a9cc:	08026708 	.word	0x08026708
 801a9d0:	08026604 	.word	0x08026604

0801a9d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
 801a9dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a9de:	2200      	movs	r2, #0
 801a9e0:	6839      	ldr	r1, [r7, #0]
 801a9e2:	6878      	ldr	r0, [r7, #4]
 801a9e4:	f7ff ff8e 	bl	801a904 <pbuf_add_header_impl>
 801a9e8:	4603      	mov	r3, r0
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	3708      	adds	r7, #8
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}
	...

0801a9f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b084      	sub	sp, #16
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d106      	bne.n	801aa12 <pbuf_remove_header+0x1e>
 801aa04:	4b20      	ldr	r3, [pc, #128]	@ (801aa88 <pbuf_remove_header+0x94>)
 801aa06:	f240 224b 	movw	r2, #587	@ 0x24b
 801aa0a:	4920      	ldr	r1, [pc, #128]	@ (801aa8c <pbuf_remove_header+0x98>)
 801aa0c:	4820      	ldr	r0, [pc, #128]	@ (801aa90 <pbuf_remove_header+0x9c>)
 801aa0e:	f007 ff83 	bl	8022918 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d003      	beq.n	801aa20 <pbuf_remove_header+0x2c>
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801aa1e:	d301      	bcc.n	801aa24 <pbuf_remove_header+0x30>
    return 1;
 801aa20:	2301      	movs	r3, #1
 801aa22:	e02c      	b.n	801aa7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d101      	bne.n	801aa2e <pbuf_remove_header+0x3a>
    return 0;
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	e027      	b.n	801aa7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	895b      	ldrh	r3, [r3, #10]
 801aa36:	89fa      	ldrh	r2, [r7, #14]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d908      	bls.n	801aa4e <pbuf_remove_header+0x5a>
 801aa3c:	4b12      	ldr	r3, [pc, #72]	@ (801aa88 <pbuf_remove_header+0x94>)
 801aa3e:	f240 2255 	movw	r2, #597	@ 0x255
 801aa42:	4914      	ldr	r1, [pc, #80]	@ (801aa94 <pbuf_remove_header+0xa0>)
 801aa44:	4812      	ldr	r0, [pc, #72]	@ (801aa90 <pbuf_remove_header+0x9c>)
 801aa46:	f007 ff67 	bl	8022918 <iprintf>
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	e017      	b.n	801aa7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	685a      	ldr	r2, [r3, #4]
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	441a      	add	r2, r3
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	895a      	ldrh	r2, [r3, #10]
 801aa64:	89fb      	ldrh	r3, [r7, #14]
 801aa66:	1ad3      	subs	r3, r2, r3
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	891a      	ldrh	r2, [r3, #8]
 801aa72:	89fb      	ldrh	r3, [r7, #14]
 801aa74:	1ad3      	subs	r3, r2, r3
 801aa76:	b29a      	uxth	r2, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801aa7c:	2300      	movs	r3, #0
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3710      	adds	r7, #16
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	bf00      	nop
 801aa88:	08026560 	.word	0x08026560
 801aa8c:	08026708 	.word	0x08026708
 801aa90:	08026604 	.word	0x08026604
 801aa94:	08026714 	.word	0x08026714

0801aa98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b082      	sub	sp, #8
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
 801aaa0:	460b      	mov	r3, r1
 801aaa2:	807b      	strh	r3, [r7, #2]
 801aaa4:	4613      	mov	r3, r2
 801aaa6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801aaa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	da08      	bge.n	801aac2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801aab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aab4:	425b      	negs	r3, r3
 801aab6:	4619      	mov	r1, r3
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f7ff ff9b 	bl	801a9f4 <pbuf_remove_header>
 801aabe:	4603      	mov	r3, r0
 801aac0:	e007      	b.n	801aad2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801aac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aac6:	787a      	ldrb	r2, [r7, #1]
 801aac8:	4619      	mov	r1, r3
 801aaca:	6878      	ldr	r0, [r7, #4]
 801aacc:	f7ff ff1a 	bl	801a904 <pbuf_add_header_impl>
 801aad0:	4603      	mov	r3, r0
  }
}
 801aad2:	4618      	mov	r0, r3
 801aad4:	3708      	adds	r7, #8
 801aad6:	46bd      	mov	sp, r7
 801aad8:	bd80      	pop	{r7, pc}

0801aada <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801aada:	b580      	push	{r7, lr}
 801aadc:	b082      	sub	sp, #8
 801aade:	af00      	add	r7, sp, #0
 801aae0:	6078      	str	r0, [r7, #4]
 801aae2:	460b      	mov	r3, r1
 801aae4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801aae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aaea:	2201      	movs	r2, #1
 801aaec:	4619      	mov	r1, r3
 801aaee:	6878      	ldr	r0, [r7, #4]
 801aaf0:	f7ff ffd2 	bl	801aa98 <pbuf_header_impl>
 801aaf4:	4603      	mov	r3, r0
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3708      	adds	r7, #8
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}

0801aafe <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801aafe:	b580      	push	{r7, lr}
 801ab00:	b086      	sub	sp, #24
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
 801ab06:	460b      	mov	r3, r1
 801ab08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801ab0e:	887b      	ldrh	r3, [r7, #2]
 801ab10:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801ab12:	e01c      	b.n	801ab4e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801ab14:	697b      	ldr	r3, [r7, #20]
 801ab16:	895b      	ldrh	r3, [r3, #10]
 801ab18:	8a7a      	ldrh	r2, [r7, #18]
 801ab1a:	429a      	cmp	r2, r3
 801ab1c:	d310      	bcc.n	801ab40 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801ab22:	697b      	ldr	r3, [r7, #20]
 801ab24:	895b      	ldrh	r3, [r3, #10]
 801ab26:	8a7a      	ldrh	r2, [r7, #18]
 801ab28:	1ad3      	subs	r3, r2, r3
 801ab2a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	2200      	movs	r2, #0
 801ab36:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801ab38:	68f8      	ldr	r0, [r7, #12]
 801ab3a:	f000 f813 	bl	801ab64 <pbuf_free>
 801ab3e:	e006      	b.n	801ab4e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801ab40:	8a7b      	ldrh	r3, [r7, #18]
 801ab42:	4619      	mov	r1, r3
 801ab44:	6978      	ldr	r0, [r7, #20]
 801ab46:	f7ff ff55 	bl	801a9f4 <pbuf_remove_header>
      free_left = 0;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801ab4e:	8a7b      	ldrh	r3, [r7, #18]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d002      	beq.n	801ab5a <pbuf_free_header+0x5c>
 801ab54:	697b      	ldr	r3, [r7, #20]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d1dc      	bne.n	801ab14 <pbuf_free_header+0x16>
    }
  }
  return p;
 801ab5a:	697b      	ldr	r3, [r7, #20]
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3718      	adds	r7, #24
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}

0801ab64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b088      	sub	sp, #32
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d10b      	bne.n	801ab8a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d106      	bne.n	801ab86 <pbuf_free+0x22>
 801ab78:	4b3b      	ldr	r3, [pc, #236]	@ (801ac68 <pbuf_free+0x104>)
 801ab7a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801ab7e:	493b      	ldr	r1, [pc, #236]	@ (801ac6c <pbuf_free+0x108>)
 801ab80:	483b      	ldr	r0, [pc, #236]	@ (801ac70 <pbuf_free+0x10c>)
 801ab82:	f007 fec9 	bl	8022918 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801ab86:	2300      	movs	r3, #0
 801ab88:	e069      	b.n	801ac5e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ab8e:	e062      	b.n	801ac56 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801ab90:	f007 fd5c 	bl	802264c <sys_arch_protect>
 801ab94:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	7b9b      	ldrb	r3, [r3, #14]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d106      	bne.n	801abac <pbuf_free+0x48>
 801ab9e:	4b32      	ldr	r3, [pc, #200]	@ (801ac68 <pbuf_free+0x104>)
 801aba0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801aba4:	4933      	ldr	r1, [pc, #204]	@ (801ac74 <pbuf_free+0x110>)
 801aba6:	4832      	ldr	r0, [pc, #200]	@ (801ac70 <pbuf_free+0x10c>)
 801aba8:	f007 feb6 	bl	8022918 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	7b9b      	ldrb	r3, [r3, #14]
 801abb0:	3b01      	subs	r3, #1
 801abb2:	b2da      	uxtb	r2, r3
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	739a      	strb	r2, [r3, #14]
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	7b9b      	ldrb	r3, [r3, #14]
 801abbc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801abbe:	69b8      	ldr	r0, [r7, #24]
 801abc0:	f007 fd52 	bl	8022668 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801abc4:	7dfb      	ldrb	r3, [r7, #23]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d143      	bne.n	801ac52 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	7b1b      	ldrb	r3, [r3, #12]
 801abd4:	f003 030f 	and.w	r3, r3, #15
 801abd8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	7b5b      	ldrb	r3, [r3, #13]
 801abde:	f003 0302 	and.w	r3, r3, #2
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d011      	beq.n	801ac0a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	699b      	ldr	r3, [r3, #24]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d106      	bne.n	801ac00 <pbuf_free+0x9c>
 801abf2:	4b1d      	ldr	r3, [pc, #116]	@ (801ac68 <pbuf_free+0x104>)
 801abf4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801abf8:	491f      	ldr	r1, [pc, #124]	@ (801ac78 <pbuf_free+0x114>)
 801abfa:	481d      	ldr	r0, [pc, #116]	@ (801ac70 <pbuf_free+0x10c>)
 801abfc:	f007 fe8c 	bl	8022918 <iprintf>
        pc->custom_free_function(p);
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	699b      	ldr	r3, [r3, #24]
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	4798      	blx	r3
 801ac08:	e01d      	b.n	801ac46 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ac0a:	7bfb      	ldrb	r3, [r7, #15]
 801ac0c:	2b02      	cmp	r3, #2
 801ac0e:	d104      	bne.n	801ac1a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801ac10:	6879      	ldr	r1, [r7, #4]
 801ac12:	200d      	movs	r0, #13
 801ac14:	f7ff f8ae 	bl	8019d74 <memp_free>
 801ac18:	e015      	b.n	801ac46 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ac1a:	7bfb      	ldrb	r3, [r7, #15]
 801ac1c:	2b01      	cmp	r3, #1
 801ac1e:	d104      	bne.n	801ac2a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801ac20:	6879      	ldr	r1, [r7, #4]
 801ac22:	200c      	movs	r0, #12
 801ac24:	f7ff f8a6 	bl	8019d74 <memp_free>
 801ac28:	e00d      	b.n	801ac46 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ac2a:	7bfb      	ldrb	r3, [r7, #15]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d103      	bne.n	801ac38 <pbuf_free+0xd4>
          mem_free(p);
 801ac30:	6878      	ldr	r0, [r7, #4]
 801ac32:	f7fe fceb 	bl	801960c <mem_free>
 801ac36:	e006      	b.n	801ac46 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ac38:	4b0b      	ldr	r3, [pc, #44]	@ (801ac68 <pbuf_free+0x104>)
 801ac3a:	f240 320f 	movw	r2, #783	@ 0x30f
 801ac3e:	490f      	ldr	r1, [pc, #60]	@ (801ac7c <pbuf_free+0x118>)
 801ac40:	480b      	ldr	r0, [pc, #44]	@ (801ac70 <pbuf_free+0x10c>)
 801ac42:	f007 fe69 	bl	8022918 <iprintf>
        }
      }
      count++;
 801ac46:	7ffb      	ldrb	r3, [r7, #31]
 801ac48:	3301      	adds	r3, #1
 801ac4a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801ac4c:	693b      	ldr	r3, [r7, #16]
 801ac4e:	607b      	str	r3, [r7, #4]
 801ac50:	e001      	b.n	801ac56 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801ac52:	2300      	movs	r3, #0
 801ac54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d199      	bne.n	801ab90 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801ac5c:	7ffb      	ldrb	r3, [r7, #31]
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3720      	adds	r7, #32
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	08026560 	.word	0x08026560
 801ac6c:	08026708 	.word	0x08026708
 801ac70:	08026604 	.word	0x08026604
 801ac74:	08026734 	.word	0x08026734
 801ac78:	0802674c 	.word	0x0802674c
 801ac7c:	08026770 	.word	0x08026770

0801ac80 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801ac80:	b480      	push	{r7}
 801ac82:	b085      	sub	sp, #20
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801ac88:	2300      	movs	r3, #0
 801ac8a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801ac8c:	e005      	b.n	801ac9a <pbuf_clen+0x1a>
    ++len;
 801ac8e:	89fb      	ldrh	r3, [r7, #14]
 801ac90:	3301      	adds	r3, #1
 801ac92:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d1f6      	bne.n	801ac8e <pbuf_clen+0xe>
  }
  return len;
 801aca0:	89fb      	ldrh	r3, [r7, #14]
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3714      	adds	r7, #20
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr
	...

0801acb0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b084      	sub	sp, #16
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d016      	beq.n	801acec <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801acbe:	f007 fcc5 	bl	802264c <sys_arch_protect>
 801acc2:	60f8      	str	r0, [r7, #12]
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	7b9b      	ldrb	r3, [r3, #14]
 801acc8:	3301      	adds	r3, #1
 801acca:	b2da      	uxtb	r2, r3
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	739a      	strb	r2, [r3, #14]
 801acd0:	68f8      	ldr	r0, [r7, #12]
 801acd2:	f007 fcc9 	bl	8022668 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	7b9b      	ldrb	r3, [r3, #14]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d106      	bne.n	801acec <pbuf_ref+0x3c>
 801acde:	4b05      	ldr	r3, [pc, #20]	@ (801acf4 <pbuf_ref+0x44>)
 801ace0:	f240 3242 	movw	r2, #834	@ 0x342
 801ace4:	4904      	ldr	r1, [pc, #16]	@ (801acf8 <pbuf_ref+0x48>)
 801ace6:	4805      	ldr	r0, [pc, #20]	@ (801acfc <pbuf_ref+0x4c>)
 801ace8:	f007 fe16 	bl	8022918 <iprintf>
  }
}
 801acec:	bf00      	nop
 801acee:	3710      	adds	r7, #16
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	08026560 	.word	0x08026560
 801acf8:	08026784 	.word	0x08026784
 801acfc:	08026604 	.word	0x08026604

0801ad00 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
 801ad08:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d002      	beq.n	801ad16 <pbuf_cat+0x16>
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d107      	bne.n	801ad26 <pbuf_cat+0x26>
 801ad16:	4b20      	ldr	r3, [pc, #128]	@ (801ad98 <pbuf_cat+0x98>)
 801ad18:	f240 3259 	movw	r2, #857	@ 0x359
 801ad1c:	491f      	ldr	r1, [pc, #124]	@ (801ad9c <pbuf_cat+0x9c>)
 801ad1e:	4820      	ldr	r0, [pc, #128]	@ (801ada0 <pbuf_cat+0xa0>)
 801ad20:	f007 fdfa 	bl	8022918 <iprintf>
 801ad24:	e034      	b.n	801ad90 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	60fb      	str	r3, [r7, #12]
 801ad2a:	e00a      	b.n	801ad42 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	891a      	ldrh	r2, [r3, #8]
 801ad30:	683b      	ldr	r3, [r7, #0]
 801ad32:	891b      	ldrh	r3, [r3, #8]
 801ad34:	4413      	add	r3, r2
 801ad36:	b29a      	uxth	r2, r3
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	60fb      	str	r3, [r7, #12]
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d1f0      	bne.n	801ad2c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	891a      	ldrh	r2, [r3, #8]
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	895b      	ldrh	r3, [r3, #10]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d006      	beq.n	801ad64 <pbuf_cat+0x64>
 801ad56:	4b10      	ldr	r3, [pc, #64]	@ (801ad98 <pbuf_cat+0x98>)
 801ad58:	f240 3262 	movw	r2, #866	@ 0x362
 801ad5c:	4911      	ldr	r1, [pc, #68]	@ (801ada4 <pbuf_cat+0xa4>)
 801ad5e:	4810      	ldr	r0, [pc, #64]	@ (801ada0 <pbuf_cat+0xa0>)
 801ad60:	f007 fdda 	bl	8022918 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d006      	beq.n	801ad7a <pbuf_cat+0x7a>
 801ad6c:	4b0a      	ldr	r3, [pc, #40]	@ (801ad98 <pbuf_cat+0x98>)
 801ad6e:	f240 3263 	movw	r2, #867	@ 0x363
 801ad72:	490d      	ldr	r1, [pc, #52]	@ (801ada8 <pbuf_cat+0xa8>)
 801ad74:	480a      	ldr	r0, [pc, #40]	@ (801ada0 <pbuf_cat+0xa0>)
 801ad76:	f007 fdcf 	bl	8022918 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	891a      	ldrh	r2, [r3, #8]
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	891b      	ldrh	r3, [r3, #8]
 801ad82:	4413      	add	r3, r2
 801ad84:	b29a      	uxth	r2, r3
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	683a      	ldr	r2, [r7, #0]
 801ad8e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ad90:	3710      	adds	r7, #16
 801ad92:	46bd      	mov	sp, r7
 801ad94:	bd80      	pop	{r7, pc}
 801ad96:	bf00      	nop
 801ad98:	08026560 	.word	0x08026560
 801ad9c:	08026798 	.word	0x08026798
 801ada0:	08026604 	.word	0x08026604
 801ada4:	080267d0 	.word	0x080267d0
 801ada8:	08026800 	.word	0x08026800

0801adac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b082      	sub	sp, #8
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	6078      	str	r0, [r7, #4]
 801adb4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801adb6:	6839      	ldr	r1, [r7, #0]
 801adb8:	6878      	ldr	r0, [r7, #4]
 801adba:	f7ff ffa1 	bl	801ad00 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801adbe:	6838      	ldr	r0, [r7, #0]
 801adc0:	f7ff ff76 	bl	801acb0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801adc4:	bf00      	nop
 801adc6:	3708      	adds	r7, #8
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}

0801adcc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b086      	sub	sp, #24
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801add6:	2300      	movs	r3, #0
 801add8:	617b      	str	r3, [r7, #20]
 801adda:	2300      	movs	r3, #0
 801addc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d008      	beq.n	801adf6 <pbuf_copy+0x2a>
 801ade4:	683b      	ldr	r3, [r7, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d005      	beq.n	801adf6 <pbuf_copy+0x2a>
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	891a      	ldrh	r2, [r3, #8]
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	891b      	ldrh	r3, [r3, #8]
 801adf2:	429a      	cmp	r2, r3
 801adf4:	d209      	bcs.n	801ae0a <pbuf_copy+0x3e>
 801adf6:	4b57      	ldr	r3, [pc, #348]	@ (801af54 <pbuf_copy+0x188>)
 801adf8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801adfc:	4956      	ldr	r1, [pc, #344]	@ (801af58 <pbuf_copy+0x18c>)
 801adfe:	4857      	ldr	r0, [pc, #348]	@ (801af5c <pbuf_copy+0x190>)
 801ae00:	f007 fd8a 	bl	8022918 <iprintf>
 801ae04:	f06f 030f 	mvn.w	r3, #15
 801ae08:	e09f      	b.n	801af4a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	895b      	ldrh	r3, [r3, #10]
 801ae0e:	461a      	mov	r2, r3
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	1ad2      	subs	r2, r2, r3
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	895b      	ldrh	r3, [r3, #10]
 801ae18:	4619      	mov	r1, r3
 801ae1a:	693b      	ldr	r3, [r7, #16]
 801ae1c:	1acb      	subs	r3, r1, r3
 801ae1e:	429a      	cmp	r2, r3
 801ae20:	d306      	bcc.n	801ae30 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	895b      	ldrh	r3, [r3, #10]
 801ae26:	461a      	mov	r2, r3
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	1ad3      	subs	r3, r2, r3
 801ae2c:	60fb      	str	r3, [r7, #12]
 801ae2e:	e005      	b.n	801ae3c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	895b      	ldrh	r3, [r3, #10]
 801ae34:	461a      	mov	r2, r3
 801ae36:	697b      	ldr	r3, [r7, #20]
 801ae38:	1ad3      	subs	r3, r2, r3
 801ae3a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	685a      	ldr	r2, [r3, #4]
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	18d0      	adds	r0, r2, r3
 801ae44:	683b      	ldr	r3, [r7, #0]
 801ae46:	685a      	ldr	r2, [r3, #4]
 801ae48:	693b      	ldr	r3, [r7, #16]
 801ae4a:	4413      	add	r3, r2
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	4619      	mov	r1, r3
 801ae50:	f007 ff99 	bl	8022d86 <memcpy>
    offset_to += len;
 801ae54:	697a      	ldr	r2, [r7, #20]
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	4413      	add	r3, r2
 801ae5a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801ae5c:	693a      	ldr	r2, [r7, #16]
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	4413      	add	r3, r2
 801ae62:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	895b      	ldrh	r3, [r3, #10]
 801ae68:	461a      	mov	r2, r3
 801ae6a:	697b      	ldr	r3, [r7, #20]
 801ae6c:	4293      	cmp	r3, r2
 801ae6e:	d906      	bls.n	801ae7e <pbuf_copy+0xb2>
 801ae70:	4b38      	ldr	r3, [pc, #224]	@ (801af54 <pbuf_copy+0x188>)
 801ae72:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801ae76:	493a      	ldr	r1, [pc, #232]	@ (801af60 <pbuf_copy+0x194>)
 801ae78:	4838      	ldr	r0, [pc, #224]	@ (801af5c <pbuf_copy+0x190>)
 801ae7a:	f007 fd4d 	bl	8022918 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ae7e:	683b      	ldr	r3, [r7, #0]
 801ae80:	895b      	ldrh	r3, [r3, #10]
 801ae82:	461a      	mov	r2, r3
 801ae84:	693b      	ldr	r3, [r7, #16]
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d906      	bls.n	801ae98 <pbuf_copy+0xcc>
 801ae8a:	4b32      	ldr	r3, [pc, #200]	@ (801af54 <pbuf_copy+0x188>)
 801ae8c:	f240 32da 	movw	r2, #986	@ 0x3da
 801ae90:	4934      	ldr	r1, [pc, #208]	@ (801af64 <pbuf_copy+0x198>)
 801ae92:	4832      	ldr	r0, [pc, #200]	@ (801af5c <pbuf_copy+0x190>)
 801ae94:	f007 fd40 	bl	8022918 <iprintf>
    if (offset_from >= p_from->len) {
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	895b      	ldrh	r3, [r3, #10]
 801ae9c:	461a      	mov	r2, r3
 801ae9e:	693b      	ldr	r3, [r7, #16]
 801aea0:	4293      	cmp	r3, r2
 801aea2:	d304      	bcc.n	801aeae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801aea4:	2300      	movs	r3, #0
 801aea6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	895b      	ldrh	r3, [r3, #10]
 801aeb2:	461a      	mov	r2, r3
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	d114      	bne.n	801aee4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801aeba:	2300      	movs	r3, #0
 801aebc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d10c      	bne.n	801aee4 <pbuf_copy+0x118>
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d009      	beq.n	801aee4 <pbuf_copy+0x118>
 801aed0:	4b20      	ldr	r3, [pc, #128]	@ (801af54 <pbuf_copy+0x188>)
 801aed2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801aed6:	4924      	ldr	r1, [pc, #144]	@ (801af68 <pbuf_copy+0x19c>)
 801aed8:	4820      	ldr	r0, [pc, #128]	@ (801af5c <pbuf_copy+0x190>)
 801aeda:	f007 fd1d 	bl	8022918 <iprintf>
 801aede:	f06f 030f 	mvn.w	r3, #15
 801aee2:	e032      	b.n	801af4a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801aee4:	683b      	ldr	r3, [r7, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d013      	beq.n	801af12 <pbuf_copy+0x146>
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	895a      	ldrh	r2, [r3, #10]
 801aeee:	683b      	ldr	r3, [r7, #0]
 801aef0:	891b      	ldrh	r3, [r3, #8]
 801aef2:	429a      	cmp	r2, r3
 801aef4:	d10d      	bne.n	801af12 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801aef6:	683b      	ldr	r3, [r7, #0]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d009      	beq.n	801af12 <pbuf_copy+0x146>
 801aefe:	4b15      	ldr	r3, [pc, #84]	@ (801af54 <pbuf_copy+0x188>)
 801af00:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801af04:	4919      	ldr	r1, [pc, #100]	@ (801af6c <pbuf_copy+0x1a0>)
 801af06:	4815      	ldr	r0, [pc, #84]	@ (801af5c <pbuf_copy+0x190>)
 801af08:	f007 fd06 	bl	8022918 <iprintf>
 801af0c:	f06f 0305 	mvn.w	r3, #5
 801af10:	e01b      	b.n	801af4a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d013      	beq.n	801af40 <pbuf_copy+0x174>
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	895a      	ldrh	r2, [r3, #10]
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	891b      	ldrh	r3, [r3, #8]
 801af20:	429a      	cmp	r2, r3
 801af22:	d10d      	bne.n	801af40 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d009      	beq.n	801af40 <pbuf_copy+0x174>
 801af2c:	4b09      	ldr	r3, [pc, #36]	@ (801af54 <pbuf_copy+0x188>)
 801af2e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801af32:	490e      	ldr	r1, [pc, #56]	@ (801af6c <pbuf_copy+0x1a0>)
 801af34:	4809      	ldr	r0, [pc, #36]	@ (801af5c <pbuf_copy+0x190>)
 801af36:	f007 fcef 	bl	8022918 <iprintf>
 801af3a:	f06f 0305 	mvn.w	r3, #5
 801af3e:	e004      	b.n	801af4a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801af40:	683b      	ldr	r3, [r7, #0]
 801af42:	2b00      	cmp	r3, #0
 801af44:	f47f af61 	bne.w	801ae0a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3718      	adds	r7, #24
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
 801af52:	bf00      	nop
 801af54:	08026560 	.word	0x08026560
 801af58:	0802684c 	.word	0x0802684c
 801af5c:	08026604 	.word	0x08026604
 801af60:	0802687c 	.word	0x0802687c
 801af64:	08026894 	.word	0x08026894
 801af68:	080268b0 	.word	0x080268b0
 801af6c:	080268c0 	.word	0x080268c0

0801af70 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b088      	sub	sp, #32
 801af74:	af00      	add	r7, sp, #0
 801af76:	60f8      	str	r0, [r7, #12]
 801af78:	60b9      	str	r1, [r7, #8]
 801af7a:	4611      	mov	r1, r2
 801af7c:	461a      	mov	r2, r3
 801af7e:	460b      	mov	r3, r1
 801af80:	80fb      	strh	r3, [r7, #6]
 801af82:	4613      	mov	r3, r2
 801af84:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801af86:	2300      	movs	r3, #0
 801af88:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801af8a:	2300      	movs	r3, #0
 801af8c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d108      	bne.n	801afa6 <pbuf_copy_partial+0x36>
 801af94:	4b2b      	ldr	r3, [pc, #172]	@ (801b044 <pbuf_copy_partial+0xd4>)
 801af96:	f240 420a 	movw	r2, #1034	@ 0x40a
 801af9a:	492b      	ldr	r1, [pc, #172]	@ (801b048 <pbuf_copy_partial+0xd8>)
 801af9c:	482b      	ldr	r0, [pc, #172]	@ (801b04c <pbuf_copy_partial+0xdc>)
 801af9e:	f007 fcbb 	bl	8022918 <iprintf>
 801afa2:	2300      	movs	r3, #0
 801afa4:	e04a      	b.n	801b03c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801afa6:	68bb      	ldr	r3, [r7, #8]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d108      	bne.n	801afbe <pbuf_copy_partial+0x4e>
 801afac:	4b25      	ldr	r3, [pc, #148]	@ (801b044 <pbuf_copy_partial+0xd4>)
 801afae:	f240 420b 	movw	r2, #1035	@ 0x40b
 801afb2:	4927      	ldr	r1, [pc, #156]	@ (801b050 <pbuf_copy_partial+0xe0>)
 801afb4:	4825      	ldr	r0, [pc, #148]	@ (801b04c <pbuf_copy_partial+0xdc>)
 801afb6:	f007 fcaf 	bl	8022918 <iprintf>
 801afba:	2300      	movs	r3, #0
 801afbc:	e03e      	b.n	801b03c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	61fb      	str	r3, [r7, #28]
 801afc2:	e034      	b.n	801b02e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801afc4:	88bb      	ldrh	r3, [r7, #4]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d00a      	beq.n	801afe0 <pbuf_copy_partial+0x70>
 801afca:	69fb      	ldr	r3, [r7, #28]
 801afcc:	895b      	ldrh	r3, [r3, #10]
 801afce:	88ba      	ldrh	r2, [r7, #4]
 801afd0:	429a      	cmp	r2, r3
 801afd2:	d305      	bcc.n	801afe0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801afd4:	69fb      	ldr	r3, [r7, #28]
 801afd6:	895b      	ldrh	r3, [r3, #10]
 801afd8:	88ba      	ldrh	r2, [r7, #4]
 801afda:	1ad3      	subs	r3, r2, r3
 801afdc:	80bb      	strh	r3, [r7, #4]
 801afde:	e023      	b.n	801b028 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801afe0:	69fb      	ldr	r3, [r7, #28]
 801afe2:	895a      	ldrh	r2, [r3, #10]
 801afe4:	88bb      	ldrh	r3, [r7, #4]
 801afe6:	1ad3      	subs	r3, r2, r3
 801afe8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801afea:	8b3a      	ldrh	r2, [r7, #24]
 801afec:	88fb      	ldrh	r3, [r7, #6]
 801afee:	429a      	cmp	r2, r3
 801aff0:	d901      	bls.n	801aff6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801aff2:	88fb      	ldrh	r3, [r7, #6]
 801aff4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aff6:	8b7b      	ldrh	r3, [r7, #26]
 801aff8:	68ba      	ldr	r2, [r7, #8]
 801affa:	18d0      	adds	r0, r2, r3
 801affc:	69fb      	ldr	r3, [r7, #28]
 801affe:	685a      	ldr	r2, [r3, #4]
 801b000:	88bb      	ldrh	r3, [r7, #4]
 801b002:	4413      	add	r3, r2
 801b004:	8b3a      	ldrh	r2, [r7, #24]
 801b006:	4619      	mov	r1, r3
 801b008:	f007 febd 	bl	8022d86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b00c:	8afa      	ldrh	r2, [r7, #22]
 801b00e:	8b3b      	ldrh	r3, [r7, #24]
 801b010:	4413      	add	r3, r2
 801b012:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801b014:	8b7a      	ldrh	r2, [r7, #26]
 801b016:	8b3b      	ldrh	r3, [r7, #24]
 801b018:	4413      	add	r3, r2
 801b01a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801b01c:	88fa      	ldrh	r2, [r7, #6]
 801b01e:	8b3b      	ldrh	r3, [r7, #24]
 801b020:	1ad3      	subs	r3, r2, r3
 801b022:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801b024:	2300      	movs	r3, #0
 801b026:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b028:	69fb      	ldr	r3, [r7, #28]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	61fb      	str	r3, [r7, #28]
 801b02e:	88fb      	ldrh	r3, [r7, #6]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d002      	beq.n	801b03a <pbuf_copy_partial+0xca>
 801b034:	69fb      	ldr	r3, [r7, #28]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d1c4      	bne.n	801afc4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801b03a:	8afb      	ldrh	r3, [r7, #22]
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3720      	adds	r7, #32
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}
 801b044:	08026560 	.word	0x08026560
 801b048:	080268ec 	.word	0x080268ec
 801b04c:	08026604 	.word	0x08026604
 801b050:	0802690c 	.word	0x0802690c

0801b054 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b088      	sub	sp, #32
 801b058:	af00      	add	r7, sp, #0
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	4613      	mov	r3, r2
 801b060:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801b062:	88fb      	ldrh	r3, [r7, #6]
 801b064:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801b066:	2300      	movs	r3, #0
 801b068:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d109      	bne.n	801b084 <pbuf_take+0x30>
 801b070:	4b3a      	ldr	r3, [pc, #232]	@ (801b15c <pbuf_take+0x108>)
 801b072:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 801b076:	493a      	ldr	r1, [pc, #232]	@ (801b160 <pbuf_take+0x10c>)
 801b078:	483a      	ldr	r0, [pc, #232]	@ (801b164 <pbuf_take+0x110>)
 801b07a:	f007 fc4d 	bl	8022918 <iprintf>
 801b07e:	f06f 030f 	mvn.w	r3, #15
 801b082:	e067      	b.n	801b154 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d109      	bne.n	801b09e <pbuf_take+0x4a>
 801b08a:	4b34      	ldr	r3, [pc, #208]	@ (801b15c <pbuf_take+0x108>)
 801b08c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801b090:	4935      	ldr	r1, [pc, #212]	@ (801b168 <pbuf_take+0x114>)
 801b092:	4834      	ldr	r0, [pc, #208]	@ (801b164 <pbuf_take+0x110>)
 801b094:	f007 fc40 	bl	8022918 <iprintf>
 801b098:	f06f 030f 	mvn.w	r3, #15
 801b09c:	e05a      	b.n	801b154 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	891b      	ldrh	r3, [r3, #8]
 801b0a2:	88fa      	ldrh	r2, [r7, #6]
 801b0a4:	429a      	cmp	r2, r3
 801b0a6:	d909      	bls.n	801b0bc <pbuf_take+0x68>
 801b0a8:	4b2c      	ldr	r3, [pc, #176]	@ (801b15c <pbuf_take+0x108>)
 801b0aa:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801b0ae:	492f      	ldr	r1, [pc, #188]	@ (801b16c <pbuf_take+0x118>)
 801b0b0:	482c      	ldr	r0, [pc, #176]	@ (801b164 <pbuf_take+0x110>)
 801b0b2:	f007 fc31 	bl	8022918 <iprintf>
 801b0b6:	f04f 33ff 	mov.w	r3, #4294967295
 801b0ba:	e04b      	b.n	801b154 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d007      	beq.n	801b0d2 <pbuf_take+0x7e>
 801b0c2:	68bb      	ldr	r3, [r7, #8]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d004      	beq.n	801b0d2 <pbuf_take+0x7e>
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	891b      	ldrh	r3, [r3, #8]
 801b0cc:	88fa      	ldrh	r2, [r7, #6]
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	d902      	bls.n	801b0d8 <pbuf_take+0x84>
    return ERR_ARG;
 801b0d2:	f06f 030f 	mvn.w	r3, #15
 801b0d6:	e03d      	b.n	801b154 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	61fb      	str	r3, [r7, #28]
 801b0dc:	e028      	b.n	801b130 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b0de:	69fb      	ldr	r3, [r7, #28]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d106      	bne.n	801b0f2 <pbuf_take+0x9e>
 801b0e4:	4b1d      	ldr	r3, [pc, #116]	@ (801b15c <pbuf_take+0x108>)
 801b0e6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 801b0ea:	4921      	ldr	r1, [pc, #132]	@ (801b170 <pbuf_take+0x11c>)
 801b0ec:	481d      	ldr	r0, [pc, #116]	@ (801b164 <pbuf_take+0x110>)
 801b0ee:	f007 fc13 	bl	8022918 <iprintf>
    buf_copy_len = total_copy_len;
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801b0f6:	69fb      	ldr	r3, [r7, #28]
 801b0f8:	895b      	ldrh	r3, [r3, #10]
 801b0fa:	461a      	mov	r2, r3
 801b0fc:	69bb      	ldr	r3, [r7, #24]
 801b0fe:	4293      	cmp	r3, r2
 801b100:	d902      	bls.n	801b108 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801b102:	69fb      	ldr	r3, [r7, #28]
 801b104:	895b      	ldrh	r3, [r3, #10]
 801b106:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	6858      	ldr	r0, [r3, #4]
 801b10c:	68ba      	ldr	r2, [r7, #8]
 801b10e:	693b      	ldr	r3, [r7, #16]
 801b110:	4413      	add	r3, r2
 801b112:	69ba      	ldr	r2, [r7, #24]
 801b114:	4619      	mov	r1, r3
 801b116:	f007 fe36 	bl	8022d86 <memcpy>
    total_copy_len -= buf_copy_len;
 801b11a:	697a      	ldr	r2, [r7, #20]
 801b11c:	69bb      	ldr	r3, [r7, #24]
 801b11e:	1ad3      	subs	r3, r2, r3
 801b120:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801b122:	693a      	ldr	r2, [r7, #16]
 801b124:	69bb      	ldr	r3, [r7, #24]
 801b126:	4413      	add	r3, r2
 801b128:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b12a:	69fb      	ldr	r3, [r7, #28]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	61fb      	str	r3, [r7, #28]
 801b130:	697b      	ldr	r3, [r7, #20]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1d3      	bne.n	801b0de <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801b136:	697b      	ldr	r3, [r7, #20]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d103      	bne.n	801b144 <pbuf_take+0xf0>
 801b13c:	88fb      	ldrh	r3, [r7, #6]
 801b13e:	693a      	ldr	r2, [r7, #16]
 801b140:	429a      	cmp	r2, r3
 801b142:	d006      	beq.n	801b152 <pbuf_take+0xfe>
 801b144:	4b05      	ldr	r3, [pc, #20]	@ (801b15c <pbuf_take+0x108>)
 801b146:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 801b14a:	490a      	ldr	r1, [pc, #40]	@ (801b174 <pbuf_take+0x120>)
 801b14c:	4805      	ldr	r0, [pc, #20]	@ (801b164 <pbuf_take+0x110>)
 801b14e:	f007 fbe3 	bl	8022918 <iprintf>
  return ERR_OK;
 801b152:	2300      	movs	r3, #0
}
 801b154:	4618      	mov	r0, r3
 801b156:	3720      	adds	r7, #32
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}
 801b15c:	08026560 	.word	0x08026560
 801b160:	0802697c 	.word	0x0802697c
 801b164:	08026604 	.word	0x08026604
 801b168:	08026994 	.word	0x08026994
 801b16c:	080269b0 	.word	0x080269b0
 801b170:	080269d0 	.word	0x080269d0
 801b174:	080269e8 	.word	0x080269e8

0801b178 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b084      	sub	sp, #16
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	4603      	mov	r3, r0
 801b180:	603a      	str	r2, [r7, #0]
 801b182:	71fb      	strb	r3, [r7, #7]
 801b184:	460b      	mov	r3, r1
 801b186:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	8919      	ldrh	r1, [r3, #8]
 801b18c:	88ba      	ldrh	r2, [r7, #4]
 801b18e:	79fb      	ldrb	r3, [r7, #7]
 801b190:	4618      	mov	r0, r3
 801b192:	f7ff f9d1 	bl	801a538 <pbuf_alloc>
 801b196:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d101      	bne.n	801b1a2 <pbuf_clone+0x2a>
    return NULL;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	e011      	b.n	801b1c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801b1a2:	6839      	ldr	r1, [r7, #0]
 801b1a4:	68f8      	ldr	r0, [r7, #12]
 801b1a6:	f7ff fe11 	bl	801adcc <pbuf_copy>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b1ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d006      	beq.n	801b1c4 <pbuf_clone+0x4c>
 801b1b6:	4b06      	ldr	r3, [pc, #24]	@ (801b1d0 <pbuf_clone+0x58>)
 801b1b8:	f240 5224 	movw	r2, #1316	@ 0x524
 801b1bc:	4905      	ldr	r1, [pc, #20]	@ (801b1d4 <pbuf_clone+0x5c>)
 801b1be:	4806      	ldr	r0, [pc, #24]	@ (801b1d8 <pbuf_clone+0x60>)
 801b1c0:	f007 fbaa 	bl	8022918 <iprintf>
  return q;
 801b1c4:	68fb      	ldr	r3, [r7, #12]
}
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	3710      	adds	r7, #16
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}
 801b1ce:	bf00      	nop
 801b1d0:	08026560 	.word	0x08026560
 801b1d4:	08026a18 	.word	0x08026a18
 801b1d8:	08026604 	.word	0x08026604

0801b1dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b1e0:	f007 fa9a 	bl	8022718 <rand>
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b1ec:	b29b      	uxth	r3, r3
 801b1ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b1f2:	b29a      	uxth	r2, r3
 801b1f4:	4b01      	ldr	r3, [pc, #4]	@ (801b1fc <tcp_init+0x20>)
 801b1f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b1f8:	bf00      	nop
 801b1fa:	bd80      	pop	{r7, pc}
 801b1fc:	20000038 	.word	0x20000038

0801b200 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	7d1b      	ldrb	r3, [r3, #20]
 801b20c:	2b01      	cmp	r3, #1
 801b20e:	d105      	bne.n	801b21c <tcp_free+0x1c>
 801b210:	4b06      	ldr	r3, [pc, #24]	@ (801b22c <tcp_free+0x2c>)
 801b212:	22d4      	movs	r2, #212	@ 0xd4
 801b214:	4906      	ldr	r1, [pc, #24]	@ (801b230 <tcp_free+0x30>)
 801b216:	4807      	ldr	r0, [pc, #28]	@ (801b234 <tcp_free+0x34>)
 801b218:	f007 fb7e 	bl	8022918 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801b21c:	6879      	ldr	r1, [r7, #4]
 801b21e:	2001      	movs	r0, #1
 801b220:	f7fe fda8 	bl	8019d74 <memp_free>
}
 801b224:	bf00      	nop
 801b226:	3708      	adds	r7, #8
 801b228:	46bd      	mov	sp, r7
 801b22a:	bd80      	pop	{r7, pc}
 801b22c:	08026aa4 	.word	0x08026aa4
 801b230:	08026b18 	.word	0x08026b18
 801b234:	08026b2c 	.word	0x08026b2c

0801b238 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b082      	sub	sp, #8
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	7d1b      	ldrb	r3, [r3, #20]
 801b244:	2b01      	cmp	r3, #1
 801b246:	d105      	bne.n	801b254 <tcp_free_listen+0x1c>
 801b248:	4b06      	ldr	r3, [pc, #24]	@ (801b264 <tcp_free_listen+0x2c>)
 801b24a:	22df      	movs	r2, #223	@ 0xdf
 801b24c:	4906      	ldr	r1, [pc, #24]	@ (801b268 <tcp_free_listen+0x30>)
 801b24e:	4807      	ldr	r0, [pc, #28]	@ (801b26c <tcp_free_listen+0x34>)
 801b250:	f007 fb62 	bl	8022918 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801b254:	6879      	ldr	r1, [r7, #4]
 801b256:	2002      	movs	r0, #2
 801b258:	f7fe fd8c 	bl	8019d74 <memp_free>
}
 801b25c:	bf00      	nop
 801b25e:	3708      	adds	r7, #8
 801b260:	46bd      	mov	sp, r7
 801b262:	bd80      	pop	{r7, pc}
 801b264:	08026aa4 	.word	0x08026aa4
 801b268:	08026b54 	.word	0x08026b54
 801b26c:	08026b2c 	.word	0x08026b2c

0801b270 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801b270:	b580      	push	{r7, lr}
 801b272:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801b274:	f001 f8aa 	bl	801c3cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801b278:	4b07      	ldr	r3, [pc, #28]	@ (801b298 <tcp_tmr+0x28>)
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	3301      	adds	r3, #1
 801b27e:	b2da      	uxtb	r2, r3
 801b280:	4b05      	ldr	r3, [pc, #20]	@ (801b298 <tcp_tmr+0x28>)
 801b282:	701a      	strb	r2, [r3, #0]
 801b284:	4b04      	ldr	r3, [pc, #16]	@ (801b298 <tcp_tmr+0x28>)
 801b286:	781b      	ldrb	r3, [r3, #0]
 801b288:	f003 0301 	and.w	r3, r3, #1
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d001      	beq.n	801b294 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801b290:	f000 fd5a 	bl	801bd48 <tcp_slowtmr>
  }
}
 801b294:	bf00      	nop
 801b296:	bd80      	pop	{r7, pc}
 801b298:	2001002d 	.word	0x2001002d

0801b29c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b084      	sub	sp, #16
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d105      	bne.n	801b2b8 <tcp_remove_listener+0x1c>
 801b2ac:	4b0d      	ldr	r3, [pc, #52]	@ (801b2e4 <tcp_remove_listener+0x48>)
 801b2ae:	22ff      	movs	r2, #255	@ 0xff
 801b2b0:	490d      	ldr	r1, [pc, #52]	@ (801b2e8 <tcp_remove_listener+0x4c>)
 801b2b2:	480e      	ldr	r0, [pc, #56]	@ (801b2ec <tcp_remove_listener+0x50>)
 801b2b4:	f007 fb30 	bl	8022918 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	60fb      	str	r3, [r7, #12]
 801b2bc:	e00a      	b.n	801b2d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b2c2:	683a      	ldr	r2, [r7, #0]
 801b2c4:	429a      	cmp	r2, r3
 801b2c6:	d102      	bne.n	801b2ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	2200      	movs	r2, #0
 801b2cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	68db      	ldr	r3, [r3, #12]
 801b2d2:	60fb      	str	r3, [r7, #12]
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d1f1      	bne.n	801b2be <tcp_remove_listener+0x22>
    }
  }
}
 801b2da:	bf00      	nop
 801b2dc:	bf00      	nop
 801b2de:	3710      	adds	r7, #16
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}
 801b2e4:	08026aa4 	.word	0x08026aa4
 801b2e8:	08026b70 	.word	0x08026b70
 801b2ec:	08026b2c 	.word	0x08026b2c

0801b2f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b084      	sub	sp, #16
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d106      	bne.n	801b30c <tcp_listen_closed+0x1c>
 801b2fe:	4b14      	ldr	r3, [pc, #80]	@ (801b350 <tcp_listen_closed+0x60>)
 801b300:	f240 1211 	movw	r2, #273	@ 0x111
 801b304:	4913      	ldr	r1, [pc, #76]	@ (801b354 <tcp_listen_closed+0x64>)
 801b306:	4814      	ldr	r0, [pc, #80]	@ (801b358 <tcp_listen_closed+0x68>)
 801b308:	f007 fb06 	bl	8022918 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	7d1b      	ldrb	r3, [r3, #20]
 801b310:	2b01      	cmp	r3, #1
 801b312:	d006      	beq.n	801b322 <tcp_listen_closed+0x32>
 801b314:	4b0e      	ldr	r3, [pc, #56]	@ (801b350 <tcp_listen_closed+0x60>)
 801b316:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801b31a:	4910      	ldr	r1, [pc, #64]	@ (801b35c <tcp_listen_closed+0x6c>)
 801b31c:	480e      	ldr	r0, [pc, #56]	@ (801b358 <tcp_listen_closed+0x68>)
 801b31e:	f007 fafb 	bl	8022918 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b322:	2301      	movs	r3, #1
 801b324:	60fb      	str	r3, [r7, #12]
 801b326:	e00b      	b.n	801b340 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b328:	4a0d      	ldr	r2, [pc, #52]	@ (801b360 <tcp_listen_closed+0x70>)
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	6879      	ldr	r1, [r7, #4]
 801b334:	4618      	mov	r0, r3
 801b336:	f7ff ffb1 	bl	801b29c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	3301      	adds	r3, #1
 801b33e:	60fb      	str	r3, [r7, #12]
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	2b03      	cmp	r3, #3
 801b344:	d9f0      	bls.n	801b328 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801b346:	bf00      	nop
 801b348:	bf00      	nop
 801b34a:	3710      	adds	r7, #16
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}
 801b350:	08026aa4 	.word	0x08026aa4
 801b354:	08026b98 	.word	0x08026b98
 801b358:	08026b2c 	.word	0x08026b2c
 801b35c:	08026ba4 	.word	0x08026ba4
 801b360:	08028cec 	.word	0x08028cec

0801b364 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801b364:	b5b0      	push	{r4, r5, r7, lr}
 801b366:	b088      	sub	sp, #32
 801b368:	af04      	add	r7, sp, #16
 801b36a:	6078      	str	r0, [r7, #4]
 801b36c:	460b      	mov	r3, r1
 801b36e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d106      	bne.n	801b384 <tcp_close_shutdown+0x20>
 801b376:	4b63      	ldr	r3, [pc, #396]	@ (801b504 <tcp_close_shutdown+0x1a0>)
 801b378:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801b37c:	4962      	ldr	r1, [pc, #392]	@ (801b508 <tcp_close_shutdown+0x1a4>)
 801b37e:	4863      	ldr	r0, [pc, #396]	@ (801b50c <tcp_close_shutdown+0x1a8>)
 801b380:	f007 faca 	bl	8022918 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801b384:	78fb      	ldrb	r3, [r7, #3]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d067      	beq.n	801b45a <tcp_close_shutdown+0xf6>
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	7d1b      	ldrb	r3, [r3, #20]
 801b38e:	2b04      	cmp	r3, #4
 801b390:	d003      	beq.n	801b39a <tcp_close_shutdown+0x36>
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	7d1b      	ldrb	r3, [r3, #20]
 801b396:	2b07      	cmp	r3, #7
 801b398:	d15f      	bne.n	801b45a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d105      	bne.n	801b3ae <tcp_close_shutdown+0x4a>
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b3a6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801b3aa:	4293      	cmp	r3, r2
 801b3ac:	d055      	beq.n	801b45a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	8b5b      	ldrh	r3, [r3, #26]
 801b3b2:	f003 0310 	and.w	r3, r3, #16
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d106      	bne.n	801b3c8 <tcp_close_shutdown+0x64>
 801b3ba:	4b52      	ldr	r3, [pc, #328]	@ (801b504 <tcp_close_shutdown+0x1a0>)
 801b3bc:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801b3c0:	4953      	ldr	r1, [pc, #332]	@ (801b510 <tcp_close_shutdown+0x1ac>)
 801b3c2:	4852      	ldr	r0, [pc, #328]	@ (801b50c <tcp_close_shutdown+0x1a8>)
 801b3c4:	f007 faa8 	bl	8022918 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801b3d0:	687d      	ldr	r5, [r7, #4]
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	3304      	adds	r3, #4
 801b3d6:	687a      	ldr	r2, [r7, #4]
 801b3d8:	8ad2      	ldrh	r2, [r2, #22]
 801b3da:	6879      	ldr	r1, [r7, #4]
 801b3dc:	8b09      	ldrh	r1, [r1, #24]
 801b3de:	9102      	str	r1, [sp, #8]
 801b3e0:	9201      	str	r2, [sp, #4]
 801b3e2:	9300      	str	r3, [sp, #0]
 801b3e4:	462b      	mov	r3, r5
 801b3e6:	4622      	mov	r2, r4
 801b3e8:	4601      	mov	r1, r0
 801b3ea:	6878      	ldr	r0, [r7, #4]
 801b3ec:	f005 fdbc 	bl	8020f68 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801b3f0:	6878      	ldr	r0, [r7, #4]
 801b3f2:	f001 fb9d 	bl	801cb30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801b3f6:	4b47      	ldr	r3, [pc, #284]	@ (801b514 <tcp_close_shutdown+0x1b0>)
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	687a      	ldr	r2, [r7, #4]
 801b3fc:	429a      	cmp	r2, r3
 801b3fe:	d105      	bne.n	801b40c <tcp_close_shutdown+0xa8>
 801b400:	4b44      	ldr	r3, [pc, #272]	@ (801b514 <tcp_close_shutdown+0x1b0>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	4a43      	ldr	r2, [pc, #268]	@ (801b514 <tcp_close_shutdown+0x1b0>)
 801b408:	6013      	str	r3, [r2, #0]
 801b40a:	e013      	b.n	801b434 <tcp_close_shutdown+0xd0>
 801b40c:	4b41      	ldr	r3, [pc, #260]	@ (801b514 <tcp_close_shutdown+0x1b0>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	60fb      	str	r3, [r7, #12]
 801b412:	e00c      	b.n	801b42e <tcp_close_shutdown+0xca>
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	68db      	ldr	r3, [r3, #12]
 801b418:	687a      	ldr	r2, [r7, #4]
 801b41a:	429a      	cmp	r2, r3
 801b41c:	d104      	bne.n	801b428 <tcp_close_shutdown+0xc4>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	68da      	ldr	r2, [r3, #12]
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	60da      	str	r2, [r3, #12]
 801b426:	e005      	b.n	801b434 <tcp_close_shutdown+0xd0>
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	68db      	ldr	r3, [r3, #12]
 801b42c:	60fb      	str	r3, [r7, #12]
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d1ef      	bne.n	801b414 <tcp_close_shutdown+0xb0>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	2200      	movs	r2, #0
 801b438:	60da      	str	r2, [r3, #12]
 801b43a:	4b37      	ldr	r3, [pc, #220]	@ (801b518 <tcp_close_shutdown+0x1b4>)
 801b43c:	2201      	movs	r2, #1
 801b43e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801b440:	4b36      	ldr	r3, [pc, #216]	@ (801b51c <tcp_close_shutdown+0x1b8>)
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	687a      	ldr	r2, [r7, #4]
 801b446:	429a      	cmp	r2, r3
 801b448:	d102      	bne.n	801b450 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801b44a:	f004 f833 	bl	801f4b4 <tcp_trigger_input_pcb_close>
 801b44e:	e002      	b.n	801b456 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 801b450:	6878      	ldr	r0, [r7, #4]
 801b452:	f7ff fed5 	bl	801b200 <tcp_free>
      }
      return ERR_OK;
 801b456:	2300      	movs	r3, #0
 801b458:	e050      	b.n	801b4fc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	7d1b      	ldrb	r3, [r3, #20]
 801b45e:	2b02      	cmp	r3, #2
 801b460:	d03b      	beq.n	801b4da <tcp_close_shutdown+0x176>
 801b462:	2b02      	cmp	r3, #2
 801b464:	dc44      	bgt.n	801b4f0 <tcp_close_shutdown+0x18c>
 801b466:	2b00      	cmp	r3, #0
 801b468:	d002      	beq.n	801b470 <tcp_close_shutdown+0x10c>
 801b46a:	2b01      	cmp	r3, #1
 801b46c:	d02a      	beq.n	801b4c4 <tcp_close_shutdown+0x160>
 801b46e:	e03f      	b.n	801b4f0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	8adb      	ldrh	r3, [r3, #22]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d021      	beq.n	801b4bc <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b478:	4b29      	ldr	r3, [pc, #164]	@ (801b520 <tcp_close_shutdown+0x1bc>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	687a      	ldr	r2, [r7, #4]
 801b47e:	429a      	cmp	r2, r3
 801b480:	d105      	bne.n	801b48e <tcp_close_shutdown+0x12a>
 801b482:	4b27      	ldr	r3, [pc, #156]	@ (801b520 <tcp_close_shutdown+0x1bc>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	68db      	ldr	r3, [r3, #12]
 801b488:	4a25      	ldr	r2, [pc, #148]	@ (801b520 <tcp_close_shutdown+0x1bc>)
 801b48a:	6013      	str	r3, [r2, #0]
 801b48c:	e013      	b.n	801b4b6 <tcp_close_shutdown+0x152>
 801b48e:	4b24      	ldr	r3, [pc, #144]	@ (801b520 <tcp_close_shutdown+0x1bc>)
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	60bb      	str	r3, [r7, #8]
 801b494:	e00c      	b.n	801b4b0 <tcp_close_shutdown+0x14c>
 801b496:	68bb      	ldr	r3, [r7, #8]
 801b498:	68db      	ldr	r3, [r3, #12]
 801b49a:	687a      	ldr	r2, [r7, #4]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d104      	bne.n	801b4aa <tcp_close_shutdown+0x146>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	68da      	ldr	r2, [r3, #12]
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	60da      	str	r2, [r3, #12]
 801b4a8:	e005      	b.n	801b4b6 <tcp_close_shutdown+0x152>
 801b4aa:	68bb      	ldr	r3, [r7, #8]
 801b4ac:	68db      	ldr	r3, [r3, #12]
 801b4ae:	60bb      	str	r3, [r7, #8]
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d1ef      	bne.n	801b496 <tcp_close_shutdown+0x132>
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7ff fe9f 	bl	801b200 <tcp_free>
      break;
 801b4c2:	e01a      	b.n	801b4fa <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801b4c4:	6878      	ldr	r0, [r7, #4]
 801b4c6:	f7ff ff13 	bl	801b2f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801b4ca:	6879      	ldr	r1, [r7, #4]
 801b4cc:	4815      	ldr	r0, [pc, #84]	@ (801b524 <tcp_close_shutdown+0x1c0>)
 801b4ce:	f001 fb7f 	bl	801cbd0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801b4d2:	6878      	ldr	r0, [r7, #4]
 801b4d4:	f7ff feb0 	bl	801b238 <tcp_free_listen>
      break;
 801b4d8:	e00f      	b.n	801b4fa <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b4da:	6879      	ldr	r1, [r7, #4]
 801b4dc:	480d      	ldr	r0, [pc, #52]	@ (801b514 <tcp_close_shutdown+0x1b0>)
 801b4de:	f001 fb77 	bl	801cbd0 <tcp_pcb_remove>
 801b4e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b518 <tcp_close_shutdown+0x1b4>)
 801b4e4:	2201      	movs	r2, #1
 801b4e6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7ff fe89 	bl	801b200 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801b4ee:	e004      	b.n	801b4fa <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f000 f819 	bl	801b528 <tcp_close_shutdown_fin>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	e000      	b.n	801b4fc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801b4fa:	2300      	movs	r3, #0
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	3710      	adds	r7, #16
 801b500:	46bd      	mov	sp, r7
 801b502:	bdb0      	pop	{r4, r5, r7, pc}
 801b504:	08026aa4 	.word	0x08026aa4
 801b508:	08026bbc 	.word	0x08026bbc
 801b50c:	08026b2c 	.word	0x08026b2c
 801b510:	08026bdc 	.word	0x08026bdc
 801b514:	20010024 	.word	0x20010024
 801b518:	2001002c 	.word	0x2001002c
 801b51c:	20010064 	.word	0x20010064
 801b520:	2001001c 	.word	0x2001001c
 801b524:	20010020 	.word	0x20010020

0801b528 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b084      	sub	sp, #16
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d106      	bne.n	801b544 <tcp_close_shutdown_fin+0x1c>
 801b536:	4b2e      	ldr	r3, [pc, #184]	@ (801b5f0 <tcp_close_shutdown_fin+0xc8>)
 801b538:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801b53c:	492d      	ldr	r1, [pc, #180]	@ (801b5f4 <tcp_close_shutdown_fin+0xcc>)
 801b53e:	482e      	ldr	r0, [pc, #184]	@ (801b5f8 <tcp_close_shutdown_fin+0xd0>)
 801b540:	f007 f9ea 	bl	8022918 <iprintf>

  switch (pcb->state) {
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	7d1b      	ldrb	r3, [r3, #20]
 801b548:	2b07      	cmp	r3, #7
 801b54a:	d020      	beq.n	801b58e <tcp_close_shutdown_fin+0x66>
 801b54c:	2b07      	cmp	r3, #7
 801b54e:	dc2b      	bgt.n	801b5a8 <tcp_close_shutdown_fin+0x80>
 801b550:	2b03      	cmp	r3, #3
 801b552:	d002      	beq.n	801b55a <tcp_close_shutdown_fin+0x32>
 801b554:	2b04      	cmp	r3, #4
 801b556:	d00d      	beq.n	801b574 <tcp_close_shutdown_fin+0x4c>
 801b558:	e026      	b.n	801b5a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801b55a:	6878      	ldr	r0, [r7, #4]
 801b55c:	f004 fe12 	bl	8020184 <tcp_send_fin>
 801b560:	4603      	mov	r3, r0
 801b562:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d11f      	bne.n	801b5ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	2205      	movs	r2, #5
 801b570:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b572:	e01b      	b.n	801b5ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f004 fe05 	bl	8020184 <tcp_send_fin>
 801b57a:	4603      	mov	r3, r0
 801b57c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d114      	bne.n	801b5b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	2205      	movs	r2, #5
 801b58a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b58c:	e010      	b.n	801b5b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801b58e:	6878      	ldr	r0, [r7, #4]
 801b590:	f004 fdf8 	bl	8020184 <tcp_send_fin>
 801b594:	4603      	mov	r3, r0
 801b596:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d109      	bne.n	801b5b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2209      	movs	r2, #9
 801b5a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b5a6:	e005      	b.n	801b5b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	e01c      	b.n	801b5e6 <tcp_close_shutdown_fin+0xbe>
      break;
 801b5ac:	bf00      	nop
 801b5ae:	e002      	b.n	801b5b6 <tcp_close_shutdown_fin+0x8e>
      break;
 801b5b0:	bf00      	nop
 801b5b2:	e000      	b.n	801b5b6 <tcp_close_shutdown_fin+0x8e>
      break;
 801b5b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 801b5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d103      	bne.n	801b5c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801b5be:	6878      	ldr	r0, [r7, #4]
 801b5c0:	f004 ff1e 	bl	8020400 <tcp_output>
 801b5c4:	e00d      	b.n	801b5e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801b5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5ce:	d108      	bne.n	801b5e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	8b5b      	ldrh	r3, [r3, #26]
 801b5d4:	f043 0308 	orr.w	r3, r3, #8
 801b5d8:	b29a      	uxth	r2, r3
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	e001      	b.n	801b5e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801b5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3710      	adds	r7, #16
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	08026aa4 	.word	0x08026aa4
 801b5f4:	08026b98 	.word	0x08026b98
 801b5f8:	08026b2c 	.word	0x08026b2c

0801b5fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b082      	sub	sp, #8
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d109      	bne.n	801b61e <tcp_close+0x22>
 801b60a:	4b0f      	ldr	r3, [pc, #60]	@ (801b648 <tcp_close+0x4c>)
 801b60c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801b610:	490e      	ldr	r1, [pc, #56]	@ (801b64c <tcp_close+0x50>)
 801b612:	480f      	ldr	r0, [pc, #60]	@ (801b650 <tcp_close+0x54>)
 801b614:	f007 f980 	bl	8022918 <iprintf>
 801b618:	f06f 030f 	mvn.w	r3, #15
 801b61c:	e00f      	b.n	801b63e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	7d1b      	ldrb	r3, [r3, #20]
 801b622:	2b01      	cmp	r3, #1
 801b624:	d006      	beq.n	801b634 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	8b5b      	ldrh	r3, [r3, #26]
 801b62a:	f043 0310 	orr.w	r3, r3, #16
 801b62e:	b29a      	uxth	r2, r3
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801b634:	2101      	movs	r1, #1
 801b636:	6878      	ldr	r0, [r7, #4]
 801b638:	f7ff fe94 	bl	801b364 <tcp_close_shutdown>
 801b63c:	4603      	mov	r3, r0
}
 801b63e:	4618      	mov	r0, r3
 801b640:	3708      	adds	r7, #8
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}
 801b646:	bf00      	nop
 801b648:	08026aa4 	.word	0x08026aa4
 801b64c:	08026bf8 	.word	0x08026bf8
 801b650:	08026b2c 	.word	0x08026b2c

0801b654 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
 801b65a:	60f8      	str	r0, [r7, #12]
 801b65c:	60b9      	str	r1, [r7, #8]
 801b65e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	2b00      	cmp	r3, #0
 801b664:	d109      	bne.n	801b67a <tcp_shutdown+0x26>
 801b666:	4b26      	ldr	r3, [pc, #152]	@ (801b700 <tcp_shutdown+0xac>)
 801b668:	f240 2207 	movw	r2, #519	@ 0x207
 801b66c:	4925      	ldr	r1, [pc, #148]	@ (801b704 <tcp_shutdown+0xb0>)
 801b66e:	4826      	ldr	r0, [pc, #152]	@ (801b708 <tcp_shutdown+0xb4>)
 801b670:	f007 f952 	bl	8022918 <iprintf>
 801b674:	f06f 030f 	mvn.w	r3, #15
 801b678:	e03d      	b.n	801b6f6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	7d1b      	ldrb	r3, [r3, #20]
 801b67e:	2b01      	cmp	r3, #1
 801b680:	d102      	bne.n	801b688 <tcp_shutdown+0x34>
    return ERR_CONN;
 801b682:	f06f 030a 	mvn.w	r3, #10
 801b686:	e036      	b.n	801b6f6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d01b      	beq.n	801b6c6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	8b5b      	ldrh	r3, [r3, #26]
 801b692:	f043 0310 	orr.w	r3, r3, #16
 801b696:	b29a      	uxth	r2, r3
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d005      	beq.n	801b6ae <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801b6a2:	2101      	movs	r1, #1
 801b6a4:	68f8      	ldr	r0, [r7, #12]
 801b6a6:	f7ff fe5d 	bl	801b364 <tcp_close_shutdown>
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	e023      	b.n	801b6f6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d007      	beq.n	801b6c6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f7ff fa52 	bl	801ab64 <pbuf_free>
      pcb->refused_data = NULL;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d013      	beq.n	801b6f4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	7d1b      	ldrb	r3, [r3, #20]
 801b6d0:	2b04      	cmp	r3, #4
 801b6d2:	dc02      	bgt.n	801b6da <tcp_shutdown+0x86>
 801b6d4:	2b03      	cmp	r3, #3
 801b6d6:	da02      	bge.n	801b6de <tcp_shutdown+0x8a>
 801b6d8:	e009      	b.n	801b6ee <tcp_shutdown+0x9a>
 801b6da:	2b07      	cmp	r3, #7
 801b6dc:	d107      	bne.n	801b6ee <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	b2db      	uxtb	r3, r3
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	68f8      	ldr	r0, [r7, #12]
 801b6e6:	f7ff fe3d 	bl	801b364 <tcp_close_shutdown>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	e003      	b.n	801b6f6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801b6ee:	f06f 030a 	mvn.w	r3, #10
 801b6f2:	e000      	b.n	801b6f6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801b6f4:	2300      	movs	r3, #0
}
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	3710      	adds	r7, #16
 801b6fa:	46bd      	mov	sp, r7
 801b6fc:	bd80      	pop	{r7, pc}
 801b6fe:	bf00      	nop
 801b700:	08026aa4 	.word	0x08026aa4
 801b704:	08026c10 	.word	0x08026c10
 801b708:	08026b2c 	.word	0x08026b2c

0801b70c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b08e      	sub	sp, #56	@ 0x38
 801b710:	af04      	add	r7, sp, #16
 801b712:	6078      	str	r0, [r7, #4]
 801b714:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d107      	bne.n	801b72c <tcp_abandon+0x20>
 801b71c:	4b52      	ldr	r3, [pc, #328]	@ (801b868 <tcp_abandon+0x15c>)
 801b71e:	f240 223d 	movw	r2, #573	@ 0x23d
 801b722:	4952      	ldr	r1, [pc, #328]	@ (801b86c <tcp_abandon+0x160>)
 801b724:	4852      	ldr	r0, [pc, #328]	@ (801b870 <tcp_abandon+0x164>)
 801b726:	f007 f8f7 	bl	8022918 <iprintf>
 801b72a:	e099      	b.n	801b860 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	7d1b      	ldrb	r3, [r3, #20]
 801b730:	2b01      	cmp	r3, #1
 801b732:	d106      	bne.n	801b742 <tcp_abandon+0x36>
 801b734:	4b4c      	ldr	r3, [pc, #304]	@ (801b868 <tcp_abandon+0x15c>)
 801b736:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801b73a:	494e      	ldr	r1, [pc, #312]	@ (801b874 <tcp_abandon+0x168>)
 801b73c:	484c      	ldr	r0, [pc, #304]	@ (801b870 <tcp_abandon+0x164>)
 801b73e:	f007 f8eb 	bl	8022918 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	7d1b      	ldrb	r3, [r3, #20]
 801b746:	2b0a      	cmp	r3, #10
 801b748:	d107      	bne.n	801b75a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b74a:	6879      	ldr	r1, [r7, #4]
 801b74c:	484a      	ldr	r0, [pc, #296]	@ (801b878 <tcp_abandon+0x16c>)
 801b74e:	f001 fa3f 	bl	801cbd0 <tcp_pcb_remove>
    tcp_free(pcb);
 801b752:	6878      	ldr	r0, [r7, #4]
 801b754:	f7ff fd54 	bl	801b200 <tcp_free>
 801b758:	e082      	b.n	801b860 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801b75a:	2300      	movs	r3, #0
 801b75c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801b75e:	2300      	movs	r3, #0
 801b760:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b766:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b76c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b774:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	691b      	ldr	r3, [r3, #16]
 801b77a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	7d1b      	ldrb	r3, [r3, #20]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d126      	bne.n	801b7d2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	8adb      	ldrh	r3, [r3, #22]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d02e      	beq.n	801b7ea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b78c:	4b3b      	ldr	r3, [pc, #236]	@ (801b87c <tcp_abandon+0x170>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	687a      	ldr	r2, [r7, #4]
 801b792:	429a      	cmp	r2, r3
 801b794:	d105      	bne.n	801b7a2 <tcp_abandon+0x96>
 801b796:	4b39      	ldr	r3, [pc, #228]	@ (801b87c <tcp_abandon+0x170>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	68db      	ldr	r3, [r3, #12]
 801b79c:	4a37      	ldr	r2, [pc, #220]	@ (801b87c <tcp_abandon+0x170>)
 801b79e:	6013      	str	r3, [r2, #0]
 801b7a0:	e013      	b.n	801b7ca <tcp_abandon+0xbe>
 801b7a2:	4b36      	ldr	r3, [pc, #216]	@ (801b87c <tcp_abandon+0x170>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	61fb      	str	r3, [r7, #28]
 801b7a8:	e00c      	b.n	801b7c4 <tcp_abandon+0xb8>
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	68db      	ldr	r3, [r3, #12]
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d104      	bne.n	801b7be <tcp_abandon+0xb2>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	68da      	ldr	r2, [r3, #12]
 801b7b8:	69fb      	ldr	r3, [r7, #28]
 801b7ba:	60da      	str	r2, [r3, #12]
 801b7bc:	e005      	b.n	801b7ca <tcp_abandon+0xbe>
 801b7be:	69fb      	ldr	r3, [r7, #28]
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	61fb      	str	r3, [r7, #28]
 801b7c4:	69fb      	ldr	r3, [r7, #28]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d1ef      	bne.n	801b7aa <tcp_abandon+0x9e>
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	60da      	str	r2, [r3, #12]
 801b7d0:	e00b      	b.n	801b7ea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801b7d2:	683b      	ldr	r3, [r7, #0]
 801b7d4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	8adb      	ldrh	r3, [r3, #22]
 801b7da:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b7dc:	6879      	ldr	r1, [r7, #4]
 801b7de:	4828      	ldr	r0, [pc, #160]	@ (801b880 <tcp_abandon+0x174>)
 801b7e0:	f001 f9f6 	bl	801cbd0 <tcp_pcb_remove>
 801b7e4:	4b27      	ldr	r3, [pc, #156]	@ (801b884 <tcp_abandon+0x178>)
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d004      	beq.n	801b7fc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f000 feca 	bl	801c590 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b800:	2b00      	cmp	r3, #0
 801b802:	d004      	beq.n	801b80e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b808:	4618      	mov	r0, r3
 801b80a:	f000 fec1 	bl	801c590 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b812:	2b00      	cmp	r3, #0
 801b814:	d004      	beq.n	801b820 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b81a:	4618      	mov	r0, r3
 801b81c:	f000 feb8 	bl	801c590 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b822:	2b00      	cmp	r3, #0
 801b824:	d00e      	beq.n	801b844 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b826:	6879      	ldr	r1, [r7, #4]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	3304      	adds	r3, #4
 801b82c:	687a      	ldr	r2, [r7, #4]
 801b82e:	8b12      	ldrh	r2, [r2, #24]
 801b830:	9202      	str	r2, [sp, #8]
 801b832:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b834:	9201      	str	r2, [sp, #4]
 801b836:	9300      	str	r3, [sp, #0]
 801b838:	460b      	mov	r3, r1
 801b83a:	697a      	ldr	r2, [r7, #20]
 801b83c:	69b9      	ldr	r1, [r7, #24]
 801b83e:	6878      	ldr	r0, [r7, #4]
 801b840:	f005 fb92 	bl	8020f68 <tcp_rst>
    }
    last_state = pcb->state;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	7d1b      	ldrb	r3, [r3, #20]
 801b848:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801b84a:	6878      	ldr	r0, [r7, #4]
 801b84c:	f7ff fcd8 	bl	801b200 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d004      	beq.n	801b860 <tcp_abandon+0x154>
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	f06f 010c 	mvn.w	r1, #12
 801b85c:	68f8      	ldr	r0, [r7, #12]
 801b85e:	4798      	blx	r3
  }
}
 801b860:	3728      	adds	r7, #40	@ 0x28
 801b862:	46bd      	mov	sp, r7
 801b864:	bd80      	pop	{r7, pc}
 801b866:	bf00      	nop
 801b868:	08026aa4 	.word	0x08026aa4
 801b86c:	08026c2c 	.word	0x08026c2c
 801b870:	08026b2c 	.word	0x08026b2c
 801b874:	08026c48 	.word	0x08026c48
 801b878:	20010028 	.word	0x20010028
 801b87c:	2001001c 	.word	0x2001001c
 801b880:	20010024 	.word	0x20010024
 801b884:	2001002c 	.word	0x2001002c

0801b888 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b082      	sub	sp, #8
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b890:	2101      	movs	r1, #1
 801b892:	6878      	ldr	r0, [r7, #4]
 801b894:	f7ff ff3a 	bl	801b70c <tcp_abandon>
}
 801b898:	bf00      	nop
 801b89a:	3708      	adds	r7, #8
 801b89c:	46bd      	mov	sp, r7
 801b89e:	bd80      	pop	{r7, pc}

0801b8a0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b8a0:	b580      	push	{r7, lr}
 801b8a2:	b088      	sub	sp, #32
 801b8a4:	af00      	add	r7, sp, #0
 801b8a6:	60f8      	str	r0, [r7, #12]
 801b8a8:	60b9      	str	r1, [r7, #8]
 801b8aa:	4613      	mov	r3, r2
 801b8ac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801b8ae:	2304      	movs	r3, #4
 801b8b0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d101      	bne.n	801b8bc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801b8b8:	4b3e      	ldr	r3, [pc, #248]	@ (801b9b4 <tcp_bind+0x114>)
 801b8ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d109      	bne.n	801b8d6 <tcp_bind+0x36>
 801b8c2:	4b3d      	ldr	r3, [pc, #244]	@ (801b9b8 <tcp_bind+0x118>)
 801b8c4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801b8c8:	493c      	ldr	r1, [pc, #240]	@ (801b9bc <tcp_bind+0x11c>)
 801b8ca:	483d      	ldr	r0, [pc, #244]	@ (801b9c0 <tcp_bind+0x120>)
 801b8cc:	f007 f824 	bl	8022918 <iprintf>
 801b8d0:	f06f 030f 	mvn.w	r3, #15
 801b8d4:	e06a      	b.n	801b9ac <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	7d1b      	ldrb	r3, [r3, #20]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d009      	beq.n	801b8f2 <tcp_bind+0x52>
 801b8de:	4b36      	ldr	r3, [pc, #216]	@ (801b9b8 <tcp_bind+0x118>)
 801b8e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b8e4:	4937      	ldr	r1, [pc, #220]	@ (801b9c4 <tcp_bind+0x124>)
 801b8e6:	4836      	ldr	r0, [pc, #216]	@ (801b9c0 <tcp_bind+0x120>)
 801b8e8:	f007 f816 	bl	8022918 <iprintf>
 801b8ec:	f06f 0305 	mvn.w	r3, #5
 801b8f0:	e05c      	b.n	801b9ac <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b8f2:	88fb      	ldrh	r3, [r7, #6]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d109      	bne.n	801b90c <tcp_bind+0x6c>
    port = tcp_new_port();
 801b8f8:	f000 f9e0 	bl	801bcbc <tcp_new_port>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b900:	88fb      	ldrh	r3, [r7, #6]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d135      	bne.n	801b972 <tcp_bind+0xd2>
      return ERR_BUF;
 801b906:	f06f 0301 	mvn.w	r3, #1
 801b90a:	e04f      	b.n	801b9ac <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b90c:	2300      	movs	r3, #0
 801b90e:	61fb      	str	r3, [r7, #28]
 801b910:	e02b      	b.n	801b96a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b912:	4a2d      	ldr	r2, [pc, #180]	@ (801b9c8 <tcp_bind+0x128>)
 801b914:	69fb      	ldr	r3, [r7, #28]
 801b916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	61bb      	str	r3, [r7, #24]
 801b91e:	e01e      	b.n	801b95e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b920:	69bb      	ldr	r3, [r7, #24]
 801b922:	8adb      	ldrh	r3, [r3, #22]
 801b924:	88fa      	ldrh	r2, [r7, #6]
 801b926:	429a      	cmp	r2, r3
 801b928:	d116      	bne.n	801b958 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b92a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d010      	beq.n	801b952 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b930:	69bb      	ldr	r3, [r7, #24]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d00c      	beq.n	801b952 <tcp_bind+0xb2>
 801b938:	68bb      	ldr	r3, [r7, #8]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d009      	beq.n	801b952 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d005      	beq.n	801b952 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b946:	69bb      	ldr	r3, [r7, #24]
 801b948:	681a      	ldr	r2, [r3, #0]
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b94e:	429a      	cmp	r2, r3
 801b950:	d102      	bne.n	801b958 <tcp_bind+0xb8>
              return ERR_USE;
 801b952:	f06f 0307 	mvn.w	r3, #7
 801b956:	e029      	b.n	801b9ac <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b958:	69bb      	ldr	r3, [r7, #24]
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	61bb      	str	r3, [r7, #24]
 801b95e:	69bb      	ldr	r3, [r7, #24]
 801b960:	2b00      	cmp	r3, #0
 801b962:	d1dd      	bne.n	801b920 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	3301      	adds	r3, #1
 801b968:	61fb      	str	r3, [r7, #28]
 801b96a:	69fa      	ldr	r2, [r7, #28]
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	429a      	cmp	r2, r3
 801b970:	dbcf      	blt.n	801b912 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d00c      	beq.n	801b992 <tcp_bind+0xf2>
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d008      	beq.n	801b992 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b980:	68bb      	ldr	r3, [r7, #8]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d002      	beq.n	801b98c <tcp_bind+0xec>
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	e000      	b.n	801b98e <tcp_bind+0xee>
 801b98c:	2300      	movs	r3, #0
 801b98e:	68fa      	ldr	r2, [r7, #12]
 801b990:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	88fa      	ldrh	r2, [r7, #6]
 801b996:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b998:	4b0c      	ldr	r3, [pc, #48]	@ (801b9cc <tcp_bind+0x12c>)
 801b99a:	681a      	ldr	r2, [r3, #0]
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	60da      	str	r2, [r3, #12]
 801b9a0:	4a0a      	ldr	r2, [pc, #40]	@ (801b9cc <tcp_bind+0x12c>)
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	6013      	str	r3, [r2, #0]
 801b9a6:	f005 fca1 	bl	80212ec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b9aa:	2300      	movs	r3, #0
}
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	3720      	adds	r7, #32
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bd80      	pop	{r7, pc}
 801b9b4:	08028bec 	.word	0x08028bec
 801b9b8:	08026aa4 	.word	0x08026aa4
 801b9bc:	08026c7c 	.word	0x08026c7c
 801b9c0:	08026b2c 	.word	0x08026b2c
 801b9c4:	08026c94 	.word	0x08026c94
 801b9c8:	08028cec 	.word	0x08028cec
 801b9cc:	2001001c 	.word	0x2001001c

0801b9d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	4613      	mov	r3, r2
 801b9dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b9de:	68bb      	ldr	r3, [r7, #8]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d106      	bne.n	801b9f2 <tcp_accept_null+0x22>
 801b9e4:	4b07      	ldr	r3, [pc, #28]	@ (801ba04 <tcp_accept_null+0x34>)
 801b9e6:	f240 320f 	movw	r2, #783	@ 0x30f
 801b9ea:	4907      	ldr	r1, [pc, #28]	@ (801ba08 <tcp_accept_null+0x38>)
 801b9ec:	4807      	ldr	r0, [pc, #28]	@ (801ba0c <tcp_accept_null+0x3c>)
 801b9ee:	f006 ff93 	bl	8022918 <iprintf>

  tcp_abort(pcb);
 801b9f2:	68b8      	ldr	r0, [r7, #8]
 801b9f4:	f7ff ff48 	bl	801b888 <tcp_abort>

  return ERR_ABRT;
 801b9f8:	f06f 030c 	mvn.w	r3, #12
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3710      	adds	r7, #16
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	08026aa4 	.word	0x08026aa4
 801ba08:	08026cbc 	.word	0x08026cbc
 801ba0c:	08026b2c 	.word	0x08026b2c

0801ba10 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b088      	sub	sp, #32
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	60f8      	str	r0, [r7, #12]
 801ba18:	460b      	mov	r3, r1
 801ba1a:	607a      	str	r2, [r7, #4]
 801ba1c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801ba1e:	2300      	movs	r3, #0
 801ba20:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d109      	bne.n	801ba3c <tcp_listen_with_backlog_and_err+0x2c>
 801ba28:	4b47      	ldr	r3, [pc, #284]	@ (801bb48 <tcp_listen_with_backlog_and_err+0x138>)
 801ba2a:	f240 3259 	movw	r2, #857	@ 0x359
 801ba2e:	4947      	ldr	r1, [pc, #284]	@ (801bb4c <tcp_listen_with_backlog_and_err+0x13c>)
 801ba30:	4847      	ldr	r0, [pc, #284]	@ (801bb50 <tcp_listen_with_backlog_and_err+0x140>)
 801ba32:	f006 ff71 	bl	8022918 <iprintf>
 801ba36:	23f0      	movs	r3, #240	@ 0xf0
 801ba38:	76fb      	strb	r3, [r7, #27]
 801ba3a:	e079      	b.n	801bb30 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	7d1b      	ldrb	r3, [r3, #20]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d009      	beq.n	801ba58 <tcp_listen_with_backlog_and_err+0x48>
 801ba44:	4b40      	ldr	r3, [pc, #256]	@ (801bb48 <tcp_listen_with_backlog_and_err+0x138>)
 801ba46:	f240 325a 	movw	r2, #858	@ 0x35a
 801ba4a:	4942      	ldr	r1, [pc, #264]	@ (801bb54 <tcp_listen_with_backlog_and_err+0x144>)
 801ba4c:	4840      	ldr	r0, [pc, #256]	@ (801bb50 <tcp_listen_with_backlog_and_err+0x140>)
 801ba4e:	f006 ff63 	bl	8022918 <iprintf>
 801ba52:	23f1      	movs	r3, #241	@ 0xf1
 801ba54:	76fb      	strb	r3, [r7, #27]
 801ba56:	e06b      	b.n	801bb30 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	7d1b      	ldrb	r3, [r3, #20]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d104      	bne.n	801ba6a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801ba64:	23f7      	movs	r3, #247	@ 0xf7
 801ba66:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ba68:	e062      	b.n	801bb30 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801ba6a:	2002      	movs	r0, #2
 801ba6c:	f7fe f90c 	bl	8019c88 <memp_malloc>
 801ba70:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801ba72:	69fb      	ldr	r3, [r7, #28]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d102      	bne.n	801ba7e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801ba78:	23ff      	movs	r3, #255	@ 0xff
 801ba7a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ba7c:	e058      	b.n	801bb30 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	691a      	ldr	r2, [r3, #16]
 801ba82:	69fb      	ldr	r3, [r7, #28]
 801ba84:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	8ada      	ldrh	r2, [r3, #22]
 801ba8a:	69fb      	ldr	r3, [r7, #28]
 801ba8c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801ba8e:	69fb      	ldr	r3, [r7, #28]
 801ba90:	2201      	movs	r2, #1
 801ba92:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	7d5a      	ldrb	r2, [r3, #21]
 801ba98:	69fb      	ldr	r3, [r7, #28]
 801ba9a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	7a5a      	ldrb	r2, [r3, #9]
 801baa0:	69fb      	ldr	r3, [r7, #28]
 801baa2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801baa4:	69fb      	ldr	r3, [r7, #28]
 801baa6:	2200      	movs	r2, #0
 801baa8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	7ada      	ldrb	r2, [r3, #11]
 801baae:	69fb      	ldr	r3, [r7, #28]
 801bab0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	7a9a      	ldrb	r2, [r3, #10]
 801bab6:	69fb      	ldr	r3, [r7, #28]
 801bab8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	681a      	ldr	r2, [r3, #0]
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	8adb      	ldrh	r3, [r3, #22]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d021      	beq.n	801bb0e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801baca:	4b23      	ldr	r3, [pc, #140]	@ (801bb58 <tcp_listen_with_backlog_and_err+0x148>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	429a      	cmp	r2, r3
 801bad2:	d105      	bne.n	801bae0 <tcp_listen_with_backlog_and_err+0xd0>
 801bad4:	4b20      	ldr	r3, [pc, #128]	@ (801bb58 <tcp_listen_with_backlog_and_err+0x148>)
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	68db      	ldr	r3, [r3, #12]
 801bada:	4a1f      	ldr	r2, [pc, #124]	@ (801bb58 <tcp_listen_with_backlog_and_err+0x148>)
 801badc:	6013      	str	r3, [r2, #0]
 801bade:	e013      	b.n	801bb08 <tcp_listen_with_backlog_and_err+0xf8>
 801bae0:	4b1d      	ldr	r3, [pc, #116]	@ (801bb58 <tcp_listen_with_backlog_and_err+0x148>)
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	617b      	str	r3, [r7, #20]
 801bae6:	e00c      	b.n	801bb02 <tcp_listen_with_backlog_and_err+0xf2>
 801bae8:	697b      	ldr	r3, [r7, #20]
 801baea:	68db      	ldr	r3, [r3, #12]
 801baec:	68fa      	ldr	r2, [r7, #12]
 801baee:	429a      	cmp	r2, r3
 801baf0:	d104      	bne.n	801bafc <tcp_listen_with_backlog_and_err+0xec>
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	68da      	ldr	r2, [r3, #12]
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	60da      	str	r2, [r3, #12]
 801bafa:	e005      	b.n	801bb08 <tcp_listen_with_backlog_and_err+0xf8>
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	68db      	ldr	r3, [r3, #12]
 801bb00:	617b      	str	r3, [r7, #20]
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d1ef      	bne.n	801bae8 <tcp_listen_with_backlog_and_err+0xd8>
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801bb0e:	68f8      	ldr	r0, [r7, #12]
 801bb10:	f7ff fb76 	bl	801b200 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801bb14:	69fb      	ldr	r3, [r7, #28]
 801bb16:	4a11      	ldr	r2, [pc, #68]	@ (801bb5c <tcp_listen_with_backlog_and_err+0x14c>)
 801bb18:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801bb1a:	4b11      	ldr	r3, [pc, #68]	@ (801bb60 <tcp_listen_with_backlog_and_err+0x150>)
 801bb1c:	681a      	ldr	r2, [r3, #0]
 801bb1e:	69fb      	ldr	r3, [r7, #28]
 801bb20:	60da      	str	r2, [r3, #12]
 801bb22:	4a0f      	ldr	r2, [pc, #60]	@ (801bb60 <tcp_listen_with_backlog_and_err+0x150>)
 801bb24:	69fb      	ldr	r3, [r7, #28]
 801bb26:	6013      	str	r3, [r2, #0]
 801bb28:	f005 fbe0 	bl	80212ec <tcp_timer_needed>
  res = ERR_OK;
 801bb2c:	2300      	movs	r3, #0
 801bb2e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d002      	beq.n	801bb3c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	7efa      	ldrb	r2, [r7, #27]
 801bb3a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801bb3c:	69fb      	ldr	r3, [r7, #28]
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	3720      	adds	r7, #32
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	08026aa4 	.word	0x08026aa4
 801bb4c:	08026cdc 	.word	0x08026cdc
 801bb50:	08026b2c 	.word	0x08026b2c
 801bb54:	08026d0c 	.word	0x08026d0c
 801bb58:	2001001c 	.word	0x2001001c
 801bb5c:	0801b9d1 	.word	0x0801b9d1
 801bb60:	20010020 	.word	0x20010020

0801bb64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b084      	sub	sp, #16
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d106      	bne.n	801bb80 <tcp_update_rcv_ann_wnd+0x1c>
 801bb72:	4b25      	ldr	r3, [pc, #148]	@ (801bc08 <tcp_update_rcv_ann_wnd+0xa4>)
 801bb74:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801bb78:	4924      	ldr	r1, [pc, #144]	@ (801bc0c <tcp_update_rcv_ann_wnd+0xa8>)
 801bb7a:	4825      	ldr	r0, [pc, #148]	@ (801bc10 <tcp_update_rcv_ann_wnd+0xac>)
 801bb7c:	f006 fecc 	bl	8022918 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb84:	687a      	ldr	r2, [r7, #4]
 801bb86:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801bb88:	4413      	add	r3, r2
 801bb8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb90:	687a      	ldr	r2, [r7, #4]
 801bb92:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801bb94:	f640 3168 	movw	r1, #2920	@ 0xb68
 801bb98:	428a      	cmp	r2, r1
 801bb9a:	bf28      	it	cs
 801bb9c:	460a      	movcs	r2, r1
 801bb9e:	b292      	uxth	r2, r2
 801bba0:	4413      	add	r3, r2
 801bba2:	68fa      	ldr	r2, [r7, #12]
 801bba4:	1ad3      	subs	r3, r2, r3
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	db08      	blt.n	801bbbc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbb6:	68fa      	ldr	r2, [r7, #12]
 801bbb8:	1ad3      	subs	r3, r2, r3
 801bbba:	e020      	b.n	801bbfe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbc4:	1ad3      	subs	r3, r2, r3
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	dd03      	ble.n	801bbd2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	2200      	movs	r2, #0
 801bbce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801bbd0:	e014      	b.n	801bbfc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbda:	1ad3      	subs	r3, r2, r3
 801bbdc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801bbde:	68bb      	ldr	r3, [r7, #8]
 801bbe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bbe4:	d306      	bcc.n	801bbf4 <tcp_update_rcv_ann_wnd+0x90>
 801bbe6:	4b08      	ldr	r3, [pc, #32]	@ (801bc08 <tcp_update_rcv_ann_wnd+0xa4>)
 801bbe8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801bbec:	4909      	ldr	r1, [pc, #36]	@ (801bc14 <tcp_update_rcv_ann_wnd+0xb0>)
 801bbee:	4808      	ldr	r0, [pc, #32]	@ (801bc10 <tcp_update_rcv_ann_wnd+0xac>)
 801bbf0:	f006 fe92 	bl	8022918 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	b29a      	uxth	r2, r3
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801bbfc:	2300      	movs	r3, #0
  }
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3710      	adds	r7, #16
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	08026aa4 	.word	0x08026aa4
 801bc0c:	08026d44 	.word	0x08026d44
 801bc10:	08026b2c 	.word	0x08026b2c
 801bc14:	08026d68 	.word	0x08026d68

0801bc18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b084      	sub	sp, #16
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
 801bc20:	460b      	mov	r3, r1
 801bc22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d107      	bne.n	801bc3a <tcp_recved+0x22>
 801bc2a:	4b20      	ldr	r3, [pc, #128]	@ (801bcac <tcp_recved+0x94>)
 801bc2c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801bc30:	491f      	ldr	r1, [pc, #124]	@ (801bcb0 <tcp_recved+0x98>)
 801bc32:	4820      	ldr	r0, [pc, #128]	@ (801bcb4 <tcp_recved+0x9c>)
 801bc34:	f006 fe70 	bl	8022918 <iprintf>
 801bc38:	e034      	b.n	801bca4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	7d1b      	ldrb	r3, [r3, #20]
 801bc3e:	2b01      	cmp	r3, #1
 801bc40:	d106      	bne.n	801bc50 <tcp_recved+0x38>
 801bc42:	4b1a      	ldr	r3, [pc, #104]	@ (801bcac <tcp_recved+0x94>)
 801bc44:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801bc48:	491b      	ldr	r1, [pc, #108]	@ (801bcb8 <tcp_recved+0xa0>)
 801bc4a:	481a      	ldr	r0, [pc, #104]	@ (801bcb4 <tcp_recved+0x9c>)
 801bc4c:	f006 fe64 	bl	8022918 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801bc54:	887b      	ldrh	r3, [r7, #2]
 801bc56:	4413      	add	r3, r2
 801bc58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801bc5a:	89fb      	ldrh	r3, [r7, #14]
 801bc5c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d804      	bhi.n	801bc6e <tcp_recved+0x56>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bc68:	89fa      	ldrh	r2, [r7, #14]
 801bc6a:	429a      	cmp	r2, r3
 801bc6c:	d204      	bcs.n	801bc78 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801bc74:	851a      	strh	r2, [r3, #40]	@ 0x28
 801bc76:	e002      	b.n	801bc7e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	89fa      	ldrh	r2, [r7, #14]
 801bc7c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801bc7e:	6878      	ldr	r0, [r7, #4]
 801bc80:	f7ff ff70 	bl	801bb64 <tcp_update_rcv_ann_wnd>
 801bc84:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	d909      	bls.n	801bca4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	8b5b      	ldrh	r3, [r3, #26]
 801bc94:	f043 0302 	orr.w	r3, r3, #2
 801bc98:	b29a      	uxth	r2, r3
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f004 fbae 	bl	8020400 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801bca4:	3710      	adds	r7, #16
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}
 801bcaa:	bf00      	nop
 801bcac:	08026aa4 	.word	0x08026aa4
 801bcb0:	08026d84 	.word	0x08026d84
 801bcb4:	08026b2c 	.word	0x08026b2c
 801bcb8:	08026d9c 	.word	0x08026d9c

0801bcbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801bcbc:	b480      	push	{r7}
 801bcbe:	b083      	sub	sp, #12
 801bcc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801bcc6:	4b1e      	ldr	r3, [pc, #120]	@ (801bd40 <tcp_new_port+0x84>)
 801bcc8:	881b      	ldrh	r3, [r3, #0]
 801bcca:	3301      	adds	r3, #1
 801bccc:	b29a      	uxth	r2, r3
 801bcce:	4b1c      	ldr	r3, [pc, #112]	@ (801bd40 <tcp_new_port+0x84>)
 801bcd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801bcd2:	4b1b      	ldr	r3, [pc, #108]	@ (801bd40 <tcp_new_port+0x84>)
 801bcd4:	881b      	ldrh	r3, [r3, #0]
 801bcd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bcda:	4293      	cmp	r3, r2
 801bcdc:	d103      	bne.n	801bce6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801bcde:	4b18      	ldr	r3, [pc, #96]	@ (801bd40 <tcp_new_port+0x84>)
 801bce0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801bce4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801bce6:	2300      	movs	r3, #0
 801bce8:	71fb      	strb	r3, [r7, #7]
 801bcea:	e01e      	b.n	801bd2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801bcec:	79fb      	ldrb	r3, [r7, #7]
 801bcee:	4a15      	ldr	r2, [pc, #84]	@ (801bd44 <tcp_new_port+0x88>)
 801bcf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	603b      	str	r3, [r7, #0]
 801bcf8:	e011      	b.n	801bd1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	8ada      	ldrh	r2, [r3, #22]
 801bcfe:	4b10      	ldr	r3, [pc, #64]	@ (801bd40 <tcp_new_port+0x84>)
 801bd00:	881b      	ldrh	r3, [r3, #0]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d108      	bne.n	801bd18 <tcp_new_port+0x5c>
        n++;
 801bd06:	88bb      	ldrh	r3, [r7, #4]
 801bd08:	3301      	adds	r3, #1
 801bd0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801bd0c:	88bb      	ldrh	r3, [r7, #4]
 801bd0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bd12:	d3d8      	bcc.n	801bcc6 <tcp_new_port+0xa>
          return 0;
 801bd14:	2300      	movs	r3, #0
 801bd16:	e00d      	b.n	801bd34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	68db      	ldr	r3, [r3, #12]
 801bd1c:	603b      	str	r3, [r7, #0]
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d1ea      	bne.n	801bcfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801bd24:	79fb      	ldrb	r3, [r7, #7]
 801bd26:	3301      	adds	r3, #1
 801bd28:	71fb      	strb	r3, [r7, #7]
 801bd2a:	79fb      	ldrb	r3, [r7, #7]
 801bd2c:	2b03      	cmp	r3, #3
 801bd2e:	d9dd      	bls.n	801bcec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801bd30:	4b03      	ldr	r3, [pc, #12]	@ (801bd40 <tcp_new_port+0x84>)
 801bd32:	881b      	ldrh	r3, [r3, #0]
}
 801bd34:	4618      	mov	r0, r3
 801bd36:	370c      	adds	r7, #12
 801bd38:	46bd      	mov	sp, r7
 801bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd3e:	4770      	bx	lr
 801bd40:	20000038 	.word	0x20000038
 801bd44:	08028cec 	.word	0x08028cec

0801bd48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801bd48:	b5b0      	push	{r4, r5, r7, lr}
 801bd4a:	b090      	sub	sp, #64	@ 0x40
 801bd4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801bd4e:	2300      	movs	r3, #0
 801bd50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801bd54:	4b95      	ldr	r3, [pc, #596]	@ (801bfac <tcp_slowtmr+0x264>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	3301      	adds	r3, #1
 801bd5a:	4a94      	ldr	r2, [pc, #592]	@ (801bfac <tcp_slowtmr+0x264>)
 801bd5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801bd5e:	4b94      	ldr	r3, [pc, #592]	@ (801bfb0 <tcp_slowtmr+0x268>)
 801bd60:	781b      	ldrb	r3, [r3, #0]
 801bd62:	3301      	adds	r3, #1
 801bd64:	b2da      	uxtb	r2, r3
 801bd66:	4b92      	ldr	r3, [pc, #584]	@ (801bfb0 <tcp_slowtmr+0x268>)
 801bd68:	701a      	strb	r2, [r3, #0]
 801bd6a:	e000      	b.n	801bd6e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801bd6c:	bf00      	nop
  prev = NULL;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801bd72:	4b90      	ldr	r3, [pc, #576]	@ (801bfb4 <tcp_slowtmr+0x26c>)
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801bd78:	e29d      	b.n	801c2b6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd7c:	7d1b      	ldrb	r3, [r3, #20]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d106      	bne.n	801bd90 <tcp_slowtmr+0x48>
 801bd82:	4b8d      	ldr	r3, [pc, #564]	@ (801bfb8 <tcp_slowtmr+0x270>)
 801bd84:	f240 42be 	movw	r2, #1214	@ 0x4be
 801bd88:	498c      	ldr	r1, [pc, #560]	@ (801bfbc <tcp_slowtmr+0x274>)
 801bd8a:	488d      	ldr	r0, [pc, #564]	@ (801bfc0 <tcp_slowtmr+0x278>)
 801bd8c:	f006 fdc4 	bl	8022918 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd92:	7d1b      	ldrb	r3, [r3, #20]
 801bd94:	2b01      	cmp	r3, #1
 801bd96:	d106      	bne.n	801bda6 <tcp_slowtmr+0x5e>
 801bd98:	4b87      	ldr	r3, [pc, #540]	@ (801bfb8 <tcp_slowtmr+0x270>)
 801bd9a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801bd9e:	4989      	ldr	r1, [pc, #548]	@ (801bfc4 <tcp_slowtmr+0x27c>)
 801bda0:	4887      	ldr	r0, [pc, #540]	@ (801bfc0 <tcp_slowtmr+0x278>)
 801bda2:	f006 fdb9 	bl	8022918 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bda8:	7d1b      	ldrb	r3, [r3, #20]
 801bdaa:	2b0a      	cmp	r3, #10
 801bdac:	d106      	bne.n	801bdbc <tcp_slowtmr+0x74>
 801bdae:	4b82      	ldr	r3, [pc, #520]	@ (801bfb8 <tcp_slowtmr+0x270>)
 801bdb0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801bdb4:	4984      	ldr	r1, [pc, #528]	@ (801bfc8 <tcp_slowtmr+0x280>)
 801bdb6:	4882      	ldr	r0, [pc, #520]	@ (801bfc0 <tcp_slowtmr+0x278>)
 801bdb8:	f006 fdae 	bl	8022918 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdbe:	7f9a      	ldrb	r2, [r3, #30]
 801bdc0:	4b7b      	ldr	r3, [pc, #492]	@ (801bfb0 <tcp_slowtmr+0x268>)
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	429a      	cmp	r2, r3
 801bdc6:	d105      	bne.n	801bdd4 <tcp_slowtmr+0x8c>
      prev = pcb;
 801bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdce:	68db      	ldr	r3, [r3, #12]
 801bdd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801bdd2:	e270      	b.n	801c2b6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801bdd4:	4b76      	ldr	r3, [pc, #472]	@ (801bfb0 <tcp_slowtmr+0x268>)
 801bdd6:	781a      	ldrb	r2, [r3, #0]
 801bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdda:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801bddc:	2300      	movs	r3, #0
 801bdde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801bde2:	2300      	movs	r3, #0
 801bde4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdea:	7d1b      	ldrb	r3, [r3, #20]
 801bdec:	2b02      	cmp	r3, #2
 801bdee:	d10a      	bne.n	801be06 <tcp_slowtmr+0xbe>
 801bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bdf6:	2b05      	cmp	r3, #5
 801bdf8:	d905      	bls.n	801be06 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801bdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bdfe:	3301      	adds	r3, #1
 801be00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be04:	e11e      	b.n	801c044 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801be06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be0c:	2b0b      	cmp	r3, #11
 801be0e:	d905      	bls.n	801be1c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801be10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801be14:	3301      	adds	r3, #1
 801be16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be1a:	e113      	b.n	801c044 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801be22:	2b00      	cmp	r3, #0
 801be24:	d075      	beq.n	801bf12 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801be26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d006      	beq.n	801be3c <tcp_slowtmr+0xf4>
 801be2e:	4b62      	ldr	r3, [pc, #392]	@ (801bfb8 <tcp_slowtmr+0x270>)
 801be30:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801be34:	4965      	ldr	r1, [pc, #404]	@ (801bfcc <tcp_slowtmr+0x284>)
 801be36:	4862      	ldr	r0, [pc, #392]	@ (801bfc0 <tcp_slowtmr+0x278>)
 801be38:	f006 fd6e 	bl	8022918 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801be40:	2b00      	cmp	r3, #0
 801be42:	d106      	bne.n	801be52 <tcp_slowtmr+0x10a>
 801be44:	4b5c      	ldr	r3, [pc, #368]	@ (801bfb8 <tcp_slowtmr+0x270>)
 801be46:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801be4a:	4961      	ldr	r1, [pc, #388]	@ (801bfd0 <tcp_slowtmr+0x288>)
 801be4c:	485c      	ldr	r0, [pc, #368]	@ (801bfc0 <tcp_slowtmr+0x278>)
 801be4e:	f006 fd63 	bl	8022918 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be54:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801be58:	2b0b      	cmp	r3, #11
 801be5a:	d905      	bls.n	801be68 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801be5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801be60:	3301      	adds	r3, #1
 801be62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be66:	e0ed      	b.n	801c044 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801be68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801be6e:	3b01      	subs	r3, #1
 801be70:	4a58      	ldr	r2, [pc, #352]	@ (801bfd4 <tcp_slowtmr+0x28c>)
 801be72:	5cd3      	ldrb	r3, [r2, r3]
 801be74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801be7c:	7c7a      	ldrb	r2, [r7, #17]
 801be7e:	429a      	cmp	r2, r3
 801be80:	d907      	bls.n	801be92 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801be82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801be88:	3301      	adds	r3, #1
 801be8a:	b2da      	uxtb	r2, r3
 801be8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be8e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801be92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801be98:	7c7a      	ldrb	r2, [r7, #17]
 801be9a:	429a      	cmp	r2, r3
 801be9c:	f200 80d2 	bhi.w	801c044 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801bea0:	2301      	movs	r3, #1
 801bea2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d108      	bne.n	801bec0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801beae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801beb0:	f005 f94e 	bl	8021150 <tcp_zero_window_probe>
 801beb4:	4603      	mov	r3, r0
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d014      	beq.n	801bee4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801beba:	2300      	movs	r3, #0
 801bebc:	623b      	str	r3, [r7, #32]
 801bebe:	e011      	b.n	801bee4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801bec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801bec6:	4619      	mov	r1, r3
 801bec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801beca:	f004 f813 	bl	801fef4 <tcp_split_unsent_seg>
 801bece:	4603      	mov	r3, r0
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d107      	bne.n	801bee4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801bed4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bed6:	f004 fa93 	bl	8020400 <tcp_output>
 801beda:	4603      	mov	r3, r0
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d101      	bne.n	801bee4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801bee0:	2300      	movs	r3, #0
 801bee2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801bee4:	6a3b      	ldr	r3, [r7, #32]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	f000 80ac 	beq.w	801c044 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beee:	2200      	movs	r2, #0
 801bef0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bef6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801befa:	2b06      	cmp	r3, #6
 801befc:	f200 80a2 	bhi.w	801c044 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf02:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801bf06:	3301      	adds	r3, #1
 801bf08:	b2da      	uxtb	r2, r3
 801bf0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf0c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801bf10:	e098      	b.n	801c044 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801bf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	db0f      	blt.n	801bf3c <tcp_slowtmr+0x1f4>
 801bf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf22:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801bf26:	4293      	cmp	r3, r2
 801bf28:	d008      	beq.n	801bf3c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801bf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	3301      	adds	r3, #1
 801bf34:	b29b      	uxth	r3, r3
 801bf36:	b21a      	sxth	r2, r3
 801bf38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf3a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801bf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf3e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801bf42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf44:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801bf48:	429a      	cmp	r2, r3
 801bf4a:	db7b      	blt.n	801c044 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801bf4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bf4e:	f004 fd4b 	bl	80209e8 <tcp_rexmit_rto_prepare>
 801bf52:	4603      	mov	r3, r0
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d007      	beq.n	801bf68 <tcp_slowtmr+0x220>
 801bf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d171      	bne.n	801c044 <tcp_slowtmr+0x2fc>
 801bf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d06d      	beq.n	801c044 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf6a:	7d1b      	ldrb	r3, [r3, #20]
 801bf6c:	2b02      	cmp	r3, #2
 801bf6e:	d03a      	beq.n	801bfe6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bf76:	2b0c      	cmp	r3, #12
 801bf78:	bf28      	it	cs
 801bf7a:	230c      	movcs	r3, #12
 801bf7c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801bf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801bf84:	10db      	asrs	r3, r3, #3
 801bf86:	b21b      	sxth	r3, r3
 801bf88:	461a      	mov	r2, r3
 801bf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801bf90:	4413      	add	r3, r2
 801bf92:	7efa      	ldrb	r2, [r7, #27]
 801bf94:	4910      	ldr	r1, [pc, #64]	@ (801bfd8 <tcp_slowtmr+0x290>)
 801bf96:	5c8a      	ldrb	r2, [r1, r2]
 801bf98:	4093      	lsls	r3, r2
 801bf9a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801bfa2:	4293      	cmp	r3, r2
 801bfa4:	dc1a      	bgt.n	801bfdc <tcp_slowtmr+0x294>
 801bfa6:	697b      	ldr	r3, [r7, #20]
 801bfa8:	b21a      	sxth	r2, r3
 801bfaa:	e019      	b.n	801bfe0 <tcp_slowtmr+0x298>
 801bfac:	20010018 	.word	0x20010018
 801bfb0:	2001002e 	.word	0x2001002e
 801bfb4:	20010024 	.word	0x20010024
 801bfb8:	08026aa4 	.word	0x08026aa4
 801bfbc:	08026e2c 	.word	0x08026e2c
 801bfc0:	08026b2c 	.word	0x08026b2c
 801bfc4:	08026e58 	.word	0x08026e58
 801bfc8:	08026e84 	.word	0x08026e84
 801bfcc:	08026eb4 	.word	0x08026eb4
 801bfd0:	08026ee8 	.word	0x08026ee8
 801bfd4:	08028ce4 	.word	0x08028ce4
 801bfd8:	08028cd4 	.word	0x08028cd4
 801bfdc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801bfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfe2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801bfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfe8:	2200      	movs	r2, #0
 801bfea:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801bfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801bff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bff4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801bff8:	4293      	cmp	r3, r2
 801bffa:	bf28      	it	cs
 801bffc:	4613      	movcs	r3, r2
 801bffe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801c000:	8a7b      	ldrh	r3, [r7, #18]
 801c002:	085b      	lsrs	r3, r3, #1
 801c004:	b29a      	uxth	r2, r3
 801c006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c008:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c00e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801c012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c016:	005b      	lsls	r3, r3, #1
 801c018:	b29b      	uxth	r3, r3
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d206      	bcs.n	801c02c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c022:	005b      	lsls	r3, r3, #1
 801c024:	b29a      	uxth	r2, r3
 801c026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c028:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c02e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801c030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c032:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c038:	2200      	movs	r2, #0
 801c03a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c03e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c040:	f004 fd42 	bl	8020ac8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801c044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c046:	7d1b      	ldrb	r3, [r3, #20]
 801c048:	2b06      	cmp	r3, #6
 801c04a:	d111      	bne.n	801c070 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801c04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c04e:	8b5b      	ldrh	r3, [r3, #26]
 801c050:	f003 0310 	and.w	r3, r3, #16
 801c054:	2b00      	cmp	r3, #0
 801c056:	d00b      	beq.n	801c070 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c058:	4b9c      	ldr	r3, [pc, #624]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c05a:	681a      	ldr	r2, [r3, #0]
 801c05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c05e:	6a1b      	ldr	r3, [r3, #32]
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	2b28      	cmp	r3, #40	@ 0x28
 801c064:	d904      	bls.n	801c070 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801c066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c06a:	3301      	adds	r3, #1
 801c06c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c072:	7a5b      	ldrb	r3, [r3, #9]
 801c074:	f003 0308 	and.w	r3, r3, #8
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d04a      	beq.n	801c112 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801c07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c07e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c080:	2b04      	cmp	r3, #4
 801c082:	d003      	beq.n	801c08c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801c084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c086:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801c088:	2b07      	cmp	r3, #7
 801c08a:	d142      	bne.n	801c112 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c08c:	4b8f      	ldr	r3, [pc, #572]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c08e:	681a      	ldr	r2, [r3, #0]
 801c090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c092:	6a1b      	ldr	r3, [r3, #32]
 801c094:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801c096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c098:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c09c:	4b8c      	ldr	r3, [pc, #560]	@ (801c2d0 <tcp_slowtmr+0x588>)
 801c09e:	440b      	add	r3, r1
 801c0a0:	498c      	ldr	r1, [pc, #560]	@ (801c2d4 <tcp_slowtmr+0x58c>)
 801c0a2:	fba1 1303 	umull	r1, r3, r1, r3
 801c0a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0a8:	429a      	cmp	r2, r3
 801c0aa:	d90a      	bls.n	801c0c2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801c0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801c0b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c0ba:	3301      	adds	r3, #1
 801c0bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c0c0:	e027      	b.n	801c112 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0c2:	4b82      	ldr	r3, [pc, #520]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c0c4:	681a      	ldr	r2, [r3, #0]
 801c0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0c8:	6a1b      	ldr	r3, [r3, #32]
 801c0ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801c0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0d4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c0d8:	4618      	mov	r0, r3
 801c0da:	4b7f      	ldr	r3, [pc, #508]	@ (801c2d8 <tcp_slowtmr+0x590>)
 801c0dc:	fb00 f303 	mul.w	r3, r0, r3
 801c0e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801c0e2:	497c      	ldr	r1, [pc, #496]	@ (801c2d4 <tcp_slowtmr+0x58c>)
 801c0e4:	fba1 1303 	umull	r1, r3, r1, r3
 801c0e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0ea:	429a      	cmp	r2, r3
 801c0ec:	d911      	bls.n	801c112 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801c0ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c0f0:	f004 ffee 	bl	80210d0 <tcp_keepalive>
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801c0fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d107      	bne.n	801c112 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801c102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c104:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c108:	3301      	adds	r3, #1
 801c10a:	b2da      	uxtb	r2, r3
 801c10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c10e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801c112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c116:	2b00      	cmp	r3, #0
 801c118:	d011      	beq.n	801c13e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801c11a:	4b6c      	ldr	r3, [pc, #432]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c120:	6a1b      	ldr	r3, [r3, #32]
 801c122:	1ad2      	subs	r2, r2, r3
 801c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c126:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801c12a:	4619      	mov	r1, r3
 801c12c:	460b      	mov	r3, r1
 801c12e:	005b      	lsls	r3, r3, #1
 801c130:	440b      	add	r3, r1
 801c132:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801c134:	429a      	cmp	r2, r3
 801c136:	d302      	bcc.n	801c13e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801c138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c13a:	f000 fead 	bl	801ce98 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c140:	7d1b      	ldrb	r3, [r3, #20]
 801c142:	2b03      	cmp	r3, #3
 801c144:	d10b      	bne.n	801c15e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c146:	4b61      	ldr	r3, [pc, #388]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c148:	681a      	ldr	r2, [r3, #0]
 801c14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c14c:	6a1b      	ldr	r3, [r3, #32]
 801c14e:	1ad3      	subs	r3, r2, r3
 801c150:	2b28      	cmp	r3, #40	@ 0x28
 801c152:	d904      	bls.n	801c15e <tcp_slowtmr+0x416>
        ++pcb_remove;
 801c154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c158:	3301      	adds	r3, #1
 801c15a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c160:	7d1b      	ldrb	r3, [r3, #20]
 801c162:	2b09      	cmp	r3, #9
 801c164:	d10b      	bne.n	801c17e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c166:	4b59      	ldr	r3, [pc, #356]	@ (801c2cc <tcp_slowtmr+0x584>)
 801c168:	681a      	ldr	r2, [r3, #0]
 801c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c16c:	6a1b      	ldr	r3, [r3, #32]
 801c16e:	1ad3      	subs	r3, r2, r3
 801c170:	2bf0      	cmp	r3, #240	@ 0xf0
 801c172:	d904      	bls.n	801c17e <tcp_slowtmr+0x436>
        ++pcb_remove;
 801c174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c178:	3301      	adds	r3, #1
 801c17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801c17e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c182:	2b00      	cmp	r3, #0
 801c184:	d060      	beq.n	801c248 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801c186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c18c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801c18e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c190:	f000 fcce 	bl	801cb30 <tcp_pcb_purge>
      if (prev != NULL) {
 801c194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c196:	2b00      	cmp	r3, #0
 801c198:	d010      	beq.n	801c1bc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c19a:	4b50      	ldr	r3, [pc, #320]	@ (801c2dc <tcp_slowtmr+0x594>)
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1a0:	429a      	cmp	r2, r3
 801c1a2:	d106      	bne.n	801c1b2 <tcp_slowtmr+0x46a>
 801c1a4:	4b4e      	ldr	r3, [pc, #312]	@ (801c2e0 <tcp_slowtmr+0x598>)
 801c1a6:	f240 526d 	movw	r2, #1389	@ 0x56d
 801c1aa:	494e      	ldr	r1, [pc, #312]	@ (801c2e4 <tcp_slowtmr+0x59c>)
 801c1ac:	484e      	ldr	r0, [pc, #312]	@ (801c2e8 <tcp_slowtmr+0x5a0>)
 801c1ae:	f006 fbb3 	bl	8022918 <iprintf>
        prev->next = pcb->next;
 801c1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1b4:	68da      	ldr	r2, [r3, #12]
 801c1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b8:	60da      	str	r2, [r3, #12]
 801c1ba:	e00f      	b.n	801c1dc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801c1bc:	4b47      	ldr	r3, [pc, #284]	@ (801c2dc <tcp_slowtmr+0x594>)
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1c2:	429a      	cmp	r2, r3
 801c1c4:	d006      	beq.n	801c1d4 <tcp_slowtmr+0x48c>
 801c1c6:	4b46      	ldr	r3, [pc, #280]	@ (801c2e0 <tcp_slowtmr+0x598>)
 801c1c8:	f240 5271 	movw	r2, #1393	@ 0x571
 801c1cc:	4947      	ldr	r1, [pc, #284]	@ (801c2ec <tcp_slowtmr+0x5a4>)
 801c1ce:	4846      	ldr	r0, [pc, #280]	@ (801c2e8 <tcp_slowtmr+0x5a0>)
 801c1d0:	f006 fba2 	bl	8022918 <iprintf>
        tcp_active_pcbs = pcb->next;
 801c1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	4a40      	ldr	r2, [pc, #256]	@ (801c2dc <tcp_slowtmr+0x594>)
 801c1da:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801c1dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d013      	beq.n	801c20c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1e6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801c1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1ea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801c1ec:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f0:	3304      	adds	r3, #4
 801c1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1f4:	8ad2      	ldrh	r2, [r2, #22]
 801c1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c1f8:	8b09      	ldrh	r1, [r1, #24]
 801c1fa:	9102      	str	r1, [sp, #8]
 801c1fc:	9201      	str	r2, [sp, #4]
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	462b      	mov	r3, r5
 801c202:	4622      	mov	r2, r4
 801c204:	4601      	mov	r1, r0
 801c206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c208:	f004 feae 	bl	8020f68 <tcp_rst>
      err_arg = pcb->callback_arg;
 801c20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c20e:	691b      	ldr	r3, [r3, #16]
 801c210:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c214:	7d1b      	ldrb	r3, [r3, #20]
 801c216:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801c218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c21a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c21e:	68db      	ldr	r3, [r3, #12]
 801c220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801c222:	6838      	ldr	r0, [r7, #0]
 801c224:	f7fe ffec 	bl	801b200 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801c228:	4b31      	ldr	r3, [pc, #196]	@ (801c2f0 <tcp_slowtmr+0x5a8>)
 801c22a:	2200      	movs	r2, #0
 801c22c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d004      	beq.n	801c23e <tcp_slowtmr+0x4f6>
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	f06f 010c 	mvn.w	r1, #12
 801c23a:	68b8      	ldr	r0, [r7, #8]
 801c23c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801c23e:	4b2c      	ldr	r3, [pc, #176]	@ (801c2f0 <tcp_slowtmr+0x5a8>)
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d037      	beq.n	801c2b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801c246:	e592      	b.n	801bd6e <tcp_slowtmr+0x26>
      prev = pcb;
 801c248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c24e:	68db      	ldr	r3, [r3, #12]
 801c250:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801c252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c254:	7f1b      	ldrb	r3, [r3, #28]
 801c256:	3301      	adds	r3, #1
 801c258:	b2da      	uxtb	r2, r3
 801c25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c25c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c260:	7f1a      	ldrb	r2, [r3, #28]
 801c262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c264:	7f5b      	ldrb	r3, [r3, #29]
 801c266:	429a      	cmp	r2, r3
 801c268:	d325      	bcc.n	801c2b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801c26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c26c:	2200      	movs	r2, #0
 801c26e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801c270:	4b1f      	ldr	r3, [pc, #124]	@ (801c2f0 <tcp_slowtmr+0x5a8>)
 801c272:	2200      	movs	r2, #0
 801c274:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801c276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d00b      	beq.n	801c298 <tcp_slowtmr+0x550>
 801c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c288:	6912      	ldr	r2, [r2, #16]
 801c28a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c28c:	4610      	mov	r0, r2
 801c28e:	4798      	blx	r3
 801c290:	4603      	mov	r3, r0
 801c292:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801c296:	e002      	b.n	801c29e <tcp_slowtmr+0x556>
 801c298:	2300      	movs	r3, #0
 801c29a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801c29e:	4b14      	ldr	r3, [pc, #80]	@ (801c2f0 <tcp_slowtmr+0x5a8>)
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	f47f ad62 	bne.w	801bd6c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801c2a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d102      	bne.n	801c2b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801c2b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c2b2:	f004 f8a5 	bl	8020400 <tcp_output>
  while (pcb != NULL) {
 801c2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	f47f ad5e 	bne.w	801bd7a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801c2be:	2300      	movs	r3, #0
 801c2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801c2c2:	4b0c      	ldr	r3, [pc, #48]	@ (801c2f4 <tcp_slowtmr+0x5ac>)
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c2c8:	e069      	b.n	801c39e <tcp_slowtmr+0x656>
 801c2ca:	bf00      	nop
 801c2cc:	20010018 	.word	0x20010018
 801c2d0:	000a4cb8 	.word	0x000a4cb8
 801c2d4:	10624dd3 	.word	0x10624dd3
 801c2d8:	000124f8 	.word	0x000124f8
 801c2dc:	20010024 	.word	0x20010024
 801c2e0:	08026aa4 	.word	0x08026aa4
 801c2e4:	08026f20 	.word	0x08026f20
 801c2e8:	08026b2c 	.word	0x08026b2c
 801c2ec:	08026f4c 	.word	0x08026f4c
 801c2f0:	2001002c 	.word	0x2001002c
 801c2f4:	20010028 	.word	0x20010028
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2fa:	7d1b      	ldrb	r3, [r3, #20]
 801c2fc:	2b0a      	cmp	r3, #10
 801c2fe:	d006      	beq.n	801c30e <tcp_slowtmr+0x5c6>
 801c300:	4b2b      	ldr	r3, [pc, #172]	@ (801c3b0 <tcp_slowtmr+0x668>)
 801c302:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801c306:	492b      	ldr	r1, [pc, #172]	@ (801c3b4 <tcp_slowtmr+0x66c>)
 801c308:	482b      	ldr	r0, [pc, #172]	@ (801c3b8 <tcp_slowtmr+0x670>)
 801c30a:	f006 fb05 	bl	8022918 <iprintf>
    pcb_remove = 0;
 801c30e:	2300      	movs	r3, #0
 801c310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c314:	4b29      	ldr	r3, [pc, #164]	@ (801c3bc <tcp_slowtmr+0x674>)
 801c316:	681a      	ldr	r2, [r3, #0]
 801c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c31a:	6a1b      	ldr	r3, [r3, #32]
 801c31c:	1ad3      	subs	r3, r2, r3
 801c31e:	2bf0      	cmp	r3, #240	@ 0xf0
 801c320:	d904      	bls.n	801c32c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801c322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c326:	3301      	adds	r3, #1
 801c328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801c32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c330:	2b00      	cmp	r3, #0
 801c332:	d02f      	beq.n	801c394 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801c334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c336:	f000 fbfb 	bl	801cb30 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d010      	beq.n	801c362 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c340:	4b1f      	ldr	r3, [pc, #124]	@ (801c3c0 <tcp_slowtmr+0x678>)
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c346:	429a      	cmp	r2, r3
 801c348:	d106      	bne.n	801c358 <tcp_slowtmr+0x610>
 801c34a:	4b19      	ldr	r3, [pc, #100]	@ (801c3b0 <tcp_slowtmr+0x668>)
 801c34c:	f240 52af 	movw	r2, #1455	@ 0x5af
 801c350:	491c      	ldr	r1, [pc, #112]	@ (801c3c4 <tcp_slowtmr+0x67c>)
 801c352:	4819      	ldr	r0, [pc, #100]	@ (801c3b8 <tcp_slowtmr+0x670>)
 801c354:	f006 fae0 	bl	8022918 <iprintf>
        prev->next = pcb->next;
 801c358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c35a:	68da      	ldr	r2, [r3, #12]
 801c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c35e:	60da      	str	r2, [r3, #12]
 801c360:	e00f      	b.n	801c382 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801c362:	4b17      	ldr	r3, [pc, #92]	@ (801c3c0 <tcp_slowtmr+0x678>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c368:	429a      	cmp	r2, r3
 801c36a:	d006      	beq.n	801c37a <tcp_slowtmr+0x632>
 801c36c:	4b10      	ldr	r3, [pc, #64]	@ (801c3b0 <tcp_slowtmr+0x668>)
 801c36e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801c372:	4915      	ldr	r1, [pc, #84]	@ (801c3c8 <tcp_slowtmr+0x680>)
 801c374:	4810      	ldr	r0, [pc, #64]	@ (801c3b8 <tcp_slowtmr+0x670>)
 801c376:	f006 facf 	bl	8022918 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c37c:	68db      	ldr	r3, [r3, #12]
 801c37e:	4a10      	ldr	r2, [pc, #64]	@ (801c3c0 <tcp_slowtmr+0x678>)
 801c380:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801c382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c384:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801c386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c388:	68db      	ldr	r3, [r3, #12]
 801c38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801c38c:	69f8      	ldr	r0, [r7, #28]
 801c38e:	f7fe ff37 	bl	801b200 <tcp_free>
 801c392:	e004      	b.n	801c39e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801c394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c396:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c39a:	68db      	ldr	r3, [r3, #12]
 801c39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d1a9      	bne.n	801c2f8 <tcp_slowtmr+0x5b0>
    }
  }
}
 801c3a4:	bf00      	nop
 801c3a6:	bf00      	nop
 801c3a8:	3730      	adds	r7, #48	@ 0x30
 801c3aa:	46bd      	mov	sp, r7
 801c3ac:	bdb0      	pop	{r4, r5, r7, pc}
 801c3ae:	bf00      	nop
 801c3b0:	08026aa4 	.word	0x08026aa4
 801c3b4:	08026f78 	.word	0x08026f78
 801c3b8:	08026b2c 	.word	0x08026b2c
 801c3bc:	20010018 	.word	0x20010018
 801c3c0:	20010028 	.word	0x20010028
 801c3c4:	08026fa8 	.word	0x08026fa8
 801c3c8:	08026fd0 	.word	0x08026fd0

0801c3cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b082      	sub	sp, #8
 801c3d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801c3d2:	4b2d      	ldr	r3, [pc, #180]	@ (801c488 <tcp_fasttmr+0xbc>)
 801c3d4:	781b      	ldrb	r3, [r3, #0]
 801c3d6:	3301      	adds	r3, #1
 801c3d8:	b2da      	uxtb	r2, r3
 801c3da:	4b2b      	ldr	r3, [pc, #172]	@ (801c488 <tcp_fasttmr+0xbc>)
 801c3dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801c3de:	4b2b      	ldr	r3, [pc, #172]	@ (801c48c <tcp_fasttmr+0xc0>)
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c3e4:	e048      	b.n	801c478 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	7f9a      	ldrb	r2, [r3, #30]
 801c3ea:	4b27      	ldr	r3, [pc, #156]	@ (801c488 <tcp_fasttmr+0xbc>)
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	429a      	cmp	r2, r3
 801c3f0:	d03f      	beq.n	801c472 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801c3f2:	4b25      	ldr	r3, [pc, #148]	@ (801c488 <tcp_fasttmr+0xbc>)
 801c3f4:	781a      	ldrb	r2, [r3, #0]
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	8b5b      	ldrh	r3, [r3, #26]
 801c3fe:	f003 0301 	and.w	r3, r3, #1
 801c402:	2b00      	cmp	r3, #0
 801c404:	d010      	beq.n	801c428 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	8b5b      	ldrh	r3, [r3, #26]
 801c40a:	f043 0302 	orr.w	r3, r3, #2
 801c40e:	b29a      	uxth	r2, r3
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801c414:	6878      	ldr	r0, [r7, #4]
 801c416:	f003 fff3 	bl	8020400 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	8b5b      	ldrh	r3, [r3, #26]
 801c41e:	f023 0303 	bic.w	r3, r3, #3
 801c422:	b29a      	uxth	r2, r3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	8b5b      	ldrh	r3, [r3, #26]
 801c42c:	f003 0308 	and.w	r3, r3, #8
 801c430:	2b00      	cmp	r3, #0
 801c432:	d009      	beq.n	801c448 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	8b5b      	ldrh	r3, [r3, #26]
 801c438:	f023 0308 	bic.w	r3, r3, #8
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801c442:	6878      	ldr	r0, [r7, #4]
 801c444:	f7ff f870 	bl	801b528 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	68db      	ldr	r3, [r3, #12]
 801c44c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c452:	2b00      	cmp	r3, #0
 801c454:	d00a      	beq.n	801c46c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801c456:	4b0e      	ldr	r3, [pc, #56]	@ (801c490 <tcp_fasttmr+0xc4>)
 801c458:	2200      	movs	r2, #0
 801c45a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801c45c:	6878      	ldr	r0, [r7, #4]
 801c45e:	f000 f819 	bl	801c494 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801c462:	4b0b      	ldr	r3, [pc, #44]	@ (801c490 <tcp_fasttmr+0xc4>)
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d000      	beq.n	801c46c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801c46a:	e7b8      	b.n	801c3de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	607b      	str	r3, [r7, #4]
 801c470:	e002      	b.n	801c478 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	68db      	ldr	r3, [r3, #12]
 801c476:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d1b3      	bne.n	801c3e6 <tcp_fasttmr+0x1a>
    }
  }
}
 801c47e:	bf00      	nop
 801c480:	bf00      	nop
 801c482:	3708      	adds	r7, #8
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}
 801c488:	2001002e 	.word	0x2001002e
 801c48c:	20010024 	.word	0x20010024
 801c490:	2001002c 	.word	0x2001002c

0801c494 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801c494:	b590      	push	{r4, r7, lr}
 801c496:	b085      	sub	sp, #20
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d109      	bne.n	801c4b6 <tcp_process_refused_data+0x22>
 801c4a2:	4b38      	ldr	r3, [pc, #224]	@ (801c584 <tcp_process_refused_data+0xf0>)
 801c4a4:	f240 6209 	movw	r2, #1545	@ 0x609
 801c4a8:	4937      	ldr	r1, [pc, #220]	@ (801c588 <tcp_process_refused_data+0xf4>)
 801c4aa:	4838      	ldr	r0, [pc, #224]	@ (801c58c <tcp_process_refused_data+0xf8>)
 801c4ac:	f006 fa34 	bl	8022918 <iprintf>
 801c4b0:	f06f 030f 	mvn.w	r3, #15
 801c4b4:	e061      	b.n	801c57a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4ba:	7b5b      	ldrb	r3, [r3, #13]
 801c4bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d00b      	beq.n	801c4ec <tcp_process_refused_data+0x58>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	6918      	ldr	r0, [r3, #16]
 801c4de:	2300      	movs	r3, #0
 801c4e0:	68ba      	ldr	r2, [r7, #8]
 801c4e2:	6879      	ldr	r1, [r7, #4]
 801c4e4:	47a0      	blx	r4
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	73fb      	strb	r3, [r7, #15]
 801c4ea:	e007      	b.n	801c4fc <tcp_process_refused_data+0x68>
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	68ba      	ldr	r2, [r7, #8]
 801c4f0:	6879      	ldr	r1, [r7, #4]
 801c4f2:	2000      	movs	r0, #0
 801c4f4:	f000 f8a6 	bl	801c644 <tcp_recv_null>
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801c4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d12b      	bne.n	801c55c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801c504:	7bbb      	ldrb	r3, [r7, #14]
 801c506:	f003 0320 	and.w	r3, r3, #32
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d034      	beq.n	801c578 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c512:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c516:	4293      	cmp	r3, r2
 801c518:	d005      	beq.n	801c526 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c51e:	3301      	adds	r3, #1
 801c520:	b29a      	uxth	r2, r3
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d00b      	beq.n	801c548 <tcp_process_refused_data+0xb4>
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	6918      	ldr	r0, [r3, #16]
 801c53a:	2300      	movs	r3, #0
 801c53c:	2200      	movs	r2, #0
 801c53e:	6879      	ldr	r1, [r7, #4]
 801c540:	47a0      	blx	r4
 801c542:	4603      	mov	r3, r0
 801c544:	73fb      	strb	r3, [r7, #15]
 801c546:	e001      	b.n	801c54c <tcp_process_refused_data+0xb8>
 801c548:	2300      	movs	r3, #0
 801c54a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801c54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c550:	f113 0f0d 	cmn.w	r3, #13
 801c554:	d110      	bne.n	801c578 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801c556:	f06f 030c 	mvn.w	r3, #12
 801c55a:	e00e      	b.n	801c57a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 801c55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c560:	f113 0f0d 	cmn.w	r3, #13
 801c564:	d102      	bne.n	801c56c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801c566:	f06f 030c 	mvn.w	r3, #12
 801c56a:	e006      	b.n	801c57a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	68ba      	ldr	r2, [r7, #8]
 801c570:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801c572:	f06f 0304 	mvn.w	r3, #4
 801c576:	e000      	b.n	801c57a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801c578:	2300      	movs	r3, #0
}
 801c57a:	4618      	mov	r0, r3
 801c57c:	3714      	adds	r7, #20
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd90      	pop	{r4, r7, pc}
 801c582:	bf00      	nop
 801c584:	08026aa4 	.word	0x08026aa4
 801c588:	08026ff8 	.word	0x08026ff8
 801c58c:	08026b2c 	.word	0x08026b2c

0801c590 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b084      	sub	sp, #16
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801c598:	e007      	b.n	801c5aa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801c5a0:	6878      	ldr	r0, [r7, #4]
 801c5a2:	f000 f80a 	bl	801c5ba <tcp_seg_free>
    seg = next;
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d1f4      	bne.n	801c59a <tcp_segs_free+0xa>
  }
}
 801c5b0:	bf00      	nop
 801c5b2:	bf00      	nop
 801c5b4:	3710      	adds	r7, #16
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	bd80      	pop	{r7, pc}

0801c5ba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801c5ba:	b580      	push	{r7, lr}
 801c5bc:	b082      	sub	sp, #8
 801c5be:	af00      	add	r7, sp, #0
 801c5c0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d00c      	beq.n	801c5e2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	685b      	ldr	r3, [r3, #4]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d004      	beq.n	801c5da <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	f7fe fac5 	bl	801ab64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801c5da:	6879      	ldr	r1, [r7, #4]
 801c5dc:	2003      	movs	r0, #3
 801c5de:	f7fd fbc9 	bl	8019d74 <memp_free>
  }
}
 801c5e2:	bf00      	nop
 801c5e4:	3708      	adds	r7, #8
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bd80      	pop	{r7, pc}
	...

0801c5ec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b084      	sub	sp, #16
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d106      	bne.n	801c608 <tcp_seg_copy+0x1c>
 801c5fa:	4b0f      	ldr	r3, [pc, #60]	@ (801c638 <tcp_seg_copy+0x4c>)
 801c5fc:	f240 6282 	movw	r2, #1666	@ 0x682
 801c600:	490e      	ldr	r1, [pc, #56]	@ (801c63c <tcp_seg_copy+0x50>)
 801c602:	480f      	ldr	r0, [pc, #60]	@ (801c640 <tcp_seg_copy+0x54>)
 801c604:	f006 f988 	bl	8022918 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801c608:	2003      	movs	r0, #3
 801c60a:	f7fd fb3d 	bl	8019c88 <memp_malloc>
 801c60e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d101      	bne.n	801c61a <tcp_seg_copy+0x2e>
    return NULL;
 801c616:	2300      	movs	r3, #0
 801c618:	e00a      	b.n	801c630 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801c61a:	2210      	movs	r2, #16
 801c61c:	6879      	ldr	r1, [r7, #4]
 801c61e:	68f8      	ldr	r0, [r7, #12]
 801c620:	f006 fbb1 	bl	8022d86 <memcpy>
  pbuf_ref(cseg->p);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	685b      	ldr	r3, [r3, #4]
 801c628:	4618      	mov	r0, r3
 801c62a:	f7fe fb41 	bl	801acb0 <pbuf_ref>
  return cseg;
 801c62e:	68fb      	ldr	r3, [r7, #12]
}
 801c630:	4618      	mov	r0, r3
 801c632:	3710      	adds	r7, #16
 801c634:	46bd      	mov	sp, r7
 801c636:	bd80      	pop	{r7, pc}
 801c638:	08026aa4 	.word	0x08026aa4
 801c63c:	0802703c 	.word	0x0802703c
 801c640:	08026b2c 	.word	0x08026b2c

0801c644 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b084      	sub	sp, #16
 801c648:	af00      	add	r7, sp, #0
 801c64a:	60f8      	str	r0, [r7, #12]
 801c64c:	60b9      	str	r1, [r7, #8]
 801c64e:	607a      	str	r2, [r7, #4]
 801c650:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c652:	68bb      	ldr	r3, [r7, #8]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d109      	bne.n	801c66c <tcp_recv_null+0x28>
 801c658:	4b12      	ldr	r3, [pc, #72]	@ (801c6a4 <tcp_recv_null+0x60>)
 801c65a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801c65e:	4912      	ldr	r1, [pc, #72]	@ (801c6a8 <tcp_recv_null+0x64>)
 801c660:	4812      	ldr	r0, [pc, #72]	@ (801c6ac <tcp_recv_null+0x68>)
 801c662:	f006 f959 	bl	8022918 <iprintf>
 801c666:	f06f 030f 	mvn.w	r3, #15
 801c66a:	e016      	b.n	801c69a <tcp_recv_null+0x56>

  if (p != NULL) {
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d009      	beq.n	801c686 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	891b      	ldrh	r3, [r3, #8]
 801c676:	4619      	mov	r1, r3
 801c678:	68b8      	ldr	r0, [r7, #8]
 801c67a:	f7ff facd 	bl	801bc18 <tcp_recved>
    pbuf_free(p);
 801c67e:	6878      	ldr	r0, [r7, #4]
 801c680:	f7fe fa70 	bl	801ab64 <pbuf_free>
 801c684:	e008      	b.n	801c698 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801c686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d104      	bne.n	801c698 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801c68e:	68b8      	ldr	r0, [r7, #8]
 801c690:	f7fe ffb4 	bl	801b5fc <tcp_close>
 801c694:	4603      	mov	r3, r0
 801c696:	e000      	b.n	801c69a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801c698:	2300      	movs	r3, #0
}
 801c69a:	4618      	mov	r0, r3
 801c69c:	3710      	adds	r7, #16
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	bd80      	pop	{r7, pc}
 801c6a2:	bf00      	nop
 801c6a4:	08026aa4 	.word	0x08026aa4
 801c6a8:	08027058 	.word	0x08027058
 801c6ac:	08026b2c 	.word	0x08026b2c

0801c6b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b086      	sub	sp, #24
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	db01      	blt.n	801c6c6 <tcp_kill_prio+0x16>
 801c6c2:	79fb      	ldrb	r3, [r7, #7]
 801c6c4:	e000      	b.n	801c6c8 <tcp_kill_prio+0x18>
 801c6c6:	237f      	movs	r3, #127	@ 0x7f
 801c6c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801c6ca:	7afb      	ldrb	r3, [r7, #11]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d034      	beq.n	801c73a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801c6d0:	7afb      	ldrb	r3, [r7, #11]
 801c6d2:	3b01      	subs	r3, #1
 801c6d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801c6da:	2300      	movs	r3, #0
 801c6dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c6de:	4b19      	ldr	r3, [pc, #100]	@ (801c744 <tcp_kill_prio+0x94>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	617b      	str	r3, [r7, #20]
 801c6e4:	e01f      	b.n	801c726 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	7d5b      	ldrb	r3, [r3, #21]
 801c6ea:	7afa      	ldrb	r2, [r7, #11]
 801c6ec:	429a      	cmp	r2, r3
 801c6ee:	d80c      	bhi.n	801c70a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c6f0:	697b      	ldr	r3, [r7, #20]
 801c6f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801c6f4:	7afa      	ldrb	r2, [r7, #11]
 801c6f6:	429a      	cmp	r2, r3
 801c6f8:	d112      	bne.n	801c720 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c6fa:	4b13      	ldr	r3, [pc, #76]	@ (801c748 <tcp_kill_prio+0x98>)
 801c6fc:	681a      	ldr	r2, [r3, #0]
 801c6fe:	697b      	ldr	r3, [r7, #20]
 801c700:	6a1b      	ldr	r3, [r3, #32]
 801c702:	1ad3      	subs	r3, r2, r3
 801c704:	68fa      	ldr	r2, [r7, #12]
 801c706:	429a      	cmp	r2, r3
 801c708:	d80a      	bhi.n	801c720 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801c70a:	4b0f      	ldr	r3, [pc, #60]	@ (801c748 <tcp_kill_prio+0x98>)
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	697b      	ldr	r3, [r7, #20]
 801c710:	6a1b      	ldr	r3, [r3, #32]
 801c712:	1ad3      	subs	r3, r2, r3
 801c714:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801c716:	697b      	ldr	r3, [r7, #20]
 801c718:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	7d5b      	ldrb	r3, [r3, #21]
 801c71e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	68db      	ldr	r3, [r3, #12]
 801c724:	617b      	str	r3, [r7, #20]
 801c726:	697b      	ldr	r3, [r7, #20]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d1dc      	bne.n	801c6e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801c72c:	693b      	ldr	r3, [r7, #16]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d004      	beq.n	801c73c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801c732:	6938      	ldr	r0, [r7, #16]
 801c734:	f7ff f8a8 	bl	801b888 <tcp_abort>
 801c738:	e000      	b.n	801c73c <tcp_kill_prio+0x8c>
    return;
 801c73a:	bf00      	nop
  }
}
 801c73c:	3718      	adds	r7, #24
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd80      	pop	{r7, pc}
 801c742:	bf00      	nop
 801c744:	20010024 	.word	0x20010024
 801c748:	20010018 	.word	0x20010018

0801c74c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801c74c:	b580      	push	{r7, lr}
 801c74e:	b086      	sub	sp, #24
 801c750:	af00      	add	r7, sp, #0
 801c752:	4603      	mov	r3, r0
 801c754:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801c756:	79fb      	ldrb	r3, [r7, #7]
 801c758:	2b08      	cmp	r3, #8
 801c75a:	d009      	beq.n	801c770 <tcp_kill_state+0x24>
 801c75c:	79fb      	ldrb	r3, [r7, #7]
 801c75e:	2b09      	cmp	r3, #9
 801c760:	d006      	beq.n	801c770 <tcp_kill_state+0x24>
 801c762:	4b1a      	ldr	r3, [pc, #104]	@ (801c7cc <tcp_kill_state+0x80>)
 801c764:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801c768:	4919      	ldr	r1, [pc, #100]	@ (801c7d0 <tcp_kill_state+0x84>)
 801c76a:	481a      	ldr	r0, [pc, #104]	@ (801c7d4 <tcp_kill_state+0x88>)
 801c76c:	f006 f8d4 	bl	8022918 <iprintf>

  inactivity = 0;
 801c770:	2300      	movs	r3, #0
 801c772:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801c774:	2300      	movs	r3, #0
 801c776:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c778:	4b17      	ldr	r3, [pc, #92]	@ (801c7d8 <tcp_kill_state+0x8c>)
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	617b      	str	r3, [r7, #20]
 801c77e:	e017      	b.n	801c7b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	7d1b      	ldrb	r3, [r3, #20]
 801c784:	79fa      	ldrb	r2, [r7, #7]
 801c786:	429a      	cmp	r2, r3
 801c788:	d10f      	bne.n	801c7aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c78a:	4b14      	ldr	r3, [pc, #80]	@ (801c7dc <tcp_kill_state+0x90>)
 801c78c:	681a      	ldr	r2, [r3, #0]
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	6a1b      	ldr	r3, [r3, #32]
 801c792:	1ad3      	subs	r3, r2, r3
 801c794:	68fa      	ldr	r2, [r7, #12]
 801c796:	429a      	cmp	r2, r3
 801c798:	d807      	bhi.n	801c7aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801c79a:	4b10      	ldr	r3, [pc, #64]	@ (801c7dc <tcp_kill_state+0x90>)
 801c79c:	681a      	ldr	r2, [r3, #0]
 801c79e:	697b      	ldr	r3, [r7, #20]
 801c7a0:	6a1b      	ldr	r3, [r3, #32]
 801c7a2:	1ad3      	subs	r3, r2, r3
 801c7a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	68db      	ldr	r3, [r3, #12]
 801c7ae:	617b      	str	r3, [r7, #20]
 801c7b0:	697b      	ldr	r3, [r7, #20]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d1e4      	bne.n	801c780 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801c7b6:	693b      	ldr	r3, [r7, #16]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d003      	beq.n	801c7c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801c7bc:	2100      	movs	r1, #0
 801c7be:	6938      	ldr	r0, [r7, #16]
 801c7c0:	f7fe ffa4 	bl	801b70c <tcp_abandon>
  }
}
 801c7c4:	bf00      	nop
 801c7c6:	3718      	adds	r7, #24
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd80      	pop	{r7, pc}
 801c7cc:	08026aa4 	.word	0x08026aa4
 801c7d0:	08027074 	.word	0x08027074
 801c7d4:	08026b2c 	.word	0x08026b2c
 801c7d8:	20010024 	.word	0x20010024
 801c7dc:	20010018 	.word	0x20010018

0801c7e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b084      	sub	sp, #16
 801c7e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7ee:	4b12      	ldr	r3, [pc, #72]	@ (801c838 <tcp_kill_timewait+0x58>)
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	60fb      	str	r3, [r7, #12]
 801c7f4:	e012      	b.n	801c81c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7f6:	4b11      	ldr	r3, [pc, #68]	@ (801c83c <tcp_kill_timewait+0x5c>)
 801c7f8:	681a      	ldr	r2, [r3, #0]
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	6a1b      	ldr	r3, [r3, #32]
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	687a      	ldr	r2, [r7, #4]
 801c802:	429a      	cmp	r2, r3
 801c804:	d807      	bhi.n	801c816 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801c806:	4b0d      	ldr	r3, [pc, #52]	@ (801c83c <tcp_kill_timewait+0x5c>)
 801c808:	681a      	ldr	r2, [r3, #0]
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	6a1b      	ldr	r3, [r3, #32]
 801c80e:	1ad3      	subs	r3, r2, r3
 801c810:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	68db      	ldr	r3, [r3, #12]
 801c81a:	60fb      	str	r3, [r7, #12]
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d1e9      	bne.n	801c7f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801c822:	68bb      	ldr	r3, [r7, #8]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d002      	beq.n	801c82e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801c828:	68b8      	ldr	r0, [r7, #8]
 801c82a:	f7ff f82d 	bl	801b888 <tcp_abort>
  }
}
 801c82e:	bf00      	nop
 801c830:	3710      	adds	r7, #16
 801c832:	46bd      	mov	sp, r7
 801c834:	bd80      	pop	{r7, pc}
 801c836:	bf00      	nop
 801c838:	20010028 	.word	0x20010028
 801c83c:	20010018 	.word	0x20010018

0801c840 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c846:	4b10      	ldr	r3, [pc, #64]	@ (801c888 <tcp_handle_closepend+0x48>)
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c84c:	e014      	b.n	801c878 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	68db      	ldr	r3, [r3, #12]
 801c852:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	8b5b      	ldrh	r3, [r3, #26]
 801c858:	f003 0308 	and.w	r3, r3, #8
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d009      	beq.n	801c874 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	8b5b      	ldrh	r3, [r3, #26]
 801c864:	f023 0308 	bic.w	r3, r3, #8
 801c868:	b29a      	uxth	r2, r3
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f7fe fe5a 	bl	801b528 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801c874:	683b      	ldr	r3, [r7, #0]
 801c876:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d1e7      	bne.n	801c84e <tcp_handle_closepend+0xe>
  }
}
 801c87e:	bf00      	nop
 801c880:	bf00      	nop
 801c882:	3708      	adds	r7, #8
 801c884:	46bd      	mov	sp, r7
 801c886:	bd80      	pop	{r7, pc}
 801c888:	20010024 	.word	0x20010024

0801c88c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801c88c:	b580      	push	{r7, lr}
 801c88e:	b084      	sub	sp, #16
 801c890:	af00      	add	r7, sp, #0
 801c892:	4603      	mov	r3, r0
 801c894:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c896:	2001      	movs	r0, #1
 801c898:	f7fd f9f6 	bl	8019c88 <memp_malloc>
 801c89c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d126      	bne.n	801c8f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801c8a4:	f7ff ffcc 	bl	801c840 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801c8a8:	f7ff ff9a 	bl	801c7e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8ac:	2001      	movs	r0, #1
 801c8ae:	f7fd f9eb 	bl	8019c88 <memp_malloc>
 801c8b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d11b      	bne.n	801c8f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801c8ba:	2009      	movs	r0, #9
 801c8bc:	f7ff ff46 	bl	801c74c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8c0:	2001      	movs	r0, #1
 801c8c2:	f7fd f9e1 	bl	8019c88 <memp_malloc>
 801c8c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d111      	bne.n	801c8f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801c8ce:	2008      	movs	r0, #8
 801c8d0:	f7ff ff3c 	bl	801c74c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8d4:	2001      	movs	r0, #1
 801c8d6:	f7fd f9d7 	bl	8019c88 <memp_malloc>
 801c8da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d107      	bne.n	801c8f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801c8e2:	79fb      	ldrb	r3, [r7, #7]
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7ff fee3 	bl	801c6b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8ea:	2001      	movs	r0, #1
 801c8ec:	f7fd f9cc 	bl	8019c88 <memp_malloc>
 801c8f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d03f      	beq.n	801c978 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c8f8:	229c      	movs	r2, #156	@ 0x9c
 801c8fa:	2100      	movs	r1, #0
 801c8fc:	68f8      	ldr	r0, [r7, #12]
 801c8fe:	f006 f99d 	bl	8022c3c <memset>
    pcb->prio = prio;
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	79fa      	ldrb	r2, [r7, #7]
 801c906:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c90e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c918:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	22ff      	movs	r2, #255	@ 0xff
 801c926:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c92e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	2206      	movs	r2, #6
 801c934:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	2206      	movs	r2, #6
 801c93c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c944:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	2201      	movs	r2, #1
 801c94a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801c94e:	4b0d      	ldr	r3, [pc, #52]	@ (801c984 <tcp_alloc+0xf8>)
 801c950:	681a      	ldr	r2, [r3, #0]
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801c956:	4b0c      	ldr	r3, [pc, #48]	@ (801c988 <tcp_alloc+0xfc>)
 801c958:	781a      	ldrb	r2, [r3, #0]
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c964:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	4a08      	ldr	r2, [pc, #32]	@ (801c98c <tcp_alloc+0x100>)
 801c96c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	4a07      	ldr	r2, [pc, #28]	@ (801c990 <tcp_alloc+0x104>)
 801c974:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801c978:	68fb      	ldr	r3, [r7, #12]
}
 801c97a:	4618      	mov	r0, r3
 801c97c:	3710      	adds	r7, #16
 801c97e:	46bd      	mov	sp, r7
 801c980:	bd80      	pop	{r7, pc}
 801c982:	bf00      	nop
 801c984:	20010018 	.word	0x20010018
 801c988:	2001002e 	.word	0x2001002e
 801c98c:	0801c645 	.word	0x0801c645
 801c990:	006ddd00 	.word	0x006ddd00

0801c994 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801c994:	b580      	push	{r7, lr}
 801c996:	b084      	sub	sp, #16
 801c998:	af00      	add	r7, sp, #0
 801c99a:	4603      	mov	r3, r0
 801c99c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c99e:	2040      	movs	r0, #64	@ 0x40
 801c9a0:	f7ff ff74 	bl	801c88c <tcp_alloc>
 801c9a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c9a6:	68fb      	ldr	r3, [r7, #12]
}
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	3710      	adds	r7, #16
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801c9b0:	b480      	push	{r7}
 801c9b2:	b083      	sub	sp, #12
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	6078      	str	r0, [r7, #4]
 801c9b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d002      	beq.n	801c9c6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	683a      	ldr	r2, [r7, #0]
 801c9c4:	611a      	str	r2, [r3, #16]
  }
}
 801c9c6:	bf00      	nop
 801c9c8:	370c      	adds	r7, #12
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9d0:	4770      	bx	lr
	...

0801c9d4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b082      	sub	sp, #8
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
 801c9dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d00e      	beq.n	801ca02 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	7d1b      	ldrb	r3, [r3, #20]
 801c9e8:	2b01      	cmp	r3, #1
 801c9ea:	d106      	bne.n	801c9fa <tcp_recv+0x26>
 801c9ec:	4b07      	ldr	r3, [pc, #28]	@ (801ca0c <tcp_recv+0x38>)
 801c9ee:	f240 72df 	movw	r2, #2015	@ 0x7df
 801c9f2:	4907      	ldr	r1, [pc, #28]	@ (801ca10 <tcp_recv+0x3c>)
 801c9f4:	4807      	ldr	r0, [pc, #28]	@ (801ca14 <tcp_recv+0x40>)
 801c9f6:	f005 ff8f 	bl	8022918 <iprintf>
    pcb->recv = recv;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	683a      	ldr	r2, [r7, #0]
 801c9fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801ca02:	bf00      	nop
 801ca04:	3708      	adds	r7, #8
 801ca06:	46bd      	mov	sp, r7
 801ca08:	bd80      	pop	{r7, pc}
 801ca0a:	bf00      	nop
 801ca0c:	08026aa4 	.word	0x08026aa4
 801ca10:	08027084 	.word	0x08027084
 801ca14:	08026b2c 	.word	0x08026b2c

0801ca18 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b082      	sub	sp, #8
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
 801ca20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d00e      	beq.n	801ca46 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	7d1b      	ldrb	r3, [r3, #20]
 801ca2c:	2b01      	cmp	r3, #1
 801ca2e:	d106      	bne.n	801ca3e <tcp_sent+0x26>
 801ca30:	4b07      	ldr	r3, [pc, #28]	@ (801ca50 <tcp_sent+0x38>)
 801ca32:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801ca36:	4907      	ldr	r1, [pc, #28]	@ (801ca54 <tcp_sent+0x3c>)
 801ca38:	4807      	ldr	r0, [pc, #28]	@ (801ca58 <tcp_sent+0x40>)
 801ca3a:	f005 ff6d 	bl	8022918 <iprintf>
    pcb->sent = sent;
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	683a      	ldr	r2, [r7, #0]
 801ca42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801ca46:	bf00      	nop
 801ca48:	3708      	adds	r7, #8
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	bf00      	nop
 801ca50:	08026aa4 	.word	0x08026aa4
 801ca54:	080270ac 	.word	0x080270ac
 801ca58:	08026b2c 	.word	0x08026b2c

0801ca5c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b082      	sub	sp, #8
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
 801ca64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d00e      	beq.n	801ca8a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	7d1b      	ldrb	r3, [r3, #20]
 801ca70:	2b01      	cmp	r3, #1
 801ca72:	d106      	bne.n	801ca82 <tcp_err+0x26>
 801ca74:	4b07      	ldr	r3, [pc, #28]	@ (801ca94 <tcp_err+0x38>)
 801ca76:	f640 020d 	movw	r2, #2061	@ 0x80d
 801ca7a:	4907      	ldr	r1, [pc, #28]	@ (801ca98 <tcp_err+0x3c>)
 801ca7c:	4807      	ldr	r0, [pc, #28]	@ (801ca9c <tcp_err+0x40>)
 801ca7e:	f005 ff4b 	bl	8022918 <iprintf>
    pcb->errf = err;
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	683a      	ldr	r2, [r7, #0]
 801ca86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801ca8a:	bf00      	nop
 801ca8c:	3708      	adds	r7, #8
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	bd80      	pop	{r7, pc}
 801ca92:	bf00      	nop
 801ca94:	08026aa4 	.word	0x08026aa4
 801ca98:	080270d4 	.word	0x080270d4
 801ca9c:	08026b2c 	.word	0x08026b2c

0801caa0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801caa0:	b480      	push	{r7}
 801caa2:	b085      	sub	sp, #20
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
 801caa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d008      	beq.n	801cac2 <tcp_accept+0x22>
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	7d1b      	ldrb	r3, [r3, #20]
 801cab4:	2b01      	cmp	r3, #1
 801cab6:	d104      	bne.n	801cac2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	683a      	ldr	r2, [r7, #0]
 801cac0:	619a      	str	r2, [r3, #24]
  }
}
 801cac2:	bf00      	nop
 801cac4:	3714      	adds	r7, #20
 801cac6:	46bd      	mov	sp, r7
 801cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cacc:	4770      	bx	lr
	...

0801cad0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801cad0:	b580      	push	{r7, lr}
 801cad2:	b084      	sub	sp, #16
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	60f8      	str	r0, [r7, #12]
 801cad8:	60b9      	str	r1, [r7, #8]
 801cada:	4613      	mov	r3, r2
 801cadc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d107      	bne.n	801caf4 <tcp_poll+0x24>
 801cae4:	4b0e      	ldr	r3, [pc, #56]	@ (801cb20 <tcp_poll+0x50>)
 801cae6:	f640 023d 	movw	r2, #2109	@ 0x83d
 801caea:	490e      	ldr	r1, [pc, #56]	@ (801cb24 <tcp_poll+0x54>)
 801caec:	480e      	ldr	r0, [pc, #56]	@ (801cb28 <tcp_poll+0x58>)
 801caee:	f005 ff13 	bl	8022918 <iprintf>
 801caf2:	e011      	b.n	801cb18 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	7d1b      	ldrb	r3, [r3, #20]
 801caf8:	2b01      	cmp	r3, #1
 801cafa:	d106      	bne.n	801cb0a <tcp_poll+0x3a>
 801cafc:	4b08      	ldr	r3, [pc, #32]	@ (801cb20 <tcp_poll+0x50>)
 801cafe:	f640 023e 	movw	r2, #2110	@ 0x83e
 801cb02:	490a      	ldr	r1, [pc, #40]	@ (801cb2c <tcp_poll+0x5c>)
 801cb04:	4808      	ldr	r0, [pc, #32]	@ (801cb28 <tcp_poll+0x58>)
 801cb06:	f005 ff07 	bl	8022918 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	68ba      	ldr	r2, [r7, #8]
 801cb0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	79fa      	ldrb	r2, [r7, #7]
 801cb16:	775a      	strb	r2, [r3, #29]
}
 801cb18:	3710      	adds	r7, #16
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	bd80      	pop	{r7, pc}
 801cb1e:	bf00      	nop
 801cb20:	08026aa4 	.word	0x08026aa4
 801cb24:	080270fc 	.word	0x080270fc
 801cb28:	08026b2c 	.word	0x08026b2c
 801cb2c:	08027114 	.word	0x08027114

0801cb30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801cb30:	b580      	push	{r7, lr}
 801cb32:	b082      	sub	sp, #8
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d107      	bne.n	801cb4e <tcp_pcb_purge+0x1e>
 801cb3e:	4b21      	ldr	r3, [pc, #132]	@ (801cbc4 <tcp_pcb_purge+0x94>)
 801cb40:	f640 0251 	movw	r2, #2129	@ 0x851
 801cb44:	4920      	ldr	r1, [pc, #128]	@ (801cbc8 <tcp_pcb_purge+0x98>)
 801cb46:	4821      	ldr	r0, [pc, #132]	@ (801cbcc <tcp_pcb_purge+0x9c>)
 801cb48:	f005 fee6 	bl	8022918 <iprintf>
 801cb4c:	e037      	b.n	801cbbe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	7d1b      	ldrb	r3, [r3, #20]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d033      	beq.n	801cbbe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801cb5a:	2b0a      	cmp	r3, #10
 801cb5c:	d02f      	beq.n	801cbbe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801cb62:	2b01      	cmp	r3, #1
 801cb64:	d02b      	beq.n	801cbbe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d007      	beq.n	801cb7e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7fd fff6 	bl	801ab64 <pbuf_free>
      pcb->refused_data = NULL;
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d002      	beq.n	801cb8c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801cb86:	6878      	ldr	r0, [r7, #4]
 801cb88:	f000 f986 	bl	801ce98 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb92:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7ff fcf9 	bl	801c590 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cba2:	4618      	mov	r0, r3
 801cba4:	f7ff fcf4 	bl	801c590 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	2200      	movs	r2, #0
 801cbac:	66da      	str	r2, [r3, #108]	@ 0x6c
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	2200      	movs	r2, #0
 801cbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801cbbe:	3708      	adds	r7, #8
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	bd80      	pop	{r7, pc}
 801cbc4:	08026aa4 	.word	0x08026aa4
 801cbc8:	08027134 	.word	0x08027134
 801cbcc:	08026b2c 	.word	0x08026b2c

0801cbd0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b084      	sub	sp, #16
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
 801cbd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d106      	bne.n	801cbee <tcp_pcb_remove+0x1e>
 801cbe0:	4b3e      	ldr	r3, [pc, #248]	@ (801ccdc <tcp_pcb_remove+0x10c>)
 801cbe2:	f640 0283 	movw	r2, #2179	@ 0x883
 801cbe6:	493e      	ldr	r1, [pc, #248]	@ (801cce0 <tcp_pcb_remove+0x110>)
 801cbe8:	483e      	ldr	r0, [pc, #248]	@ (801cce4 <tcp_pcb_remove+0x114>)
 801cbea:	f005 fe95 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d106      	bne.n	801cc02 <tcp_pcb_remove+0x32>
 801cbf4:	4b39      	ldr	r3, [pc, #228]	@ (801ccdc <tcp_pcb_remove+0x10c>)
 801cbf6:	f640 0284 	movw	r2, #2180	@ 0x884
 801cbfa:	493b      	ldr	r1, [pc, #236]	@ (801cce8 <tcp_pcb_remove+0x118>)
 801cbfc:	4839      	ldr	r0, [pc, #228]	@ (801cce4 <tcp_pcb_remove+0x114>)
 801cbfe:	f005 fe8b 	bl	8022918 <iprintf>

  TCP_RMV(pcblist, pcb);
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	683a      	ldr	r2, [r7, #0]
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	d105      	bne.n	801cc18 <tcp_pcb_remove+0x48>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	68da      	ldr	r2, [r3, #12]
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	601a      	str	r2, [r3, #0]
 801cc16:	e013      	b.n	801cc40 <tcp_pcb_remove+0x70>
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	60fb      	str	r3, [r7, #12]
 801cc1e:	e00c      	b.n	801cc3a <tcp_pcb_remove+0x6a>
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	68db      	ldr	r3, [r3, #12]
 801cc24:	683a      	ldr	r2, [r7, #0]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d104      	bne.n	801cc34 <tcp_pcb_remove+0x64>
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	68da      	ldr	r2, [r3, #12]
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	60da      	str	r2, [r3, #12]
 801cc32:	e005      	b.n	801cc40 <tcp_pcb_remove+0x70>
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	68db      	ldr	r3, [r3, #12]
 801cc38:	60fb      	str	r3, [r7, #12]
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d1ef      	bne.n	801cc20 <tcp_pcb_remove+0x50>
 801cc40:	683b      	ldr	r3, [r7, #0]
 801cc42:	2200      	movs	r2, #0
 801cc44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801cc46:	6838      	ldr	r0, [r7, #0]
 801cc48:	f7ff ff72 	bl	801cb30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	7d1b      	ldrb	r3, [r3, #20]
 801cc50:	2b0a      	cmp	r3, #10
 801cc52:	d013      	beq.n	801cc7c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801cc54:	683b      	ldr	r3, [r7, #0]
 801cc56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801cc58:	2b01      	cmp	r3, #1
 801cc5a:	d00f      	beq.n	801cc7c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	8b5b      	ldrh	r3, [r3, #26]
 801cc60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d009      	beq.n	801cc7c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801cc68:	683b      	ldr	r3, [r7, #0]
 801cc6a:	8b5b      	ldrh	r3, [r3, #26]
 801cc6c:	f043 0302 	orr.w	r3, r3, #2
 801cc70:	b29a      	uxth	r2, r3
 801cc72:	683b      	ldr	r3, [r7, #0]
 801cc74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801cc76:	6838      	ldr	r0, [r7, #0]
 801cc78:	f003 fbc2 	bl	8020400 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	7d1b      	ldrb	r3, [r3, #20]
 801cc80:	2b01      	cmp	r3, #1
 801cc82:	d020      	beq.n	801ccc6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d006      	beq.n	801cc9a <tcp_pcb_remove+0xca>
 801cc8c:	4b13      	ldr	r3, [pc, #76]	@ (801ccdc <tcp_pcb_remove+0x10c>)
 801cc8e:	f640 0293 	movw	r2, #2195	@ 0x893
 801cc92:	4916      	ldr	r1, [pc, #88]	@ (801ccec <tcp_pcb_remove+0x11c>)
 801cc94:	4813      	ldr	r0, [pc, #76]	@ (801cce4 <tcp_pcb_remove+0x114>)
 801cc96:	f005 fe3f 	bl	8022918 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d006      	beq.n	801ccb0 <tcp_pcb_remove+0xe0>
 801cca2:	4b0e      	ldr	r3, [pc, #56]	@ (801ccdc <tcp_pcb_remove+0x10c>)
 801cca4:	f640 0294 	movw	r2, #2196	@ 0x894
 801cca8:	4911      	ldr	r1, [pc, #68]	@ (801ccf0 <tcp_pcb_remove+0x120>)
 801ccaa:	480e      	ldr	r0, [pc, #56]	@ (801cce4 <tcp_pcb_remove+0x114>)
 801ccac:	f005 fe34 	bl	8022918 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801ccb0:	683b      	ldr	r3, [r7, #0]
 801ccb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d006      	beq.n	801ccc6 <tcp_pcb_remove+0xf6>
 801ccb8:	4b08      	ldr	r3, [pc, #32]	@ (801ccdc <tcp_pcb_remove+0x10c>)
 801ccba:	f640 0296 	movw	r2, #2198	@ 0x896
 801ccbe:	490d      	ldr	r1, [pc, #52]	@ (801ccf4 <tcp_pcb_remove+0x124>)
 801ccc0:	4808      	ldr	r0, [pc, #32]	@ (801cce4 <tcp_pcb_remove+0x114>)
 801ccc2:	f005 fe29 	bl	8022918 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	2200      	movs	r2, #0
 801ccca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	2200      	movs	r2, #0
 801ccd0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801ccd2:	bf00      	nop
 801ccd4:	3710      	adds	r7, #16
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	08026aa4 	.word	0x08026aa4
 801cce0:	08027150 	.word	0x08027150
 801cce4:	08026b2c 	.word	0x08026b2c
 801cce8:	0802716c 	.word	0x0802716c
 801ccec:	0802718c 	.word	0x0802718c
 801ccf0:	080271a4 	.word	0x080271a4
 801ccf4:	080271c0 	.word	0x080271c0

0801ccf8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b082      	sub	sp, #8
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d106      	bne.n	801cd14 <tcp_next_iss+0x1c>
 801cd06:	4b0a      	ldr	r3, [pc, #40]	@ (801cd30 <tcp_next_iss+0x38>)
 801cd08:	f640 02af 	movw	r2, #2223	@ 0x8af
 801cd0c:	4909      	ldr	r1, [pc, #36]	@ (801cd34 <tcp_next_iss+0x3c>)
 801cd0e:	480a      	ldr	r0, [pc, #40]	@ (801cd38 <tcp_next_iss+0x40>)
 801cd10:	f005 fe02 	bl	8022918 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cd14:	4b09      	ldr	r3, [pc, #36]	@ (801cd3c <tcp_next_iss+0x44>)
 801cd16:	681a      	ldr	r2, [r3, #0]
 801cd18:	4b09      	ldr	r3, [pc, #36]	@ (801cd40 <tcp_next_iss+0x48>)
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	4413      	add	r3, r2
 801cd1e:	4a07      	ldr	r2, [pc, #28]	@ (801cd3c <tcp_next_iss+0x44>)
 801cd20:	6013      	str	r3, [r2, #0]
  return iss;
 801cd22:	4b06      	ldr	r3, [pc, #24]	@ (801cd3c <tcp_next_iss+0x44>)
 801cd24:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801cd26:	4618      	mov	r0, r3
 801cd28:	3708      	adds	r7, #8
 801cd2a:	46bd      	mov	sp, r7
 801cd2c:	bd80      	pop	{r7, pc}
 801cd2e:	bf00      	nop
 801cd30:	08026aa4 	.word	0x08026aa4
 801cd34:	080271d8 	.word	0x080271d8
 801cd38:	08026b2c 	.word	0x08026b2c
 801cd3c:	2000003c 	.word	0x2000003c
 801cd40:	20010018 	.word	0x20010018

0801cd44 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b086      	sub	sp, #24
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	4603      	mov	r3, r0
 801cd4c:	60b9      	str	r1, [r7, #8]
 801cd4e:	607a      	str	r2, [r7, #4]
 801cd50:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d106      	bne.n	801cd66 <tcp_eff_send_mss_netif+0x22>
 801cd58:	4b14      	ldr	r3, [pc, #80]	@ (801cdac <tcp_eff_send_mss_netif+0x68>)
 801cd5a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801cd5e:	4914      	ldr	r1, [pc, #80]	@ (801cdb0 <tcp_eff_send_mss_netif+0x6c>)
 801cd60:	4814      	ldr	r0, [pc, #80]	@ (801cdb4 <tcp_eff_send_mss_netif+0x70>)
 801cd62:	f005 fdd9 	bl	8022918 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801cd66:	68bb      	ldr	r3, [r7, #8]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d101      	bne.n	801cd70 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801cd6c:	89fb      	ldrh	r3, [r7, #14]
 801cd6e:	e019      	b.n	801cda4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801cd70:	68bb      	ldr	r3, [r7, #8]
 801cd72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cd74:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cd76:	8afb      	ldrh	r3, [r7, #22]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d012      	beq.n	801cda2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801cd7c:	2328      	movs	r3, #40	@ 0x28
 801cd7e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cd80:	8afa      	ldrh	r2, [r7, #22]
 801cd82:	8abb      	ldrh	r3, [r7, #20]
 801cd84:	429a      	cmp	r2, r3
 801cd86:	d904      	bls.n	801cd92 <tcp_eff_send_mss_netif+0x4e>
 801cd88:	8afa      	ldrh	r2, [r7, #22]
 801cd8a:	8abb      	ldrh	r3, [r7, #20]
 801cd8c:	1ad3      	subs	r3, r2, r3
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	e000      	b.n	801cd94 <tcp_eff_send_mss_netif+0x50>
 801cd92:	2300      	movs	r3, #0
 801cd94:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cd96:	8a7a      	ldrh	r2, [r7, #18]
 801cd98:	89fb      	ldrh	r3, [r7, #14]
 801cd9a:	4293      	cmp	r3, r2
 801cd9c:	bf28      	it	cs
 801cd9e:	4613      	movcs	r3, r2
 801cda0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801cda2:	89fb      	ldrh	r3, [r7, #14]
}
 801cda4:	4618      	mov	r0, r3
 801cda6:	3718      	adds	r7, #24
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}
 801cdac:	08026aa4 	.word	0x08026aa4
 801cdb0:	080271f4 	.word	0x080271f4
 801cdb4:	08026b2c 	.word	0x08026b2c

0801cdb8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b084      	sub	sp, #16
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	6078      	str	r0, [r7, #4]
 801cdc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801cdc2:	683b      	ldr	r3, [r7, #0]
 801cdc4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d119      	bne.n	801ce00 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801cdcc:	4b10      	ldr	r3, [pc, #64]	@ (801ce10 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801cdce:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801cdd2:	4910      	ldr	r1, [pc, #64]	@ (801ce14 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801cdd4:	4810      	ldr	r0, [pc, #64]	@ (801ce18 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801cdd6:	f005 fd9f 	bl	8022918 <iprintf>

  while (pcb != NULL) {
 801cdda:	e011      	b.n	801ce00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	681a      	ldr	r2, [r3, #0]
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	429a      	cmp	r2, r3
 801cde6:	d108      	bne.n	801cdfa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801cdee:	68f8      	ldr	r0, [r7, #12]
 801cdf0:	f7fe fd4a 	bl	801b888 <tcp_abort>
      pcb = next;
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	60fb      	str	r3, [r7, #12]
 801cdf8:	e002      	b.n	801ce00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	68db      	ldr	r3, [r3, #12]
 801cdfe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d1ea      	bne.n	801cddc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ce06:	bf00      	nop
 801ce08:	bf00      	nop
 801ce0a:	3710      	adds	r7, #16
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd80      	pop	{r7, pc}
 801ce10:	08026aa4 	.word	0x08026aa4
 801ce14:	0802721c 	.word	0x0802721c
 801ce18:	08026b2c 	.word	0x08026b2c

0801ce1c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b084      	sub	sp, #16
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
 801ce24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d02a      	beq.n	801ce82 <tcp_netif_ip_addr_changed+0x66>
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d026      	beq.n	801ce82 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ce34:	4b15      	ldr	r3, [pc, #84]	@ (801ce8c <tcp_netif_ip_addr_changed+0x70>)
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	4619      	mov	r1, r3
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7ff ffbc 	bl	801cdb8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801ce40:	4b13      	ldr	r3, [pc, #76]	@ (801ce90 <tcp_netif_ip_addr_changed+0x74>)
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	4619      	mov	r1, r3
 801ce46:	6878      	ldr	r0, [r7, #4]
 801ce48:	f7ff ffb6 	bl	801cdb8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ce4c:	683b      	ldr	r3, [r7, #0]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d017      	beq.n	801ce82 <tcp_netif_ip_addr_changed+0x66>
 801ce52:	683b      	ldr	r3, [r7, #0]
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d013      	beq.n	801ce82 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ce5a:	4b0e      	ldr	r3, [pc, #56]	@ (801ce94 <tcp_netif_ip_addr_changed+0x78>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	60fb      	str	r3, [r7, #12]
 801ce60:	e00c      	b.n	801ce7c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	681a      	ldr	r2, [r3, #0]
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d103      	bne.n	801ce76 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	681a      	ldr	r2, [r3, #0]
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	68db      	ldr	r3, [r3, #12]
 801ce7a:	60fb      	str	r3, [r7, #12]
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d1ef      	bne.n	801ce62 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801ce82:	bf00      	nop
 801ce84:	3710      	adds	r7, #16
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	20010024 	.word	0x20010024
 801ce90:	2001001c 	.word	0x2001001c
 801ce94:	20010020 	.word	0x20010020

0801ce98 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b082      	sub	sp, #8
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d007      	beq.n	801ceb8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ceac:	4618      	mov	r0, r3
 801ceae:	f7ff fb6f 	bl	801c590 <tcp_segs_free>
    pcb->ooseq = NULL;
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801ceb8:	bf00      	nop
 801ceba:	3708      	adds	r7, #8
 801cebc:	46bd      	mov	sp, r7
 801cebe:	bd80      	pop	{r7, pc}

0801cec0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801cec0:	b590      	push	{r4, r7, lr}
 801cec2:	b08d      	sub	sp, #52	@ 0x34
 801cec4:	af04      	add	r7, sp, #16
 801cec6:	6078      	str	r0, [r7, #4]
 801cec8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d105      	bne.n	801cedc <tcp_input+0x1c>
 801ced0:	4b9b      	ldr	r3, [pc, #620]	@ (801d140 <tcp_input+0x280>)
 801ced2:	2283      	movs	r2, #131	@ 0x83
 801ced4:	499b      	ldr	r1, [pc, #620]	@ (801d144 <tcp_input+0x284>)
 801ced6:	489c      	ldr	r0, [pc, #624]	@ (801d148 <tcp_input+0x288>)
 801ced8:	f005 fd1e 	bl	8022918 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	685b      	ldr	r3, [r3, #4]
 801cee0:	4a9a      	ldr	r2, [pc, #616]	@ (801d14c <tcp_input+0x28c>)
 801cee2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	895b      	ldrh	r3, [r3, #10]
 801cee8:	2b13      	cmp	r3, #19
 801ceea:	f240 83d1 	bls.w	801d690 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ceee:	4b98      	ldr	r3, [pc, #608]	@ (801d150 <tcp_input+0x290>)
 801cef0:	695b      	ldr	r3, [r3, #20]
 801cef2:	4a97      	ldr	r2, [pc, #604]	@ (801d150 <tcp_input+0x290>)
 801cef4:	6812      	ldr	r2, [r2, #0]
 801cef6:	4611      	mov	r1, r2
 801cef8:	4618      	mov	r0, r3
 801cefa:	f7fb f9d7 	bl	80182ac <ip4_addr_isbroadcast_u32>
 801cefe:	4603      	mov	r3, r0
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	f040 83c7 	bne.w	801d694 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801cf06:	4b92      	ldr	r3, [pc, #584]	@ (801d150 <tcp_input+0x290>)
 801cf08:	695b      	ldr	r3, [r3, #20]
 801cf0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801cf0e:	2be0      	cmp	r3, #224	@ 0xe0
 801cf10:	f000 83c0 	beq.w	801d694 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801cf14:	4b8d      	ldr	r3, [pc, #564]	@ (801d14c <tcp_input+0x28c>)
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	899b      	ldrh	r3, [r3, #12]
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f7fc f96f 	bl	8019200 <lwip_htons>
 801cf22:	4603      	mov	r3, r0
 801cf24:	0b1b      	lsrs	r3, r3, #12
 801cf26:	b29b      	uxth	r3, r3
 801cf28:	b2db      	uxtb	r3, r3
 801cf2a:	009b      	lsls	r3, r3, #2
 801cf2c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801cf2e:	7cbb      	ldrb	r3, [r7, #18]
 801cf30:	2b13      	cmp	r3, #19
 801cf32:	f240 83b1 	bls.w	801d698 <tcp_input+0x7d8>
 801cf36:	7cbb      	ldrb	r3, [r7, #18]
 801cf38:	b29a      	uxth	r2, r3
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	891b      	ldrh	r3, [r3, #8]
 801cf3e:	429a      	cmp	r2, r3
 801cf40:	f200 83aa 	bhi.w	801d698 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801cf44:	7cbb      	ldrb	r3, [r7, #18]
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	3b14      	subs	r3, #20
 801cf4a:	b29a      	uxth	r2, r3
 801cf4c:	4b81      	ldr	r3, [pc, #516]	@ (801d154 <tcp_input+0x294>)
 801cf4e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801cf50:	4b81      	ldr	r3, [pc, #516]	@ (801d158 <tcp_input+0x298>)
 801cf52:	2200      	movs	r2, #0
 801cf54:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	895a      	ldrh	r2, [r3, #10]
 801cf5a:	7cbb      	ldrb	r3, [r7, #18]
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	d309      	bcc.n	801cf76 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801cf62:	4b7c      	ldr	r3, [pc, #496]	@ (801d154 <tcp_input+0x294>)
 801cf64:	881a      	ldrh	r2, [r3, #0]
 801cf66:	4b7d      	ldr	r3, [pc, #500]	@ (801d15c <tcp_input+0x29c>)
 801cf68:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cf6a:	7cbb      	ldrb	r3, [r7, #18]
 801cf6c:	4619      	mov	r1, r3
 801cf6e:	6878      	ldr	r0, [r7, #4]
 801cf70:	f7fd fd40 	bl	801a9f4 <pbuf_remove_header>
 801cf74:	e04e      	b.n	801d014 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d105      	bne.n	801cf8a <tcp_input+0xca>
 801cf7e:	4b70      	ldr	r3, [pc, #448]	@ (801d140 <tcp_input+0x280>)
 801cf80:	22c2      	movs	r2, #194	@ 0xc2
 801cf82:	4977      	ldr	r1, [pc, #476]	@ (801d160 <tcp_input+0x2a0>)
 801cf84:	4870      	ldr	r0, [pc, #448]	@ (801d148 <tcp_input+0x288>)
 801cf86:	f005 fcc7 	bl	8022918 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801cf8a:	2114      	movs	r1, #20
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f7fd fd31 	bl	801a9f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	895a      	ldrh	r2, [r3, #10]
 801cf96:	4b71      	ldr	r3, [pc, #452]	@ (801d15c <tcp_input+0x29c>)
 801cf98:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801cf9a:	4b6e      	ldr	r3, [pc, #440]	@ (801d154 <tcp_input+0x294>)
 801cf9c:	881a      	ldrh	r2, [r3, #0]
 801cf9e:	4b6f      	ldr	r3, [pc, #444]	@ (801d15c <tcp_input+0x29c>)
 801cfa0:	881b      	ldrh	r3, [r3, #0]
 801cfa2:	1ad3      	subs	r3, r2, r3
 801cfa4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801cfa6:	4b6d      	ldr	r3, [pc, #436]	@ (801d15c <tcp_input+0x29c>)
 801cfa8:	881b      	ldrh	r3, [r3, #0]
 801cfaa:	4619      	mov	r1, r3
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f7fd fd21 	bl	801a9f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	895b      	ldrh	r3, [r3, #10]
 801cfb8:	8a3a      	ldrh	r2, [r7, #16]
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	f200 836e 	bhi.w	801d69c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	685b      	ldr	r3, [r3, #4]
 801cfc6:	4a64      	ldr	r2, [pc, #400]	@ (801d158 <tcp_input+0x298>)
 801cfc8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	8a3a      	ldrh	r2, [r7, #16]
 801cfd0:	4611      	mov	r1, r2
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	f7fd fd0e 	bl	801a9f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	891a      	ldrh	r2, [r3, #8]
 801cfdc:	8a3b      	ldrh	r3, [r7, #16]
 801cfde:	1ad3      	subs	r3, r2, r3
 801cfe0:	b29a      	uxth	r2, r3
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	895b      	ldrh	r3, [r3, #10]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d005      	beq.n	801cffa <tcp_input+0x13a>
 801cfee:	4b54      	ldr	r3, [pc, #336]	@ (801d140 <tcp_input+0x280>)
 801cff0:	22df      	movs	r2, #223	@ 0xdf
 801cff2:	495c      	ldr	r1, [pc, #368]	@ (801d164 <tcp_input+0x2a4>)
 801cff4:	4854      	ldr	r0, [pc, #336]	@ (801d148 <tcp_input+0x288>)
 801cff6:	f005 fc8f 	bl	8022918 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	891a      	ldrh	r2, [r3, #8]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	891b      	ldrh	r3, [r3, #8]
 801d004:	429a      	cmp	r2, r3
 801d006:	d005      	beq.n	801d014 <tcp_input+0x154>
 801d008:	4b4d      	ldr	r3, [pc, #308]	@ (801d140 <tcp_input+0x280>)
 801d00a:	22e0      	movs	r2, #224	@ 0xe0
 801d00c:	4956      	ldr	r1, [pc, #344]	@ (801d168 <tcp_input+0x2a8>)
 801d00e:	484e      	ldr	r0, [pc, #312]	@ (801d148 <tcp_input+0x288>)
 801d010:	f005 fc82 	bl	8022918 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d014:	4b4d      	ldr	r3, [pc, #308]	@ (801d14c <tcp_input+0x28c>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	881b      	ldrh	r3, [r3, #0]
 801d01a:	b29b      	uxth	r3, r3
 801d01c:	4a4b      	ldr	r2, [pc, #300]	@ (801d14c <tcp_input+0x28c>)
 801d01e:	6814      	ldr	r4, [r2, #0]
 801d020:	4618      	mov	r0, r3
 801d022:	f7fc f8ed 	bl	8019200 <lwip_htons>
 801d026:	4603      	mov	r3, r0
 801d028:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d02a:	4b48      	ldr	r3, [pc, #288]	@ (801d14c <tcp_input+0x28c>)
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	885b      	ldrh	r3, [r3, #2]
 801d030:	b29b      	uxth	r3, r3
 801d032:	4a46      	ldr	r2, [pc, #280]	@ (801d14c <tcp_input+0x28c>)
 801d034:	6814      	ldr	r4, [r2, #0]
 801d036:	4618      	mov	r0, r3
 801d038:	f7fc f8e2 	bl	8019200 <lwip_htons>
 801d03c:	4603      	mov	r3, r0
 801d03e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d040:	4b42      	ldr	r3, [pc, #264]	@ (801d14c <tcp_input+0x28c>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	685b      	ldr	r3, [r3, #4]
 801d046:	4a41      	ldr	r2, [pc, #260]	@ (801d14c <tcp_input+0x28c>)
 801d048:	6814      	ldr	r4, [r2, #0]
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7fc f8ed 	bl	801922a <lwip_htonl>
 801d050:	4603      	mov	r3, r0
 801d052:	6063      	str	r3, [r4, #4]
 801d054:	6863      	ldr	r3, [r4, #4]
 801d056:	4a45      	ldr	r2, [pc, #276]	@ (801d16c <tcp_input+0x2ac>)
 801d058:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d05a:	4b3c      	ldr	r3, [pc, #240]	@ (801d14c <tcp_input+0x28c>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	689b      	ldr	r3, [r3, #8]
 801d060:	4a3a      	ldr	r2, [pc, #232]	@ (801d14c <tcp_input+0x28c>)
 801d062:	6814      	ldr	r4, [r2, #0]
 801d064:	4618      	mov	r0, r3
 801d066:	f7fc f8e0 	bl	801922a <lwip_htonl>
 801d06a:	4603      	mov	r3, r0
 801d06c:	60a3      	str	r3, [r4, #8]
 801d06e:	68a3      	ldr	r3, [r4, #8]
 801d070:	4a3f      	ldr	r2, [pc, #252]	@ (801d170 <tcp_input+0x2b0>)
 801d072:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d074:	4b35      	ldr	r3, [pc, #212]	@ (801d14c <tcp_input+0x28c>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	89db      	ldrh	r3, [r3, #14]
 801d07a:	b29b      	uxth	r3, r3
 801d07c:	4a33      	ldr	r2, [pc, #204]	@ (801d14c <tcp_input+0x28c>)
 801d07e:	6814      	ldr	r4, [r2, #0]
 801d080:	4618      	mov	r0, r3
 801d082:	f7fc f8bd 	bl	8019200 <lwip_htons>
 801d086:	4603      	mov	r3, r0
 801d088:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801d08a:	4b30      	ldr	r3, [pc, #192]	@ (801d14c <tcp_input+0x28c>)
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	899b      	ldrh	r3, [r3, #12]
 801d090:	b29b      	uxth	r3, r3
 801d092:	4618      	mov	r0, r3
 801d094:	f7fc f8b4 	bl	8019200 <lwip_htons>
 801d098:	4603      	mov	r3, r0
 801d09a:	b2db      	uxtb	r3, r3
 801d09c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0a0:	b2da      	uxtb	r2, r3
 801d0a2:	4b34      	ldr	r3, [pc, #208]	@ (801d174 <tcp_input+0x2b4>)
 801d0a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	891a      	ldrh	r2, [r3, #8]
 801d0aa:	4b33      	ldr	r3, [pc, #204]	@ (801d178 <tcp_input+0x2b8>)
 801d0ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d0ae:	4b31      	ldr	r3, [pc, #196]	@ (801d174 <tcp_input+0x2b4>)
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	f003 0303 	and.w	r3, r3, #3
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d00c      	beq.n	801d0d4 <tcp_input+0x214>
    tcplen++;
 801d0ba:	4b2f      	ldr	r3, [pc, #188]	@ (801d178 <tcp_input+0x2b8>)
 801d0bc:	881b      	ldrh	r3, [r3, #0]
 801d0be:	3301      	adds	r3, #1
 801d0c0:	b29a      	uxth	r2, r3
 801d0c2:	4b2d      	ldr	r3, [pc, #180]	@ (801d178 <tcp_input+0x2b8>)
 801d0c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	891a      	ldrh	r2, [r3, #8]
 801d0ca:	4b2b      	ldr	r3, [pc, #172]	@ (801d178 <tcp_input+0x2b8>)
 801d0cc:	881b      	ldrh	r3, [r3, #0]
 801d0ce:	429a      	cmp	r2, r3
 801d0d0:	f200 82e6 	bhi.w	801d6a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d0d8:	4b28      	ldr	r3, [pc, #160]	@ (801d17c <tcp_input+0x2bc>)
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	61fb      	str	r3, [r7, #28]
 801d0de:	e09d      	b.n	801d21c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d0e0:	69fb      	ldr	r3, [r7, #28]
 801d0e2:	7d1b      	ldrb	r3, [r3, #20]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d105      	bne.n	801d0f4 <tcp_input+0x234>
 801d0e8:	4b15      	ldr	r3, [pc, #84]	@ (801d140 <tcp_input+0x280>)
 801d0ea:	22fb      	movs	r2, #251	@ 0xfb
 801d0ec:	4924      	ldr	r1, [pc, #144]	@ (801d180 <tcp_input+0x2c0>)
 801d0ee:	4816      	ldr	r0, [pc, #88]	@ (801d148 <tcp_input+0x288>)
 801d0f0:	f005 fc12 	bl	8022918 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d0f4:	69fb      	ldr	r3, [r7, #28]
 801d0f6:	7d1b      	ldrb	r3, [r3, #20]
 801d0f8:	2b0a      	cmp	r3, #10
 801d0fa:	d105      	bne.n	801d108 <tcp_input+0x248>
 801d0fc:	4b10      	ldr	r3, [pc, #64]	@ (801d140 <tcp_input+0x280>)
 801d0fe:	22fc      	movs	r2, #252	@ 0xfc
 801d100:	4920      	ldr	r1, [pc, #128]	@ (801d184 <tcp_input+0x2c4>)
 801d102:	4811      	ldr	r0, [pc, #68]	@ (801d148 <tcp_input+0x288>)
 801d104:	f005 fc08 	bl	8022918 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d108:	69fb      	ldr	r3, [r7, #28]
 801d10a:	7d1b      	ldrb	r3, [r3, #20]
 801d10c:	2b01      	cmp	r3, #1
 801d10e:	d105      	bne.n	801d11c <tcp_input+0x25c>
 801d110:	4b0b      	ldr	r3, [pc, #44]	@ (801d140 <tcp_input+0x280>)
 801d112:	22fd      	movs	r2, #253	@ 0xfd
 801d114:	491c      	ldr	r1, [pc, #112]	@ (801d188 <tcp_input+0x2c8>)
 801d116:	480c      	ldr	r0, [pc, #48]	@ (801d148 <tcp_input+0x288>)
 801d118:	f005 fbfe 	bl	8022918 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d11c:	69fb      	ldr	r3, [r7, #28]
 801d11e:	7a1b      	ldrb	r3, [r3, #8]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d033      	beq.n	801d18c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	7a1a      	ldrb	r2, [r3, #8]
 801d128:	4b09      	ldr	r3, [pc, #36]	@ (801d150 <tcp_input+0x290>)
 801d12a:	685b      	ldr	r3, [r3, #4]
 801d12c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d130:	3301      	adds	r3, #1
 801d132:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d134:	429a      	cmp	r2, r3
 801d136:	d029      	beq.n	801d18c <tcp_input+0x2cc>
      prev = pcb;
 801d138:	69fb      	ldr	r3, [r7, #28]
 801d13a:	61bb      	str	r3, [r7, #24]
      continue;
 801d13c:	e06b      	b.n	801d216 <tcp_input+0x356>
 801d13e:	bf00      	nop
 801d140:	08027250 	.word	0x08027250
 801d144:	080272c8 	.word	0x080272c8
 801d148:	080272e0 	.word	0x080272e0
 801d14c:	20010040 	.word	0x20010040
 801d150:	20008ebc 	.word	0x20008ebc
 801d154:	20010044 	.word	0x20010044
 801d158:	20010048 	.word	0x20010048
 801d15c:	20010046 	.word	0x20010046
 801d160:	08027308 	.word	0x08027308
 801d164:	08027318 	.word	0x08027318
 801d168:	08027324 	.word	0x08027324
 801d16c:	20010050 	.word	0x20010050
 801d170:	20010054 	.word	0x20010054
 801d174:	2001005c 	.word	0x2001005c
 801d178:	2001005a 	.word	0x2001005a
 801d17c:	20010024 	.word	0x20010024
 801d180:	08027344 	.word	0x08027344
 801d184:	0802736c 	.word	0x0802736c
 801d188:	08027398 	.word	0x08027398
    }

    if (pcb->remote_port == tcphdr->src &&
 801d18c:	69fb      	ldr	r3, [r7, #28]
 801d18e:	8b1a      	ldrh	r2, [r3, #24]
 801d190:	4b72      	ldr	r3, [pc, #456]	@ (801d35c <tcp_input+0x49c>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	881b      	ldrh	r3, [r3, #0]
 801d196:	b29b      	uxth	r3, r3
 801d198:	429a      	cmp	r2, r3
 801d19a:	d13a      	bne.n	801d212 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	8ada      	ldrh	r2, [r3, #22]
 801d1a0:	4b6e      	ldr	r3, [pc, #440]	@ (801d35c <tcp_input+0x49c>)
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	885b      	ldrh	r3, [r3, #2]
 801d1a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801d1a8:	429a      	cmp	r2, r3
 801d1aa:	d132      	bne.n	801d212 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d1ac:	69fb      	ldr	r3, [r7, #28]
 801d1ae:	685a      	ldr	r2, [r3, #4]
 801d1b0:	4b6b      	ldr	r3, [pc, #428]	@ (801d360 <tcp_input+0x4a0>)
 801d1b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801d1b4:	429a      	cmp	r2, r3
 801d1b6:	d12c      	bne.n	801d212 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d1b8:	69fb      	ldr	r3, [r7, #28]
 801d1ba:	681a      	ldr	r2, [r3, #0]
 801d1bc:	4b68      	ldr	r3, [pc, #416]	@ (801d360 <tcp_input+0x4a0>)
 801d1be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d1c0:	429a      	cmp	r2, r3
 801d1c2:	d126      	bne.n	801d212 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d1c4:	69fb      	ldr	r3, [r7, #28]
 801d1c6:	68db      	ldr	r3, [r3, #12]
 801d1c8:	69fa      	ldr	r2, [r7, #28]
 801d1ca:	429a      	cmp	r2, r3
 801d1cc:	d106      	bne.n	801d1dc <tcp_input+0x31c>
 801d1ce:	4b65      	ldr	r3, [pc, #404]	@ (801d364 <tcp_input+0x4a4>)
 801d1d0:	f240 120d 	movw	r2, #269	@ 0x10d
 801d1d4:	4964      	ldr	r1, [pc, #400]	@ (801d368 <tcp_input+0x4a8>)
 801d1d6:	4865      	ldr	r0, [pc, #404]	@ (801d36c <tcp_input+0x4ac>)
 801d1d8:	f005 fb9e 	bl	8022918 <iprintf>
      if (prev != NULL) {
 801d1dc:	69bb      	ldr	r3, [r7, #24]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d00a      	beq.n	801d1f8 <tcp_input+0x338>
        prev->next = pcb->next;
 801d1e2:	69fb      	ldr	r3, [r7, #28]
 801d1e4:	68da      	ldr	r2, [r3, #12]
 801d1e6:	69bb      	ldr	r3, [r7, #24]
 801d1e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801d1ea:	4b61      	ldr	r3, [pc, #388]	@ (801d370 <tcp_input+0x4b0>)
 801d1ec:	681a      	ldr	r2, [r3, #0]
 801d1ee:	69fb      	ldr	r3, [r7, #28]
 801d1f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801d1f2:	4a5f      	ldr	r2, [pc, #380]	@ (801d370 <tcp_input+0x4b0>)
 801d1f4:	69fb      	ldr	r3, [r7, #28]
 801d1f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d1f8:	69fb      	ldr	r3, [r7, #28]
 801d1fa:	68db      	ldr	r3, [r3, #12]
 801d1fc:	69fa      	ldr	r2, [r7, #28]
 801d1fe:	429a      	cmp	r2, r3
 801d200:	d111      	bne.n	801d226 <tcp_input+0x366>
 801d202:	4b58      	ldr	r3, [pc, #352]	@ (801d364 <tcp_input+0x4a4>)
 801d204:	f240 1215 	movw	r2, #277	@ 0x115
 801d208:	495a      	ldr	r1, [pc, #360]	@ (801d374 <tcp_input+0x4b4>)
 801d20a:	4858      	ldr	r0, [pc, #352]	@ (801d36c <tcp_input+0x4ac>)
 801d20c:	f005 fb84 	bl	8022918 <iprintf>
      break;
 801d210:	e009      	b.n	801d226 <tcp_input+0x366>
    }
    prev = pcb;
 801d212:	69fb      	ldr	r3, [r7, #28]
 801d214:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d216:	69fb      	ldr	r3, [r7, #28]
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	61fb      	str	r3, [r7, #28]
 801d21c:	69fb      	ldr	r3, [r7, #28]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	f47f af5e 	bne.w	801d0e0 <tcp_input+0x220>
 801d224:	e000      	b.n	801d228 <tcp_input+0x368>
      break;
 801d226:	bf00      	nop
  }

  if (pcb == NULL) {
 801d228:	69fb      	ldr	r3, [r7, #28]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	f040 80aa 	bne.w	801d384 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d230:	4b51      	ldr	r3, [pc, #324]	@ (801d378 <tcp_input+0x4b8>)
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	61fb      	str	r3, [r7, #28]
 801d236:	e03f      	b.n	801d2b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d238:	69fb      	ldr	r3, [r7, #28]
 801d23a:	7d1b      	ldrb	r3, [r3, #20]
 801d23c:	2b0a      	cmp	r3, #10
 801d23e:	d006      	beq.n	801d24e <tcp_input+0x38e>
 801d240:	4b48      	ldr	r3, [pc, #288]	@ (801d364 <tcp_input+0x4a4>)
 801d242:	f240 121f 	movw	r2, #287	@ 0x11f
 801d246:	494d      	ldr	r1, [pc, #308]	@ (801d37c <tcp_input+0x4bc>)
 801d248:	4848      	ldr	r0, [pc, #288]	@ (801d36c <tcp_input+0x4ac>)
 801d24a:	f005 fb65 	bl	8022918 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d24e:	69fb      	ldr	r3, [r7, #28]
 801d250:	7a1b      	ldrb	r3, [r3, #8]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d009      	beq.n	801d26a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d256:	69fb      	ldr	r3, [r7, #28]
 801d258:	7a1a      	ldrb	r2, [r3, #8]
 801d25a:	4b41      	ldr	r3, [pc, #260]	@ (801d360 <tcp_input+0x4a0>)
 801d25c:	685b      	ldr	r3, [r3, #4]
 801d25e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d262:	3301      	adds	r3, #1
 801d264:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d266:	429a      	cmp	r2, r3
 801d268:	d122      	bne.n	801d2b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801d26a:	69fb      	ldr	r3, [r7, #28]
 801d26c:	8b1a      	ldrh	r2, [r3, #24]
 801d26e:	4b3b      	ldr	r3, [pc, #236]	@ (801d35c <tcp_input+0x49c>)
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	881b      	ldrh	r3, [r3, #0]
 801d274:	b29b      	uxth	r3, r3
 801d276:	429a      	cmp	r2, r3
 801d278:	d11b      	bne.n	801d2b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801d27a:	69fb      	ldr	r3, [r7, #28]
 801d27c:	8ada      	ldrh	r2, [r3, #22]
 801d27e:	4b37      	ldr	r3, [pc, #220]	@ (801d35c <tcp_input+0x49c>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	885b      	ldrh	r3, [r3, #2]
 801d284:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801d286:	429a      	cmp	r2, r3
 801d288:	d113      	bne.n	801d2b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d28a:	69fb      	ldr	r3, [r7, #28]
 801d28c:	685a      	ldr	r2, [r3, #4]
 801d28e:	4b34      	ldr	r3, [pc, #208]	@ (801d360 <tcp_input+0x4a0>)
 801d290:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801d292:	429a      	cmp	r2, r3
 801d294:	d10d      	bne.n	801d2b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d296:	69fb      	ldr	r3, [r7, #28]
 801d298:	681a      	ldr	r2, [r3, #0]
 801d29a:	4b31      	ldr	r3, [pc, #196]	@ (801d360 <tcp_input+0x4a0>)
 801d29c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d29e:	429a      	cmp	r2, r3
 801d2a0:	d107      	bne.n	801d2b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801d2a2:	69f8      	ldr	r0, [r7, #28]
 801d2a4:	f000 fb56 	bl	801d954 <tcp_timewait_input>
        }
        pbuf_free(p);
 801d2a8:	6878      	ldr	r0, [r7, #4]
 801d2aa:	f7fd fc5b 	bl	801ab64 <pbuf_free>
        return;
 801d2ae:	e1fd      	b.n	801d6ac <tcp_input+0x7ec>
        continue;
 801d2b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d2b2:	69fb      	ldr	r3, [r7, #28]
 801d2b4:	68db      	ldr	r3, [r3, #12]
 801d2b6:	61fb      	str	r3, [r7, #28]
 801d2b8:	69fb      	ldr	r3, [r7, #28]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d1bc      	bne.n	801d238 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d2c2:	4b2f      	ldr	r3, [pc, #188]	@ (801d380 <tcp_input+0x4c0>)
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	617b      	str	r3, [r7, #20]
 801d2c8:	e02a      	b.n	801d320 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d2ca:	697b      	ldr	r3, [r7, #20]
 801d2cc:	7a1b      	ldrb	r3, [r3, #8]
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d00c      	beq.n	801d2ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d2d2:	697b      	ldr	r3, [r7, #20]
 801d2d4:	7a1a      	ldrb	r2, [r3, #8]
 801d2d6:	4b22      	ldr	r3, [pc, #136]	@ (801d360 <tcp_input+0x4a0>)
 801d2d8:	685b      	ldr	r3, [r3, #4]
 801d2da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d2de:	3301      	adds	r3, #1
 801d2e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d2e2:	429a      	cmp	r2, r3
 801d2e4:	d002      	beq.n	801d2ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801d2e6:	697b      	ldr	r3, [r7, #20]
 801d2e8:	61bb      	str	r3, [r7, #24]
        continue;
 801d2ea:	e016      	b.n	801d31a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801d2ec:	697b      	ldr	r3, [r7, #20]
 801d2ee:	8ada      	ldrh	r2, [r3, #22]
 801d2f0:	4b1a      	ldr	r3, [pc, #104]	@ (801d35c <tcp_input+0x49c>)
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	885b      	ldrh	r3, [r3, #2]
 801d2f6:	b29b      	uxth	r3, r3
 801d2f8:	429a      	cmp	r2, r3
 801d2fa:	d10c      	bne.n	801d316 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d2fc:	697b      	ldr	r3, [r7, #20]
 801d2fe:	681a      	ldr	r2, [r3, #0]
 801d300:	4b17      	ldr	r3, [pc, #92]	@ (801d360 <tcp_input+0x4a0>)
 801d302:	695b      	ldr	r3, [r3, #20]
 801d304:	429a      	cmp	r2, r3
 801d306:	d00f      	beq.n	801d328 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801d308:	697b      	ldr	r3, [r7, #20]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d00d      	beq.n	801d32a <tcp_input+0x46a>
 801d30e:	697b      	ldr	r3, [r7, #20]
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d009      	beq.n	801d32a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801d316:	697b      	ldr	r3, [r7, #20]
 801d318:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d31a:	697b      	ldr	r3, [r7, #20]
 801d31c:	68db      	ldr	r3, [r3, #12]
 801d31e:	617b      	str	r3, [r7, #20]
 801d320:	697b      	ldr	r3, [r7, #20]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d1d1      	bne.n	801d2ca <tcp_input+0x40a>
 801d326:	e000      	b.n	801d32a <tcp_input+0x46a>
            break;
 801d328:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801d32a:	697b      	ldr	r3, [r7, #20]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d029      	beq.n	801d384 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801d330:	69bb      	ldr	r3, [r7, #24]
 801d332:	2b00      	cmp	r3, #0
 801d334:	d00a      	beq.n	801d34c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	68da      	ldr	r2, [r3, #12]
 801d33a:	69bb      	ldr	r3, [r7, #24]
 801d33c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801d33e:	4b10      	ldr	r3, [pc, #64]	@ (801d380 <tcp_input+0x4c0>)
 801d340:	681a      	ldr	r2, [r3, #0]
 801d342:	697b      	ldr	r3, [r7, #20]
 801d344:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801d346:	4a0e      	ldr	r2, [pc, #56]	@ (801d380 <tcp_input+0x4c0>)
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801d34c:	6978      	ldr	r0, [r7, #20]
 801d34e:	f000 fa03 	bl	801d758 <tcp_listen_input>
      }
      pbuf_free(p);
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f7fd fc06 	bl	801ab64 <pbuf_free>
      return;
 801d358:	e1a8      	b.n	801d6ac <tcp_input+0x7ec>
 801d35a:	bf00      	nop
 801d35c:	20010040 	.word	0x20010040
 801d360:	20008ebc 	.word	0x20008ebc
 801d364:	08027250 	.word	0x08027250
 801d368:	080273c0 	.word	0x080273c0
 801d36c:	080272e0 	.word	0x080272e0
 801d370:	20010024 	.word	0x20010024
 801d374:	080273ec 	.word	0x080273ec
 801d378:	20010028 	.word	0x20010028
 801d37c:	08027418 	.word	0x08027418
 801d380:	20010020 	.word	0x20010020
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801d384:	69fb      	ldr	r3, [r7, #28]
 801d386:	2b00      	cmp	r3, #0
 801d388:	f000 8158 	beq.w	801d63c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801d38c:	4b95      	ldr	r3, [pc, #596]	@ (801d5e4 <tcp_input+0x724>)
 801d38e:	2200      	movs	r2, #0
 801d390:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	891a      	ldrh	r2, [r3, #8]
 801d396:	4b93      	ldr	r3, [pc, #588]	@ (801d5e4 <tcp_input+0x724>)
 801d398:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801d39a:	4a92      	ldr	r2, [pc, #584]	@ (801d5e4 <tcp_input+0x724>)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801d3a0:	4b91      	ldr	r3, [pc, #580]	@ (801d5e8 <tcp_input+0x728>)
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	4a8f      	ldr	r2, [pc, #572]	@ (801d5e4 <tcp_input+0x724>)
 801d3a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801d3a8:	4b90      	ldr	r3, [pc, #576]	@ (801d5ec <tcp_input+0x72c>)
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801d3ae:	4b90      	ldr	r3, [pc, #576]	@ (801d5f0 <tcp_input+0x730>)
 801d3b0:	2200      	movs	r2, #0
 801d3b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801d3b4:	4b8f      	ldr	r3, [pc, #572]	@ (801d5f4 <tcp_input+0x734>)
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801d3ba:	4b8f      	ldr	r3, [pc, #572]	@ (801d5f8 <tcp_input+0x738>)
 801d3bc:	781b      	ldrb	r3, [r3, #0]
 801d3be:	f003 0308 	and.w	r3, r3, #8
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d006      	beq.n	801d3d4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	7b5b      	ldrb	r3, [r3, #13]
 801d3ca:	f043 0301 	orr.w	r3, r3, #1
 801d3ce:	b2da      	uxtb	r2, r3
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801d3d4:	69fb      	ldr	r3, [r7, #28]
 801d3d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d017      	beq.n	801d40c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d3dc:	69f8      	ldr	r0, [r7, #28]
 801d3de:	f7ff f859 	bl	801c494 <tcp_process_refused_data>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	f113 0f0d 	cmn.w	r3, #13
 801d3e8:	d007      	beq.n	801d3fa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d3ea:	69fb      	ldr	r3, [r7, #28]
 801d3ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d00c      	beq.n	801d40c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d3f2:	4b82      	ldr	r3, [pc, #520]	@ (801d5fc <tcp_input+0x73c>)
 801d3f4:	881b      	ldrh	r3, [r3, #0]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d008      	beq.n	801d40c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801d3fa:	69fb      	ldr	r3, [r7, #28]
 801d3fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	f040 80e4 	bne.w	801d5cc <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801d404:	69f8      	ldr	r0, [r7, #28]
 801d406:	f003 fe01 	bl	802100c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801d40a:	e0df      	b.n	801d5cc <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801d40c:	4a7c      	ldr	r2, [pc, #496]	@ (801d600 <tcp_input+0x740>)
 801d40e:	69fb      	ldr	r3, [r7, #28]
 801d410:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801d412:	69f8      	ldr	r0, [r7, #28]
 801d414:	f000 fb18 	bl	801da48 <tcp_process>
 801d418:	4603      	mov	r3, r0
 801d41a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801d41c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d420:	f113 0f0d 	cmn.w	r3, #13
 801d424:	f000 80d4 	beq.w	801d5d0 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801d428:	4b71      	ldr	r3, [pc, #452]	@ (801d5f0 <tcp_input+0x730>)
 801d42a:	781b      	ldrb	r3, [r3, #0]
 801d42c:	f003 0308 	and.w	r3, r3, #8
 801d430:	2b00      	cmp	r3, #0
 801d432:	d015      	beq.n	801d460 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801d434:	69fb      	ldr	r3, [r7, #28]
 801d436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d008      	beq.n	801d450 <tcp_input+0x590>
 801d43e:	69fb      	ldr	r3, [r7, #28]
 801d440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d444:	69fa      	ldr	r2, [r7, #28]
 801d446:	6912      	ldr	r2, [r2, #16]
 801d448:	f06f 010d 	mvn.w	r1, #13
 801d44c:	4610      	mov	r0, r2
 801d44e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d450:	69f9      	ldr	r1, [r7, #28]
 801d452:	486c      	ldr	r0, [pc, #432]	@ (801d604 <tcp_input+0x744>)
 801d454:	f7ff fbbc 	bl	801cbd0 <tcp_pcb_remove>
        tcp_free(pcb);
 801d458:	69f8      	ldr	r0, [r7, #28]
 801d45a:	f7fd fed1 	bl	801b200 <tcp_free>
 801d45e:	e0da      	b.n	801d616 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801d460:	2300      	movs	r3, #0
 801d462:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801d464:	4b63      	ldr	r3, [pc, #396]	@ (801d5f4 <tcp_input+0x734>)
 801d466:	881b      	ldrh	r3, [r3, #0]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d01d      	beq.n	801d4a8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801d46c:	4b61      	ldr	r3, [pc, #388]	@ (801d5f4 <tcp_input+0x734>)
 801d46e:	881b      	ldrh	r3, [r3, #0]
 801d470:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801d472:	69fb      	ldr	r3, [r7, #28]
 801d474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d00a      	beq.n	801d492 <tcp_input+0x5d2>
 801d47c:	69fb      	ldr	r3, [r7, #28]
 801d47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d482:	69fa      	ldr	r2, [r7, #28]
 801d484:	6910      	ldr	r0, [r2, #16]
 801d486:	89fa      	ldrh	r2, [r7, #14]
 801d488:	69f9      	ldr	r1, [r7, #28]
 801d48a:	4798      	blx	r3
 801d48c:	4603      	mov	r3, r0
 801d48e:	74fb      	strb	r3, [r7, #19]
 801d490:	e001      	b.n	801d496 <tcp_input+0x5d6>
 801d492:	2300      	movs	r3, #0
 801d494:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801d496:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d49a:	f113 0f0d 	cmn.w	r3, #13
 801d49e:	f000 8099 	beq.w	801d5d4 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801d4a2:	4b54      	ldr	r3, [pc, #336]	@ (801d5f4 <tcp_input+0x734>)
 801d4a4:	2200      	movs	r2, #0
 801d4a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801d4a8:	69f8      	ldr	r0, [r7, #28]
 801d4aa:	f000 f915 	bl	801d6d8 <tcp_input_delayed_close>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	f040 8091 	bne.w	801d5d8 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801d4b6:	4b4d      	ldr	r3, [pc, #308]	@ (801d5ec <tcp_input+0x72c>)
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d041      	beq.n	801d542 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801d4be:	69fb      	ldr	r3, [r7, #28]
 801d4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d006      	beq.n	801d4d4 <tcp_input+0x614>
 801d4c6:	4b50      	ldr	r3, [pc, #320]	@ (801d608 <tcp_input+0x748>)
 801d4c8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801d4cc:	494f      	ldr	r1, [pc, #316]	@ (801d60c <tcp_input+0x74c>)
 801d4ce:	4850      	ldr	r0, [pc, #320]	@ (801d610 <tcp_input+0x750>)
 801d4d0:	f005 fa22 	bl	8022918 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801d4d4:	69fb      	ldr	r3, [r7, #28]
 801d4d6:	8b5b      	ldrh	r3, [r3, #26]
 801d4d8:	f003 0310 	and.w	r3, r3, #16
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d008      	beq.n	801d4f2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801d4e0:	4b42      	ldr	r3, [pc, #264]	@ (801d5ec <tcp_input+0x72c>)
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	f7fd fb3d 	bl	801ab64 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801d4ea:	69f8      	ldr	r0, [r7, #28]
 801d4ec:	f7fe f9cc 	bl	801b888 <tcp_abort>
            goto aborted;
 801d4f0:	e091      	b.n	801d616 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d4f2:	69fb      	ldr	r3, [r7, #28]
 801d4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d00c      	beq.n	801d516 <tcp_input+0x656>
 801d4fc:	69fb      	ldr	r3, [r7, #28]
 801d4fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801d502:	69fb      	ldr	r3, [r7, #28]
 801d504:	6918      	ldr	r0, [r3, #16]
 801d506:	4b39      	ldr	r3, [pc, #228]	@ (801d5ec <tcp_input+0x72c>)
 801d508:	681a      	ldr	r2, [r3, #0]
 801d50a:	2300      	movs	r3, #0
 801d50c:	69f9      	ldr	r1, [r7, #28]
 801d50e:	47a0      	blx	r4
 801d510:	4603      	mov	r3, r0
 801d512:	74fb      	strb	r3, [r7, #19]
 801d514:	e008      	b.n	801d528 <tcp_input+0x668>
 801d516:	4b35      	ldr	r3, [pc, #212]	@ (801d5ec <tcp_input+0x72c>)
 801d518:	681a      	ldr	r2, [r3, #0]
 801d51a:	2300      	movs	r3, #0
 801d51c:	69f9      	ldr	r1, [r7, #28]
 801d51e:	2000      	movs	r0, #0
 801d520:	f7ff f890 	bl	801c644 <tcp_recv_null>
 801d524:	4603      	mov	r3, r0
 801d526:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801d528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d52c:	f113 0f0d 	cmn.w	r3, #13
 801d530:	d054      	beq.n	801d5dc <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801d532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d536:	2b00      	cmp	r3, #0
 801d538:	d003      	beq.n	801d542 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801d53a:	4b2c      	ldr	r3, [pc, #176]	@ (801d5ec <tcp_input+0x72c>)
 801d53c:	681a      	ldr	r2, [r3, #0]
 801d53e:	69fb      	ldr	r3, [r7, #28]
 801d540:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801d542:	4b2b      	ldr	r3, [pc, #172]	@ (801d5f0 <tcp_input+0x730>)
 801d544:	781b      	ldrb	r3, [r3, #0]
 801d546:	f003 0320 	and.w	r3, r3, #32
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d031      	beq.n	801d5b2 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801d54e:	69fb      	ldr	r3, [r7, #28]
 801d550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d552:	2b00      	cmp	r3, #0
 801d554:	d009      	beq.n	801d56a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801d556:	69fb      	ldr	r3, [r7, #28]
 801d558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d55a:	7b5a      	ldrb	r2, [r3, #13]
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d560:	f042 0220 	orr.w	r2, r2, #32
 801d564:	b2d2      	uxtb	r2, r2
 801d566:	735a      	strb	r2, [r3, #13]
 801d568:	e023      	b.n	801d5b2 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801d56a:	69fb      	ldr	r3, [r7, #28]
 801d56c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d56e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801d572:	4293      	cmp	r3, r2
 801d574:	d005      	beq.n	801d582 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801d576:	69fb      	ldr	r3, [r7, #28]
 801d578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d57a:	3301      	adds	r3, #1
 801d57c:	b29a      	uxth	r2, r3
 801d57e:	69fb      	ldr	r3, [r7, #28]
 801d580:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801d582:	69fb      	ldr	r3, [r7, #28]
 801d584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d00b      	beq.n	801d5a4 <tcp_input+0x6e4>
 801d58c:	69fb      	ldr	r3, [r7, #28]
 801d58e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801d592:	69fb      	ldr	r3, [r7, #28]
 801d594:	6918      	ldr	r0, [r3, #16]
 801d596:	2300      	movs	r3, #0
 801d598:	2200      	movs	r2, #0
 801d59a:	69f9      	ldr	r1, [r7, #28]
 801d59c:	47a0      	blx	r4
 801d59e:	4603      	mov	r3, r0
 801d5a0:	74fb      	strb	r3, [r7, #19]
 801d5a2:	e001      	b.n	801d5a8 <tcp_input+0x6e8>
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801d5a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d5ac:	f113 0f0d 	cmn.w	r3, #13
 801d5b0:	d016      	beq.n	801d5e0 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801d5b2:	4b13      	ldr	r3, [pc, #76]	@ (801d600 <tcp_input+0x740>)
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801d5b8:	69f8      	ldr	r0, [r7, #28]
 801d5ba:	f000 f88d 	bl	801d6d8 <tcp_input_delayed_close>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d127      	bne.n	801d614 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801d5c4:	69f8      	ldr	r0, [r7, #28]
 801d5c6:	f002 ff1b 	bl	8020400 <tcp_output>
 801d5ca:	e024      	b.n	801d616 <tcp_input+0x756>
        goto aborted;
 801d5cc:	bf00      	nop
 801d5ce:	e022      	b.n	801d616 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801d5d0:	bf00      	nop
 801d5d2:	e020      	b.n	801d616 <tcp_input+0x756>
              goto aborted;
 801d5d4:	bf00      	nop
 801d5d6:	e01e      	b.n	801d616 <tcp_input+0x756>
          goto aborted;
 801d5d8:	bf00      	nop
 801d5da:	e01c      	b.n	801d616 <tcp_input+0x756>
            goto aborted;
 801d5dc:	bf00      	nop
 801d5de:	e01a      	b.n	801d616 <tcp_input+0x756>
              goto aborted;
 801d5e0:	bf00      	nop
 801d5e2:	e018      	b.n	801d616 <tcp_input+0x756>
 801d5e4:	20010030 	.word	0x20010030
 801d5e8:	20010040 	.word	0x20010040
 801d5ec:	20010060 	.word	0x20010060
 801d5f0:	2001005d 	.word	0x2001005d
 801d5f4:	20010058 	.word	0x20010058
 801d5f8:	2001005c 	.word	0x2001005c
 801d5fc:	2001005a 	.word	0x2001005a
 801d600:	20010064 	.word	0x20010064
 801d604:	20010024 	.word	0x20010024
 801d608:	08027250 	.word	0x08027250
 801d60c:	08027448 	.word	0x08027448
 801d610:	080272e0 	.word	0x080272e0
          goto aborted;
 801d614:	bf00      	nop
    tcp_input_pcb = NULL;
 801d616:	4b27      	ldr	r3, [pc, #156]	@ (801d6b4 <tcp_input+0x7f4>)
 801d618:	2200      	movs	r2, #0
 801d61a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801d61c:	4b26      	ldr	r3, [pc, #152]	@ (801d6b8 <tcp_input+0x7f8>)
 801d61e:	2200      	movs	r2, #0
 801d620:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801d622:	4b26      	ldr	r3, [pc, #152]	@ (801d6bc <tcp_input+0x7fc>)
 801d624:	685b      	ldr	r3, [r3, #4]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d03f      	beq.n	801d6aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801d62a:	4b24      	ldr	r3, [pc, #144]	@ (801d6bc <tcp_input+0x7fc>)
 801d62c:	685b      	ldr	r3, [r3, #4]
 801d62e:	4618      	mov	r0, r3
 801d630:	f7fd fa98 	bl	801ab64 <pbuf_free>
      inseg.p = NULL;
 801d634:	4b21      	ldr	r3, [pc, #132]	@ (801d6bc <tcp_input+0x7fc>)
 801d636:	2200      	movs	r2, #0
 801d638:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801d63a:	e036      	b.n	801d6aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801d63c:	4b20      	ldr	r3, [pc, #128]	@ (801d6c0 <tcp_input+0x800>)
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	899b      	ldrh	r3, [r3, #12]
 801d642:	b29b      	uxth	r3, r3
 801d644:	4618      	mov	r0, r3
 801d646:	f7fb fddb 	bl	8019200 <lwip_htons>
 801d64a:	4603      	mov	r3, r0
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	f003 0304 	and.w	r3, r3, #4
 801d652:	2b00      	cmp	r3, #0
 801d654:	d118      	bne.n	801d688 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d656:	4b1b      	ldr	r3, [pc, #108]	@ (801d6c4 <tcp_input+0x804>)
 801d658:	6819      	ldr	r1, [r3, #0]
 801d65a:	4b1b      	ldr	r3, [pc, #108]	@ (801d6c8 <tcp_input+0x808>)
 801d65c:	881b      	ldrh	r3, [r3, #0]
 801d65e:	461a      	mov	r2, r3
 801d660:	4b1a      	ldr	r3, [pc, #104]	@ (801d6cc <tcp_input+0x80c>)
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d666:	4b16      	ldr	r3, [pc, #88]	@ (801d6c0 <tcp_input+0x800>)
 801d668:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d66a:	885b      	ldrh	r3, [r3, #2]
 801d66c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d66e:	4a14      	ldr	r2, [pc, #80]	@ (801d6c0 <tcp_input+0x800>)
 801d670:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d672:	8812      	ldrh	r2, [r2, #0]
 801d674:	b292      	uxth	r2, r2
 801d676:	9202      	str	r2, [sp, #8]
 801d678:	9301      	str	r3, [sp, #4]
 801d67a:	4b15      	ldr	r3, [pc, #84]	@ (801d6d0 <tcp_input+0x810>)
 801d67c:	9300      	str	r3, [sp, #0]
 801d67e:	4b15      	ldr	r3, [pc, #84]	@ (801d6d4 <tcp_input+0x814>)
 801d680:	4602      	mov	r2, r0
 801d682:	2000      	movs	r0, #0
 801d684:	f003 fc70 	bl	8020f68 <tcp_rst>
    pbuf_free(p);
 801d688:	6878      	ldr	r0, [r7, #4]
 801d68a:	f7fd fa6b 	bl	801ab64 <pbuf_free>
  return;
 801d68e:	e00c      	b.n	801d6aa <tcp_input+0x7ea>
    goto dropped;
 801d690:	bf00      	nop
 801d692:	e006      	b.n	801d6a2 <tcp_input+0x7e2>
    goto dropped;
 801d694:	bf00      	nop
 801d696:	e004      	b.n	801d6a2 <tcp_input+0x7e2>
    goto dropped;
 801d698:	bf00      	nop
 801d69a:	e002      	b.n	801d6a2 <tcp_input+0x7e2>
      goto dropped;
 801d69c:	bf00      	nop
 801d69e:	e000      	b.n	801d6a2 <tcp_input+0x7e2>
      goto dropped;
 801d6a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801d6a2:	6878      	ldr	r0, [r7, #4]
 801d6a4:	f7fd fa5e 	bl	801ab64 <pbuf_free>
 801d6a8:	e000      	b.n	801d6ac <tcp_input+0x7ec>
  return;
 801d6aa:	bf00      	nop
}
 801d6ac:	3724      	adds	r7, #36	@ 0x24
 801d6ae:	46bd      	mov	sp, r7
 801d6b0:	bd90      	pop	{r4, r7, pc}
 801d6b2:	bf00      	nop
 801d6b4:	20010064 	.word	0x20010064
 801d6b8:	20010060 	.word	0x20010060
 801d6bc:	20010030 	.word	0x20010030
 801d6c0:	20010040 	.word	0x20010040
 801d6c4:	20010054 	.word	0x20010054
 801d6c8:	2001005a 	.word	0x2001005a
 801d6cc:	20010050 	.word	0x20010050
 801d6d0:	20008ecc 	.word	0x20008ecc
 801d6d4:	20008ed0 	.word	0x20008ed0

0801d6d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801d6d8:	b580      	push	{r7, lr}
 801d6da:	b082      	sub	sp, #8
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d106      	bne.n	801d6f4 <tcp_input_delayed_close+0x1c>
 801d6e6:	4b17      	ldr	r3, [pc, #92]	@ (801d744 <tcp_input_delayed_close+0x6c>)
 801d6e8:	f240 225a 	movw	r2, #602	@ 0x25a
 801d6ec:	4916      	ldr	r1, [pc, #88]	@ (801d748 <tcp_input_delayed_close+0x70>)
 801d6ee:	4817      	ldr	r0, [pc, #92]	@ (801d74c <tcp_input_delayed_close+0x74>)
 801d6f0:	f005 f912 	bl	8022918 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801d6f4:	4b16      	ldr	r3, [pc, #88]	@ (801d750 <tcp_input_delayed_close+0x78>)
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	f003 0310 	and.w	r3, r3, #16
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d01c      	beq.n	801d73a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	8b5b      	ldrh	r3, [r3, #26]
 801d704:	f003 0310 	and.w	r3, r3, #16
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d10d      	bne.n	801d728 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d712:	2b00      	cmp	r3, #0
 801d714:	d008      	beq.n	801d728 <tcp_input_delayed_close+0x50>
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d71c:	687a      	ldr	r2, [r7, #4]
 801d71e:	6912      	ldr	r2, [r2, #16]
 801d720:	f06f 010e 	mvn.w	r1, #14
 801d724:	4610      	mov	r0, r2
 801d726:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d728:	6879      	ldr	r1, [r7, #4]
 801d72a:	480a      	ldr	r0, [pc, #40]	@ (801d754 <tcp_input_delayed_close+0x7c>)
 801d72c:	f7ff fa50 	bl	801cbd0 <tcp_pcb_remove>
    tcp_free(pcb);
 801d730:	6878      	ldr	r0, [r7, #4]
 801d732:	f7fd fd65 	bl	801b200 <tcp_free>
    return 1;
 801d736:	2301      	movs	r3, #1
 801d738:	e000      	b.n	801d73c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801d73a:	2300      	movs	r3, #0
}
 801d73c:	4618      	mov	r0, r3
 801d73e:	3708      	adds	r7, #8
 801d740:	46bd      	mov	sp, r7
 801d742:	bd80      	pop	{r7, pc}
 801d744:	08027250 	.word	0x08027250
 801d748:	08027464 	.word	0x08027464
 801d74c:	080272e0 	.word	0x080272e0
 801d750:	2001005d 	.word	0x2001005d
 801d754:	20010024 	.word	0x20010024

0801d758 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801d758:	b590      	push	{r4, r7, lr}
 801d75a:	b08b      	sub	sp, #44	@ 0x2c
 801d75c:	af04      	add	r7, sp, #16
 801d75e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801d760:	4b6f      	ldr	r3, [pc, #444]	@ (801d920 <tcp_listen_input+0x1c8>)
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	f003 0304 	and.w	r3, r3, #4
 801d768:	2b00      	cmp	r3, #0
 801d76a:	f040 80d2 	bne.w	801d912 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d106      	bne.n	801d782 <tcp_listen_input+0x2a>
 801d774:	4b6b      	ldr	r3, [pc, #428]	@ (801d924 <tcp_listen_input+0x1cc>)
 801d776:	f240 2281 	movw	r2, #641	@ 0x281
 801d77a:	496b      	ldr	r1, [pc, #428]	@ (801d928 <tcp_listen_input+0x1d0>)
 801d77c:	486b      	ldr	r0, [pc, #428]	@ (801d92c <tcp_listen_input+0x1d4>)
 801d77e:	f005 f8cb 	bl	8022918 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801d782:	4b67      	ldr	r3, [pc, #412]	@ (801d920 <tcp_listen_input+0x1c8>)
 801d784:	781b      	ldrb	r3, [r3, #0]
 801d786:	f003 0310 	and.w	r3, r3, #16
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d019      	beq.n	801d7c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d78e:	4b68      	ldr	r3, [pc, #416]	@ (801d930 <tcp_listen_input+0x1d8>)
 801d790:	6819      	ldr	r1, [r3, #0]
 801d792:	4b68      	ldr	r3, [pc, #416]	@ (801d934 <tcp_listen_input+0x1dc>)
 801d794:	881b      	ldrh	r3, [r3, #0]
 801d796:	461a      	mov	r2, r3
 801d798:	4b67      	ldr	r3, [pc, #412]	@ (801d938 <tcp_listen_input+0x1e0>)
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d79e:	4b67      	ldr	r3, [pc, #412]	@ (801d93c <tcp_listen_input+0x1e4>)
 801d7a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d7a2:	885b      	ldrh	r3, [r3, #2]
 801d7a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d7a6:	4a65      	ldr	r2, [pc, #404]	@ (801d93c <tcp_listen_input+0x1e4>)
 801d7a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d7aa:	8812      	ldrh	r2, [r2, #0]
 801d7ac:	b292      	uxth	r2, r2
 801d7ae:	9202      	str	r2, [sp, #8]
 801d7b0:	9301      	str	r3, [sp, #4]
 801d7b2:	4b63      	ldr	r3, [pc, #396]	@ (801d940 <tcp_listen_input+0x1e8>)
 801d7b4:	9300      	str	r3, [sp, #0]
 801d7b6:	4b63      	ldr	r3, [pc, #396]	@ (801d944 <tcp_listen_input+0x1ec>)
 801d7b8:	4602      	mov	r2, r0
 801d7ba:	6878      	ldr	r0, [r7, #4]
 801d7bc:	f003 fbd4 	bl	8020f68 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801d7c0:	e0a9      	b.n	801d916 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801d7c2:	4b57      	ldr	r3, [pc, #348]	@ (801d920 <tcp_listen_input+0x1c8>)
 801d7c4:	781b      	ldrb	r3, [r3, #0]
 801d7c6:	f003 0302 	and.w	r3, r3, #2
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	f000 80a3 	beq.w	801d916 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	7d5b      	ldrb	r3, [r3, #21]
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	f7ff f859 	bl	801c88c <tcp_alloc>
 801d7da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801d7dc:	697b      	ldr	r3, [r7, #20]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d111      	bne.n	801d806 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	699b      	ldr	r3, [r3, #24]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d00a      	beq.n	801d800 <tcp_listen_input+0xa8>
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	699b      	ldr	r3, [r3, #24]
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	6910      	ldr	r0, [r2, #16]
 801d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 801d7f6:	2100      	movs	r1, #0
 801d7f8:	4798      	blx	r3
 801d7fa:	4603      	mov	r3, r0
 801d7fc:	73bb      	strb	r3, [r7, #14]
      return;
 801d7fe:	e08b      	b.n	801d918 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d800:	23f0      	movs	r3, #240	@ 0xf0
 801d802:	73bb      	strb	r3, [r7, #14]
      return;
 801d804:	e088      	b.n	801d918 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d806:	4b50      	ldr	r3, [pc, #320]	@ (801d948 <tcp_listen_input+0x1f0>)
 801d808:	695a      	ldr	r2, [r3, #20]
 801d80a:	697b      	ldr	r3, [r7, #20]
 801d80c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d80e:	4b4e      	ldr	r3, [pc, #312]	@ (801d948 <tcp_listen_input+0x1f0>)
 801d810:	691a      	ldr	r2, [r3, #16]
 801d812:	697b      	ldr	r3, [r7, #20]
 801d814:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	8ada      	ldrh	r2, [r3, #22]
 801d81a:	697b      	ldr	r3, [r7, #20]
 801d81c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801d81e:	4b47      	ldr	r3, [pc, #284]	@ (801d93c <tcp_listen_input+0x1e4>)
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	881b      	ldrh	r3, [r3, #0]
 801d824:	b29a      	uxth	r2, r3
 801d826:	697b      	ldr	r3, [r7, #20]
 801d828:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	2203      	movs	r2, #3
 801d82e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801d830:	4b41      	ldr	r3, [pc, #260]	@ (801d938 <tcp_listen_input+0x1e0>)
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	1c5a      	adds	r2, r3, #1
 801d836:	697b      	ldr	r3, [r7, #20]
 801d838:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801d83a:	697b      	ldr	r3, [r7, #20]
 801d83c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d83e:	697b      	ldr	r3, [r7, #20]
 801d840:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801d842:	6978      	ldr	r0, [r7, #20]
 801d844:	f7ff fa58 	bl	801ccf8 <tcp_next_iss>
 801d848:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801d84a:	697b      	ldr	r3, [r7, #20]
 801d84c:	693a      	ldr	r2, [r7, #16]
 801d84e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801d850:	697b      	ldr	r3, [r7, #20]
 801d852:	693a      	ldr	r2, [r7, #16]
 801d854:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801d856:	697b      	ldr	r3, [r7, #20]
 801d858:	693a      	ldr	r2, [r7, #16]
 801d85a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801d85c:	697b      	ldr	r3, [r7, #20]
 801d85e:	693a      	ldr	r2, [r7, #16]
 801d860:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d862:	4b35      	ldr	r3, [pc, #212]	@ (801d938 <tcp_listen_input+0x1e0>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	1e5a      	subs	r2, r3, #1
 801d868:	697b      	ldr	r3, [r7, #20]
 801d86a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	691a      	ldr	r2, [r3, #16]
 801d870:	697b      	ldr	r3, [r7, #20]
 801d872:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801d874:	697b      	ldr	r3, [r7, #20]
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	7a5b      	ldrb	r3, [r3, #9]
 801d87e:	f003 030c 	and.w	r3, r3, #12
 801d882:	b2da      	uxtb	r2, r3
 801d884:	697b      	ldr	r3, [r7, #20]
 801d886:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	7a1a      	ldrb	r2, [r3, #8]
 801d88c:	697b      	ldr	r3, [r7, #20]
 801d88e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801d890:	4b2e      	ldr	r3, [pc, #184]	@ (801d94c <tcp_listen_input+0x1f4>)
 801d892:	681a      	ldr	r2, [r3, #0]
 801d894:	697b      	ldr	r3, [r7, #20]
 801d896:	60da      	str	r2, [r3, #12]
 801d898:	4a2c      	ldr	r2, [pc, #176]	@ (801d94c <tcp_listen_input+0x1f4>)
 801d89a:	697b      	ldr	r3, [r7, #20]
 801d89c:	6013      	str	r3, [r2, #0]
 801d89e:	f003 fd25 	bl	80212ec <tcp_timer_needed>
 801d8a2:	4b2b      	ldr	r3, [pc, #172]	@ (801d950 <tcp_listen_input+0x1f8>)
 801d8a4:	2201      	movs	r2, #1
 801d8a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801d8a8:	6978      	ldr	r0, [r7, #20]
 801d8aa:	f001 fd8b 	bl	801f3c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801d8ae:	4b23      	ldr	r3, [pc, #140]	@ (801d93c <tcp_listen_input+0x1e4>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	89db      	ldrh	r3, [r3, #14]
 801d8b4:	b29a      	uxth	r2, r3
 801d8b6:	697b      	ldr	r3, [r7, #20]
 801d8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d8bc:	697b      	ldr	r3, [r7, #20]
 801d8be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d8c2:	697b      	ldr	r3, [r7, #20]
 801d8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d8c8:	697b      	ldr	r3, [r7, #20]
 801d8ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d8cc:	697b      	ldr	r3, [r7, #20]
 801d8ce:	3304      	adds	r3, #4
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	f7fa f97b 	bl	8017bcc <ip4_route>
 801d8d6:	4601      	mov	r1, r0
 801d8d8:	697b      	ldr	r3, [r7, #20]
 801d8da:	3304      	adds	r3, #4
 801d8dc:	461a      	mov	r2, r3
 801d8de:	4620      	mov	r0, r4
 801d8e0:	f7ff fa30 	bl	801cd44 <tcp_eff_send_mss_netif>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	461a      	mov	r2, r3
 801d8e8:	697b      	ldr	r3, [r7, #20]
 801d8ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d8ec:	2112      	movs	r1, #18
 801d8ee:	6978      	ldr	r0, [r7, #20]
 801d8f0:	f002 fc98 	bl	8020224 <tcp_enqueue_flags>
 801d8f4:	4603      	mov	r3, r0
 801d8f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801d8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d004      	beq.n	801d90a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801d900:	2100      	movs	r1, #0
 801d902:	6978      	ldr	r0, [r7, #20]
 801d904:	f7fd ff02 	bl	801b70c <tcp_abandon>
      return;
 801d908:	e006      	b.n	801d918 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801d90a:	6978      	ldr	r0, [r7, #20]
 801d90c:	f002 fd78 	bl	8020400 <tcp_output>
  return;
 801d910:	e001      	b.n	801d916 <tcp_listen_input+0x1be>
    return;
 801d912:	bf00      	nop
 801d914:	e000      	b.n	801d918 <tcp_listen_input+0x1c0>
  return;
 801d916:	bf00      	nop
}
 801d918:	371c      	adds	r7, #28
 801d91a:	46bd      	mov	sp, r7
 801d91c:	bd90      	pop	{r4, r7, pc}
 801d91e:	bf00      	nop
 801d920:	2001005c 	.word	0x2001005c
 801d924:	08027250 	.word	0x08027250
 801d928:	0802748c 	.word	0x0802748c
 801d92c:	080272e0 	.word	0x080272e0
 801d930:	20010054 	.word	0x20010054
 801d934:	2001005a 	.word	0x2001005a
 801d938:	20010050 	.word	0x20010050
 801d93c:	20010040 	.word	0x20010040
 801d940:	20008ecc 	.word	0x20008ecc
 801d944:	20008ed0 	.word	0x20008ed0
 801d948:	20008ebc 	.word	0x20008ebc
 801d94c:	20010024 	.word	0x20010024
 801d950:	2001002c 	.word	0x2001002c

0801d954 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801d954:	b580      	push	{r7, lr}
 801d956:	b086      	sub	sp, #24
 801d958:	af04      	add	r7, sp, #16
 801d95a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801d95c:	4b2f      	ldr	r3, [pc, #188]	@ (801da1c <tcp_timewait_input+0xc8>)
 801d95e:	781b      	ldrb	r3, [r3, #0]
 801d960:	f003 0304 	and.w	r3, r3, #4
 801d964:	2b00      	cmp	r3, #0
 801d966:	d153      	bne.n	801da10 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d106      	bne.n	801d97c <tcp_timewait_input+0x28>
 801d96e:	4b2c      	ldr	r3, [pc, #176]	@ (801da20 <tcp_timewait_input+0xcc>)
 801d970:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d974:	492b      	ldr	r1, [pc, #172]	@ (801da24 <tcp_timewait_input+0xd0>)
 801d976:	482c      	ldr	r0, [pc, #176]	@ (801da28 <tcp_timewait_input+0xd4>)
 801d978:	f004 ffce 	bl	8022918 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801d97c:	4b27      	ldr	r3, [pc, #156]	@ (801da1c <tcp_timewait_input+0xc8>)
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	f003 0302 	and.w	r3, r3, #2
 801d984:	2b00      	cmp	r3, #0
 801d986:	d02a      	beq.n	801d9de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d988:	4b28      	ldr	r3, [pc, #160]	@ (801da2c <tcp_timewait_input+0xd8>)
 801d98a:	681a      	ldr	r2, [r3, #0]
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d990:	1ad3      	subs	r3, r2, r3
 801d992:	2b00      	cmp	r3, #0
 801d994:	db2d      	blt.n	801d9f2 <tcp_timewait_input+0x9e>
 801d996:	4b25      	ldr	r3, [pc, #148]	@ (801da2c <tcp_timewait_input+0xd8>)
 801d998:	681a      	ldr	r2, [r3, #0]
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d99e:	6879      	ldr	r1, [r7, #4]
 801d9a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d9a2:	440b      	add	r3, r1
 801d9a4:	1ad3      	subs	r3, r2, r3
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	dc23      	bgt.n	801d9f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9aa:	4b21      	ldr	r3, [pc, #132]	@ (801da30 <tcp_timewait_input+0xdc>)
 801d9ac:	6819      	ldr	r1, [r3, #0]
 801d9ae:	4b21      	ldr	r3, [pc, #132]	@ (801da34 <tcp_timewait_input+0xe0>)
 801d9b0:	881b      	ldrh	r3, [r3, #0]
 801d9b2:	461a      	mov	r2, r3
 801d9b4:	4b1d      	ldr	r3, [pc, #116]	@ (801da2c <tcp_timewait_input+0xd8>)
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d9ba:	4b1f      	ldr	r3, [pc, #124]	@ (801da38 <tcp_timewait_input+0xe4>)
 801d9bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9be:	885b      	ldrh	r3, [r3, #2]
 801d9c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d9c2:	4a1d      	ldr	r2, [pc, #116]	@ (801da38 <tcp_timewait_input+0xe4>)
 801d9c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9c6:	8812      	ldrh	r2, [r2, #0]
 801d9c8:	b292      	uxth	r2, r2
 801d9ca:	9202      	str	r2, [sp, #8]
 801d9cc:	9301      	str	r3, [sp, #4]
 801d9ce:	4b1b      	ldr	r3, [pc, #108]	@ (801da3c <tcp_timewait_input+0xe8>)
 801d9d0:	9300      	str	r3, [sp, #0]
 801d9d2:	4b1b      	ldr	r3, [pc, #108]	@ (801da40 <tcp_timewait_input+0xec>)
 801d9d4:	4602      	mov	r2, r0
 801d9d6:	6878      	ldr	r0, [r7, #4]
 801d9d8:	f003 fac6 	bl	8020f68 <tcp_rst>
      return;
 801d9dc:	e01b      	b.n	801da16 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801d9de:	4b0f      	ldr	r3, [pc, #60]	@ (801da1c <tcp_timewait_input+0xc8>)
 801d9e0:	781b      	ldrb	r3, [r3, #0]
 801d9e2:	f003 0301 	and.w	r3, r3, #1
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d003      	beq.n	801d9f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801d9ea:	4b16      	ldr	r3, [pc, #88]	@ (801da44 <tcp_timewait_input+0xf0>)
 801d9ec:	681a      	ldr	r2, [r3, #0]
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801d9f2:	4b10      	ldr	r3, [pc, #64]	@ (801da34 <tcp_timewait_input+0xe0>)
 801d9f4:	881b      	ldrh	r3, [r3, #0]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d00c      	beq.n	801da14 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	8b5b      	ldrh	r3, [r3, #26]
 801d9fe:	f043 0302 	orr.w	r3, r3, #2
 801da02:	b29a      	uxth	r2, r3
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801da08:	6878      	ldr	r0, [r7, #4]
 801da0a:	f002 fcf9 	bl	8020400 <tcp_output>
  }
  return;
 801da0e:	e001      	b.n	801da14 <tcp_timewait_input+0xc0>
    return;
 801da10:	bf00      	nop
 801da12:	e000      	b.n	801da16 <tcp_timewait_input+0xc2>
  return;
 801da14:	bf00      	nop
}
 801da16:	3708      	adds	r7, #8
 801da18:	46bd      	mov	sp, r7
 801da1a:	bd80      	pop	{r7, pc}
 801da1c:	2001005c 	.word	0x2001005c
 801da20:	08027250 	.word	0x08027250
 801da24:	080274ac 	.word	0x080274ac
 801da28:	080272e0 	.word	0x080272e0
 801da2c:	20010050 	.word	0x20010050
 801da30:	20010054 	.word	0x20010054
 801da34:	2001005a 	.word	0x2001005a
 801da38:	20010040 	.word	0x20010040
 801da3c:	20008ecc 	.word	0x20008ecc
 801da40:	20008ed0 	.word	0x20008ed0
 801da44:	20010018 	.word	0x20010018

0801da48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801da48:	b590      	push	{r4, r7, lr}
 801da4a:	b08d      	sub	sp, #52	@ 0x34
 801da4c:	af04      	add	r7, sp, #16
 801da4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801da50:	2300      	movs	r3, #0
 801da52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801da54:	2300      	movs	r3, #0
 801da56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d106      	bne.n	801da6c <tcp_process+0x24>
 801da5e:	4b9d      	ldr	r3, [pc, #628]	@ (801dcd4 <tcp_process+0x28c>)
 801da60:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801da64:	499c      	ldr	r1, [pc, #624]	@ (801dcd8 <tcp_process+0x290>)
 801da66:	489d      	ldr	r0, [pc, #628]	@ (801dcdc <tcp_process+0x294>)
 801da68:	f004 ff56 	bl	8022918 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801da6c:	4b9c      	ldr	r3, [pc, #624]	@ (801dce0 <tcp_process+0x298>)
 801da6e:	781b      	ldrb	r3, [r3, #0]
 801da70:	f003 0304 	and.w	r3, r3, #4
 801da74:	2b00      	cmp	r3, #0
 801da76:	d04e      	beq.n	801db16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	7d1b      	ldrb	r3, [r3, #20]
 801da7c:	2b02      	cmp	r3, #2
 801da7e:	d108      	bne.n	801da92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801da84:	4b97      	ldr	r3, [pc, #604]	@ (801dce4 <tcp_process+0x29c>)
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	429a      	cmp	r2, r3
 801da8a:	d123      	bne.n	801dad4 <tcp_process+0x8c>
        acceptable = 1;
 801da8c:	2301      	movs	r3, #1
 801da8e:	76fb      	strb	r3, [r7, #27]
 801da90:	e020      	b.n	801dad4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801da96:	4b94      	ldr	r3, [pc, #592]	@ (801dce8 <tcp_process+0x2a0>)
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	429a      	cmp	r2, r3
 801da9c:	d102      	bne.n	801daa4 <tcp_process+0x5c>
        acceptable = 1;
 801da9e:	2301      	movs	r3, #1
 801daa0:	76fb      	strb	r3, [r7, #27]
 801daa2:	e017      	b.n	801dad4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801daa4:	4b90      	ldr	r3, [pc, #576]	@ (801dce8 <tcp_process+0x2a0>)
 801daa6:	681a      	ldr	r2, [r3, #0]
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801daac:	1ad3      	subs	r3, r2, r3
 801daae:	2b00      	cmp	r3, #0
 801dab0:	db10      	blt.n	801dad4 <tcp_process+0x8c>
 801dab2:	4b8d      	ldr	r3, [pc, #564]	@ (801dce8 <tcp_process+0x2a0>)
 801dab4:	681a      	ldr	r2, [r3, #0]
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801daba:	6879      	ldr	r1, [r7, #4]
 801dabc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801dabe:	440b      	add	r3, r1
 801dac0:	1ad3      	subs	r3, r2, r3
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	dc06      	bgt.n	801dad4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	8b5b      	ldrh	r3, [r3, #26]
 801daca:	f043 0302 	orr.w	r3, r3, #2
 801dace:	b29a      	uxth	r2, r3
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801dad4:	7efb      	ldrb	r3, [r7, #27]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d01b      	beq.n	801db12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	7d1b      	ldrb	r3, [r3, #20]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d106      	bne.n	801daf0 <tcp_process+0xa8>
 801dae2:	4b7c      	ldr	r3, [pc, #496]	@ (801dcd4 <tcp_process+0x28c>)
 801dae4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801dae8:	4980      	ldr	r1, [pc, #512]	@ (801dcec <tcp_process+0x2a4>)
 801daea:	487c      	ldr	r0, [pc, #496]	@ (801dcdc <tcp_process+0x294>)
 801daec:	f004 ff14 	bl	8022918 <iprintf>
      recv_flags |= TF_RESET;
 801daf0:	4b7f      	ldr	r3, [pc, #508]	@ (801dcf0 <tcp_process+0x2a8>)
 801daf2:	781b      	ldrb	r3, [r3, #0]
 801daf4:	f043 0308 	orr.w	r3, r3, #8
 801daf8:	b2da      	uxtb	r2, r3
 801dafa:	4b7d      	ldr	r3, [pc, #500]	@ (801dcf0 <tcp_process+0x2a8>)
 801dafc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	8b5b      	ldrh	r3, [r3, #26]
 801db02:	f023 0301 	bic.w	r3, r3, #1
 801db06:	b29a      	uxth	r2, r3
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801db0c:	f06f 030d 	mvn.w	r3, #13
 801db10:	e37a      	b.n	801e208 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801db12:	2300      	movs	r3, #0
 801db14:	e378      	b.n	801e208 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801db16:	4b72      	ldr	r3, [pc, #456]	@ (801dce0 <tcp_process+0x298>)
 801db18:	781b      	ldrb	r3, [r3, #0]
 801db1a:	f003 0302 	and.w	r3, r3, #2
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d010      	beq.n	801db44 <tcp_process+0xfc>
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	7d1b      	ldrb	r3, [r3, #20]
 801db26:	2b02      	cmp	r3, #2
 801db28:	d00c      	beq.n	801db44 <tcp_process+0xfc>
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	7d1b      	ldrb	r3, [r3, #20]
 801db2e:	2b03      	cmp	r3, #3
 801db30:	d008      	beq.n	801db44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	8b5b      	ldrh	r3, [r3, #26]
 801db36:	f043 0302 	orr.w	r3, r3, #2
 801db3a:	b29a      	uxth	r2, r3
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801db40:	2300      	movs	r3, #0
 801db42:	e361      	b.n	801e208 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	8b5b      	ldrh	r3, [r3, #26]
 801db48:	f003 0310 	and.w	r3, r3, #16
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d103      	bne.n	801db58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801db50:	4b68      	ldr	r3, [pc, #416]	@ (801dcf4 <tcp_process+0x2ac>)
 801db52:	681a      	ldr	r2, [r3, #0]
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	2200      	movs	r2, #0
 801db5c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	2200      	movs	r2, #0
 801db64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801db68:	6878      	ldr	r0, [r7, #4]
 801db6a:	f001 fc2b 	bl	801f3c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	7d1b      	ldrb	r3, [r3, #20]
 801db72:	3b02      	subs	r3, #2
 801db74:	2b07      	cmp	r3, #7
 801db76:	f200 8337 	bhi.w	801e1e8 <tcp_process+0x7a0>
 801db7a:	a201      	add	r2, pc, #4	@ (adr r2, 801db80 <tcp_process+0x138>)
 801db7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db80:	0801dba1 	.word	0x0801dba1
 801db84:	0801ddd1 	.word	0x0801ddd1
 801db88:	0801df49 	.word	0x0801df49
 801db8c:	0801df73 	.word	0x0801df73
 801db90:	0801e097 	.word	0x0801e097
 801db94:	0801df49 	.word	0x0801df49
 801db98:	0801e123 	.word	0x0801e123
 801db9c:	0801e1b3 	.word	0x0801e1b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801dba0:	4b4f      	ldr	r3, [pc, #316]	@ (801dce0 <tcp_process+0x298>)
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	f003 0310 	and.w	r3, r3, #16
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	f000 80e4 	beq.w	801dd76 <tcp_process+0x32e>
 801dbae:	4b4c      	ldr	r3, [pc, #304]	@ (801dce0 <tcp_process+0x298>)
 801dbb0:	781b      	ldrb	r3, [r3, #0]
 801dbb2:	f003 0302 	and.w	r3, r3, #2
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f000 80dd 	beq.w	801dd76 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dbc0:	1c5a      	adds	r2, r3, #1
 801dbc2:	4b48      	ldr	r3, [pc, #288]	@ (801dce4 <tcp_process+0x29c>)
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	429a      	cmp	r2, r3
 801dbc8:	f040 80d5 	bne.w	801dd76 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801dbcc:	4b46      	ldr	r3, [pc, #280]	@ (801dce8 <tcp_process+0x2a0>)
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	1c5a      	adds	r2, r3, #1
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801dbde:	4b41      	ldr	r3, [pc, #260]	@ (801dce4 <tcp_process+0x29c>)
 801dbe0:	681a      	ldr	r2, [r3, #0]
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801dbe6:	4b44      	ldr	r3, [pc, #272]	@ (801dcf8 <tcp_process+0x2b0>)
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	89db      	ldrh	r3, [r3, #14]
 801dbec:	b29a      	uxth	r2, r3
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801dc00:	4b39      	ldr	r3, [pc, #228]	@ (801dce8 <tcp_process+0x2a0>)
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	1e5a      	subs	r2, r3, #1
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	2204      	movs	r2, #4
 801dc0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	3304      	adds	r3, #4
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7f9 ffd7 	bl	8017bcc <ip4_route>
 801dc1e:	4601      	mov	r1, r0
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	3304      	adds	r3, #4
 801dc24:	461a      	mov	r2, r3
 801dc26:	4620      	mov	r0, r4
 801dc28:	f7ff f88c 	bl	801cd44 <tcp_eff_send_mss_netif>
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	461a      	mov	r2, r3
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc38:	009a      	lsls	r2, r3, #2
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc3e:	005b      	lsls	r3, r3, #1
 801dc40:	f241 111c 	movw	r1, #4380	@ 0x111c
 801dc44:	428b      	cmp	r3, r1
 801dc46:	bf38      	it	cc
 801dc48:	460b      	movcc	r3, r1
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	d204      	bcs.n	801dc58 <tcp_process+0x210>
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc52:	009b      	lsls	r3, r3, #2
 801dc54:	b29b      	uxth	r3, r3
 801dc56:	e00d      	b.n	801dc74 <tcp_process+0x22c>
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc5c:	005b      	lsls	r3, r3, #1
 801dc5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 801dc62:	4293      	cmp	r3, r2
 801dc64:	d904      	bls.n	801dc70 <tcp_process+0x228>
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc6a:	005b      	lsls	r3, r3, #1
 801dc6c:	b29b      	uxth	r3, r3
 801dc6e:	e001      	b.n	801dc74 <tcp_process+0x22c>
 801dc70:	f241 131c 	movw	r3, #4380	@ 0x111c
 801dc74:	687a      	ldr	r2, [r7, #4]
 801dc76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d106      	bne.n	801dc92 <tcp_process+0x24a>
 801dc84:	4b13      	ldr	r3, [pc, #76]	@ (801dcd4 <tcp_process+0x28c>)
 801dc86:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801dc8a:	491c      	ldr	r1, [pc, #112]	@ (801dcfc <tcp_process+0x2b4>)
 801dc8c:	4813      	ldr	r0, [pc, #76]	@ (801dcdc <tcp_process+0x294>)
 801dc8e:	f004 fe43 	bl	8022918 <iprintf>
        --pcb->snd_queuelen;
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dc98:	3b01      	subs	r3, #1
 801dc9a:	b29a      	uxth	r2, r3
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dca6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801dca8:	69fb      	ldr	r3, [r7, #28]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d12a      	bne.n	801dd04 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dcb2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801dcb4:	69fb      	ldr	r3, [r7, #28]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d106      	bne.n	801dcc8 <tcp_process+0x280>
 801dcba:	4b06      	ldr	r3, [pc, #24]	@ (801dcd4 <tcp_process+0x28c>)
 801dcbc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801dcc0:	490f      	ldr	r1, [pc, #60]	@ (801dd00 <tcp_process+0x2b8>)
 801dcc2:	4806      	ldr	r0, [pc, #24]	@ (801dcdc <tcp_process+0x294>)
 801dcc4:	f004 fe28 	bl	8022918 <iprintf>
          pcb->unsent = rseg->next;
 801dcc8:	69fb      	ldr	r3, [r7, #28]
 801dcca:	681a      	ldr	r2, [r3, #0]
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	66da      	str	r2, [r3, #108]	@ 0x6c
 801dcd0:	e01c      	b.n	801dd0c <tcp_process+0x2c4>
 801dcd2:	bf00      	nop
 801dcd4:	08027250 	.word	0x08027250
 801dcd8:	080274cc 	.word	0x080274cc
 801dcdc:	080272e0 	.word	0x080272e0
 801dce0:	2001005c 	.word	0x2001005c
 801dce4:	20010054 	.word	0x20010054
 801dce8:	20010050 	.word	0x20010050
 801dcec:	080274e8 	.word	0x080274e8
 801dcf0:	2001005d 	.word	0x2001005d
 801dcf4:	20010018 	.word	0x20010018
 801dcf8:	20010040 	.word	0x20010040
 801dcfc:	08027508 	.word	0x08027508
 801dd00:	08027520 	.word	0x08027520
        } else {
          pcb->unacked = rseg->next;
 801dd04:	69fb      	ldr	r3, [r7, #28]
 801dd06:	681a      	ldr	r2, [r3, #0]
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801dd0c:	69f8      	ldr	r0, [r7, #28]
 801dd0e:	f7fe fc54 	bl	801c5ba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d104      	bne.n	801dd24 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd20:	861a      	strh	r2, [r3, #48]	@ 0x30
 801dd22:	e006      	b.n	801dd32 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	2200      	movs	r2, #0
 801dd28:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d00a      	beq.n	801dd52 <tcp_process+0x30a>
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd42:	687a      	ldr	r2, [r7, #4]
 801dd44:	6910      	ldr	r0, [r2, #16]
 801dd46:	2200      	movs	r2, #0
 801dd48:	6879      	ldr	r1, [r7, #4]
 801dd4a:	4798      	blx	r3
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	76bb      	strb	r3, [r7, #26]
 801dd50:	e001      	b.n	801dd56 <tcp_process+0x30e>
 801dd52:	2300      	movs	r3, #0
 801dd54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801dd56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801dd5a:	f113 0f0d 	cmn.w	r3, #13
 801dd5e:	d102      	bne.n	801dd66 <tcp_process+0x31e>
          return ERR_ABRT;
 801dd60:	f06f 030c 	mvn.w	r3, #12
 801dd64:	e250      	b.n	801e208 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	8b5b      	ldrh	r3, [r3, #26]
 801dd6a:	f043 0302 	orr.w	r3, r3, #2
 801dd6e:	b29a      	uxth	r2, r3
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801dd74:	e23a      	b.n	801e1ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801dd76:	4b98      	ldr	r3, [pc, #608]	@ (801dfd8 <tcp_process+0x590>)
 801dd78:	781b      	ldrb	r3, [r3, #0]
 801dd7a:	f003 0310 	and.w	r3, r3, #16
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	f000 8234 	beq.w	801e1ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd84:	4b95      	ldr	r3, [pc, #596]	@ (801dfdc <tcp_process+0x594>)
 801dd86:	6819      	ldr	r1, [r3, #0]
 801dd88:	4b95      	ldr	r3, [pc, #596]	@ (801dfe0 <tcp_process+0x598>)
 801dd8a:	881b      	ldrh	r3, [r3, #0]
 801dd8c:	461a      	mov	r2, r3
 801dd8e:	4b95      	ldr	r3, [pc, #596]	@ (801dfe4 <tcp_process+0x59c>)
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dd94:	4b94      	ldr	r3, [pc, #592]	@ (801dfe8 <tcp_process+0x5a0>)
 801dd96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd98:	885b      	ldrh	r3, [r3, #2]
 801dd9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dd9c:	4a92      	ldr	r2, [pc, #584]	@ (801dfe8 <tcp_process+0x5a0>)
 801dd9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dda0:	8812      	ldrh	r2, [r2, #0]
 801dda2:	b292      	uxth	r2, r2
 801dda4:	9202      	str	r2, [sp, #8]
 801dda6:	9301      	str	r3, [sp, #4]
 801dda8:	4b90      	ldr	r3, [pc, #576]	@ (801dfec <tcp_process+0x5a4>)
 801ddaa:	9300      	str	r3, [sp, #0]
 801ddac:	4b90      	ldr	r3, [pc, #576]	@ (801dff0 <tcp_process+0x5a8>)
 801ddae:	4602      	mov	r2, r0
 801ddb0:	6878      	ldr	r0, [r7, #4]
 801ddb2:	f003 f8d9 	bl	8020f68 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ddbc:	2b05      	cmp	r3, #5
 801ddbe:	f200 8215 	bhi.w	801e1ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	2200      	movs	r2, #0
 801ddc6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801ddc8:	6878      	ldr	r0, [r7, #4]
 801ddca:	f002 fea5 	bl	8020b18 <tcp_rexmit_rto>
      break;
 801ddce:	e20d      	b.n	801e1ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801ddd0:	4b81      	ldr	r3, [pc, #516]	@ (801dfd8 <tcp_process+0x590>)
 801ddd2:	781b      	ldrb	r3, [r3, #0]
 801ddd4:	f003 0310 	and.w	r3, r3, #16
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	f000 80a1 	beq.w	801df20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ddde:	4b7f      	ldr	r3, [pc, #508]	@ (801dfdc <tcp_process+0x594>)
 801dde0:	681a      	ldr	r2, [r3, #0]
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dde6:	1ad3      	subs	r3, r2, r3
 801dde8:	3b01      	subs	r3, #1
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	db7e      	blt.n	801deec <tcp_process+0x4a4>
 801ddee:	4b7b      	ldr	r3, [pc, #492]	@ (801dfdc <tcp_process+0x594>)
 801ddf0:	681a      	ldr	r2, [r3, #0]
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ddf6:	1ad3      	subs	r3, r2, r3
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	dc77      	bgt.n	801deec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	2204      	movs	r2, #4
 801de00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de06:	2b00      	cmp	r3, #0
 801de08:	d102      	bne.n	801de10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801de0a:	23fa      	movs	r3, #250	@ 0xfa
 801de0c:	76bb      	strb	r3, [r7, #26]
 801de0e:	e01d      	b.n	801de4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de14:	699b      	ldr	r3, [r3, #24]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d106      	bne.n	801de28 <tcp_process+0x3e0>
 801de1a:	4b76      	ldr	r3, [pc, #472]	@ (801dff4 <tcp_process+0x5ac>)
 801de1c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801de20:	4975      	ldr	r1, [pc, #468]	@ (801dff8 <tcp_process+0x5b0>)
 801de22:	4876      	ldr	r0, [pc, #472]	@ (801dffc <tcp_process+0x5b4>)
 801de24:	f004 fd78 	bl	8022918 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de2c:	699b      	ldr	r3, [r3, #24]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d00a      	beq.n	801de48 <tcp_process+0x400>
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de36:	699b      	ldr	r3, [r3, #24]
 801de38:	687a      	ldr	r2, [r7, #4]
 801de3a:	6910      	ldr	r0, [r2, #16]
 801de3c:	2200      	movs	r2, #0
 801de3e:	6879      	ldr	r1, [r7, #4]
 801de40:	4798      	blx	r3
 801de42:	4603      	mov	r3, r0
 801de44:	76bb      	strb	r3, [r7, #26]
 801de46:	e001      	b.n	801de4c <tcp_process+0x404>
 801de48:	23f0      	movs	r3, #240	@ 0xf0
 801de4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801de4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d00a      	beq.n	801de6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801de54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801de58:	f113 0f0d 	cmn.w	r3, #13
 801de5c:	d002      	beq.n	801de64 <tcp_process+0x41c>
              tcp_abort(pcb);
 801de5e:	6878      	ldr	r0, [r7, #4]
 801de60:	f7fd fd12 	bl	801b888 <tcp_abort>
            }
            return ERR_ABRT;
 801de64:	f06f 030c 	mvn.w	r3, #12
 801de68:	e1ce      	b.n	801e208 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801de6a:	6878      	ldr	r0, [r7, #4]
 801de6c:	f000 fae0 	bl	801e430 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801de70:	4b63      	ldr	r3, [pc, #396]	@ (801e000 <tcp_process+0x5b8>)
 801de72:	881b      	ldrh	r3, [r3, #0]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d005      	beq.n	801de84 <tcp_process+0x43c>
            recv_acked--;
 801de78:	4b61      	ldr	r3, [pc, #388]	@ (801e000 <tcp_process+0x5b8>)
 801de7a:	881b      	ldrh	r3, [r3, #0]
 801de7c:	3b01      	subs	r3, #1
 801de7e:	b29a      	uxth	r2, r3
 801de80:	4b5f      	ldr	r3, [pc, #380]	@ (801e000 <tcp_process+0x5b8>)
 801de82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801de88:	009a      	lsls	r2, r3, #2
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801de8e:	005b      	lsls	r3, r3, #1
 801de90:	f241 111c 	movw	r1, #4380	@ 0x111c
 801de94:	428b      	cmp	r3, r1
 801de96:	bf38      	it	cc
 801de98:	460b      	movcc	r3, r1
 801de9a:	429a      	cmp	r2, r3
 801de9c:	d204      	bcs.n	801dea8 <tcp_process+0x460>
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dea2:	009b      	lsls	r3, r3, #2
 801dea4:	b29b      	uxth	r3, r3
 801dea6:	e00d      	b.n	801dec4 <tcp_process+0x47c>
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801deac:	005b      	lsls	r3, r3, #1
 801deae:	f241 121c 	movw	r2, #4380	@ 0x111c
 801deb2:	4293      	cmp	r3, r2
 801deb4:	d904      	bls.n	801dec0 <tcp_process+0x478>
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801deba:	005b      	lsls	r3, r3, #1
 801debc:	b29b      	uxth	r3, r3
 801debe:	e001      	b.n	801dec4 <tcp_process+0x47c>
 801dec0:	f241 131c 	movw	r3, #4380	@ 0x111c
 801dec4:	687a      	ldr	r2, [r7, #4]
 801dec6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801deca:	4b4e      	ldr	r3, [pc, #312]	@ (801e004 <tcp_process+0x5bc>)
 801decc:	781b      	ldrb	r3, [r3, #0]
 801dece:	f003 0320 	and.w	r3, r3, #32
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d037      	beq.n	801df46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	8b5b      	ldrh	r3, [r3, #26]
 801deda:	f043 0302 	orr.w	r3, r3, #2
 801dede:	b29a      	uxth	r2, r3
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	2207      	movs	r2, #7
 801dee8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801deea:	e02c      	b.n	801df46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801deec:	4b3b      	ldr	r3, [pc, #236]	@ (801dfdc <tcp_process+0x594>)
 801deee:	6819      	ldr	r1, [r3, #0]
 801def0:	4b3b      	ldr	r3, [pc, #236]	@ (801dfe0 <tcp_process+0x598>)
 801def2:	881b      	ldrh	r3, [r3, #0]
 801def4:	461a      	mov	r2, r3
 801def6:	4b3b      	ldr	r3, [pc, #236]	@ (801dfe4 <tcp_process+0x59c>)
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801defc:	4b3a      	ldr	r3, [pc, #232]	@ (801dfe8 <tcp_process+0x5a0>)
 801defe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801df00:	885b      	ldrh	r3, [r3, #2]
 801df02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801df04:	4a38      	ldr	r2, [pc, #224]	@ (801dfe8 <tcp_process+0x5a0>)
 801df06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801df08:	8812      	ldrh	r2, [r2, #0]
 801df0a:	b292      	uxth	r2, r2
 801df0c:	9202      	str	r2, [sp, #8]
 801df0e:	9301      	str	r3, [sp, #4]
 801df10:	4b36      	ldr	r3, [pc, #216]	@ (801dfec <tcp_process+0x5a4>)
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	4b36      	ldr	r3, [pc, #216]	@ (801dff0 <tcp_process+0x5a8>)
 801df16:	4602      	mov	r2, r0
 801df18:	6878      	ldr	r0, [r7, #4]
 801df1a:	f003 f825 	bl	8020f68 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801df1e:	e167      	b.n	801e1f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801df20:	4b2d      	ldr	r3, [pc, #180]	@ (801dfd8 <tcp_process+0x590>)
 801df22:	781b      	ldrb	r3, [r3, #0]
 801df24:	f003 0302 	and.w	r3, r3, #2
 801df28:	2b00      	cmp	r3, #0
 801df2a:	f000 8161 	beq.w	801e1f0 <tcp_process+0x7a8>
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801df32:	1e5a      	subs	r2, r3, #1
 801df34:	4b2b      	ldr	r3, [pc, #172]	@ (801dfe4 <tcp_process+0x59c>)
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	429a      	cmp	r2, r3
 801df3a:	f040 8159 	bne.w	801e1f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801df3e:	6878      	ldr	r0, [r7, #4]
 801df40:	f002 fe0c 	bl	8020b5c <tcp_rexmit>
      break;
 801df44:	e154      	b.n	801e1f0 <tcp_process+0x7a8>
 801df46:	e153      	b.n	801e1f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801df48:	6878      	ldr	r0, [r7, #4]
 801df4a:	f000 fa71 	bl	801e430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801df4e:	4b2d      	ldr	r3, [pc, #180]	@ (801e004 <tcp_process+0x5bc>)
 801df50:	781b      	ldrb	r3, [r3, #0]
 801df52:	f003 0320 	and.w	r3, r3, #32
 801df56:	2b00      	cmp	r3, #0
 801df58:	f000 814c 	beq.w	801e1f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	8b5b      	ldrh	r3, [r3, #26]
 801df60:	f043 0302 	orr.w	r3, r3, #2
 801df64:	b29a      	uxth	r2, r3
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	2207      	movs	r2, #7
 801df6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801df70:	e140      	b.n	801e1f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f000 fa5c 	bl	801e430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801df78:	4b22      	ldr	r3, [pc, #136]	@ (801e004 <tcp_process+0x5bc>)
 801df7a:	781b      	ldrb	r3, [r3, #0]
 801df7c:	f003 0320 	and.w	r3, r3, #32
 801df80:	2b00      	cmp	r3, #0
 801df82:	d071      	beq.n	801e068 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801df84:	4b14      	ldr	r3, [pc, #80]	@ (801dfd8 <tcp_process+0x590>)
 801df86:	781b      	ldrb	r3, [r3, #0]
 801df88:	f003 0310 	and.w	r3, r3, #16
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d060      	beq.n	801e052 <tcp_process+0x60a>
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801df94:	4b11      	ldr	r3, [pc, #68]	@ (801dfdc <tcp_process+0x594>)
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	429a      	cmp	r2, r3
 801df9a:	d15a      	bne.n	801e052 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d156      	bne.n	801e052 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	8b5b      	ldrh	r3, [r3, #26]
 801dfa8:	f043 0302 	orr.w	r3, r3, #2
 801dfac:	b29a      	uxth	r2, r3
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801dfb2:	6878      	ldr	r0, [r7, #4]
 801dfb4:	f7fe fdbc 	bl	801cb30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801dfb8:	4b13      	ldr	r3, [pc, #76]	@ (801e008 <tcp_process+0x5c0>)
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	687a      	ldr	r2, [r7, #4]
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	d105      	bne.n	801dfce <tcp_process+0x586>
 801dfc2:	4b11      	ldr	r3, [pc, #68]	@ (801e008 <tcp_process+0x5c0>)
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	68db      	ldr	r3, [r3, #12]
 801dfc8:	4a0f      	ldr	r2, [pc, #60]	@ (801e008 <tcp_process+0x5c0>)
 801dfca:	6013      	str	r3, [r2, #0]
 801dfcc:	e02e      	b.n	801e02c <tcp_process+0x5e4>
 801dfce:	4b0e      	ldr	r3, [pc, #56]	@ (801e008 <tcp_process+0x5c0>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	617b      	str	r3, [r7, #20]
 801dfd4:	e027      	b.n	801e026 <tcp_process+0x5de>
 801dfd6:	bf00      	nop
 801dfd8:	2001005c 	.word	0x2001005c
 801dfdc:	20010054 	.word	0x20010054
 801dfe0:	2001005a 	.word	0x2001005a
 801dfe4:	20010050 	.word	0x20010050
 801dfe8:	20010040 	.word	0x20010040
 801dfec:	20008ecc 	.word	0x20008ecc
 801dff0:	20008ed0 	.word	0x20008ed0
 801dff4:	08027250 	.word	0x08027250
 801dff8:	08027534 	.word	0x08027534
 801dffc:	080272e0 	.word	0x080272e0
 801e000:	20010058 	.word	0x20010058
 801e004:	2001005d 	.word	0x2001005d
 801e008:	20010024 	.word	0x20010024
 801e00c:	697b      	ldr	r3, [r7, #20]
 801e00e:	68db      	ldr	r3, [r3, #12]
 801e010:	687a      	ldr	r2, [r7, #4]
 801e012:	429a      	cmp	r2, r3
 801e014:	d104      	bne.n	801e020 <tcp_process+0x5d8>
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	68da      	ldr	r2, [r3, #12]
 801e01a:	697b      	ldr	r3, [r7, #20]
 801e01c:	60da      	str	r2, [r3, #12]
 801e01e:	e005      	b.n	801e02c <tcp_process+0x5e4>
 801e020:	697b      	ldr	r3, [r7, #20]
 801e022:	68db      	ldr	r3, [r3, #12]
 801e024:	617b      	str	r3, [r7, #20]
 801e026:	697b      	ldr	r3, [r7, #20]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d1ef      	bne.n	801e00c <tcp_process+0x5c4>
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	2200      	movs	r2, #0
 801e030:	60da      	str	r2, [r3, #12]
 801e032:	4b77      	ldr	r3, [pc, #476]	@ (801e210 <tcp_process+0x7c8>)
 801e034:	2201      	movs	r2, #1
 801e036:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	220a      	movs	r2, #10
 801e03c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801e03e:	4b75      	ldr	r3, [pc, #468]	@ (801e214 <tcp_process+0x7cc>)
 801e040:	681a      	ldr	r2, [r3, #0]
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	60da      	str	r2, [r3, #12]
 801e046:	4a73      	ldr	r2, [pc, #460]	@ (801e214 <tcp_process+0x7cc>)
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	6013      	str	r3, [r2, #0]
 801e04c:	f003 f94e 	bl	80212ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801e050:	e0d2      	b.n	801e1f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	8b5b      	ldrh	r3, [r3, #26]
 801e056:	f043 0302 	orr.w	r3, r3, #2
 801e05a:	b29a      	uxth	r2, r3
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	2208      	movs	r2, #8
 801e064:	751a      	strb	r2, [r3, #20]
      break;
 801e066:	e0c7      	b.n	801e1f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e068:	4b6b      	ldr	r3, [pc, #428]	@ (801e218 <tcp_process+0x7d0>)
 801e06a:	781b      	ldrb	r3, [r3, #0]
 801e06c:	f003 0310 	and.w	r3, r3, #16
 801e070:	2b00      	cmp	r3, #0
 801e072:	f000 80c1 	beq.w	801e1f8 <tcp_process+0x7b0>
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e07a:	4b68      	ldr	r3, [pc, #416]	@ (801e21c <tcp_process+0x7d4>)
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	429a      	cmp	r2, r3
 801e080:	f040 80ba 	bne.w	801e1f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e088:	2b00      	cmp	r3, #0
 801e08a:	f040 80b5 	bne.w	801e1f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	2206      	movs	r2, #6
 801e092:	751a      	strb	r2, [r3, #20]
      break;
 801e094:	e0b0      	b.n	801e1f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801e096:	6878      	ldr	r0, [r7, #4]
 801e098:	f000 f9ca 	bl	801e430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e09c:	4b60      	ldr	r3, [pc, #384]	@ (801e220 <tcp_process+0x7d8>)
 801e09e:	781b      	ldrb	r3, [r3, #0]
 801e0a0:	f003 0320 	and.w	r3, r3, #32
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	f000 80a9 	beq.w	801e1fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	8b5b      	ldrh	r3, [r3, #26]
 801e0ae:	f043 0302 	orr.w	r3, r3, #2
 801e0b2:	b29a      	uxth	r2, r3
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801e0b8:	6878      	ldr	r0, [r7, #4]
 801e0ba:	f7fe fd39 	bl	801cb30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e0be:	4b59      	ldr	r3, [pc, #356]	@ (801e224 <tcp_process+0x7dc>)
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	687a      	ldr	r2, [r7, #4]
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	d105      	bne.n	801e0d4 <tcp_process+0x68c>
 801e0c8:	4b56      	ldr	r3, [pc, #344]	@ (801e224 <tcp_process+0x7dc>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	68db      	ldr	r3, [r3, #12]
 801e0ce:	4a55      	ldr	r2, [pc, #340]	@ (801e224 <tcp_process+0x7dc>)
 801e0d0:	6013      	str	r3, [r2, #0]
 801e0d2:	e013      	b.n	801e0fc <tcp_process+0x6b4>
 801e0d4:	4b53      	ldr	r3, [pc, #332]	@ (801e224 <tcp_process+0x7dc>)
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	613b      	str	r3, [r7, #16]
 801e0da:	e00c      	b.n	801e0f6 <tcp_process+0x6ae>
 801e0dc:	693b      	ldr	r3, [r7, #16]
 801e0de:	68db      	ldr	r3, [r3, #12]
 801e0e0:	687a      	ldr	r2, [r7, #4]
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	d104      	bne.n	801e0f0 <tcp_process+0x6a8>
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	68da      	ldr	r2, [r3, #12]
 801e0ea:	693b      	ldr	r3, [r7, #16]
 801e0ec:	60da      	str	r2, [r3, #12]
 801e0ee:	e005      	b.n	801e0fc <tcp_process+0x6b4>
 801e0f0:	693b      	ldr	r3, [r7, #16]
 801e0f2:	68db      	ldr	r3, [r3, #12]
 801e0f4:	613b      	str	r3, [r7, #16]
 801e0f6:	693b      	ldr	r3, [r7, #16]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d1ef      	bne.n	801e0dc <tcp_process+0x694>
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	2200      	movs	r2, #0
 801e100:	60da      	str	r2, [r3, #12]
 801e102:	4b43      	ldr	r3, [pc, #268]	@ (801e210 <tcp_process+0x7c8>)
 801e104:	2201      	movs	r2, #1
 801e106:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	220a      	movs	r2, #10
 801e10c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e10e:	4b41      	ldr	r3, [pc, #260]	@ (801e214 <tcp_process+0x7cc>)
 801e110:	681a      	ldr	r2, [r3, #0]
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	60da      	str	r2, [r3, #12]
 801e116:	4a3f      	ldr	r2, [pc, #252]	@ (801e214 <tcp_process+0x7cc>)
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	6013      	str	r3, [r2, #0]
 801e11c:	f003 f8e6 	bl	80212ec <tcp_timer_needed>
      }
      break;
 801e120:	e06c      	b.n	801e1fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801e122:	6878      	ldr	r0, [r7, #4]
 801e124:	f000 f984 	bl	801e430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e128:	4b3b      	ldr	r3, [pc, #236]	@ (801e218 <tcp_process+0x7d0>)
 801e12a:	781b      	ldrb	r3, [r3, #0]
 801e12c:	f003 0310 	and.w	r3, r3, #16
 801e130:	2b00      	cmp	r3, #0
 801e132:	d065      	beq.n	801e200 <tcp_process+0x7b8>
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e138:	4b38      	ldr	r3, [pc, #224]	@ (801e21c <tcp_process+0x7d4>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	429a      	cmp	r2, r3
 801e13e:	d15f      	bne.n	801e200 <tcp_process+0x7b8>
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e144:	2b00      	cmp	r3, #0
 801e146:	d15b      	bne.n	801e200 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801e148:	6878      	ldr	r0, [r7, #4]
 801e14a:	f7fe fcf1 	bl	801cb30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e14e:	4b35      	ldr	r3, [pc, #212]	@ (801e224 <tcp_process+0x7dc>)
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	687a      	ldr	r2, [r7, #4]
 801e154:	429a      	cmp	r2, r3
 801e156:	d105      	bne.n	801e164 <tcp_process+0x71c>
 801e158:	4b32      	ldr	r3, [pc, #200]	@ (801e224 <tcp_process+0x7dc>)
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	68db      	ldr	r3, [r3, #12]
 801e15e:	4a31      	ldr	r2, [pc, #196]	@ (801e224 <tcp_process+0x7dc>)
 801e160:	6013      	str	r3, [r2, #0]
 801e162:	e013      	b.n	801e18c <tcp_process+0x744>
 801e164:	4b2f      	ldr	r3, [pc, #188]	@ (801e224 <tcp_process+0x7dc>)
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	60fb      	str	r3, [r7, #12]
 801e16a:	e00c      	b.n	801e186 <tcp_process+0x73e>
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	68db      	ldr	r3, [r3, #12]
 801e170:	687a      	ldr	r2, [r7, #4]
 801e172:	429a      	cmp	r2, r3
 801e174:	d104      	bne.n	801e180 <tcp_process+0x738>
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	68da      	ldr	r2, [r3, #12]
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	60da      	str	r2, [r3, #12]
 801e17e:	e005      	b.n	801e18c <tcp_process+0x744>
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	68db      	ldr	r3, [r3, #12]
 801e184:	60fb      	str	r3, [r7, #12]
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d1ef      	bne.n	801e16c <tcp_process+0x724>
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	2200      	movs	r2, #0
 801e190:	60da      	str	r2, [r3, #12]
 801e192:	4b1f      	ldr	r3, [pc, #124]	@ (801e210 <tcp_process+0x7c8>)
 801e194:	2201      	movs	r2, #1
 801e196:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	220a      	movs	r2, #10
 801e19c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e19e:	4b1d      	ldr	r3, [pc, #116]	@ (801e214 <tcp_process+0x7cc>)
 801e1a0:	681a      	ldr	r2, [r3, #0]
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	60da      	str	r2, [r3, #12]
 801e1a6:	4a1b      	ldr	r2, [pc, #108]	@ (801e214 <tcp_process+0x7cc>)
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	6013      	str	r3, [r2, #0]
 801e1ac:	f003 f89e 	bl	80212ec <tcp_timer_needed>
      }
      break;
 801e1b0:	e026      	b.n	801e200 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f000 f93c 	bl	801e430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e1b8:	4b17      	ldr	r3, [pc, #92]	@ (801e218 <tcp_process+0x7d0>)
 801e1ba:	781b      	ldrb	r3, [r3, #0]
 801e1bc:	f003 0310 	and.w	r3, r3, #16
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d01f      	beq.n	801e204 <tcp_process+0x7bc>
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e1c8:	4b14      	ldr	r3, [pc, #80]	@ (801e21c <tcp_process+0x7d4>)
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	429a      	cmp	r2, r3
 801e1ce:	d119      	bne.n	801e204 <tcp_process+0x7bc>
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d115      	bne.n	801e204 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801e1d8:	4b11      	ldr	r3, [pc, #68]	@ (801e220 <tcp_process+0x7d8>)
 801e1da:	781b      	ldrb	r3, [r3, #0]
 801e1dc:	f043 0310 	orr.w	r3, r3, #16
 801e1e0:	b2da      	uxtb	r2, r3
 801e1e2:	4b0f      	ldr	r3, [pc, #60]	@ (801e220 <tcp_process+0x7d8>)
 801e1e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 801e1e6:	e00d      	b.n	801e204 <tcp_process+0x7bc>
    default:
      break;
 801e1e8:	bf00      	nop
 801e1ea:	e00c      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e1ec:	bf00      	nop
 801e1ee:	e00a      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e1f0:	bf00      	nop
 801e1f2:	e008      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e1f4:	bf00      	nop
 801e1f6:	e006      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e1f8:	bf00      	nop
 801e1fa:	e004      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e1fc:	bf00      	nop
 801e1fe:	e002      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e200:	bf00      	nop
 801e202:	e000      	b.n	801e206 <tcp_process+0x7be>
      break;
 801e204:	bf00      	nop
  }
  return ERR_OK;
 801e206:	2300      	movs	r3, #0
}
 801e208:	4618      	mov	r0, r3
 801e20a:	3724      	adds	r7, #36	@ 0x24
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd90      	pop	{r4, r7, pc}
 801e210:	2001002c 	.word	0x2001002c
 801e214:	20010028 	.word	0x20010028
 801e218:	2001005c 	.word	0x2001005c
 801e21c:	20010054 	.word	0x20010054
 801e220:	2001005d 	.word	0x2001005d
 801e224:	20010024 	.word	0x20010024

0801e228 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e228:	b590      	push	{r4, r7, lr}
 801e22a:	b085      	sub	sp, #20
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
 801e230:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d106      	bne.n	801e246 <tcp_oos_insert_segment+0x1e>
 801e238:	4b3b      	ldr	r3, [pc, #236]	@ (801e328 <tcp_oos_insert_segment+0x100>)
 801e23a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801e23e:	493b      	ldr	r1, [pc, #236]	@ (801e32c <tcp_oos_insert_segment+0x104>)
 801e240:	483b      	ldr	r0, [pc, #236]	@ (801e330 <tcp_oos_insert_segment+0x108>)
 801e242:	f004 fb69 	bl	8022918 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	68db      	ldr	r3, [r3, #12]
 801e24a:	899b      	ldrh	r3, [r3, #12]
 801e24c:	b29b      	uxth	r3, r3
 801e24e:	4618      	mov	r0, r3
 801e250:	f7fa ffd6 	bl	8019200 <lwip_htons>
 801e254:	4603      	mov	r3, r0
 801e256:	b2db      	uxtb	r3, r3
 801e258:	f003 0301 	and.w	r3, r3, #1
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d028      	beq.n	801e2b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801e260:	6838      	ldr	r0, [r7, #0]
 801e262:	f7fe f995 	bl	801c590 <tcp_segs_free>
    next = NULL;
 801e266:	2300      	movs	r3, #0
 801e268:	603b      	str	r3, [r7, #0]
 801e26a:	e056      	b.n	801e31a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	68db      	ldr	r3, [r3, #12]
 801e270:	899b      	ldrh	r3, [r3, #12]
 801e272:	b29b      	uxth	r3, r3
 801e274:	4618      	mov	r0, r3
 801e276:	f7fa ffc3 	bl	8019200 <lwip_htons>
 801e27a:	4603      	mov	r3, r0
 801e27c:	b2db      	uxtb	r3, r3
 801e27e:	f003 0301 	and.w	r3, r3, #1
 801e282:	2b00      	cmp	r3, #0
 801e284:	d00d      	beq.n	801e2a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	68db      	ldr	r3, [r3, #12]
 801e28a:	899b      	ldrh	r3, [r3, #12]
 801e28c:	b29c      	uxth	r4, r3
 801e28e:	2001      	movs	r0, #1
 801e290:	f7fa ffb6 	bl	8019200 <lwip_htons>
 801e294:	4603      	mov	r3, r0
 801e296:	461a      	mov	r2, r3
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	68db      	ldr	r3, [r3, #12]
 801e29c:	4322      	orrs	r2, r4
 801e29e:	b292      	uxth	r2, r2
 801e2a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801e2a2:	683b      	ldr	r3, [r7, #0]
 801e2a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801e2a6:	683b      	ldr	r3, [r7, #0]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801e2ac:	68f8      	ldr	r0, [r7, #12]
 801e2ae:	f7fe f984 	bl	801c5ba <tcp_seg_free>
    while (next &&
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d00e      	beq.n	801e2d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	891b      	ldrh	r3, [r3, #8]
 801e2bc:	461a      	mov	r2, r3
 801e2be:	4b1d      	ldr	r3, [pc, #116]	@ (801e334 <tcp_oos_insert_segment+0x10c>)
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	441a      	add	r2, r3
 801e2c4:	683b      	ldr	r3, [r7, #0]
 801e2c6:	68db      	ldr	r3, [r3, #12]
 801e2c8:	685b      	ldr	r3, [r3, #4]
 801e2ca:	6839      	ldr	r1, [r7, #0]
 801e2cc:	8909      	ldrh	r1, [r1, #8]
 801e2ce:	440b      	add	r3, r1
 801e2d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	daca      	bge.n	801e26c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801e2d6:	683b      	ldr	r3, [r7, #0]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d01e      	beq.n	801e31a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	891b      	ldrh	r3, [r3, #8]
 801e2e0:	461a      	mov	r2, r3
 801e2e2:	4b14      	ldr	r3, [pc, #80]	@ (801e334 <tcp_oos_insert_segment+0x10c>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	441a      	add	r2, r3
 801e2e8:	683b      	ldr	r3, [r7, #0]
 801e2ea:	68db      	ldr	r3, [r3, #12]
 801e2ec:	685b      	ldr	r3, [r3, #4]
 801e2ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	dd12      	ble.n	801e31a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e2f4:	683b      	ldr	r3, [r7, #0]
 801e2f6:	68db      	ldr	r3, [r3, #12]
 801e2f8:	685b      	ldr	r3, [r3, #4]
 801e2fa:	b29a      	uxth	r2, r3
 801e2fc:	4b0d      	ldr	r3, [pc, #52]	@ (801e334 <tcp_oos_insert_segment+0x10c>)
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	b29b      	uxth	r3, r3
 801e302:	1ad3      	subs	r3, r2, r3
 801e304:	b29a      	uxth	r2, r3
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	685a      	ldr	r2, [r3, #4]
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	891b      	ldrh	r3, [r3, #8]
 801e312:	4619      	mov	r1, r3
 801e314:	4610      	mov	r0, r2
 801e316:	f7fc fa6d 	bl	801a7f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	683a      	ldr	r2, [r7, #0]
 801e31e:	601a      	str	r2, [r3, #0]
}
 801e320:	bf00      	nop
 801e322:	3714      	adds	r7, #20
 801e324:	46bd      	mov	sp, r7
 801e326:	bd90      	pop	{r4, r7, pc}
 801e328:	08027250 	.word	0x08027250
 801e32c:	08027554 	.word	0x08027554
 801e330:	080272e0 	.word	0x080272e0
 801e334:	20010050 	.word	0x20010050

0801e338 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801e338:	b5b0      	push	{r4, r5, r7, lr}
 801e33a:	b086      	sub	sp, #24
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	60f8      	str	r0, [r7, #12]
 801e340:	60b9      	str	r1, [r7, #8]
 801e342:	607a      	str	r2, [r7, #4]
 801e344:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801e346:	e03e      	b.n	801e3c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801e348:	68bb      	ldr	r3, [r7, #8]
 801e34a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801e34c:	68bb      	ldr	r3, [r7, #8]
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801e352:	697b      	ldr	r3, [r7, #20]
 801e354:	685b      	ldr	r3, [r3, #4]
 801e356:	4618      	mov	r0, r3
 801e358:	f7fc fc92 	bl	801ac80 <pbuf_clen>
 801e35c:	4603      	mov	r3, r0
 801e35e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e366:	8a7a      	ldrh	r2, [r7, #18]
 801e368:	429a      	cmp	r2, r3
 801e36a:	d906      	bls.n	801e37a <tcp_free_acked_segments+0x42>
 801e36c:	4b2a      	ldr	r3, [pc, #168]	@ (801e418 <tcp_free_acked_segments+0xe0>)
 801e36e:	f240 4257 	movw	r2, #1111	@ 0x457
 801e372:	492a      	ldr	r1, [pc, #168]	@ (801e41c <tcp_free_acked_segments+0xe4>)
 801e374:	482a      	ldr	r0, [pc, #168]	@ (801e420 <tcp_free_acked_segments+0xe8>)
 801e376:	f004 facf 	bl	8022918 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801e380:	8a7b      	ldrh	r3, [r7, #18]
 801e382:	1ad3      	subs	r3, r2, r3
 801e384:	b29a      	uxth	r2, r3
 801e386:	68fb      	ldr	r3, [r7, #12]
 801e388:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e38c:	697b      	ldr	r3, [r7, #20]
 801e38e:	891a      	ldrh	r2, [r3, #8]
 801e390:	4b24      	ldr	r3, [pc, #144]	@ (801e424 <tcp_free_acked_segments+0xec>)
 801e392:	881b      	ldrh	r3, [r3, #0]
 801e394:	4413      	add	r3, r2
 801e396:	b29a      	uxth	r2, r3
 801e398:	4b22      	ldr	r3, [pc, #136]	@ (801e424 <tcp_free_acked_segments+0xec>)
 801e39a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801e39c:	6978      	ldr	r0, [r7, #20]
 801e39e:	f7fe f90c 	bl	801c5ba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801e3a2:	68fb      	ldr	r3, [r7, #12]
 801e3a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d00c      	beq.n	801e3c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e3ac:	68bb      	ldr	r3, [r7, #8]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d109      	bne.n	801e3c6 <tcp_free_acked_segments+0x8e>
 801e3b2:	683b      	ldr	r3, [r7, #0]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d106      	bne.n	801e3c6 <tcp_free_acked_segments+0x8e>
 801e3b8:	4b17      	ldr	r3, [pc, #92]	@ (801e418 <tcp_free_acked_segments+0xe0>)
 801e3ba:	f240 4261 	movw	r2, #1121	@ 0x461
 801e3be:	491a      	ldr	r1, [pc, #104]	@ (801e428 <tcp_free_acked_segments+0xf0>)
 801e3c0:	4817      	ldr	r0, [pc, #92]	@ (801e420 <tcp_free_acked_segments+0xe8>)
 801e3c2:	f004 faa9 	bl	8022918 <iprintf>
  while (seg_list != NULL &&
 801e3c6:	68bb      	ldr	r3, [r7, #8]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d020      	beq.n	801e40e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801e3cc:	68bb      	ldr	r3, [r7, #8]
 801e3ce:	68db      	ldr	r3, [r3, #12]
 801e3d0:	685b      	ldr	r3, [r3, #4]
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f7fa ff29 	bl	801922a <lwip_htonl>
 801e3d8:	4604      	mov	r4, r0
 801e3da:	68bb      	ldr	r3, [r7, #8]
 801e3dc:	891b      	ldrh	r3, [r3, #8]
 801e3de:	461d      	mov	r5, r3
 801e3e0:	68bb      	ldr	r3, [r7, #8]
 801e3e2:	68db      	ldr	r3, [r3, #12]
 801e3e4:	899b      	ldrh	r3, [r3, #12]
 801e3e6:	b29b      	uxth	r3, r3
 801e3e8:	4618      	mov	r0, r3
 801e3ea:	f7fa ff09 	bl	8019200 <lwip_htons>
 801e3ee:	4603      	mov	r3, r0
 801e3f0:	b2db      	uxtb	r3, r3
 801e3f2:	f003 0303 	and.w	r3, r3, #3
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d001      	beq.n	801e3fe <tcp_free_acked_segments+0xc6>
 801e3fa:	2301      	movs	r3, #1
 801e3fc:	e000      	b.n	801e400 <tcp_free_acked_segments+0xc8>
 801e3fe:	2300      	movs	r3, #0
 801e400:	442b      	add	r3, r5
 801e402:	18e2      	adds	r2, r4, r3
 801e404:	4b09      	ldr	r3, [pc, #36]	@ (801e42c <tcp_free_acked_segments+0xf4>)
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	dd9c      	ble.n	801e348 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801e40e:	68bb      	ldr	r3, [r7, #8]
}
 801e410:	4618      	mov	r0, r3
 801e412:	3718      	adds	r7, #24
 801e414:	46bd      	mov	sp, r7
 801e416:	bdb0      	pop	{r4, r5, r7, pc}
 801e418:	08027250 	.word	0x08027250
 801e41c:	0802757c 	.word	0x0802757c
 801e420:	080272e0 	.word	0x080272e0
 801e424:	20010058 	.word	0x20010058
 801e428:	080275a4 	.word	0x080275a4
 801e42c:	20010054 	.word	0x20010054

0801e430 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801e430:	b5b0      	push	{r4, r5, r7, lr}
 801e432:	b094      	sub	sp, #80	@ 0x50
 801e434:	af00      	add	r7, sp, #0
 801e436:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801e438:	2300      	movs	r3, #0
 801e43a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d106      	bne.n	801e450 <tcp_receive+0x20>
 801e442:	4b91      	ldr	r3, [pc, #580]	@ (801e688 <tcp_receive+0x258>)
 801e444:	f240 427b 	movw	r2, #1147	@ 0x47b
 801e448:	4990      	ldr	r1, [pc, #576]	@ (801e68c <tcp_receive+0x25c>)
 801e44a:	4891      	ldr	r0, [pc, #580]	@ (801e690 <tcp_receive+0x260>)
 801e44c:	f004 fa64 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	7d1b      	ldrb	r3, [r3, #20]
 801e454:	2b03      	cmp	r3, #3
 801e456:	d806      	bhi.n	801e466 <tcp_receive+0x36>
 801e458:	4b8b      	ldr	r3, [pc, #556]	@ (801e688 <tcp_receive+0x258>)
 801e45a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801e45e:	498d      	ldr	r1, [pc, #564]	@ (801e694 <tcp_receive+0x264>)
 801e460:	488b      	ldr	r0, [pc, #556]	@ (801e690 <tcp_receive+0x260>)
 801e462:	f004 fa59 	bl	8022918 <iprintf>

  if (flags & TCP_ACK) {
 801e466:	4b8c      	ldr	r3, [pc, #560]	@ (801e698 <tcp_receive+0x268>)
 801e468:	781b      	ldrb	r3, [r3, #0]
 801e46a:	f003 0310 	and.w	r3, r3, #16
 801e46e:	2b00      	cmp	r3, #0
 801e470:	f000 8264 	beq.w	801e93c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e47a:	461a      	mov	r2, r3
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e480:	4413      	add	r3, r2
 801e482:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e488:	4b84      	ldr	r3, [pc, #528]	@ (801e69c <tcp_receive+0x26c>)
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	1ad3      	subs	r3, r2, r3
 801e48e:	2b00      	cmp	r3, #0
 801e490:	db1b      	blt.n	801e4ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e496:	4b81      	ldr	r3, [pc, #516]	@ (801e69c <tcp_receive+0x26c>)
 801e498:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e49a:	429a      	cmp	r2, r3
 801e49c:	d106      	bne.n	801e4ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e4a2:	4b7f      	ldr	r3, [pc, #508]	@ (801e6a0 <tcp_receive+0x270>)
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	1ad3      	subs	r3, r2, r3
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	db0e      	blt.n	801e4ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e4b0:	4b7b      	ldr	r3, [pc, #492]	@ (801e6a0 <tcp_receive+0x270>)
 801e4b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d125      	bne.n	801e504 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e4b8:	4b7a      	ldr	r3, [pc, #488]	@ (801e6a4 <tcp_receive+0x274>)
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	89db      	ldrh	r3, [r3, #14]
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e4c6:	429a      	cmp	r2, r3
 801e4c8:	d91c      	bls.n	801e504 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e4ca:	4b76      	ldr	r3, [pc, #472]	@ (801e6a4 <tcp_receive+0x274>)
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	89db      	ldrh	r3, [r3, #14]
 801e4d0:	b29a      	uxth	r2, r3
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e4e4:	429a      	cmp	r2, r3
 801e4e6:	d205      	bcs.n	801e4f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801e4f4:	4b69      	ldr	r3, [pc, #420]	@ (801e69c <tcp_receive+0x26c>)
 801e4f6:	681a      	ldr	r2, [r3, #0]
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801e4fc:	4b68      	ldr	r3, [pc, #416]	@ (801e6a0 <tcp_receive+0x270>)
 801e4fe:	681a      	ldr	r2, [r3, #0]
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e504:	4b66      	ldr	r3, [pc, #408]	@ (801e6a0 <tcp_receive+0x270>)
 801e506:	681a      	ldr	r2, [r3, #0]
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e50c:	1ad3      	subs	r3, r2, r3
 801e50e:	2b00      	cmp	r3, #0
 801e510:	dc58      	bgt.n	801e5c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801e512:	4b65      	ldr	r3, [pc, #404]	@ (801e6a8 <tcp_receive+0x278>)
 801e514:	881b      	ldrh	r3, [r3, #0]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d14b      	bne.n	801e5b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e51e:	687a      	ldr	r2, [r7, #4]
 801e520:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801e524:	4413      	add	r3, r2
 801e526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e528:	429a      	cmp	r2, r3
 801e52a:	d142      	bne.n	801e5b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801e532:	2b00      	cmp	r3, #0
 801e534:	db3d      	blt.n	801e5b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e53a:	4b59      	ldr	r3, [pc, #356]	@ (801e6a0 <tcp_receive+0x270>)
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	429a      	cmp	r2, r3
 801e540:	d137      	bne.n	801e5b2 <tcp_receive+0x182>
              found_dupack = 1;
 801e542:	2301      	movs	r3, #1
 801e544:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e54c:	2bff      	cmp	r3, #255	@ 0xff
 801e54e:	d007      	beq.n	801e560 <tcp_receive+0x130>
                ++pcb->dupacks;
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e556:	3301      	adds	r3, #1
 801e558:	b2da      	uxtb	r2, r3
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e566:	2b03      	cmp	r3, #3
 801e568:	d91b      	bls.n	801e5a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e574:	4413      	add	r3, r2
 801e576:	b29a      	uxth	r2, r3
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e57e:	429a      	cmp	r2, r3
 801e580:	d30a      	bcc.n	801e598 <tcp_receive+0x168>
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e58c:	4413      	add	r3, r2
 801e58e:	b29a      	uxth	r2, r3
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e596:	e004      	b.n	801e5a2 <tcp_receive+0x172>
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e59e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e5a8:	2b02      	cmp	r3, #2
 801e5aa:	d902      	bls.n	801e5b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801e5ac:	6878      	ldr	r0, [r7, #4]
 801e5ae:	f002 fb41 	bl	8020c34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801e5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	f040 8161 	bne.w	801e87c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	2200      	movs	r2, #0
 801e5be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801e5c2:	e15b      	b.n	801e87c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e5c4:	4b36      	ldr	r3, [pc, #216]	@ (801e6a0 <tcp_receive+0x270>)
 801e5c6:	681a      	ldr	r2, [r3, #0]
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e5cc:	1ad3      	subs	r3, r2, r3
 801e5ce:	3b01      	subs	r3, #1
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	f2c0 814e 	blt.w	801e872 <tcp_receive+0x442>
 801e5d6:	4b32      	ldr	r3, [pc, #200]	@ (801e6a0 <tcp_receive+0x270>)
 801e5d8:	681a      	ldr	r2, [r3, #0]
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e5de:	1ad3      	subs	r3, r2, r3
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	f300 8146 	bgt.w	801e872 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	8b5b      	ldrh	r3, [r3, #26]
 801e5ea:	f003 0304 	and.w	r3, r3, #4
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d010      	beq.n	801e614 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801e5f2:	687b      	ldr	r3, [r7, #4]
 801e5f4:	8b5b      	ldrh	r3, [r3, #26]
 801e5f6:	f023 0304 	bic.w	r3, r3, #4
 801e5fa:	b29a      	uxth	r2, r3
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	2200      	movs	r2, #0
 801e610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	2200      	movs	r2, #0
 801e618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e622:	10db      	asrs	r3, r3, #3
 801e624:	b21b      	sxth	r3, r3
 801e626:	b29a      	uxth	r2, r3
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e62e:	b29b      	uxth	r3, r3
 801e630:	4413      	add	r3, r2
 801e632:	b29b      	uxth	r3, r3
 801e634:	b21a      	sxth	r2, r3
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e63c:	4b18      	ldr	r3, [pc, #96]	@ (801e6a0 <tcp_receive+0x270>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	b29a      	uxth	r2, r3
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e646:	b29b      	uxth	r3, r3
 801e648:	1ad3      	subs	r3, r2, r3
 801e64a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	2200      	movs	r2, #0
 801e650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801e654:	4b12      	ldr	r3, [pc, #72]	@ (801e6a0 <tcp_receive+0x270>)
 801e656:	681a      	ldr	r2, [r3, #0]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	7d1b      	ldrb	r3, [r3, #20]
 801e660:	2b03      	cmp	r3, #3
 801e662:	f240 8097 	bls.w	801e794 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e672:	429a      	cmp	r2, r3
 801e674:	d245      	bcs.n	801e702 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	8b5b      	ldrh	r3, [r3, #26]
 801e67a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d014      	beq.n	801e6ac <tcp_receive+0x27c>
 801e682:	2301      	movs	r3, #1
 801e684:	e013      	b.n	801e6ae <tcp_receive+0x27e>
 801e686:	bf00      	nop
 801e688:	08027250 	.word	0x08027250
 801e68c:	080275c4 	.word	0x080275c4
 801e690:	080272e0 	.word	0x080272e0
 801e694:	080275e0 	.word	0x080275e0
 801e698:	2001005c 	.word	0x2001005c
 801e69c:	20010050 	.word	0x20010050
 801e6a0:	20010054 	.word	0x20010054
 801e6a4:	20010040 	.word	0x20010040
 801e6a8:	2001005a 	.word	0x2001005a
 801e6ac:	2302      	movs	r3, #2
 801e6ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e6b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801e6b6:	b29a      	uxth	r2, r3
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e6bc:	fb12 f303 	smulbb	r3, r2, r3
 801e6c0:	b29b      	uxth	r3, r3
 801e6c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801e6c4:	4293      	cmp	r3, r2
 801e6c6:	bf28      	it	cs
 801e6c8:	4613      	movcs	r3, r2
 801e6ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e6d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e6d4:	4413      	add	r3, r2
 801e6d6:	b29a      	uxth	r2, r3
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e6de:	429a      	cmp	r2, r3
 801e6e0:	d309      	bcc.n	801e6f6 <tcp_receive+0x2c6>
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e6e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e6ea:	4413      	add	r3, r2
 801e6ec:	b29a      	uxth	r2, r3
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e6f4:	e04e      	b.n	801e794 <tcp_receive+0x364>
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e700:	e048      	b.n	801e794 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e708:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e70a:	4413      	add	r3, r2
 801e70c:	b29a      	uxth	r2, r3
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e714:	429a      	cmp	r2, r3
 801e716:	d309      	bcc.n	801e72c <tcp_receive+0x2fc>
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e71e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e720:	4413      	add	r3, r2
 801e722:	b29a      	uxth	r2, r3
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801e72a:	e004      	b.n	801e736 <tcp_receive+0x306>
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e742:	429a      	cmp	r2, r3
 801e744:	d326      	bcc.n	801e794 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e752:	1ad3      	subs	r3, r2, r3
 801e754:	b29a      	uxth	r2, r3
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e766:	4413      	add	r3, r2
 801e768:	b29a      	uxth	r2, r3
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e770:	429a      	cmp	r2, r3
 801e772:	d30a      	bcc.n	801e78a <tcp_receive+0x35a>
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e77e:	4413      	add	r3, r2
 801e780:	b29a      	uxth	r2, r3
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e788:	e004      	b.n	801e794 <tcp_receive+0x364>
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e790:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e79c:	4a98      	ldr	r2, [pc, #608]	@ (801ea00 <tcp_receive+0x5d0>)
 801e79e:	6878      	ldr	r0, [r7, #4]
 801e7a0:	f7ff fdca 	bl	801e338 <tcp_free_acked_segments>
 801e7a4:	4602      	mov	r2, r0
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7b2:	4a94      	ldr	r2, [pc, #592]	@ (801ea04 <tcp_receive+0x5d4>)
 801e7b4:	6878      	ldr	r0, [r7, #4]
 801e7b6:	f7ff fdbf 	bl	801e338 <tcp_free_acked_segments>
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d104      	bne.n	801e7d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e7ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 801e7d0:	e002      	b.n	801e7d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	2200      	movs	r2, #0
 801e7d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	2200      	movs	r2, #0
 801e7dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d103      	bne.n	801e7ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	2200      	movs	r2, #0
 801e7ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801e7f4:	4b84      	ldr	r3, [pc, #528]	@ (801ea08 <tcp_receive+0x5d8>)
 801e7f6:	881b      	ldrh	r3, [r3, #0]
 801e7f8:	4413      	add	r3, r2
 801e7fa:	b29a      	uxth	r2, r3
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	8b5b      	ldrh	r3, [r3, #26]
 801e806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d035      	beq.n	801e87a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e812:	2b00      	cmp	r3, #0
 801e814:	d118      	bne.n	801e848 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d00c      	beq.n	801e838 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e826:	68db      	ldr	r3, [r3, #12]
 801e828:	685b      	ldr	r3, [r3, #4]
 801e82a:	4618      	mov	r0, r3
 801e82c:	f7fa fcfd 	bl	801922a <lwip_htonl>
 801e830:	4603      	mov	r3, r0
 801e832:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801e834:	2b00      	cmp	r3, #0
 801e836:	dc20      	bgt.n	801e87a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	8b5b      	ldrh	r3, [r3, #26]
 801e83c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e840:	b29a      	uxth	r2, r3
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e846:	e018      	b.n	801e87a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e850:	68db      	ldr	r3, [r3, #12]
 801e852:	685b      	ldr	r3, [r3, #4]
 801e854:	4618      	mov	r0, r3
 801e856:	f7fa fce8 	bl	801922a <lwip_htonl>
 801e85a:	4603      	mov	r3, r0
 801e85c:	1ae3      	subs	r3, r4, r3
 801e85e:	2b00      	cmp	r3, #0
 801e860:	dc0b      	bgt.n	801e87a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	8b5b      	ldrh	r3, [r3, #26]
 801e866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e86a:	b29a      	uxth	r2, r3
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e870:	e003      	b.n	801e87a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801e872:	6878      	ldr	r0, [r7, #4]
 801e874:	f002 fbca 	bl	802100c <tcp_send_empty_ack>
 801e878:	e000      	b.n	801e87c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e87a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e880:	2b00      	cmp	r3, #0
 801e882:	d05b      	beq.n	801e93c <tcp_receive+0x50c>
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e888:	4b60      	ldr	r3, [pc, #384]	@ (801ea0c <tcp_receive+0x5dc>)
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	1ad3      	subs	r3, r2, r3
 801e88e:	2b00      	cmp	r3, #0
 801e890:	da54      	bge.n	801e93c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e892:	4b5f      	ldr	r3, [pc, #380]	@ (801ea10 <tcp_receive+0x5e0>)
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	b29a      	uxth	r2, r3
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e89c:	b29b      	uxth	r3, r3
 801e89e:	1ad3      	subs	r3, r2, r3
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801e8a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e8b0:	10db      	asrs	r3, r3, #3
 801e8b2:	b21b      	sxth	r3, r3
 801e8b4:	b29b      	uxth	r3, r3
 801e8b6:	1ad3      	subs	r3, r2, r3
 801e8b8:	b29b      	uxth	r3, r3
 801e8ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e8c4:	b29a      	uxth	r2, r3
 801e8c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e8ca:	4413      	add	r3, r2
 801e8cc:	b29b      	uxth	r3, r3
 801e8ce:	b21a      	sxth	r2, r3
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801e8d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	da05      	bge.n	801e8e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801e8dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e8e0:	425b      	negs	r3, r3
 801e8e2:	b29b      	uxth	r3, r3
 801e8e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801e8e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e8f2:	109b      	asrs	r3, r3, #2
 801e8f4:	b21b      	sxth	r3, r3
 801e8f6:	b29b      	uxth	r3, r3
 801e8f8:	1ad3      	subs	r3, r2, r3
 801e8fa:	b29b      	uxth	r3, r3
 801e8fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e906:	b29a      	uxth	r2, r3
 801e908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e90c:	4413      	add	r3, r2
 801e90e:	b29b      	uxth	r3, r3
 801e910:	b21a      	sxth	r2, r3
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e91c:	10db      	asrs	r3, r3, #3
 801e91e:	b21b      	sxth	r3, r3
 801e920:	b29a      	uxth	r2, r3
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e928:	b29b      	uxth	r3, r3
 801e92a:	4413      	add	r3, r2
 801e92c:	b29b      	uxth	r3, r3
 801e92e:	b21a      	sxth	r2, r3
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	2200      	movs	r2, #0
 801e93a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e93c:	4b35      	ldr	r3, [pc, #212]	@ (801ea14 <tcp_receive+0x5e4>)
 801e93e:	881b      	ldrh	r3, [r3, #0]
 801e940:	2b00      	cmp	r3, #0
 801e942:	f000 84df 	beq.w	801f304 <tcp_receive+0xed4>
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	7d1b      	ldrb	r3, [r3, #20]
 801e94a:	2b06      	cmp	r3, #6
 801e94c:	f200 84da 	bhi.w	801f304 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e954:	4b30      	ldr	r3, [pc, #192]	@ (801ea18 <tcp_receive+0x5e8>)
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	1ad3      	subs	r3, r2, r3
 801e95a:	3b01      	subs	r3, #1
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	f2c0 808f 	blt.w	801ea80 <tcp_receive+0x650>
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e966:	4b2b      	ldr	r3, [pc, #172]	@ (801ea14 <tcp_receive+0x5e4>)
 801e968:	881b      	ldrh	r3, [r3, #0]
 801e96a:	4619      	mov	r1, r3
 801e96c:	4b2a      	ldr	r3, [pc, #168]	@ (801ea18 <tcp_receive+0x5e8>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	440b      	add	r3, r1
 801e972:	1ad3      	subs	r3, r2, r3
 801e974:	3301      	adds	r3, #1
 801e976:	2b00      	cmp	r3, #0
 801e978:	f300 8082 	bgt.w	801ea80 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801e97c:	4b27      	ldr	r3, [pc, #156]	@ (801ea1c <tcp_receive+0x5ec>)
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e986:	4b24      	ldr	r3, [pc, #144]	@ (801ea18 <tcp_receive+0x5e8>)
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	1ad3      	subs	r3, r2, r3
 801e98c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e98e:	4b23      	ldr	r3, [pc, #140]	@ (801ea1c <tcp_receive+0x5ec>)
 801e990:	685b      	ldr	r3, [r3, #4]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d106      	bne.n	801e9a4 <tcp_receive+0x574>
 801e996:	4b22      	ldr	r3, [pc, #136]	@ (801ea20 <tcp_receive+0x5f0>)
 801e998:	f240 5294 	movw	r2, #1428	@ 0x594
 801e99c:	4921      	ldr	r1, [pc, #132]	@ (801ea24 <tcp_receive+0x5f4>)
 801e99e:	4822      	ldr	r0, [pc, #136]	@ (801ea28 <tcp_receive+0x5f8>)
 801e9a0:	f003 ffba 	bl	8022918 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e9aa:	4293      	cmp	r3, r2
 801e9ac:	d906      	bls.n	801e9bc <tcp_receive+0x58c>
 801e9ae:	4b1c      	ldr	r3, [pc, #112]	@ (801ea20 <tcp_receive+0x5f0>)
 801e9b0:	f240 5295 	movw	r2, #1429	@ 0x595
 801e9b4:	491d      	ldr	r1, [pc, #116]	@ (801ea2c <tcp_receive+0x5fc>)
 801e9b6:	481c      	ldr	r0, [pc, #112]	@ (801ea28 <tcp_receive+0x5f8>)
 801e9b8:	f003 ffae 	bl	8022918 <iprintf>
      off = (u16_t)off32;
 801e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e9c2:	4b16      	ldr	r3, [pc, #88]	@ (801ea1c <tcp_receive+0x5ec>)
 801e9c4:	685b      	ldr	r3, [r3, #4]
 801e9c6:	891b      	ldrh	r3, [r3, #8]
 801e9c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e9cc:	429a      	cmp	r2, r3
 801e9ce:	d906      	bls.n	801e9de <tcp_receive+0x5ae>
 801e9d0:	4b13      	ldr	r3, [pc, #76]	@ (801ea20 <tcp_receive+0x5f0>)
 801e9d2:	f240 5297 	movw	r2, #1431	@ 0x597
 801e9d6:	4916      	ldr	r1, [pc, #88]	@ (801ea30 <tcp_receive+0x600>)
 801e9d8:	4813      	ldr	r0, [pc, #76]	@ (801ea28 <tcp_receive+0x5f8>)
 801e9da:	f003 ff9d 	bl	8022918 <iprintf>
      inseg.len -= off;
 801e9de:	4b0f      	ldr	r3, [pc, #60]	@ (801ea1c <tcp_receive+0x5ec>)
 801e9e0:	891a      	ldrh	r2, [r3, #8]
 801e9e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e9e6:	1ad3      	subs	r3, r2, r3
 801e9e8:	b29a      	uxth	r2, r3
 801e9ea:	4b0c      	ldr	r3, [pc, #48]	@ (801ea1c <tcp_receive+0x5ec>)
 801e9ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e9ee:	4b0b      	ldr	r3, [pc, #44]	@ (801ea1c <tcp_receive+0x5ec>)
 801e9f0:	685b      	ldr	r3, [r3, #4]
 801e9f2:	891a      	ldrh	r2, [r3, #8]
 801e9f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e9f8:	1ad3      	subs	r3, r2, r3
 801e9fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801e9fc:	e02a      	b.n	801ea54 <tcp_receive+0x624>
 801e9fe:	bf00      	nop
 801ea00:	080275fc 	.word	0x080275fc
 801ea04:	08027604 	.word	0x08027604
 801ea08:	20010058 	.word	0x20010058
 801ea0c:	20010054 	.word	0x20010054
 801ea10:	20010018 	.word	0x20010018
 801ea14:	2001005a 	.word	0x2001005a
 801ea18:	20010050 	.word	0x20010050
 801ea1c:	20010030 	.word	0x20010030
 801ea20:	08027250 	.word	0x08027250
 801ea24:	0802760c 	.word	0x0802760c
 801ea28:	080272e0 	.word	0x080272e0
 801ea2c:	0802761c 	.word	0x0802761c
 801ea30:	0802762c 	.word	0x0802762c
        off -= p->len;
 801ea34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea36:	895b      	ldrh	r3, [r3, #10]
 801ea38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea3c:	1ad3      	subs	r3, r2, r3
 801ea3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801ea42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea44:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801ea46:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ea48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea4a:	2200      	movs	r2, #0
 801ea4c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ea4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801ea54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea56:	895b      	ldrh	r3, [r3, #10]
 801ea58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	d8e9      	bhi.n	801ea34 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ea60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea64:	4619      	mov	r1, r3
 801ea66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ea68:	f7fb ffc4 	bl	801a9f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea70:	4a90      	ldr	r2, [pc, #576]	@ (801ecb4 <tcp_receive+0x884>)
 801ea72:	6013      	str	r3, [r2, #0]
 801ea74:	4b90      	ldr	r3, [pc, #576]	@ (801ecb8 <tcp_receive+0x888>)
 801ea76:	68db      	ldr	r3, [r3, #12]
 801ea78:	4a8e      	ldr	r2, [pc, #568]	@ (801ecb4 <tcp_receive+0x884>)
 801ea7a:	6812      	ldr	r2, [r2, #0]
 801ea7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ea7e:	e00d      	b.n	801ea9c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801ea80:	4b8c      	ldr	r3, [pc, #560]	@ (801ecb4 <tcp_receive+0x884>)
 801ea82:	681a      	ldr	r2, [r3, #0]
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea88:	1ad3      	subs	r3, r2, r3
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	da06      	bge.n	801ea9c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	8b5b      	ldrh	r3, [r3, #26]
 801ea92:	f043 0302 	orr.w	r3, r3, #2
 801ea96:	b29a      	uxth	r2, r3
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ea9c:	4b85      	ldr	r3, [pc, #532]	@ (801ecb4 <tcp_receive+0x884>)
 801ea9e:	681a      	ldr	r2, [r3, #0]
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eaa4:	1ad3      	subs	r3, r2, r3
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	f2c0 8427 	blt.w	801f2fa <tcp_receive+0xeca>
 801eaac:	4b81      	ldr	r3, [pc, #516]	@ (801ecb4 <tcp_receive+0x884>)
 801eaae:	681a      	ldr	r2, [r3, #0]
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eab4:	6879      	ldr	r1, [r7, #4]
 801eab6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801eab8:	440b      	add	r3, r1
 801eaba:	1ad3      	subs	r3, r2, r3
 801eabc:	3301      	adds	r3, #1
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	f300 841b 	bgt.w	801f2fa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801eac8:	4b7a      	ldr	r3, [pc, #488]	@ (801ecb4 <tcp_receive+0x884>)
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	429a      	cmp	r2, r3
 801eace:	f040 8298 	bne.w	801f002 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801ead2:	4b79      	ldr	r3, [pc, #484]	@ (801ecb8 <tcp_receive+0x888>)
 801ead4:	891c      	ldrh	r4, [r3, #8]
 801ead6:	4b78      	ldr	r3, [pc, #480]	@ (801ecb8 <tcp_receive+0x888>)
 801ead8:	68db      	ldr	r3, [r3, #12]
 801eada:	899b      	ldrh	r3, [r3, #12]
 801eadc:	b29b      	uxth	r3, r3
 801eade:	4618      	mov	r0, r3
 801eae0:	f7fa fb8e 	bl	8019200 <lwip_htons>
 801eae4:	4603      	mov	r3, r0
 801eae6:	b2db      	uxtb	r3, r3
 801eae8:	f003 0303 	and.w	r3, r3, #3
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d001      	beq.n	801eaf4 <tcp_receive+0x6c4>
 801eaf0:	2301      	movs	r3, #1
 801eaf2:	e000      	b.n	801eaf6 <tcp_receive+0x6c6>
 801eaf4:	2300      	movs	r3, #0
 801eaf6:	4423      	add	r3, r4
 801eaf8:	b29a      	uxth	r2, r3
 801eafa:	4b70      	ldr	r3, [pc, #448]	@ (801ecbc <tcp_receive+0x88c>)
 801eafc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801eb02:	4b6e      	ldr	r3, [pc, #440]	@ (801ecbc <tcp_receive+0x88c>)
 801eb04:	881b      	ldrh	r3, [r3, #0]
 801eb06:	429a      	cmp	r2, r3
 801eb08:	d274      	bcs.n	801ebf4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb0a:	4b6b      	ldr	r3, [pc, #428]	@ (801ecb8 <tcp_receive+0x888>)
 801eb0c:	68db      	ldr	r3, [r3, #12]
 801eb0e:	899b      	ldrh	r3, [r3, #12]
 801eb10:	b29b      	uxth	r3, r3
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7fa fb74 	bl	8019200 <lwip_htons>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	b2db      	uxtb	r3, r3
 801eb1c:	f003 0301 	and.w	r3, r3, #1
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d01e      	beq.n	801eb62 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eb24:	4b64      	ldr	r3, [pc, #400]	@ (801ecb8 <tcp_receive+0x888>)
 801eb26:	68db      	ldr	r3, [r3, #12]
 801eb28:	899b      	ldrh	r3, [r3, #12]
 801eb2a:	b29b      	uxth	r3, r3
 801eb2c:	b21b      	sxth	r3, r3
 801eb2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801eb32:	b21c      	sxth	r4, r3
 801eb34:	4b60      	ldr	r3, [pc, #384]	@ (801ecb8 <tcp_receive+0x888>)
 801eb36:	68db      	ldr	r3, [r3, #12]
 801eb38:	899b      	ldrh	r3, [r3, #12]
 801eb3a:	b29b      	uxth	r3, r3
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	f7fa fb5f 	bl	8019200 <lwip_htons>
 801eb42:	4603      	mov	r3, r0
 801eb44:	b2db      	uxtb	r3, r3
 801eb46:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801eb4a:	b29b      	uxth	r3, r3
 801eb4c:	4618      	mov	r0, r3
 801eb4e:	f7fa fb57 	bl	8019200 <lwip_htons>
 801eb52:	4603      	mov	r3, r0
 801eb54:	b21b      	sxth	r3, r3
 801eb56:	4323      	orrs	r3, r4
 801eb58:	b21a      	sxth	r2, r3
 801eb5a:	4b57      	ldr	r3, [pc, #348]	@ (801ecb8 <tcp_receive+0x888>)
 801eb5c:	68db      	ldr	r3, [r3, #12]
 801eb5e:	b292      	uxth	r2, r2
 801eb60:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801eb66:	4b54      	ldr	r3, [pc, #336]	@ (801ecb8 <tcp_receive+0x888>)
 801eb68:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb6a:	4b53      	ldr	r3, [pc, #332]	@ (801ecb8 <tcp_receive+0x888>)
 801eb6c:	68db      	ldr	r3, [r3, #12]
 801eb6e:	899b      	ldrh	r3, [r3, #12]
 801eb70:	b29b      	uxth	r3, r3
 801eb72:	4618      	mov	r0, r3
 801eb74:	f7fa fb44 	bl	8019200 <lwip_htons>
 801eb78:	4603      	mov	r3, r0
 801eb7a:	b2db      	uxtb	r3, r3
 801eb7c:	f003 0302 	and.w	r3, r3, #2
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d005      	beq.n	801eb90 <tcp_receive+0x760>
            inseg.len -= 1;
 801eb84:	4b4c      	ldr	r3, [pc, #304]	@ (801ecb8 <tcp_receive+0x888>)
 801eb86:	891b      	ldrh	r3, [r3, #8]
 801eb88:	3b01      	subs	r3, #1
 801eb8a:	b29a      	uxth	r2, r3
 801eb8c:	4b4a      	ldr	r3, [pc, #296]	@ (801ecb8 <tcp_receive+0x888>)
 801eb8e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801eb90:	4b49      	ldr	r3, [pc, #292]	@ (801ecb8 <tcp_receive+0x888>)
 801eb92:	685b      	ldr	r3, [r3, #4]
 801eb94:	4a48      	ldr	r2, [pc, #288]	@ (801ecb8 <tcp_receive+0x888>)
 801eb96:	8912      	ldrh	r2, [r2, #8]
 801eb98:	4611      	mov	r1, r2
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	f7fb fe2a 	bl	801a7f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801eba0:	4b45      	ldr	r3, [pc, #276]	@ (801ecb8 <tcp_receive+0x888>)
 801eba2:	891c      	ldrh	r4, [r3, #8]
 801eba4:	4b44      	ldr	r3, [pc, #272]	@ (801ecb8 <tcp_receive+0x888>)
 801eba6:	68db      	ldr	r3, [r3, #12]
 801eba8:	899b      	ldrh	r3, [r3, #12]
 801ebaa:	b29b      	uxth	r3, r3
 801ebac:	4618      	mov	r0, r3
 801ebae:	f7fa fb27 	bl	8019200 <lwip_htons>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	b2db      	uxtb	r3, r3
 801ebb6:	f003 0303 	and.w	r3, r3, #3
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d001      	beq.n	801ebc2 <tcp_receive+0x792>
 801ebbe:	2301      	movs	r3, #1
 801ebc0:	e000      	b.n	801ebc4 <tcp_receive+0x794>
 801ebc2:	2300      	movs	r3, #0
 801ebc4:	4423      	add	r3, r4
 801ebc6:	b29a      	uxth	r2, r3
 801ebc8:	4b3c      	ldr	r3, [pc, #240]	@ (801ecbc <tcp_receive+0x88c>)
 801ebca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ebcc:	4b3b      	ldr	r3, [pc, #236]	@ (801ecbc <tcp_receive+0x88c>)
 801ebce:	881b      	ldrh	r3, [r3, #0]
 801ebd0:	461a      	mov	r2, r3
 801ebd2:	4b38      	ldr	r3, [pc, #224]	@ (801ecb4 <tcp_receive+0x884>)
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	441a      	add	r2, r3
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ebdc:	6879      	ldr	r1, [r7, #4]
 801ebde:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ebe0:	440b      	add	r3, r1
 801ebe2:	429a      	cmp	r2, r3
 801ebe4:	d006      	beq.n	801ebf4 <tcp_receive+0x7c4>
 801ebe6:	4b36      	ldr	r3, [pc, #216]	@ (801ecc0 <tcp_receive+0x890>)
 801ebe8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801ebec:	4935      	ldr	r1, [pc, #212]	@ (801ecc4 <tcp_receive+0x894>)
 801ebee:	4836      	ldr	r0, [pc, #216]	@ (801ecc8 <tcp_receive+0x898>)
 801ebf0:	f003 fe92 	bl	8022918 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	f000 80e6 	beq.w	801edca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ebfe:	4b2e      	ldr	r3, [pc, #184]	@ (801ecb8 <tcp_receive+0x888>)
 801ec00:	68db      	ldr	r3, [r3, #12]
 801ec02:	899b      	ldrh	r3, [r3, #12]
 801ec04:	b29b      	uxth	r3, r3
 801ec06:	4618      	mov	r0, r3
 801ec08:	f7fa fafa 	bl	8019200 <lwip_htons>
 801ec0c:	4603      	mov	r3, r0
 801ec0e:	b2db      	uxtb	r3, r3
 801ec10:	f003 0301 	and.w	r3, r3, #1
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d010      	beq.n	801ec3a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801ec18:	e00a      	b.n	801ec30 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec1e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec24:	681a      	ldr	r2, [r3, #0]
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801ec2a:	68f8      	ldr	r0, [r7, #12]
 801ec2c:	f7fd fcc5 	bl	801c5ba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d1f0      	bne.n	801ec1a <tcp_receive+0x7ea>
 801ec38:	e0c7      	b.n	801edca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801ec40:	e051      	b.n	801ece6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ec42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec44:	68db      	ldr	r3, [r3, #12]
 801ec46:	899b      	ldrh	r3, [r3, #12]
 801ec48:	b29b      	uxth	r3, r3
 801ec4a:	4618      	mov	r0, r3
 801ec4c:	f7fa fad8 	bl	8019200 <lwip_htons>
 801ec50:	4603      	mov	r3, r0
 801ec52:	b2db      	uxtb	r3, r3
 801ec54:	f003 0301 	and.w	r3, r3, #1
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d03c      	beq.n	801ecd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801ec5c:	4b16      	ldr	r3, [pc, #88]	@ (801ecb8 <tcp_receive+0x888>)
 801ec5e:	68db      	ldr	r3, [r3, #12]
 801ec60:	899b      	ldrh	r3, [r3, #12]
 801ec62:	b29b      	uxth	r3, r3
 801ec64:	4618      	mov	r0, r3
 801ec66:	f7fa facb 	bl	8019200 <lwip_htons>
 801ec6a:	4603      	mov	r3, r0
 801ec6c:	b2db      	uxtb	r3, r3
 801ec6e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d12f      	bne.n	801ecd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801ec76:	4b10      	ldr	r3, [pc, #64]	@ (801ecb8 <tcp_receive+0x888>)
 801ec78:	68db      	ldr	r3, [r3, #12]
 801ec7a:	899b      	ldrh	r3, [r3, #12]
 801ec7c:	b29c      	uxth	r4, r3
 801ec7e:	2001      	movs	r0, #1
 801ec80:	f7fa fabe 	bl	8019200 <lwip_htons>
 801ec84:	4603      	mov	r3, r0
 801ec86:	461a      	mov	r2, r3
 801ec88:	4b0b      	ldr	r3, [pc, #44]	@ (801ecb8 <tcp_receive+0x888>)
 801ec8a:	68db      	ldr	r3, [r3, #12]
 801ec8c:	4322      	orrs	r2, r4
 801ec8e:	b292      	uxth	r2, r2
 801ec90:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801ec92:	4b09      	ldr	r3, [pc, #36]	@ (801ecb8 <tcp_receive+0x888>)
 801ec94:	891c      	ldrh	r4, [r3, #8]
 801ec96:	4b08      	ldr	r3, [pc, #32]	@ (801ecb8 <tcp_receive+0x888>)
 801ec98:	68db      	ldr	r3, [r3, #12]
 801ec9a:	899b      	ldrh	r3, [r3, #12]
 801ec9c:	b29b      	uxth	r3, r3
 801ec9e:	4618      	mov	r0, r3
 801eca0:	f7fa faae 	bl	8019200 <lwip_htons>
 801eca4:	4603      	mov	r3, r0
 801eca6:	b2db      	uxtb	r3, r3
 801eca8:	f003 0303 	and.w	r3, r3, #3
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d00d      	beq.n	801eccc <tcp_receive+0x89c>
 801ecb0:	2301      	movs	r3, #1
 801ecb2:	e00c      	b.n	801ecce <tcp_receive+0x89e>
 801ecb4:	20010050 	.word	0x20010050
 801ecb8:	20010030 	.word	0x20010030
 801ecbc:	2001005a 	.word	0x2001005a
 801ecc0:	08027250 	.word	0x08027250
 801ecc4:	0802763c 	.word	0x0802763c
 801ecc8:	080272e0 	.word	0x080272e0
 801eccc:	2300      	movs	r3, #0
 801ecce:	4423      	add	r3, r4
 801ecd0:	b29a      	uxth	r2, r3
 801ecd2:	4b98      	ldr	r3, [pc, #608]	@ (801ef34 <tcp_receive+0xb04>)
 801ecd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ecd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ecda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801ece0:	6938      	ldr	r0, [r7, #16]
 801ece2:	f7fd fc6a 	bl	801c5ba <tcp_seg_free>
            while (next &&
 801ece6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d00e      	beq.n	801ed0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ecec:	4b91      	ldr	r3, [pc, #580]	@ (801ef34 <tcp_receive+0xb04>)
 801ecee:	881b      	ldrh	r3, [r3, #0]
 801ecf0:	461a      	mov	r2, r3
 801ecf2:	4b91      	ldr	r3, [pc, #580]	@ (801ef38 <tcp_receive+0xb08>)
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	441a      	add	r2, r3
 801ecf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecfa:	68db      	ldr	r3, [r3, #12]
 801ecfc:	685b      	ldr	r3, [r3, #4]
 801ecfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ed00:	8909      	ldrh	r1, [r1, #8]
 801ed02:	440b      	add	r3, r1
 801ed04:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	da9b      	bge.n	801ec42 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ed0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d059      	beq.n	801edc4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801ed10:	4b88      	ldr	r3, [pc, #544]	@ (801ef34 <tcp_receive+0xb04>)
 801ed12:	881b      	ldrh	r3, [r3, #0]
 801ed14:	461a      	mov	r2, r3
 801ed16:	4b88      	ldr	r3, [pc, #544]	@ (801ef38 <tcp_receive+0xb08>)
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	441a      	add	r2, r3
 801ed1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed1e:	68db      	ldr	r3, [r3, #12]
 801ed20:	685b      	ldr	r3, [r3, #4]
 801ed22:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	dd4d      	ble.n	801edc4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ed28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed2a:	68db      	ldr	r3, [r3, #12]
 801ed2c:	685b      	ldr	r3, [r3, #4]
 801ed2e:	b29a      	uxth	r2, r3
 801ed30:	4b81      	ldr	r3, [pc, #516]	@ (801ef38 <tcp_receive+0xb08>)
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	b29b      	uxth	r3, r3
 801ed36:	1ad3      	subs	r3, r2, r3
 801ed38:	b29a      	uxth	r2, r3
 801ed3a:	4b80      	ldr	r3, [pc, #512]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ed3e:	4b7f      	ldr	r3, [pc, #508]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed40:	68db      	ldr	r3, [r3, #12]
 801ed42:	899b      	ldrh	r3, [r3, #12]
 801ed44:	b29b      	uxth	r3, r3
 801ed46:	4618      	mov	r0, r3
 801ed48:	f7fa fa5a 	bl	8019200 <lwip_htons>
 801ed4c:	4603      	mov	r3, r0
 801ed4e:	b2db      	uxtb	r3, r3
 801ed50:	f003 0302 	and.w	r3, r3, #2
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d005      	beq.n	801ed64 <tcp_receive+0x934>
                inseg.len -= 1;
 801ed58:	4b78      	ldr	r3, [pc, #480]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed5a:	891b      	ldrh	r3, [r3, #8]
 801ed5c:	3b01      	subs	r3, #1
 801ed5e:	b29a      	uxth	r2, r3
 801ed60:	4b76      	ldr	r3, [pc, #472]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801ed64:	4b75      	ldr	r3, [pc, #468]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed66:	685b      	ldr	r3, [r3, #4]
 801ed68:	4a74      	ldr	r2, [pc, #464]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed6a:	8912      	ldrh	r2, [r2, #8]
 801ed6c:	4611      	mov	r1, r2
 801ed6e:	4618      	mov	r0, r3
 801ed70:	f7fb fd40 	bl	801a7f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801ed74:	4b71      	ldr	r3, [pc, #452]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed76:	891c      	ldrh	r4, [r3, #8]
 801ed78:	4b70      	ldr	r3, [pc, #448]	@ (801ef3c <tcp_receive+0xb0c>)
 801ed7a:	68db      	ldr	r3, [r3, #12]
 801ed7c:	899b      	ldrh	r3, [r3, #12]
 801ed7e:	b29b      	uxth	r3, r3
 801ed80:	4618      	mov	r0, r3
 801ed82:	f7fa fa3d 	bl	8019200 <lwip_htons>
 801ed86:	4603      	mov	r3, r0
 801ed88:	b2db      	uxtb	r3, r3
 801ed8a:	f003 0303 	and.w	r3, r3, #3
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d001      	beq.n	801ed96 <tcp_receive+0x966>
 801ed92:	2301      	movs	r3, #1
 801ed94:	e000      	b.n	801ed98 <tcp_receive+0x968>
 801ed96:	2300      	movs	r3, #0
 801ed98:	4423      	add	r3, r4
 801ed9a:	b29a      	uxth	r2, r3
 801ed9c:	4b65      	ldr	r3, [pc, #404]	@ (801ef34 <tcp_receive+0xb04>)
 801ed9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801eda0:	4b64      	ldr	r3, [pc, #400]	@ (801ef34 <tcp_receive+0xb04>)
 801eda2:	881b      	ldrh	r3, [r3, #0]
 801eda4:	461a      	mov	r2, r3
 801eda6:	4b64      	ldr	r3, [pc, #400]	@ (801ef38 <tcp_receive+0xb08>)
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	441a      	add	r2, r3
 801edac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801edae:	68db      	ldr	r3, [r3, #12]
 801edb0:	685b      	ldr	r3, [r3, #4]
 801edb2:	429a      	cmp	r2, r3
 801edb4:	d006      	beq.n	801edc4 <tcp_receive+0x994>
 801edb6:	4b62      	ldr	r3, [pc, #392]	@ (801ef40 <tcp_receive+0xb10>)
 801edb8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801edbc:	4961      	ldr	r1, [pc, #388]	@ (801ef44 <tcp_receive+0xb14>)
 801edbe:	4862      	ldr	r0, [pc, #392]	@ (801ef48 <tcp_receive+0xb18>)
 801edc0:	f003 fdaa 	bl	8022918 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801edc8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801edca:	4b5a      	ldr	r3, [pc, #360]	@ (801ef34 <tcp_receive+0xb04>)
 801edcc:	881b      	ldrh	r3, [r3, #0]
 801edce:	461a      	mov	r2, r3
 801edd0:	4b59      	ldr	r3, [pc, #356]	@ (801ef38 <tcp_receive+0xb08>)
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	441a      	add	r2, r3
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801edde:	4b55      	ldr	r3, [pc, #340]	@ (801ef34 <tcp_receive+0xb04>)
 801ede0:	881b      	ldrh	r3, [r3, #0]
 801ede2:	429a      	cmp	r2, r3
 801ede4:	d206      	bcs.n	801edf4 <tcp_receive+0x9c4>
 801ede6:	4b56      	ldr	r3, [pc, #344]	@ (801ef40 <tcp_receive+0xb10>)
 801ede8:	f240 6207 	movw	r2, #1543	@ 0x607
 801edec:	4957      	ldr	r1, [pc, #348]	@ (801ef4c <tcp_receive+0xb1c>)
 801edee:	4856      	ldr	r0, [pc, #344]	@ (801ef48 <tcp_receive+0xb18>)
 801edf0:	f003 fd92 	bl	8022918 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801edf8:	4b4e      	ldr	r3, [pc, #312]	@ (801ef34 <tcp_receive+0xb04>)
 801edfa:	881b      	ldrh	r3, [r3, #0]
 801edfc:	1ad3      	subs	r3, r2, r3
 801edfe:	b29a      	uxth	r2, r3
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ee04:	6878      	ldr	r0, [r7, #4]
 801ee06:	f7fc fead 	bl	801bb64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ee0a:	4b4c      	ldr	r3, [pc, #304]	@ (801ef3c <tcp_receive+0xb0c>)
 801ee0c:	685b      	ldr	r3, [r3, #4]
 801ee0e:	891b      	ldrh	r3, [r3, #8]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d006      	beq.n	801ee22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801ee14:	4b49      	ldr	r3, [pc, #292]	@ (801ef3c <tcp_receive+0xb0c>)
 801ee16:	685b      	ldr	r3, [r3, #4]
 801ee18:	4a4d      	ldr	r2, [pc, #308]	@ (801ef50 <tcp_receive+0xb20>)
 801ee1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ee1c:	4b47      	ldr	r3, [pc, #284]	@ (801ef3c <tcp_receive+0xb0c>)
 801ee1e:	2200      	movs	r2, #0
 801ee20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ee22:	4b46      	ldr	r3, [pc, #280]	@ (801ef3c <tcp_receive+0xb0c>)
 801ee24:	68db      	ldr	r3, [r3, #12]
 801ee26:	899b      	ldrh	r3, [r3, #12]
 801ee28:	b29b      	uxth	r3, r3
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	f7fa f9e8 	bl	8019200 <lwip_htons>
 801ee30:	4603      	mov	r3, r0
 801ee32:	b2db      	uxtb	r3, r3
 801ee34:	f003 0301 	and.w	r3, r3, #1
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	f000 80b8 	beq.w	801efae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ee3e:	4b45      	ldr	r3, [pc, #276]	@ (801ef54 <tcp_receive+0xb24>)
 801ee40:	781b      	ldrb	r3, [r3, #0]
 801ee42:	f043 0320 	orr.w	r3, r3, #32
 801ee46:	b2da      	uxtb	r2, r3
 801ee48:	4b42      	ldr	r3, [pc, #264]	@ (801ef54 <tcp_receive+0xb24>)
 801ee4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801ee4c:	e0af      	b.n	801efae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee58:	68db      	ldr	r3, [r3, #12]
 801ee5a:	685b      	ldr	r3, [r3, #4]
 801ee5c:	4a36      	ldr	r2, [pc, #216]	@ (801ef38 <tcp_receive+0xb08>)
 801ee5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ee60:	68bb      	ldr	r3, [r7, #8]
 801ee62:	891b      	ldrh	r3, [r3, #8]
 801ee64:	461c      	mov	r4, r3
 801ee66:	68bb      	ldr	r3, [r7, #8]
 801ee68:	68db      	ldr	r3, [r3, #12]
 801ee6a:	899b      	ldrh	r3, [r3, #12]
 801ee6c:	b29b      	uxth	r3, r3
 801ee6e:	4618      	mov	r0, r3
 801ee70:	f7fa f9c6 	bl	8019200 <lwip_htons>
 801ee74:	4603      	mov	r3, r0
 801ee76:	b2db      	uxtb	r3, r3
 801ee78:	f003 0303 	and.w	r3, r3, #3
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d001      	beq.n	801ee84 <tcp_receive+0xa54>
 801ee80:	2301      	movs	r3, #1
 801ee82:	e000      	b.n	801ee86 <tcp_receive+0xa56>
 801ee84:	2300      	movs	r3, #0
 801ee86:	191a      	adds	r2, r3, r4
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ee8c:	441a      	add	r2, r3
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ee96:	461c      	mov	r4, r3
 801ee98:	68bb      	ldr	r3, [r7, #8]
 801ee9a:	891b      	ldrh	r3, [r3, #8]
 801ee9c:	461d      	mov	r5, r3
 801ee9e:	68bb      	ldr	r3, [r7, #8]
 801eea0:	68db      	ldr	r3, [r3, #12]
 801eea2:	899b      	ldrh	r3, [r3, #12]
 801eea4:	b29b      	uxth	r3, r3
 801eea6:	4618      	mov	r0, r3
 801eea8:	f7fa f9aa 	bl	8019200 <lwip_htons>
 801eeac:	4603      	mov	r3, r0
 801eeae:	b2db      	uxtb	r3, r3
 801eeb0:	f003 0303 	and.w	r3, r3, #3
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d001      	beq.n	801eebc <tcp_receive+0xa8c>
 801eeb8:	2301      	movs	r3, #1
 801eeba:	e000      	b.n	801eebe <tcp_receive+0xa8e>
 801eebc:	2300      	movs	r3, #0
 801eebe:	442b      	add	r3, r5
 801eec0:	429c      	cmp	r4, r3
 801eec2:	d206      	bcs.n	801eed2 <tcp_receive+0xaa2>
 801eec4:	4b1e      	ldr	r3, [pc, #120]	@ (801ef40 <tcp_receive+0xb10>)
 801eec6:	f240 622b 	movw	r2, #1579	@ 0x62b
 801eeca:	4923      	ldr	r1, [pc, #140]	@ (801ef58 <tcp_receive+0xb28>)
 801eecc:	481e      	ldr	r0, [pc, #120]	@ (801ef48 <tcp_receive+0xb18>)
 801eece:	f003 fd23 	bl	8022918 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801eed2:	68bb      	ldr	r3, [r7, #8]
 801eed4:	891b      	ldrh	r3, [r3, #8]
 801eed6:	461c      	mov	r4, r3
 801eed8:	68bb      	ldr	r3, [r7, #8]
 801eeda:	68db      	ldr	r3, [r3, #12]
 801eedc:	899b      	ldrh	r3, [r3, #12]
 801eede:	b29b      	uxth	r3, r3
 801eee0:	4618      	mov	r0, r3
 801eee2:	f7fa f98d 	bl	8019200 <lwip_htons>
 801eee6:	4603      	mov	r3, r0
 801eee8:	b2db      	uxtb	r3, r3
 801eeea:	f003 0303 	and.w	r3, r3, #3
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d001      	beq.n	801eef6 <tcp_receive+0xac6>
 801eef2:	2301      	movs	r3, #1
 801eef4:	e000      	b.n	801eef8 <tcp_receive+0xac8>
 801eef6:	2300      	movs	r3, #0
 801eef8:	1919      	adds	r1, r3, r4
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801eefe:	b28b      	uxth	r3, r1
 801ef00:	1ad3      	subs	r3, r2, r3
 801ef02:	b29a      	uxth	r2, r3
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ef08:	6878      	ldr	r0, [r7, #4]
 801ef0a:	f7fc fe2b 	bl	801bb64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ef0e:	68bb      	ldr	r3, [r7, #8]
 801ef10:	685b      	ldr	r3, [r3, #4]
 801ef12:	891b      	ldrh	r3, [r3, #8]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d028      	beq.n	801ef6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ef18:	4b0d      	ldr	r3, [pc, #52]	@ (801ef50 <tcp_receive+0xb20>)
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d01d      	beq.n	801ef5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801ef20:	4b0b      	ldr	r3, [pc, #44]	@ (801ef50 <tcp_receive+0xb20>)
 801ef22:	681a      	ldr	r2, [r3, #0]
 801ef24:	68bb      	ldr	r3, [r7, #8]
 801ef26:	685b      	ldr	r3, [r3, #4]
 801ef28:	4619      	mov	r1, r3
 801ef2a:	4610      	mov	r0, r2
 801ef2c:	f7fb fee8 	bl	801ad00 <pbuf_cat>
 801ef30:	e018      	b.n	801ef64 <tcp_receive+0xb34>
 801ef32:	bf00      	nop
 801ef34:	2001005a 	.word	0x2001005a
 801ef38:	20010050 	.word	0x20010050
 801ef3c:	20010030 	.word	0x20010030
 801ef40:	08027250 	.word	0x08027250
 801ef44:	08027674 	.word	0x08027674
 801ef48:	080272e0 	.word	0x080272e0
 801ef4c:	080276b0 	.word	0x080276b0
 801ef50:	20010060 	.word	0x20010060
 801ef54:	2001005d 	.word	0x2001005d
 801ef58:	080276d0 	.word	0x080276d0
            } else {
              recv_data = cseg->p;
 801ef5c:	68bb      	ldr	r3, [r7, #8]
 801ef5e:	685b      	ldr	r3, [r3, #4]
 801ef60:	4a70      	ldr	r2, [pc, #448]	@ (801f124 <tcp_receive+0xcf4>)
 801ef62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801ef64:	68bb      	ldr	r3, [r7, #8]
 801ef66:	2200      	movs	r2, #0
 801ef68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ef6a:	68bb      	ldr	r3, [r7, #8]
 801ef6c:	68db      	ldr	r3, [r3, #12]
 801ef6e:	899b      	ldrh	r3, [r3, #12]
 801ef70:	b29b      	uxth	r3, r3
 801ef72:	4618      	mov	r0, r3
 801ef74:	f7fa f944 	bl	8019200 <lwip_htons>
 801ef78:	4603      	mov	r3, r0
 801ef7a:	b2db      	uxtb	r3, r3
 801ef7c:	f003 0301 	and.w	r3, r3, #1
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d00d      	beq.n	801efa0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801ef84:	4b68      	ldr	r3, [pc, #416]	@ (801f128 <tcp_receive+0xcf8>)
 801ef86:	781b      	ldrb	r3, [r3, #0]
 801ef88:	f043 0320 	orr.w	r3, r3, #32
 801ef8c:	b2da      	uxtb	r2, r3
 801ef8e:	4b66      	ldr	r3, [pc, #408]	@ (801f128 <tcp_receive+0xcf8>)
 801ef90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	7d1b      	ldrb	r3, [r3, #20]
 801ef96:	2b04      	cmp	r3, #4
 801ef98:	d102      	bne.n	801efa0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	2207      	movs	r2, #7
 801ef9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801efa0:	68bb      	ldr	r3, [r7, #8]
 801efa2:	681a      	ldr	r2, [r3, #0]
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801efa8:	68b8      	ldr	r0, [r7, #8]
 801efaa:	f7fd fb06 	bl	801c5ba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d008      	beq.n	801efc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efba:	68db      	ldr	r3, [r3, #12]
 801efbc:	685a      	ldr	r2, [r3, #4]
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801efc2:	429a      	cmp	r2, r3
 801efc4:	f43f af43 	beq.w	801ee4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	8b5b      	ldrh	r3, [r3, #26]
 801efcc:	f003 0301 	and.w	r3, r3, #1
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d00e      	beq.n	801eff2 <tcp_receive+0xbc2>
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	8b5b      	ldrh	r3, [r3, #26]
 801efd8:	f023 0301 	bic.w	r3, r3, #1
 801efdc:	b29a      	uxth	r2, r3
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	835a      	strh	r2, [r3, #26]
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	8b5b      	ldrh	r3, [r3, #26]
 801efe6:	f043 0302 	orr.w	r3, r3, #2
 801efea:	b29a      	uxth	r2, r3
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801eff0:	e187      	b.n	801f302 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	8b5b      	ldrh	r3, [r3, #26]
 801eff6:	f043 0301 	orr.w	r3, r3, #1
 801effa:	b29a      	uxth	r2, r3
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f000:	e17f      	b.n	801f302 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f006:	2b00      	cmp	r3, #0
 801f008:	d106      	bne.n	801f018 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801f00a:	4848      	ldr	r0, [pc, #288]	@ (801f12c <tcp_receive+0xcfc>)
 801f00c:	f7fd faee 	bl	801c5ec <tcp_seg_copy>
 801f010:	4602      	mov	r2, r0
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	675a      	str	r2, [r3, #116]	@ 0x74
 801f016:	e16c      	b.n	801f2f2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801f018:	2300      	movs	r3, #0
 801f01a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f020:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f022:	e156      	b.n	801f2d2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801f024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f026:	68db      	ldr	r3, [r3, #12]
 801f028:	685a      	ldr	r2, [r3, #4]
 801f02a:	4b41      	ldr	r3, [pc, #260]	@ (801f130 <tcp_receive+0xd00>)
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	429a      	cmp	r2, r3
 801f030:	d11d      	bne.n	801f06e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801f032:	4b3e      	ldr	r3, [pc, #248]	@ (801f12c <tcp_receive+0xcfc>)
 801f034:	891a      	ldrh	r2, [r3, #8]
 801f036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f038:	891b      	ldrh	r3, [r3, #8]
 801f03a:	429a      	cmp	r2, r3
 801f03c:	f240 814e 	bls.w	801f2dc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f040:	483a      	ldr	r0, [pc, #232]	@ (801f12c <tcp_receive+0xcfc>)
 801f042:	f7fd fad3 	bl	801c5ec <tcp_seg_copy>
 801f046:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801f048:	697b      	ldr	r3, [r7, #20]
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	f000 8148 	beq.w	801f2e0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801f050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f052:	2b00      	cmp	r3, #0
 801f054:	d003      	beq.n	801f05e <tcp_receive+0xc2e>
                    prev->next = cseg;
 801f056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f058:	697a      	ldr	r2, [r7, #20]
 801f05a:	601a      	str	r2, [r3, #0]
 801f05c:	e002      	b.n	801f064 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	697a      	ldr	r2, [r7, #20]
 801f062:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801f064:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f066:	6978      	ldr	r0, [r7, #20]
 801f068:	f7ff f8de 	bl	801e228 <tcp_oos_insert_segment>
                }
                break;
 801f06c:	e138      	b.n	801f2e0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801f06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f070:	2b00      	cmp	r3, #0
 801f072:	d117      	bne.n	801f0a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801f074:	4b2e      	ldr	r3, [pc, #184]	@ (801f130 <tcp_receive+0xd00>)
 801f076:	681a      	ldr	r2, [r3, #0]
 801f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f07a:	68db      	ldr	r3, [r3, #12]
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	1ad3      	subs	r3, r2, r3
 801f080:	2b00      	cmp	r3, #0
 801f082:	da57      	bge.n	801f134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f084:	4829      	ldr	r0, [pc, #164]	@ (801f12c <tcp_receive+0xcfc>)
 801f086:	f7fd fab1 	bl	801c5ec <tcp_seg_copy>
 801f08a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801f08c:	69bb      	ldr	r3, [r7, #24]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	f000 8128 	beq.w	801f2e4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	69ba      	ldr	r2, [r7, #24]
 801f098:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801f09a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f09c:	69b8      	ldr	r0, [r7, #24]
 801f09e:	f7ff f8c3 	bl	801e228 <tcp_oos_insert_segment>
                  }
                  break;
 801f0a2:	e11f      	b.n	801f2e4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801f0a4:	4b22      	ldr	r3, [pc, #136]	@ (801f130 <tcp_receive+0xd00>)
 801f0a6:	681a      	ldr	r2, [r3, #0]
 801f0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0aa:	68db      	ldr	r3, [r3, #12]
 801f0ac:	685b      	ldr	r3, [r3, #4]
 801f0ae:	1ad3      	subs	r3, r2, r3
 801f0b0:	3b01      	subs	r3, #1
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	db3e      	blt.n	801f134 <tcp_receive+0xd04>
 801f0b6:	4b1e      	ldr	r3, [pc, #120]	@ (801f130 <tcp_receive+0xd00>)
 801f0b8:	681a      	ldr	r2, [r3, #0]
 801f0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f0bc:	68db      	ldr	r3, [r3, #12]
 801f0be:	685b      	ldr	r3, [r3, #4]
 801f0c0:	1ad3      	subs	r3, r2, r3
 801f0c2:	3301      	adds	r3, #1
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	dc35      	bgt.n	801f134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f0c8:	4818      	ldr	r0, [pc, #96]	@ (801f12c <tcp_receive+0xcfc>)
 801f0ca:	f7fd fa8f 	bl	801c5ec <tcp_seg_copy>
 801f0ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801f0d0:	69fb      	ldr	r3, [r7, #28]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	f000 8108 	beq.w	801f2e8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801f0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0da:	68db      	ldr	r3, [r3, #12]
 801f0dc:	685b      	ldr	r3, [r3, #4]
 801f0de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f0e0:	8912      	ldrh	r2, [r2, #8]
 801f0e2:	441a      	add	r2, r3
 801f0e4:	4b12      	ldr	r3, [pc, #72]	@ (801f130 <tcp_receive+0xd00>)
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	1ad3      	subs	r3, r2, r3
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	dd12      	ble.n	801f114 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801f0ee:	4b10      	ldr	r3, [pc, #64]	@ (801f130 <tcp_receive+0xd00>)
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	b29a      	uxth	r2, r3
 801f0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0f6:	68db      	ldr	r3, [r3, #12]
 801f0f8:	685b      	ldr	r3, [r3, #4]
 801f0fa:	b29b      	uxth	r3, r3
 801f0fc:	1ad3      	subs	r3, r2, r3
 801f0fe:	b29a      	uxth	r2, r3
 801f100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f102:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801f104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f106:	685a      	ldr	r2, [r3, #4]
 801f108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f10a:	891b      	ldrh	r3, [r3, #8]
 801f10c:	4619      	mov	r1, r3
 801f10e:	4610      	mov	r0, r2
 801f110:	f7fb fb70 	bl	801a7f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801f114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f116:	69fa      	ldr	r2, [r7, #28]
 801f118:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801f11a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f11c:	69f8      	ldr	r0, [r7, #28]
 801f11e:	f7ff f883 	bl	801e228 <tcp_oos_insert_segment>
                  }
                  break;
 801f122:	e0e1      	b.n	801f2e8 <tcp_receive+0xeb8>
 801f124:	20010060 	.word	0x20010060
 801f128:	2001005d 	.word	0x2001005d
 801f12c:	20010030 	.word	0x20010030
 801f130:	20010050 	.word	0x20010050
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801f134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f136:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801f138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	f040 80c5 	bne.w	801f2cc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801f142:	4b7f      	ldr	r3, [pc, #508]	@ (801f340 <tcp_receive+0xf10>)
 801f144:	681a      	ldr	r2, [r3, #0]
 801f146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f148:	68db      	ldr	r3, [r3, #12]
 801f14a:	685b      	ldr	r3, [r3, #4]
 801f14c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801f14e:	2b00      	cmp	r3, #0
 801f150:	f340 80bc 	ble.w	801f2cc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801f154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f156:	68db      	ldr	r3, [r3, #12]
 801f158:	899b      	ldrh	r3, [r3, #12]
 801f15a:	b29b      	uxth	r3, r3
 801f15c:	4618      	mov	r0, r3
 801f15e:	f7fa f84f 	bl	8019200 <lwip_htons>
 801f162:	4603      	mov	r3, r0
 801f164:	b2db      	uxtb	r3, r3
 801f166:	f003 0301 	and.w	r3, r3, #1
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	f040 80be 	bne.w	801f2ec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801f170:	4874      	ldr	r0, [pc, #464]	@ (801f344 <tcp_receive+0xf14>)
 801f172:	f7fd fa3b 	bl	801c5ec <tcp_seg_copy>
 801f176:	4602      	mov	r2, r0
 801f178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f17a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801f17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	2b00      	cmp	r3, #0
 801f182:	f000 80b5 	beq.w	801f2f0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801f186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f188:	68db      	ldr	r3, [r3, #12]
 801f18a:	685b      	ldr	r3, [r3, #4]
 801f18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f18e:	8912      	ldrh	r2, [r2, #8]
 801f190:	441a      	add	r2, r3
 801f192:	4b6b      	ldr	r3, [pc, #428]	@ (801f340 <tcp_receive+0xf10>)
 801f194:	681b      	ldr	r3, [r3, #0]
 801f196:	1ad3      	subs	r3, r2, r3
 801f198:	2b00      	cmp	r3, #0
 801f19a:	dd12      	ble.n	801f1c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801f19c:	4b68      	ldr	r3, [pc, #416]	@ (801f340 <tcp_receive+0xf10>)
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	b29a      	uxth	r2, r3
 801f1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1a4:	68db      	ldr	r3, [r3, #12]
 801f1a6:	685b      	ldr	r3, [r3, #4]
 801f1a8:	b29b      	uxth	r3, r3
 801f1aa:	1ad3      	subs	r3, r2, r3
 801f1ac:	b29a      	uxth	r2, r3
 801f1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801f1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1b4:	685a      	ldr	r2, [r3, #4]
 801f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1b8:	891b      	ldrh	r3, [r3, #8]
 801f1ba:	4619      	mov	r1, r3
 801f1bc:	4610      	mov	r0, r2
 801f1be:	f7fb fb19 	bl	801a7f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801f1c2:	4b61      	ldr	r3, [pc, #388]	@ (801f348 <tcp_receive+0xf18>)
 801f1c4:	881b      	ldrh	r3, [r3, #0]
 801f1c6:	461a      	mov	r2, r3
 801f1c8:	4b5d      	ldr	r3, [pc, #372]	@ (801f340 <tcp_receive+0xf10>)
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	441a      	add	r2, r3
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f1d2:	6879      	ldr	r1, [r7, #4]
 801f1d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f1d6:	440b      	add	r3, r1
 801f1d8:	1ad3      	subs	r3, r2, r3
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	f340 8088 	ble.w	801f2f0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	68db      	ldr	r3, [r3, #12]
 801f1e6:	899b      	ldrh	r3, [r3, #12]
 801f1e8:	b29b      	uxth	r3, r3
 801f1ea:	4618      	mov	r0, r3
 801f1ec:	f7fa f808 	bl	8019200 <lwip_htons>
 801f1f0:	4603      	mov	r3, r0
 801f1f2:	b2db      	uxtb	r3, r3
 801f1f4:	f003 0301 	and.w	r3, r3, #1
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	d021      	beq.n	801f240 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801f1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	68db      	ldr	r3, [r3, #12]
 801f202:	899b      	ldrh	r3, [r3, #12]
 801f204:	b29b      	uxth	r3, r3
 801f206:	b21b      	sxth	r3, r3
 801f208:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801f20c:	b21c      	sxth	r4, r3
 801f20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	899b      	ldrh	r3, [r3, #12]
 801f216:	b29b      	uxth	r3, r3
 801f218:	4618      	mov	r0, r3
 801f21a:	f7f9 fff1 	bl	8019200 <lwip_htons>
 801f21e:	4603      	mov	r3, r0
 801f220:	b2db      	uxtb	r3, r3
 801f222:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801f226:	b29b      	uxth	r3, r3
 801f228:	4618      	mov	r0, r3
 801f22a:	f7f9 ffe9 	bl	8019200 <lwip_htons>
 801f22e:	4603      	mov	r3, r0
 801f230:	b21b      	sxth	r3, r3
 801f232:	4323      	orrs	r3, r4
 801f234:	b21a      	sxth	r2, r3
 801f236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	68db      	ldr	r3, [r3, #12]
 801f23c:	b292      	uxth	r2, r2
 801f23e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f244:	b29a      	uxth	r2, r3
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f24a:	4413      	add	r3, r2
 801f24c:	b299      	uxth	r1, r3
 801f24e:	4b3c      	ldr	r3, [pc, #240]	@ (801f340 <tcp_receive+0xf10>)
 801f250:	681b      	ldr	r3, [r3, #0]
 801f252:	b29a      	uxth	r2, r3
 801f254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	1a8a      	subs	r2, r1, r2
 801f25a:	b292      	uxth	r2, r2
 801f25c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801f25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	685a      	ldr	r2, [r3, #4]
 801f264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	891b      	ldrh	r3, [r3, #8]
 801f26a:	4619      	mov	r1, r3
 801f26c:	4610      	mov	r0, r2
 801f26e:	f7fb fac1 	bl	801a7f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	891c      	ldrh	r4, [r3, #8]
 801f278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	68db      	ldr	r3, [r3, #12]
 801f27e:	899b      	ldrh	r3, [r3, #12]
 801f280:	b29b      	uxth	r3, r3
 801f282:	4618      	mov	r0, r3
 801f284:	f7f9 ffbc 	bl	8019200 <lwip_htons>
 801f288:	4603      	mov	r3, r0
 801f28a:	b2db      	uxtb	r3, r3
 801f28c:	f003 0303 	and.w	r3, r3, #3
 801f290:	2b00      	cmp	r3, #0
 801f292:	d001      	beq.n	801f298 <tcp_receive+0xe68>
 801f294:	2301      	movs	r3, #1
 801f296:	e000      	b.n	801f29a <tcp_receive+0xe6a>
 801f298:	2300      	movs	r3, #0
 801f29a:	4423      	add	r3, r4
 801f29c:	b29a      	uxth	r2, r3
 801f29e:	4b2a      	ldr	r3, [pc, #168]	@ (801f348 <tcp_receive+0xf18>)
 801f2a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f2a2:	4b29      	ldr	r3, [pc, #164]	@ (801f348 <tcp_receive+0xf18>)
 801f2a4:	881b      	ldrh	r3, [r3, #0]
 801f2a6:	461a      	mov	r2, r3
 801f2a8:	4b25      	ldr	r3, [pc, #148]	@ (801f340 <tcp_receive+0xf10>)
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	441a      	add	r2, r3
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f2b2:	6879      	ldr	r1, [r7, #4]
 801f2b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f2b6:	440b      	add	r3, r1
 801f2b8:	429a      	cmp	r2, r3
 801f2ba:	d019      	beq.n	801f2f0 <tcp_receive+0xec0>
 801f2bc:	4b23      	ldr	r3, [pc, #140]	@ (801f34c <tcp_receive+0xf1c>)
 801f2be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801f2c2:	4923      	ldr	r1, [pc, #140]	@ (801f350 <tcp_receive+0xf20>)
 801f2c4:	4823      	ldr	r0, [pc, #140]	@ (801f354 <tcp_receive+0xf24>)
 801f2c6:	f003 fb27 	bl	8022918 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801f2ca:	e011      	b.n	801f2f0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	f47f aea5 	bne.w	801f024 <tcp_receive+0xbf4>
 801f2da:	e00a      	b.n	801f2f2 <tcp_receive+0xec2>
                break;
 801f2dc:	bf00      	nop
 801f2de:	e008      	b.n	801f2f2 <tcp_receive+0xec2>
                break;
 801f2e0:	bf00      	nop
 801f2e2:	e006      	b.n	801f2f2 <tcp_receive+0xec2>
                  break;
 801f2e4:	bf00      	nop
 801f2e6:	e004      	b.n	801f2f2 <tcp_receive+0xec2>
                  break;
 801f2e8:	bf00      	nop
 801f2ea:	e002      	b.n	801f2f2 <tcp_receive+0xec2>
                  break;
 801f2ec:	bf00      	nop
 801f2ee:	e000      	b.n	801f2f2 <tcp_receive+0xec2>
                break;
 801f2f0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801f2f2:	6878      	ldr	r0, [r7, #4]
 801f2f4:	f001 fe8a 	bl	802100c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801f2f8:	e003      	b.n	801f302 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801f2fa:	6878      	ldr	r0, [r7, #4]
 801f2fc:	f001 fe86 	bl	802100c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f300:	e01a      	b.n	801f338 <tcp_receive+0xf08>
 801f302:	e019      	b.n	801f338 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801f304:	4b0e      	ldr	r3, [pc, #56]	@ (801f340 <tcp_receive+0xf10>)
 801f306:	681a      	ldr	r2, [r3, #0]
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f30c:	1ad3      	subs	r3, r2, r3
 801f30e:	2b00      	cmp	r3, #0
 801f310:	db0a      	blt.n	801f328 <tcp_receive+0xef8>
 801f312:	4b0b      	ldr	r3, [pc, #44]	@ (801f340 <tcp_receive+0xf10>)
 801f314:	681a      	ldr	r2, [r3, #0]
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f31a:	6879      	ldr	r1, [r7, #4]
 801f31c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f31e:	440b      	add	r3, r1
 801f320:	1ad3      	subs	r3, r2, r3
 801f322:	3301      	adds	r3, #1
 801f324:	2b00      	cmp	r3, #0
 801f326:	dd07      	ble.n	801f338 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	8b5b      	ldrh	r3, [r3, #26]
 801f32c:	f043 0302 	orr.w	r3, r3, #2
 801f330:	b29a      	uxth	r2, r3
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801f336:	e7ff      	b.n	801f338 <tcp_receive+0xf08>
 801f338:	bf00      	nop
 801f33a:	3750      	adds	r7, #80	@ 0x50
 801f33c:	46bd      	mov	sp, r7
 801f33e:	bdb0      	pop	{r4, r5, r7, pc}
 801f340:	20010050 	.word	0x20010050
 801f344:	20010030 	.word	0x20010030
 801f348:	2001005a 	.word	0x2001005a
 801f34c:	08027250 	.word	0x08027250
 801f350:	0802763c 	.word	0x0802763c
 801f354:	080272e0 	.word	0x080272e0

0801f358 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801f358:	b480      	push	{r7}
 801f35a:	b083      	sub	sp, #12
 801f35c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801f35e:	4b15      	ldr	r3, [pc, #84]	@ (801f3b4 <tcp_get_next_optbyte+0x5c>)
 801f360:	881b      	ldrh	r3, [r3, #0]
 801f362:	1c5a      	adds	r2, r3, #1
 801f364:	b291      	uxth	r1, r2
 801f366:	4a13      	ldr	r2, [pc, #76]	@ (801f3b4 <tcp_get_next_optbyte+0x5c>)
 801f368:	8011      	strh	r1, [r2, #0]
 801f36a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801f36c:	4b12      	ldr	r3, [pc, #72]	@ (801f3b8 <tcp_get_next_optbyte+0x60>)
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	2b00      	cmp	r3, #0
 801f372:	d004      	beq.n	801f37e <tcp_get_next_optbyte+0x26>
 801f374:	4b11      	ldr	r3, [pc, #68]	@ (801f3bc <tcp_get_next_optbyte+0x64>)
 801f376:	881b      	ldrh	r3, [r3, #0]
 801f378:	88fa      	ldrh	r2, [r7, #6]
 801f37a:	429a      	cmp	r2, r3
 801f37c:	d208      	bcs.n	801f390 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801f37e:	4b10      	ldr	r3, [pc, #64]	@ (801f3c0 <tcp_get_next_optbyte+0x68>)
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	3314      	adds	r3, #20
 801f384:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801f386:	88fb      	ldrh	r3, [r7, #6]
 801f388:	683a      	ldr	r2, [r7, #0]
 801f38a:	4413      	add	r3, r2
 801f38c:	781b      	ldrb	r3, [r3, #0]
 801f38e:	e00b      	b.n	801f3a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801f390:	88fb      	ldrh	r3, [r7, #6]
 801f392:	b2da      	uxtb	r2, r3
 801f394:	4b09      	ldr	r3, [pc, #36]	@ (801f3bc <tcp_get_next_optbyte+0x64>)
 801f396:	881b      	ldrh	r3, [r3, #0]
 801f398:	b2db      	uxtb	r3, r3
 801f39a:	1ad3      	subs	r3, r2, r3
 801f39c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801f39e:	4b06      	ldr	r3, [pc, #24]	@ (801f3b8 <tcp_get_next_optbyte+0x60>)
 801f3a0:	681a      	ldr	r2, [r3, #0]
 801f3a2:	797b      	ldrb	r3, [r7, #5]
 801f3a4:	4413      	add	r3, r2
 801f3a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801f3a8:	4618      	mov	r0, r3
 801f3aa:	370c      	adds	r7, #12
 801f3ac:	46bd      	mov	sp, r7
 801f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b2:	4770      	bx	lr
 801f3b4:	2001004c 	.word	0x2001004c
 801f3b8:	20010048 	.word	0x20010048
 801f3bc:	20010046 	.word	0x20010046
 801f3c0:	20010040 	.word	0x20010040

0801f3c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	b084      	sub	sp, #16
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d106      	bne.n	801f3e0 <tcp_parseopt+0x1c>
 801f3d2:	4b33      	ldr	r3, [pc, #204]	@ (801f4a0 <tcp_parseopt+0xdc>)
 801f3d4:	f240 727d 	movw	r2, #1917	@ 0x77d
 801f3d8:	4932      	ldr	r1, [pc, #200]	@ (801f4a4 <tcp_parseopt+0xe0>)
 801f3da:	4833      	ldr	r0, [pc, #204]	@ (801f4a8 <tcp_parseopt+0xe4>)
 801f3dc:	f003 fa9c 	bl	8022918 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801f3e0:	4b32      	ldr	r3, [pc, #200]	@ (801f4ac <tcp_parseopt+0xe8>)
 801f3e2:	881b      	ldrh	r3, [r3, #0]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d057      	beq.n	801f498 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f3e8:	4b31      	ldr	r3, [pc, #196]	@ (801f4b0 <tcp_parseopt+0xec>)
 801f3ea:	2200      	movs	r2, #0
 801f3ec:	801a      	strh	r2, [r3, #0]
 801f3ee:	e047      	b.n	801f480 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801f3f0:	f7ff ffb2 	bl	801f358 <tcp_get_next_optbyte>
 801f3f4:	4603      	mov	r3, r0
 801f3f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801f3f8:	7bfb      	ldrb	r3, [r7, #15]
 801f3fa:	2b02      	cmp	r3, #2
 801f3fc:	d006      	beq.n	801f40c <tcp_parseopt+0x48>
 801f3fe:	2b02      	cmp	r3, #2
 801f400:	dc2b      	bgt.n	801f45a <tcp_parseopt+0x96>
 801f402:	2b00      	cmp	r3, #0
 801f404:	d043      	beq.n	801f48e <tcp_parseopt+0xca>
 801f406:	2b01      	cmp	r3, #1
 801f408:	d039      	beq.n	801f47e <tcp_parseopt+0xba>
 801f40a:	e026      	b.n	801f45a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801f40c:	f7ff ffa4 	bl	801f358 <tcp_get_next_optbyte>
 801f410:	4603      	mov	r3, r0
 801f412:	2b04      	cmp	r3, #4
 801f414:	d13d      	bne.n	801f492 <tcp_parseopt+0xce>
 801f416:	4b26      	ldr	r3, [pc, #152]	@ (801f4b0 <tcp_parseopt+0xec>)
 801f418:	881b      	ldrh	r3, [r3, #0]
 801f41a:	3301      	adds	r3, #1
 801f41c:	4a23      	ldr	r2, [pc, #140]	@ (801f4ac <tcp_parseopt+0xe8>)
 801f41e:	8812      	ldrh	r2, [r2, #0]
 801f420:	4293      	cmp	r3, r2
 801f422:	da36      	bge.n	801f492 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801f424:	f7ff ff98 	bl	801f358 <tcp_get_next_optbyte>
 801f428:	4603      	mov	r3, r0
 801f42a:	021b      	lsls	r3, r3, #8
 801f42c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801f42e:	f7ff ff93 	bl	801f358 <tcp_get_next_optbyte>
 801f432:	4603      	mov	r3, r0
 801f434:	461a      	mov	r2, r3
 801f436:	89bb      	ldrh	r3, [r7, #12]
 801f438:	4313      	orrs	r3, r2
 801f43a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801f43c:	89bb      	ldrh	r3, [r7, #12]
 801f43e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801f442:	4293      	cmp	r3, r2
 801f444:	d804      	bhi.n	801f450 <tcp_parseopt+0x8c>
 801f446:	89bb      	ldrh	r3, [r7, #12]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d001      	beq.n	801f450 <tcp_parseopt+0x8c>
 801f44c:	89ba      	ldrh	r2, [r7, #12]
 801f44e:	e001      	b.n	801f454 <tcp_parseopt+0x90>
 801f450:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801f458:	e012      	b.n	801f480 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801f45a:	f7ff ff7d 	bl	801f358 <tcp_get_next_optbyte>
 801f45e:	4603      	mov	r3, r0
 801f460:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801f462:	7afb      	ldrb	r3, [r7, #11]
 801f464:	2b01      	cmp	r3, #1
 801f466:	d916      	bls.n	801f496 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801f468:	7afb      	ldrb	r3, [r7, #11]
 801f46a:	b29a      	uxth	r2, r3
 801f46c:	4b10      	ldr	r3, [pc, #64]	@ (801f4b0 <tcp_parseopt+0xec>)
 801f46e:	881b      	ldrh	r3, [r3, #0]
 801f470:	4413      	add	r3, r2
 801f472:	b29b      	uxth	r3, r3
 801f474:	3b02      	subs	r3, #2
 801f476:	b29a      	uxth	r2, r3
 801f478:	4b0d      	ldr	r3, [pc, #52]	@ (801f4b0 <tcp_parseopt+0xec>)
 801f47a:	801a      	strh	r2, [r3, #0]
 801f47c:	e000      	b.n	801f480 <tcp_parseopt+0xbc>
          break;
 801f47e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f480:	4b0b      	ldr	r3, [pc, #44]	@ (801f4b0 <tcp_parseopt+0xec>)
 801f482:	881a      	ldrh	r2, [r3, #0]
 801f484:	4b09      	ldr	r3, [pc, #36]	@ (801f4ac <tcp_parseopt+0xe8>)
 801f486:	881b      	ldrh	r3, [r3, #0]
 801f488:	429a      	cmp	r2, r3
 801f48a:	d3b1      	bcc.n	801f3f0 <tcp_parseopt+0x2c>
 801f48c:	e004      	b.n	801f498 <tcp_parseopt+0xd4>
          return;
 801f48e:	bf00      	nop
 801f490:	e002      	b.n	801f498 <tcp_parseopt+0xd4>
            return;
 801f492:	bf00      	nop
 801f494:	e000      	b.n	801f498 <tcp_parseopt+0xd4>
            return;
 801f496:	bf00      	nop
      }
    }
  }
}
 801f498:	3710      	adds	r7, #16
 801f49a:	46bd      	mov	sp, r7
 801f49c:	bd80      	pop	{r7, pc}
 801f49e:	bf00      	nop
 801f4a0:	08027250 	.word	0x08027250
 801f4a4:	080276f8 	.word	0x080276f8
 801f4a8:	080272e0 	.word	0x080272e0
 801f4ac:	20010044 	.word	0x20010044
 801f4b0:	2001004c 	.word	0x2001004c

0801f4b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801f4b4:	b480      	push	{r7}
 801f4b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801f4b8:	4b05      	ldr	r3, [pc, #20]	@ (801f4d0 <tcp_trigger_input_pcb_close+0x1c>)
 801f4ba:	781b      	ldrb	r3, [r3, #0]
 801f4bc:	f043 0310 	orr.w	r3, r3, #16
 801f4c0:	b2da      	uxtb	r2, r3
 801f4c2:	4b03      	ldr	r3, [pc, #12]	@ (801f4d0 <tcp_trigger_input_pcb_close+0x1c>)
 801f4c4:	701a      	strb	r2, [r3, #0]
}
 801f4c6:	bf00      	nop
 801f4c8:	46bd      	mov	sp, r7
 801f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ce:	4770      	bx	lr
 801f4d0:	2001005d 	.word	0x2001005d

0801f4d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801f4d4:	b580      	push	{r7, lr}
 801f4d6:	b084      	sub	sp, #16
 801f4d8:	af00      	add	r7, sp, #0
 801f4da:	60f8      	str	r0, [r7, #12]
 801f4dc:	60b9      	str	r1, [r7, #8]
 801f4de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d00a      	beq.n	801f4fc <tcp_route+0x28>
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	7a1b      	ldrb	r3, [r3, #8]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d006      	beq.n	801f4fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	7a1b      	ldrb	r3, [r3, #8]
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f7fa ff76 	bl	801a3e4 <netif_get_by_index>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	e003      	b.n	801f504 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801f4fc:	6878      	ldr	r0, [r7, #4]
 801f4fe:	f7f8 fb65 	bl	8017bcc <ip4_route>
 801f502:	4603      	mov	r3, r0
  }
}
 801f504:	4618      	mov	r0, r3
 801f506:	3710      	adds	r7, #16
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}

0801f50c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801f50c:	b590      	push	{r4, r7, lr}
 801f50e:	b087      	sub	sp, #28
 801f510:	af00      	add	r7, sp, #0
 801f512:	60f8      	str	r0, [r7, #12]
 801f514:	60b9      	str	r1, [r7, #8]
 801f516:	603b      	str	r3, [r7, #0]
 801f518:	4613      	mov	r3, r2
 801f51a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801f51c:	68fb      	ldr	r3, [r7, #12]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d105      	bne.n	801f52e <tcp_create_segment+0x22>
 801f522:	4b43      	ldr	r3, [pc, #268]	@ (801f630 <tcp_create_segment+0x124>)
 801f524:	22a3      	movs	r2, #163	@ 0xa3
 801f526:	4943      	ldr	r1, [pc, #268]	@ (801f634 <tcp_create_segment+0x128>)
 801f528:	4843      	ldr	r0, [pc, #268]	@ (801f638 <tcp_create_segment+0x12c>)
 801f52a:	f003 f9f5 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801f52e:	68bb      	ldr	r3, [r7, #8]
 801f530:	2b00      	cmp	r3, #0
 801f532:	d105      	bne.n	801f540 <tcp_create_segment+0x34>
 801f534:	4b3e      	ldr	r3, [pc, #248]	@ (801f630 <tcp_create_segment+0x124>)
 801f536:	22a4      	movs	r2, #164	@ 0xa4
 801f538:	4940      	ldr	r1, [pc, #256]	@ (801f63c <tcp_create_segment+0x130>)
 801f53a:	483f      	ldr	r0, [pc, #252]	@ (801f638 <tcp_create_segment+0x12c>)
 801f53c:	f003 f9ec 	bl	8022918 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f540:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f544:	009b      	lsls	r3, r3, #2
 801f546:	b2db      	uxtb	r3, r3
 801f548:	f003 0304 	and.w	r3, r3, #4
 801f54c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801f54e:	2003      	movs	r0, #3
 801f550:	f7fa fb9a 	bl	8019c88 <memp_malloc>
 801f554:	6138      	str	r0, [r7, #16]
 801f556:	693b      	ldr	r3, [r7, #16]
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d104      	bne.n	801f566 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801f55c:	68b8      	ldr	r0, [r7, #8]
 801f55e:	f7fb fb01 	bl	801ab64 <pbuf_free>
    return NULL;
 801f562:	2300      	movs	r3, #0
 801f564:	e060      	b.n	801f628 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801f566:	693b      	ldr	r3, [r7, #16]
 801f568:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801f56c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801f56e:	693b      	ldr	r3, [r7, #16]
 801f570:	2200      	movs	r2, #0
 801f572:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801f574:	693b      	ldr	r3, [r7, #16]
 801f576:	68ba      	ldr	r2, [r7, #8]
 801f578:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f57a:	68bb      	ldr	r3, [r7, #8]
 801f57c:	891a      	ldrh	r2, [r3, #8]
 801f57e:	7dfb      	ldrb	r3, [r7, #23]
 801f580:	b29b      	uxth	r3, r3
 801f582:	429a      	cmp	r2, r3
 801f584:	d205      	bcs.n	801f592 <tcp_create_segment+0x86>
 801f586:	4b2a      	ldr	r3, [pc, #168]	@ (801f630 <tcp_create_segment+0x124>)
 801f588:	22b0      	movs	r2, #176	@ 0xb0
 801f58a:	492d      	ldr	r1, [pc, #180]	@ (801f640 <tcp_create_segment+0x134>)
 801f58c:	482a      	ldr	r0, [pc, #168]	@ (801f638 <tcp_create_segment+0x12c>)
 801f58e:	f003 f9c3 	bl	8022918 <iprintf>
  seg->len = p->tot_len - optlen;
 801f592:	68bb      	ldr	r3, [r7, #8]
 801f594:	891a      	ldrh	r2, [r3, #8]
 801f596:	7dfb      	ldrb	r3, [r7, #23]
 801f598:	b29b      	uxth	r3, r3
 801f59a:	1ad3      	subs	r3, r2, r3
 801f59c:	b29a      	uxth	r2, r3
 801f59e:	693b      	ldr	r3, [r7, #16]
 801f5a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801f5a2:	2114      	movs	r1, #20
 801f5a4:	68b8      	ldr	r0, [r7, #8]
 801f5a6:	f7fb fa15 	bl	801a9d4 <pbuf_add_header>
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d004      	beq.n	801f5ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801f5b0:	6938      	ldr	r0, [r7, #16]
 801f5b2:	f7fd f802 	bl	801c5ba <tcp_seg_free>
    return NULL;
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	e036      	b.n	801f628 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801f5ba:	693b      	ldr	r3, [r7, #16]
 801f5bc:	685b      	ldr	r3, [r3, #4]
 801f5be:	685a      	ldr	r2, [r3, #4]
 801f5c0:	693b      	ldr	r3, [r7, #16]
 801f5c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	8ada      	ldrh	r2, [r3, #22]
 801f5c8:	693b      	ldr	r3, [r7, #16]
 801f5ca:	68dc      	ldr	r4, [r3, #12]
 801f5cc:	4610      	mov	r0, r2
 801f5ce:	f7f9 fe17 	bl	8019200 <lwip_htons>
 801f5d2:	4603      	mov	r3, r0
 801f5d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801f5d6:	68fb      	ldr	r3, [r7, #12]
 801f5d8:	8b1a      	ldrh	r2, [r3, #24]
 801f5da:	693b      	ldr	r3, [r7, #16]
 801f5dc:	68dc      	ldr	r4, [r3, #12]
 801f5de:	4610      	mov	r0, r2
 801f5e0:	f7f9 fe0e 	bl	8019200 <lwip_htons>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801f5e8:	693b      	ldr	r3, [r7, #16]
 801f5ea:	68dc      	ldr	r4, [r3, #12]
 801f5ec:	6838      	ldr	r0, [r7, #0]
 801f5ee:	f7f9 fe1c 	bl	801922a <lwip_htonl>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f5f6:	7dfb      	ldrb	r3, [r7, #23]
 801f5f8:	089b      	lsrs	r3, r3, #2
 801f5fa:	b2db      	uxtb	r3, r3
 801f5fc:	3305      	adds	r3, #5
 801f5fe:	b29b      	uxth	r3, r3
 801f600:	031b      	lsls	r3, r3, #12
 801f602:	b29a      	uxth	r2, r3
 801f604:	79fb      	ldrb	r3, [r7, #7]
 801f606:	b29b      	uxth	r3, r3
 801f608:	4313      	orrs	r3, r2
 801f60a:	b29a      	uxth	r2, r3
 801f60c:	693b      	ldr	r3, [r7, #16]
 801f60e:	68dc      	ldr	r4, [r3, #12]
 801f610:	4610      	mov	r0, r2
 801f612:	f7f9 fdf5 	bl	8019200 <lwip_htons>
 801f616:	4603      	mov	r3, r0
 801f618:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801f61a:	693b      	ldr	r3, [r7, #16]
 801f61c:	68db      	ldr	r3, [r3, #12]
 801f61e:	2200      	movs	r2, #0
 801f620:	749a      	strb	r2, [r3, #18]
 801f622:	2200      	movs	r2, #0
 801f624:	74da      	strb	r2, [r3, #19]
  return seg;
 801f626:	693b      	ldr	r3, [r7, #16]
}
 801f628:	4618      	mov	r0, r3
 801f62a:	371c      	adds	r7, #28
 801f62c:	46bd      	mov	sp, r7
 801f62e:	bd90      	pop	{r4, r7, pc}
 801f630:	08027714 	.word	0x08027714
 801f634:	0802778c 	.word	0x0802778c
 801f638:	080277ac 	.word	0x080277ac
 801f63c:	080277d4 	.word	0x080277d4
 801f640:	080277f8 	.word	0x080277f8

0801f644 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f644:	b580      	push	{r7, lr}
 801f646:	b086      	sub	sp, #24
 801f648:	af00      	add	r7, sp, #0
 801f64a:	607b      	str	r3, [r7, #4]
 801f64c:	4603      	mov	r3, r0
 801f64e:	73fb      	strb	r3, [r7, #15]
 801f650:	460b      	mov	r3, r1
 801f652:	81bb      	strh	r3, [r7, #12]
 801f654:	4613      	mov	r3, r2
 801f656:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801f658:	89bb      	ldrh	r3, [r7, #12]
 801f65a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d105      	bne.n	801f66e <tcp_pbuf_prealloc+0x2a>
 801f662:	4b30      	ldr	r3, [pc, #192]	@ (801f724 <tcp_pbuf_prealloc+0xe0>)
 801f664:	22e8      	movs	r2, #232	@ 0xe8
 801f666:	4930      	ldr	r1, [pc, #192]	@ (801f728 <tcp_pbuf_prealloc+0xe4>)
 801f668:	4830      	ldr	r0, [pc, #192]	@ (801f72c <tcp_pbuf_prealloc+0xe8>)
 801f66a:	f003 f955 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f66e:	6a3b      	ldr	r3, [r7, #32]
 801f670:	2b00      	cmp	r3, #0
 801f672:	d105      	bne.n	801f680 <tcp_pbuf_prealloc+0x3c>
 801f674:	4b2b      	ldr	r3, [pc, #172]	@ (801f724 <tcp_pbuf_prealloc+0xe0>)
 801f676:	22e9      	movs	r2, #233	@ 0xe9
 801f678:	492d      	ldr	r1, [pc, #180]	@ (801f730 <tcp_pbuf_prealloc+0xec>)
 801f67a:	482c      	ldr	r0, [pc, #176]	@ (801f72c <tcp_pbuf_prealloc+0xe8>)
 801f67c:	f003 f94c 	bl	8022918 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f680:	89ba      	ldrh	r2, [r7, #12]
 801f682:	897b      	ldrh	r3, [r7, #10]
 801f684:	429a      	cmp	r2, r3
 801f686:	d221      	bcs.n	801f6cc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f688:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801f68c:	f003 0302 	and.w	r3, r3, #2
 801f690:	2b00      	cmp	r3, #0
 801f692:	d111      	bne.n	801f6b8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801f694:	6a3b      	ldr	r3, [r7, #32]
 801f696:	8b5b      	ldrh	r3, [r3, #26]
 801f698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d115      	bne.n	801f6cc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801f6a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d007      	beq.n	801f6b8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801f6a8:	6a3b      	ldr	r3, [r7, #32]
 801f6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d103      	bne.n	801f6b8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801f6b0:	6a3b      	ldr	r3, [r7, #32]
 801f6b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d009      	beq.n	801f6cc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f6b8:	89bb      	ldrh	r3, [r7, #12]
 801f6ba:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801f6be:	f023 0203 	bic.w	r2, r3, #3
 801f6c2:	897b      	ldrh	r3, [r7, #10]
 801f6c4:	4293      	cmp	r3, r2
 801f6c6:	bf28      	it	cs
 801f6c8:	4613      	movcs	r3, r2
 801f6ca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f6cc:	8af9      	ldrh	r1, [r7, #22]
 801f6ce:	7bfb      	ldrb	r3, [r7, #15]
 801f6d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	f7fa ff2f 	bl	801a538 <pbuf_alloc>
 801f6da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f6dc:	693b      	ldr	r3, [r7, #16]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d101      	bne.n	801f6e6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	e019      	b.n	801f71a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801f6e6:	693b      	ldr	r3, [r7, #16]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d006      	beq.n	801f6fc <tcp_pbuf_prealloc+0xb8>
 801f6ee:	4b0d      	ldr	r3, [pc, #52]	@ (801f724 <tcp_pbuf_prealloc+0xe0>)
 801f6f0:	f240 120b 	movw	r2, #267	@ 0x10b
 801f6f4:	490f      	ldr	r1, [pc, #60]	@ (801f734 <tcp_pbuf_prealloc+0xf0>)
 801f6f6:	480d      	ldr	r0, [pc, #52]	@ (801f72c <tcp_pbuf_prealloc+0xe8>)
 801f6f8:	f003 f90e 	bl	8022918 <iprintf>
  *oversize = p->len - length;
 801f6fc:	693b      	ldr	r3, [r7, #16]
 801f6fe:	895a      	ldrh	r2, [r3, #10]
 801f700:	89bb      	ldrh	r3, [r7, #12]
 801f702:	1ad3      	subs	r3, r2, r3
 801f704:	b29a      	uxth	r2, r3
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	89ba      	ldrh	r2, [r7, #12]
 801f70e:	811a      	strh	r2, [r3, #8]
 801f710:	693b      	ldr	r3, [r7, #16]
 801f712:	891a      	ldrh	r2, [r3, #8]
 801f714:	693b      	ldr	r3, [r7, #16]
 801f716:	815a      	strh	r2, [r3, #10]
  return p;
 801f718:	693b      	ldr	r3, [r7, #16]
}
 801f71a:	4618      	mov	r0, r3
 801f71c:	3718      	adds	r7, #24
 801f71e:	46bd      	mov	sp, r7
 801f720:	bd80      	pop	{r7, pc}
 801f722:	bf00      	nop
 801f724:	08027714 	.word	0x08027714
 801f728:	08027810 	.word	0x08027810
 801f72c:	080277ac 	.word	0x080277ac
 801f730:	08027834 	.word	0x08027834
 801f734:	08027854 	.word	0x08027854

0801f738 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801f738:	b580      	push	{r7, lr}
 801f73a:	b082      	sub	sp, #8
 801f73c:	af00      	add	r7, sp, #0
 801f73e:	6078      	str	r0, [r7, #4]
 801f740:	460b      	mov	r3, r1
 801f742:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	2b00      	cmp	r3, #0
 801f748:	d106      	bne.n	801f758 <tcp_write_checks+0x20>
 801f74a:	4b33      	ldr	r3, [pc, #204]	@ (801f818 <tcp_write_checks+0xe0>)
 801f74c:	f240 1233 	movw	r2, #307	@ 0x133
 801f750:	4932      	ldr	r1, [pc, #200]	@ (801f81c <tcp_write_checks+0xe4>)
 801f752:	4833      	ldr	r0, [pc, #204]	@ (801f820 <tcp_write_checks+0xe8>)
 801f754:	f003 f8e0 	bl	8022918 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	7d1b      	ldrb	r3, [r3, #20]
 801f75c:	2b04      	cmp	r3, #4
 801f75e:	d00e      	beq.n	801f77e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801f764:	2b07      	cmp	r3, #7
 801f766:	d00a      	beq.n	801f77e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801f76c:	2b02      	cmp	r3, #2
 801f76e:	d006      	beq.n	801f77e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801f774:	2b03      	cmp	r3, #3
 801f776:	d002      	beq.n	801f77e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801f778:	f06f 030a 	mvn.w	r3, #10
 801f77c:	e048      	b.n	801f810 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801f77e:	887b      	ldrh	r3, [r7, #2]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d101      	bne.n	801f788 <tcp_write_checks+0x50>
    return ERR_OK;
 801f784:	2300      	movs	r3, #0
 801f786:	e043      	b.n	801f810 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801f78e:	887a      	ldrh	r2, [r7, #2]
 801f790:	429a      	cmp	r2, r3
 801f792:	d909      	bls.n	801f7a8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	8b5b      	ldrh	r3, [r3, #26]
 801f798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f79c:	b29a      	uxth	r2, r3
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801f7a2:	f04f 33ff 	mov.w	r3, #4294967295
 801f7a6:	e033      	b.n	801f810 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f7ae:	2b0f      	cmp	r3, #15
 801f7b0:	d909      	bls.n	801f7c6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	8b5b      	ldrh	r3, [r3, #26]
 801f7b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f7ba:	b29a      	uxth	r2, r3
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801f7c0:	f04f 33ff 	mov.w	r3, #4294967295
 801f7c4:	e024      	b.n	801f810 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d00f      	beq.n	801f7f0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d11a      	bne.n	801f80e <tcp_write_checks+0xd6>
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d116      	bne.n	801f80e <tcp_write_checks+0xd6>
 801f7e0:	4b0d      	ldr	r3, [pc, #52]	@ (801f818 <tcp_write_checks+0xe0>)
 801f7e2:	f240 1255 	movw	r2, #341	@ 0x155
 801f7e6:	490f      	ldr	r1, [pc, #60]	@ (801f824 <tcp_write_checks+0xec>)
 801f7e8:	480d      	ldr	r0, [pc, #52]	@ (801f820 <tcp_write_checks+0xe8>)
 801f7ea:	f003 f895 	bl	8022918 <iprintf>
 801f7ee:	e00e      	b.n	801f80e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d103      	bne.n	801f800 <tcp_write_checks+0xc8>
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d006      	beq.n	801f80e <tcp_write_checks+0xd6>
 801f800:	4b05      	ldr	r3, [pc, #20]	@ (801f818 <tcp_write_checks+0xe0>)
 801f802:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801f806:	4908      	ldr	r1, [pc, #32]	@ (801f828 <tcp_write_checks+0xf0>)
 801f808:	4805      	ldr	r0, [pc, #20]	@ (801f820 <tcp_write_checks+0xe8>)
 801f80a:	f003 f885 	bl	8022918 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801f80e:	2300      	movs	r3, #0
}
 801f810:	4618      	mov	r0, r3
 801f812:	3708      	adds	r7, #8
 801f814:	46bd      	mov	sp, r7
 801f816:	bd80      	pop	{r7, pc}
 801f818:	08027714 	.word	0x08027714
 801f81c:	08027868 	.word	0x08027868
 801f820:	080277ac 	.word	0x080277ac
 801f824:	08027888 	.word	0x08027888
 801f828:	080278c4 	.word	0x080278c4

0801f82c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801f82c:	b590      	push	{r4, r7, lr}
 801f82e:	b09b      	sub	sp, #108	@ 0x6c
 801f830:	af04      	add	r7, sp, #16
 801f832:	60f8      	str	r0, [r7, #12]
 801f834:	60b9      	str	r1, [r7, #8]
 801f836:	4611      	mov	r1, r2
 801f838:	461a      	mov	r2, r3
 801f83a:	460b      	mov	r3, r1
 801f83c:	80fb      	strh	r3, [r7, #6]
 801f83e:	4613      	mov	r3, r2
 801f840:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801f842:	2300      	movs	r3, #0
 801f844:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801f846:	2300      	movs	r3, #0
 801f848:	653b      	str	r3, [r7, #80]	@ 0x50
 801f84a:	2300      	movs	r3, #0
 801f84c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f84e:	2300      	movs	r3, #0
 801f850:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f852:	2300      	movs	r3, #0
 801f854:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801f856:	2300      	movs	r3, #0
 801f858:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801f85c:	2300      	movs	r3, #0
 801f85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801f862:	2300      	movs	r3, #0
 801f864:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801f866:	2300      	movs	r3, #0
 801f868:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801f86a:	2300      	movs	r3, #0
 801f86c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d109      	bne.n	801f888 <tcp_write+0x5c>
 801f874:	4ba4      	ldr	r3, [pc, #656]	@ (801fb08 <tcp_write+0x2dc>)
 801f876:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801f87a:	49a4      	ldr	r1, [pc, #656]	@ (801fb0c <tcp_write+0x2e0>)
 801f87c:	48a4      	ldr	r0, [pc, #656]	@ (801fb10 <tcp_write+0x2e4>)
 801f87e:	f003 f84b 	bl	8022918 <iprintf>
 801f882:	f06f 030f 	mvn.w	r3, #15
 801f886:	e32a      	b.n	801fede <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f88e:	085b      	lsrs	r3, r3, #1
 801f890:	b29a      	uxth	r2, r3
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f896:	4293      	cmp	r3, r2
 801f898:	bf28      	it	cs
 801f89a:	4613      	movcs	r3, r2
 801f89c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801f89e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d102      	bne.n	801f8aa <tcp_write+0x7e>
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f8a8:	e000      	b.n	801f8ac <tcp_write+0x80>
 801f8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f8ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f8ae:	68bb      	ldr	r3, [r7, #8]
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	d109      	bne.n	801f8c8 <tcp_write+0x9c>
 801f8b4:	4b94      	ldr	r3, [pc, #592]	@ (801fb08 <tcp_write+0x2dc>)
 801f8b6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801f8ba:	4996      	ldr	r1, [pc, #600]	@ (801fb14 <tcp_write+0x2e8>)
 801f8bc:	4894      	ldr	r0, [pc, #592]	@ (801fb10 <tcp_write+0x2e4>)
 801f8be:	f003 f82b 	bl	8022918 <iprintf>
 801f8c2:	f06f 030f 	mvn.w	r3, #15
 801f8c6:	e30a      	b.n	801fede <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801f8c8:	88fb      	ldrh	r3, [r7, #6]
 801f8ca:	4619      	mov	r1, r3
 801f8cc:	68f8      	ldr	r0, [r7, #12]
 801f8ce:	f7ff ff33 	bl	801f738 <tcp_write_checks>
 801f8d2:	4603      	mov	r3, r0
 801f8d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801f8d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d002      	beq.n	801f8e6 <tcp_write+0xba>
    return err;
 801f8e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f8e4:	e2fb      	b.n	801fede <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f8ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f8f0:	2300      	movs	r3, #0
 801f8f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	f000 80f6 	beq.w	801faec <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f904:	653b      	str	r3, [r7, #80]	@ 0x50
 801f906:	e002      	b.n	801f90e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801f908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f90e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d1f8      	bne.n	801f908 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f918:	7a9b      	ldrb	r3, [r3, #10]
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	b29b      	uxth	r3, r3
 801f91e:	f003 0304 	and.w	r3, r3, #4
 801f922:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f924:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f928:	891b      	ldrh	r3, [r3, #8]
 801f92a:	4619      	mov	r1, r3
 801f92c:	8c3b      	ldrh	r3, [r7, #32]
 801f92e:	440b      	add	r3, r1
 801f930:	429a      	cmp	r2, r3
 801f932:	da06      	bge.n	801f942 <tcp_write+0x116>
 801f934:	4b74      	ldr	r3, [pc, #464]	@ (801fb08 <tcp_write+0x2dc>)
 801f936:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801f93a:	4977      	ldr	r1, [pc, #476]	@ (801fb18 <tcp_write+0x2ec>)
 801f93c:	4874      	ldr	r0, [pc, #464]	@ (801fb10 <tcp_write+0x2e4>)
 801f93e:	f002 ffeb 	bl	8022918 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f944:	891a      	ldrh	r2, [r3, #8]
 801f946:	8c3b      	ldrh	r3, [r7, #32]
 801f948:	4413      	add	r3, r2
 801f94a:	b29b      	uxth	r3, r3
 801f94c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f94e:	1ad3      	subs	r3, r2, r3
 801f950:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801f952:	68fb      	ldr	r3, [r7, #12]
 801f954:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f958:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801f95a:	8a7b      	ldrh	r3, [r7, #18]
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d026      	beq.n	801f9ae <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f960:	8a7b      	ldrh	r3, [r7, #18]
 801f962:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f964:	429a      	cmp	r2, r3
 801f966:	d206      	bcs.n	801f976 <tcp_write+0x14a>
 801f968:	4b67      	ldr	r3, [pc, #412]	@ (801fb08 <tcp_write+0x2dc>)
 801f96a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801f96e:	496b      	ldr	r1, [pc, #428]	@ (801fb1c <tcp_write+0x2f0>)
 801f970:	4867      	ldr	r0, [pc, #412]	@ (801fb10 <tcp_write+0x2e4>)
 801f972:	f002 ffd1 	bl	8022918 <iprintf>
      seg = last_unsent;
 801f976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f978:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f97a:	8a7b      	ldrh	r3, [r7, #18]
 801f97c:	88fa      	ldrh	r2, [r7, #6]
 801f97e:	4293      	cmp	r3, r2
 801f980:	bf28      	it	cs
 801f982:	4613      	movcs	r3, r2
 801f984:	b29b      	uxth	r3, r3
 801f986:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f988:	4293      	cmp	r3, r2
 801f98a:	bf28      	it	cs
 801f98c:	4613      	movcs	r3, r2
 801f98e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801f990:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f994:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f996:	4413      	add	r3, r2
 801f998:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801f99c:	8a7a      	ldrh	r2, [r7, #18]
 801f99e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f9a0:	1ad3      	subs	r3, r2, r3
 801f9a2:	b29b      	uxth	r3, r3
 801f9a4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801f9a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f9a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f9aa:	1ad3      	subs	r3, r2, r3
 801f9ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f9ae:	8a7b      	ldrh	r3, [r7, #18]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d00b      	beq.n	801f9cc <tcp_write+0x1a0>
 801f9b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9b8:	88fb      	ldrh	r3, [r7, #6]
 801f9ba:	429a      	cmp	r2, r3
 801f9bc:	d006      	beq.n	801f9cc <tcp_write+0x1a0>
 801f9be:	4b52      	ldr	r3, [pc, #328]	@ (801fb08 <tcp_write+0x2dc>)
 801f9c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f9c4:	4956      	ldr	r1, [pc, #344]	@ (801fb20 <tcp_write+0x2f4>)
 801f9c6:	4852      	ldr	r0, [pc, #328]	@ (801fb10 <tcp_write+0x2e4>)
 801f9c8:	f002 ffa6 	bl	8022918 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f9cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9d0:	88fb      	ldrh	r3, [r7, #6]
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	f080 8167 	bcs.w	801fca6 <tcp_write+0x47a>
 801f9d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	f000 8163 	beq.w	801fca6 <tcp_write+0x47a>
 801f9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f9e2:	891b      	ldrh	r3, [r3, #8]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	f000 815e 	beq.w	801fca6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801f9ea:	88fa      	ldrh	r2, [r7, #6]
 801f9ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f9f0:	1ad2      	subs	r2, r2, r3
 801f9f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f9f4:	4293      	cmp	r3, r2
 801f9f6:	bfa8      	it	ge
 801f9f8:	4613      	movge	r3, r2
 801f9fa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801f9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fa00:	797b      	ldrb	r3, [r7, #5]
 801fa02:	f003 0301 	and.w	r3, r3, #1
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	d027      	beq.n	801fa5a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801fa0a:	f107 0012 	add.w	r0, r7, #18
 801fa0e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801fa10:	8bf9      	ldrh	r1, [r7, #30]
 801fa12:	2301      	movs	r3, #1
 801fa14:	9302      	str	r3, [sp, #8]
 801fa16:	797b      	ldrb	r3, [r7, #5]
 801fa18:	9301      	str	r3, [sp, #4]
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	9300      	str	r3, [sp, #0]
 801fa1e:	4603      	mov	r3, r0
 801fa20:	2000      	movs	r0, #0
 801fa22:	f7ff fe0f 	bl	801f644 <tcp_pbuf_prealloc>
 801fa26:	6578      	str	r0, [r7, #84]	@ 0x54
 801fa28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	f000 8225 	beq.w	801fe7a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801fa30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa32:	6858      	ldr	r0, [r3, #4]
 801fa34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fa38:	68ba      	ldr	r2, [r7, #8]
 801fa3a:	4413      	add	r3, r2
 801fa3c:	8bfa      	ldrh	r2, [r7, #30]
 801fa3e:	4619      	mov	r1, r3
 801fa40:	f003 f9a1 	bl	8022d86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801fa44:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801fa46:	f7fb f91b 	bl	801ac80 <pbuf_clen>
 801fa4a:	4603      	mov	r3, r0
 801fa4c:	461a      	mov	r2, r3
 801fa4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fa52:	4413      	add	r3, r2
 801fa54:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801fa58:	e041      	b.n	801fade <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801fa5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fa5c:	685b      	ldr	r3, [r3, #4]
 801fa5e:	637b      	str	r3, [r7, #52]	@ 0x34
 801fa60:	e002      	b.n	801fa68 <tcp_write+0x23c>
 801fa62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	637b      	str	r3, [r7, #52]	@ 0x34
 801fa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d1f8      	bne.n	801fa62 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801fa70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa72:	7b1b      	ldrb	r3, [r3, #12]
 801fa74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	d115      	bne.n	801faa8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801fa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa7e:	685b      	ldr	r3, [r3, #4]
 801fa80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fa82:	8952      	ldrh	r2, [r2, #10]
 801fa84:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801fa86:	68ba      	ldr	r2, [r7, #8]
 801fa88:	429a      	cmp	r2, r3
 801fa8a:	d10d      	bne.n	801faa8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801fa8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d006      	beq.n	801faa2 <tcp_write+0x276>
 801fa94:	4b1c      	ldr	r3, [pc, #112]	@ (801fb08 <tcp_write+0x2dc>)
 801fa96:	f240 2231 	movw	r2, #561	@ 0x231
 801fa9a:	4922      	ldr	r1, [pc, #136]	@ (801fb24 <tcp_write+0x2f8>)
 801fa9c:	481c      	ldr	r0, [pc, #112]	@ (801fb10 <tcp_write+0x2e4>)
 801fa9e:	f002 ff3b 	bl	8022918 <iprintf>
          extendlen = seglen;
 801faa2:	8bfb      	ldrh	r3, [r7, #30]
 801faa4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801faa6:	e01a      	b.n	801fade <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801faa8:	8bfb      	ldrh	r3, [r7, #30]
 801faaa:	2201      	movs	r2, #1
 801faac:	4619      	mov	r1, r3
 801faae:	2000      	movs	r0, #0
 801fab0:	f7fa fd42 	bl	801a538 <pbuf_alloc>
 801fab4:	6578      	str	r0, [r7, #84]	@ 0x54
 801fab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fab8:	2b00      	cmp	r3, #0
 801faba:	f000 81e0 	beq.w	801fe7e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801fabe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fac2:	68ba      	ldr	r2, [r7, #8]
 801fac4:	441a      	add	r2, r3
 801fac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fac8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801faca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801facc:	f7fb f8d8 	bl	801ac80 <pbuf_clen>
 801fad0:	4603      	mov	r3, r0
 801fad2:	461a      	mov	r2, r3
 801fad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fad8:	4413      	add	r3, r2
 801fada:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801fade:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fae2:	8bfb      	ldrh	r3, [r7, #30]
 801fae4:	4413      	add	r3, r2
 801fae6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801faea:	e0dc      	b.n	801fca6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801faec:	68fb      	ldr	r3, [r7, #12]
 801faee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	f000 80d7 	beq.w	801fca6 <tcp_write+0x47a>
 801faf8:	4b03      	ldr	r3, [pc, #12]	@ (801fb08 <tcp_write+0x2dc>)
 801fafa:	f240 224a 	movw	r2, #586	@ 0x24a
 801fafe:	490a      	ldr	r1, [pc, #40]	@ (801fb28 <tcp_write+0x2fc>)
 801fb00:	4803      	ldr	r0, [pc, #12]	@ (801fb10 <tcp_write+0x2e4>)
 801fb02:	f002 ff09 	bl	8022918 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801fb06:	e0ce      	b.n	801fca6 <tcp_write+0x47a>
 801fb08:	08027714 	.word	0x08027714
 801fb0c:	080278f8 	.word	0x080278f8
 801fb10:	080277ac 	.word	0x080277ac
 801fb14:	08027910 	.word	0x08027910
 801fb18:	08027944 	.word	0x08027944
 801fb1c:	0802795c 	.word	0x0802795c
 801fb20:	0802797c 	.word	0x0802797c
 801fb24:	0802799c 	.word	0x0802799c
 801fb28:	080279c8 	.word	0x080279c8
    struct pbuf *p;
    u16_t left = len - pos;
 801fb2c:	88fa      	ldrh	r2, [r7, #6]
 801fb2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fb32:	1ad3      	subs	r3, r2, r3
 801fb34:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801fb36:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fb3a:	b29b      	uxth	r3, r3
 801fb3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb3e:	1ad3      	subs	r3, r2, r3
 801fb40:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801fb42:	8b7a      	ldrh	r2, [r7, #26]
 801fb44:	8bbb      	ldrh	r3, [r7, #28]
 801fb46:	4293      	cmp	r3, r2
 801fb48:	bf28      	it	cs
 801fb4a:	4613      	movcs	r3, r2
 801fb4c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fb4e:	797b      	ldrb	r3, [r7, #5]
 801fb50:	f003 0301 	and.w	r3, r3, #1
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d036      	beq.n	801fbc6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801fb58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fb5c:	b29a      	uxth	r2, r3
 801fb5e:	8b3b      	ldrh	r3, [r7, #24]
 801fb60:	4413      	add	r3, r2
 801fb62:	b299      	uxth	r1, r3
 801fb64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	bf0c      	ite	eq
 801fb6a:	2301      	moveq	r3, #1
 801fb6c:	2300      	movne	r3, #0
 801fb6e:	b2db      	uxtb	r3, r3
 801fb70:	f107 0012 	add.w	r0, r7, #18
 801fb74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb76:	9302      	str	r3, [sp, #8]
 801fb78:	797b      	ldrb	r3, [r7, #5]
 801fb7a:	9301      	str	r3, [sp, #4]
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	9300      	str	r3, [sp, #0]
 801fb80:	4603      	mov	r3, r0
 801fb82:	2036      	movs	r0, #54	@ 0x36
 801fb84:	f7ff fd5e 	bl	801f644 <tcp_pbuf_prealloc>
 801fb88:	6338      	str	r0, [r7, #48]	@ 0x30
 801fb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	f000 8178 	beq.w	801fe82 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb94:	895b      	ldrh	r3, [r3, #10]
 801fb96:	8b3a      	ldrh	r2, [r7, #24]
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	d906      	bls.n	801fbaa <tcp_write+0x37e>
 801fb9c:	4b8c      	ldr	r3, [pc, #560]	@ (801fdd0 <tcp_write+0x5a4>)
 801fb9e:	f240 2266 	movw	r2, #614	@ 0x266
 801fba2:	498c      	ldr	r1, [pc, #560]	@ (801fdd4 <tcp_write+0x5a8>)
 801fba4:	488c      	ldr	r0, [pc, #560]	@ (801fdd8 <tcp_write+0x5ac>)
 801fba6:	f002 feb7 	bl	8022918 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbac:	685a      	ldr	r2, [r3, #4]
 801fbae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fbb2:	18d0      	adds	r0, r2, r3
 801fbb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fbb8:	68ba      	ldr	r2, [r7, #8]
 801fbba:	4413      	add	r3, r2
 801fbbc:	8b3a      	ldrh	r2, [r7, #24]
 801fbbe:	4619      	mov	r1, r3
 801fbc0:	f003 f8e1 	bl	8022d86 <memcpy>
 801fbc4:	e02f      	b.n	801fc26 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fbc6:	8a7b      	ldrh	r3, [r7, #18]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d006      	beq.n	801fbda <tcp_write+0x3ae>
 801fbcc:	4b80      	ldr	r3, [pc, #512]	@ (801fdd0 <tcp_write+0x5a4>)
 801fbce:	f240 2271 	movw	r2, #625	@ 0x271
 801fbd2:	4982      	ldr	r1, [pc, #520]	@ (801fddc <tcp_write+0x5b0>)
 801fbd4:	4880      	ldr	r0, [pc, #512]	@ (801fdd8 <tcp_write+0x5ac>)
 801fbd6:	f002 fe9f 	bl	8022918 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fbda:	8b3b      	ldrh	r3, [r7, #24]
 801fbdc:	2201      	movs	r2, #1
 801fbde:	4619      	mov	r1, r3
 801fbe0:	2036      	movs	r0, #54	@ 0x36
 801fbe2:	f7fa fca9 	bl	801a538 <pbuf_alloc>
 801fbe6:	6178      	str	r0, [r7, #20]
 801fbe8:	697b      	ldr	r3, [r7, #20]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	f000 814b 	beq.w	801fe86 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fbf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fbf4:	68ba      	ldr	r2, [r7, #8]
 801fbf6:	441a      	add	r2, r3
 801fbf8:	697b      	ldr	r3, [r7, #20]
 801fbfa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fbfc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fc00:	b29b      	uxth	r3, r3
 801fc02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fc06:	4619      	mov	r1, r3
 801fc08:	2036      	movs	r0, #54	@ 0x36
 801fc0a:	f7fa fc95 	bl	801a538 <pbuf_alloc>
 801fc0e:	6338      	str	r0, [r7, #48]	@ 0x30
 801fc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d103      	bne.n	801fc1e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801fc16:	6978      	ldr	r0, [r7, #20]
 801fc18:	f7fa ffa4 	bl	801ab64 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801fc1c:	e136      	b.n	801fe8c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801fc1e:	6979      	ldr	r1, [r7, #20]
 801fc20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc22:	f7fb f86d 	bl	801ad00 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801fc26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc28:	f7fb f82a 	bl	801ac80 <pbuf_clen>
 801fc2c:	4603      	mov	r3, r0
 801fc2e:	461a      	mov	r2, r3
 801fc30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fc34:	4413      	add	r3, r2
 801fc36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fc3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fc3e:	2b10      	cmp	r3, #16
 801fc40:	d903      	bls.n	801fc4a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801fc42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc44:	f7fa ff8e 	bl	801ab64 <pbuf_free>
      goto memerr;
 801fc48:	e120      	b.n	801fe8c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fc4a:	68fb      	ldr	r3, [r7, #12]
 801fc4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801fc4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fc52:	441a      	add	r2, r3
 801fc54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fc58:	9300      	str	r3, [sp, #0]
 801fc5a:	4613      	mov	r3, r2
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801fc60:	68f8      	ldr	r0, [r7, #12]
 801fc62:	f7ff fc53 	bl	801f50c <tcp_create_segment>
 801fc66:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801fc68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	f000 810d 	beq.w	801fe8a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801fc70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	d102      	bne.n	801fc7c <tcp_write+0x450>
      queue = seg;
 801fc76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc78:	647b      	str	r3, [r7, #68]	@ 0x44
 801fc7a:	e00c      	b.n	801fc96 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fc7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d106      	bne.n	801fc90 <tcp_write+0x464>
 801fc82:	4b53      	ldr	r3, [pc, #332]	@ (801fdd0 <tcp_write+0x5a4>)
 801fc84:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801fc88:	4955      	ldr	r1, [pc, #340]	@ (801fde0 <tcp_write+0x5b4>)
 801fc8a:	4853      	ldr	r0, [pc, #332]	@ (801fdd8 <tcp_write+0x5ac>)
 801fc8c:	f002 fe44 	bl	8022918 <iprintf>
      prev_seg->next = seg;
 801fc90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801fc94:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801fc96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc98:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801fc9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fc9e:	8b3b      	ldrh	r3, [r7, #24]
 801fca0:	4413      	add	r3, r2
 801fca2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801fca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fcaa:	88fb      	ldrh	r3, [r7, #6]
 801fcac:	429a      	cmp	r2, r3
 801fcae:	f4ff af3d 	bcc.w	801fb2c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801fcb2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d02c      	beq.n	801fd12 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801fcb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fcba:	685b      	ldr	r3, [r3, #4]
 801fcbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fcbe:	e01e      	b.n	801fcfe <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801fcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcc2:	891a      	ldrh	r2, [r3, #8]
 801fcc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fcc6:	4413      	add	r3, r2
 801fcc8:	b29a      	uxth	r2, r3
 801fcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fccc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801fcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d110      	bne.n	801fcf8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801fcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fcdc:	8952      	ldrh	r2, [r2, #10]
 801fcde:	4413      	add	r3, r2
 801fce0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801fce2:	68b9      	ldr	r1, [r7, #8]
 801fce4:	4618      	mov	r0, r3
 801fce6:	f003 f84e 	bl	8022d86 <memcpy>
        p->len += oversize_used;
 801fcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcec:	895a      	ldrh	r2, [r3, #10]
 801fcee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fcf0:	4413      	add	r3, r2
 801fcf2:	b29a      	uxth	r2, r3
 801fcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcf6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801fcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d1dd      	bne.n	801fcc0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801fd04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd06:	891a      	ldrh	r2, [r3, #8]
 801fd08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fd0a:	4413      	add	r3, r2
 801fd0c:	b29a      	uxth	r2, r3
 801fd0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd10:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801fd12:	8a7a      	ldrh	r2, [r7, #18]
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801fd1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d018      	beq.n	801fd52 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801fd20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d106      	bne.n	801fd34 <tcp_write+0x508>
 801fd26:	4b2a      	ldr	r3, [pc, #168]	@ (801fdd0 <tcp_write+0x5a4>)
 801fd28:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801fd2c:	492d      	ldr	r1, [pc, #180]	@ (801fde4 <tcp_write+0x5b8>)
 801fd2e:	482a      	ldr	r0, [pc, #168]	@ (801fdd8 <tcp_write+0x5ac>)
 801fd30:	f002 fdf2 	bl	8022918 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801fd34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd36:	685b      	ldr	r3, [r3, #4]
 801fd38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801fd3a:	4618      	mov	r0, r3
 801fd3c:	f7fa ffe0 	bl	801ad00 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801fd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd42:	891a      	ldrh	r2, [r3, #8]
 801fd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fd46:	891b      	ldrh	r3, [r3, #8]
 801fd48:	4413      	add	r3, r2
 801fd4a:	b29a      	uxth	r2, r3
 801fd4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd4e:	811a      	strh	r2, [r3, #8]
 801fd50:	e037      	b.n	801fdc2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801fd52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d034      	beq.n	801fdc2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801fd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d003      	beq.n	801fd66 <tcp_write+0x53a>
 801fd5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd60:	685b      	ldr	r3, [r3, #4]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d106      	bne.n	801fd74 <tcp_write+0x548>
 801fd66:	4b1a      	ldr	r3, [pc, #104]	@ (801fdd0 <tcp_write+0x5a4>)
 801fd68:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801fd6c:	491e      	ldr	r1, [pc, #120]	@ (801fde8 <tcp_write+0x5bc>)
 801fd6e:	481a      	ldr	r0, [pc, #104]	@ (801fdd8 <tcp_write+0x5ac>)
 801fd70:	f002 fdd2 	bl	8022918 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fd74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd76:	685b      	ldr	r3, [r3, #4]
 801fd78:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fd7a:	e009      	b.n	801fd90 <tcp_write+0x564>
      p->tot_len += extendlen;
 801fd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd7e:	891a      	ldrh	r2, [r3, #8]
 801fd80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fd82:	4413      	add	r3, r2
 801fd84:	b29a      	uxth	r2, r3
 801fd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd88:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d1f1      	bne.n	801fd7c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801fd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd9a:	891a      	ldrh	r2, [r3, #8]
 801fd9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fd9e:	4413      	add	r3, r2
 801fda0:	b29a      	uxth	r2, r3
 801fda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fda4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801fda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fda8:	895a      	ldrh	r2, [r3, #10]
 801fdaa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fdac:	4413      	add	r3, r2
 801fdae:	b29a      	uxth	r2, r3
 801fdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdb2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801fdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fdb6:	891a      	ldrh	r2, [r3, #8]
 801fdb8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fdba:	4413      	add	r3, r2
 801fdbc:	b29a      	uxth	r2, r3
 801fdbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fdc0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801fdc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d111      	bne.n	801fdec <tcp_write+0x5c0>
    pcb->unsent = queue;
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fdcc:	66da      	str	r2, [r3, #108]	@ 0x6c
 801fdce:	e010      	b.n	801fdf2 <tcp_write+0x5c6>
 801fdd0:	08027714 	.word	0x08027714
 801fdd4:	080279f8 	.word	0x080279f8
 801fdd8:	080277ac 	.word	0x080277ac
 801fddc:	08027a38 	.word	0x08027a38
 801fde0:	08027a48 	.word	0x08027a48
 801fde4:	08027a5c 	.word	0x08027a5c
 801fde8:	08027a94 	.word	0x08027a94
  } else {
    last_unsent->next = queue;
 801fdec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fdee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fdf0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801fdf2:	68fb      	ldr	r3, [r7, #12]
 801fdf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801fdf6:	88fb      	ldrh	r3, [r7, #6]
 801fdf8:	441a      	add	r2, r3
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801fdfe:	68fb      	ldr	r3, [r7, #12]
 801fe00:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801fe04:	88fb      	ldrh	r3, [r7, #6]
 801fe06:	1ad3      	subs	r3, r2, r3
 801fe08:	b29a      	uxth	r2, r3
 801fe0a:	68fb      	ldr	r3, [r7, #12]
 801fe0c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801fe16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d00e      	beq.n	801fe42 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d10a      	bne.n	801fe42 <tcp_write+0x616>
 801fe2c:	68fb      	ldr	r3, [r7, #12]
 801fe2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d106      	bne.n	801fe42 <tcp_write+0x616>
 801fe34:	4b2c      	ldr	r3, [pc, #176]	@ (801fee8 <tcp_write+0x6bc>)
 801fe36:	f240 3212 	movw	r2, #786	@ 0x312
 801fe3a:	492c      	ldr	r1, [pc, #176]	@ (801feec <tcp_write+0x6c0>)
 801fe3c:	482c      	ldr	r0, [pc, #176]	@ (801fef0 <tcp_write+0x6c4>)
 801fe3e:	f002 fd6b 	bl	8022918 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801fe42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d016      	beq.n	801fe76 <tcp_write+0x64a>
 801fe48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe4a:	68db      	ldr	r3, [r3, #12]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d012      	beq.n	801fe76 <tcp_write+0x64a>
 801fe50:	797b      	ldrb	r3, [r7, #5]
 801fe52:	f003 0302 	and.w	r3, r3, #2
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d10d      	bne.n	801fe76 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801fe5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe5c:	68db      	ldr	r3, [r3, #12]
 801fe5e:	899b      	ldrh	r3, [r3, #12]
 801fe60:	b29c      	uxth	r4, r3
 801fe62:	2008      	movs	r0, #8
 801fe64:	f7f9 f9cc 	bl	8019200 <lwip_htons>
 801fe68:	4603      	mov	r3, r0
 801fe6a:	461a      	mov	r2, r3
 801fe6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe6e:	68db      	ldr	r3, [r3, #12]
 801fe70:	4322      	orrs	r2, r4
 801fe72:	b292      	uxth	r2, r2
 801fe74:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801fe76:	2300      	movs	r3, #0
 801fe78:	e031      	b.n	801fede <tcp_write+0x6b2>
          goto memerr;
 801fe7a:	bf00      	nop
 801fe7c:	e006      	b.n	801fe8c <tcp_write+0x660>
            goto memerr;
 801fe7e:	bf00      	nop
 801fe80:	e004      	b.n	801fe8c <tcp_write+0x660>
        goto memerr;
 801fe82:	bf00      	nop
 801fe84:	e002      	b.n	801fe8c <tcp_write+0x660>
        goto memerr;
 801fe86:	bf00      	nop
 801fe88:	e000      	b.n	801fe8c <tcp_write+0x660>
      goto memerr;
 801fe8a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fe8c:	68fb      	ldr	r3, [r7, #12]
 801fe8e:	8b5b      	ldrh	r3, [r3, #26]
 801fe90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe94:	b29a      	uxth	r2, r3
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801fe9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	d002      	beq.n	801fea6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801fea0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801fea2:	f7fa fe5f 	bl	801ab64 <pbuf_free>
  }
  if (queue != NULL) {
 801fea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d002      	beq.n	801feb2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801feac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801feae:	f7fc fb6f 	bl	801c590 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801feb2:	68fb      	ldr	r3, [r7, #12]
 801feb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d00e      	beq.n	801feda <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801febc:	68fb      	ldr	r3, [r7, #12]
 801febe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d10a      	bne.n	801feda <tcp_write+0x6ae>
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d106      	bne.n	801feda <tcp_write+0x6ae>
 801fecc:	4b06      	ldr	r3, [pc, #24]	@ (801fee8 <tcp_write+0x6bc>)
 801fece:	f240 3227 	movw	r2, #807	@ 0x327
 801fed2:	4906      	ldr	r1, [pc, #24]	@ (801feec <tcp_write+0x6c0>)
 801fed4:	4806      	ldr	r0, [pc, #24]	@ (801fef0 <tcp_write+0x6c4>)
 801fed6:	f002 fd1f 	bl	8022918 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801feda:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fede:	4618      	mov	r0, r3
 801fee0:	375c      	adds	r7, #92	@ 0x5c
 801fee2:	46bd      	mov	sp, r7
 801fee4:	bd90      	pop	{r4, r7, pc}
 801fee6:	bf00      	nop
 801fee8:	08027714 	.word	0x08027714
 801feec:	08027acc 	.word	0x08027acc
 801fef0:	080277ac 	.word	0x080277ac

0801fef4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801fef4:	b590      	push	{r4, r7, lr}
 801fef6:	b08b      	sub	sp, #44	@ 0x2c
 801fef8:	af02      	add	r7, sp, #8
 801fefa:	6078      	str	r0, [r7, #4]
 801fefc:	460b      	mov	r3, r1
 801fefe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ff00:	2300      	movs	r3, #0
 801ff02:	61fb      	str	r3, [r7, #28]
 801ff04:	2300      	movs	r3, #0
 801ff06:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ff08:	2300      	movs	r3, #0
 801ff0a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d106      	bne.n	801ff20 <tcp_split_unsent_seg+0x2c>
 801ff12:	4b95      	ldr	r3, [pc, #596]	@ (8020168 <tcp_split_unsent_seg+0x274>)
 801ff14:	f240 324b 	movw	r2, #843	@ 0x34b
 801ff18:	4994      	ldr	r1, [pc, #592]	@ (802016c <tcp_split_unsent_seg+0x278>)
 801ff1a:	4895      	ldr	r0, [pc, #596]	@ (8020170 <tcp_split_unsent_seg+0x27c>)
 801ff1c:	f002 fcfc 	bl	8022918 <iprintf>

  useg = pcb->unsent;
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff24:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ff26:	697b      	ldr	r3, [r7, #20]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d102      	bne.n	801ff32 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ff2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ff30:	e116      	b.n	8020160 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ff32:	887b      	ldrh	r3, [r7, #2]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d109      	bne.n	801ff4c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ff38:	4b8b      	ldr	r3, [pc, #556]	@ (8020168 <tcp_split_unsent_seg+0x274>)
 801ff3a:	f240 3253 	movw	r2, #851	@ 0x353
 801ff3e:	498d      	ldr	r1, [pc, #564]	@ (8020174 <tcp_split_unsent_seg+0x280>)
 801ff40:	488b      	ldr	r0, [pc, #556]	@ (8020170 <tcp_split_unsent_seg+0x27c>)
 801ff42:	f002 fce9 	bl	8022918 <iprintf>
    return ERR_VAL;
 801ff46:	f06f 0305 	mvn.w	r3, #5
 801ff4a:	e109      	b.n	8020160 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ff4c:	697b      	ldr	r3, [r7, #20]
 801ff4e:	891b      	ldrh	r3, [r3, #8]
 801ff50:	887a      	ldrh	r2, [r7, #2]
 801ff52:	429a      	cmp	r2, r3
 801ff54:	d301      	bcc.n	801ff5a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ff56:	2300      	movs	r3, #0
 801ff58:	e102      	b.n	8020160 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ff5e:	887a      	ldrh	r2, [r7, #2]
 801ff60:	429a      	cmp	r2, r3
 801ff62:	d906      	bls.n	801ff72 <tcp_split_unsent_seg+0x7e>
 801ff64:	4b80      	ldr	r3, [pc, #512]	@ (8020168 <tcp_split_unsent_seg+0x274>)
 801ff66:	f240 325b 	movw	r2, #859	@ 0x35b
 801ff6a:	4983      	ldr	r1, [pc, #524]	@ (8020178 <tcp_split_unsent_seg+0x284>)
 801ff6c:	4880      	ldr	r0, [pc, #512]	@ (8020170 <tcp_split_unsent_seg+0x27c>)
 801ff6e:	f002 fcd3 	bl	8022918 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ff72:	697b      	ldr	r3, [r7, #20]
 801ff74:	891b      	ldrh	r3, [r3, #8]
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d106      	bne.n	801ff88 <tcp_split_unsent_seg+0x94>
 801ff7a:	4b7b      	ldr	r3, [pc, #492]	@ (8020168 <tcp_split_unsent_seg+0x274>)
 801ff7c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801ff80:	497e      	ldr	r1, [pc, #504]	@ (802017c <tcp_split_unsent_seg+0x288>)
 801ff82:	487b      	ldr	r0, [pc, #492]	@ (8020170 <tcp_split_unsent_seg+0x27c>)
 801ff84:	f002 fcc8 	bl	8022918 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ff88:	697b      	ldr	r3, [r7, #20]
 801ff8a:	7a9b      	ldrb	r3, [r3, #10]
 801ff8c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ff8e:	7bfb      	ldrb	r3, [r7, #15]
 801ff90:	009b      	lsls	r3, r3, #2
 801ff92:	b2db      	uxtb	r3, r3
 801ff94:	f003 0304 	and.w	r3, r3, #4
 801ff98:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ff9a:	697b      	ldr	r3, [r7, #20]
 801ff9c:	891a      	ldrh	r2, [r3, #8]
 801ff9e:	887b      	ldrh	r3, [r7, #2]
 801ffa0:	1ad3      	subs	r3, r2, r3
 801ffa2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ffa4:	7bbb      	ldrb	r3, [r7, #14]
 801ffa6:	b29a      	uxth	r2, r3
 801ffa8:	89bb      	ldrh	r3, [r7, #12]
 801ffaa:	4413      	add	r3, r2
 801ffac:	b29b      	uxth	r3, r3
 801ffae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ffb2:	4619      	mov	r1, r3
 801ffb4:	2036      	movs	r0, #54	@ 0x36
 801ffb6:	f7fa fabf 	bl	801a538 <pbuf_alloc>
 801ffba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ffbc:	693b      	ldr	r3, [r7, #16]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	f000 80b7 	beq.w	8020132 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ffc4:	697b      	ldr	r3, [r7, #20]
 801ffc6:	685b      	ldr	r3, [r3, #4]
 801ffc8:	891a      	ldrh	r2, [r3, #8]
 801ffca:	697b      	ldr	r3, [r7, #20]
 801ffcc:	891b      	ldrh	r3, [r3, #8]
 801ffce:	1ad3      	subs	r3, r2, r3
 801ffd0:	b29a      	uxth	r2, r3
 801ffd2:	887b      	ldrh	r3, [r7, #2]
 801ffd4:	4413      	add	r3, r2
 801ffd6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ffd8:	697b      	ldr	r3, [r7, #20]
 801ffda:	6858      	ldr	r0, [r3, #4]
 801ffdc:	693b      	ldr	r3, [r7, #16]
 801ffde:	685a      	ldr	r2, [r3, #4]
 801ffe0:	7bbb      	ldrb	r3, [r7, #14]
 801ffe2:	18d1      	adds	r1, r2, r3
 801ffe4:	897b      	ldrh	r3, [r7, #10]
 801ffe6:	89ba      	ldrh	r2, [r7, #12]
 801ffe8:	f7fa ffc2 	bl	801af70 <pbuf_copy_partial>
 801ffec:	4603      	mov	r3, r0
 801ffee:	461a      	mov	r2, r3
 801fff0:	89bb      	ldrh	r3, [r7, #12]
 801fff2:	4293      	cmp	r3, r2
 801fff4:	f040 809f 	bne.w	8020136 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	68db      	ldr	r3, [r3, #12]
 801fffc:	899b      	ldrh	r3, [r3, #12]
 801fffe:	b29b      	uxth	r3, r3
 8020000:	4618      	mov	r0, r3
 8020002:	f7f9 f8fd 	bl	8019200 <lwip_htons>
 8020006:	4603      	mov	r3, r0
 8020008:	b2db      	uxtb	r3, r3
 802000a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802000e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8020010:	2300      	movs	r3, #0
 8020012:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8020014:	7efb      	ldrb	r3, [r7, #27]
 8020016:	f003 0308 	and.w	r3, r3, #8
 802001a:	2b00      	cmp	r3, #0
 802001c:	d007      	beq.n	802002e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 802001e:	7efb      	ldrb	r3, [r7, #27]
 8020020:	f023 0308 	bic.w	r3, r3, #8
 8020024:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8020026:	7ebb      	ldrb	r3, [r7, #26]
 8020028:	f043 0308 	orr.w	r3, r3, #8
 802002c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 802002e:	7efb      	ldrb	r3, [r7, #27]
 8020030:	f003 0301 	and.w	r3, r3, #1
 8020034:	2b00      	cmp	r3, #0
 8020036:	d007      	beq.n	8020048 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8020038:	7efb      	ldrb	r3, [r7, #27]
 802003a:	f023 0301 	bic.w	r3, r3, #1
 802003e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8020040:	7ebb      	ldrb	r3, [r7, #26]
 8020042:	f043 0301 	orr.w	r3, r3, #1
 8020046:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020048:	697b      	ldr	r3, [r7, #20]
 802004a:	68db      	ldr	r3, [r3, #12]
 802004c:	685b      	ldr	r3, [r3, #4]
 802004e:	4618      	mov	r0, r3
 8020050:	f7f9 f8eb 	bl	801922a <lwip_htonl>
 8020054:	4602      	mov	r2, r0
 8020056:	887b      	ldrh	r3, [r7, #2]
 8020058:	18d1      	adds	r1, r2, r3
 802005a:	7eba      	ldrb	r2, [r7, #26]
 802005c:	7bfb      	ldrb	r3, [r7, #15]
 802005e:	9300      	str	r3, [sp, #0]
 8020060:	460b      	mov	r3, r1
 8020062:	6939      	ldr	r1, [r7, #16]
 8020064:	6878      	ldr	r0, [r7, #4]
 8020066:	f7ff fa51 	bl	801f50c <tcp_create_segment>
 802006a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 802006c:	69fb      	ldr	r3, [r7, #28]
 802006e:	2b00      	cmp	r3, #0
 8020070:	d063      	beq.n	802013a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020072:	697b      	ldr	r3, [r7, #20]
 8020074:	685b      	ldr	r3, [r3, #4]
 8020076:	4618      	mov	r0, r3
 8020078:	f7fa fe02 	bl	801ac80 <pbuf_clen>
 802007c:	4603      	mov	r3, r0
 802007e:	461a      	mov	r2, r3
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020086:	1a9b      	subs	r3, r3, r2
 8020088:	b29a      	uxth	r2, r3
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020090:	697b      	ldr	r3, [r7, #20]
 8020092:	6858      	ldr	r0, [r3, #4]
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	685b      	ldr	r3, [r3, #4]
 8020098:	891a      	ldrh	r2, [r3, #8]
 802009a:	89bb      	ldrh	r3, [r7, #12]
 802009c:	1ad3      	subs	r3, r2, r3
 802009e:	b29b      	uxth	r3, r3
 80200a0:	4619      	mov	r1, r3
 80200a2:	f7fa fba7 	bl	801a7f4 <pbuf_realloc>
  useg->len -= remainder;
 80200a6:	697b      	ldr	r3, [r7, #20]
 80200a8:	891a      	ldrh	r2, [r3, #8]
 80200aa:	89bb      	ldrh	r3, [r7, #12]
 80200ac:	1ad3      	subs	r3, r2, r3
 80200ae:	b29a      	uxth	r2, r3
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80200b4:	697b      	ldr	r3, [r7, #20]
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	899b      	ldrh	r3, [r3, #12]
 80200ba:	b29c      	uxth	r4, r3
 80200bc:	7efb      	ldrb	r3, [r7, #27]
 80200be:	b29b      	uxth	r3, r3
 80200c0:	4618      	mov	r0, r3
 80200c2:	f7f9 f89d 	bl	8019200 <lwip_htons>
 80200c6:	4603      	mov	r3, r0
 80200c8:	461a      	mov	r2, r3
 80200ca:	697b      	ldr	r3, [r7, #20]
 80200cc:	68db      	ldr	r3, [r3, #12]
 80200ce:	4322      	orrs	r2, r4
 80200d0:	b292      	uxth	r2, r2
 80200d2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80200d4:	697b      	ldr	r3, [r7, #20]
 80200d6:	685b      	ldr	r3, [r3, #4]
 80200d8:	4618      	mov	r0, r3
 80200da:	f7fa fdd1 	bl	801ac80 <pbuf_clen>
 80200de:	4603      	mov	r3, r0
 80200e0:	461a      	mov	r2, r3
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80200e8:	4413      	add	r3, r2
 80200ea:	b29a      	uxth	r2, r3
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80200f2:	69fb      	ldr	r3, [r7, #28]
 80200f4:	685b      	ldr	r3, [r3, #4]
 80200f6:	4618      	mov	r0, r3
 80200f8:	f7fa fdc2 	bl	801ac80 <pbuf_clen>
 80200fc:	4603      	mov	r3, r0
 80200fe:	461a      	mov	r2, r3
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020106:	4413      	add	r3, r2
 8020108:	b29a      	uxth	r2, r3
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8020110:	697b      	ldr	r3, [r7, #20]
 8020112:	681a      	ldr	r2, [r3, #0]
 8020114:	69fb      	ldr	r3, [r7, #28]
 8020116:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8020118:	697b      	ldr	r3, [r7, #20]
 802011a:	69fa      	ldr	r2, [r7, #28]
 802011c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 802011e:	69fb      	ldr	r3, [r7, #28]
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	2b00      	cmp	r3, #0
 8020124:	d103      	bne.n	802012e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2200      	movs	r2, #0
 802012a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 802012e:	2300      	movs	r3, #0
 8020130:	e016      	b.n	8020160 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8020132:	bf00      	nop
 8020134:	e002      	b.n	802013c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020136:	bf00      	nop
 8020138:	e000      	b.n	802013c <tcp_split_unsent_seg+0x248>
    goto memerr;
 802013a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 802013c:	69fb      	ldr	r3, [r7, #28]
 802013e:	2b00      	cmp	r3, #0
 8020140:	d006      	beq.n	8020150 <tcp_split_unsent_seg+0x25c>
 8020142:	4b09      	ldr	r3, [pc, #36]	@ (8020168 <tcp_split_unsent_seg+0x274>)
 8020144:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8020148:	490d      	ldr	r1, [pc, #52]	@ (8020180 <tcp_split_unsent_seg+0x28c>)
 802014a:	4809      	ldr	r0, [pc, #36]	@ (8020170 <tcp_split_unsent_seg+0x27c>)
 802014c:	f002 fbe4 	bl	8022918 <iprintf>
  if (p != NULL) {
 8020150:	693b      	ldr	r3, [r7, #16]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d002      	beq.n	802015c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8020156:	6938      	ldr	r0, [r7, #16]
 8020158:	f7fa fd04 	bl	801ab64 <pbuf_free>
  }

  return ERR_MEM;
 802015c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020160:	4618      	mov	r0, r3
 8020162:	3724      	adds	r7, #36	@ 0x24
 8020164:	46bd      	mov	sp, r7
 8020166:	bd90      	pop	{r4, r7, pc}
 8020168:	08027714 	.word	0x08027714
 802016c:	08027aec 	.word	0x08027aec
 8020170:	080277ac 	.word	0x080277ac
 8020174:	08027b10 	.word	0x08027b10
 8020178:	08027b34 	.word	0x08027b34
 802017c:	08027b44 	.word	0x08027b44
 8020180:	08027b54 	.word	0x08027b54

08020184 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020184:	b590      	push	{r4, r7, lr}
 8020186:	b085      	sub	sp, #20
 8020188:	af00      	add	r7, sp, #0
 802018a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	2b00      	cmp	r3, #0
 8020190:	d106      	bne.n	80201a0 <tcp_send_fin+0x1c>
 8020192:	4b21      	ldr	r3, [pc, #132]	@ (8020218 <tcp_send_fin+0x94>)
 8020194:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8020198:	4920      	ldr	r1, [pc, #128]	@ (802021c <tcp_send_fin+0x98>)
 802019a:	4821      	ldr	r0, [pc, #132]	@ (8020220 <tcp_send_fin+0x9c>)
 802019c:	f002 fbbc 	bl	8022918 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d02e      	beq.n	8020206 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80201ac:	60fb      	str	r3, [r7, #12]
 80201ae:	e002      	b.n	80201b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80201b6:	68fb      	ldr	r3, [r7, #12]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d1f8      	bne.n	80201b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	68db      	ldr	r3, [r3, #12]
 80201c2:	899b      	ldrh	r3, [r3, #12]
 80201c4:	b29b      	uxth	r3, r3
 80201c6:	4618      	mov	r0, r3
 80201c8:	f7f9 f81a 	bl	8019200 <lwip_htons>
 80201cc:	4603      	mov	r3, r0
 80201ce:	b2db      	uxtb	r3, r3
 80201d0:	f003 0307 	and.w	r3, r3, #7
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d116      	bne.n	8020206 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	68db      	ldr	r3, [r3, #12]
 80201dc:	899b      	ldrh	r3, [r3, #12]
 80201de:	b29c      	uxth	r4, r3
 80201e0:	2001      	movs	r0, #1
 80201e2:	f7f9 f80d 	bl	8019200 <lwip_htons>
 80201e6:	4603      	mov	r3, r0
 80201e8:	461a      	mov	r2, r3
 80201ea:	68fb      	ldr	r3, [r7, #12]
 80201ec:	68db      	ldr	r3, [r3, #12]
 80201ee:	4322      	orrs	r2, r4
 80201f0:	b292      	uxth	r2, r2
 80201f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	8b5b      	ldrh	r3, [r3, #26]
 80201f8:	f043 0320 	orr.w	r3, r3, #32
 80201fc:	b29a      	uxth	r2, r3
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8020202:	2300      	movs	r3, #0
 8020204:	e004      	b.n	8020210 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020206:	2101      	movs	r1, #1
 8020208:	6878      	ldr	r0, [r7, #4]
 802020a:	f000 f80b 	bl	8020224 <tcp_enqueue_flags>
 802020e:	4603      	mov	r3, r0
}
 8020210:	4618      	mov	r0, r3
 8020212:	3714      	adds	r7, #20
 8020214:	46bd      	mov	sp, r7
 8020216:	bd90      	pop	{r4, r7, pc}
 8020218:	08027714 	.word	0x08027714
 802021c:	08027b60 	.word	0x08027b60
 8020220:	080277ac 	.word	0x080277ac

08020224 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8020224:	b580      	push	{r7, lr}
 8020226:	b08a      	sub	sp, #40	@ 0x28
 8020228:	af02      	add	r7, sp, #8
 802022a:	6078      	str	r0, [r7, #4]
 802022c:	460b      	mov	r3, r1
 802022e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8020230:	2300      	movs	r3, #0
 8020232:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8020234:	2300      	movs	r3, #0
 8020236:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8020238:	78fb      	ldrb	r3, [r7, #3]
 802023a:	f003 0303 	and.w	r3, r3, #3
 802023e:	2b00      	cmp	r3, #0
 8020240:	d106      	bne.n	8020250 <tcp_enqueue_flags+0x2c>
 8020242:	4b67      	ldr	r3, [pc, #412]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 8020244:	f240 4211 	movw	r2, #1041	@ 0x411
 8020248:	4966      	ldr	r1, [pc, #408]	@ (80203e4 <tcp_enqueue_flags+0x1c0>)
 802024a:	4867      	ldr	r0, [pc, #412]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 802024c:	f002 fb64 	bl	8022918 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	2b00      	cmp	r3, #0
 8020254:	d106      	bne.n	8020264 <tcp_enqueue_flags+0x40>
 8020256:	4b62      	ldr	r3, [pc, #392]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 8020258:	f240 4213 	movw	r2, #1043	@ 0x413
 802025c:	4963      	ldr	r1, [pc, #396]	@ (80203ec <tcp_enqueue_flags+0x1c8>)
 802025e:	4862      	ldr	r0, [pc, #392]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 8020260:	f002 fb5a 	bl	8022918 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8020264:	78fb      	ldrb	r3, [r7, #3]
 8020266:	f003 0302 	and.w	r3, r3, #2
 802026a:	2b00      	cmp	r3, #0
 802026c:	d001      	beq.n	8020272 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 802026e:	2301      	movs	r3, #1
 8020270:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020272:	7ffb      	ldrb	r3, [r7, #31]
 8020274:	009b      	lsls	r3, r3, #2
 8020276:	b2db      	uxtb	r3, r3
 8020278:	f003 0304 	and.w	r3, r3, #4
 802027c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802027e:	7dfb      	ldrb	r3, [r7, #23]
 8020280:	b29b      	uxth	r3, r3
 8020282:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020286:	4619      	mov	r1, r3
 8020288:	2036      	movs	r0, #54	@ 0x36
 802028a:	f7fa f955 	bl	801a538 <pbuf_alloc>
 802028e:	6138      	str	r0, [r7, #16]
 8020290:	693b      	ldr	r3, [r7, #16]
 8020292:	2b00      	cmp	r3, #0
 8020294:	d109      	bne.n	80202aa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	8b5b      	ldrh	r3, [r3, #26]
 802029a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802029e:	b29a      	uxth	r2, r3
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80202a4:	f04f 33ff 	mov.w	r3, #4294967295
 80202a8:	e095      	b.n	80203d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80202aa:	693b      	ldr	r3, [r7, #16]
 80202ac:	895a      	ldrh	r2, [r3, #10]
 80202ae:	7dfb      	ldrb	r3, [r7, #23]
 80202b0:	b29b      	uxth	r3, r3
 80202b2:	429a      	cmp	r2, r3
 80202b4:	d206      	bcs.n	80202c4 <tcp_enqueue_flags+0xa0>
 80202b6:	4b4a      	ldr	r3, [pc, #296]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 80202b8:	f240 4239 	movw	r2, #1081	@ 0x439
 80202bc:	494c      	ldr	r1, [pc, #304]	@ (80203f0 <tcp_enqueue_flags+0x1cc>)
 80202be:	484a      	ldr	r0, [pc, #296]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 80202c0:	f002 fb2a 	bl	8022918 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80202c8:	78fa      	ldrb	r2, [r7, #3]
 80202ca:	7ffb      	ldrb	r3, [r7, #31]
 80202cc:	9300      	str	r3, [sp, #0]
 80202ce:	460b      	mov	r3, r1
 80202d0:	6939      	ldr	r1, [r7, #16]
 80202d2:	6878      	ldr	r0, [r7, #4]
 80202d4:	f7ff f91a 	bl	801f50c <tcp_create_segment>
 80202d8:	60f8      	str	r0, [r7, #12]
 80202da:	68fb      	ldr	r3, [r7, #12]
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d109      	bne.n	80202f4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	8b5b      	ldrh	r3, [r3, #26]
 80202e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80202e8:	b29a      	uxth	r2, r3
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80202ee:	f04f 33ff 	mov.w	r3, #4294967295
 80202f2:	e070      	b.n	80203d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	68db      	ldr	r3, [r3, #12]
 80202f8:	f003 0303 	and.w	r3, r3, #3
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d006      	beq.n	802030e <tcp_enqueue_flags+0xea>
 8020300:	4b37      	ldr	r3, [pc, #220]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 8020302:	f240 4242 	movw	r2, #1090	@ 0x442
 8020306:	493b      	ldr	r1, [pc, #236]	@ (80203f4 <tcp_enqueue_flags+0x1d0>)
 8020308:	4837      	ldr	r0, [pc, #220]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 802030a:	f002 fb05 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	891b      	ldrh	r3, [r3, #8]
 8020312:	2b00      	cmp	r3, #0
 8020314:	d006      	beq.n	8020324 <tcp_enqueue_flags+0x100>
 8020316:	4b32      	ldr	r3, [pc, #200]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 8020318:	f240 4243 	movw	r2, #1091	@ 0x443
 802031c:	4936      	ldr	r1, [pc, #216]	@ (80203f8 <tcp_enqueue_flags+0x1d4>)
 802031e:	4832      	ldr	r0, [pc, #200]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 8020320:	f002 fafa 	bl	8022918 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020328:	2b00      	cmp	r3, #0
 802032a:	d103      	bne.n	8020334 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	68fa      	ldr	r2, [r7, #12]
 8020330:	66da      	str	r2, [r3, #108]	@ 0x6c
 8020332:	e00d      	b.n	8020350 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020338:	61bb      	str	r3, [r7, #24]
 802033a:	e002      	b.n	8020342 <tcp_enqueue_flags+0x11e>
 802033c:	69bb      	ldr	r3, [r7, #24]
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	61bb      	str	r3, [r7, #24]
 8020342:	69bb      	ldr	r3, [r7, #24]
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	2b00      	cmp	r3, #0
 8020348:	d1f8      	bne.n	802033c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 802034a:	69bb      	ldr	r3, [r7, #24]
 802034c:	68fa      	ldr	r2, [r7, #12]
 802034e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	2200      	movs	r2, #0
 8020354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020358:	78fb      	ldrb	r3, [r7, #3]
 802035a:	f003 0302 	and.w	r3, r3, #2
 802035e:	2b00      	cmp	r3, #0
 8020360:	d104      	bne.n	802036c <tcp_enqueue_flags+0x148>
 8020362:	78fb      	ldrb	r3, [r7, #3]
 8020364:	f003 0301 	and.w	r3, r3, #1
 8020368:	2b00      	cmp	r3, #0
 802036a:	d004      	beq.n	8020376 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020370:	1c5a      	adds	r2, r3, #1
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8020376:	78fb      	ldrb	r3, [r7, #3]
 8020378:	f003 0301 	and.w	r3, r3, #1
 802037c:	2b00      	cmp	r3, #0
 802037e:	d006      	beq.n	802038e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	8b5b      	ldrh	r3, [r3, #26]
 8020384:	f043 0320 	orr.w	r3, r3, #32
 8020388:	b29a      	uxth	r2, r3
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802038e:	68fb      	ldr	r3, [r7, #12]
 8020390:	685b      	ldr	r3, [r3, #4]
 8020392:	4618      	mov	r0, r3
 8020394:	f7fa fc74 	bl	801ac80 <pbuf_clen>
 8020398:	4603      	mov	r3, r0
 802039a:	461a      	mov	r2, r3
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80203a2:	4413      	add	r3, r2
 80203a4:	b29a      	uxth	r2, r3
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d00e      	beq.n	80203d4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d10a      	bne.n	80203d4 <tcp_enqueue_flags+0x1b0>
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d106      	bne.n	80203d4 <tcp_enqueue_flags+0x1b0>
 80203c6:	4b06      	ldr	r3, [pc, #24]	@ (80203e0 <tcp_enqueue_flags+0x1bc>)
 80203c8:	f240 4265 	movw	r2, #1125	@ 0x465
 80203cc:	490b      	ldr	r1, [pc, #44]	@ (80203fc <tcp_enqueue_flags+0x1d8>)
 80203ce:	4806      	ldr	r0, [pc, #24]	@ (80203e8 <tcp_enqueue_flags+0x1c4>)
 80203d0:	f002 faa2 	bl	8022918 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80203d4:	2300      	movs	r3, #0
}
 80203d6:	4618      	mov	r0, r3
 80203d8:	3720      	adds	r7, #32
 80203da:	46bd      	mov	sp, r7
 80203dc:	bd80      	pop	{r7, pc}
 80203de:	bf00      	nop
 80203e0:	08027714 	.word	0x08027714
 80203e4:	08027b7c 	.word	0x08027b7c
 80203e8:	080277ac 	.word	0x080277ac
 80203ec:	08027bd4 	.word	0x08027bd4
 80203f0:	08027bf4 	.word	0x08027bf4
 80203f4:	08027c30 	.word	0x08027c30
 80203f8:	08027c48 	.word	0x08027c48
 80203fc:	08027c74 	.word	0x08027c74

08020400 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8020400:	b5b0      	push	{r4, r5, r7, lr}
 8020402:	b08a      	sub	sp, #40	@ 0x28
 8020404:	af00      	add	r7, sp, #0
 8020406:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	2b00      	cmp	r3, #0
 802040c:	d106      	bne.n	802041c <tcp_output+0x1c>
 802040e:	4b8a      	ldr	r3, [pc, #552]	@ (8020638 <tcp_output+0x238>)
 8020410:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8020414:	4989      	ldr	r1, [pc, #548]	@ (802063c <tcp_output+0x23c>)
 8020416:	488a      	ldr	r0, [pc, #552]	@ (8020640 <tcp_output+0x240>)
 8020418:	f002 fa7e 	bl	8022918 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	7d1b      	ldrb	r3, [r3, #20]
 8020420:	2b01      	cmp	r3, #1
 8020422:	d106      	bne.n	8020432 <tcp_output+0x32>
 8020424:	4b84      	ldr	r3, [pc, #528]	@ (8020638 <tcp_output+0x238>)
 8020426:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 802042a:	4986      	ldr	r1, [pc, #536]	@ (8020644 <tcp_output+0x244>)
 802042c:	4884      	ldr	r0, [pc, #528]	@ (8020640 <tcp_output+0x240>)
 802042e:	f002 fa73 	bl	8022918 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8020432:	4b85      	ldr	r3, [pc, #532]	@ (8020648 <tcp_output+0x248>)
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	687a      	ldr	r2, [r7, #4]
 8020438:	429a      	cmp	r2, r3
 802043a:	d101      	bne.n	8020440 <tcp_output+0x40>
    return ERR_OK;
 802043c:	2300      	movs	r3, #0
 802043e:	e1ce      	b.n	80207de <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 802044c:	4293      	cmp	r3, r2
 802044e:	bf28      	it	cs
 8020450:	4613      	movcs	r3, r2
 8020452:	b29b      	uxth	r3, r3
 8020454:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802045a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 802045c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802045e:	2b00      	cmp	r3, #0
 8020460:	d10b      	bne.n	802047a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	8b5b      	ldrh	r3, [r3, #26]
 8020466:	f003 0302 	and.w	r3, r3, #2
 802046a:	2b00      	cmp	r3, #0
 802046c:	f000 81aa 	beq.w	80207c4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8020470:	6878      	ldr	r0, [r7, #4]
 8020472:	f000 fdcb 	bl	802100c <tcp_send_empty_ack>
 8020476:	4603      	mov	r3, r0
 8020478:	e1b1      	b.n	80207de <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802047a:	6879      	ldr	r1, [r7, #4]
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	3304      	adds	r3, #4
 8020480:	461a      	mov	r2, r3
 8020482:	6878      	ldr	r0, [r7, #4]
 8020484:	f7ff f826 	bl	801f4d4 <tcp_route>
 8020488:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 802048a:	697b      	ldr	r3, [r7, #20]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d102      	bne.n	8020496 <tcp_output+0x96>
    return ERR_RTE;
 8020490:	f06f 0303 	mvn.w	r3, #3
 8020494:	e1a3      	b.n	80207de <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	2b00      	cmp	r3, #0
 802049a:	d003      	beq.n	80204a4 <tcp_output+0xa4>
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d111      	bne.n	80204c8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80204a4:	697b      	ldr	r3, [r7, #20]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d002      	beq.n	80204b0 <tcp_output+0xb0>
 80204aa:	697b      	ldr	r3, [r7, #20]
 80204ac:	3304      	adds	r3, #4
 80204ae:	e000      	b.n	80204b2 <tcp_output+0xb2>
 80204b0:	2300      	movs	r3, #0
 80204b2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80204b4:	693b      	ldr	r3, [r7, #16]
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d102      	bne.n	80204c0 <tcp_output+0xc0>
      return ERR_RTE;
 80204ba:	f06f 0303 	mvn.w	r3, #3
 80204be:	e18e      	b.n	80207de <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80204c0:	693b      	ldr	r3, [r7, #16]
 80204c2:	681a      	ldr	r2, [r3, #0]
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80204c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204ca:	68db      	ldr	r3, [r3, #12]
 80204cc:	685b      	ldr	r3, [r3, #4]
 80204ce:	4618      	mov	r0, r3
 80204d0:	f7f8 feab 	bl	801922a <lwip_htonl>
 80204d4:	4602      	mov	r2, r0
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80204da:	1ad3      	subs	r3, r2, r3
 80204dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80204de:	8912      	ldrh	r2, [r2, #8]
 80204e0:	4413      	add	r3, r2
 80204e2:	69ba      	ldr	r2, [r7, #24]
 80204e4:	429a      	cmp	r2, r3
 80204e6:	d227      	bcs.n	8020538 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80204ee:	461a      	mov	r2, r3
 80204f0:	69bb      	ldr	r3, [r7, #24]
 80204f2:	4293      	cmp	r3, r2
 80204f4:	d114      	bne.n	8020520 <tcp_output+0x120>
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d110      	bne.n	8020520 <tcp_output+0x120>
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8020504:	2b00      	cmp	r3, #0
 8020506:	d10b      	bne.n	8020520 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	2200      	movs	r2, #0
 802050c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	2201      	movs	r2, #1
 8020514:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	2200      	movs	r2, #0
 802051c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	8b5b      	ldrh	r3, [r3, #26]
 8020524:	f003 0302 	and.w	r3, r3, #2
 8020528:	2b00      	cmp	r3, #0
 802052a:	f000 814d 	beq.w	80207c8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 802052e:	6878      	ldr	r0, [r7, #4]
 8020530:	f000 fd6c 	bl	802100c <tcp_send_empty_ack>
 8020534:	4603      	mov	r3, r0
 8020536:	e152      	b.n	80207de <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	2200      	movs	r2, #0
 802053c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020544:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8020546:	6a3b      	ldr	r3, [r7, #32]
 8020548:	2b00      	cmp	r3, #0
 802054a:	f000 811c 	beq.w	8020786 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 802054e:	e002      	b.n	8020556 <tcp_output+0x156>
 8020550:	6a3b      	ldr	r3, [r7, #32]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	623b      	str	r3, [r7, #32]
 8020556:	6a3b      	ldr	r3, [r7, #32]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	2b00      	cmp	r3, #0
 802055c:	d1f8      	bne.n	8020550 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 802055e:	e112      	b.n	8020786 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8020560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020562:	68db      	ldr	r3, [r3, #12]
 8020564:	899b      	ldrh	r3, [r3, #12]
 8020566:	b29b      	uxth	r3, r3
 8020568:	4618      	mov	r0, r3
 802056a:	f7f8 fe49 	bl	8019200 <lwip_htons>
 802056e:	4603      	mov	r3, r0
 8020570:	b2db      	uxtb	r3, r3
 8020572:	f003 0304 	and.w	r3, r3, #4
 8020576:	2b00      	cmp	r3, #0
 8020578:	d006      	beq.n	8020588 <tcp_output+0x188>
 802057a:	4b2f      	ldr	r3, [pc, #188]	@ (8020638 <tcp_output+0x238>)
 802057c:	f240 5236 	movw	r2, #1334	@ 0x536
 8020580:	4932      	ldr	r1, [pc, #200]	@ (802064c <tcp_output+0x24c>)
 8020582:	482f      	ldr	r0, [pc, #188]	@ (8020640 <tcp_output+0x240>)
 8020584:	f002 f9c8 	bl	8022918 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802058c:	2b00      	cmp	r3, #0
 802058e:	d01f      	beq.n	80205d0 <tcp_output+0x1d0>
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	8b5b      	ldrh	r3, [r3, #26]
 8020594:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8020598:	2b00      	cmp	r3, #0
 802059a:	d119      	bne.n	80205d0 <tcp_output+0x1d0>
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d00b      	beq.n	80205bc <tcp_output+0x1bc>
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d110      	bne.n	80205d0 <tcp_output+0x1d0>
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205b2:	891a      	ldrh	r2, [r3, #8]
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80205b8:	429a      	cmp	r2, r3
 80205ba:	d209      	bcs.n	80205d0 <tcp_output+0x1d0>
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d004      	beq.n	80205d0 <tcp_output+0x1d0>
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80205cc:	2b0f      	cmp	r3, #15
 80205ce:	d901      	bls.n	80205d4 <tcp_output+0x1d4>
 80205d0:	2301      	movs	r3, #1
 80205d2:	e000      	b.n	80205d6 <tcp_output+0x1d6>
 80205d4:	2300      	movs	r3, #0
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d106      	bne.n	80205e8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	8b5b      	ldrh	r3, [r3, #26]
 80205de:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	f000 80e4 	beq.w	80207b0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	7d1b      	ldrb	r3, [r3, #20]
 80205ec:	2b02      	cmp	r3, #2
 80205ee:	d00d      	beq.n	802060c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80205f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205f2:	68db      	ldr	r3, [r3, #12]
 80205f4:	899b      	ldrh	r3, [r3, #12]
 80205f6:	b29c      	uxth	r4, r3
 80205f8:	2010      	movs	r0, #16
 80205fa:	f7f8 fe01 	bl	8019200 <lwip_htons>
 80205fe:	4603      	mov	r3, r0
 8020600:	461a      	mov	r2, r3
 8020602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020604:	68db      	ldr	r3, [r3, #12]
 8020606:	4322      	orrs	r2, r4
 8020608:	b292      	uxth	r2, r2
 802060a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 802060c:	697a      	ldr	r2, [r7, #20]
 802060e:	6879      	ldr	r1, [r7, #4]
 8020610:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020612:	f000 f909 	bl	8020828 <tcp_output_segment>
 8020616:	4603      	mov	r3, r0
 8020618:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 802061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802061e:	2b00      	cmp	r3, #0
 8020620:	d016      	beq.n	8020650 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	8b5b      	ldrh	r3, [r3, #26]
 8020626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802062a:	b29a      	uxth	r2, r3
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	835a      	strh	r2, [r3, #26]
      return err;
 8020630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020634:	e0d3      	b.n	80207de <tcp_output+0x3de>
 8020636:	bf00      	nop
 8020638:	08027714 	.word	0x08027714
 802063c:	08027c9c 	.word	0x08027c9c
 8020640:	080277ac 	.word	0x080277ac
 8020644:	08027cb4 	.word	0x08027cb4
 8020648:	20010064 	.word	0x20010064
 802064c:	08027cdc 	.word	0x08027cdc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8020650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020652:	681a      	ldr	r2, [r3, #0]
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	7d1b      	ldrb	r3, [r3, #20]
 802065c:	2b02      	cmp	r3, #2
 802065e:	d006      	beq.n	802066e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	8b5b      	ldrh	r3, [r3, #26]
 8020664:	f023 0303 	bic.w	r3, r3, #3
 8020668:	b29a      	uxth	r2, r3
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020670:	68db      	ldr	r3, [r3, #12]
 8020672:	685b      	ldr	r3, [r3, #4]
 8020674:	4618      	mov	r0, r3
 8020676:	f7f8 fdd8 	bl	801922a <lwip_htonl>
 802067a:	4604      	mov	r4, r0
 802067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802067e:	891b      	ldrh	r3, [r3, #8]
 8020680:	461d      	mov	r5, r3
 8020682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020684:	68db      	ldr	r3, [r3, #12]
 8020686:	899b      	ldrh	r3, [r3, #12]
 8020688:	b29b      	uxth	r3, r3
 802068a:	4618      	mov	r0, r3
 802068c:	f7f8 fdb8 	bl	8019200 <lwip_htons>
 8020690:	4603      	mov	r3, r0
 8020692:	b2db      	uxtb	r3, r3
 8020694:	f003 0303 	and.w	r3, r3, #3
 8020698:	2b00      	cmp	r3, #0
 802069a:	d001      	beq.n	80206a0 <tcp_output+0x2a0>
 802069c:	2301      	movs	r3, #1
 802069e:	e000      	b.n	80206a2 <tcp_output+0x2a2>
 80206a0:	2300      	movs	r3, #0
 80206a2:	442b      	add	r3, r5
 80206a4:	4423      	add	r3, r4
 80206a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80206ac:	68bb      	ldr	r3, [r7, #8]
 80206ae:	1ad3      	subs	r3, r2, r3
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	da02      	bge.n	80206ba <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	68ba      	ldr	r2, [r7, #8]
 80206b8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80206ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206bc:	891b      	ldrh	r3, [r3, #8]
 80206be:	461c      	mov	r4, r3
 80206c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206c2:	68db      	ldr	r3, [r3, #12]
 80206c4:	899b      	ldrh	r3, [r3, #12]
 80206c6:	b29b      	uxth	r3, r3
 80206c8:	4618      	mov	r0, r3
 80206ca:	f7f8 fd99 	bl	8019200 <lwip_htons>
 80206ce:	4603      	mov	r3, r0
 80206d0:	b2db      	uxtb	r3, r3
 80206d2:	f003 0303 	and.w	r3, r3, #3
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d001      	beq.n	80206de <tcp_output+0x2de>
 80206da:	2301      	movs	r3, #1
 80206dc:	e000      	b.n	80206e0 <tcp_output+0x2e0>
 80206de:	2300      	movs	r3, #0
 80206e0:	4423      	add	r3, r4
 80206e2:	2b00      	cmp	r3, #0
 80206e4:	d049      	beq.n	802077a <tcp_output+0x37a>
      seg->next = NULL;
 80206e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206e8:	2200      	movs	r2, #0
 80206ea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d105      	bne.n	8020700 <tcp_output+0x300>
        pcb->unacked = seg;
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80206f8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80206fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206fc:	623b      	str	r3, [r7, #32]
 80206fe:	e03f      	b.n	8020780 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020702:	68db      	ldr	r3, [r3, #12]
 8020704:	685b      	ldr	r3, [r3, #4]
 8020706:	4618      	mov	r0, r3
 8020708:	f7f8 fd8f 	bl	801922a <lwip_htonl>
 802070c:	4604      	mov	r4, r0
 802070e:	6a3b      	ldr	r3, [r7, #32]
 8020710:	68db      	ldr	r3, [r3, #12]
 8020712:	685b      	ldr	r3, [r3, #4]
 8020714:	4618      	mov	r0, r3
 8020716:	f7f8 fd88 	bl	801922a <lwip_htonl>
 802071a:	4603      	mov	r3, r0
 802071c:	1ae3      	subs	r3, r4, r3
 802071e:	2b00      	cmp	r3, #0
 8020720:	da24      	bge.n	802076c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	3370      	adds	r3, #112	@ 0x70
 8020726:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020728:	e002      	b.n	8020730 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 802072a:	69fb      	ldr	r3, [r7, #28]
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020730:	69fb      	ldr	r3, [r7, #28]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	2b00      	cmp	r3, #0
 8020736:	d011      	beq.n	802075c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020738:	69fb      	ldr	r3, [r7, #28]
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	68db      	ldr	r3, [r3, #12]
 802073e:	685b      	ldr	r3, [r3, #4]
 8020740:	4618      	mov	r0, r3
 8020742:	f7f8 fd72 	bl	801922a <lwip_htonl>
 8020746:	4604      	mov	r4, r0
 8020748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802074a:	68db      	ldr	r3, [r3, #12]
 802074c:	685b      	ldr	r3, [r3, #4]
 802074e:	4618      	mov	r0, r3
 8020750:	f7f8 fd6b 	bl	801922a <lwip_htonl>
 8020754:	4603      	mov	r3, r0
 8020756:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8020758:	2b00      	cmp	r3, #0
 802075a:	dbe6      	blt.n	802072a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 802075c:	69fb      	ldr	r3, [r7, #28]
 802075e:	681a      	ldr	r2, [r3, #0]
 8020760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020762:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8020764:	69fb      	ldr	r3, [r7, #28]
 8020766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020768:	601a      	str	r2, [r3, #0]
 802076a:	e009      	b.n	8020780 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 802076c:	6a3b      	ldr	r3, [r7, #32]
 802076e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020770:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8020772:	6a3b      	ldr	r3, [r7, #32]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	623b      	str	r3, [r7, #32]
 8020778:	e002      	b.n	8020780 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802077a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802077c:	f7fb ff1d 	bl	801c5ba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020784:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8020786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020788:	2b00      	cmp	r3, #0
 802078a:	d012      	beq.n	80207b2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 802078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802078e:	68db      	ldr	r3, [r3, #12]
 8020790:	685b      	ldr	r3, [r3, #4]
 8020792:	4618      	mov	r0, r3
 8020794:	f7f8 fd49 	bl	801922a <lwip_htonl>
 8020798:	4602      	mov	r2, r0
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802079e:	1ad3      	subs	r3, r2, r3
 80207a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80207a2:	8912      	ldrh	r2, [r2, #8]
 80207a4:	4413      	add	r3, r2
  while (seg != NULL &&
 80207a6:	69ba      	ldr	r2, [r7, #24]
 80207a8:	429a      	cmp	r2, r3
 80207aa:	f4bf aed9 	bcs.w	8020560 <tcp_output+0x160>
 80207ae:	e000      	b.n	80207b2 <tcp_output+0x3b2>
      break;
 80207b0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	d108      	bne.n	80207cc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	2200      	movs	r2, #0
 80207be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80207c2:	e004      	b.n	80207ce <tcp_output+0x3ce>
    goto output_done;
 80207c4:	bf00      	nop
 80207c6:	e002      	b.n	80207ce <tcp_output+0x3ce>
    goto output_done;
 80207c8:	bf00      	nop
 80207ca:	e000      	b.n	80207ce <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80207cc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	8b5b      	ldrh	r3, [r3, #26]
 80207d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80207d6:	b29a      	uxth	r2, r3
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80207dc:	2300      	movs	r3, #0
}
 80207de:	4618      	mov	r0, r3
 80207e0:	3728      	adds	r7, #40	@ 0x28
 80207e2:	46bd      	mov	sp, r7
 80207e4:	bdb0      	pop	{r4, r5, r7, pc}
 80207e6:	bf00      	nop

080207e8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80207e8:	b580      	push	{r7, lr}
 80207ea:	b082      	sub	sp, #8
 80207ec:	af00      	add	r7, sp, #0
 80207ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d106      	bne.n	8020804 <tcp_output_segment_busy+0x1c>
 80207f6:	4b09      	ldr	r3, [pc, #36]	@ (802081c <tcp_output_segment_busy+0x34>)
 80207f8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80207fc:	4908      	ldr	r1, [pc, #32]	@ (8020820 <tcp_output_segment_busy+0x38>)
 80207fe:	4809      	ldr	r0, [pc, #36]	@ (8020824 <tcp_output_segment_busy+0x3c>)
 8020800:	f002 f88a 	bl	8022918 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	685b      	ldr	r3, [r3, #4]
 8020808:	7b9b      	ldrb	r3, [r3, #14]
 802080a:	2b01      	cmp	r3, #1
 802080c:	d001      	beq.n	8020812 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 802080e:	2301      	movs	r3, #1
 8020810:	e000      	b.n	8020814 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8020812:	2300      	movs	r3, #0
}
 8020814:	4618      	mov	r0, r3
 8020816:	3708      	adds	r7, #8
 8020818:	46bd      	mov	sp, r7
 802081a:	bd80      	pop	{r7, pc}
 802081c:	08027714 	.word	0x08027714
 8020820:	08027cf4 	.word	0x08027cf4
 8020824:	080277ac 	.word	0x080277ac

08020828 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8020828:	b5b0      	push	{r4, r5, r7, lr}
 802082a:	b08c      	sub	sp, #48	@ 0x30
 802082c:	af04      	add	r7, sp, #16
 802082e:	60f8      	str	r0, [r7, #12]
 8020830:	60b9      	str	r1, [r7, #8]
 8020832:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8020834:	68fb      	ldr	r3, [r7, #12]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d106      	bne.n	8020848 <tcp_output_segment+0x20>
 802083a:	4b64      	ldr	r3, [pc, #400]	@ (80209cc <tcp_output_segment+0x1a4>)
 802083c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8020840:	4963      	ldr	r1, [pc, #396]	@ (80209d0 <tcp_output_segment+0x1a8>)
 8020842:	4864      	ldr	r0, [pc, #400]	@ (80209d4 <tcp_output_segment+0x1ac>)
 8020844:	f002 f868 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8020848:	68bb      	ldr	r3, [r7, #8]
 802084a:	2b00      	cmp	r3, #0
 802084c:	d106      	bne.n	802085c <tcp_output_segment+0x34>
 802084e:	4b5f      	ldr	r3, [pc, #380]	@ (80209cc <tcp_output_segment+0x1a4>)
 8020850:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8020854:	4960      	ldr	r1, [pc, #384]	@ (80209d8 <tcp_output_segment+0x1b0>)
 8020856:	485f      	ldr	r0, [pc, #380]	@ (80209d4 <tcp_output_segment+0x1ac>)
 8020858:	f002 f85e 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	2b00      	cmp	r3, #0
 8020860:	d106      	bne.n	8020870 <tcp_output_segment+0x48>
 8020862:	4b5a      	ldr	r3, [pc, #360]	@ (80209cc <tcp_output_segment+0x1a4>)
 8020864:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8020868:	495c      	ldr	r1, [pc, #368]	@ (80209dc <tcp_output_segment+0x1b4>)
 802086a:	485a      	ldr	r0, [pc, #360]	@ (80209d4 <tcp_output_segment+0x1ac>)
 802086c:	f002 f854 	bl	8022918 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020870:	68f8      	ldr	r0, [r7, #12]
 8020872:	f7ff ffb9 	bl	80207e8 <tcp_output_segment_busy>
 8020876:	4603      	mov	r3, r0
 8020878:	2b00      	cmp	r3, #0
 802087a:	d001      	beq.n	8020880 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 802087c:	2300      	movs	r3, #0
 802087e:	e0a1      	b.n	80209c4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	68dc      	ldr	r4, [r3, #12]
 8020888:	4610      	mov	r0, r2
 802088a:	f7f8 fcce 	bl	801922a <lwip_htonl>
 802088e:	4603      	mov	r3, r0
 8020890:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020892:	68bb      	ldr	r3, [r7, #8]
 8020894:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	68dc      	ldr	r4, [r3, #12]
 802089a:	4610      	mov	r0, r2
 802089c:	f7f8 fcb0 	bl	8019200 <lwip_htons>
 80208a0:	4603      	mov	r3, r0
 80208a2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80208a4:	68bb      	ldr	r3, [r7, #8]
 80208a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80208a8:	68ba      	ldr	r2, [r7, #8]
 80208aa:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80208ac:	441a      	add	r2, r3
 80208ae:	68bb      	ldr	r3, [r7, #8]
 80208b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80208b2:	68fb      	ldr	r3, [r7, #12]
 80208b4:	68db      	ldr	r3, [r3, #12]
 80208b6:	3314      	adds	r3, #20
 80208b8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80208ba:	68fb      	ldr	r3, [r7, #12]
 80208bc:	7a9b      	ldrb	r3, [r3, #10]
 80208be:	f003 0301 	and.w	r3, r3, #1
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d015      	beq.n	80208f2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80208c6:	68bb      	ldr	r3, [r7, #8]
 80208c8:	3304      	adds	r3, #4
 80208ca:	461a      	mov	r2, r3
 80208cc:	6879      	ldr	r1, [r7, #4]
 80208ce:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80208d2:	f7fc fa37 	bl	801cd44 <tcp_eff_send_mss_netif>
 80208d6:	4603      	mov	r3, r0
 80208d8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80208da:	8b7b      	ldrh	r3, [r7, #26]
 80208dc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80208e0:	4618      	mov	r0, r3
 80208e2:	f7f8 fca2 	bl	801922a <lwip_htonl>
 80208e6:	4602      	mov	r2, r0
 80208e8:	69fb      	ldr	r3, [r7, #28]
 80208ea:	601a      	str	r2, [r3, #0]
    opts += 1;
 80208ec:	69fb      	ldr	r3, [r7, #28]
 80208ee:	3304      	adds	r3, #4
 80208f0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80208f2:	68bb      	ldr	r3, [r7, #8]
 80208f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	da02      	bge.n	8020902 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80208fc:	68bb      	ldr	r3, [r7, #8]
 80208fe:	2200      	movs	r2, #0
 8020900:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8020902:	68bb      	ldr	r3, [r7, #8]
 8020904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020906:	2b00      	cmp	r3, #0
 8020908:	d10c      	bne.n	8020924 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 802090a:	4b35      	ldr	r3, [pc, #212]	@ (80209e0 <tcp_output_segment+0x1b8>)
 802090c:	681a      	ldr	r2, [r3, #0]
 802090e:	68bb      	ldr	r3, [r7, #8]
 8020910:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	68db      	ldr	r3, [r3, #12]
 8020916:	685b      	ldr	r3, [r3, #4]
 8020918:	4618      	mov	r0, r3
 802091a:	f7f8 fc86 	bl	801922a <lwip_htonl>
 802091e:	4602      	mov	r2, r0
 8020920:	68bb      	ldr	r3, [r7, #8]
 8020922:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	68da      	ldr	r2, [r3, #12]
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	685b      	ldr	r3, [r3, #4]
 802092c:	685b      	ldr	r3, [r3, #4]
 802092e:	1ad3      	subs	r3, r2, r3
 8020930:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	685b      	ldr	r3, [r3, #4]
 8020936:	8959      	ldrh	r1, [r3, #10]
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	685b      	ldr	r3, [r3, #4]
 802093c:	8b3a      	ldrh	r2, [r7, #24]
 802093e:	1a8a      	subs	r2, r1, r2
 8020940:	b292      	uxth	r2, r2
 8020942:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	685b      	ldr	r3, [r3, #4]
 8020948:	8919      	ldrh	r1, [r3, #8]
 802094a:	68fb      	ldr	r3, [r7, #12]
 802094c:	685b      	ldr	r3, [r3, #4]
 802094e:	8b3a      	ldrh	r2, [r7, #24]
 8020950:	1a8a      	subs	r2, r1, r2
 8020952:	b292      	uxth	r2, r2
 8020954:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8020956:	68fb      	ldr	r3, [r7, #12]
 8020958:	685b      	ldr	r3, [r3, #4]
 802095a:	68fa      	ldr	r2, [r7, #12]
 802095c:	68d2      	ldr	r2, [r2, #12]
 802095e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8020960:	68fb      	ldr	r3, [r7, #12]
 8020962:	68db      	ldr	r3, [r3, #12]
 8020964:	2200      	movs	r2, #0
 8020966:	741a      	strb	r2, [r3, #16]
 8020968:	2200      	movs	r2, #0
 802096a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	68da      	ldr	r2, [r3, #12]
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	7a9b      	ldrb	r3, [r3, #10]
 8020974:	f003 0301 	and.w	r3, r3, #1
 8020978:	2b00      	cmp	r3, #0
 802097a:	d001      	beq.n	8020980 <tcp_output_segment+0x158>
 802097c:	2318      	movs	r3, #24
 802097e:	e000      	b.n	8020982 <tcp_output_segment+0x15a>
 8020980:	2314      	movs	r3, #20
 8020982:	4413      	add	r3, r2
 8020984:	69fa      	ldr	r2, [r7, #28]
 8020986:	429a      	cmp	r2, r3
 8020988:	d006      	beq.n	8020998 <tcp_output_segment+0x170>
 802098a:	4b10      	ldr	r3, [pc, #64]	@ (80209cc <tcp_output_segment+0x1a4>)
 802098c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8020990:	4914      	ldr	r1, [pc, #80]	@ (80209e4 <tcp_output_segment+0x1bc>)
 8020992:	4810      	ldr	r0, [pc, #64]	@ (80209d4 <tcp_output_segment+0x1ac>)
 8020994:	f001 ffc0 	bl	8022918 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020998:	68fb      	ldr	r3, [r7, #12]
 802099a:	6858      	ldr	r0, [r3, #4]
 802099c:	68b9      	ldr	r1, [r7, #8]
 802099e:	68bb      	ldr	r3, [r7, #8]
 80209a0:	1d1c      	adds	r4, r3, #4
 80209a2:	68bb      	ldr	r3, [r7, #8]
 80209a4:	7add      	ldrb	r5, [r3, #11]
 80209a6:	68bb      	ldr	r3, [r7, #8]
 80209a8:	7a9b      	ldrb	r3, [r3, #10]
 80209aa:	687a      	ldr	r2, [r7, #4]
 80209ac:	9202      	str	r2, [sp, #8]
 80209ae:	2206      	movs	r2, #6
 80209b0:	9201      	str	r2, [sp, #4]
 80209b2:	9300      	str	r3, [sp, #0]
 80209b4:	462b      	mov	r3, r5
 80209b6:	4622      	mov	r2, r4
 80209b8:	f7f7 fb2a 	bl	8018010 <ip4_output_if>
 80209bc:	4603      	mov	r3, r0
 80209be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80209c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80209c4:	4618      	mov	r0, r3
 80209c6:	3720      	adds	r7, #32
 80209c8:	46bd      	mov	sp, r7
 80209ca:	bdb0      	pop	{r4, r5, r7, pc}
 80209cc:	08027714 	.word	0x08027714
 80209d0:	08027d1c 	.word	0x08027d1c
 80209d4:	080277ac 	.word	0x080277ac
 80209d8:	08027d3c 	.word	0x08027d3c
 80209dc:	08027d5c 	.word	0x08027d5c
 80209e0:	20010018 	.word	0x20010018
 80209e4:	08027d80 	.word	0x08027d80

080209e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80209e8:	b5b0      	push	{r4, r5, r7, lr}
 80209ea:	b084      	sub	sp, #16
 80209ec:	af00      	add	r7, sp, #0
 80209ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d106      	bne.n	8020a04 <tcp_rexmit_rto_prepare+0x1c>
 80209f6:	4b31      	ldr	r3, [pc, #196]	@ (8020abc <tcp_rexmit_rto_prepare+0xd4>)
 80209f8:	f240 6263 	movw	r2, #1635	@ 0x663
 80209fc:	4930      	ldr	r1, [pc, #192]	@ (8020ac0 <tcp_rexmit_rto_prepare+0xd8>)
 80209fe:	4831      	ldr	r0, [pc, #196]	@ (8020ac4 <tcp_rexmit_rto_prepare+0xdc>)
 8020a00:	f001 ff8a 	bl	8022918 <iprintf>

  if (pcb->unacked == NULL) {
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	d102      	bne.n	8020a12 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8020a0c:	f06f 0305 	mvn.w	r3, #5
 8020a10:	e050      	b.n	8020ab4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020a16:	60fb      	str	r3, [r7, #12]
 8020a18:	e00b      	b.n	8020a32 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8020a1a:	68f8      	ldr	r0, [r7, #12]
 8020a1c:	f7ff fee4 	bl	80207e8 <tcp_output_segment_busy>
 8020a20:	4603      	mov	r3, r0
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d002      	beq.n	8020a2c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8020a26:	f06f 0305 	mvn.w	r3, #5
 8020a2a:	e043      	b.n	8020ab4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	681b      	ldr	r3, [r3, #0]
 8020a30:	60fb      	str	r3, [r7, #12]
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d1ef      	bne.n	8020a1a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8020a3a:	68f8      	ldr	r0, [r7, #12]
 8020a3c:	f7ff fed4 	bl	80207e8 <tcp_output_segment_busy>
 8020a40:	4603      	mov	r3, r0
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d002      	beq.n	8020a4c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8020a46:	f06f 0305 	mvn.w	r3, #5
 8020a4a:	e033      	b.n	8020ab4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	2200      	movs	r2, #0
 8020a60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	8b5b      	ldrh	r3, [r3, #26]
 8020a66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8020a6a:	b29a      	uxth	r2, r3
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	68db      	ldr	r3, [r3, #12]
 8020a74:	685b      	ldr	r3, [r3, #4]
 8020a76:	4618      	mov	r0, r3
 8020a78:	f7f8 fbd7 	bl	801922a <lwip_htonl>
 8020a7c:	4604      	mov	r4, r0
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	891b      	ldrh	r3, [r3, #8]
 8020a82:	461d      	mov	r5, r3
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	68db      	ldr	r3, [r3, #12]
 8020a88:	899b      	ldrh	r3, [r3, #12]
 8020a8a:	b29b      	uxth	r3, r3
 8020a8c:	4618      	mov	r0, r3
 8020a8e:	f7f8 fbb7 	bl	8019200 <lwip_htons>
 8020a92:	4603      	mov	r3, r0
 8020a94:	b2db      	uxtb	r3, r3
 8020a96:	f003 0303 	and.w	r3, r3, #3
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d001      	beq.n	8020aa2 <tcp_rexmit_rto_prepare+0xba>
 8020a9e:	2301      	movs	r3, #1
 8020aa0:	e000      	b.n	8020aa4 <tcp_rexmit_rto_prepare+0xbc>
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	442b      	add	r3, r5
 8020aa6:	18e2      	adds	r2, r4, r3
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	2200      	movs	r2, #0
 8020ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8020ab2:	2300      	movs	r3, #0
}
 8020ab4:	4618      	mov	r0, r3
 8020ab6:	3710      	adds	r7, #16
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	bdb0      	pop	{r4, r5, r7, pc}
 8020abc:	08027714 	.word	0x08027714
 8020ac0:	08027d94 	.word	0x08027d94
 8020ac4:	080277ac 	.word	0x080277ac

08020ac8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b082      	sub	sp, #8
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d106      	bne.n	8020ae4 <tcp_rexmit_rto_commit+0x1c>
 8020ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8020b0c <tcp_rexmit_rto_commit+0x44>)
 8020ad8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8020adc:	490c      	ldr	r1, [pc, #48]	@ (8020b10 <tcp_rexmit_rto_commit+0x48>)
 8020ade:	480d      	ldr	r0, [pc, #52]	@ (8020b14 <tcp_rexmit_rto_commit+0x4c>)
 8020ae0:	f001 ff1a 	bl	8022918 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020aea:	2bff      	cmp	r3, #255	@ 0xff
 8020aec:	d007      	beq.n	8020afe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020af4:	3301      	adds	r3, #1
 8020af6:	b2da      	uxtb	r2, r3
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8020afe:	6878      	ldr	r0, [r7, #4]
 8020b00:	f7ff fc7e 	bl	8020400 <tcp_output>
}
 8020b04:	bf00      	nop
 8020b06:	3708      	adds	r7, #8
 8020b08:	46bd      	mov	sp, r7
 8020b0a:	bd80      	pop	{r7, pc}
 8020b0c:	08027714 	.word	0x08027714
 8020b10:	08027db8 	.word	0x08027db8
 8020b14:	080277ac 	.word	0x080277ac

08020b18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8020b18:	b580      	push	{r7, lr}
 8020b1a:	b082      	sub	sp, #8
 8020b1c:	af00      	add	r7, sp, #0
 8020b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d106      	bne.n	8020b34 <tcp_rexmit_rto+0x1c>
 8020b26:	4b0a      	ldr	r3, [pc, #40]	@ (8020b50 <tcp_rexmit_rto+0x38>)
 8020b28:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8020b2c:	4909      	ldr	r1, [pc, #36]	@ (8020b54 <tcp_rexmit_rto+0x3c>)
 8020b2e:	480a      	ldr	r0, [pc, #40]	@ (8020b58 <tcp_rexmit_rto+0x40>)
 8020b30:	f001 fef2 	bl	8022918 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020b34:	6878      	ldr	r0, [r7, #4]
 8020b36:	f7ff ff57 	bl	80209e8 <tcp_rexmit_rto_prepare>
 8020b3a:	4603      	mov	r3, r0
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d102      	bne.n	8020b46 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8020b40:	6878      	ldr	r0, [r7, #4]
 8020b42:	f7ff ffc1 	bl	8020ac8 <tcp_rexmit_rto_commit>
  }
}
 8020b46:	bf00      	nop
 8020b48:	3708      	adds	r7, #8
 8020b4a:	46bd      	mov	sp, r7
 8020b4c:	bd80      	pop	{r7, pc}
 8020b4e:	bf00      	nop
 8020b50:	08027714 	.word	0x08027714
 8020b54:	08027ddc 	.word	0x08027ddc
 8020b58:	080277ac 	.word	0x080277ac

08020b5c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8020b5c:	b590      	push	{r4, r7, lr}
 8020b5e:	b085      	sub	sp, #20
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d106      	bne.n	8020b78 <tcp_rexmit+0x1c>
 8020b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8020c28 <tcp_rexmit+0xcc>)
 8020b6c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8020b70:	492e      	ldr	r1, [pc, #184]	@ (8020c2c <tcp_rexmit+0xd0>)
 8020b72:	482f      	ldr	r0, [pc, #188]	@ (8020c30 <tcp_rexmit+0xd4>)
 8020b74:	f001 fed0 	bl	8022918 <iprintf>

  if (pcb->unacked == NULL) {
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d102      	bne.n	8020b86 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020b80:	f06f 0305 	mvn.w	r3, #5
 8020b84:	e04c      	b.n	8020c20 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020b8a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8020b8c:	68b8      	ldr	r0, [r7, #8]
 8020b8e:	f7ff fe2b 	bl	80207e8 <tcp_output_segment_busy>
 8020b92:	4603      	mov	r3, r0
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d002      	beq.n	8020b9e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020b98:	f06f 0305 	mvn.w	r3, #5
 8020b9c:	e040      	b.n	8020c20 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8020b9e:	68bb      	ldr	r3, [r7, #8]
 8020ba0:	681a      	ldr	r2, [r3, #0]
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	336c      	adds	r3, #108	@ 0x6c
 8020baa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020bac:	e002      	b.n	8020bb4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8020bae:	68fb      	ldr	r3, [r7, #12]
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020bb4:	68fb      	ldr	r3, [r7, #12]
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d011      	beq.n	8020be0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	68db      	ldr	r3, [r3, #12]
 8020bc2:	685b      	ldr	r3, [r3, #4]
 8020bc4:	4618      	mov	r0, r3
 8020bc6:	f7f8 fb30 	bl	801922a <lwip_htonl>
 8020bca:	4604      	mov	r4, r0
 8020bcc:	68bb      	ldr	r3, [r7, #8]
 8020bce:	68db      	ldr	r3, [r3, #12]
 8020bd0:	685b      	ldr	r3, [r3, #4]
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	f7f8 fb29 	bl	801922a <lwip_htonl>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	dbe6      	blt.n	8020bae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020be0:	68fb      	ldr	r3, [r7, #12]
 8020be2:	681a      	ldr	r2, [r3, #0]
 8020be4:	68bb      	ldr	r3, [r7, #8]
 8020be6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	68ba      	ldr	r2, [r7, #8]
 8020bec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8020bee:	68bb      	ldr	r3, [r7, #8]
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d103      	bne.n	8020bfe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2200      	movs	r2, #0
 8020bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020c04:	2bff      	cmp	r3, #255	@ 0xff
 8020c06:	d007      	beq.n	8020c18 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020c0e:	3301      	adds	r3, #1
 8020c10:	b2da      	uxtb	r2, r3
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8020c1e:	2300      	movs	r3, #0
}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3714      	adds	r7, #20
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd90      	pop	{r4, r7, pc}
 8020c28:	08027714 	.word	0x08027714
 8020c2c:	08027df8 	.word	0x08027df8
 8020c30:	080277ac 	.word	0x080277ac

08020c34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8020c34:	b580      	push	{r7, lr}
 8020c36:	b082      	sub	sp, #8
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d106      	bne.n	8020c50 <tcp_rexmit_fast+0x1c>
 8020c42:	4b2a      	ldr	r3, [pc, #168]	@ (8020cec <tcp_rexmit_fast+0xb8>)
 8020c44:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8020c48:	4929      	ldr	r1, [pc, #164]	@ (8020cf0 <tcp_rexmit_fast+0xbc>)
 8020c4a:	482a      	ldr	r0, [pc, #168]	@ (8020cf4 <tcp_rexmit_fast+0xc0>)
 8020c4c:	f001 fe64 	bl	8022918 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020c54:	2b00      	cmp	r3, #0
 8020c56:	d045      	beq.n	8020ce4 <tcp_rexmit_fast+0xb0>
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	8b5b      	ldrh	r3, [r3, #26]
 8020c5c:	f003 0304 	and.w	r3, r3, #4
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d13f      	bne.n	8020ce4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020c64:	6878      	ldr	r0, [r7, #4]
 8020c66:	f7ff ff79 	bl	8020b5c <tcp_rexmit>
 8020c6a:	4603      	mov	r3, r0
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d139      	bne.n	8020ce4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8020c7c:	4293      	cmp	r3, r2
 8020c7e:	bf28      	it	cs
 8020c80:	4613      	movcs	r3, r2
 8020c82:	b29b      	uxth	r3, r3
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	da00      	bge.n	8020c8a <tcp_rexmit_fast+0x56>
 8020c88:	3301      	adds	r3, #1
 8020c8a:	105b      	asrs	r3, r3, #1
 8020c8c:	b29a      	uxth	r2, r3
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8020c9a:	461a      	mov	r2, r3
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020ca0:	005b      	lsls	r3, r3, #1
 8020ca2:	429a      	cmp	r2, r3
 8020ca4:	d206      	bcs.n	8020cb4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020caa:	005b      	lsls	r3, r3, #1
 8020cac:	b29a      	uxth	r2, r3
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020cbe:	4619      	mov	r1, r3
 8020cc0:	0049      	lsls	r1, r1, #1
 8020cc2:	440b      	add	r3, r1
 8020cc4:	b29b      	uxth	r3, r3
 8020cc6:	4413      	add	r3, r2
 8020cc8:	b29a      	uxth	r2, r3
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	8b5b      	ldrh	r3, [r3, #26]
 8020cd4:	f043 0304 	orr.w	r3, r3, #4
 8020cd8:	b29a      	uxth	r2, r3
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	2200      	movs	r2, #0
 8020ce2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8020ce4:	bf00      	nop
 8020ce6:	3708      	adds	r7, #8
 8020ce8:	46bd      	mov	sp, r7
 8020cea:	bd80      	pop	{r7, pc}
 8020cec:	08027714 	.word	0x08027714
 8020cf0:	08027e10 	.word	0x08027e10
 8020cf4:	080277ac 	.word	0x080277ac

08020cf8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8020cf8:	b580      	push	{r7, lr}
 8020cfa:	b086      	sub	sp, #24
 8020cfc:	af00      	add	r7, sp, #0
 8020cfe:	60f8      	str	r0, [r7, #12]
 8020d00:	607b      	str	r3, [r7, #4]
 8020d02:	460b      	mov	r3, r1
 8020d04:	817b      	strh	r3, [r7, #10]
 8020d06:	4613      	mov	r3, r2
 8020d08:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020d0a:	897a      	ldrh	r2, [r7, #10]
 8020d0c:	893b      	ldrh	r3, [r7, #8]
 8020d0e:	4413      	add	r3, r2
 8020d10:	b29b      	uxth	r3, r3
 8020d12:	3314      	adds	r3, #20
 8020d14:	b29b      	uxth	r3, r3
 8020d16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020d1a:	4619      	mov	r1, r3
 8020d1c:	2022      	movs	r0, #34	@ 0x22
 8020d1e:	f7f9 fc0b 	bl	801a538 <pbuf_alloc>
 8020d22:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020d24:	697b      	ldr	r3, [r7, #20]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d04d      	beq.n	8020dc6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020d2a:	897b      	ldrh	r3, [r7, #10]
 8020d2c:	3313      	adds	r3, #19
 8020d2e:	697a      	ldr	r2, [r7, #20]
 8020d30:	8952      	ldrh	r2, [r2, #10]
 8020d32:	4293      	cmp	r3, r2
 8020d34:	db06      	blt.n	8020d44 <tcp_output_alloc_header_common+0x4c>
 8020d36:	4b26      	ldr	r3, [pc, #152]	@ (8020dd0 <tcp_output_alloc_header_common+0xd8>)
 8020d38:	f240 7223 	movw	r2, #1827	@ 0x723
 8020d3c:	4925      	ldr	r1, [pc, #148]	@ (8020dd4 <tcp_output_alloc_header_common+0xdc>)
 8020d3e:	4826      	ldr	r0, [pc, #152]	@ (8020dd8 <tcp_output_alloc_header_common+0xe0>)
 8020d40:	f001 fdea 	bl	8022918 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	685b      	ldr	r3, [r3, #4]
 8020d48:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8020d4a:	8c3b      	ldrh	r3, [r7, #32]
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	f7f8 fa57 	bl	8019200 <lwip_htons>
 8020d52:	4603      	mov	r3, r0
 8020d54:	461a      	mov	r2, r3
 8020d56:	693b      	ldr	r3, [r7, #16]
 8020d58:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8020d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	f7f8 fa4f 	bl	8019200 <lwip_htons>
 8020d62:	4603      	mov	r3, r0
 8020d64:	461a      	mov	r2, r3
 8020d66:	693b      	ldr	r3, [r7, #16]
 8020d68:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020d6a:	693b      	ldr	r3, [r7, #16]
 8020d6c:	687a      	ldr	r2, [r7, #4]
 8020d6e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020d70:	68f8      	ldr	r0, [r7, #12]
 8020d72:	f7f8 fa5a 	bl	801922a <lwip_htonl>
 8020d76:	4602      	mov	r2, r0
 8020d78:	693b      	ldr	r3, [r7, #16]
 8020d7a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8020d7c:	897b      	ldrh	r3, [r7, #10]
 8020d7e:	089b      	lsrs	r3, r3, #2
 8020d80:	b29b      	uxth	r3, r3
 8020d82:	3305      	adds	r3, #5
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	031b      	lsls	r3, r3, #12
 8020d88:	b29a      	uxth	r2, r3
 8020d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8020d8e:	b29b      	uxth	r3, r3
 8020d90:	4313      	orrs	r3, r2
 8020d92:	b29b      	uxth	r3, r3
 8020d94:	4618      	mov	r0, r3
 8020d96:	f7f8 fa33 	bl	8019200 <lwip_htons>
 8020d9a:	4603      	mov	r3, r0
 8020d9c:	461a      	mov	r2, r3
 8020d9e:	693b      	ldr	r3, [r7, #16]
 8020da0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020da2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020da4:	4618      	mov	r0, r3
 8020da6:	f7f8 fa2b 	bl	8019200 <lwip_htons>
 8020daa:	4603      	mov	r3, r0
 8020dac:	461a      	mov	r2, r3
 8020dae:	693b      	ldr	r3, [r7, #16]
 8020db0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020db2:	693b      	ldr	r3, [r7, #16]
 8020db4:	2200      	movs	r2, #0
 8020db6:	741a      	strb	r2, [r3, #16]
 8020db8:	2200      	movs	r2, #0
 8020dba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020dbc:	693b      	ldr	r3, [r7, #16]
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	749a      	strb	r2, [r3, #18]
 8020dc2:	2200      	movs	r2, #0
 8020dc4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020dc6:	697b      	ldr	r3, [r7, #20]
}
 8020dc8:	4618      	mov	r0, r3
 8020dca:	3718      	adds	r7, #24
 8020dcc:	46bd      	mov	sp, r7
 8020dce:	bd80      	pop	{r7, pc}
 8020dd0:	08027714 	.word	0x08027714
 8020dd4:	08027e30 	.word	0x08027e30
 8020dd8:	080277ac 	.word	0x080277ac

08020ddc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8020ddc:	b5b0      	push	{r4, r5, r7, lr}
 8020dde:	b08a      	sub	sp, #40	@ 0x28
 8020de0:	af04      	add	r7, sp, #16
 8020de2:	60f8      	str	r0, [r7, #12]
 8020de4:	607b      	str	r3, [r7, #4]
 8020de6:	460b      	mov	r3, r1
 8020de8:	817b      	strh	r3, [r7, #10]
 8020dea:	4613      	mov	r3, r2
 8020dec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d106      	bne.n	8020e02 <tcp_output_alloc_header+0x26>
 8020df4:	4b15      	ldr	r3, [pc, #84]	@ (8020e4c <tcp_output_alloc_header+0x70>)
 8020df6:	f240 7242 	movw	r2, #1858	@ 0x742
 8020dfa:	4915      	ldr	r1, [pc, #84]	@ (8020e50 <tcp_output_alloc_header+0x74>)
 8020dfc:	4815      	ldr	r0, [pc, #84]	@ (8020e54 <tcp_output_alloc_header+0x78>)
 8020dfe:	f001 fd8b 	bl	8022918 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8020e02:	68fb      	ldr	r3, [r7, #12]
 8020e04:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8020e06:	68fb      	ldr	r3, [r7, #12]
 8020e08:	8adb      	ldrh	r3, [r3, #22]
 8020e0a:	68fa      	ldr	r2, [r7, #12]
 8020e0c:	8b12      	ldrh	r2, [r2, #24]
 8020e0e:	68f9      	ldr	r1, [r7, #12]
 8020e10:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8020e12:	893d      	ldrh	r5, [r7, #8]
 8020e14:	897c      	ldrh	r4, [r7, #10]
 8020e16:	9103      	str	r1, [sp, #12]
 8020e18:	2110      	movs	r1, #16
 8020e1a:	9102      	str	r1, [sp, #8]
 8020e1c:	9201      	str	r2, [sp, #4]
 8020e1e:	9300      	str	r3, [sp, #0]
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	462a      	mov	r2, r5
 8020e24:	4621      	mov	r1, r4
 8020e26:	f7ff ff67 	bl	8020cf8 <tcp_output_alloc_header_common>
 8020e2a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8020e2c:	697b      	ldr	r3, [r7, #20]
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	d006      	beq.n	8020e40 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020e36:	68fa      	ldr	r2, [r7, #12]
 8020e38:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8020e3a:	441a      	add	r2, r3
 8020e3c:	68fb      	ldr	r3, [r7, #12]
 8020e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8020e40:	697b      	ldr	r3, [r7, #20]
}
 8020e42:	4618      	mov	r0, r3
 8020e44:	3718      	adds	r7, #24
 8020e46:	46bd      	mov	sp, r7
 8020e48:	bdb0      	pop	{r4, r5, r7, pc}
 8020e4a:	bf00      	nop
 8020e4c:	08027714 	.word	0x08027714
 8020e50:	08027e60 	.word	0x08027e60
 8020e54:	080277ac 	.word	0x080277ac

08020e58 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020e58:	b580      	push	{r7, lr}
 8020e5a:	b088      	sub	sp, #32
 8020e5c:	af00      	add	r7, sp, #0
 8020e5e:	60f8      	str	r0, [r7, #12]
 8020e60:	60b9      	str	r1, [r7, #8]
 8020e62:	4611      	mov	r1, r2
 8020e64:	461a      	mov	r2, r3
 8020e66:	460b      	mov	r3, r1
 8020e68:	71fb      	strb	r3, [r7, #7]
 8020e6a:	4613      	mov	r3, r2
 8020e6c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8020e6e:	2300      	movs	r3, #0
 8020e70:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020e72:	68bb      	ldr	r3, [r7, #8]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d106      	bne.n	8020e86 <tcp_output_fill_options+0x2e>
 8020e78:	4b12      	ldr	r3, [pc, #72]	@ (8020ec4 <tcp_output_fill_options+0x6c>)
 8020e7a:	f240 7256 	movw	r2, #1878	@ 0x756
 8020e7e:	4912      	ldr	r1, [pc, #72]	@ (8020ec8 <tcp_output_fill_options+0x70>)
 8020e80:	4812      	ldr	r0, [pc, #72]	@ (8020ecc <tcp_output_fill_options+0x74>)
 8020e82:	f001 fd49 	bl	8022918 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020e86:	68bb      	ldr	r3, [r7, #8]
 8020e88:	685b      	ldr	r3, [r3, #4]
 8020e8a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8020e8c:	69bb      	ldr	r3, [r7, #24]
 8020e8e:	3314      	adds	r3, #20
 8020e90:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020e92:	8bfb      	ldrh	r3, [r7, #30]
 8020e94:	009b      	lsls	r3, r3, #2
 8020e96:	461a      	mov	r2, r3
 8020e98:	79fb      	ldrb	r3, [r7, #7]
 8020e9a:	009b      	lsls	r3, r3, #2
 8020e9c:	f003 0304 	and.w	r3, r3, #4
 8020ea0:	4413      	add	r3, r2
 8020ea2:	3314      	adds	r3, #20
 8020ea4:	69ba      	ldr	r2, [r7, #24]
 8020ea6:	4413      	add	r3, r2
 8020ea8:	697a      	ldr	r2, [r7, #20]
 8020eaa:	429a      	cmp	r2, r3
 8020eac:	d006      	beq.n	8020ebc <tcp_output_fill_options+0x64>
 8020eae:	4b05      	ldr	r3, [pc, #20]	@ (8020ec4 <tcp_output_fill_options+0x6c>)
 8020eb0:	f240 7275 	movw	r2, #1909	@ 0x775
 8020eb4:	4906      	ldr	r1, [pc, #24]	@ (8020ed0 <tcp_output_fill_options+0x78>)
 8020eb6:	4805      	ldr	r0, [pc, #20]	@ (8020ecc <tcp_output_fill_options+0x74>)
 8020eb8:	f001 fd2e 	bl	8022918 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8020ebc:	bf00      	nop
 8020ebe:	3720      	adds	r7, #32
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	bd80      	pop	{r7, pc}
 8020ec4:	08027714 	.word	0x08027714
 8020ec8:	08027e88 	.word	0x08027e88
 8020ecc:	080277ac 	.word	0x080277ac
 8020ed0:	08027d80 	.word	0x08027d80

08020ed4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020ed4:	b580      	push	{r7, lr}
 8020ed6:	b08a      	sub	sp, #40	@ 0x28
 8020ed8:	af04      	add	r7, sp, #16
 8020eda:	60f8      	str	r0, [r7, #12]
 8020edc:	60b9      	str	r1, [r7, #8]
 8020ede:	607a      	str	r2, [r7, #4]
 8020ee0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020ee2:	68bb      	ldr	r3, [r7, #8]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d106      	bne.n	8020ef6 <tcp_output_control_segment+0x22>
 8020ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8020f5c <tcp_output_control_segment+0x88>)
 8020eea:	f240 7287 	movw	r2, #1927	@ 0x787
 8020eee:	491c      	ldr	r1, [pc, #112]	@ (8020f60 <tcp_output_control_segment+0x8c>)
 8020ef0:	481c      	ldr	r0, [pc, #112]	@ (8020f64 <tcp_output_control_segment+0x90>)
 8020ef2:	f001 fd11 	bl	8022918 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8020ef6:	683a      	ldr	r2, [r7, #0]
 8020ef8:	6879      	ldr	r1, [r7, #4]
 8020efa:	68f8      	ldr	r0, [r7, #12]
 8020efc:	f7fe faea 	bl	801f4d4 <tcp_route>
 8020f00:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8020f02:	693b      	ldr	r3, [r7, #16]
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d102      	bne.n	8020f0e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8020f08:	23fc      	movs	r3, #252	@ 0xfc
 8020f0a:	75fb      	strb	r3, [r7, #23]
 8020f0c:	e01c      	b.n	8020f48 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d006      	beq.n	8020f22 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8020f14:	68fb      	ldr	r3, [r7, #12]
 8020f16:	7adb      	ldrb	r3, [r3, #11]
 8020f18:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8020f1a:	68fb      	ldr	r3, [r7, #12]
 8020f1c:	7a9b      	ldrb	r3, [r3, #10]
 8020f1e:	757b      	strb	r3, [r7, #21]
 8020f20:	e003      	b.n	8020f2a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8020f22:	23ff      	movs	r3, #255	@ 0xff
 8020f24:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8020f26:	2300      	movs	r3, #0
 8020f28:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8020f2a:	7dba      	ldrb	r2, [r7, #22]
 8020f2c:	693b      	ldr	r3, [r7, #16]
 8020f2e:	9302      	str	r3, [sp, #8]
 8020f30:	2306      	movs	r3, #6
 8020f32:	9301      	str	r3, [sp, #4]
 8020f34:	7d7b      	ldrb	r3, [r7, #21]
 8020f36:	9300      	str	r3, [sp, #0]
 8020f38:	4613      	mov	r3, r2
 8020f3a:	683a      	ldr	r2, [r7, #0]
 8020f3c:	6879      	ldr	r1, [r7, #4]
 8020f3e:	68b8      	ldr	r0, [r7, #8]
 8020f40:	f7f7 f866 	bl	8018010 <ip4_output_if>
 8020f44:	4603      	mov	r3, r0
 8020f46:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8020f48:	68b8      	ldr	r0, [r7, #8]
 8020f4a:	f7f9 fe0b 	bl	801ab64 <pbuf_free>
  return err;
 8020f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	3718      	adds	r7, #24
 8020f56:	46bd      	mov	sp, r7
 8020f58:	bd80      	pop	{r7, pc}
 8020f5a:	bf00      	nop
 8020f5c:	08027714 	.word	0x08027714
 8020f60:	08027eb0 	.word	0x08027eb0
 8020f64:	080277ac 	.word	0x080277ac

08020f68 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020f68:	b590      	push	{r4, r7, lr}
 8020f6a:	b08b      	sub	sp, #44	@ 0x2c
 8020f6c:	af04      	add	r7, sp, #16
 8020f6e:	60f8      	str	r0, [r7, #12]
 8020f70:	60b9      	str	r1, [r7, #8]
 8020f72:	607a      	str	r2, [r7, #4]
 8020f74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	d106      	bne.n	8020f8a <tcp_rst+0x22>
 8020f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8020ffc <tcp_rst+0x94>)
 8020f7e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8020f82:	491f      	ldr	r1, [pc, #124]	@ (8021000 <tcp_rst+0x98>)
 8020f84:	481f      	ldr	r0, [pc, #124]	@ (8021004 <tcp_rst+0x9c>)
 8020f86:	f001 fcc7 	bl	8022918 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8020f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d106      	bne.n	8020f9e <tcp_rst+0x36>
 8020f90:	4b1a      	ldr	r3, [pc, #104]	@ (8020ffc <tcp_rst+0x94>)
 8020f92:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8020f96:	491c      	ldr	r1, [pc, #112]	@ (8021008 <tcp_rst+0xa0>)
 8020f98:	481a      	ldr	r0, [pc, #104]	@ (8021004 <tcp_rst+0x9c>)
 8020f9a:	f001 fcbd 	bl	8022918 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020fa2:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8020fa6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020fa8:	7dfb      	ldrb	r3, [r7, #23]
 8020faa:	b29c      	uxth	r4, r3
 8020fac:	68b8      	ldr	r0, [r7, #8]
 8020fae:	f7f8 f93c 	bl	801922a <lwip_htonl>
 8020fb2:	4602      	mov	r2, r0
 8020fb4:	8abb      	ldrh	r3, [r7, #20]
 8020fb6:	9303      	str	r3, [sp, #12]
 8020fb8:	2314      	movs	r3, #20
 8020fba:	9302      	str	r3, [sp, #8]
 8020fbc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8020fbe:	9301      	str	r3, [sp, #4]
 8020fc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020fc2:	9300      	str	r3, [sp, #0]
 8020fc4:	4613      	mov	r3, r2
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	4621      	mov	r1, r4
 8020fca:	6878      	ldr	r0, [r7, #4]
 8020fcc:	f7ff fe94 	bl	8020cf8 <tcp_output_alloc_header_common>
 8020fd0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020fd2:	693b      	ldr	r3, [r7, #16]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d00c      	beq.n	8020ff2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020fd8:	7dfb      	ldrb	r3, [r7, #23]
 8020fda:	2200      	movs	r2, #0
 8020fdc:	6939      	ldr	r1, [r7, #16]
 8020fde:	68f8      	ldr	r0, [r7, #12]
 8020fe0:	f7ff ff3a 	bl	8020e58 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fe6:	683a      	ldr	r2, [r7, #0]
 8020fe8:	6939      	ldr	r1, [r7, #16]
 8020fea:	68f8      	ldr	r0, [r7, #12]
 8020fec:	f7ff ff72 	bl	8020ed4 <tcp_output_control_segment>
 8020ff0:	e000      	b.n	8020ff4 <tcp_rst+0x8c>
    return;
 8020ff2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8020ff4:	371c      	adds	r7, #28
 8020ff6:	46bd      	mov	sp, r7
 8020ff8:	bd90      	pop	{r4, r7, pc}
 8020ffa:	bf00      	nop
 8020ffc:	08027714 	.word	0x08027714
 8021000:	08027edc 	.word	0x08027edc
 8021004:	080277ac 	.word	0x080277ac
 8021008:	08027ef8 	.word	0x08027ef8

0802100c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 802100c:	b590      	push	{r4, r7, lr}
 802100e:	b087      	sub	sp, #28
 8021010:	af00      	add	r7, sp, #0
 8021012:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8021014:	2300      	movs	r3, #0
 8021016:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8021018:	2300      	movs	r3, #0
 802101a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d106      	bne.n	8021030 <tcp_send_empty_ack+0x24>
 8021022:	4b28      	ldr	r3, [pc, #160]	@ (80210c4 <tcp_send_empty_ack+0xb8>)
 8021024:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8021028:	4927      	ldr	r1, [pc, #156]	@ (80210c8 <tcp_send_empty_ack+0xbc>)
 802102a:	4828      	ldr	r0, [pc, #160]	@ (80210cc <tcp_send_empty_ack+0xc0>)
 802102c:	f001 fc74 	bl	8022918 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021030:	7dfb      	ldrb	r3, [r7, #23]
 8021032:	009b      	lsls	r3, r3, #2
 8021034:	b2db      	uxtb	r3, r3
 8021036:	f003 0304 	and.w	r3, r3, #4
 802103a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 802103c:	7d7b      	ldrb	r3, [r7, #21]
 802103e:	b29c      	uxth	r4, r3
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021044:	4618      	mov	r0, r3
 8021046:	f7f8 f8f0 	bl	801922a <lwip_htonl>
 802104a:	4603      	mov	r3, r0
 802104c:	2200      	movs	r2, #0
 802104e:	4621      	mov	r1, r4
 8021050:	6878      	ldr	r0, [r7, #4]
 8021052:	f7ff fec3 	bl	8020ddc <tcp_output_alloc_header>
 8021056:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021058:	693b      	ldr	r3, [r7, #16]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d109      	bne.n	8021072 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	8b5b      	ldrh	r3, [r3, #26]
 8021062:	f043 0303 	orr.w	r3, r3, #3
 8021066:	b29a      	uxth	r2, r3
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802106c:	f06f 0301 	mvn.w	r3, #1
 8021070:	e023      	b.n	80210ba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8021072:	7dbb      	ldrb	r3, [r7, #22]
 8021074:	7dfa      	ldrb	r2, [r7, #23]
 8021076:	6939      	ldr	r1, [r7, #16]
 8021078:	6878      	ldr	r0, [r7, #4]
 802107a:	f7ff feed 	bl	8020e58 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802107e:	687a      	ldr	r2, [r7, #4]
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	3304      	adds	r3, #4
 8021084:	6939      	ldr	r1, [r7, #16]
 8021086:	6878      	ldr	r0, [r7, #4]
 8021088:	f7ff ff24 	bl	8020ed4 <tcp_output_control_segment>
 802108c:	4603      	mov	r3, r0
 802108e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8021090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d007      	beq.n	80210a8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	8b5b      	ldrh	r3, [r3, #26]
 802109c:	f043 0303 	orr.w	r3, r3, #3
 80210a0:	b29a      	uxth	r2, r3
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	835a      	strh	r2, [r3, #26]
 80210a6:	e006      	b.n	80210b6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	8b5b      	ldrh	r3, [r3, #26]
 80210ac:	f023 0303 	bic.w	r3, r3, #3
 80210b0:	b29a      	uxth	r2, r3
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80210b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80210ba:	4618      	mov	r0, r3
 80210bc:	371c      	adds	r7, #28
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd90      	pop	{r4, r7, pc}
 80210c2:	bf00      	nop
 80210c4:	08027714 	.word	0x08027714
 80210c8:	08027f14 	.word	0x08027f14
 80210cc:	080277ac 	.word	0x080277ac

080210d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80210d0:	b590      	push	{r4, r7, lr}
 80210d2:	b087      	sub	sp, #28
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80210d8:	2300      	movs	r3, #0
 80210da:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d106      	bne.n	80210f0 <tcp_keepalive+0x20>
 80210e2:	4b18      	ldr	r3, [pc, #96]	@ (8021144 <tcp_keepalive+0x74>)
 80210e4:	f640 0224 	movw	r2, #2084	@ 0x824
 80210e8:	4917      	ldr	r1, [pc, #92]	@ (8021148 <tcp_keepalive+0x78>)
 80210ea:	4818      	ldr	r0, [pc, #96]	@ (802114c <tcp_keepalive+0x7c>)
 80210ec:	f001 fc14 	bl	8022918 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80210f0:	7dfb      	ldrb	r3, [r7, #23]
 80210f2:	b29c      	uxth	r4, r3
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80210f8:	3b01      	subs	r3, #1
 80210fa:	4618      	mov	r0, r3
 80210fc:	f7f8 f895 	bl	801922a <lwip_htonl>
 8021100:	4603      	mov	r3, r0
 8021102:	2200      	movs	r2, #0
 8021104:	4621      	mov	r1, r4
 8021106:	6878      	ldr	r0, [r7, #4]
 8021108:	f7ff fe68 	bl	8020ddc <tcp_output_alloc_header>
 802110c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802110e:	693b      	ldr	r3, [r7, #16]
 8021110:	2b00      	cmp	r3, #0
 8021112:	d102      	bne.n	802111a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8021114:	f04f 33ff 	mov.w	r3, #4294967295
 8021118:	e010      	b.n	802113c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802111a:	7dfb      	ldrb	r3, [r7, #23]
 802111c:	2200      	movs	r2, #0
 802111e:	6939      	ldr	r1, [r7, #16]
 8021120:	6878      	ldr	r0, [r7, #4]
 8021122:	f7ff fe99 	bl	8020e58 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021126:	687a      	ldr	r2, [r7, #4]
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	3304      	adds	r3, #4
 802112c:	6939      	ldr	r1, [r7, #16]
 802112e:	6878      	ldr	r0, [r7, #4]
 8021130:	f7ff fed0 	bl	8020ed4 <tcp_output_control_segment>
 8021134:	4603      	mov	r3, r0
 8021136:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802113c:	4618      	mov	r0, r3
 802113e:	371c      	adds	r7, #28
 8021140:	46bd      	mov	sp, r7
 8021142:	bd90      	pop	{r4, r7, pc}
 8021144:	08027714 	.word	0x08027714
 8021148:	08027f34 	.word	0x08027f34
 802114c:	080277ac 	.word	0x080277ac

08021150 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8021150:	b590      	push	{r4, r7, lr}
 8021152:	b08b      	sub	sp, #44	@ 0x2c
 8021154:	af00      	add	r7, sp, #0
 8021156:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021158:	2300      	movs	r3, #0
 802115a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	2b00      	cmp	r3, #0
 8021162:	d106      	bne.n	8021172 <tcp_zero_window_probe+0x22>
 8021164:	4b4c      	ldr	r3, [pc, #304]	@ (8021298 <tcp_zero_window_probe+0x148>)
 8021166:	f640 024f 	movw	r2, #2127	@ 0x84f
 802116a:	494c      	ldr	r1, [pc, #304]	@ (802129c <tcp_zero_window_probe+0x14c>)
 802116c:	484c      	ldr	r0, [pc, #304]	@ (80212a0 <tcp_zero_window_probe+0x150>)
 802116e:	f001 fbd3 	bl	8022918 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021176:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8021178:	6a3b      	ldr	r3, [r7, #32]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d101      	bne.n	8021182 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802117e:	2300      	movs	r3, #0
 8021180:	e086      	b.n	8021290 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8021188:	2bff      	cmp	r3, #255	@ 0xff
 802118a:	d007      	beq.n	802119c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8021192:	3301      	adds	r3, #1
 8021194:	b2da      	uxtb	r2, r3
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 802119c:	6a3b      	ldr	r3, [r7, #32]
 802119e:	68db      	ldr	r3, [r3, #12]
 80211a0:	899b      	ldrh	r3, [r3, #12]
 80211a2:	b29b      	uxth	r3, r3
 80211a4:	4618      	mov	r0, r3
 80211a6:	f7f8 f82b 	bl	8019200 <lwip_htons>
 80211aa:	4603      	mov	r3, r0
 80211ac:	b2db      	uxtb	r3, r3
 80211ae:	f003 0301 	and.w	r3, r3, #1
 80211b2:	2b00      	cmp	r3, #0
 80211b4:	d005      	beq.n	80211c2 <tcp_zero_window_probe+0x72>
 80211b6:	6a3b      	ldr	r3, [r7, #32]
 80211b8:	891b      	ldrh	r3, [r3, #8]
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d101      	bne.n	80211c2 <tcp_zero_window_probe+0x72>
 80211be:	2301      	movs	r3, #1
 80211c0:	e000      	b.n	80211c4 <tcp_zero_window_probe+0x74>
 80211c2:	2300      	movs	r3, #0
 80211c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80211c6:	7ffb      	ldrb	r3, [r7, #31]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	bf0c      	ite	eq
 80211cc:	2301      	moveq	r3, #1
 80211ce:	2300      	movne	r3, #0
 80211d0:	b2db      	uxtb	r3, r3
 80211d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80211d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80211d8:	b299      	uxth	r1, r3
 80211da:	6a3b      	ldr	r3, [r7, #32]
 80211dc:	68db      	ldr	r3, [r3, #12]
 80211de:	685b      	ldr	r3, [r3, #4]
 80211e0:	8bba      	ldrh	r2, [r7, #28]
 80211e2:	6878      	ldr	r0, [r7, #4]
 80211e4:	f7ff fdfa 	bl	8020ddc <tcp_output_alloc_header>
 80211e8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80211ea:	69bb      	ldr	r3, [r7, #24]
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d102      	bne.n	80211f6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80211f0:	f04f 33ff 	mov.w	r3, #4294967295
 80211f4:	e04c      	b.n	8021290 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80211f6:	69bb      	ldr	r3, [r7, #24]
 80211f8:	685b      	ldr	r3, [r3, #4]
 80211fa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80211fc:	7ffb      	ldrb	r3, [r7, #31]
 80211fe:	2b00      	cmp	r3, #0
 8021200:	d011      	beq.n	8021226 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	899b      	ldrh	r3, [r3, #12]
 8021206:	b29b      	uxth	r3, r3
 8021208:	b21b      	sxth	r3, r3
 802120a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 802120e:	b21c      	sxth	r4, r3
 8021210:	2011      	movs	r0, #17
 8021212:	f7f7 fff5 	bl	8019200 <lwip_htons>
 8021216:	4603      	mov	r3, r0
 8021218:	b21b      	sxth	r3, r3
 802121a:	4323      	orrs	r3, r4
 802121c:	b21b      	sxth	r3, r3
 802121e:	b29a      	uxth	r2, r3
 8021220:	697b      	ldr	r3, [r7, #20]
 8021222:	819a      	strh	r2, [r3, #12]
 8021224:	e010      	b.n	8021248 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8021226:	69bb      	ldr	r3, [r7, #24]
 8021228:	685b      	ldr	r3, [r3, #4]
 802122a:	3314      	adds	r3, #20
 802122c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 802122e:	6a3b      	ldr	r3, [r7, #32]
 8021230:	6858      	ldr	r0, [r3, #4]
 8021232:	6a3b      	ldr	r3, [r7, #32]
 8021234:	685b      	ldr	r3, [r3, #4]
 8021236:	891a      	ldrh	r2, [r3, #8]
 8021238:	6a3b      	ldr	r3, [r7, #32]
 802123a:	891b      	ldrh	r3, [r3, #8]
 802123c:	1ad3      	subs	r3, r2, r3
 802123e:	b29b      	uxth	r3, r3
 8021240:	2201      	movs	r2, #1
 8021242:	6939      	ldr	r1, [r7, #16]
 8021244:	f7f9 fe94 	bl	801af70 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8021248:	6a3b      	ldr	r3, [r7, #32]
 802124a:	68db      	ldr	r3, [r3, #12]
 802124c:	685b      	ldr	r3, [r3, #4]
 802124e:	4618      	mov	r0, r3
 8021250:	f7f7 ffeb 	bl	801922a <lwip_htonl>
 8021254:	4603      	mov	r3, r0
 8021256:	3301      	adds	r3, #1
 8021258:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	1ad3      	subs	r3, r2, r3
 8021262:	2b00      	cmp	r3, #0
 8021264:	da02      	bge.n	802126c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	68fa      	ldr	r2, [r7, #12]
 802126a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802126c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021270:	2200      	movs	r2, #0
 8021272:	69b9      	ldr	r1, [r7, #24]
 8021274:	6878      	ldr	r0, [r7, #4]
 8021276:	f7ff fdef 	bl	8020e58 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802127a:	687a      	ldr	r2, [r7, #4]
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	3304      	adds	r3, #4
 8021280:	69b9      	ldr	r1, [r7, #24]
 8021282:	6878      	ldr	r0, [r7, #4]
 8021284:	f7ff fe26 	bl	8020ed4 <tcp_output_control_segment>
 8021288:	4603      	mov	r3, r0
 802128a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802128c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8021290:	4618      	mov	r0, r3
 8021292:	372c      	adds	r7, #44	@ 0x2c
 8021294:	46bd      	mov	sp, r7
 8021296:	bd90      	pop	{r4, r7, pc}
 8021298:	08027714 	.word	0x08027714
 802129c:	08027f50 	.word	0x08027f50
 80212a0:	080277ac 	.word	0x080277ac

080212a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80212a4:	b580      	push	{r7, lr}
 80212a6:	b082      	sub	sp, #8
 80212a8:	af00      	add	r7, sp, #0
 80212aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80212ac:	f7f9 ffe0 	bl	801b270 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80212b0:	4b0a      	ldr	r3, [pc, #40]	@ (80212dc <tcpip_tcp_timer+0x38>)
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d103      	bne.n	80212c0 <tcpip_tcp_timer+0x1c>
 80212b8:	4b09      	ldr	r3, [pc, #36]	@ (80212e0 <tcpip_tcp_timer+0x3c>)
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d005      	beq.n	80212cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80212c0:	2200      	movs	r2, #0
 80212c2:	4908      	ldr	r1, [pc, #32]	@ (80212e4 <tcpip_tcp_timer+0x40>)
 80212c4:	20fa      	movs	r0, #250	@ 0xfa
 80212c6:	f000 f8f3 	bl	80214b0 <sys_timeout>
 80212ca:	e003      	b.n	80212d4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80212cc:	4b06      	ldr	r3, [pc, #24]	@ (80212e8 <tcpip_tcp_timer+0x44>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	601a      	str	r2, [r3, #0]
  }
}
 80212d2:	bf00      	nop
 80212d4:	bf00      	nop
 80212d6:	3708      	adds	r7, #8
 80212d8:	46bd      	mov	sp, r7
 80212da:	bd80      	pop	{r7, pc}
 80212dc:	20010024 	.word	0x20010024
 80212e0:	20010028 	.word	0x20010028
 80212e4:	080212a5 	.word	0x080212a5
 80212e8:	20010070 	.word	0x20010070

080212ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80212ec:	b580      	push	{r7, lr}
 80212ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80212f0:	4b0a      	ldr	r3, [pc, #40]	@ (802131c <tcp_timer_needed+0x30>)
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d10f      	bne.n	8021318 <tcp_timer_needed+0x2c>
 80212f8:	4b09      	ldr	r3, [pc, #36]	@ (8021320 <tcp_timer_needed+0x34>)
 80212fa:	681b      	ldr	r3, [r3, #0]
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d103      	bne.n	8021308 <tcp_timer_needed+0x1c>
 8021300:	4b08      	ldr	r3, [pc, #32]	@ (8021324 <tcp_timer_needed+0x38>)
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d007      	beq.n	8021318 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8021308:	4b04      	ldr	r3, [pc, #16]	@ (802131c <tcp_timer_needed+0x30>)
 802130a:	2201      	movs	r2, #1
 802130c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802130e:	2200      	movs	r2, #0
 8021310:	4905      	ldr	r1, [pc, #20]	@ (8021328 <tcp_timer_needed+0x3c>)
 8021312:	20fa      	movs	r0, #250	@ 0xfa
 8021314:	f000 f8cc 	bl	80214b0 <sys_timeout>
  }
}
 8021318:	bf00      	nop
 802131a:	bd80      	pop	{r7, pc}
 802131c:	20010070 	.word	0x20010070
 8021320:	20010024 	.word	0x20010024
 8021324:	20010028 	.word	0x20010028
 8021328:	080212a5 	.word	0x080212a5

0802132c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 802132c:	b580      	push	{r7, lr}
 802132e:	b086      	sub	sp, #24
 8021330:	af00      	add	r7, sp, #0
 8021332:	60f8      	str	r0, [r7, #12]
 8021334:	60b9      	str	r1, [r7, #8]
 8021336:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021338:	200b      	movs	r0, #11
 802133a:	f7f8 fca5 	bl	8019c88 <memp_malloc>
 802133e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021340:	693b      	ldr	r3, [r7, #16]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d109      	bne.n	802135a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021346:	693b      	ldr	r3, [r7, #16]
 8021348:	2b00      	cmp	r3, #0
 802134a:	d151      	bne.n	80213f0 <sys_timeout_abs+0xc4>
 802134c:	4b2a      	ldr	r3, [pc, #168]	@ (80213f8 <sys_timeout_abs+0xcc>)
 802134e:	22be      	movs	r2, #190	@ 0xbe
 8021350:	492a      	ldr	r1, [pc, #168]	@ (80213fc <sys_timeout_abs+0xd0>)
 8021352:	482b      	ldr	r0, [pc, #172]	@ (8021400 <sys_timeout_abs+0xd4>)
 8021354:	f001 fae0 	bl	8022918 <iprintf>
    return;
 8021358:	e04a      	b.n	80213f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 802135a:	693b      	ldr	r3, [r7, #16]
 802135c:	2200      	movs	r2, #0
 802135e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021360:	693b      	ldr	r3, [r7, #16]
 8021362:	68ba      	ldr	r2, [r7, #8]
 8021364:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021366:	693b      	ldr	r3, [r7, #16]
 8021368:	687a      	ldr	r2, [r7, #4]
 802136a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 802136c:	693b      	ldr	r3, [r7, #16]
 802136e:	68fa      	ldr	r2, [r7, #12]
 8021370:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8021372:	4b24      	ldr	r3, [pc, #144]	@ (8021404 <sys_timeout_abs+0xd8>)
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	2b00      	cmp	r3, #0
 8021378:	d103      	bne.n	8021382 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 802137a:	4a22      	ldr	r2, [pc, #136]	@ (8021404 <sys_timeout_abs+0xd8>)
 802137c:	693b      	ldr	r3, [r7, #16]
 802137e:	6013      	str	r3, [r2, #0]
    return;
 8021380:	e037      	b.n	80213f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8021382:	693b      	ldr	r3, [r7, #16]
 8021384:	685a      	ldr	r2, [r3, #4]
 8021386:	4b1f      	ldr	r3, [pc, #124]	@ (8021404 <sys_timeout_abs+0xd8>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	685b      	ldr	r3, [r3, #4]
 802138c:	1ad3      	subs	r3, r2, r3
 802138e:	0fdb      	lsrs	r3, r3, #31
 8021390:	f003 0301 	and.w	r3, r3, #1
 8021394:	b2db      	uxtb	r3, r3
 8021396:	2b00      	cmp	r3, #0
 8021398:	d007      	beq.n	80213aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 802139a:	4b1a      	ldr	r3, [pc, #104]	@ (8021404 <sys_timeout_abs+0xd8>)
 802139c:	681a      	ldr	r2, [r3, #0]
 802139e:	693b      	ldr	r3, [r7, #16]
 80213a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80213a2:	4a18      	ldr	r2, [pc, #96]	@ (8021404 <sys_timeout_abs+0xd8>)
 80213a4:	693b      	ldr	r3, [r7, #16]
 80213a6:	6013      	str	r3, [r2, #0]
 80213a8:	e023      	b.n	80213f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80213aa:	4b16      	ldr	r3, [pc, #88]	@ (8021404 <sys_timeout_abs+0xd8>)
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	617b      	str	r3, [r7, #20]
 80213b0:	e01a      	b.n	80213e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80213b2:	697b      	ldr	r3, [r7, #20]
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d00b      	beq.n	80213d2 <sys_timeout_abs+0xa6>
 80213ba:	693b      	ldr	r3, [r7, #16]
 80213bc:	685a      	ldr	r2, [r3, #4]
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	685b      	ldr	r3, [r3, #4]
 80213c4:	1ad3      	subs	r3, r2, r3
 80213c6:	0fdb      	lsrs	r3, r3, #31
 80213c8:	f003 0301 	and.w	r3, r3, #1
 80213cc:	b2db      	uxtb	r3, r3
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d007      	beq.n	80213e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80213d2:	697b      	ldr	r3, [r7, #20]
 80213d4:	681a      	ldr	r2, [r3, #0]
 80213d6:	693b      	ldr	r3, [r7, #16]
 80213d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80213da:	697b      	ldr	r3, [r7, #20]
 80213dc:	693a      	ldr	r2, [r7, #16]
 80213de:	601a      	str	r2, [r3, #0]
        break;
 80213e0:	e007      	b.n	80213f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80213e2:	697b      	ldr	r3, [r7, #20]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	617b      	str	r3, [r7, #20]
 80213e8:	697b      	ldr	r3, [r7, #20]
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d1e1      	bne.n	80213b2 <sys_timeout_abs+0x86>
 80213ee:	e000      	b.n	80213f2 <sys_timeout_abs+0xc6>
    return;
 80213f0:	bf00      	nop
      }
    }
  }
}
 80213f2:	3718      	adds	r7, #24
 80213f4:	46bd      	mov	sp, r7
 80213f6:	bd80      	pop	{r7, pc}
 80213f8:	08027f74 	.word	0x08027f74
 80213fc:	08027fec 	.word	0x08027fec
 8021400:	0802802c 	.word	0x0802802c
 8021404:	20010068 	.word	0x20010068

08021408 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021408:	b580      	push	{r7, lr}
 802140a:	b086      	sub	sp, #24
 802140c:	af00      	add	r7, sp, #0
 802140e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8021414:	697b      	ldr	r3, [r7, #20]
 8021416:	685b      	ldr	r3, [r3, #4]
 8021418:	4798      	blx	r3

  now = sys_now();
 802141a:	f7df ff3f 	bl	800129c <sys_now>
 802141e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021420:	697b      	ldr	r3, [r7, #20]
 8021422:	681a      	ldr	r2, [r3, #0]
 8021424:	4b0f      	ldr	r3, [pc, #60]	@ (8021464 <lwip_cyclic_timer+0x5c>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	4413      	add	r3, r2
 802142a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 802142c:	68fa      	ldr	r2, [r7, #12]
 802142e:	693b      	ldr	r3, [r7, #16]
 8021430:	1ad3      	subs	r3, r2, r3
 8021432:	0fdb      	lsrs	r3, r3, #31
 8021434:	f003 0301 	and.w	r3, r3, #1
 8021438:	b2db      	uxtb	r3, r3
 802143a:	2b00      	cmp	r3, #0
 802143c:	d009      	beq.n	8021452 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 802143e:	697b      	ldr	r3, [r7, #20]
 8021440:	681a      	ldr	r2, [r3, #0]
 8021442:	693b      	ldr	r3, [r7, #16]
 8021444:	4413      	add	r3, r2
 8021446:	687a      	ldr	r2, [r7, #4]
 8021448:	4907      	ldr	r1, [pc, #28]	@ (8021468 <lwip_cyclic_timer+0x60>)
 802144a:	4618      	mov	r0, r3
 802144c:	f7ff ff6e 	bl	802132c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021450:	e004      	b.n	802145c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8021452:	687a      	ldr	r2, [r7, #4]
 8021454:	4904      	ldr	r1, [pc, #16]	@ (8021468 <lwip_cyclic_timer+0x60>)
 8021456:	68f8      	ldr	r0, [r7, #12]
 8021458:	f7ff ff68 	bl	802132c <sys_timeout_abs>
}
 802145c:	bf00      	nop
 802145e:	3718      	adds	r7, #24
 8021460:	46bd      	mov	sp, r7
 8021462:	bd80      	pop	{r7, pc}
 8021464:	2001006c 	.word	0x2001006c
 8021468:	08021409 	.word	0x08021409

0802146c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 802146c:	b580      	push	{r7, lr}
 802146e:	b082      	sub	sp, #8
 8021470:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021472:	2301      	movs	r3, #1
 8021474:	607b      	str	r3, [r7, #4]
 8021476:	e00e      	b.n	8021496 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021478:	4a0b      	ldr	r2, [pc, #44]	@ (80214a8 <sys_timeouts_init+0x3c>)
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	00db      	lsls	r3, r3, #3
 8021484:	4a08      	ldr	r2, [pc, #32]	@ (80214a8 <sys_timeouts_init+0x3c>)
 8021486:	4413      	add	r3, r2
 8021488:	461a      	mov	r2, r3
 802148a:	4908      	ldr	r1, [pc, #32]	@ (80214ac <sys_timeouts_init+0x40>)
 802148c:	f000 f810 	bl	80214b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	3301      	adds	r3, #1
 8021494:	607b      	str	r3, [r7, #4]
 8021496:	687b      	ldr	r3, [r7, #4]
 8021498:	2b05      	cmp	r3, #5
 802149a:	d9ed      	bls.n	8021478 <sys_timeouts_init+0xc>
  }
}
 802149c:	bf00      	nop
 802149e:	bf00      	nop
 80214a0:	3708      	adds	r7, #8
 80214a2:	46bd      	mov	sp, r7
 80214a4:	bd80      	pop	{r7, pc}
 80214a6:	bf00      	nop
 80214a8:	08028cfc 	.word	0x08028cfc
 80214ac:	08021409 	.word	0x08021409

080214b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b086      	sub	sp, #24
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	60f8      	str	r0, [r7, #12]
 80214b8:	60b9      	str	r1, [r7, #8]
 80214ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80214c2:	d306      	bcc.n	80214d2 <sys_timeout+0x22>
 80214c4:	4b0a      	ldr	r3, [pc, #40]	@ (80214f0 <sys_timeout+0x40>)
 80214c6:	f240 1229 	movw	r2, #297	@ 0x129
 80214ca:	490a      	ldr	r1, [pc, #40]	@ (80214f4 <sys_timeout+0x44>)
 80214cc:	480a      	ldr	r0, [pc, #40]	@ (80214f8 <sys_timeout+0x48>)
 80214ce:	f001 fa23 	bl	8022918 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80214d2:	f7df fee3 	bl	800129c <sys_now>
 80214d6:	4602      	mov	r2, r0
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	4413      	add	r3, r2
 80214dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80214de:	687a      	ldr	r2, [r7, #4]
 80214e0:	68b9      	ldr	r1, [r7, #8]
 80214e2:	6978      	ldr	r0, [r7, #20]
 80214e4:	f7ff ff22 	bl	802132c <sys_timeout_abs>
#endif
}
 80214e8:	bf00      	nop
 80214ea:	3718      	adds	r7, #24
 80214ec:	46bd      	mov	sp, r7
 80214ee:	bd80      	pop	{r7, pc}
 80214f0:	08027f74 	.word	0x08027f74
 80214f4:	08028054 	.word	0x08028054
 80214f8:	0802802c 	.word	0x0802802c

080214fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80214fc:	b580      	push	{r7, lr}
 80214fe:	b084      	sub	sp, #16
 8021500:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8021502:	f7df fecb 	bl	800129c <sys_now>
 8021506:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021508:	4b17      	ldr	r3, [pc, #92]	@ (8021568 <sys_check_timeouts+0x6c>)
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 802150e:	68bb      	ldr	r3, [r7, #8]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d022      	beq.n	802155a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8021514:	68bb      	ldr	r3, [r7, #8]
 8021516:	685b      	ldr	r3, [r3, #4]
 8021518:	68fa      	ldr	r2, [r7, #12]
 802151a:	1ad3      	subs	r3, r2, r3
 802151c:	0fdb      	lsrs	r3, r3, #31
 802151e:	f003 0301 	and.w	r3, r3, #1
 8021522:	b2db      	uxtb	r3, r3
 8021524:	2b00      	cmp	r3, #0
 8021526:	d11a      	bne.n	802155e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021528:	68bb      	ldr	r3, [r7, #8]
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	4a0e      	ldr	r2, [pc, #56]	@ (8021568 <sys_check_timeouts+0x6c>)
 802152e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021530:	68bb      	ldr	r3, [r7, #8]
 8021532:	689b      	ldr	r3, [r3, #8]
 8021534:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8021536:	68bb      	ldr	r3, [r7, #8]
 8021538:	68db      	ldr	r3, [r3, #12]
 802153a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 802153c:	68bb      	ldr	r3, [r7, #8]
 802153e:	685b      	ldr	r3, [r3, #4]
 8021540:	4a0a      	ldr	r2, [pc, #40]	@ (802156c <sys_check_timeouts+0x70>)
 8021542:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021544:	68b9      	ldr	r1, [r7, #8]
 8021546:	200b      	movs	r0, #11
 8021548:	f7f8 fc14 	bl	8019d74 <memp_free>
    if (handler != NULL) {
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d0da      	beq.n	8021508 <sys_check_timeouts+0xc>
      handler(arg);
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	6838      	ldr	r0, [r7, #0]
 8021556:	4798      	blx	r3
  do {
 8021558:	e7d6      	b.n	8021508 <sys_check_timeouts+0xc>
      return;
 802155a:	bf00      	nop
 802155c:	e000      	b.n	8021560 <sys_check_timeouts+0x64>
      return;
 802155e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021560:	3710      	adds	r7, #16
 8021562:	46bd      	mov	sp, r7
 8021564:	bd80      	pop	{r7, pc}
 8021566:	bf00      	nop
 8021568:	20010068 	.word	0x20010068
 802156c:	2001006c 	.word	0x2001006c

08021570 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021570:	b580      	push	{r7, lr}
 8021572:	b082      	sub	sp, #8
 8021574:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8021576:	4b16      	ldr	r3, [pc, #88]	@ (80215d0 <sys_timeouts_sleeptime+0x60>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	2b00      	cmp	r3, #0
 802157c:	d102      	bne.n	8021584 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 802157e:	f04f 33ff 	mov.w	r3, #4294967295
 8021582:	e020      	b.n	80215c6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8021584:	f7df fe8a 	bl	800129c <sys_now>
 8021588:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 802158a:	4b11      	ldr	r3, [pc, #68]	@ (80215d0 <sys_timeouts_sleeptime+0x60>)
 802158c:	681b      	ldr	r3, [r3, #0]
 802158e:	685a      	ldr	r2, [r3, #4]
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	1ad3      	subs	r3, r2, r3
 8021594:	0fdb      	lsrs	r3, r3, #31
 8021596:	f003 0301 	and.w	r3, r3, #1
 802159a:	b2db      	uxtb	r3, r3
 802159c:	2b00      	cmp	r3, #0
 802159e:	d001      	beq.n	80215a4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80215a0:	2300      	movs	r3, #0
 80215a2:	e010      	b.n	80215c6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80215a4:	4b0a      	ldr	r3, [pc, #40]	@ (80215d0 <sys_timeouts_sleeptime+0x60>)
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	685a      	ldr	r2, [r3, #4]
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	1ad3      	subs	r3, r2, r3
 80215ae:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80215b0:	683b      	ldr	r3, [r7, #0]
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	da06      	bge.n	80215c4 <sys_timeouts_sleeptime+0x54>
 80215b6:	4b07      	ldr	r3, [pc, #28]	@ (80215d4 <sys_timeouts_sleeptime+0x64>)
 80215b8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80215bc:	4906      	ldr	r1, [pc, #24]	@ (80215d8 <sys_timeouts_sleeptime+0x68>)
 80215be:	4807      	ldr	r0, [pc, #28]	@ (80215dc <sys_timeouts_sleeptime+0x6c>)
 80215c0:	f001 f9aa 	bl	8022918 <iprintf>
    return ret;
 80215c4:	683b      	ldr	r3, [r7, #0]
  }
}
 80215c6:	4618      	mov	r0, r3
 80215c8:	3708      	adds	r7, #8
 80215ca:	46bd      	mov	sp, r7
 80215cc:	bd80      	pop	{r7, pc}
 80215ce:	bf00      	nop
 80215d0:	20010068 	.word	0x20010068
 80215d4:	08027f74 	.word	0x08027f74
 80215d8:	0802808c 	.word	0x0802808c
 80215dc:	0802802c 	.word	0x0802802c

080215e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80215e4:	f001 f898 	bl	8022718 <rand>
 80215e8:	4603      	mov	r3, r0
 80215ea:	b29b      	uxth	r3, r3
 80215ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80215f0:	b29b      	uxth	r3, r3
 80215f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80215f6:	b29a      	uxth	r2, r3
 80215f8:	4b01      	ldr	r3, [pc, #4]	@ (8021600 <udp_init+0x20>)
 80215fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80215fc:	bf00      	nop
 80215fe:	bd80      	pop	{r7, pc}
 8021600:	20000040 	.word	0x20000040

08021604 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8021604:	b480      	push	{r7}
 8021606:	b083      	sub	sp, #12
 8021608:	af00      	add	r7, sp, #0
  u16_t n = 0;
 802160a:	2300      	movs	r3, #0
 802160c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802160e:	4b17      	ldr	r3, [pc, #92]	@ (802166c <udp_new_port+0x68>)
 8021610:	881b      	ldrh	r3, [r3, #0]
 8021612:	1c5a      	adds	r2, r3, #1
 8021614:	b291      	uxth	r1, r2
 8021616:	4a15      	ldr	r2, [pc, #84]	@ (802166c <udp_new_port+0x68>)
 8021618:	8011      	strh	r1, [r2, #0]
 802161a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802161e:	4293      	cmp	r3, r2
 8021620:	d103      	bne.n	802162a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8021622:	4b12      	ldr	r3, [pc, #72]	@ (802166c <udp_new_port+0x68>)
 8021624:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8021628:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802162a:	4b11      	ldr	r3, [pc, #68]	@ (8021670 <udp_new_port+0x6c>)
 802162c:	681b      	ldr	r3, [r3, #0]
 802162e:	603b      	str	r3, [r7, #0]
 8021630:	e011      	b.n	8021656 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8021632:	683b      	ldr	r3, [r7, #0]
 8021634:	8a5a      	ldrh	r2, [r3, #18]
 8021636:	4b0d      	ldr	r3, [pc, #52]	@ (802166c <udp_new_port+0x68>)
 8021638:	881b      	ldrh	r3, [r3, #0]
 802163a:	429a      	cmp	r2, r3
 802163c:	d108      	bne.n	8021650 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802163e:	88fb      	ldrh	r3, [r7, #6]
 8021640:	3301      	adds	r3, #1
 8021642:	80fb      	strh	r3, [r7, #6]
 8021644:	88fb      	ldrh	r3, [r7, #6]
 8021646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802164a:	d3e0      	bcc.n	802160e <udp_new_port+0xa>
        return 0;
 802164c:	2300      	movs	r3, #0
 802164e:	e007      	b.n	8021660 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021650:	683b      	ldr	r3, [r7, #0]
 8021652:	68db      	ldr	r3, [r3, #12]
 8021654:	603b      	str	r3, [r7, #0]
 8021656:	683b      	ldr	r3, [r7, #0]
 8021658:	2b00      	cmp	r3, #0
 802165a:	d1ea      	bne.n	8021632 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 802165c:	4b03      	ldr	r3, [pc, #12]	@ (802166c <udp_new_port+0x68>)
 802165e:	881b      	ldrh	r3, [r3, #0]
}
 8021660:	4618      	mov	r0, r3
 8021662:	370c      	adds	r7, #12
 8021664:	46bd      	mov	sp, r7
 8021666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802166a:	4770      	bx	lr
 802166c:	20000040 	.word	0x20000040
 8021670:	20010074 	.word	0x20010074

08021674 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8021674:	b580      	push	{r7, lr}
 8021676:	b084      	sub	sp, #16
 8021678:	af00      	add	r7, sp, #0
 802167a:	60f8      	str	r0, [r7, #12]
 802167c:	60b9      	str	r1, [r7, #8]
 802167e:	4613      	mov	r3, r2
 8021680:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	2b00      	cmp	r3, #0
 8021686:	d105      	bne.n	8021694 <udp_input_local_match+0x20>
 8021688:	4b27      	ldr	r3, [pc, #156]	@ (8021728 <udp_input_local_match+0xb4>)
 802168a:	2287      	movs	r2, #135	@ 0x87
 802168c:	4927      	ldr	r1, [pc, #156]	@ (802172c <udp_input_local_match+0xb8>)
 802168e:	4828      	ldr	r0, [pc, #160]	@ (8021730 <udp_input_local_match+0xbc>)
 8021690:	f001 f942 	bl	8022918 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021694:	68bb      	ldr	r3, [r7, #8]
 8021696:	2b00      	cmp	r3, #0
 8021698:	d105      	bne.n	80216a6 <udp_input_local_match+0x32>
 802169a:	4b23      	ldr	r3, [pc, #140]	@ (8021728 <udp_input_local_match+0xb4>)
 802169c:	2288      	movs	r2, #136	@ 0x88
 802169e:	4925      	ldr	r1, [pc, #148]	@ (8021734 <udp_input_local_match+0xc0>)
 80216a0:	4823      	ldr	r0, [pc, #140]	@ (8021730 <udp_input_local_match+0xbc>)
 80216a2:	f001 f939 	bl	8022918 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80216a6:	68fb      	ldr	r3, [r7, #12]
 80216a8:	7a1b      	ldrb	r3, [r3, #8]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d00b      	beq.n	80216c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	7a1a      	ldrb	r2, [r3, #8]
 80216b2:	4b21      	ldr	r3, [pc, #132]	@ (8021738 <udp_input_local_match+0xc4>)
 80216b4:	685b      	ldr	r3, [r3, #4]
 80216b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80216ba:	3301      	adds	r3, #1
 80216bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80216be:	429a      	cmp	r2, r3
 80216c0:	d001      	beq.n	80216c6 <udp_input_local_match+0x52>
    return 0;
 80216c2:	2300      	movs	r3, #0
 80216c4:	e02b      	b.n	802171e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80216c6:	79fb      	ldrb	r3, [r7, #7]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d018      	beq.n	80216fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216cc:	68fb      	ldr	r3, [r7, #12]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d013      	beq.n	80216fa <udp_input_local_match+0x86>
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	681b      	ldr	r3, [r3, #0]
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d00f      	beq.n	80216fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80216da:	4b17      	ldr	r3, [pc, #92]	@ (8021738 <udp_input_local_match+0xc4>)
 80216dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80216e2:	d00a      	beq.n	80216fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80216e4:	68fb      	ldr	r3, [r7, #12]
 80216e6:	681a      	ldr	r2, [r3, #0]
 80216e8:	4b13      	ldr	r3, [pc, #76]	@ (8021738 <udp_input_local_match+0xc4>)
 80216ea:	695b      	ldr	r3, [r3, #20]
 80216ec:	405a      	eors	r2, r3
 80216ee:	68bb      	ldr	r3, [r7, #8]
 80216f0:	3308      	adds	r3, #8
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d110      	bne.n	802171c <udp_input_local_match+0xa8>
          return 1;
 80216fa:	2301      	movs	r3, #1
 80216fc:	e00f      	b.n	802171e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80216fe:	68fb      	ldr	r3, [r7, #12]
 8021700:	2b00      	cmp	r3, #0
 8021702:	d009      	beq.n	8021718 <udp_input_local_match+0xa4>
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	681b      	ldr	r3, [r3, #0]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d005      	beq.n	8021718 <udp_input_local_match+0xa4>
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	681a      	ldr	r2, [r3, #0]
 8021710:	4b09      	ldr	r3, [pc, #36]	@ (8021738 <udp_input_local_match+0xc4>)
 8021712:	695b      	ldr	r3, [r3, #20]
 8021714:	429a      	cmp	r2, r3
 8021716:	d101      	bne.n	802171c <udp_input_local_match+0xa8>
        return 1;
 8021718:	2301      	movs	r3, #1
 802171a:	e000      	b.n	802171e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 802171c:	2300      	movs	r3, #0
}
 802171e:	4618      	mov	r0, r3
 8021720:	3710      	adds	r7, #16
 8021722:	46bd      	mov	sp, r7
 8021724:	bd80      	pop	{r7, pc}
 8021726:	bf00      	nop
 8021728:	080280a0 	.word	0x080280a0
 802172c:	08028114 	.word	0x08028114
 8021730:	08028138 	.word	0x08028138
 8021734:	08028160 	.word	0x08028160
 8021738:	20008ebc 	.word	0x20008ebc

0802173c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 802173c:	b590      	push	{r4, r7, lr}
 802173e:	b08d      	sub	sp, #52	@ 0x34
 8021740:	af02      	add	r7, sp, #8
 8021742:	6078      	str	r0, [r7, #4]
 8021744:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8021746:	2300      	movs	r3, #0
 8021748:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d105      	bne.n	802175c <udp_input+0x20>
 8021750:	4b7c      	ldr	r3, [pc, #496]	@ (8021944 <udp_input+0x208>)
 8021752:	22cf      	movs	r2, #207	@ 0xcf
 8021754:	497c      	ldr	r1, [pc, #496]	@ (8021948 <udp_input+0x20c>)
 8021756:	487d      	ldr	r0, [pc, #500]	@ (802194c <udp_input+0x210>)
 8021758:	f001 f8de 	bl	8022918 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802175c:	683b      	ldr	r3, [r7, #0]
 802175e:	2b00      	cmp	r3, #0
 8021760:	d105      	bne.n	802176e <udp_input+0x32>
 8021762:	4b78      	ldr	r3, [pc, #480]	@ (8021944 <udp_input+0x208>)
 8021764:	22d0      	movs	r2, #208	@ 0xd0
 8021766:	497a      	ldr	r1, [pc, #488]	@ (8021950 <udp_input+0x214>)
 8021768:	4878      	ldr	r0, [pc, #480]	@ (802194c <udp_input+0x210>)
 802176a:	f001 f8d5 	bl	8022918 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	895b      	ldrh	r3, [r3, #10]
 8021772:	2b07      	cmp	r3, #7
 8021774:	d803      	bhi.n	802177e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8021776:	6878      	ldr	r0, [r7, #4]
 8021778:	f7f9 f9f4 	bl	801ab64 <pbuf_free>
    goto end;
 802177c:	e0de      	b.n	802193c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	685b      	ldr	r3, [r3, #4]
 8021782:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8021784:	4b73      	ldr	r3, [pc, #460]	@ (8021954 <udp_input+0x218>)
 8021786:	695b      	ldr	r3, [r3, #20]
 8021788:	4a72      	ldr	r2, [pc, #456]	@ (8021954 <udp_input+0x218>)
 802178a:	6812      	ldr	r2, [r2, #0]
 802178c:	4611      	mov	r1, r2
 802178e:	4618      	mov	r0, r3
 8021790:	f7f6 fd8c 	bl	80182ac <ip4_addr_isbroadcast_u32>
 8021794:	4603      	mov	r3, r0
 8021796:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8021798:	697b      	ldr	r3, [r7, #20]
 802179a:	881b      	ldrh	r3, [r3, #0]
 802179c:	b29b      	uxth	r3, r3
 802179e:	4618      	mov	r0, r3
 80217a0:	f7f7 fd2e 	bl	8019200 <lwip_htons>
 80217a4:	4603      	mov	r3, r0
 80217a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80217a8:	697b      	ldr	r3, [r7, #20]
 80217aa:	885b      	ldrh	r3, [r3, #2]
 80217ac:	b29b      	uxth	r3, r3
 80217ae:	4618      	mov	r0, r3
 80217b0:	f7f7 fd26 	bl	8019200 <lwip_htons>
 80217b4:	4603      	mov	r3, r0
 80217b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80217b8:	2300      	movs	r3, #0
 80217ba:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80217bc:	2300      	movs	r3, #0
 80217be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80217c0:	2300      	movs	r3, #0
 80217c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80217c4:	4b64      	ldr	r3, [pc, #400]	@ (8021958 <udp_input+0x21c>)
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80217ca:	e054      	b.n	8021876 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80217cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217ce:	8a5b      	ldrh	r3, [r3, #18]
 80217d0:	89fa      	ldrh	r2, [r7, #14]
 80217d2:	429a      	cmp	r2, r3
 80217d4:	d14a      	bne.n	802186c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80217d6:	7cfb      	ldrb	r3, [r7, #19]
 80217d8:	461a      	mov	r2, r3
 80217da:	6839      	ldr	r1, [r7, #0]
 80217dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80217de:	f7ff ff49 	bl	8021674 <udp_input_local_match>
 80217e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d041      	beq.n	802186c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80217e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217ea:	7c1b      	ldrb	r3, [r3, #16]
 80217ec:	f003 0304 	and.w	r3, r3, #4
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d11d      	bne.n	8021830 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80217f4:	69fb      	ldr	r3, [r7, #28]
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d102      	bne.n	8021800 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80217fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217fc:	61fb      	str	r3, [r7, #28]
 80217fe:	e017      	b.n	8021830 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021800:	7cfb      	ldrb	r3, [r7, #19]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d014      	beq.n	8021830 <udp_input+0xf4>
 8021806:	4b53      	ldr	r3, [pc, #332]	@ (8021954 <udp_input+0x218>)
 8021808:	695b      	ldr	r3, [r3, #20]
 802180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802180e:	d10f      	bne.n	8021830 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021810:	69fb      	ldr	r3, [r7, #28]
 8021812:	681a      	ldr	r2, [r3, #0]
 8021814:	683b      	ldr	r3, [r7, #0]
 8021816:	3304      	adds	r3, #4
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	429a      	cmp	r2, r3
 802181c:	d008      	beq.n	8021830 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 802181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021820:	681a      	ldr	r2, [r3, #0]
 8021822:	683b      	ldr	r3, [r7, #0]
 8021824:	3304      	adds	r3, #4
 8021826:	681b      	ldr	r3, [r3, #0]
 8021828:	429a      	cmp	r2, r3
 802182a:	d101      	bne.n	8021830 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 802182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802182e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8021830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021832:	8a9b      	ldrh	r3, [r3, #20]
 8021834:	8a3a      	ldrh	r2, [r7, #16]
 8021836:	429a      	cmp	r2, r3
 8021838:	d118      	bne.n	802186c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802183c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802183e:	2b00      	cmp	r3, #0
 8021840:	d005      	beq.n	802184e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8021842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021844:	685a      	ldr	r2, [r3, #4]
 8021846:	4b43      	ldr	r3, [pc, #268]	@ (8021954 <udp_input+0x218>)
 8021848:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802184a:	429a      	cmp	r2, r3
 802184c:	d10e      	bne.n	802186c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802184e:	6a3b      	ldr	r3, [r7, #32]
 8021850:	2b00      	cmp	r3, #0
 8021852:	d014      	beq.n	802187e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021856:	68da      	ldr	r2, [r3, #12]
 8021858:	6a3b      	ldr	r3, [r7, #32]
 802185a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802185c:	4b3e      	ldr	r3, [pc, #248]	@ (8021958 <udp_input+0x21c>)
 802185e:	681a      	ldr	r2, [r3, #0]
 8021860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021862:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021864:	4a3c      	ldr	r2, [pc, #240]	@ (8021958 <udp_input+0x21c>)
 8021866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021868:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802186a:	e008      	b.n	802187e <udp_input+0x142>
      }
    }

    prev = pcb;
 802186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802186e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021872:	68db      	ldr	r3, [r3, #12]
 8021874:	627b      	str	r3, [r7, #36]	@ 0x24
 8021876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021878:	2b00      	cmp	r3, #0
 802187a:	d1a7      	bne.n	80217cc <udp_input+0x90>
 802187c:	e000      	b.n	8021880 <udp_input+0x144>
        break;
 802187e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8021880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021882:	2b00      	cmp	r3, #0
 8021884:	d101      	bne.n	802188a <udp_input+0x14e>
    pcb = uncon_pcb;
 8021886:	69fb      	ldr	r3, [r7, #28]
 8021888:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802188c:	2b00      	cmp	r3, #0
 802188e:	d002      	beq.n	8021896 <udp_input+0x15a>
    for_us = 1;
 8021890:	2301      	movs	r3, #1
 8021892:	76fb      	strb	r3, [r7, #27]
 8021894:	e00a      	b.n	80218ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8021896:	683b      	ldr	r3, [r7, #0]
 8021898:	3304      	adds	r3, #4
 802189a:	681a      	ldr	r2, [r3, #0]
 802189c:	4b2d      	ldr	r3, [pc, #180]	@ (8021954 <udp_input+0x218>)
 802189e:	695b      	ldr	r3, [r3, #20]
 80218a0:	429a      	cmp	r2, r3
 80218a2:	bf0c      	ite	eq
 80218a4:	2301      	moveq	r3, #1
 80218a6:	2300      	movne	r3, #0
 80218a8:	b2db      	uxtb	r3, r3
 80218aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80218ac:	7efb      	ldrb	r3, [r7, #27]
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	d041      	beq.n	8021936 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80218b2:	2108      	movs	r1, #8
 80218b4:	6878      	ldr	r0, [r7, #4]
 80218b6:	f7f9 f89d 	bl	801a9f4 <pbuf_remove_header>
 80218ba:	4603      	mov	r3, r0
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d00a      	beq.n	80218d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80218c0:	4b20      	ldr	r3, [pc, #128]	@ (8021944 <udp_input+0x208>)
 80218c2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80218c6:	4925      	ldr	r1, [pc, #148]	@ (802195c <udp_input+0x220>)
 80218c8:	4820      	ldr	r0, [pc, #128]	@ (802194c <udp_input+0x210>)
 80218ca:	f001 f825 	bl	8022918 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80218ce:	6878      	ldr	r0, [r7, #4]
 80218d0:	f7f9 f948 	bl	801ab64 <pbuf_free>
      goto end;
 80218d4:	e032      	b.n	802193c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80218d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d012      	beq.n	8021902 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80218dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218de:	6a1b      	ldr	r3, [r3, #32]
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	d00a      	beq.n	80218fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80218e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218e6:	6a1c      	ldr	r4, [r3, #32]
 80218e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80218ec:	8a3b      	ldrh	r3, [r7, #16]
 80218ee:	9300      	str	r3, [sp, #0]
 80218f0:	4b1b      	ldr	r3, [pc, #108]	@ (8021960 <udp_input+0x224>)
 80218f2:	687a      	ldr	r2, [r7, #4]
 80218f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80218f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80218f8:	e021      	b.n	802193e <udp_input+0x202>
        pbuf_free(p);
 80218fa:	6878      	ldr	r0, [r7, #4]
 80218fc:	f7f9 f932 	bl	801ab64 <pbuf_free>
        goto end;
 8021900:	e01c      	b.n	802193c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021902:	7cfb      	ldrb	r3, [r7, #19]
 8021904:	2b00      	cmp	r3, #0
 8021906:	d112      	bne.n	802192e <udp_input+0x1f2>
 8021908:	4b12      	ldr	r3, [pc, #72]	@ (8021954 <udp_input+0x218>)
 802190a:	695b      	ldr	r3, [r3, #20]
 802190c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021910:	2be0      	cmp	r3, #224	@ 0xe0
 8021912:	d00c      	beq.n	802192e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8021914:	4b0f      	ldr	r3, [pc, #60]	@ (8021954 <udp_input+0x218>)
 8021916:	899b      	ldrh	r3, [r3, #12]
 8021918:	3308      	adds	r3, #8
 802191a:	b29b      	uxth	r3, r3
 802191c:	b21b      	sxth	r3, r3
 802191e:	4619      	mov	r1, r3
 8021920:	6878      	ldr	r0, [r7, #4]
 8021922:	f7f9 f8da 	bl	801aada <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8021926:	2103      	movs	r1, #3
 8021928:	6878      	ldr	r0, [r7, #4]
 802192a:	f7f5 fc31 	bl	8017190 <icmp_dest_unreach>
      pbuf_free(p);
 802192e:	6878      	ldr	r0, [r7, #4]
 8021930:	f7f9 f918 	bl	801ab64 <pbuf_free>
  return;
 8021934:	e003      	b.n	802193e <udp_input+0x202>
    pbuf_free(p);
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	f7f9 f914 	bl	801ab64 <pbuf_free>
  return;
 802193c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802193e:	372c      	adds	r7, #44	@ 0x2c
 8021940:	46bd      	mov	sp, r7
 8021942:	bd90      	pop	{r4, r7, pc}
 8021944:	080280a0 	.word	0x080280a0
 8021948:	08028188 	.word	0x08028188
 802194c:	08028138 	.word	0x08028138
 8021950:	080281a0 	.word	0x080281a0
 8021954:	20008ebc 	.word	0x20008ebc
 8021958:	20010074 	.word	0x20010074
 802195c:	080281bc 	.word	0x080281bc
 8021960:	20008ecc 	.word	0x20008ecc

08021964 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8021964:	b580      	push	{r7, lr}
 8021966:	b082      	sub	sp, #8
 8021968:	af00      	add	r7, sp, #0
 802196a:	6078      	str	r0, [r7, #4]
 802196c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	2b00      	cmp	r3, #0
 8021972:	d109      	bne.n	8021988 <udp_send+0x24>
 8021974:	4b11      	ldr	r3, [pc, #68]	@ (80219bc <udp_send+0x58>)
 8021976:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802197a:	4911      	ldr	r1, [pc, #68]	@ (80219c0 <udp_send+0x5c>)
 802197c:	4811      	ldr	r0, [pc, #68]	@ (80219c4 <udp_send+0x60>)
 802197e:	f000 ffcb 	bl	8022918 <iprintf>
 8021982:	f06f 030f 	mvn.w	r3, #15
 8021986:	e015      	b.n	80219b4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8021988:	683b      	ldr	r3, [r7, #0]
 802198a:	2b00      	cmp	r3, #0
 802198c:	d109      	bne.n	80219a2 <udp_send+0x3e>
 802198e:	4b0b      	ldr	r3, [pc, #44]	@ (80219bc <udp_send+0x58>)
 8021990:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8021994:	490c      	ldr	r1, [pc, #48]	@ (80219c8 <udp_send+0x64>)
 8021996:	480b      	ldr	r0, [pc, #44]	@ (80219c4 <udp_send+0x60>)
 8021998:	f000 ffbe 	bl	8022918 <iprintf>
 802199c:	f06f 030f 	mvn.w	r3, #15
 80219a0:	e008      	b.n	80219b4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	1d1a      	adds	r2, r3, #4
 80219a6:	687b      	ldr	r3, [r7, #4]
 80219a8:	8a9b      	ldrh	r3, [r3, #20]
 80219aa:	6839      	ldr	r1, [r7, #0]
 80219ac:	6878      	ldr	r0, [r7, #4]
 80219ae:	f000 f80d 	bl	80219cc <udp_sendto>
 80219b2:	4603      	mov	r3, r0
}
 80219b4:	4618      	mov	r0, r3
 80219b6:	3708      	adds	r7, #8
 80219b8:	46bd      	mov	sp, r7
 80219ba:	bd80      	pop	{r7, pc}
 80219bc:	080280a0 	.word	0x080280a0
 80219c0:	080281d8 	.word	0x080281d8
 80219c4:	08028138 	.word	0x08028138
 80219c8:	080281f0 	.word	0x080281f0

080219cc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80219cc:	b580      	push	{r7, lr}
 80219ce:	b088      	sub	sp, #32
 80219d0:	af02      	add	r7, sp, #8
 80219d2:	60f8      	str	r0, [r7, #12]
 80219d4:	60b9      	str	r1, [r7, #8]
 80219d6:	607a      	str	r2, [r7, #4]
 80219d8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80219da:	68fb      	ldr	r3, [r7, #12]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d109      	bne.n	80219f4 <udp_sendto+0x28>
 80219e0:	4b36      	ldr	r3, [pc, #216]	@ (8021abc <udp_sendto+0xf0>)
 80219e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80219e6:	4936      	ldr	r1, [pc, #216]	@ (8021ac0 <udp_sendto+0xf4>)
 80219e8:	4836      	ldr	r0, [pc, #216]	@ (8021ac4 <udp_sendto+0xf8>)
 80219ea:	f000 ff95 	bl	8022918 <iprintf>
 80219ee:	f06f 030f 	mvn.w	r3, #15
 80219f2:	e05e      	b.n	8021ab2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80219f4:	68bb      	ldr	r3, [r7, #8]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d109      	bne.n	8021a0e <udp_sendto+0x42>
 80219fa:	4b30      	ldr	r3, [pc, #192]	@ (8021abc <udp_sendto+0xf0>)
 80219fc:	f240 2219 	movw	r2, #537	@ 0x219
 8021a00:	4931      	ldr	r1, [pc, #196]	@ (8021ac8 <udp_sendto+0xfc>)
 8021a02:	4830      	ldr	r0, [pc, #192]	@ (8021ac4 <udp_sendto+0xf8>)
 8021a04:	f000 ff88 	bl	8022918 <iprintf>
 8021a08:	f06f 030f 	mvn.w	r3, #15
 8021a0c:	e051      	b.n	8021ab2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d109      	bne.n	8021a28 <udp_sendto+0x5c>
 8021a14:	4b29      	ldr	r3, [pc, #164]	@ (8021abc <udp_sendto+0xf0>)
 8021a16:	f240 221a 	movw	r2, #538	@ 0x21a
 8021a1a:	492c      	ldr	r1, [pc, #176]	@ (8021acc <udp_sendto+0x100>)
 8021a1c:	4829      	ldr	r0, [pc, #164]	@ (8021ac4 <udp_sendto+0xf8>)
 8021a1e:	f000 ff7b 	bl	8022918 <iprintf>
 8021a22:	f06f 030f 	mvn.w	r3, #15
 8021a26:	e044      	b.n	8021ab2 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021a28:	68fb      	ldr	r3, [r7, #12]
 8021a2a:	7a1b      	ldrb	r3, [r3, #8]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d006      	beq.n	8021a3e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8021a30:	68fb      	ldr	r3, [r7, #12]
 8021a32:	7a1b      	ldrb	r3, [r3, #8]
 8021a34:	4618      	mov	r0, r3
 8021a36:	f7f8 fcd5 	bl	801a3e4 <netif_get_by_index>
 8021a3a:	6178      	str	r0, [r7, #20]
 8021a3c:	e029      	b.n	8021a92 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 8021a3e:	2300      	movs	r3, #0
 8021a40:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	681b      	ldr	r3, [r3, #0]
 8021a46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021a4a:	2be0      	cmp	r3, #224	@ 0xe0
 8021a4c:	d11a      	bne.n	8021a84 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 8021a4e:	68fb      	ldr	r3, [r7, #12]
 8021a50:	7f1b      	ldrb	r3, [r3, #28]
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d006      	beq.n	8021a64 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8021a56:	68fb      	ldr	r3, [r7, #12]
 8021a58:	7f1b      	ldrb	r3, [r3, #28]
 8021a5a:	4618      	mov	r0, r3
 8021a5c:	f7f8 fcc2 	bl	801a3e4 <netif_get_by_index>
 8021a60:	6178      	str	r0, [r7, #20]
 8021a62:	e00f      	b.n	8021a84 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8021a64:	68fb      	ldr	r3, [r7, #12]
 8021a66:	699b      	ldr	r3, [r3, #24]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d00b      	beq.n	8021a84 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8021a6c:	68fb      	ldr	r3, [r7, #12]
 8021a6e:	699a      	ldr	r2, [r3, #24]
 8021a70:	4b17      	ldr	r3, [pc, #92]	@ (8021ad0 <udp_sendto+0x104>)
 8021a72:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8021a74:	429a      	cmp	r2, r3
 8021a76:	d005      	beq.n	8021a84 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8021a78:	68fb      	ldr	r3, [r7, #12]
 8021a7a:	3318      	adds	r3, #24
 8021a7c:	4618      	mov	r0, r3
 8021a7e:	f7f6 f8a5 	bl	8017bcc <ip4_route>
 8021a82:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8021a84:	697b      	ldr	r3, [r7, #20]
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d103      	bne.n	8021a92 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8021a8a:	6878      	ldr	r0, [r7, #4]
 8021a8c:	f7f6 f89e 	bl	8017bcc <ip4_route>
 8021a90:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8021a92:	697b      	ldr	r3, [r7, #20]
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d102      	bne.n	8021a9e <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8021a98:	f06f 0303 	mvn.w	r3, #3
 8021a9c:	e009      	b.n	8021ab2 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021a9e:	887a      	ldrh	r2, [r7, #2]
 8021aa0:	697b      	ldr	r3, [r7, #20]
 8021aa2:	9300      	str	r3, [sp, #0]
 8021aa4:	4613      	mov	r3, r2
 8021aa6:	687a      	ldr	r2, [r7, #4]
 8021aa8:	68b9      	ldr	r1, [r7, #8]
 8021aaa:	68f8      	ldr	r0, [r7, #12]
 8021aac:	f000 f812 	bl	8021ad4 <udp_sendto_if>
 8021ab0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021ab2:	4618      	mov	r0, r3
 8021ab4:	3718      	adds	r7, #24
 8021ab6:	46bd      	mov	sp, r7
 8021ab8:	bd80      	pop	{r7, pc}
 8021aba:	bf00      	nop
 8021abc:	080280a0 	.word	0x080280a0
 8021ac0:	08028208 	.word	0x08028208
 8021ac4:	08028138 	.word	0x08028138
 8021ac8:	08028220 	.word	0x08028220
 8021acc:	0802823c 	.word	0x0802823c
 8021ad0:	08028bf0 	.word	0x08028bf0

08021ad4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b088      	sub	sp, #32
 8021ad8:	af02      	add	r7, sp, #8
 8021ada:	60f8      	str	r0, [r7, #12]
 8021adc:	60b9      	str	r1, [r7, #8]
 8021ade:	607a      	str	r2, [r7, #4]
 8021ae0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021ae2:	68fb      	ldr	r3, [r7, #12]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d109      	bne.n	8021afc <udp_sendto_if+0x28>
 8021ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8021ba4 <udp_sendto_if+0xd0>)
 8021aea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021aee:	492e      	ldr	r1, [pc, #184]	@ (8021ba8 <udp_sendto_if+0xd4>)
 8021af0:	482e      	ldr	r0, [pc, #184]	@ (8021bac <udp_sendto_if+0xd8>)
 8021af2:	f000 ff11 	bl	8022918 <iprintf>
 8021af6:	f06f 030f 	mvn.w	r3, #15
 8021afa:	e04f      	b.n	8021b9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8021afc:	68bb      	ldr	r3, [r7, #8]
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d109      	bne.n	8021b16 <udp_sendto_if+0x42>
 8021b02:	4b28      	ldr	r3, [pc, #160]	@ (8021ba4 <udp_sendto_if+0xd0>)
 8021b04:	f240 2281 	movw	r2, #641	@ 0x281
 8021b08:	4929      	ldr	r1, [pc, #164]	@ (8021bb0 <udp_sendto_if+0xdc>)
 8021b0a:	4828      	ldr	r0, [pc, #160]	@ (8021bac <udp_sendto_if+0xd8>)
 8021b0c:	f000 ff04 	bl	8022918 <iprintf>
 8021b10:	f06f 030f 	mvn.w	r3, #15
 8021b14:	e042      	b.n	8021b9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021b16:	687b      	ldr	r3, [r7, #4]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	d109      	bne.n	8021b30 <udp_sendto_if+0x5c>
 8021b1c:	4b21      	ldr	r3, [pc, #132]	@ (8021ba4 <udp_sendto_if+0xd0>)
 8021b1e:	f240 2282 	movw	r2, #642	@ 0x282
 8021b22:	4924      	ldr	r1, [pc, #144]	@ (8021bb4 <udp_sendto_if+0xe0>)
 8021b24:	4821      	ldr	r0, [pc, #132]	@ (8021bac <udp_sendto_if+0xd8>)
 8021b26:	f000 fef7 	bl	8022918 <iprintf>
 8021b2a:	f06f 030f 	mvn.w	r3, #15
 8021b2e:	e035      	b.n	8021b9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021b30:	6a3b      	ldr	r3, [r7, #32]
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d109      	bne.n	8021b4a <udp_sendto_if+0x76>
 8021b36:	4b1b      	ldr	r3, [pc, #108]	@ (8021ba4 <udp_sendto_if+0xd0>)
 8021b38:	f240 2283 	movw	r2, #643	@ 0x283
 8021b3c:	491e      	ldr	r1, [pc, #120]	@ (8021bb8 <udp_sendto_if+0xe4>)
 8021b3e:	481b      	ldr	r0, [pc, #108]	@ (8021bac <udp_sendto_if+0xd8>)
 8021b40:	f000 feea 	bl	8022918 <iprintf>
 8021b44:	f06f 030f 	mvn.w	r3, #15
 8021b48:	e028      	b.n	8021b9c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b4a:	68fb      	ldr	r3, [r7, #12]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d009      	beq.n	8021b64 <udp_sendto_if+0x90>
 8021b50:	68fb      	ldr	r3, [r7, #12]
 8021b52:	681b      	ldr	r3, [r3, #0]
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	d005      	beq.n	8021b64 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021b58:	68fb      	ldr	r3, [r7, #12]
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b60:	2be0      	cmp	r3, #224	@ 0xe0
 8021b62:	d103      	bne.n	8021b6c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8021b64:	6a3b      	ldr	r3, [r7, #32]
 8021b66:	3304      	adds	r3, #4
 8021b68:	617b      	str	r3, [r7, #20]
 8021b6a:	e00b      	b.n	8021b84 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8021b6c:	68fb      	ldr	r3, [r7, #12]
 8021b6e:	681a      	ldr	r2, [r3, #0]
 8021b70:	6a3b      	ldr	r3, [r7, #32]
 8021b72:	3304      	adds	r3, #4
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	429a      	cmp	r2, r3
 8021b78:	d002      	beq.n	8021b80 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8021b7a:	f06f 0303 	mvn.w	r3, #3
 8021b7e:	e00d      	b.n	8021b9c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8021b84:	887a      	ldrh	r2, [r7, #2]
 8021b86:	697b      	ldr	r3, [r7, #20]
 8021b88:	9301      	str	r3, [sp, #4]
 8021b8a:	6a3b      	ldr	r3, [r7, #32]
 8021b8c:	9300      	str	r3, [sp, #0]
 8021b8e:	4613      	mov	r3, r2
 8021b90:	687a      	ldr	r2, [r7, #4]
 8021b92:	68b9      	ldr	r1, [r7, #8]
 8021b94:	68f8      	ldr	r0, [r7, #12]
 8021b96:	f000 f811 	bl	8021bbc <udp_sendto_if_src>
 8021b9a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021b9c:	4618      	mov	r0, r3
 8021b9e:	3718      	adds	r7, #24
 8021ba0:	46bd      	mov	sp, r7
 8021ba2:	bd80      	pop	{r7, pc}
 8021ba4:	080280a0 	.word	0x080280a0
 8021ba8:	08028258 	.word	0x08028258
 8021bac:	08028138 	.word	0x08028138
 8021bb0:	08028274 	.word	0x08028274
 8021bb4:	08028290 	.word	0x08028290
 8021bb8:	080282b0 	.word	0x080282b0

08021bbc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b08c      	sub	sp, #48	@ 0x30
 8021bc0:	af04      	add	r7, sp, #16
 8021bc2:	60f8      	str	r0, [r7, #12]
 8021bc4:	60b9      	str	r1, [r7, #8]
 8021bc6:	607a      	str	r2, [r7, #4]
 8021bc8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d109      	bne.n	8021be4 <udp_sendto_if_src+0x28>
 8021bd0:	4b73      	ldr	r3, [pc, #460]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021bd2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8021bd6:	4973      	ldr	r1, [pc, #460]	@ (8021da4 <udp_sendto_if_src+0x1e8>)
 8021bd8:	4873      	ldr	r0, [pc, #460]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021bda:	f000 fe9d 	bl	8022918 <iprintf>
 8021bde:	f06f 030f 	mvn.w	r3, #15
 8021be2:	e0d8      	b.n	8021d96 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d109      	bne.n	8021bfe <udp_sendto_if_src+0x42>
 8021bea:	4b6d      	ldr	r3, [pc, #436]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021bec:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8021bf0:	496e      	ldr	r1, [pc, #440]	@ (8021dac <udp_sendto_if_src+0x1f0>)
 8021bf2:	486d      	ldr	r0, [pc, #436]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021bf4:	f000 fe90 	bl	8022918 <iprintf>
 8021bf8:	f06f 030f 	mvn.w	r3, #15
 8021bfc:	e0cb      	b.n	8021d96 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d109      	bne.n	8021c18 <udp_sendto_if_src+0x5c>
 8021c04:	4b66      	ldr	r3, [pc, #408]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021c06:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8021c0a:	4969      	ldr	r1, [pc, #420]	@ (8021db0 <udp_sendto_if_src+0x1f4>)
 8021c0c:	4866      	ldr	r0, [pc, #408]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021c0e:	f000 fe83 	bl	8022918 <iprintf>
 8021c12:	f06f 030f 	mvn.w	r3, #15
 8021c16:	e0be      	b.n	8021d96 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d109      	bne.n	8021c32 <udp_sendto_if_src+0x76>
 8021c1e:	4b60      	ldr	r3, [pc, #384]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021c20:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8021c24:	4963      	ldr	r1, [pc, #396]	@ (8021db4 <udp_sendto_if_src+0x1f8>)
 8021c26:	4860      	ldr	r0, [pc, #384]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021c28:	f000 fe76 	bl	8022918 <iprintf>
 8021c2c:	f06f 030f 	mvn.w	r3, #15
 8021c30:	e0b1      	b.n	8021d96 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d109      	bne.n	8021c4c <udp_sendto_if_src+0x90>
 8021c38:	4b59      	ldr	r3, [pc, #356]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021c3a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8021c3e:	495e      	ldr	r1, [pc, #376]	@ (8021db8 <udp_sendto_if_src+0x1fc>)
 8021c40:	4859      	ldr	r0, [pc, #356]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021c42:	f000 fe69 	bl	8022918 <iprintf>
 8021c46:	f06f 030f 	mvn.w	r3, #15
 8021c4a:	e0a4      	b.n	8021d96 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8021c4c:	68fb      	ldr	r3, [r7, #12]
 8021c4e:	8a5b      	ldrh	r3, [r3, #18]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d10f      	bne.n	8021c74 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021c54:	68f9      	ldr	r1, [r7, #12]
 8021c56:	68fb      	ldr	r3, [r7, #12]
 8021c58:	8a5b      	ldrh	r3, [r3, #18]
 8021c5a:	461a      	mov	r2, r3
 8021c5c:	68f8      	ldr	r0, [r7, #12]
 8021c5e:	f000 f8af 	bl	8021dc0 <udp_bind>
 8021c62:	4603      	mov	r3, r0
 8021c64:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021c66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d002      	beq.n	8021c74 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8021c6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c72:	e090      	b.n	8021d96 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021c74:	68bb      	ldr	r3, [r7, #8]
 8021c76:	891b      	ldrh	r3, [r3, #8]
 8021c78:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8021c7c:	4293      	cmp	r3, r2
 8021c7e:	d902      	bls.n	8021c86 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021c80:	f04f 33ff 	mov.w	r3, #4294967295
 8021c84:	e087      	b.n	8021d96 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021c86:	2108      	movs	r1, #8
 8021c88:	68b8      	ldr	r0, [r7, #8]
 8021c8a:	f7f8 fea3 	bl	801a9d4 <pbuf_add_header>
 8021c8e:	4603      	mov	r3, r0
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d015      	beq.n	8021cc0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021c94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021c98:	2108      	movs	r1, #8
 8021c9a:	2022      	movs	r0, #34	@ 0x22
 8021c9c:	f7f8 fc4c 	bl	801a538 <pbuf_alloc>
 8021ca0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021ca2:	69fb      	ldr	r3, [r7, #28]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d102      	bne.n	8021cae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8021cac:	e073      	b.n	8021d96 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8021cae:	68bb      	ldr	r3, [r7, #8]
 8021cb0:	891b      	ldrh	r3, [r3, #8]
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d006      	beq.n	8021cc4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021cb6:	68b9      	ldr	r1, [r7, #8]
 8021cb8:	69f8      	ldr	r0, [r7, #28]
 8021cba:	f7f9 f877 	bl	801adac <pbuf_chain>
 8021cbe:	e001      	b.n	8021cc4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021cc4:	69fb      	ldr	r3, [r7, #28]
 8021cc6:	895b      	ldrh	r3, [r3, #10]
 8021cc8:	2b07      	cmp	r3, #7
 8021cca:	d806      	bhi.n	8021cda <udp_sendto_if_src+0x11e>
 8021ccc:	4b34      	ldr	r3, [pc, #208]	@ (8021da0 <udp_sendto_if_src+0x1e4>)
 8021cce:	f240 320d 	movw	r2, #781	@ 0x30d
 8021cd2:	493a      	ldr	r1, [pc, #232]	@ (8021dbc <udp_sendto_if_src+0x200>)
 8021cd4:	4834      	ldr	r0, [pc, #208]	@ (8021da8 <udp_sendto_if_src+0x1ec>)
 8021cd6:	f000 fe1f 	bl	8022918 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8021cda:	69fb      	ldr	r3, [r7, #28]
 8021cdc:	685b      	ldr	r3, [r3, #4]
 8021cde:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021ce0:	68fb      	ldr	r3, [r7, #12]
 8021ce2:	8a5b      	ldrh	r3, [r3, #18]
 8021ce4:	4618      	mov	r0, r3
 8021ce6:	f7f7 fa8b 	bl	8019200 <lwip_htons>
 8021cea:	4603      	mov	r3, r0
 8021cec:	461a      	mov	r2, r3
 8021cee:	697b      	ldr	r3, [r7, #20]
 8021cf0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021cf2:	887b      	ldrh	r3, [r7, #2]
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	f7f7 fa83 	bl	8019200 <lwip_htons>
 8021cfa:	4603      	mov	r3, r0
 8021cfc:	461a      	mov	r2, r3
 8021cfe:	697b      	ldr	r3, [r7, #20]
 8021d00:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021d02:	697b      	ldr	r3, [r7, #20]
 8021d04:	2200      	movs	r2, #0
 8021d06:	719a      	strb	r2, [r3, #6]
 8021d08:	2200      	movs	r2, #0
 8021d0a:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8021d0c:	68fb      	ldr	r3, [r7, #12]
 8021d0e:	7c1b      	ldrb	r3, [r3, #16]
 8021d10:	f003 0308 	and.w	r3, r3, #8
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d00c      	beq.n	8021d32 <udp_sendto_if_src+0x176>
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021d20:	2be0      	cmp	r3, #224	@ 0xe0
 8021d22:	d106      	bne.n	8021d32 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8021d24:	69fb      	ldr	r3, [r7, #28]
 8021d26:	7b5b      	ldrb	r3, [r3, #13]
 8021d28:	f043 0304 	orr.w	r3, r3, #4
 8021d2c:	b2da      	uxtb	r2, r3
 8021d2e:	69fb      	ldr	r3, [r7, #28]
 8021d30:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8021d32:	69fb      	ldr	r3, [r7, #28]
 8021d34:	891b      	ldrh	r3, [r3, #8]
 8021d36:	4618      	mov	r0, r3
 8021d38:	f7f7 fa62 	bl	8019200 <lwip_htons>
 8021d3c:	4603      	mov	r3, r0
 8021d3e:	461a      	mov	r2, r3
 8021d40:	697b      	ldr	r3, [r7, #20]
 8021d42:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8021d44:	2311      	movs	r3, #17
 8021d46:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	681b      	ldr	r3, [r3, #0]
 8021d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021d50:	2be0      	cmp	r3, #224	@ 0xe0
 8021d52:	d102      	bne.n	8021d5a <udp_sendto_if_src+0x19e>
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	7f5b      	ldrb	r3, [r3, #29]
 8021d58:	e001      	b.n	8021d5e <udp_sendto_if_src+0x1a2>
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	7adb      	ldrb	r3, [r3, #11]
 8021d5e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021d60:	68fb      	ldr	r3, [r7, #12]
 8021d62:	7a9b      	ldrb	r3, [r3, #10]
 8021d64:	7cb9      	ldrb	r1, [r7, #18]
 8021d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021d68:	9202      	str	r2, [sp, #8]
 8021d6a:	7cfa      	ldrb	r2, [r7, #19]
 8021d6c:	9201      	str	r2, [sp, #4]
 8021d6e:	9300      	str	r3, [sp, #0]
 8021d70:	460b      	mov	r3, r1
 8021d72:	687a      	ldr	r2, [r7, #4]
 8021d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021d76:	69f8      	ldr	r0, [r7, #28]
 8021d78:	f7f6 f995 	bl	80180a6 <ip4_output_if_src>
 8021d7c:	4603      	mov	r3, r0
 8021d7e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021d80:	69fa      	ldr	r2, [r7, #28]
 8021d82:	68bb      	ldr	r3, [r7, #8]
 8021d84:	429a      	cmp	r2, r3
 8021d86:	d004      	beq.n	8021d92 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8021d88:	69f8      	ldr	r0, [r7, #28]
 8021d8a:	f7f8 feeb 	bl	801ab64 <pbuf_free>
    q = NULL;
 8021d8e:	2300      	movs	r3, #0
 8021d90:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8021d92:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8021d96:	4618      	mov	r0, r3
 8021d98:	3720      	adds	r7, #32
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	bd80      	pop	{r7, pc}
 8021d9e:	bf00      	nop
 8021da0:	080280a0 	.word	0x080280a0
 8021da4:	080282d0 	.word	0x080282d0
 8021da8:	08028138 	.word	0x08028138
 8021dac:	080282f0 	.word	0x080282f0
 8021db0:	08028310 	.word	0x08028310
 8021db4:	08028334 	.word	0x08028334
 8021db8:	08028358 	.word	0x08028358
 8021dbc:	0802837c 	.word	0x0802837c

08021dc0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021dc0:	b580      	push	{r7, lr}
 8021dc2:	b086      	sub	sp, #24
 8021dc4:	af00      	add	r7, sp, #0
 8021dc6:	60f8      	str	r0, [r7, #12]
 8021dc8:	60b9      	str	r1, [r7, #8]
 8021dca:	4613      	mov	r3, r2
 8021dcc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021dce:	68bb      	ldr	r3, [r7, #8]
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d101      	bne.n	8021dd8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8021dd4:	4b39      	ldr	r3, [pc, #228]	@ (8021ebc <udp_bind+0xfc>)
 8021dd6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021dd8:	68fb      	ldr	r3, [r7, #12]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d109      	bne.n	8021df2 <udp_bind+0x32>
 8021dde:	4b38      	ldr	r3, [pc, #224]	@ (8021ec0 <udp_bind+0x100>)
 8021de0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8021de4:	4937      	ldr	r1, [pc, #220]	@ (8021ec4 <udp_bind+0x104>)
 8021de6:	4838      	ldr	r0, [pc, #224]	@ (8021ec8 <udp_bind+0x108>)
 8021de8:	f000 fd96 	bl	8022918 <iprintf>
 8021dec:	f06f 030f 	mvn.w	r3, #15
 8021df0:	e060      	b.n	8021eb4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8021df2:	2300      	movs	r3, #0
 8021df4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021df6:	4b35      	ldr	r3, [pc, #212]	@ (8021ecc <udp_bind+0x10c>)
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	617b      	str	r3, [r7, #20]
 8021dfc:	e009      	b.n	8021e12 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021dfe:	68fa      	ldr	r2, [r7, #12]
 8021e00:	697b      	ldr	r3, [r7, #20]
 8021e02:	429a      	cmp	r2, r3
 8021e04:	d102      	bne.n	8021e0c <udp_bind+0x4c>
      rebind = 1;
 8021e06:	2301      	movs	r3, #1
 8021e08:	74fb      	strb	r3, [r7, #19]
      break;
 8021e0a:	e005      	b.n	8021e18 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e0c:	697b      	ldr	r3, [r7, #20]
 8021e0e:	68db      	ldr	r3, [r3, #12]
 8021e10:	617b      	str	r3, [r7, #20]
 8021e12:	697b      	ldr	r3, [r7, #20]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d1f2      	bne.n	8021dfe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021e18:	88fb      	ldrh	r3, [r7, #6]
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d109      	bne.n	8021e32 <udp_bind+0x72>
    port = udp_new_port();
 8021e1e:	f7ff fbf1 	bl	8021604 <udp_new_port>
 8021e22:	4603      	mov	r3, r0
 8021e24:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8021e26:	88fb      	ldrh	r3, [r7, #6]
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d12c      	bne.n	8021e86 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021e2c:	f06f 0307 	mvn.w	r3, #7
 8021e30:	e040      	b.n	8021eb4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e32:	4b26      	ldr	r3, [pc, #152]	@ (8021ecc <udp_bind+0x10c>)
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	617b      	str	r3, [r7, #20]
 8021e38:	e022      	b.n	8021e80 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021e3a:	68fa      	ldr	r2, [r7, #12]
 8021e3c:	697b      	ldr	r3, [r7, #20]
 8021e3e:	429a      	cmp	r2, r3
 8021e40:	d01b      	beq.n	8021e7a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8021e42:	697b      	ldr	r3, [r7, #20]
 8021e44:	8a5b      	ldrh	r3, [r3, #18]
 8021e46:	88fa      	ldrh	r2, [r7, #6]
 8021e48:	429a      	cmp	r2, r3
 8021e4a:	d116      	bne.n	8021e7a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e4c:	697b      	ldr	r3, [r7, #20]
 8021e4e:	681a      	ldr	r2, [r3, #0]
 8021e50:	68bb      	ldr	r3, [r7, #8]
 8021e52:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8021e54:	429a      	cmp	r2, r3
 8021e56:	d00d      	beq.n	8021e74 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e58:	68bb      	ldr	r3, [r7, #8]
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d00a      	beq.n	8021e74 <udp_bind+0xb4>
 8021e5e:	68bb      	ldr	r3, [r7, #8]
 8021e60:	681b      	ldr	r3, [r3, #0]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d006      	beq.n	8021e74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e66:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e68:	2b00      	cmp	r3, #0
 8021e6a:	d003      	beq.n	8021e74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e6c:	697b      	ldr	r3, [r7, #20]
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d102      	bne.n	8021e7a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8021e74:	f06f 0307 	mvn.w	r3, #7
 8021e78:	e01c      	b.n	8021eb4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e7a:	697b      	ldr	r3, [r7, #20]
 8021e7c:	68db      	ldr	r3, [r3, #12]
 8021e7e:	617b      	str	r3, [r7, #20]
 8021e80:	697b      	ldr	r3, [r7, #20]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d1d9      	bne.n	8021e3a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021e86:	68bb      	ldr	r3, [r7, #8]
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d002      	beq.n	8021e92 <udp_bind+0xd2>
 8021e8c:	68bb      	ldr	r3, [r7, #8]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	e000      	b.n	8021e94 <udp_bind+0xd4>
 8021e92:	2300      	movs	r3, #0
 8021e94:	68fa      	ldr	r2, [r7, #12]
 8021e96:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	88fa      	ldrh	r2, [r7, #6]
 8021e9c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021e9e:	7cfb      	ldrb	r3, [r7, #19]
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	d106      	bne.n	8021eb2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8021ea4:	4b09      	ldr	r3, [pc, #36]	@ (8021ecc <udp_bind+0x10c>)
 8021ea6:	681a      	ldr	r2, [r3, #0]
 8021ea8:	68fb      	ldr	r3, [r7, #12]
 8021eaa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021eac:	4a07      	ldr	r2, [pc, #28]	@ (8021ecc <udp_bind+0x10c>)
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8021eb2:	2300      	movs	r3, #0
}
 8021eb4:	4618      	mov	r0, r3
 8021eb6:	3718      	adds	r7, #24
 8021eb8:	46bd      	mov	sp, r7
 8021eba:	bd80      	pop	{r7, pc}
 8021ebc:	08028bec 	.word	0x08028bec
 8021ec0:	080280a0 	.word	0x080280a0
 8021ec4:	080283ac 	.word	0x080283ac
 8021ec8:	08028138 	.word	0x08028138
 8021ecc:	20010074 	.word	0x20010074

08021ed0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021ed0:	b580      	push	{r7, lr}
 8021ed2:	b086      	sub	sp, #24
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	60f8      	str	r0, [r7, #12]
 8021ed8:	60b9      	str	r1, [r7, #8]
 8021eda:	4613      	mov	r3, r2
 8021edc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8021ede:	68fb      	ldr	r3, [r7, #12]
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	d109      	bne.n	8021ef8 <udp_connect+0x28>
 8021ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8021f98 <udp_connect+0xc8>)
 8021ee6:	f240 4235 	movw	r2, #1077	@ 0x435
 8021eea:	492c      	ldr	r1, [pc, #176]	@ (8021f9c <udp_connect+0xcc>)
 8021eec:	482c      	ldr	r0, [pc, #176]	@ (8021fa0 <udp_connect+0xd0>)
 8021eee:	f000 fd13 	bl	8022918 <iprintf>
 8021ef2:	f06f 030f 	mvn.w	r3, #15
 8021ef6:	e04b      	b.n	8021f90 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021ef8:	68bb      	ldr	r3, [r7, #8]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d109      	bne.n	8021f12 <udp_connect+0x42>
 8021efe:	4b26      	ldr	r3, [pc, #152]	@ (8021f98 <udp_connect+0xc8>)
 8021f00:	f240 4236 	movw	r2, #1078	@ 0x436
 8021f04:	4927      	ldr	r1, [pc, #156]	@ (8021fa4 <udp_connect+0xd4>)
 8021f06:	4826      	ldr	r0, [pc, #152]	@ (8021fa0 <udp_connect+0xd0>)
 8021f08:	f000 fd06 	bl	8022918 <iprintf>
 8021f0c:	f06f 030f 	mvn.w	r3, #15
 8021f10:	e03e      	b.n	8021f90 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	8a5b      	ldrh	r3, [r3, #18]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d10f      	bne.n	8021f3a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021f1a:	68f9      	ldr	r1, [r7, #12]
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	8a5b      	ldrh	r3, [r3, #18]
 8021f20:	461a      	mov	r2, r3
 8021f22:	68f8      	ldr	r0, [r7, #12]
 8021f24:	f7ff ff4c 	bl	8021dc0 <udp_bind>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8021f2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d002      	beq.n	8021f3a <udp_connect+0x6a>
      return err;
 8021f34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021f38:	e02a      	b.n	8021f90 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8021f3a:	68bb      	ldr	r3, [r7, #8]
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d002      	beq.n	8021f46 <udp_connect+0x76>
 8021f40:	68bb      	ldr	r3, [r7, #8]
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	e000      	b.n	8021f48 <udp_connect+0x78>
 8021f46:	2300      	movs	r3, #0
 8021f48:	68fa      	ldr	r2, [r7, #12]
 8021f4a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8021f4c:	68fb      	ldr	r3, [r7, #12]
 8021f4e:	88fa      	ldrh	r2, [r7, #6]
 8021f50:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8021f52:	68fb      	ldr	r3, [r7, #12]
 8021f54:	7c1b      	ldrb	r3, [r3, #16]
 8021f56:	f043 0304 	orr.w	r3, r3, #4
 8021f5a:	b2da      	uxtb	r2, r3
 8021f5c:	68fb      	ldr	r3, [r7, #12]
 8021f5e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021f60:	4b11      	ldr	r3, [pc, #68]	@ (8021fa8 <udp_connect+0xd8>)
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	617b      	str	r3, [r7, #20]
 8021f66:	e008      	b.n	8021f7a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8021f68:	68fa      	ldr	r2, [r7, #12]
 8021f6a:	697b      	ldr	r3, [r7, #20]
 8021f6c:	429a      	cmp	r2, r3
 8021f6e:	d101      	bne.n	8021f74 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8021f70:	2300      	movs	r3, #0
 8021f72:	e00d      	b.n	8021f90 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021f74:	697b      	ldr	r3, [r7, #20]
 8021f76:	68db      	ldr	r3, [r3, #12]
 8021f78:	617b      	str	r3, [r7, #20]
 8021f7a:	697b      	ldr	r3, [r7, #20]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d1f3      	bne.n	8021f68 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8021f80:	4b09      	ldr	r3, [pc, #36]	@ (8021fa8 <udp_connect+0xd8>)
 8021f82:	681a      	ldr	r2, [r3, #0]
 8021f84:	68fb      	ldr	r3, [r7, #12]
 8021f86:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8021f88:	4a07      	ldr	r2, [pc, #28]	@ (8021fa8 <udp_connect+0xd8>)
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8021f8e:	2300      	movs	r3, #0
}
 8021f90:	4618      	mov	r0, r3
 8021f92:	3718      	adds	r7, #24
 8021f94:	46bd      	mov	sp, r7
 8021f96:	bd80      	pop	{r7, pc}
 8021f98:	080280a0 	.word	0x080280a0
 8021f9c:	080283c4 	.word	0x080283c4
 8021fa0:	08028138 	.word	0x08028138
 8021fa4:	080283e0 	.word	0x080283e0
 8021fa8:	20010074 	.word	0x20010074

08021fac <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b082      	sub	sp, #8
 8021fb0:	af00      	add	r7, sp, #0
 8021fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	2b00      	cmp	r3, #0
 8021fb8:	d107      	bne.n	8021fca <udp_disconnect+0x1e>
 8021fba:	4b0d      	ldr	r3, [pc, #52]	@ (8021ff0 <udp_disconnect+0x44>)
 8021fbc:	f240 426a 	movw	r2, #1130	@ 0x46a
 8021fc0:	490c      	ldr	r1, [pc, #48]	@ (8021ff4 <udp_disconnect+0x48>)
 8021fc2:	480d      	ldr	r0, [pc, #52]	@ (8021ff8 <udp_disconnect+0x4c>)
 8021fc4:	f000 fca8 	bl	8022918 <iprintf>
 8021fc8:	e00f      	b.n	8021fea <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	2200      	movs	r2, #0
 8021fce:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	2200      	movs	r2, #0
 8021fd4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	2200      	movs	r2, #0
 8021fda:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	7c1b      	ldrb	r3, [r3, #16]
 8021fe0:	f023 0304 	bic.w	r3, r3, #4
 8021fe4:	b2da      	uxtb	r2, r3
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	741a      	strb	r2, [r3, #16]
}
 8021fea:	3708      	adds	r7, #8
 8021fec:	46bd      	mov	sp, r7
 8021fee:	bd80      	pop	{r7, pc}
 8021ff0:	080280a0 	.word	0x080280a0
 8021ff4:	080283fc 	.word	0x080283fc
 8021ff8:	08028138 	.word	0x08028138

08021ffc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b084      	sub	sp, #16
 8022000:	af00      	add	r7, sp, #0
 8022002:	60f8      	str	r0, [r7, #12]
 8022004:	60b9      	str	r1, [r7, #8]
 8022006:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8022008:	68fb      	ldr	r3, [r7, #12]
 802200a:	2b00      	cmp	r3, #0
 802200c:	d107      	bne.n	802201e <udp_recv+0x22>
 802200e:	4b08      	ldr	r3, [pc, #32]	@ (8022030 <udp_recv+0x34>)
 8022010:	f240 428a 	movw	r2, #1162	@ 0x48a
 8022014:	4907      	ldr	r1, [pc, #28]	@ (8022034 <udp_recv+0x38>)
 8022016:	4808      	ldr	r0, [pc, #32]	@ (8022038 <udp_recv+0x3c>)
 8022018:	f000 fc7e 	bl	8022918 <iprintf>
 802201c:	e005      	b.n	802202a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802201e:	68fb      	ldr	r3, [r7, #12]
 8022020:	68ba      	ldr	r2, [r7, #8]
 8022022:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	687a      	ldr	r2, [r7, #4]
 8022028:	625a      	str	r2, [r3, #36]	@ 0x24
}
 802202a:	3710      	adds	r7, #16
 802202c:	46bd      	mov	sp, r7
 802202e:	bd80      	pop	{r7, pc}
 8022030:	080280a0 	.word	0x080280a0
 8022034:	08028418 	.word	0x08028418
 8022038:	08028138 	.word	0x08028138

0802203c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	2b00      	cmp	r3, #0
 8022048:	d107      	bne.n	802205a <udp_remove+0x1e>
 802204a:	4b19      	ldr	r3, [pc, #100]	@ (80220b0 <udp_remove+0x74>)
 802204c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8022050:	4918      	ldr	r1, [pc, #96]	@ (80220b4 <udp_remove+0x78>)
 8022052:	4819      	ldr	r0, [pc, #100]	@ (80220b8 <udp_remove+0x7c>)
 8022054:	f000 fc60 	bl	8022918 <iprintf>
 8022058:	e026      	b.n	80220a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802205a:	4b18      	ldr	r3, [pc, #96]	@ (80220bc <udp_remove+0x80>)
 802205c:	681b      	ldr	r3, [r3, #0]
 802205e:	687a      	ldr	r2, [r7, #4]
 8022060:	429a      	cmp	r2, r3
 8022062:	d105      	bne.n	8022070 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8022064:	4b15      	ldr	r3, [pc, #84]	@ (80220bc <udp_remove+0x80>)
 8022066:	681b      	ldr	r3, [r3, #0]
 8022068:	68db      	ldr	r3, [r3, #12]
 802206a:	4a14      	ldr	r2, [pc, #80]	@ (80220bc <udp_remove+0x80>)
 802206c:	6013      	str	r3, [r2, #0]
 802206e:	e017      	b.n	80220a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022070:	4b12      	ldr	r3, [pc, #72]	@ (80220bc <udp_remove+0x80>)
 8022072:	681b      	ldr	r3, [r3, #0]
 8022074:	60fb      	str	r3, [r7, #12]
 8022076:	e010      	b.n	802209a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8022078:	68fb      	ldr	r3, [r7, #12]
 802207a:	68db      	ldr	r3, [r3, #12]
 802207c:	2b00      	cmp	r3, #0
 802207e:	d009      	beq.n	8022094 <udp_remove+0x58>
 8022080:	68fb      	ldr	r3, [r7, #12]
 8022082:	68db      	ldr	r3, [r3, #12]
 8022084:	687a      	ldr	r2, [r7, #4]
 8022086:	429a      	cmp	r2, r3
 8022088:	d104      	bne.n	8022094 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	68da      	ldr	r2, [r3, #12]
 802208e:	68fb      	ldr	r3, [r7, #12]
 8022090:	60da      	str	r2, [r3, #12]
        break;
 8022092:	e005      	b.n	80220a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	68db      	ldr	r3, [r3, #12]
 8022098:	60fb      	str	r3, [r7, #12]
 802209a:	68fb      	ldr	r3, [r7, #12]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d1eb      	bne.n	8022078 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80220a0:	6879      	ldr	r1, [r7, #4]
 80220a2:	2000      	movs	r0, #0
 80220a4:	f7f7 fe66 	bl	8019d74 <memp_free>
}
 80220a8:	3710      	adds	r7, #16
 80220aa:	46bd      	mov	sp, r7
 80220ac:	bd80      	pop	{r7, pc}
 80220ae:	bf00      	nop
 80220b0:	080280a0 	.word	0x080280a0
 80220b4:	08028430 	.word	0x08028430
 80220b8:	08028138 	.word	0x08028138
 80220bc:	20010074 	.word	0x20010074

080220c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80220c0:	b580      	push	{r7, lr}
 80220c2:	b082      	sub	sp, #8
 80220c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80220c6:	2000      	movs	r0, #0
 80220c8:	f7f7 fdde 	bl	8019c88 <memp_malloc>
 80220cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	d00a      	beq.n	80220ea <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80220d4:	2228      	movs	r2, #40	@ 0x28
 80220d6:	2100      	movs	r1, #0
 80220d8:	6878      	ldr	r0, [r7, #4]
 80220da:	f000 fdaf 	bl	8022c3c <memset>
    pcb->ttl = UDP_TTL;
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	22ff      	movs	r2, #255	@ 0xff
 80220e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	22ff      	movs	r2, #255	@ 0xff
 80220e8:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80220ea:	687b      	ldr	r3, [r7, #4]
}
 80220ec:	4618      	mov	r0, r3
 80220ee:	3708      	adds	r7, #8
 80220f0:	46bd      	mov	sp, r7
 80220f2:	bd80      	pop	{r7, pc}

080220f4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80220f4:	b580      	push	{r7, lr}
 80220f6:	b084      	sub	sp, #16
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	4603      	mov	r3, r0
 80220fc:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80220fe:	f7ff ffdf 	bl	80220c0 <udp_new>
 8022102:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8022104:	68fb      	ldr	r3, [r7, #12]
}
 8022106:	4618      	mov	r0, r3
 8022108:	3710      	adds	r7, #16
 802210a:	46bd      	mov	sp, r7
 802210c:	bd80      	pop	{r7, pc}
	...

08022110 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8022110:	b480      	push	{r7}
 8022112:	b085      	sub	sp, #20
 8022114:	af00      	add	r7, sp, #0
 8022116:	6078      	str	r0, [r7, #4]
 8022118:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d01e      	beq.n	802215e <udp_netif_ip_addr_changed+0x4e>
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d01a      	beq.n	802215e <udp_netif_ip_addr_changed+0x4e>
 8022128:	683b      	ldr	r3, [r7, #0]
 802212a:	2b00      	cmp	r3, #0
 802212c:	d017      	beq.n	802215e <udp_netif_ip_addr_changed+0x4e>
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	2b00      	cmp	r3, #0
 8022134:	d013      	beq.n	802215e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022136:	4b0d      	ldr	r3, [pc, #52]	@ (802216c <udp_netif_ip_addr_changed+0x5c>)
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	60fb      	str	r3, [r7, #12]
 802213c:	e00c      	b.n	8022158 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	681a      	ldr	r2, [r3, #0]
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	429a      	cmp	r2, r3
 8022148:	d103      	bne.n	8022152 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	681a      	ldr	r2, [r3, #0]
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	68db      	ldr	r3, [r3, #12]
 8022156:	60fb      	str	r3, [r7, #12]
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	2b00      	cmp	r3, #0
 802215c:	d1ef      	bne.n	802213e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802215e:	bf00      	nop
 8022160:	3714      	adds	r7, #20
 8022162:	46bd      	mov	sp, r7
 8022164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022168:	4770      	bx	lr
 802216a:	bf00      	nop
 802216c:	20010074 	.word	0x20010074

08022170 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022170:	b580      	push	{r7, lr}
 8022172:	b086      	sub	sp, #24
 8022174:	af00      	add	r7, sp, #0
 8022176:	6078      	str	r0, [r7, #4]
 8022178:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802217a:	230e      	movs	r3, #14
 802217c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	895b      	ldrh	r3, [r3, #10]
 8022182:	2b0e      	cmp	r3, #14
 8022184:	d96e      	bls.n	8022264 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	7bdb      	ldrb	r3, [r3, #15]
 802218a:	2b00      	cmp	r3, #0
 802218c:	d106      	bne.n	802219c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802218e:	683b      	ldr	r3, [r7, #0]
 8022190:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8022194:	3301      	adds	r3, #1
 8022196:	b2da      	uxtb	r2, r3
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802219c:	687b      	ldr	r3, [r7, #4]
 802219e:	685b      	ldr	r3, [r3, #4]
 80221a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80221a2:	693b      	ldr	r3, [r7, #16]
 80221a4:	7b1a      	ldrb	r2, [r3, #12]
 80221a6:	7b5b      	ldrb	r3, [r3, #13]
 80221a8:	021b      	lsls	r3, r3, #8
 80221aa:	4313      	orrs	r3, r2
 80221ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80221ae:	693b      	ldr	r3, [r7, #16]
 80221b0:	781b      	ldrb	r3, [r3, #0]
 80221b2:	f003 0301 	and.w	r3, r3, #1
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	d023      	beq.n	8022202 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80221ba:	693b      	ldr	r3, [r7, #16]
 80221bc:	781b      	ldrb	r3, [r3, #0]
 80221be:	2b01      	cmp	r3, #1
 80221c0:	d10f      	bne.n	80221e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221c2:	693b      	ldr	r3, [r7, #16]
 80221c4:	785b      	ldrb	r3, [r3, #1]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d11b      	bne.n	8022202 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80221ca:	693b      	ldr	r3, [r7, #16]
 80221cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80221d0:	d117      	bne.n	8022202 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	7b5b      	ldrb	r3, [r3, #13]
 80221d6:	f043 0310 	orr.w	r3, r3, #16
 80221da:	b2da      	uxtb	r2, r3
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	735a      	strb	r2, [r3, #13]
 80221e0:	e00f      	b.n	8022202 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80221e2:	693b      	ldr	r3, [r7, #16]
 80221e4:	2206      	movs	r2, #6
 80221e6:	4928      	ldr	r1, [pc, #160]	@ (8022288 <ethernet_input+0x118>)
 80221e8:	4618      	mov	r0, r3
 80221ea:	f000 fcfd 	bl	8022be8 <memcmp>
 80221ee:	4603      	mov	r3, r0
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d106      	bne.n	8022202 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	7b5b      	ldrb	r3, [r3, #13]
 80221f8:	f043 0308 	orr.w	r3, r3, #8
 80221fc:	b2da      	uxtb	r2, r3
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022202:	89fb      	ldrh	r3, [r7, #14]
 8022204:	2b08      	cmp	r3, #8
 8022206:	d003      	beq.n	8022210 <ethernet_input+0xa0>
 8022208:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 802220c:	d014      	beq.n	8022238 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802220e:	e032      	b.n	8022276 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022210:	683b      	ldr	r3, [r7, #0]
 8022212:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8022216:	f003 0308 	and.w	r3, r3, #8
 802221a:	2b00      	cmp	r3, #0
 802221c:	d024      	beq.n	8022268 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802221e:	8afb      	ldrh	r3, [r7, #22]
 8022220:	4619      	mov	r1, r3
 8022222:	6878      	ldr	r0, [r7, #4]
 8022224:	f7f8 fbe6 	bl	801a9f4 <pbuf_remove_header>
 8022228:	4603      	mov	r3, r0
 802222a:	2b00      	cmp	r3, #0
 802222c:	d11e      	bne.n	802226c <ethernet_input+0xfc>
        ip4_input(p, netif);
 802222e:	6839      	ldr	r1, [r7, #0]
 8022230:	6878      	ldr	r0, [r7, #4]
 8022232:	f7f5 fd73 	bl	8017d1c <ip4_input>
      break;
 8022236:	e013      	b.n	8022260 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022238:	683b      	ldr	r3, [r7, #0]
 802223a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802223e:	f003 0308 	and.w	r3, r3, #8
 8022242:	2b00      	cmp	r3, #0
 8022244:	d014      	beq.n	8022270 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022246:	8afb      	ldrh	r3, [r7, #22]
 8022248:	4619      	mov	r1, r3
 802224a:	6878      	ldr	r0, [r7, #4]
 802224c:	f7f8 fbd2 	bl	801a9f4 <pbuf_remove_header>
 8022250:	4603      	mov	r3, r0
 8022252:	2b00      	cmp	r3, #0
 8022254:	d10e      	bne.n	8022274 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022256:	6839      	ldr	r1, [r7, #0]
 8022258:	6878      	ldr	r0, [r7, #4]
 802225a:	f7f4 fa5b 	bl	8016714 <etharp_input>
      break;
 802225e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022260:	2300      	movs	r3, #0
 8022262:	e00c      	b.n	802227e <ethernet_input+0x10e>
    goto free_and_return;
 8022264:	bf00      	nop
 8022266:	e006      	b.n	8022276 <ethernet_input+0x106>
        goto free_and_return;
 8022268:	bf00      	nop
 802226a:	e004      	b.n	8022276 <ethernet_input+0x106>
        goto free_and_return;
 802226c:	bf00      	nop
 802226e:	e002      	b.n	8022276 <ethernet_input+0x106>
        goto free_and_return;
 8022270:	bf00      	nop
 8022272:	e000      	b.n	8022276 <ethernet_input+0x106>
        goto free_and_return;
 8022274:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022276:	6878      	ldr	r0, [r7, #4]
 8022278:	f7f8 fc74 	bl	801ab64 <pbuf_free>
  return ERR_OK;
 802227c:	2300      	movs	r3, #0
}
 802227e:	4618      	mov	r0, r3
 8022280:	3718      	adds	r7, #24
 8022282:	46bd      	mov	sp, r7
 8022284:	bd80      	pop	{r7, pc}
 8022286:	bf00      	nop
 8022288:	08028d2c 	.word	0x08028d2c

0802228c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802228c:	b580      	push	{r7, lr}
 802228e:	b086      	sub	sp, #24
 8022290:	af00      	add	r7, sp, #0
 8022292:	60f8      	str	r0, [r7, #12]
 8022294:	60b9      	str	r1, [r7, #8]
 8022296:	607a      	str	r2, [r7, #4]
 8022298:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802229a:	8c3b      	ldrh	r3, [r7, #32]
 802229c:	4618      	mov	r0, r3
 802229e:	f7f6 ffaf 	bl	8019200 <lwip_htons>
 80222a2:	4603      	mov	r3, r0
 80222a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80222a6:	210e      	movs	r1, #14
 80222a8:	68b8      	ldr	r0, [r7, #8]
 80222aa:	f7f8 fb93 	bl	801a9d4 <pbuf_add_header>
 80222ae:	4603      	mov	r3, r0
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d125      	bne.n	8022300 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80222b4:	68bb      	ldr	r3, [r7, #8]
 80222b6:	685b      	ldr	r3, [r3, #4]
 80222b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80222ba:	693b      	ldr	r3, [r7, #16]
 80222bc:	8afa      	ldrh	r2, [r7, #22]
 80222be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80222c0:	693b      	ldr	r3, [r7, #16]
 80222c2:	2206      	movs	r2, #6
 80222c4:	6839      	ldr	r1, [r7, #0]
 80222c6:	4618      	mov	r0, r3
 80222c8:	f000 fd5d 	bl	8022d86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80222cc:	693b      	ldr	r3, [r7, #16]
 80222ce:	3306      	adds	r3, #6
 80222d0:	2206      	movs	r2, #6
 80222d2:	6879      	ldr	r1, [r7, #4]
 80222d4:	4618      	mov	r0, r3
 80222d6:	f000 fd56 	bl	8022d86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80222da:	68fb      	ldr	r3, [r7, #12]
 80222dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80222e0:	2b06      	cmp	r3, #6
 80222e2:	d006      	beq.n	80222f2 <ethernet_output+0x66>
 80222e4:	4b0a      	ldr	r3, [pc, #40]	@ (8022310 <ethernet_output+0x84>)
 80222e6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80222ea:	490a      	ldr	r1, [pc, #40]	@ (8022314 <ethernet_output+0x88>)
 80222ec:	480a      	ldr	r0, [pc, #40]	@ (8022318 <ethernet_output+0x8c>)
 80222ee:	f000 fb13 	bl	8022918 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80222f2:	68fb      	ldr	r3, [r7, #12]
 80222f4:	699b      	ldr	r3, [r3, #24]
 80222f6:	68b9      	ldr	r1, [r7, #8]
 80222f8:	68f8      	ldr	r0, [r7, #12]
 80222fa:	4798      	blx	r3
 80222fc:	4603      	mov	r3, r0
 80222fe:	e002      	b.n	8022306 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022300:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022302:	f06f 0301 	mvn.w	r3, #1
}
 8022306:	4618      	mov	r0, r3
 8022308:	3718      	adds	r7, #24
 802230a:	46bd      	mov	sp, r7
 802230c:	bd80      	pop	{r7, pc}
 802230e:	bf00      	nop
 8022310:	08028448 	.word	0x08028448
 8022314:	080284c0 	.word	0x080284c0
 8022318:	080284f4 	.word	0x080284f4

0802231c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802231c:	b580      	push	{r7, lr}
 802231e:	b082      	sub	sp, #8
 8022320:	af00      	add	r7, sp, #0
 8022322:	6078      	str	r0, [r7, #4]
 8022324:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8022326:	683b      	ldr	r3, [r7, #0]
 8022328:	2200      	movs	r2, #0
 802232a:	2104      	movs	r1, #4
 802232c:	4618      	mov	r0, r3
 802232e:	f7ed facd 	bl	800f8cc <osMessageQueueNew>
 8022332:	4602      	mov	r2, r0
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	2b00      	cmp	r3, #0
 802233e:	d102      	bne.n	8022346 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8022340:	f04f 33ff 	mov.w	r3, #4294967295
 8022344:	e000      	b.n	8022348 <sys_mbox_new+0x2c>

  return ERR_OK;
 8022346:	2300      	movs	r3, #0
}
 8022348:	4618      	mov	r0, r3
 802234a:	3708      	adds	r7, #8
 802234c:	46bd      	mov	sp, r7
 802234e:	bd80      	pop	{r7, pc}

08022350 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022350:	b580      	push	{r7, lr}
 8022352:	b082      	sub	sp, #8
 8022354:	af00      	add	r7, sp, #0
 8022356:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	4618      	mov	r0, r3
 802235e:	f7ed fbe7 	bl	800fb30 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	4618      	mov	r0, r3
 8022368:	f7ed fc02 	bl	800fb70 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 802236c:	bf00      	nop
 802236e:	3708      	adds	r7, #8
 8022370:	46bd      	mov	sp, r7
 8022372:	bd80      	pop	{r7, pc}

08022374 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022374:	b580      	push	{r7, lr}
 8022376:	b084      	sub	sp, #16
 8022378:	af00      	add	r7, sp, #0
 802237a:	6078      	str	r0, [r7, #4]
 802237c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	6818      	ldr	r0, [r3, #0]
 8022382:	4639      	mov	r1, r7
 8022384:	2300      	movs	r3, #0
 8022386:	2200      	movs	r2, #0
 8022388:	f7ed fb14 	bl	800f9b4 <osMessageQueuePut>
 802238c:	4603      	mov	r3, r0
 802238e:	2b00      	cmp	r3, #0
 8022390:	d102      	bne.n	8022398 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8022392:	2300      	movs	r3, #0
 8022394:	73fb      	strb	r3, [r7, #15]
 8022396:	e001      	b.n	802239c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8022398:	23ff      	movs	r3, #255	@ 0xff
 802239a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 802239c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80223a0:	4618      	mov	r0, r3
 80223a2:	3710      	adds	r7, #16
 80223a4:	46bd      	mov	sp, r7
 80223a6:	bd80      	pop	{r7, pc}

080223a8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80223a8:	b580      	push	{r7, lr}
 80223aa:	b086      	sub	sp, #24
 80223ac:	af00      	add	r7, sp, #0
 80223ae:	60f8      	str	r0, [r7, #12]
 80223b0:	60b9      	str	r1, [r7, #8]
 80223b2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80223b4:	f7ec ff48 	bl	800f248 <osKernelGetTickCount>
 80223b8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d013      	beq.n	80223e8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	6818      	ldr	r0, [r3, #0]
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	2200      	movs	r2, #0
 80223c8:	68b9      	ldr	r1, [r7, #8]
 80223ca:	f7ed fb53 	bl	800fa74 <osMessageQueueGet>
 80223ce:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80223d0:	693b      	ldr	r3, [r7, #16]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d105      	bne.n	80223e2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80223d6:	f7ec ff37 	bl	800f248 <osKernelGetTickCount>
 80223da:	4602      	mov	r2, r0
 80223dc:	697b      	ldr	r3, [r7, #20]
 80223de:	1ad3      	subs	r3, r2, r3
 80223e0:	e00f      	b.n	8022402 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80223e2:	f04f 33ff 	mov.w	r3, #4294967295
 80223e6:	e00c      	b.n	8022402 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80223e8:	68fb      	ldr	r3, [r7, #12]
 80223ea:	6818      	ldr	r0, [r3, #0]
 80223ec:	f04f 33ff 	mov.w	r3, #4294967295
 80223f0:	2200      	movs	r2, #0
 80223f2:	68b9      	ldr	r1, [r7, #8]
 80223f4:	f7ed fb3e 	bl	800fa74 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80223f8:	f7ec ff26 	bl	800f248 <osKernelGetTickCount>
 80223fc:	4602      	mov	r2, r0
 80223fe:	697b      	ldr	r3, [r7, #20]
 8022400:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8022402:	4618      	mov	r0, r3
 8022404:	3718      	adds	r7, #24
 8022406:	46bd      	mov	sp, r7
 8022408:	bd80      	pop	{r7, pc}

0802240a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 802240a:	b580      	push	{r7, lr}
 802240c:	b082      	sub	sp, #8
 802240e:	af00      	add	r7, sp, #0
 8022410:	6078      	str	r0, [r7, #4]
 8022412:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	6818      	ldr	r0, [r3, #0]
 8022418:	2300      	movs	r3, #0
 802241a:	2200      	movs	r2, #0
 802241c:	6839      	ldr	r1, [r7, #0]
 802241e:	f7ed fb29 	bl	800fa74 <osMessageQueueGet>
 8022422:	4603      	mov	r3, r0
 8022424:	2b00      	cmp	r3, #0
 8022426:	d101      	bne.n	802242c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8022428:	2300      	movs	r3, #0
 802242a:	e001      	b.n	8022430 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 802242c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022430:	4618      	mov	r0, r3
 8022432:	3708      	adds	r7, #8
 8022434:	46bd      	mov	sp, r7
 8022436:	bd80      	pop	{r7, pc}

08022438 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022438:	b480      	push	{r7}
 802243a:	b083      	sub	sp, #12
 802243c:	af00      	add	r7, sp, #0
 802243e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d101      	bne.n	802244c <sys_mbox_valid+0x14>
    return 0;
 8022448:	2300      	movs	r3, #0
 802244a:	e000      	b.n	802244e <sys_mbox_valid+0x16>
  else
    return 1;
 802244c:	2301      	movs	r3, #1
}
 802244e:	4618      	mov	r0, r3
 8022450:	370c      	adds	r7, #12
 8022452:	46bd      	mov	sp, r7
 8022454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022458:	4770      	bx	lr

0802245a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 802245a:	b480      	push	{r7}
 802245c:	b083      	sub	sp, #12
 802245e:	af00      	add	r7, sp, #0
 8022460:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	2200      	movs	r2, #0
 8022466:	601a      	str	r2, [r3, #0]
}
 8022468:	bf00      	nop
 802246a:	370c      	adds	r7, #12
 802246c:	46bd      	mov	sp, r7
 802246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022472:	4770      	bx	lr

08022474 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022474:	b580      	push	{r7, lr}
 8022476:	b082      	sub	sp, #8
 8022478:	af00      	add	r7, sp, #0
 802247a:	6078      	str	r0, [r7, #4]
 802247c:	460b      	mov	r3, r1
 802247e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8022480:	78fb      	ldrb	r3, [r7, #3]
 8022482:	2200      	movs	r2, #0
 8022484:	4619      	mov	r1, r3
 8022486:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 802248a:	f7ed f8db 	bl	800f644 <osSemaphoreNew>
 802248e:	4602      	mov	r2, r0
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d102      	bne.n	80224a2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802249c:	f04f 33ff 	mov.w	r3, #4294967295
 80224a0:	e009      	b.n	80224b6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80224a2:	78fb      	ldrb	r3, [r7, #3]
 80224a4:	2b00      	cmp	r3, #0
 80224a6:	d105      	bne.n	80224b4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	2100      	movs	r1, #0
 80224ae:	4618      	mov	r0, r3
 80224b0:	f7ed f952 	bl	800f758 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80224b4:	2300      	movs	r3, #0
}
 80224b6:	4618      	mov	r0, r3
 80224b8:	3708      	adds	r7, #8
 80224ba:	46bd      	mov	sp, r7
 80224bc:	bd80      	pop	{r7, pc}

080224be <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80224be:	b580      	push	{r7, lr}
 80224c0:	b084      	sub	sp, #16
 80224c2:	af00      	add	r7, sp, #0
 80224c4:	6078      	str	r0, [r7, #4]
 80224c6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80224c8:	f7ec febe 	bl	800f248 <osKernelGetTickCount>
 80224cc:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80224ce:	683b      	ldr	r3, [r7, #0]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d011      	beq.n	80224f8 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	6839      	ldr	r1, [r7, #0]
 80224da:	4618      	mov	r0, r3
 80224dc:	f7ed f93c 	bl	800f758 <osSemaphoreAcquire>
 80224e0:	4603      	mov	r3, r0
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d105      	bne.n	80224f2 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80224e6:	f7ec feaf 	bl	800f248 <osKernelGetTickCount>
 80224ea:	4602      	mov	r2, r0
 80224ec:	68fb      	ldr	r3, [r7, #12]
 80224ee:	1ad3      	subs	r3, r2, r3
 80224f0:	e012      	b.n	8022518 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80224f2:	f04f 33ff 	mov.w	r3, #4294967295
 80224f6:	e00f      	b.n	8022518 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80224f8:	bf00      	nop
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	f04f 31ff 	mov.w	r1, #4294967295
 8022502:	4618      	mov	r0, r3
 8022504:	f7ed f928 	bl	800f758 <osSemaphoreAcquire>
 8022508:	4603      	mov	r3, r0
 802250a:	2b00      	cmp	r3, #0
 802250c:	d1f5      	bne.n	80224fa <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 802250e:	f7ec fe9b 	bl	800f248 <osKernelGetTickCount>
 8022512:	4602      	mov	r2, r0
 8022514:	68fb      	ldr	r3, [r7, #12]
 8022516:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8022518:	4618      	mov	r0, r3
 802251a:	3710      	adds	r7, #16
 802251c:	46bd      	mov	sp, r7
 802251e:	bd80      	pop	{r7, pc}

08022520 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022520:	b580      	push	{r7, lr}
 8022522:	b082      	sub	sp, #8
 8022524:	af00      	add	r7, sp, #0
 8022526:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	681b      	ldr	r3, [r3, #0]
 802252c:	4618      	mov	r0, r3
 802252e:	f7ed f965 	bl	800f7fc <osSemaphoreRelease>
}
 8022532:	bf00      	nop
 8022534:	3708      	adds	r7, #8
 8022536:	46bd      	mov	sp, r7
 8022538:	bd80      	pop	{r7, pc}

0802253a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802253a:	b580      	push	{r7, lr}
 802253c:	b082      	sub	sp, #8
 802253e:	af00      	add	r7, sp, #0
 8022540:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	4618      	mov	r0, r3
 8022548:	f7ed f99c 	bl	800f884 <osSemaphoreDelete>
}
 802254c:	bf00      	nop
 802254e:	3708      	adds	r7, #8
 8022550:	46bd      	mov	sp, r7
 8022552:	bd80      	pop	{r7, pc}

08022554 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022554:	b480      	push	{r7}
 8022556:	b083      	sub	sp, #12
 8022558:	af00      	add	r7, sp, #0
 802255a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	681b      	ldr	r3, [r3, #0]
 8022560:	2b00      	cmp	r3, #0
 8022562:	d101      	bne.n	8022568 <sys_sem_valid+0x14>
    return 0;
 8022564:	2300      	movs	r3, #0
 8022566:	e000      	b.n	802256a <sys_sem_valid+0x16>
  else
    return 1;
 8022568:	2301      	movs	r3, #1
}
 802256a:	4618      	mov	r0, r3
 802256c:	370c      	adds	r7, #12
 802256e:	46bd      	mov	sp, r7
 8022570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022574:	4770      	bx	lr

08022576 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022576:	b480      	push	{r7}
 8022578:	b083      	sub	sp, #12
 802257a:	af00      	add	r7, sp, #0
 802257c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	2200      	movs	r2, #0
 8022582:	601a      	str	r2, [r3, #0]
}
 8022584:	bf00      	nop
 8022586:	370c      	adds	r7, #12
 8022588:	46bd      	mov	sp, r7
 802258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802258e:	4770      	bx	lr

08022590 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022590:	b580      	push	{r7, lr}
 8022592:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8022594:	2000      	movs	r0, #0
 8022596:	f7ec ff47 	bl	800f428 <osMutexNew>
 802259a:	4603      	mov	r3, r0
 802259c:	4a01      	ldr	r2, [pc, #4]	@ (80225a4 <sys_init+0x14>)
 802259e:	6013      	str	r3, [r2, #0]
#endif
}
 80225a0:	bf00      	nop
 80225a2:	bd80      	pop	{r7, pc}
 80225a4:	2001007c 	.word	0x2001007c

080225a8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b082      	sub	sp, #8
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80225b0:	2000      	movs	r0, #0
 80225b2:	f7ec ff39 	bl	800f428 <osMutexNew>
 80225b6:	4602      	mov	r2, r0
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	681b      	ldr	r3, [r3, #0]
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	d102      	bne.n	80225ca <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80225c4:	f04f 33ff 	mov.w	r3, #4294967295
 80225c8:	e000      	b.n	80225cc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80225ca:	2300      	movs	r3, #0
}
 80225cc:	4618      	mov	r0, r3
 80225ce:	3708      	adds	r7, #8
 80225d0:	46bd      	mov	sp, r7
 80225d2:	bd80      	pop	{r7, pc}

080225d4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80225d4:	b580      	push	{r7, lr}
 80225d6:	b082      	sub	sp, #8
 80225d8:	af00      	add	r7, sp, #0
 80225da:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	f04f 31ff 	mov.w	r1, #4294967295
 80225e4:	4618      	mov	r0, r3
 80225e6:	f7ec ffa5 	bl	800f534 <osMutexAcquire>
#endif
}
 80225ea:	bf00      	nop
 80225ec:	3708      	adds	r7, #8
 80225ee:	46bd      	mov	sp, r7
 80225f0:	bd80      	pop	{r7, pc}

080225f2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80225f2:	b580      	push	{r7, lr}
 80225f4:	b082      	sub	sp, #8
 80225f6:	af00      	add	r7, sp, #0
 80225f8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	4618      	mov	r0, r3
 8022600:	f7ec ffe3 	bl	800f5ca <osMutexRelease>
}
 8022604:	bf00      	nop
 8022606:	3708      	adds	r7, #8
 8022608:	46bd      	mov	sp, r7
 802260a:	bd80      	pop	{r7, pc}

0802260c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802260c:	b580      	push	{r7, lr}
 802260e:	b08e      	sub	sp, #56	@ 0x38
 8022610:	af00      	add	r7, sp, #0
 8022612:	60f8      	str	r0, [r7, #12]
 8022614:	60b9      	str	r1, [r7, #8]
 8022616:	607a      	str	r2, [r7, #4]
 8022618:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 802261a:	f107 0314 	add.w	r3, r7, #20
 802261e:	2224      	movs	r2, #36	@ 0x24
 8022620:	2100      	movs	r1, #0
 8022622:	4618      	mov	r0, r3
 8022624:	f000 fb0a 	bl	8022c3c <memset>
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	617b      	str	r3, [r7, #20]
 802262c:	683b      	ldr	r3, [r7, #0]
 802262e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022632:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8022634:	f107 0314 	add.w	r3, r7, #20
 8022638:	461a      	mov	r2, r3
 802263a:	6879      	ldr	r1, [r7, #4]
 802263c:	68b8      	ldr	r0, [r7, #8]
 802263e:	f7ec fe18 	bl	800f272 <osThreadNew>
 8022642:	4603      	mov	r3, r0
#endif
}
 8022644:	4618      	mov	r0, r3
 8022646:	3738      	adds	r7, #56	@ 0x38
 8022648:	46bd      	mov	sp, r7
 802264a:	bd80      	pop	{r7, pc}

0802264c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8022650:	4b04      	ldr	r3, [pc, #16]	@ (8022664 <sys_arch_protect+0x18>)
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	f04f 31ff 	mov.w	r1, #4294967295
 8022658:	4618      	mov	r0, r3
 802265a:	f7ec ff6b 	bl	800f534 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 802265e:	2301      	movs	r3, #1
}
 8022660:	4618      	mov	r0, r3
 8022662:	bd80      	pop	{r7, pc}
 8022664:	2001007c 	.word	0x2001007c

08022668 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022668:	b580      	push	{r7, lr}
 802266a:	b082      	sub	sp, #8
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022670:	4b04      	ldr	r3, [pc, #16]	@ (8022684 <sys_arch_unprotect+0x1c>)
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	4618      	mov	r0, r3
 8022676:	f7ec ffa8 	bl	800f5ca <osMutexRelease>
}
 802267a:	bf00      	nop
 802267c:	3708      	adds	r7, #8
 802267e:	46bd      	mov	sp, r7
 8022680:	bd80      	pop	{r7, pc}
 8022682:	bf00      	nop
 8022684:	2001007c 	.word	0x2001007c

08022688 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b084      	sub	sp, #16
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
 8022690:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	2b00      	cmp	r3, #0
 8022696:	d002      	beq.n	802269e <fs_open+0x16>
 8022698:	683b      	ldr	r3, [r7, #0]
 802269a:	2b00      	cmp	r3, #0
 802269c:	d102      	bne.n	80226a4 <fs_open+0x1c>
    return ERR_ARG;
 802269e:	f06f 030f 	mvn.w	r3, #15
 80226a2:	e028      	b.n	80226f6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80226a4:	4b16      	ldr	r3, [pc, #88]	@ (8022700 <fs_open+0x78>)
 80226a6:	60fb      	str	r3, [r7, #12]
 80226a8:	e020      	b.n	80226ec <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80226aa:	68fb      	ldr	r3, [r7, #12]
 80226ac:	685b      	ldr	r3, [r3, #4]
 80226ae:	4619      	mov	r1, r3
 80226b0:	6838      	ldr	r0, [r7, #0]
 80226b2:	f7dd fe2d 	bl	8000310 <strcmp>
 80226b6:	4603      	mov	r3, r0
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	d114      	bne.n	80226e6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	689a      	ldr	r2, [r3, #8]
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80226c4:	68fb      	ldr	r3, [r7, #12]
 80226c6:	68da      	ldr	r2, [r3, #12]
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	68da      	ldr	r2, [r3, #12]
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	2200      	movs	r2, #0
 80226d8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80226da:	68fb      	ldr	r3, [r7, #12]
 80226dc:	7c1a      	ldrb	r2, [r3, #16]
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80226e2:	2300      	movs	r3, #0
 80226e4:	e007      	b.n	80226f6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80226e6:	68fb      	ldr	r3, [r7, #12]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	60fb      	str	r3, [r7, #12]
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d1db      	bne.n	80226aa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80226f2:	f06f 0305 	mvn.w	r3, #5
}
 80226f6:	4618      	mov	r0, r3
 80226f8:	3710      	adds	r7, #16
 80226fa:	46bd      	mov	sp, r7
 80226fc:	bd80      	pop	{r7, pc}
 80226fe:	bf00      	nop
 8022700:	08038de0 	.word	0x08038de0

08022704 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8022704:	b480      	push	{r7}
 8022706:	b083      	sub	sp, #12
 8022708:	af00      	add	r7, sp, #0
 802270a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 802270c:	bf00      	nop
 802270e:	370c      	adds	r7, #12
 8022710:	46bd      	mov	sp, r7
 8022712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022716:	4770      	bx	lr

08022718 <rand>:
 8022718:	4b16      	ldr	r3, [pc, #88]	@ (8022774 <rand+0x5c>)
 802271a:	b510      	push	{r4, lr}
 802271c:	681c      	ldr	r4, [r3, #0]
 802271e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022720:	b9b3      	cbnz	r3, 8022750 <rand+0x38>
 8022722:	2018      	movs	r0, #24
 8022724:	f000 fba6 	bl	8022e74 <malloc>
 8022728:	4602      	mov	r2, r0
 802272a:	6320      	str	r0, [r4, #48]	@ 0x30
 802272c:	b920      	cbnz	r0, 8022738 <rand+0x20>
 802272e:	4b12      	ldr	r3, [pc, #72]	@ (8022778 <rand+0x60>)
 8022730:	4812      	ldr	r0, [pc, #72]	@ (802277c <rand+0x64>)
 8022732:	2152      	movs	r1, #82	@ 0x52
 8022734:	f000 fb36 	bl	8022da4 <__assert_func>
 8022738:	4911      	ldr	r1, [pc, #68]	@ (8022780 <rand+0x68>)
 802273a:	4b12      	ldr	r3, [pc, #72]	@ (8022784 <rand+0x6c>)
 802273c:	e9c0 1300 	strd	r1, r3, [r0]
 8022740:	4b11      	ldr	r3, [pc, #68]	@ (8022788 <rand+0x70>)
 8022742:	6083      	str	r3, [r0, #8]
 8022744:	230b      	movs	r3, #11
 8022746:	8183      	strh	r3, [r0, #12]
 8022748:	2100      	movs	r1, #0
 802274a:	2001      	movs	r0, #1
 802274c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022750:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022752:	480e      	ldr	r0, [pc, #56]	@ (802278c <rand+0x74>)
 8022754:	690b      	ldr	r3, [r1, #16]
 8022756:	694c      	ldr	r4, [r1, #20]
 8022758:	4a0d      	ldr	r2, [pc, #52]	@ (8022790 <rand+0x78>)
 802275a:	4358      	muls	r0, r3
 802275c:	fb02 0004 	mla	r0, r2, r4, r0
 8022760:	fba3 3202 	umull	r3, r2, r3, r2
 8022764:	3301      	adds	r3, #1
 8022766:	eb40 0002 	adc.w	r0, r0, r2
 802276a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802276e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8022772:	bd10      	pop	{r4, pc}
 8022774:	20000050 	.word	0x20000050
 8022778:	08038df4 	.word	0x08038df4
 802277c:	08038e0b 	.word	0x08038e0b
 8022780:	abcd330e 	.word	0xabcd330e
 8022784:	e66d1234 	.word	0xe66d1234
 8022788:	0005deec 	.word	0x0005deec
 802278c:	5851f42d 	.word	0x5851f42d
 8022790:	4c957f2d 	.word	0x4c957f2d

08022794 <std>:
 8022794:	2300      	movs	r3, #0
 8022796:	b510      	push	{r4, lr}
 8022798:	4604      	mov	r4, r0
 802279a:	e9c0 3300 	strd	r3, r3, [r0]
 802279e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80227a2:	6083      	str	r3, [r0, #8]
 80227a4:	8181      	strh	r1, [r0, #12]
 80227a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80227a8:	81c2      	strh	r2, [r0, #14]
 80227aa:	6183      	str	r3, [r0, #24]
 80227ac:	4619      	mov	r1, r3
 80227ae:	2208      	movs	r2, #8
 80227b0:	305c      	adds	r0, #92	@ 0x5c
 80227b2:	f000 fa43 	bl	8022c3c <memset>
 80227b6:	4b0d      	ldr	r3, [pc, #52]	@ (80227ec <std+0x58>)
 80227b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80227ba:	4b0d      	ldr	r3, [pc, #52]	@ (80227f0 <std+0x5c>)
 80227bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80227be:	4b0d      	ldr	r3, [pc, #52]	@ (80227f4 <std+0x60>)
 80227c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80227c2:	4b0d      	ldr	r3, [pc, #52]	@ (80227f8 <std+0x64>)
 80227c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80227c6:	4b0d      	ldr	r3, [pc, #52]	@ (80227fc <std+0x68>)
 80227c8:	6224      	str	r4, [r4, #32]
 80227ca:	429c      	cmp	r4, r3
 80227cc:	d006      	beq.n	80227dc <std+0x48>
 80227ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80227d2:	4294      	cmp	r4, r2
 80227d4:	d002      	beq.n	80227dc <std+0x48>
 80227d6:	33d0      	adds	r3, #208	@ 0xd0
 80227d8:	429c      	cmp	r4, r3
 80227da:	d105      	bne.n	80227e8 <std+0x54>
 80227dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80227e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227e4:	f000 bac4 	b.w	8022d70 <__retarget_lock_init_recursive>
 80227e8:	bd10      	pop	{r4, pc}
 80227ea:	bf00      	nop
 80227ec:	08022a39 	.word	0x08022a39
 80227f0:	08022a5b 	.word	0x08022a5b
 80227f4:	08022a93 	.word	0x08022a93
 80227f8:	08022ab7 	.word	0x08022ab7
 80227fc:	20010080 	.word	0x20010080

08022800 <stdio_exit_handler>:
 8022800:	4a02      	ldr	r2, [pc, #8]	@ (802280c <stdio_exit_handler+0xc>)
 8022802:	4903      	ldr	r1, [pc, #12]	@ (8022810 <stdio_exit_handler+0x10>)
 8022804:	4803      	ldr	r0, [pc, #12]	@ (8022814 <stdio_exit_handler+0x14>)
 8022806:	f000 b869 	b.w	80228dc <_fwalk_sglue>
 802280a:	bf00      	nop
 802280c:	20000044 	.word	0x20000044
 8022810:	08023939 	.word	0x08023939
 8022814:	20000054 	.word	0x20000054

08022818 <cleanup_stdio>:
 8022818:	6841      	ldr	r1, [r0, #4]
 802281a:	4b0c      	ldr	r3, [pc, #48]	@ (802284c <cleanup_stdio+0x34>)
 802281c:	4299      	cmp	r1, r3
 802281e:	b510      	push	{r4, lr}
 8022820:	4604      	mov	r4, r0
 8022822:	d001      	beq.n	8022828 <cleanup_stdio+0x10>
 8022824:	f001 f888 	bl	8023938 <_fflush_r>
 8022828:	68a1      	ldr	r1, [r4, #8]
 802282a:	4b09      	ldr	r3, [pc, #36]	@ (8022850 <cleanup_stdio+0x38>)
 802282c:	4299      	cmp	r1, r3
 802282e:	d002      	beq.n	8022836 <cleanup_stdio+0x1e>
 8022830:	4620      	mov	r0, r4
 8022832:	f001 f881 	bl	8023938 <_fflush_r>
 8022836:	68e1      	ldr	r1, [r4, #12]
 8022838:	4b06      	ldr	r3, [pc, #24]	@ (8022854 <cleanup_stdio+0x3c>)
 802283a:	4299      	cmp	r1, r3
 802283c:	d004      	beq.n	8022848 <cleanup_stdio+0x30>
 802283e:	4620      	mov	r0, r4
 8022840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022844:	f001 b878 	b.w	8023938 <_fflush_r>
 8022848:	bd10      	pop	{r4, pc}
 802284a:	bf00      	nop
 802284c:	20010080 	.word	0x20010080
 8022850:	200100e8 	.word	0x200100e8
 8022854:	20010150 	.word	0x20010150

08022858 <global_stdio_init.part.0>:
 8022858:	b510      	push	{r4, lr}
 802285a:	4b0b      	ldr	r3, [pc, #44]	@ (8022888 <global_stdio_init.part.0+0x30>)
 802285c:	4c0b      	ldr	r4, [pc, #44]	@ (802288c <global_stdio_init.part.0+0x34>)
 802285e:	4a0c      	ldr	r2, [pc, #48]	@ (8022890 <global_stdio_init.part.0+0x38>)
 8022860:	601a      	str	r2, [r3, #0]
 8022862:	4620      	mov	r0, r4
 8022864:	2200      	movs	r2, #0
 8022866:	2104      	movs	r1, #4
 8022868:	f7ff ff94 	bl	8022794 <std>
 802286c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022870:	2201      	movs	r2, #1
 8022872:	2109      	movs	r1, #9
 8022874:	f7ff ff8e 	bl	8022794 <std>
 8022878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802287c:	2202      	movs	r2, #2
 802287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022882:	2112      	movs	r1, #18
 8022884:	f7ff bf86 	b.w	8022794 <std>
 8022888:	200101b8 	.word	0x200101b8
 802288c:	20010080 	.word	0x20010080
 8022890:	08022801 	.word	0x08022801

08022894 <__sfp_lock_acquire>:
 8022894:	4801      	ldr	r0, [pc, #4]	@ (802289c <__sfp_lock_acquire+0x8>)
 8022896:	f000 ba6c 	b.w	8022d72 <__retarget_lock_acquire_recursive>
 802289a:	bf00      	nop
 802289c:	200101bd 	.word	0x200101bd

080228a0 <__sfp_lock_release>:
 80228a0:	4801      	ldr	r0, [pc, #4]	@ (80228a8 <__sfp_lock_release+0x8>)
 80228a2:	f000 ba67 	b.w	8022d74 <__retarget_lock_release_recursive>
 80228a6:	bf00      	nop
 80228a8:	200101bd 	.word	0x200101bd

080228ac <__sinit>:
 80228ac:	b510      	push	{r4, lr}
 80228ae:	4604      	mov	r4, r0
 80228b0:	f7ff fff0 	bl	8022894 <__sfp_lock_acquire>
 80228b4:	6a23      	ldr	r3, [r4, #32]
 80228b6:	b11b      	cbz	r3, 80228c0 <__sinit+0x14>
 80228b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228bc:	f7ff bff0 	b.w	80228a0 <__sfp_lock_release>
 80228c0:	4b04      	ldr	r3, [pc, #16]	@ (80228d4 <__sinit+0x28>)
 80228c2:	6223      	str	r3, [r4, #32]
 80228c4:	4b04      	ldr	r3, [pc, #16]	@ (80228d8 <__sinit+0x2c>)
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	d1f5      	bne.n	80228b8 <__sinit+0xc>
 80228cc:	f7ff ffc4 	bl	8022858 <global_stdio_init.part.0>
 80228d0:	e7f2      	b.n	80228b8 <__sinit+0xc>
 80228d2:	bf00      	nop
 80228d4:	08022819 	.word	0x08022819
 80228d8:	200101b8 	.word	0x200101b8

080228dc <_fwalk_sglue>:
 80228dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228e0:	4607      	mov	r7, r0
 80228e2:	4688      	mov	r8, r1
 80228e4:	4614      	mov	r4, r2
 80228e6:	2600      	movs	r6, #0
 80228e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80228ec:	f1b9 0901 	subs.w	r9, r9, #1
 80228f0:	d505      	bpl.n	80228fe <_fwalk_sglue+0x22>
 80228f2:	6824      	ldr	r4, [r4, #0]
 80228f4:	2c00      	cmp	r4, #0
 80228f6:	d1f7      	bne.n	80228e8 <_fwalk_sglue+0xc>
 80228f8:	4630      	mov	r0, r6
 80228fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80228fe:	89ab      	ldrh	r3, [r5, #12]
 8022900:	2b01      	cmp	r3, #1
 8022902:	d907      	bls.n	8022914 <_fwalk_sglue+0x38>
 8022904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022908:	3301      	adds	r3, #1
 802290a:	d003      	beq.n	8022914 <_fwalk_sglue+0x38>
 802290c:	4629      	mov	r1, r5
 802290e:	4638      	mov	r0, r7
 8022910:	47c0      	blx	r8
 8022912:	4306      	orrs	r6, r0
 8022914:	3568      	adds	r5, #104	@ 0x68
 8022916:	e7e9      	b.n	80228ec <_fwalk_sglue+0x10>

08022918 <iprintf>:
 8022918:	b40f      	push	{r0, r1, r2, r3}
 802291a:	b507      	push	{r0, r1, r2, lr}
 802291c:	4906      	ldr	r1, [pc, #24]	@ (8022938 <iprintf+0x20>)
 802291e:	ab04      	add	r3, sp, #16
 8022920:	6808      	ldr	r0, [r1, #0]
 8022922:	f853 2b04 	ldr.w	r2, [r3], #4
 8022926:	6881      	ldr	r1, [r0, #8]
 8022928:	9301      	str	r3, [sp, #4]
 802292a:	f000 fcdb 	bl	80232e4 <_vfiprintf_r>
 802292e:	b003      	add	sp, #12
 8022930:	f85d eb04 	ldr.w	lr, [sp], #4
 8022934:	b004      	add	sp, #16
 8022936:	4770      	bx	lr
 8022938:	20000050 	.word	0x20000050

0802293c <_puts_r>:
 802293c:	6a03      	ldr	r3, [r0, #32]
 802293e:	b570      	push	{r4, r5, r6, lr}
 8022940:	6884      	ldr	r4, [r0, #8]
 8022942:	4605      	mov	r5, r0
 8022944:	460e      	mov	r6, r1
 8022946:	b90b      	cbnz	r3, 802294c <_puts_r+0x10>
 8022948:	f7ff ffb0 	bl	80228ac <__sinit>
 802294c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802294e:	07db      	lsls	r3, r3, #31
 8022950:	d405      	bmi.n	802295e <_puts_r+0x22>
 8022952:	89a3      	ldrh	r3, [r4, #12]
 8022954:	0598      	lsls	r0, r3, #22
 8022956:	d402      	bmi.n	802295e <_puts_r+0x22>
 8022958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802295a:	f000 fa0a 	bl	8022d72 <__retarget_lock_acquire_recursive>
 802295e:	89a3      	ldrh	r3, [r4, #12]
 8022960:	0719      	lsls	r1, r3, #28
 8022962:	d502      	bpl.n	802296a <_puts_r+0x2e>
 8022964:	6923      	ldr	r3, [r4, #16]
 8022966:	2b00      	cmp	r3, #0
 8022968:	d135      	bne.n	80229d6 <_puts_r+0x9a>
 802296a:	4621      	mov	r1, r4
 802296c:	4628      	mov	r0, r5
 802296e:	f000 f8e5 	bl	8022b3c <__swsetup_r>
 8022972:	b380      	cbz	r0, 80229d6 <_puts_r+0x9a>
 8022974:	f04f 35ff 	mov.w	r5, #4294967295
 8022978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802297a:	07da      	lsls	r2, r3, #31
 802297c:	d405      	bmi.n	802298a <_puts_r+0x4e>
 802297e:	89a3      	ldrh	r3, [r4, #12]
 8022980:	059b      	lsls	r3, r3, #22
 8022982:	d402      	bmi.n	802298a <_puts_r+0x4e>
 8022984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022986:	f000 f9f5 	bl	8022d74 <__retarget_lock_release_recursive>
 802298a:	4628      	mov	r0, r5
 802298c:	bd70      	pop	{r4, r5, r6, pc}
 802298e:	2b00      	cmp	r3, #0
 8022990:	da04      	bge.n	802299c <_puts_r+0x60>
 8022992:	69a2      	ldr	r2, [r4, #24]
 8022994:	429a      	cmp	r2, r3
 8022996:	dc17      	bgt.n	80229c8 <_puts_r+0x8c>
 8022998:	290a      	cmp	r1, #10
 802299a:	d015      	beq.n	80229c8 <_puts_r+0x8c>
 802299c:	6823      	ldr	r3, [r4, #0]
 802299e:	1c5a      	adds	r2, r3, #1
 80229a0:	6022      	str	r2, [r4, #0]
 80229a2:	7019      	strb	r1, [r3, #0]
 80229a4:	68a3      	ldr	r3, [r4, #8]
 80229a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80229aa:	3b01      	subs	r3, #1
 80229ac:	60a3      	str	r3, [r4, #8]
 80229ae:	2900      	cmp	r1, #0
 80229b0:	d1ed      	bne.n	802298e <_puts_r+0x52>
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	da11      	bge.n	80229da <_puts_r+0x9e>
 80229b6:	4622      	mov	r2, r4
 80229b8:	210a      	movs	r1, #10
 80229ba:	4628      	mov	r0, r5
 80229bc:	f000 f87f 	bl	8022abe <__swbuf_r>
 80229c0:	3001      	adds	r0, #1
 80229c2:	d0d7      	beq.n	8022974 <_puts_r+0x38>
 80229c4:	250a      	movs	r5, #10
 80229c6:	e7d7      	b.n	8022978 <_puts_r+0x3c>
 80229c8:	4622      	mov	r2, r4
 80229ca:	4628      	mov	r0, r5
 80229cc:	f000 f877 	bl	8022abe <__swbuf_r>
 80229d0:	3001      	adds	r0, #1
 80229d2:	d1e7      	bne.n	80229a4 <_puts_r+0x68>
 80229d4:	e7ce      	b.n	8022974 <_puts_r+0x38>
 80229d6:	3e01      	subs	r6, #1
 80229d8:	e7e4      	b.n	80229a4 <_puts_r+0x68>
 80229da:	6823      	ldr	r3, [r4, #0]
 80229dc:	1c5a      	adds	r2, r3, #1
 80229de:	6022      	str	r2, [r4, #0]
 80229e0:	220a      	movs	r2, #10
 80229e2:	701a      	strb	r2, [r3, #0]
 80229e4:	e7ee      	b.n	80229c4 <_puts_r+0x88>
	...

080229e8 <puts>:
 80229e8:	4b02      	ldr	r3, [pc, #8]	@ (80229f4 <puts+0xc>)
 80229ea:	4601      	mov	r1, r0
 80229ec:	6818      	ldr	r0, [r3, #0]
 80229ee:	f7ff bfa5 	b.w	802293c <_puts_r>
 80229f2:	bf00      	nop
 80229f4:	20000050 	.word	0x20000050

080229f8 <siprintf>:
 80229f8:	b40e      	push	{r1, r2, r3}
 80229fa:	b500      	push	{lr}
 80229fc:	b09c      	sub	sp, #112	@ 0x70
 80229fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8022a00:	9002      	str	r0, [sp, #8]
 8022a02:	9006      	str	r0, [sp, #24]
 8022a04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8022a08:	4809      	ldr	r0, [pc, #36]	@ (8022a30 <siprintf+0x38>)
 8022a0a:	9107      	str	r1, [sp, #28]
 8022a0c:	9104      	str	r1, [sp, #16]
 8022a0e:	4909      	ldr	r1, [pc, #36]	@ (8022a34 <siprintf+0x3c>)
 8022a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a14:	9105      	str	r1, [sp, #20]
 8022a16:	6800      	ldr	r0, [r0, #0]
 8022a18:	9301      	str	r3, [sp, #4]
 8022a1a:	a902      	add	r1, sp, #8
 8022a1c:	f000 fb3c 	bl	8023098 <_svfiprintf_r>
 8022a20:	9b02      	ldr	r3, [sp, #8]
 8022a22:	2200      	movs	r2, #0
 8022a24:	701a      	strb	r2, [r3, #0]
 8022a26:	b01c      	add	sp, #112	@ 0x70
 8022a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a2c:	b003      	add	sp, #12
 8022a2e:	4770      	bx	lr
 8022a30:	20000050 	.word	0x20000050
 8022a34:	ffff0208 	.word	0xffff0208

08022a38 <__sread>:
 8022a38:	b510      	push	{r4, lr}
 8022a3a:	460c      	mov	r4, r1
 8022a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a40:	f000 f948 	bl	8022cd4 <_read_r>
 8022a44:	2800      	cmp	r0, #0
 8022a46:	bfab      	itete	ge
 8022a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8022a4c:	181b      	addge	r3, r3, r0
 8022a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022a52:	bfac      	ite	ge
 8022a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022a56:	81a3      	strhlt	r3, [r4, #12]
 8022a58:	bd10      	pop	{r4, pc}

08022a5a <__swrite>:
 8022a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a5e:	461f      	mov	r7, r3
 8022a60:	898b      	ldrh	r3, [r1, #12]
 8022a62:	05db      	lsls	r3, r3, #23
 8022a64:	4605      	mov	r5, r0
 8022a66:	460c      	mov	r4, r1
 8022a68:	4616      	mov	r6, r2
 8022a6a:	d505      	bpl.n	8022a78 <__swrite+0x1e>
 8022a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a70:	2302      	movs	r3, #2
 8022a72:	2200      	movs	r2, #0
 8022a74:	f000 f91c 	bl	8022cb0 <_lseek_r>
 8022a78:	89a3      	ldrh	r3, [r4, #12]
 8022a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022a82:	81a3      	strh	r3, [r4, #12]
 8022a84:	4632      	mov	r2, r6
 8022a86:	463b      	mov	r3, r7
 8022a88:	4628      	mov	r0, r5
 8022a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022a8e:	f000 b933 	b.w	8022cf8 <_write_r>

08022a92 <__sseek>:
 8022a92:	b510      	push	{r4, lr}
 8022a94:	460c      	mov	r4, r1
 8022a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a9a:	f000 f909 	bl	8022cb0 <_lseek_r>
 8022a9e:	1c43      	adds	r3, r0, #1
 8022aa0:	89a3      	ldrh	r3, [r4, #12]
 8022aa2:	bf15      	itete	ne
 8022aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022aae:	81a3      	strheq	r3, [r4, #12]
 8022ab0:	bf18      	it	ne
 8022ab2:	81a3      	strhne	r3, [r4, #12]
 8022ab4:	bd10      	pop	{r4, pc}

08022ab6 <__sclose>:
 8022ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022aba:	f000 b8e9 	b.w	8022c90 <_close_r>

08022abe <__swbuf_r>:
 8022abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ac0:	460e      	mov	r6, r1
 8022ac2:	4614      	mov	r4, r2
 8022ac4:	4605      	mov	r5, r0
 8022ac6:	b118      	cbz	r0, 8022ad0 <__swbuf_r+0x12>
 8022ac8:	6a03      	ldr	r3, [r0, #32]
 8022aca:	b90b      	cbnz	r3, 8022ad0 <__swbuf_r+0x12>
 8022acc:	f7ff feee 	bl	80228ac <__sinit>
 8022ad0:	69a3      	ldr	r3, [r4, #24]
 8022ad2:	60a3      	str	r3, [r4, #8]
 8022ad4:	89a3      	ldrh	r3, [r4, #12]
 8022ad6:	071a      	lsls	r2, r3, #28
 8022ad8:	d501      	bpl.n	8022ade <__swbuf_r+0x20>
 8022ada:	6923      	ldr	r3, [r4, #16]
 8022adc:	b943      	cbnz	r3, 8022af0 <__swbuf_r+0x32>
 8022ade:	4621      	mov	r1, r4
 8022ae0:	4628      	mov	r0, r5
 8022ae2:	f000 f82b 	bl	8022b3c <__swsetup_r>
 8022ae6:	b118      	cbz	r0, 8022af0 <__swbuf_r+0x32>
 8022ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8022aec:	4638      	mov	r0, r7
 8022aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022af0:	6823      	ldr	r3, [r4, #0]
 8022af2:	6922      	ldr	r2, [r4, #16]
 8022af4:	1a98      	subs	r0, r3, r2
 8022af6:	6963      	ldr	r3, [r4, #20]
 8022af8:	b2f6      	uxtb	r6, r6
 8022afa:	4283      	cmp	r3, r0
 8022afc:	4637      	mov	r7, r6
 8022afe:	dc05      	bgt.n	8022b0c <__swbuf_r+0x4e>
 8022b00:	4621      	mov	r1, r4
 8022b02:	4628      	mov	r0, r5
 8022b04:	f000 ff18 	bl	8023938 <_fflush_r>
 8022b08:	2800      	cmp	r0, #0
 8022b0a:	d1ed      	bne.n	8022ae8 <__swbuf_r+0x2a>
 8022b0c:	68a3      	ldr	r3, [r4, #8]
 8022b0e:	3b01      	subs	r3, #1
 8022b10:	60a3      	str	r3, [r4, #8]
 8022b12:	6823      	ldr	r3, [r4, #0]
 8022b14:	1c5a      	adds	r2, r3, #1
 8022b16:	6022      	str	r2, [r4, #0]
 8022b18:	701e      	strb	r6, [r3, #0]
 8022b1a:	6962      	ldr	r2, [r4, #20]
 8022b1c:	1c43      	adds	r3, r0, #1
 8022b1e:	429a      	cmp	r2, r3
 8022b20:	d004      	beq.n	8022b2c <__swbuf_r+0x6e>
 8022b22:	89a3      	ldrh	r3, [r4, #12]
 8022b24:	07db      	lsls	r3, r3, #31
 8022b26:	d5e1      	bpl.n	8022aec <__swbuf_r+0x2e>
 8022b28:	2e0a      	cmp	r6, #10
 8022b2a:	d1df      	bne.n	8022aec <__swbuf_r+0x2e>
 8022b2c:	4621      	mov	r1, r4
 8022b2e:	4628      	mov	r0, r5
 8022b30:	f000 ff02 	bl	8023938 <_fflush_r>
 8022b34:	2800      	cmp	r0, #0
 8022b36:	d0d9      	beq.n	8022aec <__swbuf_r+0x2e>
 8022b38:	e7d6      	b.n	8022ae8 <__swbuf_r+0x2a>
	...

08022b3c <__swsetup_r>:
 8022b3c:	b538      	push	{r3, r4, r5, lr}
 8022b3e:	4b29      	ldr	r3, [pc, #164]	@ (8022be4 <__swsetup_r+0xa8>)
 8022b40:	4605      	mov	r5, r0
 8022b42:	6818      	ldr	r0, [r3, #0]
 8022b44:	460c      	mov	r4, r1
 8022b46:	b118      	cbz	r0, 8022b50 <__swsetup_r+0x14>
 8022b48:	6a03      	ldr	r3, [r0, #32]
 8022b4a:	b90b      	cbnz	r3, 8022b50 <__swsetup_r+0x14>
 8022b4c:	f7ff feae 	bl	80228ac <__sinit>
 8022b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b54:	0719      	lsls	r1, r3, #28
 8022b56:	d422      	bmi.n	8022b9e <__swsetup_r+0x62>
 8022b58:	06da      	lsls	r2, r3, #27
 8022b5a:	d407      	bmi.n	8022b6c <__swsetup_r+0x30>
 8022b5c:	2209      	movs	r2, #9
 8022b5e:	602a      	str	r2, [r5, #0]
 8022b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022b64:	81a3      	strh	r3, [r4, #12]
 8022b66:	f04f 30ff 	mov.w	r0, #4294967295
 8022b6a:	e033      	b.n	8022bd4 <__swsetup_r+0x98>
 8022b6c:	0758      	lsls	r0, r3, #29
 8022b6e:	d512      	bpl.n	8022b96 <__swsetup_r+0x5a>
 8022b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022b72:	b141      	cbz	r1, 8022b86 <__swsetup_r+0x4a>
 8022b74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022b78:	4299      	cmp	r1, r3
 8022b7a:	d002      	beq.n	8022b82 <__swsetup_r+0x46>
 8022b7c:	4628      	mov	r0, r5
 8022b7e:	f000 f92f 	bl	8022de0 <_free_r>
 8022b82:	2300      	movs	r3, #0
 8022b84:	6363      	str	r3, [r4, #52]	@ 0x34
 8022b86:	89a3      	ldrh	r3, [r4, #12]
 8022b88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022b8c:	81a3      	strh	r3, [r4, #12]
 8022b8e:	2300      	movs	r3, #0
 8022b90:	6063      	str	r3, [r4, #4]
 8022b92:	6923      	ldr	r3, [r4, #16]
 8022b94:	6023      	str	r3, [r4, #0]
 8022b96:	89a3      	ldrh	r3, [r4, #12]
 8022b98:	f043 0308 	orr.w	r3, r3, #8
 8022b9c:	81a3      	strh	r3, [r4, #12]
 8022b9e:	6923      	ldr	r3, [r4, #16]
 8022ba0:	b94b      	cbnz	r3, 8022bb6 <__swsetup_r+0x7a>
 8022ba2:	89a3      	ldrh	r3, [r4, #12]
 8022ba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022bac:	d003      	beq.n	8022bb6 <__swsetup_r+0x7a>
 8022bae:	4621      	mov	r1, r4
 8022bb0:	4628      	mov	r0, r5
 8022bb2:	f000 ff21 	bl	80239f8 <__smakebuf_r>
 8022bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022bba:	f013 0201 	ands.w	r2, r3, #1
 8022bbe:	d00a      	beq.n	8022bd6 <__swsetup_r+0x9a>
 8022bc0:	2200      	movs	r2, #0
 8022bc2:	60a2      	str	r2, [r4, #8]
 8022bc4:	6962      	ldr	r2, [r4, #20]
 8022bc6:	4252      	negs	r2, r2
 8022bc8:	61a2      	str	r2, [r4, #24]
 8022bca:	6922      	ldr	r2, [r4, #16]
 8022bcc:	b942      	cbnz	r2, 8022be0 <__swsetup_r+0xa4>
 8022bce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022bd2:	d1c5      	bne.n	8022b60 <__swsetup_r+0x24>
 8022bd4:	bd38      	pop	{r3, r4, r5, pc}
 8022bd6:	0799      	lsls	r1, r3, #30
 8022bd8:	bf58      	it	pl
 8022bda:	6962      	ldrpl	r2, [r4, #20]
 8022bdc:	60a2      	str	r2, [r4, #8]
 8022bde:	e7f4      	b.n	8022bca <__swsetup_r+0x8e>
 8022be0:	2000      	movs	r0, #0
 8022be2:	e7f7      	b.n	8022bd4 <__swsetup_r+0x98>
 8022be4:	20000050 	.word	0x20000050

08022be8 <memcmp>:
 8022be8:	b510      	push	{r4, lr}
 8022bea:	3901      	subs	r1, #1
 8022bec:	4402      	add	r2, r0
 8022bee:	4290      	cmp	r0, r2
 8022bf0:	d101      	bne.n	8022bf6 <memcmp+0xe>
 8022bf2:	2000      	movs	r0, #0
 8022bf4:	e005      	b.n	8022c02 <memcmp+0x1a>
 8022bf6:	7803      	ldrb	r3, [r0, #0]
 8022bf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022bfc:	42a3      	cmp	r3, r4
 8022bfe:	d001      	beq.n	8022c04 <memcmp+0x1c>
 8022c00:	1b18      	subs	r0, r3, r4
 8022c02:	bd10      	pop	{r4, pc}
 8022c04:	3001      	adds	r0, #1
 8022c06:	e7f2      	b.n	8022bee <memcmp+0x6>

08022c08 <memmove>:
 8022c08:	4288      	cmp	r0, r1
 8022c0a:	b510      	push	{r4, lr}
 8022c0c:	eb01 0402 	add.w	r4, r1, r2
 8022c10:	d902      	bls.n	8022c18 <memmove+0x10>
 8022c12:	4284      	cmp	r4, r0
 8022c14:	4623      	mov	r3, r4
 8022c16:	d807      	bhi.n	8022c28 <memmove+0x20>
 8022c18:	1e43      	subs	r3, r0, #1
 8022c1a:	42a1      	cmp	r1, r4
 8022c1c:	d008      	beq.n	8022c30 <memmove+0x28>
 8022c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c26:	e7f8      	b.n	8022c1a <memmove+0x12>
 8022c28:	4402      	add	r2, r0
 8022c2a:	4601      	mov	r1, r0
 8022c2c:	428a      	cmp	r2, r1
 8022c2e:	d100      	bne.n	8022c32 <memmove+0x2a>
 8022c30:	bd10      	pop	{r4, pc}
 8022c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022c3a:	e7f7      	b.n	8022c2c <memmove+0x24>

08022c3c <memset>:
 8022c3c:	4402      	add	r2, r0
 8022c3e:	4603      	mov	r3, r0
 8022c40:	4293      	cmp	r3, r2
 8022c42:	d100      	bne.n	8022c46 <memset+0xa>
 8022c44:	4770      	bx	lr
 8022c46:	f803 1b01 	strb.w	r1, [r3], #1
 8022c4a:	e7f9      	b.n	8022c40 <memset+0x4>

08022c4c <strcat>:
 8022c4c:	b510      	push	{r4, lr}
 8022c4e:	4602      	mov	r2, r0
 8022c50:	7814      	ldrb	r4, [r2, #0]
 8022c52:	4613      	mov	r3, r2
 8022c54:	3201      	adds	r2, #1
 8022c56:	2c00      	cmp	r4, #0
 8022c58:	d1fa      	bne.n	8022c50 <strcat+0x4>
 8022c5a:	3b01      	subs	r3, #1
 8022c5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c64:	2a00      	cmp	r2, #0
 8022c66:	d1f9      	bne.n	8022c5c <strcat+0x10>
 8022c68:	bd10      	pop	{r4, pc}

08022c6a <strncmp>:
 8022c6a:	b510      	push	{r4, lr}
 8022c6c:	b16a      	cbz	r2, 8022c8a <strncmp+0x20>
 8022c6e:	3901      	subs	r1, #1
 8022c70:	1884      	adds	r4, r0, r2
 8022c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022c76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022c7a:	429a      	cmp	r2, r3
 8022c7c:	d103      	bne.n	8022c86 <strncmp+0x1c>
 8022c7e:	42a0      	cmp	r0, r4
 8022c80:	d001      	beq.n	8022c86 <strncmp+0x1c>
 8022c82:	2a00      	cmp	r2, #0
 8022c84:	d1f5      	bne.n	8022c72 <strncmp+0x8>
 8022c86:	1ad0      	subs	r0, r2, r3
 8022c88:	bd10      	pop	{r4, pc}
 8022c8a:	4610      	mov	r0, r2
 8022c8c:	e7fc      	b.n	8022c88 <strncmp+0x1e>
	...

08022c90 <_close_r>:
 8022c90:	b538      	push	{r3, r4, r5, lr}
 8022c92:	4d06      	ldr	r5, [pc, #24]	@ (8022cac <_close_r+0x1c>)
 8022c94:	2300      	movs	r3, #0
 8022c96:	4604      	mov	r4, r0
 8022c98:	4608      	mov	r0, r1
 8022c9a:	602b      	str	r3, [r5, #0]
 8022c9c:	f7df fabe 	bl	800221c <_close>
 8022ca0:	1c43      	adds	r3, r0, #1
 8022ca2:	d102      	bne.n	8022caa <_close_r+0x1a>
 8022ca4:	682b      	ldr	r3, [r5, #0]
 8022ca6:	b103      	cbz	r3, 8022caa <_close_r+0x1a>
 8022ca8:	6023      	str	r3, [r4, #0]
 8022caa:	bd38      	pop	{r3, r4, r5, pc}
 8022cac:	20010078 	.word	0x20010078

08022cb0 <_lseek_r>:
 8022cb0:	b538      	push	{r3, r4, r5, lr}
 8022cb2:	4d07      	ldr	r5, [pc, #28]	@ (8022cd0 <_lseek_r+0x20>)
 8022cb4:	4604      	mov	r4, r0
 8022cb6:	4608      	mov	r0, r1
 8022cb8:	4611      	mov	r1, r2
 8022cba:	2200      	movs	r2, #0
 8022cbc:	602a      	str	r2, [r5, #0]
 8022cbe:	461a      	mov	r2, r3
 8022cc0:	f7df fad3 	bl	800226a <_lseek>
 8022cc4:	1c43      	adds	r3, r0, #1
 8022cc6:	d102      	bne.n	8022cce <_lseek_r+0x1e>
 8022cc8:	682b      	ldr	r3, [r5, #0]
 8022cca:	b103      	cbz	r3, 8022cce <_lseek_r+0x1e>
 8022ccc:	6023      	str	r3, [r4, #0]
 8022cce:	bd38      	pop	{r3, r4, r5, pc}
 8022cd0:	20010078 	.word	0x20010078

08022cd4 <_read_r>:
 8022cd4:	b538      	push	{r3, r4, r5, lr}
 8022cd6:	4d07      	ldr	r5, [pc, #28]	@ (8022cf4 <_read_r+0x20>)
 8022cd8:	4604      	mov	r4, r0
 8022cda:	4608      	mov	r0, r1
 8022cdc:	4611      	mov	r1, r2
 8022cde:	2200      	movs	r2, #0
 8022ce0:	602a      	str	r2, [r5, #0]
 8022ce2:	461a      	mov	r2, r3
 8022ce4:	f7df fa7d 	bl	80021e2 <_read>
 8022ce8:	1c43      	adds	r3, r0, #1
 8022cea:	d102      	bne.n	8022cf2 <_read_r+0x1e>
 8022cec:	682b      	ldr	r3, [r5, #0]
 8022cee:	b103      	cbz	r3, 8022cf2 <_read_r+0x1e>
 8022cf0:	6023      	str	r3, [r4, #0]
 8022cf2:	bd38      	pop	{r3, r4, r5, pc}
 8022cf4:	20010078 	.word	0x20010078

08022cf8 <_write_r>:
 8022cf8:	b538      	push	{r3, r4, r5, lr}
 8022cfa:	4d07      	ldr	r5, [pc, #28]	@ (8022d18 <_write_r+0x20>)
 8022cfc:	4604      	mov	r4, r0
 8022cfe:	4608      	mov	r0, r1
 8022d00:	4611      	mov	r1, r2
 8022d02:	2200      	movs	r2, #0
 8022d04:	602a      	str	r2, [r5, #0]
 8022d06:	461a      	mov	r2, r3
 8022d08:	f7dd fdba 	bl	8000880 <_write>
 8022d0c:	1c43      	adds	r3, r0, #1
 8022d0e:	d102      	bne.n	8022d16 <_write_r+0x1e>
 8022d10:	682b      	ldr	r3, [r5, #0]
 8022d12:	b103      	cbz	r3, 8022d16 <_write_r+0x1e>
 8022d14:	6023      	str	r3, [r4, #0]
 8022d16:	bd38      	pop	{r3, r4, r5, pc}
 8022d18:	20010078 	.word	0x20010078

08022d1c <__errno>:
 8022d1c:	4b01      	ldr	r3, [pc, #4]	@ (8022d24 <__errno+0x8>)
 8022d1e:	6818      	ldr	r0, [r3, #0]
 8022d20:	4770      	bx	lr
 8022d22:	bf00      	nop
 8022d24:	20000050 	.word	0x20000050

08022d28 <__libc_init_array>:
 8022d28:	b570      	push	{r4, r5, r6, lr}
 8022d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8022d60 <__libc_init_array+0x38>)
 8022d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8022d64 <__libc_init_array+0x3c>)
 8022d2e:	1b64      	subs	r4, r4, r5
 8022d30:	10a4      	asrs	r4, r4, #2
 8022d32:	2600      	movs	r6, #0
 8022d34:	42a6      	cmp	r6, r4
 8022d36:	d109      	bne.n	8022d4c <__libc_init_array+0x24>
 8022d38:	4d0b      	ldr	r5, [pc, #44]	@ (8022d68 <__libc_init_array+0x40>)
 8022d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8022d6c <__libc_init_array+0x44>)
 8022d3c:	f000 ff4c 	bl	8023bd8 <_init>
 8022d40:	1b64      	subs	r4, r4, r5
 8022d42:	10a4      	asrs	r4, r4, #2
 8022d44:	2600      	movs	r6, #0
 8022d46:	42a6      	cmp	r6, r4
 8022d48:	d105      	bne.n	8022d56 <__libc_init_array+0x2e>
 8022d4a:	bd70      	pop	{r4, r5, r6, pc}
 8022d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d50:	4798      	blx	r3
 8022d52:	3601      	adds	r6, #1
 8022d54:	e7ee      	b.n	8022d34 <__libc_init_array+0xc>
 8022d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d5a:	4798      	blx	r3
 8022d5c:	3601      	adds	r6, #1
 8022d5e:	e7f2      	b.n	8022d46 <__libc_init_array+0x1e>
 8022d60:	08038fdc 	.word	0x08038fdc
 8022d64:	08038fdc 	.word	0x08038fdc
 8022d68:	08038fdc 	.word	0x08038fdc
 8022d6c:	08038fe0 	.word	0x08038fe0

08022d70 <__retarget_lock_init_recursive>:
 8022d70:	4770      	bx	lr

08022d72 <__retarget_lock_acquire_recursive>:
 8022d72:	4770      	bx	lr

08022d74 <__retarget_lock_release_recursive>:
 8022d74:	4770      	bx	lr

08022d76 <strcpy>:
 8022d76:	4603      	mov	r3, r0
 8022d78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d7c:	f803 2b01 	strb.w	r2, [r3], #1
 8022d80:	2a00      	cmp	r2, #0
 8022d82:	d1f9      	bne.n	8022d78 <strcpy+0x2>
 8022d84:	4770      	bx	lr

08022d86 <memcpy>:
 8022d86:	440a      	add	r2, r1
 8022d88:	4291      	cmp	r1, r2
 8022d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8022d8e:	d100      	bne.n	8022d92 <memcpy+0xc>
 8022d90:	4770      	bx	lr
 8022d92:	b510      	push	{r4, lr}
 8022d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022d9c:	4291      	cmp	r1, r2
 8022d9e:	d1f9      	bne.n	8022d94 <memcpy+0xe>
 8022da0:	bd10      	pop	{r4, pc}
	...

08022da4 <__assert_func>:
 8022da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022da6:	4614      	mov	r4, r2
 8022da8:	461a      	mov	r2, r3
 8022daa:	4b09      	ldr	r3, [pc, #36]	@ (8022dd0 <__assert_func+0x2c>)
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	4605      	mov	r5, r0
 8022db0:	68d8      	ldr	r0, [r3, #12]
 8022db2:	b954      	cbnz	r4, 8022dca <__assert_func+0x26>
 8022db4:	4b07      	ldr	r3, [pc, #28]	@ (8022dd4 <__assert_func+0x30>)
 8022db6:	461c      	mov	r4, r3
 8022db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dbc:	9100      	str	r1, [sp, #0]
 8022dbe:	462b      	mov	r3, r5
 8022dc0:	4905      	ldr	r1, [pc, #20]	@ (8022dd8 <__assert_func+0x34>)
 8022dc2:	f000 fde1 	bl	8023988 <fiprintf>
 8022dc6:	f000 fe85 	bl	8023ad4 <abort>
 8022dca:	4b04      	ldr	r3, [pc, #16]	@ (8022ddc <__assert_func+0x38>)
 8022dcc:	e7f4      	b.n	8022db8 <__assert_func+0x14>
 8022dce:	bf00      	nop
 8022dd0:	20000050 	.word	0x20000050
 8022dd4:	08038f9f 	.word	0x08038f9f
 8022dd8:	08038f71 	.word	0x08038f71
 8022ddc:	08038f64 	.word	0x08038f64

08022de0 <_free_r>:
 8022de0:	b538      	push	{r3, r4, r5, lr}
 8022de2:	4605      	mov	r5, r0
 8022de4:	2900      	cmp	r1, #0
 8022de6:	d041      	beq.n	8022e6c <_free_r+0x8c>
 8022de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022dec:	1f0c      	subs	r4, r1, #4
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	bfb8      	it	lt
 8022df2:	18e4      	addlt	r4, r4, r3
 8022df4:	f000 f8e8 	bl	8022fc8 <__malloc_lock>
 8022df8:	4a1d      	ldr	r2, [pc, #116]	@ (8022e70 <_free_r+0x90>)
 8022dfa:	6813      	ldr	r3, [r2, #0]
 8022dfc:	b933      	cbnz	r3, 8022e0c <_free_r+0x2c>
 8022dfe:	6063      	str	r3, [r4, #4]
 8022e00:	6014      	str	r4, [r2, #0]
 8022e02:	4628      	mov	r0, r5
 8022e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022e08:	f000 b8e4 	b.w	8022fd4 <__malloc_unlock>
 8022e0c:	42a3      	cmp	r3, r4
 8022e0e:	d908      	bls.n	8022e22 <_free_r+0x42>
 8022e10:	6820      	ldr	r0, [r4, #0]
 8022e12:	1821      	adds	r1, r4, r0
 8022e14:	428b      	cmp	r3, r1
 8022e16:	bf01      	itttt	eq
 8022e18:	6819      	ldreq	r1, [r3, #0]
 8022e1a:	685b      	ldreq	r3, [r3, #4]
 8022e1c:	1809      	addeq	r1, r1, r0
 8022e1e:	6021      	streq	r1, [r4, #0]
 8022e20:	e7ed      	b.n	8022dfe <_free_r+0x1e>
 8022e22:	461a      	mov	r2, r3
 8022e24:	685b      	ldr	r3, [r3, #4]
 8022e26:	b10b      	cbz	r3, 8022e2c <_free_r+0x4c>
 8022e28:	42a3      	cmp	r3, r4
 8022e2a:	d9fa      	bls.n	8022e22 <_free_r+0x42>
 8022e2c:	6811      	ldr	r1, [r2, #0]
 8022e2e:	1850      	adds	r0, r2, r1
 8022e30:	42a0      	cmp	r0, r4
 8022e32:	d10b      	bne.n	8022e4c <_free_r+0x6c>
 8022e34:	6820      	ldr	r0, [r4, #0]
 8022e36:	4401      	add	r1, r0
 8022e38:	1850      	adds	r0, r2, r1
 8022e3a:	4283      	cmp	r3, r0
 8022e3c:	6011      	str	r1, [r2, #0]
 8022e3e:	d1e0      	bne.n	8022e02 <_free_r+0x22>
 8022e40:	6818      	ldr	r0, [r3, #0]
 8022e42:	685b      	ldr	r3, [r3, #4]
 8022e44:	6053      	str	r3, [r2, #4]
 8022e46:	4408      	add	r0, r1
 8022e48:	6010      	str	r0, [r2, #0]
 8022e4a:	e7da      	b.n	8022e02 <_free_r+0x22>
 8022e4c:	d902      	bls.n	8022e54 <_free_r+0x74>
 8022e4e:	230c      	movs	r3, #12
 8022e50:	602b      	str	r3, [r5, #0]
 8022e52:	e7d6      	b.n	8022e02 <_free_r+0x22>
 8022e54:	6820      	ldr	r0, [r4, #0]
 8022e56:	1821      	adds	r1, r4, r0
 8022e58:	428b      	cmp	r3, r1
 8022e5a:	bf04      	itt	eq
 8022e5c:	6819      	ldreq	r1, [r3, #0]
 8022e5e:	685b      	ldreq	r3, [r3, #4]
 8022e60:	6063      	str	r3, [r4, #4]
 8022e62:	bf04      	itt	eq
 8022e64:	1809      	addeq	r1, r1, r0
 8022e66:	6021      	streq	r1, [r4, #0]
 8022e68:	6054      	str	r4, [r2, #4]
 8022e6a:	e7ca      	b.n	8022e02 <_free_r+0x22>
 8022e6c:	bd38      	pop	{r3, r4, r5, pc}
 8022e6e:	bf00      	nop
 8022e70:	200101c4 	.word	0x200101c4

08022e74 <malloc>:
 8022e74:	4b02      	ldr	r3, [pc, #8]	@ (8022e80 <malloc+0xc>)
 8022e76:	4601      	mov	r1, r0
 8022e78:	6818      	ldr	r0, [r3, #0]
 8022e7a:	f000 b825 	b.w	8022ec8 <_malloc_r>
 8022e7e:	bf00      	nop
 8022e80:	20000050 	.word	0x20000050

08022e84 <sbrk_aligned>:
 8022e84:	b570      	push	{r4, r5, r6, lr}
 8022e86:	4e0f      	ldr	r6, [pc, #60]	@ (8022ec4 <sbrk_aligned+0x40>)
 8022e88:	460c      	mov	r4, r1
 8022e8a:	6831      	ldr	r1, [r6, #0]
 8022e8c:	4605      	mov	r5, r0
 8022e8e:	b911      	cbnz	r1, 8022e96 <sbrk_aligned+0x12>
 8022e90:	f000 fe10 	bl	8023ab4 <_sbrk_r>
 8022e94:	6030      	str	r0, [r6, #0]
 8022e96:	4621      	mov	r1, r4
 8022e98:	4628      	mov	r0, r5
 8022e9a:	f000 fe0b 	bl	8023ab4 <_sbrk_r>
 8022e9e:	1c43      	adds	r3, r0, #1
 8022ea0:	d103      	bne.n	8022eaa <sbrk_aligned+0x26>
 8022ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8022ea6:	4620      	mov	r0, r4
 8022ea8:	bd70      	pop	{r4, r5, r6, pc}
 8022eaa:	1cc4      	adds	r4, r0, #3
 8022eac:	f024 0403 	bic.w	r4, r4, #3
 8022eb0:	42a0      	cmp	r0, r4
 8022eb2:	d0f8      	beq.n	8022ea6 <sbrk_aligned+0x22>
 8022eb4:	1a21      	subs	r1, r4, r0
 8022eb6:	4628      	mov	r0, r5
 8022eb8:	f000 fdfc 	bl	8023ab4 <_sbrk_r>
 8022ebc:	3001      	adds	r0, #1
 8022ebe:	d1f2      	bne.n	8022ea6 <sbrk_aligned+0x22>
 8022ec0:	e7ef      	b.n	8022ea2 <sbrk_aligned+0x1e>
 8022ec2:	bf00      	nop
 8022ec4:	200101c0 	.word	0x200101c0

08022ec8 <_malloc_r>:
 8022ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ecc:	1ccd      	adds	r5, r1, #3
 8022ece:	f025 0503 	bic.w	r5, r5, #3
 8022ed2:	3508      	adds	r5, #8
 8022ed4:	2d0c      	cmp	r5, #12
 8022ed6:	bf38      	it	cc
 8022ed8:	250c      	movcc	r5, #12
 8022eda:	2d00      	cmp	r5, #0
 8022edc:	4606      	mov	r6, r0
 8022ede:	db01      	blt.n	8022ee4 <_malloc_r+0x1c>
 8022ee0:	42a9      	cmp	r1, r5
 8022ee2:	d904      	bls.n	8022eee <_malloc_r+0x26>
 8022ee4:	230c      	movs	r3, #12
 8022ee6:	6033      	str	r3, [r6, #0]
 8022ee8:	2000      	movs	r0, #0
 8022eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022fc4 <_malloc_r+0xfc>
 8022ef2:	f000 f869 	bl	8022fc8 <__malloc_lock>
 8022ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8022efa:	461c      	mov	r4, r3
 8022efc:	bb44      	cbnz	r4, 8022f50 <_malloc_r+0x88>
 8022efe:	4629      	mov	r1, r5
 8022f00:	4630      	mov	r0, r6
 8022f02:	f7ff ffbf 	bl	8022e84 <sbrk_aligned>
 8022f06:	1c43      	adds	r3, r0, #1
 8022f08:	4604      	mov	r4, r0
 8022f0a:	d158      	bne.n	8022fbe <_malloc_r+0xf6>
 8022f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8022f10:	4627      	mov	r7, r4
 8022f12:	2f00      	cmp	r7, #0
 8022f14:	d143      	bne.n	8022f9e <_malloc_r+0xd6>
 8022f16:	2c00      	cmp	r4, #0
 8022f18:	d04b      	beq.n	8022fb2 <_malloc_r+0xea>
 8022f1a:	6823      	ldr	r3, [r4, #0]
 8022f1c:	4639      	mov	r1, r7
 8022f1e:	4630      	mov	r0, r6
 8022f20:	eb04 0903 	add.w	r9, r4, r3
 8022f24:	f000 fdc6 	bl	8023ab4 <_sbrk_r>
 8022f28:	4581      	cmp	r9, r0
 8022f2a:	d142      	bne.n	8022fb2 <_malloc_r+0xea>
 8022f2c:	6821      	ldr	r1, [r4, #0]
 8022f2e:	1a6d      	subs	r5, r5, r1
 8022f30:	4629      	mov	r1, r5
 8022f32:	4630      	mov	r0, r6
 8022f34:	f7ff ffa6 	bl	8022e84 <sbrk_aligned>
 8022f38:	3001      	adds	r0, #1
 8022f3a:	d03a      	beq.n	8022fb2 <_malloc_r+0xea>
 8022f3c:	6823      	ldr	r3, [r4, #0]
 8022f3e:	442b      	add	r3, r5
 8022f40:	6023      	str	r3, [r4, #0]
 8022f42:	f8d8 3000 	ldr.w	r3, [r8]
 8022f46:	685a      	ldr	r2, [r3, #4]
 8022f48:	bb62      	cbnz	r2, 8022fa4 <_malloc_r+0xdc>
 8022f4a:	f8c8 7000 	str.w	r7, [r8]
 8022f4e:	e00f      	b.n	8022f70 <_malloc_r+0xa8>
 8022f50:	6822      	ldr	r2, [r4, #0]
 8022f52:	1b52      	subs	r2, r2, r5
 8022f54:	d420      	bmi.n	8022f98 <_malloc_r+0xd0>
 8022f56:	2a0b      	cmp	r2, #11
 8022f58:	d917      	bls.n	8022f8a <_malloc_r+0xc2>
 8022f5a:	1961      	adds	r1, r4, r5
 8022f5c:	42a3      	cmp	r3, r4
 8022f5e:	6025      	str	r5, [r4, #0]
 8022f60:	bf18      	it	ne
 8022f62:	6059      	strne	r1, [r3, #4]
 8022f64:	6863      	ldr	r3, [r4, #4]
 8022f66:	bf08      	it	eq
 8022f68:	f8c8 1000 	streq.w	r1, [r8]
 8022f6c:	5162      	str	r2, [r4, r5]
 8022f6e:	604b      	str	r3, [r1, #4]
 8022f70:	4630      	mov	r0, r6
 8022f72:	f000 f82f 	bl	8022fd4 <__malloc_unlock>
 8022f76:	f104 000b 	add.w	r0, r4, #11
 8022f7a:	1d23      	adds	r3, r4, #4
 8022f7c:	f020 0007 	bic.w	r0, r0, #7
 8022f80:	1ac2      	subs	r2, r0, r3
 8022f82:	bf1c      	itt	ne
 8022f84:	1a1b      	subne	r3, r3, r0
 8022f86:	50a3      	strne	r3, [r4, r2]
 8022f88:	e7af      	b.n	8022eea <_malloc_r+0x22>
 8022f8a:	6862      	ldr	r2, [r4, #4]
 8022f8c:	42a3      	cmp	r3, r4
 8022f8e:	bf0c      	ite	eq
 8022f90:	f8c8 2000 	streq.w	r2, [r8]
 8022f94:	605a      	strne	r2, [r3, #4]
 8022f96:	e7eb      	b.n	8022f70 <_malloc_r+0xa8>
 8022f98:	4623      	mov	r3, r4
 8022f9a:	6864      	ldr	r4, [r4, #4]
 8022f9c:	e7ae      	b.n	8022efc <_malloc_r+0x34>
 8022f9e:	463c      	mov	r4, r7
 8022fa0:	687f      	ldr	r7, [r7, #4]
 8022fa2:	e7b6      	b.n	8022f12 <_malloc_r+0x4a>
 8022fa4:	461a      	mov	r2, r3
 8022fa6:	685b      	ldr	r3, [r3, #4]
 8022fa8:	42a3      	cmp	r3, r4
 8022faa:	d1fb      	bne.n	8022fa4 <_malloc_r+0xdc>
 8022fac:	2300      	movs	r3, #0
 8022fae:	6053      	str	r3, [r2, #4]
 8022fb0:	e7de      	b.n	8022f70 <_malloc_r+0xa8>
 8022fb2:	230c      	movs	r3, #12
 8022fb4:	6033      	str	r3, [r6, #0]
 8022fb6:	4630      	mov	r0, r6
 8022fb8:	f000 f80c 	bl	8022fd4 <__malloc_unlock>
 8022fbc:	e794      	b.n	8022ee8 <_malloc_r+0x20>
 8022fbe:	6005      	str	r5, [r0, #0]
 8022fc0:	e7d6      	b.n	8022f70 <_malloc_r+0xa8>
 8022fc2:	bf00      	nop
 8022fc4:	200101c4 	.word	0x200101c4

08022fc8 <__malloc_lock>:
 8022fc8:	4801      	ldr	r0, [pc, #4]	@ (8022fd0 <__malloc_lock+0x8>)
 8022fca:	f7ff bed2 	b.w	8022d72 <__retarget_lock_acquire_recursive>
 8022fce:	bf00      	nop
 8022fd0:	200101bc 	.word	0x200101bc

08022fd4 <__malloc_unlock>:
 8022fd4:	4801      	ldr	r0, [pc, #4]	@ (8022fdc <__malloc_unlock+0x8>)
 8022fd6:	f7ff becd 	b.w	8022d74 <__retarget_lock_release_recursive>
 8022fda:	bf00      	nop
 8022fdc:	200101bc 	.word	0x200101bc

08022fe0 <__ssputs_r>:
 8022fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fe4:	688e      	ldr	r6, [r1, #8]
 8022fe6:	461f      	mov	r7, r3
 8022fe8:	42be      	cmp	r6, r7
 8022fea:	680b      	ldr	r3, [r1, #0]
 8022fec:	4682      	mov	sl, r0
 8022fee:	460c      	mov	r4, r1
 8022ff0:	4690      	mov	r8, r2
 8022ff2:	d82d      	bhi.n	8023050 <__ssputs_r+0x70>
 8022ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022ff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022ffc:	d026      	beq.n	802304c <__ssputs_r+0x6c>
 8022ffe:	6965      	ldr	r5, [r4, #20]
 8023000:	6909      	ldr	r1, [r1, #16]
 8023002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023006:	eba3 0901 	sub.w	r9, r3, r1
 802300a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802300e:	1c7b      	adds	r3, r7, #1
 8023010:	444b      	add	r3, r9
 8023012:	106d      	asrs	r5, r5, #1
 8023014:	429d      	cmp	r5, r3
 8023016:	bf38      	it	cc
 8023018:	461d      	movcc	r5, r3
 802301a:	0553      	lsls	r3, r2, #21
 802301c:	d527      	bpl.n	802306e <__ssputs_r+0x8e>
 802301e:	4629      	mov	r1, r5
 8023020:	f7ff ff52 	bl	8022ec8 <_malloc_r>
 8023024:	4606      	mov	r6, r0
 8023026:	b360      	cbz	r0, 8023082 <__ssputs_r+0xa2>
 8023028:	6921      	ldr	r1, [r4, #16]
 802302a:	464a      	mov	r2, r9
 802302c:	f7ff feab 	bl	8022d86 <memcpy>
 8023030:	89a3      	ldrh	r3, [r4, #12]
 8023032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8023036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802303a:	81a3      	strh	r3, [r4, #12]
 802303c:	6126      	str	r6, [r4, #16]
 802303e:	6165      	str	r5, [r4, #20]
 8023040:	444e      	add	r6, r9
 8023042:	eba5 0509 	sub.w	r5, r5, r9
 8023046:	6026      	str	r6, [r4, #0]
 8023048:	60a5      	str	r5, [r4, #8]
 802304a:	463e      	mov	r6, r7
 802304c:	42be      	cmp	r6, r7
 802304e:	d900      	bls.n	8023052 <__ssputs_r+0x72>
 8023050:	463e      	mov	r6, r7
 8023052:	6820      	ldr	r0, [r4, #0]
 8023054:	4632      	mov	r2, r6
 8023056:	4641      	mov	r1, r8
 8023058:	f7ff fdd6 	bl	8022c08 <memmove>
 802305c:	68a3      	ldr	r3, [r4, #8]
 802305e:	1b9b      	subs	r3, r3, r6
 8023060:	60a3      	str	r3, [r4, #8]
 8023062:	6823      	ldr	r3, [r4, #0]
 8023064:	4433      	add	r3, r6
 8023066:	6023      	str	r3, [r4, #0]
 8023068:	2000      	movs	r0, #0
 802306a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802306e:	462a      	mov	r2, r5
 8023070:	f000 fd37 	bl	8023ae2 <_realloc_r>
 8023074:	4606      	mov	r6, r0
 8023076:	2800      	cmp	r0, #0
 8023078:	d1e0      	bne.n	802303c <__ssputs_r+0x5c>
 802307a:	6921      	ldr	r1, [r4, #16]
 802307c:	4650      	mov	r0, sl
 802307e:	f7ff feaf 	bl	8022de0 <_free_r>
 8023082:	230c      	movs	r3, #12
 8023084:	f8ca 3000 	str.w	r3, [sl]
 8023088:	89a3      	ldrh	r3, [r4, #12]
 802308a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802308e:	81a3      	strh	r3, [r4, #12]
 8023090:	f04f 30ff 	mov.w	r0, #4294967295
 8023094:	e7e9      	b.n	802306a <__ssputs_r+0x8a>
	...

08023098 <_svfiprintf_r>:
 8023098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802309c:	4698      	mov	r8, r3
 802309e:	898b      	ldrh	r3, [r1, #12]
 80230a0:	061b      	lsls	r3, r3, #24
 80230a2:	b09d      	sub	sp, #116	@ 0x74
 80230a4:	4607      	mov	r7, r0
 80230a6:	460d      	mov	r5, r1
 80230a8:	4614      	mov	r4, r2
 80230aa:	d510      	bpl.n	80230ce <_svfiprintf_r+0x36>
 80230ac:	690b      	ldr	r3, [r1, #16]
 80230ae:	b973      	cbnz	r3, 80230ce <_svfiprintf_r+0x36>
 80230b0:	2140      	movs	r1, #64	@ 0x40
 80230b2:	f7ff ff09 	bl	8022ec8 <_malloc_r>
 80230b6:	6028      	str	r0, [r5, #0]
 80230b8:	6128      	str	r0, [r5, #16]
 80230ba:	b930      	cbnz	r0, 80230ca <_svfiprintf_r+0x32>
 80230bc:	230c      	movs	r3, #12
 80230be:	603b      	str	r3, [r7, #0]
 80230c0:	f04f 30ff 	mov.w	r0, #4294967295
 80230c4:	b01d      	add	sp, #116	@ 0x74
 80230c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ca:	2340      	movs	r3, #64	@ 0x40
 80230cc:	616b      	str	r3, [r5, #20]
 80230ce:	2300      	movs	r3, #0
 80230d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80230d2:	2320      	movs	r3, #32
 80230d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80230d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80230dc:	2330      	movs	r3, #48	@ 0x30
 80230de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802327c <_svfiprintf_r+0x1e4>
 80230e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80230e6:	f04f 0901 	mov.w	r9, #1
 80230ea:	4623      	mov	r3, r4
 80230ec:	469a      	mov	sl, r3
 80230ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80230f2:	b10a      	cbz	r2, 80230f8 <_svfiprintf_r+0x60>
 80230f4:	2a25      	cmp	r2, #37	@ 0x25
 80230f6:	d1f9      	bne.n	80230ec <_svfiprintf_r+0x54>
 80230f8:	ebba 0b04 	subs.w	fp, sl, r4
 80230fc:	d00b      	beq.n	8023116 <_svfiprintf_r+0x7e>
 80230fe:	465b      	mov	r3, fp
 8023100:	4622      	mov	r2, r4
 8023102:	4629      	mov	r1, r5
 8023104:	4638      	mov	r0, r7
 8023106:	f7ff ff6b 	bl	8022fe0 <__ssputs_r>
 802310a:	3001      	adds	r0, #1
 802310c:	f000 80a7 	beq.w	802325e <_svfiprintf_r+0x1c6>
 8023110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023112:	445a      	add	r2, fp
 8023114:	9209      	str	r2, [sp, #36]	@ 0x24
 8023116:	f89a 3000 	ldrb.w	r3, [sl]
 802311a:	2b00      	cmp	r3, #0
 802311c:	f000 809f 	beq.w	802325e <_svfiprintf_r+0x1c6>
 8023120:	2300      	movs	r3, #0
 8023122:	f04f 32ff 	mov.w	r2, #4294967295
 8023126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802312a:	f10a 0a01 	add.w	sl, sl, #1
 802312e:	9304      	str	r3, [sp, #16]
 8023130:	9307      	str	r3, [sp, #28]
 8023132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023136:	931a      	str	r3, [sp, #104]	@ 0x68
 8023138:	4654      	mov	r4, sl
 802313a:	2205      	movs	r2, #5
 802313c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023140:	484e      	ldr	r0, [pc, #312]	@ (802327c <_svfiprintf_r+0x1e4>)
 8023142:	f7dd f8fd 	bl	8000340 <memchr>
 8023146:	9a04      	ldr	r2, [sp, #16]
 8023148:	b9d8      	cbnz	r0, 8023182 <_svfiprintf_r+0xea>
 802314a:	06d0      	lsls	r0, r2, #27
 802314c:	bf44      	itt	mi
 802314e:	2320      	movmi	r3, #32
 8023150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023154:	0711      	lsls	r1, r2, #28
 8023156:	bf44      	itt	mi
 8023158:	232b      	movmi	r3, #43	@ 0x2b
 802315a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802315e:	f89a 3000 	ldrb.w	r3, [sl]
 8023162:	2b2a      	cmp	r3, #42	@ 0x2a
 8023164:	d015      	beq.n	8023192 <_svfiprintf_r+0xfa>
 8023166:	9a07      	ldr	r2, [sp, #28]
 8023168:	4654      	mov	r4, sl
 802316a:	2000      	movs	r0, #0
 802316c:	f04f 0c0a 	mov.w	ip, #10
 8023170:	4621      	mov	r1, r4
 8023172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023176:	3b30      	subs	r3, #48	@ 0x30
 8023178:	2b09      	cmp	r3, #9
 802317a:	d94b      	bls.n	8023214 <_svfiprintf_r+0x17c>
 802317c:	b1b0      	cbz	r0, 80231ac <_svfiprintf_r+0x114>
 802317e:	9207      	str	r2, [sp, #28]
 8023180:	e014      	b.n	80231ac <_svfiprintf_r+0x114>
 8023182:	eba0 0308 	sub.w	r3, r0, r8
 8023186:	fa09 f303 	lsl.w	r3, r9, r3
 802318a:	4313      	orrs	r3, r2
 802318c:	9304      	str	r3, [sp, #16]
 802318e:	46a2      	mov	sl, r4
 8023190:	e7d2      	b.n	8023138 <_svfiprintf_r+0xa0>
 8023192:	9b03      	ldr	r3, [sp, #12]
 8023194:	1d19      	adds	r1, r3, #4
 8023196:	681b      	ldr	r3, [r3, #0]
 8023198:	9103      	str	r1, [sp, #12]
 802319a:	2b00      	cmp	r3, #0
 802319c:	bfbb      	ittet	lt
 802319e:	425b      	neglt	r3, r3
 80231a0:	f042 0202 	orrlt.w	r2, r2, #2
 80231a4:	9307      	strge	r3, [sp, #28]
 80231a6:	9307      	strlt	r3, [sp, #28]
 80231a8:	bfb8      	it	lt
 80231aa:	9204      	strlt	r2, [sp, #16]
 80231ac:	7823      	ldrb	r3, [r4, #0]
 80231ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80231b0:	d10a      	bne.n	80231c8 <_svfiprintf_r+0x130>
 80231b2:	7863      	ldrb	r3, [r4, #1]
 80231b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80231b6:	d132      	bne.n	802321e <_svfiprintf_r+0x186>
 80231b8:	9b03      	ldr	r3, [sp, #12]
 80231ba:	1d1a      	adds	r2, r3, #4
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	9203      	str	r2, [sp, #12]
 80231c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80231c4:	3402      	adds	r4, #2
 80231c6:	9305      	str	r3, [sp, #20]
 80231c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802328c <_svfiprintf_r+0x1f4>
 80231cc:	7821      	ldrb	r1, [r4, #0]
 80231ce:	2203      	movs	r2, #3
 80231d0:	4650      	mov	r0, sl
 80231d2:	f7dd f8b5 	bl	8000340 <memchr>
 80231d6:	b138      	cbz	r0, 80231e8 <_svfiprintf_r+0x150>
 80231d8:	9b04      	ldr	r3, [sp, #16]
 80231da:	eba0 000a 	sub.w	r0, r0, sl
 80231de:	2240      	movs	r2, #64	@ 0x40
 80231e0:	4082      	lsls	r2, r0
 80231e2:	4313      	orrs	r3, r2
 80231e4:	3401      	adds	r4, #1
 80231e6:	9304      	str	r3, [sp, #16]
 80231e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231ec:	4824      	ldr	r0, [pc, #144]	@ (8023280 <_svfiprintf_r+0x1e8>)
 80231ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80231f2:	2206      	movs	r2, #6
 80231f4:	f7dd f8a4 	bl	8000340 <memchr>
 80231f8:	2800      	cmp	r0, #0
 80231fa:	d036      	beq.n	802326a <_svfiprintf_r+0x1d2>
 80231fc:	4b21      	ldr	r3, [pc, #132]	@ (8023284 <_svfiprintf_r+0x1ec>)
 80231fe:	bb1b      	cbnz	r3, 8023248 <_svfiprintf_r+0x1b0>
 8023200:	9b03      	ldr	r3, [sp, #12]
 8023202:	3307      	adds	r3, #7
 8023204:	f023 0307 	bic.w	r3, r3, #7
 8023208:	3308      	adds	r3, #8
 802320a:	9303      	str	r3, [sp, #12]
 802320c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802320e:	4433      	add	r3, r6
 8023210:	9309      	str	r3, [sp, #36]	@ 0x24
 8023212:	e76a      	b.n	80230ea <_svfiprintf_r+0x52>
 8023214:	fb0c 3202 	mla	r2, ip, r2, r3
 8023218:	460c      	mov	r4, r1
 802321a:	2001      	movs	r0, #1
 802321c:	e7a8      	b.n	8023170 <_svfiprintf_r+0xd8>
 802321e:	2300      	movs	r3, #0
 8023220:	3401      	adds	r4, #1
 8023222:	9305      	str	r3, [sp, #20]
 8023224:	4619      	mov	r1, r3
 8023226:	f04f 0c0a 	mov.w	ip, #10
 802322a:	4620      	mov	r0, r4
 802322c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023230:	3a30      	subs	r2, #48	@ 0x30
 8023232:	2a09      	cmp	r2, #9
 8023234:	d903      	bls.n	802323e <_svfiprintf_r+0x1a6>
 8023236:	2b00      	cmp	r3, #0
 8023238:	d0c6      	beq.n	80231c8 <_svfiprintf_r+0x130>
 802323a:	9105      	str	r1, [sp, #20]
 802323c:	e7c4      	b.n	80231c8 <_svfiprintf_r+0x130>
 802323e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023242:	4604      	mov	r4, r0
 8023244:	2301      	movs	r3, #1
 8023246:	e7f0      	b.n	802322a <_svfiprintf_r+0x192>
 8023248:	ab03      	add	r3, sp, #12
 802324a:	9300      	str	r3, [sp, #0]
 802324c:	462a      	mov	r2, r5
 802324e:	4b0e      	ldr	r3, [pc, #56]	@ (8023288 <_svfiprintf_r+0x1f0>)
 8023250:	a904      	add	r1, sp, #16
 8023252:	4638      	mov	r0, r7
 8023254:	f3af 8000 	nop.w
 8023258:	1c42      	adds	r2, r0, #1
 802325a:	4606      	mov	r6, r0
 802325c:	d1d6      	bne.n	802320c <_svfiprintf_r+0x174>
 802325e:	89ab      	ldrh	r3, [r5, #12]
 8023260:	065b      	lsls	r3, r3, #25
 8023262:	f53f af2d 	bmi.w	80230c0 <_svfiprintf_r+0x28>
 8023266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023268:	e72c      	b.n	80230c4 <_svfiprintf_r+0x2c>
 802326a:	ab03      	add	r3, sp, #12
 802326c:	9300      	str	r3, [sp, #0]
 802326e:	462a      	mov	r2, r5
 8023270:	4b05      	ldr	r3, [pc, #20]	@ (8023288 <_svfiprintf_r+0x1f0>)
 8023272:	a904      	add	r1, sp, #16
 8023274:	4638      	mov	r0, r7
 8023276:	f000 f9bb 	bl	80235f0 <_printf_i>
 802327a:	e7ed      	b.n	8023258 <_svfiprintf_r+0x1c0>
 802327c:	08038fa0 	.word	0x08038fa0
 8023280:	08038faa 	.word	0x08038faa
 8023284:	00000000 	.word	0x00000000
 8023288:	08022fe1 	.word	0x08022fe1
 802328c:	08038fa6 	.word	0x08038fa6

08023290 <__sfputc_r>:
 8023290:	6893      	ldr	r3, [r2, #8]
 8023292:	3b01      	subs	r3, #1
 8023294:	2b00      	cmp	r3, #0
 8023296:	b410      	push	{r4}
 8023298:	6093      	str	r3, [r2, #8]
 802329a:	da08      	bge.n	80232ae <__sfputc_r+0x1e>
 802329c:	6994      	ldr	r4, [r2, #24]
 802329e:	42a3      	cmp	r3, r4
 80232a0:	db01      	blt.n	80232a6 <__sfputc_r+0x16>
 80232a2:	290a      	cmp	r1, #10
 80232a4:	d103      	bne.n	80232ae <__sfputc_r+0x1e>
 80232a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232aa:	f7ff bc08 	b.w	8022abe <__swbuf_r>
 80232ae:	6813      	ldr	r3, [r2, #0]
 80232b0:	1c58      	adds	r0, r3, #1
 80232b2:	6010      	str	r0, [r2, #0]
 80232b4:	7019      	strb	r1, [r3, #0]
 80232b6:	4608      	mov	r0, r1
 80232b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232bc:	4770      	bx	lr

080232be <__sfputs_r>:
 80232be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232c0:	4606      	mov	r6, r0
 80232c2:	460f      	mov	r7, r1
 80232c4:	4614      	mov	r4, r2
 80232c6:	18d5      	adds	r5, r2, r3
 80232c8:	42ac      	cmp	r4, r5
 80232ca:	d101      	bne.n	80232d0 <__sfputs_r+0x12>
 80232cc:	2000      	movs	r0, #0
 80232ce:	e007      	b.n	80232e0 <__sfputs_r+0x22>
 80232d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232d4:	463a      	mov	r2, r7
 80232d6:	4630      	mov	r0, r6
 80232d8:	f7ff ffda 	bl	8023290 <__sfputc_r>
 80232dc:	1c43      	adds	r3, r0, #1
 80232de:	d1f3      	bne.n	80232c8 <__sfputs_r+0xa>
 80232e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080232e4 <_vfiprintf_r>:
 80232e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232e8:	460d      	mov	r5, r1
 80232ea:	b09d      	sub	sp, #116	@ 0x74
 80232ec:	4614      	mov	r4, r2
 80232ee:	4698      	mov	r8, r3
 80232f0:	4606      	mov	r6, r0
 80232f2:	b118      	cbz	r0, 80232fc <_vfiprintf_r+0x18>
 80232f4:	6a03      	ldr	r3, [r0, #32]
 80232f6:	b90b      	cbnz	r3, 80232fc <_vfiprintf_r+0x18>
 80232f8:	f7ff fad8 	bl	80228ac <__sinit>
 80232fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80232fe:	07d9      	lsls	r1, r3, #31
 8023300:	d405      	bmi.n	802330e <_vfiprintf_r+0x2a>
 8023302:	89ab      	ldrh	r3, [r5, #12]
 8023304:	059a      	lsls	r2, r3, #22
 8023306:	d402      	bmi.n	802330e <_vfiprintf_r+0x2a>
 8023308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802330a:	f7ff fd32 	bl	8022d72 <__retarget_lock_acquire_recursive>
 802330e:	89ab      	ldrh	r3, [r5, #12]
 8023310:	071b      	lsls	r3, r3, #28
 8023312:	d501      	bpl.n	8023318 <_vfiprintf_r+0x34>
 8023314:	692b      	ldr	r3, [r5, #16]
 8023316:	b99b      	cbnz	r3, 8023340 <_vfiprintf_r+0x5c>
 8023318:	4629      	mov	r1, r5
 802331a:	4630      	mov	r0, r6
 802331c:	f7ff fc0e 	bl	8022b3c <__swsetup_r>
 8023320:	b170      	cbz	r0, 8023340 <_vfiprintf_r+0x5c>
 8023322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023324:	07dc      	lsls	r4, r3, #31
 8023326:	d504      	bpl.n	8023332 <_vfiprintf_r+0x4e>
 8023328:	f04f 30ff 	mov.w	r0, #4294967295
 802332c:	b01d      	add	sp, #116	@ 0x74
 802332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023332:	89ab      	ldrh	r3, [r5, #12]
 8023334:	0598      	lsls	r0, r3, #22
 8023336:	d4f7      	bmi.n	8023328 <_vfiprintf_r+0x44>
 8023338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802333a:	f7ff fd1b 	bl	8022d74 <__retarget_lock_release_recursive>
 802333e:	e7f3      	b.n	8023328 <_vfiprintf_r+0x44>
 8023340:	2300      	movs	r3, #0
 8023342:	9309      	str	r3, [sp, #36]	@ 0x24
 8023344:	2320      	movs	r3, #32
 8023346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802334a:	f8cd 800c 	str.w	r8, [sp, #12]
 802334e:	2330      	movs	r3, #48	@ 0x30
 8023350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023500 <_vfiprintf_r+0x21c>
 8023354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023358:	f04f 0901 	mov.w	r9, #1
 802335c:	4623      	mov	r3, r4
 802335e:	469a      	mov	sl, r3
 8023360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023364:	b10a      	cbz	r2, 802336a <_vfiprintf_r+0x86>
 8023366:	2a25      	cmp	r2, #37	@ 0x25
 8023368:	d1f9      	bne.n	802335e <_vfiprintf_r+0x7a>
 802336a:	ebba 0b04 	subs.w	fp, sl, r4
 802336e:	d00b      	beq.n	8023388 <_vfiprintf_r+0xa4>
 8023370:	465b      	mov	r3, fp
 8023372:	4622      	mov	r2, r4
 8023374:	4629      	mov	r1, r5
 8023376:	4630      	mov	r0, r6
 8023378:	f7ff ffa1 	bl	80232be <__sfputs_r>
 802337c:	3001      	adds	r0, #1
 802337e:	f000 80a7 	beq.w	80234d0 <_vfiprintf_r+0x1ec>
 8023382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023384:	445a      	add	r2, fp
 8023386:	9209      	str	r2, [sp, #36]	@ 0x24
 8023388:	f89a 3000 	ldrb.w	r3, [sl]
 802338c:	2b00      	cmp	r3, #0
 802338e:	f000 809f 	beq.w	80234d0 <_vfiprintf_r+0x1ec>
 8023392:	2300      	movs	r3, #0
 8023394:	f04f 32ff 	mov.w	r2, #4294967295
 8023398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802339c:	f10a 0a01 	add.w	sl, sl, #1
 80233a0:	9304      	str	r3, [sp, #16]
 80233a2:	9307      	str	r3, [sp, #28]
 80233a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80233a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80233aa:	4654      	mov	r4, sl
 80233ac:	2205      	movs	r2, #5
 80233ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233b2:	4853      	ldr	r0, [pc, #332]	@ (8023500 <_vfiprintf_r+0x21c>)
 80233b4:	f7dc ffc4 	bl	8000340 <memchr>
 80233b8:	9a04      	ldr	r2, [sp, #16]
 80233ba:	b9d8      	cbnz	r0, 80233f4 <_vfiprintf_r+0x110>
 80233bc:	06d1      	lsls	r1, r2, #27
 80233be:	bf44      	itt	mi
 80233c0:	2320      	movmi	r3, #32
 80233c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233c6:	0713      	lsls	r3, r2, #28
 80233c8:	bf44      	itt	mi
 80233ca:	232b      	movmi	r3, #43	@ 0x2b
 80233cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233d0:	f89a 3000 	ldrb.w	r3, [sl]
 80233d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80233d6:	d015      	beq.n	8023404 <_vfiprintf_r+0x120>
 80233d8:	9a07      	ldr	r2, [sp, #28]
 80233da:	4654      	mov	r4, sl
 80233dc:	2000      	movs	r0, #0
 80233de:	f04f 0c0a 	mov.w	ip, #10
 80233e2:	4621      	mov	r1, r4
 80233e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233e8:	3b30      	subs	r3, #48	@ 0x30
 80233ea:	2b09      	cmp	r3, #9
 80233ec:	d94b      	bls.n	8023486 <_vfiprintf_r+0x1a2>
 80233ee:	b1b0      	cbz	r0, 802341e <_vfiprintf_r+0x13a>
 80233f0:	9207      	str	r2, [sp, #28]
 80233f2:	e014      	b.n	802341e <_vfiprintf_r+0x13a>
 80233f4:	eba0 0308 	sub.w	r3, r0, r8
 80233f8:	fa09 f303 	lsl.w	r3, r9, r3
 80233fc:	4313      	orrs	r3, r2
 80233fe:	9304      	str	r3, [sp, #16]
 8023400:	46a2      	mov	sl, r4
 8023402:	e7d2      	b.n	80233aa <_vfiprintf_r+0xc6>
 8023404:	9b03      	ldr	r3, [sp, #12]
 8023406:	1d19      	adds	r1, r3, #4
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	9103      	str	r1, [sp, #12]
 802340c:	2b00      	cmp	r3, #0
 802340e:	bfbb      	ittet	lt
 8023410:	425b      	neglt	r3, r3
 8023412:	f042 0202 	orrlt.w	r2, r2, #2
 8023416:	9307      	strge	r3, [sp, #28]
 8023418:	9307      	strlt	r3, [sp, #28]
 802341a:	bfb8      	it	lt
 802341c:	9204      	strlt	r2, [sp, #16]
 802341e:	7823      	ldrb	r3, [r4, #0]
 8023420:	2b2e      	cmp	r3, #46	@ 0x2e
 8023422:	d10a      	bne.n	802343a <_vfiprintf_r+0x156>
 8023424:	7863      	ldrb	r3, [r4, #1]
 8023426:	2b2a      	cmp	r3, #42	@ 0x2a
 8023428:	d132      	bne.n	8023490 <_vfiprintf_r+0x1ac>
 802342a:	9b03      	ldr	r3, [sp, #12]
 802342c:	1d1a      	adds	r2, r3, #4
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	9203      	str	r2, [sp, #12]
 8023432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023436:	3402      	adds	r4, #2
 8023438:	9305      	str	r3, [sp, #20]
 802343a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023510 <_vfiprintf_r+0x22c>
 802343e:	7821      	ldrb	r1, [r4, #0]
 8023440:	2203      	movs	r2, #3
 8023442:	4650      	mov	r0, sl
 8023444:	f7dc ff7c 	bl	8000340 <memchr>
 8023448:	b138      	cbz	r0, 802345a <_vfiprintf_r+0x176>
 802344a:	9b04      	ldr	r3, [sp, #16]
 802344c:	eba0 000a 	sub.w	r0, r0, sl
 8023450:	2240      	movs	r2, #64	@ 0x40
 8023452:	4082      	lsls	r2, r0
 8023454:	4313      	orrs	r3, r2
 8023456:	3401      	adds	r4, #1
 8023458:	9304      	str	r3, [sp, #16]
 802345a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802345e:	4829      	ldr	r0, [pc, #164]	@ (8023504 <_vfiprintf_r+0x220>)
 8023460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023464:	2206      	movs	r2, #6
 8023466:	f7dc ff6b 	bl	8000340 <memchr>
 802346a:	2800      	cmp	r0, #0
 802346c:	d03f      	beq.n	80234ee <_vfiprintf_r+0x20a>
 802346e:	4b26      	ldr	r3, [pc, #152]	@ (8023508 <_vfiprintf_r+0x224>)
 8023470:	bb1b      	cbnz	r3, 80234ba <_vfiprintf_r+0x1d6>
 8023472:	9b03      	ldr	r3, [sp, #12]
 8023474:	3307      	adds	r3, #7
 8023476:	f023 0307 	bic.w	r3, r3, #7
 802347a:	3308      	adds	r3, #8
 802347c:	9303      	str	r3, [sp, #12]
 802347e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023480:	443b      	add	r3, r7
 8023482:	9309      	str	r3, [sp, #36]	@ 0x24
 8023484:	e76a      	b.n	802335c <_vfiprintf_r+0x78>
 8023486:	fb0c 3202 	mla	r2, ip, r2, r3
 802348a:	460c      	mov	r4, r1
 802348c:	2001      	movs	r0, #1
 802348e:	e7a8      	b.n	80233e2 <_vfiprintf_r+0xfe>
 8023490:	2300      	movs	r3, #0
 8023492:	3401      	adds	r4, #1
 8023494:	9305      	str	r3, [sp, #20]
 8023496:	4619      	mov	r1, r3
 8023498:	f04f 0c0a 	mov.w	ip, #10
 802349c:	4620      	mov	r0, r4
 802349e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234a2:	3a30      	subs	r2, #48	@ 0x30
 80234a4:	2a09      	cmp	r2, #9
 80234a6:	d903      	bls.n	80234b0 <_vfiprintf_r+0x1cc>
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d0c6      	beq.n	802343a <_vfiprintf_r+0x156>
 80234ac:	9105      	str	r1, [sp, #20]
 80234ae:	e7c4      	b.n	802343a <_vfiprintf_r+0x156>
 80234b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80234b4:	4604      	mov	r4, r0
 80234b6:	2301      	movs	r3, #1
 80234b8:	e7f0      	b.n	802349c <_vfiprintf_r+0x1b8>
 80234ba:	ab03      	add	r3, sp, #12
 80234bc:	9300      	str	r3, [sp, #0]
 80234be:	462a      	mov	r2, r5
 80234c0:	4b12      	ldr	r3, [pc, #72]	@ (802350c <_vfiprintf_r+0x228>)
 80234c2:	a904      	add	r1, sp, #16
 80234c4:	4630      	mov	r0, r6
 80234c6:	f3af 8000 	nop.w
 80234ca:	4607      	mov	r7, r0
 80234cc:	1c78      	adds	r0, r7, #1
 80234ce:	d1d6      	bne.n	802347e <_vfiprintf_r+0x19a>
 80234d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80234d2:	07d9      	lsls	r1, r3, #31
 80234d4:	d405      	bmi.n	80234e2 <_vfiprintf_r+0x1fe>
 80234d6:	89ab      	ldrh	r3, [r5, #12]
 80234d8:	059a      	lsls	r2, r3, #22
 80234da:	d402      	bmi.n	80234e2 <_vfiprintf_r+0x1fe>
 80234dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80234de:	f7ff fc49 	bl	8022d74 <__retarget_lock_release_recursive>
 80234e2:	89ab      	ldrh	r3, [r5, #12]
 80234e4:	065b      	lsls	r3, r3, #25
 80234e6:	f53f af1f 	bmi.w	8023328 <_vfiprintf_r+0x44>
 80234ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80234ec:	e71e      	b.n	802332c <_vfiprintf_r+0x48>
 80234ee:	ab03      	add	r3, sp, #12
 80234f0:	9300      	str	r3, [sp, #0]
 80234f2:	462a      	mov	r2, r5
 80234f4:	4b05      	ldr	r3, [pc, #20]	@ (802350c <_vfiprintf_r+0x228>)
 80234f6:	a904      	add	r1, sp, #16
 80234f8:	4630      	mov	r0, r6
 80234fa:	f000 f879 	bl	80235f0 <_printf_i>
 80234fe:	e7e4      	b.n	80234ca <_vfiprintf_r+0x1e6>
 8023500:	08038fa0 	.word	0x08038fa0
 8023504:	08038faa 	.word	0x08038faa
 8023508:	00000000 	.word	0x00000000
 802350c:	080232bf 	.word	0x080232bf
 8023510:	08038fa6 	.word	0x08038fa6

08023514 <_printf_common>:
 8023514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023518:	4616      	mov	r6, r2
 802351a:	4698      	mov	r8, r3
 802351c:	688a      	ldr	r2, [r1, #8]
 802351e:	690b      	ldr	r3, [r1, #16]
 8023520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023524:	4293      	cmp	r3, r2
 8023526:	bfb8      	it	lt
 8023528:	4613      	movlt	r3, r2
 802352a:	6033      	str	r3, [r6, #0]
 802352c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023530:	4607      	mov	r7, r0
 8023532:	460c      	mov	r4, r1
 8023534:	b10a      	cbz	r2, 802353a <_printf_common+0x26>
 8023536:	3301      	adds	r3, #1
 8023538:	6033      	str	r3, [r6, #0]
 802353a:	6823      	ldr	r3, [r4, #0]
 802353c:	0699      	lsls	r1, r3, #26
 802353e:	bf42      	ittt	mi
 8023540:	6833      	ldrmi	r3, [r6, #0]
 8023542:	3302      	addmi	r3, #2
 8023544:	6033      	strmi	r3, [r6, #0]
 8023546:	6825      	ldr	r5, [r4, #0]
 8023548:	f015 0506 	ands.w	r5, r5, #6
 802354c:	d106      	bne.n	802355c <_printf_common+0x48>
 802354e:	f104 0a19 	add.w	sl, r4, #25
 8023552:	68e3      	ldr	r3, [r4, #12]
 8023554:	6832      	ldr	r2, [r6, #0]
 8023556:	1a9b      	subs	r3, r3, r2
 8023558:	42ab      	cmp	r3, r5
 802355a:	dc26      	bgt.n	80235aa <_printf_common+0x96>
 802355c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023560:	6822      	ldr	r2, [r4, #0]
 8023562:	3b00      	subs	r3, #0
 8023564:	bf18      	it	ne
 8023566:	2301      	movne	r3, #1
 8023568:	0692      	lsls	r2, r2, #26
 802356a:	d42b      	bmi.n	80235c4 <_printf_common+0xb0>
 802356c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023570:	4641      	mov	r1, r8
 8023572:	4638      	mov	r0, r7
 8023574:	47c8      	blx	r9
 8023576:	3001      	adds	r0, #1
 8023578:	d01e      	beq.n	80235b8 <_printf_common+0xa4>
 802357a:	6823      	ldr	r3, [r4, #0]
 802357c:	6922      	ldr	r2, [r4, #16]
 802357e:	f003 0306 	and.w	r3, r3, #6
 8023582:	2b04      	cmp	r3, #4
 8023584:	bf02      	ittt	eq
 8023586:	68e5      	ldreq	r5, [r4, #12]
 8023588:	6833      	ldreq	r3, [r6, #0]
 802358a:	1aed      	subeq	r5, r5, r3
 802358c:	68a3      	ldr	r3, [r4, #8]
 802358e:	bf0c      	ite	eq
 8023590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023594:	2500      	movne	r5, #0
 8023596:	4293      	cmp	r3, r2
 8023598:	bfc4      	itt	gt
 802359a:	1a9b      	subgt	r3, r3, r2
 802359c:	18ed      	addgt	r5, r5, r3
 802359e:	2600      	movs	r6, #0
 80235a0:	341a      	adds	r4, #26
 80235a2:	42b5      	cmp	r5, r6
 80235a4:	d11a      	bne.n	80235dc <_printf_common+0xc8>
 80235a6:	2000      	movs	r0, #0
 80235a8:	e008      	b.n	80235bc <_printf_common+0xa8>
 80235aa:	2301      	movs	r3, #1
 80235ac:	4652      	mov	r2, sl
 80235ae:	4641      	mov	r1, r8
 80235b0:	4638      	mov	r0, r7
 80235b2:	47c8      	blx	r9
 80235b4:	3001      	adds	r0, #1
 80235b6:	d103      	bne.n	80235c0 <_printf_common+0xac>
 80235b8:	f04f 30ff 	mov.w	r0, #4294967295
 80235bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235c0:	3501      	adds	r5, #1
 80235c2:	e7c6      	b.n	8023552 <_printf_common+0x3e>
 80235c4:	18e1      	adds	r1, r4, r3
 80235c6:	1c5a      	adds	r2, r3, #1
 80235c8:	2030      	movs	r0, #48	@ 0x30
 80235ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80235ce:	4422      	add	r2, r4
 80235d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80235d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80235d8:	3302      	adds	r3, #2
 80235da:	e7c7      	b.n	802356c <_printf_common+0x58>
 80235dc:	2301      	movs	r3, #1
 80235de:	4622      	mov	r2, r4
 80235e0:	4641      	mov	r1, r8
 80235e2:	4638      	mov	r0, r7
 80235e4:	47c8      	blx	r9
 80235e6:	3001      	adds	r0, #1
 80235e8:	d0e6      	beq.n	80235b8 <_printf_common+0xa4>
 80235ea:	3601      	adds	r6, #1
 80235ec:	e7d9      	b.n	80235a2 <_printf_common+0x8e>
	...

080235f0 <_printf_i>:
 80235f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80235f4:	7e0f      	ldrb	r7, [r1, #24]
 80235f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80235f8:	2f78      	cmp	r7, #120	@ 0x78
 80235fa:	4691      	mov	r9, r2
 80235fc:	4680      	mov	r8, r0
 80235fe:	460c      	mov	r4, r1
 8023600:	469a      	mov	sl, r3
 8023602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023606:	d807      	bhi.n	8023618 <_printf_i+0x28>
 8023608:	2f62      	cmp	r7, #98	@ 0x62
 802360a:	d80a      	bhi.n	8023622 <_printf_i+0x32>
 802360c:	2f00      	cmp	r7, #0
 802360e:	f000 80d2 	beq.w	80237b6 <_printf_i+0x1c6>
 8023612:	2f58      	cmp	r7, #88	@ 0x58
 8023614:	f000 80b9 	beq.w	802378a <_printf_i+0x19a>
 8023618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802361c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023620:	e03a      	b.n	8023698 <_printf_i+0xa8>
 8023622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023626:	2b15      	cmp	r3, #21
 8023628:	d8f6      	bhi.n	8023618 <_printf_i+0x28>
 802362a:	a101      	add	r1, pc, #4	@ (adr r1, 8023630 <_printf_i+0x40>)
 802362c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023630:	08023689 	.word	0x08023689
 8023634:	0802369d 	.word	0x0802369d
 8023638:	08023619 	.word	0x08023619
 802363c:	08023619 	.word	0x08023619
 8023640:	08023619 	.word	0x08023619
 8023644:	08023619 	.word	0x08023619
 8023648:	0802369d 	.word	0x0802369d
 802364c:	08023619 	.word	0x08023619
 8023650:	08023619 	.word	0x08023619
 8023654:	08023619 	.word	0x08023619
 8023658:	08023619 	.word	0x08023619
 802365c:	0802379d 	.word	0x0802379d
 8023660:	080236c7 	.word	0x080236c7
 8023664:	08023757 	.word	0x08023757
 8023668:	08023619 	.word	0x08023619
 802366c:	08023619 	.word	0x08023619
 8023670:	080237bf 	.word	0x080237bf
 8023674:	08023619 	.word	0x08023619
 8023678:	080236c7 	.word	0x080236c7
 802367c:	08023619 	.word	0x08023619
 8023680:	08023619 	.word	0x08023619
 8023684:	0802375f 	.word	0x0802375f
 8023688:	6833      	ldr	r3, [r6, #0]
 802368a:	1d1a      	adds	r2, r3, #4
 802368c:	681b      	ldr	r3, [r3, #0]
 802368e:	6032      	str	r2, [r6, #0]
 8023690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023698:	2301      	movs	r3, #1
 802369a:	e09d      	b.n	80237d8 <_printf_i+0x1e8>
 802369c:	6833      	ldr	r3, [r6, #0]
 802369e:	6820      	ldr	r0, [r4, #0]
 80236a0:	1d19      	adds	r1, r3, #4
 80236a2:	6031      	str	r1, [r6, #0]
 80236a4:	0606      	lsls	r6, r0, #24
 80236a6:	d501      	bpl.n	80236ac <_printf_i+0xbc>
 80236a8:	681d      	ldr	r5, [r3, #0]
 80236aa:	e003      	b.n	80236b4 <_printf_i+0xc4>
 80236ac:	0645      	lsls	r5, r0, #25
 80236ae:	d5fb      	bpl.n	80236a8 <_printf_i+0xb8>
 80236b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80236b4:	2d00      	cmp	r5, #0
 80236b6:	da03      	bge.n	80236c0 <_printf_i+0xd0>
 80236b8:	232d      	movs	r3, #45	@ 0x2d
 80236ba:	426d      	negs	r5, r5
 80236bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236c0:	4859      	ldr	r0, [pc, #356]	@ (8023828 <_printf_i+0x238>)
 80236c2:	230a      	movs	r3, #10
 80236c4:	e011      	b.n	80236ea <_printf_i+0xfa>
 80236c6:	6821      	ldr	r1, [r4, #0]
 80236c8:	6833      	ldr	r3, [r6, #0]
 80236ca:	0608      	lsls	r0, r1, #24
 80236cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80236d0:	d402      	bmi.n	80236d8 <_printf_i+0xe8>
 80236d2:	0649      	lsls	r1, r1, #25
 80236d4:	bf48      	it	mi
 80236d6:	b2ad      	uxthmi	r5, r5
 80236d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80236da:	4853      	ldr	r0, [pc, #332]	@ (8023828 <_printf_i+0x238>)
 80236dc:	6033      	str	r3, [r6, #0]
 80236de:	bf14      	ite	ne
 80236e0:	230a      	movne	r3, #10
 80236e2:	2308      	moveq	r3, #8
 80236e4:	2100      	movs	r1, #0
 80236e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80236ea:	6866      	ldr	r6, [r4, #4]
 80236ec:	60a6      	str	r6, [r4, #8]
 80236ee:	2e00      	cmp	r6, #0
 80236f0:	bfa2      	ittt	ge
 80236f2:	6821      	ldrge	r1, [r4, #0]
 80236f4:	f021 0104 	bicge.w	r1, r1, #4
 80236f8:	6021      	strge	r1, [r4, #0]
 80236fa:	b90d      	cbnz	r5, 8023700 <_printf_i+0x110>
 80236fc:	2e00      	cmp	r6, #0
 80236fe:	d04b      	beq.n	8023798 <_printf_i+0x1a8>
 8023700:	4616      	mov	r6, r2
 8023702:	fbb5 f1f3 	udiv	r1, r5, r3
 8023706:	fb03 5711 	mls	r7, r3, r1, r5
 802370a:	5dc7      	ldrb	r7, [r0, r7]
 802370c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023710:	462f      	mov	r7, r5
 8023712:	42bb      	cmp	r3, r7
 8023714:	460d      	mov	r5, r1
 8023716:	d9f4      	bls.n	8023702 <_printf_i+0x112>
 8023718:	2b08      	cmp	r3, #8
 802371a:	d10b      	bne.n	8023734 <_printf_i+0x144>
 802371c:	6823      	ldr	r3, [r4, #0]
 802371e:	07df      	lsls	r7, r3, #31
 8023720:	d508      	bpl.n	8023734 <_printf_i+0x144>
 8023722:	6923      	ldr	r3, [r4, #16]
 8023724:	6861      	ldr	r1, [r4, #4]
 8023726:	4299      	cmp	r1, r3
 8023728:	bfde      	ittt	le
 802372a:	2330      	movle	r3, #48	@ 0x30
 802372c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023730:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023734:	1b92      	subs	r2, r2, r6
 8023736:	6122      	str	r2, [r4, #16]
 8023738:	f8cd a000 	str.w	sl, [sp]
 802373c:	464b      	mov	r3, r9
 802373e:	aa03      	add	r2, sp, #12
 8023740:	4621      	mov	r1, r4
 8023742:	4640      	mov	r0, r8
 8023744:	f7ff fee6 	bl	8023514 <_printf_common>
 8023748:	3001      	adds	r0, #1
 802374a:	d14a      	bne.n	80237e2 <_printf_i+0x1f2>
 802374c:	f04f 30ff 	mov.w	r0, #4294967295
 8023750:	b004      	add	sp, #16
 8023752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023756:	6823      	ldr	r3, [r4, #0]
 8023758:	f043 0320 	orr.w	r3, r3, #32
 802375c:	6023      	str	r3, [r4, #0]
 802375e:	4833      	ldr	r0, [pc, #204]	@ (802382c <_printf_i+0x23c>)
 8023760:	2778      	movs	r7, #120	@ 0x78
 8023762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023766:	6823      	ldr	r3, [r4, #0]
 8023768:	6831      	ldr	r1, [r6, #0]
 802376a:	061f      	lsls	r7, r3, #24
 802376c:	f851 5b04 	ldr.w	r5, [r1], #4
 8023770:	d402      	bmi.n	8023778 <_printf_i+0x188>
 8023772:	065f      	lsls	r7, r3, #25
 8023774:	bf48      	it	mi
 8023776:	b2ad      	uxthmi	r5, r5
 8023778:	6031      	str	r1, [r6, #0]
 802377a:	07d9      	lsls	r1, r3, #31
 802377c:	bf44      	itt	mi
 802377e:	f043 0320 	orrmi.w	r3, r3, #32
 8023782:	6023      	strmi	r3, [r4, #0]
 8023784:	b11d      	cbz	r5, 802378e <_printf_i+0x19e>
 8023786:	2310      	movs	r3, #16
 8023788:	e7ac      	b.n	80236e4 <_printf_i+0xf4>
 802378a:	4827      	ldr	r0, [pc, #156]	@ (8023828 <_printf_i+0x238>)
 802378c:	e7e9      	b.n	8023762 <_printf_i+0x172>
 802378e:	6823      	ldr	r3, [r4, #0]
 8023790:	f023 0320 	bic.w	r3, r3, #32
 8023794:	6023      	str	r3, [r4, #0]
 8023796:	e7f6      	b.n	8023786 <_printf_i+0x196>
 8023798:	4616      	mov	r6, r2
 802379a:	e7bd      	b.n	8023718 <_printf_i+0x128>
 802379c:	6833      	ldr	r3, [r6, #0]
 802379e:	6825      	ldr	r5, [r4, #0]
 80237a0:	6961      	ldr	r1, [r4, #20]
 80237a2:	1d18      	adds	r0, r3, #4
 80237a4:	6030      	str	r0, [r6, #0]
 80237a6:	062e      	lsls	r6, r5, #24
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	d501      	bpl.n	80237b0 <_printf_i+0x1c0>
 80237ac:	6019      	str	r1, [r3, #0]
 80237ae:	e002      	b.n	80237b6 <_printf_i+0x1c6>
 80237b0:	0668      	lsls	r0, r5, #25
 80237b2:	d5fb      	bpl.n	80237ac <_printf_i+0x1bc>
 80237b4:	8019      	strh	r1, [r3, #0]
 80237b6:	2300      	movs	r3, #0
 80237b8:	6123      	str	r3, [r4, #16]
 80237ba:	4616      	mov	r6, r2
 80237bc:	e7bc      	b.n	8023738 <_printf_i+0x148>
 80237be:	6833      	ldr	r3, [r6, #0]
 80237c0:	1d1a      	adds	r2, r3, #4
 80237c2:	6032      	str	r2, [r6, #0]
 80237c4:	681e      	ldr	r6, [r3, #0]
 80237c6:	6862      	ldr	r2, [r4, #4]
 80237c8:	2100      	movs	r1, #0
 80237ca:	4630      	mov	r0, r6
 80237cc:	f7dc fdb8 	bl	8000340 <memchr>
 80237d0:	b108      	cbz	r0, 80237d6 <_printf_i+0x1e6>
 80237d2:	1b80      	subs	r0, r0, r6
 80237d4:	6060      	str	r0, [r4, #4]
 80237d6:	6863      	ldr	r3, [r4, #4]
 80237d8:	6123      	str	r3, [r4, #16]
 80237da:	2300      	movs	r3, #0
 80237dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80237e0:	e7aa      	b.n	8023738 <_printf_i+0x148>
 80237e2:	6923      	ldr	r3, [r4, #16]
 80237e4:	4632      	mov	r2, r6
 80237e6:	4649      	mov	r1, r9
 80237e8:	4640      	mov	r0, r8
 80237ea:	47d0      	blx	sl
 80237ec:	3001      	adds	r0, #1
 80237ee:	d0ad      	beq.n	802374c <_printf_i+0x15c>
 80237f0:	6823      	ldr	r3, [r4, #0]
 80237f2:	079b      	lsls	r3, r3, #30
 80237f4:	d413      	bmi.n	802381e <_printf_i+0x22e>
 80237f6:	68e0      	ldr	r0, [r4, #12]
 80237f8:	9b03      	ldr	r3, [sp, #12]
 80237fa:	4298      	cmp	r0, r3
 80237fc:	bfb8      	it	lt
 80237fe:	4618      	movlt	r0, r3
 8023800:	e7a6      	b.n	8023750 <_printf_i+0x160>
 8023802:	2301      	movs	r3, #1
 8023804:	4632      	mov	r2, r6
 8023806:	4649      	mov	r1, r9
 8023808:	4640      	mov	r0, r8
 802380a:	47d0      	blx	sl
 802380c:	3001      	adds	r0, #1
 802380e:	d09d      	beq.n	802374c <_printf_i+0x15c>
 8023810:	3501      	adds	r5, #1
 8023812:	68e3      	ldr	r3, [r4, #12]
 8023814:	9903      	ldr	r1, [sp, #12]
 8023816:	1a5b      	subs	r3, r3, r1
 8023818:	42ab      	cmp	r3, r5
 802381a:	dcf2      	bgt.n	8023802 <_printf_i+0x212>
 802381c:	e7eb      	b.n	80237f6 <_printf_i+0x206>
 802381e:	2500      	movs	r5, #0
 8023820:	f104 0619 	add.w	r6, r4, #25
 8023824:	e7f5      	b.n	8023812 <_printf_i+0x222>
 8023826:	bf00      	nop
 8023828:	08038fb1 	.word	0x08038fb1
 802382c:	08038fc2 	.word	0x08038fc2

08023830 <__sflush_r>:
 8023830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023838:	0716      	lsls	r6, r2, #28
 802383a:	4605      	mov	r5, r0
 802383c:	460c      	mov	r4, r1
 802383e:	d454      	bmi.n	80238ea <__sflush_r+0xba>
 8023840:	684b      	ldr	r3, [r1, #4]
 8023842:	2b00      	cmp	r3, #0
 8023844:	dc02      	bgt.n	802384c <__sflush_r+0x1c>
 8023846:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023848:	2b00      	cmp	r3, #0
 802384a:	dd48      	ble.n	80238de <__sflush_r+0xae>
 802384c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802384e:	2e00      	cmp	r6, #0
 8023850:	d045      	beq.n	80238de <__sflush_r+0xae>
 8023852:	2300      	movs	r3, #0
 8023854:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023858:	682f      	ldr	r7, [r5, #0]
 802385a:	6a21      	ldr	r1, [r4, #32]
 802385c:	602b      	str	r3, [r5, #0]
 802385e:	d030      	beq.n	80238c2 <__sflush_r+0x92>
 8023860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023862:	89a3      	ldrh	r3, [r4, #12]
 8023864:	0759      	lsls	r1, r3, #29
 8023866:	d505      	bpl.n	8023874 <__sflush_r+0x44>
 8023868:	6863      	ldr	r3, [r4, #4]
 802386a:	1ad2      	subs	r2, r2, r3
 802386c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802386e:	b10b      	cbz	r3, 8023874 <__sflush_r+0x44>
 8023870:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023872:	1ad2      	subs	r2, r2, r3
 8023874:	2300      	movs	r3, #0
 8023876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023878:	6a21      	ldr	r1, [r4, #32]
 802387a:	4628      	mov	r0, r5
 802387c:	47b0      	blx	r6
 802387e:	1c43      	adds	r3, r0, #1
 8023880:	89a3      	ldrh	r3, [r4, #12]
 8023882:	d106      	bne.n	8023892 <__sflush_r+0x62>
 8023884:	6829      	ldr	r1, [r5, #0]
 8023886:	291d      	cmp	r1, #29
 8023888:	d82b      	bhi.n	80238e2 <__sflush_r+0xb2>
 802388a:	4a2a      	ldr	r2, [pc, #168]	@ (8023934 <__sflush_r+0x104>)
 802388c:	410a      	asrs	r2, r1
 802388e:	07d6      	lsls	r6, r2, #31
 8023890:	d427      	bmi.n	80238e2 <__sflush_r+0xb2>
 8023892:	2200      	movs	r2, #0
 8023894:	6062      	str	r2, [r4, #4]
 8023896:	04d9      	lsls	r1, r3, #19
 8023898:	6922      	ldr	r2, [r4, #16]
 802389a:	6022      	str	r2, [r4, #0]
 802389c:	d504      	bpl.n	80238a8 <__sflush_r+0x78>
 802389e:	1c42      	adds	r2, r0, #1
 80238a0:	d101      	bne.n	80238a6 <__sflush_r+0x76>
 80238a2:	682b      	ldr	r3, [r5, #0]
 80238a4:	b903      	cbnz	r3, 80238a8 <__sflush_r+0x78>
 80238a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80238a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80238aa:	602f      	str	r7, [r5, #0]
 80238ac:	b1b9      	cbz	r1, 80238de <__sflush_r+0xae>
 80238ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80238b2:	4299      	cmp	r1, r3
 80238b4:	d002      	beq.n	80238bc <__sflush_r+0x8c>
 80238b6:	4628      	mov	r0, r5
 80238b8:	f7ff fa92 	bl	8022de0 <_free_r>
 80238bc:	2300      	movs	r3, #0
 80238be:	6363      	str	r3, [r4, #52]	@ 0x34
 80238c0:	e00d      	b.n	80238de <__sflush_r+0xae>
 80238c2:	2301      	movs	r3, #1
 80238c4:	4628      	mov	r0, r5
 80238c6:	47b0      	blx	r6
 80238c8:	4602      	mov	r2, r0
 80238ca:	1c50      	adds	r0, r2, #1
 80238cc:	d1c9      	bne.n	8023862 <__sflush_r+0x32>
 80238ce:	682b      	ldr	r3, [r5, #0]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d0c6      	beq.n	8023862 <__sflush_r+0x32>
 80238d4:	2b1d      	cmp	r3, #29
 80238d6:	d001      	beq.n	80238dc <__sflush_r+0xac>
 80238d8:	2b16      	cmp	r3, #22
 80238da:	d11e      	bne.n	802391a <__sflush_r+0xea>
 80238dc:	602f      	str	r7, [r5, #0]
 80238de:	2000      	movs	r0, #0
 80238e0:	e022      	b.n	8023928 <__sflush_r+0xf8>
 80238e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80238e6:	b21b      	sxth	r3, r3
 80238e8:	e01b      	b.n	8023922 <__sflush_r+0xf2>
 80238ea:	690f      	ldr	r7, [r1, #16]
 80238ec:	2f00      	cmp	r7, #0
 80238ee:	d0f6      	beq.n	80238de <__sflush_r+0xae>
 80238f0:	0793      	lsls	r3, r2, #30
 80238f2:	680e      	ldr	r6, [r1, #0]
 80238f4:	bf08      	it	eq
 80238f6:	694b      	ldreq	r3, [r1, #20]
 80238f8:	600f      	str	r7, [r1, #0]
 80238fa:	bf18      	it	ne
 80238fc:	2300      	movne	r3, #0
 80238fe:	eba6 0807 	sub.w	r8, r6, r7
 8023902:	608b      	str	r3, [r1, #8]
 8023904:	f1b8 0f00 	cmp.w	r8, #0
 8023908:	dde9      	ble.n	80238de <__sflush_r+0xae>
 802390a:	6a21      	ldr	r1, [r4, #32]
 802390c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802390e:	4643      	mov	r3, r8
 8023910:	463a      	mov	r2, r7
 8023912:	4628      	mov	r0, r5
 8023914:	47b0      	blx	r6
 8023916:	2800      	cmp	r0, #0
 8023918:	dc08      	bgt.n	802392c <__sflush_r+0xfc>
 802391a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802391e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023922:	81a3      	strh	r3, [r4, #12]
 8023924:	f04f 30ff 	mov.w	r0, #4294967295
 8023928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802392c:	4407      	add	r7, r0
 802392e:	eba8 0800 	sub.w	r8, r8, r0
 8023932:	e7e7      	b.n	8023904 <__sflush_r+0xd4>
 8023934:	dfbffffe 	.word	0xdfbffffe

08023938 <_fflush_r>:
 8023938:	b538      	push	{r3, r4, r5, lr}
 802393a:	690b      	ldr	r3, [r1, #16]
 802393c:	4605      	mov	r5, r0
 802393e:	460c      	mov	r4, r1
 8023940:	b913      	cbnz	r3, 8023948 <_fflush_r+0x10>
 8023942:	2500      	movs	r5, #0
 8023944:	4628      	mov	r0, r5
 8023946:	bd38      	pop	{r3, r4, r5, pc}
 8023948:	b118      	cbz	r0, 8023952 <_fflush_r+0x1a>
 802394a:	6a03      	ldr	r3, [r0, #32]
 802394c:	b90b      	cbnz	r3, 8023952 <_fflush_r+0x1a>
 802394e:	f7fe ffad 	bl	80228ac <__sinit>
 8023952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023956:	2b00      	cmp	r3, #0
 8023958:	d0f3      	beq.n	8023942 <_fflush_r+0xa>
 802395a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802395c:	07d0      	lsls	r0, r2, #31
 802395e:	d404      	bmi.n	802396a <_fflush_r+0x32>
 8023960:	0599      	lsls	r1, r3, #22
 8023962:	d402      	bmi.n	802396a <_fflush_r+0x32>
 8023964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023966:	f7ff fa04 	bl	8022d72 <__retarget_lock_acquire_recursive>
 802396a:	4628      	mov	r0, r5
 802396c:	4621      	mov	r1, r4
 802396e:	f7ff ff5f 	bl	8023830 <__sflush_r>
 8023972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023974:	07da      	lsls	r2, r3, #31
 8023976:	4605      	mov	r5, r0
 8023978:	d4e4      	bmi.n	8023944 <_fflush_r+0xc>
 802397a:	89a3      	ldrh	r3, [r4, #12]
 802397c:	059b      	lsls	r3, r3, #22
 802397e:	d4e1      	bmi.n	8023944 <_fflush_r+0xc>
 8023980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023982:	f7ff f9f7 	bl	8022d74 <__retarget_lock_release_recursive>
 8023986:	e7dd      	b.n	8023944 <_fflush_r+0xc>

08023988 <fiprintf>:
 8023988:	b40e      	push	{r1, r2, r3}
 802398a:	b503      	push	{r0, r1, lr}
 802398c:	4601      	mov	r1, r0
 802398e:	ab03      	add	r3, sp, #12
 8023990:	4805      	ldr	r0, [pc, #20]	@ (80239a8 <fiprintf+0x20>)
 8023992:	f853 2b04 	ldr.w	r2, [r3], #4
 8023996:	6800      	ldr	r0, [r0, #0]
 8023998:	9301      	str	r3, [sp, #4]
 802399a:	f7ff fca3 	bl	80232e4 <_vfiprintf_r>
 802399e:	b002      	add	sp, #8
 80239a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80239a4:	b003      	add	sp, #12
 80239a6:	4770      	bx	lr
 80239a8:	20000050 	.word	0x20000050

080239ac <__swhatbuf_r>:
 80239ac:	b570      	push	{r4, r5, r6, lr}
 80239ae:	460c      	mov	r4, r1
 80239b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239b4:	2900      	cmp	r1, #0
 80239b6:	b096      	sub	sp, #88	@ 0x58
 80239b8:	4615      	mov	r5, r2
 80239ba:	461e      	mov	r6, r3
 80239bc:	da0d      	bge.n	80239da <__swhatbuf_r+0x2e>
 80239be:	89a3      	ldrh	r3, [r4, #12]
 80239c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80239c4:	f04f 0100 	mov.w	r1, #0
 80239c8:	bf14      	ite	ne
 80239ca:	2340      	movne	r3, #64	@ 0x40
 80239cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80239d0:	2000      	movs	r0, #0
 80239d2:	6031      	str	r1, [r6, #0]
 80239d4:	602b      	str	r3, [r5, #0]
 80239d6:	b016      	add	sp, #88	@ 0x58
 80239d8:	bd70      	pop	{r4, r5, r6, pc}
 80239da:	466a      	mov	r2, sp
 80239dc:	f000 f848 	bl	8023a70 <_fstat_r>
 80239e0:	2800      	cmp	r0, #0
 80239e2:	dbec      	blt.n	80239be <__swhatbuf_r+0x12>
 80239e4:	9901      	ldr	r1, [sp, #4]
 80239e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80239ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80239ee:	4259      	negs	r1, r3
 80239f0:	4159      	adcs	r1, r3
 80239f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80239f6:	e7eb      	b.n	80239d0 <__swhatbuf_r+0x24>

080239f8 <__smakebuf_r>:
 80239f8:	898b      	ldrh	r3, [r1, #12]
 80239fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80239fc:	079d      	lsls	r5, r3, #30
 80239fe:	4606      	mov	r6, r0
 8023a00:	460c      	mov	r4, r1
 8023a02:	d507      	bpl.n	8023a14 <__smakebuf_r+0x1c>
 8023a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023a08:	6023      	str	r3, [r4, #0]
 8023a0a:	6123      	str	r3, [r4, #16]
 8023a0c:	2301      	movs	r3, #1
 8023a0e:	6163      	str	r3, [r4, #20]
 8023a10:	b003      	add	sp, #12
 8023a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a14:	ab01      	add	r3, sp, #4
 8023a16:	466a      	mov	r2, sp
 8023a18:	f7ff ffc8 	bl	80239ac <__swhatbuf_r>
 8023a1c:	9f00      	ldr	r7, [sp, #0]
 8023a1e:	4605      	mov	r5, r0
 8023a20:	4639      	mov	r1, r7
 8023a22:	4630      	mov	r0, r6
 8023a24:	f7ff fa50 	bl	8022ec8 <_malloc_r>
 8023a28:	b948      	cbnz	r0, 8023a3e <__smakebuf_r+0x46>
 8023a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a2e:	059a      	lsls	r2, r3, #22
 8023a30:	d4ee      	bmi.n	8023a10 <__smakebuf_r+0x18>
 8023a32:	f023 0303 	bic.w	r3, r3, #3
 8023a36:	f043 0302 	orr.w	r3, r3, #2
 8023a3a:	81a3      	strh	r3, [r4, #12]
 8023a3c:	e7e2      	b.n	8023a04 <__smakebuf_r+0xc>
 8023a3e:	89a3      	ldrh	r3, [r4, #12]
 8023a40:	6020      	str	r0, [r4, #0]
 8023a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023a46:	81a3      	strh	r3, [r4, #12]
 8023a48:	9b01      	ldr	r3, [sp, #4]
 8023a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023a4e:	b15b      	cbz	r3, 8023a68 <__smakebuf_r+0x70>
 8023a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a54:	4630      	mov	r0, r6
 8023a56:	f000 f81d 	bl	8023a94 <_isatty_r>
 8023a5a:	b128      	cbz	r0, 8023a68 <__smakebuf_r+0x70>
 8023a5c:	89a3      	ldrh	r3, [r4, #12]
 8023a5e:	f023 0303 	bic.w	r3, r3, #3
 8023a62:	f043 0301 	orr.w	r3, r3, #1
 8023a66:	81a3      	strh	r3, [r4, #12]
 8023a68:	89a3      	ldrh	r3, [r4, #12]
 8023a6a:	431d      	orrs	r5, r3
 8023a6c:	81a5      	strh	r5, [r4, #12]
 8023a6e:	e7cf      	b.n	8023a10 <__smakebuf_r+0x18>

08023a70 <_fstat_r>:
 8023a70:	b538      	push	{r3, r4, r5, lr}
 8023a72:	4d07      	ldr	r5, [pc, #28]	@ (8023a90 <_fstat_r+0x20>)
 8023a74:	2300      	movs	r3, #0
 8023a76:	4604      	mov	r4, r0
 8023a78:	4608      	mov	r0, r1
 8023a7a:	4611      	mov	r1, r2
 8023a7c:	602b      	str	r3, [r5, #0]
 8023a7e:	f7de fbd9 	bl	8002234 <_fstat>
 8023a82:	1c43      	adds	r3, r0, #1
 8023a84:	d102      	bne.n	8023a8c <_fstat_r+0x1c>
 8023a86:	682b      	ldr	r3, [r5, #0]
 8023a88:	b103      	cbz	r3, 8023a8c <_fstat_r+0x1c>
 8023a8a:	6023      	str	r3, [r4, #0]
 8023a8c:	bd38      	pop	{r3, r4, r5, pc}
 8023a8e:	bf00      	nop
 8023a90:	20010078 	.word	0x20010078

08023a94 <_isatty_r>:
 8023a94:	b538      	push	{r3, r4, r5, lr}
 8023a96:	4d06      	ldr	r5, [pc, #24]	@ (8023ab0 <_isatty_r+0x1c>)
 8023a98:	2300      	movs	r3, #0
 8023a9a:	4604      	mov	r4, r0
 8023a9c:	4608      	mov	r0, r1
 8023a9e:	602b      	str	r3, [r5, #0]
 8023aa0:	f7de fbd8 	bl	8002254 <_isatty>
 8023aa4:	1c43      	adds	r3, r0, #1
 8023aa6:	d102      	bne.n	8023aae <_isatty_r+0x1a>
 8023aa8:	682b      	ldr	r3, [r5, #0]
 8023aaa:	b103      	cbz	r3, 8023aae <_isatty_r+0x1a>
 8023aac:	6023      	str	r3, [r4, #0]
 8023aae:	bd38      	pop	{r3, r4, r5, pc}
 8023ab0:	20010078 	.word	0x20010078

08023ab4 <_sbrk_r>:
 8023ab4:	b538      	push	{r3, r4, r5, lr}
 8023ab6:	4d06      	ldr	r5, [pc, #24]	@ (8023ad0 <_sbrk_r+0x1c>)
 8023ab8:	2300      	movs	r3, #0
 8023aba:	4604      	mov	r4, r0
 8023abc:	4608      	mov	r0, r1
 8023abe:	602b      	str	r3, [r5, #0]
 8023ac0:	f7de fbe0 	bl	8002284 <_sbrk>
 8023ac4:	1c43      	adds	r3, r0, #1
 8023ac6:	d102      	bne.n	8023ace <_sbrk_r+0x1a>
 8023ac8:	682b      	ldr	r3, [r5, #0]
 8023aca:	b103      	cbz	r3, 8023ace <_sbrk_r+0x1a>
 8023acc:	6023      	str	r3, [r4, #0]
 8023ace:	bd38      	pop	{r3, r4, r5, pc}
 8023ad0:	20010078 	.word	0x20010078

08023ad4 <abort>:
 8023ad4:	b508      	push	{r3, lr}
 8023ad6:	2006      	movs	r0, #6
 8023ad8:	f000 f85a 	bl	8023b90 <raise>
 8023adc:	2001      	movs	r0, #1
 8023ade:	f7de fb75 	bl	80021cc <_exit>

08023ae2 <_realloc_r>:
 8023ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ae6:	4680      	mov	r8, r0
 8023ae8:	4615      	mov	r5, r2
 8023aea:	460c      	mov	r4, r1
 8023aec:	b921      	cbnz	r1, 8023af8 <_realloc_r+0x16>
 8023aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023af2:	4611      	mov	r1, r2
 8023af4:	f7ff b9e8 	b.w	8022ec8 <_malloc_r>
 8023af8:	b92a      	cbnz	r2, 8023b06 <_realloc_r+0x24>
 8023afa:	f7ff f971 	bl	8022de0 <_free_r>
 8023afe:	2400      	movs	r4, #0
 8023b00:	4620      	mov	r0, r4
 8023b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b06:	f000 f85f 	bl	8023bc8 <_malloc_usable_size_r>
 8023b0a:	4285      	cmp	r5, r0
 8023b0c:	4606      	mov	r6, r0
 8023b0e:	d802      	bhi.n	8023b16 <_realloc_r+0x34>
 8023b10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8023b14:	d8f4      	bhi.n	8023b00 <_realloc_r+0x1e>
 8023b16:	4629      	mov	r1, r5
 8023b18:	4640      	mov	r0, r8
 8023b1a:	f7ff f9d5 	bl	8022ec8 <_malloc_r>
 8023b1e:	4607      	mov	r7, r0
 8023b20:	2800      	cmp	r0, #0
 8023b22:	d0ec      	beq.n	8023afe <_realloc_r+0x1c>
 8023b24:	42b5      	cmp	r5, r6
 8023b26:	462a      	mov	r2, r5
 8023b28:	4621      	mov	r1, r4
 8023b2a:	bf28      	it	cs
 8023b2c:	4632      	movcs	r2, r6
 8023b2e:	f7ff f92a 	bl	8022d86 <memcpy>
 8023b32:	4621      	mov	r1, r4
 8023b34:	4640      	mov	r0, r8
 8023b36:	f7ff f953 	bl	8022de0 <_free_r>
 8023b3a:	463c      	mov	r4, r7
 8023b3c:	e7e0      	b.n	8023b00 <_realloc_r+0x1e>

08023b3e <_raise_r>:
 8023b3e:	291f      	cmp	r1, #31
 8023b40:	b538      	push	{r3, r4, r5, lr}
 8023b42:	4605      	mov	r5, r0
 8023b44:	460c      	mov	r4, r1
 8023b46:	d904      	bls.n	8023b52 <_raise_r+0x14>
 8023b48:	2316      	movs	r3, #22
 8023b4a:	6003      	str	r3, [r0, #0]
 8023b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8023b50:	bd38      	pop	{r3, r4, r5, pc}
 8023b52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023b54:	b112      	cbz	r2, 8023b5c <_raise_r+0x1e>
 8023b56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023b5a:	b94b      	cbnz	r3, 8023b70 <_raise_r+0x32>
 8023b5c:	4628      	mov	r0, r5
 8023b5e:	f000 f831 	bl	8023bc4 <_getpid_r>
 8023b62:	4622      	mov	r2, r4
 8023b64:	4601      	mov	r1, r0
 8023b66:	4628      	mov	r0, r5
 8023b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023b6c:	f000 b818 	b.w	8023ba0 <_kill_r>
 8023b70:	2b01      	cmp	r3, #1
 8023b72:	d00a      	beq.n	8023b8a <_raise_r+0x4c>
 8023b74:	1c59      	adds	r1, r3, #1
 8023b76:	d103      	bne.n	8023b80 <_raise_r+0x42>
 8023b78:	2316      	movs	r3, #22
 8023b7a:	6003      	str	r3, [r0, #0]
 8023b7c:	2001      	movs	r0, #1
 8023b7e:	e7e7      	b.n	8023b50 <_raise_r+0x12>
 8023b80:	2100      	movs	r1, #0
 8023b82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023b86:	4620      	mov	r0, r4
 8023b88:	4798      	blx	r3
 8023b8a:	2000      	movs	r0, #0
 8023b8c:	e7e0      	b.n	8023b50 <_raise_r+0x12>
	...

08023b90 <raise>:
 8023b90:	4b02      	ldr	r3, [pc, #8]	@ (8023b9c <raise+0xc>)
 8023b92:	4601      	mov	r1, r0
 8023b94:	6818      	ldr	r0, [r3, #0]
 8023b96:	f7ff bfd2 	b.w	8023b3e <_raise_r>
 8023b9a:	bf00      	nop
 8023b9c:	20000050 	.word	0x20000050

08023ba0 <_kill_r>:
 8023ba0:	b538      	push	{r3, r4, r5, lr}
 8023ba2:	4d07      	ldr	r5, [pc, #28]	@ (8023bc0 <_kill_r+0x20>)
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	4604      	mov	r4, r0
 8023ba8:	4608      	mov	r0, r1
 8023baa:	4611      	mov	r1, r2
 8023bac:	602b      	str	r3, [r5, #0]
 8023bae:	f7de fafd 	bl	80021ac <_kill>
 8023bb2:	1c43      	adds	r3, r0, #1
 8023bb4:	d102      	bne.n	8023bbc <_kill_r+0x1c>
 8023bb6:	682b      	ldr	r3, [r5, #0]
 8023bb8:	b103      	cbz	r3, 8023bbc <_kill_r+0x1c>
 8023bba:	6023      	str	r3, [r4, #0]
 8023bbc:	bd38      	pop	{r3, r4, r5, pc}
 8023bbe:	bf00      	nop
 8023bc0:	20010078 	.word	0x20010078

08023bc4 <_getpid_r>:
 8023bc4:	f7de baea 	b.w	800219c <_getpid>

08023bc8 <_malloc_usable_size_r>:
 8023bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023bcc:	1f18      	subs	r0, r3, #4
 8023bce:	2b00      	cmp	r3, #0
 8023bd0:	bfbc      	itt	lt
 8023bd2:	580b      	ldrlt	r3, [r1, r0]
 8023bd4:	18c0      	addlt	r0, r0, r3
 8023bd6:	4770      	bx	lr

08023bd8 <_init>:
 8023bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bda:	bf00      	nop
 8023bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bde:	bc08      	pop	{r3}
 8023be0:	469e      	mov	lr, r3
 8023be2:	4770      	bx	lr

08023be4 <_fini>:
 8023be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023be6:	bf00      	nop
 8023be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bea:	bc08      	pop	{r3}
 8023bec:	469e      	mov	lr, r3
 8023bee:	4770      	bx	lr
