
LwIP_HTTP_Server_Socket_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023940  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000153f0  08023c10  08023c10  00024c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039000  08039000  0003b0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08039000  08039000  0003a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039008  08039008  0003b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039008  08039008  0003a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803900c  0803900c  0003a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08039010  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010128  200000a0  080390b0  0003b0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00002000  200101c8  080390b0  0003b1c8  2**0
                  ALLOC
 11 .lwip_sec     00003583  30000000  080390b0  0003c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003b0a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0004c60f  00000000  00000000  0003b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  000876dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0004af35  00000000  00000000  00087765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a8ec  00000000  00000000  000d269a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003358  00000000  00000000  000dcf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179b6e  00000000  00000000  000e02e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000028a2  00000000  00000000  00259e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00047d05  00000000  00000000  0025c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a43f5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e0b4  00000000  00000000  002a4438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000a0 	.word	0x200000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08023bf8 	.word	0x08023bf8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a4 	.word	0x200000a4
 800030c:	08023bf8 	.word	0x08023bf8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_ldivmod>:
 80003e0:	b97b      	cbnz	r3, 8000402 <__aeabi_ldivmod+0x22>
 80003e2:	b972      	cbnz	r2, 8000402 <__aeabi_ldivmod+0x22>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bfbe      	ittt	lt
 80003e8:	2000      	movlt	r0, #0
 80003ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ee:	e006      	blt.n	80003fe <__aeabi_ldivmod+0x1e>
 80003f0:	bf08      	it	eq
 80003f2:	2800      	cmpeq	r0, #0
 80003f4:	bf1c      	itt	ne
 80003f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003fa:	f04f 30ff 	movne.w	r0, #4294967295
 80003fe:	f000 b9b5 	b.w	800076c <__aeabi_idiv0>
 8000402:	f1ad 0c08 	sub.w	ip, sp, #8
 8000406:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040a:	2900      	cmp	r1, #0
 800040c:	db09      	blt.n	8000422 <__aeabi_ldivmod+0x42>
 800040e:	2b00      	cmp	r3, #0
 8000410:	db1a      	blt.n	8000448 <__aeabi_ldivmod+0x68>
 8000412:	f000 f84d 	bl	80004b0 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4770      	bx	lr
 8000422:	4240      	negs	r0, r0
 8000424:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000428:	2b00      	cmp	r3, #0
 800042a:	db1b      	blt.n	8000464 <__aeabi_ldivmod+0x84>
 800042c:	f000 f840 	bl	80004b0 <__udivmoddi4>
 8000430:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000438:	b004      	add	sp, #16
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	4252      	negs	r2, r2
 8000442:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000446:	4770      	bx	lr
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	f000 f82f 	bl	80004b0 <__udivmoddi4>
 8000452:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045a:	b004      	add	sp, #16
 800045c:	4240      	negs	r0, r0
 800045e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000462:	4770      	bx	lr
 8000464:	4252      	negs	r2, r2
 8000466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046a:	f000 f821 	bl	80004b0 <__udivmoddi4>
 800046e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000476:	b004      	add	sp, #16
 8000478:	4252      	negs	r2, r2
 800047a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800047e:	4770      	bx	lr

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b96a 	b.w	800076c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	460c      	mov	r4, r1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d14e      	bne.n	800055a <__udivmoddi4+0xaa>
 80004bc:	4694      	mov	ip, r2
 80004be:	458c      	cmp	ip, r1
 80004c0:	4686      	mov	lr, r0
 80004c2:	fab2 f282 	clz	r2, r2
 80004c6:	d962      	bls.n	800058e <__udivmoddi4+0xde>
 80004c8:	b14a      	cbz	r2, 80004de <__udivmoddi4+0x2e>
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	4091      	lsls	r1, r2
 80004d0:	fa20 f303 	lsr.w	r3, r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	4319      	orrs	r1, r3
 80004da:	fa00 fe02 	lsl.w	lr, r0, r2
 80004de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e2:	fa1f f68c 	uxth.w	r6, ip
 80004e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ee:	fb07 1114 	mls	r1, r7, r4, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb04 f106 	mul.w	r1, r4, r6
 80004fa:	4299      	cmp	r1, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x64>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f104 30ff 	add.w	r0, r4, #4294967295
 8000506:	f080 8112 	bcs.w	800072e <__udivmoddi4+0x27e>
 800050a:	4299      	cmp	r1, r3
 800050c:	f240 810f 	bls.w	800072e <__udivmoddi4+0x27e>
 8000510:	3c02      	subs	r4, #2
 8000512:	4463      	add	r3, ip
 8000514:	1a59      	subs	r1, r3, r1
 8000516:	fa1f f38e 	uxth.w	r3, lr
 800051a:	fbb1 f0f7 	udiv	r0, r1, r7
 800051e:	fb07 1110 	mls	r1, r7, r0, r1
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	fb00 f606 	mul.w	r6, r0, r6
 800052a:	429e      	cmp	r6, r3
 800052c:	d90a      	bls.n	8000544 <__udivmoddi4+0x94>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 31ff 	add.w	r1, r0, #4294967295
 8000536:	f080 80fc 	bcs.w	8000732 <__udivmoddi4+0x282>
 800053a:	429e      	cmp	r6, r3
 800053c:	f240 80f9 	bls.w	8000732 <__udivmoddi4+0x282>
 8000540:	4463      	add	r3, ip
 8000542:	3802      	subs	r0, #2
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800054a:	2100      	movs	r1, #0
 800054c:	b11d      	cbz	r5, 8000556 <__udivmoddi4+0xa6>
 800054e:	40d3      	lsrs	r3, r2
 8000550:	2200      	movs	r2, #0
 8000552:	e9c5 3200 	strd	r3, r2, [r5]
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	428b      	cmp	r3, r1
 800055c:	d905      	bls.n	800056a <__udivmoddi4+0xba>
 800055e:	b10d      	cbz	r5, 8000564 <__udivmoddi4+0xb4>
 8000560:	e9c5 0100 	strd	r0, r1, [r5]
 8000564:	2100      	movs	r1, #0
 8000566:	4608      	mov	r0, r1
 8000568:	e7f5      	b.n	8000556 <__udivmoddi4+0xa6>
 800056a:	fab3 f183 	clz	r1, r3
 800056e:	2900      	cmp	r1, #0
 8000570:	d146      	bne.n	8000600 <__udivmoddi4+0x150>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d302      	bcc.n	800057c <__udivmoddi4+0xcc>
 8000576:	4290      	cmp	r0, r2
 8000578:	f0c0 80f0 	bcc.w	800075c <__udivmoddi4+0x2ac>
 800057c:	1a86      	subs	r6, r0, r2
 800057e:	eb64 0303 	sbc.w	r3, r4, r3
 8000582:	2001      	movs	r0, #1
 8000584:	2d00      	cmp	r5, #0
 8000586:	d0e6      	beq.n	8000556 <__udivmoddi4+0xa6>
 8000588:	e9c5 6300 	strd	r6, r3, [r5]
 800058c:	e7e3      	b.n	8000556 <__udivmoddi4+0xa6>
 800058e:	2a00      	cmp	r2, #0
 8000590:	f040 8090 	bne.w	80006b4 <__udivmoddi4+0x204>
 8000594:	eba1 040c 	sub.w	r4, r1, ip
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa1f f78c 	uxth.w	r7, ip
 80005a0:	2101      	movs	r1, #1
 80005a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80005a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005aa:	fb08 4416 	mls	r4, r8, r6, r4
 80005ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b2:	fb07 f006 	mul.w	r0, r7, r6
 80005b6:	4298      	cmp	r0, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x11c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f106 34ff 	add.w	r4, r6, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x11a>
 80005c4:	4298      	cmp	r0, r3
 80005c6:	f200 80cd 	bhi.w	8000764 <__udivmoddi4+0x2b4>
 80005ca:	4626      	mov	r6, r4
 80005cc:	1a1c      	subs	r4, r3, r0
 80005ce:	fa1f f38e 	uxth.w	r3, lr
 80005d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005d6:	fb08 4410 	mls	r4, r8, r0, r4
 80005da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005de:	fb00 f707 	mul.w	r7, r0, r7
 80005e2:	429f      	cmp	r7, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x148>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x146>
 80005f0:	429f      	cmp	r7, r3
 80005f2:	f200 80b0 	bhi.w	8000756 <__udivmoddi4+0x2a6>
 80005f6:	4620      	mov	r0, r4
 80005f8:	1bdb      	subs	r3, r3, r7
 80005fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005fe:	e7a5      	b.n	800054c <__udivmoddi4+0x9c>
 8000600:	f1c1 0620 	rsb	r6, r1, #32
 8000604:	408b      	lsls	r3, r1
 8000606:	fa22 f706 	lsr.w	r7, r2, r6
 800060a:	431f      	orrs	r7, r3
 800060c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000610:	fa04 f301 	lsl.w	r3, r4, r1
 8000614:	ea43 030c 	orr.w	r3, r3, ip
 8000618:	40f4      	lsrs	r4, r6
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	0c38      	lsrs	r0, r7, #16
 8000620:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000624:	fbb4 fef0 	udiv	lr, r4, r0
 8000628:	fa1f fc87 	uxth.w	ip, r7
 800062c:	fb00 441e 	mls	r4, r0, lr, r4
 8000630:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000634:	fb0e f90c 	mul.w	r9, lr, ip
 8000638:	45a1      	cmp	r9, r4
 800063a:	fa02 f201 	lsl.w	r2, r2, r1
 800063e:	d90a      	bls.n	8000656 <__udivmoddi4+0x1a6>
 8000640:	193c      	adds	r4, r7, r4
 8000642:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000646:	f080 8084 	bcs.w	8000752 <__udivmoddi4+0x2a2>
 800064a:	45a1      	cmp	r9, r4
 800064c:	f240 8081 	bls.w	8000752 <__udivmoddi4+0x2a2>
 8000650:	f1ae 0e02 	sub.w	lr, lr, #2
 8000654:	443c      	add	r4, r7
 8000656:	eba4 0409 	sub.w	r4, r4, r9
 800065a:	fa1f f983 	uxth.w	r9, r3
 800065e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000662:	fb00 4413 	mls	r4, r0, r3, r4
 8000666:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800066a:	fb03 fc0c 	mul.w	ip, r3, ip
 800066e:	45a4      	cmp	ip, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x1d2>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f103 30ff 	add.w	r0, r3, #4294967295
 8000678:	d267      	bcs.n	800074a <__udivmoddi4+0x29a>
 800067a:	45a4      	cmp	ip, r4
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0x29a>
 800067e:	3b02      	subs	r3, #2
 8000680:	443c      	add	r4, r7
 8000682:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000686:	fba0 9302 	umull	r9, r3, r0, r2
 800068a:	eba4 040c 	sub.w	r4, r4, ip
 800068e:	429c      	cmp	r4, r3
 8000690:	46ce      	mov	lr, r9
 8000692:	469c      	mov	ip, r3
 8000694:	d351      	bcc.n	800073a <__udivmoddi4+0x28a>
 8000696:	d04e      	beq.n	8000736 <__udivmoddi4+0x286>
 8000698:	b155      	cbz	r5, 80006b0 <__udivmoddi4+0x200>
 800069a:	ebb8 030e 	subs.w	r3, r8, lr
 800069e:	eb64 040c 	sbc.w	r4, r4, ip
 80006a2:	fa04 f606 	lsl.w	r6, r4, r6
 80006a6:	40cb      	lsrs	r3, r1
 80006a8:	431e      	orrs	r6, r3
 80006aa:	40cc      	lsrs	r4, r1
 80006ac:	e9c5 6400 	strd	r6, r4, [r5]
 80006b0:	2100      	movs	r1, #0
 80006b2:	e750      	b.n	8000556 <__udivmoddi4+0xa6>
 80006b4:	f1c2 0320 	rsb	r3, r2, #32
 80006b8:	fa20 f103 	lsr.w	r1, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	fa24 f303 	lsr.w	r3, r4, r3
 80006c4:	4094      	lsls	r4, r2
 80006c6:	430c      	orrs	r4, r1
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d0:	fa1f f78c 	uxth.w	r7, ip
 80006d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d8:	fb08 3110 	mls	r1, r8, r0, r3
 80006dc:	0c23      	lsrs	r3, r4, #16
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb00 f107 	mul.w	r1, r0, r7
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x24c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80006f2:	d22c      	bcs.n	800074e <__udivmoddi4+0x29e>
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d92a      	bls.n	800074e <__udivmoddi4+0x29e>
 80006f8:	3802      	subs	r0, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f1f8 	udiv	r1, r3, r8
 8000704:	fb08 3311 	mls	r3, r8, r1, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb01 f307 	mul.w	r3, r1, r7
 8000710:	42a3      	cmp	r3, r4
 8000712:	d908      	bls.n	8000726 <__udivmoddi4+0x276>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f101 36ff 	add.w	r6, r1, #4294967295
 800071c:	d213      	bcs.n	8000746 <__udivmoddi4+0x296>
 800071e:	42a3      	cmp	r3, r4
 8000720:	d911      	bls.n	8000746 <__udivmoddi4+0x296>
 8000722:	3902      	subs	r1, #2
 8000724:	4464      	add	r4, ip
 8000726:	1ae4      	subs	r4, r4, r3
 8000728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800072c:	e739      	b.n	80005a2 <__udivmoddi4+0xf2>
 800072e:	4604      	mov	r4, r0
 8000730:	e6f0      	b.n	8000514 <__udivmoddi4+0x64>
 8000732:	4608      	mov	r0, r1
 8000734:	e706      	b.n	8000544 <__udivmoddi4+0x94>
 8000736:	45c8      	cmp	r8, r9
 8000738:	d2ae      	bcs.n	8000698 <__udivmoddi4+0x1e8>
 800073a:	ebb9 0e02 	subs.w	lr, r9, r2
 800073e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000742:	3801      	subs	r0, #1
 8000744:	e7a8      	b.n	8000698 <__udivmoddi4+0x1e8>
 8000746:	4631      	mov	r1, r6
 8000748:	e7ed      	b.n	8000726 <__udivmoddi4+0x276>
 800074a:	4603      	mov	r3, r0
 800074c:	e799      	b.n	8000682 <__udivmoddi4+0x1d2>
 800074e:	4630      	mov	r0, r6
 8000750:	e7d4      	b.n	80006fc <__udivmoddi4+0x24c>
 8000752:	46d6      	mov	lr, sl
 8000754:	e77f      	b.n	8000656 <__udivmoddi4+0x1a6>
 8000756:	4463      	add	r3, ip
 8000758:	3802      	subs	r0, #2
 800075a:	e74d      	b.n	80005f8 <__udivmoddi4+0x148>
 800075c:	4606      	mov	r6, r0
 800075e:	4623      	mov	r3, r4
 8000760:	4608      	mov	r0, r1
 8000762:	e70f      	b.n	8000584 <__udivmoddi4+0xd4>
 8000764:	3e02      	subs	r6, #2
 8000766:	4463      	add	r3, ip
 8000768:	e730      	b.n	80005cc <__udivmoddi4+0x11c>
 800076a:	bf00      	nop

0800076c <__aeabi_idiv0>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000776:	e003      	b.n	8000780 <LoopCopyDataInit>

08000778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800077a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800077c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800077e:	3104      	adds	r1, #4

08000780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000788:	d3f6      	bcc.n	8000778 <CopyDataInit>
  ldr  r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800078c:	e002      	b.n	8000794 <LoopFillZerobss>

0800078e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800078e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000790:	f842 3b04 	str.w	r3, [r2], #4

08000794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000798:	d3f9      	bcc.n	800078e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079a:	f006 f823 	bl	80067e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f022 fad3 	bl	8022d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f001 fa4b 	bl	8001c3c <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007ac:	08039010 	.word	0x08039010
  ldr  r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007b4:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 80007b8:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 80007bc:	200101c8 	.word	0x200101c8

080007c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC3_IRQHandler>
	...

080007c4 <Log_Init>:
#include <stdio.h>

static UART_HandleTypeDef uart_handle;

void Log_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

	// Enable clocks
	__GPIOD_CLK_ENABLE();
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <Log_Init+0xa8>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	4a26      	ldr	r2, [pc, #152]	@ (800086c <Log_Init+0xa8>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <Log_Init+0xa8>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
	__USART3_CLK_ENABLE();
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <Log_Init+0xa8>)
 80007ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007ee:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <Log_Init+0xa8>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <Log_Init+0xa8>)
 80007fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

	// Configure GPIO
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8000812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000816:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000818:	2307      	movs	r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <Log_Init+0xac>)
 8000824:	f008 f8a2 	bl	800896c <HAL_GPIO_Init>

	// Configure the USART peripheral
	uart_handle.Instance          = USART3;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <Log_Init+0xb0>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <Log_Init+0xb4>)
 800082c:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = 4000000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <Log_Init+0xb0>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <Log_Init+0xb8>)
 8000832:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <Log_Init+0xb0>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <Log_Init+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <Log_Init+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <Log_Init+0xb0>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <Log_Init+0xb0>)
 800084e:	2208      	movs	r2, #8
 8000850:	615a      	str	r2, [r3, #20]

	// Commit the USART
	if (HAL_UART_Init(&uart_handle) != HAL_OK)
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <Log_Init+0xb0>)
 8000854:	f009 ffd4 	bl	800a800 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <Log_Init+0x9e>
	{
		while (1);
 800085e:	bf00      	nop
 8000860:	e7fd      	b.n	800085e <Log_Init+0x9a>
	}
}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	58024400 	.word	0x58024400
 8000870:	58020c00 	.word	0x58020c00
 8000874:	200000bc 	.word	0x200000bc
 8000878:	40004800 	.word	0x40004800
 800087c:	003d0900 	.word	0x003d0900

08000880 <_write>:

int _write(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&uart_handle, (uint8_t*)ptr, len, 0xFFFF);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <_write+0x28>)
 8000898:	f00a f80c 	bl	800a8b4 <HAL_UART_Transmit>
	return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000bc 	.word	0x200000bc

080008ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <ethernet_link_status_updated+0x20>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <ethernet_link_status_updated+0x34>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3);
#endif /* LWIP_DHCP */
  }
}
 80008ca:	e002      	b.n	80008d2 <ethernet_link_status_updated+0x26>
    DHCP_state = DHCP_LINK_DOWN;
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <ethernet_link_status_updated+0x34>)
 80008ce:	2205      	movs	r2, #5
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000150 	.word	0x20000150

080008e4 <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;

  for (;;)
  {
    switch (DHCP_state)
 80008f0:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <DHCP_Thread+0xe0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d051      	beq.n	800099e <DHCP_Thread+0xba>
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	dc59      	bgt.n	80009b2 <DHCP_Thread+0xce>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d002      	beq.n	8000908 <DHCP_Thread+0x24>
 8000902:	2b02      	cmp	r3, #2
 8000904:	d018      	beq.n	8000938 <DHCP_Thread+0x54>

      BSP_LED_Off(LED2);
      BSP_LED_On(LED3);
    }
    break;
    default: break;
 8000906:	e054      	b.n	80009b2 <DHCP_Thread+0xce>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 800091a:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <DHCP_Thread+0xe0>)
 800091c:	2202      	movs	r2, #2
 800091e:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED2);
 8000920:	2001      	movs	r0, #1
 8000922:	f005 ff35 	bl	8006790 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000926:	2002      	movs	r0, #2
 8000928:	f005 ff32 	bl	8006790 <BSP_LED_Off>
        netifapi_dhcp_start(netif);
 800092c:	4a26      	ldr	r2, [pc, #152]	@ (80009c8 <DHCP_Thread+0xe4>)
 800092e:	2100      	movs	r1, #0
 8000930:	69f8      	ldr	r0, [r7, #28]
 8000932:	f00f fe45 	bl	80105c0 <netifapi_netif_common>
      break;
 8000936:	e03f      	b.n	80009b8 <DHCP_Thread+0xd4>
        if (dhcp_supplied_address(netif))
 8000938:	69f8      	ldr	r0, [r7, #28]
 800093a:	f015 fbad 	bl	8016098 <dhcp_supplied_address>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00b      	beq.n	800095c <DHCP_Thread+0x78>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <DHCP_Thread+0xe0>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
          BSP_LED_On(LED2);
 800094a:	2001      	movs	r0, #1
 800094c:	f005 fef6 	bl	800673c <BSP_LED_On>
          BSP_LED_Off(LED3);
 8000950:	2002      	movs	r0, #2
 8000952:	f005 ff1d 	bl	8006790 <BSP_LED_Off>
          ptpd_init();
 8000956:	f002 fb77 	bl	8003048 <ptpd_init>
      break;
 800095a:	e02c      	b.n	80009b6 <DHCP_Thread+0xd2>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000960:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d925      	bls.n	80009b6 <DHCP_Thread+0xd2>
            DHCP_state = DHCP_TIMEOUT;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <DHCP_Thread+0xe0>)
 800096c:	2204      	movs	r2, #4
 800096e:	701a      	strb	r2, [r3, #0]
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <DHCP_Thread+0xe8>)
 8000972:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000974:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000978:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <DHCP_Thread+0xec>)
 800097c:	60fb      	str	r3, [r7, #12]
            netifapi_netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	f107 0210 	add.w	r2, r7, #16
 8000986:	f107 0114 	add.w	r1, r7, #20
 800098a:	69f8      	ldr	r0, [r7, #28]
 800098c:	f00f fde6 	bl	801055c <netifapi_netif_set_addr>
            BSP_LED_On(LED2);
 8000990:	2001      	movs	r0, #1
 8000992:	f005 fed3 	bl	800673c <BSP_LED_On>
            BSP_LED_Off(LED3);
 8000996:	2002      	movs	r0, #2
 8000998:	f005 fefa 	bl	8006790 <BSP_LED_Off>
      break;
 800099c:	e00b      	b.n	80009b6 <DHCP_Thread+0xd2>
      DHCP_state = DHCP_OFF;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <DHCP_Thread+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED2);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f005 fef3 	bl	8006790 <BSP_LED_Off>
      BSP_LED_On(LED3);
 80009aa:	2002      	movs	r0, #2
 80009ac:	f005 fec6 	bl	800673c <BSP_LED_On>
    break;
 80009b0:	e002      	b.n	80009b8 <DHCP_Thread+0xd4>
    default: break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <DHCP_Thread+0xd4>
      break;
 80009b6:	bf00      	nop
    }

    /* wait 500 ms */
    osDelay(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009bc:	f00e fd23 	bl	800f406 <osDelay>
    switch (DHCP_state)
 80009c0:	e796      	b.n	80008f0 <DHCP_Thread+0xc>
 80009c2:	bf00      	nop
 80009c4:	20000150 	.word	0x20000150
 80009c8:	08014ac5 	.word	0x08014ac5
 80009cc:	0a00a8c0 	.word	0x0a00a8c0
 80009d0:	0100a8c0 	.word	0x0100a8c0

080009d4 <SubsecondToNanosecond>:
static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value);
static uint32_t NanosecondToSubsecond(const uint32_t nanosecond_value);
static void InitMac1588v2(void);

static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value)
{
 80009d4:	b4b0      	push	{r4, r5, r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint64_t val = subsecond_value * 1000000000ll;
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	2000      	movs	r0, #0
 80009e0:	460c      	mov	r4, r1
 80009e2:	4605      	mov	r5, r0
 80009e4:	490f      	ldr	r1, [pc, #60]	@ (8000a24 <SubsecondToNanosecond+0x50>)
 80009e6:	fb01 f005 	mul.w	r0, r1, r5
 80009ea:	2100      	movs	r1, #0
 80009ec:	fb04 f101 	mul.w	r1, r4, r1
 80009f0:	4401      	add	r1, r0
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <SubsecondToNanosecond+0x50>)
 80009f4:	fba4 2300 	umull	r2, r3, r4, r0
 80009f8:	4419      	add	r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  val >>= 31;
 8000a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	0fc2      	lsrs	r2, r0, #31
 8000a0e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000a12:	0fcb      	lsrs	r3, r1, #31
 8000a14:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return val;
 8000a18:	68bb      	ldr	r3, [r7, #8]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bcb0      	pop	{r4, r5, r7}
 8000a22:	4770      	bx	lr
 8000a24:	3b9aca00 	.word	0x3b9aca00

08000a28 <NanosecondToSubsecond>:

uint32_t NanosecondToSubsecond(const uint32_t nanosecond_value)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint64_t val = nanosecond_value * 0x80000000ll;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	461c      	mov	r4, r3
 8000a36:	4615      	mov	r5, r2
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	07eb      	lsls	r3, r5, #31
 8000a42:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
 8000a46:	07e2      	lsls	r2, r4, #31
 8000a48:	e9c7 2302 	strd	r2, r3, [r7, #8]
  val /= 1000000000;
 8000a4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a50:	a307      	add	r3, pc, #28	@ (adr r3, 8000a70 <NanosecondToSubsecond+0x48>)
 8000a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a56:	f7ff fd13 	bl	8000480 <__aeabi_uldivmod>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return val;
 8000a62:	68bb      	ldr	r3, [r7, #8]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	f3af 8000 	nop.w
 8000a70:	3b9aca00 	.word	0x3b9aca00
 8000a74:	00000000 	.word	0x00000000

08000a78 <ethernetif_GetTxTimestamp>:

bool ethernetif_GetTxTimestamp(PtpTime_t* const timestamp, const TickType_t block_time)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  TxTimestampRecord_t record;

  if (xQueueReceive(timestamp_queue, &record, 0) != pdTRUE)
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <ethernetif_GetTxTimestamp+0x3c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f107 0108 	add.w	r1, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00b ff15 	bl	800c8bc <xQueueReceive>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d001      	beq.n	8000a9c <ethernetif_GetTxTimestamp+0x24>
  {
    return false;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e007      	b.n	8000aac <ethernetif_GetTxTimestamp+0x34>
  }

  memcpy((void*)timestamp, (void*)&record.timestamp, sizeof(TxTimestampRecord_t));
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f022 f97e 	bl	8022da6 <memcpy>
  return true;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000154 	.word	0x20000154

08000ab8 <ethernetif_SetTime>:

void ethernetif_SetTime(const PtpTime_t* ptp_time)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  EthHandle.Instance->MACSTSUR = ptp_time->tv_sec;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = NanosecondToSubsecond(ptp_time->tv_nsec);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ad4:	681c      	ldr	r4, [r3, #0]
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	f7ff ffa6 	bl	8000a28 <NanosecondToSubsecond>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f8c4 3b14 	str.w	r3, [r4, #2836]	@ 0xb14

  // This is a clock overwrite operation (as opposed to an offset), so we need to re-init
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0204 	orr.w	r2, r2, #4
 8000af2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // The Time stamp counter starts operation as soon as it is initialized
  // with the value written in the Time stamp update register.
  while (EthHandle.Instance->MACTSCR & ETH_MACTSCR_TSINIT)
 8000af6:	bf00      	nop
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <ethernetif_SetTime+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f7      	bne.n	8000af8 <ethernetif_SetTime+0x40>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000168 	.word	0x20000168

08000b18 <ethernetif_GetTime>:

void ethernetif_GetTime(PtpTime_t* const ptp_time)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  // a 64-bit value, but it's possible the high 32-bits of the value
  // rolls over before we read the low 32-bits of the value.  To avoid
  // this situation we read the high 32-bits twice and determine which
  // high 32-bits the low 32-bit are associated with.
  __disable_irq();
  hi_reg = READ_REG(EthHandle.Instance->MACSTSR);
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	@ 0xb08
 8000b2c:	617b      	str	r3, [r7, #20]
  lo_reg = READ_REG(EthHandle.Instance->MACSTNR);
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	@ 0xb0c
 8000b36:	613b      	str	r3, [r7, #16]
  hi_reg_after = READ_REG(EthHandle.Instance->MACSTSR);
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <ethernetif_GetTime+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	@ 0xb08
 8000b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b42:	b662      	cpsie	i
}
 8000b44:	bf00      	nop
  __enable_irq();

  // Did a roll over occur while reading?
  if (hi_reg != hi_reg_after)
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d006      	beq.n	8000b5c <ethernetif_GetTime+0x44>
  {
    // We now know a roll over occurred. If the rollover occured before
    // the reading of the low 32-bits we move the substitute the second
    // 32-bit high value for the first 32-bit high value.
    if (lo_reg < (INT_MAX / 2)) hi_reg = hi_reg_after;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8000b54:	4293      	cmp	r3, r2
 8000b56:	da01      	bge.n	8000b5c <ethernetif_GetTime+0x44>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	617b      	str	r3, [r7, #20]
  }

  // Now convert the raw registers values into timestamp values.
  ptp_time->tv_nsec = SubsecondToNanosecond(lo_reg);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff38 	bl	80009d4 <SubsecondToNanosecond>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	605a      	str	r2, [r3, #4]
  ptp_time->tv_sec = hi_reg;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000168 	.word	0x20000168

08000b80 <ethernetif_PtpFxAdjust>:

void ethernetif_PtpFxAdjust(const int32_t adjustment_ppb)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t addend;

  // Adjust the fixed base frequency by parts-per-billion.
  // addend = base + ((base * adjustment_ppb) / 1000000000);
  addend = PTP_ADDEND
    + (int32_t)((((int64_t) PTP_ADDEND) * adjustment_ppb) / 1000000000);
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	17c8      	asrs	r0, r1, #31
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4917      	ldr	r1, [pc, #92]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000b92:	fb01 f003 	mul.w	r0, r1, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	fb02 f101 	mul.w	r1, r2, r1
 8000b9c:	4401      	add	r1, r0
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000ba0:	fba2 4500 	umull	r4, r5, r2, r0
 8000ba4:	194b      	adds	r3, r1, r5
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000be8 <ethernetif_PtpFxAdjust+0x68>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	4620      	mov	r0, r4
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	f7ff fc15 	bl	80003e0 <__aeabi_ldivmod>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <ethernetif_PtpFxAdjust+0x70>)
 8000bbc:	4413      	add	r3, r2
  addend = PTP_ADDEND
 8000bbe:	60fb      	str	r3, [r7, #12]

  // Set the time stamp addend register with new rate value and set ETH_MACTSCR_TSADDREG
  WRITE_REG(EthHandle.Instance->MACTSAR, addend);
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <ethernetif_PtpFxAdjust+0x74>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bdb0      	pop	{r4, r5, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	3b9aca00 	.word	0x3b9aca00
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	312c538a 	.word	0x312c538a
 8000bf4:	20000168 	.word	0x20000168

08000bf8 <InitMac1588v2>:

static void InitMac1588v2(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  // RM0468 Rev 3 2925/3357

  // 1. Mask the Timestamp Trigger interrupt by clearing bit 12 of Interrupt enable register (ETH_MACIER).
  //__HAL_ETH_MAC_DISABLE_IT(&EthHandle, ETH_MAC_TIMESTAMP_IT);
  CLEAR_BIT(EthHandle.Instance->MACIER, ETH_MACIER_TSIE);
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8000c04:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  // 2. Set bit 0 of Timestamp control Register (ETH_MACTSCR) to enable timestamping.
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENA);
 8000c10:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // Enable timestamping of all packets
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENALL);
 8000c24:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c34:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV6ENA);
  //CLEAR_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV4ENA);*/
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSVER2ENA);

  // 3. Program Subsecond increment register (ETH_MACSSIR) based on the PTP clock frequency.
  WRITE_REG(EthHandle.Instance->MACSSIR, 43 << 16);
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f44f 122c 	mov.w	r2, #2818048	@ 0x2b0000
 8000c40:	f8c3 2b04 	str.w	r2, [r3, #2820]	@ 0xb04

  // 4. If you use the Fine Correction method,
  // program Timestamp addend register (ETH_MACTSAR) and set bit 5 of Timestamp control Register (ETH_MACTSCR)
  WRITE_REG(EthHandle.Instance->MACTSAR, PTP_ADDEND);
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <InitMac1588v2+0xd0>)
 8000c4a:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0220 	orr.w	r2, r2, #32
 8000c5e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 5. Poll the Timestamp control Register (ETH_MACTSCR) until bit 5 is cleared.
  while (READ_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG))
 8000c62:	bf00      	nop
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f7      	bne.n	8000c64 <InitMac1588v2+0x6c>
  {
  }

  // 6. Program bit 1 of Timestamp control Register (ETH_MACTSCR) to select the Fine Update method (if required).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0202 	orr.w	r2, r2, #2
 8000c84:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 7. Program System time seconds update register (ETH_MACSTSUR) and System time
  // nanoseconds update register (ETH_MACSTNUR) with the appropriate time value.
  EthHandle.Instance->MACSTSUR = 0;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = 0;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14

  // 8. Set bit 2 in Timestamp control Register (ETH_MACTSCR).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0204 	orr.w	r2, r2, #4
 8000cac:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  EthHandle.IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <InitMac1588v2+0xcc>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000168 	.word	0x20000168
 8000cc8:	312c538a 	.word	0x312c538a

08000ccc <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0b6      	sub	sp, #216	@ 0xd8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t duplex, speed = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  int32_t PHYLinkState = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  ETH_MACConfigTypeDef MACConf = {0};
 8000ce0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ce4:	2264      	movs	r2, #100	@ 0x64
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f021 ffb7 	bl	8022c5c <memset>
  ETH_DMAConfigTypeDef dma_config = {0};
 8000cee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cf2:	2224      	movs	r2, #36	@ 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f021 ffb0 	bl	8022c5c <memset>
  ETH_MACFilterConfigTypeDef pFilterConfig = {0};
 8000cfc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000d0a:	4aa2      	ldr	r2, [pc, #648]	@ (8000f94 <low_level_init+0x2c8>)
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d14:	6018      	str	r0, [r3, #0]
 8000d16:	3304      	adds	r3, #4
 8000d18:	8019      	strh	r1, [r3, #0]
  osThreadAttr_t attributes;
  EthHandle.Instance = ETH;
 8000d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8000f98 <low_level_init+0x2cc>)
 8000d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8000f9c <low_level_init+0x2d0>)
 8000d1e:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000d20:	4a9d      	ldr	r2, [pc, #628]	@ (8000f98 <low_level_init+0x2cc>)
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d28:	4b9b      	ldr	r3, [pc, #620]	@ (8000f98 <low_level_init+0x2cc>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8000f98 <low_level_init+0x2cc>)
 8000d30:	4a9b      	ldr	r2, [pc, #620]	@ (8000fa0 <low_level_init+0x2d4>)
 8000d32:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000d34:	4b98      	ldr	r3, [pc, #608]	@ (8000f98 <low_level_init+0x2cc>)
 8000d36:	4a9b      	ldr	r2, [pc, #620]	@ (8000fa4 <low_level_init+0x2d8>)
 8000d38:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8000d3a:	4b97      	ldr	r3, [pc, #604]	@ (8000f98 <low_level_init+0x2cc>)
 8000d3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d40:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000d42:	4895      	ldr	r0, [pc, #596]	@ (8000f98 <low_level_init+0x2cc>)
 8000d44:	f005 ff86 	bl	8006c54 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d86:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d8e:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35


  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000d9a:	4883      	ldr	r0, [pc, #524]	@ (8000fa8 <low_level_init+0x2dc>)
 8000d9c:	f018 fee6 	bl	8019b6c <memp_init_pool>

  // Configure MAC filter
  pFilterConfig.PromiscuousMode = ENABLE;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pFilterConfig.ReceiveAllMode = ENABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pFilterConfig.HachOrPerfectFilter = DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  pFilterConfig.HashUnicast = DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  pFilterConfig.HashMulticast = DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  pFilterConfig.PassAllMulticast = ENABLE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  pFilterConfig.SrcAddrFiltering = DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  pFilterConfig.SrcAddrInverseFiltering = DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  pFilterConfig.DestAddrInverseFiltering = DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pFilterConfig.BroadcastFilter = DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pFilterConfig.ControlPacketsFilter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_ETH_SetMACFilterConfig(&EthHandle, &pFilterConfig);
 8000de0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000de4:	4619      	mov	r1, r3
 8000de6:	486c      	ldr	r0, [pc, #432]	@ (8000f98 <low_level_init+0x2cc>)
 8000de8:	f006 ffd8 	bl	8007d9c <HAL_ETH_SetMACFilterConfig>

  InitMac1588v2();
 8000dec:	f7ff ff04 	bl	8000bf8 <InitMac1588v2>

  // Enable enhanced descriptors for timestamp reception
  dma_config.DMAArbitration = ETH_DMAARBITRATION_TX1_RX1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	647b      	str	r3, [r7, #68]	@ 0x44
  dma_config.AddressAlignedBeats = ENABLE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  dma_config.BurstMode = ETH_BURSTLENGTH_UNSPECIFIED;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  dma_config.RebuildINCRxBurst = ENABLE;  /// ???
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  dma_config.PBLx8Mode = DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  dma_config.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000e0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e0e:	657b      	str	r3, [r7, #84]	@ 0x54
  dma_config.SecondPacketOperate = ENABLE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  dma_config.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000e16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  dma_config.FlushRxPacket = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  dma_config.TCPSegmentation = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
  dma_config.MaximumSegmentSize = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_ETH_SetDMAConfig(&EthHandle, &dma_config);
 8000e2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e30:	4619      	mov	r1, r3
 8000e32:	4859      	ldr	r0, [pc, #356]	@ (8000f98 <low_level_init+0x2cc>)
 8000e34:	f006 ff48 	bl	8007cc8 <HAL_ETH_SetDMAConfig>


  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e38:	2238      	movs	r2, #56	@ 0x38
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	485b      	ldr	r0, [pc, #364]	@ (8000fac <low_level_init+0x2e0>)
 8000e3e:	f021 ff0d 	bl	8022c5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e42:	4b5a      	ldr	r3, [pc, #360]	@ (8000fac <low_level_init+0x2e0>)
 8000e44:	2221      	movs	r2, #33	@ 0x21
 8000e46:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e48:	4b58      	ldr	r3, [pc, #352]	@ (8000fac <low_level_init+0x2e0>)
 8000e4a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e4e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e50:	4b56      	ldr	r3, [pc, #344]	@ (8000fac <low_level_init+0x2e0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f00e fbfc 	bl	800f658 <osSemaphoreNew>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a53      	ldr	r2, [pc, #332]	@ (8000fb0 <low_level_init+0x2e4>)
 8000e64:	6013      	str	r3, [r2, #0]
  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f00e fbf4 	bl	800f658 <osSemaphoreNew>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a50      	ldr	r2, [pc, #320]	@ (8000fb4 <low_level_init+0x2e8>)
 8000e74:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f021 feec 	bl	8022c5c <memset>
  attributes.name = "EthIf";
 8000e84:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb8 <low_level_init+0x2ec>)
 8000e86:	60bb      	str	r3, [r7, #8]
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 8000e88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e8c:	61fb      	str	r3, [r7, #28]
  attributes.priority = osPriorityRealtime;
 8000e8e:	2330      	movs	r3, #48	@ 0x30
 8000e90:	623b      	str	r3, [r7, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	461a      	mov	r2, r3
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4848      	ldr	r0, [pc, #288]	@ (8000fbc <low_level_init+0x2f0>)
 8000e9c:	f00e f9f3 	bl	800f286 <osThreadNew>

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000ea0:	4947      	ldr	r1, [pc, #284]	@ (8000fc0 <low_level_init+0x2f4>)
 8000ea2:	4848      	ldr	r0, [pc, #288]	@ (8000fc4 <low_level_init+0x2f8>)
 8000ea4:	f005 face 	bl	8006444 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000ea8:	4846      	ldr	r0, [pc, #280]	@ (8000fc4 <low_level_init+0x2f8>)
 8000eaa:	f005 fafd 	bl	80064a8 <LAN8742_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <low_level_init+0x1f6>
  {
    netif_set_link_down(netif);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f019 fa55 	bl	801a364 <netif_set_link_down>
    netif_set_down(netif);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f019 f9e8 	bl	801a290 <netif_set_down>
 8000ec0:	e065      	b.n	8000f8e <low_level_init+0x2c2>
    return;
  }

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000ec2:	4840      	ldr	r0, [pc, #256]	@ (8000fc4 <low_level_init+0x2f8>)
 8000ec4:	f005 fb3d 	bl	8006542 <LAN8742_GetLinkState>
 8000ec8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

  /* Get link state */
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	dc06      	bgt.n	8000ee2 <low_level_init+0x216>
  {
    netif_set_link_down(netif);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f019 fa45 	bl	801a364 <netif_set_link_down>
    netif_set_down(netif);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f019 f9d8 	bl	801a290 <netif_set_down>
 8000ee0:	e055      	b.n	8000f8e <low_level_init+0x2c2>
  }
  else
  {
    switch (PHYLinkState)
 8000ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d82b      	bhi.n	8000f44 <low_level_init+0x278>
 8000eec:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef4 <low_level_init+0x228>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f27 	.word	0x08000f27
 8000f00:	08000f37 	.word	0x08000f37
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000f04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000f0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f14:	e01f      	b.n	8000f56 <low_level_init+0x28a>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000f1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f24:	e017      	b.n	8000f56 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f34:	e00f      	b.n	8000f56 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f42:	e008      	b.n	8000f56 <low_level_init+0x28a>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8000f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000f4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000f54:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000f56:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <low_level_init+0x2cc>)
 8000f5e:	f006 fcc5 	bl	80078ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8000f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    MACConf.Speed = speed;
 8000f6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000f70:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <low_level_init+0x2cc>)
 8000f78:	f006 fe8c 	bl	8007c94 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <low_level_init+0x2cc>)
 8000f7e:	f005 ff67 	bl	8006e50 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f019 f90e 	bl	801a1a4 <netif_set_up>
    netif_set_link_up(netif);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f019 f9b3 	bl	801a2f4 <netif_set_link_up>
  }
}
 8000f8e:	37d8      	adds	r7, #216	@ 0xd8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08023c18 	.word	0x08023c18
 8000f98:	20000168 	.word	0x20000168
 8000f9c:	40028000 	.word	0x40028000
 8000fa0:	30000000 	.word	0x30000000
 8000fa4:	30000200 	.word	0x30000200
 8000fa8:	08028548 	.word	0x08028548
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	20000160 	.word	0x20000160
 8000fb4:	20000164 	.word	0x20000164
 8000fb8:	08023c10 	.word	0x08023c10
 8000fbc:	0800119d 	.word	0x0800119d
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000268 	.word	0x20000268

08000fc8 <low_level_output>:
 *
 * @note ERR_OK means the packet was sent (but not necessarily transmit complete),
 * and ERR_IF means the packet has more chained buffers than what the interface supports.
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  struct pbuf *q = NULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  err_t errval = ERR_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  TxTimestampRecord_t new_timestamp_record;
  bool is_timestamp_requested = false;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (p->timestamp_sec == PTP_TIMESTAMP_RECORD_MAGIC)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	4a5a      	ldr	r2, [pc, #360]	@ (8001154 <low_level_output+0x18c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d102      	bne.n	8000ff6 <low_level_output+0x2e>
  {
    is_timestamp_requested = true;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f021 fe2c 	bl	8022c5c <memset>

  for(q = p; q != NULL; q = q->next)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001008:	e045      	b.n	8001096 <low_level_output+0xce>
  {
    if(i >= ETH_TX_DESC_CNT)
 800100a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800100c:	2b03      	cmp	r3, #3
 800100e:	d902      	bls.n	8001016 <low_level_output+0x4e>
      return ERR_IF;
 8001010:	f06f 030b 	mvn.w	r3, #11
 8001014:	e09a      	b.n	800114c <low_level_output+0x184>

    Txbuffer[i].buffer = q->payload;
 8001016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001018:	6859      	ldr	r1, [r3, #4]
 800101a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	3350      	adds	r3, #80	@ 0x50
 8001026:	443b      	add	r3, r7
 8001028:	3b3c      	subs	r3, #60	@ 0x3c
 800102a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800102c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800102e:	895b      	ldrh	r3, [r3, #10]
 8001030:	4619      	mov	r1, r3
 8001032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	3350      	adds	r3, #80	@ 0x50
 800103e:	443b      	add	r3, r7
 8001040:	3b38      	subs	r3, #56	@ 0x38
 8001042:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <low_level_output+0xa6>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800104a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	f107 0014 	add.w	r0, r7, #20
 8001052:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001054:	460b      	mov	r3, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	440b      	add	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18c1      	adds	r1, r0, r3
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3350      	adds	r3, #80	@ 0x50
 8001068:	443b      	add	r3, r7
 800106a:	3b34      	subs	r3, #52	@ 0x34
 800106c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800106e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <low_level_output+0xc2>
    {
      Txbuffer[i].next = NULL;
 8001076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	3350      	adds	r3, #80	@ 0x50
 8001082:	443b      	add	r3, r7
 8001084:	3b34      	subs	r3, #52	@ 0x34
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    }

    i++;
 800108a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800108c:	3301      	adds	r3, #1
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for(q = p; q != NULL; q = q->next)
 8001090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1b6      	bne.n	800100a <low_level_output+0x42>
  }

  TxConfig.Length = p->tot_len;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	891b      	ldrh	r3, [r3, #8]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <low_level_output+0x190>)
 80010a4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80010a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <low_level_output+0x190>)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80010ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001158 <low_level_output+0x190>)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f019 fe0b 	bl	801acd0 <pbuf_ref>

  do
  {
    HAL_ETH_PTP_InsertTxTimestamp(&EthHandle);
 80010ba:	4828      	ldr	r0, [pc, #160]	@ (800115c <low_level_output+0x194>)
 80010bc:	f006 fa11 	bl	80074e2 <HAL_ETH_PTP_InsertTxTimestamp>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 80010c0:	4925      	ldr	r1, [pc, #148]	@ (8001158 <low_level_output+0x190>)
 80010c2:	4826      	ldr	r0, [pc, #152]	@ (800115c <low_level_output+0x194>)
 80010c4:	f005 ffb0 	bl	8007028 <HAL_ETH_Transmit_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d11b      	bne.n	8001106 <low_level_output+0x13e>
    {
      if (is_timestamp_requested)
 80010ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <low_level_output+0x136>
      {
        new_timestamp_record.timestamp.tv_sec = EthHandle.TxTimestamp.TimeStampHigh;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <low_level_output+0x194>)
 80010d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010dc:	60fb      	str	r3, [r7, #12]
        new_timestamp_record.timestamp.tv_nsec = SubsecondToNanosecond(EthHandle.TxTimestamp.TimeStampLow);
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <low_level_output+0x194>)
 80010e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fc75 	bl	80009d4 <SubsecondToNanosecond>
 80010ea:	4603      	mov	r3, r0
 80010ec:	613b      	str	r3, [r7, #16]
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <low_level_output+0x198>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	2302      	movs	r3, #2
 80010f8:	2200      	movs	r2, #0
 80010fa:	f00b f9af 	bl	800c45c <xQueueGenericSend>
      }

      errval = ERR_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001104:	e01b      	b.n	800113e <low_level_output+0x176>
    }
    else
    {

      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <low_level_output+0x194>)
 8001108:	f006 fe94 	bl	8007e34 <HAL_ETH_GetError>
 800110c:	4603      	mov	r3, r0
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00d      	beq.n	8001132 <low_level_output+0x16a>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <low_level_output+0x19c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800111e:	4618      	mov	r0, r3
 8001120:	f00e fb24 	bl	800f76c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <low_level_output+0x194>)
 8001126:	f006 f912 	bl	800734e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800112a:	23fe      	movs	r3, #254	@ 0xfe
 800112c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001130:	e005      	b.n	800113e <low_level_output+0x176>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f019 fd26 	bl	801ab84 <pbuf_free>
        errval =  ERR_IF;
 8001138:	23f4      	movs	r3, #244	@ 0xf4
 800113a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }while(errval == ERR_BUF);
 800113e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001142:	f113 0f02 	cmn.w	r3, #2
 8001146:	d0b8      	beq.n	80010ba <low_level_output+0xf2>



  return errval;
 8001148:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800114c:	4618      	mov	r0, r3
 800114e:	3750      	adds	r7, #80	@ 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	55667788 	.word	0x55667788
 8001158:	20000230 	.word	0x20000230
 800115c:	20000168 	.word	0x20000168
 8001160:	20000154 	.word	0x20000154
 8001164:	20000164 	.word	0x20000164

08001168 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <low_level_input+0x2c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <low_level_input+0x30>)
 8001184:	f005 ffa1 	bl	80070ca <HAL_ETH_ReadData>
  }

  return p;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000015c 	.word	0x2000015c
 8001198:	20000168 	.word	0x20000168

0800119c <ethernetif_input>:
 * from the interface.
 *
 * @param argument the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void* argument )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  struct netif *netif = (struct netif *) argument;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	613b      	str	r3, [r7, #16]
  ETH_TimeStampTypeDef eth_timestamp;

  for( ;; )
  {
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <ethernetif_input+0x70>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fad9 	bl	800f76c <osSemaphoreAcquire>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f5      	bne.n	80011ac <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80011c0:	6938      	ldr	r0, [r7, #16]
 80011c2:	f7ff ffd1 	bl	8001168 <low_level_input>
 80011c6:	6178      	str	r0, [r7, #20]
        if (p != NULL)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01a      	beq.n	8001204 <ethernetif_input+0x68>
        {
          // Collect the timestamp of the new packet
          HAL_ETH_PTP_GetRxTimestamp(&EthHandle, &eth_timestamp);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	480e      	ldr	r0, [pc, #56]	@ (8001210 <ethernetif_input+0x74>)
 80011d6:	f006 f9a7 	bl	8007528 <HAL_ETH_PTP_GetRxTimestamp>
          p->timestamp_sec = eth_timestamp.TimeStampHigh;
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	611a      	str	r2, [r3, #16]
          p->timestamp_nsec = SubsecondToNanosecond(eth_timestamp.TimeStampLow);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fbf6 	bl	80009d4 <SubsecondToNanosecond>
 80011e8:	4602      	mov	r2, r0
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	615a      	str	r2, [r3, #20]

          if (netif->input( p, netif) != ERR_OK )
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	6939      	ldr	r1, [r7, #16]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	4798      	blx	r3
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <ethernetif_input+0x68>
          {
            pbuf_free(p);
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f019 fcc0 	bl	801ab84 <pbuf_free>
          }
        }

      }while(p!=NULL);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1da      	bne.n	80011c0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800120a:	e7cf      	b.n	80011ac <ethernetif_input+0x10>
 800120c:	20000160 	.word	0x20000160
 8001210:	20000168 	.word	0x20000168

08001214 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <ethernetif_init+0x1c>
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <ethernetif_init+0x48>)
 8001224:	f240 227d 	movw	r2, #637	@ 0x27d
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <ethernetif_init+0x4c>)
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <ethernetif_init+0x50>)
 800122c:	f021 fb84 	bl	8022938 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2273      	movs	r2, #115	@ 0x73
 8001234:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2274      	movs	r2, #116	@ 0x74
 800123c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <ethernetif_init+0x54>)
 8001244:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <ethernetif_init+0x58>)
 800124a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fd3d 	bl	8000ccc <low_level_init>

  return ERR_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08023c20 	.word	0x08023c20
 8001260:	08023c78 	.word	0x08023c78
 8001264:	08023c88 	.word	0x08023c88
 8001268:	08016985 	.word	0x08016985
 800126c:	08000fc9 	.word	0x08000fc9

08001270 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800127c:	68f9      	ldr	r1, [r7, #12]
 800127e:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <pbuf_free_custom+0x34>)
 8001280:	f018 fd64 	bl	8019d4c <memp_free_pool>

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <pbuf_free_custom+0x38>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d107      	bne.n	800129c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <pbuf_free_custom+0x38>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <pbuf_free_custom+0x3c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f00e faba 	bl	800f810 <osSemaphoreRelease>
  }
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08028548 	.word	0x08028548
 80012a8:	2000015c 	.word	0x2000015c
 80012ac:	20000160 	.word	0x20000160

080012b0 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012b4:	f005 fb46 	bl	8006944 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80012c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /* Ethernett MSP init: RMII Mode */

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a4e      	ldr	r2, [pc, #312]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b48      	ldr	r3, [pc, #288]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a46      	ldr	r2, [pc, #280]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b44      	ldr	r3, [pc, #272]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a3f      	ldr	r2, [pc, #252]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a37      	ldr	r2, [pc, #220]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 800133a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001350:	2302      	movs	r3, #2
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800135c:	230b      	movs	r3, #11
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8001360:	2386      	movs	r3, #134	@ 0x86
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	482c      	ldr	r0, [pc, #176]	@ (800141c <HAL_ETH_MspInit+0x15c>)
 800136c:	f007 fafe 	bl	800896c <HAL_GPIO_Init>

  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8001370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4828      	ldr	r0, [pc, #160]	@ (8001420 <HAL_ETH_MspInit+0x160>)
 800137e:	f007 faf5 	bl	800896c <HAL_GPIO_Init>

  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8001382:	2332      	movs	r3, #50	@ 0x32
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4825      	ldr	r0, [pc, #148]	@ (8001424 <HAL_ETH_MspInit+0x164>)
 800138e:	f007 faed 	bl	800896c <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8001392:	f642 0304 	movw	r3, #10244	@ 0x2804
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4822      	ldr	r0, [pc, #136]	@ (8001428 <HAL_ETH_MspInit+0x168>)
 80013a0:	f007 fae4 	bl	800896c <HAL_GPIO_Init>

  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2107      	movs	r1, #7
 80013a8:	203d      	movs	r0, #61	@ 0x3d
 80013aa:	f005 fbb3 	bl	8006b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80013ae:	203d      	movs	r0, #61	@ 0x3d
 80013b0:	f005 fbca 	bl	8006b48 <HAL_NVIC_EnableIRQ>

  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013ba:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_ETH_MspInit+0x158>)
 8001402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	@ 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58024400 	.word	0x58024400
 800141c:	58020000 	.word	0x58020000
 8001420:	58020400 	.word	0x58020400
 8001424:	58020800 	.word	0x58020800
 8001428:	58021800 	.word	0x58021800

0800142c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HAL_ETH_RxCpltCallback+0x1c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f00e f9e9 	bl	800f810 <osSemaphoreRelease>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000160 	.word	0x20000160

0800144c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <HAL_ETH_TxCpltCallback+0x1c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f00e f9d9 	bl	800f810 <osSemaphoreRelease>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000164 	.word	0x20000164

0800146c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f006 fcea 	bl	8007e4e <HAL_ETH_GetDMAError>
 800147a:	4603      	mov	r3, r0
 800147c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001480:	2b80      	cmp	r3, #128	@ 0x80
 8001482:	d104      	bne.n	800148e <HAL_ETH_ErrorCallback+0x22>
  {
    osSemaphoreRelease(RxPktSemaphore);
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_ETH_ErrorCallback+0x44>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f00e f9c1 	bl	800f810 <osSemaphoreRelease>
  }

  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_TBU) == ETH_DMACSR_TBU)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f006 fcdd 	bl	8007e4e <HAL_ETH_GetDMAError>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b04      	cmp	r3, #4
 800149c:	d104      	bne.n	80014a8 <HAL_ETH_ErrorCallback+0x3c>
  {
    osSemaphoreRelease(TxPktSemaphore);
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_ETH_ErrorCallback+0x48>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e f9b4 	bl	800f810 <osSemaphoreRelease>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000160 	.word	0x20000160
 80014b4:	20000164 	.word	0x20000164

080014b8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <ETH_PHY_IO_Init+0x10>)
 80014be:	f006 fc1d 	bl	8007cfc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000168 	.word	0x20000168

080014cc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	4807      	ldr	r0, [pc, #28]	@ (800150c <ETH_PHY_IO_ReadReg+0x30>)
 80014f0:	f006 f954 	bl	800779c <HAL_ETH_ReadPHYRegister>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e000      	b.n	8001502 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000168 	.word	0x20000168

08001510 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <ETH_PHY_IO_WriteReg+0x30>)
 8001524:	f006 f98e 	bl	8007844 <HAL_ETH_WritePHYRegister>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e000      	b.n	8001536 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000168 	.word	0x20000168

08001544 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001548:	f005 f9fc 	bl	8006944 <HAL_GetTick>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0a0      	sub	sp, #128	@ 0x80
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2264      	movs	r2, #100	@ 0x64
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f021 fb79 	bl	8022c5c <memset>
  int32_t PHYLinkState = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001572:	2300      	movs	r3, #0
 8001574:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001576:	2300      	movs	r3, #0
 8001578:	677b      	str	r3, [r7, #116]	@ 0x74
  struct netif *netif = (struct netif *) argument;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  for(;;)
  {

    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800157e:	483e      	ldr	r0, [pc, #248]	@ (8001678 <ethernet_link_thread+0x124>)
 8001580:	f004 ffdf 	bl	8006542 <LAN8742_GetLinkState>
 8001584:	6738      	str	r0, [r7, #112]	@ 0x70

    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <ethernet_link_thread+0x66>
 8001598:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800159a:	2b01      	cmp	r3, #1
 800159c:	dc0d      	bgt.n	80015ba <ethernet_link_thread+0x66>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 800159e:	4837      	ldr	r0, [pc, #220]	@ (800167c <ethernet_link_thread+0x128>)
 80015a0:	f005 fcca 	bl	8006f38 <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 80015a4:	2200      	movs	r2, #0
 80015a6:	4936      	ldr	r1, [pc, #216]	@ (8001680 <ethernet_link_thread+0x12c>)
 80015a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015aa:	f00f f809 	bl	80105c0 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 80015ae:	2200      	movs	r2, #0
 80015b0:	4934      	ldr	r1, [pc, #208]	@ (8001684 <ethernet_link_thread+0x130>)
 80015b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015b4:	f00f f804 	bl	80105c0 <netifapi_netif_common>
 80015b8:	e059      	b.n	800166e <ethernet_link_thread+0x11a>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80015ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d152      	bne.n	800166e <ethernet_link_thread+0x11a>
 80015c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	dd4f      	ble.n	800166e <ethernet_link_thread+0x11a>
    {
      switch (PHYLinkState)
 80015ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015d0:	3b02      	subs	r3, #2
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d82a      	bhi.n	800162c <ethernet_link_thread+0xd8>
 80015d6:	a201      	add	r2, pc, #4	@ (adr r2, 80015dc <ethernet_link_thread+0x88>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015ff 	.word	0x080015ff
 80015e4:	0800160f 	.word	0x0800160f
 80015e8:	0800161f 	.word	0x0800161f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80015ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f0:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 80015f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015f6:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 80015fc:	e017      	b.n	800162e <ethernet_link_thread+0xda>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80015fe:	2300      	movs	r3, #0
 8001600:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 8001602:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001606:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 800160c:	e00f      	b.n	800162e <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800160e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001612:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 8001614:	2300      	movs	r3, #0
 8001616:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 800161c:	e007      	b.n	800162e <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800161e:	2300      	movs	r3, #0
 8001620:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 8001622:	2300      	movs	r3, #0
 8001624:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 800162a:	e000      	b.n	800162e <ethernet_link_thread+0xda>
      default:
        break;
 800162c:	bf00      	nop
      }

      if(linkchanged)
 800162e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01c      	beq.n	800166e <ethernet_link_thread+0x11a>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	4810      	ldr	r0, [pc, #64]	@ (800167c <ethernet_link_thread+0x128>)
 800163c:	f006 f956 	bl	80078ec <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8001640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001642:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8001644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001646:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	480b      	ldr	r0, [pc, #44]	@ (800167c <ethernet_link_thread+0x128>)
 8001650:	f006 fb20 	bl	8007c94 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <ethernet_link_thread+0x128>)
 8001656:	f005 fbfb 	bl	8006e50 <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 800165a:	2200      	movs	r2, #0
 800165c:	490a      	ldr	r1, [pc, #40]	@ (8001688 <ethernet_link_thread+0x134>)
 800165e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001660:	f00e ffae 	bl	80105c0 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8001664:	2200      	movs	r2, #0
 8001666:	4909      	ldr	r1, [pc, #36]	@ (800168c <ethernet_link_thread+0x138>)
 8001668:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800166a:	f00e ffa9 	bl	80105c0 <netifapi_netif_common>
      }
    }

    osDelay(100);
 800166e:	2064      	movs	r0, #100	@ 0x64
 8001670:	f00d fec9 	bl	800f406 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001674:	e783      	b.n	800157e <ethernet_link_thread+0x2a>
 8001676:	bf00      	nop
 8001678:	20000268 	.word	0x20000268
 800167c:	20000168 	.word	0x20000168
 8001680:	0801a291 	.word	0x0801a291
 8001684:	0801a365 	.word	0x0801a365
 8001688:	0801a1a5 	.word	0x0801a1a5
 800168c:	0801a2f5 	.word	0x0801a2f5

08001690 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
 8001696:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001698:	4814      	ldr	r0, [pc, #80]	@ (80016ec <HAL_ETH_RxAllocateCallback+0x5c>)
 800169a:	f018 fae3 	bl	8019c64 <memp_malloc_pool>
 800169e:	60f8      	str	r0, [r7, #12]
  if (p)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d014      	beq.n	80016d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0220 	add.w	r2, r3, #32
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_ETH_RxAllocateCallback+0x60>)
 80016b4:	619a      	str	r2, [r3, #24]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2241      	movs	r2, #65	@ 0x41
 80016c6:	2100      	movs	r1, #0
 80016c8:	2000      	movs	r0, #0
 80016ca:	f019 f86f 	bl	801a7ac <pbuf_alloced_custom>
  {
	  printf("AllocEr\r\n");
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 80016ce:	e008      	b.n	80016e2 <HAL_ETH_RxAllocateCallback+0x52>
	  printf("AllocEr\r\n");
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <HAL_ETH_RxAllocateCallback+0x64>)
 80016d2:	f021 f999 	bl	8022a08 <puts>
    RxAllocStatus = RX_ALLOC_ERROR;
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_ETH_RxAllocateCallback+0x68>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	08028548 	.word	0x08028548
 80016f0:	08001271 	.word	0x08001271
 80016f4:	08023cb0 	.word	0x08023cb0
 80016f8:	2000015c 	.word	0x2000015c

080016fc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08d      	sub	sp, #52	@ 0x34
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3b20      	subs	r3, #32
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001724:	2200      	movs	r2, #0
 8001726:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e003      	b.n	8001746 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001744:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800174c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001752:	e009      	b.n	8001768 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001756:	891a      	ldrh	r2, [r3, #8]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4413      	add	r3, r2
 800175c:	b29a      	uxth	r2, r3
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f2      	bne.n	8001754 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	623a      	str	r2, [r7, #32]
 8001774:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dd1d      	ble.n	80017b8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 021f 	and.w	r2, r3, #31
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
}
 8001790:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001792:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <HAL_ETH_RxLinkCallback+0xcc>)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3320      	adds	r3, #32
 800179e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3b20      	subs	r3, #32
 80017a4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dcf2      	bgt.n	8001792 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80017ac:	f3bf 8f4f 	dsb	sy
}
 80017b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b2:	f3bf 8f6f 	isb	sy
}
 80017b6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80017b8:	bf00      	nop
}
 80017ba:	bf00      	nop
 80017bc:	3734      	adds	r7, #52	@ 0x34
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  pbuf_free((struct pbuf *)buff);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f019 f9d5 	bl	801ab84 <pbuf_free>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: connection socket 
  * @retval None
  */
void http_server_serve(int conn) 
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80017f0:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80017f4:	6018      	str	r0, [r3, #0]
  int buflen = 1500;
 80017f6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017fa:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
  int ret;
  struct fs_file file;
  unsigned char recv_buffer[1500];
				
  /* Read in the request */
  ret = read(conn, recv_buffer, buflen); 
 80017fe:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800180a:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	f012 f888 	bl	8013924 <lwip_read>
 8001814:	f8c7 05f8 	str.w	r0, [r7, #1528]	@ 0x5f8
  if(ret < 0) return;
 8001818:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	@ 0x5f8
 800181c:	2b00      	cmp	r3, #0
 800181e:	f2c0 80c3 	blt.w	80019a8 <http_server_serve+0x1c4>

  /* Check if request to get ST.gif */
  if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/ST.gif",27)==0)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	221b      	movs	r2, #27
 8001828:	4962      	ldr	r1, [pc, #392]	@ (80019b4 <http_server_serve+0x1d0>)
 800182a:	4618      	mov	r0, r3
 800182c:	f021 fa2d 	bl	8022c8a <strncmp>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d117      	bne.n	8001866 <http_server_serve+0x82>
  {
    fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8001836:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800183a:	495f      	ldr	r1, [pc, #380]	@ (80019b8 <http_server_serve+0x1d4>)
 800183c:	4618      	mov	r0, r3
 800183e:	f020 ff33 	bl	80226a8 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001842:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 8001846:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800184a:	461a      	mov	r2, r3
 800184c:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001850:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f012 f9e9 	bl	8013c2c <lwip_write>
    fs_close(&file);
 800185a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800185e:	4618      	mov	r0, r3
 8001860:	f020 ff60 	bl	8022724 <fs_close>
 8001864:	e098      	b.n	8001998 <http_server_serve+0x1b4>
  }
  /* Check if request to get stm32.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	221e      	movs	r2, #30
 800186c:	4953      	ldr	r1, [pc, #332]	@ (80019bc <http_server_serve+0x1d8>)
 800186e:	4618      	mov	r0, r3
 8001870:	f021 fa0b 	bl	8022c8a <strncmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d117      	bne.n	80018aa <http_server_serve+0xc6>
  {
    fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 800187a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800187e:	4950      	ldr	r1, [pc, #320]	@ (80019c0 <http_server_serve+0x1dc>)
 8001880:	4618      	mov	r0, r3
 8001882:	f020 ff11 	bl	80226a8 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001886:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800188a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800188e:	461a      	mov	r2, r3
 8001890:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001894:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f012 f9c7 	bl	8013c2c <lwip_write>
    fs_close(&file);
 800189e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f020 ff3e 	bl	8022724 <fs_close>
 80018a8:	e076      	b.n	8001998 <http_server_serve+0x1b4>
  }
  /* Check if request to get ST logo.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	221d      	movs	r2, #29
 80018b0:	4944      	ldr	r1, [pc, #272]	@ (80019c4 <http_server_serve+0x1e0>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f021 f9e9 	bl	8022c8a <strncmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d117      	bne.n	80018ee <http_server_serve+0x10a>
  {
    fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 80018be:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80018c2:	4941      	ldr	r1, [pc, #260]	@ (80019c8 <http_server_serve+0x1e4>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f020 feef 	bl	80226a8 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 80018ca:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80018ce:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80018d2:	461a      	mov	r2, r3
 80018d4:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80018d8:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f012 f9a5 	bl	8013c2c <lwip_write>
    fs_close(&file);
 80018e2:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f020 ff1c 	bl	8022724 <fs_close>
 80018ec:	e054      	b.n	8001998 <http_server_serve+0x1b4>
  }
  else if(strncmp((char *)recv_buffer, "GET /STM32H7xxTASKS.html", 24) == 0)
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2218      	movs	r2, #24
 80018f4:	4935      	ldr	r1, [pc, #212]	@ (80019cc <http_server_serve+0x1e8>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f021 f9c7 	bl	8022c8a <strncmp>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <http_server_serve+0x12e>
  {
    /* Load dynamic page */
    DynWebPage(conn);
 8001902:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001906:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f000 f8b6 	bl	8001a7c <DynWebPage>
 8001910:	e042      	b.n	8001998 <http_server_serve+0x1b4>
  }
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2213      	movs	r2, #19
 8001918:	492d      	ldr	r1, [pc, #180]	@ (80019d0 <http_server_serve+0x1ec>)
 800191a:	4618      	mov	r0, r3
 800191c:	f021 f9b5 	bl	8022c8a <strncmp>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <http_server_serve+0x156>
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2206      	movs	r2, #6
 800192c:	4929      	ldr	r1, [pc, #164]	@ (80019d4 <http_server_serve+0x1f0>)
 800192e:	4618      	mov	r0, r3
 8001930:	f021 f9ab 	bl	8022c8a <strncmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d117      	bne.n	800196a <http_server_serve+0x186>
  {
    /* Load STM32H7xxpage */
    fs_open(&file, "/STM32H7xx.html"); 
 800193a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800193e:	4926      	ldr	r1, [pc, #152]	@ (80019d8 <http_server_serve+0x1f4>)
 8001940:	4618      	mov	r0, r3
 8001942:	f020 feb1 	bl	80226a8 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001946:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800194a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800194e:	461a      	mov	r2, r3
 8001950:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001954:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	f012 f967 	bl	8013c2c <lwip_write>
    fs_close(&file);
 800195e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001962:	4618      	mov	r0, r3
 8001964:	f020 fede 	bl	8022724 <fs_close>
 8001968:	e016      	b.n	8001998 <http_server_serve+0x1b4>
  }
  else
  {
    /* Load 404 page */
    fs_open(&file, "/404.html");
 800196a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800196e:	491b      	ldr	r1, [pc, #108]	@ (80019dc <http_server_serve+0x1f8>)
 8001970:	4618      	mov	r0, r3
 8001972:	f020 fe99 	bl	80226a8 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001976:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800197a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800197e:	461a      	mov	r2, r3
 8001980:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001984:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f012 f94f 	bl	8013c2c <lwip_write>
    fs_close(&file);
 800198e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001992:	4618      	mov	r0, r3
 8001994:	f020 fec6 	bl	8022724 <fs_close>
  }
  /* Close connection socket */
  close(conn);
 8001998:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800199c:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f011 fbfb 	bl	801319c <lwip_close>
 80019a6:	e000      	b.n	80019aa <http_server_serve+0x1c6>
  if(ret < 0) return;
 80019a8:	bf00      	nop
}
 80019aa:	f507 67c0 	add.w	r7, r7, #1536	@ 0x600
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08023cbc 	.word	0x08023cbc
 80019b8:	08023cd8 	.word	0x08023cd8
 80019bc:	08023cf0 	.word	0x08023cf0
 80019c0:	08023d10 	.word	0x08023d10
 80019c4:	08023d2c 	.word	0x08023d2c
 80019c8:	08023d4c 	.word	0x08023d4c
 80019cc:	08023d68 	.word	0x08023d68
 80019d0:	08023d84 	.word	0x08023d84
 80019d4:	08023d98 	.word	0x08023d98
 80019d8:	08023da0 	.word	0x08023da0
 80019dc:	08023db0 	.word	0x08023db0

080019e0 <http_server_socket_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_socket_thread(void *arg)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	@ 0x38
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  int sock, newconn, size;
  struct sockaddr_in address, remotehost;

 /* create a TCP socket */
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 80019e8:	2200      	movs	r2, #0
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f012 f8bf 	bl	8013b70 <lwip_socket>
 80019f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80019f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db26      	blt.n	8001a48 <http_server_socket_thread+0x68>
  {
    return;
  }
  
  /* bind to port 80 at any interface */
  address.sin_family = AF_INET;
 80019fa:	2302      	movs	r3, #2
 80019fc:	777b      	strb	r3, [r7, #29]
  address.sin_port = htons(80);
 80019fe:	2050      	movs	r0, #80	@ 0x50
 8001a00:	f017 fc0e 	bl	8019220 <lwip_htons>
 8001a04:	4603      	mov	r3, r0
 8001a06:	83fb      	strh	r3, [r7, #30]
  address.sin_addr.s_addr = INADDR_ANY;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]

  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2210      	movs	r2, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a16:	f011 fb53 	bl	80130c0 <lwip_bind>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db15      	blt.n	8001a4c <http_server_socket_thread+0x6c>
  {
    return;
  }
  
  /* listen for incoming connections (TCP listen backlog = 5) */
  listen(sock, 5);
 8001a20:	2105      	movs	r1, #5
 8001a22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a24:	f011 fc14 	bl	8013250 <lwip_listen>
  
  size = sizeof(remotehost);
 8001a28:	2310      	movs	r3, #16
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  while (1) 
  {
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001a2c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a38:	f011 fa24 	bl	8012e84 <lwip_accept>
 8001a3c:	6338      	str	r0, [r7, #48]	@ 0x30
    http_server_serve(newconn);
 8001a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a40:	f7ff fed0 	bl	80017e4 <http_server_serve>
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001a44:	bf00      	nop
 8001a46:	e7f1      	b.n	8001a2c <http_server_socket_thread+0x4c>
    return;
 8001a48:	bf00      	nop
 8001a4a:	e000      	b.n	8001a4e <http_server_socket_thread+0x6e>
    return;
 8001a4c:	bf00      	nop
  }
}
 8001a4e:	3738      	adds	r7, #56	@ 0x38
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a62:	2200      	movs	r2, #0
 8001a64:	4903      	ldr	r1, [pc, #12]	@ (8001a74 <http_server_socket_init+0x20>)
 8001a66:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <http_server_socket_init+0x24>)
 8001a68:	f020 fde0 	bl	802262c <sys_thread_new>
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	080019e1 	.word	0x080019e1
 8001a78:	08023dbc 	.word	0x08023dbc

08001a7c <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a88:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a8c:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001a8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a92:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f021 f8d5 	bl	8022c5c <memset>

  /* Update the hit count */
  nPageHits++;
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c20 <DynWebPage+0x1a4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a59      	ldr	r2, [pc, #356]	@ (8001c20 <DynWebPage+0x1a4>)
 8001aba:	6013      	str	r3, [r2, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8001abc:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <DynWebPage+0x1a4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4957      	ldr	r1, [pc, #348]	@ (8001c24 <DynWebPage+0x1a8>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f020 ffa5 	bl	8022a18 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f021 f8c7 	bl	8022c6c <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc1e 	bl	8000324 <strlen>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4413      	add	r3, r2
 8001af2:	4a4d      	ldr	r2, [pc, #308]	@ (8001c28 <DynWebPage+0x1ac>)
 8001af4:	4615      	mov	r5, r2
 8001af6:	469c      	mov	ip, r3
 8001af8:	f105 0e20 	add.w	lr, r5, #32
 8001afc:	4664      	mov	r4, ip
 8001afe:	462e      	mov	r6, r5
 8001b00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b02:	6020      	str	r0, [r4, #0]
 8001b04:	6061      	str	r1, [r4, #4]
 8001b06:	60a2      	str	r2, [r4, #8]
 8001b08:	60e3      	str	r3, [r4, #12]
 8001b0a:	3510      	adds	r5, #16
 8001b0c:	f10c 0c10 	add.w	ip, ip, #16
 8001b10:	4575      	cmp	r5, lr
 8001b12:	d1f3      	bne.n	8001afc <DynWebPage+0x80>
 8001b14:	4664      	mov	r4, ip
 8001b16:	462b      	mov	r3, r5
 8001b18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b1a:	6020      	str	r0, [r4, #0]
 8001b1c:	6061      	str	r1, [r4, #4]
 8001b1e:	60a2      	str	r2, [r4, #8]
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	81a2      	strh	r2, [r4, #12]
 8001b26:	73a3      	strb	r3, [r4, #14]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fbf9 	bl	8000324 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <DynWebPage+0x1b0>)
 8001b3e:	4614      	mov	r4, r2
 8001b40:	469c      	mov	ip, r3
 8001b42:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b46:	4665      	mov	r5, ip
 8001b48:	4626      	mov	r6, r4
 8001b4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b4c:	6028      	str	r0, [r5, #0]
 8001b4e:	6069      	str	r1, [r5, #4]
 8001b50:	60aa      	str	r2, [r5, #8]
 8001b52:	60eb      	str	r3, [r5, #12]
 8001b54:	3410      	adds	r4, #16
 8001b56:	f10c 0c10 	add.w	ip, ip, #16
 8001b5a:	4574      	cmp	r4, lr
 8001b5c:	d1f3      	bne.n	8001b46 <DynWebPage+0xca>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	4622      	mov	r2, r4
 8001b62:	6810      	ldr	r0, [r2, #0]
 8001b64:	6018      	str	r0, [r3, #0]
 8001b66:	7912      	ldrb	r2, [r2, #4]
 8001b68:	711a      	strb	r2, [r3, #4]
    
  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fbd8 	bl	8000324 <strlen>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f107 0318 	add.w	r3, r7, #24
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00c fdef 	bl	800e760 <vTaskList>
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 8001b82:	f107 0318 	add.w	r3, r7, #24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fbcc 	bl	8000324 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	4413      	add	r3, r2
 8001b96:	4a26      	ldr	r2, [pc, #152]	@ (8001c30 <DynWebPage+0x1b4>)
 8001b98:	4614      	mov	r4, r2
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001ba0:	4665      	mov	r5, ip
 8001ba2:	4626      	mov	r6, r4
 8001ba4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ba6:	6028      	str	r0, [r5, #0]
 8001ba8:	6069      	str	r1, [r5, #4]
 8001baa:	60aa      	str	r2, [r5, #8]
 8001bac:	60eb      	str	r3, [r5, #12]
 8001bae:	3410      	adds	r4, #16
 8001bb0:	f10c 0c10 	add.w	ip, ip, #16
 8001bb4:	4574      	cmp	r4, lr
 8001bb6:	d1f3      	bne.n	8001ba0 <DynWebPage+0x124>
 8001bb8:	4663      	mov	r3, ip
 8001bba:	4622      	mov	r2, r4
 8001bbc:	6810      	ldr	r0, [r2, #0]
 8001bbe:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fbad 	bl	8000324 <strlen>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f107 0318 	add.w	r3, r7, #24
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <DynWebPage+0x1b8>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4611      	mov	r1, r2
 8001bda:	2348      	movs	r3, #72	@ 0x48
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f021 f8e2 	bl	8022da6 <memcpy>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001be2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001be6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bea:	f240 624a 	movw	r2, #1610	@ 0x64a
 8001bee:	4912      	ldr	r1, [pc, #72]	@ (8001c38 <DynWebPage+0x1bc>)
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f012 f81b 	bl	8013c2c <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 8001bf6:	f107 0318 	add.w	r3, r7, #24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fb92 	bl	8000324 <strlen>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f107 0118 	add.w	r1, r7, #24
 8001c06:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c0a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f012 f80c 	bl	8013c2c <lwip_write>
}
 8001c14:	bf00      	nop
 8001c16:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000288 	.word	0x20000288
 8001c24:	08023dc4 	.word	0x08023dc4
 8001c28:	08023dc8 	.word	0x08023dc8
 8001c2c:	08023df8 	.word	0x08023df8
 8001c30:	08023e30 	.word	0x08023e30
 8001c34:	08023e64 	.word	0x08023e64
 8001c38:	08028554 	.word	0x08028554

08001c3c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 8001c40:	f000 f948 	bl	8001ed4 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001c44:	f000 f9a4 	bl	8001f90 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001c48:	f004 fe24 	bl	8006894 <HAL_Init>

  /* Configure the system clock to 520 MHz */
  SystemClock_Config();
 8001c4c:	f000 f8a8 	bl	8001da0 <SystemClock_Config>

  Log_Init();
 8001c50:	f7fe fdb8 	bl	80007c4 <Log_Init>
  printf("Up!\r\n");
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <main+0x54>)
 8001c56:	f020 fed7 	bl	8022a08 <puts>

  /* Configure the LEDs ...*/
  BSP_Config();
 8001c5a:	f000 f837 	bl	8001ccc <BSP_Config>

  /* Init thread */
  osKernelInitialize();
 8001c5e:	f00d fab3 	bl	800f1c8 <osKernelInitialize>
  
  attr.name = "Start";
 8001c62:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <main+0x58>)
 8001c64:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <main+0x5c>)
 8001c66:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <main+0x58>)
 8001c6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c6e:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <main+0x58>)
 8001c72:	2218      	movs	r2, #24
 8001c74:	619a      	str	r2, [r3, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <main+0x58>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <main+0x60>)
 8001c7c:	f00d fb03 	bl	800f286 <osThreadNew>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <main+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8001c86:	f00d fac3 	bl	800f210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 8001c8a:	bf00      	nop
 8001c8c:	e7fd      	b.n	8001c8a <main+0x4e>
 8001c8e:	bf00      	nop
 8001c90:	08023eac 	.word	0x08023eac
 8001c94:	200002cc 	.word	0x200002cc
 8001c98:	08023eb4 	.word	0x08023eb4
 8001c9c:	08001ca5 	.word	0x08001ca5
 8001ca0:	200002f0 	.word	0x200002f0

08001ca4 <StartThread>:
  * @brief  Start Thread
  * @param  argument not used
  * @retval None
  */
void StartThread(void* argument)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001cac:	2100      	movs	r1, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f012 fb40 	bl	8014334 <tcpip_init>

  /* Initialize the LwIP stack */
  Netif_Config();
 8001cb4:	f000 f814 	bl	8001ce0 <Netif_Config>

  /* Initialize webserver demo */
  http_server_socket_init();
 8001cb8:	f7ff fecc 	bl	8001a54 <http_server_socket_init>

  for( ;; )
  {
    /* Delete the Init Thread */
    osThreadTerminate(StartHandle);
 8001cbc:	4b02      	ldr	r3, [pc, #8]	@ (8001cc8 <StartThread+0x24>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00d fb73 	bl	800f3ac <osThreadTerminate>
 8001cc6:	e7f9      	b.n	8001cbc <StartThread+0x18>
 8001cc8:	200002f0 	.word	0x200002f0

08001ccc <BSP_Config>:
  * @brief  BSP Configuration
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f004 fcbd 	bl	8006650 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f004 fcba 	bl	8006650 <BSP_LED_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	f107 0208 	add.w	r2, r7, #8
 8001cf8:	f107 010c 	add.w	r1, r7, #12
 8001cfc:	481d      	ldr	r0, [pc, #116]	@ (8001d74 <Netif_Config+0x94>)
 8001cfe:	9002      	str	r0, [sp, #8]
 8001d00:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <Netif_Config+0x98>)
 8001d02:	9001      	str	r0, [sp, #4]
 8001d04:	2000      	movs	r0, #0
 8001d06:	9000      	str	r0, [sp, #0]
 8001d08:	481c      	ldr	r0, [pc, #112]	@ (8001d7c <Netif_Config+0x9c>)
 8001d0a:	f018 f875 	bl	8019df8 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001d0e:	481b      	ldr	r0, [pc, #108]	@ (8001d7c <Netif_Config+0x9c>)
 8001d10:	f018 fa38 	bl	801a184 <netif_set_default>

  ethernet_link_status_updated(&gnetif);
 8001d14:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <Netif_Config+0x9c>)
 8001d16:	f7fe fdc9 	bl	80008ac <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001d1a:	4919      	ldr	r1, [pc, #100]	@ (8001d80 <Netif_Config+0xa0>)
 8001d1c:	4817      	ldr	r0, [pc, #92]	@ (8001d7c <Netif_Config+0x9c>)
 8001d1e:	f018 fb51 	bl	801a3c4 <netif_set_link_callback>

  attr.name = "EthLink";
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <Netif_Config+0xa4>)
 8001d24:	4a18      	ldr	r2, [pc, #96]	@ (8001d88 <Netif_Config+0xa8>)
 8001d26:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <Netif_Config+0xa4>)
 8001d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d2e:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <Netif_Config+0xa4>)
 8001d32:	2218      	movs	r2, #24
 8001d34:	619a      	str	r2, [r3, #24]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <Netif_Config+0xa4>)
 8001d38:	4910      	ldr	r1, [pc, #64]	@ (8001d7c <Netif_Config+0x9c>)
 8001d3a:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <Netif_Config+0xac>)
 8001d3c:	f00d faa3 	bl	800f286 <osThreadNew>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <Netif_Config+0xb0>)
 8001d44:	6013      	str	r3, [r2, #0]
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <Netif_Config+0xa4>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <Netif_Config+0xb4>)
 8001d4a:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <Netif_Config+0xa4>)
 8001d4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d52:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityBelowNormal;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <Netif_Config+0xa4>)
 8001d56:	2210      	movs	r2, #16
 8001d58:	619a      	str	r2, [r3, #24]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <Netif_Config+0xa4>)
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <Netif_Config+0x9c>)
 8001d5e:	480e      	ldr	r0, [pc, #56]	@ (8001d98 <Netif_Config+0xb8>)
 8001d60:	f00d fa91 	bl	800f286 <osThreadNew>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <Netif_Config+0xbc>)
 8001d68:	6013      	str	r3, [r2, #0]
#endif
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	08014215 	.word	0x08014215
 8001d78:	08001215 	.word	0x08001215
 8001d7c:	2000028c 	.word	0x2000028c
 8001d80:	080008ad 	.word	0x080008ad
 8001d84:	200002cc 	.word	0x200002cc
 8001d88:	08023ebc 	.word	0x08023ebc
 8001d8c:	08001555 	.word	0x08001555
 8001d90:	200002f4 	.word	0x200002f4
 8001d94:	08023ec4 	.word	0x08023ec4
 8001d98:	080008e5 	.word	0x080008e5
 8001d9c:	200002f8 	.word	0x200002f8

08001da0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a0      	sub	sp, #128	@ 0x80
 8001da4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dac:	2002      	movs	r0, #2
 8001dae:	f006 ff9f 	bl	8008cf0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <SystemClock_Config+0x12c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	4a44      	ldr	r2, [pc, #272]	@ (8001ecc <SystemClock_Config+0x12c>)
 8001dbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dc0:	6193      	str	r3, [r2, #24]
 8001dc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ecc <SystemClock_Config+0x12c>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dce:	bf00      	nop
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <SystemClock_Config+0x12c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ddc:	d1f8      	bne.n	8001dd0 <SystemClock_Config+0x30>

  /* Enable D2 domain SRAM1 Clock (0x30000000 AXI)*/
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001dde:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001de4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001de6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001dea:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001dee:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001df0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e00:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001e04:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e12:	2302      	movs	r3, #2
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e16:	2304      	movs	r3, #4
 8001e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 260;
 8001e1a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	653b      	str	r3, [r7, #80]	@ 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 ff91 	bl	8008d64 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001e48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0xb4>
  {
    while(1);
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <SystemClock_Config+0xb0>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001e54:	233f      	movs	r3, #63	@ 0x3f
 8001e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e60:	2308      	movs	r3, #8
 8001e62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e64:	2340      	movs	r3, #64	@ 0x40
 8001e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e68:	2340      	movs	r3, #64	@ 0x40
 8001e6a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e70:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e72:	2340      	movs	r3, #64	@ 0x40
 8001e74:	67bb      	str	r3, [r7, #120]	@ 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8001e76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f007 fb4b 	bl	8009518 <HAL_RCC_ClockConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001e88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xf4>
  {
    while(1);
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <SystemClock_Config+0xf0>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e9e:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <SystemClock_Config+0x130>)
 8001eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  HAL_EnableCompensationCell();
 8001ebe:	f004 fd61 	bl	8006984 <HAL_EnableCompensationCell>
}
 8001ec2:	bf00      	nop
 8001ec4:	3780      	adds	r7, #128	@ 0x80
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	58024800 	.word	0x58024800
 8001ed0:	58024400 	.word	0x58024400

08001ed4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001eda:	f004 fe43 	bl	8006b64 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ee6:	231f      	movs	r3, #31
 8001ee8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001eea:	2300      	movs	r3, #0
 8001eec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f02:	2387      	movs	r3, #135	@ 0x87
 8001f04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	733b      	strb	r3, [r7, #12]
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fe61 	bl	8006bd4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001f16:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f1a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001f1c:	2309      	movs	r3, #9
 8001f1e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f20:	2303      	movs	r3, #3
 8001f22:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f40:	463b      	mov	r3, r7
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fe46 	bl	8006bd4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MPU_Config+0xb8>)
 8001f4e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001f50:	230d      	movs	r3, #13
 8001f52:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f54:	2303      	movs	r3, #3
 8001f56:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f74:	463b      	mov	r3, r7
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fe2c 	bl	8006bd4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f7c:	2004      	movs	r0, #4
 8001f7e:	f004 fe09 	bl	8006b94 <HAL_MPU_Enable>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	30004000 	.word	0x30004000

08001f90 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f96:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11b      	bne.n	8001fda <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001fa2:	f3bf 8f4f 	dsb	sy
}
 8001fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fa8:	f3bf 8f6f 	isb	sy
}
 8001fac:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb6:	f3bf 8f4f 	dsb	sy
}
 8001fba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fbc:	f3bf 8f6f 	isb	sy
}
 8001fc0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fce:	f3bf 8f4f 	dsb	sy
}
 8001fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd4:	f3bf 8f6f 	isb	sy
}
 8001fd8:	e000      	b.n	8001fdc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001fda:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d138      	bne.n	800205a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff0:	f3bf 8f4f 	dsb	sy
}
 8001ff4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8001ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	0b5b      	lsrs	r3, r3, #13
 8002002:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002006:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	08db      	lsrs	r3, r3, #3
 800200c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002010:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800201a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002020:	4911      	ldr	r1, [pc, #68]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e5      	bne.n	8002008 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800203c:	f3bf 8f4f 	dsb	sy
}
 8002040:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <CPU_CACHE_Enable+0xd8>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800204e:	f3bf 8f4f 	dsb	sy
}
 8002052:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002054:	f3bf 8f6f 	isb	sy
}
 8002058:	e000      	b.n	800205c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800205a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b090      	sub	sp, #64	@ 0x40
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	d827      	bhi.n	80020ca <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800207a:	2200      	movs	r2, #0
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	2036      	movs	r0, #54	@ 0x36
 8002080:	f004 fd48 	bl	8006b14 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002084:	2036      	movs	r0, #54	@ 0x36
 8002086:	f004 fd5f 	bl	8006b48 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <HAL_InitTick+0xc4>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_InitTick+0xc8>)
 8002092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002096:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_InitTick+0xc8>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_InitTick+0xc8>)
 80020a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f007 fdb9 	bl	8009c30 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80020c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <HAL_InitTick+0x6a>
 80020c8:	e001      	b.n	80020ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e02b      	b.n	8002126 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ce:	f007 fd83 	bl	8009bd8 <HAL_RCC_GetPCLK1Freq>
 80020d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80020d4:	e004      	b.n	80020e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020d6:	f007 fd7f 	bl	8009bd8 <HAL_RCC_GetPCLK1Freq>
 80020da:	4603      	mov	r3, r0
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e2:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_InitTick+0xcc>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	3b01      	subs	r3, #1
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80020ee:	4b13      	ldr	r3, [pc, #76]	@ (800213c <HAL_InitTick+0xd0>)
 80020f0:	4a13      	ldr	r2, [pc, #76]	@ (8002140 <HAL_InitTick+0xd4>)
 80020f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_InitTick+0xd0>)
 80020f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020fa:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_InitTick+0xd0>)
 80020fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002100:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_InitTick+0xd0>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <HAL_InitTick+0xd0>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800210e:	480b      	ldr	r0, [pc, #44]	@ (800213c <HAL_InitTick+0xd0>)
 8002110:	f008 f88e 	bl	800a230 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800211a:	4808      	ldr	r0, [pc, #32]	@ (800213c <HAL_InitTick+0xd0>)
 800211c:	f008 f8ea 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
 8002120:	4603      	mov	r3, r0
 8002122:	e000      	b.n	8002126 <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	3740      	adds	r7, #64	@ 0x40
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000028 	.word	0x20000028
 8002134:	58024400 	.word	0x58024400
 8002138:	431bde83 	.word	0x431bde83
 800213c:	200002fc 	.word	0x200002fc
 8002140:	40001000 	.word	0x40001000

08002144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800214c:	f004 fbe6 	bl	800691c <HAL_IncTick>
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <TIM6_DAC_IRQHandler+0x10>)
 800215e:	f008 f94f 	bl	800a400 <HAL_TIM_IRQHandler>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200002fc 	.word	0x200002fc

0800216c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <HardFault_Handler+0x4>

08002182 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002186:	bf00      	nop
 8002188:	e7fd      	b.n	8002186 <MemManage_Handler+0x4>

0800218a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <BusFault_Handler+0x4>

08002192 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002196:	bf00      	nop
 8002198:	e7fd      	b.n	8002196 <UsageFault_Handler+0x4>

0800219a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <ETH_IRQHandler+0x10>)
 80021ae:	f005 f9e3 	bl	8007578 <HAL_ETH_IRQHandler>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000168 	.word	0x20000168

080021bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_kill>:

int _kill(int pid, int sig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d6:	f020 fdb1 	bl	8022d3c <__errno>
 80021da:	4603      	mov	r3, r0
 80021dc:	2216      	movs	r2, #22
 80021de:	601a      	str	r2, [r3, #0]
  return -1;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_exit>:

void _exit (int status)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ffe7 	bl	80021cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80021fe:	bf00      	nop
 8002200:	e7fd      	b.n	80021fe <_exit+0x12>

08002202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e00a      	b.n	800222a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002214:	f3af 8000 	nop.w
 8002218:	4601      	mov	r1, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	60ba      	str	r2, [r7, #8]
 8002220:	b2ca      	uxtb	r2, r1
 8002222:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbf0      	blt.n	8002214 <_read+0x12>
  }

  return len;
 8002232:	687b      	ldr	r3, [r7, #4]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_close>:
  }
  return len;
}*/

int _close(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002264:	605a      	str	r2, [r3, #4]
  return 0;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_isatty>:

int _isatty(int file)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f020 fd32 	bl	8022d3c <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20020000 	.word	0x20020000
 8002304:	00001000 	.word	0x00001000
 8002308:	20000348 	.word	0x20000348
 800230c:	200101c8 	.word	0x200101c8

08002310 <ptpd_normalize_time>:
#include "ptpd.h"

// Normalize the time making sure there are never more
// than a billion nanoseconds represented.
static void ptpd_normalize_time(TimeInternal *r)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  r->seconds += r->nanoseconds / 1000000000;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4921      	ldr	r1, [pc, #132]	@ (80023a8 <ptpd_normalize_time+0x98>)
 8002322:	fb81 0103 	smull	r0, r1, r1, r3
 8002326:	1709      	asrs	r1, r1, #28
 8002328:	17db      	asrs	r3, r3, #31
 800232a:	1acb      	subs	r3, r1, r3
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
  r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <ptpd_normalize_time+0x98>)
 8002338:	fb83 1302 	smull	r1, r3, r3, r2
 800233c:	1719      	asrs	r1, r3, #28
 800233e:	17d3      	asrs	r3, r2, #31
 8002340:	1acb      	subs	r3, r1, r3
 8002342:	491a      	ldr	r1, [pc, #104]	@ (80023ac <ptpd_normalize_time+0x9c>)
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6053      	str	r3, [r2, #4]

  if ((r->seconds > 0) && (r->nanoseconds < 0))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	dd0f      	ble.n	8002376 <ptpd_normalize_time+0x66>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0b      	bge.n	8002376 <ptpd_normalize_time+0x66>
  {
    r->seconds -= 1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	601a      	str	r2, [r3, #0]
    r->nanoseconds += 1000000000;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <ptpd_normalize_time+0x9c>)
 800236e:	4413      	add	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6053      	str	r3, [r2, #4]
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
  {
    r->seconds += 1;
    r->nanoseconds -= 1000000000;
  }
}
 8002374:	e012      	b.n	800239c <ptpd_normalize_time+0x8c>
  else if ((r->seconds < 0) && (r->nanoseconds > 0))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	da0e      	bge.n	800239c <ptpd_normalize_time+0x8c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd0a      	ble.n	800239c <ptpd_normalize_time+0x8c>
    r->seconds += 1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
    r->nanoseconds -= 1000000000;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <ptpd_normalize_time+0xa0>)
 8002396:	4413      	add	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6053      	str	r3, [r2, #4]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	44b82fa1 	.word	0x44b82fa1
 80023ac:	3b9aca00 	.word	0x3b9aca00
 80023b0:	c4653600 	.word	0xc4653600
 80023b4:	00000000 	.word	0x00000000

080023b8 <ptpd_scaled_nanoseconds_to_internal_time>:

// Convert scaled nanoseconds into TimeInternal structure.
void ptpd_scaled_nanoseconds_to_internal_time(TimeInternal *internal, const int64_t *scaled_nonoseconds)
{
 80023b8:	b5b0      	push	{r4, r5, r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  int sign;
  int64_t nanoseconds = *scaled_nonoseconds;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  // Determine sign of result big integer number.
  if (nanoseconds < 0)
 80023cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da0b      	bge.n	80023ec <ptpd_scaled_nanoseconds_to_internal_time+0x34>
  {
    nanoseconds = -nanoseconds;
 80023d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d8:	2100      	movs	r1, #0
 80023da:	4254      	negs	r4, r2
 80023dc:	eb61 0503 	sbc.w	r5, r1, r3
 80023e0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    sign = -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e001      	b.n	80023f0 <ptpd_scaled_nanoseconds_to_internal_time+0x38>
  }
  else
  {
    sign = 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
  }

  // Fractional nanoseconds are excluded (see 5.3.2).
  nanoseconds >>= 16;
 80023f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	0c02      	lsrs	r2, r0, #16
 80023fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002402:	140b      	asrs	r3, r1, #16
 8002404:	e9c7 2302 	strd	r2, r3, [r7, #8]
  internal->seconds = sign * (nanoseconds / 1000000000);
 8002408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800240c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002448 <ptpd_scaled_nanoseconds_to_internal_time+0x90>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fd ffe5 	bl	80003e0 <__aeabi_ldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
  internal->nanoseconds = sign * (nanoseconds % 1000000000);
 8002426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800242a:	a307      	add	r3, pc, #28	@ (adr r3, 8002448 <ptpd_scaled_nanoseconds_to_internal_time+0x90>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fd ffd6 	bl	80003e0 <__aeabi_ldivmod>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	605a      	str	r2, [r3, #4]
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}
 8002448:	3b9aca00 	.word	0x3b9aca00
 800244c:	00000000 	.word	0x00000000

08002450 <ptpd_from_internal_time>:

// Convert TimeInternal into Timestamp structure (defined by the spec).
void ptpd_from_internal_time(const TimeInternal *internal, Timestamp *external)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  // ptpd_from_internal_time() is only used to convert time given by the system
  // to a timestamp. As a consequence, no negative value can normally be found
  // in (internal). Note that offsets are also represented with TimeInternal
  // structure, and can be negative, but offset are never convert into Timestamp
  // so there is no problem here.
  if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db11      	blt.n	8002486 <ptpd_from_internal_time+0x36>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0d      	blt.n	8002486 <ptpd_from_internal_time+0x36>
    DBG("PTPD: Negative value cannot be converted into timestamp \n");
    return;
  }
  else
  {
    external->secondsField.lsb = internal->seconds;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	601a      	str	r2, [r3, #0]
    external->nanosecondsField = internal->nanoseconds;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]
    external->secondsField.msb = 0;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	809a      	strh	r2, [r3, #4]
 8002484:	e000      	b.n	8002488 <ptpd_from_internal_time+0x38>
    return;
 8002486:	bf00      	nop
  }
}
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <ptpd_to_internal_time>:

// Convert Timestamp to TimeInternal structure (defined by the spec).
void ptpd_to_internal_time(TimeInternal *internal, const Timestamp *external)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  // NOTE: Program will not run after 2038...
  if (external->secondsField.lsb < INT_MAX)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d20a      	bcs.n	80024be <ptpd_to_internal_time+0x2c>
  {
    internal->seconds = external->secondsField.lsb;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
    internal->nanoseconds = external->nanosecondsField;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	e000      	b.n	80024c0 <ptpd_to_internal_time+0x2e>
  }
  else
  {
    DBG("PTPD: Clock servo cannot be executed: seconds field is higher than signed integer (32bits)\n");
    return;
 80024be:	bf00      	nop
  }
}
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <ptpd_add_time>:

// Add two TimeInternal structure and normalize.
void ptpd_add_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  r->seconds = x->seconds + y->seconds;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	441a      	add	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]
  r->nanoseconds = x->nanoseconds + y->nanoseconds;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	441a      	add	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f7ff ff0c 	bl	8002310 <ptpd_normalize_time>
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <ptpd_sub_time>:

// Substract two TimeInternal structure and normalize.
void ptpd_sub_time(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  r->seconds = x->seconds - y->seconds;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]
  r->nanoseconds = x->nanoseconds - y->nanoseconds;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fef1 	bl	8002310 <ptpd_normalize_time>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <ptpd_div2_time>:

// Divide the TimeInternal by 2 and normalize.
void ptpd_div2_time(TimeInternal *r)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  r->nanoseconds += r->seconds % 2 * 1000000000;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	bfb8      	it	lt
 8002550:	425b      	neglt	r3, r3
 8002552:	490f      	ldr	r1, [pc, #60]	@ (8002590 <ptpd_div2_time+0x58>)
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]
  r->seconds /= 2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	da00      	bge.n	8002568 <ptpd_div2_time+0x30>
 8002566:	3301      	adds	r3, #1
 8002568:	105b      	asrs	r3, r3, #1
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
  r->nanoseconds /= 2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da00      	bge.n	800257a <ptpd_div2_time+0x42>
 8002578:	3301      	adds	r3, #1
 800257a:	105b      	asrs	r3, r3, #1
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	605a      	str	r2, [r3, #4]

  ptpd_normalize_time(r);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fec4 	bl	8002310 <ptpd_normalize_time>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	3b9aca00 	.word	0x3b9aca00

08002594 <ptpd_floor_log2>:

// Returns the floor form of binary logarithm for a 32 bit integer.
// -1 is returned if 'n' is 0.
int32_t ptpd_floor_log2(uint32_t n)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  int pos = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  // Sanity check.
  if (n == 0) return -1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <ptpd_floor_log2+0x18>
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e02b      	b.n	8002604 <ptpd_floor_log2+0x70>

  if (n >= 1 << 16) { n >>= 16; pos += 16; }
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b2:	d305      	bcc.n	80025c0 <ptpd_floor_log2+0x2c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3310      	adds	r3, #16
 80025be:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  8) { n >>=  8; pos +=  8; }
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2bff      	cmp	r3, #255	@ 0xff
 80025c4:	d905      	bls.n	80025d2 <ptpd_floor_log2+0x3e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3308      	adds	r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  4) { n >>=  4; pos +=  4; }
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d905      	bls.n	80025e4 <ptpd_floor_log2+0x50>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  2) { n >>=  2; pos +=  2; }
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d905      	bls.n	80025f6 <ptpd_floor_log2+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3302      	adds	r3, #2
 80025f4:	60fb      	str	r3, [r7, #12]
  if (n >= 1 <<  1) {           pos +=  1; }
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d902      	bls.n	8002602 <ptpd_floor_log2+0x6e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]

  return pos;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <eui48_to_eui64>:
#include <string.h>
#include "ptpd.h"

// Convert EUI48 format to EUI64.
static void eui48_to_eui64(const octet_t * eui48, octet_t * eui64)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  eui64[0] = eui48[0];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	701a      	strb	r2, [r3, #0]
  eui64[1] = eui48[1];
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
  eui64[2] = eui48[2];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	3302      	adds	r3, #2
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
  eui64[3] = 0xff;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3303      	adds	r3, #3
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	701a      	strb	r2, [r3, #0]
  eui64[4] = 0xfe;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3304      	adds	r3, #4
 8002646:	22fe      	movs	r2, #254	@ 0xfe
 8002648:	701a      	strb	r2, [r3, #0]
  eui64[5] = eui48[3];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1cda      	adds	r2, r3, #3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3305      	adds	r3, #5
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
  eui64[6] = eui48[4];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	1d1a      	adds	r2, r3, #4
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3306      	adds	r3, #6
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
  eui64[7] = eui48[5];
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1d5a      	adds	r2, r3, #5
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	3307      	adds	r3, #7
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <ptpd_clock_init>:

// Initialize the ptp_clock with run time values.
void ptpd_clock_init(PtpClock *ptp_clock)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  RunTimeOpts *rtOpts;

  DBG("PTPD: ptpd_clock_init\n");

  // Point to the runtime options.
  rtOpts = &ptp_clock->rtOpts;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  // Default data set.
  ptp_clock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  // Init clockIdentity with MAC address and 0xFF and 0xFE. see spec 7.5.2.2.2.
  if ((CLOCK_IDENTITY_LENGTH == 8) && (PTP_UUID_LENGTH == 6))
  {
    DBGVV("ptpd_clock_init: eui48_to_eui64\n");
    eui48_to_eui64(ptp_clock->portUuidField, ptp_clock->defaultDS.clockIdentity);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f203 420a 	addw	r2, r3, #1034	@ 0x40a
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3381      	adds	r3, #129	@ 0x81
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7ff ffb8 	bl	8002610 <eui48_to_eui64>
  else
  {
    ERROR("ptpd_clock_init: UUID length is not valid");
  }

  ptp_clock->defaultDS.numberPorts = NUMBER_PORTS;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

  ptp_clock->defaultDS.clockQuality.clockAccuracy = rtOpts->clockQuality.clockAccuracy;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	78da      	ldrb	r2, [r3, #3]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  ptp_clock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	789a      	ldrb	r2, [r3, #2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
  ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

  ptp_clock->defaultDS.priority1 = rtOpts->priority1;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	799a      	ldrb	r2, [r3, #6]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  ptp_clock->defaultDS.priority2 = rtOpts->priority2;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	79da      	ldrb	r2, [r3, #7]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  ptp_clock->defaultDS.domainNumber = rtOpts->domainNumber;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	7a1a      	ldrb	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  ptp_clock->defaultDS.slaveOnly = rtOpts->slaveOnly;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	7a5a      	ldrb	r2, [r3, #9]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

  // Port configuration data set.

  // PortIdentity Init (portNumber = 1 for an ardinary clock spec 7.5.2.3).
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
         ptp_clock->defaultDS.clockIdentity,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3381      	adds	r3, #129	@ 0x81
  memcpy(ptp_clock->portDS.portIdentity.clockIdentity, 
 80026fa:	2208      	movs	r2, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	f020 fb52 	bl	8022da6 <memcpy>
         CLOCK_IDENTITY_LENGTH);
  ptp_clock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  ptp_clock->portDS.peerMeanPathDelay.seconds = ptp_clock->portDS.peerMeanPathDelay.nanoseconds = 0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	651a      	str	r2, [r3, #80]	@ 0x50
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	64da      	str	r2, [r3, #76]	@ 0x4c
  ptp_clock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f993 2000 	ldrsb.w	r2, [r3]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  ptp_clock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  ptp_clock->portDS.logSyncInterval = rtOpts->syncInterval;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  ptp_clock->portDS.delayMechanism = rtOpts->delayMechanism;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
  ptp_clock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  ptp_clock->portDS.versionNumber = VERSION_PTP;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  // Initialize other stuff.
  ptp_clock->foreignMasterDS.count = 0;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  ptp_clock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  ptp_clock->inboundLatency = rtOpts->inboundLatency;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002778:	3220      	adds	r2, #32
 800277a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277e:	e883 0003 	stmia.w	r3, {r0, r1}
  ptp_clock->outboundLatency = rtOpts->outboundLatency;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800278a:	3228      	adds	r2, #40	@ 0x28
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	e883 0003 	stmia.w	r3, {r0, r1}

  ptp_clock->servo.sDelay = rtOpts->servo.sDelay;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a
  ptp_clock->servo.sOffset = rtOpts->servo.sOffset;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8a3 246c 	strh.w	r2, [r3, #1132]	@ 0x46c
  ptp_clock->servo.ai = rtOpts->servo.ai;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8a3 2468 	strh.w	r2, [r3, #1128]	@ 0x468
  ptp_clock->servo.ap = rtOpts->servo.ap;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	@ 0x36
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8a3 2466 	strh.w	r2, [r3, #1126]	@ 0x466
  ptp_clock->servo.noAdjust = rtOpts->servo.noAdjust;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f883 2465 	strb.w	r2, [r3, #1125]	@ 0x465
  ptp_clock->servo.noResetClock = rtOpts->servo.noResetClock;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  ptp_clock->stats = rtOpts->stats;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	7b9a      	ldrb	r2, [r3, #14]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f883 2474 	strb.w	r2, [r3, #1140]	@ 0x474
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ptpd_is_same_port_identity>:

// Compare two port identities.
bool ptpd_is_same_port_identity(const PortIdentity *a, const PortIdentity *b)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  // Compare the clock identities and the port numbers.
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	2208      	movs	r2, #8
 80027fe:	4618      	mov	r0, r3
 8002800:	f020 fa02 	bl	8022c08 <memcmp>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <ptpd_is_same_port_identity+0x30>
                (a->portNumber == b->portNumber));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  return (bool)((memcmp(a->clockIdentity, b->clockIdentity, CLOCK_IDENTITY_LENGTH) == 0) && 
 8002816:	429a      	cmp	r2, r3
 8002818:	d101      	bne.n	800281e <ptpd_is_same_port_identity+0x30>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <ptpd_is_same_port_identity+0x32>
 800281e:	2300      	movs	r3, #0
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ptpd_add_foreign>:

// Add foreign record defined by announce message.
void ptpd_add_foreign(PtpClock *ptp_clock, const MsgHeader *header, const MsgAnnounce *announce)
{
 800282e:	b5b0      	push	{r4, r5, r7, lr}
 8002830:	b088      	sub	sp, #32
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  int i, j;
  bool found = false;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]

  j = ptp_clock->foreignMasterDS.best;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 8002844:	61bb      	str	r3, [r7, #24]

  // Check if Foreign master is already known.
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e056      	b.n	80028fa <ptpd_add_foreign+0xcc>
  {
    if (ptpd_is_same_port_identity(&header->sourcePortIdentity, &ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f103 0018 	add.w	r0, r3, #24
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2158      	movs	r1, #88	@ 0x58
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f7ff ffc3 	bl	80027ee <ptpd_is_same_port_identity>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d037      	beq.n	80028de <ptpd_add_foreign+0xb0>
    {
      // Foreign Master is already in Foreignmaster data set.
      found = true;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
      ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2158      	movs	r1, #88	@ 0x58
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002886:	b292      	uxth	r2, r2
 8002888:	3201      	adds	r2, #1
 800288a:	b292      	uxth	r2, r2
 800288c:	b212      	sxth	r2, r2
 800288e:	815a      	strh	r2, [r3, #10]
      DBGV("PTPD: ptpd_add_foreign: AnnounceMessage incremented\n");
      ptp_clock->foreignMasterDS.records[j].header = *header;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2158      	movs	r1, #88	@ 0x58
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80028a6:	4615      	mov	r5, r2
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028b4:	e884 0003 	stmia.w	r4, {r0, r1}
      ptp_clock->foreignMasterDS.records[j].announce = *announce;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2158      	movs	r1, #88	@ 0x58
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	f103 040c 	add.w	r4, r3, #12
 80028ce:	4615      	mov	r5, r2
 80028d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	6023      	str	r3, [r4, #0]
      break;
 80028dc:	e014      	b.n	8002908 <ptpd_add_foreign+0xda>
    }

    j = (j + 1) % ptp_clock->foreignMasterDS.count;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3301      	adds	r3, #1
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f9b2 20ac 	ldrsh.w	r2, [r2, #172]	@ 0xac
 80028e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80028ec:	fb01 f202 	mul.w	r2, r1, r2
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < ptp_clock->foreignMasterDS.count; i++)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8002900:	461a      	mov	r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4293      	cmp	r3, r2
 8002906:	dba1      	blt.n	800284c <ptpd_add_foreign+0x1e>
  }

  // If not found, we have a new foreign master.
  if (!found)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d070      	beq.n	80029f6 <ptpd_add_foreign+0x1c8>
  {
    if (ptp_clock->foreignMasterDS.count < ptp_clock->foreignMasterDS.capacity)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f9b3 20ac 	ldrsh.w	r2, [r3, #172]	@ 0xac
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8002920:	429a      	cmp	r2, r3
 8002922:	da09      	bge.n	8002938 <ptpd_add_foreign+0x10a>
    {
      ptp_clock->foreignMasterDS.count++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800292a:	b29b      	uxth	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	b21a      	sxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }

    j = ptp_clock->foreignMasterDS.i;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 800293e:	61bb      	str	r3, [r7, #24]

    // Copy new foreign master data set from Announce message.
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2158      	movs	r1, #88	@ 0x58
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	4618      	mov	r0, r3
           header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3318      	adds	r3, #24
    memcpy(ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, 
 8002956:	2208      	movs	r2, #8
 8002958:	4619      	mov	r1, r3
 800295a:	f020 fa24 	bl	8022da6 <memcpy>
    ptp_clock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2158      	movs	r1, #88	@ 0x58
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8002974:	811a      	strh	r2, [r3, #8]
    ptp_clock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2158      	movs	r1, #88	@ 0x58
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	2200      	movs	r2, #0
 8002988:	815a      	strh	r2, [r3, #10]

    // Header and announce field of each foreign master are useful to run Best Master Clock Algorithm.
    ptp_clock->foreignMasterDS.records[j].header = *header;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2158      	movs	r1, #88	@ 0x58
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80029a0:	4615      	mov	r5, r2
 80029a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029ae:	e884 0003 	stmia.w	r4, {r0, r1}
    ptp_clock->foreignMasterDS.records[j].announce = *announce;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2158      	movs	r1, #88	@ 0x58
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	f103 040c 	add.w	r4, r3, #12
 80029c8:	4615      	mov	r5, r2
 80029ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d2:	682b      	ldr	r3, [r5, #0]
 80029d4:	6023      	str	r3, [r4, #0]

    DBGV("PTPD: ptpd_add_foreign: New foreign master added\n");

    ptp_clock->foreignMasterDS.i = (ptp_clock->foreignMasterDS.i + 1) % ptp_clock->foreignMasterDS.capacity;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 80029dc:	3301      	adds	r3, #1
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f9b2 20ae 	ldrsh.w	r2, [r2, #174]	@ 0xae
 80029e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80029e8:	fb01 f202 	mul.w	r2, r1, r2
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  }
}
 80029f6:	bf00      	nop
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bdb0      	pop	{r4, r5, r7, pc}

080029fe <ptpd_m1>:

// Local clock is becoming Master. Table 13 (9.3.5) of the spec.
// When recommended state is Master, copy local data into parent and grandmaster dataset.
void ptpd_m1(PtpClock *ptp_clock)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_m1\n");

  // Current data set update.
  ptp_clock->currentDS.stepsRemoved = 0;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
  ptp_clock->currentDS.offsetFromMaster.seconds = ptp_clock->currentDS.offsetFromMaster.nanoseconds = 0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  ptp_clock->currentDS.meanPathDelay.seconds = ptp_clock->currentDS.meanPathDelay.nanoseconds = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  // Parent data set.
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3381      	adds	r3, #129	@ 0x81
 8002a40:	2208      	movs	r2, #8
 8002a42:	4619      	mov	r1, r3
 8002a44:	f020 f9af 	bl	8022da6 <memcpy>
  ptp_clock->parentDS.parentPortIdentity.portNumber = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  memcpy(ptp_clock->parentDS.grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3381      	adds	r3, #129	@ 0x81
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f020 f9a2 	bl	8022da6 <memcpy>
  ptp_clock->parentDS.grandmasterClockQuality.clockAccuracy = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  ptp_clock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	@ 0x8e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
  ptp_clock->parentDS.grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  ptp_clock->parentDS.grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  // Time properties data set.
  ptp_clock->timePropertiesDS.currentUtcOffset = ptp_clock->rtOpts.currentUtcOffset;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.leap59 = false;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ptp_clock->timePropertiesDS.leap61 = false;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ptp_clock->timePropertiesDS.timeTraceable = DEFAULT_TIME_TRACEABLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ptp_clock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ptp_clock->timePropertiesDS.ptpTimescale = (bool)(DEFAULT_TIMESCALE == PTP_TIMESCALE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ptp_clock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <ptpd_m2>:

// Local clock is becoming Master. Table 13 (9.3.5) of the spec.
void ptpd_m2(PtpClock *ptp_clock)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_m2\n");

  // For now, ptpd_m1 and ptpd_m2 are equivalent.
  ptpd_m1(ptp_clock);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ff83 	bl	80029fe <ptpd_m1>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <ptpd_p1>:

// When recommended state is Passive.
void ptpd_p1(PtpClock *ptp_clock)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  DBGV("PTPD: ptpd_p1\n");
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <ptpd_s1>:

// Local clock is synchronized to Ebest Table 16 (9.3.5) of the spec.
// When recommended state is Slave, copy dataset of master into parent and grandmaster dataset.
void ptpd_s1(PtpClock *ptp_clock, const MsgHeader *header, const MsgAnnounce *announce)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  DBGV("PTPD: ptpd_s1\n");

  // Current DS.
  ptp_clock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94

  if (!ptpd_is_same_port_identity(&ptp_clock->parentDS.parentPortIdentity, &header->sourcePortIdentity))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff fe54 	bl	80027ee <ptpd_is_same_port_identity>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f083 0301 	eor.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <ptpd_s1+0x4e>
  {
      set_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8002b58:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
  }

  // Parent DS.
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity,
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
         header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3318      	adds	r3, #24
  memcpy(ptp_clock->parentDS.parentPortIdentity.clockIdentity,
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f020 f919 	bl	8022da6 <memcpy>
  ptp_clock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f103 0070 	add.w	r0, r3, #112	@ 0x70
         announce->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3315      	adds	r3, #21
  memcpy(ptp_clock->parentDS.grandmasterIdentity,
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f020 f90a 	bl	8022da6 <memcpy>
  ptp_clock->parentDS.grandmasterClockQuality.clockAccuracy = announce->grandmasterClockQuality.clockAccuracy;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7c5a      	ldrb	r2, [r3, #17]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  ptp_clock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7c1a      	ldrb	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  ptp_clock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
  ptp_clock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7b9a      	ldrb	r2, [r3, #14]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  ptp_clock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7d1a      	ldrb	r2, [r3, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  // Time properties DS.
  ptp_clock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
  ptp_clock->timePropertiesDS.currentUtcOffsetValid = get_flag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ptp_clock->timePropertiesDS.leap59 = get_flag(header->flagField[1], FLAG1_LEAP59);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	7a1b      	ldrb	r3, [r3, #8]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ptp_clock->timePropertiesDS.leap61 = get_flag(header->flagField[1], FLAG1_LEAP61);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	7a1b      	ldrb	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ptp_clock->timePropertiesDS.timeTraceable = get_flag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	7a1b      	ldrb	r3, [r3, #8]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ptp_clock->timePropertiesDS.frequencyTraceable = get_flag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	7a1b      	ldrb	r3, [r3, #8]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ptp_clock->timePropertiesDS.ptpTimescale = get_flag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	7a1b      	ldrb	r3, [r3, #8]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ptp_clock->timePropertiesDS.timeSource = announce->timeSource;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <ptpd_copy_d0>:
    return A_better_then_B;                                             \
  }                                                                     \

// Copy local data set into header and announce message. 9.3.4 table 12.
static void ptpd_copy_d0(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptp_clock)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  announce->grandmasterPriority1 = ptp_clock->defaultDS.priority1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	739a      	strb	r2, [r3, #14]
  memcpy(announce->grandmasterIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f103 0015 	add.w	r0, r3, #21
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3381      	adds	r3, #129	@ 0x81
 8002c96:	2208      	movs	r2, #8
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f020 f884 	bl	8022da6 <memcpy>
  announce->grandmasterClockQuality.clockClass = ptp_clock->defaultDS.clockQuality.clockClass;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	741a      	strb	r2, [r3, #16]
  announce->grandmasterClockQuality.clockAccuracy = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	745a      	strb	r2, [r3, #17]
  announce->grandmasterClockQuality.offsetScaledLogVariance = ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	@ 0x8e
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	825a      	strh	r2, [r3, #18]
  announce->grandmasterPriority2 = ptp_clock->defaultDS.priority2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	751a      	strb	r2, [r3, #20]
  announce->stepsRemoved = 0;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	83da      	strh	r2, [r3, #30]
  memcpy(header->sourcePortIdentity.clockIdentity, ptp_clock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f103 0018 	add.w	r0, r3, #24
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3381      	adds	r3, #129	@ 0x81
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f020 f864 	bl	8022da6 <memcpy>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <ptpd_data_set_comparison>:

// Data set comparison bewteen two foreign masters (9.3.4 fig 27). Return similar to memcmp().
static int8_t ptpd_data_set_comparison(MsgHeader *header_a, MsgAnnounce *announce_a,
                                       MsgHeader *header_b, MsgAnnounce *announce_b,
                                       PtpClock *ptp_clock)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  int grandmaster_identity_comp;
  short comp = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	82fb      	strh	r3, [r7, #22]

  DBGV("PTPD: ptpd_data_set_comparison\n");

  // GM identity of A == GM identity of B 
  grandmaster_identity_comp = memcmp(announce_a->grandmasterIdentity, announce_b->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f103 0015 	add.w	r0, r3, #21
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	3315      	adds	r3, #21
 8002d02:	2208      	movs	r2, #8
 8002d04:	4619      	mov	r1, r3
 8002d06:	f01f ff7f 	bl	8022c08 <memcmp>
 8002d0a:	6138      	str	r0, [r7, #16]

  // Algoritgm part 1 - Figure 27.
  if (grandmaster_identity_comp != 0)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <ptpd_data_set_comparison+0xf4>
  {
    COMPARE_AB_RETURN_BETTER(grandmasterPriority1, "grandmaster.Priority1");
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	7b9a      	ldrb	r2, [r3, #14]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	7b9b      	ldrb	r3, [r3, #14]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d902      	bls.n	8002d24 <ptpd_data_set_comparison+0x3e>
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e0d0      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7b9a      	ldrb	r2, [r3, #14]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	7b9b      	ldrb	r3, [r3, #14]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d901      	bls.n	8002d34 <ptpd_data_set_comparison+0x4e>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0c8      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass, "grandmaster.clockClass");
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	7c1a      	ldrb	r2, [r3, #16]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	7c1b      	ldrb	r3, [r3, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d902      	bls.n	8002d46 <ptpd_data_set_comparison+0x60>
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	e0bf      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7c1a      	ldrb	r2, [r3, #16]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	7c1b      	ldrb	r3, [r3, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d901      	bls.n	8002d56 <ptpd_data_set_comparison+0x70>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0b7      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy, "grandmaster.clockAccuracy");
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	7c5a      	ldrb	r2, [r3, #17]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	7c5b      	ldrb	r3, [r3, #17]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d902      	bls.n	8002d68 <ptpd_data_set_comparison+0x82>
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	e0ae      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7c5a      	ldrb	r2, [r3, #17]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	7c5b      	ldrb	r3, [r3, #17]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d901      	bls.n	8002d78 <ptpd_data_set_comparison+0x92>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0a6      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance, "grandmaster.Variance");
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dd02      	ble.n	8002d8e <ptpd_data_set_comparison+0xa8>
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	e09b      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dd01      	ble.n	8002da2 <ptpd_data_set_comparison+0xbc>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e091      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    COMPARE_AB_RETURN_BETTER(grandmasterPriority2, "grandmaster.Priority2");
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	7d1a      	ldrb	r2, [r3, #20]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	7d1b      	ldrb	r3, [r3, #20]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d902      	bls.n	8002db4 <ptpd_data_set_comparison+0xce>
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e088      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7d1a      	ldrb	r2, [r3, #20]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	7d1b      	ldrb	r3, [r3, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d901      	bls.n	8002dc4 <ptpd_data_set_comparison+0xde>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e080      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>

    if (grandmaster_identity_comp > 0)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	dd02      	ble.n	8002dd0 <ptpd_data_set_comparison+0xea>
    {
      DBGVV("PTPD: ptpd_data_set_comparison: grandmaster.Identity: B better then A\n");
      return B_better_then_A;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e07a      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (grandmaster_identity_comp < 0)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da01      	bge.n	8002dda <ptpd_data_set_comparison+0xf4>
    {
      DBGVV("PTPD: ptpd_data_set_comparison: grandmaster.Identity: A better then B\n");
      return A_better_then_B;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e075      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }
  }

  // Algoritgm part 2 - Figure 28.
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved + 1))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002de0:	461a      	mov	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002de8:	3301      	adds	r3, #1
 8002dea:	429a      	cmp	r2, r3
 8002dec:	dd02      	ble.n	8002df4 <ptpd_data_set_comparison+0x10e>
  {
    DBGVV("PTPD: ptpd_data_set_comparison: stepsRemoved: B better then A\n");
    return B_better_then_A;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e068      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_b->stepsRemoved) > (announce_a->stepsRemoved + 1))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e02:	3301      	adds	r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dd01      	ble.n	8002e0c <ptpd_data_set_comparison+0x126>
  {
    DBGVV("PTPD: ptpd_data_set_comparison: stepsRemoved: A better then B\n");
    return A_better_then_B;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e05c      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_a->stepsRemoved) > (announce_b->stepsRemoved))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dd1a      	ble.n	8002e52 <ptpd_data_set_comparison+0x16c>
  {
    comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f103 0018 	add.w	r0, r3, #24
                  ptp_clock->portDS.portIdentity.clockIdentity,
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	3340      	adds	r3, #64	@ 0x40
    comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e26:	2208      	movs	r2, #8
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f01f feed 	bl	8022c08 <memcmp>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	82fb      	strh	r3, [r7, #22]
                  CLOCK_IDENTITY_LENGTH);

    if (comp > 0)
 8002e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	dd02      	ble.n	8002e40 <ptpd_data_set_comparison+0x15a>
    {
      // Reciever less than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: B better then A\n");
      return B_better_then_A;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e042      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (comp < 0)
 8002e40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da02      	bge.n	8002e4e <ptpd_data_set_comparison+0x168>
    {
      // Receiver greater than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: B better by topology then A\n");
      return B_better_by_topology_then_A;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4c:	e03b      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }

    DBGVV("PTPD: ptpd_data_set_comparison: ERROR 1\n");
    return ERROR_1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e039      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }
  if ((announce_a->stepsRemoved) < (announce_b->stepsRemoved))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	da18      	bge.n	8002e94 <ptpd_data_set_comparison+0x1ae>
  {
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f103 0018 	add.w	r0, r3, #24
                  ptp_clock->portDS.portIdentity.clockIdentity,
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	3340      	adds	r3, #64	@ 0x40
    comp = memcmp(header_b->sourcePortIdentity.clockIdentity,
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f01f feca 	bl	8022c08 <memcmp>
 8002e74:	4603      	mov	r3, r0
 8002e76:	82fb      	strh	r3, [r7, #22]
                  CLOCK_IDENTITY_LENGTH);

    if (comp > 0)
 8002e78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd01      	ble.n	8002e84 <ptpd_data_set_comparison+0x19e>
    {
      // Reciever less than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: A better then B\n");
      return A_better_then_B;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e020      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }
    else if (comp < 0)
 8002e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	da01      	bge.n	8002e90 <ptpd_data_set_comparison+0x1aa>
    {
      // Receiver greater than sender.
      DBGVV("PTPD: ptpd_data_set_comparison: PortIdentity: A better by topology then B\n");
      return A_better_by_topology_then_B;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e01a      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
    }

    DBGV("PTPD: ptpd_data_set_comparison: ERROR 1\n");
    return ERROR_1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e018      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }

  comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f103 0018 	add.w	r0, r3, #24
                header_b->sourcePortIdentity.clockIdentity,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3318      	adds	r3, #24
  comp = memcmp(header_a->sourcePortIdentity.clockIdentity,
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f01f feb1 	bl	8022c08 <memcmp>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	82fb      	strh	r3, [r7, #22]
                CLOCK_IDENTITY_LENGTH);
  if (comp > 0)
 8002eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dd02      	ble.n	8002eb8 <ptpd_data_set_comparison+0x1d2>
  {
    // A > B
    DBGVV("PTPD: ptpd_data_set_comparison: sourcePortIdentity: B better by topology then A\n");
    return B_better_by_topology_then_A;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e006      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }
  else if (comp < 0)
 8002eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da01      	bge.n	8002ec4 <ptpd_data_set_comparison+0x1de>
  {
    // B > A
    DBGVV("PTPD: ptpd_data_set_comparison: sourcePortIdentity: A better by topology then B\n");
    return A_better_by_topology_then_B;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <ptpd_data_set_comparison+0x1e0>
  }

  // Compare port numbers of recievers of A and B - same as we have only one port.
  DBGV("PTPD: ptpd_data_set_comparison: ERROR 2\n");
  return ERROR_2;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ptpd_state_decision>:

// State decision algorithm 9.3.3 Fig 26.
static uint8_t ptpd_state_decision(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptp_clock)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af02      	add	r7, sp, #8
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  int comp;

  if ((!ptp_clock->foreignMasterDS.count) && (ptp_clock->portDS.portState == PTP_LISTENING))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <ptpd_state_decision+0x24>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d101      	bne.n	8002ef2 <ptpd_state_decision+0x24>
  {
    return PTP_LISTENING;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e037      	b.n	8002f62 <ptpd_state_decision+0x94>
  }

  ptpd_copy_d0(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, ptp_clock);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	33e8      	adds	r3, #232	@ 0xe8
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7ff feb9 	bl	8002c76 <ptpd_copy_d0>

  comp = ptpd_data_set_comparison(&ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce, header, announce, ptp_clock);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 01e8 	add.w	r1, r3, #232	@ 0xe8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f7ff fee5 	bl	8002ce6 <ptpd_data_set_comparison>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	617b      	str	r3, [r7, #20]

  DBGV("PTPD: ptpd_state_decision: %li\n", comp);

  if (ptp_clock->defaultDS.clockQuality.clockClass < 128)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0c      	blt.n	8002f46 <ptpd_state_decision+0x78>
  {
    if (A_better_then_B == comp)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d104      	bne.n	8002f3c <ptpd_state_decision+0x6e>
    {
      // M1.
      ptpd_m1(ptp_clock);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fd63 	bl	80029fe <ptpd_m1>
      return PTP_MASTER;
 8002f38:	2305      	movs	r3, #5
 8002f3a:	e012      	b.n	8002f62 <ptpd_state_decision+0x94>
    }
    else
    {
      ptpd_p1(ptp_clock);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fddf 	bl	8002b00 <ptpd_p1>
      return PTP_PASSIVE;
 8002f42:	2306      	movs	r3, #6
 8002f44:	e00d      	b.n	8002f62 <ptpd_state_decision+0x94>
    }
  }
  else
  {
    if (A_better_then_B == comp)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d104      	bne.n	8002f56 <ptpd_state_decision+0x88>
    {
      // M2.
      ptpd_m2(ptp_clock);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fdcc 	bl	8002aea <ptpd_m2>
      return PTP_MASTER;
 8002f52:	2305      	movs	r3, #5
 8002f54:	e005      	b.n	8002f62 <ptpd_state_decision+0x94>
    }
    else
    {
      ptpd_s1(ptp_clock, header, announce);
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fdda 	bl	8002b14 <ptpd_s1>
      return PTP_SLAVE;
 8002f60:	2308      	movs	r3, #8
    }
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <ptpd_bmc>:
//

// Compare data set of foreign masters and local data set to return the recommended
// state for the port.
uint8_t ptpd_bmc(PtpClock *ptp_clock)
{
 8002f6a:	b5b0      	push	{r4, r5, r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	6078      	str	r0, [r7, #4]
  int16_t i;
  int16_t best;

  // Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same.
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002f72:	2301      	movs	r3, #1
 8002f74:	81fb      	strh	r3, [r7, #14]
 8002f76:	2300      	movs	r3, #0
 8002f78:	81bb      	strh	r3, [r7, #12]
 8002f7a:	e03c      	b.n	8002ff6 <ptpd_bmc+0x8c>
  {
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f86:	2158      	movs	r1, #88	@ 0x58
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
                                  &ptp_clock->foreignMasterDS.records[i].announce,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f9c:	2158      	movs	r1, #88	@ 0x58
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002fa4:	f103 010c 	add.w	r1, r3, #12
                                  &ptp_clock->foreignMasterDS.records[best].header,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002fae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fb2:	2458      	movs	r4, #88	@ 0x58
 8002fb4:	fb04 f303 	mul.w	r3, r4, r3
 8002fb8:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002fba:	f103 0430 	add.w	r4, r3, #48	@ 0x30
                                  &ptp_clock->foreignMasterDS.records[best].announce, ptp_clock)) < 0)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002fc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fc8:	2558      	movs	r5, #88	@ 0x58
 8002fca:	fb05 f303 	mul.w	r3, r5, r3
 8002fce:	4413      	add	r3, r2
    if ((ptpd_data_set_comparison(&ptp_clock->foreignMasterDS.records[i].header,
 8002fd0:	f103 020c 	add.w	r2, r3, #12
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	4622      	mov	r2, r4
 8002fdc:	f7ff fe83 	bl	8002ce6 <ptpd_data_set_comparison>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da01      	bge.n	8002fea <ptpd_bmc+0x80>
    {
      best = i;
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	81bb      	strh	r3, [r7, #12]
  for (i = 1, best = 0; i < ptp_clock->foreignMasterDS.count; i++)
 8002fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	81fb      	strh	r3, [r7, #14]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8002ffc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003000:	429a      	cmp	r2, r3
 8003002:	dbbb      	blt.n	8002f7c <ptpd_bmc+0x12>
    }
  }

  DBGV("PTPD: ptpd_bmc: best record %li\n", best);
  ptp_clock->foreignMasterDS.best = best;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	89ba      	ldrh	r2, [r7, #12]
 8003008:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2

  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003012:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003016:	2158      	movs	r1, #88	@ 0x58
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
                             &ptp_clock->foreignMasterDS.records[best].announce,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800302c:	2158      	movs	r1, #88	@ 0x58
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
  return ptpd_state_decision(&ptp_clock->foreignMasterDS.records[best].header,
 8003034:	330c      	adds	r3, #12
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	f7ff ff48 	bl	8002ece <ptpd_state_decision>
 800303e:	4603      	mov	r3, r0
                             ptp_clock);
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}

08003048 <ptpd_init>:

static void ptpd_thread(void *arg);

// PTPD initialization.
void ptpd_init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af02      	add	r7, sp, #8
  ptp_alert_event_bits = xEventGroupCreate();
 800304e:	f008 fd4b 	bl	800bae8 <xEventGroupCreate>
 8003052:	4603      	mov	r3, r0
 8003054:	4a07      	ldr	r2, [pc, #28]	@ (8003074 <ptpd_init+0x2c>)
 8003056:	6013      	str	r3, [r2, #0]

  xTaskCreate(ptpd_thread, "ptpd", 500, NULL, 0, NULL);
 8003058:	2300      	movs	r3, #0
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003066:	4904      	ldr	r1, [pc, #16]	@ (8003078 <ptpd_init+0x30>)
 8003068:	4804      	ldr	r0, [pc, #16]	@ (800307c <ptpd_init+0x34>)
 800306a:	f00a f90d 	bl	800d288 <xTaskCreate>
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000980 	.word	0x20000980
 8003078:	08023ecc 	.word	0x08023ecc
 800307c:	08003081 	.word	0x08003081

08003080 <ptpd_thread>:

static void ptpd_thread(void *arg)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  // Initialize the main PTP datastructure.
  memset(&ptp_clock, 0, sizeof(ptp_clock));
 8003088:	f44f 628f 	mov.w	r2, #1144	@ 0x478
 800308c:	2100      	movs	r1, #0
 800308e:	483c      	ldr	r0, [pc, #240]	@ (8003180 <ptpd_thread+0x100>)
 8003090:	f01f fde4 	bl	8022c5c <memset>

  // Run the clock in slave only?
  ptp_clock.rtOpts.slaveOnly = true;
 8003094:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <ptpd_thread+0x100>)
 8003096:	2201      	movs	r2, #1
 8003098:	725a      	strb	r2, [r3, #9]

  // Initialize run-time options to default values.
  ptp_clock.rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 800309a:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <ptpd_thread+0x100>)
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
  ptp_clock.rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
 80030a0:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <ptpd_thread+0x100>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	705a      	strb	r2, [r3, #1]
  ptp_clock.rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
 80030a6:	4b36      	ldr	r3, [pc, #216]	@ (8003180 <ptpd_thread+0x100>)
 80030a8:	22fe      	movs	r2, #254	@ 0xfe
 80030aa:	70da      	strb	r2, [r3, #3]
  ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <ptpd_thread+0x100>)
 80030ae:	22f8      	movs	r2, #248	@ 0xf8
 80030b0:	709a      	strb	r2, [r3, #2]
  ptp_clock.rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; // 7.6.3.3
 80030b2:	4b33      	ldr	r3, [pc, #204]	@ (8003180 <ptpd_thread+0x100>)
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	809a      	strh	r2, [r3, #4]
  ptp_clock.rtOpts.priority1 = DEFAULT_PRIORITY1;
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <ptpd_thread+0x100>)
 80030bc:	22f8      	movs	r2, #248	@ 0xf8
 80030be:	719a      	strb	r2, [r3, #6]
  ptp_clock.rtOpts.priority2 = DEFAULT_PRIORITY2;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003180 <ptpd_thread+0x100>)
 80030c2:	22f8      	movs	r2, #248	@ 0xf8
 80030c4:	71da      	strb	r2, [r3, #7]
  ptp_clock.rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
 80030c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003180 <ptpd_thread+0x100>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	721a      	strb	r2, [r3, #8]
  ptp_clock.rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 80030cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <ptpd_thread+0x100>)
 80030ce:	2222      	movs	r2, #34	@ 0x22
 80030d0:	815a      	strh	r2, [r3, #10]
  ptp_clock.rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <ptpd_thread+0x100>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  ptp_clock.rtOpts.servo.noAdjust = NO_ADJUST;
 80030da:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <ptpd_thread+0x100>)
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  ptp_clock.rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
 80030e2:	4b27      	ldr	r3, [pc, #156]	@ (8003180 <ptpd_thread+0x100>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24
  ptp_clock.rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <ptpd_thread+0x100>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  ptp_clock.rtOpts.servo.sDelay = DEFAULT_DELAY_S;
 80030ee:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <ptpd_thread+0x100>)
 80030f0:	2206      	movs	r2, #6
 80030f2:	875a      	strh	r2, [r3, #58]	@ 0x3a
  ptp_clock.rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
 80030f4:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <ptpd_thread+0x100>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  ptp_clock.rtOpts.servo.ap = DEFAULT_AP;
 80030fa:	4b21      	ldr	r3, [pc, #132]	@ (8003180 <ptpd_thread+0x100>)
 80030fc:	2202      	movs	r2, #2
 80030fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  ptp_clock.rtOpts.servo.ai = DEFAULT_AI;
 8003100:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <ptpd_thread+0x100>)
 8003102:	2210      	movs	r2, #16
 8003104:	871a      	strh	r2, [r3, #56]	@ 0x38
  ptp_clock.rtOpts.maxForeignRecords = sizeof(ptp_foreign_records) / sizeof(ptp_foreign_records[0]);
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <ptpd_thread+0x100>)
 8003108:	2205      	movs	r2, #5
 800310a:	861a      	strh	r2, [r3, #48]	@ 0x30
  ptp_clock.rtOpts.stats = PTP_TEXT_STATS;
 800310c:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <ptpd_thread+0x100>)
 800310e:	2201      	movs	r2, #1
 8003110:	739a      	strb	r2, [r3, #14]
  ptp_clock.rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <ptpd_thread+0x100>)
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  // Initialize the foriegn records buffers.
  ptp_clock.foreignMasterDS.records = ptp_foreign_records;
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <ptpd_thread+0x100>)
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <ptpd_thread+0x104>)
 800311e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

  // See: 9.2.2
  if (ptp_clock.rtOpts.slaveOnly) ptp_clock.rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <ptpd_thread+0x100>)
 8003124:	7a5b      	ldrb	r3, [r3, #9]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <ptpd_thread+0xb0>
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <ptpd_thread+0x100>)
 800312c:	22ff      	movs	r2, #255	@ 0xff
 800312e:	709a      	strb	r2, [r3, #2]

  // No negative or zero attenuation.
  if (ptp_clock.rtOpts.servo.ap < 1) ptp_clock.rtOpts.servo.ap = 1;
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <ptpd_thread+0x100>)
 8003132:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8003136:	2b00      	cmp	r3, #0
 8003138:	dc02      	bgt.n	8003140 <ptpd_thread+0xc0>
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <ptpd_thread+0x100>)
 800313c:	2201      	movs	r2, #1
 800313e:	86da      	strh	r2, [r3, #54]	@ 0x36
  if (ptp_clock.rtOpts.servo.ai < 1) ptp_clock.rtOpts.servo.ai = 1;
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <ptpd_thread+0x100>)
 8003142:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8003146:	2b00      	cmp	r3, #0
 8003148:	dc02      	bgt.n	8003150 <ptpd_thread+0xd0>
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <ptpd_thread+0x100>)
 800314c:	2201      	movs	r2, #1
 800314e:	871a      	strh	r2, [r3, #56]	@ 0x38

  // Wait until the network interface is up.

  // Enter state PTP_INITIALIZING.
  ptpd_protocol_to_state(&ptp_clock, PTP_INITIALIZING);
 8003150:	2100      	movs	r1, #0
 8003152:	480b      	ldr	r0, [pc, #44]	@ (8003180 <ptpd_thread+0x100>)
 8003154:	f001 f980 	bl	8004458 <ptpd_protocol_to_state>
    {
      // ptpd_protocol_do_state() has a switch for the actions and events to be
      // checked for 'port_state'. The actions and events may or may not change
      // 'port_state' by calling ptpd_protocol_to_state(), but once they are done we loop around
      // again and perform the actions required for the new 'port_state'.
      ptpd_protocol_do_state(&ptp_clock);
 8003158:	4809      	ldr	r0, [pc, #36]	@ (8003180 <ptpd_thread+0x100>)
 800315a:	f001 fb85 	bl	8004868 <ptpd_protocol_do_state>
    }
    while (ptpd_net_select(&ptp_clock.netPath, 0) > 0);
 800315e:	2100      	movs	r1, #0
 8003160:	4809      	ldr	r0, [pc, #36]	@ (8003188 <ptpd_thread+0x108>)
 8003162:	f001 f80f 	bl	8004184 <ptpd_net_select>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	dcf5      	bgt.n	8003158 <ptpd_thread+0xd8>

    xEventGroupWaitBits(ptp_alert_event_bits, ALERT_EVENT_BIT, true, true, 100);
 800316c:	4b07      	ldr	r3, [pc, #28]	@ (800318c <ptpd_thread+0x10c>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	2364      	movs	r3, #100	@ 0x64
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2301      	movs	r3, #1
 8003176:	2201      	movs	r2, #1
 8003178:	2101      	movs	r1, #1
 800317a:	f008 fccf 	bl	800bb1c <xEventGroupWaitBits>
  while (true)
 800317e:	e7eb      	b.n	8003158 <ptpd_thread+0xd8>
 8003180:	20000350 	.word	0x20000350
 8003184:	200007c8 	.word	0x200007c8
 8003188:	20000770 	.word	0x20000770
 800318c:	20000980 	.word	0x20000980

08003190 <ptpd_alert>:
  }
}

// Notify the PTPD thread of a pending operation.
void ptpd_alert(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  xEventGroupSetBits(ptp_alert_event_bits, ALERT_EVENT_BIT);
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <ptpd_alert+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f008 fd90 	bl	800bcc0 <xEventGroupSetBits>
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000980 	.word	0x20000980

080031a8 <ptpd_msg_unpack_header>:
#include <string.h>
#include "ptpd.h"

// Unpack header message.
void ptpd_msg_unpack_header(const octet_t *buf, MsgHeader *header)
{
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  int32_t msb;
  uint32_t lsb;

  header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	701a      	strb	r2, [r3, #0]
  header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	705a      	strb	r2, [r3, #1]
  header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; // Force reserved bit to zero if not.
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3301      	adds	r3, #1
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	709a      	strb	r2, [r3, #2]
  header->messageLength = flip16(*(int16_t*)(buf  + 2));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3302      	adds	r3, #2
 80031e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	f016 f819 	bl	8019220 <lwip_htons>
 80031ee:	4603      	mov	r3, r0
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	809a      	strh	r2, [r3, #4]
  header->domainNumber = (*(uint8_t*)(buf + 4));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791a      	ldrb	r2, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	719a      	strb	r2, [r3, #6]
  memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3307      	adds	r3, #7
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	3206      	adds	r2, #6
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	b292      	uxth	r2, r2
 800320a:	801a      	strh	r2, [r3, #0]
  memcpy(&msb, (buf + 8), 4);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3308      	adds	r3, #8
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
  memcpy(&lsb, (buf + 12), 4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	330c      	adds	r3, #12
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]
  header->correctionfield = flip32(msb);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f016 f813 	bl	801924a <lwip_htonl>
 8003224:	4603      	mov	r3, r0
 8003226:	2200      	movs	r2, #0
 8003228:	469a      	mov	sl, r3
 800322a:	4693      	mov	fp, r2
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	e9c3 ab04 	strd	sl, fp, [r3, #16]
  header->correctionfield <<= 32;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	0003      	movs	r3, r0
 8003242:	2200      	movs	r2, #0
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	e9c1 2304 	strd	r2, r3, [r1, #16]
  header->correctionfield += flip32(lsb);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f015 fffc 	bl	801924a <lwip_htonl>
 8003252:	4601      	mov	r1, r0
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800325a:	2000      	movs	r0, #0
 800325c:	460c      	mov	r4, r1
 800325e:	4605      	mov	r5, r0
 8003260:	eb12 0804 	adds.w	r8, r2, r4
 8003264:	eb43 0905 	adc.w	r9, r3, r5
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	e9c3 8904 	strd	r8, r9, [r3, #16]
  memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f103 0018 	add.w	r0, r3, #24
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3314      	adds	r3, #20
 8003278:	2208      	movs	r2, #8
 800327a:	4619      	mov	r1, r3
 800327c:	f01f fd93 	bl	8022da6 <memcpy>
  header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	331c      	adds	r3, #28
 8003284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f015 ffc8 	bl	8019220 <lwip_htons>
 8003290:	4603      	mov	r3, r0
 8003292:	b21a      	sxth	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	841a      	strh	r2, [r3, #32]
  header->sequenceId = flip16(*(int16_t*)(buf + 30));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	331e      	adds	r3, #30
 800329c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f015 ffbc 	bl	8019220 <lwip_htons>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	845a      	strh	r2, [r3, #34]	@ 0x22
  header->controlField = (*(uint8_t*)(buf + 32));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  header->logMessageInterval = (*(int8_t*)(buf + 33));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f993 2021 	ldrsb.w	r2, [r3, #33]	@ 0x21
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032d2 <ptpd_msg_pack_header>:

// Pack header message.
void ptpd_msg_pack_header(const PtpClock *ptp_clock, octet_t *buf)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  nibble_t transport = 0x80; // (spec annex D)
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	73fb      	strb	r3, [r7, #15]
  *(uint8_t*)(buf + 0) = transport;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	701a      	strb	r2, [r3, #0]
  *(uint4bit_t*)(buf  + 1) = ptp_clock->portDS.versionNumber;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80032f0:	701a      	strb	r2, [r3, #0]
  *(uint8_t*)(buf + 4) = ptp_clock->defaultDS.domainNumber;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	f892 2092 	ldrb.w	r2, [r2, #146]	@ 0x92
 80032fc:	701a      	strb	r2, [r3, #0]
  if (ptp_clock->defaultDS.twoStepFlag)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <ptpd_msg_pack_header+0x3e>
  {
      *(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3306      	adds	r3, #6
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
  }
  memset((buf + 8), 0, 8);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	3308      	adds	r3, #8
 8003314:	2208      	movs	r2, #8
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f01f fc9f 	bl	8022c5c <memset>
  memcpy((buf + 20), ptp_clock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f103 0014 	add.w	r0, r3, #20
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3340      	adds	r3, #64	@ 0x40
 8003328:	2208      	movs	r2, #8
 800332a:	4619      	mov	r1, r3
 800332c:	f01f fd3b 	bl	8022da6 <memcpy>
  *(int16_t*)(buf + 28) = flip16(ptp_clock->portDS.portIdentity.portNumber);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8003336:	b29b      	uxth	r3, r3
 8003338:	4618      	mov	r0, r3
 800333a:	f015 ff71 	bl	8019220 <lwip_htons>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	331c      	adds	r3, #28
 8003346:	b212      	sxth	r2, r2
 8003348:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3321      	adds	r3, #33	@ 0x21
 800334e:	227f      	movs	r2, #127	@ 0x7f
 8003350:	701a      	strb	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <ptpd_msg_pack_announce>:

// Pack Announce message.
void ptpd_msg_pack_announce(const PtpClock *ptp_clock, octet_t *buf)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f023 030f 	bic.w	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f043 030b 	orr.w	r3, r3, #11
 800337a:	b2da      	uxtb	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 8003380:	2040      	movs	r0, #64	@ 0x40
 8003382:	f015 ff4d 	bl	8019220 <lwip_htons>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3302      	adds	r3, #2
 800338e:	b212      	sxth	r2, r2
 8003390:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentAnnounceSequenceId);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 33c6 	ldrsh.w	r3, [r3, #966]	@ 0x3c6
 8003398:	b29b      	uxth	r3, r3
 800339a:	4618      	mov	r0, r3
 800339c:	f015 ff40 	bl	8019220 <lwip_htons>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	331e      	adds	r3, #30
 80033a8:	b212      	sxth	r2, r2
 80033aa:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23 - controlField
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	3320      	adds	r3, #32
 80033b0:	2205      	movs	r2, #5
 80033b2:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logAnnounceInterval;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	3321      	adds	r3, #33	@ 0x21
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	f992 2054 	ldrsb.w	r2, [r2, #84]	@ 0x54
 80033be:	701a      	strb	r2, [r3, #0]

  // Announce message
  memset((buf + 34), 0, 10); // origin_timestamp
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	3322      	adds	r3, #34	@ 0x22
 80033c4:	220a      	movs	r2, #10
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f01f fc47 	bl	8022c5c <memset>
  *(int16_t*)(buf + 44) = flip16(ptp_clock->timePropertiesDS.currentUtcOffset);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f015 ff22 	bl	8019220 <lwip_htons>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	332c      	adds	r3, #44	@ 0x2c
 80033e4:	b212      	sxth	r2, r2
 80033e6:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 47) = ptp_clock->parentDS.grandmasterPriority1;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	332f      	adds	r3, #47	@ 0x2f
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 80033f2:	701a      	strb	r2, [r3, #0]
  *(uint8_t*)(buf + 48) = ptp_clock->defaultDS.clockQuality.clockClass;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	3330      	adds	r3, #48	@ 0x30
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 80033fe:	701a      	strb	r2, [r3, #0]
  *(enum8bit_t*)(buf + 49) = ptp_clock->defaultDS.clockQuality.clockAccuracy;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3331      	adds	r3, #49	@ 0x31
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	f892 208d 	ldrb.w	r2, [r2, #141]	@ 0x8d
 800340a:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 50) = flip16(ptp_clock->defaultDS.clockQuality.offsetScaledLogVariance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8003412:	b29b      	uxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f015 ff03 	bl	8019220 <lwip_htons>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3332      	adds	r3, #50	@ 0x32
 8003422:	b212      	sxth	r2, r2
 8003424:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 52) = ptp_clock->parentDS.grandmasterPriority2;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	3334      	adds	r3, #52	@ 0x34
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8003430:	701a      	strb	r2, [r3, #0]
  memcpy((buf + 53), ptp_clock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3370      	adds	r3, #112	@ 0x70
 800343c:	2208      	movs	r2, #8
 800343e:	4619      	mov	r1, r3
 8003440:	f01f fcb1 	bl	8022da6 <memcpy>
  *(int16_t*)(buf + 61) = flip16(ptp_clock->currentDS.stepsRemoved);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	f015 fee7 	bl	8019220 <lwip_htons>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	333d      	adds	r3, #61	@ 0x3d
 800345a:	b212      	sxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
  *(enum8bit_t*)(buf + 63) = ptp_clock->timePropertiesDS.timeSource;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	333f      	adds	r3, #63	@ 0x3f
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8003468:	701a      	strb	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <ptpd_msg_unpack_announce>:

// Unpack Announce message.
void ptpd_msg_unpack_announce(const octet_t *buf, MsgAnnounce *announce)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3322      	adds	r3, #34	@ 0x22
 8003480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003484:	b29b      	uxth	r3, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f015 feca 	bl	8019220 <lwip_htons>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	809a      	strh	r2, [r3, #4]
  announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3324      	adds	r3, #36	@ 0x24
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f015 fed5 	bl	801924a <lwip_htonl>
 80034a0:	4602      	mov	r2, r0
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	601a      	str	r2, [r3, #0]
  announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f015 fecc 	bl	801924a <lwip_htonl>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]
  announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	332c      	adds	r3, #44	@ 0x2c
 80034bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	f015 feac 	bl	8019220 <lwip_htons>
 80034c8:	4603      	mov	r3, r0
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	819a      	strh	r2, [r3, #12]
  announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	739a      	strb	r2, [r3, #14]
  announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	741a      	strb	r2, [r3, #16]
  announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	745a      	strb	r2, [r3, #17]
  announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3332      	adds	r3, #50	@ 0x32
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f015 fe91 	bl	8019220 <lwip_htons>
 80034fe:	4603      	mov	r3, r0
 8003500:	b21a      	sxth	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	825a      	strh	r2, [r3, #18]
  announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	751a      	strb	r2, [r3, #20]
  memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f103 0015 	add.w	r0, r3, #21
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3335      	adds	r3, #53	@ 0x35
 800351a:	2208      	movs	r2, #8
 800351c:	4619      	mov	r1, r3
 800351e:	f01f fc42 	bl	8022da6 <memcpy>
  announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	333d      	adds	r3, #61	@ 0x3d
 8003526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352a:	b29b      	uxth	r3, r3
 800352c:	4618      	mov	r0, r3
 800352e:	f015 fe77 	bl	8019220 <lwip_htons>
 8003532:	4603      	mov	r3, r0
 8003534:	b21a      	sxth	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	83da      	strh	r2, [r3, #30]
  announce->timeSource = *(enum8bit_t*)(buf + 63);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ptpd_msg_pack_sync>:

// Pack Sync message.
void ptpd_msg_pack_sync(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 800354e:	b590      	push	{r4, r7, lr}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  // Changes in header
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	f023 030f 	bic.w	r3, r3, #15
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; // Table 19
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 8003570:	202c      	movs	r0, #44	@ 0x2c
 8003572:	f015 fe55 	bl	8019220 <lwip_htons>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3302      	adds	r3, #2
 800357e:	b212      	sxth	r2, r2
 8003580:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 8003588:	b29b      	uxth	r3, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f015 fe48 	bl	8019220 <lwip_htons>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	331e      	adds	r3, #30
 8003598:	b212      	sxth	r2, r2
 800359a:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_SYNC; // Table 23
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3320      	adds	r3, #32
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3321      	adds	r3, #33	@ 0x21
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	f992 2056 	ldrsb.w	r2, [r2, #86]	@ 0x56
 80035ae:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8); // Correction field
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3308      	adds	r3, #8
 80035b4:	2208      	movs	r2, #8
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f01f fb4f 	bl	8022c5c <memset>

  // Sync message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	889b      	ldrh	r3, [r3, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f015 fe2c 	bl	8019220 <lwip_htons>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3322      	adds	r3, #34	@ 0x22
 80035d0:	b212      	sxth	r2, r2
 80035d2:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80035de:	4610      	mov	r0, r2
 80035e0:	f015 fe33 	bl	801924a <lwip_htonl>
 80035e4:	4603      	mov	r3, r0
 80035e6:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80035f2:	4610      	mov	r0, r2
 80035f4:	f015 fe29 	bl	801924a <lwip_htonl>
 80035f8:	4603      	mov	r3, r0
 80035fa:	6023      	str	r3, [r4, #0]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <ptpd_msg_unpack_sync>:

// Unpack Sync message.
void ptpd_msg_unpack_sync(const octet_t *buf, MsgSync *sync)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3322      	adds	r3, #34	@ 0x22
 8003612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4618      	mov	r0, r3
 800361a:	f015 fe01 	bl	8019220 <lwip_htons>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	809a      	strh	r2, [r3, #4]
  sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3324      	adds	r3, #36	@ 0x24
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f015 fe0c 	bl	801924a <lwip_htonl>
 8003632:	4602      	mov	r2, r0
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	601a      	str	r2, [r3, #0]
  sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3328      	adds	r3, #40	@ 0x28
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f015 fe03 	bl	801924a <lwip_htonl>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <ptpd_msg_pack_delay_req>:

// Pack DelayReq message.
void ptpd_msg_pack_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 8003652:	b590      	push	{r4, r7, lr}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f023 030f 	bic.w	r3, r3, #15
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; // Table 19
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 800367a:	202c      	movs	r0, #44	@ 0x2c
 800367c:	f015 fdd0 	bl	8019220 <lwip_htons>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3302      	adds	r3, #2
 8003688:	b212      	sxth	r2, r2
 800368a:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentDelayReqSequenceId);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f015 fdc3 	bl	8019220 <lwip_htons>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	331e      	adds	r3, #30
 80036a2:	b212      	sxth	r2, r2
 80036a4:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; // Table 23
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3320      	adds	r3, #32
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3321      	adds	r3, #33	@ 0x21
 80036b2:	227f      	movs	r2, #127	@ 0x7f
 80036b4:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3308      	adds	r3, #8
 80036ba:	2208      	movs	r2, #8
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f01f facc 	bl	8022c5c <memset>

  // Delay_req message.
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	889b      	ldrh	r3, [r3, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f015 fda9 	bl	8019220 <lwip_htons>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3322      	adds	r3, #34	@ 0x22
 80036d6:	b212      	sxth	r2, r2
 80036d8:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80036e4:	4610      	mov	r0, r2
 80036e6:	f015 fdb0 	bl	801924a <lwip_htonl>
 80036ea:	4603      	mov	r3, r0
 80036ec:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80036f8:	4610      	mov	r0, r2
 80036fa:	f015 fda6 	bl	801924a <lwip_htonl>
 80036fe:	4603      	mov	r3, r0
 8003700:	6023      	str	r3, [r4, #0]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}

0800370a <ptpd_msg_pack_follow_up>:
  delay_req->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

// Pack FollowUp message.
void ptpd_msg_pack_follow_up(const PtpClock *ptp_clock, octet_t*buf, const Timestamp *precise_origin_timestamp)
{
 800370a:	b590      	push	{r4, r7, lr}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f023 030f 	bic.w	r3, r3, #15
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; // Table 19
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8003732:	202c      	movs	r0, #44	@ 0x2c
 8003734:	f015 fd74 	bl	8019220 <lwip_htons>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	3302      	adds	r3, #2
 8003740:	b212      	sxth	r2, r2
 8003742:	801a      	strh	r2, [r3, #0]
  // sentSyncSequenceId has already been incremented in issueSync.
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentSyncSequenceId - 1);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	4618      	mov	r0, r3
 8003752:	f015 fd65 	bl	8019220 <lwip_htons>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	331e      	adds	r3, #30
 800375e:	b212      	sxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; // Table 23
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3320      	adds	r3, #32
 8003766:	2202      	movs	r2, #2
 8003768:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logSyncInterval;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3321      	adds	r3, #33	@ 0x21
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	f992 2056 	ldrsb.w	r2, [r2, #86]	@ 0x56
 8003774:	701a      	strb	r2, [r3, #0]

  // Follow_up message.
  *(int16_t*)(buf + 34) = flip16(precise_origin_timestamp->secondsField.msb);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	889b      	ldrh	r3, [r3, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	f015 fd50 	bl	8019220 <lwip_htons>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3322      	adds	r3, #34	@ 0x22
 8003788:	b212      	sxth	r2, r2
 800378a:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(precise_origin_timestamp->secondsField.lsb);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003796:	4610      	mov	r0, r2
 8003798:	f015 fd57 	bl	801924a <lwip_htonl>
 800379c:	4603      	mov	r3, r0
 800379e:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(precise_origin_timestamp->nanosecondsField);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80037aa:	4610      	mov	r0, r2
 80037ac:	f015 fd4d 	bl	801924a <lwip_htonl>
 80037b0:	4603      	mov	r3, r0
 80037b2:	6023      	str	r3, [r4, #0]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}

080037bc <ptpd_msg_unpack_follow_up>:

// Unpack FollowUp message.
void ptpd_msg_unpack_follow_up(const octet_t *buf, MsgFollowUp *follow)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3322      	adds	r3, #34	@ 0x22
 80037ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f015 fd25 	bl	8019220 <lwip_htons>
 80037d6:	4603      	mov	r3, r0
 80037d8:	461a      	mov	r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	809a      	strh	r2, [r3, #4]
  follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3324      	adds	r3, #36	@ 0x24
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f015 fd30 	bl	801924a <lwip_htonl>
 80037ea:	4602      	mov	r2, r0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]
  follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3328      	adds	r3, #40	@ 0x28
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f015 fd27 	bl	801924a <lwip_htonl>
 80037fc:	4602      	mov	r2, r0
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <ptpd_msg_pack_delay_resp>:

// Pack DelayResp message.
void ptpd_msg_pack_delay_resp(const PtpClock *ptp_clock, octet_t *buf, const MsgHeader *header, const Timestamp *receive_timestamp)
{
 800380a:	b590      	push	{r4, r7, lr}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f023 030f 	bic.w	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; // Table 19
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f043 0309 	orr.w	r3, r3, #9
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 8003834:	2036      	movs	r0, #54	@ 0x36
 8003836:	f015 fcf3 	bl	8019220 <lwip_htons>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3302      	adds	r3, #2
 8003842:	b212      	sxth	r2, r2
 8003844:	801a      	strh	r2, [r3, #0]
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3308      	adds	r3, #8
 800384a:	2208      	movs	r2, #8
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f01f fa04 	bl	8022c5c <memset>

  // Copy correctionField of delayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	000a      	movs	r2, r1
 8003864:	17cb      	asrs	r3, r1, #31
 8003866:	4613      	mov	r3, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f015 fcee 	bl	801924a <lwip_htonl>
 800386e:	4602      	mov	r2, r0
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3308      	adds	r3, #8
 8003874:	601a      	str	r2, [r3, #0]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800387c:	4613      	mov	r3, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f015 fce3 	bl	801924a <lwip_htonl>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	330c      	adds	r3, #12
 800388a:	601a      	str	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003892:	b29b      	uxth	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	f015 fcc3 	bl	8019220 <lwip_htons>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	331e      	adds	r3, #30
 80038a2:	b212      	sxth	r2, r2
 80038a4:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; // Table 23
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3320      	adds	r3, #32
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = ptp_clock->portDS.logMinDelayReqInterval; //Table 24
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3321      	adds	r3, #33	@ 0x21
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f992 204b 	ldrsb.w	r2, [r2, #75]	@ 0x4b
 80038b8:	701a      	strb	r2, [r3, #0]

  // delay_resp message.
  *(int16_t*)(buf + 34) = flip16(receive_timestamp->secondsField.msb);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	889b      	ldrh	r3, [r3, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f015 fcae 	bl	8019220 <lwip_htons>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3322      	adds	r3, #34	@ 0x22
 80038cc:	b212      	sxth	r2, r2
 80038ce:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(receive_timestamp->secondsField.lsb);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80038da:	4610      	mov	r0, r2
 80038dc:	f015 fcb5 	bl	801924a <lwip_htonl>
 80038e0:	4603      	mov	r3, r0
 80038e2:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(receive_timestamp->nanosecondsField);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80038ee:	4610      	mov	r0, r2
 80038f0:	f015 fcab 	bl	801924a <lwip_htonl>
 80038f4:	4603      	mov	r3, r0
 80038f6:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3318      	adds	r3, #24
 8003902:	2208      	movs	r2, #8
 8003904:	4619      	mov	r1, r3
 8003906:	f01f fa4e 	bl	8022da6 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003910:	b29b      	uxth	r3, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f015 fc84 	bl	8019220 <lwip_htons>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3334      	adds	r3, #52	@ 0x34
 8003920:	b212      	sxth	r2, r2
 8003922:	801a      	strh	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}

0800392c <ptpd_msg_unpack_delay_resp>:

// Unpack DelayResp message.
void ptpd_msg_unpack_delay_resp(const octet_t *buf, MsgDelayResp *resp)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3322      	adds	r3, #34	@ 0x22
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f015 fc6d 	bl	8019220 <lwip_htons>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	809a      	strh	r2, [r3, #4]
  resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3324      	adds	r3, #36	@ 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f015 fc78 	bl	801924a <lwip_htonl>
 800395a:	4602      	mov	r2, r0
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]
  resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3328      	adds	r3, #40	@ 0x28
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f015 fc6f 	bl	801924a <lwip_htonl>
 800396c:	4602      	mov	r2, r0
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	609a      	str	r2, [r3, #8]
  memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f103 000c 	add.w	r0, r3, #12
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	332c      	adds	r3, #44	@ 0x2c
 800397c:	2208      	movs	r2, #8
 800397e:	4619      	mov	r1, r3
 8003980:	f01f fa11 	bl	8022da6 <memcpy>
  resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3334      	adds	r3, #52	@ 0x34
 8003988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	f015 fc46 	bl	8019220 <lwip_htons>
 8003994:	4603      	mov	r3, r0
 8003996:	b21a      	sxth	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	829a      	strh	r2, [r3, #20]
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <ptpd_msg_pack_peer_delay_req>:

// Pack PeerDelayReq message.
void ptpd_msg_pack_peer_delay_req(const PtpClock *ptp_clock, octet_t *buf, const Timestamp *origin_timestamp)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f023 030f 	bic.w	r3, r3, #15
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; // Table 19
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 80039cc:	2036      	movs	r0, #54	@ 0x36
 80039ce:	f015 fc27 	bl	8019220 <lwip_htons>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3302      	adds	r3, #2
 80039da:	b212      	sxth	r2, r2
 80039dc:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(ptp_clock->sentPDelayReqSequenceId);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f015 fc1a 	bl	8019220 <lwip_htons>
 80039ec:	4603      	mov	r3, r0
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	331e      	adds	r3, #30
 80039f4:	b212      	sxth	r2, r2
 80039f6:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3320      	adds	r3, #32
 80039fc:	2205      	movs	r2, #5
 80039fe:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3321      	adds	r3, #33	@ 0x21
 8003a04:	227f      	movs	r2, #127	@ 0x7f
 8003a06:	701a      	strb	r2, [r3, #0]
  memset((buf + 8), 0, 8);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f01f f923 	bl	8022c5c <memset>

  // Pdelay_req message
  *(int16_t*)(buf + 34) = flip16(origin_timestamp->secondsField.msb);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	889b      	ldrh	r3, [r3, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f015 fc00 	bl	8019220 <lwip_htons>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3322      	adds	r3, #34	@ 0x22
 8003a28:	b212      	sxth	r2, r2
 8003a2a:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(origin_timestamp->secondsField.lsb);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003a36:	4610      	mov	r0, r2
 8003a38:	f015 fc07 	bl	801924a <lwip_htonl>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(origin_timestamp->nanosecondsField);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f015 fbfd 	bl	801924a <lwip_htonl>
 8003a50:	4603      	mov	r3, r0
 8003a52:	6023      	str	r3, [r4, #0]
  memset((buf + 44), 0, 10); // RAZ reserved octets.
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	332c      	adds	r3, #44	@ 0x2c
 8003a58:	220a      	movs	r2, #10
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f01f f8fd 	bl	8022c5c <memset>
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}

08003a6a <ptpd_msg_pack_peer_delay_resp>:
  pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

// Pack PeerDelayResp message.
void ptpd_msg_pack_peer_delay_resp(octet_t *buf, const MsgHeader *header, const Timestamp *request_receipt_timestamp)
{
 8003a6a:	b590      	push	{r4, r7, lr}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f023 030f 	bic.w	r3, r3, #15
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; // Table 19
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f043 0303 	orr.w	r3, r3, #3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 8003a92:	2036      	movs	r0, #54	@ 0x36
 8003a94:	f015 fbc4 	bl	8019220 <lwip_htons>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	b212      	sxth	r2, r2
 8003aa2:	801a      	strh	r2, [r3, #0]
  // *(uint8_t*)(buf+4) = header->domainNumber; // TODO: Why?
  memset((buf + 8), 0, 8);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f01f f8d5 	bl	8022c5c <memset>
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f015 fbb0 	bl	8019220 <lwip_htons>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	331e      	adds	r3, #30
 8003ac8:	b212      	sxth	r2, r2
 8003aca:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3320      	adds	r3, #32
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3321      	adds	r3, #33	@ 0x21
 8003ad8:	227f      	movs	r2, #127	@ 0x7f
 8003ada:	701a      	strb	r2, [r3, #0]

  // Pdelay_resp message.
  *(int16_t*)(buf + 34) = flip16(request_receipt_timestamp->secondsField.msb);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f015 fb9d 	bl	8019220 <lwip_htons>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3322      	adds	r3, #34	@ 0x22
 8003aee:	b212      	sxth	r2, r2
 8003af0:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(request_receipt_timestamp->secondsField.lsb);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003afc:	4610      	mov	r0, r2
 8003afe:	f015 fba4 	bl	801924a <lwip_htonl>
 8003b02:	4603      	mov	r3, r0
 8003b04:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(request_receipt_timestamp->nanosecondsField);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003b10:	4610      	mov	r0, r2
 8003b12:	f015 fb9a 	bl	801924a <lwip_htonl>
 8003b16:	4603      	mov	r3, r0
 8003b18:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3318      	adds	r3, #24
 8003b24:	2208      	movs	r2, #8
 8003b26:	4619      	mov	r1, r3
 8003b28:	f01f f93d 	bl	8022da6 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	f015 fb73 	bl	8019220 <lwip_htons>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3334      	adds	r3, #52	@ 0x34
 8003b42:	b212      	sxth	r2, r2
 8003b44:	801a      	strh	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}

08003b4e <ptpd_msg_unpack_peer_delay_resp>:

// Unpack PeerDelayResp message.
void ptpd_msg_unpack_peer_delay_resp(const octet_t *buf, MsgPDelayResp *presp)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3322      	adds	r3, #34	@ 0x22
 8003b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f015 fb5c 	bl	8019220 <lwip_htons>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	809a      	strh	r2, [r3, #4]
  presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3324      	adds	r3, #36	@ 0x24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f015 fb67 	bl	801924a <lwip_htonl>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	601a      	str	r2, [r3, #0]
  presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f015 fb5e 	bl	801924a <lwip_htonl>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	609a      	str	r2, [r3, #8]
  memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f103 000c 	add.w	r0, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	332c      	adds	r3, #44	@ 0x2c
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f01f f900 	bl	8022da6 <memcpy>
  presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3334      	adds	r3, #52	@ 0x34
 8003baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f015 fb35 	bl	8019220 <lwip_htons>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	829a      	strh	r2, [r3, #20]
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <ptpd_msg_pack_peer_delay_resp_follow_up>:

// Pack PeerDelayRespFollowUp message.
void ptpd_msg_pack_peer_delay_resp_follow_up(octet_t *buf, const MsgHeader *header, const Timestamp *response_origin_timestamp)
{
 8003bc6:	b590      	push	{r4, r7, lr}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  // Changes in header.
  *(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; // RAZ messageType
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	f023 030f 	bic.w	r3, r3, #15
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	701a      	strb	r2, [r3, #0]
  *(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; // Table 19
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f043 030a 	orr.w	r3, r3, #10
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]
  *(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 8003bee:	2036      	movs	r0, #54	@ 0x36
 8003bf0:	f015 fb16 	bl	8019220 <lwip_htons>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	b212      	sxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
  *(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f015 fb09 	bl	8019220 <lwip_htons>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461a      	mov	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	331e      	adds	r3, #30
 8003c16:	b212      	sxth	r2, r2
 8003c18:	801a      	strh	r2, [r3, #0]
  *(uint8_t*)(buf + 32) = CTRL_OTHER; // Table 23
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	2205      	movs	r2, #5
 8003c20:	701a      	strb	r2, [r3, #0]
  *(int8_t*)(buf + 33) = 0x7F; // Table 24
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3321      	adds	r3, #33	@ 0x21
 8003c26:	227f      	movs	r2, #127	@ 0x7f
 8003c28:	701a      	strb	r2, [r3, #0]

  // Copy correctionField of PdelayReqMessage.
  *(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	000a      	movs	r2, r1
 8003c3a:	17cb      	asrs	r3, r1, #31
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f015 fb03 	bl	801924a <lwip_htonl>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	601a      	str	r2, [r3, #0]
  *(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c52:	4613      	mov	r3, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f015 faf8 	bl	801924a <lwip_htonl>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	601a      	str	r2, [r3, #0]

  // Pdelay_resp_follow_up message.
  *(int16_t*)(buf + 34) = flip16(response_origin_timestamp->secondsField.msb);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	889b      	ldrh	r3, [r3, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f015 fada 	bl	8019220 <lwip_htons>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3322      	adds	r3, #34	@ 0x22
 8003c74:	b212      	sxth	r2, r2
 8003c76:	801a      	strh	r2, [r3, #0]
  *(uint32_t*)(buf + 36) = flip32(response_origin_timestamp->secondsField.lsb);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003c82:	4610      	mov	r0, r2
 8003c84:	f015 fae1 	bl	801924a <lwip_htonl>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	6023      	str	r3, [r4, #0]
  *(uint32_t*)(buf + 40) = flip32(response_origin_timestamp->nanosecondsField);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003c96:	4610      	mov	r0, r2
 8003c98:	f015 fad7 	bl	801924a <lwip_htonl>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	6023      	str	r3, [r4, #0]
  memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	2208      	movs	r2, #8
 8003cac:	4619      	mov	r1, r3
 8003cae:	f01f f87a 	bl	8022da6 <memcpy>
  *(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f015 fab0 	bl	8019220 <lwip_htons>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3334      	adds	r3, #52	@ 0x34
 8003cc8:	b212      	sxth	r2, r2
 8003cca:	801a      	strh	r2, [r3, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd90      	pop	{r4, r7, pc}

08003cd4 <ptpd_msg_unpack_peer_delay_resp_follow_up>:

// Unpack PeerDelayRespFollowUp message.
void ptpd_msg_unpack_peer_delay_resp_follow_up(const octet_t *buf, MsgPDelayRespFollowUp *resp_follow_up)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  resp_follow_up->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3322      	adds	r3, #34	@ 0x22
 8003ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f015 fa99 	bl	8019220 <lwip_htons>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	809a      	strh	r2, [r3, #4]
  resp_follow_up->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	@ 0x24
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f015 faa4 	bl	801924a <lwip_htonl>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
  resp_follow_up->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3328      	adds	r3, #40	@ 0x28
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f015 fa9b 	bl	801924a <lwip_htonl>
 8003d14:	4602      	mov	r2, r0
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	609a      	str	r2, [r3, #8]
  memcpy(resp_follow_up->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f103 000c 	add.w	r0, r3, #12
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	332c      	adds	r3, #44	@ 0x2c
 8003d24:	2208      	movs	r2, #8
 8003d26:	4619      	mov	r1, r3
 8003d28:	f01f f83d 	bl	8022da6 <memcpy>
  resp_follow_up->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3334      	adds	r3, #52	@ 0x34
 8003d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f015 fa72 	bl	8019220 <lwip_htons>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	829a      	strh	r2, [r3, #20]
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <ptpd_net_queue_init>:
#include "ethernetif.h"
#include "../../Log.h"

// Initialize the network queue.
static void ptpd_net_queue_init(BufQueue *queue)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	821a      	strh	r2, [r3, #16]
  queue->tail = 0;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	825a      	strh	r2, [r3, #18]
  sys_mutex_new(&queue->mutex);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3314      	adds	r3, #20
 8003d64:	4618      	mov	r0, r3
 8003d66:	f01e fc2f 	bl	80225c8 <sys_mutex_new>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <ptpd_net_queue_put>:

// Put data to the network queue.
static bool ptpd_net_queue_put(BufQueue *queue, void *pbuf)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  bool retval = false;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]

  sys_mutex_lock(&queue->mutex);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3314      	adds	r3, #20
 8003d84:	4618      	mov	r0, r3
 8003d86:	f01e fc35 	bl	80225f4 <sys_mutex_lock>

  // Is there room on the queue for the buffer?
  if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d015      	beq.n	8003dcc <ptpd_net_queue_put+0x5a>
  {
    // Place the buffer in the queue.
    queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	b21b      	sxth	r3, r3
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	b21a      	sxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	821a      	strh	r2, [r3, #16]
    queue->pbuf[queue->head] = pbuf;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    retval = true;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
  }

  sys_mutex_unlock(&queue->mutex);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3314      	adds	r3, #20
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f01e fc1e 	bl	8022612 <sys_mutex_unlock>

  return retval;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ptpd_net_queue_get>:

// Get data from the network queue.
static void *ptpd_net_queue_get(BufQueue *queue)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  void *pbuf = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

  sys_mutex_lock(&queue->mutex);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3314      	adds	r3, #20
 8003df0:	4618      	mov	r0, r3
 8003df2:	f01e fbff 	bl	80225f4 <sys_mutex_lock>

  // Is there a buffer on the queue?
  if (queue->tail != queue->head)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d013      	beq.n	8003e2e <ptpd_net_queue_get+0x4e>
  {
    // Get the buffer from the queue.
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	b21b      	sxth	r3, r3
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	825a      	strh	r2, [r3, #18]
    pbuf = queue->pbuf[queue->tail];
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  sys_mutex_unlock(&queue->mutex);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3314      	adds	r3, #20
 8003e32:	4618      	mov	r0, r3
 8003e34:	f01e fbed 	bl	8022612 <sys_mutex_unlock>

  return pbuf;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <ptpd_net_queue_empty>:

// Free any remaining pbufs in the queue.
static void ptpd_net_queue_empty(BufQueue *queue)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  sys_mutex_lock(&queue->mutex);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f01e fbd0 	bl	80225f4 <sys_mutex_lock>

  // Free each remaining buffer in the queue.
  while (queue->tail != queue->head)
 8003e54:	e015      	b.n	8003e82 <ptpd_net_queue_empty+0x40>
  {
    // Get the buffer from the queue.
    queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	b21a      	sxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	825a      	strh	r2, [r3, #18]
    pbuf_free(queue->pbuf[queue->tail]);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f016 fe81 	bl	801ab84 <pbuf_free>
  while (queue->tail != queue->head)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d1e1      	bne.n	8003e56 <ptpd_net_queue_empty+0x14>
  }

  sys_mutex_unlock(&queue->mutex);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3314      	adds	r3, #20
 8003e96:	4618      	mov	r0, r3
 8003e98:	f01e fbbb 	bl	8022612 <sys_mutex_unlock>
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <ptpd_net_queue_check>:

// Return true if something is in the queue.
static bool ptpd_net_queue_check(BufQueue  *queue)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  bool  retval = false;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]

  sys_mutex_lock(&queue->mutex);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f01e fb9d 	bl	80225f4 <sys_mutex_lock>

  if (queue->tail != queue->head) retval = true;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <ptpd_net_queue_check+0x2a>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]

  sys_mutex_unlock(&queue->mutex);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f01e fb9d 	bl	8022612 <sys_mutex_unlock>

  return retval;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <ptpd_find_iface>:

// Find interface to be used. uuid will be filled with MAC address of the interface.
// The IPv4 address of the interface will be returned.
static int32_t ptpd_find_iface(const octet_t *ifaceName, octet_t *uuid, NetPath *net_path)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  struct netif *iface;

  // Use the default interface.
  iface = netif_default;
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <ptpd_find_iface+0x34>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]

  // Copy the interface hardware address.
  memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f02:	461a      	mov	r2, r3
 8003f04:	68b8      	ldr	r0, [r7, #8]
 8003f06:	f01e ff4e 	bl	8022da6 <memcpy>

  // Return the interface IP address.
  return iface->ip_addr.addr;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	685b      	ldr	r3, [r3, #4]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20010010 	.word	0x20010010

08003f1c <ptpd_net_event_callback>:

// Process an incoming message on the event port.
static void ptpd_net_event_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                                    const ip_addr_t *addr, u16_t port)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  NetPath *net_path = (NetPath *) arg;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	617b      	str	r3, [r7, #20]

  // Place the incoming message on the event port queue.
  if (ptpd_net_queue_put(&net_path->eventQ, p))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3314      	adds	r3, #20
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff1c 	bl	8003d72 <ptpd_net_queue_put>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <ptpd_net_event_callback+0x2a>
  {
    // Alert the PTP thread there is now something to do.
    ptpd_alert();
 8003f40:	f7ff f926 	bl	8003190 <ptpd_alert>
  else
  {
    pbuf_free(p);
    ERROR("PTPD: event port queue full\n");
  }
}
 8003f44:	e002      	b.n	8003f4c <ptpd_net_event_callback+0x30>
    pbuf_free(p);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f016 fe1c 	bl	801ab84 <pbuf_free>
}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <ptpd_net_general_callback>:

// Process an incoming message on the general port.
static void ptpd_net_general_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                                      const ip_addr_t *addr, u16_t port)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  NetPath *net_path = (NetPath *) arg;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	617b      	str	r3, [r7, #20]

  // Place the incoming message on the event port queue.
  if (ptpd_net_queue_put(&net_path->generalQ, p))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	332c      	adds	r3, #44	@ 0x2c
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff00 	bl	8003d72 <ptpd_net_queue_put>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <ptpd_net_general_callback+0x2a>
  {
    // Alert the PTP thread there is now something to do.
    ptpd_alert();
 8003f78:	f7ff f90a 	bl	8003190 <ptpd_alert>
  else
  {
    pbuf_free(p);
    ERROR("PTPD: general port queue full\n");
  }
}
 8003f7c:	e002      	b.n	8003f84 <ptpd_net_general_callback+0x30>
    pbuf_free(p);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f016 fe00 	bl	801ab84 <pbuf_free>
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <ptpd_net_init>:

// Start all of the UDP stuff.
bool ptpd_net_init(NetPath *net_path, PtpClock *ptp_clock)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  in_addr_t net_addr;
  ip_addr_t interface_addr;
  char addr_str[NET_ADDRESS_LENGTH];

  // Initialize the buffer queues.
  ptpd_net_queue_init(&net_path->eventQ);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fed6 	bl	8003d4c <ptpd_net_queue_init>
  ptpd_net_queue_init(&net_path->generalQ);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	332c      	adds	r3, #44	@ 0x2c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fed1 	bl	8003d4c <ptpd_net_queue_init>

  // Find a network interface.
  interface_addr.addr = ptpd_find_iface(ptp_clock->rtOpts.ifaceName, ptp_clock->portUuidField, net_path);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f103 000c 	add.w	r0, r3, #12
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f203 430a 	addw	r3, r3, #1034	@ 0x40a
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7ff ff93 	bl	8003ee4 <ptpd_find_iface>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	61bb      	str	r3, [r7, #24]
  if (!(interface_addr.addr))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 808a 	beq.w	80040de <ptpd_net_init+0x152>
    ERROR("PTPD: Failed to find interface address\n");
    goto fail01;
  }

  // Open lwip raw udp interfaces for the event port.
  net_path->eventPcb = udp_new();
 8003fca:	f01e f889 	bl	80220e0 <udp_new>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]
  if (NULL == net_path->eventPcb)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8082 	beq.w	80040e2 <ptpd_net_init+0x156>
    ERROR("PTPD: Failed to open event UDP PCB\n");
    goto fail02;
  }

  // Open lwip raw udp interfaces for the general port.
  net_path->generalPcb = udp_new();
 8003fde:	f01e f87f 	bl	80220e0 <udp_new>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]
  if (NULL == net_path->generalPcb)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d06f      	beq.n	80040d0 <ptpd_net_init+0x144>
    ERROR("PTPD: Failed to open general UDP PCB\n");
    goto fail03;
  }

  // Configure network (broadcast/unicast) addresses (unicast disabled).
  net_path->unicastAddr = 0;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

  // Init general multicast IP address.
  strcpy(addr_str, DEFAULT_PTP_DOMAIN_ADDRESS);
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80040f0 <ptpd_net_init+0x164>)
 8003ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 8004002:	f107 021c 	add.w	r2, r7, #28
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f014 f99f 	bl	8018350 <ip4addr_aton>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d052      	beq.n	80040be <ptpd_net_init+0x132>
  {
    ERROR("PTPD: failed to encode multi-cast address: %s\n", addr_str);
    goto fail04;
  }
  net_path->multicastAddr = net_addr;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]

  // Join multicast group (for receiving) on specified interface.
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 8004020:	f107 021c 	add.w	r2, r7, #28
 8004024:	f107 0318 	add.w	r3, r7, #24
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f013 fafa 	bl	8017624 <igmp_joingroup>

  // Init peer multicast IP address.
  strcpy(addr_str, PEER_PTP_DOMAIN_ADDRESS);
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	4a2f      	ldr	r2, [pc, #188]	@ (80040f4 <ptpd_net_init+0x168>)
 8004036:	ca07      	ldmia	r2, {r0, r1, r2}
 8004038:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (!inet_aton(addr_str, &net_addr))
 800403c:	f107 021c 	add.w	r2, r7, #28
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f014 f982 	bl	8018350 <ip4addr_aton>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d037      	beq.n	80040c2 <ptpd_net_init+0x136>
  {
    ERROR("PTPD: failed to encode peer multi-cast address: %s\n", addr_str);
    goto fail04;
  }
  net_path->peerMulticastAddr = net_addr;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

  // Join peer multicast group (for receiving) on specified interface.
  igmp_joingroup(&interface_addr, (ip4_addr_t *) &net_addr);
 800405a:	f107 021c 	add.w	r2, r7, #28
 800405e:	f107 0318 	add.w	r3, r7, #24
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f013 fadd 	bl	8017624 <igmp_joingroup>

  // Multicast send only on specified interface.
  net_path->eventPcb->mcast_ip4.addr = net_path->multicastAddr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	619a      	str	r2, [r3, #24]
  net_path->generalPcb->mcast_ip4.addr = net_path->multicastAddr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	619a      	str	r2, [r3, #24]

  // Establish the appropriate UDP bindings/connections for event port.
  udp_recv(net_path->eventPcb, ptpd_net_event_callback, net_path);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	491c      	ldr	r1, [pc, #112]	@ (80040f8 <ptpd_net_init+0x16c>)
 8004086:	4618      	mov	r0, r3
 8004088:	f01d ffc8 	bl	802201c <udp_recv>
  udp_bind(net_path->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f240 123f 	movw	r2, #319	@ 0x13f
 8004094:	4919      	ldr	r1, [pc, #100]	@ (80040fc <ptpd_net_init+0x170>)
 8004096:	4618      	mov	r0, r3
 8004098:	f01d fea2 	bl	8021de0 <udp_bind>

  // Establish the appropriate UDP bindings/connections for general port.
  udp_recv(net_path->generalPcb, ptpd_net_general_callback, net_path);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4917      	ldr	r1, [pc, #92]	@ (8004100 <ptpd_net_init+0x174>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f01d ffb9 	bl	802201c <udp_recv>
  udp_bind(net_path->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80040b2:	4912      	ldr	r1, [pc, #72]	@ (80040fc <ptpd_net_init+0x170>)
 80040b4:	4618      	mov	r0, r3
 80040b6:	f01d fe93 	bl	8021de0 <udp_bind>

  // Return success.
  return true;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e013      	b.n	80040e6 <ptpd_net_init+0x15a>
    goto fail04;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <ptpd_net_init+0x138>
    goto fail04;
 80040c2:	bf00      	nop

fail04:
  udp_remove(net_path->generalPcb);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f01d ffc7 	bl	802205c <udp_remove>
 80040ce:	e000      	b.n	80040d2 <ptpd_net_init+0x146>
    goto fail03;
 80040d0:	bf00      	nop
fail03:
  udp_remove(net_path->eventPcb);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f01d ffc0 	bl	802205c <udp_remove>
 80040dc:	e002      	b.n	80040e4 <ptpd_net_init+0x158>
    goto fail01;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <ptpd_net_init+0x158>
    goto fail02;
 80040e2:	bf00      	nop
fail02:
fail01:
  return false;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	08023ed4 	.word	0x08023ed4
 80040f4:	08023ee0 	.word	0x08023ee0
 80040f8:	08003f1d 	.word	0x08003f1d
 80040fc:	08028c18 	.word	0x08028c18
 8004100:	08003f55 	.word	0x08003f55

08004104 <ptpd_net_shutdown>:

// Shut down the UDP and network stuff.
bool ptpd_net_shutdown(NetPath *net_path)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  ip_addr_t multicast_addr;

  DBG("ptpd_net_shutdown\n");

  // Leave multicast group.
  multicast_addr.addr = net_path->multicastAddr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
  if (multicast_addr.addr) igmp_leavegroup(IP_ADDR_ANY, &multicast_addr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <ptpd_net_shutdown+0x20>
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	4818      	ldr	r0, [pc, #96]	@ (8004180 <ptpd_net_shutdown+0x7c>)
 8004120:	f013 fb5c 	bl	80177dc <igmp_leavegroup>

  // Disconnect and close the event UDP interface.
  if (net_path->eventPcb)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <ptpd_net_shutdown+0x42>
  {
    udp_disconnect(net_path->eventPcb);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4618      	mov	r0, r3
 8004132:	f01d ff4b 	bl	8021fcc <udp_disconnect>
    udp_remove(net_path->eventPcb);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	f01d ff8e 	bl	802205c <udp_remove>
    net_path->eventPcb = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
  }

  // Disconnect and close the general UDP interface.
  if (net_path->generalPcb)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <ptpd_net_shutdown+0x64>
  {
    udp_disconnect(net_path->generalPcb);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	4618      	mov	r0, r3
 8004154:	f01d ff3a 	bl	8021fcc <udp_disconnect>
    udp_remove(net_path->generalPcb);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	4618      	mov	r0, r3
 800415e:	f01d ff7d 	bl	802205c <udp_remove>
    net_path->generalPcb = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	611a      	str	r2, [r3, #16]
  }

  // Clear the network addresses.
  net_path->multicastAddr = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	605a      	str	r2, [r3, #4]
  net_path->unicastAddr = 0;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

  // Return success.
  return true;
 8004174:	2301      	movs	r3, #1
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	08028c18 	.word	0x08028c18

08004184 <ptpd_net_select>:

// Wait for a packet  to come in on either port.  For now, there is no wait.
// Simply check to  see if a packet is available on either port and return 1,
// otherwise return 0.
int32_t ptpd_net_select(NetPath *net_path, const TimeInternal *timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  // Check the packet queues.  If there is data, return true.
  if (ptpd_net_queue_check(&net_path->eventQ) || ptpd_net_queue_check(&net_path->generalQ)) return 1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3314      	adds	r3, #20
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fe86 	bl	8003ea4 <ptpd_net_queue_check>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <ptpd_net_select+0x2a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	332c      	adds	r3, #44	@ 0x2c
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fe7e 	bl	8003ea4 <ptpd_net_queue_check>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <ptpd_net_select+0x2e>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <ptpd_net_select+0x30>

  return 0;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <ptpd_net_empty_event_queue>:

// Delete all waiting packets in event queue.
void ptpd_net_empty_event_queue(NetPath *net_path)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  ptpd_net_queue_empty(&net_path->eventQ);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3314      	adds	r3, #20
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fe3a 	bl	8003e42 <ptpd_net_queue_empty>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <ptpd_net_recv>:

// Receive the next buffer from the given queue.
static ssize_t ptpd_net_recv(octet_t *buf, TimeInternal *time, BufQueue *queue)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08a      	sub	sp, #40	@ 0x28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  u16_t length;
  struct pbuf *p;
  struct pbuf *pcopy;

  // Get the next buffer from the queue.
  if ((p = (struct pbuf*) ptpd_net_queue_get(queue)) == NULL)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fdfc 	bl	8003de0 <ptpd_net_queue_get>
 80041e8:	61b8      	str	r0, [r7, #24]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <ptpd_net_recv+0x1e>
  {
    return 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e04a      	b.n	800428a <ptpd_net_recv+0xb4>
  }

  // Verify that we have enough space to store the contents.
  if (p->tot_len > PACKET_SIZE)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	891b      	ldrh	r3, [r3, #8]
 80041f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80041fc:	d904      	bls.n	8004208 <ptpd_net_recv+0x32>
  {
    ERROR("PTPD: received truncated message\n");
    pbuf_free(p);
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f016 fcc0 	bl	801ab84 <pbuf_free>
    return 0;
 8004204:	2300      	movs	r3, #0
 8004206:	e040      	b.n	800428a <ptpd_net_recv+0xb4>
  }

  // Verify there is contents to copy.
  if (p->tot_len == 0)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	891b      	ldrh	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <ptpd_net_recv+0x44>
  {
    ERROR("PTPD: received empty packet\n");
    pbuf_free(p);
 8004210:	69b8      	ldr	r0, [r7, #24]
 8004212:	f016 fcb7 	bl	801ab84 <pbuf_free>
    return 0;
 8004216:	2300      	movs	r3, #0
 8004218:	e037      	b.n	800428a <ptpd_net_recv+0xb4>
  }

  // Get the timestamp of the packet.
  if (time != NULL)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <ptpd_net_recv+0x5e>
  {
    time->seconds = p->timestamp_sec;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	601a      	str	r2, [r3, #0]
    time->nanoseconds = p->timestamp_nsec;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	605a      	str	r2, [r3, #4]
  }

  // Get the length of the buffer to copy.
  length = p->tot_len;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	891b      	ldrh	r3, [r3, #8]
 8004238:	82fb      	strh	r3, [r7, #22]

  // Copy the pbuf payload into the buffer.
  pcopy = p;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	61fb      	str	r3, [r7, #28]
  j = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
  for (i = 0; i < length; i++)
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
 8004246:	e018      	b.n	800427a <ptpd_net_recv+0xa4>
  {
    // Copy the next byte in the payload.
    buf[i] = ((u8_t *)pcopy->payload)[j++];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	6239      	str	r1, [r7, #32]
 8004252:	441a      	add	r2, r3
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	440b      	add	r3, r1
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]

    // Skip to the next buffer in the payload?
    if (j == pcopy->len)
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	895b      	ldrh	r3, [r3, #10]
 8004262:	461a      	mov	r2, r3
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	4293      	cmp	r3, r2
 8004268:	d104      	bne.n	8004274 <ptpd_net_recv+0x9e>
    {
      // Move to the next buffer.
      pcopy = pcopy->next;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61fb      	str	r3, [r7, #28]
      j = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
  for (i = 0; i < length; i++)
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	3301      	adds	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
 800427a:	8afb      	ldrh	r3, [r7, #22]
 800427c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427e:	429a      	cmp	r2, r3
 8004280:	dbe2      	blt.n	8004248 <ptpd_net_recv+0x72>
    }
  }

  // Free up the pbuf (chain).
  pbuf_free(p);
 8004282:	69b8      	ldr	r0, [r7, #24]
 8004284:	f016 fc7e 	bl	801ab84 <pbuf_free>

  return length;
 8004288:	8afb      	ldrh	r3, [r7, #22]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3728      	adds	r7, #40	@ 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <ptpd_net_recv_event>:

ssize_t ptpd_net_recv_event(NetPath *net_path, octet_t *buf, TimeInternal *time)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  return ptpd_net_recv(buf, time, &net_path->eventQ);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3314      	adds	r3, #20
 80042a2:	461a      	mov	r2, r3
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f7ff ff95 	bl	80041d6 <ptpd_net_recv>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ptpd_net_recv_general>:

ssize_t ptpd_net_recv_general(NetPath *net_path, octet_t *buf, TimeInternal *time)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  return ptpd_net_recv(buf, time, &net_path->generalQ);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	332c      	adds	r3, #44	@ 0x2c
 80042c6:	461a      	mov	r2, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f7ff ff83 	bl	80041d6 <ptpd_net_recv>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <ptpd_net_send>:

static ssize_t ptpd_net_send(const octet_t *buf, int16_t  length, TimeInternal *time, const int32_t * addr, struct udp_pcb * pcb)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	460b      	mov	r3, r1
 80042ea:	817b      	strh	r3, [r7, #10]
  err_t result;
  struct pbuf *p;
  PtpTime_t timestamp;

  // Allocate the tx pbuf based on the current size.
  p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80042f2:	4619      	mov	r1, r3
 80042f4:	2036      	movs	r0, #54	@ 0x36
 80042f6:	f016 f92f 	bl	801a558 <pbuf_alloc>
 80042fa:	61f8      	str	r0, [r7, #28]
  if (NULL == p)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03c      	beq.n	800437c <ptpd_net_send+0xa0>
    ERROR("PTPD: Failed to allocate transmit protocol buffer\n");
    goto fail01;
  }

  // Copy the incoming data into the pbuf payload.
  result = pbuf_take(p, buf, length);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	461a      	mov	r2, r3
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	69f8      	ldr	r0, [r7, #28]
 800430a:	f016 feb3 	bl	801b074 <pbuf_take>
 800430e:	4603      	mov	r3, r0
 8004310:	76fb      	strb	r3, [r7, #27]

  // Fill in the magic timestamp word so that the MAC interface records the TX time
  p->timestamp_sec = PTP_TIMESTAMP_RECORD_MAGIC;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <ptpd_net_send+0xb0>)
 8004316:	611a      	str	r2, [r3, #16]
  p->timestamp_nsec = PTP_TIMESTAMP_RECORD_MAGIC;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <ptpd_net_send+0xb0>)
 800431c:	615a      	str	r2, [r3, #20]

  if (ERR_OK != result)
 800431e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <ptpd_net_send+0x50>
  {
    ERROR("PTPD: Failed to copy data into protocol buffer (%i)\n", result);
    length = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	817b      	strh	r3, [r7, #10]
    goto fail02;
 800432a:	e023      	b.n	8004374 <ptpd_net_send+0x98>
  }

  // Send the buffer.
  result = udp_sendto(pcb, p, (void *)addr, pcb->local_port);
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	8a5b      	ldrh	r3, [r3, #18]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004336:	f01d fb59 	bl	80219ec <udp_sendto>
 800433a:	4603      	mov	r3, r0
 800433c:	76fb      	strb	r3, [r7, #27]
  if (ERR_OK != result)
 800433e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <ptpd_net_send+0x70>
  {
    ERROR("PTPD: Failed to send data (%i)\n", result);
    length = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	817b      	strh	r3, [r7, #10]
    goto fail02;
 800434a:	e013      	b.n	8004374 <ptpd_net_send+0x98>
  }

  // Try to get the actual packet TX time from the MAC
  if (time != NULL && ethernetif_GetTxTimestamp(&timestamp, 100))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00f      	beq.n	8004372 <ptpd_net_send+0x96>
 8004352:	f107 0310 	add.w	r3, r7, #16
 8004356:	2164      	movs	r1, #100	@ 0x64
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc fb8d 	bl	8000a78 <ethernetif_GetTxTimestamp>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d006      	beq.n	8004372 <ptpd_net_send+0x96>
  {
    time->seconds = timestamp.tv_sec;
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
    time->nanoseconds = timestamp.tv_nsec;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	e000      	b.n	8004374 <ptpd_net_send+0x98>
  }

fail02:
 8004372:	bf00      	nop
  pbuf_free(p);
 8004374:	69f8      	ldr	r0, [r7, #28]
 8004376:	f016 fc05 	bl	801ab84 <pbuf_free>
 800437a:	e000      	b.n	800437e <ptpd_net_send+0xa2>
    goto fail01;
 800437c:	bf00      	nop

fail01:
  return length;
 800437e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	55667788 	.word	0x55667788

08004390 <ptpd_net_send_event>:

ssize_t ptpd_net_send_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal *time)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, time, &net_path->multicastAddr, net_path->eventPcb);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f7ff ff92 	bl	80042dc <ptpd_net_send>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <ptpd_net_send_peer_event>:

ssize_t ptpd_net_send_peer_event(NetPath *net_path, const octet_t *buf, int16_t  length, TimeInternal* time)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, time, &net_path->peerMulticastAddr, net_path->eventPcb);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0208 	add.w	r2, r3, #8
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7ff ff78 	bl	80042dc <ptpd_net_send>
 80043ec:	4603      	mov	r3, r0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <ptpd_net_send_general>:

ssize_t ptpd_net_send_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, NULL, &net_path->multicastAddr, net_path->generalPcb);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1d1a      	adds	r2, r3, #4
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	2200      	movs	r2, #0
 8004416:	68b8      	ldr	r0, [r7, #8]
 8004418:	f7ff ff60 	bl	80042dc <ptpd_net_send>
 800441c:	4603      	mov	r3, r0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <ptpd_net_send_peer_general>:

ssize_t ptpd_net_send_peer_general(NetPath *net_path, const octet_t *buf, int16_t  length)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af02      	add	r7, sp, #8
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  return ptpd_net_send(buf, length, NULL, &net_path->peerMulticastAddr, net_path->generalPcb);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f103 0208 	add.w	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	2200      	movs	r2, #0
 8004448:	68b8      	ldr	r0, [r7, #8]
 800444a:	f7ff ff47 	bl	80042dc <ptpd_net_send>
 800444e:	4603      	mov	r3, r0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <ptpd_protocol_to_state>:
#endif

// Change state of PTP stack. Perform actions required when leaving
// 'port_state' and entering 'state'.
void ptpd_protocol_to_state(PtpClock *ptp_clock, uint8_t state)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  DBG("leaving state %s\n", state_string(ptp_clock->portDS.portState));

  ptp_clock->messageActivity = true;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  // Leaving state tasks.
  switch (ptp_clock->portDS.portState)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004472:	3b03      	subs	r3, #3
 8004474:	2b05      	cmp	r3, #5
 8004476:	d851      	bhi.n	800451c <ptpd_protocol_to_state+0xc4>
 8004478:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <ptpd_protocol_to_state+0x28>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	08004501 	.word	0x08004501
 8004484:	0800450f 	.word	0x0800450f
 8004488:	08004499 	.word	0x08004499
 800448c:	080044ed 	.word	0x080044ed
 8004490:	080044b3 	.word	0x080044b3
 8004494:	080044b3 	.word	0x080044b3
  {
    case PTP_MASTER:
      ptpd_servo_init_clock(ptp_clock);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 fb59 	bl	8005b50 <ptpd_servo_init_clock>
      ptpd_timer_stop(SYNC_INTERVAL_TIMER);
 800449e:	2002      	movs	r0, #2
 80044a0:	f001 ff8e 	bl	80063c0 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_INTERVAL_TIMER);
 80044a4:	2004      	movs	r0, #4
 80044a6:	f001 ff8b 	bl	80063c0 <ptpd_timer_stop>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f001 ff88 	bl	80063c0 <ptpd_timer_stop>
      break;
 80044b0:	e035      	b.n	800451e <ptpd_protocol_to_state+0xc6>

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	2b07      	cmp	r3, #7
 80044b6:	d032      	beq.n	800451e <ptpd_protocol_to_state+0xc6>
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d02f      	beq.n	800451e <ptpd_protocol_to_state+0xc6>
      {
        break;
      }
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 80044be:	2003      	movs	r0, #3
 80044c0:	f001 ff7e 	bl	80063c0 <ptpd_timer_stop>
      switch (ptp_clock->portDS.delayMechanism)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d002      	beq.n	80044d4 <ptpd_protocol_to_state+0x7c>
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d004      	beq.n	80044dc <ptpd_protocol_to_state+0x84>
        case P2P:
          ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
          break;
        default:
          // None.
          break;
 80044d2:	e007      	b.n	80044e4 <ptpd_protocol_to_state+0x8c>
          ptpd_timer_stop(DELAYREQ_INTERVAL_TIMER);
 80044d4:	2001      	movs	r0, #1
 80044d6:	f001 ff73 	bl	80063c0 <ptpd_timer_stop>
          break;
 80044da:	e003      	b.n	80044e4 <ptpd_protocol_to_state+0x8c>
          ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 80044dc:	2000      	movs	r0, #0
 80044de:	f001 ff6f 	bl	80063c0 <ptpd_timer_stop>
          break;
 80044e2:	bf00      	nop
      }
      ptpd_servo_init_clock(ptp_clock);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f001 fb33 	bl	8005b50 <ptpd_servo_init_clock>
      break;
 80044ea:	e018      	b.n	800451e <ptpd_protocol_to_state+0xc6>

    case PTP_PASSIVE:
      ptpd_servo_init_clock(ptp_clock);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 fb2f 	bl	8005b50 <ptpd_servo_init_clock>
      ptpd_timer_stop(PDELAYREQ_INTERVAL_TIMER);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f001 ff64 	bl	80063c0 <ptpd_timer_stop>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 80044f8:	2003      	movs	r0, #3
 80044fa:	f001 ff61 	bl	80063c0 <ptpd_timer_stop>
      break;
 80044fe:	e00e      	b.n	800451e <ptpd_protocol_to_state+0xc6>

    case PTP_LISTENING:
      ptpd_servo_init_clock(ptp_clock);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f001 fb25 	bl	8005b50 <ptpd_servo_init_clock>
      ptpd_timer_stop(ANNOUNCE_RECEIPT_TIMER);
 8004506:	2003      	movs	r0, #3
 8004508:	f001 ff5a 	bl	80063c0 <ptpd_timer_stop>
      break;
 800450c:	e007      	b.n	800451e <ptpd_protocol_to_state+0xc6>

    case PTP_PRE_MASTER:
      ptpd_servo_init_clock(ptp_clock);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f001 fb1e 	bl	8005b50 <ptpd_servo_init_clock>
      ptpd_timer_stop(QUALIFICATION_TIMEOUT);
 8004514:	2005      	movs	r0, #5
 8004516:	f001 ff53 	bl	80063c0 <ptpd_timer_stop>
      break;
 800451a:	e000      	b.n	800451e <ptpd_protocol_to_state+0xc6>

    default:
      break;
 800451c:	bf00      	nop
  }

  DBG("entering state %s\n", state_string(state));

  // Entering state tasks.
  switch (state)
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	2b08      	cmp	r3, #8
 8004522:	f200 816b 	bhi.w	80047fc <ptpd_protocol_to_state+0x3a4>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <ptpd_protocol_to_state+0xd4>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004551 	.word	0x08004551
 8004530:	08004563 	.word	0x08004563
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004577 	.word	0x08004577
 800453c:	080045c7 	.word	0x080045c7
 8004540:	080045c7 	.word	0x080045c7
 8004544:	08004691 	.word	0x08004691
 8004548:	0800471f 	.word	0x0800471f
 800454c:	080047f3 	.word	0x080047f3
  {
    case PTP_INITIALIZING:
      ptp_clock->portDS.portState = PTP_INITIALIZING;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_INITIALIZING;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering INITIALIZING state");
      break;
 8004560:	e14d      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_FAULTY:
      ptp_clock->portDS.portState = PTP_FAULTY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering FAULTY state");
      break;
 800456a:	e148      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_DISABLED:
      ptp_clock->portDS.portState = PTP_DISABLED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering DISABLED state");
      break;
 8004574:	e143      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_LISTENING:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800457c:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004584:	2b00      	cmp	r3, #0
 8004586:	dd07      	ble.n	8004598 <ptpd_protocol_to_state+0x140>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800458e:	461a      	mov	r2, r3
 8004590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004594:	4093      	lsls	r3, r2
 8004596:	e007      	b.n	80045a8 <ptpd_protocol_to_state+0x150>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800459e:	425b      	negs	r3, r3
 80045a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045a4:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	2003      	movs	r0, #3
 80045b0:	f001 feca 	bl	8006348 <ptpd_timer_start>
      ptp_clock->portDS.portState = PTP_LISTENING;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2203      	movs	r2, #3
 80045b8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      ptp_clock->recommendedState = PTP_LISTENING;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2203      	movs	r2, #3
 80045c0:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
      //syslog_printf(SYSLOG_NOTICE, "PTPD: entering LISTENING state");
      break;
 80045c4:	e11b      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>
      // ptp_clock->portDS.portState = PTP_PRE_MASTER;
      // break;

    case PTP_MASTER:
      // It may change during slave state.
      ptp_clock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2203      	movs	r2, #3
 80045ca:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
      ptpd_timer_start(SYNC_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logSyncInterval));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dd07      	ble.n	80045e8 <ptpd_protocol_to_state+0x190>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045de:	461a      	mov	r2, r3
 80045e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045e4:	4093      	lsls	r3, r2
 80045e6:	e007      	b.n	80045f8 <ptpd_protocol_to_state+0x1a0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 80045ee:	425b      	negs	r3, r3
 80045f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045f4:	fa42 f303 	asr.w	r3, r2, r3
 80045f8:	4619      	mov	r1, r3
 80045fa:	2002      	movs	r0, #2
 80045fc:	f001 fea4 	bl	8006348 <ptpd_timer_start>
      DBG("SYNC INTERVAL TIMER : %li \n", pow2ms(ptp_clock->portDS.logSyncInterval));
      ptpd_timer_start(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004606:	2b00      	cmp	r3, #0
 8004608:	dd07      	ble.n	800461a <ptpd_protocol_to_state+0x1c2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004616:	4093      	lsls	r3, r2
 8004618:	e007      	b.n	800462a <ptpd_protocol_to_state+0x1d2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004620:	425b      	negs	r3, r3
 8004622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004626:	fa42 f303 	asr.w	r3, r2, r3
 800462a:	4619      	mov	r1, r3
 800462c:	2004      	movs	r0, #4
 800462e:	f001 fe8b 	bl	8006348 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8004638:	2b01      	cmp	r3, #1
 800463a:	d021      	beq.n	8004680 <ptpd_protocol_to_state+0x228>
 800463c:	2b02      	cmp	r3, #2
 800463e:	d121      	bne.n	8004684 <ptpd_protocol_to_state+0x22c>
      {
        case E2E:
            // None.
            break;
        case P2P:
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval) + 1));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004646:	2b00      	cmp	r3, #0
 8004648:	dd08      	ble.n	800465c <ptpd_protocol_to_state+0x204>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004650:	461a      	mov	r2, r3
 8004652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004656:	4093      	lsls	r3, r2
 8004658:	3301      	adds	r3, #1
 800465a:	e008      	b.n	800466e <ptpd_protocol_to_state+0x216>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8004662:	425b      	negs	r3, r3
 8004664:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004668:	fa42 f303 	asr.w	r3, r2, r3
 800466c:	3301      	adds	r3, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fdd2 	bl	8006218 <ptpd_get_rand>
 8004674:	4603      	mov	r3, r0
 8004676:	4619      	mov	r1, r3
 8004678:	2000      	movs	r0, #0
 800467a:	f001 fe65 	bl	8006348 <ptpd_timer_start>
            break;
 800467e:	e002      	b.n	8004686 <ptpd_protocol_to_state+0x22e>
            break;
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <ptpd_protocol_to_state+0x22e>
        default:
            break;
 8004684:	bf00      	nop
      }
      ptp_clock->portDS.portState = PTP_MASTER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2205      	movs	r2, #5
 800468a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 800468e:	e0b6      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_PASSIVE:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004696:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dd07      	ble.n	80046b2 <ptpd_protocol_to_state+0x25a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046ae:	4093      	lsls	r3, r2
 80046b0:	e007      	b.n	80046c2 <ptpd_protocol_to_state+0x26a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80046b8:	425b      	negs	r3, r3
 80046ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046be:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4619      	mov	r1, r3
 80046c8:	2003      	movs	r0, #3
 80046ca:	f001 fe3d 	bl	8006348 <ptpd_timer_start>
      if (ptp_clock->portDS.delayMechanism == P2P)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d11d      	bne.n	8004714 <ptpd_protocol_to_state+0x2bc>
      {
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db08      	blt.n	80046f4 <ptpd_protocol_to_state+0x29c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046e8:	3301      	adds	r3, #1
 80046ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	e007      	b.n	8004704 <ptpd_protocol_to_state+0x2ac>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80046fa:	43db      	mvns	r3, r3
 80046fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004700:	fa42 f303 	asr.w	r3, r2, r3
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fd87 	bl	8006218 <ptpd_get_rand>
 800470a:	4603      	mov	r3, r0
 800470c:	4619      	mov	r1, r3
 800470e:	2000      	movs	r0, #0
 8004710:	f001 fe1a 	bl	8006348 <ptpd_timer_start>
      }
      ptp_clock->portDS.portState = PTP_PASSIVE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2206      	movs	r2, #6
 8004718:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 800471c:	e06f      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_UNCALIBRATED:
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004724:	4619      	mov	r1, r3
                                               pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800472c:	2b00      	cmp	r3, #0
 800472e:	dd07      	ble.n	8004740 <ptpd_protocol_to_state+0x2e8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004736:	461a      	mov	r2, r3
 8004738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800473c:	4093      	lsls	r3, r2
 800473e:	e007      	b.n	8004750 <ptpd_protocol_to_state+0x2f8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004746:	425b      	negs	r3, r3
 8004748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800474c:	fa42 f303 	asr.w	r3, r2, r3
      ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4619      	mov	r1, r3
 8004756:	2003      	movs	r0, #3
 8004758:	f001 fdf6 	bl	8006348 <ptpd_timer_start>
      switch (ptp_clock->portDS.delayMechanism)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8004762:	2b01      	cmp	r3, #1
 8004764:	d002      	beq.n	800476c <ptpd_protocol_to_state+0x314>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d01f      	beq.n	80047aa <ptpd_protocol_to_state+0x352>
        case P2P:
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
            break;
        default:
            // None.
            break;
 800476a:	e03d      	b.n	80047e8 <ptpd_protocol_to_state+0x390>
            ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 8004772:	2b00      	cmp	r3, #0
 8004774:	db08      	blt.n	8004788 <ptpd_protocol_to_state+0x330>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 800477c:	3301      	adds	r3, #1
 800477e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	e007      	b.n	8004798 <ptpd_protocol_to_state+0x340>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 800478e:	43db      	mvns	r3, r3
 8004790:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004794:	fa42 f303 	asr.w	r3, r2, r3
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fd3d 	bl	8006218 <ptpd_get_rand>
 800479e:	4603      	mov	r3, r0
 80047a0:	4619      	mov	r1, r3
 80047a2:	2001      	movs	r0, #1
 80047a4:	f001 fdd0 	bl	8006348 <ptpd_timer_start>
            break;
 80047a8:	e01e      	b.n	80047e8 <ptpd_protocol_to_state+0x390>
            ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db08      	blt.n	80047c6 <ptpd_protocol_to_state+0x36e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80047ba:	3301      	adds	r3, #1
 80047bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	e007      	b.n	80047d6 <ptpd_protocol_to_state+0x37e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80047cc:	43db      	mvns	r3, r3
 80047ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047d2:	fa42 f303 	asr.w	r3, r2, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fd1e 	bl	8006218 <ptpd_get_rand>
 80047dc:	4603      	mov	r3, r0
 80047de:	4619      	mov	r1, r3
 80047e0:	2000      	movs	r0, #0
 80047e2:	f001 fdb1 	bl	8006348 <ptpd_timer_start>
            break;
 80047e6:	bf00      	nop
      }
      ptp_clock->portDS.portState = PTP_UNCALIBRATED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2207      	movs	r2, #7
 80047ec:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 80047f0:	e005      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    case PTP_SLAVE:
      ptp_clock->portDS.portState = PTP_SLAVE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2208      	movs	r2, #8
 80047f6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
      break;
 80047fa:	e000      	b.n	80047fe <ptpd_protocol_to_state+0x3a6>

    default:
      break;
 80047fc:	bf00      	nop
  }
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <ptpd_protocol_do_init>:

static bool ptpd_protocol_do_init(PtpClock *ptp_clock)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  // Initialize networking.
  ptpd_net_shutdown(&ptp_clock->netPath);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fc74 	bl	8004104 <ptpd_net_shutdown>

  // Initialize the network.
  if (!ptpd_net_init(&ptp_clock->netPath, ptp_clock))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fbb1 	bl	8003f8c <ptpd_net_init>
 800482a:	4603      	mov	r3, r0
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <ptpd_protocol_do_init+0x32>
  {
    ERROR("ptpd_protocol_do_init: failed to initialize network\n");
    return false;
 8004836:	2300      	movs	r3, #0
 8004838:	e012      	b.n	8004860 <ptpd_protocol_do_init+0x58>
  }
  else
  {
    // Initialize other stuff.
    ptpd_clock_init(ptp_clock);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fd ff1d 	bl	800267a <ptpd_clock_init>
    ptpd_timer_init();
 8004840:	f001 fd56 	bl	80062f0 <ptpd_timer_init>
    ptpd_servo_init_clock(ptp_clock);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 f983 	bl	8005b50 <ptpd_servo_init_clock>
    ptpd_m1(ptp_clock);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe f8d7 	bl	80029fe <ptpd_m1>
    ptpd_msg_pack_header(ptp_clock, ptp_clock->msgObuf);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fe fd3a 	bl	80032d2 <ptpd_msg_pack_header>
    return true;
 800485e:	2301      	movs	r3, #1
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <ptpd_protocol_do_state>:

// Run PTP stack in current state.
// Handle actions and events for 'port_state'.
void ptpd_protocol_do_state(PtpClock *ptp_clock)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  ptp_clock->messageActivity = false;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  switch (ptp_clock->portDS.portState)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800487e:	3b03      	subs	r3, #3
 8004880:	2b05      	cmp	r3, #5
 8004882:	d82f      	bhi.n	80048e4 <ptpd_protocol_do_state+0x7c>
    case PTP_SLAVE:
    case PTP_PRE_MASTER:
    case PTP_MASTER:
    case PTP_PASSIVE:
      // State decision event.
      if (get_flag(ptp_clock->events, STATE_DECISION_EVENT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d02a      	beq.n	80048e8 <ptpd_protocol_do_state+0x80>
      {
        DBGV("event STATE_DECISION_EVENT\n");
        clear_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004898:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
        ptp_clock->recommendedState = ptpd_bmc(ptp_clock);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe fb61 	bl	8002f6a <ptpd_bmc>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
        DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));

        switch (ptp_clock->recommendedState)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 80048b8:	3b05      	subs	r3, #5
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d80e      	bhi.n	80048dc <ptpd_protocol_do_state+0x74>
        {
          case PTP_MASTER:
          case PTP_PASSIVE:
            if (ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <ptpd_protocol_do_state+0x6a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80048ce:	2bff      	cmp	r3, #255	@ 0xff
 80048d0:	d106      	bne.n	80048e0 <ptpd_protocol_do_state+0x78>
            {
                ptp_clock->recommendedState = PTP_LISTENING;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
                DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));
            }
            break;
 80048da:	e001      	b.n	80048e0 <ptpd_protocol_do_state+0x78>

          default:
            break;
 80048dc:	bf00      	nop
 80048de:	e003      	b.n	80048e8 <ptpd_protocol_do_state+0x80>
            break;
 80048e0:	bf00      	nop
        }
      }
      break;
 80048e2:	e001      	b.n	80048e8 <ptpd_protocol_do_state+0x80>

    default:
      break;
 80048e4:	bf00      	nop
 80048e6:	e000      	b.n	80048ea <ptpd_protocol_do_state+0x82>
      break;
 80048e8:	bf00      	nop
  }

  switch (ptp_clock->recommendedState)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	f200 80a6 	bhi.w	8004a42 <ptpd_protocol_do_state+0x1da>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <ptpd_protocol_do_state+0x94>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004a43 	.word	0x08004a43
 8004900:	08004a43 	.word	0x08004a43
 8004904:	08004a43 	.word	0x08004a43
 8004908:	08004a29 	.word	0x08004a29
 800490c:	08004a43 	.word	0x08004a43
 8004910:	08004921 	.word	0x08004921
 8004914:	08004959 	.word	0x08004959
 8004918:	08004a43 	.word	0x08004a43
 800491c:	08004973 	.word	0x08004973
  {
    case PTP_MASTER:
      switch (ptp_clock->portDS.portState)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004926:	2b04      	cmp	r3, #4
 8004928:	d002      	beq.n	8004930 <ptpd_protocol_do_state+0xc8>
 800492a:	2b05      	cmp	r3, #5
 800492c:	d010      	beq.n	8004950 <ptpd_protocol_do_state+0xe8>
 800492e:	e00a      	b.n	8004946 <ptpd_protocol_do_state+0xde>
      {
        case PTP_PRE_MASTER:
          if (ptpd_timer_expired(QUALIFICATION_TIMEOUT))
 8004930:	2005      	movs	r0, #5
 8004932:	f001 fd65 	bl	8006400 <ptpd_timer_expired>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <ptpd_protocol_do_state+0xec>
            ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 800493c:	2105      	movs	r1, #5
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fd8a 	bl	8004458 <ptpd_protocol_to_state>
          break;
 8004944:	e006      	b.n	8004954 <ptpd_protocol_do_state+0xec>
        case PTP_MASTER:
          break;
        default:
          ptpd_protocol_to_state(ptp_clock, PTP_PRE_MASTER);
 8004946:	2104      	movs	r1, #4
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fd85 	bl	8004458 <ptpd_protocol_to_state>
          break;
 800494e:	e002      	b.n	8004956 <ptpd_protocol_do_state+0xee>
          break;
 8004950:	bf00      	nop
 8004952:	e07b      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>
          break;
 8004954:	bf00      	nop
      }
      break;
 8004956:	e079      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>

    case PTP_PASSIVE:
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 8004964:	429a      	cmp	r2, r3
 8004966:	d06e      	beq.n	8004a46 <ptpd_protocol_do_state+0x1de>
        ptpd_protocol_to_state(ptp_clock, PTP_PASSIVE);
 8004968:	2106      	movs	r1, #6
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff fd74 	bl	8004458 <ptpd_protocol_to_state>
      break;
 8004970:	e069      	b.n	8004a46 <ptpd_protocol_do_state+0x1de>

    case PTP_SLAVE:
      switch (ptp_clock->portDS.portState)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004978:	2b07      	cmp	r3, #7
 800497a:	d002      	beq.n	8004982 <ptpd_protocol_do_state+0x11a>
 800497c:	2b08      	cmp	r3, #8
 800497e:	d023      	beq.n	80049c8 <ptpd_protocol_do_state+0x160>
 8004980:	e049      	b.n	8004a16 <ptpd_protocol_do_state+0x1ae>
      {
        case PTP_UNCALIBRATED:
          if (get_flag(ptp_clock->events, MASTER_CLOCK_SELECTED))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <ptpd_protocol_do_state+0x140>
          {
            DBG("event MASTER_CLOCK_SELECTED\n");
            clear_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004996:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
            ptpd_protocol_to_state(ptp_clock, PTP_SLAVE);
 80049a0:	2108      	movs	r1, #8
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fd58 	bl	8004458 <ptpd_protocol_to_state>
          }
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d034      	beq.n	8004a20 <ptpd_protocol_do_state+0x1b8>
          {
            DBG("event MASTER_CLOCK_CHANGED\n");
            clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
          }
          break;
 80049c6:	e02b      	b.n	8004a20 <ptpd_protocol_do_state+0x1b8>

        case PTP_SLAVE:
          if (get_flag(ptp_clock->events, SYNCHRONIZATION_FAULT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <ptpd_protocol_do_state+0x186>
          {
              DBG("event SYNCHRONIZATION_FAULT\n");
              clear_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 80049e6:	2107      	movs	r1, #7
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fd35 	bl	8004458 <ptpd_protocol_to_state>
          }
          if (get_flag(ptp_clock->events, MASTER_CLOCK_CHANGED))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80049f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <ptpd_protocol_do_state+0x1bc>
          {
              DBG("event MASTER_CLOCK_CHANGED\n");
              clear_flag(ptp_clock->events, MASTER_CLOCK_CHANGED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004a02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
              ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 8004a0c:	2107      	movs	r1, #7
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fd22 	bl	8004458 <ptpd_protocol_to_state>
          }
          break;
 8004a14:	e006      	b.n	8004a24 <ptpd_protocol_do_state+0x1bc>

        default:
          ptpd_protocol_to_state(ptp_clock, PTP_UNCALIBRATED);
 8004a16:	2107      	movs	r1, #7
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fd1d 	bl	8004458 <ptpd_protocol_to_state>
          break;
 8004a1e:	e002      	b.n	8004a26 <ptpd_protocol_do_state+0x1be>
          break;
 8004a20:	bf00      	nop
 8004a22:	e013      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>
          break;
 8004a24:	bf00      	nop
      }
      break;
 8004a26:	e011      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>

    case PTP_LISTENING:
      if (ptp_clock->portDS.portState != ptp_clock->recommendedState)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3409 	ldrb.w	r3, [r3, #1033]	@ 0x409
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d008      	beq.n	8004a4a <ptpd_protocol_do_state+0x1e2>
      {
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004a38:	2103      	movs	r1, #3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fd0c 	bl	8004458 <ptpd_protocol_to_state>
      }
      break;
 8004a40:	e003      	b.n	8004a4a <ptpd_protocol_do_state+0x1e2>
    case PTP_INITIALIZING:
      break;

    default:
      DBG("ptpd_protocol_do_state: unrecognized recommended state %li\n", ptp_clock->recommendedState);
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <ptpd_protocol_do_state+0x1e4>
      break;
 8004a4a:	bf00      	nop
  }

  switch (ptp_clock->portDS.portState)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d87b      	bhi.n	8004b4e <ptpd_protocol_do_state+0x2e6>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <ptpd_protocol_do_state+0x1f4>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004aab 	.word	0x08004aab
 8004a68:	08004ab3 	.word	0x08004ab3
 8004a6c:	08004b4f 	.word	0x08004b4f
 8004a70:	08004b1d 	.word	0x08004b1d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004ab3 	.word	0x08004ab3
 8004a7c:	08004ab3 	.word	0x08004ab3
  {
    case PTP_INITIALIZING:
      if (ptpd_protocol_do_init(ptp_clock) == true)
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fec1 	bl	8004808 <ptpd_protocol_do_init>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <ptpd_protocol_do_state+0x22e>
      {
        ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004a8c:	2103      	movs	r1, #3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fce2 	bl	8004458 <ptpd_protocol_to_state>
      }
      else
      {
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
      }
      break;
 8004a94:	e05e      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004a96:	2101      	movs	r1, #1
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff fcdd 	bl	8004458 <ptpd_protocol_to_state>
      break;
 8004a9e:	e059      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>

    case PTP_FAULTY:
      // Imaginary troubleshooting.
      DBG("event FAULT_CLEARED for state PTP_FAULT\n");
      ptpd_protocol_to_state(ptp_clock, PTP_INITIALIZING);
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fcd8 	bl	8004458 <ptpd_protocol_to_state>
      return;
 8004aa8:	e054      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>

    case PTP_DISABLED:
      handle(ptp_clock);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f856 	bl	8004b5c <handle>
      break;
 8004ab0:	e050      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>

    case PTP_LISTENING:
    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
    case PTP_PASSIVE:
      if (ptpd_timer_expired(ANNOUNCE_RECEIPT_TIMER))
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	f001 fca4 	bl	8006400 <ptpd_timer_expired>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d02a      	beq.n	8004b14 <ptpd_protocol_do_state+0x2ac>
      {
        DBGV("event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES for state %s\n",
             state_string(ptp_clock->portDS.portState));
        ptp_clock->foreignMasterDS.count = 0;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ptp_clock->foreignMasterDS.i = 0;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        if (!(ptp_clock->defaultDS.slaveOnly || (ptp_clock->defaultDS.clockQuality.clockClass == 255)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <ptpd_protocol_do_state+0x298>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8004ae4:	2bff      	cmp	r3, #255	@ 0xff
 8004ae6:	d00b      	beq.n	8004b00 <ptpd_protocol_do_state+0x298>
        {
          ptpd_m1(ptp_clock);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fd ff88 	bl	80029fe <ptpd_m1>
          ptp_clock->recommendedState = PTP_MASTER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2205      	movs	r2, #5
 8004af2:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
          DBGV("recommending state %s\n", state_string(ptp_clock->recommendedState));
          ptpd_protocol_to_state(ptp_clock, PTP_MASTER);
 8004af6:	2105      	movs	r1, #5
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fcad 	bl	8004458 <ptpd_protocol_to_state>
        }
        else if (ptp_clock->portDS.portState != PTP_LISTENING)
        {
          ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
        }
        break;
 8004afe:	e028      	b.n	8004b52 <ptpd_protocol_do_state+0x2ea>
        else if (ptp_clock->portDS.portState != PTP_LISTENING)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d023      	beq.n	8004b52 <ptpd_protocol_do_state+0x2ea>
          ptpd_protocol_to_state(ptp_clock, PTP_LISTENING);
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fca3 	bl	8004458 <ptpd_protocol_to_state>
        break;
 8004b12:	e01e      	b.n	8004b52 <ptpd_protocol_do_state+0x2ea>
      }
      handle(ptp_clock);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f821 	bl	8004b5c <handle>
      break;
 8004b1a:	e01b      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>

    case PTP_MASTER:
      if (ptpd_timer_expired(SYNC_INTERVAL_TIMER))
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	f001 fc6f 	bl	8006400 <ptpd_timer_expired>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <ptpd_protocol_do_state+0x2c6>
      {
        DBGV("event SYNC_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
        issue_sync(ptp_clock);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fe48 	bl	80057be <issue_sync>
      }
      if (ptpd_timer_expired(ANNOUNCE_INTERVAL_TIMER))
 8004b2e:	2004      	movs	r0, #4
 8004b30:	f001 fc66 	bl	8006400 <ptpd_timer_expired>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <ptpd_protocol_do_state+0x2d8>
      {
        DBGV("event ANNOUNCE_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
        issue_announce(ptp_clock);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fe14 	bl	8005768 <issue_announce>
      }
      handle(ptp_clock);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f80b 	bl	8004b5c <handle>
      issue_delay_req_timer_expired(ptp_clock);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fda4 	bl	8005694 <issue_delay_req_timer_expired>
      break;
 8004b4c:	e002      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>

    default:
      DBG("ptpd_protocol_do_state: do unrecognized state %li\n", ptp_clock->portDS.portState);
      break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <ptpd_protocol_do_state+0x2ec>
        break;
 8004b52:	bf00      	nop
  }
}
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <handle>:

// Check and handle received messages.
static void handle(PtpClock *ptp_clock)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  int ret;
  bool is_from_self;
  TimeInternal time = { 0, 0 };
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]

  if (!ptp_clock->messageActivity)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3408 	ldrb.w	r3, [r3, #1032]	@ 0x408
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <handle+0x48>
  {
    ret = ptpd_net_select(&ptp_clock->netPath, 0);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fafd 	bl	8004184 <ptpd_net_select>
 8004b8a:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da04      	bge.n	8004b9c <handle+0x40>
    {
      ERROR("handle: failed to poll sockets\n");
      ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004b92:	2101      	movs	r1, #1
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fc5f 	bl	8004458 <ptpd_protocol_to_state>
      return;
 8004b9a:	e0f8      	b.n	8004d8e <handle+0x232>
    }
    else if (!ret)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80ec 	beq.w	8004d7c <handle+0x220>
  }

  DBGVV("handle: something\n");

  // Receive an event.
  ptp_clock->msgIbufLength = ptpd_net_recv_event(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8004bb0:	f107 0208 	add.w	r2, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7ff fb6c 	bl	8004292 <ptpd_net_recv_event>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364

  // Local time is not UTC, we can calculate UTC on demand, otherwise UTC time is not used
  // time.seconds += ptp_clock->timePropertiesDS.currentUtcOffset;
  DBGV("handle: ptpd_net_recv_event returned %li\n", ptp_clock->msgIbufLength);

  if (ptp_clock->msgIbufLength < 0)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da04      	bge.n	8004bd6 <handle+0x7a>
  {
    ERROR("handle: failed to receive on the event socket\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004bcc:	2101      	movs	r1, #1
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fc42 	bl	8004458 <ptpd_protocol_to_state>
    return;
 8004bd4:	e0db      	b.n	8004d8e <handle+0x232>
  }
  else if (!ptp_clock->msgIbufLength)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11e      	bne.n	8004c1e <handle+0xc2>
  {
    // Receive a general packet.
    ptp_clock->msgIbufLength = ptpd_net_recv_general(&ptp_clock->netPath, ptp_clock->msgIbuf, &time);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8004bec:	f107 0208 	add.w	r2, r7, #8
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f7ff fb60 	bl	80042b6 <ptpd_net_recv_general>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    DBGV("handle: ptpd_net_recv_general returned %li\n", ptp_clock->msgIbufLength);
    if (ptp_clock->msgIbufLength < 0)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da04      	bge.n	8004c12 <handle+0xb6>
    {
      ERROR("handle: failed to receive on the general socket\n");
      ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fc24 	bl	8004458 <ptpd_protocol_to_state>
      return;
 8004c10:	e0bd      	b.n	8004d8e <handle+0x232>
    }
    else if (!ptp_clock->msgIbufLength)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80b1 	beq.w	8004d80 <handle+0x224>
      return;
  }

  ptp_clock->messageActivity = true;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408

  if (ptp_clock->msgIbufLength < HEADER_LENGTH)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004c2c:	2b21      	cmp	r3, #33	@ 0x21
 8004c2e:	dc04      	bgt.n	8004c3a <handle+0xde>
  {
    ERROR("handle: message shorter than header length\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004c30:	2101      	movs	r1, #1
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fc10 	bl	8004458 <ptpd_protocol_to_state>
    return;
 8004c38:	e0a9      	b.n	8004d8e <handle+0x232>
  }

  ptpd_msg_unpack_header(ptp_clock->msgIbuf, &ptp_clock->msgTmpHeader);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	33c0      	adds	r3, #192	@ 0xc0
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe faae 	bl	80031a8 <ptpd_msg_unpack_header>
  DBGV("handle: unpacked message type %li\n", ptp_clock->msgTmpHeader.messageType);

  if (ptp_clock->msgTmpHeader.versionPTP != ptp_clock->portDS.versionNumber)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 20c2 	ldrb.w	r2, [r3, #194]	@ 0xc2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	f040 8093 	bne.w	8004d84 <handle+0x228>
  {
    DBGV("handle: ignore version %li message\n", ptp_clock->msgTmpHeader.versionPTP);
    return;
  }

  if (ptp_clock->msgTmpHeader.domainNumber != ptp_clock->defaultDS.domainNumber)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 20c6 	ldrb.w	r2, [r3, #198]	@ 0xc6
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	f040 808c 	bne.w	8004d88 <handle+0x22c>
    DBGV("handle: ignore message from domainNumber %li\n", ptp_clock->msgTmpHeader.domainNumber);
    return;
  }

  // Spec 9.5.2.2
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                            &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	33d8      	adds	r3, #216	@ 0xd8
  is_from_self = ptpd_is_same_port_identity(&ptp_clock->portDS.portIdentity,
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7fd fdb6 	bl	80027ee <ptpd_is_same_port_identity>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]

  // Subtract the inbound latency adjustment if it is not a loop back and the
  // time stamp seems reasonable.
  if (!is_from_self && time.seconds > 0)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	f083 0301 	eor.w	r3, r3, #1
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <handle+0x150>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dd09      	ble.n	8004cac <handle+0x150>
      ptpd_sub_time(&time, &time, &ptp_clock->inboundLatency);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8004c9e:	f107 0108 	add.w	r1, r7, #8
 8004ca2:	f107 0308 	add.w	r3, r7, #8
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fc2a 	bl	8002500 <ptpd_sub_time>

  switch (ptp_clock->msgTmpHeader.messageType)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004cb2:	2b0d      	cmp	r3, #13
 8004cb4:	d86a      	bhi.n	8004d8c <handle+0x230>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <handle+0x160>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004d1d 	.word	0x08004d1d
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004d49 	.word	0x08004d49
 8004ccc:	08004d8d 	.word	0x08004d8d
 8004cd0:	08004d8d 	.word	0x08004d8d
 8004cd4:	08004d8d 	.word	0x08004d8d
 8004cd8:	08004d8d 	.word	0x08004d8d
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d3d 	.word	0x08004d3d
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004cf5 	.word	0x08004cf5
 8004cec:	08004d71 	.word	0x08004d71
 8004cf0:	08004d65 	.word	0x08004d65
  {
    case ANNOUNCE:
      handle_announce(ptp_clock, is_from_self);
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f84b 	bl	8004d94 <handle_announce>
      break;
 8004cfe:	e046      	b.n	8004d8e <handle+0x232>

    case SYNC:
      handle_sync(ptp_clock, &time, is_from_self);
 8004d00:	7cfa      	ldrb	r2, [r7, #19]
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8fb 	bl	8004f04 <handle_sync>
      break;
 8004d0e:	e03e      	b.n	8004d8e <handle+0x232>

    case FOLLOW_UP:
      handle_follow_up(ptp_clock, is_from_self);
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f9a1 	bl	800505c <handle_follow_up>
      break;
 8004d1a:	e038      	b.n	8004d8e <handle+0x232>

    case DELAY_REQ:
      handle_delay_req(ptp_clock, &time, is_from_self);
 8004d1c:	7cfa      	ldrb	r2, [r7, #19]
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa35 	bl	8005194 <handle_delay_req>
      break;
 8004d2a:	e030      	b.n	8004d8e <handle+0x232>

    case PDELAY_REQ:
      handle_peer_delay_req(ptp_clock, &time, is_from_self);
 8004d2c:	7cfa      	ldrb	r2, [r7, #19]
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 faf5 	bl	8005324 <handle_peer_delay_req>
      break;
 8004d3a:	e028      	b.n	8004d8e <handle+0x232>

    case DELAY_RESP:
      handle_delay_resp(ptp_clock, is_from_self);
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa6b 	bl	800521c <handle_delay_resp>
      break;
 8004d46:	e022      	b.n	8004d8e <handle+0x232>

    case PDELAY_RESP:
      handle_peer_delay_resp(ptp_clock, &time, is_from_self);
 8004d48:	7cfa      	ldrb	r2, [r7, #19]
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb45 	bl	80053e0 <handle_peer_delay_resp>
      break;
 8004d56:	e01a      	b.n	8004d8e <handle+0x232>

    case PDELAY_RESP_FOLLOW_UP:
      handle_peer_delay_resp_follow_up(ptp_clock, is_from_self);
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fbfb 	bl	8005558 <handle_peer_delay_resp_follow_up>
      break;
 8004d62:	e014      	b.n	8004d8e <handle+0x232>

    case MANAGEMENT:
      handle_management(ptp_clock, is_from_self);
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fc7b 	bl	8005664 <handle_management>
      break;
 8004d6e:	e00e      	b.n	8004d8e <handle+0x232>

    case SIGNALING:
      handle_signaling(ptp_clock, is_from_self);
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fc81 	bl	800567c <handle_signaling>
      break;
 8004d7a:	e008      	b.n	8004d8e <handle+0x232>
      return;
 8004d7c:	bf00      	nop
 8004d7e:	e006      	b.n	8004d8e <handle+0x232>
      return;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <handle+0x232>
    return;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <handle+0x232>
    return;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <handle+0x232>

    default:
      DBG("handle: unrecognized message %li\n", ptp_clock->msgTmpHeader.messageType);
      break;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <handle_announce>:

// Spec 9.5.3.
static void handle_announce(PtpClock *ptp_clock, bool is_from_self)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  bool is_from_current_parent = false;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]

  DBGV("handle_announce: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < ANNOUNCE_LENGTH)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004daa:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dac:	dc04      	bgt.n	8004db8 <handle_announce+0x24>
  {
    ERROR("handle_announce: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004dae:	2101      	movs	r1, #1
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fb51 	bl	8004458 <ptpd_protocol_to_state>
    return;
 8004db6:	e0a2      	b.n	8004efe <handle_announce+0x16a>
  }

  if (is_from_self)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 809c 	bne.w	8004ef8 <handle_announce+0x164>
  {
    DBGV("handle_announce: ignore from self\n");
    return;
  }

  switch (ptp_clock->portDS.portState)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	dc7b      	bgt.n	8004ec2 <handle_announce+0x12e>
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	da08      	bge.n	8004de0 <handle_announce+0x4c>
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	dc03      	bgt.n	8004dda <handle_announce+0x46>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f280 8092 	bge.w	8004efc <handle_announce+0x168>
 8004dd8:	e073      	b.n	8004ec2 <handle_announce+0x12e>
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d052      	beq.n	8004e84 <handle_announce+0xf0>
 8004dde:	e070      	b.n	8004ec2 <handle_announce+0x12e>
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      // Valid announce message is received : BMC algorithm will be executed.
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004de6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fd fcf6 	bl	80027ee <ptpd_is_same_port_identity>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	33e8      	adds	r3, #232	@ 0xe8
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fb2d 	bl	8003472 <ptpd_msg_unpack_announce>
      if (is_from_current_parent)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d028      	beq.n	8004e70 <handle_announce+0xdc>
      {
        ptpd_s1(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	33e8      	adds	r3, #232	@ 0xe8
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fe72 	bl	8002b14 <ptpd_s1>
        // Reset Timer handling Announce receipt timeout.
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004e36:	4619      	mov	r1, r3
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd07      	ble.n	8004e52 <handle_announce+0xbe>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e4e:	4093      	lsls	r3, r2
 8004e50:	e007      	b.n	8004e62 <handle_announce+0xce>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e58:	425b      	negs	r3, r3
 8004e5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e5e:	fa42 f303 	asr.w	r3, r2, r3
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	2003      	movs	r0, #3
 8004e6a:	f001 fa6d 	bl	8006348 <ptpd_timer_start>
      {
        DBGV("handle_announce: from another foreign master\n");
        // ptpd_add_foreign takes care  of AnnounceUnpacking.
        ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
      }
      break;
 8004e6e:	e046      	b.n	8004efe <handle_announce+0x16a>
        ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	33e8      	adds	r3, #232	@ 0xe8
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fd fcd6 	bl	800282e <ptpd_add_foreign>
      break;
 8004e82:	e03c      	b.n	8004efe <handle_announce+0x16a>

    case PTP_PASSIVE:
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004e8a:	4619      	mov	r1, r3
                                                 pow2ms(ptp_clock->portDS.logAnnounceInterval));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd07      	ble.n	8004ea6 <handle_announce+0x112>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ea2:	4093      	lsls	r3, r2
 8004ea4:	e007      	b.n	8004eb6 <handle_announce+0x122>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8004eac:	425b      	negs	r3, r3
 8004eae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eb2:	fa42 f303 	asr.w	r3, r2, r3
        ptpd_timer_start(ANNOUNCE_RECEIPT_TIMER, ptp_clock->portDS.announceReceiptTimeout *
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4619      	mov	r1, r3
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	f001 fa43 	bl	8006348 <ptpd_timer_start>
    case PTP_PRE_MASTER:
    case PTP_LISTENING:
    default :

      DBGV("handle_announce: from another foreign master\n");
      ptpd_msg_unpack_announce(ptp_clock->msgIbuf, &ptp_clock->msgTmp.announce);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	33e8      	adds	r3, #232	@ 0xe8
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe facf 	bl	8003472 <ptpd_msg_unpack_announce>

      // Valid announce message is received : BMC algorithm will be executed.
      set_flag(ptp_clock->events, STATE_DECISION_EVENT);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8004eda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
      ptpd_add_foreign(ptp_clock, &ptp_clock->msgTmpHeader, &ptp_clock->msgTmp.announce);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	33e8      	adds	r3, #232	@ 0xe8
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fd fc9c 	bl	800282e <ptpd_add_foreign>

      break;
 8004ef6:	e002      	b.n	8004efe <handle_announce+0x16a>
    return;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <handle_announce+0x16a>
      break;
 8004efc:	bf00      	nop
  }
}
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <handle_sync>:

static void handle_sync(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	@ 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  TimeInternal correction_field;
  TimeInternal origin_timestamp;
  bool is_from_current_parent = false;
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  DBGV("handle_sync: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < SYNC_LENGTH)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8004f1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004f20:	dc04      	bgt.n	8004f2c <handle_sync+0x28>
  {
    ERROR("handle_sync: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8004f22:	2101      	movs	r1, #1
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fa97 	bl	8004458 <ptpd_protocol_to_state>
 8004f2a:	e093      	b.n	8005054 <handle_sync+0x150>
    return;
  }

  switch (ptp_clock->portDS.portState)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	f200 8089 	bhi.w	800504a <handle_sync+0x146>
 8004f38:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <handle_sync+0x3c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	0800504b 	.word	0x0800504b
 8004f44:	0800504b 	.word	0x0800504b
 8004f48:	0800504b 	.word	0x0800504b
 8004f4c:	0800504b 	.word	0x0800504b
 8004f50:	0800504b 	.word	0x0800504b
 8004f54:	08005037 	.word	0x08005037
 8004f58:	08005043 	.word	0x08005043
 8004f5c:	08004f65 	.word	0x08004f65
 8004f60:	08004f65 	.word	0x08004f65
      DBGV("handle_sync: disreguard\n");
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      if (is_from_self)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d171      	bne.n	800504e <handle_sync+0x14a>
      {
        DBGV("handle_sync: ignore from self\n");
        break;
      }
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7fd fc39 	bl	80027ee <ptpd_is_same_port_identity>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if (!is_from_current_parent)
 8004f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d160      	bne.n	8005052 <handle_sync+0x14e>
      {
        DBGV("handle_sync: ignore from another master\n");
        break;
      }
      ptp_clock->timestamp_syncRecv = *time;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8004f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f9c:	e883 0003 	stmia.w	r3, {r0, r1}
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8004fa6:	f107 031c 	add.w	r3, r7, #28
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fd fa03 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>

      if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <handle_sync+0xe4>
      {
        ptp_clock->waitingForFollowUp = true;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
        ptp_clock->recvSyncSequenceId = ptp_clock->msgTmpHeader.sequenceId;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	@ 0xe2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8a3 23ca 	strh.w	r2, [r3, #970]	@ 0x3ca
        // Save correction_field of Sync message for future use.
        ptp_clock->correctionField_sync = correction_field;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8004fda:	f107 021c 	add.w	r2, r7, #28
 8004fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fe2:	e883 0003 	stmia.w	r3, {r0, r1}
        // Use correction_field of Sync message for future use.
        ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &origin_timestamp, &correction_field);
        ptpd_servo_update_clock(ptp_clock);
        issue_delay_req_timer_expired(ptp_clock);
      }
      break;
 8004fe6:	e035      	b.n	8005054 <handle_sync+0x150>
        ptpd_msg_unpack_sync(ptp_clock->msgIbuf, &ptp_clock->msgTmp.sync);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	33e8      	adds	r3, #232	@ 0xe8
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f7fe fb05 	bl	8003604 <ptpd_msg_unpack_sync>
        ptp_clock->waitingForFollowUp = false;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
        ptpd_to_internal_time(&origin_timestamp, &ptp_clock->msgTmp.sync.originTimestamp);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd fa3f 	bl	8002492 <ptpd_to_internal_time>
        ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &origin_timestamp, &correction_field);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 7166 	add.w	r1, r3, #920	@ 0x398
 800501a:	f107 031c 	add.w	r3, r7, #28
 800501e:	f107 0214 	add.w	r2, r7, #20
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fea6 	bl	8005d74 <ptpd_servo_update_offset>
        ptpd_servo_update_clock(ptp_clock);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f001 f823 	bl	8006074 <ptpd_servo_update_clock>
        issue_delay_req_timer_expired(ptp_clock);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fb30 	bl	8005694 <issue_delay_req_timer_expired>
      break;
 8005034:	e00e      	b.n	8005054 <handle_sync+0x150>

    case PTP_MASTER:
      if (!is_from_self)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	f083 0301 	eor.w	r3, r3, #1
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
        break;
      }
      else
      {
        DBGV("handle_sync: ignore from self\n");
        break;
 8005040:	e008      	b.n	8005054 <handle_sync+0x150>
      }

    case PTP_PASSIVE:
      DBGV("handle_sync: disreguard\n");
      issue_delay_req_timer_expired(ptp_clock);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fb26 	bl	8005694 <issue_delay_req_timer_expired>
      break;
 8005048:	e004      	b.n	8005054 <handle_sync+0x150>

    default:
      DBGV("handle_sync: disreguard\n");
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <handle_sync+0x150>
        break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <handle_sync+0x150>
        break;
 8005052:	bf00      	nop
  }
}
 8005054:	3728      	adds	r7, #40	@ 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop

0800505c <handle_follow_up>:

static void handle_follow_up(PtpClock *ptp_clock, bool is_from_self)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  TimeInternal precise_origin_timestamp;
  bool is_from_current_parent = false;
 8005068:	2300      	movs	r3, #0
 800506a:	77fb      	strb	r3, [r7, #31]

  DBGV("handle_followup: received in state %s\n", state_string(ptp_clock->portDS.portState));

  if (ptp_clock->msgIbufLength < FOLLOW_UP_LENGTH)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005072:	2b2b      	cmp	r3, #43	@ 0x2b
 8005074:	dc04      	bgt.n	8005080 <handle_follow_up+0x24>
  {
    ERROR("handle_followup: short message\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005076:	2101      	movs	r1, #1
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff f9ed 	bl	8004458 <ptpd_protocol_to_state>
    return;
 800507e:	e085      	b.n	800518c <handle_follow_up+0x130>
  }

  if (is_from_self)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d179      	bne.n	800517a <handle_follow_up+0x11e>
  {
    DBGV("handle_followup: ignore from self\n");
    return;
  }

  switch (ptp_clock->portDS.portState)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800508c:	2b08      	cmp	r3, #8
 800508e:	d876      	bhi.n	800517e <handle_follow_up+0x122>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <handle_follow_up+0x3c>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	0800517f 	.word	0x0800517f
 800509c:	0800517f 	.word	0x0800517f
 80050a0:	0800517f 	.word	0x0800517f
 80050a4:	0800517f 	.word	0x0800517f
 80050a8:	0800517f 	.word	0x0800517f
 80050ac:	0800517f 	.word	0x0800517f
 80050b0:	08005173 	.word	0x08005173
 80050b4:	080050bd 	.word	0x080050bd
 80050b8:	080050bd 	.word	0x080050bd
      break;

    case PTP_UNCALIBRATED:
    case PTP_SLAVE:
      is_from_current_parent = ptpd_is_same_port_identity(
                                  &ptp_clock->parentDS.parentPortIdentity,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                  &ptp_clock->msgTmpHeader.sourcePortIdentity);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	33d8      	adds	r3, #216	@ 0xd8
      is_from_current_parent = ptpd_is_same_port_identity(
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fd fb90 	bl	80027ee <ptpd_is_same_port_identity>
 80050ce:	4603      	mov	r3, r0
 80050d0:	77fb      	strb	r3, [r7, #31]
      if (!ptp_clock->waitingForFollowUp)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80050d8:	f083 0301 	eor.w	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d14f      	bne.n	8005182 <handle_follow_up+0x126>
      {
        DBGV("handle_followup: not waiting a message\n");
        break;
      }
      if (!is_from_current_parent)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d14b      	bne.n	8005186 <handle_follow_up+0x12a>
      {
        DBGV("handle_followup: not from current parent\n");
        break;
      }
      if (ptp_clock->recvSyncSequenceId !=  ptp_clock->msgTmpHeader.sequenceId)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f9b3 23ca 	ldrsh.w	r2, [r3, #970]	@ 0x3ca
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d145      	bne.n	800518a <handle_follow_up+0x12e>
      {
        DBGV("handle_followup: SequenceID doesn't match with last Sync message\n");
        break;
      }
      ptpd_msg_unpack_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.follow);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	33e8      	adds	r3, #232	@ 0xe8
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe fb56 	bl	80037bc <ptpd_msg_unpack_follow_up>
      ptp_clock->waitingForFollowUp = false;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

      // Synchronize local clock.

      // Get the time the sync message was sent that this follow-up message is associated with.
      ptpd_to_internal_time(&precise_origin_timestamp, &ptp_clock->msgTmp.follow.preciseOriginTimestamp);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd f9b4 	bl	8002492 <ptpd_to_internal_time>

      // Get the correction field of the follow-up message.
      ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f7fd f93e 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>

      // Add to the correction field the correction field of the sync message.  These two correction
      // fields are combined in a single value that is passed to determine the offset from the master.
      ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_sync);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 726c 	add.w	r2, r3, #944	@ 0x3b0
 8005142:	f107 0114 	add.w	r1, r7, #20
 8005146:	f107 0314 	add.w	r3, r7, #20
 800514a:	4618      	mov	r0, r3
 800514c:	f7fd f9bd 	bl	80024ca <ptpd_add_time>
      // Note the sync_event_ingress_timestamp is adjusted by the ptp_clock->inboundLatency.
      // The precise_origin_timestamp is the time that the master sent the sync packet.
      // The meanPathDelay is an estimate of how long it takes the packet to traverse the
      // network from the master to slave.
      // The function also applies an exponential smoothing filter to the offsetFromMaster.
      ptpd_servo_update_offset(ptp_clock, &ptp_clock->timestamp_syncRecv, &precise_origin_timestamp, &correction_field);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f503 7166 	add.w	r1, r3, #920	@ 0x398
 8005156:	f107 0314 	add.w	r3, r7, #20
 800515a:	f107 020c 	add.w	r2, r7, #12
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fe08 	bl	8005d74 <ptpd_servo_update_offset>

      // Now that we know the offset from the master, we can adjust our slave clock faster
      // or slower to bring it into alignment with the master clock.
      ptpd_servo_update_clock(ptp_clock);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 ff85 	bl	8006074 <ptpd_servo_update_clock>

      issue_delay_req_timer_expired(ptp_clock);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa92 	bl	8005694 <issue_delay_req_timer_expired>
      break;
 8005170:	e00c      	b.n	800518c <handle_follow_up+0x130>
      DBGV("handle_followup: from another master\n");
      break;

    case PTP_PASSIVE:
      DBGV("handle_followup: disreguard\n");
      issue_delay_req_timer_expired(ptp_clock);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa8e 	bl	8005694 <issue_delay_req_timer_expired>
      break;
 8005178:	e008      	b.n	800518c <handle_follow_up+0x130>
    return;
 800517a:	bf00      	nop
 800517c:	e006      	b.n	800518c <handle_follow_up+0x130>

    default:
      DBG("handle_followup: unrecognized state\n");
      break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <handle_follow_up+0x130>
        break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <handle_follow_up+0x130>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <handle_follow_up+0x130>
        break;
 800518a:	bf00      	nop
  }
}
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop

08005194 <handle_delay_req>:

static void handle_delay_req(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  switch (ptp_clock->portDS.delayMechanism)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d002      	beq.n	80051b2 <handle_delay_req+0x1e>
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d02f      	beq.n	8005210 <handle_delay_req+0x7c>
      ERROR("handle_delay_req: disreguard in P2P mode\n");
      break;

    default:
      // None.
      break;
 80051b0:	e031      	b.n	8005216 <handle_delay_req+0x82>
      if (ptp_clock->msgIbufLength < DELAY_REQ_LENGTH)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 80051b8:	2b2b      	cmp	r3, #43	@ 0x2b
 80051ba:	dc04      	bgt.n	80051c6 <handle_delay_req+0x32>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80051bc:	2101      	movs	r1, #1
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff f94a 	bl	8004458 <ptpd_protocol_to_state>
        return;
 80051c4:	e027      	b.n	8005216 <handle_delay_req+0x82>
      switch (ptp_clock->portDS.portState)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d81d      	bhi.n	800520c <handle_delay_req+0x78>
 80051d0:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <handle_delay_req+0x44>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	08005215 	.word	0x08005215
 80051dc:	08005215 	.word	0x08005215
 80051e0:	08005215 	.word	0x08005215
 80051e4:	08005215 	.word	0x08005215
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	08005215 	.word	0x08005215
 80051f8:	0800520d 	.word	0x0800520d
          issue_delay_resp(ptp_clock, time, &ptp_clock->msgTmpHeader);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	33c0      	adds	r3, #192	@ 0xc0
 8005200:	461a      	mov	r2, r3
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fc2f 	bl	8005a68 <issue_delay_resp>
          break;
 800520a:	e000      	b.n	800520e <handle_delay_req+0x7a>
          break;
 800520c:	bf00      	nop
      break;
 800520e:	e002      	b.n	8005216 <handle_delay_req+0x82>
      break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <handle_delay_req+0x82>
          return;
 8005214:	bf00      	nop
  }
}
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <handle_delay_resp>:

static void handle_delay_resp(PtpClock *ptp_clock, bool is_from_self)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  bool is_current_request = false;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
  bool is_from_current_parent = false;
 800522c:	2300      	movs	r3, #0
 800522e:	75bb      	strb	r3, [r7, #22]

  switch (ptp_clock->portDS.delayMechanism)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005236:	2b01      	cmp	r3, #1
 8005238:	d002      	beq.n	8005240 <handle_delay_resp+0x24>
 800523a:	2b02      	cmp	r3, #2
 800523c:	d06b      	beq.n	8005316 <handle_delay_resp+0xfa>
    case P2P:
      ERROR("handle_delay_resp: disreguard in P2P mode\n");
      break;

    default:
      break;
 800523e:	e06d      	b.n	800531c <handle_delay_resp+0x100>
      if (ptp_clock->msgIbufLength < DELAY_RESP_LENGTH)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005246:	2b35      	cmp	r3, #53	@ 0x35
 8005248:	dc04      	bgt.n	8005254 <handle_delay_resp+0x38>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800524a:	2101      	movs	r1, #1
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff f903 	bl	8004458 <ptpd_protocol_to_state>
        return;
 8005252:	e063      	b.n	800531c <handle_delay_resp+0x100>
      switch (ptp_clock->portDS.portState)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800525a:	2b03      	cmp	r3, #3
 800525c:	dc01      	bgt.n	8005262 <handle_delay_resp+0x46>
 800525e:	2b00      	cmp	r3, #0
          return;
 8005260:	e05c      	b.n	800531c <handle_delay_resp+0x100>
 8005262:	3b07      	subs	r3, #7
 8005264:	2b01      	cmp	r3, #1
 8005266:	d858      	bhi.n	800531a <handle_delay_resp+0xfe>
          ptpd_msg_unpack_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.resp);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	33e8      	adds	r3, #232	@ 0xe8
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f7fe fb59 	bl	800392c <ptpd_msg_unpack_delay_resp>
                                      &ptp_clock->parentDS.parentPortIdentity,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
                                      &ptp_clock->msgTmpHeader.sourcePortIdentity);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	33d8      	adds	r3, #216	@ 0xd8
          is_from_current_parent = ptpd_is_same_port_identity(
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7fd fab1 	bl	80027ee <ptpd_is_same_port_identity>
 800528c:	4603      	mov	r3, r0
 800528e:	75bb      	strb	r3, [r7, #22]
                                    &ptp_clock->portDS.portIdentity,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                    &ptp_clock->msgTmp.resp.requestingPortIdentity);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	33f4      	adds	r3, #244	@ 0xf4
          is_current_request = ptpd_is_same_port_identity(
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f7fd faa6 	bl	80027ee <ptpd_is_same_port_identity>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]
          if (((ptp_clock->sentDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request && is_from_current_parent)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 80052ac:	3b01      	subs	r3, #1
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	@ 0xe2
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d130      	bne.n	800531a <handle_delay_resp+0xfe>
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02d      	beq.n	800531a <handle_delay_resp+0xfe>
 80052be:	7dbb      	ldrb	r3, [r7, #22]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02a      	beq.n	800531a <handle_delay_resp+0xfe>
            ptpd_to_internal_time(&ptp_clock->timestamp_delayReqRecv, &ptp_clock->msgTmp.resp.receiveTimestamp);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	33e8      	adds	r3, #232	@ 0xe8
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fd f8de 	bl	8002492 <ptpd_to_internal_time>
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fd f868 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_servo_update_delay(ptp_clock, &ptp_clock->timestamp_delayReqSend, &ptp_clock->timestamp_delayReqRecv, &correction_field);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f503 7168 	add.w	r1, r3, #928	@ 0x3a0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 80052f4:	f107 030c 	add.w	r3, r7, #12
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fdd5 	bl	8005ea8 <ptpd_servo_update_delay>
            if (ptp_clock->msgTmpHeader.logMessageInterval != 0x7f)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f993 30e5 	ldrsb.w	r3, [r3, #229]	@ 0xe5
 8005304:	2b7f      	cmp	r3, #127	@ 0x7f
 8005306:	d008      	beq.n	800531a <handle_delay_resp+0xfe>
              ptp_clock->portDS.logMinDelayReqInterval = ptp_clock->msgTmpHeader.logMessageInterval;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f993 20e5 	ldrsb.w	r2, [r3, #229]	@ 0xe5
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
      break;
 8005314:	e001      	b.n	800531a <handle_delay_resp+0xfe>
      break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <handle_delay_resp+0x100>
      break;
 800531a:	bf00      	nop
  }
}
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <handle_peer_delay_req>:


static void handle_peer_delay_req(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  switch (ptp_clock->portDS.delayMechanism)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005338:	2b01      	cmp	r3, #1
 800533a:	d04a      	beq.n	80053d2 <handle_peer_delay_req+0xae>
 800533c:	2b02      	cmp	r3, #2
 800533e:	d000      	beq.n	8005342 <handle_peer_delay_req+0x1e>
          break;
      }
      break;

    default:
      break;
 8005340:	e04a      	b.n	80053d8 <handle_peer_delay_req+0xb4>
      if (ptp_clock->msgIbufLength < PDELAY_REQ_LENGTH)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005348:	2b35      	cmp	r3, #53	@ 0x35
 800534a:	dc04      	bgt.n	8005356 <handle_peer_delay_req+0x32>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800534c:	2101      	movs	r1, #1
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff f882 	bl	8004458 <ptpd_protocol_to_state>
        return;
 8005354:	e040      	b.n	80053d8 <handle_peer_delay_req+0xb4>
      switch (ptp_clock->portDS.portState)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800535c:	2b08      	cmp	r3, #8
 800535e:	d832      	bhi.n	80053c6 <handle_peer_delay_req+0xa2>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <handle_peer_delay_req+0x44>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	080053d7 	.word	0x080053d7
 800536c:	080053d7 	.word	0x080053d7
 8005370:	080053d7 	.word	0x080053d7
 8005374:	080053d7 	.word	0x080053d7
 8005378:	080053c7 	.word	0x080053c7
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800538d 	.word	0x0800538d
 8005384:	080053d7 	.word	0x080053d7
 8005388:	0800538d 	.word	0x0800538d
          if (is_from_self)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11b      	bne.n	80053ca <handle_peer_delay_req+0xa6>
          issue_peer_delay_resp(ptp_clock, time, &ptp_clock->msgTmpHeader);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	33c0      	adds	r3, #192	@ 0xc0
 8005396:	461a      	mov	r2, r3
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fb2d 	bl	80059fa <issue_peer_delay_resp>
          if ((time->seconds != 0) && get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <handle_peer_delay_req+0xaa>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <handle_peer_delay_req+0xaa>
            issue_peer_delay_resp_follow_up(ptp_clock, time, &ptp_clock->msgTmpHeader);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	33c0      	adds	r3, #192	@ 0xc0
 80053ba:	461a      	mov	r2, r3
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fb7c 	bl	8005abc <issue_peer_delay_resp_follow_up>
          break;
 80053c4:	e003      	b.n	80053ce <handle_peer_delay_req+0xaa>
          break;
 80053c6:	bf00      	nop
 80053c8:	e006      	b.n	80053d8 <handle_peer_delay_req+0xb4>
            break;
 80053ca:	bf00      	nop
 80053cc:	e004      	b.n	80053d8 <handle_peer_delay_req+0xb4>
          break;
 80053ce:	bf00      	nop
      break;
 80053d0:	e002      	b.n	80053d8 <handle_peer_delay_req+0xb4>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <handle_peer_delay_req+0xb4>
          return;
 80053d6:	bf00      	nop
  }
}
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop

080053e0 <handle_peer_delay_resp>:

static void handle_peer_delay_resp(PtpClock *ptp_clock, TimeInternal *time, bool is_from_self)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	@ 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	71fb      	strb	r3, [r7, #7]
  bool is_current_request;
  TimeInternal correction_field;
  TimeInternal request_receipt_timestamp;

  switch (ptp_clock->portDS.delayMechanism)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	f000 80a9 	beq.w	800554c <handle_peer_delay_resp+0x16c>
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d000      	beq.n	8005400 <handle_peer_delay_resp+0x20>
          break;
      }
      break;

    default:
      break;
 80053fe:	e0a8      	b.n	8005552 <handle_peer_delay_resp+0x172>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_LENGTH)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8005406:	2b35      	cmp	r3, #53	@ 0x35
 8005408:	dc04      	bgt.n	8005414 <handle_peer_delay_resp+0x34>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800540a:	2101      	movs	r1, #1
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff f823 	bl	8004458 <ptpd_protocol_to_state>
        return;
 8005412:	e09e      	b.n	8005552 <handle_peer_delay_resp+0x172>
      switch (ptp_clock->portDS.portState)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800541a:	2b08      	cmp	r3, #8
 800541c:	f200 8090 	bhi.w	8005540 <handle_peer_delay_resp+0x160>
 8005420:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <handle_peer_delay_resp+0x48>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	08005551 	.word	0x08005551
 800542c:	08005551 	.word	0x08005551
 8005430:	08005551 	.word	0x08005551
 8005434:	08005551 	.word	0x08005551
 8005438:	08005541 	.word	0x08005541
 800543c:	0800544d 	.word	0x0800544d
 8005440:	08005541 	.word	0x08005541
 8005444:	08005551 	.word	0x08005551
 8005448:	0800544d 	.word	0x0800544d
          if (is_from_self)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d178      	bne.n	8005544 <handle_peer_delay_resp+0x164>
          ptpd_msg_unpack_peer_delay_resp(ptp_clock->msgIbuf, &ptp_clock->msgTmp.presp);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	33e8      	adds	r3, #232	@ 0xe8
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fb75 	bl	8003b4e <ptpd_msg_unpack_peer_delay_resp>
                                  &ptp_clock->portDS.portIdentity,
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f103 0240 	add.w	r2, r3, #64	@ 0x40
                                  &ptp_clock->msgTmp.presp.requestingPortIdentity);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	33f4      	adds	r3, #244	@ 0xf4
          is_current_request = ptpd_is_same_port_identity(
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fd f9bc 	bl	80027ee <ptpd_is_same_port_identity>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (((ptp_clock->sentPDelayReqSequenceId - 1) == ptp_clock->msgTmpHeader.sequenceId) && is_current_request)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8005482:	3b01      	subs	r3, #1
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	@ 0xe2
 800548a:	4293      	cmp	r3, r2
 800548c:	d15c      	bne.n	8005548 <handle_peer_delay_resp+0x168>
 800548e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005492:	2b00      	cmp	r3, #0
 8005494:	d058      	beq.n	8005548 <handle_peer_delay_resp+0x168>
            if (get_flag(ptp_clock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d030      	beq.n	8005506 <handle_peer_delay_resp+0x126>
              ptp_clock->waitingForPDelayRespFollowUp = true;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 80054b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054b8:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_to_internal_time(&request_receipt_timestamp, &ptp_clock->msgTmp.presp.requestReceiptTimestamp);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fc ffe2 	bl	8002492 <ptpd_to_internal_time>
              ptp_clock->pdelay_t2 = request_receipt_timestamp;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 80054d4:	f107 0214 	add.w	r2, r7, #20
 80054d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054dc:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80054e6:	f107 031c 	add.w	r3, r7, #28
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fc ff63 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>
              ptp_clock->correctionField_pDelayResp = correction_field;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 80054f8:	f107 021c 	add.w	r2, r7, #28
 80054fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005500:	e883 0003 	stmia.w	r3, {r0, r1}
          break;
 8005504:	e020      	b.n	8005548 <handle_peer_delay_resp+0x168>
              ptp_clock->waitingForPDelayRespFollowUp = false;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
              ptp_clock->pdelay_t4 = *time;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 8005516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800551a:	e883 0003 	stmia.w	r3, {r0, r1}
              ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc ff44 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>
              ptpd_servo_update_peer_delay(ptp_clock, &correction_field, false);
 8005530:	f107 031c 	add.w	r3, r7, #28
 8005534:	2200      	movs	r2, #0
 8005536:	4619      	mov	r1, r3
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fcf8 	bl	8005f2e <ptpd_servo_update_peer_delay>
          break;
 800553e:	e003      	b.n	8005548 <handle_peer_delay_resp+0x168>
          break;
 8005540:	bf00      	nop
 8005542:	e006      	b.n	8005552 <handle_peer_delay_resp+0x172>
            break;
 8005544:	bf00      	nop
 8005546:	e004      	b.n	8005552 <handle_peer_delay_resp+0x172>
          break;
 8005548:	bf00      	nop
      break;
 800554a:	e002      	b.n	8005552 <handle_peer_delay_resp+0x172>
      break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <handle_peer_delay_resp+0x172>
          return;
 8005550:	bf00      	nop
  }
}
 8005552:	3728      	adds	r7, #40	@ 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <handle_peer_delay_resp_follow_up>:

static void handle_peer_delay_resp_follow_up(PtpClock *ptp_clock, bool is_from_self)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  TimeInternal correction_field;
  TimeInternal response_origin_timestamp;

  switch (ptp_clock->portDS.delayMechanism)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800556a:	2b01      	cmp	r3, #1
 800556c:	d074      	beq.n	8005658 <handle_peer_delay_resp_follow_up+0x100>
 800556e:	2b02      	cmp	r3, #2
 8005570:	d000      	beq.n	8005574 <handle_peer_delay_resp_follow_up+0x1c>
          DBGV("handle_peer_delay_resp_follow_up: unrecognized state\n");
      }
      break;

    default:
      break;
 8005572:	e074      	b.n	800565e <handle_peer_delay_resp_follow_up+0x106>
      if (ptp_clock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 800557a:	2b35      	cmp	r3, #53	@ 0x35
 800557c:	dc04      	bgt.n	8005588 <handle_peer_delay_resp_follow_up+0x30>
        ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800557e:	2101      	movs	r1, #1
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fe ff69 	bl	8004458 <ptpd_protocol_to_state>
        return;
 8005586:	e06a      	b.n	800565e <handle_peer_delay_resp_follow_up+0x106>
      switch (ptp_clock->portDS.portState)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800558e:	2b08      	cmp	r3, #8
 8005590:	d864      	bhi.n	800565c <handle_peer_delay_resp_follow_up+0x104>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <handle_peer_delay_resp_follow_up+0x40>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	0800565d 	.word	0x0800565d
 800559c:	0800565d 	.word	0x0800565d
 80055a0:	0800565d 	.word	0x0800565d
 80055a4:	0800565d 	.word	0x0800565d
 80055a8:	0800565d 	.word	0x0800565d
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	0800565d 	.word	0x0800565d
 80055b4:	0800565d 	.word	0x0800565d
 80055b8:	080055bd 	.word	0x080055bd
          if (!ptp_clock->waitingForPDelayRespFollowUp)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 33cd 	ldrb.w	r3, [r3, #973]	@ 0x3cd
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d143      	bne.n	8005654 <handle_peer_delay_resp_follow_up+0xfc>
          if (ptp_clock->msgTmpHeader.sequenceId == ptp_clock->sentPDelayReqSequenceId - 1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80055da:	3b01      	subs	r3, #1
 80055dc:	429a      	cmp	r2, r3
 80055de:	d13d      	bne.n	800565c <handle_peer_delay_resp_follow_up+0x104>
            ptpd_msg_unpack_peer_delay_resp_follow_up(ptp_clock->msgIbuf, &ptp_clock->msgTmp.prespfollow);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f503 720e 	add.w	r2, r3, #568	@ 0x238
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	33e8      	adds	r3, #232	@ 0xe8
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe fb71 	bl	8003cd4 <ptpd_msg_unpack_peer_delay_resp_follow_up>
            ptpd_to_internal_time(&response_origin_timestamp, &ptp_clock->msgTmp.prespfollow.responseOriginTimestamp);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc ff47 	bl	8002492 <ptpd_to_internal_time>
            ptp_clock->pdelay_t3 = response_origin_timestamp;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 800560a:	f107 0208 	add.w	r2, r7, #8
 800560e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005612:	e883 0003 	stmia.w	r3, {r0, r1}
            ptpd_scaled_nanoseconds_to_internal_time(&correction_field, &ptp_clock->msgTmpHeader.correctionfield);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f7fc fec8 	bl	80023b8 <ptpd_scaled_nanoseconds_to_internal_time>
            ptpd_add_time(&correction_field, &correction_field, &ptp_clock->correctionField_pDelayResp);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f503 726e 	add.w	r2, r3, #952	@ 0x3b8
 800562e:	f107 0110 	add.w	r1, r7, #16
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	4618      	mov	r0, r3
 8005638:	f7fc ff47 	bl	80024ca <ptpd_add_time>
            ptpd_servo_update_peer_delay(ptp_clock, &correction_field, true);
 800563c:	f107 0310 	add.w	r3, r7, #16
 8005640:	2201      	movs	r2, #1
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc72 	bl	8005f2e <ptpd_servo_update_peer_delay>
            ptp_clock->waitingForPDelayRespFollowUp = false;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
            break;
 8005652:	e000      	b.n	8005656 <handle_peer_delay_resp_follow_up+0xfe>
            break;
 8005654:	bf00      	nop
      break;
 8005656:	e001      	b.n	800565c <handle_peer_delay_resp_follow_up+0x104>
      break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <handle_peer_delay_resp_follow_up+0x106>
      break;
 800565c:	bf00      	nop
  }
}
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <handle_management>:

static void handle_management(PtpClock *ptp_clock, bool is_from_self)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  // Do nothing.
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <handle_signaling>:

static void handle_signaling(PtpClock *ptp_clock, bool is_from_self)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  // Do nothing.
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <issue_delay_req_timer_expired>:

static void issue_delay_req_timer_expired(PtpClock *ptp_clock)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  switch (ptp_clock->portDS.delayMechanism)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d002      	beq.n	80056ac <issue_delay_req_timer_expired+0x18>
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d02d      	beq.n	8005706 <issue_delay_req_timer_expired+0x72>
        issue_peer_delay_req(ptp_clock);
      }
      break;

    default:
        break;
 80056aa:	e059      	b.n	8005760 <issue_delay_req_timer_expired+0xcc>
      if (ptp_clock->portDS.portState != PTP_SLAVE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d14f      	bne.n	8005756 <issue_delay_req_timer_expired+0xc2>
      if (ptpd_timer_expired(DELAYREQ_INTERVAL_TIMER))
 80056b6:	2001      	movs	r0, #1
 80056b8:	f000 fea2 	bl	8006400 <ptpd_timer_expired>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04b      	beq.n	800575a <issue_delay_req_timer_expired+0xc6>
        ptpd_timer_start(DELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinDelayReqInterval + 1)));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db08      	blt.n	80056de <issue_delay_req_timer_expired+0x4a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056d2:	3301      	adds	r3, #1
 80056d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	e007      	b.n	80056ee <issue_delay_req_timer_expired+0x5a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f993 304b 	ldrsb.w	r3, [r3, #75]	@ 0x4b
 80056e4:	43db      	mvns	r3, r3
 80056e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056ea:	fa42 f303 	asr.w	r3, r2, r3
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fd92 	bl	8006218 <ptpd_get_rand>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4619      	mov	r1, r3
 80056f8:	2001      	movs	r0, #1
 80056fa:	f000 fe25 	bl	8006348 <ptpd_timer_start>
        issue_delay_req(ptp_clock);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8d9 	bl	80058b6 <issue_delay_req>
      break;
 8005704:	e029      	b.n	800575a <issue_delay_req_timer_expired+0xc6>
      if (ptpd_timer_expired(PDELAYREQ_INTERVAL_TIMER))
 8005706:	2000      	movs	r0, #0
 8005708:	f000 fe7a 	bl	8006400 <ptpd_timer_expired>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d025      	beq.n	800575e <issue_delay_req_timer_expired+0xca>
        ptpd_timer_start(PDELAYREQ_INTERVAL_TIMER, ptpd_get_rand(pow2ms(ptp_clock->portDS.logMinPdelayReqInterval + 1)));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8005718:	2b00      	cmp	r3, #0
 800571a:	db08      	blt.n	800572e <issue_delay_req_timer_expired+0x9a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8005722:	3301      	adds	r3, #1
 8005724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	e007      	b.n	800573e <issue_delay_req_timer_expired+0xaa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 8005734:	43db      	mvns	r3, r3
 8005736:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800573a:	fa42 f303 	asr.w	r3, r2, r3
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fd6a 	bl	8006218 <ptpd_get_rand>
 8005744:	4603      	mov	r3, r0
 8005746:	4619      	mov	r1, r3
 8005748:	2000      	movs	r0, #0
 800574a:	f000 fdfd 	bl	8006348 <ptpd_timer_start>
        issue_peer_delay_req(ptp_clock);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f902 	bl	8005958 <issue_peer_delay_req>
      break;
 8005754:	e003      	b.n	800575e <issue_delay_req_timer_expired+0xca>
        break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <issue_delay_req_timer_expired+0xcc>
      break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <issue_delay_req_timer_expired+0xcc>
      break;
 800575e:	bf00      	nop
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <issue_announce>:


// Pack and send  on general multicast ip adress an Announce message.
static void issue_announce(PtpClock *ptp_clock)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  ptpd_msg_pack_announce(ptp_clock, ptp_clock->msgObuf);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fd fdee 	bl	800335a <ptpd_msg_pack_announce>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, ANNOUNCE_LENGTH))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800578a:	2240      	movs	r2, #64	@ 0x40
 800578c:	4619      	mov	r1, r3
 800578e:	f7fe fe32 	bl	80043f6 <ptpd_net_send_general>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <issue_announce+0x3a>
  {
    ERROR("issue_announce: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005798:	2101      	movs	r1, #1
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe fe5c 	bl	8004458 <ptpd_protocol_to_state>
  else
  {
    DBGV("issue_announce\n");
    ptp_clock->sentAnnounceSequenceId++;
  }
}
 80057a0:	e009      	b.n	80057b6 <issue_announce+0x4e>
    ptp_clock->sentAnnounceSequenceId++;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f9b3 33c6 	ldrsh.w	r3, [r3, #966]	@ 0x3c6
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3301      	adds	r3, #1
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	b21a      	sxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8a3 23c6 	strh.w	r2, [r3, #966]	@ 0x3c6
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <issue_sync>:

// Pack and send  on event multicast ip adress a Sync message.
static void issue_sync(PtpClock *ptp_clock)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b088      	sub	sp, #32
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  // Try to predict outgoing time stamp.
  ptpd_get_time(&internal_time);
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fd2f 	bl	800622e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 80057d0:	f107 0214 	add.w	r2, r7, #20
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fc fe38 	bl	8002450 <ptpd_from_internal_time>
  ptpd_msg_pack_sync(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80057e6:	f107 0214 	add.w	r2, r7, #20
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fd feae 	bl	800354e <ptpd_msg_pack_sync>

  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, SYNC_LENGTH, &internal_time))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 80057fe:	f107 030c 	add.w	r3, r7, #12
 8005802:	222c      	movs	r2, #44	@ 0x2c
 8005804:	f7fe fdc4 	bl	8004390 <ptpd_net_send_event>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <issue_sync+0x5a>
  {
    ERROR("issue_sync: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 800580e:	2101      	movs	r1, #1
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fe fe21 	bl	8004458 <ptpd_protocol_to_state>
    {
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
      issue_follow_up(ptp_clock, &internal_time);
    }
  }
}
 8005816:	e021      	b.n	800585c <issue_sync+0x9e>
    ptp_clock->sentSyncSequenceId++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f9b3 33c4 	ldrsh.w	r3, [r3, #964]	@ 0x3c4
 800581e:	b29b      	uxth	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	b21a      	sxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8a3 23c4 	strh.w	r2, [r3, #964]	@ 0x3c4
    if ((internal_time.seconds != 0) && (ptp_clock->defaultDS.twoStepFlag))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d014      	beq.n	800585c <issue_sync+0x9e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00f      	beq.n	800585c <issue_sync+0x9e>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8005842:	f107 010c 	add.w	r1, r7, #12
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc fe3d 	bl	80024ca <ptpd_add_time>
      issue_follow_up(ptp_clock, &internal_time);
 8005850:	f107 030c 	add.w	r3, r7, #12
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f804 	bl	8005864 <issue_follow_up>
}
 800585c:	bf00      	nop
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <issue_follow_up>:

// Pack and send on general multicast ip adress a FollowUp message.
static void issue_follow_up(PtpClock *ptp_clock, const TimeInternal *time)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  Timestamp precise_origin_timestamp;

  ptpd_from_internal_time(time, &precise_origin_timestamp);
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	4619      	mov	r1, r3
 8005874:	6838      	ldr	r0, [r7, #0]
 8005876:	f7fc fdeb 	bl	8002450 <ptpd_from_internal_time>
  ptpd_msg_pack_follow_up(ptp_clock, ptp_clock->msgObuf, &precise_origin_timestamp);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005880:	f107 020c 	add.w	r2, r7, #12
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd ff3f 	bl	800370a <ptpd_msg_pack_follow_up>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, FOLLOW_UP_LENGTH))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005898:	222c      	movs	r2, #44	@ 0x2c
 800589a:	4619      	mov	r1, r3
 800589c:	f7fe fdab 	bl	80043f6 <ptpd_net_send_general>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <issue_follow_up+0x4a>
  {
    ERROR("issue_follow_up: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80058a6:	2101      	movs	r1, #1
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fe fdd5 	bl	8004458 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_follow_up\n");
  }
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <issue_delay_req>:


// Pack and send on event multicast ip address a DelayReq message.
static void issue_delay_req(PtpClock *ptp_clock)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  ptpd_get_time(&internal_time);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fcb3 	bl	800622e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 80058c8:	f107 0214 	add.w	r2, r7, #20
 80058cc:	f107 030c 	add.w	r3, r7, #12
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc fdbc 	bl	8002450 <ptpd_from_internal_time>

  ptpd_msg_pack_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80058de:	f107 0214 	add.w	r2, r7, #20
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fd feb4 	bl	8003652 <ptpd_msg_pack_delay_req>

  if (!ptpd_net_send_event(&ptp_clock->netPath, ptp_clock->msgObuf, DELAY_REQ_LENGTH, &internal_time))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	222c      	movs	r2, #44	@ 0x2c
 80058fc:	f7fe fd48 	bl	8004390 <ptpd_net_send_event>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <issue_delay_req+0x5a>
  {
    ERROR("issue_delay_req: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005906:	2101      	movs	r1, #1
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fe fda5 	bl	8004458 <ptpd_protocol_to_state>
    else
    {
      DBGV("issue_delay_req: internal time invalid\n");
    }
  }
}
 800590e:	e01f      	b.n	8005950 <issue_delay_req+0x9a>
    ptp_clock->sentDelayReqSequenceId++;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f9b3 33c2 	ldrsh.w	r3, [r3, #962]	@ 0x3c2
 8005916:	b29b      	uxth	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	b21a      	sxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8a3 23c2 	strh.w	r2, [r3, #962]	@ 0x3c2
    if (internal_time.seconds != 0)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <issue_delay_req+0x9a>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8005930:	f107 010c 	add.w	r1, r7, #12
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f7fc fdc6 	bl	80024ca <ptpd_add_time>
      ptp_clock->timestamp_delayReqSend = internal_time;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8005944:	f107 020c 	add.w	r2, r7, #12
 8005948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800594c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005950:	bf00      	nop
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <issue_peer_delay_req>:

// Pack and send on event multicast ip adress a PDelayReq message.
static void issue_peer_delay_req(PtpClock *ptp_clock)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  Timestamp origin_timestamp;
  TimeInternal internal_time;

  ptpd_get_time(&internal_time);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fc62 	bl	800622e <ptpd_get_time>
  ptpd_from_internal_time(&internal_time, &origin_timestamp);
 800596a:	f107 0214 	add.w	r2, r7, #20
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f7fc fd6b 	bl	8002450 <ptpd_from_internal_time>

  ptpd_msg_pack_peer_delay_req(ptp_clock, ptp_clock->msgObuf, &origin_timestamp);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005980:	f107 0214 	add.w	r2, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe f80c 	bl	80039a4 <ptpd_msg_pack_peer_delay_req>

  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_REQ_LENGTH, &internal_time))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	2236      	movs	r2, #54	@ 0x36
 800599e:	f7fe fd10 	bl	80043c2 <ptpd_net_send_peer_event>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <issue_peer_delay_req+0x5a>
  {
    ERROR("issue_peer_delay_req: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 80059a8:	2101      	movs	r1, #1
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fe fd54 	bl	8004458 <ptpd_protocol_to_state>
    {
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
      ptp_clock->pdelay_t1 = internal_time;
    }
  }
}
 80059b0:	e01f      	b.n	80059f2 <issue_peer_delay_req+0x9a>
    ptp_clock->sentPDelayReqSequenceId++;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3301      	adds	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b21a      	sxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
    if (internal_time.seconds != 0)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d012      	beq.n	80059f2 <issue_peer_delay_req+0x9a>
      ptpd_add_time(&internal_time, &internal_time, &ptp_clock->outboundLatency);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80059d2:	f107 010c 	add.w	r1, r7, #12
 80059d6:	f107 030c 	add.w	r3, r7, #12
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fc fd75 	bl	80024ca <ptpd_add_time>
      ptp_clock->pdelay_t1 = internal_time;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80059e6:	f107 020c 	add.w	r2, r7, #12
 80059ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059ee:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80059f2:	bf00      	nop
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <issue_peer_delay_resp>:

// Pack and send on event multicast ip adress a PDelayResp message.
static void issue_peer_delay_resp(PtpClock *ptp_clock, TimeInternal *time, const MsgHeader *delay_req_header)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  Timestamp request_receipt_timestamp;

  ptpd_from_internal_time(time, &request_receipt_timestamp);
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68b8      	ldr	r0, [r7, #8]
 8005a0e:	f7fc fd1f 	bl	8002450 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp(ptp_clock->msgObuf, delay_req_header, &request_receipt_timestamp);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005a18:	f107 0214 	add.w	r2, r7, #20
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe f823 	bl	8003a6a <ptpd_msg_pack_peer_delay_resp>

  if (!ptpd_net_send_peer_event(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH, time))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2236      	movs	r2, #54	@ 0x36
 8005a34:	f7fe fcc5 	bl	80043c2 <ptpd_net_send_peer_event>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <issue_peer_delay_resp+0x4e>
  {
    ERROR("issue_peer_delay_resp: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7fe fd09 	bl	8004458 <ptpd_protocol_to_state>
      ptpd_add_time(time, time, &ptp_clock->outboundLatency);
    }

    DBGV("issue_peer_delay_resp\n");
  }
}
 8005a46:	e00b      	b.n	8005a60 <issue_peer_delay_resp+0x66>
    if (time->seconds != 0)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <issue_peer_delay_resp+0x66>
      ptpd_add_time(time, time, &ptp_clock->outboundLatency);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8005a56:	461a      	mov	r2, r3
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f7fc fd35 	bl	80024ca <ptpd_add_time>
}
 8005a60:	bf00      	nop
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <issue_delay_resp>:


// Pack and send on event multicast ip adress a DelayResp message.
static void issue_delay_resp(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader * delayReqHeader)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  Timestamp request_receipt_timestamp;

  ptpd_from_internal_time(time, &request_receipt_timestamp);
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68b8      	ldr	r0, [r7, #8]
 8005a7c:	f7fc fce8 	bl	8002450 <ptpd_from_internal_time>
  ptpd_msg_pack_delay_resp(ptp_clock, ptp_clock->msgObuf, delayReqHeader, &request_receipt_timestamp);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7fd febc 	bl	800380a <ptpd_msg_pack_delay_resp>

  if (!ptpd_net_send_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_LENGTH))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005a9e:	2236      	movs	r2, #54	@ 0x36
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f7fe fca8 	bl	80043f6 <ptpd_net_send_general>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <issue_delay_resp+0x4c>
  {
    ERROR("issue_delay_resp: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005aac:	2101      	movs	r1, #1
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7fe fcd2 	bl	8004458 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_delay_resp\n");
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <issue_peer_delay_resp_follow_up>:

static void issue_peer_delay_resp_follow_up(PtpClock *ptp_clock, const TimeInternal *time, const MsgHeader *delay_req_header)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  Timestamp response_origin_timestamp;

  ptpd_from_internal_time(time, &response_origin_timestamp);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4619      	mov	r1, r3
 8005ace:	68b8      	ldr	r0, [r7, #8]
 8005ad0:	f7fc fcbe 	bl	8002450 <ptpd_from_internal_time>
  ptpd_msg_pack_peer_delay_resp_follow_up(ptp_clock->msgObuf, delay_req_header, &response_origin_timestamp);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005ada:	f107 0214 	add.w	r2, r7, #20
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe f870 	bl	8003bc6 <ptpd_msg_pack_peer_delay_resp_follow_up>

  if (!ptpd_net_send_peer_general(&ptp_clock->netPath, ptp_clock->msgObuf, PDELAY_RESP_FOLLOW_UP_LENGTH))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6084 	add.w	r0, r3, #1056	@ 0x420
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005af2:	2236      	movs	r2, #54	@ 0x36
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fe fc96 	bl	8004426 <ptpd_net_send_peer_general>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d103      	bne.n	8005b08 <issue_peer_delay_resp_follow_up+0x4c>
  {
    ERROR("issue_peer_delay_resp_follow_up: can't sent\n");
    ptpd_protocol_to_state(ptp_clock, PTP_FAULTY);
 8005b00:	2101      	movs	r1, #1
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7fe fca8 	bl	8004458 <ptpd_protocol_to_state>
  }
  else
  {
    DBGV("issue_peer_delay_resp_follow_up\n");
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <max>:
void ptpd_div2_time(TimeInternal*);
int32_t ptpd_floor_log2(uint32_t);

// Return maximum of two numbers.
__STATIC_INLINE int32_t max(int32_t a, int32_t b)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  return a > b ? a : b;
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfb8      	it	lt
 8005b22:	4613      	movlt	r3, r2
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <min>:

// Return minimum of two numbers.
__STATIC_INLINE int32_t min(int32_t a, int32_t b)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  return a > b ? b : a;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bfa8      	it	ge
 8005b42:	4613      	movge	r3, r2
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <ptpd_servo_init_clock>:
#include <stdlib.h>
#include "ptpd.h"

void ptpd_servo_init_clock(PtpClock *ptp_clock)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  DBG("ptpd_servo_init_clock\n");

  // Clear the time.
  ptp_clock->Tms.seconds = 0;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
  ptp_clock->Tms.nanoseconds = 0;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c

  // Clears clock servo accumulator (the I term).
  ptp_clock->observedDrift = 0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  // One way delay.
  ptp_clock->owd_filt.n = 0;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
  ptp_clock->owd_filt.s = ptp_clock->servo.sDelay;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f9b3 246a 	ldrsh.w	r2, [r3, #1130]	@ 0x46a
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8a3 23e8 	strh.w	r2, [r3, #1000]	@ 0x3e8

  // Offset from master.
  ptp_clock->ofm_filt.n = 0;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc
  ptp_clock->ofm_filt.s = ptp_clock->servo.sOffset;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f9b3 246c 	ldrsh.w	r2, [r3, #1132]	@ 0x46c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
    ptp_clock->offsetHistory[0] = 0;
    ptp_clock->offsetHistory[1] = 0;
  }

  // Clear the wait flags.
  ptp_clock->waitingForFollowUp = false;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
  ptp_clock->waitingForPDelayRespFollowUp = false;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd

  // Clear the peer delays.
  ptp_clock->pdelay_t1.seconds = ptp_clock->pdelay_t1.nanoseconds = 0;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
  ptp_clock->pdelay_t2.seconds = ptp_clock->pdelay_t2.nanoseconds = 0;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
  ptp_clock->pdelay_t3.seconds = ptp_clock->pdelay_t3.nanoseconds = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 238c 	ldr.w	r2, [r3, #908]	@ 0x38c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
  ptp_clock->pdelay_t4.seconds = ptp_clock->pdelay_t4.nanoseconds = 0;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

  // Reset parent statistics.
  ptp_clock->parentDS.parentStats = false;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ptp_clock->parentDS.observedParentClockPhaseChangeRate = 0;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	66da      	str	r2, [r3, #108]	@ 0x6c
  ptp_clock->parentDS.observedParentOffsetScaledLogVariance = 0;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  // Level clock.
  if (!ptp_clock->servo.noAdjust)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <ptpd_servo_init_clock+0xd4>
    ptpd_adj_freq(0);
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f000 fb2c 	bl	800627c <ptpd_adj_freq>

  // Empty the event queue.
  ptpd_net_empty_event_queue(&ptp_clock->netPath);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe fac6 	bl	80041bc <ptpd_net_empty_event_queue>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <ptpd_servo_order>:

static int32_t ptpd_servo_order(int32_t n)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  if (n < 0) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da02      	bge.n	8005c4c <ptpd_servo_order+0x14>
    n = -n;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	425b      	negs	r3, r3
 8005c4a:	607b      	str	r3, [r7, #4]
  }
  if (n == 0) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <ptpd_servo_order+0x1e>
    return 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e004      	b.n	8005c60 <ptpd_servo_order+0x28>
  }
  return ptpd_floor_log2(n);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fc fc9b 	bl	8002594 <ptpd_floor_log2>
 8005c5e:	4603      	mov	r3, r0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <ptpd_servo_filter>:

// Exponential smoothing.
static void ptpd_servo_filter(int32_t *nsec_current, Filter *filter)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  // y_sum[1] = y[1] * 2^s
  // y_sum[n] = y_sum[n-1] + x[n-1] - y[n-1]
  // y[n] = y_sum[n] / 2^s

  // Increment number of samples.
  filter->n++;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	60da      	str	r2, [r3, #12]

  // If it is first time, we are running filter, initialize it.
  if (filter->n == 1)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10a      	bne.n	8005c9a <ptpd_servo_filter+0x32>
  {
    filter->y_prev = *nsec_current;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
    filter->y_sum = *nsec_current;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	605a      	str	r2, [r3, #4]
    filter->s_prev = 0;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	815a      	strh	r2, [r3, #10]
  }

  s = filter->s;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]

  // Speedup filter, if not 2^s > n.
  if ((1 << s) > filter->n)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	dd06      	ble.n	8005cbe <ptpd_servo_filter+0x56>
  {
    // Lower the filter order.
    s = ptpd_servo_order(filter->n);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ffbf 	bl	8005c38 <ptpd_servo_order>
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	e004      	b.n	8005cc8 <ptpd_servo_filter+0x60>
  }
  else
  {
    // Avoid overflowing of n.
    filter->n = 1 << s;
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
  }

  // Avoid overflowing of filter. 30 is because using signed 32bit integers.
  s2 = 30 - ptpd_servo_order(max(filter->y_prev, *nsec_current));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7ff ff1c 	bl	8005b10 <max>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ffac 	bl	8005c38 <ptpd_servo_order>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f1c3 031e 	rsb	r3, r3, #30
 8005ce6:	60bb      	str	r3, [r7, #8]

  // Use the lower filter order, higher will overflow.
  s = min(s, s2);
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7ff ff20 	bl	8005b30 <min>
 8005cf0:	60f8      	str	r0, [r7, #12]

  // If the order of the filter changed, change also y_sum value.
  if (filter->s_prev > s)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	da0b      	bge.n	8005d18 <ptpd_servo_filter+0xb0>
  {
    filter->y_sum >>= (filter->s_prev - s);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	411a      	asrs	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e011      	b.n	8005d3c <ptpd_servo_filter+0xd4>
  }
  else if (filter->s_prev < s)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4293      	cmp	r3, r2
 8005d24:	dd0a      	ble.n	8005d3c <ptpd_servo_filter+0xd4>
  {
    filter->y_sum <<= (s - filter->s_prev);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005d30:	4619      	mov	r1, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1a5b      	subs	r3, r3, r1
 8005d36:	409a      	lsls	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  // Compute the filter itself.
  filter->y_sum += *nsec_current - filter->y_prev;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1acb      	subs	r3, r1, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]
  filter->y_prev = filter->y_sum >> s;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	411a      	asrs	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]

  // Save previous order of the filter.
  filter->s_prev = s;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	b21a      	sxth	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	815a      	strh	r2, [r3, #10]

  DBGV("PTPD: filter: %li -> %li (%li)\n", *nsec_current, filter->y_prev, s);

  // Actualize target value.
  *nsec_current = filter->y_prev;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <ptpd_servo_update_offset>:

// 11.2
void ptpd_servo_update_offset(PtpClock *ptp_clock, const TimeInternal *sync_event_ingress_timestamp,
                  const TimeInternal *precise_origin_timestamp, const TimeInternal *correction_field)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
        correction_field->seconds,
        correction_field->nanoseconds);
#endif

  // Compute offsetFromMaster.
  ptpd_sub_time(&ptp_clock->Tms, sync_event_ingress_timestamp, precise_origin_timestamp);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fc fbb7 	bl	8002500 <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tms, &ptp_clock->Tms, correction_field);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 705a 	add.w	r0, r3, #872	@ 0x368
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f7fc fbad 	bl	8002500 <ptpd_sub_time>

  ptp_clock->currentDS.offsetFromMaster = ptp_clock->Tms;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	3398      	adds	r3, #152	@ 0x98
 8005dac:	f502 725a 	add.w	r2, r2, #872	@ 0x368
 8005db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005db4:	e883 0003 	stmia.w	r3, {r0, r1}
  DBGVV("ptpd_servo_update_offset: mean_path_delay %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.meanPathDelay.seconds,
        ptp_clock->currentDS.meanPathDelay.nanoseconds);
#endif

  switch (ptp_clock->portDS.delayMechanism)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d002      	beq.n	8005dc8 <ptpd_servo_update_offset+0x54>
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d00c      	beq.n	8005de0 <ptpd_servo_update_offset+0x6c>
    case P2P:
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->portDS.peerMeanPathDelay);
        break;

    default:
        break;
 8005dc6:	e017      	b.n	8005df8 <ptpd_servo_update_offset+0x84>
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.meanPathDelay);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	33a0      	adds	r3, #160	@ 0xa0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f7fc fb91 	bl	8002500 <ptpd_sub_time>
        break;
 8005dde:	e00b      	b.n	8005df8 <ptpd_servo_update_offset+0x84>
        ptpd_sub_time(&ptp_clock->currentDS.offsetFromMaster, &ptp_clock->currentDS.offsetFromMaster, &ptp_clock->portDS.peerMeanPathDelay);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	334c      	adds	r3, #76	@ 0x4c
 8005df0:	461a      	mov	r2, r3
 8005df2:	f7fc fb85 	bl	8002500 <ptpd_sub_time>
        break;
 8005df6:	bf00      	nop

  DBGVV("ptpd_servo_update_offset: offset %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.offsetFromMaster.seconds,
        ptp_clock->currentDS.offsetFromMaster.nanoseconds);

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <ptpd_servo_update_offset+0xaa>
  {
    if (ptp_clock->portDS.portState == PTP_SLAVE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d144      	bne.n	8005e96 <ptpd_servo_update_offset+0x122>
    {
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    }

    DBGV("ptpd_servo_update_offset: cannot filter seconds\n");

    return;
 8005e1c:	e03b      	b.n	8005e96 <ptpd_servo_update_offset+0x122>
  }

  // Filter offsetFromMaster.
  ptpd_servo_filter(&ptp_clock->currentDS.offsetFromMaster.nanoseconds, &ptp_clock->ofm_filt);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7ff ff1b 	bl	8005c68 <ptpd_servo_filter>

  // Check results.
  if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e38:	4a19      	ldr	r2, [pc, #100]	@ (8005ea0 <ptpd_servo_update_offset+0x12c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	db14      	blt.n	8005e68 <ptpd_servo_update_offset+0xf4>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	dc0d      	bgt.n	8005e68 <ptpd_servo_update_offset+0xf4>
  {
    if (ptp_clock->portDS.portState == PTP_UNCALIBRATED)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	d120      	bne.n	8005e98 <ptpd_servo_update_offset+0x124>
    {
        set_flag(ptp_clock->events, MASTER_CLOCK_SELECTED);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005e5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    if (ptp_clock->portDS.portState == PTP_UNCALIBRATED)
 8005e66:	e017      	b.n	8005e98 <ptpd_servo_update_offset+0x124>
    }
  }
  else if (abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfb8      	it	lt
 8005e72:	425b      	neglt	r3, r3
 8005e74:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea4 <ptpd_servo_update_offset+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	dd0e      	ble.n	8005e98 <ptpd_servo_update_offset+0x124>
  {
    if (ptp_clock->portDS.portState == PTP_SLAVE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d109      	bne.n	8005e98 <ptpd_servo_update_offset+0x124>
    {
        set_flag(ptp_clock->events, SYNCHRONIZATION_FAULT);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8005e8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
 8005e94:	e000      	b.n	8005e98 <ptpd_servo_update_offset+0x124>
    return;
 8005e96:	bf00      	nop
    }
  }
}
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	ffffd8f1 	.word	0xffffd8f1
 8005ea4:	000f4240 	.word	0x000f4240

08005ea8 <ptpd_servo_update_delay>:

// 11.3.
void ptpd_servo_update_delay(PtpClock * ptp_clock, const TimeInternal *delay_event_egress_timestamp,
                 const TimeInternal *receive_timestamp, const TimeInternal *correction_field)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  // Tms valid?
  if (ptp_clock->ofm_filt.n == 0)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d032      	beq.n	8005f26 <ptpd_servo_update_delay+0x7e>
  DBGVV("ptpd_servo_update_delay: correction_field %li seconds %li nanoseconds\n",
        correction_field->seconds,
        correction_field->nanoseconds);
#endif

  ptpd_sub_time(&ptp_clock->Tsm, receive_timestamp, delay_event_egress_timestamp);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc fb18 	bl	8002500 <ptpd_sub_time>
  ptpd_sub_time(&ptp_clock->Tsm, &ptp_clock->Tsm, correction_field);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 705c 	add.w	r0, r3, #880	@ 0x370
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7fc fb0e 	bl	8002500 <ptpd_sub_time>
  ptpd_add_time(&ptp_clock->currentDS.meanPathDelay, &ptp_clock->Tms, &ptp_clock->Tsm);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 715a 	add.w	r1, r3, #872	@ 0x368
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7fc fae7 	bl	80024ca <ptpd_add_time>
  ptpd_div2_time(&ptp_clock->currentDS.meanPathDelay);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	33a0      	adds	r3, #160	@ 0xa0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fc fb19 	bl	8002538 <ptpd_div2_time>
  DBGVV("ptpd_servo_update_delay: meanPathDelay %li seconds %li nanoseconds\n",
        ptp_clock->currentDS.meanPathDelay.seconds,
        ptp_clock->currentDS.meanPathDelay.nanoseconds);

  // Filter delay.
  if (ptp_clock->currentDS.meanPathDelay.seconds != 0)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10b      	bne.n	8005f28 <ptpd_servo_update_delay+0x80>
  {
    DBGV("PTPD: ptpd_servo_update_delay: cannot filter with seconds\n");
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->currentDS.meanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f7ff fea2 	bl	8005c68 <ptpd_servo_filter>
 8005f24:	e000      	b.n	8005f28 <ptpd_servo_update_delay+0x80>
    return;
 8005f26:	bf00      	nop
  }
}
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <ptpd_servo_update_peer_delay>:

void ptpd_servo_update_peer_delay(PtpClock *ptp_clock, const TimeInternal *correction_field, bool two_step)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	71fb      	strb	r3, [r7, #7]
  DBGV("PTPD: ptpd_servo_update_peer_delay\n");

  if (two_step)
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01f      	beq.n	8005f82 <ptpd_servo_update_peer_delay+0x54>
  {
    // Two-step clock.
    TimeInternal tab, tba;
    ptpd_sub_time(&tab, &ptp_clock->pdelay_t2 , &ptp_clock->pdelay_t1);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 7160 	add.w	r1, r3, #896	@ 0x380
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fc fad4 	bl	8002500 <ptpd_sub_time>
    ptpd_sub_time(&tba, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t3);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 7164 	add.w	r1, r3, #912	@ 0x390
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 7262 	add.w	r2, r3, #904	@ 0x388
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fc fac9 	bl	8002500 <ptpd_sub_time>
    ptpd_add_time(&ptp_clock->portDS.peerMeanPathDelay, &tab, &tba);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	334c      	adds	r3, #76	@ 0x4c
 8005f72:	f107 0210 	add.w	r2, r7, #16
 8005f76:	f107 0118 	add.w	r1, r7, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fc faa5 	bl	80024ca <ptpd_add_time>
 8005f80:	e00b      	b.n	8005f9a <ptpd_servo_update_peer_delay+0x6c>
  }
  else
  {
    // One-step clock.
    ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->pdelay_t4, &ptp_clock->pdelay_t1);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 7164 	add.w	r1, r3, #912	@ 0x390
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8005f94:	461a      	mov	r2, r3
 8005f96:	f7fc fab3 	bl	8002500 <ptpd_sub_time>
  }

  ptpd_sub_time(&ptp_clock->portDS.peerMeanPathDelay, &ptp_clock->portDS.peerMeanPathDelay, correction_field);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	334c      	adds	r3, #76	@ 0x4c
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f7fc faaa 	bl	8002500 <ptpd_sub_time>
  ptpd_div2_time(&ptp_clock->portDS.peerMeanPathDelay);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	334c      	adds	r3, #76	@ 0x4c
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fc fac1 	bl	8002538 <ptpd_div2_time>

  // Filter delay.
  if (ptp_clock->portDS.peerMeanPathDelay.seconds != 0)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <ptpd_servo_update_peer_delay+0xa6>
    DBGV("PTPD: ptpd_servo_update_peer_delay: cannot filter with seconds");
    return;
  }
  else
  {
    ptpd_servo_filter(&ptp_clock->portDS.peerMeanPathDelay.nanoseconds, &ptp_clock->owd_filt);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7ff fe4b 	bl	8005c68 <ptpd_servo_filter>
 8005fd2:	e000      	b.n	8005fd6 <ptpd_servo_update_peer_delay+0xa8>
    return;
 8005fd4:	bf00      	nop
  }
}
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <state_string>:

static char *state_string(uint8_t state)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
  switch (state)
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d827      	bhi.n	800603c <state_string+0x60>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <state_string+0x18>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006025 	.word	0x08006025
 8006004:	08006029 	.word	0x08006029
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006031 	.word	0x08006031
 8006010:	08006035 	.word	0x08006035
 8006014:	08006039 	.word	0x08006039
  {
    case PTP_INITIALIZING: return (char *) "PTP_INITIALIZING";
 8006018:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <state_string+0x70>)
 800601a:	e011      	b.n	8006040 <state_string+0x64>
    case PTP_FAULTY: return (char *) "PTP_FAULTY";
 800601c:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <state_string+0x74>)
 800601e:	e00f      	b.n	8006040 <state_string+0x64>
    case PTP_DISABLED: return (char *) "PTP_DISABLED";
 8006020:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <state_string+0x78>)
 8006022:	e00d      	b.n	8006040 <state_string+0x64>
    case PTP_LISTENING: return (char *) "PTP_LISTENING";
 8006024:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <state_string+0x7c>)
 8006026:	e00b      	b.n	8006040 <state_string+0x64>
    case PTP_PRE_MASTER: return (char *) "PTP_PRE_MASTER";
 8006028:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <state_string+0x80>)
 800602a:	e009      	b.n	8006040 <state_string+0x64>
    case PTP_MASTER: return (char *) "PTP_MASTER";
 800602c:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <state_string+0x84>)
 800602e:	e007      	b.n	8006040 <state_string+0x64>
    case PTP_PASSIVE: return (char *) "PTP_PASSIVE";
 8006030:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <state_string+0x88>)
 8006032:	e005      	b.n	8006040 <state_string+0x64>
    case PTP_UNCALIBRATED: return (char *) "PTP_UNCALIBRATED";
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <state_string+0x8c>)
 8006036:	e003      	b.n	8006040 <state_string+0x64>
    case PTP_SLAVE: return (char *) "PTP_SLAVE";
 8006038:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <state_string+0x90>)
 800603a:	e001      	b.n	8006040 <state_string+0x64>
    default: break;
 800603c:	bf00      	nop
  }
  return (char *) "UNKNOWN";
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <state_string+0x94>)
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	08023eec 	.word	0x08023eec
 8006050:	08023f00 	.word	0x08023f00
 8006054:	08023f0c 	.word	0x08023f0c
 8006058:	08023f1c 	.word	0x08023f1c
 800605c:	08023f2c 	.word	0x08023f2c
 8006060:	08023f3c 	.word	0x08023f3c
 8006064:	08023f48 	.word	0x08023f48
 8006068:	08023f54 	.word	0x08023f54
 800606c:	08023f68 	.word	0x08023f68
 8006070:	08023f74 	.word	0x08023f74

08006074 <ptpd_servo_update_clock>:

void ptpd_servo_update_clock(PtpClock *ptp_clock)
{
 8006074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006076:	b08b      	sub	sp, #44	@ 0x2c
 8006078:	af02      	add	r7, sp, #8
 800607a:	6078      	str	r0, [r7, #4]

  DBGV("PTPD: ptpd_servo_update_clock offset %li sec %li nsec\n",
       ptp_clock->currentDS.offsetFromMaster.seconds,
       abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds));

  if (ptp_clock->currentDS.offsetFromMaster.seconds != 0 || abs(ptp_clock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006082:	2b00      	cmp	r3, #0
 8006084:	d108      	bne.n	8006098 <ptpd_servo_update_clock+0x24>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800608c:	2b00      	cmp	r3, #0
 800608e:	bfb8      	it	lt
 8006090:	425b      	neglt	r3, r3
 8006092:	4a5c      	ldr	r2, [pc, #368]	@ (8006204 <ptpd_servo_update_clock+0x190>)
 8006094:	4293      	cmp	r3, r2
 8006096:	dd37      	ble.n	8006108 <ptpd_servo_update_clock+0x94>
  {
    // If secs, reset clock or set freq adjustment to max.
    if (!ptp_clock->servo.noAdjust)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 800609e:	f083 0301 	eor.w	r3, r3, #1
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8089 	beq.w	80061bc <ptpd_servo_update_clock+0x148>
    {
      if (!ptp_clock->servo.noResetClock)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3464 	ldrb.w	r3, [r3, #1124]	@ 0x464
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d017      	beq.n	80060ea <ptpd_servo_update_clock+0x76>
      {
        // Get the current time.
        ptpd_get_time(&timeTmp);
 80060ba:	f107 0310 	add.w	r3, r7, #16
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f8b5 	bl	800622e <ptpd_get_time>

        // Subtract the offset from the master.
        ptpd_sub_time(&timeTmp, &timeTmp, &ptp_clock->currentDS.offsetFromMaster);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80060ca:	f107 0110 	add.w	r1, r7, #16
 80060ce:	f107 0310 	add.w	r3, r7, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fc fa14 	bl	8002500 <ptpd_sub_time>

        // Set the time with the offset.
        ptpd_set_time(&timeTmp);
 80060d8:	f107 0310 	add.w	r3, r7, #16
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f8b9 	bl	8006254 <ptpd_set_time>

        // Reinitialize clock.
        ptpd_servo_init_clock(ptp_clock);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fd34 	bl	8005b50 <ptpd_servo_init_clock>
    if (!ptp_clock->servo.noAdjust)
 80060e8:	e068      	b.n	80061bc <ptpd_servo_update_clock+0x148>
      }
      else
      {
        adj = ptp_clock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dd01      	ble.n	80060f8 <ptpd_servo_update_clock+0x84>
 80060f4:	4b44      	ldr	r3, [pc, #272]	@ (8006208 <ptpd_servo_update_clock+0x194>)
 80060f6:	e000      	b.n	80060fa <ptpd_servo_update_clock+0x86>
 80060f8:	4b44      	ldr	r3, [pc, #272]	@ (800620c <ptpd_servo_update_clock+0x198>)
 80060fa:	61bb      	str	r3, [r7, #24]
        ptpd_adj_freq(-adj);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	425b      	negs	r3, r3
 8006100:	4618      	mov	r0, r3
 8006102:	f000 f8bb 	bl	800627c <ptpd_adj_freq>
    if (!ptp_clock->servo.noAdjust)
 8006106:	e059      	b.n	80061bc <ptpd_servo_update_clock+0x148>
    // The PI controller.

    // Normalize offset to 1s sync interval -> response of the servo
    // will be same for all sync interval values, but faster/slower
    // (possible lost of precision/overflow but much more stable).
    offsetNorm = ptp_clock->currentDS.offsetFromMaster.nanoseconds;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800610e:	61fb      	str	r3, [r7, #28]
    if (ptp_clock->portDS.logSyncInterval > 0)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 8006116:	2b00      	cmp	r3, #0
 8006118:	dd07      	ble.n	800612a <ptpd_servo_update_clock+0xb6>
      offsetNorm >>= ptp_clock->portDS.logSyncInterval;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 8006120:	461a      	mov	r2, r3
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4113      	asrs	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e00c      	b.n	8006144 <ptpd_servo_update_clock+0xd0>
    else if (ptp_clock->portDS.logSyncInterval < 0)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 8006130:	2b00      	cmp	r3, #0
 8006132:	da07      	bge.n	8006144 <ptpd_servo_update_clock+0xd0>
      offsetNorm <<= -ptp_clock->portDS.logSyncInterval;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f993 3056 	ldrsb.w	r3, [r3, #86]	@ 0x56
 800613a:	425b      	negs	r3, r3
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	61fb      	str	r3, [r7, #28]

    // The accumulator for the I component.
    ptp_clock->observedDrift += offsetNorm / ptp_clock->servo.ai;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f9b3 3468 	ldrsh.w	r3, [r3, #1128]	@ 0x468
 8006150:	4619      	mov	r1, r3
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	fb93 f3f1 	sdiv	r3, r3, r1
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    // Clamp the accumulator to ADJ_FREQ_MAX for sanity.
    if (ptp_clock->observedDrift > ADJ_FREQ_MAX)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006166:	4a28      	ldr	r2, [pc, #160]	@ (8006208 <ptpd_servo_update_clock+0x194>)
 8006168:	4293      	cmp	r3, r2
 800616a:	dd04      	ble.n	8006176 <ptpd_servo_update_clock+0x102>
      ptp_clock->observedDrift = ADJ_FREQ_MAX;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a26      	ldr	r2, [pc, #152]	@ (8006208 <ptpd_servo_update_clock+0x194>)
 8006170:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8006174:	e009      	b.n	800618a <ptpd_servo_update_clock+0x116>
    else if (ptp_clock->observedDrift < -ADJ_FREQ_MAX)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800617c:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <ptpd_servo_update_clock+0x19c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	dc03      	bgt.n	800618a <ptpd_servo_update_clock+0x116>
      ptp_clock->observedDrift = -ADJ_FREQ_MAX;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a21      	ldr	r2, [pc, #132]	@ (800620c <ptpd_servo_update_clock+0x198>)
 8006186:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    // Apply controller output as a clock tick rate adjustment.
    if (!ptp_clock->servo.noAdjust)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3465 	ldrb.w	r3, [r3, #1125]	@ 0x465
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <ptpd_servo_update_clock+0x148>
    {
      adj = offsetNorm / ptp_clock->servo.ap + ptp_clock->observedDrift;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f9b3 3466 	ldrsh.w	r3, [r3, #1126]	@ 0x466
 80061a0:	461a      	mov	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80061ae:	4413      	add	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
      ptpd_adj_freq(-adj);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	425b      	negs	r3, r3
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f860 	bl	800627c <ptpd_adj_freq>
      ptp_clock->parentDS.observedParentOffsetScaledLogVariance = 17000 + scaledLogVariance;
      DBGV("PTPD: ptpd_servo_update_clock: observed scalled log variance: 0x%x\n", ptp_clock->parentDS.observedParentOffsetScaledLogVariance);
    }
  }

  switch (ptp_clock->portDS.delayMechanism)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d001      	beq.n	80061ca <ptpd_servo_update_clock+0x156>
 80061c6:	2b02      	cmp	r3, #2
      break;

    case P2P:
      DBG("PTPD: ptpd_servo_update_clock: one-way delay averaged (P2P): %li sec %li nsec\n",
          ptp_clock->portDS.peerMeanPathDelay.seconds, ptp_clock->portDS.peerMeanPathDelay.nanoseconds);
      break;
 80061c8:	e000      	b.n	80061cc <ptpd_servo_update_clock+0x158>
      break;
 80061ca:	bf00      	nop

    default:
      DBG("PTPD: ptpd_servo_update_clock: one-way delay not computed\n");
  }

  printf("ptpd_servo: offset from master: %li sec %li nsec, observed drift: %li %s \r\n",
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 4098 	ldr.w	r4, [r3, #152]	@ 0x98
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 6404 	ldr.w	r6, [r3, #1028]	@ 0x404
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fef9 	bl	8005fdc <state_string>
 80061ea:	4603      	mov	r3, r0
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4633      	mov	r3, r6
 80061f0:	462a      	mov	r2, r5
 80061f2:	4621      	mov	r1, r4
 80061f4:	4807      	ldr	r0, [pc, #28]	@ (8006214 <ptpd_servo_update_clock+0x1a0>)
 80061f6:	f01c fb9f 	bl	8022938 <iprintf>
      ptp_clock->currentDS.offsetFromMaster.seconds,
      ptp_clock->currentDS.offsetFromMaster.nanoseconds,
      ptp_clock->observedDrift,
      state_string(ptp_clock->portDS.portState));
}
 80061fa:	bf00      	nop
 80061fc:	3724      	adds	r7, #36	@ 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006202:	bf00      	nop
 8006204:	05f5e100 	.word	0x05f5e100
 8006208:	004e2000 	.word	0x004e2000
 800620c:	ffb1e000 	.word	0xffb1e000
 8006210:	ffb1dfff 	.word	0xffb1dfff
 8006214:	08023f7c 	.word	0x08023f7c

08006218 <ptpd_get_rand>:
#include "ptpd.h"
#include "ethernetif.h"

uint32_t ptpd_get_rand(uint32_t rand_max)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return rand_max;
 8006220:	687b      	ldr	r3, [r7, #4]
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <ptpd_get_time>:

void ptpd_get_time(TimeInternal *time)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  PtpTime_t ts;

  ethernetif_GetTime(&ts);
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa fc6c 	bl	8000b18 <ethernetif_GetTime>

  time->seconds = ts.tv_sec;
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
  time->nanoseconds = ts.tv_nsec;
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	605a      	str	r2, [r3, #4]
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <ptpd_set_time>:

void ptpd_set_time(const TimeInternal *time)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  PtpTime_t ts;

  ts.tv_sec = time->seconds;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60bb      	str	r3, [r7, #8]
  ts.tv_nsec = time->nanoseconds;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  ethernetif_SetTime(&ts);
 8006268:	f107 0308 	add.w	r3, r7, #8
 800626c:	4618      	mov	r0, r3
 800626e:	f7fa fc23 	bl	8000ab8 <ethernetif_SetTime>
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <ptpd_adj_freq>:

bool ptpd_adj_freq(int32_t adj)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  if (adj > ADJ_FREQ_MAX)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a0a      	ldr	r2, [pc, #40]	@ (80062b0 <ptpd_adj_freq+0x34>)
 8006288:	4293      	cmp	r3, r2
 800628a:	dd02      	ble.n	8006292 <ptpd_adj_freq+0x16>
  {
    adj = ADJ_FREQ_MAX;
 800628c:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <ptpd_adj_freq+0x34>)
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e005      	b.n	800629e <ptpd_adj_freq+0x22>
  }
  else if (adj < -ADJ_FREQ_MAX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a07      	ldr	r2, [pc, #28]	@ (80062b4 <ptpd_adj_freq+0x38>)
 8006296:	4293      	cmp	r3, r2
 8006298:	dc01      	bgt.n	800629e <ptpd_adj_freq+0x22>
  {
    adj = -ADJ_FREQ_MAX;
 800629a:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <ptpd_adj_freq+0x3c>)
 800629c:	607b      	str	r3, [r7, #4]
  }

  ethernetif_PtpFxAdjust(adj);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fa fc6e 	bl	8000b80 <ethernetif_PtpFxAdjust>

  return true;
 80062a4:	2301      	movs	r3, #1
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	004e2000 	.word	0x004e2000
 80062b4:	ffb1dfff 	.word	0xffb1dfff
 80062b8:	ffb1e000 	.word	0xffb1e000

080062bc <ptpd_timer_callback>:
static TimerHandle_t ptpd_timer_id[TIMER_ARRAY_SIZE];
static bool ptpd_timers_expired[TIMER_ARRAY_SIZE];

// Callback for timers.
static void ptpd_timer_callback(TimerHandle_t xTimer)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  int index = (int)pvTimerGetTimerID(xTimer);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f008 ff19 	bl	800f0fc <pvTimerGetTimerID>
 80062ca:	4603      	mov	r3, r0
 80062cc:	60fb      	str	r3, [r7, #12]

  // Sanity check the index.
  if (index < TIMER_ARRAY_SIZE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	dc06      	bgt.n	80062e2 <ptpd_timer_callback+0x26>
  {
    // Mark the indicated timer as expired.
    ptpd_timers_expired[index] = true;
 80062d4:	4a05      	ldr	r2, [pc, #20]	@ (80062ec <ptpd_timer_callback+0x30>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]

    // Notify the PTP thread of a pending operation.
    ptpd_alert();
 80062de:	f7fc ff57 	bl	8003190 <ptpd_alert>
  }
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000099c 	.word	0x2000099c

080062f0 <ptpd_timer_init>:

// Initialize PTPD timers.
void ptpd_timer_init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af02      	add	r7, sp, #8
  int32_t i;

  // Create the various timers used in the system.
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	e014      	b.n	8006326 <ptpd_timer_init+0x36>
  {
    // Mark the timer as not expired.
    ptpd_timers_expired[i] = false;
 80062fc:	4a0e      	ldr	r2, [pc, #56]	@ (8006338 <ptpd_timer_init+0x48>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]

    // Create the timer.
    ptpd_timer_id[i] = xTimerCreate("ptpd", 1, 1, (void*)i, ptpd_timer_callback);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a0c      	ldr	r2, [pc, #48]	@ (800633c <ptpd_timer_init+0x4c>)
 800630a:	9200      	str	r2, [sp, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	2101      	movs	r1, #1
 8006310:	480b      	ldr	r0, [pc, #44]	@ (8006340 <ptpd_timer_init+0x50>)
 8006312:	f008 fb85 	bl	800ea20 <xTimerCreate>
 8006316:	4602      	mov	r2, r0
 8006318:	490a      	ldr	r1, [pc, #40]	@ (8006344 <ptpd_timer_init+0x54>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3301      	adds	r3, #1
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b05      	cmp	r3, #5
 800632a:	dde7      	ble.n	80062fc <ptpd_timer_init+0xc>
  }
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	2000099c 	.word	0x2000099c
 800633c:	080062bd 	.word	0x080062bd
 8006340:	08023fc8 	.word	0x08023fc8
 8006344:	20000984 	.word	0x20000984

08006348 <ptpd_timer_start>:

// Start the indexed timer with the given interval.
void ptpd_timer_start(int32_t index, uint32_t interval_ms)
{
 8006348:	b590      	push	{r4, r7, lr}
 800634a:	b085      	sub	sp, #20
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b05      	cmp	r3, #5
 8006356:	dc29      	bgt.n	80063ac <ptpd_timer_start+0x64>
  if (ptpd_timer_id[index] == 0) return;
 8006358:	4a17      	ldr	r2, [pc, #92]	@ (80063b8 <ptpd_timer_start+0x70>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d025      	beq.n	80063b0 <ptpd_timer_start+0x68>

  // Reset the timer expired flag.
  ptpd_timers_expired[index] = false;
 8006364:	4a15      	ldr	r2, [pc, #84]	@ (80063bc <ptpd_timer_start+0x74>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]

  if (interval_ms == 0)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <ptpd_timer_start+0x30>
  {
    interval_ms = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	603b      	str	r3, [r7, #0]
  }
  xTimerChangePeriod(ptpd_timer_id[index], interval_ms, 100);
 8006378:	4a0f      	ldr	r2, [pc, #60]	@ (80063b8 <ptpd_timer_start+0x70>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006380:	2364      	movs	r3, #100	@ 0x64
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	2104      	movs	r1, #4
 800638a:	f008 fba7 	bl	800eadc <xTimerGenericCommand>
  xTimerStart(ptpd_timer_id[index], 100);
 800638e:	4a0a      	ldr	r2, [pc, #40]	@ (80063b8 <ptpd_timer_start+0x70>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006396:	f007 fae3 	bl	800d960 <xTaskGetTickCount>
 800639a:	4602      	mov	r2, r0
 800639c:	2364      	movs	r3, #100	@ 0x64
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2300      	movs	r3, #0
 80063a2:	2101      	movs	r1, #1
 80063a4:	4620      	mov	r0, r4
 80063a6:	f008 fb99 	bl	800eadc <xTimerGenericCommand>
 80063aa:	e002      	b.n	80063b2 <ptpd_timer_start+0x6a>
  if (index >= TIMER_ARRAY_SIZE) return;
 80063ac:	bf00      	nop
 80063ae:	e000      	b.n	80063b2 <ptpd_timer_start+0x6a>
  if (ptpd_timer_id[index] == 0) return;
 80063b0:	bf00      	nop
}
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd90      	pop	{r4, r7, pc}
 80063b8:	20000984 	.word	0x20000984
 80063bc:	2000099c 	.word	0x2000099c

080063c0 <ptpd_timer_stop>:

// Stop the indexed timer.
void ptpd_timer_stop(int32_t index)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	6078      	str	r0, [r7, #4]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	dc10      	bgt.n	80063f0 <ptpd_timer_stop+0x30>

  DBGV("PTPD: stop timer %li\n", index);

  // Stop the timer.
  xTimerStop(ptpd_timer_id[index], 0);
 80063ce:	4a0a      	ldr	r2, [pc, #40]	@ (80063f8 <ptpd_timer_stop+0x38>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	2200      	movs	r2, #0
 80063de:	2103      	movs	r1, #3
 80063e0:	f008 fb7c 	bl	800eadc <xTimerGenericCommand>

  // Reset the expired flag.
  ptpd_timers_expired[index] = false;
 80063e4:	4a05      	ldr	r2, [pc, #20]	@ (80063fc <ptpd_timer_stop+0x3c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e000      	b.n	80063f2 <ptpd_timer_stop+0x32>
  if (index >= TIMER_ARRAY_SIZE) return;
 80063f0:	bf00      	nop
}
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000984 	.word	0x20000984
 80063fc:	2000099c 	.word	0x2000099c

08006400 <ptpd_timer_expired>:

// If the timer has expired, this function will reset the
// expired flag and return true, otherwise it will false.
bool ptpd_timer_expired(int32_t index)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  // Sanity check the index.
  if (index >= TIMER_ARRAY_SIZE) return false;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b05      	cmp	r3, #5
 800640c:	dd01      	ble.n	8006412 <ptpd_timer_expired+0x12>
 800640e:	2300      	movs	r3, #0
 8006410:	e010      	b.n	8006434 <ptpd_timer_expired+0x34>

  // Return false if the timer hasn't expired.
  if (!ptpd_timers_expired[index]) return false;
 8006412:	4a0b      	ldr	r2, [pc, #44]	@ (8006440 <ptpd_timer_expired+0x40>)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4413      	add	r3, r2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f083 0301 	eor.w	r3, r3, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <ptpd_timer_expired+0x28>
 8006424:	2300      	movs	r3, #0
 8006426:	e005      	b.n	8006434 <ptpd_timer_expired+0x34>

  // We only return the timer expired once.
  ptpd_timers_expired[index] = false;
 8006428:	4a05      	ldr	r2, [pc, #20]	@ (8006440 <ptpd_timer_expired+0x40>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]

  // Return true since the timer expired.
  return true;
 8006432:	2301      	movs	r3, #1
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	2000099c 	.word	0x2000099c

08006444 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <LAN8742_RegisterBusIO+0x28>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <LAN8742_RegisterBusIO+0x28>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <LAN8742_RegisterBusIO+0x28>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
 8006470:	e014      	b.n	800649c <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d139      	bne.n	8006538 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e01c      	b.n	8006518 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f107 020c 	add.w	r2, r7, #12
 80064e6:	2112      	movs	r1, #18
 80064e8:	6978      	ldr	r0, [r7, #20]
 80064ea:	4798      	blx	r3
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	da03      	bge.n	80064fa <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80064f2:	f06f 0304 	mvn.w	r3, #4
 80064f6:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80064f8:	e00b      	b.n	8006512 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	429a      	cmp	r2, r3
 8006504:	d105      	bne.n	8006512 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
         break;
 8006510:	e005      	b.n	800651e <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3301      	adds	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b1f      	cmp	r3, #31
 800651c:	d9df      	bls.n	80064de <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b1f      	cmp	r3, #31
 8006524:	d902      	bls.n	800652c <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8006526:	f06f 0302 	mvn.w	r3, #2
 800652a:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8006538:	693b      	ldr	r3, [r7, #16]
 }
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6810      	ldr	r0, [r2, #0]
 8006556:	f107 020c 	add.w	r2, r7, #12
 800655a:	2101      	movs	r1, #1
 800655c:	4798      	blx	r3
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	da02      	bge.n	800656a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006564:	f06f 0304 	mvn.w	r3, #4
 8006568:	e06e      	b.n	8006648 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6810      	ldr	r0, [r2, #0]
 8006572:	f107 020c 	add.w	r2, r7, #12
 8006576:	2101      	movs	r1, #1
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	da02      	bge.n	8006586 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006580:	f06f 0304 	mvn.w	r3, #4
 8006584:	e060      	b.n	8006648 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006590:	2301      	movs	r3, #1
 8006592:	e059      	b.n	8006648 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6810      	ldr	r0, [r2, #0]
 800659c:	f107 020c 	add.w	r2, r7, #12
 80065a0:	2100      	movs	r1, #0
 80065a2:	4798      	blx	r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da02      	bge.n	80065b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80065aa:	f06f 0304 	mvn.w	r3, #4
 80065ae:	e04b      	b.n	8006648 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d11b      	bne.n	80065f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d006      	beq.n	80065d2 <LAN8742_GetLinkState+0x90>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e03a      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80065dc:	2303      	movs	r3, #3
 80065de:	e033      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80065ea:	2304      	movs	r3, #4
 80065ec:	e02c      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80065ee:	2305      	movs	r3, #5
 80065f0:	e02a      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6810      	ldr	r0, [r2, #0]
 80065fa:	f107 020c 	add.w	r2, r7, #12
 80065fe:	211f      	movs	r1, #31
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	da02      	bge.n	800660e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8006608:	f06f 0304 	mvn.w	r3, #4
 800660c:	e01c      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8006618:	2306      	movs	r3, #6
 800661a:	e015      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 031c 	and.w	r3, r3, #28
 8006622:	2b18      	cmp	r3, #24
 8006624:	d101      	bne.n	800662a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006626:	2302      	movs	r3, #2
 8006628:	e00e      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 031c 	and.w	r3, r3, #28
 8006630:	2b08      	cmp	r3, #8
 8006632:	d101      	bne.n	8006638 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006634:	2303      	movs	r3, #3
 8006636:	e007      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 031c 	and.w	r3, r3, #28
 800663e:	2b14      	cmp	r3, #20
 8006640:	d101      	bne.n	8006646 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006642:	2304      	movs	r3, #4
 8006644:	e000      	b.n	8006648 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006646:	2305      	movs	r3, #5
    }
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08c      	sub	sp, #48	@ 0x30
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800665a:	2300      	movs	r3, #0
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <BSP_LED_Init+0x28>
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d006      	beq.n	8006678 <BSP_LED_Init+0x28>
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d003      	beq.n	8006678 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006670:	f06f 0301 	mvn.w	r3, #1
 8006674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006676:	e055      	b.n	8006724 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800667e:	4b2c      	ldr	r3, [pc, #176]	@ (8006730 <BSP_LED_Init+0xe0>)
 8006680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006684:	4a2a      	ldr	r2, [pc, #168]	@ (8006730 <BSP_LED_Init+0xe0>)
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800668e:	4b28      	ldr	r3, [pc, #160]	@ (8006730 <BSP_LED_Init+0xe0>)
 8006690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e021      	b.n	80066e2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10f      	bne.n	80066c4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80066a4:	4b22      	ldr	r3, [pc, #136]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066aa:	4a21      	ldr	r2, [pc, #132]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066ac:	f043 0310 	orr.w	r3, r3, #16
 80066b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	e00e      	b.n	80066e2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80066c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ca:	4a19      	ldr	r2, [pc, #100]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066cc:	f043 0302 	orr.w	r3, r3, #2
 80066d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066d4:	4b16      	ldr	r3, [pc, #88]	@ (8006730 <BSP_LED_Init+0xe0>)
 80066d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	4a13      	ldr	r2, [pc, #76]	@ (8006734 <BSP_LED_Init+0xe4>)
 80066e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ea:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80066ec:	2301      	movs	r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006738 <BSP_LED_Init+0xe8>)
 80066fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006700:	f107 0218 	add.w	r2, r7, #24
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f002 f930 	bl	800896c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	4a0a      	ldr	r2, [pc, #40]	@ (8006738 <BSP_LED_Init+0xe8>)
 8006710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	4a07      	ldr	r2, [pc, #28]	@ (8006734 <BSP_LED_Init+0xe4>)
 8006718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671c:	2200      	movs	r2, #0
 800671e:	4619      	mov	r1, r3
 8006720:	f002 facc 	bl	8008cbc <HAL_GPIO_WritePin>
  }

  return ret;
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006726:	4618      	mov	r0, r3
 8006728:	3730      	adds	r7, #48	@ 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	58024400 	.word	0x58024400
 8006734:	08028ba0 	.word	0x08028ba0
 8006738:	20000014 	.word	0x20000014

0800673c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <BSP_LED_On+0x28>
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d006      	beq.n	8006764 <BSP_LED_On+0x28>
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d003      	beq.n	8006764 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800675c:	f06f 0301 	mvn.w	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	e00b      	b.n	800677c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	4a08      	ldr	r2, [pc, #32]	@ (8006788 <BSP_LED_On+0x4c>)
 8006768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	4a07      	ldr	r2, [pc, #28]	@ (800678c <BSP_LED_On+0x50>)
 8006770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006774:	2201      	movs	r2, #1
 8006776:	4619      	mov	r1, r3
 8006778:	f002 faa0 	bl	8008cbc <HAL_GPIO_WritePin>
  }

  return ret;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000014 	.word	0x20000014
 800678c:	08028ba0 	.word	0x08028ba0

08006790 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <BSP_LED_Off+0x28>
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d006      	beq.n	80067b8 <BSP_LED_Off+0x28>
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d003      	beq.n	80067b8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067b0:	f06f 0301 	mvn.w	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e00b      	b.n	80067d0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <BSP_LED_Off+0x4c>)
 80067bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	4a07      	ldr	r2, [pc, #28]	@ (80067e0 <BSP_LED_Off+0x50>)
 80067c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c8:	2200      	movs	r2, #0
 80067ca:	4619      	mov	r1, r3
 80067cc:	f002 fa76 	bl	8008cbc <HAL_GPIO_WritePin>
  }

  return ret;
 80067d0:	68fb      	ldr	r3, [r7, #12]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000014 	.word	0x20000014
 80067e0:	08028ba0 	.word	0x08028ba0

080067e4 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80067e8:	4b26      	ldr	r3, [pc, #152]	@ (8006884 <SystemInit+0xa0>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ee:	4a25      	ldr	r2, [pc, #148]	@ (8006884 <SystemInit+0xa0>)
 80067f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80067f8:	4b23      	ldr	r3, [pc, #140]	@ (8006888 <SystemInit+0xa4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a22      	ldr	r2, [pc, #136]	@ (8006888 <SystemInit+0xa4>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006804:	4b20      	ldr	r3, [pc, #128]	@ (8006888 <SystemInit+0xa4>)
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800680a:	4b1f      	ldr	r3, [pc, #124]	@ (8006888 <SystemInit+0xa4>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	491e      	ldr	r1, [pc, #120]	@ (8006888 <SystemInit+0xa4>)
 8006810:	4b1e      	ldr	r3, [pc, #120]	@ (800688c <SystemInit+0xa8>)
 8006812:	4013      	ands	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006816:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <SystemInit+0xa4>)
 8006818:	2200      	movs	r2, #0
 800681a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800681c:	4b1a      	ldr	r3, [pc, #104]	@ (8006888 <SystemInit+0xa4>)
 800681e:	2200      	movs	r2, #0
 8006820:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006822:	4b19      	ldr	r3, [pc, #100]	@ (8006888 <SystemInit+0xa4>)
 8006824:	2200      	movs	r2, #0
 8006826:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8006828:	4b17      	ldr	r3, [pc, #92]	@ (8006888 <SystemInit+0xa4>)
 800682a:	2200      	movs	r2, #0
 800682c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800682e:	4b16      	ldr	r3, [pc, #88]	@ (8006888 <SystemInit+0xa4>)
 8006830:	2200      	movs	r2, #0
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8006834:	4b14      	ldr	r3, [pc, #80]	@ (8006888 <SystemInit+0xa4>)
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800683a:	4b13      	ldr	r3, [pc, #76]	@ (8006888 <SystemInit+0xa4>)
 800683c:	2200      	movs	r2, #0
 800683e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8006840:	4b11      	ldr	r3, [pc, #68]	@ (8006888 <SystemInit+0xa4>)
 8006842:	2200      	movs	r2, #0
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <SystemInit+0xa4>)
 8006848:	2200      	movs	r2, #0
 800684a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800684c:	4b0e      	ldr	r3, [pc, #56]	@ (8006888 <SystemInit+0xa4>)
 800684e:	2200      	movs	r2, #0
 8006850:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <SystemInit+0xa4>)
 8006854:	2200      	movs	r2, #0
 8006856:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <SystemInit+0xa4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a0a      	ldr	r2, [pc, #40]	@ (8006888 <SystemInit+0xa4>)
 800685e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006862:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006864:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <SystemInit+0xa4>)
 8006866:	2200      	movs	r2, #0
 8006868:	661a      	str	r2, [r3, #96]	@ 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800686a:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <SystemInit+0xac>)
 800686c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006870:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006872:	4b04      	ldr	r3, [pc, #16]	@ (8006884 <SystemInit+0xa0>)
 8006874:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006878:	609a      	str	r2, [r3, #8]
#endif  


}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	e000ed00 	.word	0xe000ed00
 8006888:	58024400 	.word	0x58024400
 800688c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006890:	52004000 	.word	0x52004000

08006894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800689a:	2003      	movs	r0, #3
 800689c:	f000 f92f 	bl	8006afe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068a0:	f002 fff0 	bl	8009884 <HAL_RCC_GetSysClockFreq>
 80068a4:	4602      	mov	r2, r0
 80068a6:	4b15      	ldr	r3, [pc, #84]	@ (80068fc <HAL_Init+0x68>)
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	4913      	ldr	r1, [pc, #76]	@ (8006900 <HAL_Init+0x6c>)
 80068b2:	5ccb      	ldrb	r3, [r1, r3]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068be:	4b0f      	ldr	r3, [pc, #60]	@ (80068fc <HAL_Init+0x68>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <HAL_Init+0x6c>)
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006904 <HAL_Init+0x70>)
 80068d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006908 <HAL_Init+0x74>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068de:	200f      	movs	r0, #15
 80068e0:	f7fb fbc4 	bl	800206c <HAL_InitTick>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e002      	b.n	80068f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80068ee:	f000 f80d 	bl	800690c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58024400 	.word	0x58024400
 8006900:	08028ba8 	.word	0x08028ba8
 8006904:	20000024 	.word	0x20000024
 8006908:	20000020 	.word	0x20000020

0800690c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006920:	4b06      	ldr	r3, [pc, #24]	@ (800693c <HAL_IncTick+0x20>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <HAL_IncTick+0x24>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4413      	add	r3, r2
 800692c:	4a04      	ldr	r2, [pc, #16]	@ (8006940 <HAL_IncTick+0x24>)
 800692e:	6013      	str	r3, [r2, #0]
}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2000002c 	.word	0x2000002c
 8006940:	200009a4 	.word	0x200009a4

08006944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  return uwTick;
 8006948:	4b03      	ldr	r3, [pc, #12]	@ (8006958 <HAL_GetTick+0x14>)
 800694a:	681b      	ldr	r3, [r3, #0]
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	200009a4 	.word	0x200009a4

0800695c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006964:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800696c:	4904      	ldr	r1, [pc, #16]	@ (8006980 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4313      	orrs	r3, r2
 8006972:	604b      	str	r3, [r1, #4]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	58000400 	.word	0x58000400

08006984 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8006988:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <HAL_EnableCompensationCell+0x1c>)
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	4a04      	ldr	r2, [pc, #16]	@ (80069a0 <HAL_EnableCompensationCell+0x1c>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6213      	str	r3, [r2, #32]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	58000400 	.word	0x58000400

080069a4 <__NVIC_SetPriorityGrouping>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069b4:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <__NVIC_SetPriorityGrouping+0x40>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069c0:	4013      	ands	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <__NVIC_SetPriorityGrouping+0x44>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069d2:	4a04      	ldr	r2, [pc, #16]	@ (80069e4 <__NVIC_SetPriorityGrouping+0x40>)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	60d3      	str	r3, [r2, #12]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00
 80069e8:	05fa0000 	.word	0x05fa0000

080069ec <__NVIC_GetPriorityGrouping>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069f0:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <__NVIC_GetPriorityGrouping+0x18>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	f003 0307 	and.w	r3, r3, #7
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <__NVIC_EnableIRQ>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	db0b      	blt.n	8006a32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	f003 021f 	and.w	r2, r3, #31
 8006a20:	4907      	ldr	r1, [pc, #28]	@ (8006a40 <__NVIC_EnableIRQ+0x38>)
 8006a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2001      	movs	r0, #1
 8006a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	e000e100 	.word	0xe000e100

08006a44 <__NVIC_SetPriority>:
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	db0a      	blt.n	8006a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	490c      	ldr	r1, [pc, #48]	@ (8006a90 <__NVIC_SetPriority+0x4c>)
 8006a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a62:	0112      	lsls	r2, r2, #4
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	440b      	add	r3, r1
 8006a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a6c:	e00a      	b.n	8006a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	4908      	ldr	r1, [pc, #32]	@ (8006a94 <__NVIC_SetPriority+0x50>)
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	3b04      	subs	r3, #4
 8006a7c:	0112      	lsls	r2, r2, #4
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	440b      	add	r3, r1
 8006a82:	761a      	strb	r2, [r3, #24]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	e000e100 	.word	0xe000e100
 8006a94:	e000ed00 	.word	0xe000ed00

08006a98 <NVIC_EncodePriority>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b089      	sub	sp, #36	@ 0x24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f1c3 0307 	rsb	r3, r3, #7
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	bf28      	it	cs
 8006ab6:	2304      	movcs	r3, #4
 8006ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d902      	bls.n	8006ac8 <NVIC_EncodePriority+0x30>
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3b03      	subs	r3, #3
 8006ac6:	e000      	b.n	8006aca <NVIC_EncodePriority+0x32>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43da      	mvns	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	401a      	ands	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aea:	43d9      	mvns	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af0:	4313      	orrs	r3, r2
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3724      	adds	r7, #36	@ 0x24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff ff4c 	bl	80069a4 <__NVIC_SetPriorityGrouping>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b22:	f7ff ff63 	bl	80069ec <__NVIC_GetPriorityGrouping>
 8006b26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	f7ff ffb3 	bl	8006a98 <NVIC_EncodePriority>
 8006b32:	4602      	mov	r2, r0
 8006b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff ff82 	bl	8006a44 <__NVIC_SetPriority>
}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff ff56 	bl	8006a08 <__NVIC_EnableIRQ>
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006b68:	f3bf 8f5f 	dmb	sy
}
 8006b6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b6e:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <HAL_MPU_Disable+0x28>)
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	4a06      	ldr	r2, [pc, #24]	@ (8006b8c <HAL_MPU_Disable+0x28>)
 8006b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b78:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_MPU_Disable+0x2c>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	605a      	str	r2, [r3, #4]
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	e000ed00 	.word	0xe000ed00
 8006b90:	e000ed90 	.word	0xe000ed90

08006b94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006bcc <HAL_MPU_Enable+0x38>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <HAL_MPU_Enable+0x3c>)
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	4a09      	ldr	r2, [pc, #36]	@ (8006bd0 <HAL_MPU_Enable+0x3c>)
 8006bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006bb2:	f3bf 8f4f 	dsb	sy
}
 8006bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bb8:	f3bf 8f6f 	isb	sy
}
 8006bbc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000ed90 	.word	0xe000ed90
 8006bd0:	e000ed00 	.word	0xe000ed00

08006bd4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	785a      	ldrb	r2, [r3, #1]
 8006be0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c50 <HAL_MPU_ConfigRegion+0x7c>)
 8006be2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006be4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c50 <HAL_MPU_ConfigRegion+0x7c>)
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	4a19      	ldr	r2, [pc, #100]	@ (8006c50 <HAL_MPU_ConfigRegion+0x7c>)
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006bf0:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <HAL_MPU_ConfigRegion+0x7c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7b1b      	ldrb	r3, [r3, #12]
 8006bfc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7adb      	ldrb	r3, [r3, #11]
 8006c02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7a9b      	ldrb	r3, [r3, #10]
 8006c0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	7b5b      	ldrb	r3, [r3, #13]
 8006c12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7b9b      	ldrb	r3, [r3, #14]
 8006c1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7bdb      	ldrb	r3, [r3, #15]
 8006c22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7a5b      	ldrb	r3, [r3, #9]
 8006c2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7a1b      	ldrb	r3, [r3, #8]
 8006c32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c3c:	4a04      	ldr	r2, [pc, #16]	@ (8006c50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c40:	6113      	str	r3, [r2, #16]
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	e000ed90 	.word	0xe000ed90

08006c54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e0e3      	b.n	8006e2e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2223      	movs	r2, #35	@ 0x23
 8006c74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fa fb21 	bl	80012c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e38 <HAL_ETH_Init+0x1e4>)
 8006c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c84:	4a6c      	ldr	r2, [pc, #432]	@ (8006e38 <HAL_ETH_Init+0x1e4>)
 8006c86:	f043 0302 	orr.w	r3, r3, #2
 8006c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e38 <HAL_ETH_Init+0x1e4>)
 8006c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7a1b      	ldrb	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f7ff fe59 	bl	800695c <HAL_SYSCFG_ETHInterfaceSelect>
 8006caa:	e003      	b.n	8006cb4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006cac:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006cb0:	f7ff fe54 	bl	800695c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006cb4:	4b61      	ldr	r3, [pc, #388]	@ (8006e3c <HAL_ETH_Init+0x1e8>)
 8006cb6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006cce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd0:	f7ff fe38 	bl	8006944 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006cd6:	e011      	b.n	8006cfc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006cd8:	f7ff fe34 	bl	8006944 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006ce6:	d909      	bls.n	8006cfc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2204      	movs	r2, #4
 8006cec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	22e0      	movs	r2, #224	@ 0xe0
 8006cf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      /* Return Error */
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e098      	b.n	8006e2e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e4      	bne.n	8006cd8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fff4 	bl	8007cfc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006d14:	f002 ff30 	bl	8009b78 <HAL_RCC_GetHCLKFreq>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a49      	ldr	r2, [pc, #292]	@ (8006e40 <HAL_ETH_Init+0x1ec>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	0c9a      	lsrs	r2, r3, #18
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3a01      	subs	r2, #1
 8006d28:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fa3d 	bl	80081ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006d3e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d4e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	22e0      	movs	r2, #224	@ 0xe0
 8006d6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    /* Return Error */
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e05d      	b.n	8006e2e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006d7e:	4b31      	ldr	r3, [pc, #196]	@ (8006e44 <HAL_ETH_Init+0x1f0>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6952      	ldr	r2, [r2, #20]
 8006d86:	0051      	lsls	r1, r2, #1
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d92:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 faa5 	bl	80082e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 faeb 	bl	8008378 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	3305      	adds	r3, #5
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	3303      	adds	r3, #3
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	061a      	lsls	r2, r3, #24
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	3302      	adds	r3, #2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006de0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006dee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006df0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b11      	ldr	r3, [pc, #68]	@ (8006e48 <HAL_ETH_Init+0x1f4>)
 8006e02:	430b      	orrs	r3, r1
 8006e04:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <HAL_ETH_Init+0x1f8>)
 8006e16:	430b      	orrs	r3, r1
 8006e18:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  heth->gState = HAL_ETH_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2210      	movs	r2, #16
 8006e28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	58000400 	.word	0x58000400
 8006e40:	431bde83 	.word	0x431bde83
 8006e44:	ffff8001 	.word	0xffff8001
 8006e48:	0c020060 	.word	0x0c020060
 8006e4c:	0c20c000 	.word	0x0c20c000

08006e50 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d165      	bne.n	8006f2e <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2223      	movs	r2, #35	@ 0x23
 8006e66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2208      	movs	r2, #8
 8006e74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9f6 	bl	8007268 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e84:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e94:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006eb0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ebc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8006ec8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ecc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0202 	orr.w	r2, r2, #2
 8006ef2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f1e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2223      	movs	r2, #35	@ 0x23
 8006f26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e000      	b.n	8006f30 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
  }
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f46:	2b23      	cmp	r3, #35	@ 0x23
 8006f48:	d165      	bne.n	8007016 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2223      	movs	r2, #35	@ 0x23
 8006f4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f5a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b30      	ldr	r3, [pc, #192]	@ (8007024 <HAL_ETH_Stop_IT+0xec>)
 8006f64:	400b      	ands	r3, r1
 8006f66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f6a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f76:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	f023 0301 	bic.w	r3, r3, #1
 8006f82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f86:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fa2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0202 	bic.w	r2, r2, #2
 8006fd8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e00e      	b.n	8006ffe <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	3212      	adds	r2, #18
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b07      	cmp	r3, #7
 8007002:	d9ed      	bls.n	8006fe0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	669a      	str	r2, [r3, #104]	@ 0x68

    heth->gState = HAL_ETH_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2210      	movs	r2, #16
 800700e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	e000      	b.n	8007018 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
  }
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	ffff2f3e 	.word	0xffff2f3e

08007028 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800703e:	f043 0201 	orr.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e03a      	b.n	80070c2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007052:	2b23      	cmp	r3, #35	@ 0x23
 8007054:	d134      	bne.n	80070c0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800705e:	2201      	movs	r2, #1
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 f9e6 	bl	8008434 <ETH_Prepare_Tx_Descriptors>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007074:	f043 0202 	orr.w	r2, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e01f      	b.n	80070c2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007082:	f3bf 8f4f 	dsb	sy
}
 8007086:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	629a      	str	r2, [r3, #40]	@ 0x28
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	2b03      	cmp	r3, #3
 8007098:	d904      	bls.n	80070a4 <HAL_ETH_Transmit_IT+0x7c>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	1f1a      	subs	r2, r3, #4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3106      	adds	r1, #6
 80070b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070b8:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
  }
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b088      	sub	sp, #32
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  uint8_t expecting_ts = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	73bb      	strb	r3, [r7, #14]

  if (pAppBuff == NULL)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d109      	bne.n	80070fa <HAL_ETH_ReadData+0x30>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070ec:	f043 0201 	orr.w	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e0b2      	b.n	8007260 <HAL_ETH_ReadData+0x196>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007100:	2b23      	cmp	r3, #35	@ 0x23
 8007102:	d001      	beq.n	8007108 <HAL_ETH_ReadData+0x3e>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0ab      	b.n	8007260 <HAL_ETH_ReadData+0x196>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	3212      	adds	r2, #18
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800711e:	f1c3 0308 	rsb	r3, r3, #8
 8007122:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 8007124:	e072      	b.n	800720c <HAL_ETH_ReadData+0x142>
    && desccnt < desccntmax
    && !rxdataready)
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00f      	beq.n	8007152 <HAL_ETH_ReadData+0x88>
    {
      if (expecting_ts)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d057      	beq.n	80071e8 <HAL_ETH_ReadData+0x11e>
      {
        /* Get timestamp high */
        heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        /* Get timestamp low */
        heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        rxdataready = 1;
 800714c:	2301      	movs	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e04a      	b.n	80071e8 <HAL_ETH_ReadData+0x11e>
      }
    }
    else
    {
      if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <HAL_ETH_ReadData+0x9e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d029      	beq.n	80071bc <HAL_ETH_ReadData+0xf2>
      {
        /* Check if first descriptor */
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_ETH_ReadData+0xb0>
        {
          heth->RxDescList.RxDataLength = 0;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        /* Check if last descriptor */
        bufflength = heth->Init.RxBuffLen;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	613b      	str	r3, [r7, #16]
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d017      	beq.n	80071bc <HAL_ETH_ReadData+0xf2>
        {
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	613b      	str	r3, [r7, #16]

          /* Save Last descriptor index */
          heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Packet ready */
          if (!READ_BIT(dmarxdesc->DESC1, (1 << 14)))
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_ETH_ReadData+0xee>
          {
            rxdataready = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
 80071b6:	e001      	b.n	80071bc <HAL_ETH_ReadData+0xf2>
          }
          else
          {
            expecting_ts = 1;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73bb      	strb	r3, [r7, #14]
          }
        }
      }

      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f103 0190 	add.w	r1, r3, #144	@ 0x90
        &heth->RxDescList.pRxEnd,
        (uint8_t *)dmarxdesc->BackupAddr0,
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 80071cc:	461a      	mov	r2, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f7fa fa93 	bl	80016fc <HAL_ETH_RxLinkCallback>
        (uint16_t) bufflength);

      heth->RxDescList.RxDataLength += bufflength;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2200      	movs	r2, #0
 80071e6:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	d902      	bls.n	80071fa <HAL_ETH_ReadData+0x130>
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	3b08      	subs	r3, #8
 80071f8:	61fb      	str	r3, [r7, #28]

    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	3212      	adds	r2, #18
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3301      	adds	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	68db      	ldr	r3, [r3, #12]
    && !rxdataready)
 8007210:	2b00      	cmp	r3, #0
 8007212:	db06      	blt.n	8007222 <HAL_ETH_ReadData+0x158>
    && desccnt < desccntmax
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d202      	bcs.n	8007222 <HAL_ETH_ReadData+0x158>
    && !rxdataready)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d081      	beq.n	8007126 <HAL_ETH_ReadData+0x5c>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	67da      	str	r2, [r3, #124]	@ 0x7c

  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_ETH_ReadData+0x172>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f816 	bl	8007268 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (rxdataready == 1U)
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10a      	bne.n	800725e <HAL_ETH_ReadData+0x194>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <HAL_ETH_ReadData+0x196>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8007274:	2301      	movs	r3, #1
 8007276:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800727c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	3212      	adds	r2, #18
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800728e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8007290:	e038      	b.n	8007304 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d112      	bne.n	80072c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800729a:	f107 0308 	add.w	r3, r7, #8
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fa f9f6 	bl	8001690 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	74fb      	strb	r3, [r7, #19]
 80072ae:	e007      	b.n	80072c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	461a      	mov	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	461a      	mov	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80072c0:	7cfb      	ldrb	r3, [r7, #19]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01e      	beq.n	8007304 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80072d4:	60da      	str	r2, [r3, #12]
 80072d6:	e003      	b.n	80072e0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80072de:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	d902      	bls.n	80072f2 <ETH_UpdateDescriptor+0x8a>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3b08      	subs	r3, #8
 80072f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	3212      	adds	r2, #18
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	3b01      	subs	r3, #1
 8007302:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <ETH_UpdateDescriptor+0xa8>
 800730a:	7cfb      	ldrb	r3, [r7, #19]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1c0      	bne.n	8007292 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	429a      	cmp	r2, r3
 8007318:	d015      	beq.n	8007346 <ETH_UpdateDescriptor+0xde>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	3301      	adds	r3, #1
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007324:	f3bf 8f5f 	dmb	sy
}
 8007328:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007332:	461a      	mov	r2, r3
 8007334:	2300      	movs	r3, #0
 8007336:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	679a      	str	r2, [r3, #120]	@ 0x78
    heth->RxDescList.RxBuildDescCnt = desccount;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8007346:	bf00      	nop
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3318      	adds	r3, #24
 800735a:	613b      	str	r3, [r7, #16]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007360:	61fb      	str	r3, [r7, #28]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	61bb      	str	r3, [r7, #24]
  uint8_t pktTxStatus = 1U;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
  uint8_t pktInUse;
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3394      	adds	r3, #148	@ 0x94
 8007370:	60fb      	str	r3, [r7, #12]
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8007372:	e0aa      	b.n	80074ca <HAL_ETH_ReleaseTxPacket+0x17c>
  {
    pktInUse = 1U;
 8007374:	2301      	movs	r3, #1
 8007376:	75bb      	strb	r3, [r7, #22]
    numOfBuf--;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3b01      	subs	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	3304      	adds	r3, #4
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <HAL_ETH_ReleaseTxPacket+0x56>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3301      	adds	r3, #1
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b03      	cmp	r3, #3
 8007398:	d902      	bls.n	80073a0 <HAL_ETH_ReleaseTxPacket+0x52>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	3b04      	subs	r3, #4
 800739e:	61bb      	str	r3, [r7, #24]
      pktInUse = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	75bb      	strb	r3, [r7, #22]
    }

    if (pktInUse != 0U)
 80073a4:	7dbb      	ldrb	r3, [r7, #22]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 808f 	beq.w	80074ca <HAL_ETH_ReleaseTxPacket+0x17c>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68d9      	ldr	r1, [r3, #12]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f2c0 8081 	blt.w	80074c6 <HAL_ETH_ReleaseTxPacket+0x178>
      {
#ifdef HAL_ETH_USE_PTP

        /* Disable Ptp transmission */
        CLEAR_BIT(heth->Init.TxDesc[idx].DESC3, (0x40000000U));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68d9      	ldr	r1, [r3, #12]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4613      	mov	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	440b      	add	r3, r1
 80073d4:	68d9      	ldr	r1, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68d8      	ldr	r0, [r3, #12]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	4403      	add	r3, r0
 80073e6:	f021 4280 	bic.w	r2, r1, #1073741824	@ 0x40000000
 80073ea:	60da      	str	r2, [r3, #12]

        if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_LD)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68d9      	ldr	r1, [r3, #12]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	440b      	add	r3, r1
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d023      	beq.n	800744e <HAL_ETH_ReleaseTxPacket+0x100>
            && (heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_TTSS))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68d9      	ldr	r1, [r3, #12]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4613      	mov	r3, r2
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	4413      	add	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	440b      	add	r3, r1
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <HAL_ETH_ReleaseTxPacket+0x100>
        {
          /* Get timestamp low */
          timestamp->TimeStampLow = heth->Init.TxDesc[idx].DESC0;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68d9      	ldr	r1, [r3, #12]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	4613      	mov	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	440b      	add	r3, r1
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]
          /* Get timestamp high */
          timestamp->TimeStampHigh = heth->Init.TxDesc[idx].DESC1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68d9      	ldr	r1, [r3, #12]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	4613      	mov	r3, r2
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	4413      	add	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	440b      	add	r3, r1
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	e007      	b.n	800745e <HAL_ETH_ReleaseTxPacket+0x110>
        }
        else
        {
          timestamp->TimeStampHigh = timestamp->TimeStampLow = UINT32_MAX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	605a      	str	r2, [r3, #4]
        heth->txFreeCallback(dmatxdesclist->PacketAddress[idx]);
#else
        /* Call callbacks */
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        if (timestamp->TimeStampHigh != UINT32_MAX && timestamp->TimeStampLow != UINT32_MAX)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d00e      	beq.n	8007486 <HAL_ETH_ReleaseTxPacket+0x138>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d009      	beq.n	8007486 <HAL_ETH_ReleaseTxPacket+0x138>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	3304      	adds	r3, #4
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f86e 	bl	8007562 <HAL_ETH_TxPtpCallback>
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	3304      	adds	r3, #4
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4618      	mov	r0, r3
 8007494:	f7fa f99a 	bl	80017cc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3304      	adds	r3, #4
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d902      	bls.n	80074b8 <HAL_ETH_ReleaseTxPacket+0x16a>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	61bb      	str	r3, [r7, #24]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074c4:	e001      	b.n	80074ca <HAL_ETH_ReleaseTxPacket+0x17c>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	75fb      	strb	r3, [r7, #23]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_ETH_ReleaseTxPacket+0x18a>
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f47f af4e 	bne.w	8007374 <HAL_ETH_ReleaseTxPacket+0x26>
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_ETH_PTP_InsertTxTimestamp>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_InsertTxTimestamp(ETH_HandleTypeDef *heth)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3318      	adds	r3, #24
 80074ee:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	613b      	str	r3, [r7, #16]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	60fb      	str	r3, [r7, #12]

  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007506:	2b01      	cmp	r3, #1
 8007508:	d107      	bne.n	800751a <HAL_ETH_PTP_InsertTxTimestamp+0x38>
  {
    /* Enable Time Stamp transmission */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_TTSE);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	609a      	str	r2, [r3, #8]

    /* Return function status */
    return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <HAL_ETH_PTP_InsertTxTimestamp+0x3a>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
  }
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_ETH_PTP_GetRxTimestamp>:
  * @param  timestamp: pointer to ETH_TIMESTAMPTypeDef structure that contains
  *         receive timestamp
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_GetRxTimestamp(ETH_HandleTypeDef *heth, ETH_TimeStampTypeDef *timestamp)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007538:	2b01      	cmp	r3, #1
 800753a:	d10b      	bne.n	8007554 <HAL_ETH_PTP_GetRxTimestamp+0x2c>
  {
    /* Get timestamp low */
    timestamp->TimeStampLow = heth->RxDescList.TimeStamp.TimeStampLow;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	601a      	str	r2, [r3, #0]
    /* Get timestamp high */
    timestamp->TimeStampHigh = heth->RxDescList.TimeStamp.TimeStampHigh;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	605a      	str	r2, [r3, #4]

    /* Return function status */
    return HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	e000      	b.n	8007556 <HAL_ETH_PTP_GetRxTimestamp+0x2e>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_ETH_TxPtpCallback>:
  * @param  timestamp: pointer to ETH_TimeStampTypeDef structure that contains
  *         transmission timestamp
  * @retval None
  */
__weak void HAL_ETH_TxPtpCallback(uint32_t *buff, ETH_TimeStampTypeDef *timestamp)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxPtpCallback could be implemented in the user file
  */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007588:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007592:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007596:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80075a6:	4b6d      	ldr	r3, [pc, #436]	@ (800775c <HAL_ETH_IRQHandler+0x1e4>)
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d010      	beq.n	80075d8 <HAL_ETH_IRQHandler+0x60>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075c8:	461a      	mov	r2, r3
 80075ca:	f248 0340 	movw	r3, #32832	@ 0x8040
 80075ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7f9 ff2a 	bl	800142c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_ETH_IRQHandler+0x8c>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f4:	461a      	mov	r2, r3
 80075f6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80075fa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7f9 ff24 	bl	800144c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d047      	beq.n	800769e <HAL_ETH_IRQHandler+0x126>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d042      	beq.n	800769e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800761e:	f043 0208 	orr.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01e      	beq.n	8007670 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800763e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8007642:	4013      	ands	r3, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007652:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800765e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007662:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	22e0      	movs	r2, #224	@ 0xe0
 800766a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800766e:	e013      	b.n	8007698 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007678:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800767c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800768e:	461a      	mov	r2, r3
 8007690:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8007694:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7f9 fee7 	bl	800146c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d019      	beq.n	80076e6 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076b8:	f043 0210 	orr.w	r2, r3, #16
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    heth->gState = HAL_ETH_STATE_ERROR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	22e0      	movs	r2, #224	@ 0xe0
 80076d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7f9 fec7 	bl	800146c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00f      	beq.n	8007710 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80076f8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f82c 	bl	8007760 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007722:	f003 020f 	and.w	r2, r3, #15
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f821 	bl	8007774 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <HAL_ETH_IRQHandler+0x1e4>)
 8007746:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800774a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f81b 	bl	8007788 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8007752:	bf00      	nop
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	58000080 	.word	0x58000080

08007760 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e03e      	b.n	800783c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	055b      	lsls	r3, r3, #21
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f043 030c 	orr.w	r3, r3, #12
 80077ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80077fe:	f7ff f8a1 	bl	8006944 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007804:	e009      	b.n	800781a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8007806:	f7ff f89d 	bl	8006944 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007814:	d901      	bls.n	800781a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e010      	b.n	800783c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1ed      	bne.n	8007806 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e03c      	b.n	80078e0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800786e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	055b      	lsls	r3, r3, #21
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 030c 	bic.w	r3, r3, #12
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80078a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80078aa:	4a0f      	ldr	r2, [pc, #60]	@ (80078e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80078b2:	f7ff f847 	bl	8006944 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078b8:	e009      	b.n	80078ce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80078ba:	f7ff f843 	bl	8006944 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078c8:	d901      	bls.n	80078ce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e008      	b.n	80078e0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1ed      	bne.n	80078ba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40028000 	.word	0x40028000

080078ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e1c3      	b.n	8007c88 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 020c 	and.w	r2, r3, #12
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	bf14      	ite	ne
 800791c:	2301      	movne	r3, #1
 800791e:	2300      	moveq	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800795e:	2b00      	cmp	r3, #0
 8007960:	bf14      	ite	ne
 8007962:	2301      	movne	r3, #1
 8007964:	2300      	moveq	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800798e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bf0c      	ite	eq
 8007a00:	2301      	moveq	r3, #1
 8007a02:	2300      	movne	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf0c      	ite	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8007a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf14      	ite	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	2300      	moveq	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	2300      	moveq	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bf14      	ite	ne
 8007afc:	2301      	movne	r3, #1
 8007afe:	2300      	moveq	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	0e5b      	lsrs	r3, r3, #25
 8007b4a:	f003 021f 	and.w	r2, r3, #31
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf14      	ite	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	2300      	moveq	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2301      	moveq	r3, #1
 8007ba8:	2300      	movne	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf14      	ite	ne
 8007be0:	2301      	movne	r3, #1
 8007be2:	2300      	moveq	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf14      	ite	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	2300      	moveq	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8007c14:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007c24:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bf14      	ite	ne
 8007c5a:	2301      	movne	r3, #1
 8007c5c:	2300      	moveq	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf0c      	ite	eq
 8007c78:	2301      	moveq	r3, #1
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e00b      	b.n	8007cc0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d105      	bne.n	8007cbe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f8d7 	bl	8007e68 <ETH_SetMACConfig>

    return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e000      	b.n	8007cc0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
  }
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e00b      	b.n	8007cf4 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d105      	bne.n	8007cf2 <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9d9 	bl	80080a0 <ETH_SetDMAConfig>

    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
  }
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007d16:	f001 ff2f 	bl	8009b78 <HAL_RCC_GetHCLKFreq>
 8007d1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d88 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d804      	bhi.n	8007d2e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e022      	b.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4a16      	ldr	r2, [pc, #88]	@ (8007d8c <HAL_ETH_SetMDIOClockRange+0x90>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d204      	bcs.n	8007d40 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e019      	b.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a13      	ldr	r2, [pc, #76]	@ (8007d90 <HAL_ETH_SetMDIOClockRange+0x94>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d915      	bls.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a12      	ldr	r2, [pc, #72]	@ (8007d94 <HAL_ETH_SetMDIOClockRange+0x98>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d804      	bhi.n	8007d5a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e00c      	b.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d804      	bhi.n	8007d6c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e003      	b.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007d72:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	02160ebf 	.word	0x02160ebf
 8007d8c:	03938700 	.word	0x03938700
 8007d90:	05f5e0ff 	.word	0x05f5e0ff
 8007d94:	08f0d17f 	.word	0x08f0d17f
 8007d98:	0ee6b27f 	.word	0x0ee6b27f

08007d9c <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e039      	b.n	8007e24 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007dbc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	791b      	ldrb	r3, [r3, #4]
 8007dc2:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8007dc4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	7a1b      	ldrb	r3, [r3, #8]
 8007dca:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8007dcc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8007dd4:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	7a52      	ldrb	r2, [r2, #9]
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_ETH_SetMACFilterConfig+0x46>
 8007dde:	2220      	movs	r2, #32
 8007de0:	e000      	b.n	8007de4 <HAL_ETH_SetMACFilterConfig+0x48>
 8007de2:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8007de4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	79db      	ldrb	r3, [r3, #7]
 8007dea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8007dec:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	799b      	ldrb	r3, [r3, #6]
 8007df2:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8007df4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	789b      	ldrb	r3, [r3, #2]
 8007dfa:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8007dfc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8007e04:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <HAL_ETH_SetMACFilterConfig+0x94>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	7ffff800 	.word	0x7ffff800

08007e34 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	791b      	ldrb	r3, [r3, #4]
 8007e80:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	7b1b      	ldrb	r3, [r3, #12]
 8007e88:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	7b5b      	ldrb	r3, [r3, #13]
 8007e90:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	7b9b      	ldrb	r3, [r3, #14]
 8007e98:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	7bdb      	ldrb	r3, [r3, #15]
 8007ea0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007ea2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	d102      	bne.n	8007eb2 <ETH_SetMACConfig+0x4a>
 8007eac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007eb0:	e000      	b.n	8007eb4 <ETH_SetMACConfig+0x4c>
 8007eb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007eb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	7c52      	ldrb	r2, [r2, #17]
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	d102      	bne.n	8007ec4 <ETH_SetMACConfig+0x5c>
 8007ebe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007ec2:	e000      	b.n	8007ec6 <ETH_SetMACConfig+0x5e>
 8007ec4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	7c9b      	ldrb	r3, [r3, #18]
 8007ecc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007ece:	431a      	orrs	r2, r3
               macconf->Speed |
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007ed4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	7f1b      	ldrb	r3, [r3, #28]
 8007ee0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007ee2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	7f5b      	ldrb	r3, [r3, #29]
 8007ee8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007eea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	7f92      	ldrb	r2, [r2, #30]
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	d102      	bne.n	8007efa <ETH_SetMACConfig+0x92>
 8007ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ef8:	e000      	b.n	8007efc <ETH_SetMACConfig+0x94>
 8007efa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007efc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	7fdb      	ldrb	r3, [r3, #31]
 8007f02:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007f04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	d102      	bne.n	8007f16 <ETH_SetMACConfig+0xae>
 8007f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f14:	e000      	b.n	8007f18 <ETH_SetMACConfig+0xb0>
 8007f16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007f18:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f26:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007f28:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	4b56      	ldr	r3, [pc, #344]	@ (8008094 <ETH_SetMACConfig+0x22c>)
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f66:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007f68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	d102      	bne.n	8007f7a <ETH_SetMACConfig+0x112>
 8007f74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007f78:	e000      	b.n	8007f7c <ETH_SetMACConfig+0x114>
 8007f7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007f7c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b42      	ldr	r3, [pc, #264]	@ (8008098 <ETH_SetMACConfig+0x230>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	430b      	orrs	r3, r1
 8007f98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fa0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800809c <ETH_SetMACConfig+0x234>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007fc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007fca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	d101      	bne.n	8007fda <ETH_SetMACConfig+0x172>
 8007fd6:	2280      	movs	r2, #128	@ 0x80
 8007fd8:	e000      	b.n	8007fdc <ETH_SetMACConfig+0x174>
 8007fda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007fdc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007fee:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008004:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800800c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	f023 0103 	bic.w	r1, r3, #3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	430a      	orrs	r2, r1
 8008026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8008032:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800804e:	2a00      	cmp	r2, #0
 8008050:	d101      	bne.n	8008056 <ETH_SetMACConfig+0x1ee>
 8008052:	2240      	movs	r2, #64	@ 0x40
 8008054:	e000      	b.n	8008058 <ETH_SetMACConfig+0x1f0>
 8008056:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008058:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008060:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008062:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800806a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8008078:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	430a      	orrs	r2, r1
 8008084:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	00048083 	.word	0x00048083
 8008098:	c0f88000 	.word	0xc0f88000
 800809c:	fffffef0 	.word	0xfffffef0

080080a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	4b38      	ldr	r3, [pc, #224]	@ (8008198 <ETH_SetDMAConfig+0xf8>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	6811      	ldr	r1, [r2, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	430b      	orrs	r3, r1
 80080c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	7b1b      	ldrb	r3, [r3, #12]
 80080d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	4b2c      	ldr	r3, [pc, #176]	@ (800819c <ETH_SetDMAConfig+0xfc>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	68f9      	ldr	r1, [r7, #12]
 80080f2:	430b      	orrs	r3, r1
 80080f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	7b5b      	ldrb	r3, [r3, #13]
 80080fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008110:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8008114:	4b22      	ldr	r3, [pc, #136]	@ (80081a0 <ETH_SetDMAConfig+0x100>)
 8008116:	4013      	ands	r3, r2
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	68f9      	ldr	r1, [r7, #12]
 800811e:	430b      	orrs	r3, r1
 8008120:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008124:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	7d1b      	ldrb	r3, [r3, #20]
 8008130:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008132:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	7f5b      	ldrb	r3, [r3, #29]
 8008138:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008146:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800814a:	4b16      	ldr	r3, [pc, #88]	@ (80081a4 <ETH_SetDMAConfig+0x104>)
 800814c:	4013      	ands	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	430b      	orrs	r3, r1
 8008156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800815a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	7f1b      	ldrb	r3, [r3, #28]
 8008162:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008174:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8008178:	4b0b      	ldr	r3, [pc, #44]	@ (80081a8 <ETH_SetDMAConfig+0x108>)
 800817a:	4013      	ands	r3, r2
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	430b      	orrs	r3, r1
 8008184:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008188:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	ffff87fd 	.word	0xffff87fd
 800819c:	ffff2ffe 	.word	0xffff2ffe
 80081a0:	fffec000 	.word	0xfffec000
 80081a4:	ffc0efef 	.word	0xffc0efef
 80081a8:	7fc0ffff 	.word	0x7fc0ffff

080081ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b0a4      	sub	sp, #144	@ 0x90
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80081ba:	2300      	movs	r3, #0
 80081bc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80081be:	2300      	movs	r3, #0
 80081c0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80081e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80081ec:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8008204:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8008208:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008210:	2300      	movs	r3, #0
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800821a:	2300      	movs	r3, #0
 800821c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008226:	2300      	movs	r3, #0
 8008228:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800822a:	2300      	movs	r3, #0
 800822c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800822e:	2300      	movs	r3, #0
 8008230:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800823e:	2301      	movs	r3, #1
 8008240:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008244:	2320      	movs	r3, #32
 8008246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008250:	2300      	movs	r3, #0
 8008252:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008256:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800825c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008260:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008262:	2300      	movs	r3, #0
 8008264:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008268:	2302      	movs	r3, #2
 800826a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800826e:	2300      	movs	r3, #0
 8008270:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008274:	2300      	movs	r3, #0
 8008276:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008286:	2300      	movs	r3, #0
 8008288:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff fde6 	bl	8007e68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800829c:	2301      	movs	r3, #1
 800829e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80082a0:	2301      	movs	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80082b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80082c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80082cc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80082d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff fee1 	bl	80080a0 <ETH_SetDMAConfig>
}
 80082de:	bf00      	nop
 80082e0:	3790      	adds	r7, #144	@ 0x90
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e01d      	b.n	8008330 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68d9      	ldr	r1, [r3, #12]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4613      	mov	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4413      	add	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	440b      	add	r3, r1
 8008304:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	3206      	adds	r2, #6
 8008326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b03      	cmp	r3, #3
 8008334:	d9de      	bls.n	80082f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008344:	461a      	mov	r2, r3
 8008346:	2303      	movs	r3, #3
 8008348:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008358:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008368:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e023      	b.n	80083ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6919      	ldr	r1, [r3, #16]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4613      	mov	r3, r2
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	4413      	add	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	440b      	add	r3, r1
 8008396:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	3212      	adds	r2, #18
 80083c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b07      	cmp	r3, #7
 80083d2:	d9d8      	bls.n	8008386 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	671a      	str	r2, [r3, #112]	@ 0x70
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	679a      	str	r2, [r3, #120]	@ 0x78
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083fa:	461a      	mov	r2, r3
 80083fc:	2307      	movs	r3, #7
 80083fe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008422:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8008434:	b480      	push	{r7}
 8008436:	b091      	sub	sp, #68	@ 0x44
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3318      	adds	r3, #24
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008476:	d007      	beq.n	8008488 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800847c:	3304      	adds	r3, #4
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8008488:	2302      	movs	r3, #2
 800848a:	e266      	b.n	800895a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d044      	beq.n	8008522 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	4b75      	ldr	r3, [pc, #468]	@ (8008674 <ETH_Prepare_Tx_Descriptors+0x240>)
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80084a4:	431a      	orrs	r2, r3
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80084c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d027      	beq.n	8008522 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084dc:	041b      	lsls	r3, r3, #16
 80084de:	431a      	orrs	r2, r3
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fc:	431a      	orrs	r2, r3
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008510:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008520:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0310 	and.w	r3, r3, #16
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	4b51      	ldr	r3, [pc, #324]	@ (8008678 <ETH_Prepare_Tx_Descriptors+0x244>)
 8008534:	4013      	ands	r3, r2
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	6992      	ldr	r2, [r2, #24]
 800853a:	431a      	orrs	r2, r3
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d036      	beq.n	80085d2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800856c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8008570:	f3bf 8f5f 	dmb	sy
}
 8008574:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008584:	3301      	adds	r3, #1
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858a:	2b03      	cmp	r3, #3
 800858c:	d902      	bls.n	8008594 <ETH_Prepare_Tx_Descriptors+0x160>
 800858e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008590:	3b04      	subs	r3, #4
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	3301      	adds	r3, #1
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b0:	d10f      	bne.n	80085d2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80085bc:	f3bf 8f5f 	dmb	sy
}
 80085c0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80085ce:	2302      	movs	r3, #2
 80085d0:	e1c3      	b.n	800895a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80085d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d4:	3301      	adds	r3, #1
 80085d6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80085d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	4b24      	ldr	r3, [pc, #144]	@ (8008678 <ETH_Prepare_Tx_Descriptors+0x244>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ec:	6852      	ldr	r2, [r2, #4]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80085f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d012      	beq.n	8008622 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	4b1a      	ldr	r3, [pc, #104]	@ (800867c <ETH_Prepare_Tx_Descriptors+0x248>)
 8008612:	4013      	ands	r3, r2
 8008614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008616:	6852      	ldr	r2, [r2, #4]
 8008618:	0412      	lsls	r2, r2, #16
 800861a:	431a      	orrs	r2, r3
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	e008      	b.n	8008634 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <ETH_Prepare_Tx_Descriptors+0x248>)
 800862e:	4013      	ands	r3, r2
 8008630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008632:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0310 	and.w	r3, r3, #16
 800863c:	2b00      	cmp	r3, #0
 800863e:	d021      	beq.n	8008684 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	04db      	lsls	r3, r3, #19
 800864e:	431a      	orrs	r2, r3
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	4b09      	ldr	r3, [pc, #36]	@ (8008680 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800865a:	4013      	ands	r3, r2
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69d2      	ldr	r2, [r2, #28]
 8008660:	431a      	orrs	r2, r3
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e02e      	b.n	80086d2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8008674:	ffff0000 	.word	0xffff0000
 8008678:	ffffc000 	.word	0xffffc000
 800867c:	c000ffff 	.word	0xc000ffff
 8008680:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	4b7b      	ldr	r3, [pc, #492]	@ (8008878 <ETH_Prepare_Tx_Descriptors+0x444>)
 800868a:	4013      	ands	r3, r2
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	6852      	ldr	r2, [r2, #4]
 8008690:	431a      	orrs	r2, r3
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d008      	beq.n	80086b4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	431a      	orrs	r2, r3
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	431a      	orrs	r2, r3
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008706:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8008708:	f3bf 8f5f 	dmb	sy
}
 800870c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 80da 	beq.w	80088dc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	431a      	orrs	r2, r3
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800873a:	e0cf      	b.n	80088dc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874a:	3301      	adds	r3, #1
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008750:	2b03      	cmp	r3, #3
 8008752:	d902      	bls.n	800875a <ETH_Prepare_Tx_Descriptors+0x326>
 8008754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008756:	3b04      	subs	r3, #4
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800877c:	d007      	beq.n	800878e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800877e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008782:	3304      	adds	r3, #4
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d029      	beq.n	80087e2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800879c:	2300      	movs	r3, #0
 800879e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087a0:	e019      	b.n	80087d6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80087a2:	f3bf 8f5f 	dmb	sy
}
 80087a6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80087b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b6:	3301      	adds	r3, #1
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d902      	bls.n	80087c6 <ETH_Prepare_Tx_Descriptors+0x392>
 80087c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c2:	3b04      	subs	r3, #4
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	3301      	adds	r3, #1
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	429a      	cmp	r2, r3
 80087dc:	d3e1      	bcc.n	80087a2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80087de:	2302      	movs	r3, #2
 80087e0:	e0bb      	b.n	800895a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80087e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e4:	3301      	adds	r3, #1
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <ETH_Prepare_Tx_Descriptors+0x448>)
 80087fe:	4013      	ands	r3, r2
 8008800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008802:	6852      	ldr	r2, [r2, #4]
 8008804:	431a      	orrs	r2, r3
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800880a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d012      	beq.n	8008838 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8008812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	4b16      	ldr	r3, [pc, #88]	@ (8008880 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8008828:	4013      	ands	r3, r2
 800882a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800882c:	6852      	ldr	r2, [r2, #4]
 800882e:	0412      	lsls	r2, r2, #16
 8008830:	431a      	orrs	r2, r3
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	609a      	str	r2, [r3, #8]
 8008836:	e008      	b.n	800884a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	2200      	movs	r2, #0
 800883c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	4b0f      	ldr	r3, [pc, #60]	@ (8008880 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8008844:	4013      	ands	r3, r2
 8008846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008848:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	4b0a      	ldr	r3, [pc, #40]	@ (8008884 <ETH_Prepare_Tx_Descriptors+0x450>)
 800885c:	4013      	ands	r3, r2
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	69d2      	ldr	r2, [r2, #28]
 8008862:	431a      	orrs	r2, r3
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	60da      	str	r2, [r3, #12]
 8008874:	e020      	b.n	80088b8 <ETH_Prepare_Tx_Descriptors+0x484>
 8008876:	bf00      	nop
 8008878:	ffff8000 	.word	0xffff8000
 800887c:	ffffc000 	.word	0xffffc000
 8008880:	c000ffff 	.word	0xc000ffff
 8008884:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	4b36      	ldr	r3, [pc, #216]	@ (8008968 <ETH_Prepare_Tx_Descriptors+0x534>)
 800888e:	4013      	ands	r3, r2
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	6852      	ldr	r2, [r2, #4]
 8008894:	431a      	orrs	r2, r3
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	3301      	adds	r3, #1
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80088be:	f3bf 8f5f 	dmb	sy
}
 80088c2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f47f af2b 	bne.w	800873c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	609a      	str	r2, [r3, #8]
 80088f8:	e005      	b.n	8008906 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008916:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	3304      	adds	r3, #4
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008926:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008928:	f3ef 8310 	mrs	r3, PRIMASK
 800892c:	613b      	str	r3, [r7, #16]
  return(result);
 800892e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	2301      	movs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f383 8810 	msr	PRIMASK, r3
}
 800893c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	4413      	add	r3, r2
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	629a      	str	r2, [r3, #40]	@ 0x28
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f383 8810 	msr	PRIMASK, r3
}
 8008956:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3744      	adds	r7, #68	@ 0x44
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	ffff8000 	.word	0xffff8000

0800896c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800896c:	b480      	push	{r7}
 800896e:	b089      	sub	sp, #36	@ 0x24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800897a:	4b86      	ldr	r3, [pc, #536]	@ (8008b94 <HAL_GPIO_Init+0x228>)
 800897c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800897e:	e18c      	b.n	8008c9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	2101      	movs	r1, #1
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	fa01 f303 	lsl.w	r3, r1, r3
 800898c:	4013      	ands	r3, r2
 800898e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 817e 	beq.w	8008c94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d005      	beq.n	80089b0 <HAL_GPIO_Init+0x44>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f003 0303 	and.w	r3, r3, #3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d130      	bne.n	8008a12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	2203      	movs	r2, #3
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	43db      	mvns	r3, r3
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	4013      	ands	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089e6:	2201      	movs	r2, #1
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43db      	mvns	r3, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	4013      	ands	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	091b      	lsrs	r3, r3, #4
 80089fc:	f003 0201 	and.w	r2, r3, #1
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d017      	beq.n	8008a4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	2203      	movs	r2, #3
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43db      	mvns	r3, r3
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	4013      	ands	r3, r2
 8008a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d123      	bne.n	8008aa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	08da      	lsrs	r2, r3, #3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3208      	adds	r2, #8
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	220f      	movs	r2, #15
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	43db      	mvns	r3, r3
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	08da      	lsrs	r2, r3, #3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3208      	adds	r2, #8
 8008a9c:	69b9      	ldr	r1, [r7, #24]
 8008a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	2203      	movs	r2, #3
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f003 0203 	and.w	r2, r3, #3
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 80d8 	beq.w	8008c94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8008b98 <HAL_GPIO_Init+0x22c>)
 8008ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008aea:	4a2b      	ldr	r2, [pc, #172]	@ (8008b98 <HAL_GPIO_Init+0x22c>)
 8008aec:	f043 0302 	orr.w	r3, r3, #2
 8008af0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008af4:	4b28      	ldr	r3, [pc, #160]	@ (8008b98 <HAL_GPIO_Init+0x22c>)
 8008af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b02:	4a26      	ldr	r2, [pc, #152]	@ (8008b9c <HAL_GPIO_Init+0x230>)
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	3302      	adds	r3, #2
 8008b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	220f      	movs	r2, #15
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	43db      	mvns	r3, r3
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	4013      	ands	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <HAL_GPIO_Init+0x234>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d04a      	beq.n	8008bc4 <HAL_GPIO_Init+0x258>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba4 <HAL_GPIO_Init+0x238>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02b      	beq.n	8008b8e <HAL_GPIO_Init+0x222>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba8 <HAL_GPIO_Init+0x23c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d025      	beq.n	8008b8a <HAL_GPIO_Init+0x21e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1a      	ldr	r2, [pc, #104]	@ (8008bac <HAL_GPIO_Init+0x240>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01f      	beq.n	8008b86 <HAL_GPIO_Init+0x21a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a19      	ldr	r2, [pc, #100]	@ (8008bb0 <HAL_GPIO_Init+0x244>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d019      	beq.n	8008b82 <HAL_GPIO_Init+0x216>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a18      	ldr	r2, [pc, #96]	@ (8008bb4 <HAL_GPIO_Init+0x248>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d013      	beq.n	8008b7e <HAL_GPIO_Init+0x212>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a17      	ldr	r2, [pc, #92]	@ (8008bb8 <HAL_GPIO_Init+0x24c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00d      	beq.n	8008b7a <HAL_GPIO_Init+0x20e>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a16      	ldr	r2, [pc, #88]	@ (8008bbc <HAL_GPIO_Init+0x250>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d007      	beq.n	8008b76 <HAL_GPIO_Init+0x20a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a15      	ldr	r2, [pc, #84]	@ (8008bc0 <HAL_GPIO_Init+0x254>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d101      	bne.n	8008b72 <HAL_GPIO_Init+0x206>
 8008b6e:	2309      	movs	r3, #9
 8008b70:	e029      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b72:	230a      	movs	r3, #10
 8008b74:	e027      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b76:	2307      	movs	r3, #7
 8008b78:	e025      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b7a:	2306      	movs	r3, #6
 8008b7c:	e023      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b7e:	2305      	movs	r3, #5
 8008b80:	e021      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b82:	2304      	movs	r3, #4
 8008b84:	e01f      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b86:	2303      	movs	r3, #3
 8008b88:	e01d      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e01b      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e019      	b.n	8008bc6 <HAL_GPIO_Init+0x25a>
 8008b92:	bf00      	nop
 8008b94:	58000080 	.word	0x58000080
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	58000400 	.word	0x58000400
 8008ba0:	58020000 	.word	0x58020000
 8008ba4:	58020400 	.word	0x58020400
 8008ba8:	58020800 	.word	0x58020800
 8008bac:	58020c00 	.word	0x58020c00
 8008bb0:	58021000 	.word	0x58021000
 8008bb4:	58021400 	.word	0x58021400
 8008bb8:	58021800 	.word	0x58021800
 8008bbc:	58021c00 	.word	0x58021c00
 8008bc0:	58022400 	.word	0x58022400
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	f002 0203 	and.w	r2, r2, #3
 8008bcc:	0092      	lsls	r2, r2, #2
 8008bce:	4093      	lsls	r3, r2
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bd6:	4938      	ldr	r1, [pc, #224]	@ (8008cb8 <HAL_GPIO_Init+0x34c>)
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	3302      	adds	r3, #2
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4013      	ands	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f47f ae6b 	bne.w	8008980 <HAL_GPIO_Init+0x14>
  }
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3724      	adds	r7, #36	@ 0x24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	58000400 	.word	0x58000400

08008cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	807b      	strh	r3, [r7, #2]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ccc:	787b      	ldrb	r3, [r7, #1]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cd2:	887a      	ldrh	r2, [r7, #2]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008cd8:	e003      	b.n	8008ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cda:	887b      	ldrh	r3, [r7, #2]
 8008cdc:	041a      	lsls	r2, r3, #16
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	619a      	str	r2, [r3, #24]
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008cf8:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <HAL_PWREx_ConfigSupply+0x70>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d00a      	beq.n	8008d1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d04:	4b16      	ldr	r3, [pc, #88]	@ (8008d60 <HAL_PWREx_ConfigSupply+0x70>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d001      	beq.n	8008d16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e01f      	b.n	8008d56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e01d      	b.n	8008d56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d1a:	4b11      	ldr	r3, [pc, #68]	@ (8008d60 <HAL_PWREx_ConfigSupply+0x70>)
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f023 0207 	bic.w	r2, r3, #7
 8008d22:	490f      	ldr	r1, [pc, #60]	@ (8008d60 <HAL_PWREx_ConfigSupply+0x70>)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d2a:	f7fd fe0b 	bl	8006944 <HAL_GetTick>
 8008d2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d30:	e009      	b.n	8008d46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d32:	f7fd fe07 	bl	8006944 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d40:	d901      	bls.n	8008d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e007      	b.n	8008d56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d46:	4b06      	ldr	r3, [pc, #24]	@ (8008d60 <HAL_PWREx_ConfigSupply+0x70>)
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d52:	d1ee      	bne.n	8008d32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	58024800 	.word	0x58024800

08008d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	@ 0x30
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e3c8      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 8087 	beq.w	8008e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d84:	4b88      	ldr	r3, [pc, #544]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d8e:	4b86      	ldr	r3, [pc, #536]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	2b10      	cmp	r3, #16
 8008d98:	d007      	beq.n	8008daa <HAL_RCC_OscConfig+0x46>
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	2b18      	cmp	r3, #24
 8008d9e:	d110      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x5e>
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d10b      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008daa:	4b7f      	ldr	r3, [pc, #508]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d06c      	beq.n	8008e90 <HAL_RCC_OscConfig+0x12c>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d168      	bne.n	8008e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e3a2      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dca:	d106      	bne.n	8008dda <HAL_RCC_OscConfig+0x76>
 8008dcc:	4b76      	ldr	r3, [pc, #472]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a75      	ldr	r2, [pc, #468]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e02e      	b.n	8008e38 <HAL_RCC_OscConfig+0xd4>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10c      	bne.n	8008dfc <HAL_RCC_OscConfig+0x98>
 8008de2:	4b71      	ldr	r3, [pc, #452]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a70      	ldr	r2, [pc, #448]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	4b6e      	ldr	r3, [pc, #440]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a6d      	ldr	r2, [pc, #436]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	e01d      	b.n	8008e38 <HAL_RCC_OscConfig+0xd4>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e04:	d10c      	bne.n	8008e20 <HAL_RCC_OscConfig+0xbc>
 8008e06:	4b68      	ldr	r3, [pc, #416]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a67      	ldr	r2, [pc, #412]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	4b65      	ldr	r3, [pc, #404]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a64      	ldr	r2, [pc, #400]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e00b      	b.n	8008e38 <HAL_RCC_OscConfig+0xd4>
 8008e20:	4b61      	ldr	r3, [pc, #388]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a60      	ldr	r2, [pc, #384]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d013      	beq.n	8008e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fd fd80 	bl	8006944 <HAL_GetTick>
 8008e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e48:	f7fd fd7c 	bl	8006944 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b64      	cmp	r3, #100	@ 0x64
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e356      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e5a:	4b53      	ldr	r3, [pc, #332]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f0      	beq.n	8008e48 <HAL_RCC_OscConfig+0xe4>
 8008e66:	e014      	b.n	8008e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e68:	f7fd fd6c 	bl	8006944 <HAL_GetTick>
 8008e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e70:	f7fd fd68 	bl	8006944 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b64      	cmp	r3, #100	@ 0x64
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e342      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e82:	4b49      	ldr	r3, [pc, #292]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f0      	bne.n	8008e70 <HAL_RCC_OscConfig+0x10c>
 8008e8e:	e000      	b.n	8008e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 808c 	beq.w	8008fb8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ea0:	4b41      	ldr	r3, [pc, #260]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ea8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x162>
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2b18      	cmp	r3, #24
 8008eba:	d137      	bne.n	8008f2c <HAL_RCC_OscConfig+0x1c8>
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d132      	bne.n	8008f2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ec6:	4b38      	ldr	r3, [pc, #224]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_RCC_OscConfig+0x17a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e314      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ede:	4b32      	ldr	r3, [pc, #200]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f023 0219 	bic.w	r2, r3, #25
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	492f      	ldr	r1, [pc, #188]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fd fd28 	bl	8006944 <HAL_GetTick>
 8008ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ef8:	f7fd fd24 	bl	8006944 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e2fe      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f0a:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f0      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f16:	4b24      	ldr	r3, [pc, #144]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	4920      	ldr	r1, [pc, #128]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f2a:	e045      	b.n	8008fb8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d026      	beq.n	8008f82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f34:	4b1c      	ldr	r3, [pc, #112]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f023 0219 	bic.w	r2, r3, #25
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4919      	ldr	r1, [pc, #100]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f46:	f7fd fcfd 	bl	8006944 <HAL_GetTick>
 8008f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f4c:	e008      	b.n	8008f60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f4e:	f7fd fcf9 	bl	8006944 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e2d3      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f0      	beq.n	8008f4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	061b      	lsls	r3, r3, #24
 8008f7a:	490b      	ldr	r1, [pc, #44]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	604b      	str	r3, [r1, #4]
 8008f80:	e01a      	b.n	8008fb8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f82:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a08      	ldr	r2, [pc, #32]	@ (8008fa8 <HAL_RCC_OscConfig+0x244>)
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8e:	f7fd fcd9 	bl	8006944 <HAL_GetTick>
 8008f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f94:	e00a      	b.n	8008fac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f96:	f7fd fcd5 	bl	8006944 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d903      	bls.n	8008fac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e2af      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
 8008fa8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fac:	4b96      	ldr	r3, [pc, #600]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1ee      	bne.n	8008f96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d06a      	beq.n	800909a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fc4:	4b90      	ldr	r3, [pc, #576]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fce:	4b8e      	ldr	r3, [pc, #568]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d007      	beq.n	8008fea <HAL_RCC_OscConfig+0x286>
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b18      	cmp	r3, #24
 8008fde:	d11b      	bne.n	8009018 <HAL_RCC_OscConfig+0x2b4>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d116      	bne.n	8009018 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fea:	4b87      	ldr	r3, [pc, #540]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_RCC_OscConfig+0x29e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	2b80      	cmp	r3, #128	@ 0x80
 8008ffc:	d001      	beq.n	8009002 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e282      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009002:	4b81      	ldr	r3, [pc, #516]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	061b      	lsls	r3, r3, #24
 8009010:	497d      	ldr	r1, [pc, #500]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009012:	4313      	orrs	r3, r2
 8009014:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009016:	e040      	b.n	800909a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d023      	beq.n	8009068 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009020:	4b79      	ldr	r3, [pc, #484]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a78      	ldr	r2, [pc, #480]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902c:	f7fd fc8a 	bl	8006944 <HAL_GetTick>
 8009030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009034:	f7fd fc86 	bl	8006944 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e260      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009046:	4b70      	ldr	r3, [pc, #448]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009052:	4b6d      	ldr	r3, [pc, #436]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	061b      	lsls	r3, r3, #24
 8009060:	4969      	ldr	r1, [pc, #420]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009062:	4313      	orrs	r3, r2
 8009064:	60cb      	str	r3, [r1, #12]
 8009066:	e018      	b.n	800909a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009068:	4b67      	ldr	r3, [pc, #412]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a66      	ldr	r2, [pc, #408]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800906e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009074:	f7fd fc66 	bl	8006944 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800907c:	f7fd fc62 	bl	8006944 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e23c      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800908e:	4b5e      	ldr	r3, [pc, #376]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d036      	beq.n	8009114 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d019      	beq.n	80090e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ae:	4b56      	ldr	r3, [pc, #344]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80090b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b2:	4a55      	ldr	r2, [pc, #340]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ba:	f7fd fc43 	bl	8006944 <HAL_GetTick>
 80090be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090c0:	e008      	b.n	80090d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090c2:	f7fd fc3f 	bl	8006944 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d901      	bls.n	80090d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e219      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090d4:	4b4c      	ldr	r3, [pc, #304]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80090d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <HAL_RCC_OscConfig+0x35e>
 80090e0:	e018      	b.n	8009114 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090e2:	4b49      	ldr	r3, [pc, #292]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80090e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e6:	4a48      	ldr	r2, [pc, #288]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ee:	f7fd fc29 	bl	8006944 <HAL_GetTick>
 80090f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090f6:	f7fd fc25 	bl	8006944 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e1ff      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009108:	4b3f      	ldr	r3, [pc, #252]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800910a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f0      	bne.n	80090f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d036      	beq.n	800918e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d019      	beq.n	800915c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009128:	4b37      	ldr	r3, [pc, #220]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a36      	ldr	r2, [pc, #216]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800912e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009134:	f7fd fc06 	bl	8006944 <HAL_GetTick>
 8009138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800913a:	e008      	b.n	800914e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800913c:	f7fd fc02 	bl	8006944 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	2b02      	cmp	r3, #2
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e1dc      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800914e:	4b2e      	ldr	r3, [pc, #184]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0f0      	beq.n	800913c <HAL_RCC_OscConfig+0x3d8>
 800915a:	e018      	b.n	800918e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800915c:	4b2a      	ldr	r3, [pc, #168]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a29      	ldr	r2, [pc, #164]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009166:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009168:	f7fd fbec 	bl	8006944 <HAL_GetTick>
 800916c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009170:	f7fd fbe8 	bl	8006944 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e1c2      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009182:	4b21      	ldr	r3, [pc, #132]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f0      	bne.n	8009170 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 8086 	beq.w	80092a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800919c:	4b1b      	ldr	r3, [pc, #108]	@ (800920c <HAL_RCC_OscConfig+0x4a8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1a      	ldr	r2, [pc, #104]	@ (800920c <HAL_RCC_OscConfig+0x4a8>)
 80091a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091a8:	f7fd fbcc 	bl	8006944 <HAL_GetTick>
 80091ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091b0:	f7fd fbc8 	bl	8006944 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b64      	cmp	r3, #100	@ 0x64
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e1a2      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091c2:	4b12      	ldr	r3, [pc, #72]	@ (800920c <HAL_RCC_OscConfig+0x4a8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f0      	beq.n	80091b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d106      	bne.n	80091e4 <HAL_RCC_OscConfig+0x480>
 80091d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091da:	4a0b      	ldr	r2, [pc, #44]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091dc:	f043 0301 	orr.w	r3, r3, #1
 80091e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e2:	e032      	b.n	800924a <HAL_RCC_OscConfig+0x4e6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d111      	bne.n	8009210 <HAL_RCC_OscConfig+0x4ac>
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091f0:	4a05      	ldr	r2, [pc, #20]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80091f8:	4b03      	ldr	r3, [pc, #12]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fc:	4a02      	ldr	r2, [pc, #8]	@ (8009208 <HAL_RCC_OscConfig+0x4a4>)
 80091fe:	f023 0304 	bic.w	r3, r3, #4
 8009202:	6713      	str	r3, [r2, #112]	@ 0x70
 8009204:	e021      	b.n	800924a <HAL_RCC_OscConfig+0x4e6>
 8009206:	bf00      	nop
 8009208:	58024400 	.word	0x58024400
 800920c:	58024800 	.word	0x58024800
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	2b05      	cmp	r3, #5
 8009216:	d10c      	bne.n	8009232 <HAL_RCC_OscConfig+0x4ce>
 8009218:	4b83      	ldr	r3, [pc, #524]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800921a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800921c:	4a82      	ldr	r2, [pc, #520]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800921e:	f043 0304 	orr.w	r3, r3, #4
 8009222:	6713      	str	r3, [r2, #112]	@ 0x70
 8009224:	4b80      	ldr	r3, [pc, #512]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009228:	4a7f      	ldr	r2, [pc, #508]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009230:	e00b      	b.n	800924a <HAL_RCC_OscConfig+0x4e6>
 8009232:	4b7d      	ldr	r3, [pc, #500]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009236:	4a7c      	ldr	r2, [pc, #496]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	6713      	str	r3, [r2, #112]	@ 0x70
 800923e:	4b7a      	ldr	r3, [pc, #488]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009242:	4a79      	ldr	r2, [pc, #484]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009244:	f023 0304 	bic.w	r3, r3, #4
 8009248:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d015      	beq.n	800927e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009252:	f7fd fb77 	bl	8006944 <HAL_GetTick>
 8009256:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009258:	e00a      	b.n	8009270 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800925a:	f7fd fb73 	bl	8006944 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009268:	4293      	cmp	r3, r2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e14b      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009270:	4b6d      	ldr	r3, [pc, #436]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0ee      	beq.n	800925a <HAL_RCC_OscConfig+0x4f6>
 800927c:	e014      	b.n	80092a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927e:	f7fd fb61 	bl	8006944 <HAL_GetTick>
 8009282:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009284:	e00a      	b.n	800929c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009286:	f7fd fb5d 	bl	8006944 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009294:	4293      	cmp	r3, r2
 8009296:	d901      	bls.n	800929c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e135      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800929c:	4b62      	ldr	r3, [pc, #392]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800929e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1ee      	bne.n	8009286 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 812a 	beq.w	8009506 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092b2:	4b5d      	ldr	r3, [pc, #372]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092ba:	2b18      	cmp	r3, #24
 80092bc:	f000 80ba 	beq.w	8009434 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f040 8095 	bne.w	80093f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ca:	4b57      	ldr	r3, [pc, #348]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a56      	ldr	r2, [pc, #344]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80092d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d6:	f7fd fb35 	bl	8006944 <HAL_GetTick>
 80092da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092dc:	e008      	b.n	80092f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092de:	f7fd fb31 	bl	8006944 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d901      	bls.n	80092f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e10b      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092f0:	4b4d      	ldr	r3, [pc, #308]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f0      	bne.n	80092de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092fc:	4b4a      	ldr	r3, [pc, #296]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80092fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009300:	4b4a      	ldr	r3, [pc, #296]	@ (800942c <HAL_RCC_OscConfig+0x6c8>)
 8009302:	4013      	ands	r3, r2
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800930c:	0112      	lsls	r2, r2, #4
 800930e:	430a      	orrs	r2, r1
 8009310:	4945      	ldr	r1, [pc, #276]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009312:	4313      	orrs	r3, r2
 8009314:	628b      	str	r3, [r1, #40]	@ 0x28
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	3b01      	subs	r3, #1
 800931c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009324:	3b01      	subs	r3, #1
 8009326:	025b      	lsls	r3, r3, #9
 8009328:	b29b      	uxth	r3, r3
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	3b01      	subs	r3, #1
 8009332:	041b      	lsls	r3, r3, #16
 8009334:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933e:	3b01      	subs	r3, #1
 8009340:	061b      	lsls	r3, r3, #24
 8009342:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009346:	4938      	ldr	r1, [pc, #224]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009348:	4313      	orrs	r3, r2
 800934a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800934c:	4b36      	ldr	r3, [pc, #216]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800934e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009350:	4a35      	ldr	r2, [pc, #212]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009352:	f023 0301 	bic.w	r3, r3, #1
 8009356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009358:	4b33      	ldr	r3, [pc, #204]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800935a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800935c:	4b34      	ldr	r3, [pc, #208]	@ (8009430 <HAL_RCC_OscConfig+0x6cc>)
 800935e:	4013      	ands	r3, r2
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009364:	00d2      	lsls	r2, r2, #3
 8009366:	4930      	ldr	r1, [pc, #192]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009368:	4313      	orrs	r3, r2
 800936a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800936c:	4b2e      	ldr	r3, [pc, #184]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	f023 020c 	bic.w	r2, r3, #12
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009378:	492b      	ldr	r1, [pc, #172]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800937a:	4313      	orrs	r3, r2
 800937c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800937e:	4b2a      	ldr	r3, [pc, #168]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	f023 0202 	bic.w	r2, r3, #2
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	4927      	ldr	r1, [pc, #156]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800938c:	4313      	orrs	r3, r2
 800938e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009390:	4b25      	ldr	r3, [pc, #148]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	4a24      	ldr	r2, [pc, #144]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800939a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939c:	4b22      	ldr	r3, [pc, #136]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	4a21      	ldr	r2, [pc, #132]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093c0:	4b19      	ldr	r3, [pc, #100]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a18      	ldr	r2, [pc, #96]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093cc:	f7fd faba 	bl	8006944 <HAL_GetTick>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093d4:	f7fd fab6 	bl	8006944 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e090      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093e6:	4b10      	ldr	r3, [pc, #64]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_RCC_OscConfig+0x670>
 80093f2:	e088      	b.n	8009506 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a0b      	ldr	r2, [pc, #44]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009400:	f7fd faa0 	bl	8006944 <HAL_GetTick>
 8009404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009408:	f7fd fa9c 	bl	8006944 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e076      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800941a:	4b03      	ldr	r3, [pc, #12]	@ (8009428 <HAL_RCC_OscConfig+0x6c4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x6a4>
 8009426:	e06e      	b.n	8009506 <HAL_RCC_OscConfig+0x7a2>
 8009428:	58024400 	.word	0x58024400
 800942c:	fffffc0c 	.word	0xfffffc0c
 8009430:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009434:	4b36      	ldr	r3, [pc, #216]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 8009436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009438:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800943a:	4b35      	ldr	r3, [pc, #212]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 800943c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	2b01      	cmp	r3, #1
 8009446:	d031      	beq.n	80094ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f003 0203 	and.w	r2, r3, #3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009452:	429a      	cmp	r2, r3
 8009454:	d12a      	bne.n	80094ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	091b      	lsrs	r3, r3, #4
 800945a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009462:	429a      	cmp	r2, r3
 8009464:	d122      	bne.n	80094ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009470:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d11a      	bne.n	80094ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	0a5b      	lsrs	r3, r3, #9
 800947a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009482:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009484:	429a      	cmp	r2, r3
 8009486:	d111      	bne.n	80094ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009494:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009496:	429a      	cmp	r2, r3
 8009498:	d108      	bne.n	80094ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	0e1b      	lsrs	r3, r3, #24
 800949e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d001      	beq.n	80094b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e02b      	b.n	8009508 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80094b0:	4b17      	ldr	r3, [pc, #92]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b4:	08db      	lsrs	r3, r3, #3
 80094b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d01f      	beq.n	8009506 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094c6:	4b12      	ldr	r3, [pc, #72]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ca:	4a11      	ldr	r2, [pc, #68]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094d2:	f7fd fa37 	bl	8006944 <HAL_GetTick>
 80094d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094d8:	bf00      	nop
 80094da:	f7fd fa33 	bl	8006944 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d0f9      	beq.n	80094da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009514 <HAL_RCC_OscConfig+0x7b0>)
 80094ec:	4013      	ands	r3, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094f2:	00d2      	lsls	r2, r2, #3
 80094f4:	4906      	ldr	r1, [pc, #24]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80094fa:	4b05      	ldr	r3, [pc, #20]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 80094fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fe:	4a04      	ldr	r2, [pc, #16]	@ (8009510 <HAL_RCC_OscConfig+0x7ac>)
 8009500:	f043 0301 	orr.w	r3, r3, #1
 8009504:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3730      	adds	r7, #48	@ 0x30
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	58024400 	.word	0x58024400
 8009514:	ffff0007 	.word	0xffff0007

08009518 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e19c      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800952c:	4b8a      	ldr	r3, [pc, #552]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d910      	bls.n	800955c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800953a:	4b87      	ldr	r3, [pc, #540]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f023 020f 	bic.w	r2, r3, #15
 8009542:	4985      	ldr	r1, [pc, #532]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	4313      	orrs	r3, r2
 8009548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800954a:	4b83      	ldr	r3, [pc, #524]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d001      	beq.n	800955c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e184      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d010      	beq.n	800958a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	4b7b      	ldr	r3, [pc, #492]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009574:	429a      	cmp	r2, r3
 8009576:	d908      	bls.n	800958a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009578:	4b78      	ldr	r3, [pc, #480]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4975      	ldr	r1, [pc, #468]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009586:	4313      	orrs	r3, r2
 8009588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d010      	beq.n	80095b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695a      	ldr	r2, [r3, #20]
 800959a:	4b70      	ldr	r3, [pc, #448]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d908      	bls.n	80095b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095a6:	4b6d      	ldr	r3, [pc, #436]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	496a      	ldr	r1, [pc, #424]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	4b64      	ldr	r3, [pc, #400]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d908      	bls.n	80095e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095d4:	4b61      	ldr	r3, [pc, #388]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	495e      	ldr	r1, [pc, #376]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d010      	beq.n	8009614 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	4b59      	ldr	r3, [pc, #356]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095fe:	429a      	cmp	r2, r3
 8009600:	d908      	bls.n	8009614 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009602:	4b56      	ldr	r3, [pc, #344]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	4953      	ldr	r1, [pc, #332]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009610:	4313      	orrs	r3, r2
 8009612:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d010      	beq.n	8009642 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	4b4d      	ldr	r3, [pc, #308]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f003 030f 	and.w	r3, r3, #15
 800962c:	429a      	cmp	r2, r3
 800962e:	d908      	bls.n	8009642 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009630:	4b4a      	ldr	r3, [pc, #296]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f023 020f 	bic.w	r2, r3, #15
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4947      	ldr	r1, [pc, #284]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800963e:	4313      	orrs	r3, r2
 8009640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d055      	beq.n	80096fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800964e:	4b43      	ldr	r3, [pc, #268]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	4940      	ldr	r1, [pc, #256]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800965c:	4313      	orrs	r3, r2
 800965e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d107      	bne.n	8009678 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009668:	4b3c      	ldr	r3, [pc, #240]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d121      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0f6      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d107      	bne.n	8009690 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009680:	4b36      	ldr	r3, [pc, #216]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d115      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e0ea      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d107      	bne.n	80096a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009698:	4b30      	ldr	r3, [pc, #192]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0de      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a8:	4b2c      	ldr	r3, [pc, #176]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0d6      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096b8:	4b28      	ldr	r3, [pc, #160]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f023 0207 	bic.w	r2, r3, #7
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4925      	ldr	r1, [pc, #148]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ca:	f7fd f93b 	bl	8006944 <HAL_GetTick>
 80096ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096d0:	e00a      	b.n	80096e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d2:	f7fd f937 	bl	8006944 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d901      	bls.n	80096e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e0be      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e8:	4b1c      	ldr	r3, [pc, #112]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d1eb      	bne.n	80096d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d010      	beq.n	8009728 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	4b14      	ldr	r3, [pc, #80]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	429a      	cmp	r2, r3
 8009714:	d208      	bcs.n	8009728 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009716:	4b11      	ldr	r3, [pc, #68]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f023 020f 	bic.w	r2, r3, #15
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	490e      	ldr	r1, [pc, #56]	@ (800975c <HAL_RCC_ClockConfig+0x244>)
 8009724:	4313      	orrs	r3, r2
 8009726:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009728:	4b0b      	ldr	r3, [pc, #44]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d214      	bcs.n	8009760 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009736:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f023 020f 	bic.w	r2, r3, #15
 800973e:	4906      	ldr	r1, [pc, #24]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	4313      	orrs	r3, r2
 8009744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009746:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <HAL_RCC_ClockConfig+0x240>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d005      	beq.n	8009760 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e086      	b.n	8009866 <HAL_RCC_ClockConfig+0x34e>
 8009758:	52002000 	.word	0x52002000
 800975c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d010      	beq.n	800978e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	4b3f      	ldr	r3, [pc, #252]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009778:	429a      	cmp	r2, r3
 800977a:	d208      	bcs.n	800978e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800977c:	4b3c      	ldr	r3, [pc, #240]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	4939      	ldr	r1, [pc, #228]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 800978a:	4313      	orrs	r3, r2
 800978c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695a      	ldr	r2, [r3, #20]
 800979e:	4b34      	ldr	r3, [pc, #208]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d208      	bcs.n	80097bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097aa:	4b31      	ldr	r3, [pc, #196]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	492e      	ldr	r1, [pc, #184]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d010      	beq.n	80097ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	4b28      	ldr	r3, [pc, #160]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d208      	bcs.n	80097ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097d8:	4b25      	ldr	r3, [pc, #148]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	4922      	ldr	r1, [pc, #136]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d010      	beq.n	8009818 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69da      	ldr	r2, [r3, #28]
 80097fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009802:	429a      	cmp	r2, r3
 8009804:	d208      	bcs.n	8009818 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009806:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	4917      	ldr	r1, [pc, #92]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 8009814:	4313      	orrs	r3, r2
 8009816:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009818:	f000 f834 	bl	8009884 <HAL_RCC_GetSysClockFreq>
 800981c:	4602      	mov	r2, r0
 800981e:	4b14      	ldr	r3, [pc, #80]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	4912      	ldr	r1, [pc, #72]	@ (8009874 <HAL_RCC_ClockConfig+0x35c>)
 800982a:	5ccb      	ldrb	r3, [r1, r3]
 800982c:	f003 031f 	and.w	r3, r3, #31
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009836:	4b0e      	ldr	r3, [pc, #56]	@ (8009870 <HAL_RCC_ClockConfig+0x358>)
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	4a0d      	ldr	r2, [pc, #52]	@ (8009874 <HAL_RCC_ClockConfig+0x35c>)
 8009840:	5cd3      	ldrb	r3, [r2, r3]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	fa22 f303 	lsr.w	r3, r2, r3
 800984c:	4a0a      	ldr	r2, [pc, #40]	@ (8009878 <HAL_RCC_ClockConfig+0x360>)
 800984e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009850:	4a0a      	ldr	r2, [pc, #40]	@ (800987c <HAL_RCC_ClockConfig+0x364>)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009856:	4b0a      	ldr	r3, [pc, #40]	@ (8009880 <HAL_RCC_ClockConfig+0x368>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f7f8 fc06 	bl	800206c <HAL_InitTick>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009864:	7bfb      	ldrb	r3, [r7, #15]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	58024400 	.word	0x58024400
 8009874:	08028ba8 	.word	0x08028ba8
 8009878:	20000024 	.word	0x20000024
 800987c:	20000020 	.word	0x20000020
 8009880:	20000028 	.word	0x20000028

08009884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009884:	b480      	push	{r7}
 8009886:	b089      	sub	sp, #36	@ 0x24
 8009888:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800988a:	4bb3      	ldr	r3, [pc, #716]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009892:	2b18      	cmp	r3, #24
 8009894:	f200 8155 	bhi.w	8009b42 <HAL_RCC_GetSysClockFreq+0x2be>
 8009898:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	08009905 	.word	0x08009905
 80098a4:	08009b43 	.word	0x08009b43
 80098a8:	08009b43 	.word	0x08009b43
 80098ac:	08009b43 	.word	0x08009b43
 80098b0:	08009b43 	.word	0x08009b43
 80098b4:	08009b43 	.word	0x08009b43
 80098b8:	08009b43 	.word	0x08009b43
 80098bc:	08009b43 	.word	0x08009b43
 80098c0:	0800992b 	.word	0x0800992b
 80098c4:	08009b43 	.word	0x08009b43
 80098c8:	08009b43 	.word	0x08009b43
 80098cc:	08009b43 	.word	0x08009b43
 80098d0:	08009b43 	.word	0x08009b43
 80098d4:	08009b43 	.word	0x08009b43
 80098d8:	08009b43 	.word	0x08009b43
 80098dc:	08009b43 	.word	0x08009b43
 80098e0:	08009931 	.word	0x08009931
 80098e4:	08009b43 	.word	0x08009b43
 80098e8:	08009b43 	.word	0x08009b43
 80098ec:	08009b43 	.word	0x08009b43
 80098f0:	08009b43 	.word	0x08009b43
 80098f4:	08009b43 	.word	0x08009b43
 80098f8:	08009b43 	.word	0x08009b43
 80098fc:	08009b43 	.word	0x08009b43
 8009900:	08009937 	.word	0x08009937
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009904:	4b94      	ldr	r3, [pc, #592]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009910:	4b91      	ldr	r3, [pc, #580]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	08db      	lsrs	r3, r3, #3
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	4a90      	ldr	r2, [pc, #576]	@ (8009b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009922:	e111      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009924:	4b8d      	ldr	r3, [pc, #564]	@ (8009b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009926:	61bb      	str	r3, [r7, #24]
      break;
 8009928:	e10e      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800992a:	4b8d      	ldr	r3, [pc, #564]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800992c:	61bb      	str	r3, [r7, #24]
      break;
 800992e:	e10b      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009930:	4b8c      	ldr	r3, [pc, #560]	@ (8009b64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009932:	61bb      	str	r3, [r7, #24]
      break;
 8009934:	e108      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009936:	4b88      	ldr	r3, [pc, #544]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009940:	4b85      	ldr	r3, [pc, #532]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009944:	091b      	lsrs	r3, r3, #4
 8009946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800994a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800994c:	4b82      	ldr	r3, [pc, #520]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009956:	4b80      	ldr	r3, [pc, #512]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	fb02 f303 	mul.w	r3, r2, r3
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80e1 	beq.w	8009b3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b02      	cmp	r3, #2
 800997e:	f000 8083 	beq.w	8009a88 <HAL_RCC_GetSysClockFreq+0x204>
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b02      	cmp	r3, #2
 8009986:	f200 80a1 	bhi.w	8009acc <HAL_RCC_GetSysClockFreq+0x248>
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_RCC_GetSysClockFreq+0x114>
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d056      	beq.n	8009a44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009996:	e099      	b.n	8009acc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009998:	4b6f      	ldr	r3, [pc, #444]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0320 	and.w	r3, r3, #32
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d02d      	beq.n	8009a00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099a4:	4b6c      	ldr	r3, [pc, #432]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	08db      	lsrs	r3, r3, #3
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	4a6b      	ldr	r2, [pc, #428]	@ (8009b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099b0:	fa22 f303 	lsr.w	r3, r2, r3
 80099b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	ee07 3a90 	vmov	s15, r3
 80099bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b62      	ldr	r3, [pc, #392]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a02 	vldr	s12, [r7, #8]
 80099e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099fe:	e087      	b.n	8009b10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009b6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b51      	ldr	r3, [pc, #324]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a42:	e065      	b.n	8009b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b40      	ldr	r3, [pc, #256]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a86:	e043      	b.n	8009b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009b74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aca:	e021      	b.n	8009b10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b1e      	ldr	r3, [pc, #120]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8009af2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b10:	4b11      	ldr	r3, [pc, #68]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b14:	0a5b      	lsrs	r3, r3, #9
 8009b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b34:	ee17 3a90 	vmov	r3, s15
 8009b38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b3a:	e005      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61bb      	str	r3, [r7, #24]
      break;
 8009b40:	e002      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b42:	4b07      	ldr	r3, [pc, #28]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b44:	61bb      	str	r3, [r7, #24]
      break;
 8009b46:	bf00      	nop
  }

  return sysclockfreq;
 8009b48:	69bb      	ldr	r3, [r7, #24]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3724      	adds	r7, #36	@ 0x24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	03d09000 	.word	0x03d09000
 8009b60:	003d0900 	.word	0x003d0900
 8009b64:	007a1200 	.word	0x007a1200
 8009b68:	46000000 	.word	0x46000000
 8009b6c:	4c742400 	.word	0x4c742400
 8009b70:	4a742400 	.word	0x4a742400
 8009b74:	4af42400 	.word	0x4af42400

08009b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b7e:	f7ff fe81 	bl	8009884 <HAL_RCC_GetSysClockFreq>
 8009b82:	4602      	mov	r2, r0
 8009b84:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	0a1b      	lsrs	r3, r3, #8
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	490f      	ldr	r1, [pc, #60]	@ (8009bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8009b90:	5ccb      	ldrb	r3, [r1, r3]
 8009b92:	f003 031f 	and.w	r3, r3, #31
 8009b96:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	4a09      	ldr	r2, [pc, #36]	@ (8009bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8009ba6:	5cd3      	ldrb	r3, [r2, r3]
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb2:	4a07      	ldr	r2, [pc, #28]	@ (8009bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bb6:	4a07      	ldr	r2, [pc, #28]	@ (8009bd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bbc:	4b04      	ldr	r3, [pc, #16]	@ (8009bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	08028ba8 	.word	0x08028ba8
 8009bd0:	20000024 	.word	0x20000024
 8009bd4:	20000020 	.word	0x20000020

08009bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bdc:	f7ff ffcc 	bl	8009b78 <HAL_RCC_GetHCLKFreq>
 8009be0:	4602      	mov	r2, r0
 8009be2:	4b06      	ldr	r3, [pc, #24]	@ (8009bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	091b      	lsrs	r3, r3, #4
 8009be8:	f003 0307 	and.w	r3, r3, #7
 8009bec:	4904      	ldr	r1, [pc, #16]	@ (8009c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bee:	5ccb      	ldrb	r3, [r1, r3]
 8009bf0:	f003 031f 	and.w	r3, r3, #31
 8009bf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	08028ba8 	.word	0x08028ba8

08009c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c08:	f7ff ffb6 	bl	8009b78 <HAL_RCC_GetHCLKFreq>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	4904      	ldr	r1, [pc, #16]	@ (8009c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c1a:	5ccb      	ldrb	r3, [r1, r3]
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	58024400 	.word	0x58024400
 8009c2c:	08028ba8 	.word	0x08028ba8

08009c30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	223f      	movs	r2, #63	@ 0x3f
 8009c3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c40:	4b1a      	ldr	r3, [pc, #104]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0207 	and.w	r2, r3, #7
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009c4c:	4b17      	ldr	r3, [pc, #92]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c58:	4b14      	ldr	r3, [pc, #80]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	f003 020f 	and.w	r2, r3, #15
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c64:	4b11      	ldr	r3, [pc, #68]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009c70:	4b0e      	ldr	r3, [pc, #56]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009c88:	4b08      	ldr	r3, [pc, #32]	@ (8009cac <HAL_RCC_GetClockConfig+0x7c>)
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c94:	4b06      	ldr	r3, [pc, #24]	@ (8009cb0 <HAL_RCC_GetClockConfig+0x80>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 020f 	and.w	r2, r3, #15
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	601a      	str	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	52002000 	.word	0x52002000

08009cb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cb8:	f7ff ff5e 	bl	8009b78 <HAL_RCC_GetHCLKFreq>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4b06      	ldr	r3, [pc, #24]	@ (8009cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	091b      	lsrs	r3, r3, #4
 8009cc4:	f003 0307 	and.w	r3, r3, #7
 8009cc8:	4904      	ldr	r1, [pc, #16]	@ (8009cdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cca:	5ccb      	ldrb	r3, [r1, r3]
 8009ccc:	f003 031f 	and.w	r3, r3, #31
 8009cd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	58024400 	.word	0x58024400
 8009cdc:	08028ba8 	.word	0x08028ba8

08009ce0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b089      	sub	sp, #36	@ 0x24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ce8:	4ba1      	ldr	r3, [pc, #644]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cf2:	4b9f      	ldr	r3, [pc, #636]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf6:	0b1b      	lsrs	r3, r3, #12
 8009cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d02:	091b      	lsrs	r3, r3, #4
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d0a:	4b99      	ldr	r3, [pc, #612]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d0e:	08db      	lsrs	r3, r3, #3
 8009d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	fb02 f303 	mul.w	r3, r2, r3
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 8111 	beq.w	8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f000 8083 	beq.w	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	f200 80a1 	bhi.w	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d056      	beq.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d4a:	e099      	b.n	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d4c:	4b88      	ldr	r3, [pc, #544]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0320 	and.w	r3, r3, #32
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02d      	beq.n	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d58:	4b85      	ldr	r3, [pc, #532]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	08db      	lsrs	r3, r3, #3
 8009d5e:	f003 0303 	and.w	r3, r3, #3
 8009d62:	4a84      	ldr	r2, [pc, #528]	@ (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b7b      	ldr	r3, [pc, #492]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009db2:	e087      	b.n	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df6:	e065      	b.n	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b59      	ldr	r3, [pc, #356]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3a:	e043      	b.n	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b48      	ldr	r3, [pc, #288]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e7e:	e021      	b.n	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e92:	4b37      	ldr	r3, [pc, #220]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ec2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eea:	ee17 2a90 	vmov	r2, s15
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef6:	0c1b      	lsrs	r3, r3, #16
 8009ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f18:	ee17 2a90 	vmov	r2, s15
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f20:	4b13      	ldr	r3, [pc, #76]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f24:	0e1b      	lsrs	r3, r3, #24
 8009f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f46:	ee17 2a90 	vmov	r2, s15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f4e:	e008      	b.n	8009f62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	609a      	str	r2, [r3, #8]
}
 8009f62:	bf00      	nop
 8009f64:	3724      	adds	r7, #36	@ 0x24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400
 8009f74:	03d09000 	.word	0x03d09000
 8009f78:	46000000 	.word	0x46000000
 8009f7c:	4c742400 	.word	0x4c742400
 8009f80:	4a742400 	.word	0x4a742400
 8009f84:	4af42400 	.word	0x4af42400

08009f88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b089      	sub	sp, #36	@ 0x24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f90:	4ba1      	ldr	r3, [pc, #644]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f9a:	4b9f      	ldr	r3, [pc, #636]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9e:	0d1b      	lsrs	r3, r3, #20
 8009fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fa6:	4b9c      	ldr	r3, [pc, #624]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fb2:	4b99      	ldr	r3, [pc, #612]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb6:	08db      	lsrs	r3, r3, #3
 8009fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	fb02 f303 	mul.w	r3, r2, r3
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8111 	beq.w	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	f000 8083 	beq.w	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f200 80a1 	bhi.w	800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d056      	beq.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ff2:	e099      	b.n	800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff4:	4b88      	ldr	r3, [pc, #544]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d02d      	beq.n	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a000:	4b85      	ldr	r3, [pc, #532]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	08db      	lsrs	r3, r3, #3
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	4a84      	ldr	r2, [pc, #528]	@ (800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a00c:	fa22 f303 	lsr.w	r3, r2, r3
 800a010:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b7b      	ldr	r3, [pc, #492]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a05a:	e087      	b.n	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b6a      	ldr	r3, [pc, #424]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a082:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09e:	e065      	b.n	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b59      	ldr	r3, [pc, #356]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e2:	e043      	b.n	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	ee07 3a90 	vmov	s15, r3
 800a0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f6:	4b48      	ldr	r3, [pc, #288]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a106:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a126:	e021      	b.n	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a132:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13a:	4b37      	ldr	r3, [pc, #220]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a14e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a16a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a16c:	4b2a      	ldr	r3, [pc, #168]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a170:	0a5b      	lsrs	r3, r3, #9
 800a172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a182:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a186:	edd7 6a07 	vldr	s13, [r7, #28]
 800a18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a192:	ee17 2a90 	vmov	r2, s15
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a19a:	4b1f      	ldr	r3, [pc, #124]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c0:	ee17 2a90 	vmov	r2, s15
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1c8:	4b13      	ldr	r3, [pc, #76]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1cc:	0e1b      	lsrs	r3, r3, #24
 800a1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ee:	ee17 2a90 	vmov	r2, s15
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1f6:	e008      	b.n	800a20a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	609a      	str	r2, [r3, #8]
}
 800a20a:	bf00      	nop
 800a20c:	3724      	adds	r7, #36	@ 0x24
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	58024400 	.word	0x58024400
 800a21c:	03d09000 	.word	0x03d09000
 800a220:	46000000 	.word	0x46000000
 800a224:	4c742400 	.word	0x4c742400
 800a228:	4a742400 	.word	0x4a742400
 800a22c:	4af42400 	.word	0x4af42400

0800a230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e049      	b.n	800a2d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f841 	bl	800a2de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2202      	movs	r2, #2
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	4610      	mov	r0, r2
 800a270:	f000 f9f6 	bl	800a660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	d001      	beq.n	800a30c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e05e      	b.n	800a3ca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a2b      	ldr	r2, [pc, #172]	@ (800a3d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d02c      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a336:	d027      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a27      	ldr	r2, [pc, #156]	@ (800a3dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d022      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a26      	ldr	r2, [pc, #152]	@ (800a3e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d01d      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a24      	ldr	r2, [pc, #144]	@ (800a3e4 <HAL_TIM_Base_Start_IT+0xf0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d018      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a23      	ldr	r2, [pc, #140]	@ (800a3e8 <HAL_TIM_Base_Start_IT+0xf4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d013      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a21      	ldr	r2, [pc, #132]	@ (800a3ec <HAL_TIM_Base_Start_IT+0xf8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d00e      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a20      	ldr	r2, [pc, #128]	@ (800a3f0 <HAL_TIM_Base_Start_IT+0xfc>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d009      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f4 <HAL_TIM_Base_Start_IT+0x100>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d004      	beq.n	800a388 <HAL_TIM_Base_Start_IT+0x94>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f8 <HAL_TIM_Base_Start_IT+0x104>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d115      	bne.n	800a3b4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <HAL_TIM_Base_Start_IT+0x108>)
 800a390:	4013      	ands	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b06      	cmp	r3, #6
 800a398:	d015      	beq.n	800a3c6 <HAL_TIM_Base_Start_IT+0xd2>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a0:	d011      	beq.n	800a3c6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0201 	orr.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b2:	e008      	b.n	800a3c6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0201 	orr.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	e000      	b.n	800a3c8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40000400 	.word	0x40000400
 800a3e0:	40000800 	.word	0x40000800
 800a3e4:	40000c00 	.word	0x40000c00
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	40001800 	.word	0x40001800
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	4000e000 	.word	0x4000e000
 800a3f8:	4000e400 	.word	0x4000e400
 800a3fc:	00010007 	.word	0x00010007

0800a400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d020      	beq.n	800a464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01b      	beq.n	800a464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f06f 0202 	mvn.w	r2, #2
 800a434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f8e9 	bl	800a622 <HAL_TIM_IC_CaptureCallback>
 800a450:	e005      	b.n	800a45e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f8db 	bl	800a60e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f8ec 	bl	800a636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d020      	beq.n	800a4b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01b      	beq.n	800a4b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f06f 0204 	mvn.w	r2, #4
 800a480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2202      	movs	r2, #2
 800a486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f8c3 	bl	800a622 <HAL_TIM_IC_CaptureCallback>
 800a49c:	e005      	b.n	800a4aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f8b5 	bl	800a60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f8c6 	bl	800a636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d020      	beq.n	800a4fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f003 0308 	and.w	r3, r3, #8
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01b      	beq.n	800a4fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f06f 0208 	mvn.w	r2, #8
 800a4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f89d 	bl	800a622 <HAL_TIM_IC_CaptureCallback>
 800a4e8:	e005      	b.n	800a4f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f88f 	bl	800a60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f8a0 	bl	800a636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d020      	beq.n	800a548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01b      	beq.n	800a548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f06f 0210 	mvn.w	r2, #16
 800a518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2208      	movs	r2, #8
 800a51e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f877 	bl	800a622 <HAL_TIM_IC_CaptureCallback>
 800a534:	e005      	b.n	800a542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f869 	bl	800a60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f87a 	bl	800a636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00c      	beq.n	800a56c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f06f 0201 	mvn.w	r2, #1
 800a564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7f7 fdec 	bl	8002144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00c      	beq.n	800a59a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f91f 	bl	800a7d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00c      	beq.n	800a5be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f917 	bl	800a7ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00c      	beq.n	800a5e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d007      	beq.n	800a5e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f834 	bl	800a64a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00c      	beq.n	800a606 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d007      	beq.n	800a606 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f06f 0220 	mvn.w	r2, #32
 800a5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f8df 	bl	800a7c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a606:	bf00      	nop
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
	...

0800a660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a4a      	ldr	r2, [pc, #296]	@ (800a79c <TIM_Base_SetConfig+0x13c>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d013      	beq.n	800a6a0 <TIM_Base_SetConfig+0x40>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a67e:	d00f      	beq.n	800a6a0 <TIM_Base_SetConfig+0x40>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a47      	ldr	r2, [pc, #284]	@ (800a7a0 <TIM_Base_SetConfig+0x140>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d00b      	beq.n	800a6a0 <TIM_Base_SetConfig+0x40>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a46      	ldr	r2, [pc, #280]	@ (800a7a4 <TIM_Base_SetConfig+0x144>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d007      	beq.n	800a6a0 <TIM_Base_SetConfig+0x40>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a45      	ldr	r2, [pc, #276]	@ (800a7a8 <TIM_Base_SetConfig+0x148>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d003      	beq.n	800a6a0 <TIM_Base_SetConfig+0x40>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a44      	ldr	r2, [pc, #272]	@ (800a7ac <TIM_Base_SetConfig+0x14c>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d108      	bne.n	800a6b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a39      	ldr	r2, [pc, #228]	@ (800a79c <TIM_Base_SetConfig+0x13c>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d027      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c0:	d023      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a36      	ldr	r2, [pc, #216]	@ (800a7a0 <TIM_Base_SetConfig+0x140>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d01f      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a35      	ldr	r2, [pc, #212]	@ (800a7a4 <TIM_Base_SetConfig+0x144>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d01b      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a34      	ldr	r2, [pc, #208]	@ (800a7a8 <TIM_Base_SetConfig+0x148>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d017      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a33      	ldr	r2, [pc, #204]	@ (800a7ac <TIM_Base_SetConfig+0x14c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d013      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a32      	ldr	r2, [pc, #200]	@ (800a7b0 <TIM_Base_SetConfig+0x150>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d00f      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a31      	ldr	r2, [pc, #196]	@ (800a7b4 <TIM_Base_SetConfig+0x154>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d00b      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a30      	ldr	r2, [pc, #192]	@ (800a7b8 <TIM_Base_SetConfig+0x158>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d007      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a7bc <TIM_Base_SetConfig+0x15c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d003      	beq.n	800a70a <TIM_Base_SetConfig+0xaa>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a2e      	ldr	r2, [pc, #184]	@ (800a7c0 <TIM_Base_SetConfig+0x160>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d108      	bne.n	800a71c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a16      	ldr	r2, [pc, #88]	@ (800a79c <TIM_Base_SetConfig+0x13c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00f      	beq.n	800a768 <TIM_Base_SetConfig+0x108>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a18      	ldr	r2, [pc, #96]	@ (800a7ac <TIM_Base_SetConfig+0x14c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00b      	beq.n	800a768 <TIM_Base_SetConfig+0x108>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a17      	ldr	r2, [pc, #92]	@ (800a7b0 <TIM_Base_SetConfig+0x150>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d007      	beq.n	800a768 <TIM_Base_SetConfig+0x108>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a16      	ldr	r2, [pc, #88]	@ (800a7b4 <TIM_Base_SetConfig+0x154>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d003      	beq.n	800a768 <TIM_Base_SetConfig+0x108>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a15      	ldr	r2, [pc, #84]	@ (800a7b8 <TIM_Base_SetConfig+0x158>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d103      	bne.n	800a770 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d105      	bne.n	800a78e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	f023 0201 	bic.w	r2, r3, #1
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	611a      	str	r2, [r3, #16]
  }
}
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40000400 	.word	0x40000400
 800a7a4:	40000800 	.word	0x40000800
 800a7a8:	40000c00 	.word	0x40000c00
 800a7ac:	40010400 	.word	0x40010400
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40014400 	.word	0x40014400
 800a7b8:	40014800 	.word	0x40014800
 800a7bc:	4000e000 	.word	0x4000e000
 800a7c0:	4000e400 	.word	0x4000e400

0800a7c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e042      	b.n	800a898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f83b 	bl	800a8a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2224      	movs	r2, #36	@ 0x24
 800a82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 ff2c 	bl	800b6a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f8bd 	bl	800a9d0 <UART_SetConfig>
 800a856:	4603      	mov	r3, r0
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d101      	bne.n	800a860 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e01b      	b.n	800a898 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a86e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a87e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 ffab 	bl	800b7ec <UART_CheckIdleState>
 800a896:	4603      	mov	r3, r0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	@ 0x28
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d17b      	bne.n	800a9c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <HAL_UART_Transmit+0x26>
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e074      	b.n	800a9c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2221      	movs	r2, #33	@ 0x21
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8ee:	f7fc f829 	bl	8006944 <HAL_GetTick>
 800a8f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	88fa      	ldrh	r2, [r7, #6]
 800a900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a90c:	d108      	bne.n	800a920 <HAL_UART_Transmit+0x6c>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d104      	bne.n	800a920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	e003      	b.n	800a928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a928:	e030      	b.n	800a98c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2200      	movs	r2, #0
 800a932:	2180      	movs	r1, #128	@ 0x80
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f001 f803 	bl	800b940 <UART_WaitOnFlagUntilTimeout>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2220      	movs	r2, #32
 800a944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e03d      	b.n	800a9c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a960:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	3302      	adds	r3, #2
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	e007      	b.n	800a97a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	3301      	adds	r3, #1
 800a978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b01      	subs	r3, #1
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a992:	b29b      	uxth	r3, r3
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1c8      	bne.n	800a92a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2140      	movs	r1, #64	@ 0x40
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 ffcc 	bl	800b940 <UART_WaitOnFlagUntilTimeout>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e006      	b.n	800a9c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e000      	b.n	800a9c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a9c6:	2302      	movs	r3, #2
  }
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9d4:	b092      	sub	sp, #72	@ 0x48
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4bbe      	ldr	r3, [pc, #760]	@ (800acf8 <UART_SetConfig+0x328>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4ab3      	ldr	r2, [pc, #716]	@ (800acfc <UART_SetConfig+0x32c>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d004      	beq.n	800aa3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	4baf      	ldr	r3, [pc, #700]	@ (800ad00 <UART_SetConfig+0x330>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa56:	f023 010f 	bic.w	r1, r3, #15
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4aa6      	ldr	r2, [pc, #664]	@ (800ad04 <UART_SetConfig+0x334>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d177      	bne.n	800ab60 <UART_SetConfig+0x190>
 800aa70:	4ba5      	ldr	r3, [pc, #660]	@ (800ad08 <UART_SetConfig+0x338>)
 800aa72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa78:	2b28      	cmp	r3, #40	@ 0x28
 800aa7a:	d86d      	bhi.n	800ab58 <UART_SetConfig+0x188>
 800aa7c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <UART_SetConfig+0xb4>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800ab29 	.word	0x0800ab29
 800aa88:	0800ab59 	.word	0x0800ab59
 800aa8c:	0800ab59 	.word	0x0800ab59
 800aa90:	0800ab59 	.word	0x0800ab59
 800aa94:	0800ab59 	.word	0x0800ab59
 800aa98:	0800ab59 	.word	0x0800ab59
 800aa9c:	0800ab59 	.word	0x0800ab59
 800aaa0:	0800ab59 	.word	0x0800ab59
 800aaa4:	0800ab31 	.word	0x0800ab31
 800aaa8:	0800ab59 	.word	0x0800ab59
 800aaac:	0800ab59 	.word	0x0800ab59
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800ab59 	.word	0x0800ab59
 800aab8:	0800ab59 	.word	0x0800ab59
 800aabc:	0800ab59 	.word	0x0800ab59
 800aac0:	0800ab59 	.word	0x0800ab59
 800aac4:	0800ab39 	.word	0x0800ab39
 800aac8:	0800ab59 	.word	0x0800ab59
 800aacc:	0800ab59 	.word	0x0800ab59
 800aad0:	0800ab59 	.word	0x0800ab59
 800aad4:	0800ab59 	.word	0x0800ab59
 800aad8:	0800ab59 	.word	0x0800ab59
 800aadc:	0800ab59 	.word	0x0800ab59
 800aae0:	0800ab59 	.word	0x0800ab59
 800aae4:	0800ab41 	.word	0x0800ab41
 800aae8:	0800ab59 	.word	0x0800ab59
 800aaec:	0800ab59 	.word	0x0800ab59
 800aaf0:	0800ab59 	.word	0x0800ab59
 800aaf4:	0800ab59 	.word	0x0800ab59
 800aaf8:	0800ab59 	.word	0x0800ab59
 800aafc:	0800ab59 	.word	0x0800ab59
 800ab00:	0800ab59 	.word	0x0800ab59
 800ab04:	0800ab49 	.word	0x0800ab49
 800ab08:	0800ab59 	.word	0x0800ab59
 800ab0c:	0800ab59 	.word	0x0800ab59
 800ab10:	0800ab59 	.word	0x0800ab59
 800ab14:	0800ab59 	.word	0x0800ab59
 800ab18:	0800ab59 	.word	0x0800ab59
 800ab1c:	0800ab59 	.word	0x0800ab59
 800ab20:	0800ab59 	.word	0x0800ab59
 800ab24:	0800ab51 	.word	0x0800ab51
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e326      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e322      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e31e      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e31a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab48:	2320      	movs	r3, #32
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e316      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab50:	2340      	movs	r3, #64	@ 0x40
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e312      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab58:	2380      	movs	r3, #128	@ 0x80
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e30e      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a69      	ldr	r2, [pc, #420]	@ (800ad0c <UART_SetConfig+0x33c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d130      	bne.n	800abcc <UART_SetConfig+0x1fc>
 800ab6a:	4b67      	ldr	r3, [pc, #412]	@ (800ad08 <UART_SetConfig+0x338>)
 800ab6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	2b05      	cmp	r3, #5
 800ab74:	d826      	bhi.n	800abc4 <UART_SetConfig+0x1f4>
 800ab76:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0x1ac>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ab95 	.word	0x0800ab95
 800ab80:	0800ab9d 	.word	0x0800ab9d
 800ab84:	0800aba5 	.word	0x0800aba5
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abbd 	.word	0x0800abbd
 800ab94:	2300      	movs	r3, #0
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e2f0      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e2ec      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e2e8      	b.n	800b17e <UART_SetConfig+0x7ae>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e2e4      	b.n	800b17e <UART_SetConfig+0x7ae>
 800abb4:	2320      	movs	r3, #32
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e2e0      	b.n	800b17e <UART_SetConfig+0x7ae>
 800abbc:	2340      	movs	r3, #64	@ 0x40
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e2dc      	b.n	800b17e <UART_SetConfig+0x7ae>
 800abc4:	2380      	movs	r3, #128	@ 0x80
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e2d8      	b.n	800b17e <UART_SetConfig+0x7ae>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a4f      	ldr	r2, [pc, #316]	@ (800ad10 <UART_SetConfig+0x340>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d130      	bne.n	800ac38 <UART_SetConfig+0x268>
 800abd6:	4b4c      	ldr	r3, [pc, #304]	@ (800ad08 <UART_SetConfig+0x338>)
 800abd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abda:	f003 0307 	and.w	r3, r3, #7
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d826      	bhi.n	800ac30 <UART_SetConfig+0x260>
 800abe2:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <UART_SetConfig+0x218>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac09 	.word	0x0800ac09
 800abf0:	0800ac11 	.word	0x0800ac11
 800abf4:	0800ac19 	.word	0x0800ac19
 800abf8:	0800ac21 	.word	0x0800ac21
 800abfc:	0800ac29 	.word	0x0800ac29
 800ac00:	2300      	movs	r3, #0
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e2ba      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e2b6      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac10:	2308      	movs	r3, #8
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e2b2      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac18:	2310      	movs	r3, #16
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e2ae      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac20:	2320      	movs	r3, #32
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e2aa      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac28:	2340      	movs	r3, #64	@ 0x40
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e2a6      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac30:	2380      	movs	r3, #128	@ 0x80
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e2a2      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a35      	ldr	r2, [pc, #212]	@ (800ad14 <UART_SetConfig+0x344>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d130      	bne.n	800aca4 <UART_SetConfig+0x2d4>
 800ac42:	4b31      	ldr	r3, [pc, #196]	@ (800ad08 <UART_SetConfig+0x338>)
 800ac44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d826      	bhi.n	800ac9c <UART_SetConfig+0x2cc>
 800ac4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac54 <UART_SetConfig+0x284>)
 800ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac54:	0800ac6d 	.word	0x0800ac6d
 800ac58:	0800ac75 	.word	0x0800ac75
 800ac5c:	0800ac7d 	.word	0x0800ac7d
 800ac60:	0800ac85 	.word	0x0800ac85
 800ac64:	0800ac8d 	.word	0x0800ac8d
 800ac68:	0800ac95 	.word	0x0800ac95
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e284      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac74:	2304      	movs	r3, #4
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e280      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e27c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac84:	2310      	movs	r3, #16
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e278      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e274      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac94:	2340      	movs	r3, #64	@ 0x40
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e270      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ac9c:	2380      	movs	r3, #128	@ 0x80
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e26c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <UART_SetConfig+0x348>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d142      	bne.n	800ad34 <UART_SetConfig+0x364>
 800acae:	4b16      	ldr	r3, [pc, #88]	@ (800ad08 <UART_SetConfig+0x338>)
 800acb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d838      	bhi.n	800ad2c <UART_SetConfig+0x35c>
 800acba:	a201      	add	r2, pc, #4	@ (adr r2, 800acc0 <UART_SetConfig+0x2f0>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800acd9 	.word	0x0800acd9
 800acc4:	0800ace1 	.word	0x0800ace1
 800acc8:	0800ace9 	.word	0x0800ace9
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800ad1d 	.word	0x0800ad1d
 800acd4:	0800ad25 	.word	0x0800ad25
 800acd8:	2300      	movs	r3, #0
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e24e      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ace0:	2304      	movs	r3, #4
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e24a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ace8:	2308      	movs	r3, #8
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e246      	b.n	800b17e <UART_SetConfig+0x7ae>
 800acf0:	2310      	movs	r3, #16
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e242      	b.n	800b17e <UART_SetConfig+0x7ae>
 800acf8:	cfff69f3 	.word	0xcfff69f3
 800acfc:	58000c00 	.word	0x58000c00
 800ad00:	11fff4ff 	.word	0x11fff4ff
 800ad04:	40011000 	.word	0x40011000
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	40004400 	.word	0x40004400
 800ad10:	40004800 	.word	0x40004800
 800ad14:	40004c00 	.word	0x40004c00
 800ad18:	40005000 	.word	0x40005000
 800ad1c:	2320      	movs	r3, #32
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e22c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ad24:	2340      	movs	r3, #64	@ 0x40
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e228      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ad2c:	2380      	movs	r3, #128	@ 0x80
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e224      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4ab1      	ldr	r2, [pc, #708]	@ (800b000 <UART_SetConfig+0x630>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d176      	bne.n	800ae2c <UART_SetConfig+0x45c>
 800ad3e:	4bb1      	ldr	r3, [pc, #708]	@ (800b004 <UART_SetConfig+0x634>)
 800ad40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad46:	2b28      	cmp	r3, #40	@ 0x28
 800ad48:	d86c      	bhi.n	800ae24 <UART_SetConfig+0x454>
 800ad4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <UART_SetConfig+0x380>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800adf5 	.word	0x0800adf5
 800ad54:	0800ae25 	.word	0x0800ae25
 800ad58:	0800ae25 	.word	0x0800ae25
 800ad5c:	0800ae25 	.word	0x0800ae25
 800ad60:	0800ae25 	.word	0x0800ae25
 800ad64:	0800ae25 	.word	0x0800ae25
 800ad68:	0800ae25 	.word	0x0800ae25
 800ad6c:	0800ae25 	.word	0x0800ae25
 800ad70:	0800adfd 	.word	0x0800adfd
 800ad74:	0800ae25 	.word	0x0800ae25
 800ad78:	0800ae25 	.word	0x0800ae25
 800ad7c:	0800ae25 	.word	0x0800ae25
 800ad80:	0800ae25 	.word	0x0800ae25
 800ad84:	0800ae25 	.word	0x0800ae25
 800ad88:	0800ae25 	.word	0x0800ae25
 800ad8c:	0800ae25 	.word	0x0800ae25
 800ad90:	0800ae05 	.word	0x0800ae05
 800ad94:	0800ae25 	.word	0x0800ae25
 800ad98:	0800ae25 	.word	0x0800ae25
 800ad9c:	0800ae25 	.word	0x0800ae25
 800ada0:	0800ae25 	.word	0x0800ae25
 800ada4:	0800ae25 	.word	0x0800ae25
 800ada8:	0800ae25 	.word	0x0800ae25
 800adac:	0800ae25 	.word	0x0800ae25
 800adb0:	0800ae0d 	.word	0x0800ae0d
 800adb4:	0800ae25 	.word	0x0800ae25
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800ae25 	.word	0x0800ae25
 800adc4:	0800ae25 	.word	0x0800ae25
 800adc8:	0800ae25 	.word	0x0800ae25
 800adcc:	0800ae25 	.word	0x0800ae25
 800add0:	0800ae15 	.word	0x0800ae15
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ae25 	.word	0x0800ae25
 800addc:	0800ae25 	.word	0x0800ae25
 800ade0:	0800ae25 	.word	0x0800ae25
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae25 	.word	0x0800ae25
 800adec:	0800ae25 	.word	0x0800ae25
 800adf0:	0800ae1d 	.word	0x0800ae1d
 800adf4:	2301      	movs	r3, #1
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e1c0      	b.n	800b17e <UART_SetConfig+0x7ae>
 800adfc:	2304      	movs	r3, #4
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e1bc      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae04:	2308      	movs	r3, #8
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e1b8      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae0c:	2310      	movs	r3, #16
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e1b4      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae14:	2320      	movs	r3, #32
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e1b0      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae1c:	2340      	movs	r3, #64	@ 0x40
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae22:	e1ac      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae24:	2380      	movs	r3, #128	@ 0x80
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	e1a8      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a75      	ldr	r2, [pc, #468]	@ (800b008 <UART_SetConfig+0x638>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d130      	bne.n	800ae98 <UART_SetConfig+0x4c8>
 800ae36:	4b73      	ldr	r3, [pc, #460]	@ (800b004 <UART_SetConfig+0x634>)
 800ae38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d826      	bhi.n	800ae90 <UART_SetConfig+0x4c0>
 800ae42:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <UART_SetConfig+0x478>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae69 	.word	0x0800ae69
 800ae50:	0800ae71 	.word	0x0800ae71
 800ae54:	0800ae79 	.word	0x0800ae79
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae89 	.word	0x0800ae89
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e18a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae68:	2304      	movs	r3, #4
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e186      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae70:	2308      	movs	r3, #8
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e182      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae78:	2310      	movs	r3, #16
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7e:	e17e      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae80:	2320      	movs	r3, #32
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e17a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae88:	2340      	movs	r3, #64	@ 0x40
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8e:	e176      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae90:	2380      	movs	r3, #128	@ 0x80
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e172      	b.n	800b17e <UART_SetConfig+0x7ae>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a5b      	ldr	r2, [pc, #364]	@ (800b00c <UART_SetConfig+0x63c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d130      	bne.n	800af04 <UART_SetConfig+0x534>
 800aea2:	4b58      	ldr	r3, [pc, #352]	@ (800b004 <UART_SetConfig+0x634>)
 800aea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	d826      	bhi.n	800aefc <UART_SetConfig+0x52c>
 800aeae:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb4 <UART_SetConfig+0x4e4>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800aecd 	.word	0x0800aecd
 800aeb8:	0800aed5 	.word	0x0800aed5
 800aebc:	0800aedd 	.word	0x0800aedd
 800aec0:	0800aee5 	.word	0x0800aee5
 800aec4:	0800aeed 	.word	0x0800aeed
 800aec8:	0800aef5 	.word	0x0800aef5
 800aecc:	2300      	movs	r3, #0
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e154      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aed4:	2304      	movs	r3, #4
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e150      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aedc:	2308      	movs	r3, #8
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e14c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aee4:	2310      	movs	r3, #16
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e148      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aeec:	2320      	movs	r3, #32
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e144      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aef4:	2340      	movs	r3, #64	@ 0x40
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefa:	e140      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aefc:	2380      	movs	r3, #128	@ 0x80
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af02:	e13c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a41      	ldr	r2, [pc, #260]	@ (800b010 <UART_SetConfig+0x640>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	f040 8082 	bne.w	800b014 <UART_SetConfig+0x644>
 800af10:	4b3c      	ldr	r3, [pc, #240]	@ (800b004 <UART_SetConfig+0x634>)
 800af12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af18:	2b28      	cmp	r3, #40	@ 0x28
 800af1a:	d86d      	bhi.n	800aff8 <UART_SetConfig+0x628>
 800af1c:	a201      	add	r2, pc, #4	@ (adr r2, 800af24 <UART_SetConfig+0x554>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800afc9 	.word	0x0800afc9
 800af28:	0800aff9 	.word	0x0800aff9
 800af2c:	0800aff9 	.word	0x0800aff9
 800af30:	0800aff9 	.word	0x0800aff9
 800af34:	0800aff9 	.word	0x0800aff9
 800af38:	0800aff9 	.word	0x0800aff9
 800af3c:	0800aff9 	.word	0x0800aff9
 800af40:	0800aff9 	.word	0x0800aff9
 800af44:	0800afd1 	.word	0x0800afd1
 800af48:	0800aff9 	.word	0x0800aff9
 800af4c:	0800aff9 	.word	0x0800aff9
 800af50:	0800aff9 	.word	0x0800aff9
 800af54:	0800aff9 	.word	0x0800aff9
 800af58:	0800aff9 	.word	0x0800aff9
 800af5c:	0800aff9 	.word	0x0800aff9
 800af60:	0800aff9 	.word	0x0800aff9
 800af64:	0800afd9 	.word	0x0800afd9
 800af68:	0800aff9 	.word	0x0800aff9
 800af6c:	0800aff9 	.word	0x0800aff9
 800af70:	0800aff9 	.word	0x0800aff9
 800af74:	0800aff9 	.word	0x0800aff9
 800af78:	0800aff9 	.word	0x0800aff9
 800af7c:	0800aff9 	.word	0x0800aff9
 800af80:	0800aff9 	.word	0x0800aff9
 800af84:	0800afe1 	.word	0x0800afe1
 800af88:	0800aff9 	.word	0x0800aff9
 800af8c:	0800aff9 	.word	0x0800aff9
 800af90:	0800aff9 	.word	0x0800aff9
 800af94:	0800aff9 	.word	0x0800aff9
 800af98:	0800aff9 	.word	0x0800aff9
 800af9c:	0800aff9 	.word	0x0800aff9
 800afa0:	0800aff9 	.word	0x0800aff9
 800afa4:	0800afe9 	.word	0x0800afe9
 800afa8:	0800aff9 	.word	0x0800aff9
 800afac:	0800aff9 	.word	0x0800aff9
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800aff9 	.word	0x0800aff9
 800afb8:	0800aff9 	.word	0x0800aff9
 800afbc:	0800aff9 	.word	0x0800aff9
 800afc0:	0800aff9 	.word	0x0800aff9
 800afc4:	0800aff1 	.word	0x0800aff1
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e0d6      	b.n	800b17e <UART_SetConfig+0x7ae>
 800afd0:	2304      	movs	r3, #4
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd6:	e0d2      	b.n	800b17e <UART_SetConfig+0x7ae>
 800afd8:	2308      	movs	r3, #8
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e0ce      	b.n	800b17e <UART_SetConfig+0x7ae>
 800afe0:	2310      	movs	r3, #16
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e0ca      	b.n	800b17e <UART_SetConfig+0x7ae>
 800afe8:	2320      	movs	r3, #32
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e0c6      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aff0:	2340      	movs	r3, #64	@ 0x40
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e0c2      	b.n	800b17e <UART_SetConfig+0x7ae>
 800aff8:	2380      	movs	r3, #128	@ 0x80
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e0be      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b000:	40011400 	.word	0x40011400
 800b004:	58024400 	.word	0x58024400
 800b008:	40007800 	.word	0x40007800
 800b00c:	40007c00 	.word	0x40007c00
 800b010:	40011800 	.word	0x40011800
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4aad      	ldr	r2, [pc, #692]	@ (800b2d0 <UART_SetConfig+0x900>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d176      	bne.n	800b10c <UART_SetConfig+0x73c>
 800b01e:	4bad      	ldr	r3, [pc, #692]	@ (800b2d4 <UART_SetConfig+0x904>)
 800b020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b026:	2b28      	cmp	r3, #40	@ 0x28
 800b028:	d86c      	bhi.n	800b104 <UART_SetConfig+0x734>
 800b02a:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <UART_SetConfig+0x660>)
 800b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b030:	0800b0d5 	.word	0x0800b0d5
 800b034:	0800b105 	.word	0x0800b105
 800b038:	0800b105 	.word	0x0800b105
 800b03c:	0800b105 	.word	0x0800b105
 800b040:	0800b105 	.word	0x0800b105
 800b044:	0800b105 	.word	0x0800b105
 800b048:	0800b105 	.word	0x0800b105
 800b04c:	0800b105 	.word	0x0800b105
 800b050:	0800b0dd 	.word	0x0800b0dd
 800b054:	0800b105 	.word	0x0800b105
 800b058:	0800b105 	.word	0x0800b105
 800b05c:	0800b105 	.word	0x0800b105
 800b060:	0800b105 	.word	0x0800b105
 800b064:	0800b105 	.word	0x0800b105
 800b068:	0800b105 	.word	0x0800b105
 800b06c:	0800b105 	.word	0x0800b105
 800b070:	0800b0e5 	.word	0x0800b0e5
 800b074:	0800b105 	.word	0x0800b105
 800b078:	0800b105 	.word	0x0800b105
 800b07c:	0800b105 	.word	0x0800b105
 800b080:	0800b105 	.word	0x0800b105
 800b084:	0800b105 	.word	0x0800b105
 800b088:	0800b105 	.word	0x0800b105
 800b08c:	0800b105 	.word	0x0800b105
 800b090:	0800b0ed 	.word	0x0800b0ed
 800b094:	0800b105 	.word	0x0800b105
 800b098:	0800b105 	.word	0x0800b105
 800b09c:	0800b105 	.word	0x0800b105
 800b0a0:	0800b105 	.word	0x0800b105
 800b0a4:	0800b105 	.word	0x0800b105
 800b0a8:	0800b105 	.word	0x0800b105
 800b0ac:	0800b105 	.word	0x0800b105
 800b0b0:	0800b0f5 	.word	0x0800b0f5
 800b0b4:	0800b105 	.word	0x0800b105
 800b0b8:	0800b105 	.word	0x0800b105
 800b0bc:	0800b105 	.word	0x0800b105
 800b0c0:	0800b105 	.word	0x0800b105
 800b0c4:	0800b105 	.word	0x0800b105
 800b0c8:	0800b105 	.word	0x0800b105
 800b0cc:	0800b105 	.word	0x0800b105
 800b0d0:	0800b0fd 	.word	0x0800b0fd
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0da:	e050      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b0dc:	2304      	movs	r3, #4
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e2:	e04c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b0e4:	2308      	movs	r3, #8
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ea:	e048      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f2:	e044      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b0f4:	2320      	movs	r3, #32
 800b0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fa:	e040      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b0fc:	2340      	movs	r3, #64	@ 0x40
 800b0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b102:	e03c      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b104:	2380      	movs	r3, #128	@ 0x80
 800b106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10a:	e038      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a71      	ldr	r2, [pc, #452]	@ (800b2d8 <UART_SetConfig+0x908>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d130      	bne.n	800b178 <UART_SetConfig+0x7a8>
 800b116:	4b6f      	ldr	r3, [pc, #444]	@ (800b2d4 <UART_SetConfig+0x904>)
 800b118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b11a:	f003 0307 	and.w	r3, r3, #7
 800b11e:	2b05      	cmp	r3, #5
 800b120:	d826      	bhi.n	800b170 <UART_SetConfig+0x7a0>
 800b122:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <UART_SetConfig+0x758>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b141 	.word	0x0800b141
 800b12c:	0800b149 	.word	0x0800b149
 800b130:	0800b151 	.word	0x0800b151
 800b134:	0800b159 	.word	0x0800b159
 800b138:	0800b161 	.word	0x0800b161
 800b13c:	0800b169 	.word	0x0800b169
 800b140:	2302      	movs	r3, #2
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b146:	e01a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b148:	2304      	movs	r3, #4
 800b14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14e:	e016      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b150:	2308      	movs	r3, #8
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b156:	e012      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b158:	2310      	movs	r3, #16
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15e:	e00e      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b160:	2320      	movs	r3, #32
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b166:	e00a      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b168:	2340      	movs	r3, #64	@ 0x40
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16e:	e006      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b170:	2380      	movs	r3, #128	@ 0x80
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b176:	e002      	b.n	800b17e <UART_SetConfig+0x7ae>
 800b178:	2380      	movs	r3, #128	@ 0x80
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a55      	ldr	r2, [pc, #340]	@ (800b2d8 <UART_SetConfig+0x908>)
 800b184:	4293      	cmp	r3, r2
 800b186:	f040 80f8 	bne.w	800b37a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b18a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b18e:	2b20      	cmp	r3, #32
 800b190:	dc46      	bgt.n	800b220 <UART_SetConfig+0x850>
 800b192:	2b02      	cmp	r3, #2
 800b194:	db75      	blt.n	800b282 <UART_SetConfig+0x8b2>
 800b196:	3b02      	subs	r3, #2
 800b198:	2b1e      	cmp	r3, #30
 800b19a:	d872      	bhi.n	800b282 <UART_SetConfig+0x8b2>
 800b19c:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a4 <UART_SetConfig+0x7d4>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b227 	.word	0x0800b227
 800b1a8:	0800b283 	.word	0x0800b283
 800b1ac:	0800b22f 	.word	0x0800b22f
 800b1b0:	0800b283 	.word	0x0800b283
 800b1b4:	0800b283 	.word	0x0800b283
 800b1b8:	0800b283 	.word	0x0800b283
 800b1bc:	0800b23f 	.word	0x0800b23f
 800b1c0:	0800b283 	.word	0x0800b283
 800b1c4:	0800b283 	.word	0x0800b283
 800b1c8:	0800b283 	.word	0x0800b283
 800b1cc:	0800b283 	.word	0x0800b283
 800b1d0:	0800b283 	.word	0x0800b283
 800b1d4:	0800b283 	.word	0x0800b283
 800b1d8:	0800b283 	.word	0x0800b283
 800b1dc:	0800b24f 	.word	0x0800b24f
 800b1e0:	0800b283 	.word	0x0800b283
 800b1e4:	0800b283 	.word	0x0800b283
 800b1e8:	0800b283 	.word	0x0800b283
 800b1ec:	0800b283 	.word	0x0800b283
 800b1f0:	0800b283 	.word	0x0800b283
 800b1f4:	0800b283 	.word	0x0800b283
 800b1f8:	0800b283 	.word	0x0800b283
 800b1fc:	0800b283 	.word	0x0800b283
 800b200:	0800b283 	.word	0x0800b283
 800b204:	0800b283 	.word	0x0800b283
 800b208:	0800b283 	.word	0x0800b283
 800b20c:	0800b283 	.word	0x0800b283
 800b210:	0800b283 	.word	0x0800b283
 800b214:	0800b283 	.word	0x0800b283
 800b218:	0800b283 	.word	0x0800b283
 800b21c:	0800b275 	.word	0x0800b275
 800b220:	2b40      	cmp	r3, #64	@ 0x40
 800b222:	d02a      	beq.n	800b27a <UART_SetConfig+0x8aa>
 800b224:	e02d      	b.n	800b282 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b226:	f7fe fd45 	bl	8009cb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b22a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b22c:	e02f      	b.n	800b28e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe fd54 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b23c:	e027      	b.n	800b28e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b23e:	f107 0318 	add.w	r3, r7, #24
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe fea0 	bl	8009f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24c:	e01f      	b.n	800b28e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b24e:	4b21      	ldr	r3, [pc, #132]	@ (800b2d4 <UART_SetConfig+0x904>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0320 	and.w	r3, r3, #32
 800b256:	2b00      	cmp	r3, #0
 800b258:	d009      	beq.n	800b26e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b25a:	4b1e      	ldr	r3, [pc, #120]	@ (800b2d4 <UART_SetConfig+0x904>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	08db      	lsrs	r3, r3, #3
 800b260:	f003 0303 	and.w	r3, r3, #3
 800b264:	4a1d      	ldr	r2, [pc, #116]	@ (800b2dc <UART_SetConfig+0x90c>)
 800b266:	fa22 f303 	lsr.w	r3, r2, r3
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b26c:	e00f      	b.n	800b28e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b26e:	4b1b      	ldr	r3, [pc, #108]	@ (800b2dc <UART_SetConfig+0x90c>)
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b272:	e00c      	b.n	800b28e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b274:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e0 <UART_SetConfig+0x910>)
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b278:	e009      	b.n	800b28e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b27a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b280:	e005      	b.n	800b28e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b28c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 81ee 	beq.w	800b672 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29a:	4a12      	ldr	r2, [pc, #72]	@ (800b2e4 <UART_SetConfig+0x914>)
 800b29c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	4413      	add	r3, r2
 800b2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d305      	bcc.n	800b2c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d910      	bls.n	800b2e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2cc:	e1d1      	b.n	800b672 <UART_SetConfig+0xca2>
 800b2ce:	bf00      	nop
 800b2d0:	40011c00 	.word	0x40011c00
 800b2d4:	58024400 	.word	0x58024400
 800b2d8:	58000c00 	.word	0x58000c00
 800b2dc:	03d09000 	.word	0x03d09000
 800b2e0:	003d0900 	.word	0x003d0900
 800b2e4:	08028bb8 	.word	0x08028bb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	60fa      	str	r2, [r7, #12]
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f4:	4ac0      	ldr	r2, [pc, #768]	@ (800b5f8 <UART_SetConfig+0xc28>)
 800b2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	607a      	str	r2, [r7, #4]
 800b302:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b30a:	f7f5 f8b9 	bl	8000480 <__aeabi_uldivmod>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4610      	mov	r0, r2
 800b314:	4619      	mov	r1, r3
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	f04f 0300 	mov.w	r3, #0
 800b31e:	020b      	lsls	r3, r1, #8
 800b320:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b324:	0202      	lsls	r2, r0, #8
 800b326:	6979      	ldr	r1, [r7, #20]
 800b328:	6849      	ldr	r1, [r1, #4]
 800b32a:	0849      	lsrs	r1, r1, #1
 800b32c:	2000      	movs	r0, #0
 800b32e:	460c      	mov	r4, r1
 800b330:	4605      	mov	r5, r0
 800b332:	eb12 0804 	adds.w	r8, r2, r4
 800b336:	eb43 0905 	adc.w	r9, r3, r5
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	469a      	mov	sl, r3
 800b342:	4693      	mov	fp, r2
 800b344:	4652      	mov	r2, sl
 800b346:	465b      	mov	r3, fp
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	f7f5 f898 	bl	8000480 <__aeabi_uldivmod>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4613      	mov	r3, r2
 800b356:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b35e:	d308      	bcc.n	800b372 <UART_SetConfig+0x9a2>
 800b360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b366:	d204      	bcs.n	800b372 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b36e:	60da      	str	r2, [r3, #12]
 800b370:	e17f      	b.n	800b672 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b378:	e17b      	b.n	800b672 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b382:	f040 80bd 	bne.w	800b500 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b386:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b38a:	2b20      	cmp	r3, #32
 800b38c:	dc48      	bgt.n	800b420 <UART_SetConfig+0xa50>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	db7b      	blt.n	800b48a <UART_SetConfig+0xaba>
 800b392:	2b20      	cmp	r3, #32
 800b394:	d879      	bhi.n	800b48a <UART_SetConfig+0xaba>
 800b396:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <UART_SetConfig+0x9cc>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b427 	.word	0x0800b427
 800b3a0:	0800b42f 	.word	0x0800b42f
 800b3a4:	0800b48b 	.word	0x0800b48b
 800b3a8:	0800b48b 	.word	0x0800b48b
 800b3ac:	0800b437 	.word	0x0800b437
 800b3b0:	0800b48b 	.word	0x0800b48b
 800b3b4:	0800b48b 	.word	0x0800b48b
 800b3b8:	0800b48b 	.word	0x0800b48b
 800b3bc:	0800b447 	.word	0x0800b447
 800b3c0:	0800b48b 	.word	0x0800b48b
 800b3c4:	0800b48b 	.word	0x0800b48b
 800b3c8:	0800b48b 	.word	0x0800b48b
 800b3cc:	0800b48b 	.word	0x0800b48b
 800b3d0:	0800b48b 	.word	0x0800b48b
 800b3d4:	0800b48b 	.word	0x0800b48b
 800b3d8:	0800b48b 	.word	0x0800b48b
 800b3dc:	0800b457 	.word	0x0800b457
 800b3e0:	0800b48b 	.word	0x0800b48b
 800b3e4:	0800b48b 	.word	0x0800b48b
 800b3e8:	0800b48b 	.word	0x0800b48b
 800b3ec:	0800b48b 	.word	0x0800b48b
 800b3f0:	0800b48b 	.word	0x0800b48b
 800b3f4:	0800b48b 	.word	0x0800b48b
 800b3f8:	0800b48b 	.word	0x0800b48b
 800b3fc:	0800b48b 	.word	0x0800b48b
 800b400:	0800b48b 	.word	0x0800b48b
 800b404:	0800b48b 	.word	0x0800b48b
 800b408:	0800b48b 	.word	0x0800b48b
 800b40c:	0800b48b 	.word	0x0800b48b
 800b410:	0800b48b 	.word	0x0800b48b
 800b414:	0800b48b 	.word	0x0800b48b
 800b418:	0800b48b 	.word	0x0800b48b
 800b41c:	0800b47d 	.word	0x0800b47d
 800b420:	2b40      	cmp	r3, #64	@ 0x40
 800b422:	d02e      	beq.n	800b482 <UART_SetConfig+0xab2>
 800b424:	e031      	b.n	800b48a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b426:	f7fe fbd7 	bl	8009bd8 <HAL_RCC_GetPCLK1Freq>
 800b42a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b42c:	e033      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42e:	f7fe fbe9 	bl	8009c04 <HAL_RCC_GetPCLK2Freq>
 800b432:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b434:	e02f      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fc50 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b444:	e027      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b446:	f107 0318 	add.w	r3, r7, #24
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fd9c 	bl	8009f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b454:	e01f      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b456:	4b69      	ldr	r3, [pc, #420]	@ (800b5fc <UART_SetConfig+0xc2c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0320 	and.w	r3, r3, #32
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b462:	4b66      	ldr	r3, [pc, #408]	@ (800b5fc <UART_SetConfig+0xc2c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	08db      	lsrs	r3, r3, #3
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	4a64      	ldr	r2, [pc, #400]	@ (800b600 <UART_SetConfig+0xc30>)
 800b46e:	fa22 f303 	lsr.w	r3, r2, r3
 800b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b474:	e00f      	b.n	800b496 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b476:	4b62      	ldr	r3, [pc, #392]	@ (800b600 <UART_SetConfig+0xc30>)
 800b478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b47a:	e00c      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b47c:	4b61      	ldr	r3, [pc, #388]	@ (800b604 <UART_SetConfig+0xc34>)
 800b47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b480:	e009      	b.n	800b496 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b488:	e005      	b.n	800b496 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 80ea 	beq.w	800b672 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a2:	4a55      	ldr	r2, [pc, #340]	@ (800b5f8 <UART_SetConfig+0xc28>)
 800b4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b0:	005a      	lsls	r2, r3, #1
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	441a      	add	r2, r3
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	2b0f      	cmp	r3, #15
 800b4c8:	d916      	bls.n	800b4f8 <UART_SetConfig+0xb28>
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4d0:	d212      	bcs.n	800b4f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	f023 030f 	bic.w	r3, r3, #15
 800b4da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	e0bc      	b.n	800b672 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4fe:	e0b8      	b.n	800b672 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b500:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b504:	2b20      	cmp	r3, #32
 800b506:	dc4b      	bgt.n	800b5a0 <UART_SetConfig+0xbd0>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f2c0 8087 	blt.w	800b61c <UART_SetConfig+0xc4c>
 800b50e:	2b20      	cmp	r3, #32
 800b510:	f200 8084 	bhi.w	800b61c <UART_SetConfig+0xc4c>
 800b514:	a201      	add	r2, pc, #4	@ (adr r2, 800b51c <UART_SetConfig+0xb4c>)
 800b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51a:	bf00      	nop
 800b51c:	0800b5a7 	.word	0x0800b5a7
 800b520:	0800b5af 	.word	0x0800b5af
 800b524:	0800b61d 	.word	0x0800b61d
 800b528:	0800b61d 	.word	0x0800b61d
 800b52c:	0800b5b7 	.word	0x0800b5b7
 800b530:	0800b61d 	.word	0x0800b61d
 800b534:	0800b61d 	.word	0x0800b61d
 800b538:	0800b61d 	.word	0x0800b61d
 800b53c:	0800b5c7 	.word	0x0800b5c7
 800b540:	0800b61d 	.word	0x0800b61d
 800b544:	0800b61d 	.word	0x0800b61d
 800b548:	0800b61d 	.word	0x0800b61d
 800b54c:	0800b61d 	.word	0x0800b61d
 800b550:	0800b61d 	.word	0x0800b61d
 800b554:	0800b61d 	.word	0x0800b61d
 800b558:	0800b61d 	.word	0x0800b61d
 800b55c:	0800b5d7 	.word	0x0800b5d7
 800b560:	0800b61d 	.word	0x0800b61d
 800b564:	0800b61d 	.word	0x0800b61d
 800b568:	0800b61d 	.word	0x0800b61d
 800b56c:	0800b61d 	.word	0x0800b61d
 800b570:	0800b61d 	.word	0x0800b61d
 800b574:	0800b61d 	.word	0x0800b61d
 800b578:	0800b61d 	.word	0x0800b61d
 800b57c:	0800b61d 	.word	0x0800b61d
 800b580:	0800b61d 	.word	0x0800b61d
 800b584:	0800b61d 	.word	0x0800b61d
 800b588:	0800b61d 	.word	0x0800b61d
 800b58c:	0800b61d 	.word	0x0800b61d
 800b590:	0800b61d 	.word	0x0800b61d
 800b594:	0800b61d 	.word	0x0800b61d
 800b598:	0800b61d 	.word	0x0800b61d
 800b59c:	0800b60f 	.word	0x0800b60f
 800b5a0:	2b40      	cmp	r3, #64	@ 0x40
 800b5a2:	d037      	beq.n	800b614 <UART_SetConfig+0xc44>
 800b5a4:	e03a      	b.n	800b61c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5a6:	f7fe fb17 	bl	8009bd8 <HAL_RCC_GetPCLK1Freq>
 800b5aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5ac:	e03c      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ae:	f7fe fb29 	bl	8009c04 <HAL_RCC_GetPCLK2Freq>
 800b5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e038      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fb90 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c4:	e030      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c6:	f107 0318 	add.w	r3, r7, #24
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fcdc 	bl	8009f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d4:	e028      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d6:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <UART_SetConfig+0xc2c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0320 	and.w	r3, r3, #32
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d012      	beq.n	800b608 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5e2:	4b06      	ldr	r3, [pc, #24]	@ (800b5fc <UART_SetConfig+0xc2c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	08db      	lsrs	r3, r3, #3
 800b5e8:	f003 0303 	and.w	r3, r3, #3
 800b5ec:	4a04      	ldr	r2, [pc, #16]	@ (800b600 <UART_SetConfig+0xc30>)
 800b5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5f4:	e018      	b.n	800b628 <UART_SetConfig+0xc58>
 800b5f6:	bf00      	nop
 800b5f8:	08028bb8 	.word	0x08028bb8
 800b5fc:	58024400 	.word	0x58024400
 800b600:	03d09000 	.word	0x03d09000
 800b604:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b608:	4b24      	ldr	r3, [pc, #144]	@ (800b69c <UART_SetConfig+0xccc>)
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b60c:	e00c      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b60e:	4b24      	ldr	r3, [pc, #144]	@ (800b6a0 <UART_SetConfig+0xcd0>)
 800b610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b612:	e009      	b.n	800b628 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b61a:	e005      	b.n	800b628 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b626:	bf00      	nop
    }

    if (pclk != 0U)
 800b628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d021      	beq.n	800b672 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b632:	4a1c      	ldr	r2, [pc, #112]	@ (800b6a4 <UART_SetConfig+0xcd4>)
 800b634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b638:	461a      	mov	r2, r3
 800b63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	085b      	lsrs	r3, r3, #1
 800b646:	441a      	add	r2, r3
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b650:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b654:	2b0f      	cmp	r3, #15
 800b656:	d909      	bls.n	800b66c <UART_SetConfig+0xc9c>
 800b658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b65e:	d205      	bcs.n	800b66c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b662:	b29a      	uxth	r2, r3
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60da      	str	r2, [r3, #12]
 800b66a:	e002      	b.n	800b672 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2201      	movs	r2, #1
 800b676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2200      	movs	r2, #0
 800b686:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2200      	movs	r2, #0
 800b68c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b68e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b692:	4618      	mov	r0, r3
 800b694:	3748      	adds	r7, #72	@ 0x48
 800b696:	46bd      	mov	sp, r7
 800b698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b69c:	03d09000 	.word	0x03d09000
 800b6a0:	003d0900 	.word	0x003d0900
 800b6a4:	08028bb8 	.word	0x08028bb8

0800b6a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b4:	f003 0308 	and.w	r3, r3, #8
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00a      	beq.n	800b716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71a:	f003 0304 	and.w	r3, r3, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73c:	f003 0310 	and.w	r3, r3, #16
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00a      	beq.n	800b75a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	f003 0320 	and.w	r3, r3, #32
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00a      	beq.n	800b77c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01a      	beq.n	800b7be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	430a      	orrs	r2, r1
 800b79c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7a6:	d10a      	bne.n	800b7be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	605a      	str	r2, [r3, #4]
  }
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b098      	sub	sp, #96	@ 0x60
 800b7f0:	af02      	add	r7, sp, #8
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7fc:	f7fb f8a2 	bl	8006944 <HAL_GetTick>
 800b800:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0308 	and.w	r3, r3, #8
 800b80c:	2b08      	cmp	r3, #8
 800b80e:	d12f      	bne.n	800b870 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b818:	2200      	movs	r2, #0
 800b81a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f88e 	bl	800b940 <UART_WaitOnFlagUntilTimeout>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d022      	beq.n	800b870 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b83a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b83e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	461a      	mov	r2, r3
 800b846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b848:	647b      	str	r3, [r7, #68]	@ 0x44
 800b84a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b84e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e6      	bne.n	800b82a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2220      	movs	r2, #32
 800b860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e063      	b.n	800b938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0304 	and.w	r3, r3, #4
 800b87a:	2b04      	cmp	r3, #4
 800b87c:	d149      	bne.n	800b912 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b87e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b886:	2200      	movs	r2, #0
 800b888:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f857 	bl	800b940 <UART_WaitOnFlagUntilTimeout>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d03c      	beq.n	800b912 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e6      	bne.n	800b898 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f023 0301 	bic.w	r3, r3, #1
 800b8e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ea:	61fa      	str	r2, [r7, #28]
 800b8ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ee:	69b9      	ldr	r1, [r7, #24]
 800b8f0:	69fa      	ldr	r2, [r7, #28]
 800b8f2:	e841 2300 	strex	r3, r2, [r1]
 800b8f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1e5      	bne.n	800b8ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e012      	b.n	800b938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3758      	adds	r7, #88	@ 0x58
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4613      	mov	r3, r2
 800b94e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b950:	e04f      	b.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b958:	d04b      	beq.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b95a:	f7fa fff3 	bl	8006944 <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	69ba      	ldr	r2, [r7, #24]
 800b966:	429a      	cmp	r2, r3
 800b968:	d302      	bcc.n	800b970 <UART_WaitOnFlagUntilTimeout+0x30>
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e04e      	b.n	800ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 0304 	and.w	r3, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d037      	beq.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b80      	cmp	r3, #128	@ 0x80
 800b986:	d034      	beq.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2b40      	cmp	r3, #64	@ 0x40
 800b98c:	d031      	beq.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	f003 0308 	and.w	r3, r3, #8
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d110      	bne.n	800b9be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f000 f839 	bl	800ba1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2208      	movs	r2, #8
 800b9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e029      	b.n	800ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9cc:	d111      	bne.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 f81f 	bl	800ba1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e00f      	b.n	800ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69da      	ldr	r2, [r3, #28]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	bf0c      	ite	eq
 800ba02:	2301      	moveq	r3, #1
 800ba04:	2300      	movne	r3, #0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d0a0      	beq.n	800b952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b095      	sub	sp, #84	@ 0x54
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba42:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba4a:	e841 2300 	strex	r3, r2, [r1]
 800ba4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e6      	bne.n	800ba24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	4b1e      	ldr	r3, [pc, #120]	@ (800bae4 <UART_EndRxTransfer+0xc8>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3308      	adds	r3, #8
 800ba74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e5      	bne.n	800ba56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d118      	bne.n	800bac4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	647b      	str	r3, [r7, #68]	@ 0x44
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab4:	6979      	ldr	r1, [r7, #20]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	e841 2300 	strex	r3, r2, [r1]
 800babc:	613b      	str	r3, [r7, #16]
   return(result);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e6      	bne.n	800ba92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bad8:	bf00      	nop
 800bada:	3754      	adds	r7, #84	@ 0x54
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	effffffe 	.word	0xeffffffe

0800bae8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800baee:	2020      	movs	r0, #32
 800baf0:	f004 f8a0 	bl	800fc34 <pvPortMalloc>
 800baf4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f988 	bl	800be1c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800bb12:	687b      	ldr	r3, [r7, #4]
	}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b090      	sub	sp, #64	@ 0x40
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10b      	bne.n	800bb54 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb5a:	d30b      	bcc.n	800bb74 <xEventGroupWaitBits+0x58>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	61fb      	str	r3, [r7, #28]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <xEventGroupWaitBits+0x76>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	61bb      	str	r3, [r7, #24]
}
 800bb8c:	bf00      	nop
 800bb8e:	bf00      	nop
 800bb90:	e7fd      	b.n	800bb8e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb92:	f002 fc45 	bl	800e420 <xTaskGetSchedulerState>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <xEventGroupWaitBits+0x86>
 800bb9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <xEventGroupWaitBits+0x8a>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e000      	b.n	800bba8 <xEventGroupWaitBits+0x8c>
 800bba6:	2300      	movs	r3, #0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10b      	bne.n	800bbc4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	617b      	str	r3, [r7, #20]
}
 800bbbe:	bf00      	nop
 800bbc0:	bf00      	nop
 800bbc2:	e7fd      	b.n	800bbc0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800bbc4:	f001 fe20 	bl	800d808 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800bbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbd4:	f000 f900 	bl	800bdd8 <prvTestWaitCondition>
 800bbd8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800bbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00e      	beq.n	800bbfe <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800bbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d028      	beq.n	800bc40 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	43db      	mvns	r3, r3
 800bbf6:	401a      	ands	r2, r3
 800bbf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	e020      	b.n	800bc40 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d104      	bne.n	800bc0e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc0c:	e018      	b.n	800bc40 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc28:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc2c:	1d18      	adds	r0, r3, #4
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc32:	4313      	orrs	r3, r2
 800bc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc36:	4619      	mov	r1, r3
 800bc38:	f002 f880 	bl	800dd3c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800bc40:	f001 fdf0 	bl	800d824 <xTaskResumeAll>
 800bc44:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800bc46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d031      	beq.n	800bcb0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d107      	bne.n	800bc62 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800bc52:	4b1a      	ldr	r3, [pc, #104]	@ (800bcbc <xEventGroupWaitBits+0x1a0>)
 800bc54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800bc62:	f002 fe13 	bl	800e88c <uxTaskResetEventItemValue>
 800bc66:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800bc68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d11a      	bne.n	800bca8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800bc72:	f004 fb01 	bl	8010278 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800bc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc82:	f000 f8a9 	bl	800bdd8 <prvTestWaitCondition>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d009      	beq.n	800bca0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bc92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	43db      	mvns	r3, r3
 800bc9a:	401a      	ands	r2, r3
 800bc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc9e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800bca4:	f004 fb1a 	bl	80102dc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800bcb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3740      	adds	r7, #64	@ 0x40
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	e000ed04 	.word	0xe000ed04

0800bcc0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08e      	sub	sp, #56	@ 0x38
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800bcca:	2300      	movs	r3, #0
 800bccc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <xEventGroupSetBits+0x34>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	613b      	str	r3, [r7, #16]
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcfa:	d30b      	bcc.n	800bd14 <xEventGroupSetBits+0x54>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	60fb      	str	r3, [r7, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	e7fd      	b.n	800bd10 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	3304      	adds	r3, #4
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800bd20:	f001 fd72 	bl	800d808 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800bd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800bd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	431a      	orrs	r2, r3
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800bd36:	e03c      	b.n	800bdb2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800bd38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800bd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800bd44:	2300      	movs	r3, #0
 800bd46:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bd4e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bd56:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d108      	bne.n	800bd74 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00b      	beq.n	800bd86 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd72:	e008      	b.n	800bd86 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	69ba      	ldr	r2, [r7, #24]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d101      	bne.n	800bd86 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800bd82:	2301      	movs	r3, #1
 800bd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800bd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d010      	beq.n	800bdae <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d003      	beq.n	800bd9e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bda6:	4619      	mov	r1, r3
 800bda8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bdaa:	f002 f895 	bl	800ded8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800bdb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d1be      	bne.n	800bd38 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	43db      	mvns	r3, r3
 800bdc2:	401a      	ands	r2, r3
 800bdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800bdc8:	f001 fd2c 	bl	800d824 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800bdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdce:	681b      	ldr	r3, [r3, #0]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3738      	adds	r7, #56	@ 0x38
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d107      	bne.n	800bdfe <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00a      	beq.n	800be0e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	e007      	b.n	800be0e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	4013      	ands	r3, r2
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	429a      	cmp	r2, r3
 800be08:	d101      	bne.n	800be0e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800be0a:	2301      	movs	r3, #1
 800be0c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800be0e:	697b      	ldr	r3, [r7, #20]
}
 800be10:	4618      	mov	r0, r3
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f103 0208 	add.w	r2, r3, #8
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f04f 32ff 	mov.w	r2, #4294967295
 800be34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f103 0208 	add.w	r2, r3, #8
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f103 0208 	add.w	r2, r3, #8
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be76:	b480      	push	{r7}
 800be78:	b085      	sub	sp, #20
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	683a      	ldr	r2, [r7, #0]
 800be9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	601a      	str	r2, [r3, #0]
}
 800beb2:	bf00      	nop
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bebe:	b480      	push	{r7}
 800bec0:	b085      	sub	sp, #20
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d103      	bne.n	800bede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	e00c      	b.n	800bef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	3308      	adds	r3, #8
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	e002      	b.n	800beec <vListInsert+0x2e>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d2f6      	bcs.n	800bee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	601a      	str	r2, [r3, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	6892      	ldr	r2, [r2, #8]
 800bf46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	6852      	ldr	r2, [r2, #4]
 800bf50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d103      	bne.n	800bf64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	1e5a      	subs	r2, r3, #1
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10b      	bne.n	800bfb0 <xQueueGenericReset+0x2c>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	60bb      	str	r3, [r7, #8]
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	e7fd      	b.n	800bfac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bfb0:	f004 f962 	bl	8010278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfbc:	68f9      	ldr	r1, [r7, #12]
 800bfbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfc0:	fb01 f303 	mul.w	r3, r1, r3
 800bfc4:	441a      	add	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfe6:	fb01 f303 	mul.w	r3, r1, r3
 800bfea:	441a      	add	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	22ff      	movs	r2, #255	@ 0xff
 800bff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	22ff      	movs	r2, #255	@ 0xff
 800bffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d114      	bne.n	800c030 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01a      	beq.n	800c044 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3310      	adds	r3, #16
 800c012:	4618      	mov	r0, r3
 800c014:	f001 fefc 	bl	800de10 <xTaskRemoveFromEventList>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d012      	beq.n	800c044 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c01e:	4b0d      	ldr	r3, [pc, #52]	@ (800c054 <xQueueGenericReset+0xd0>)
 800c020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	e009      	b.n	800c044 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3310      	adds	r3, #16
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fef1 	bl	800be1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3324      	adds	r3, #36	@ 0x24
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff feec 	bl	800be1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c044:	f004 f94a 	bl	80102dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c048:	2301      	movs	r3, #1
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	e000ed04 	.word	0xe000ed04

0800c058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08e      	sub	sp, #56	@ 0x38
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c07e:	bf00      	nop
 800c080:	bf00      	nop
 800c082:	e7fd      	b.n	800c080 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10b      	bne.n	800c0a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	e7fd      	b.n	800c09e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <xQueueGenericCreateStatic+0x56>
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <xQueueGenericCreateStatic+0x5a>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e000      	b.n	800c0b4 <xQueueGenericCreateStatic+0x5c>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10b      	bne.n	800c0d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	623b      	str	r3, [r7, #32]
}
 800c0ca:	bf00      	nop
 800c0cc:	bf00      	nop
 800c0ce:	e7fd      	b.n	800c0cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d102      	bne.n	800c0dc <xQueueGenericCreateStatic+0x84>
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <xQueueGenericCreateStatic+0x88>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e000      	b.n	800c0e2 <xQueueGenericCreateStatic+0x8a>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	61fb      	str	r3, [r7, #28]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0fe:	2350      	movs	r3, #80	@ 0x50
 800c100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b50      	cmp	r3, #80	@ 0x50
 800c106:	d00b      	beq.n	800c120 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	61bb      	str	r3, [r7, #24]
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	e7fd      	b.n	800c11c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c120:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00d      	beq.n	800c148 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c134:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	4613      	mov	r3, r2
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	68b9      	ldr	r1, [r7, #8]
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 f840 	bl	800c1c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3730      	adds	r7, #48	@ 0x30
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c152:	b580      	push	{r7, lr}
 800c154:	b08a      	sub	sp, #40	@ 0x28
 800c156:	af02      	add	r7, sp, #8
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	4613      	mov	r3, r2
 800c15e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	613b      	str	r3, [r7, #16]
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	e7fd      	b.n	800c17a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	fb02 f303 	mul.w	r3, r2, r3
 800c186:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	3350      	adds	r3, #80	@ 0x50
 800c18c:	4618      	mov	r0, r3
 800c18e:	f003 fd51 	bl	800fc34 <pvPortMalloc>
 800c192:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d011      	beq.n	800c1be <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	3350      	adds	r3, #80	@ 0x50
 800c1a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1ac:	79fa      	ldrb	r2, [r7, #7]
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	68b9      	ldr	r1, [r7, #8]
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 f805 	bl	800c1c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1be:	69bb      	ldr	r3, [r7, #24]
	}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3720      	adds	r7, #32
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d103      	bne.n	800c1e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	69ba      	ldr	r2, [r7, #24]
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	e002      	b.n	800c1ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	69b8      	ldr	r0, [r7, #24]
 800c1fa:	f7ff fec3 	bl	800bf84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00e      	beq.n	800c23a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c22e:	2300      	movs	r3, #0
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f911 	bl	800c45c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c242:	b580      	push	{r7, lr}
 800c244:	b086      	sub	sp, #24
 800c246:	af00      	add	r7, sp, #0
 800c248:	4603      	mov	r3, r0
 800c24a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c24c:	2301      	movs	r3, #1
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	2300      	movs	r3, #0
 800c252:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c254:	79fb      	ldrb	r3, [r7, #7]
 800c256:	461a      	mov	r2, r3
 800c258:	6939      	ldr	r1, [r7, #16]
 800c25a:	6978      	ldr	r0, [r7, #20]
 800c25c:	f7ff ff79 	bl	800c152 <xQueueGenericCreate>
 800c260:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f7ff ffd3 	bl	800c20e <prvInitialiseMutex>

		return xNewQueue;
 800c268:	68fb      	ldr	r3, [r7, #12]
	}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c272:	b580      	push	{r7, lr}
 800c274:	b088      	sub	sp, #32
 800c276:	af02      	add	r7, sp, #8
 800c278:	4603      	mov	r3, r0
 800c27a:	6039      	str	r1, [r7, #0]
 800c27c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c27e:	2301      	movs	r3, #1
 800c280:	617b      	str	r3, [r7, #20]
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2200      	movs	r2, #0
 800c28e:	6939      	ldr	r1, [r7, #16]
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f7ff fee1 	bl	800c058 <xQueueGenericCreateStatic>
 800c296:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff ffb8 	bl	800c20e <prvInitialiseMutex>

		return xNewQueue;
 800c29e:	68fb      	ldr	r3, [r7, #12]
	}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c2a8:	b590      	push	{r4, r7, lr}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	60fb      	str	r3, [r7, #12]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	689c      	ldr	r4, [r3, #8]
 800c2d6:	f002 f893 	bl	800e400 <xTaskGetCurrentTaskHandle>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	429c      	cmp	r4, r3
 800c2de:	d111      	bne.n	800c304 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	1e5a      	subs	r2, r3, #1
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	6938      	ldr	r0, [r7, #16]
 800c2fa:	f000 f8af 	bl	800c45c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c2fe:	2301      	movs	r3, #1
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	e001      	b.n	800c308 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c308:	697b      	ldr	r3, [r7, #20]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	371c      	adds	r7, #28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd90      	pop	{r4, r7, pc}

0800c312 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c312:	b590      	push	{r4, r7, lr}
 800c314:	b087      	sub	sp, #28
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	689c      	ldr	r4, [r3, #8]
 800c342:	f002 f85d 	bl	800e400 <xTaskGetCurrentTaskHandle>
 800c346:	4603      	mov	r3, r0
 800c348:	429c      	cmp	r4, r3
 800c34a:	d107      	bne.n	800c35c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c356:	2301      	movs	r3, #1
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	e00c      	b.n	800c376 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6938      	ldr	r0, [r7, #16]
 800c360:	f000 fb8e 	bl	800ca80 <xQueueSemaphoreTake>
 800c364:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d004      	beq.n	800c376 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c376:	697b      	ldr	r3, [r7, #20]
	}
 800c378:	4618      	mov	r0, r3
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd90      	pop	{r4, r7, pc}

0800c380 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08a      	sub	sp, #40	@ 0x28
 800c384:	af02      	add	r7, sp, #8
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10b      	bne.n	800c3aa <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61bb      	str	r3, [r7, #24]
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	e7fd      	b.n	800c3a6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d90b      	bls.n	800c3ca <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	617b      	str	r3, [r7, #20]
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	e7fd      	b.n	800c3c6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff fe3f 	bl	800c058 <xQueueGenericCreateStatic>
 800c3da:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c3e8:	69fb      	ldr	r3, [r7, #28]
	}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b086      	sub	sp, #24
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10b      	bne.n	800c41a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	613b      	str	r3, [r7, #16]
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	e7fd      	b.n	800c416 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d90b      	bls.n	800c43a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	60fb      	str	r3, [r7, #12]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c43a:	2202      	movs	r2, #2
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fe87 	bl	800c152 <xQueueGenericCreate>
 800c444:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c452:	697b      	ldr	r3, [r7, #20]
	}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08e      	sub	sp, #56	@ 0x38
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c46a:	2300      	movs	r3, #0
 800c46c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <xQueueGenericSend+0x34>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c48a:	bf00      	nop
 800c48c:	bf00      	nop
 800c48e:	e7fd      	b.n	800c48c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d103      	bne.n	800c49e <xQueueGenericSend+0x42>
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <xQueueGenericSend+0x46>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e000      	b.n	800c4a4 <xQueueGenericSend+0x48>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10b      	bne.n	800c4c0 <xQueueGenericSend+0x64>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d103      	bne.n	800c4ce <xQueueGenericSend+0x72>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d101      	bne.n	800c4d2 <xQueueGenericSend+0x76>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <xQueueGenericSend+0x78>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <xQueueGenericSend+0x94>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	623b      	str	r3, [r7, #32]
}
 800c4ea:	bf00      	nop
 800c4ec:	bf00      	nop
 800c4ee:	e7fd      	b.n	800c4ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4f0:	f001 ff96 	bl	800e420 <xTaskGetSchedulerState>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d102      	bne.n	800c500 <xQueueGenericSend+0xa4>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <xQueueGenericSend+0xa8>
 800c500:	2301      	movs	r3, #1
 800c502:	e000      	b.n	800c506 <xQueueGenericSend+0xaa>
 800c504:	2300      	movs	r3, #0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <xQueueGenericSend+0xc6>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	61fb      	str	r3, [r7, #28]
}
 800c51c:	bf00      	nop
 800c51e:	bf00      	nop
 800c520:	e7fd      	b.n	800c51e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c522:	f003 fea9 	bl	8010278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c52e:	429a      	cmp	r2, r3
 800c530:	d302      	bcc.n	800c538 <xQueueGenericSend+0xdc>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b02      	cmp	r3, #2
 800c536:	d129      	bne.n	800c58c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c53e:	f000 fcab 	bl	800ce98 <prvCopyDataToQueue>
 800c542:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d010      	beq.n	800c56e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54e:	3324      	adds	r3, #36	@ 0x24
 800c550:	4618      	mov	r0, r3
 800c552:	f001 fc5d 	bl	800de10 <xTaskRemoveFromEventList>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d013      	beq.n	800c584 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c55c:	4b3f      	ldr	r3, [pc, #252]	@ (800c65c <xQueueGenericSend+0x200>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	e00a      	b.n	800c584 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c574:	4b39      	ldr	r3, [pc, #228]	@ (800c65c <xQueueGenericSend+0x200>)
 800c576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c584:	f003 feaa 	bl	80102dc <vPortExitCritical>
				return pdPASS;
 800c588:	2301      	movs	r3, #1
 800c58a:	e063      	b.n	800c654 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d103      	bne.n	800c59a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c592:	f003 fea3 	bl	80102dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c596:	2300      	movs	r3, #0
 800c598:	e05c      	b.n	800c654 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5a0:	f107 0314 	add.w	r3, r7, #20
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f001 fcfb 	bl	800dfa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5ae:	f003 fe95 	bl	80102dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5b2:	f001 f929 	bl	800d808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5b6:	f003 fe5f 	bl	8010278 <vPortEnterCritical>
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5c0:	b25b      	sxtb	r3, r3
 800c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c6:	d103      	bne.n	800c5d0 <xQueueGenericSend+0x174>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5d6:	b25b      	sxtb	r3, r3
 800c5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5dc:	d103      	bne.n	800c5e6 <xQueueGenericSend+0x18a>
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5e6:	f003 fe79 	bl	80102dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5ea:	1d3a      	adds	r2, r7, #4
 800c5ec:	f107 0314 	add.w	r3, r7, #20
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f001 fcea 	bl	800dfcc <xTaskCheckForTimeOut>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d124      	bne.n	800c648 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c600:	f000 fd42 	bl	800d088 <prvIsQueueFull>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d018      	beq.n	800c63c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	3310      	adds	r3, #16
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f001 fb6c 	bl	800dcf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c61a:	f000 fccd 	bl	800cfb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c61e:	f001 f901 	bl	800d824 <xTaskResumeAll>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	f47f af7c 	bne.w	800c522 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c62a:	4b0c      	ldr	r3, [pc, #48]	@ (800c65c <xQueueGenericSend+0x200>)
 800c62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	e772      	b.n	800c522 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c63c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c63e:	f000 fcbb 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c642:	f001 f8ef 	bl	800d824 <xTaskResumeAll>
 800c646:	e76c      	b.n	800c522 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c64a:	f000 fcb5 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c64e:	f001 f8e9 	bl	800d824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c652:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c654:	4618      	mov	r0, r3
 800c656:	3738      	adds	r7, #56	@ 0x38
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b090      	sub	sp, #64	@ 0x40
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10b      	bne.n	800c690 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c68a:	bf00      	nop
 800c68c:	bf00      	nop
 800c68e:	e7fd      	b.n	800c68c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d103      	bne.n	800c69e <xQueueGenericSendFromISR+0x3e>
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <xQueueGenericSendFromISR+0x42>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <xQueueGenericSendFromISR+0x44>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	e7fd      	b.n	800c6bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d103      	bne.n	800c6ce <xQueueGenericSendFromISR+0x6e>
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d101      	bne.n	800c6d2 <xQueueGenericSendFromISR+0x72>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <xQueueGenericSendFromISR+0x74>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	623b      	str	r3, [r7, #32]
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6f0:	f003 fea2 	bl	8010438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6f4:	f3ef 8211 	mrs	r2, BASEPRI
 800c6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	61fa      	str	r2, [r7, #28]
 800c70a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c70c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c70e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	429a      	cmp	r2, r3
 800c71a:	d302      	bcc.n	800c722 <xQueueGenericSendFromISR+0xc2>
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d12f      	bne.n	800c782 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c728:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c730:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	68b9      	ldr	r1, [r7, #8]
 800c736:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c738:	f000 fbae 	bl	800ce98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c73c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c744:	d112      	bne.n	800c76c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d016      	beq.n	800c77c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c750:	3324      	adds	r3, #36	@ 0x24
 800c752:	4618      	mov	r0, r3
 800c754:	f001 fb5c 	bl	800de10 <xTaskRemoveFromEventList>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00e      	beq.n	800c77c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00b      	beq.n	800c77c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	e007      	b.n	800c77c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c76c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c770:	3301      	adds	r3, #1
 800c772:	b2db      	uxtb	r3, r3
 800c774:	b25a      	sxtb	r2, r3
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c77c:	2301      	movs	r3, #1
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c780:	e001      	b.n	800c786 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c782:	2300      	movs	r3, #0
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c788:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c790:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c794:	4618      	mov	r0, r3
 800c796:	3740      	adds	r7, #64	@ 0x40
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08e      	sub	sp, #56	@ 0x38
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10b      	bne.n	800c7c8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	623b      	str	r3, [r7, #32]
}
 800c7c2:	bf00      	nop
 800c7c4:	bf00      	nop
 800c7c6:	e7fd      	b.n	800c7c4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	61fb      	str	r3, [r7, #28]
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d103      	bne.n	800c7f8 <xQueueGiveFromISR+0x5c>
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d101      	bne.n	800c7fc <xQueueGiveFromISR+0x60>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e000      	b.n	800c7fe <xQueueGiveFromISR+0x62>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	61bb      	str	r3, [r7, #24]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c81a:	f003 fe0d 	bl	8010438 <vPortValidateInterruptPriority>
	__asm volatile
 800c81e:	f3ef 8211 	mrs	r2, BASEPRI
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	617a      	str	r2, [r7, #20]
 800c834:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c836:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c838:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c83e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c846:	429a      	cmp	r2, r3
 800c848:	d22b      	bcs.n	800c8a2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c864:	d112      	bne.n	800c88c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d016      	beq.n	800c89c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	3324      	adds	r3, #36	@ 0x24
 800c872:	4618      	mov	r0, r3
 800c874:	f001 facc 	bl	800de10 <xTaskRemoveFromEventList>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00e      	beq.n	800c89c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e007      	b.n	800c89c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c890:	3301      	adds	r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	b25a      	sxtb	r2, r3
 800c896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a0:	e001      	b.n	800c8a6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f383 8811 	msr	BASEPRI, r3
}
 800c8b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3738      	adds	r7, #56	@ 0x38
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08c      	sub	sp, #48	@ 0x30
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10b      	bne.n	800c8ee <xQueueReceive+0x32>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	623b      	str	r3, [r7, #32]
}
 800c8e8:	bf00      	nop
 800c8ea:	bf00      	nop
 800c8ec:	e7fd      	b.n	800c8ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d103      	bne.n	800c8fc <xQueueReceive+0x40>
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <xQueueReceive+0x44>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e000      	b.n	800c902 <xQueueReceive+0x46>
 800c900:	2300      	movs	r3, #0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10b      	bne.n	800c91e <xQueueReceive+0x62>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	61fb      	str	r3, [r7, #28]
}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	e7fd      	b.n	800c91a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c91e:	f001 fd7f 	bl	800e420 <xTaskGetSchedulerState>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <xQueueReceive+0x72>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <xQueueReceive+0x76>
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <xQueueReceive+0x78>
 800c932:	2300      	movs	r3, #0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10b      	bne.n	800c950 <xQueueReceive+0x94>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	61bb      	str	r3, [r7, #24]
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	e7fd      	b.n	800c94c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c950:	f003 fc92 	bl	8010278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c958:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d01f      	beq.n	800c9a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c964:	f000 fb02 	bl	800cf6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96a:	1e5a      	subs	r2, r3, #1
 800c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00f      	beq.n	800c998 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97a:	3310      	adds	r3, #16
 800c97c:	4618      	mov	r0, r3
 800c97e:	f001 fa47 	bl	800de10 <xTaskRemoveFromEventList>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d007      	beq.n	800c998 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c988:	4b3c      	ldr	r3, [pc, #240]	@ (800ca7c <xQueueReceive+0x1c0>)
 800c98a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c98e:	601a      	str	r2, [r3, #0]
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c998:	f003 fca0 	bl	80102dc <vPortExitCritical>
				return pdPASS;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e069      	b.n	800ca74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d103      	bne.n	800c9ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9a6:	f003 fc99 	bl	80102dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e062      	b.n	800ca74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9b4:	f107 0310 	add.w	r3, r7, #16
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 faf1 	bl	800dfa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9c2:	f003 fc8b 	bl	80102dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9c6:	f000 ff1f 	bl	800d808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9ca:	f003 fc55 	bl	8010278 <vPortEnterCritical>
 800c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9d4:	b25b      	sxtb	r3, r3
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d103      	bne.n	800c9e4 <xQueueReceive+0x128>
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9ea:	b25b      	sxtb	r3, r3
 800c9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f0:	d103      	bne.n	800c9fa <xQueueReceive+0x13e>
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9fa:	f003 fc6f 	bl	80102dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9fe:	1d3a      	adds	r2, r7, #4
 800ca00:	f107 0310 	add.w	r3, r7, #16
 800ca04:	4611      	mov	r1, r2
 800ca06:	4618      	mov	r0, r3
 800ca08:	f001 fae0 	bl	800dfcc <xTaskCheckForTimeOut>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d123      	bne.n	800ca5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca14:	f000 fb22 	bl	800d05c <prvIsQueueEmpty>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d017      	beq.n	800ca4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca20:	3324      	adds	r3, #36	@ 0x24
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	4611      	mov	r1, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f001 f962 	bl	800dcf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca2e:	f000 fac3 	bl	800cfb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca32:	f000 fef7 	bl	800d824 <xTaskResumeAll>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d189      	bne.n	800c950 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca7c <xQueueReceive+0x1c0>)
 800ca3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	e780      	b.n	800c950 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca50:	f000 fab2 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca54:	f000 fee6 	bl	800d824 <xTaskResumeAll>
 800ca58:	e77a      	b.n	800c950 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca5c:	f000 faac 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca60:	f000 fee0 	bl	800d824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca66:	f000 faf9 	bl	800d05c <prvIsQueueEmpty>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f43f af6f 	beq.w	800c950 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3730      	adds	r7, #48	@ 0x30
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08e      	sub	sp, #56	@ 0x38
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca92:	2300      	movs	r3, #0
 800ca94:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	623b      	str	r3, [r7, #32]
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	e7fd      	b.n	800cab0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	61fb      	str	r3, [r7, #28]
}
 800cace:	bf00      	nop
 800cad0:	bf00      	nop
 800cad2:	e7fd      	b.n	800cad0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cad4:	f001 fca4 	bl	800e420 <xTaskGetSchedulerState>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <xQueueSemaphoreTake+0x64>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <xQueueSemaphoreTake+0x68>
 800cae4:	2301      	movs	r3, #1
 800cae6:	e000      	b.n	800caea <xQueueSemaphoreTake+0x6a>
 800cae8:	2300      	movs	r3, #0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10b      	bne.n	800cb06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	61bb      	str	r3, [r7, #24]
}
 800cb00:	bf00      	nop
 800cb02:	bf00      	nop
 800cb04:	e7fd      	b.n	800cb02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb06:	f003 fbb7 	bl	8010278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d024      	beq.n	800cb60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb18:	1e5a      	subs	r2, r3, #1
 800cb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d104      	bne.n	800cb30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb26:	f001 fec9 	bl	800e8bc <pvTaskIncrementMutexHeldCount>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00f      	beq.n	800cb58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3a:	3310      	adds	r3, #16
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 f967 	bl	800de10 <xTaskRemoveFromEventList>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d007      	beq.n	800cb58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb48:	4b54      	ldr	r3, [pc, #336]	@ (800cc9c <xQueueSemaphoreTake+0x21c>)
 800cb4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb58:	f003 fbc0 	bl	80102dc <vPortExitCritical>
				return pdPASS;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e098      	b.n	800cc92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d112      	bne.n	800cb8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00b      	beq.n	800cb84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	617b      	str	r3, [r7, #20]
}
 800cb7e:	bf00      	nop
 800cb80:	bf00      	nop
 800cb82:	e7fd      	b.n	800cb80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb84:	f003 fbaa 	bl	80102dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	e082      	b.n	800cc92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb92:	f107 030c 	add.w	r3, r7, #12
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 fa02 	bl	800dfa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cba0:	f003 fb9c 	bl	80102dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cba4:	f000 fe30 	bl	800d808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cba8:	f003 fb66 	bl	8010278 <vPortEnterCritical>
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbb2:	b25b      	sxtb	r3, r3
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb8:	d103      	bne.n	800cbc2 <xQueueSemaphoreTake+0x142>
 800cbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbc8:	b25b      	sxtb	r3, r3
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d103      	bne.n	800cbd8 <xQueueSemaphoreTake+0x158>
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbd8:	f003 fb80 	bl	80102dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbdc:	463a      	mov	r2, r7
 800cbde:	f107 030c 	add.w	r3, r7, #12
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f001 f9f1 	bl	800dfcc <xTaskCheckForTimeOut>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d132      	bne.n	800cc56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbf2:	f000 fa33 	bl	800d05c <prvIsQueueEmpty>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d026      	beq.n	800cc4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d109      	bne.n	800cc18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cc04:	f003 fb38 	bl	8010278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 fc25 	bl	800e45c <xTaskPriorityInherit>
 800cc12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cc14:	f003 fb62 	bl	80102dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1a:	3324      	adds	r3, #36	@ 0x24
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 f865 	bl	800dcf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc28:	f000 f9c6 	bl	800cfb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc2c:	f000 fdfa 	bl	800d824 <xTaskResumeAll>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f47f af67 	bne.w	800cb06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cc38:	4b18      	ldr	r3, [pc, #96]	@ (800cc9c <xQueueSemaphoreTake+0x21c>)
 800cc3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	e75d      	b.n	800cb06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cc4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc4c:	f000 f9b4 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc50:	f000 fde8 	bl	800d824 <xTaskResumeAll>
 800cc54:	e757      	b.n	800cb06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cc56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc58:	f000 f9ae 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc5c:	f000 fde2 	bl	800d824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc62:	f000 f9fb 	bl	800d05c <prvIsQueueEmpty>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f43f af4c 	beq.w	800cb06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00d      	beq.n	800cc90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cc74:	f003 fb00 	bl	8010278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc7a:	f000 f8f5 	bl	800ce68 <prvGetDisinheritPriorityAfterTimeout>
 800cc7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 fcc0 	bl	800e60c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc8c:	f003 fb26 	bl	80102dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3738      	adds	r7, #56	@ 0x38
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	e000ed04 	.word	0xe000ed04

0800cca0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08e      	sub	sp, #56	@ 0x38
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ccb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	623b      	str	r3, [r7, #32]
}
 800ccc8:	bf00      	nop
 800ccca:	bf00      	nop
 800cccc:	e7fd      	b.n	800ccca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d103      	bne.n	800ccdc <xQueueReceiveFromISR+0x3c>
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <xQueueReceiveFromISR+0x40>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <xQueueReceiveFromISR+0x42>
 800cce0:	2300      	movs	r3, #0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10b      	bne.n	800ccfe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	61fb      	str	r3, [r7, #28]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccfe:	f003 fb9b 	bl	8010438 <vPortValidateInterruptPriority>
	__asm volatile
 800cd02:	f3ef 8211 	mrs	r2, BASEPRI
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	61ba      	str	r2, [r7, #24]
 800cd18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d02f      	beq.n	800cd8a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd38:	f000 f918 	bl	800cf6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	1e5a      	subs	r2, r3, #1
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4c:	d112      	bne.n	800cd74 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd58:	3310      	adds	r3, #16
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f001 f858 	bl	800de10 <xTaskRemoveFromEventList>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00e      	beq.n	800cd84 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00b      	beq.n	800cd84 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	e007      	b.n	800cd84 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd78:	3301      	adds	r3, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	b25a      	sxtb	r2, r3
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cd84:	2301      	movs	r3, #1
 800cd86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd88:	e001      	b.n	800cd8e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f383 8811 	msr	BASEPRI, r3
}
 800cd98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3738      	adds	r7, #56	@ 0x38
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10b      	bne.n	800cdca <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	60bb      	str	r3, [r7, #8]
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	e7fd      	b.n	800cdc6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800cdca:	f003 fa55 	bl	8010278 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800cdd4:	f003 fa82 	bl	80102dc <vPortExitCritical>

	return uxReturn;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cde2:	b480      	push	{r7}
 800cde4:	b087      	sub	sp, #28
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10b      	bne.n	800ce0c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	60fb      	str	r3, [r7, #12]
}
 800ce06:	bf00      	nop
 800ce08:	bf00      	nop
 800ce0a:	e7fd      	b.n	800ce08 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce10:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ce12:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10b      	bne.n	800ce4a <vQueueDelete+0x2a>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	60bb      	str	r3, [r7, #8]
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	e7fd      	b.n	800ce46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 f95e 	bl	800d10c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d102      	bne.n	800ce60 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f002 ffb8 	bl	800fdd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ce60:	bf00      	nop
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d006      	beq.n	800ce86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	e001      	b.n	800ce8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10d      	bne.n	800ced2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d14d      	bne.n	800cf5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 fb32 	bl	800e52c <xTaskPriorityDisinherit>
 800cec8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	609a      	str	r2, [r3, #8]
 800ced0:	e043      	b.n	800cf5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d119      	bne.n	800cf0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6858      	ldr	r0, [r3, #4]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee0:	461a      	mov	r2, r3
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	f015 ff5f 	bl	8022da6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d32b      	bcc.n	800cf5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	605a      	str	r2, [r3, #4]
 800cf0a:	e026      	b.n	800cf5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68d8      	ldr	r0, [r3, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf14:	461a      	mov	r2, r3
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	f015 ff45 	bl	8022da6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	68da      	ldr	r2, [r3, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf24:	425b      	negs	r3, r3
 800cf26:	441a      	add	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d207      	bcs.n	800cf48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689a      	ldr	r2, [r3, #8]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf40:	425b      	negs	r3, r3
 800cf42:	441a      	add	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d105      	bne.n	800cf5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cf62:	697b      	ldr	r3, [r7, #20]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d018      	beq.n	800cfb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf86:	441a      	add	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68da      	ldr	r2, [r3, #12]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d303      	bcc.n	800cfa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68d9      	ldr	r1, [r3, #12]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6838      	ldr	r0, [r7, #0]
 800cfac:	f015 fefb 	bl	8022da6 <memcpy>
	}
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfc0:	f003 f95a 	bl	8010278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfcc:	e011      	b.n	800cff2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d012      	beq.n	800cffc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3324      	adds	r3, #36	@ 0x24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 ff18 	bl	800de10 <xTaskRemoveFromEventList>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfe6:	f001 f855 	bl	800e094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dce9      	bgt.n	800cfce <prvUnlockQueue+0x16>
 800cffa:	e000      	b.n	800cffe <prvUnlockQueue+0x46>
					break;
 800cffc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	22ff      	movs	r2, #255	@ 0xff
 800d002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d006:	f003 f969 	bl	80102dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d00a:	f003 f935 	bl	8010278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d014:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d016:	e011      	b.n	800d03c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d012      	beq.n	800d046 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3310      	adds	r3, #16
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fef3 	bl	800de10 <xTaskRemoveFromEventList>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d030:	f001 f830 	bl	800e094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	3b01      	subs	r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dce9      	bgt.n	800d018 <prvUnlockQueue+0x60>
 800d044:	e000      	b.n	800d048 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d046:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	22ff      	movs	r2, #255	@ 0xff
 800d04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d050:	f003 f944 	bl	80102dc <vPortExitCritical>
}
 800d054:	bf00      	nop
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d064:	f003 f908 	bl	8010278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d070:	2301      	movs	r3, #1
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	e001      	b.n	800d07a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d076:	2300      	movs	r3, #0
 800d078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d07a:	f003 f92f 	bl	80102dc <vPortExitCritical>

	return xReturn;
 800d07e:	68fb      	ldr	r3, [r7, #12]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d090:	f003 f8f2 	bl	8010278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d102      	bne.n	800d0a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	e001      	b.n	800d0aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0aa:	f003 f917 	bl	80102dc <vPortExitCritical>

	return xReturn;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	e014      	b.n	800d0f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800d108 <vQueueAddToRegistry+0x50>)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10b      	bne.n	800d0ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0d4:	490c      	ldr	r1, [pc, #48]	@ (800d108 <vQueueAddToRegistry+0x50>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0de:	4a0a      	ldr	r2, [pc, #40]	@ (800d108 <vQueueAddToRegistry+0x50>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	4413      	add	r3, r2
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0ea:	e006      	b.n	800d0fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b07      	cmp	r3, #7
 800d0f6:	d9e7      	bls.n	800d0c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	200009a8 	.word	0x200009a8

0800d10c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d114:	2300      	movs	r3, #0
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	e016      	b.n	800d148 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d11a:	4a10      	ldr	r2, [pc, #64]	@ (800d15c <vQueueUnregisterQueue+0x50>)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	4413      	add	r3, r2
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d10b      	bne.n	800d142 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d12a:	4a0c      	ldr	r2, [pc, #48]	@ (800d15c <vQueueUnregisterQueue+0x50>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2100      	movs	r1, #0
 800d130:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d134:	4a09      	ldr	r2, [pc, #36]	@ (800d15c <vQueueUnregisterQueue+0x50>)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	4413      	add	r3, r2
 800d13c:	2200      	movs	r2, #0
 800d13e:	605a      	str	r2, [r3, #4]
				break;
 800d140:	e006      	b.n	800d150 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3301      	adds	r3, #1
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b07      	cmp	r3, #7
 800d14c:	d9e5      	bls.n	800d11a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	200009a8 	.word	0x200009a8

0800d160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d170:	f003 f882 	bl	8010278 <vPortEnterCritical>
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d103      	bne.n	800d18a <vQueueWaitForMessageRestricted+0x2a>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d190:	b25b      	sxtb	r3, r3
 800d192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d196:	d103      	bne.n	800d1a0 <vQueueWaitForMessageRestricted+0x40>
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1a0:	f003 f89c 	bl	80102dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	3324      	adds	r3, #36	@ 0x24
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	68b9      	ldr	r1, [r7, #8]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 fdff 	bl	800ddb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1ba:	6978      	ldr	r0, [r7, #20]
 800d1bc:	f7ff fefc 	bl	800cfb8 <prvUnlockQueue>
	}
 800d1c0:	bf00      	nop
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	@ 0x38
 800d1cc:	af04      	add	r7, sp, #16
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10b      	bne.n	800d1f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	623b      	str	r3, [r7, #32]
}
 800d1ee:	bf00      	nop
 800d1f0:	bf00      	nop
 800d1f2:	e7fd      	b.n	800d1f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10b      	bne.n	800d212 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	61fb      	str	r3, [r7, #28]
}
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	e7fd      	b.n	800d20e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d212:	235c      	movs	r3, #92	@ 0x5c
 800d214:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b5c      	cmp	r3, #92	@ 0x5c
 800d21a:	d00b      	beq.n	800d234 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	61bb      	str	r3, [r7, #24]
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	e7fd      	b.n	800d230 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d01e      	beq.n	800d27a <xTaskCreateStatic+0xb2>
 800d23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d01b      	beq.n	800d27a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d24a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24e:	2202      	movs	r2, #2
 800d250:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d254:	2300      	movs	r3, #0
 800d256:	9303      	str	r3, [sp, #12]
 800d258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	f107 0314 	add.w	r3, r7, #20
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	68b9      	ldr	r1, [r7, #8]
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f000 f850 	bl	800d312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d274:	f000 f8de 	bl	800d434 <prvAddNewTaskToReadyList>
 800d278:	e001      	b.n	800d27e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d27e:	697b      	ldr	r3, [r7, #20]
	}
 800d280:	4618      	mov	r0, r3
 800d282:	3728      	adds	r7, #40	@ 0x28
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08c      	sub	sp, #48	@ 0x30
 800d28c:	af04      	add	r7, sp, #16
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	4613      	mov	r3, r2
 800d296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d298:	88fb      	ldrh	r3, [r7, #6]
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f002 fcc9 	bl	800fc34 <pvPortMalloc>
 800d2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00e      	beq.n	800d2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2aa:	205c      	movs	r0, #92	@ 0x5c
 800d2ac:	f002 fcc2 	bl	800fc34 <pvPortMalloc>
 800d2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d2be:	e005      	b.n	800d2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2c0:	6978      	ldr	r0, [r7, #20]
 800d2c2:	f002 fd85 	bl	800fdd0 <vPortFree>
 800d2c6:	e001      	b.n	800d2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d017      	beq.n	800d302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2da:	88fa      	ldrh	r2, [r7, #6]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9303      	str	r3, [sp, #12]
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	9302      	str	r3, [sp, #8]
 800d2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f80e 	bl	800d312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2f6:	69f8      	ldr	r0, [r7, #28]
 800d2f8:	f000 f89c 	bl	800d434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	61bb      	str	r3, [r7, #24]
 800d300:	e002      	b.n	800d308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d308:	69bb      	ldr	r3, [r7, #24]
	}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3720      	adds	r7, #32
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b088      	sub	sp, #32
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	607a      	str	r2, [r7, #4]
 800d31e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d322:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	461a      	mov	r2, r3
 800d32a:	21a5      	movs	r1, #165	@ 0xa5
 800d32c:	f015 fc96 	bl	8022c5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d33a:	440b      	add	r3, r1
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4413      	add	r3, r2
 800d340:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	f023 0307 	bic.w	r3, r3, #7
 800d348:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	f003 0307 	and.w	r3, r3, #7
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	617b      	str	r3, [r7, #20]
}
 800d366:	bf00      	nop
 800d368:	bf00      	nop
 800d36a:	e7fd      	b.n	800d368 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d01f      	beq.n	800d3b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d372:	2300      	movs	r3, #0
 800d374:	61fb      	str	r3, [r7, #28]
 800d376:	e012      	b.n	800d39e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	4413      	add	r3, r2
 800d37e:	7819      	ldrb	r1, [r3, #0]
 800d380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4413      	add	r3, r2
 800d386:	3334      	adds	r3, #52	@ 0x34
 800d388:	460a      	mov	r2, r1
 800d38a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d006      	beq.n	800d3a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	3301      	adds	r3, #1
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	2b0f      	cmp	r3, #15
 800d3a2:	d9e9      	bls.n	800d378 <prvInitialiseNewTask+0x66>
 800d3a4:	e000      	b.n	800d3a8 <prvInitialiseNewTask+0x96>
			{
				break;
 800d3a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d3b0:	e003      	b.n	800d3ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3bc:	2b37      	cmp	r3, #55	@ 0x37
 800d3be:	d901      	bls.n	800d3c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3c0:	2337      	movs	r3, #55	@ 0x37
 800d3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fd3e 	bl	800be5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e2:	3318      	adds	r3, #24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fe fd39 	bl	800be5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d402:	2200      	movs	r2, #0
 800d404:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	68f9      	ldr	r1, [r7, #12]
 800d412:	69b8      	ldr	r0, [r7, #24]
 800d414:	f002 fdfc 	bl	8010010 <pxPortInitialiseStack>
 800d418:	4602      	mov	r2, r0
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d42a:	bf00      	nop
 800d42c:	3720      	adds	r7, #32
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d43c:	f002 ff1c 	bl	8010278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d440:	4b2d      	ldr	r3, [pc, #180]	@ (800d4f8 <prvAddNewTaskToReadyList+0xc4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	4a2c      	ldr	r2, [pc, #176]	@ (800d4f8 <prvAddNewTaskToReadyList+0xc4>)
 800d448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d44a:	4b2c      	ldr	r3, [pc, #176]	@ (800d4fc <prvAddNewTaskToReadyList+0xc8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d109      	bne.n	800d466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d452:	4a2a      	ldr	r2, [pc, #168]	@ (800d4fc <prvAddNewTaskToReadyList+0xc8>)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d458:	4b27      	ldr	r3, [pc, #156]	@ (800d4f8 <prvAddNewTaskToReadyList+0xc4>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d110      	bne.n	800d482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d460:	f000 fe3c 	bl	800e0dc <prvInitialiseTaskLists>
 800d464:	e00d      	b.n	800d482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d466:	4b26      	ldr	r3, [pc, #152]	@ (800d500 <prvAddNewTaskToReadyList+0xcc>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d109      	bne.n	800d482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d46e:	4b23      	ldr	r3, [pc, #140]	@ (800d4fc <prvAddNewTaskToReadyList+0xc8>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d478:	429a      	cmp	r2, r3
 800d47a:	d802      	bhi.n	800d482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d47c:	4a1f      	ldr	r2, [pc, #124]	@ (800d4fc <prvAddNewTaskToReadyList+0xc8>)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d482:	4b20      	ldr	r3, [pc, #128]	@ (800d504 <prvAddNewTaskToReadyList+0xd0>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	4a1e      	ldr	r2, [pc, #120]	@ (800d504 <prvAddNewTaskToReadyList+0xd0>)
 800d48a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d48c:	4b1d      	ldr	r3, [pc, #116]	@ (800d504 <prvAddNewTaskToReadyList+0xd0>)
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d498:	4b1b      	ldr	r3, [pc, #108]	@ (800d508 <prvAddNewTaskToReadyList+0xd4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d903      	bls.n	800d4a8 <prvAddNewTaskToReadyList+0x74>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a4:	4a18      	ldr	r2, [pc, #96]	@ (800d508 <prvAddNewTaskToReadyList+0xd4>)
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4a15      	ldr	r2, [pc, #84]	@ (800d50c <prvAddNewTaskToReadyList+0xd8>)
 800d4b6:	441a      	add	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7fe fcd9 	bl	800be76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4c4:	f002 ff0a 	bl	80102dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d500 <prvAddNewTaskToReadyList+0xcc>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4fc <prvAddNewTaskToReadyList+0xc8>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d207      	bcs.n	800d4ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4de:	4b0c      	ldr	r3, [pc, #48]	@ (800d510 <prvAddNewTaskToReadyList+0xdc>)
 800d4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4ee:	bf00      	nop
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20000ebc 	.word	0x20000ebc
 800d4fc:	200009e8 	.word	0x200009e8
 800d500:	20000ec8 	.word	0x20000ec8
 800d504:	20000ed8 	.word	0x20000ed8
 800d508:	20000ec4 	.word	0x20000ec4
 800d50c:	200009ec 	.word	0x200009ec
 800d510:	e000ed04 	.word	0xe000ed04

0800d514 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d51c:	f002 feac 	bl	8010278 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <vTaskDelete+0x18>
 800d526:	4b2d      	ldr	r3, [pc, #180]	@ (800d5dc <vTaskDelete+0xc8>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	e000      	b.n	800d52e <vTaskDelete+0x1a>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3304      	adds	r3, #4
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fcfb 	bl	800bf30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	3318      	adds	r3, #24
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fcf2 	bl	800bf30 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d54c:	4b24      	ldr	r3, [pc, #144]	@ (800d5e0 <vTaskDelete+0xcc>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	4a23      	ldr	r2, [pc, #140]	@ (800d5e0 <vTaskDelete+0xcc>)
 800d554:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d556:	4b21      	ldr	r3, [pc, #132]	@ (800d5dc <vTaskDelete+0xc8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d10b      	bne.n	800d578 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3304      	adds	r3, #4
 800d564:	4619      	mov	r1, r3
 800d566:	481f      	ldr	r0, [pc, #124]	@ (800d5e4 <vTaskDelete+0xd0>)
 800d568:	f7fe fc85 	bl	800be76 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d56c:	4b1e      	ldr	r3, [pc, #120]	@ (800d5e8 <vTaskDelete+0xd4>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	4a1d      	ldr	r2, [pc, #116]	@ (800d5e8 <vTaskDelete+0xd4>)
 800d574:	6013      	str	r3, [r2, #0]
 800d576:	e009      	b.n	800d58c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d578:	4b1c      	ldr	r3, [pc, #112]	@ (800d5ec <vTaskDelete+0xd8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	4a1b      	ldr	r2, [pc, #108]	@ (800d5ec <vTaskDelete+0xd8>)
 800d580:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f000 feec 	bl	800e360 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d588:	f000 ff1a 	bl	800e3c0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d58c:	f002 fea6 	bl	80102dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d590:	4b17      	ldr	r3, [pc, #92]	@ (800d5f0 <vTaskDelete+0xdc>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01c      	beq.n	800d5d2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800d598:	4b10      	ldr	r3, [pc, #64]	@ (800d5dc <vTaskDelete+0xc8>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d117      	bne.n	800d5d2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d5a2:	4b14      	ldr	r3, [pc, #80]	@ (800d5f4 <vTaskDelete+0xe0>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00b      	beq.n	800d5c2 <vTaskDelete+0xae>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	60bb      	str	r3, [r7, #8]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f8 <vTaskDelete+0xe4>)
 800d5c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200009e8 	.word	0x200009e8
 800d5e0:	20000ed8 	.word	0x20000ed8
 800d5e4:	20000e90 	.word	0x20000e90
 800d5e8:	20000ea4 	.word	0x20000ea4
 800d5ec:	20000ebc 	.word	0x20000ebc
 800d5f0:	20000ec8 	.word	0x20000ec8
 800d5f4:	20000ee4 	.word	0x20000ee4
 800d5f8:	e000ed04 	.word	0xe000ed04

0800d5fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d018      	beq.n	800d640 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d60e:	4b14      	ldr	r3, [pc, #80]	@ (800d660 <vTaskDelay+0x64>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00b      	beq.n	800d62e <vTaskDelay+0x32>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	60bb      	str	r3, [r7, #8]
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d62e:	f000 f8eb 	bl	800d808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d632:	2100      	movs	r1, #0
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f001 f955 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d63a:	f000 f8f3 	bl	800d824 <xTaskResumeAll>
 800d63e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d107      	bne.n	800d656 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d646:	4b07      	ldr	r3, [pc, #28]	@ (800d664 <vTaskDelay+0x68>)
 800d648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20000ee4 	.word	0x20000ee4
 800d664:	e000ed04 	.word	0xe000ed04

0800d668 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10b      	bne.n	800d692 <eTaskGetState+0x2a>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	60bb      	str	r3, [r7, #8]
}
 800d68c:	bf00      	nop
 800d68e:	bf00      	nop
 800d690:	e7fd      	b.n	800d68e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d692:	4b24      	ldr	r3, [pc, #144]	@ (800d724 <eTaskGetState+0xbc>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	69ba      	ldr	r2, [r7, #24]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d102      	bne.n	800d6a2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d69c:	2300      	movs	r3, #0
 800d69e:	77fb      	strb	r3, [r7, #31]
 800d6a0:	e03a      	b.n	800d718 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800d6a2:	f002 fde9 	bl	8010278 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d6ac:	4b1e      	ldr	r3, [pc, #120]	@ (800d728 <eTaskGetState+0xc0>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d6b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d72c <eTaskGetState+0xc4>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d6b8:	f002 fe10 	bl	80102dc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d003      	beq.n	800d6cc <eTaskGetState+0x64>
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d102      	bne.n	800d6d2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	77fb      	strb	r3, [r7, #31]
 800d6d0:	e022      	b.n	800d718 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	4a16      	ldr	r2, [pc, #88]	@ (800d730 <eTaskGetState+0xc8>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d112      	bne.n	800d700 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10b      	bne.n	800d6fa <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d102      	bne.n	800d6f4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800d6ee:	2302      	movs	r3, #2
 800d6f0:	77fb      	strb	r3, [r7, #31]
 800d6f2:	e011      	b.n	800d718 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	77fb      	strb	r3, [r7, #31]
 800d6f8:	e00e      	b.n	800d718 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	77fb      	strb	r3, [r7, #31]
 800d6fe:	e00b      	b.n	800d718 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	4a0c      	ldr	r2, [pc, #48]	@ (800d734 <eTaskGetState+0xcc>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d002      	beq.n	800d70e <eTaskGetState+0xa6>
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d70e:	2304      	movs	r3, #4
 800d710:	77fb      	strb	r3, [r7, #31]
 800d712:	e001      	b.n	800d718 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d714:	2301      	movs	r3, #1
 800d716:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d718:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d71a:	4618      	mov	r0, r3
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	200009e8 	.word	0x200009e8
 800d728:	20000e74 	.word	0x20000e74
 800d72c:	20000e78 	.word	0x20000e78
 800d730:	20000ea8 	.word	0x20000ea8
 800d734:	20000e90 	.word	0x20000e90

0800d738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08a      	sub	sp, #40	@ 0x28
 800d73c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d73e:	2300      	movs	r3, #0
 800d740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d742:	2300      	movs	r3, #0
 800d744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d746:	463a      	mov	r2, r7
 800d748:	1d39      	adds	r1, r7, #4
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	4618      	mov	r0, r3
 800d750:	f002 fa3c 	bl	800fbcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	9202      	str	r2, [sp, #8]
 800d75c:	9301      	str	r3, [sp, #4]
 800d75e:	2300      	movs	r3, #0
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	460a      	mov	r2, r1
 800d766:	4922      	ldr	r1, [pc, #136]	@ (800d7f0 <vTaskStartScheduler+0xb8>)
 800d768:	4822      	ldr	r0, [pc, #136]	@ (800d7f4 <vTaskStartScheduler+0xbc>)
 800d76a:	f7ff fd2d 	bl	800d1c8 <xTaskCreateStatic>
 800d76e:	4603      	mov	r3, r0
 800d770:	4a21      	ldr	r2, [pc, #132]	@ (800d7f8 <vTaskStartScheduler+0xc0>)
 800d772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d774:	4b20      	ldr	r3, [pc, #128]	@ (800d7f8 <vTaskStartScheduler+0xc0>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d77c:	2301      	movs	r3, #1
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	e001      	b.n	800d786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d102      	bne.n	800d792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d78c:	f001 f8fe 	bl	800e98c <xTimerCreateTimerTask>
 800d790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d116      	bne.n	800d7c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	613b      	str	r3, [r7, #16]
}
 800d7aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7ac:	4b13      	ldr	r3, [pc, #76]	@ (800d7fc <vTaskStartScheduler+0xc4>)
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7b4:	4b12      	ldr	r3, [pc, #72]	@ (800d800 <vTaskStartScheduler+0xc8>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7ba:	4b12      	ldr	r3, [pc, #72]	@ (800d804 <vTaskStartScheduler+0xcc>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7c0:	f002 fcb6 	bl	8010130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7c4:	e00f      	b.n	800d7e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7cc:	d10b      	bne.n	800d7e6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	60fb      	str	r3, [r7, #12]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <vTaskStartScheduler+0xaa>
}
 800d7e6:	bf00      	nop
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	08023fd0 	.word	0x08023fd0
 800d7f4:	0800e0ad 	.word	0x0800e0ad
 800d7f8:	20000ee0 	.word	0x20000ee0
 800d7fc:	20000edc 	.word	0x20000edc
 800d800:	20000ec8 	.word	0x20000ec8
 800d804:	20000ec0 	.word	0x20000ec0

0800d808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d80c:	4b04      	ldr	r3, [pc, #16]	@ (800d820 <vTaskSuspendAll+0x18>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	4a03      	ldr	r2, [pc, #12]	@ (800d820 <vTaskSuspendAll+0x18>)
 800d814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d816:	bf00      	nop
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	20000ee4 	.word	0x20000ee4

0800d824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d82e:	2300      	movs	r3, #0
 800d830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d832:	4b42      	ldr	r3, [pc, #264]	@ (800d93c <xTaskResumeAll+0x118>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10b      	bne.n	800d852 <xTaskResumeAll+0x2e>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	603b      	str	r3, [r7, #0]
}
 800d84c:	bf00      	nop
 800d84e:	bf00      	nop
 800d850:	e7fd      	b.n	800d84e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d852:	f002 fd11 	bl	8010278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d856:	4b39      	ldr	r3, [pc, #228]	@ (800d93c <xTaskResumeAll+0x118>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	4a37      	ldr	r2, [pc, #220]	@ (800d93c <xTaskResumeAll+0x118>)
 800d85e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d860:	4b36      	ldr	r3, [pc, #216]	@ (800d93c <xTaskResumeAll+0x118>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d162      	bne.n	800d92e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d868:	4b35      	ldr	r3, [pc, #212]	@ (800d940 <xTaskResumeAll+0x11c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d05e      	beq.n	800d92e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d870:	e02f      	b.n	800d8d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d872:	4b34      	ldr	r3, [pc, #208]	@ (800d944 <xTaskResumeAll+0x120>)
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3318      	adds	r3, #24
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe fb56 	bl	800bf30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3304      	adds	r3, #4
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe fb51 	bl	800bf30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d892:	4b2d      	ldr	r3, [pc, #180]	@ (800d948 <xTaskResumeAll+0x124>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	429a      	cmp	r2, r3
 800d898:	d903      	bls.n	800d8a2 <xTaskResumeAll+0x7e>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	4a2a      	ldr	r2, [pc, #168]	@ (800d948 <xTaskResumeAll+0x124>)
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4a27      	ldr	r2, [pc, #156]	@ (800d94c <xTaskResumeAll+0x128>)
 800d8b0:	441a      	add	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	f7fe fadc 	bl	800be76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c2:	4b23      	ldr	r3, [pc, #140]	@ (800d950 <xTaskResumeAll+0x12c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d302      	bcc.n	800d8d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d8cc:	4b21      	ldr	r3, [pc, #132]	@ (800d954 <xTaskResumeAll+0x130>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8d2:	4b1c      	ldr	r3, [pc, #112]	@ (800d944 <xTaskResumeAll+0x120>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1cb      	bne.n	800d872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8e0:	f000 fd6e 	bl	800e3c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800d958 <xTaskResumeAll+0x134>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d010      	beq.n	800d912 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8f0:	f000 f8e6 	bl	800dac0 <xTaskIncrementTick>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d8fa:	4b16      	ldr	r3, [pc, #88]	@ (800d954 <xTaskResumeAll+0x130>)
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3b01      	subs	r3, #1
 800d904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1f1      	bne.n	800d8f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d90c:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <xTaskResumeAll+0x134>)
 800d90e:	2200      	movs	r2, #0
 800d910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d912:	4b10      	ldr	r3, [pc, #64]	@ (800d954 <xTaskResumeAll+0x130>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d009      	beq.n	800d92e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d91e:	4b0f      	ldr	r3, [pc, #60]	@ (800d95c <xTaskResumeAll+0x138>)
 800d920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d92e:	f002 fcd5 	bl	80102dc <vPortExitCritical>

	return xAlreadyYielded;
 800d932:	68bb      	ldr	r3, [r7, #8]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	20000ee4 	.word	0x20000ee4
 800d940:	20000ebc 	.word	0x20000ebc
 800d944:	20000e7c 	.word	0x20000e7c
 800d948:	20000ec4 	.word	0x20000ec4
 800d94c:	200009ec 	.word	0x200009ec
 800d950:	200009e8 	.word	0x200009e8
 800d954:	20000ed0 	.word	0x20000ed0
 800d958:	20000ecc 	.word	0x20000ecc
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d966:	4b05      	ldr	r3, [pc, #20]	@ (800d97c <xTaskGetTickCount+0x1c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d96c:	687b      	ldr	r3, [r7, #4]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20000ec0 	.word	0x20000ec0

0800d980 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d986:	f002 fd57 	bl	8010438 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d98a:	2300      	movs	r3, #0
 800d98c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d98e:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <xTaskGetTickCountFromISR+0x20>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d994:	683b      	ldr	r3, [r7, #0]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	20000ec0 	.word	0x20000ec0

0800d9a4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b086      	sub	sp, #24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	2338      	movs	r3, #56	@ 0x38
 800d9b6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800d9b8:	f7ff ff26 	bl	800d808 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d9bc:	4b3a      	ldr	r3, [pc, #232]	@ (800daa8 <uxTaskGetSystemState+0x104>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d368      	bcc.n	800da98 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	4413      	add	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	1898      	adds	r0, r3, r2
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4a31      	ldr	r2, [pc, #196]	@ (800daac <uxTaskGetSystemState+0x108>)
 800d9e8:	4413      	add	r3, r2
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f000 fc49 	bl	800e284 <prvListTasksWithinSingleList>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e2      	bne.n	800d9c6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4613      	mov	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	461a      	mov	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	4413      	add	r3, r2
 800da10:	4a27      	ldr	r2, [pc, #156]	@ (800dab0 <uxTaskGetSystemState+0x10c>)
 800da12:	6811      	ldr	r1, [r2, #0]
 800da14:	2202      	movs	r2, #2
 800da16:	4618      	mov	r0, r3
 800da18:	f000 fc34 	bl	800e284 <prvListTasksWithinSingleList>
 800da1c:	4602      	mov	r2, r0
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	4413      	add	r3, r2
 800da22:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	4613      	mov	r3, r2
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	4413      	add	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	461a      	mov	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	4413      	add	r3, r2
 800da34:	4a1f      	ldr	r2, [pc, #124]	@ (800dab4 <uxTaskGetSystemState+0x110>)
 800da36:	6811      	ldr	r1, [r2, #0]
 800da38:	2202      	movs	r2, #2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 fc22 	bl	800e284 <prvListTasksWithinSingleList>
 800da40:	4602      	mov	r2, r0
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	4413      	add	r3, r2
 800da46:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	4613      	mov	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	4413      	add	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	461a      	mov	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4413      	add	r3, r2
 800da58:	2204      	movs	r2, #4
 800da5a:	4917      	ldr	r1, [pc, #92]	@ (800dab8 <uxTaskGetSystemState+0x114>)
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 fc11 	bl	800e284 <prvListTasksWithinSingleList>
 800da62:	4602      	mov	r2, r0
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	4413      	add	r3, r2
 800da68:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	4613      	mov	r3, r2
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	4413      	add	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	461a      	mov	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	4413      	add	r3, r2
 800da7a:	2203      	movs	r2, #3
 800da7c:	490f      	ldr	r1, [pc, #60]	@ (800dabc <uxTaskGetSystemState+0x118>)
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fc00 	bl	800e284 <prvListTasksWithinSingleList>
 800da84:	4602      	mov	r2, r0
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	4413      	add	r3, r2
 800da8a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800da98:	f7ff fec4 	bl	800d824 <xTaskResumeAll>

		return uxTask;
 800da9c:	697b      	ldr	r3, [r7, #20]
	}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20000ebc 	.word	0x20000ebc
 800daac:	200009ec 	.word	0x200009ec
 800dab0:	20000e74 	.word	0x20000e74
 800dab4:	20000e78 	.word	0x20000e78
 800dab8:	20000e90 	.word	0x20000e90
 800dabc:	20000ea8 	.word	0x20000ea8

0800dac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daca:	4b4f      	ldr	r3, [pc, #316]	@ (800dc08 <xTaskIncrementTick+0x148>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f040 8090 	bne.w	800dbf4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dad4:	4b4d      	ldr	r3, [pc, #308]	@ (800dc0c <xTaskIncrementTick+0x14c>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dadc:	4a4b      	ldr	r2, [pc, #300]	@ (800dc0c <xTaskIncrementTick+0x14c>)
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d121      	bne.n	800db2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dae8:	4b49      	ldr	r3, [pc, #292]	@ (800dc10 <xTaskIncrementTick+0x150>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00b      	beq.n	800db0a <xTaskIncrementTick+0x4a>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	603b      	str	r3, [r7, #0]
}
 800db04:	bf00      	nop
 800db06:	bf00      	nop
 800db08:	e7fd      	b.n	800db06 <xTaskIncrementTick+0x46>
 800db0a:	4b41      	ldr	r3, [pc, #260]	@ (800dc10 <xTaskIncrementTick+0x150>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	4b40      	ldr	r3, [pc, #256]	@ (800dc14 <xTaskIncrementTick+0x154>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a3e      	ldr	r2, [pc, #248]	@ (800dc10 <xTaskIncrementTick+0x150>)
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	4a3e      	ldr	r2, [pc, #248]	@ (800dc14 <xTaskIncrementTick+0x154>)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	4b3e      	ldr	r3, [pc, #248]	@ (800dc18 <xTaskIncrementTick+0x158>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	4a3c      	ldr	r2, [pc, #240]	@ (800dc18 <xTaskIncrementTick+0x158>)
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	f000 fc4a 	bl	800e3c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db2c:	4b3b      	ldr	r3, [pc, #236]	@ (800dc1c <xTaskIncrementTick+0x15c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	429a      	cmp	r2, r3
 800db34:	d349      	bcc.n	800dbca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db36:	4b36      	ldr	r3, [pc, #216]	@ (800dc10 <xTaskIncrementTick+0x150>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d104      	bne.n	800db4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db40:	4b36      	ldr	r3, [pc, #216]	@ (800dc1c <xTaskIncrementTick+0x15c>)
 800db42:	f04f 32ff 	mov.w	r2, #4294967295
 800db46:	601a      	str	r2, [r3, #0]
					break;
 800db48:	e03f      	b.n	800dbca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4a:	4b31      	ldr	r3, [pc, #196]	@ (800dc10 <xTaskIncrementTick+0x150>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d203      	bcs.n	800db6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db62:	4a2e      	ldr	r2, [pc, #184]	@ (800dc1c <xTaskIncrementTick+0x15c>)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db68:	e02f      	b.n	800dbca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe f9de 	bl	800bf30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	3318      	adds	r3, #24
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe f9d5 	bl	800bf30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db8a:	4b25      	ldr	r3, [pc, #148]	@ (800dc20 <xTaskIncrementTick+0x160>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d903      	bls.n	800db9a <xTaskIncrementTick+0xda>
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db96:	4a22      	ldr	r2, [pc, #136]	@ (800dc20 <xTaskIncrementTick+0x160>)
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4a1f      	ldr	r2, [pc, #124]	@ (800dc24 <xTaskIncrementTick+0x164>)
 800dba8:	441a      	add	r2, r3
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	3304      	adds	r3, #4
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f7fe f960 	bl	800be76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbba:	4b1b      	ldr	r3, [pc, #108]	@ (800dc28 <xTaskIncrementTick+0x168>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d3b8      	bcc.n	800db36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbc8:	e7b5      	b.n	800db36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbca:	4b17      	ldr	r3, [pc, #92]	@ (800dc28 <xTaskIncrementTick+0x168>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd0:	4914      	ldr	r1, [pc, #80]	@ (800dc24 <xTaskIncrementTick+0x164>)
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	440b      	add	r3, r1
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d901      	bls.n	800dbe6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dbe6:	4b11      	ldr	r3, [pc, #68]	@ (800dc2c <xTaskIncrementTick+0x16c>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d007      	beq.n	800dbfe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	617b      	str	r3, [r7, #20]
 800dbf2:	e004      	b.n	800dbfe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	@ (800dc30 <xTaskIncrementTick+0x170>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	4a0d      	ldr	r2, [pc, #52]	@ (800dc30 <xTaskIncrementTick+0x170>)
 800dbfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dbfe:	697b      	ldr	r3, [r7, #20]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20000ee4 	.word	0x20000ee4
 800dc0c:	20000ec0 	.word	0x20000ec0
 800dc10:	20000e74 	.word	0x20000e74
 800dc14:	20000e78 	.word	0x20000e78
 800dc18:	20000ed4 	.word	0x20000ed4
 800dc1c:	20000edc 	.word	0x20000edc
 800dc20:	20000ec4 	.word	0x20000ec4
 800dc24:	200009ec 	.word	0x200009ec
 800dc28:	200009e8 	.word	0x200009e8
 800dc2c:	20000ed0 	.word	0x20000ed0
 800dc30:	20000ecc 	.word	0x20000ecc

0800dc34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc3a:	4b28      	ldr	r3, [pc, #160]	@ (800dcdc <vTaskSwitchContext+0xa8>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc42:	4b27      	ldr	r3, [pc, #156]	@ (800dce0 <vTaskSwitchContext+0xac>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc48:	e042      	b.n	800dcd0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dc4a:	4b25      	ldr	r3, [pc, #148]	@ (800dce0 <vTaskSwitchContext+0xac>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc50:	4b24      	ldr	r3, [pc, #144]	@ (800dce4 <vTaskSwitchContext+0xb0>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60fb      	str	r3, [r7, #12]
 800dc56:	e011      	b.n	800dc7c <vTaskSwitchContext+0x48>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10b      	bne.n	800dc76 <vTaskSwitchContext+0x42>
	__asm volatile
 800dc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	607b      	str	r3, [r7, #4]
}
 800dc70:	bf00      	nop
 800dc72:	bf00      	nop
 800dc74:	e7fd      	b.n	800dc72 <vTaskSwitchContext+0x3e>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	60fb      	str	r3, [r7, #12]
 800dc7c:	491a      	ldr	r1, [pc, #104]	@ (800dce8 <vTaskSwitchContext+0xb4>)
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	4613      	mov	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	440b      	add	r3, r1
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0e3      	beq.n	800dc58 <vTaskSwitchContext+0x24>
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4a13      	ldr	r2, [pc, #76]	@ (800dce8 <vTaskSwitchContext+0xb4>)
 800dc9c:	4413      	add	r3, r2
 800dc9e:	60bb      	str	r3, [r7, #8]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	605a      	str	r2, [r3, #4]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	685a      	ldr	r2, [r3, #4]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d104      	bne.n	800dcc0 <vTaskSwitchContext+0x8c>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	605a      	str	r2, [r3, #4]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	4a09      	ldr	r2, [pc, #36]	@ (800dcec <vTaskSwitchContext+0xb8>)
 800dcc8:	6013      	str	r3, [r2, #0]
 800dcca:	4a06      	ldr	r2, [pc, #24]	@ (800dce4 <vTaskSwitchContext+0xb0>)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6013      	str	r3, [r2, #0]
}
 800dcd0:	bf00      	nop
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	20000ee4 	.word	0x20000ee4
 800dce0:	20000ed0 	.word	0x20000ed0
 800dce4:	20000ec4 	.word	0x20000ec4
 800dce8:	200009ec 	.word	0x200009ec
 800dcec:	200009e8 	.word	0x200009e8

0800dcf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	60fb      	str	r3, [r7, #12]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd18:	4b07      	ldr	r3, [pc, #28]	@ (800dd38 <vTaskPlaceOnEventList+0x48>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7fe f8cc 	bl	800bebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd26:	2101      	movs	r1, #1
 800dd28:	6838      	ldr	r0, [r7, #0]
 800dd2a:	f000 fddb 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
}
 800dd2e:	bf00      	nop
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	200009e8 	.word	0x200009e8

0800dd3c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10b      	bne.n	800dd66 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	617b      	str	r3, [r7, #20]
}
 800dd60:	bf00      	nop
 800dd62:	bf00      	nop
 800dd64:	e7fd      	b.n	800dd62 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800dd66:	4b12      	ldr	r3, [pc, #72]	@ (800ddb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10b      	bne.n	800dd86 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	613b      	str	r3, [r7, #16]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800dd86:	4b0b      	ldr	r3, [pc, #44]	@ (800ddb4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dd90:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd92:	4b08      	ldr	r3, [pc, #32]	@ (800ddb4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3318      	adds	r3, #24
 800dd98:	4619      	mov	r1, r3
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7fe f86b 	bl	800be76 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dda0:	2101      	movs	r1, #1
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fd9e 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
}
 800dda8:	bf00      	nop
 800ddaa:	3718      	adds	r7, #24
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	20000ee4 	.word	0x20000ee4
 800ddb4:	200009e8 	.word	0x200009e8

0800ddb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10b      	bne.n	800dde2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	617b      	str	r3, [r7, #20]
}
 800dddc:	bf00      	nop
 800ddde:	bf00      	nop
 800dde0:	e7fd      	b.n	800ddde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dde2:	4b0a      	ldr	r3, [pc, #40]	@ (800de0c <vTaskPlaceOnEventListRestricted+0x54>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3318      	adds	r3, #24
 800dde8:	4619      	mov	r1, r3
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7fe f843 	bl	800be76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ddf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	68b8      	ldr	r0, [r7, #8]
 800de00:	f000 fd70 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
	}
 800de04:	bf00      	nop
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	200009e8 	.word	0x200009e8

0800de10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10b      	bne.n	800de3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3318      	adds	r3, #24
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe f874 	bl	800bf30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de48:	4b1d      	ldr	r3, [pc, #116]	@ (800dec0 <xTaskRemoveFromEventList+0xb0>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d11d      	bne.n	800de8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	3304      	adds	r3, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe f86b 	bl	800bf30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de5e:	4b19      	ldr	r3, [pc, #100]	@ (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	429a      	cmp	r2, r3
 800de64:	d903      	bls.n	800de6e <xTaskRemoveFromEventList+0x5e>
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6a:	4a16      	ldr	r2, [pc, #88]	@ (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de72:	4613      	mov	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4413      	add	r3, r2
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4a13      	ldr	r2, [pc, #76]	@ (800dec8 <xTaskRemoveFromEventList+0xb8>)
 800de7c:	441a      	add	r2, r3
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	3304      	adds	r3, #4
 800de82:	4619      	mov	r1, r3
 800de84:	4610      	mov	r0, r2
 800de86:	f7fd fff6 	bl	800be76 <vListInsertEnd>
 800de8a:	e005      	b.n	800de98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	3318      	adds	r3, #24
 800de90:	4619      	mov	r1, r3
 800de92:	480e      	ldr	r0, [pc, #56]	@ (800decc <xTaskRemoveFromEventList+0xbc>)
 800de94:	f7fd ffef 	bl	800be76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ded0 <xTaskRemoveFromEventList+0xc0>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d905      	bls.n	800deb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dea6:	2301      	movs	r3, #1
 800dea8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800deaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ded4 <xTaskRemoveFromEventList+0xc4>)
 800deac:	2201      	movs	r2, #1
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	e001      	b.n	800deb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800deb2:	2300      	movs	r3, #0
 800deb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deb6:	697b      	ldr	r3, [r7, #20]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20000ee4 	.word	0x20000ee4
 800dec4:	20000ec4 	.word	0x20000ec4
 800dec8:	200009ec 	.word	0x200009ec
 800decc:	20000e7c 	.word	0x20000e7c
 800ded0:	200009e8 	.word	0x200009e8
 800ded4:	20000ed0 	.word	0x20000ed0

0800ded8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800dee2:	4b2a      	ldr	r3, [pc, #168]	@ (800df8c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10b      	bne.n	800df02 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	613b      	str	r3, [r7, #16]
}
 800defc:	bf00      	nop
 800defe:	bf00      	nop
 800df00:	e7fd      	b.n	800defe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10b      	bne.n	800df30 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800df18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	60fb      	str	r3, [r7, #12]
}
 800df2a:	bf00      	nop
 800df2c:	bf00      	nop
 800df2e:	e7fd      	b.n	800df2c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7fd fffd 	bl	800bf30 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	3304      	adds	r3, #4
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fd fff8 	bl	800bf30 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df44:	4b12      	ldr	r3, [pc, #72]	@ (800df90 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d903      	bls.n	800df54 <vTaskRemoveFromUnorderedEventList+0x7c>
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df50:	4a0f      	ldr	r2, [pc, #60]	@ (800df90 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4a0c      	ldr	r2, [pc, #48]	@ (800df94 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800df62:	441a      	add	r2, r3
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	3304      	adds	r3, #4
 800df68:	4619      	mov	r1, r3
 800df6a:	4610      	mov	r0, r2
 800df6c:	f7fd ff83 	bl	800be76 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df74:	4b08      	ldr	r3, [pc, #32]	@ (800df98 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d902      	bls.n	800df84 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800df7e:	4b07      	ldr	r3, [pc, #28]	@ (800df9c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800df80:	2201      	movs	r2, #1
 800df82:	601a      	str	r2, [r3, #0]
	}
}
 800df84:	bf00      	nop
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20000ee4 	.word	0x20000ee4
 800df90:	20000ec4 	.word	0x20000ec4
 800df94:	200009ec 	.word	0x200009ec
 800df98:	200009e8 	.word	0x200009e8
 800df9c:	20000ed0 	.word	0x20000ed0

0800dfa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dfa8:	4b06      	ldr	r3, [pc, #24]	@ (800dfc4 <vTaskInternalSetTimeOutState+0x24>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dfb0:	4b05      	ldr	r3, [pc, #20]	@ (800dfc8 <vTaskInternalSetTimeOutState+0x28>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	605a      	str	r2, [r3, #4]
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	20000ed4 	.word	0x20000ed4
 800dfc8:	20000ec0 	.word	0x20000ec0

0800dfcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10b      	bne.n	800dff4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	613b      	str	r3, [r7, #16]
}
 800dfee:	bf00      	nop
 800dff0:	bf00      	nop
 800dff2:	e7fd      	b.n	800dff0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10b      	bne.n	800e012 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	60fb      	str	r3, [r7, #12]
}
 800e00c:	bf00      	nop
 800e00e:	bf00      	nop
 800e010:	e7fd      	b.n	800e00e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e012:	f002 f931 	bl	8010278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e016:	4b1d      	ldr	r3, [pc, #116]	@ (800e08c <xTaskCheckForTimeOut+0xc0>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	69ba      	ldr	r2, [r7, #24]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02e:	d102      	bne.n	800e036 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	61fb      	str	r3, [r7, #28]
 800e034:	e023      	b.n	800e07e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	4b15      	ldr	r3, [pc, #84]	@ (800e090 <xTaskCheckForTimeOut+0xc4>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d007      	beq.n	800e052 <xTaskCheckForTimeOut+0x86>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	69ba      	ldr	r2, [r7, #24]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d302      	bcc.n	800e052 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	e015      	b.n	800e07e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d20b      	bcs.n	800e074 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	1ad2      	subs	r2, r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff ff99 	bl	800dfa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e06e:	2300      	movs	r3, #0
 800e070:	61fb      	str	r3, [r7, #28]
 800e072:	e004      	b.n	800e07e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2200      	movs	r2, #0
 800e078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e07a:	2301      	movs	r3, #1
 800e07c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e07e:	f002 f92d 	bl	80102dc <vPortExitCritical>

	return xReturn;
 800e082:	69fb      	ldr	r3, [r7, #28]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20000ec0 	.word	0x20000ec0
 800e090:	20000ed4 	.word	0x20000ed4

0800e094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e098:	4b03      	ldr	r3, [pc, #12]	@ (800e0a8 <vTaskMissedYield+0x14>)
 800e09a:	2201      	movs	r2, #1
 800e09c:	601a      	str	r2, [r3, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	20000ed0 	.word	0x20000ed0

0800e0ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e0b4:	f000 f852 	bl	800e15c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0b8:	4b06      	ldr	r3, [pc, #24]	@ (800e0d4 <prvIdleTask+0x28>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d9f9      	bls.n	800e0b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0c0:	4b05      	ldr	r3, [pc, #20]	@ (800e0d8 <prvIdleTask+0x2c>)
 800e0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0d0:	e7f0      	b.n	800e0b4 <prvIdleTask+0x8>
 800e0d2:	bf00      	nop
 800e0d4:	200009ec 	.word	0x200009ec
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	e00c      	b.n	800e102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4a12      	ldr	r2, [pc, #72]	@ (800e13c <prvInitialiseTaskLists+0x60>)
 800e0f4:	4413      	add	r3, r2
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fd fe90 	bl	800be1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3301      	adds	r3, #1
 800e100:	607b      	str	r3, [r7, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b37      	cmp	r3, #55	@ 0x37
 800e106:	d9ef      	bls.n	800e0e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e108:	480d      	ldr	r0, [pc, #52]	@ (800e140 <prvInitialiseTaskLists+0x64>)
 800e10a:	f7fd fe87 	bl	800be1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e10e:	480d      	ldr	r0, [pc, #52]	@ (800e144 <prvInitialiseTaskLists+0x68>)
 800e110:	f7fd fe84 	bl	800be1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e114:	480c      	ldr	r0, [pc, #48]	@ (800e148 <prvInitialiseTaskLists+0x6c>)
 800e116:	f7fd fe81 	bl	800be1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e11a:	480c      	ldr	r0, [pc, #48]	@ (800e14c <prvInitialiseTaskLists+0x70>)
 800e11c:	f7fd fe7e 	bl	800be1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e120:	480b      	ldr	r0, [pc, #44]	@ (800e150 <prvInitialiseTaskLists+0x74>)
 800e122:	f7fd fe7b 	bl	800be1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e126:	4b0b      	ldr	r3, [pc, #44]	@ (800e154 <prvInitialiseTaskLists+0x78>)
 800e128:	4a05      	ldr	r2, [pc, #20]	@ (800e140 <prvInitialiseTaskLists+0x64>)
 800e12a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e12c:	4b0a      	ldr	r3, [pc, #40]	@ (800e158 <prvInitialiseTaskLists+0x7c>)
 800e12e:	4a05      	ldr	r2, [pc, #20]	@ (800e144 <prvInitialiseTaskLists+0x68>)
 800e130:	601a      	str	r2, [r3, #0]
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	200009ec 	.word	0x200009ec
 800e140:	20000e4c 	.word	0x20000e4c
 800e144:	20000e60 	.word	0x20000e60
 800e148:	20000e7c 	.word	0x20000e7c
 800e14c:	20000e90 	.word	0x20000e90
 800e150:	20000ea8 	.word	0x20000ea8
 800e154:	20000e74 	.word	0x20000e74
 800e158:	20000e78 	.word	0x20000e78

0800e15c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e162:	e019      	b.n	800e198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e164:	f002 f888 	bl	8010278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e168:	4b10      	ldr	r3, [pc, #64]	@ (800e1ac <prvCheckTasksWaitingTermination+0x50>)
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3304      	adds	r3, #4
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd fedb 	bl	800bf30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e17a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b0 <prvCheckTasksWaitingTermination+0x54>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	3b01      	subs	r3, #1
 800e180:	4a0b      	ldr	r2, [pc, #44]	@ (800e1b0 <prvCheckTasksWaitingTermination+0x54>)
 800e182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e184:	4b0b      	ldr	r3, [pc, #44]	@ (800e1b4 <prvCheckTasksWaitingTermination+0x58>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3b01      	subs	r3, #1
 800e18a:	4a0a      	ldr	r2, [pc, #40]	@ (800e1b4 <prvCheckTasksWaitingTermination+0x58>)
 800e18c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e18e:	f002 f8a5 	bl	80102dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f8e4 	bl	800e360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e198:	4b06      	ldr	r3, [pc, #24]	@ (800e1b4 <prvCheckTasksWaitingTermination+0x58>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e1      	bne.n	800e164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	20000e90 	.word	0x20000e90
 800e1b0:	20000ebc 	.word	0x20000ebc
 800e1b4:	20000ea4 	.word	0x20000ea4

0800e1b8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <vTaskGetInfo+0x1a>
 800e1cc:	4b2c      	ldr	r3, [pc, #176]	@ (800e280 <vTaskGetInfo+0xc8>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	e000      	b.n	800e1d4 <vTaskGetInfo+0x1c>
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	2200      	movs	r2, #0
 800e20a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e20c:	78fb      	ldrb	r3, [r7, #3]
 800e20e:	2b05      	cmp	r3, #5
 800e210:	d01a      	beq.n	800e248 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800e212:	4b1b      	ldr	r3, [pc, #108]	@ (800e280 <vTaskGetInfo+0xc8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d103      	bne.n	800e224 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2200      	movs	r2, #0
 800e220:	731a      	strb	r2, [r3, #12]
 800e222:	e018      	b.n	800e256 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	78fa      	ldrb	r2, [r7, #3]
 800e228:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e22a:	78fb      	ldrb	r3, [r7, #3]
 800e22c:	2b03      	cmp	r3, #3
 800e22e:	d112      	bne.n	800e256 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800e230:	f7ff faea 	bl	800d808 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	2202      	movs	r2, #2
 800e240:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e242:	f7ff faef 	bl	800d824 <xTaskResumeAll>
 800e246:	e006      	b.n	800e256 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e248:	6978      	ldr	r0, [r7, #20]
 800e24a:	f7ff fa0d 	bl	800d668 <eTaskGetState>
 800e24e:	4603      	mov	r3, r0
 800e250:	461a      	mov	r2, r3
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d009      	beq.n	800e270 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f861 	bl	800e328 <prvTaskCheckFreeStackSpace>
 800e266:	4603      	mov	r3, r0
 800e268:	461a      	mov	r2, r3
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e26e:	e002      	b.n	800e276 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2200      	movs	r2, #0
 800e274:	841a      	strh	r2, [r3, #32]
	}
 800e276:	bf00      	nop
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	200009e8 	.word	0x200009e8

0800e284 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b08a      	sub	sp, #40	@ 0x28
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	4613      	mov	r3, r2
 800e290:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d03f      	beq.n	800e31e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	623b      	str	r3, [r7, #32]
 800e2a2:	6a3b      	ldr	r3, [r7, #32]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	605a      	str	r2, [r3, #4]
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d104      	bne.n	800e2c2 <prvListTasksWithinSingleList+0x3e>
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	605a      	str	r2, [r3, #4]
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	61bb      	str	r3, [r7, #24]
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	605a      	str	r2, [r3, #4]
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	685a      	ldr	r2, [r3, #4]
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	3308      	adds	r3, #8
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d104      	bne.n	800e2ee <prvListTasksWithinSingleList+0x6a>
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	605a      	str	r2, [r3, #4]
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800e2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	4413      	add	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	461a      	mov	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	1899      	adds	r1, r3, r2
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	2201      	movs	r2, #1
 800e30a:	6978      	ldr	r0, [r7, #20]
 800e30c:	f7ff ff54 	bl	800e1b8 <vTaskGetInfo>
				uxTask++;
 800e310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e312:	3301      	adds	r3, #1
 800e314:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d1d5      	bne.n	800e2ca <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e320:	4618      	mov	r0, r3
 800e322:	3728      	adds	r7, #40	@ 0x28
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e334:	e005      	b.n	800e342 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3301      	adds	r3, #1
 800e33a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2ba5      	cmp	r3, #165	@ 0xa5
 800e348:	d0f5      	beq.n	800e336 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	089b      	lsrs	r3, r3, #2
 800e34e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	b29b      	uxth	r3, r3
	}
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d108      	bne.n	800e384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e376:	4618      	mov	r0, r3
 800e378:	f001 fd2a 	bl	800fdd0 <vPortFree>
				vPortFree( pxTCB );
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f001 fd27 	bl	800fdd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e382:	e019      	b.n	800e3b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d103      	bne.n	800e396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f001 fd1e 	bl	800fdd0 <vPortFree>
	}
 800e394:	e010      	b.n	800e3b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d00b      	beq.n	800e3b8 <prvDeleteTCB+0x58>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	60fb      	str	r3, [r7, #12]
}
 800e3b2:	bf00      	nop
 800e3b4:	bf00      	nop
 800e3b6:	e7fd      	b.n	800e3b4 <prvDeleteTCB+0x54>
	}
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f8 <prvResetNextTaskUnblockTime+0x38>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e3fc <prvResetNextTaskUnblockTime+0x3c>)
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3d8:	e008      	b.n	800e3ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3da:	4b07      	ldr	r3, [pc, #28]	@ (800e3f8 <prvResetNextTaskUnblockTime+0x38>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	4a04      	ldr	r2, [pc, #16]	@ (800e3fc <prvResetNextTaskUnblockTime+0x3c>)
 800e3ea:	6013      	str	r3, [r2, #0]
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	20000e74 	.word	0x20000e74
 800e3fc:	20000edc 	.word	0x20000edc

0800e400 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e406:	4b05      	ldr	r3, [pc, #20]	@ (800e41c <xTaskGetCurrentTaskHandle+0x1c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e40c:	687b      	ldr	r3, [r7, #4]
	}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	200009e8 	.word	0x200009e8

0800e420 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e426:	4b0b      	ldr	r3, [pc, #44]	@ (800e454 <xTaskGetSchedulerState+0x34>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e42e:	2301      	movs	r3, #1
 800e430:	607b      	str	r3, [r7, #4]
 800e432:	e008      	b.n	800e446 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e434:	4b08      	ldr	r3, [pc, #32]	@ (800e458 <xTaskGetSchedulerState+0x38>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e43c:	2302      	movs	r3, #2
 800e43e:	607b      	str	r3, [r7, #4]
 800e440:	e001      	b.n	800e446 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e442:	2300      	movs	r3, #0
 800e444:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e446:	687b      	ldr	r3, [r7, #4]
	}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	20000ec8 	.word	0x20000ec8
 800e458:	20000ee4 	.word	0x20000ee4

0800e45c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d051      	beq.n	800e516 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e476:	4b2a      	ldr	r3, [pc, #168]	@ (800e520 <xTaskPriorityInherit+0xc4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d241      	bcs.n	800e504 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	2b00      	cmp	r3, #0
 800e486:	db06      	blt.n	800e496 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e488:	4b25      	ldr	r3, [pc, #148]	@ (800e520 <xTaskPriorityInherit+0xc4>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	6959      	ldr	r1, [r3, #20]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e524 <xTaskPriorityInherit+0xc8>)
 800e4a8:	4413      	add	r3, r2
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	d122      	bne.n	800e4f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fd3c 	bl	800bf30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4b8:	4b19      	ldr	r3, [pc, #100]	@ (800e520 <xTaskPriorityInherit+0xc4>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c6:	4b18      	ldr	r3, [pc, #96]	@ (800e528 <xTaskPriorityInherit+0xcc>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d903      	bls.n	800e4d6 <xTaskPriorityInherit+0x7a>
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d2:	4a15      	ldr	r2, [pc, #84]	@ (800e528 <xTaskPriorityInherit+0xcc>)
 800e4d4:	6013      	str	r3, [r2, #0]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4da:	4613      	mov	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4a10      	ldr	r2, [pc, #64]	@ (800e524 <xTaskPriorityInherit+0xc8>)
 800e4e4:	441a      	add	r2, r3
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fd fcc2 	bl	800be76 <vListInsertEnd>
 800e4f2:	e004      	b.n	800e4fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e520 <xTaskPriorityInherit+0xc4>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	e008      	b.n	800e516 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e508:	4b05      	ldr	r3, [pc, #20]	@ (800e520 <xTaskPriorityInherit+0xc4>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50e:	429a      	cmp	r2, r3
 800e510:	d201      	bcs.n	800e516 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e512:	2301      	movs	r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e516:	68fb      	ldr	r3, [r7, #12]
	}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	200009e8 	.word	0x200009e8
 800e524:	200009ec 	.word	0x200009ec
 800e528:	20000ec4 	.word	0x20000ec4

0800e52c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e538:	2300      	movs	r3, #0
 800e53a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d058      	beq.n	800e5f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e542:	4b2f      	ldr	r3, [pc, #188]	@ (800e600 <xTaskPriorityDisinherit+0xd4>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d00b      	beq.n	800e564 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	60fb      	str	r3, [r7, #12]
}
 800e55e:	bf00      	nop
 800e560:	bf00      	nop
 800e562:	e7fd      	b.n	800e560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10b      	bne.n	800e584 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e570:	f383 8811 	msr	BASEPRI, r3
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	60bb      	str	r3, [r7, #8]
}
 800e57e:	bf00      	nop
 800e580:	bf00      	nop
 800e582:	e7fd      	b.n	800e580 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e588:	1e5a      	subs	r2, r3, #1
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e596:	429a      	cmp	r2, r3
 800e598:	d02c      	beq.n	800e5f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d128      	bne.n	800e5f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fd fcc2 	bl	800bf30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e604 <xTaskPriorityDisinherit+0xd8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d903      	bls.n	800e5d4 <xTaskPriorityDisinherit+0xa8>
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e604 <xTaskPriorityDisinherit+0xd8>)
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5d8:	4613      	mov	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4a09      	ldr	r2, [pc, #36]	@ (800e608 <xTaskPriorityDisinherit+0xdc>)
 800e5e2:	441a      	add	r2, r3
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7fd fc43 	bl	800be76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5f4:	697b      	ldr	r3, [r7, #20]
	}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	200009e8 	.word	0x200009e8
 800e604:	20000ec4 	.word	0x20000ec4
 800e608:	200009ec 	.word	0x200009ec

0800e60c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d06c      	beq.n	800e6fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10b      	bne.n	800e644 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60fb      	str	r3, [r7, #12]
}
 800e63e:	bf00      	nop
 800e640:	bf00      	nop
 800e642:	e7fd      	b.n	800e640 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d902      	bls.n	800e654 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	61fb      	str	r3, [r7, #28]
 800e652:	e002      	b.n	800e65a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e658:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e65e:	69fa      	ldr	r2, [r7, #28]
 800e660:	429a      	cmp	r2, r3
 800e662:	d04c      	beq.n	800e6fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d147      	bne.n	800e6fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e66e:	4b26      	ldr	r3, [pc, #152]	@ (800e708 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	429a      	cmp	r2, r3
 800e676:	d10b      	bne.n	800e690 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67c:	f383 8811 	msr	BASEPRI, r3
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	60bb      	str	r3, [r7, #8]
}
 800e68a:	bf00      	nop
 800e68c:	bf00      	nop
 800e68e:	e7fd      	b.n	800e68c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e694:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	69fa      	ldr	r2, [r7, #28]
 800e69a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	db04      	blt.n	800e6ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	6959      	ldr	r1, [r3, #20]
 800e6b2:	693a      	ldr	r2, [r7, #16]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	4413      	add	r3, r2
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4a13      	ldr	r2, [pc, #76]	@ (800e70c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6be:	4413      	add	r3, r2
 800e6c0:	4299      	cmp	r1, r3
 800e6c2:	d11c      	bne.n	800e6fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fd fc31 	bl	800bf30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e710 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d903      	bls.n	800e6e2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6de:	4a0c      	ldr	r2, [pc, #48]	@ (800e710 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4a07      	ldr	r2, [pc, #28]	@ (800e70c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6f0:	441a      	add	r2, r3
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	f7fd fbbc 	bl	800be76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6fe:	bf00      	nop
 800e700:	3720      	adds	r7, #32
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	200009e8 	.word	0x200009e8
 800e70c:	200009ec 	.word	0x200009ec
 800e710:	20000ec4 	.word	0x20000ec4

0800e714 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f014 fb38 	bl	8022d96 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7f1 fdfc 	bl	8000324 <strlen>
 800e72c:	60f8      	str	r0, [r7, #12]
 800e72e:	e007      	b.n	800e740 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4413      	add	r3, r2
 800e736:	2220      	movs	r2, #32
 800e738:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3301      	adds	r3, #1
 800e73e:	60fb      	str	r3, [r7, #12]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b0e      	cmp	r3, #14
 800e744:	d9f4      	bls.n	800e730 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	4413      	add	r3, r2
 800e74c:	2200      	movs	r2, #0
 800e74e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	4413      	add	r3, r2
	}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b089      	sub	sp, #36	@ 0x24
 800e764:	af02      	add	r7, sp, #8
 800e766:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e76e:	4b45      	ldr	r3, [pc, #276]	@ (800e884 <vTaskList+0x124>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800e774:	4b43      	ldr	r3, [pc, #268]	@ (800e884 <vTaskList+0x124>)
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	4413      	add	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4618      	mov	r0, r3
 800e782:	f001 fa57 	bl	800fc34 <pvPortMalloc>
 800e786:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d076      	beq.n	800e87c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e78e:	2200      	movs	r2, #0
 800e790:	68f9      	ldr	r1, [r7, #12]
 800e792:	68b8      	ldr	r0, [r7, #8]
 800e794:	f7ff f906 	bl	800d9a4 <uxTaskGetSystemState>
 800e798:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e79a:	2300      	movs	r3, #0
 800e79c:	617b      	str	r3, [r7, #20]
 800e79e:	e066      	b.n	800e86e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	4413      	add	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	7b1b      	ldrb	r3, [r3, #12]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d81b      	bhi.n	800e7ee <vTaskList+0x8e>
 800e7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7bc <vTaskList+0x5c>)
 800e7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7bc:	0800e7d1 	.word	0x0800e7d1
 800e7c0:	0800e7d7 	.word	0x0800e7d7
 800e7c4:	0800e7dd 	.word	0x0800e7dd
 800e7c8:	0800e7e3 	.word	0x0800e7e3
 800e7cc:	0800e7e9 	.word	0x0800e7e9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800e7d0:	2358      	movs	r3, #88	@ 0x58
 800e7d2:	74fb      	strb	r3, [r7, #19]
										break;
 800e7d4:	e00e      	b.n	800e7f4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800e7d6:	2352      	movs	r3, #82	@ 0x52
 800e7d8:	74fb      	strb	r3, [r7, #19]
										break;
 800e7da:	e00b      	b.n	800e7f4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800e7dc:	2342      	movs	r3, #66	@ 0x42
 800e7de:	74fb      	strb	r3, [r7, #19]
										break;
 800e7e0:	e008      	b.n	800e7f4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e7e2:	2353      	movs	r3, #83	@ 0x53
 800e7e4:	74fb      	strb	r3, [r7, #19]
										break;
 800e7e6:	e005      	b.n	800e7f4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e7e8:	2344      	movs	r3, #68	@ 0x44
 800e7ea:	74fb      	strb	r3, [r7, #19]
										break;
 800e7ec:	e002      	b.n	800e7f4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	74fb      	strb	r3, [r7, #19]
										break;
 800e7f2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e7f4:	697a      	ldr	r2, [r7, #20]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	4413      	add	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	461a      	mov	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	4413      	add	r3, r2
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff ff83 	bl	800e714 <prvWriteNameToBuffer>
 800e80e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e810:	7cf9      	ldrb	r1, [r7, #19]
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	4613      	mov	r3, r2
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	4413      	add	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	461a      	mov	r2, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	4413      	add	r3, r2
 800e822:	6918      	ldr	r0, [r3, #16]
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	4613      	mov	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	461a      	mov	r2, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	4413      	add	r3, r2
 800e834:	8c1b      	ldrh	r3, [r3, #32]
 800e836:	461c      	mov	r4, r3
 800e838:	697a      	ldr	r2, [r7, #20]
 800e83a:	4613      	mov	r3, r2
 800e83c:	00db      	lsls	r3, r3, #3
 800e83e:	4413      	add	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	461a      	mov	r2, r3
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	4413      	add	r3, r2
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	9400      	str	r4, [sp, #0]
 800e84e:	4603      	mov	r3, r0
 800e850:	460a      	mov	r2, r1
 800e852:	490d      	ldr	r1, [pc, #52]	@ (800e888 <vTaskList+0x128>)
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f014 f8df 	bl	8022a18 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f1 fd62 	bl	8000324 <strlen>
 800e860:	4602      	mov	r2, r0
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4413      	add	r3, r2
 800e866:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	3301      	adds	r3, #1
 800e86c:	617b      	str	r3, [r7, #20]
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	429a      	cmp	r2, r3
 800e874:	d394      	bcc.n	800e7a0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e876:	68b8      	ldr	r0, [r7, #8]
 800e878:	f001 faaa 	bl	800fdd0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e87c:	bf00      	nop
 800e87e:	371c      	adds	r7, #28
 800e880:	46bd      	mov	sp, r7
 800e882:	bd90      	pop	{r4, r7, pc}
 800e884:	20000ebc 	.word	0x20000ebc
 800e888:	08023fd8 	.word	0x08023fd8

0800e88c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e892:	4b09      	ldr	r3, [pc, #36]	@ (800e8b8 <uxTaskResetEventItemValue+0x2c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e89a:	4b07      	ldr	r3, [pc, #28]	@ (800e8b8 <uxTaskResetEventItemValue+0x2c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8a0:	4b05      	ldr	r3, [pc, #20]	@ (800e8b8 <uxTaskResetEventItemValue+0x2c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e8a8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e8aa:	687b      	ldr	r3, [r7, #4]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	200009e8 	.word	0x200009e8

0800e8bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8bc:	b480      	push	{r7}
 800e8be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8c0:	4b07      	ldr	r3, [pc, #28]	@ (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8c8:	4b05      	ldr	r3, [pc, #20]	@ (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8ce:	3201      	adds	r2, #1
 800e8d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e8d2:	4b03      	ldr	r3, [pc, #12]	@ (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
	}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	200009e8 	.word	0x200009e8

0800e8e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8ee:	4b21      	ldr	r3, [pc, #132]	@ (800e974 <prvAddCurrentTaskToDelayedList+0x90>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8f4:	4b20      	ldr	r3, [pc, #128]	@ (800e978 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fd fb18 	bl	800bf30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e906:	d10a      	bne.n	800e91e <prvAddCurrentTaskToDelayedList+0x3a>
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e90e:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <prvAddCurrentTaskToDelayedList+0x94>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3304      	adds	r3, #4
 800e914:	4619      	mov	r1, r3
 800e916:	4819      	ldr	r0, [pc, #100]	@ (800e97c <prvAddCurrentTaskToDelayedList+0x98>)
 800e918:	f7fd faad 	bl	800be76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e91c:	e026      	b.n	800e96c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4413      	add	r3, r2
 800e924:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e926:	4b14      	ldr	r3, [pc, #80]	@ (800e978 <prvAddCurrentTaskToDelayedList+0x94>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	429a      	cmp	r2, r3
 800e934:	d209      	bcs.n	800e94a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e936:	4b12      	ldr	r3, [pc, #72]	@ (800e980 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b0f      	ldr	r3, [pc, #60]	@ (800e978 <prvAddCurrentTaskToDelayedList+0x94>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3304      	adds	r3, #4
 800e940:	4619      	mov	r1, r3
 800e942:	4610      	mov	r0, r2
 800e944:	f7fd fabb 	bl	800bebe <vListInsert>
}
 800e948:	e010      	b.n	800e96c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e94a:	4b0e      	ldr	r3, [pc, #56]	@ (800e984 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b0a      	ldr	r3, [pc, #40]	@ (800e978 <prvAddCurrentTaskToDelayedList+0x94>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3304      	adds	r3, #4
 800e954:	4619      	mov	r1, r3
 800e956:	4610      	mov	r0, r2
 800e958:	f7fd fab1 	bl	800bebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e95c:	4b0a      	ldr	r3, [pc, #40]	@ (800e988 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	429a      	cmp	r2, r3
 800e964:	d202      	bcs.n	800e96c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e966:	4a08      	ldr	r2, [pc, #32]	@ (800e988 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	6013      	str	r3, [r2, #0]
}
 800e96c:	bf00      	nop
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20000ec0 	.word	0x20000ec0
 800e978:	200009e8 	.word	0x200009e8
 800e97c:	20000ea8 	.word	0x20000ea8
 800e980:	20000e78 	.word	0x20000e78
 800e984:	20000e74 	.word	0x20000e74
 800e988:	20000edc 	.word	0x20000edc

0800e98c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08a      	sub	sp, #40	@ 0x28
 800e990:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e992:	2300      	movs	r3, #0
 800e994:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e996:	f000 fb71 	bl	800f07c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e99a:	4b1d      	ldr	r3, [pc, #116]	@ (800ea10 <xTimerCreateTimerTask+0x84>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d021      	beq.n	800e9e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9aa:	1d3a      	adds	r2, r7, #4
 800e9ac:	f107 0108 	add.w	r1, r7, #8
 800e9b0:	f107 030c 	add.w	r3, r7, #12
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f001 f923 	bl	800fc00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	9202      	str	r2, [sp, #8]
 800e9c2:	9301      	str	r3, [sp, #4]
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	460a      	mov	r2, r1
 800e9cc:	4911      	ldr	r1, [pc, #68]	@ (800ea14 <xTimerCreateTimerTask+0x88>)
 800e9ce:	4812      	ldr	r0, [pc, #72]	@ (800ea18 <xTimerCreateTimerTask+0x8c>)
 800e9d0:	f7fe fbfa 	bl	800d1c8 <xTaskCreateStatic>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	4a11      	ldr	r2, [pc, #68]	@ (800ea1c <xTimerCreateTimerTask+0x90>)
 800e9d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9da:	4b10      	ldr	r3, [pc, #64]	@ (800ea1c <xTimerCreateTimerTask+0x90>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10b      	bne.n	800ea04 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	613b      	str	r3, [r7, #16]
}
 800e9fe:	bf00      	nop
 800ea00:	bf00      	nop
 800ea02:	e7fd      	b.n	800ea00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea04:	697b      	ldr	r3, [r7, #20]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000f18 	.word	0x20000f18
 800ea14:	08023fe8 	.word	0x08023fe8
 800ea18:	0800ec15 	.word	0x0800ec15
 800ea1c:	20000f1c 	.word	0x20000f1c

0800ea20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
 800ea2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ea2e:	202c      	movs	r0, #44	@ 0x2c
 800ea30:	f001 f900 	bl	800fc34 <pvPortMalloc>
 800ea34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00d      	beq.n	800ea58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 f805 	bl	800ea62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ea58:	697b      	ldr	r3, [r7, #20]
	}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b086      	sub	sp, #24
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10b      	bne.n	800ea8e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	617b      	str	r3, [r7, #20]
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	e7fd      	b.n	800ea8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01e      	beq.n	800ead2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ea94:	f000 faf2 	bl	800f07c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaac:	6a3a      	ldr	r2, [r7, #32]
 800eaae:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800eab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab2:	3304      	adds	r3, #4
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fd f9d1 	bl	800be5c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eac6:	f043 0304 	orr.w	r3, r3, #4
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ead2:	bf00      	nop
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b08a      	sub	sp, #40	@ 0x28
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eaea:	2300      	movs	r3, #0
 800eaec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10b      	bne.n	800eb0c <xTimerGenericCommand+0x30>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	623b      	str	r3, [r7, #32]
}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	e7fd      	b.n	800eb08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb0c:	4b19      	ldr	r3, [pc, #100]	@ (800eb74 <xTimerGenericCommand+0x98>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d02a      	beq.n	800eb6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b05      	cmp	r3, #5
 800eb24:	dc18      	bgt.n	800eb58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb26:	f7ff fc7b 	bl	800e420 <xTaskGetSchedulerState>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	d109      	bne.n	800eb44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb30:	4b10      	ldr	r3, [pc, #64]	@ (800eb74 <xTimerGenericCommand+0x98>)
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	f107 0110 	add.w	r1, r7, #16
 800eb38:	2300      	movs	r3, #0
 800eb3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb3c:	f7fd fc8e 	bl	800c45c <xQueueGenericSend>
 800eb40:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb42:	e012      	b.n	800eb6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb44:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <xTimerGenericCommand+0x98>)
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	f107 0110 	add.w	r1, r7, #16
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f7fd fc84 	bl	800c45c <xQueueGenericSend>
 800eb54:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb56:	e008      	b.n	800eb6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb58:	4b06      	ldr	r3, [pc, #24]	@ (800eb74 <xTimerGenericCommand+0x98>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	f107 0110 	add.w	r1, r7, #16
 800eb60:	2300      	movs	r3, #0
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	f7fd fd7c 	bl	800c660 <xQueueGenericSendFromISR>
 800eb68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3728      	adds	r7, #40	@ 0x28
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20000f18 	.word	0x20000f18

0800eb78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb82:	4b23      	ldr	r3, [pc, #140]	@ (800ec10 <prvProcessExpiredTimer+0x98>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fd f9cd 	bl	800bf30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb9c:	f003 0304 	and.w	r3, r3, #4
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d023      	beq.n	800ebec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	699a      	ldr	r2, [r3, #24]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	18d1      	adds	r1, r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	6978      	ldr	r0, [r7, #20]
 800ebb2:	f000 f8d5 	bl	800ed60 <prvInsertTimerInActiveList>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d020      	beq.n	800ebfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	6978      	ldr	r0, [r7, #20]
 800ebc8:	f7ff ff88 	bl	800eadc <xTimerGenericCommand>
 800ebcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d114      	bne.n	800ebfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	60fb      	str	r3, [r7, #12]
}
 800ebe6:	bf00      	nop
 800ebe8:	bf00      	nop
 800ebea:	e7fd      	b.n	800ebe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebf2:	f023 0301 	bic.w	r3, r3, #1
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	4798      	blx	r3
}
 800ec06:	bf00      	nop
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000f10 	.word	0x20000f10

0800ec14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec1c:	f107 0308 	add.w	r3, r7, #8
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 f859 	bl	800ecd8 <prvGetNextExpireTime>
 800ec26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f000 f805 	bl	800ec3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec32:	f000 f8d7 	bl	800ede4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec36:	bf00      	nop
 800ec38:	e7f0      	b.n	800ec1c <prvTimerTask+0x8>
	...

0800ec3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec46:	f7fe fddf 	bl	800d808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f866 	bl	800ed20 <prvSampleTimeNow>
 800ec54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d130      	bne.n	800ecbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10a      	bne.n	800ec78 <prvProcessTimerOrBlockTask+0x3c>
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d806      	bhi.n	800ec78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec6a:	f7fe fddb 	bl	800d824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec6e:	68f9      	ldr	r1, [r7, #12]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff81 	bl	800eb78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec76:	e024      	b.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d008      	beq.n	800ec90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec7e:	4b13      	ldr	r3, [pc, #76]	@ (800eccc <prvProcessTimerOrBlockTask+0x90>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <prvProcessTimerOrBlockTask+0x50>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e000      	b.n	800ec8e <prvProcessTimerOrBlockTask+0x52>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec90:	4b0f      	ldr	r3, [pc, #60]	@ (800ecd0 <prvProcessTimerOrBlockTask+0x94>)
 800ec92:	6818      	ldr	r0, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	f7fe fa5f 	bl	800d160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eca2:	f7fe fdbf 	bl	800d824 <xTaskResumeAll>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10a      	bne.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ecac:	4b09      	ldr	r3, [pc, #36]	@ (800ecd4 <prvProcessTimerOrBlockTask+0x98>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
}
 800ecbc:	e001      	b.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecbe:	f7fe fdb1 	bl	800d824 <xTaskResumeAll>
}
 800ecc2:	bf00      	nop
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20000f14 	.word	0x20000f14
 800ecd0:	20000f18 	.word	0x20000f18
 800ecd4:	e000ed04 	.word	0xe000ed04

0800ecd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ece0:	4b0e      	ldr	r3, [pc, #56]	@ (800ed1c <prvGetNextExpireTime+0x44>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <prvGetNextExpireTime+0x16>
 800ecea:	2201      	movs	r2, #1
 800ecec:	e000      	b.n	800ecf0 <prvGetNextExpireTime+0x18>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d105      	bne.n	800ed08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecfc:	4b07      	ldr	r3, [pc, #28]	@ (800ed1c <prvGetNextExpireTime+0x44>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e001      	b.n	800ed0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	20000f10 	.word	0x20000f10

0800ed20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed28:	f7fe fe1a 	bl	800d960 <xTaskGetTickCount>
 800ed2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed5c <prvSampleTimeNow+0x3c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d205      	bcs.n	800ed44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed38:	f000 f93a 	bl	800efb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	e002      	b.n	800ed4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed4a:	4a04      	ldr	r2, [pc, #16]	@ (800ed5c <prvSampleTimeNow+0x3c>)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed50:	68fb      	ldr	r3, [r7, #12]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000f20 	.word	0x20000f20

0800ed60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d812      	bhi.n	800edac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	1ad2      	subs	r2, r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d302      	bcc.n	800ed9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed94:	2301      	movs	r3, #1
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	e01b      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed9a:	4b10      	ldr	r3, [pc, #64]	@ (800eddc <prvInsertTimerInActiveList+0x7c>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	3304      	adds	r3, #4
 800eda2:	4619      	mov	r1, r3
 800eda4:	4610      	mov	r0, r2
 800eda6:	f7fd f88a 	bl	800bebe <vListInsert>
 800edaa:	e012      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d206      	bcs.n	800edc2 <prvInsertTimerInActiveList+0x62>
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d302      	bcc.n	800edc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edbc:	2301      	movs	r3, #1
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	e007      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edc2:	4b07      	ldr	r3, [pc, #28]	@ (800ede0 <prvInsertTimerInActiveList+0x80>)
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3304      	adds	r3, #4
 800edca:	4619      	mov	r1, r3
 800edcc:	4610      	mov	r0, r2
 800edce:	f7fd f876 	bl	800bebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edd2:	697b      	ldr	r3, [r7, #20]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20000f14 	.word	0x20000f14
 800ede0:	20000f10 	.word	0x20000f10

0800ede4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08e      	sub	sp, #56	@ 0x38
 800ede8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edea:	e0ce      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	da19      	bge.n	800ee26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edf2:	1d3b      	adds	r3, r7, #4
 800edf4:	3304      	adds	r3, #4
 800edf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10b      	bne.n	800ee16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	61fb      	str	r3, [r7, #28]
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	e7fd      	b.n	800ee12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee1c:	6850      	ldr	r0, [r2, #4]
 800ee1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee20:	6892      	ldr	r2, [r2, #8]
 800ee22:	4611      	mov	r1, r2
 800ee24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f2c0 80ae 	blt.w	800ef8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee34:	695b      	ldr	r3, [r3, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d004      	beq.n	800ee44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fd f876 	bl	800bf30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee44:	463b      	mov	r3, r7
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7ff ff6a 	bl	800ed20 <prvSampleTimeNow>
 800ee4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b09      	cmp	r3, #9
 800ee52:	f200 8097 	bhi.w	800ef84 <prvProcessReceivedCommands+0x1a0>
 800ee56:	a201      	add	r2, pc, #4	@ (adr r2, 800ee5c <prvProcessReceivedCommands+0x78>)
 800ee58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee85 	.word	0x0800ee85
 800ee64:	0800ee85 	.word	0x0800ee85
 800ee68:	0800eefb 	.word	0x0800eefb
 800ee6c:	0800ef0f 	.word	0x0800ef0f
 800ee70:	0800ef5b 	.word	0x0800ef5b
 800ee74:	0800ee85 	.word	0x0800ee85
 800ee78:	0800ee85 	.word	0x0800ee85
 800ee7c:	0800eefb 	.word	0x0800eefb
 800ee80:	0800ef0f 	.word	0x0800ef0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee8a:	f043 0301 	orr.w	r3, r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	18d1      	adds	r1, r2, r3
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eea4:	f7ff ff5c 	bl	800ed60 <prvInsertTimerInActiveList>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d06c      	beq.n	800ef88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eeb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d061      	beq.n	800ef88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	441a      	add	r2, r3
 800eecc:	2300      	movs	r3, #0
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	2300      	movs	r3, #0
 800eed2:	2100      	movs	r1, #0
 800eed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eed6:	f7ff fe01 	bl	800eadc <xTimerGenericCommand>
 800eeda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d152      	bne.n	800ef88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	61bb      	str	r3, [r7, #24]
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	e7fd      	b.n	800eef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef00:	f023 0301 	bic.w	r3, r3, #1
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef0c:	e03d      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef14:	f043 0301 	orr.w	r3, r3, #1
 800ef18:	b2da      	uxtb	r2, r3
 800ef1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef28:	699b      	ldr	r3, [r3, #24]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10b      	bne.n	800ef46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	617b      	str	r3, [r7, #20]
}
 800ef40:	bf00      	nop
 800ef42:	bf00      	nop
 800ef44:	e7fd      	b.n	800ef42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef48:	699a      	ldr	r2, [r3, #24]
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4c:	18d1      	adds	r1, r2, r3
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef54:	f7ff ff04 	bl	800ed60 <prvInsertTimerInActiveList>
					break;
 800ef58:	e017      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef60:	f003 0302 	and.w	r3, r3, #2
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d103      	bne.n	800ef70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ef68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef6a:	f000 ff31 	bl	800fdd0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef6e:	e00c      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef76:	f023 0301 	bic.w	r3, r3, #1
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef82:	e002      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ef84:	bf00      	nop
 800ef86:	e000      	b.n	800ef8a <prvProcessReceivedCommands+0x1a6>
					break;
 800ef88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef8a:	4b08      	ldr	r3, [pc, #32]	@ (800efac <prvProcessReceivedCommands+0x1c8>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	1d39      	adds	r1, r7, #4
 800ef90:	2200      	movs	r2, #0
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd fc92 	bl	800c8bc <xQueueReceive>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f47f af26 	bne.w	800edec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800efa0:	bf00      	nop
 800efa2:	bf00      	nop
 800efa4:	3730      	adds	r7, #48	@ 0x30
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	20000f18 	.word	0x20000f18

0800efb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efb6:	e049      	b.n	800f04c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb8:	4b2e      	ldr	r3, [pc, #184]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efc2:	4b2c      	ldr	r3, [pc, #176]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3304      	adds	r3, #4
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fc ffad 	bl	800bf30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efe4:	f003 0304 	and.w	r3, r3, #4
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d02f      	beq.n	800f04c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	693a      	ldr	r2, [r7, #16]
 800eff2:	4413      	add	r3, r2
 800eff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	429a      	cmp	r2, r3
 800effc:	d90e      	bls.n	800f01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f00a:	4b1a      	ldr	r3, [pc, #104]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3304      	adds	r3, #4
 800f012:	4619      	mov	r1, r3
 800f014:	4610      	mov	r0, r2
 800f016:	f7fc ff52 	bl	800bebe <vListInsert>
 800f01a:	e017      	b.n	800f04c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f01c:	2300      	movs	r3, #0
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	2300      	movs	r3, #0
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	2100      	movs	r1, #0
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f7ff fd58 	bl	800eadc <xTimerGenericCommand>
 800f02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10b      	bne.n	800f04c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	603b      	str	r3, [r7, #0]
}
 800f046:	bf00      	nop
 800f048:	bf00      	nop
 800f04a:	e7fd      	b.n	800f048 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f04c:	4b09      	ldr	r3, [pc, #36]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d1b0      	bne.n	800efb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f056:	4b07      	ldr	r3, [pc, #28]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f05c:	4b06      	ldr	r3, [pc, #24]	@ (800f078 <prvSwitchTimerLists+0xc8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a04      	ldr	r2, [pc, #16]	@ (800f074 <prvSwitchTimerLists+0xc4>)
 800f062:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f064:	4a04      	ldr	r2, [pc, #16]	@ (800f078 <prvSwitchTimerLists+0xc8>)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	6013      	str	r3, [r2, #0]
}
 800f06a:	bf00      	nop
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20000f10 	.word	0x20000f10
 800f078:	20000f14 	.word	0x20000f14

0800f07c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f082:	f001 f8f9 	bl	8010278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f086:	4b15      	ldr	r3, [pc, #84]	@ (800f0dc <prvCheckForValidListAndQueue+0x60>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d120      	bne.n	800f0d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f08e:	4814      	ldr	r0, [pc, #80]	@ (800f0e0 <prvCheckForValidListAndQueue+0x64>)
 800f090:	f7fc fec4 	bl	800be1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f094:	4813      	ldr	r0, [pc, #76]	@ (800f0e4 <prvCheckForValidListAndQueue+0x68>)
 800f096:	f7fc fec1 	bl	800be1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f09a:	4b13      	ldr	r3, [pc, #76]	@ (800f0e8 <prvCheckForValidListAndQueue+0x6c>)
 800f09c:	4a10      	ldr	r2, [pc, #64]	@ (800f0e0 <prvCheckForValidListAndQueue+0x64>)
 800f09e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f0a0:	4b12      	ldr	r3, [pc, #72]	@ (800f0ec <prvCheckForValidListAndQueue+0x70>)
 800f0a2:	4a10      	ldr	r2, [pc, #64]	@ (800f0e4 <prvCheckForValidListAndQueue+0x68>)
 800f0a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	4b11      	ldr	r3, [pc, #68]	@ (800f0f0 <prvCheckForValidListAndQueue+0x74>)
 800f0ac:	4a11      	ldr	r2, [pc, #68]	@ (800f0f4 <prvCheckForValidListAndQueue+0x78>)
 800f0ae:	2110      	movs	r1, #16
 800f0b0:	200a      	movs	r0, #10
 800f0b2:	f7fc ffd1 	bl	800c058 <xQueueGenericCreateStatic>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	4a08      	ldr	r2, [pc, #32]	@ (800f0dc <prvCheckForValidListAndQueue+0x60>)
 800f0ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0bc:	4b07      	ldr	r3, [pc, #28]	@ (800f0dc <prvCheckForValidListAndQueue+0x60>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d005      	beq.n	800f0d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0c4:	4b05      	ldr	r3, [pc, #20]	@ (800f0dc <prvCheckForValidListAndQueue+0x60>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	490b      	ldr	r1, [pc, #44]	@ (800f0f8 <prvCheckForValidListAndQueue+0x7c>)
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fd fff4 	bl	800d0b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0d0:	f001 f904 	bl	80102dc <vPortExitCritical>
}
 800f0d4:	bf00      	nop
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20000f18 	.word	0x20000f18
 800f0e0:	20000ee8 	.word	0x20000ee8
 800f0e4:	20000efc 	.word	0x20000efc
 800f0e8:	20000f10 	.word	0x20000f10
 800f0ec:	20000f14 	.word	0x20000f14
 800f0f0:	20000fc4 	.word	0x20000fc4
 800f0f4:	20000f24 	.word	0x20000f24
 800f0f8:	08023ff0 	.word	0x08023ff0

0800f0fc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10b      	bne.n	800f126 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	60fb      	str	r3, [r7, #12]
}
 800f120:	bf00      	nop
 800f122:	bf00      	nop
 800f124:	e7fd      	b.n	800f122 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f126:	f001 f8a7 	bl	8010278 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	69db      	ldr	r3, [r3, #28]
 800f12e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f130:	f001 f8d4 	bl	80102dc <vPortExitCritical>

	return pvReturn;
 800f134:	693b      	ldr	r3, [r7, #16]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <__NVIC_SetPriority>:
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	6039      	str	r1, [r7, #0]
 800f14a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f14c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f150:	2b00      	cmp	r3, #0
 800f152:	db0a      	blt.n	800f16a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	b2da      	uxtb	r2, r3
 800f158:	490c      	ldr	r1, [pc, #48]	@ (800f18c <__NVIC_SetPriority+0x4c>)
 800f15a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f15e:	0112      	lsls	r2, r2, #4
 800f160:	b2d2      	uxtb	r2, r2
 800f162:	440b      	add	r3, r1
 800f164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f168:	e00a      	b.n	800f180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	4908      	ldr	r1, [pc, #32]	@ (800f190 <__NVIC_SetPriority+0x50>)
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	f003 030f 	and.w	r3, r3, #15
 800f176:	3b04      	subs	r3, #4
 800f178:	0112      	lsls	r2, r2, #4
 800f17a:	b2d2      	uxtb	r2, r2
 800f17c:	440b      	add	r3, r1
 800f17e:	761a      	strb	r2, [r3, #24]
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr
 800f18c:	e000e100 	.word	0xe000e100
 800f190:	e000ed00 	.word	0xe000ed00

0800f194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f194:	b580      	push	{r7, lr}
 800f196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f198:	4b05      	ldr	r3, [pc, #20]	@ (800f1b0 <SysTick_Handler+0x1c>)
 800f19a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f19c:	f7ff f940 	bl	800e420 <xTaskGetSchedulerState>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d001      	beq.n	800f1aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f1a6:	f001 f8f7 	bl	8010398 <xPortSysTickHandler>
  }
}
 800f1aa:	bf00      	nop
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	e000e010 	.word	0xe000e010

0800f1b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	f06f 0004 	mvn.w	r0, #4
 800f1be:	f7ff ffbf 	bl	800f140 <__NVIC_SetPriority>
#endif
}
 800f1c2:	bf00      	nop
 800f1c4:	bd80      	pop	{r7, pc}
	...

0800f1c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ce:	f3ef 8305 	mrs	r3, IPSR
 800f1d2:	603b      	str	r3, [r7, #0]
  return(result);
 800f1d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d003      	beq.n	800f1e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f1da:	f06f 0305 	mvn.w	r3, #5
 800f1de:	607b      	str	r3, [r7, #4]
 800f1e0:	e00c      	b.n	800f1fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f20c <osKernelInitialize+0x44>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d105      	bne.n	800f1f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f1ea:	4b08      	ldr	r3, [pc, #32]	@ (800f20c <osKernelInitialize+0x44>)
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	607b      	str	r3, [r7, #4]
 800f1f4:	e002      	b.n	800f1fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f1fc:	687b      	ldr	r3, [r7, #4]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	20001014 	.word	0x20001014

0800f210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f216:	f3ef 8305 	mrs	r3, IPSR
 800f21a:	603b      	str	r3, [r7, #0]
  return(result);
 800f21c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d003      	beq.n	800f22a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f222:	f06f 0305 	mvn.w	r3, #5
 800f226:	607b      	str	r3, [r7, #4]
 800f228:	e010      	b.n	800f24c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f22a:	4b0b      	ldr	r3, [pc, #44]	@ (800f258 <osKernelStart+0x48>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d109      	bne.n	800f246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f232:	f7ff ffbf 	bl	800f1b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f236:	4b08      	ldr	r3, [pc, #32]	@ (800f258 <osKernelStart+0x48>)
 800f238:	2202      	movs	r2, #2
 800f23a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f23c:	f7fe fa7c 	bl	800d738 <vTaskStartScheduler>
      stat = osOK;
 800f240:	2300      	movs	r3, #0
 800f242:	607b      	str	r3, [r7, #4]
 800f244:	e002      	b.n	800f24c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f246:	f04f 33ff 	mov.w	r3, #4294967295
 800f24a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f24c:	687b      	ldr	r3, [r7, #4]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	20001014 	.word	0x20001014

0800f25c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f262:	f3ef 8305 	mrs	r3, IPSR
 800f266:	603b      	str	r3, [r7, #0]
  return(result);
 800f268:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f26e:	f7fe fb87 	bl	800d980 <xTaskGetTickCountFromISR>
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	e002      	b.n	800f27c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f276:	f7fe fb73 	bl	800d960 <xTaskGetTickCount>
 800f27a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f27c:	687b      	ldr	r3, [r7, #4]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f286:	b580      	push	{r7, lr}
 800f288:	b08e      	sub	sp, #56	@ 0x38
 800f28a:	af04      	add	r7, sp, #16
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	60b9      	str	r1, [r7, #8]
 800f290:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f292:	2300      	movs	r3, #0
 800f294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f296:	f3ef 8305 	mrs	r3, IPSR
 800f29a:	617b      	str	r3, [r7, #20]
  return(result);
 800f29c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d17f      	bne.n	800f3a2 <osThreadNew+0x11c>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d07c      	beq.n	800f3a2 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800f2a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f2ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f2ae:	2318      	movs	r3, #24
 800f2b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d045      	beq.n	800f34e <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <osThreadNew+0x4a>
        name = attr->name;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d008      	beq.n	800f2f6 <osThreadNew+0x70>
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	2b38      	cmp	r3, #56	@ 0x38
 800f2e8:	d805      	bhi.n	800f2f6 <osThreadNew+0x70>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <osThreadNew+0x74>
        return (NULL);
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	e054      	b.n	800f3a4 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	695b      	ldr	r3, [r3, #20]
 800f306:	089b      	lsrs	r3, r3, #2
 800f308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00e      	beq.n	800f330 <osThreadNew+0xaa>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	2b5b      	cmp	r3, #91	@ 0x5b
 800f318:	d90a      	bls.n	800f330 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d006      	beq.n	800f330 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d002      	beq.n	800f330 <osThreadNew+0xaa>
        mem = 1;
 800f32a:	2301      	movs	r3, #1
 800f32c:	61bb      	str	r3, [r7, #24]
 800f32e:	e010      	b.n	800f352 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10c      	bne.n	800f352 <osThreadNew+0xcc>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d108      	bne.n	800f352 <osThreadNew+0xcc>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d104      	bne.n	800f352 <osThreadNew+0xcc>
          mem = 0;
 800f348:	2300      	movs	r3, #0
 800f34a:	61bb      	str	r3, [r7, #24]
 800f34c:	e001      	b.n	800f352 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d110      	bne.n	800f37a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f360:	9202      	str	r2, [sp, #8]
 800f362:	9301      	str	r3, [sp, #4]
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	6a3a      	ldr	r2, [r7, #32]
 800f36c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f7fd ff2a 	bl	800d1c8 <xTaskCreateStatic>
 800f374:	4603      	mov	r3, r0
 800f376:	613b      	str	r3, [r7, #16]
 800f378:	e013      	b.n	800f3a2 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d110      	bne.n	800f3a2 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	b29a      	uxth	r2, r3
 800f384:	f107 0310 	add.w	r3, r7, #16
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7fd ff78 	bl	800d288 <xTaskCreate>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d001      	beq.n	800f3a2 <osThreadNew+0x11c>
            hTask = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f3a2:	693b      	ldr	r3, [r7, #16]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3728      	adds	r7, #40	@ 0x28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3b8:	f3ef 8305 	mrs	r3, IPSR
 800f3bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d003      	beq.n	800f3cc <osThreadTerminate+0x20>
    stat = osErrorISR;
 800f3c4:	f06f 0305 	mvn.w	r3, #5
 800f3c8:	617b      	str	r3, [r7, #20]
 800f3ca:	e017      	b.n	800f3fc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d103      	bne.n	800f3da <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800f3d2:	f06f 0303 	mvn.w	r3, #3
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	e010      	b.n	800f3fc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800f3da:	6938      	ldr	r0, [r7, #16]
 800f3dc:	f7fe f944 	bl	800d668 <eTaskGetState>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800f3e4:	7bfb      	ldrb	r3, [r7, #15]
 800f3e6:	2b04      	cmp	r3, #4
 800f3e8:	d005      	beq.n	800f3f6 <osThreadTerminate+0x4a>
      stat = osOK;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800f3ee:	6938      	ldr	r0, [r7, #16]
 800f3f0:	f7fe f890 	bl	800d514 <vTaskDelete>
 800f3f4:	e002      	b.n	800f3fc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800f3f6:	f06f 0302 	mvn.w	r3, #2
 800f3fa:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800f3fc:	697b      	ldr	r3, [r7, #20]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3718      	adds	r7, #24
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f406:	b580      	push	{r7, lr}
 800f408:	b084      	sub	sp, #16
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f40e:	f3ef 8305 	mrs	r3, IPSR
 800f412:	60bb      	str	r3, [r7, #8]
  return(result);
 800f414:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <osDelay+0x1c>
    stat = osErrorISR;
 800f41a:	f06f 0305 	mvn.w	r3, #5
 800f41e:	60fb      	str	r3, [r7, #12]
 800f420:	e007      	b.n	800f432 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f422:	2300      	movs	r3, #0
 800f424:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7fe f8e5 	bl	800d5fc <vTaskDelay>
    }
  }

  return (stat);
 800f432:	68fb      	ldr	r3, [r7, #12]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3710      	adds	r7, #16
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f444:	2300      	movs	r3, #0
 800f446:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f448:	f3ef 8305 	mrs	r3, IPSR
 800f44c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f44e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f450:	2b00      	cmp	r3, #0
 800f452:	d174      	bne.n	800f53e <osMutexNew+0x102>
    if (attr != NULL) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	61bb      	str	r3, [r7, #24]
 800f460:	e001      	b.n	800f466 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f462:	2300      	movs	r3, #0
 800f464:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	f003 0301 	and.w	r3, r3, #1
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <osMutexNew+0x3a>
      rmtx = 1U;
 800f470:	2301      	movs	r3, #1
 800f472:	617b      	str	r3, [r7, #20]
 800f474:	e001      	b.n	800f47a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	f003 0308 	and.w	r3, r3, #8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d15c      	bne.n	800f53e <osMutexNew+0x102>
      mem = -1;
 800f484:	f04f 33ff 	mov.w	r3, #4294967295
 800f488:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d015      	beq.n	800f4bc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d006      	beq.n	800f4a6 <osMutexNew+0x6a>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	2b4f      	cmp	r3, #79	@ 0x4f
 800f49e:	d902      	bls.n	800f4a6 <osMutexNew+0x6a>
          mem = 1;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	613b      	str	r3, [r7, #16]
 800f4a4:	e00c      	b.n	800f4c0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d108      	bne.n	800f4c0 <osMutexNew+0x84>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d104      	bne.n	800f4c0 <osMutexNew+0x84>
            mem = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	613b      	str	r3, [r7, #16]
 800f4ba:	e001      	b.n	800f4c0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d112      	bne.n	800f4ec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d007      	beq.n	800f4dc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	2004      	movs	r0, #4
 800f4d4:	f7fc fecd 	bl	800c272 <xQueueCreateMutexStatic>
 800f4d8:	61f8      	str	r0, [r7, #28]
 800f4da:	e016      	b.n	800f50a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	2001      	movs	r0, #1
 800f4e4:	f7fc fec5 	bl	800c272 <xQueueCreateMutexStatic>
 800f4e8:	61f8      	str	r0, [r7, #28]
 800f4ea:	e00e      	b.n	800f50a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10b      	bne.n	800f50a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f4f8:	2004      	movs	r0, #4
 800f4fa:	f7fc fea2 	bl	800c242 <xQueueCreateMutex>
 800f4fe:	61f8      	str	r0, [r7, #28]
 800f500:	e003      	b.n	800f50a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f502:	2001      	movs	r0, #1
 800f504:	f7fc fe9d 	bl	800c242 <xQueueCreateMutex>
 800f508:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00c      	beq.n	800f52a <osMutexNew+0xee>
        if (attr != NULL) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d003      	beq.n	800f51e <osMutexNew+0xe2>
          name = attr->name;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	e001      	b.n	800f522 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	69f8      	ldr	r0, [r7, #28]
 800f526:	f7fd fdc7 	bl	800d0b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d006      	beq.n	800f53e <osMutexNew+0x102>
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	f043 0301 	orr.w	r3, r3, #1
 800f53c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f53e:	69fb      	ldr	r3, [r7, #28]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3720      	adds	r7, #32
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f023 0301 	bic.w	r3, r3, #1
 800f558:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f562:	2300      	movs	r3, #0
 800f564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f566:	f3ef 8305 	mrs	r3, IPSR
 800f56a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f56c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f572:	f06f 0305 	mvn.w	r3, #5
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	e02c      	b.n	800f5d4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f580:	f06f 0303 	mvn.w	r3, #3
 800f584:	617b      	str	r3, [r7, #20]
 800f586:	e025      	b.n	800f5d4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d011      	beq.n	800f5b2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f58e:	6839      	ldr	r1, [r7, #0]
 800f590:	6938      	ldr	r0, [r7, #16]
 800f592:	f7fc febe 	bl	800c312 <xQueueTakeMutexRecursive>
 800f596:	4603      	mov	r3, r0
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d01b      	beq.n	800f5d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d003      	beq.n	800f5aa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f5a2:	f06f 0301 	mvn.w	r3, #1
 800f5a6:	617b      	str	r3, [r7, #20]
 800f5a8:	e014      	b.n	800f5d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f5aa:	f06f 0302 	mvn.w	r3, #2
 800f5ae:	617b      	str	r3, [r7, #20]
 800f5b0:	e010      	b.n	800f5d4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6938      	ldr	r0, [r7, #16]
 800f5b6:	f7fd fa63 	bl	800ca80 <xQueueSemaphoreTake>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d009      	beq.n	800f5d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d003      	beq.n	800f5ce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f5c6:	f06f 0301 	mvn.w	r3, #1
 800f5ca:	617b      	str	r3, [r7, #20]
 800f5cc:	e002      	b.n	800f5d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f5ce:	f06f 0302 	mvn.w	r3, #2
 800f5d2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f5d4:	697b      	ldr	r3, [r7, #20]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3718      	adds	r7, #24
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f023 0301 	bic.w	r3, r3, #1
 800f5ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f003 0301 	and.w	r3, r3, #1
 800f5f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5fa:	f3ef 8305 	mrs	r3, IPSR
 800f5fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800f600:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <osMutexRelease+0x30>
    stat = osErrorISR;
 800f606:	f06f 0305 	mvn.w	r3, #5
 800f60a:	617b      	str	r3, [r7, #20]
 800f60c:	e01f      	b.n	800f64e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d103      	bne.n	800f61c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f614:	f06f 0303 	mvn.w	r3, #3
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e018      	b.n	800f64e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d009      	beq.n	800f636 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f622:	6938      	ldr	r0, [r7, #16]
 800f624:	f7fc fe40 	bl	800c2a8 <xQueueGiveMutexRecursive>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d00f      	beq.n	800f64e <osMutexRelease+0x70>
        stat = osErrorResource;
 800f62e:	f06f 0302 	mvn.w	r3, #2
 800f632:	617b      	str	r3, [r7, #20]
 800f634:	e00b      	b.n	800f64e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f636:	2300      	movs	r3, #0
 800f638:	2200      	movs	r2, #0
 800f63a:	2100      	movs	r1, #0
 800f63c:	6938      	ldr	r0, [r7, #16]
 800f63e:	f7fc ff0d 	bl	800c45c <xQueueGenericSend>
 800f642:	4603      	mov	r3, r0
 800f644:	2b01      	cmp	r3, #1
 800f646:	d002      	beq.n	800f64e <osMutexRelease+0x70>
        stat = osErrorResource;
 800f648:	f06f 0302 	mvn.w	r3, #2
 800f64c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f64e:	697b      	ldr	r3, [r7, #20]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	@ 0x28
 800f65c:	af02      	add	r7, sp, #8
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f664:	2300      	movs	r3, #0
 800f666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f668:	f3ef 8305 	mrs	r3, IPSR
 800f66c:	613b      	str	r3, [r7, #16]
  return(result);
 800f66e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f670:	2b00      	cmp	r3, #0
 800f672:	d175      	bne.n	800f760 <osSemaphoreNew+0x108>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d072      	beq.n	800f760 <osSemaphoreNew+0x108>
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d86e      	bhi.n	800f760 <osSemaphoreNew+0x108>
    mem = -1;
 800f682:	f04f 33ff 	mov.w	r3, #4294967295
 800f686:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d015      	beq.n	800f6ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d006      	beq.n	800f6a4 <osSemaphoreNew+0x4c>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	2b4f      	cmp	r3, #79	@ 0x4f
 800f69c:	d902      	bls.n	800f6a4 <osSemaphoreNew+0x4c>
        mem = 1;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	61bb      	str	r3, [r7, #24]
 800f6a2:	e00c      	b.n	800f6be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d108      	bne.n	800f6be <osSemaphoreNew+0x66>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d104      	bne.n	800f6be <osSemaphoreNew+0x66>
          mem = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	61bb      	str	r3, [r7, #24]
 800f6b8:	e001      	b.n	800f6be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c4:	d04c      	beq.n	800f760 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d128      	bne.n	800f71e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d10a      	bne.n	800f6e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	2203      	movs	r2, #3
 800f6d8:	9200      	str	r2, [sp, #0]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	2100      	movs	r1, #0
 800f6de:	2001      	movs	r0, #1
 800f6e0:	f7fc fcba 	bl	800c058 <xQueueGenericCreateStatic>
 800f6e4:	61f8      	str	r0, [r7, #28]
 800f6e6:	e005      	b.n	800f6f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f6e8:	2203      	movs	r2, #3
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	2001      	movs	r0, #1
 800f6ee:	f7fc fd30 	bl	800c152 <xQueueGenericCreate>
 800f6f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d022      	beq.n	800f740 <osSemaphoreNew+0xe8>
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d01f      	beq.n	800f740 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f700:	2300      	movs	r3, #0
 800f702:	2200      	movs	r2, #0
 800f704:	2100      	movs	r1, #0
 800f706:	69f8      	ldr	r0, [r7, #28]
 800f708:	f7fc fea8 	bl	800c45c <xQueueGenericSend>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d016      	beq.n	800f740 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f712:	69f8      	ldr	r0, [r7, #28]
 800f714:	f7fd fb84 	bl	800ce20 <vQueueDelete>
            hSemaphore = NULL;
 800f718:	2300      	movs	r3, #0
 800f71a:	61fb      	str	r3, [r7, #28]
 800f71c:	e010      	b.n	800f740 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d108      	bne.n	800f736 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	461a      	mov	r2, r3
 800f72a:	68b9      	ldr	r1, [r7, #8]
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f7fc fe27 	bl	800c380 <xQueueCreateCountingSemaphoreStatic>
 800f732:	61f8      	str	r0, [r7, #28]
 800f734:	e004      	b.n	800f740 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f7fc fe5a 	bl	800c3f2 <xQueueCreateCountingSemaphore>
 800f73e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00c      	beq.n	800f760 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d003      	beq.n	800f754 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	617b      	str	r3, [r7, #20]
 800f752:	e001      	b.n	800f758 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f758:	6979      	ldr	r1, [r7, #20]
 800f75a:	69f8      	ldr	r0, [r7, #28]
 800f75c:	f7fd fcac 	bl	800d0b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f760:	69fb      	ldr	r3, [r7, #28]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3720      	adds	r7, #32
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
	...

0800f76c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f77a:	2300      	movs	r3, #0
 800f77c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d103      	bne.n	800f78c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f784:	f06f 0303 	mvn.w	r3, #3
 800f788:	617b      	str	r3, [r7, #20]
 800f78a:	e039      	b.n	800f800 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f78c:	f3ef 8305 	mrs	r3, IPSR
 800f790:	60fb      	str	r3, [r7, #12]
  return(result);
 800f792:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f794:	2b00      	cmp	r3, #0
 800f796:	d022      	beq.n	800f7de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d003      	beq.n	800f7a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f79e:	f06f 0303 	mvn.w	r3, #3
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	e02c      	b.n	800f800 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f7aa:	f107 0308 	add.w	r3, r7, #8
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	6938      	ldr	r0, [r7, #16]
 800f7b4:	f7fd fa74 	bl	800cca0 <xQueueReceiveFromISR>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d003      	beq.n	800f7c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f7be:	f06f 0302 	mvn.w	r3, #2
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	e01c      	b.n	800f800 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d019      	beq.n	800f800 <osSemaphoreAcquire+0x94>
 800f7cc:	4b0f      	ldr	r3, [pc, #60]	@ (800f80c <osSemaphoreAcquire+0xa0>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	e010      	b.n	800f800 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6938      	ldr	r0, [r7, #16]
 800f7e2:	f7fd f94d 	bl	800ca80 <xQueueSemaphoreTake>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d009      	beq.n	800f800 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d003      	beq.n	800f7fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f7f2:	f06f 0301 	mvn.w	r3, #1
 800f7f6:	617b      	str	r3, [r7, #20]
 800f7f8:	e002      	b.n	800f800 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f7fa:	f06f 0302 	mvn.w	r3, #2
 800f7fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f800:	697b      	ldr	r3, [r7, #20]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3718      	adds	r7, #24
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	e000ed04 	.word	0xe000ed04

0800f810 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d103      	bne.n	800f82e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f826:	f06f 0303 	mvn.w	r3, #3
 800f82a:	617b      	str	r3, [r7, #20]
 800f82c:	e02c      	b.n	800f888 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f82e:	f3ef 8305 	mrs	r3, IPSR
 800f832:	60fb      	str	r3, [r7, #12]
  return(result);
 800f834:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f836:	2b00      	cmp	r3, #0
 800f838:	d01a      	beq.n	800f870 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f83a:	2300      	movs	r3, #0
 800f83c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f83e:	f107 0308 	add.w	r3, r7, #8
 800f842:	4619      	mov	r1, r3
 800f844:	6938      	ldr	r0, [r7, #16]
 800f846:	f7fc ffa9 	bl	800c79c <xQueueGiveFromISR>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d003      	beq.n	800f858 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f850:	f06f 0302 	mvn.w	r3, #2
 800f854:	617b      	str	r3, [r7, #20]
 800f856:	e017      	b.n	800f888 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d014      	beq.n	800f888 <osSemaphoreRelease+0x78>
 800f85e:	4b0d      	ldr	r3, [pc, #52]	@ (800f894 <osSemaphoreRelease+0x84>)
 800f860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	e00b      	b.n	800f888 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f870:	2300      	movs	r3, #0
 800f872:	2200      	movs	r2, #0
 800f874:	2100      	movs	r1, #0
 800f876:	6938      	ldr	r0, [r7, #16]
 800f878:	f7fc fdf0 	bl	800c45c <xQueueGenericSend>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d002      	beq.n	800f888 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f882:	f06f 0302 	mvn.w	r3, #2
 800f886:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f888:	697b      	ldr	r3, [r7, #20]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3718      	adds	r7, #24
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	e000ed04 	.word	0xe000ed04

0800f898 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8a4:	f3ef 8305 	mrs	r3, IPSR
 800f8a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d003      	beq.n	800f8b8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f8b0:	f06f 0305 	mvn.w	r3, #5
 800f8b4:	617b      	str	r3, [r7, #20]
 800f8b6:	e00e      	b.n	800f8d6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d103      	bne.n	800f8c6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f8be:	f06f 0303 	mvn.w	r3, #3
 800f8c2:	617b      	str	r3, [r7, #20]
 800f8c4:	e007      	b.n	800f8d6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f8c6:	6938      	ldr	r0, [r7, #16]
 800f8c8:	f7fd fc20 	bl	800d10c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f8d0:	6938      	ldr	r0, [r7, #16]
 800f8d2:	f7fd faa5 	bl	800ce20 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f8d6:	697b      	ldr	r3, [r7, #20]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b08a      	sub	sp, #40	@ 0x28
 800f8e4:	af02      	add	r7, sp, #8
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8f0:	f3ef 8305 	mrs	r3, IPSR
 800f8f4:	613b      	str	r3, [r7, #16]
  return(result);
 800f8f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d15f      	bne.n	800f9bc <osMessageQueueNew+0xdc>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d05c      	beq.n	800f9bc <osMessageQueueNew+0xdc>
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d059      	beq.n	800f9bc <osMessageQueueNew+0xdc>
    mem = -1;
 800f908:	f04f 33ff 	mov.w	r3, #4294967295
 800f90c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d029      	beq.n	800f968 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d012      	beq.n	800f942 <osMessageQueueNew+0x62>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	2b4f      	cmp	r3, #79	@ 0x4f
 800f922:	d90e      	bls.n	800f942 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00a      	beq.n	800f942 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	695a      	ldr	r2, [r3, #20]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68b9      	ldr	r1, [r7, #8]
 800f934:	fb01 f303 	mul.w	r3, r1, r3
 800f938:	429a      	cmp	r2, r3
 800f93a:	d302      	bcc.n	800f942 <osMessageQueueNew+0x62>
        mem = 1;
 800f93c:	2301      	movs	r3, #1
 800f93e:	61bb      	str	r3, [r7, #24]
 800f940:	e014      	b.n	800f96c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d110      	bne.n	800f96c <osMessageQueueNew+0x8c>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10c      	bne.n	800f96c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f956:	2b00      	cmp	r3, #0
 800f958:	d108      	bne.n	800f96c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d104      	bne.n	800f96c <osMessageQueueNew+0x8c>
          mem = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	61bb      	str	r3, [r7, #24]
 800f966:	e001      	b.n	800f96c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d10b      	bne.n	800f98a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	691a      	ldr	r2, [r3, #16]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	2100      	movs	r1, #0
 800f97c:	9100      	str	r1, [sp, #0]
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7fc fb69 	bl	800c058 <xQueueGenericCreateStatic>
 800f986:	61f8      	str	r0, [r7, #28]
 800f988:	e008      	b.n	800f99c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d105      	bne.n	800f99c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f990:	2200      	movs	r2, #0
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7fc fbdc 	bl	800c152 <xQueueGenericCreate>
 800f99a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00c      	beq.n	800f9bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d003      	beq.n	800f9b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	617b      	str	r3, [r7, #20]
 800f9ae:	e001      	b.n	800f9b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f9b4:	6979      	ldr	r1, [r7, #20]
 800f9b6:	69f8      	ldr	r0, [r7, #28]
 800f9b8:	f7fd fb7e 	bl	800d0b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f9bc:	69fb      	ldr	r3, [r7, #28]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3720      	adds	r7, #32
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b088      	sub	sp, #32
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	603b      	str	r3, [r7, #0]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9e0:	f3ef 8305 	mrs	r3, IPSR
 800f9e4:	617b      	str	r3, [r7, #20]
  return(result);
 800f9e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d028      	beq.n	800fa3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d005      	beq.n	800f9fe <osMessageQueuePut+0x36>
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <osMessageQueuePut+0x36>
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f9fe:	f06f 0303 	mvn.w	r3, #3
 800fa02:	61fb      	str	r3, [r7, #28]
 800fa04:	e038      	b.n	800fa78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fa06:	2300      	movs	r3, #0
 800fa08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fa0a:	f107 0210 	add.w	r2, r7, #16
 800fa0e:	2300      	movs	r3, #0
 800fa10:	68b9      	ldr	r1, [r7, #8]
 800fa12:	69b8      	ldr	r0, [r7, #24]
 800fa14:	f7fc fe24 	bl	800c660 <xQueueGenericSendFromISR>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d003      	beq.n	800fa26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fa1e:	f06f 0302 	mvn.w	r3, #2
 800fa22:	61fb      	str	r3, [r7, #28]
 800fa24:	e028      	b.n	800fa78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d025      	beq.n	800fa78 <osMessageQueuePut+0xb0>
 800fa2c:	4b15      	ldr	r3, [pc, #84]	@ (800fa84 <osMessageQueuePut+0xbc>)
 800fa2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	e01c      	b.n	800fa78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <osMessageQueuePut+0x82>
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d103      	bne.n	800fa52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fa4a:	f06f 0303 	mvn.w	r3, #3
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	e012      	b.n	800fa78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa52:	2300      	movs	r3, #0
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	69b8      	ldr	r0, [r7, #24]
 800fa5a:	f7fc fcff 	bl	800c45c <xQueueGenericSend>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d009      	beq.n	800fa78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d003      	beq.n	800fa72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fa6a:	f06f 0301 	mvn.w	r3, #1
 800fa6e:	61fb      	str	r3, [r7, #28]
 800fa70:	e002      	b.n	800fa78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fa72:	f06f 0302 	mvn.w	r3, #2
 800fa76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa78:	69fb      	ldr	r3, [r7, #28]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3720      	adds	r7, #32
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	e000ed04 	.word	0xe000ed04

0800fa88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b088      	sub	sp, #32
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa9e:	f3ef 8305 	mrs	r3, IPSR
 800faa2:	617b      	str	r3, [r7, #20]
  return(result);
 800faa4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d028      	beq.n	800fafc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d005      	beq.n	800fabc <osMessageQueueGet+0x34>
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <osMessageQueueGet+0x34>
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fabc:	f06f 0303 	mvn.w	r3, #3
 800fac0:	61fb      	str	r3, [r7, #28]
 800fac2:	e037      	b.n	800fb34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fac4:	2300      	movs	r3, #0
 800fac6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fac8:	f107 0310 	add.w	r3, r7, #16
 800facc:	461a      	mov	r2, r3
 800face:	68b9      	ldr	r1, [r7, #8]
 800fad0:	69b8      	ldr	r0, [r7, #24]
 800fad2:	f7fd f8e5 	bl	800cca0 <xQueueReceiveFromISR>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d003      	beq.n	800fae4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fadc:	f06f 0302 	mvn.w	r3, #2
 800fae0:	61fb      	str	r3, [r7, #28]
 800fae2:	e027      	b.n	800fb34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d024      	beq.n	800fb34 <osMessageQueueGet+0xac>
 800faea:	4b15      	ldr	r3, [pc, #84]	@ (800fb40 <osMessageQueueGet+0xb8>)
 800faec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	e01b      	b.n	800fb34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d002      	beq.n	800fb08 <osMessageQueueGet+0x80>
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d103      	bne.n	800fb10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fb08:	f06f 0303 	mvn.w	r3, #3
 800fb0c:	61fb      	str	r3, [r7, #28]
 800fb0e:	e011      	b.n	800fb34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	69b8      	ldr	r0, [r7, #24]
 800fb16:	f7fc fed1 	bl	800c8bc <xQueueReceive>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d009      	beq.n	800fb34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d003      	beq.n	800fb2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fb26:	f06f 0301 	mvn.w	r3, #1
 800fb2a:	61fb      	str	r3, [r7, #28]
 800fb2c:	e002      	b.n	800fb34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fb2e:	f06f 0302 	mvn.w	r3, #2
 800fb32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fb34:	69fb      	ldr	r3, [r7, #28]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3720      	adds	r7, #32
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	e000ed04 	.word	0xe000ed04

0800fb44 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d102      	bne.n	800fb5c <osMessageQueueGetCount+0x18>
    count = 0U;
 800fb56:	2300      	movs	r3, #0
 800fb58:	617b      	str	r3, [r7, #20]
 800fb5a:	e00e      	b.n	800fb7a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb5c:	f3ef 8305 	mrs	r3, IPSR
 800fb60:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d004      	beq.n	800fb72 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fb68:	6938      	ldr	r0, [r7, #16]
 800fb6a:	f7fd f93a 	bl	800cde2 <uxQueueMessagesWaitingFromISR>
 800fb6e:	6178      	str	r0, [r7, #20]
 800fb70:	e003      	b.n	800fb7a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fb72:	6938      	ldr	r0, [r7, #16]
 800fb74:	f7fd f916 	bl	800cda4 <uxQueueMessagesWaiting>
 800fb78:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800fb7a:	697b      	ldr	r3, [r7, #20]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb90:	f3ef 8305 	mrs	r3, IPSR
 800fb94:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb96:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d003      	beq.n	800fba4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800fb9c:	f06f 0305 	mvn.w	r3, #5
 800fba0:	617b      	str	r3, [r7, #20]
 800fba2:	e00e      	b.n	800fbc2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d103      	bne.n	800fbb2 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800fbaa:	f06f 0303 	mvn.w	r3, #3
 800fbae:	617b      	str	r3, [r7, #20]
 800fbb0:	e007      	b.n	800fbc2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800fbb2:	6938      	ldr	r0, [r7, #16]
 800fbb4:	f7fd faaa 	bl	800d10c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800fbbc:	6938      	ldr	r0, [r7, #16]
 800fbbe:	f7fd f92f 	bl	800ce20 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800fbc2:	697b      	ldr	r3, [r7, #20]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4a07      	ldr	r2, [pc, #28]	@ (800fbf8 <vApplicationGetIdleTaskMemory+0x2c>)
 800fbdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	4a06      	ldr	r2, [pc, #24]	@ (800fbfc <vApplicationGetIdleTaskMemory+0x30>)
 800fbe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbea:	601a      	str	r2, [r3, #0]
}
 800fbec:	bf00      	nop
 800fbee:	3714      	adds	r7, #20
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	20001018 	.word	0x20001018
 800fbfc:	20001074 	.word	0x20001074

0800fc00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4a07      	ldr	r2, [pc, #28]	@ (800fc2c <vApplicationGetTimerTaskMemory+0x2c>)
 800fc10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	4a06      	ldr	r2, [pc, #24]	@ (800fc30 <vApplicationGetTimerTaskMemory+0x30>)
 800fc16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fc1e:	601a      	str	r2, [r3, #0]
}
 800fc20:	bf00      	nop
 800fc22:	3714      	adds	r7, #20
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	20001874 	.word	0x20001874
 800fc30:	200018d0 	.word	0x200018d0

0800fc34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b08a      	sub	sp, #40	@ 0x28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc40:	f7fd fde2 	bl	800d808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc44:	4b5c      	ldr	r3, [pc, #368]	@ (800fdb8 <pvPortMalloc+0x184>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d101      	bne.n	800fc50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc4c:	f000 f924 	bl	800fe98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc50:	4b5a      	ldr	r3, [pc, #360]	@ (800fdbc <pvPortMalloc+0x188>)
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4013      	ands	r3, r2
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f040 8095 	bne.w	800fd88 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d01e      	beq.n	800fca2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc64:	2208      	movs	r2, #8
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4413      	add	r3, r2
 800fc6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f003 0307 	and.w	r3, r3, #7
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d015      	beq.n	800fca2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f023 0307 	bic.w	r3, r3, #7
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f003 0307 	and.w	r3, r3, #7
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00b      	beq.n	800fca2 <pvPortMalloc+0x6e>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	617b      	str	r3, [r7, #20]
}
 800fc9c:	bf00      	nop
 800fc9e:	bf00      	nop
 800fca0:	e7fd      	b.n	800fc9e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d06f      	beq.n	800fd88 <pvPortMalloc+0x154>
 800fca8:	4b45      	ldr	r3, [pc, #276]	@ (800fdc0 <pvPortMalloc+0x18c>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d86a      	bhi.n	800fd88 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fcb2:	4b44      	ldr	r3, [pc, #272]	@ (800fdc4 <pvPortMalloc+0x190>)
 800fcb4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fcb6:	4b43      	ldr	r3, [pc, #268]	@ (800fdc4 <pvPortMalloc+0x190>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcbc:	e004      	b.n	800fcc8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d903      	bls.n	800fcda <pvPortMalloc+0xa6>
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1f1      	bne.n	800fcbe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcda:	4b37      	ldr	r3, [pc, #220]	@ (800fdb8 <pvPortMalloc+0x184>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d051      	beq.n	800fd88 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2208      	movs	r2, #8
 800fcea:	4413      	add	r3, r2
 800fcec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	1ad2      	subs	r2, r2, r3
 800fcfe:	2308      	movs	r3, #8
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d920      	bls.n	800fd48 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	f003 0307 	and.w	r3, r3, #7
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00b      	beq.n	800fd30 <pvPortMalloc+0xfc>
	__asm volatile
 800fd18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	613b      	str	r3, [r7, #16]
}
 800fd2a:	bf00      	nop
 800fd2c:	bf00      	nop
 800fd2e:	e7fd      	b.n	800fd2c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	1ad2      	subs	r2, r2, r3
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd42:	69b8      	ldr	r0, [r7, #24]
 800fd44:	f000 f90a 	bl	800ff5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd48:	4b1d      	ldr	r3, [pc, #116]	@ (800fdc0 <pvPortMalloc+0x18c>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	4a1b      	ldr	r2, [pc, #108]	@ (800fdc0 <pvPortMalloc+0x18c>)
 800fd54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd56:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc0 <pvPortMalloc+0x18c>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	4b1b      	ldr	r3, [pc, #108]	@ (800fdc8 <pvPortMalloc+0x194>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d203      	bcs.n	800fd6a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd62:	4b17      	ldr	r3, [pc, #92]	@ (800fdc0 <pvPortMalloc+0x18c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a18      	ldr	r2, [pc, #96]	@ (800fdc8 <pvPortMalloc+0x194>)
 800fd68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	4b13      	ldr	r3, [pc, #76]	@ (800fdbc <pvPortMalloc+0x188>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	431a      	orrs	r2, r3
 800fd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd7e:	4b13      	ldr	r3, [pc, #76]	@ (800fdcc <pvPortMalloc+0x198>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3301      	adds	r3, #1
 800fd84:	4a11      	ldr	r2, [pc, #68]	@ (800fdcc <pvPortMalloc+0x198>)
 800fd86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd88:	f7fd fd4c 	bl	800d824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00b      	beq.n	800fdae <pvPortMalloc+0x17a>
	__asm volatile
 800fd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	60fb      	str	r3, [r7, #12]
}
 800fda8:	bf00      	nop
 800fdaa:	bf00      	nop
 800fdac:	e7fd      	b.n	800fdaa <pvPortMalloc+0x176>
	return pvReturn;
 800fdae:	69fb      	ldr	r3, [r7, #28]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3728      	adds	r7, #40	@ 0x28
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	20008cd8 	.word	0x20008cd8
 800fdbc:	20008cec 	.word	0x20008cec
 800fdc0:	20008cdc 	.word	0x20008cdc
 800fdc4:	20008cd0 	.word	0x20008cd0
 800fdc8:	20008ce0 	.word	0x20008ce0
 800fdcc:	20008ce4 	.word	0x20008ce4

0800fdd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d04f      	beq.n	800fe82 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fde2:	2308      	movs	r3, #8
 800fde4:	425b      	negs	r3, r3
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	4413      	add	r3, r2
 800fdea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	4b25      	ldr	r3, [pc, #148]	@ (800fe8c <vPortFree+0xbc>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10b      	bne.n	800fe16 <vPortFree+0x46>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	60fb      	str	r3, [r7, #12]
}
 800fe10:	bf00      	nop
 800fe12:	bf00      	nop
 800fe14:	e7fd      	b.n	800fe12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00b      	beq.n	800fe36 <vPortFree+0x66>
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe22:	f383 8811 	msr	BASEPRI, r3
 800fe26:	f3bf 8f6f 	isb	sy
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	60bb      	str	r3, [r7, #8]
}
 800fe30:	bf00      	nop
 800fe32:	bf00      	nop
 800fe34:	e7fd      	b.n	800fe32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	4b14      	ldr	r3, [pc, #80]	@ (800fe8c <vPortFree+0xbc>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d01e      	beq.n	800fe82 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d11a      	bne.n	800fe82 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	685a      	ldr	r2, [r3, #4]
 800fe50:	4b0e      	ldr	r3, [pc, #56]	@ (800fe8c <vPortFree+0xbc>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	43db      	mvns	r3, r3
 800fe56:	401a      	ands	r2, r3
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe5c:	f7fd fcd4 	bl	800d808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	4b0a      	ldr	r3, [pc, #40]	@ (800fe90 <vPortFree+0xc0>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4413      	add	r3, r2
 800fe6a:	4a09      	ldr	r2, [pc, #36]	@ (800fe90 <vPortFree+0xc0>)
 800fe6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe6e:	6938      	ldr	r0, [r7, #16]
 800fe70:	f000 f874 	bl	800ff5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe74:	4b07      	ldr	r3, [pc, #28]	@ (800fe94 <vPortFree+0xc4>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	4a06      	ldr	r2, [pc, #24]	@ (800fe94 <vPortFree+0xc4>)
 800fe7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe7e:	f7fd fcd1 	bl	800d824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe82:	bf00      	nop
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20008cec 	.word	0x20008cec
 800fe90:	20008cdc 	.word	0x20008cdc
 800fe94:	20008ce8 	.word	0x20008ce8

0800fe98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe9e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800fea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fea4:	4b27      	ldr	r3, [pc, #156]	@ (800ff44 <prvHeapInit+0xac>)
 800fea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f003 0307 	and.w	r3, r3, #7
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00c      	beq.n	800fecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	3307      	adds	r3, #7
 800feb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f023 0307 	bic.w	r3, r3, #7
 800febe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fec0:	68ba      	ldr	r2, [r7, #8]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	4a1f      	ldr	r2, [pc, #124]	@ (800ff44 <prvHeapInit+0xac>)
 800fec8:	4413      	add	r3, r2
 800feca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fed0:	4a1d      	ldr	r2, [pc, #116]	@ (800ff48 <prvHeapInit+0xb0>)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fed6:	4b1c      	ldr	r3, [pc, #112]	@ (800ff48 <prvHeapInit+0xb0>)
 800fed8:	2200      	movs	r2, #0
 800feda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	4413      	add	r3, r2
 800fee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fee4:	2208      	movs	r2, #8
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	1a9b      	subs	r3, r3, r2
 800feea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f023 0307 	bic.w	r3, r3, #7
 800fef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	4a15      	ldr	r2, [pc, #84]	@ (800ff4c <prvHeapInit+0xb4>)
 800fef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fefa:	4b14      	ldr	r3, [pc, #80]	@ (800ff4c <prvHeapInit+0xb4>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2200      	movs	r2, #0
 800ff00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff02:	4b12      	ldr	r3, [pc, #72]	@ (800ff4c <prvHeapInit+0xb4>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2200      	movs	r2, #0
 800ff08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	1ad2      	subs	r2, r2, r3
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff18:	4b0c      	ldr	r3, [pc, #48]	@ (800ff4c <prvHeapInit+0xb4>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	4a0a      	ldr	r2, [pc, #40]	@ (800ff50 <prvHeapInit+0xb8>)
 800ff26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	4a09      	ldr	r2, [pc, #36]	@ (800ff54 <prvHeapInit+0xbc>)
 800ff2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff30:	4b09      	ldr	r3, [pc, #36]	@ (800ff58 <prvHeapInit+0xc0>)
 800ff32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff36:	601a      	str	r2, [r3, #0]
}
 800ff38:	bf00      	nop
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	200028d0 	.word	0x200028d0
 800ff48:	20008cd0 	.word	0x20008cd0
 800ff4c:	20008cd8 	.word	0x20008cd8
 800ff50:	20008ce0 	.word	0x20008ce0
 800ff54:	20008cdc 	.word	0x20008cdc
 800ff58:	20008cec 	.word	0x20008cec

0800ff5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff64:	4b28      	ldr	r3, [pc, #160]	@ (8010008 <prvInsertBlockIntoFreeList+0xac>)
 800ff66:	60fb      	str	r3, [r7, #12]
 800ff68:	e002      	b.n	800ff70 <prvInsertBlockIntoFreeList+0x14>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	60fb      	str	r3, [r7, #12]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d8f7      	bhi.n	800ff6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	4413      	add	r3, r2
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d108      	bne.n	800ff9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	441a      	add	r2, r3
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	441a      	add	r2, r3
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d118      	bne.n	800ffe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	4b15      	ldr	r3, [pc, #84]	@ (801000c <prvInsertBlockIntoFreeList+0xb0>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d00d      	beq.n	800ffda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685a      	ldr	r2, [r3, #4]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	441a      	add	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	e008      	b.n	800ffec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffda:	4b0c      	ldr	r3, [pc, #48]	@ (801000c <prvInsertBlockIntoFreeList+0xb0>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	e003      	b.n	800ffec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d002      	beq.n	800fffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fffa:	bf00      	nop
 800fffc:	3714      	adds	r7, #20
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	20008cd0 	.word	0x20008cd0
 801000c:	20008cd8 	.word	0x20008cd8

08010010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3b04      	subs	r3, #4
 8010020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3b04      	subs	r3, #4
 801002e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	f023 0201 	bic.w	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3b04      	subs	r3, #4
 801003e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010040:	4a0c      	ldr	r2, [pc, #48]	@ (8010074 <pxPortInitialiseStack+0x64>)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3b14      	subs	r3, #20
 801004a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	3b04      	subs	r3, #4
 8010056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f06f 0202 	mvn.w	r2, #2
 801005e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3b20      	subs	r3, #32
 8010064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010066:	68fb      	ldr	r3, [r7, #12]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	08010079 	.word	0x08010079

08010078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010082:	4b13      	ldr	r3, [pc, #76]	@ (80100d0 <prvTaskExitError+0x58>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008a:	d00b      	beq.n	80100a4 <prvTaskExitError+0x2c>
	__asm volatile
 801008c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	60fb      	str	r3, [r7, #12]
}
 801009e:	bf00      	nop
 80100a0:	bf00      	nop
 80100a2:	e7fd      	b.n	80100a0 <prvTaskExitError+0x28>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	60bb      	str	r3, [r7, #8]
}
 80100b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100b8:	bf00      	nop
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0fc      	beq.n	80100ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	20000030 	.word	0x20000030
	...

080100e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100e0:	4b07      	ldr	r3, [pc, #28]	@ (8010100 <pxCurrentTCBConst2>)
 80100e2:	6819      	ldr	r1, [r3, #0]
 80100e4:	6808      	ldr	r0, [r1, #0]
 80100e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ea:	f380 8809 	msr	PSP, r0
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	f04f 0000 	mov.w	r0, #0
 80100f6:	f380 8811 	msr	BASEPRI, r0
 80100fa:	4770      	bx	lr
 80100fc:	f3af 8000 	nop.w

08010100 <pxCurrentTCBConst2>:
 8010100:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010104:	bf00      	nop
 8010106:	bf00      	nop

08010108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010108:	4808      	ldr	r0, [pc, #32]	@ (801012c <prvPortStartFirstTask+0x24>)
 801010a:	6800      	ldr	r0, [r0, #0]
 801010c:	6800      	ldr	r0, [r0, #0]
 801010e:	f380 8808 	msr	MSP, r0
 8010112:	f04f 0000 	mov.w	r0, #0
 8010116:	f380 8814 	msr	CONTROL, r0
 801011a:	b662      	cpsie	i
 801011c:	b661      	cpsie	f
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	df00      	svc	0
 8010128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801012a:	bf00      	nop
 801012c:	e000ed08 	.word	0xe000ed08

08010130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010136:	4b47      	ldr	r3, [pc, #284]	@ (8010254 <xPortStartScheduler+0x124>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a47      	ldr	r2, [pc, #284]	@ (8010258 <xPortStartScheduler+0x128>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d10b      	bne.n	8010158 <xPortStartScheduler+0x28>
	__asm volatile
 8010140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	613b      	str	r3, [r7, #16]
}
 8010152:	bf00      	nop
 8010154:	bf00      	nop
 8010156:	e7fd      	b.n	8010154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010158:	4b3e      	ldr	r3, [pc, #248]	@ (8010254 <xPortStartScheduler+0x124>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a3f      	ldr	r2, [pc, #252]	@ (801025c <xPortStartScheduler+0x12c>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d10b      	bne.n	801017a <xPortStartScheduler+0x4a>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	60fb      	str	r3, [r7, #12]
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	e7fd      	b.n	8010176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801017a:	4b39      	ldr	r3, [pc, #228]	@ (8010260 <xPortStartScheduler+0x130>)
 801017c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	22ff      	movs	r2, #255	@ 0xff
 801018a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	b2db      	uxtb	r3, r3
 8010192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010194:	78fb      	ldrb	r3, [r7, #3]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801019c:	b2da      	uxtb	r2, r3
 801019e:	4b31      	ldr	r3, [pc, #196]	@ (8010264 <xPortStartScheduler+0x134>)
 80101a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101a2:	4b31      	ldr	r3, [pc, #196]	@ (8010268 <xPortStartScheduler+0x138>)
 80101a4:	2207      	movs	r2, #7
 80101a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101a8:	e009      	b.n	80101be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80101aa:	4b2f      	ldr	r3, [pc, #188]	@ (8010268 <xPortStartScheduler+0x138>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	3b01      	subs	r3, #1
 80101b0:	4a2d      	ldr	r2, [pc, #180]	@ (8010268 <xPortStartScheduler+0x138>)
 80101b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101b4:	78fb      	ldrb	r3, [r7, #3]
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	005b      	lsls	r3, r3, #1
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101c6:	2b80      	cmp	r3, #128	@ 0x80
 80101c8:	d0ef      	beq.n	80101aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101ca:	4b27      	ldr	r3, [pc, #156]	@ (8010268 <xPortStartScheduler+0x138>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f1c3 0307 	rsb	r3, r3, #7
 80101d2:	2b04      	cmp	r3, #4
 80101d4:	d00b      	beq.n	80101ee <xPortStartScheduler+0xbe>
	__asm volatile
 80101d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	60bb      	str	r3, [r7, #8]
}
 80101e8:	bf00      	nop
 80101ea:	bf00      	nop
 80101ec:	e7fd      	b.n	80101ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010268 <xPortStartScheduler+0x138>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	021b      	lsls	r3, r3, #8
 80101f4:	4a1c      	ldr	r2, [pc, #112]	@ (8010268 <xPortStartScheduler+0x138>)
 80101f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101f8:	4b1b      	ldr	r3, [pc, #108]	@ (8010268 <xPortStartScheduler+0x138>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010200:	4a19      	ldr	r2, [pc, #100]	@ (8010268 <xPortStartScheduler+0x138>)
 8010202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	b2da      	uxtb	r2, r3
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801020c:	4b17      	ldr	r3, [pc, #92]	@ (801026c <xPortStartScheduler+0x13c>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a16      	ldr	r2, [pc, #88]	@ (801026c <xPortStartScheduler+0x13c>)
 8010212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010218:	4b14      	ldr	r3, [pc, #80]	@ (801026c <xPortStartScheduler+0x13c>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a13      	ldr	r2, [pc, #76]	@ (801026c <xPortStartScheduler+0x13c>)
 801021e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010224:	f000 f8da 	bl	80103dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010228:	4b11      	ldr	r3, [pc, #68]	@ (8010270 <xPortStartScheduler+0x140>)
 801022a:	2200      	movs	r2, #0
 801022c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801022e:	f000 f8f9 	bl	8010424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010232:	4b10      	ldr	r3, [pc, #64]	@ (8010274 <xPortStartScheduler+0x144>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a0f      	ldr	r2, [pc, #60]	@ (8010274 <xPortStartScheduler+0x144>)
 8010238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801023c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801023e:	f7ff ff63 	bl	8010108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010242:	f7fd fcf7 	bl	800dc34 <vTaskSwitchContext>
	prvTaskExitError();
 8010246:	f7ff ff17 	bl	8010078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3718      	adds	r7, #24
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	e000ed00 	.word	0xe000ed00
 8010258:	410fc271 	.word	0x410fc271
 801025c:	410fc270 	.word	0x410fc270
 8010260:	e000e400 	.word	0xe000e400
 8010264:	20008cf0 	.word	0x20008cf0
 8010268:	20008cf4 	.word	0x20008cf4
 801026c:	e000ed20 	.word	0xe000ed20
 8010270:	20000030 	.word	0x20000030
 8010274:	e000ef34 	.word	0xe000ef34

08010278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
	__asm volatile
 801027e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	607b      	str	r3, [r7, #4]
}
 8010290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010292:	4b10      	ldr	r3, [pc, #64]	@ (80102d4 <vPortEnterCritical+0x5c>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	4a0e      	ldr	r2, [pc, #56]	@ (80102d4 <vPortEnterCritical+0x5c>)
 801029a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801029c:	4b0d      	ldr	r3, [pc, #52]	@ (80102d4 <vPortEnterCritical+0x5c>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d110      	bne.n	80102c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102a4:	4b0c      	ldr	r3, [pc, #48]	@ (80102d8 <vPortEnterCritical+0x60>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00b      	beq.n	80102c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	603b      	str	r3, [r7, #0]
}
 80102c0:	bf00      	nop
 80102c2:	bf00      	nop
 80102c4:	e7fd      	b.n	80102c2 <vPortEnterCritical+0x4a>
	}
}
 80102c6:	bf00      	nop
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20000030 	.word	0x20000030
 80102d8:	e000ed04 	.word	0xe000ed04

080102dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102e2:	4b12      	ldr	r3, [pc, #72]	@ (801032c <vPortExitCritical+0x50>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10b      	bne.n	8010302 <vPortExitCritical+0x26>
	__asm volatile
 80102ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ee:	f383 8811 	msr	BASEPRI, r3
 80102f2:	f3bf 8f6f 	isb	sy
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	607b      	str	r3, [r7, #4]
}
 80102fc:	bf00      	nop
 80102fe:	bf00      	nop
 8010300:	e7fd      	b.n	80102fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010302:	4b0a      	ldr	r3, [pc, #40]	@ (801032c <vPortExitCritical+0x50>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	3b01      	subs	r3, #1
 8010308:	4a08      	ldr	r2, [pc, #32]	@ (801032c <vPortExitCritical+0x50>)
 801030a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801030c:	4b07      	ldr	r3, [pc, #28]	@ (801032c <vPortExitCritical+0x50>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d105      	bne.n	8010320 <vPortExitCritical+0x44>
 8010314:	2300      	movs	r3, #0
 8010316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	f383 8811 	msr	BASEPRI, r3
}
 801031e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010320:	bf00      	nop
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	20000030 	.word	0x20000030

08010330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010330:	f3ef 8009 	mrs	r0, PSP
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	4b15      	ldr	r3, [pc, #84]	@ (8010390 <pxCurrentTCBConst>)
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	f01e 0f10 	tst.w	lr, #16
 8010340:	bf08      	it	eq
 8010342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034a:	6010      	str	r0, [r2, #0]
 801034c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010354:	f380 8811 	msr	BASEPRI, r0
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f7fd fc68 	bl	800dc34 <vTaskSwitchContext>
 8010364:	f04f 0000 	mov.w	r0, #0
 8010368:	f380 8811 	msr	BASEPRI, r0
 801036c:	bc09      	pop	{r0, r3}
 801036e:	6819      	ldr	r1, [r3, #0]
 8010370:	6808      	ldr	r0, [r1, #0]
 8010372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010376:	f01e 0f10 	tst.w	lr, #16
 801037a:	bf08      	it	eq
 801037c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010380:	f380 8809 	msr	PSP, r0
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	4770      	bx	lr
 801038a:	bf00      	nop
 801038c:	f3af 8000 	nop.w

08010390 <pxCurrentTCBConst>:
 8010390:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010394:	bf00      	nop
 8010396:	bf00      	nop

08010398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	607b      	str	r3, [r7, #4]
}
 80103b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103b2:	f7fd fb85 	bl	800dac0 <xTaskIncrementTick>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d003      	beq.n	80103c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103bc:	4b06      	ldr	r3, [pc, #24]	@ (80103d8 <xPortSysTickHandler+0x40>)
 80103be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	2300      	movs	r3, #0
 80103c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	f383 8811 	msr	BASEPRI, r3
}
 80103ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	e000ed04 	.word	0xe000ed04

080103dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103e0:	4b0b      	ldr	r3, [pc, #44]	@ (8010410 <vPortSetupTimerInterrupt+0x34>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010414 <vPortSetupTimerInterrupt+0x38>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010418 <vPortSetupTimerInterrupt+0x3c>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a0a      	ldr	r2, [pc, #40]	@ (801041c <vPortSetupTimerInterrupt+0x40>)
 80103f2:	fba2 2303 	umull	r2, r3, r2, r3
 80103f6:	099b      	lsrs	r3, r3, #6
 80103f8:	4a09      	ldr	r2, [pc, #36]	@ (8010420 <vPortSetupTimerInterrupt+0x44>)
 80103fa:	3b01      	subs	r3, #1
 80103fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103fe:	4b04      	ldr	r3, [pc, #16]	@ (8010410 <vPortSetupTimerInterrupt+0x34>)
 8010400:	2207      	movs	r2, #7
 8010402:	601a      	str	r2, [r3, #0]
}
 8010404:	bf00      	nop
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	e000e010 	.word	0xe000e010
 8010414:	e000e018 	.word	0xe000e018
 8010418:	20000020 	.word	0x20000020
 801041c:	10624dd3 	.word	0x10624dd3
 8010420:	e000e014 	.word	0xe000e014

08010424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010434 <vPortEnableVFP+0x10>
 8010428:	6801      	ldr	r1, [r0, #0]
 801042a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801042e:	6001      	str	r1, [r0, #0]
 8010430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010432:	bf00      	nop
 8010434:	e000ed88 	.word	0xe000ed88

08010438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801043e:	f3ef 8305 	mrs	r3, IPSR
 8010442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b0f      	cmp	r3, #15
 8010448:	d915      	bls.n	8010476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801044a:	4a18      	ldr	r2, [pc, #96]	@ (80104ac <vPortValidateInterruptPriority+0x74>)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	4413      	add	r3, r2
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010454:	4b16      	ldr	r3, [pc, #88]	@ (80104b0 <vPortValidateInterruptPriority+0x78>)
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	7afa      	ldrb	r2, [r7, #11]
 801045a:	429a      	cmp	r2, r3
 801045c:	d20b      	bcs.n	8010476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801045e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010462:	f383 8811 	msr	BASEPRI, r3
 8010466:	f3bf 8f6f 	isb	sy
 801046a:	f3bf 8f4f 	dsb	sy
 801046e:	607b      	str	r3, [r7, #4]
}
 8010470:	bf00      	nop
 8010472:	bf00      	nop
 8010474:	e7fd      	b.n	8010472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010476:	4b0f      	ldr	r3, [pc, #60]	@ (80104b4 <vPortValidateInterruptPriority+0x7c>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801047e:	4b0e      	ldr	r3, [pc, #56]	@ (80104b8 <vPortValidateInterruptPriority+0x80>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	429a      	cmp	r2, r3
 8010484:	d90b      	bls.n	801049e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	603b      	str	r3, [r7, #0]
}
 8010498:	bf00      	nop
 801049a:	bf00      	nop
 801049c:	e7fd      	b.n	801049a <vPortValidateInterruptPriority+0x62>
	}
 801049e:	bf00      	nop
 80104a0:	3714      	adds	r7, #20
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	e000e3f0 	.word	0xe000e3f0
 80104b0:	20008cf0 	.word	0x20008cf0
 80104b4:	e000ed0c 	.word	0xe000ed0c
 80104b8:	20008cf4 	.word	0x20008cf4

080104bc <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	4603      	mov	r3, r0
 80104c4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80104c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	dc04      	bgt.n	80104d8 <err_to_errno+0x1c>
 80104ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104d2:	f113 0f10 	cmn.w	r3, #16
 80104d6:	da01      	bge.n	80104dc <err_to_errno+0x20>
    return EIO;
 80104d8:	2305      	movs	r3, #5
 80104da:	e005      	b.n	80104e8 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80104dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e0:	425b      	negs	r3, r3
 80104e2:	4a04      	ldr	r2, [pc, #16]	@ (80104f4 <err_to_errno+0x38>)
 80104e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr
 80104f4:	08028bd0 	.word	0x08028bd0

080104f8 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	60fb      	str	r3, [r7, #12]

  netif_set_addr( msg->netif,
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6858      	ldr	r0, [r3, #4]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	6899      	ldr	r1, [r3, #8]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	68da      	ldr	r2, [r3, #12]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	f009 fdec 	bl	801a0f0 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b084      	sub	sp, #16
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d007      	beq.n	8010546 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	6852      	ldr	r2, [r2, #4]
 801053e:	4610      	mov	r0, r2
 8010540:	4798      	blx	r3
 8010542:	4603      	mov	r3, r0
 8010544:	e006      	b.n	8010554 <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	6852      	ldr	r2, [r2, #4]
 801054e:	4610      	mov	r0, r2
 8010550:	4798      	blx	r3
    return ERR_OK;
 8010552:	2300      	movs	r3, #0
  }
}
 8010554:	4618      	mov	r0, r3
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08e      	sub	sp, #56	@ 0x38
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
 8010568:	603b      	str	r3, [r7, #0]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d101      	bne.n	8010574 <netifapi_netif_set_addr+0x18>
    ipaddr = IP4_ADDR_ANY4;
 8010570:	4b11      	ldr	r3, [pc, #68]	@ (80105b8 <netifapi_netif_set_addr+0x5c>)
 8010572:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <netifapi_netif_set_addr+0x22>
    netmask = IP4_ADDR_ANY4;
 801057a:	4b0f      	ldr	r3, [pc, #60]	@ (80105b8 <netifapi_netif_set_addr+0x5c>)
 801057c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d101      	bne.n	8010588 <netifapi_netif_set_addr+0x2c>
    gw = IP4_ADDR_ANY4;
 8010584:	4b0c      	ldr	r3, [pc, #48]	@ (80105b8 <netifapi_netif_set_addr+0x5c>)
 8010586:	603b      	str	r3, [r7, #0]
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	623b      	str	r3, [r7, #32]
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	627b      	str	r3, [r7, #36]	@ 0x24
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 8010598:	f107 0314 	add.w	r3, r7, #20
 801059c:	4619      	mov	r1, r3
 801059e:	4807      	ldr	r0, [pc, #28]	@ (80105bc <netifapi_netif_set_addr+0x60>)
 80105a0:	f003 feb0 	bl	8014304 <tcpip_api_call>
 80105a4:	4603      	mov	r3, r0
 80105a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 80105aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3738      	adds	r7, #56	@ 0x38
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	08028c18 	.word	0x08028c18
 80105bc:	080104f9 	.word	0x080104f9

080105c0 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b08e      	sub	sp, #56	@ 0x38
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 80105d8:	f107 0314 	add.w	r3, r7, #20
 80105dc:	4619      	mov	r1, r3
 80105de:	4806      	ldr	r0, [pc, #24]	@ (80105f8 <netifapi_netif_common+0x38>)
 80105e0:	f003 fe90 	bl	8014304 <tcpip_api_call>
 80105e4:	4603      	mov	r3, r0
 80105e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 80105ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3738      	adds	r7, #56	@ 0x38
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08010523 	.word	0x08010523

080105fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	4603      	mov	r3, r0
 8010604:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801060a:	f113 0f0d 	cmn.w	r3, #13
 801060e:	d009      	beq.n	8010624 <lwip_netconn_err_to_msg+0x28>
 8010610:	f113 0f0d 	cmn.w	r3, #13
 8010614:	dc0c      	bgt.n	8010630 <lwip_netconn_err_to_msg+0x34>
 8010616:	f113 0f0f 	cmn.w	r3, #15
 801061a:	d007      	beq.n	801062c <lwip_netconn_err_to_msg+0x30>
 801061c:	f113 0f0e 	cmn.w	r3, #14
 8010620:	d002      	beq.n	8010628 <lwip_netconn_err_to_msg+0x2c>
 8010622:	e005      	b.n	8010630 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010624:	4b0a      	ldr	r3, [pc, #40]	@ (8010650 <lwip_netconn_err_to_msg+0x54>)
 8010626:	e00e      	b.n	8010646 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010628:	4b0a      	ldr	r3, [pc, #40]	@ (8010654 <lwip_netconn_err_to_msg+0x58>)
 801062a:	e00c      	b.n	8010646 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801062c:	4b0a      	ldr	r3, [pc, #40]	@ (8010658 <lwip_netconn_err_to_msg+0x5c>)
 801062e:	e00a      	b.n	8010646 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <lwip_netconn_err_to_msg+0x48>
 8010638:	4b08      	ldr	r3, [pc, #32]	@ (801065c <lwip_netconn_err_to_msg+0x60>)
 801063a:	227d      	movs	r2, #125	@ 0x7d
 801063c:	4908      	ldr	r1, [pc, #32]	@ (8010660 <lwip_netconn_err_to_msg+0x64>)
 801063e:	4809      	ldr	r0, [pc, #36]	@ (8010664 <lwip_netconn_err_to_msg+0x68>)
 8010640:	f012 f97a 	bl	8022938 <iprintf>
      return NULL;
 8010644:	2300      	movs	r3, #0
  }
}
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	08028c14 	.word	0x08028c14
 8010654:	08028c15 	.word	0x08028c15
 8010658:	08028c16 	.word	0x08028c16
 801065c:	08023ff8 	.word	0x08023ff8
 8010660:	08024070 	.word	0x08024070
 8010664:	08024080 	.word	0x08024080

08010668 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d105      	bne.n	8010684 <lwip_netconn_is_err_msg+0x1c>
 8010678:	4b12      	ldr	r3, [pc, #72]	@ (80106c4 <lwip_netconn_is_err_msg+0x5c>)
 801067a:	2285      	movs	r2, #133	@ 0x85
 801067c:	4912      	ldr	r1, [pc, #72]	@ (80106c8 <lwip_netconn_is_err_msg+0x60>)
 801067e:	4813      	ldr	r0, [pc, #76]	@ (80106cc <lwip_netconn_is_err_msg+0x64>)
 8010680:	f012 f95a 	bl	8022938 <iprintf>

  if (msg == &netconn_aborted) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4a12      	ldr	r2, [pc, #72]	@ (80106d0 <lwip_netconn_is_err_msg+0x68>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d104      	bne.n	8010696 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	22f3      	movs	r2, #243	@ 0xf3
 8010690:	701a      	strb	r2, [r3, #0]
    return 1;
 8010692:	2301      	movs	r3, #1
 8010694:	e012      	b.n	80106bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a0e      	ldr	r2, [pc, #56]	@ (80106d4 <lwip_netconn_is_err_msg+0x6c>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d104      	bne.n	80106a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	22f2      	movs	r2, #242	@ 0xf2
 80106a2:	701a      	strb	r2, [r3, #0]
    return 1;
 80106a4:	2301      	movs	r3, #1
 80106a6:	e009      	b.n	80106bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4a0b      	ldr	r2, [pc, #44]	@ (80106d8 <lwip_netconn_is_err_msg+0x70>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d104      	bne.n	80106ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	22f1      	movs	r2, #241	@ 0xf1
 80106b4:	701a      	strb	r2, [r3, #0]
    return 1;
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80106ba:	2300      	movs	r3, #0
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	08023ff8 	.word	0x08023ff8
 80106c8:	080240a8 	.word	0x080240a8
 80106cc:	08024080 	.word	0x08024080
 80106d0:	08028c14 	.word	0x08028c14
 80106d4:	08028c15 	.word	0x08028c15
 80106d8:	08028c16 	.word	0x08028c16

080106dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b088      	sub	sp, #32
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d105      	bne.n	80106fc <recv_udp+0x20>
 80106f0:	4b34      	ldr	r3, [pc, #208]	@ (80107c4 <recv_udp+0xe8>)
 80106f2:	22e5      	movs	r2, #229	@ 0xe5
 80106f4:	4934      	ldr	r1, [pc, #208]	@ (80107c8 <recv_udp+0xec>)
 80106f6:	4835      	ldr	r0, [pc, #212]	@ (80107cc <recv_udp+0xf0>)
 80106f8:	f012 f91e 	bl	8022938 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d105      	bne.n	801070e <recv_udp+0x32>
 8010702:	4b30      	ldr	r3, [pc, #192]	@ (80107c4 <recv_udp+0xe8>)
 8010704:	22e6      	movs	r2, #230	@ 0xe6
 8010706:	4932      	ldr	r1, [pc, #200]	@ (80107d0 <recv_udp+0xf4>)
 8010708:	4830      	ldr	r0, [pc, #192]	@ (80107cc <recv_udp+0xf0>)
 801070a:	f012 f915 	bl	8022938 <iprintf>
  conn = (struct netconn *)arg;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d103      	bne.n	8010720 <recv_udp+0x44>
    pbuf_free(p);
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f00a fa33 	bl	801ab84 <pbuf_free>
    return;
 801071e:	e04d      	b.n	80107bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	429a      	cmp	r2, r3
 8010728:	d005      	beq.n	8010736 <recv_udp+0x5a>
 801072a:	4b26      	ldr	r3, [pc, #152]	@ (80107c4 <recv_udp+0xe8>)
 801072c:	22ee      	movs	r2, #238	@ 0xee
 801072e:	4929      	ldr	r1, [pc, #164]	@ (80107d4 <recv_udp+0xf8>)
 8010730:	4826      	ldr	r0, [pc, #152]	@ (80107cc <recv_udp+0xf0>)
 8010732:	f012 f901 	bl	8022938 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	3310      	adds	r3, #16
 801073a:	4618      	mov	r0, r3
 801073c:	f011 fe8c 	bl	8022458 <sys_mbox_valid>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d103      	bne.n	801074e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f00a fa1c 	bl	801ab84 <pbuf_free>
    return;
 801074c:	e036      	b.n	80107bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801074e:	2006      	movs	r0, #6
 8010750:	f009 faaa 	bl	8019ca8 <memp_malloc>
 8010754:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d103      	bne.n	8010764 <recv_udp+0x88>
    pbuf_free(p);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f00a fa11 	bl	801ab84 <pbuf_free>
    return;
 8010762:	e02b      	b.n	80107bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d002      	beq.n	801077c <recv_udp+0xa0>
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	e000      	b.n	801077e <recv_udp+0xa2>
 801077c:	2300      	movs	r3, #0
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010786:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	3310      	adds	r3, #16
 8010792:	69b9      	ldr	r1, [r7, #24]
 8010794:	4618      	mov	r0, r3
 8010796:	f011 fdfd 	bl	8022394 <sys_mbox_trypost>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d003      	beq.n	80107a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80107a0:	69b8      	ldr	r0, [r7, #24]
 80107a2:	f002 f9bb 	bl	8012b1c <netbuf_delete>
    return;
 80107a6:	e009      	b.n	80107bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d005      	beq.n	80107bc <recv_udp+0xe0>
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107b4:	8afa      	ldrh	r2, [r7, #22]
 80107b6:	2100      	movs	r1, #0
 80107b8:	69f8      	ldr	r0, [r7, #28]
 80107ba:	4798      	blx	r3
  }
}
 80107bc:	3720      	adds	r7, #32
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	08023ff8 	.word	0x08023ff8
 80107c8:	080240b4 	.word	0x080240b4
 80107cc:	08024080 	.word	0x08024080
 80107d0:	080240d8 	.word	0x080240d8
 80107d4:	080240f8 	.word	0x080240f8

080107d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b088      	sub	sp, #32
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
 80107e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <recv_tcp+0x22>
 80107ec:	4b36      	ldr	r3, [pc, #216]	@ (80108c8 <recv_tcp+0xf0>)
 80107ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80107f2:	4936      	ldr	r1, [pc, #216]	@ (80108cc <recv_tcp+0xf4>)
 80107f4:	4836      	ldr	r0, [pc, #216]	@ (80108d0 <recv_tcp+0xf8>)
 80107f6:	f012 f89f 	bl	8022938 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d106      	bne.n	801080e <recv_tcp+0x36>
 8010800:	4b31      	ldr	r3, [pc, #196]	@ (80108c8 <recv_tcp+0xf0>)
 8010802:	f240 122d 	movw	r2, #301	@ 0x12d
 8010806:	4933      	ldr	r1, [pc, #204]	@ (80108d4 <recv_tcp+0xfc>)
 8010808:	4831      	ldr	r0, [pc, #196]	@ (80108d0 <recv_tcp+0xf8>)
 801080a:	f012 f895 	bl	8022938 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801080e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d006      	beq.n	8010824 <recv_tcp+0x4c>
 8010816:	4b2c      	ldr	r3, [pc, #176]	@ (80108c8 <recv_tcp+0xf0>)
 8010818:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801081c:	492e      	ldr	r1, [pc, #184]	@ (80108d8 <recv_tcp+0x100>)
 801081e:	482c      	ldr	r0, [pc, #176]	@ (80108d0 <recv_tcp+0xf8>)
 8010820:	f012 f88a 	bl	8022938 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d102      	bne.n	8010834 <recv_tcp+0x5c>
    return ERR_VAL;
 801082e:	f06f 0305 	mvn.w	r3, #5
 8010832:	e045      	b.n	80108c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	429a      	cmp	r2, r3
 801083c:	d006      	beq.n	801084c <recv_tcp+0x74>
 801083e:	4b22      	ldr	r3, [pc, #136]	@ (80108c8 <recv_tcp+0xf0>)
 8010840:	f240 1235 	movw	r2, #309	@ 0x135
 8010844:	4925      	ldr	r1, [pc, #148]	@ (80108dc <recv_tcp+0x104>)
 8010846:	4822      	ldr	r0, [pc, #136]	@ (80108d0 <recv_tcp+0xf8>)
 8010848:	f012 f876 	bl	8022938 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	3310      	adds	r3, #16
 8010850:	4618      	mov	r0, r3
 8010852:	f011 fe01 	bl	8022458 <sys_mbox_valid>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10d      	bne.n	8010878 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d008      	beq.n	8010874 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	891b      	ldrh	r3, [r3, #8]
 8010866:	4619      	mov	r1, r3
 8010868:	68b8      	ldr	r0, [r7, #8]
 801086a:	f00b f9e5 	bl	801bc38 <tcp_recved>
      pbuf_free(p);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f00a f988 	bl	801ab84 <pbuf_free>
    }
    return ERR_OK;
 8010874:	2300      	movs	r3, #0
 8010876:	e023      	b.n	80108c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d005      	beq.n	801088a <recv_tcp+0xb2>
    msg = p;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	891b      	ldrh	r3, [r3, #8]
 8010886:	83fb      	strh	r3, [r7, #30]
 8010888:	e003      	b.n	8010892 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801088a:	4b15      	ldr	r3, [pc, #84]	@ (80108e0 <recv_tcp+0x108>)
 801088c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	3310      	adds	r3, #16
 8010896:	69b9      	ldr	r1, [r7, #24]
 8010898:	4618      	mov	r0, r3
 801089a:	f011 fd7b 	bl	8022394 <sys_mbox_trypost>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80108a4:	f04f 33ff 	mov.w	r3, #4294967295
 80108a8:	e00a      	b.n	80108c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d005      	beq.n	80108be <recv_tcp+0xe6>
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108b6:	8bfa      	ldrh	r2, [r7, #30]
 80108b8:	2100      	movs	r1, #0
 80108ba:	6978      	ldr	r0, [r7, #20]
 80108bc:	4798      	blx	r3
  }

  return ERR_OK;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3720      	adds	r7, #32
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	08023ff8 	.word	0x08023ff8
 80108cc:	08024118 	.word	0x08024118
 80108d0:	08024080 	.word	0x08024080
 80108d4:	0802413c 	.word	0x0802413c
 80108d8:	0802415c 	.word	0x0802415c
 80108dc:	08024174 	.word	0x08024174
 80108e0:	08028c16 	.word	0x08028c16

080108e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d106      	bne.n	8010906 <poll_tcp+0x22>
 80108f8:	4b2a      	ldr	r3, [pc, #168]	@ (80109a4 <poll_tcp+0xc0>)
 80108fa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80108fe:	492a      	ldr	r1, [pc, #168]	@ (80109a8 <poll_tcp+0xc4>)
 8010900:	482a      	ldr	r0, [pc, #168]	@ (80109ac <poll_tcp+0xc8>)
 8010902:	f012 f819 	bl	8022938 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	785b      	ldrb	r3, [r3, #1]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d104      	bne.n	8010918 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801090e:	2101      	movs	r1, #1
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f000 ffb5 	bl	8011880 <lwip_netconn_do_writemore>
 8010916:	e016      	b.n	8010946 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b04      	cmp	r3, #4
 801091e:	d112      	bne.n	8010946 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6a1b      	ldr	r3, [r3, #32]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00a      	beq.n	801093e <poll_tcp+0x5a>
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6a1b      	ldr	r3, [r3, #32]
 801092c:	7a5b      	ldrb	r3, [r3, #9]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d005      	beq.n	801093e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6a1b      	ldr	r3, [r3, #32]
 8010936:	7a5a      	ldrb	r2, [r3, #9]
 8010938:	3a01      	subs	r2, #1
 801093a:	b2d2      	uxtb	r2, r2
 801093c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801093e:	2101      	movs	r1, #1
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f000 fbfb 	bl	801113c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	7f1b      	ldrb	r3, [r3, #28]
 801094a:	f003 0310 	and.w	r3, r3, #16
 801094e:	2b00      	cmp	r3, #0
 8010950:	d022      	beq.n	8010998 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d01e      	beq.n	8010998 <poll_tcp+0xb4>
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010962:	f640 3269 	movw	r2, #2921	@ 0xb69
 8010966:	4293      	cmp	r3, r2
 8010968:	d916      	bls.n	8010998 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010972:	2b07      	cmp	r3, #7
 8010974:	d810      	bhi.n	8010998 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	7f1b      	ldrb	r3, [r3, #28]
 801097a:	f023 0310 	bic.w	r3, r3, #16
 801097e:	b2da      	uxtb	r2, r3
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010988:	2b00      	cmp	r3, #0
 801098a:	d005      	beq.n	8010998 <poll_tcp+0xb4>
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010990:	2200      	movs	r2, #0
 8010992:	2102      	movs	r1, #2
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	08023ff8 	.word	0x08023ff8
 80109a8:	08024194 	.word	0x08024194
 80109ac:	08024080 	.word	0x08024080

080109b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	4613      	mov	r3, r2
 80109bc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <sent_tcp+0x26>
 80109c8:	4b21      	ldr	r3, [pc, #132]	@ (8010a50 <sent_tcp+0xa0>)
 80109ca:	f240 1293 	movw	r2, #403	@ 0x193
 80109ce:	4921      	ldr	r1, [pc, #132]	@ (8010a54 <sent_tcp+0xa4>)
 80109d0:	4821      	ldr	r0, [pc, #132]	@ (8010a58 <sent_tcp+0xa8>)
 80109d2:	f011 ffb1 	bl	8022938 <iprintf>

  if (conn) {
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d033      	beq.n	8010a44 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	785b      	ldrb	r3, [r3, #1]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d104      	bne.n	80109ee <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80109e4:	2101      	movs	r1, #1
 80109e6:	6978      	ldr	r0, [r7, #20]
 80109e8:	f000 ff4a 	bl	8011880 <lwip_netconn_do_writemore>
 80109ec:	e007      	b.n	80109fe <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	2b04      	cmp	r3, #4
 80109f4:	d103      	bne.n	80109fe <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80109f6:	2101      	movs	r1, #1
 80109f8:	6978      	ldr	r0, [r7, #20]
 80109fa:	f000 fb9f 	bl	801113c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d01e      	beq.n	8010a44 <sent_tcp+0x94>
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a0e:	f640 3269 	movw	r2, #2921	@ 0xb69
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d916      	bls.n	8010a44 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010a1e:	2b07      	cmp	r3, #7
 8010a20:	d810      	bhi.n	8010a44 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	7f1b      	ldrb	r3, [r3, #28]
 8010a26:	f023 0310 	bic.w	r3, r3, #16
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d005      	beq.n	8010a44 <sent_tcp+0x94>
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a3c:	88fa      	ldrh	r2, [r7, #6]
 8010a3e:	2102      	movs	r1, #2
 8010a40:	6978      	ldr	r0, [r7, #20]
 8010a42:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3718      	adds	r7, #24
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	08023ff8 	.word	0x08023ff8
 8010a54:	08024194 	.word	0x08024194
 8010a58:	08024080 	.word	0x08024080

08010a5c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b088      	sub	sp, #32
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <err_tcp+0x24>
 8010a72:	4b5f      	ldr	r3, [pc, #380]	@ (8010bf0 <err_tcp+0x194>)
 8010a74:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010a78:	495e      	ldr	r1, [pc, #376]	@ (8010bf4 <err_tcp+0x198>)
 8010a7a:	485f      	ldr	r0, [pc, #380]	@ (8010bf8 <err_tcp+0x19c>)
 8010a7c:	f011 ff5c 	bl	8022938 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010a80:	f011 fdf4 	bl	802266c <sys_arch_protect>
 8010a84:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	78fa      	ldrb	r2, [r7, #3]
 8010a90:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	7f1b      	ldrb	r3, [r3, #28]
 8010a96:	f043 0301 	orr.w	r3, r3, #1
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	785b      	ldrb	r3, [r3, #1]
 8010aa4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010aac:	69b8      	ldr	r0, [r7, #24]
 8010aae:	f011 fdeb 	bl	8022688 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d005      	beq.n	8010ac6 <err_tcp+0x6a>
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010abe:	2200      	movs	r2, #0
 8010ac0:	2104      	movs	r1, #4
 8010ac2:	69f8      	ldr	r0, [r7, #28]
 8010ac4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d005      	beq.n	8010ada <err_tcp+0x7e>
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	69f8      	ldr	r0, [r7, #28]
 8010ad8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d005      	beq.n	8010aee <err_tcp+0x92>
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	2102      	movs	r1, #2
 8010aea:	69f8      	ldr	r0, [r7, #28]
 8010aec:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fd82 	bl	80105fc <lwip_netconn_err_to_msg>
 8010af8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	3310      	adds	r3, #16
 8010afe:	4618      	mov	r0, r3
 8010b00:	f011 fcaa 	bl	8022458 <sys_mbox_valid>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d005      	beq.n	8010b16 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	3310      	adds	r3, #16
 8010b0e:	6939      	ldr	r1, [r7, #16]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f011 fc3f 	bl	8022394 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	3314      	adds	r3, #20
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f011 fc9c 	bl	8022458 <sys_mbox_valid>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d005      	beq.n	8010b32 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	3314      	adds	r3, #20
 8010b2a:	6939      	ldr	r1, [r7, #16]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f011 fc31 	bl	8022394 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010b32:	7dfb      	ldrb	r3, [r7, #23]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d005      	beq.n	8010b44 <err_tcp+0xe8>
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	d002      	beq.n	8010b44 <err_tcp+0xe8>
 8010b3e:	7dfb      	ldrb	r3, [r7, #23]
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d143      	bne.n	8010bcc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	7f1b      	ldrb	r3, [r3, #28]
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	bf14      	ite	ne
 8010b50:	2301      	movne	r3, #1
 8010b52:	2300      	moveq	r3, #0
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	7f1b      	ldrb	r3, [r3, #28]
 8010b5c:	f023 0304 	bic.w	r3, r3, #4
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d13b      	bne.n	8010be4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	6a1b      	ldr	r3, [r3, #32]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <err_tcp+0x126>
 8010b74:	4b1e      	ldr	r3, [pc, #120]	@ (8010bf0 <err_tcp+0x194>)
 8010b76:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010b7a:	4920      	ldr	r1, [pc, #128]	@ (8010bfc <err_tcp+0x1a0>)
 8010b7c:	481e      	ldr	r0, [pc, #120]	@ (8010bf8 <err_tcp+0x19c>)
 8010b7e:	f011 fedb 	bl	8022938 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010b82:	7dfb      	ldrb	r3, [r7, #23]
 8010b84:	2b04      	cmp	r3, #4
 8010b86:	d104      	bne.n	8010b92 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	6a1b      	ldr	r3, [r3, #32]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	711a      	strb	r2, [r3, #4]
 8010b90:	e003      	b.n	8010b9a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	78fa      	ldrb	r2, [r7, #3]
 8010b98:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	6a1b      	ldr	r3, [r3, #32]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	330c      	adds	r3, #12
 8010ba2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f011 fce5 	bl	8022574 <sys_sem_valid>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <err_tcp+0x162>
 8010bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8010bf0 <err_tcp+0x194>)
 8010bb2:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010bb6:	4912      	ldr	r1, [pc, #72]	@ (8010c00 <err_tcp+0x1a4>)
 8010bb8:	480f      	ldr	r0, [pc, #60]	@ (8010bf8 <err_tcp+0x19c>)
 8010bba:	f011 febd 	bl	8022938 <iprintf>
      conn->current_msg = NULL;
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010bc4:	68b8      	ldr	r0, [r7, #8]
 8010bc6:	f011 fcbb 	bl	8022540 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010bca:	e00b      	b.n	8010be4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	6a1b      	ldr	r3, [r3, #32]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d008      	beq.n	8010be6 <err_tcp+0x18a>
 8010bd4:	4b06      	ldr	r3, [pc, #24]	@ (8010bf0 <err_tcp+0x194>)
 8010bd6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8010bda:	490a      	ldr	r1, [pc, #40]	@ (8010c04 <err_tcp+0x1a8>)
 8010bdc:	4806      	ldr	r0, [pc, #24]	@ (8010bf8 <err_tcp+0x19c>)
 8010bde:	f011 feab 	bl	8022938 <iprintf>
  }
}
 8010be2:	e000      	b.n	8010be6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010be4:	bf00      	nop
}
 8010be6:	bf00      	nop
 8010be8:	3720      	adds	r7, #32
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	08023ff8 	.word	0x08023ff8
 8010bf4:	08024194 	.word	0x08024194
 8010bf8:	08024080 	.word	0x08024080
 8010bfc:	080241a4 	.word	0x080241a4
 8010c00:	080241c0 	.word	0x080241c0
 8010c04:	080241dc 	.word	0x080241dc

08010c08 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010c16:	6879      	ldr	r1, [r7, #4]
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f00b fed9 	bl	801c9d0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010c1e:	490a      	ldr	r1, [pc, #40]	@ (8010c48 <setup_tcp+0x40>)
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f00b fee7 	bl	801c9f4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010c26:	4909      	ldr	r1, [pc, #36]	@ (8010c4c <setup_tcp+0x44>)
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f00b ff05 	bl	801ca38 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010c2e:	2202      	movs	r2, #2
 8010c30:	4907      	ldr	r1, [pc, #28]	@ (8010c50 <setup_tcp+0x48>)
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f00b ff5c 	bl	801caf0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010c38:	4906      	ldr	r1, [pc, #24]	@ (8010c54 <setup_tcp+0x4c>)
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f00b ff1e 	bl	801ca7c <tcp_err>
}
 8010c40:	bf00      	nop
 8010c42:	3710      	adds	r7, #16
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	080107d9 	.word	0x080107d9
 8010c4c:	080109b1 	.word	0x080109b1
 8010c50:	080108e5 	.word	0x080108e5
 8010c54:	08010a5d 	.word	0x08010a5d

08010c58 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010c58:	b590      	push	{r4, r7, lr}
 8010c5a:	b089      	sub	sp, #36	@ 0x24
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	4613      	mov	r3, r2
 8010c64:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d102      	bne.n	8010c76 <accept_function+0x1e>
    return ERR_VAL;
 8010c70:	f06f 0305 	mvn.w	r3, #5
 8010c74:	e0a1      	b.n	8010dba <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	3314      	adds	r3, #20
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f011 fbec 	bl	8022458 <sys_mbox_valid>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8010c86:	f06f 0305 	mvn.w	r3, #5
 8010c8a:	e096      	b.n	8010dba <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d11b      	bne.n	8010cca <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	f103 0414 	add.w	r4, r3, #20
 8010c98:	f06f 000c 	mvn.w	r0, #12
 8010c9c:	f7ff fcae 	bl	80105fc <lwip_netconn_err_to_msg>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f011 fb75 	bl	8022394 <sys_mbox_trypost>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d109      	bne.n	8010cc4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d005      	beq.n	8010cc4 <accept_function+0x6c>
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	69f8      	ldr	r0, [r7, #28]
 8010cc2:	4798      	blx	r3
    }
    return ERR_VAL;
 8010cc4:	f06f 0305 	mvn.w	r3, #5
 8010cc8:	e077      	b.n	8010dba <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8010cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d006      	beq.n	8010ce0 <accept_function+0x88>
 8010cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8010dc4 <accept_function+0x16c>)
 8010cd4:	f240 222a 	movw	r2, #554	@ 0x22a
 8010cd8:	493b      	ldr	r1, [pc, #236]	@ (8010dc8 <accept_function+0x170>)
 8010cda:	483c      	ldr	r0, [pc, #240]	@ (8010dcc <accept_function+0x174>)
 8010cdc:	f011 fe2c 	bl	8022938 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	781a      	ldrb	r2, [r3, #0]
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce8:	4619      	mov	r1, r3
 8010cea:	4610      	mov	r0, r2
 8010cec:	f000 f8f0 	bl	8010ed0 <netconn_alloc>
 8010cf0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d11b      	bne.n	8010d30 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	f103 0414 	add.w	r4, r3, #20
 8010cfe:	f06f 000c 	mvn.w	r0, #12
 8010d02:	f7ff fc7b 	bl	80105fc <lwip_netconn_err_to_msg>
 8010d06:	4603      	mov	r3, r0
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f011 fb42 	bl	8022394 <sys_mbox_trypost>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d109      	bne.n	8010d2a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d005      	beq.n	8010d2a <accept_function+0xd2>
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d22:	2200      	movs	r2, #0
 8010d24:	2100      	movs	r1, #0
 8010d26:	69f8      	ldr	r0, [r7, #28]
 8010d28:	4798      	blx	r3
    }
    return ERR_MEM;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2e:	e044      	b.n	8010dba <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8010d36:	69b8      	ldr	r0, [r7, #24]
 8010d38:	f7ff ff66 	bl	8010c08 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	3314      	adds	r3, #20
 8010d40:	69b9      	ldr	r1, [r7, #24]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f011 fb26 	bl	8022394 <sys_mbox_trypost>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d02a      	beq.n	8010da4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8010d54:	2100      	movs	r1, #0
 8010d56:	6978      	ldr	r0, [r7, #20]
 8010d58:	f00b fe3a 	bl	801c9d0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	6978      	ldr	r0, [r7, #20]
 8010d60:	f00b fe48 	bl	801c9f4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8010d64:	2100      	movs	r1, #0
 8010d66:	6978      	ldr	r0, [r7, #20]
 8010d68:	f00b fe66 	bl	801ca38 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2100      	movs	r1, #0
 8010d70:	6978      	ldr	r0, [r7, #20]
 8010d72:	f00b febd 	bl	801caf0 <tcp_poll>
    tcp_err(pcb, NULL);
 8010d76:	2100      	movs	r1, #0
 8010d78:	6978      	ldr	r0, [r7, #20]
 8010d7a:	f00b fe7f 	bl	801ca7c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	2200      	movs	r2, #0
 8010d82:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	3310      	adds	r3, #16
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f011 faf1 	bl	8022370 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	3310      	adds	r3, #16
 8010d92:	4618      	mov	r0, r3
 8010d94:	f011 fb71 	bl	802247a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8010d98:	69b8      	ldr	r0, [r7, #24]
 8010d9a:	f000 f907 	bl	8010fac <netconn_free>
    return ERR_MEM;
 8010d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010da2:	e00a      	b.n	8010dba <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d005      	beq.n	8010db8 <accept_function+0x160>
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db0:	2200      	movs	r2, #0
 8010db2:	2100      	movs	r1, #0
 8010db4:	69f8      	ldr	r0, [r7, #28]
 8010db6:	4798      	blx	r3
  }

  return ERR_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3724      	adds	r7, #36	@ 0x24
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd90      	pop	{r4, r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	08023ff8 	.word	0x08023ff8
 8010dc8:	080241f8 	.word	0x080241f8
 8010dcc:	08024080 	.word	0x08024080

08010dd0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010dd0:	b590      	push	{r4, r7, lr}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d006      	beq.n	8010df4 <pcb_new+0x24>
 8010de6:	4b2b      	ldr	r3, [pc, #172]	@ (8010e94 <pcb_new+0xc4>)
 8010de8:	f240 2265 	movw	r2, #613	@ 0x265
 8010dec:	492a      	ldr	r1, [pc, #168]	@ (8010e98 <pcb_new+0xc8>)
 8010dee:	482b      	ldr	r0, [pc, #172]	@ (8010e9c <pcb_new+0xcc>)
 8010df0:	f011 fda2 	bl	8022938 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010dfe:	2b10      	cmp	r3, #16
 8010e00:	d022      	beq.n	8010e48 <pcb_new+0x78>
 8010e02:	2b20      	cmp	r3, #32
 8010e04:	d133      	bne.n	8010e6e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681c      	ldr	r4, [r3, #0]
 8010e0a:	7bfb      	ldrb	r3, [r7, #15]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f011 f981 	bl	8022114 <udp_new_ip_type>
 8010e12:	4603      	mov	r3, r0
 8010e14:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d02a      	beq.n	8010e76 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	2b22      	cmp	r3, #34	@ 0x22
 8010e28:	d104      	bne.n	8010e34 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	2201      	movs	r2, #1
 8010e32:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	6858      	ldr	r0, [r3, #4]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	4917      	ldr	r1, [pc, #92]	@ (8010ea0 <pcb_new+0xd0>)
 8010e42:	f011 f8eb 	bl	802201c <udp_recv>
      }
      break;
 8010e46:	e016      	b.n	8010e76 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681c      	ldr	r4, [r3, #0]
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f00b fdb0 	bl	801c9b4 <tcp_new_ip_type>
 8010e54:	4603      	mov	r3, r0
 8010e56:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00b      	beq.n	8010e7a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff fece 	bl	8010c08 <setup_tcp>
      }
      break;
 8010e6c:	e005      	b.n	8010e7a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	22fa      	movs	r2, #250	@ 0xfa
 8010e72:	711a      	strb	r2, [r3, #4]
      return;
 8010e74:	e00a      	b.n	8010e8c <pcb_new+0xbc>
      break;
 8010e76:	bf00      	nop
 8010e78:	e000      	b.n	8010e7c <pcb_new+0xac>
      break;
 8010e7a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d102      	bne.n	8010e8c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	22ff      	movs	r2, #255	@ 0xff
 8010e8a:	711a      	strb	r2, [r3, #4]
  }
}
 8010e8c:	3714      	adds	r7, #20
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd90      	pop	{r4, r7, pc}
 8010e92:	bf00      	nop
 8010e94:	08023ff8 	.word	0x08023ff8
 8010e98:	08024220 	.word	0x08024220
 8010e9c:	08024080 	.word	0x08024080
 8010ea0:	080106dd 	.word	0x080106dd

08010ea4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d102      	bne.n	8010ec6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	f7ff ff85 	bl	8010dd0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010ec6:	bf00      	nop
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
	...

08010ed0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b086      	sub	sp, #24
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	6039      	str	r1, [r7, #0]
 8010eda:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010ee0:	2007      	movs	r0, #7
 8010ee2:	f008 fee1 	bl	8019ca8 <memp_malloc>
 8010ee6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <netconn_alloc+0x22>
    return NULL;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e052      	b.n	8010f98 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	79fa      	ldrb	r2, [r7, #7]
 8010efc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2200      	movs	r2, #0
 8010f02:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f0a:	2b10      	cmp	r3, #16
 8010f0c:	d004      	beq.n	8010f18 <netconn_alloc+0x48>
 8010f0e:	2b20      	cmp	r3, #32
 8010f10:	d105      	bne.n	8010f1e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010f12:	2306      	movs	r3, #6
 8010f14:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010f16:	e00a      	b.n	8010f2e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010f18:	2306      	movs	r3, #6
 8010f1a:	617b      	str	r3, [r7, #20]
      break;
 8010f1c:	e007      	b.n	8010f2e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010f1e:	4b20      	ldr	r3, [pc, #128]	@ (8010fa0 <netconn_alloc+0xd0>)
 8010f20:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8010f24:	491f      	ldr	r1, [pc, #124]	@ (8010fa4 <netconn_alloc+0xd4>)
 8010f26:	4820      	ldr	r0, [pc, #128]	@ (8010fa8 <netconn_alloc+0xd8>)
 8010f28:	f011 fd06 	bl	8022938 <iprintf>
      goto free_and_return;
 8010f2c:	e02f      	b.n	8010f8e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	3310      	adds	r3, #16
 8010f32:	6979      	ldr	r1, [r7, #20]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f011 fa01 	bl	802233c <sys_mbox_new>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d125      	bne.n	8010f8c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	330c      	adds	r3, #12
 8010f44:	2100      	movs	r1, #0
 8010f46:	4618      	mov	r0, r3
 8010f48:	f011 faa4 	bl	8022494 <sys_sem_new>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d005      	beq.n	8010f5e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3310      	adds	r3, #16
 8010f56:	4618      	mov	r0, r3
 8010f58:	f011 fa0a 	bl	8022370 <sys_mbox_free>
    goto free_and_return;
 8010f5c:	e017      	b.n	8010f8e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	3314      	adds	r3, #20
 8010f62:	4618      	mov	r0, r3
 8010f64:	f011 fa89 	bl	802247a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f04f 32ff 	mov.w	r2, #4294967295
 8010f74:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	683a      	ldr	r2, [r7, #0]
 8010f7a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	7cfa      	ldrb	r2, [r7, #19]
 8010f86:	771a      	strb	r2, [r3, #28]
  return conn;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	e005      	b.n	8010f98 <netconn_alloc+0xc8>
    goto free_and_return;
 8010f8c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010f8e:	68f9      	ldr	r1, [r7, #12]
 8010f90:	2007      	movs	r0, #7
 8010f92:	f008 feff 	bl	8019d94 <memp_free>
  return NULL;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3718      	adds	r7, #24
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	08023ff8 	.word	0x08023ff8
 8010fa4:	08024240 	.word	0x08024240
 8010fa8:	08024080 	.word	0x08024080

08010fac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <netconn_free+0x1e>
 8010fbc:	4b1b      	ldr	r3, [pc, #108]	@ (801102c <netconn_free+0x80>)
 8010fbe:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010fc2:	491b      	ldr	r1, [pc, #108]	@ (8011030 <netconn_free+0x84>)
 8010fc4:	481b      	ldr	r0, [pc, #108]	@ (8011034 <netconn_free+0x88>)
 8010fc6:	f011 fcb7 	bl	8022938 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	3310      	adds	r3, #16
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f011 fa42 	bl	8022458 <sys_mbox_valid>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <netconn_free+0x3c>
 8010fda:	4b14      	ldr	r3, [pc, #80]	@ (801102c <netconn_free+0x80>)
 8010fdc:	f240 3223 	movw	r2, #803	@ 0x323
 8010fe0:	4915      	ldr	r1, [pc, #84]	@ (8011038 <netconn_free+0x8c>)
 8010fe2:	4814      	ldr	r0, [pc, #80]	@ (8011034 <netconn_free+0x88>)
 8010fe4:	f011 fca8 	bl	8022938 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3314      	adds	r3, #20
 8010fec:	4618      	mov	r0, r3
 8010fee:	f011 fa33 	bl	8022458 <sys_mbox_valid>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d006      	beq.n	8011006 <netconn_free+0x5a>
 8010ff8:	4b0c      	ldr	r3, [pc, #48]	@ (801102c <netconn_free+0x80>)
 8010ffa:	f240 3226 	movw	r2, #806	@ 0x326
 8010ffe:	490f      	ldr	r1, [pc, #60]	@ (801103c <netconn_free+0x90>)
 8011000:	480c      	ldr	r0, [pc, #48]	@ (8011034 <netconn_free+0x88>)
 8011002:	f011 fc99 	bl	8022938 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	330c      	adds	r3, #12
 801100a:	4618      	mov	r0, r3
 801100c:	f011 faa5 	bl	802255a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	330c      	adds	r3, #12
 8011014:	4618      	mov	r0, r3
 8011016:	f011 fabe 	bl	8022596 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801101a:	6879      	ldr	r1, [r7, #4]
 801101c:	2007      	movs	r0, #7
 801101e:	f008 feb9 	bl	8019d94 <memp_free>
}
 8011022:	bf00      	nop
 8011024:	3708      	adds	r7, #8
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08023ff8 	.word	0x08023ff8
 8011030:	08024268 	.word	0x08024268
 8011034:	08024080 	.word	0x08024080
 8011038:	08024298 	.word	0x08024298
 801103c:	080242d4 	.word	0x080242d4

08011040 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b086      	sub	sp, #24
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3310      	adds	r3, #16
 801104c:	4618      	mov	r0, r3
 801104e:	f011 fa03 	bl	8022458 <sys_mbox_valid>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d02f      	beq.n	80110b8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011058:	e018      	b.n	801108c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011062:	2b10      	cmp	r3, #16
 8011064:	d10e      	bne.n	8011084 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f107 020f 	add.w	r2, r7, #15
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fafa 	bl	8010668 <lwip_netconn_is_err_msg>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	4618      	mov	r0, r3
 801107e:	f009 fd81 	bl	801ab84 <pbuf_free>
 8011082:	e003      	b.n	801108c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	4618      	mov	r0, r3
 8011088:	f001 fd48 	bl	8012b1c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3310      	adds	r3, #16
 8011090:	f107 0210 	add.w	r2, r7, #16
 8011094:	4611      	mov	r1, r2
 8011096:	4618      	mov	r0, r3
 8011098:	f011 f9c7 	bl	802242a <sys_arch_mbox_tryfetch>
 801109c:	4603      	mov	r3, r0
 801109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a2:	d1da      	bne.n	801105a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	3310      	adds	r3, #16
 80110a8:	4618      	mov	r0, r3
 80110aa:	f011 f961 	bl	8022370 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	3310      	adds	r3, #16
 80110b2:	4618      	mov	r0, r3
 80110b4:	f011 f9e1 	bl	802247a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	3314      	adds	r3, #20
 80110bc:	4618      	mov	r0, r3
 80110be:	f011 f9cb 	bl	8022458 <sys_mbox_valid>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d034      	beq.n	8011132 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80110c8:	e01d      	b.n	8011106 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	f107 020e 	add.w	r2, r7, #14
 80110d0:	4611      	mov	r1, r2
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fac8 	bl	8010668 <lwip_netconn_is_err_msg>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d113      	bne.n	8011106 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80110e2:	6978      	ldr	r0, [r7, #20]
 80110e4:	f7ff ffac 	bl	8011040 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d007      	beq.n	8011100 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f00a fbd7 	bl	801b8a8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2200      	movs	r2, #0
 80110fe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011100:	6978      	ldr	r0, [r7, #20]
 8011102:	f7ff ff53 	bl	8010fac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	3314      	adds	r3, #20
 801110a:	f107 0210 	add.w	r2, r7, #16
 801110e:	4611      	mov	r1, r2
 8011110:	4618      	mov	r0, r3
 8011112:	f011 f98a 	bl	802242a <sys_arch_mbox_tryfetch>
 8011116:	4603      	mov	r3, r0
 8011118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111c:	d1d5      	bne.n	80110ca <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	3314      	adds	r3, #20
 8011122:	4618      	mov	r0, r3
 8011124:	f011 f924 	bl	8022370 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3314      	adds	r3, #20
 801112c:	4618      	mov	r0, r3
 801112e:	f011 f9a4 	bl	802247a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011132:	bf00      	nop
 8011134:	3718      	adds	r7, #24
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
	...

0801113c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011148:	2300      	movs	r3, #0
 801114a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d106      	bne.n	8011160 <lwip_netconn_do_close_internal+0x24>
 8011152:	4b87      	ldr	r3, [pc, #540]	@ (8011370 <lwip_netconn_do_close_internal+0x234>)
 8011154:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011158:	4986      	ldr	r1, [pc, #536]	@ (8011374 <lwip_netconn_do_close_internal+0x238>)
 801115a:	4887      	ldr	r0, [pc, #540]	@ (8011378 <lwip_netconn_do_close_internal+0x23c>)
 801115c:	f011 fbec 	bl	8022938 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011168:	2b10      	cmp	r3, #16
 801116a:	d006      	beq.n	801117a <lwip_netconn_do_close_internal+0x3e>
 801116c:	4b80      	ldr	r3, [pc, #512]	@ (8011370 <lwip_netconn_do_close_internal+0x234>)
 801116e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011172:	4982      	ldr	r1, [pc, #520]	@ (801137c <lwip_netconn_do_close_internal+0x240>)
 8011174:	4880      	ldr	r0, [pc, #512]	@ (8011378 <lwip_netconn_do_close_internal+0x23c>)
 8011176:	f011 fbdf 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	785b      	ldrb	r3, [r3, #1]
 801117e:	2b04      	cmp	r3, #4
 8011180:	d006      	beq.n	8011190 <lwip_netconn_do_close_internal+0x54>
 8011182:	4b7b      	ldr	r3, [pc, #492]	@ (8011370 <lwip_netconn_do_close_internal+0x234>)
 8011184:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011188:	497d      	ldr	r1, [pc, #500]	@ (8011380 <lwip_netconn_do_close_internal+0x244>)
 801118a:	487b      	ldr	r0, [pc, #492]	@ (8011378 <lwip_netconn_do_close_internal+0x23c>)
 801118c:	f011 fbd4 	bl	8022938 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d106      	bne.n	80111a6 <lwip_netconn_do_close_internal+0x6a>
 8011198:	4b75      	ldr	r3, [pc, #468]	@ (8011370 <lwip_netconn_do_close_internal+0x234>)
 801119a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801119e:	4979      	ldr	r1, [pc, #484]	@ (8011384 <lwip_netconn_do_close_internal+0x248>)
 80111a0:	4875      	ldr	r0, [pc, #468]	@ (8011378 <lwip_netconn_do_close_internal+0x23c>)
 80111a2:	f011 fbc9 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d106      	bne.n	80111bc <lwip_netconn_do_close_internal+0x80>
 80111ae:	4b70      	ldr	r3, [pc, #448]	@ (8011370 <lwip_netconn_do_close_internal+0x234>)
 80111b0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80111b4:	4974      	ldr	r1, [pc, #464]	@ (8011388 <lwip_netconn_do_close_internal+0x24c>)
 80111b6:	4870      	ldr	r0, [pc, #448]	@ (8011378 <lwip_netconn_do_close_internal+0x23c>)
 80111b8:	f011 fbbe 	bl	8022938 <iprintf>

  tpcb = conn->pcb.tcp;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	7a1b      	ldrb	r3, [r3, #8]
 80111c8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80111ca:	7bfb      	ldrb	r3, [r7, #15]
 80111cc:	f003 0301 	and.w	r3, r3, #1
 80111d0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80111d2:	7bfb      	ldrb	r3, [r7, #15]
 80111d4:	f003 0302 	and.w	r3, r3, #2
 80111d8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80111da:	7bfb      	ldrb	r3, [r7, #15]
 80111dc:	2b03      	cmp	r3, #3
 80111de:	d102      	bne.n	80111e6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80111e0:	2301      	movs	r3, #1
 80111e2:	75bb      	strb	r3, [r7, #22]
 80111e4:	e01f      	b.n	8011226 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80111e6:	7bbb      	ldrb	r3, [r7, #14]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00e      	beq.n	801120a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80111f0:	2b05      	cmp	r3, #5
 80111f2:	d007      	beq.n	8011204 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80111f8:	2b06      	cmp	r3, #6
 80111fa:	d003      	beq.n	8011204 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011200:	2b08      	cmp	r3, #8
 8011202:	d102      	bne.n	801120a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011204:	2301      	movs	r3, #1
 8011206:	75bb      	strb	r3, [r7, #22]
 8011208:	e00d      	b.n	8011226 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801120a:	7b7b      	ldrb	r3, [r7, #13]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d008      	beq.n	8011222 <lwip_netconn_do_close_internal+0xe6>
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	8b5b      	ldrh	r3, [r3, #26]
 8011214:	f003 0310 	and.w	r3, r3, #16
 8011218:	2b00      	cmp	r3, #0
 801121a:	d002      	beq.n	8011222 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801121c:	2301      	movs	r3, #1
 801121e:	75bb      	strb	r3, [r7, #22]
 8011220:	e001      	b.n	8011226 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011222:	2300      	movs	r3, #0
 8011224:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011226:	7dbb      	ldrb	r3, [r7, #22]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d003      	beq.n	8011234 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801122c:	2100      	movs	r1, #0
 801122e:	6938      	ldr	r0, [r7, #16]
 8011230:	f00b fbce 	bl	801c9d0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d104      	bne.n	8011246 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801123c:	2100      	movs	r1, #0
 801123e:	6938      	ldr	r0, [r7, #16]
 8011240:	f00b fc3e 	bl	801cac0 <tcp_accept>
 8011244:	e01d      	b.n	8011282 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011246:	7bbb      	ldrb	r3, [r7, #14]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d007      	beq.n	801125c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801124c:	2100      	movs	r1, #0
 801124e:	6938      	ldr	r0, [r7, #16]
 8011250:	f00b fbd0 	bl	801c9f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011254:	2100      	movs	r1, #0
 8011256:	6938      	ldr	r0, [r7, #16]
 8011258:	f00b fc32 	bl	801cac0 <tcp_accept>
    }
    if (shut_tx) {
 801125c:	7b7b      	ldrb	r3, [r7, #13]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d003      	beq.n	801126a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011262:	2100      	movs	r1, #0
 8011264:	6938      	ldr	r0, [r7, #16]
 8011266:	f00b fbe7 	bl	801ca38 <tcp_sent>
    }
    if (shut_close) {
 801126a:	7dbb      	ldrb	r3, [r7, #22]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d008      	beq.n	8011282 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011270:	2200      	movs	r2, #0
 8011272:	2100      	movs	r1, #0
 8011274:	6938      	ldr	r0, [r7, #16]
 8011276:	f00b fc3b 	bl	801caf0 <tcp_poll>
      tcp_err(tpcb, NULL);
 801127a:	2100      	movs	r1, #0
 801127c:	6938      	ldr	r0, [r7, #16]
 801127e:	f00b fbfd 	bl	801ca7c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011282:	7dbb      	ldrb	r3, [r7, #22]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d005      	beq.n	8011294 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011288:	6938      	ldr	r0, [r7, #16]
 801128a:	f00a f9c7 	bl	801b61c <tcp_close>
 801128e:	4603      	mov	r3, r0
 8011290:	75fb      	strb	r3, [r7, #23]
 8011292:	e007      	b.n	80112a4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011294:	7bbb      	ldrb	r3, [r7, #14]
 8011296:	7b7a      	ldrb	r2, [r7, #13]
 8011298:	4619      	mov	r1, r3
 801129a:	6938      	ldr	r0, [r7, #16]
 801129c:	f00a f9ea 	bl	801b674 <tcp_shutdown>
 80112a0:	4603      	mov	r3, r0
 80112a2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80112a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80112ac:	2301      	movs	r3, #1
 80112ae:	757b      	strb	r3, [r7, #21]
 80112b0:	e016      	b.n	80112e0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80112b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ba:	d10f      	bne.n	80112dc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a1b      	ldr	r3, [r3, #32]
 80112c0:	7a5b      	ldrb	r3, [r3, #9]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d10c      	bne.n	80112e0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80112c6:	2301      	movs	r3, #1
 80112c8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80112ca:	7dbb      	ldrb	r3, [r7, #22]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d007      	beq.n	80112e0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80112d0:	6938      	ldr	r0, [r7, #16]
 80112d2:	f00a fae9 	bl	801b8a8 <tcp_abort>
          err = ERR_OK;
 80112d6:	2300      	movs	r3, #0
 80112d8:	75fb      	strb	r3, [r7, #23]
 80112da:	e001      	b.n	80112e0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80112dc:	2301      	movs	r3, #1
 80112de:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80112e0:	7d7b      	ldrb	r3, [r7, #21]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d052      	beq.n	801138c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6a1b      	ldr	r3, [r3, #32]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	330c      	adds	r3, #12
 80112ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6a1b      	ldr	r3, [r3, #32]
 80112f4:	7dfa      	ldrb	r2, [r7, #23]
 80112f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d129      	bne.n	8011360 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801130c:	7dbb      	ldrb	r3, [r7, #22]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00c      	beq.n	801132c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131c:	2b00      	cmp	r3, #0
 801131e:	d005      	beq.n	801132c <lwip_netconn_do_close_internal+0x1f0>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011324:	2200      	movs	r2, #0
 8011326:	2104      	movs	r1, #4
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	4798      	blx	r3
      }
      if (shut_rx) {
 801132c:	7bbb      	ldrb	r3, [r7, #14]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d009      	beq.n	8011346 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011336:	2b00      	cmp	r3, #0
 8011338:	d005      	beq.n	8011346 <lwip_netconn_do_close_internal+0x20a>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801133e:	2200      	movs	r2, #0
 8011340:	2100      	movs	r1, #0
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	4798      	blx	r3
      }
      if (shut_tx) {
 8011346:	7b7b      	ldrb	r3, [r7, #13]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d009      	beq.n	8011360 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011350:	2b00      	cmp	r3, #0
 8011352:	d005      	beq.n	8011360 <lwip_netconn_do_close_internal+0x224>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011358:	2200      	movs	r2, #0
 801135a:	2102      	movs	r1, #2
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011360:	78fb      	ldrb	r3, [r7, #3]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d002      	beq.n	801136c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011366:	68b8      	ldr	r0, [r7, #8]
 8011368:	f011 f8ea 	bl	8022540 <sys_sem_signal>
    }
    return ERR_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	e03c      	b.n	80113ea <lwip_netconn_do_close_internal+0x2ae>
 8011370:	08023ff8 	.word	0x08023ff8
 8011374:	08024310 	.word	0x08024310
 8011378:	08024080 	.word	0x08024080
 801137c:	08024320 	.word	0x08024320
 8011380:	08024340 	.word	0x08024340
 8011384:	08024364 	.word	0x08024364
 8011388:	080241a4 	.word	0x080241a4
  }
  if (!close_finished) {
 801138c:	7d7b      	ldrb	r3, [r7, #21]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d11e      	bne.n	80113d0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	7d1b      	ldrb	r3, [r3, #20]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d106      	bne.n	80113a8 <lwip_netconn_do_close_internal+0x26c>
 801139a:	4b16      	ldr	r3, [pc, #88]	@ (80113f4 <lwip_netconn_do_close_internal+0x2b8>)
 801139c:	f240 4241 	movw	r2, #1089	@ 0x441
 80113a0:	4915      	ldr	r1, [pc, #84]	@ (80113f8 <lwip_netconn_do_close_internal+0x2bc>)
 80113a2:	4816      	ldr	r0, [pc, #88]	@ (80113fc <lwip_netconn_do_close_internal+0x2c0>)
 80113a4:	f011 fac8 	bl	8022938 <iprintf>
    if (shut_tx) {
 80113a8:	7b7b      	ldrb	r3, [r7, #13]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d003      	beq.n	80113b6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80113ae:	4914      	ldr	r1, [pc, #80]	@ (8011400 <lwip_netconn_do_close_internal+0x2c4>)
 80113b0:	6938      	ldr	r0, [r7, #16]
 80113b2:	f00b fb41 	bl	801ca38 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80113b6:	2201      	movs	r2, #1
 80113b8:	4912      	ldr	r1, [pc, #72]	@ (8011404 <lwip_netconn_do_close_internal+0x2c8>)
 80113ba:	6938      	ldr	r0, [r7, #16]
 80113bc:	f00b fb98 	bl	801caf0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80113c0:	4911      	ldr	r1, [pc, #68]	@ (8011408 <lwip_netconn_do_close_internal+0x2cc>)
 80113c2:	6938      	ldr	r0, [r7, #16]
 80113c4:	f00b fb5a 	bl	801ca7c <tcp_err>
    tcp_arg(tpcb, conn);
 80113c8:	6879      	ldr	r1, [r7, #4]
 80113ca:	6938      	ldr	r0, [r7, #16]
 80113cc:	f00b fb00 	bl	801c9d0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80113d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <lwip_netconn_do_close_internal+0x2aa>
 80113d8:	4b06      	ldr	r3, [pc, #24]	@ (80113f4 <lwip_netconn_do_close_internal+0x2b8>)
 80113da:	f240 424d 	movw	r2, #1101	@ 0x44d
 80113de:	490b      	ldr	r1, [pc, #44]	@ (801140c <lwip_netconn_do_close_internal+0x2d0>)
 80113e0:	4806      	ldr	r0, [pc, #24]	@ (80113fc <lwip_netconn_do_close_internal+0x2c0>)
 80113e2:	f011 faa9 	bl	8022938 <iprintf>
  return err;
 80113e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3718      	adds	r7, #24
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	08023ff8 	.word	0x08023ff8
 80113f8:	08024378 	.word	0x08024378
 80113fc:	08024080 	.word	0x08024080
 8011400:	080109b1 	.word	0x080109b1
 8011404:	080108e5 	.word	0x080108e5
 8011408:	08010a5d 	.word	0x08010a5d
 801140c:	0802439c 	.word	0x0802439c

08011410 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	785b      	ldrb	r3, [r3, #1]
 8011422:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011424:	7afb      	ldrb	r3, [r7, #11]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00d      	beq.n	8011446 <lwip_netconn_do_delconn+0x36>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011434:	2b10      	cmp	r3, #16
 8011436:	d006      	beq.n	8011446 <lwip_netconn_do_delconn+0x36>
 8011438:	4b60      	ldr	r3, [pc, #384]	@ (80115bc <lwip_netconn_do_delconn+0x1ac>)
 801143a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801143e:	4960      	ldr	r1, [pc, #384]	@ (80115c0 <lwip_netconn_do_delconn+0x1b0>)
 8011440:	4860      	ldr	r0, [pc, #384]	@ (80115c4 <lwip_netconn_do_delconn+0x1b4>)
 8011442:	f011 fa79 	bl	8022938 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011446:	7afb      	ldrb	r3, [r7, #11]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d005      	beq.n	8011458 <lwip_netconn_do_delconn+0x48>
 801144c:	7afb      	ldrb	r3, [r7, #11]
 801144e:	2b02      	cmp	r3, #2
 8011450:	d002      	beq.n	8011458 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011452:	7afb      	ldrb	r3, [r7, #11]
 8011454:	2b03      	cmp	r3, #3
 8011456:	d109      	bne.n	801146c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011458:	7afb      	ldrb	r3, [r7, #11]
 801145a:	2b03      	cmp	r3, #3
 801145c:	d10a      	bne.n	8011474 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	7f1b      	ldrb	r3, [r3, #28]
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d103      	bne.n	8011474 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	22fb      	movs	r2, #251	@ 0xfb
 8011470:	711a      	strb	r2, [r3, #4]
 8011472:	e097      	b.n	80115a4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011474:	7afb      	ldrb	r3, [r7, #11]
 8011476:	2b03      	cmp	r3, #3
 8011478:	d10d      	bne.n	8011496 <lwip_netconn_do_delconn+0x86>
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	7f1b      	ldrb	r3, [r3, #28]
 8011480:	f003 0304 	and.w	r3, r3, #4
 8011484:	2b00      	cmp	r3, #0
 8011486:	d106      	bne.n	8011496 <lwip_netconn_do_delconn+0x86>
 8011488:	4b4c      	ldr	r3, [pc, #304]	@ (80115bc <lwip_netconn_do_delconn+0x1ac>)
 801148a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801148e:	494e      	ldr	r1, [pc, #312]	@ (80115c8 <lwip_netconn_do_delconn+0x1b8>)
 8011490:	484c      	ldr	r0, [pc, #304]	@ (80115c4 <lwip_netconn_do_delconn+0x1b4>)
 8011492:	f011 fa51 	bl	8022938 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff fdcd 	bl	8011040 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d05f      	beq.n	8011570 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80114ba:	2b10      	cmp	r3, #16
 80114bc:	d00d      	beq.n	80114da <lwip_netconn_do_delconn+0xca>
 80114be:	2b20      	cmp	r3, #32
 80114c0:	d151      	bne.n	8011566 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	625a      	str	r2, [r3, #36]	@ 0x24
          udp_remove(msg->conn->pcb.udp);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f010 fdc2 	bl	802205c <udp_remove>
          break;
 80114d8:	e046      	b.n	8011568 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6a1b      	ldr	r3, [r3, #32]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d006      	beq.n	80114f2 <lwip_netconn_do_delconn+0xe2>
 80114e4:	4b35      	ldr	r3, [pc, #212]	@ (80115bc <lwip_netconn_do_delconn+0x1ac>)
 80114e6:	f240 4294 	movw	r2, #1172	@ 0x494
 80114ea:	4938      	ldr	r1, [pc, #224]	@ (80115cc <lwip_netconn_do_delconn+0x1bc>)
 80114ec:	4835      	ldr	r0, [pc, #212]	@ (80115c4 <lwip_netconn_do_delconn+0x1b4>)
 80114ee:	f011 fa23 	bl	8022938 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2204      	movs	r2, #4
 80114f8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2203      	movs	r2, #3
 80114fe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2100      	movs	r1, #0
 801150e:	4618      	mov	r0, r3
 8011510:	f7ff fe14 	bl	801113c <lwip_netconn_do_close_internal>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d04b      	beq.n	80115b2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	785b      	ldrb	r3, [r3, #1]
 8011520:	2b04      	cmp	r3, #4
 8011522:	d006      	beq.n	8011532 <lwip_netconn_do_delconn+0x122>
 8011524:	4b25      	ldr	r3, [pc, #148]	@ (80115bc <lwip_netconn_do_delconn+0x1ac>)
 8011526:	f240 429a 	movw	r2, #1178	@ 0x49a
 801152a:	4929      	ldr	r1, [pc, #164]	@ (80115d0 <lwip_netconn_do_delconn+0x1c0>)
 801152c:	4825      	ldr	r0, [pc, #148]	@ (80115c4 <lwip_netconn_do_delconn+0x1b4>)
 801152e:	f011 fa03 	bl	8022938 <iprintf>
            UNLOCK_TCPIP_CORE();
 8011532:	4828      	ldr	r0, [pc, #160]	@ (80115d4 <lwip_netconn_do_delconn+0x1c4>)
 8011534:	f011 f86d 	bl	8022612 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	330c      	adds	r3, #12
 801153e:	2100      	movs	r1, #0
 8011540:	4618      	mov	r0, r3
 8011542:	f010 ffcc 	bl	80224de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011546:	4823      	ldr	r0, [pc, #140]	@ (80115d4 <lwip_netconn_do_delconn+0x1c4>)
 8011548:	f011 f854 	bl	80225f4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	785b      	ldrb	r3, [r3, #1]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d02d      	beq.n	80115b2 <lwip_netconn_do_delconn+0x1a2>
 8011556:	4b19      	ldr	r3, [pc, #100]	@ (80115bc <lwip_netconn_do_delconn+0x1ac>)
 8011558:	f240 429e 	movw	r2, #1182	@ 0x49e
 801155c:	491c      	ldr	r1, [pc, #112]	@ (80115d0 <lwip_netconn_do_delconn+0x1c0>)
 801155e:	4819      	ldr	r0, [pc, #100]	@ (80115c4 <lwip_netconn_do_delconn+0x1b4>)
 8011560:	f011 f9ea 	bl	8022938 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011564:	e025      	b.n	80115b2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8011566:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2200      	movs	r2, #0
 801156e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011576:	2b00      	cmp	r3, #0
 8011578:	d007      	beq.n	801158a <lwip_netconn_do_delconn+0x17a>
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011580:	68fa      	ldr	r2, [r7, #12]
 8011582:	6810      	ldr	r0, [r2, #0]
 8011584:	2200      	movs	r2, #0
 8011586:	2100      	movs	r1, #0
 8011588:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011590:	2b00      	cmp	r3, #0
 8011592:	d007      	beq.n	80115a4 <lwip_netconn_do_delconn+0x194>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	6810      	ldr	r0, [r2, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	2102      	movs	r1, #2
 80115a2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	330c      	adds	r3, #12
 80115aa:	4618      	mov	r0, r3
 80115ac:	f010 ffe2 	bl	8022574 <sys_sem_valid>
 80115b0:	e000      	b.n	80115b4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80115b2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	08023ff8 	.word	0x08023ff8
 80115c0:	080243ac 	.word	0x080243ac
 80115c4:	08024080 	.word	0x08024080
 80115c8:	080243c0 	.word	0x080243c0
 80115cc:	080243e0 	.word	0x080243e0
 80115d0:	080243fc 	.word	0x080243fc
 80115d4:	20008d78 	.word	0x20008d78

080115d8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d025      	beq.n	801163a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115f8:	2b10      	cmp	r3, #16
 80115fa:	d00e      	beq.n	801161a <lwip_netconn_do_bind+0x42>
 80115fc:	2b20      	cmp	r3, #32
 80115fe:	d119      	bne.n	8011634 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6858      	ldr	r0, [r3, #4]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	6899      	ldr	r1, [r3, #8]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	899b      	ldrh	r3, [r3, #12]
 801160e:	461a      	mov	r2, r3
 8011610:	f010 fbe6 	bl	8021de0 <udp_bind>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]
        break;
 8011618:	e011      	b.n	801163e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6858      	ldr	r0, [r3, #4]
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	6899      	ldr	r1, [r3, #8]
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	899b      	ldrh	r3, [r3, #12]
 8011628:	461a      	mov	r2, r3
 801162a:	f00a f949 	bl	801b8c0 <tcp_bind>
 801162e:	4603      	mov	r3, r0
 8011630:	73fb      	strb	r3, [r7, #15]
        break;
 8011632:	e004      	b.n	801163e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011634:	23fa      	movs	r3, #250	@ 0xfa
 8011636:	73fb      	strb	r3, [r7, #15]
        break;
 8011638:	e001      	b.n	801163e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801163a:	23fa      	movs	r3, #250	@ 0xfa
 801163c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	7bfa      	ldrb	r2, [r7, #15]
 8011642:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011644:	bf00      	nop
 8011646:	3710      	adds	r7, #16
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b086      	sub	sp, #24
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d07f      	beq.n	8011762 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801166c:	2b10      	cmp	r3, #16
 801166e:	d175      	bne.n	801175c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	785b      	ldrb	r3, [r3, #1]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d165      	bne.n	8011746 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	7d1b      	ldrb	r3, [r3, #20]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d002      	beq.n	801168c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011686:	23fa      	movs	r3, #250	@ 0xfa
 8011688:	72fb      	strb	r3, [r7, #11]
 801168a:	e06c      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 801168c:	23ff      	movs	r3, #255	@ 0xff
 801168e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	f107 020b 	add.w	r2, r7, #11
 801169a:	7cf9      	ldrb	r1, [r7, #19]
 801169c:	4618      	mov	r0, r3
 801169e:	f00a f9c7 	bl	801ba30 <tcp_listen_with_backlog_and_err>
 80116a2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d05d      	beq.n	8011766 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	3310      	adds	r3, #16
 80116b0:	4618      	mov	r0, r3
 80116b2:	f010 fed1 	bl	8022458 <sys_mbox_valid>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00b      	beq.n	80116d4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	3310      	adds	r3, #16
 80116c2:	4618      	mov	r0, r3
 80116c4:	f010 fe54 	bl	8022370 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	3310      	adds	r3, #16
 80116ce:	4618      	mov	r0, r3
 80116d0:	f010 fed3 	bl	802247a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	3314      	adds	r3, #20
 80116de:	4618      	mov	r0, r3
 80116e0:	f010 feba 	bl	8022458 <sys_mbox_valid>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d108      	bne.n	80116fc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	3314      	adds	r3, #20
 80116f0:	2106      	movs	r1, #6
 80116f2:	4618      	mov	r0, r3
 80116f4:	f010 fe22 	bl	802233c <sys_mbox_new>
 80116f8:	4603      	mov	r3, r0
 80116fa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80116fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d118      	bne.n	8011736 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2202      	movs	r2, #2
 801170a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	685a      	ldr	r2, [r3, #4]
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4619      	mov	r1, r3
 8011720:	4610      	mov	r0, r2
 8011722:	f00b f955 	bl	801c9d0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	4912      	ldr	r1, [pc, #72]	@ (8011778 <lwip_netconn_do_listen+0x12c>)
 801172e:	4618      	mov	r0, r3
 8011730:	f00b f9c6 	bl	801cac0 <tcp_accept>
 8011734:	e017      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f009 ff70 	bl	801b61c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2200      	movs	r2, #0
 8011742:	605a      	str	r2, [r3, #4]
 8011744:	e00f      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	785b      	ldrb	r3, [r3, #1]
 801174c:	2b02      	cmp	r3, #2
 801174e:	d102      	bne.n	8011756 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8011750:	2300      	movs	r3, #0
 8011752:	72fb      	strb	r3, [r7, #11]
 8011754:	e007      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8011756:	23f5      	movs	r3, #245	@ 0xf5
 8011758:	72fb      	strb	r3, [r7, #11]
 801175a:	e004      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 801175c:	23f0      	movs	r3, #240	@ 0xf0
 801175e:	72fb      	strb	r3, [r7, #11]
 8011760:	e001      	b.n	8011766 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8011762:	23f5      	movs	r3, #245	@ 0xf5
 8011764:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8011766:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801176e:	bf00      	nop
 8011770:	3718      	adds	r7, #24
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	08010c59 	.word	0x08010c59

0801177c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4618      	mov	r0, r3
 801178e:	f001 f969 	bl	8012a64 <netconn_err>
 8011792:	4603      	mov	r3, r0
 8011794:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d134      	bne.n	8011808 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d02d      	beq.n	8011804 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117b2:	2b20      	cmp	r3, #32
 80117b4:	d123      	bne.n	80117fe <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d10c      	bne.n	80117da <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	685a      	ldr	r2, [r3, #4]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4619      	mov	r1, r3
 80117ce:	4610      	mov	r0, r2
 80117d0:	f010 f8d8 	bl	8021984 <udp_send>
 80117d4:	4603      	mov	r3, r0
 80117d6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80117d8:	e016      	b.n	8011808 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6858      	ldr	r0, [r3, #4]
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	689b      	ldr	r3, [r3, #8]
 80117e4:	6819      	ldr	r1, [r3, #0]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	f103 0208 	add.w	r2, r3, #8
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	899b      	ldrh	r3, [r3, #12]
 80117f4:	f010 f8fa 	bl	80219ec <udp_sendto>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
          break;
 80117fc:	e004      	b.n	8011808 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80117fe:	23f5      	movs	r3, #245	@ 0xf5
 8011800:	73fb      	strb	r3, [r7, #15]
          break;
 8011802:	e001      	b.n	8011808 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8011804:	23f5      	movs	r3, #245	@ 0xf5
 8011806:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	7bfa      	ldrb	r2, [r7, #15]
 801180c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801180e:	bf00      	nop
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011816:	b580      	push	{r7, lr}
 8011818:	b086      	sub	sp, #24
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	2200      	movs	r2, #0
 8011826:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d022      	beq.n	8011878 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801183c:	2b10      	cmp	r3, #16
 801183e:	d11b      	bne.n	8011878 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801184c:	d202      	bcs.n	8011854 <lwip_netconn_do_recv+0x3e>
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	b29b      	uxth	r3, r3
 8011852:	e001      	b.n	8011858 <lwip_netconn_do_recv+0x42>
 8011854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011858:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	89fa      	ldrh	r2, [r7, #14]
 8011862:	4611      	mov	r1, r2
 8011864:	4618      	mov	r0, r3
 8011866:	f00a f9e7 	bl	801bc38 <tcp_recved>
        remaining -= recved;
 801186a:	89fb      	ldrh	r3, [r7, #14]
 801186c:	697a      	ldr	r2, [r7, #20]
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1e6      	bne.n	8011846 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011878:	bf00      	nop
 801187a:	3718      	adds	r7, #24
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b088      	sub	sp, #32
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	460b      	mov	r3, r1
 801188a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801188c:	2300      	movs	r3, #0
 801188e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d106      	bne.n	80118a4 <lwip_netconn_do_writemore+0x24>
 8011896:	4b96      	ldr	r3, [pc, #600]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 8011898:	f240 6273 	movw	r2, #1651	@ 0x673
 801189c:	4995      	ldr	r1, [pc, #596]	@ (8011af4 <lwip_netconn_do_writemore+0x274>)
 801189e:	4896      	ldr	r0, [pc, #600]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 80118a0:	f011 f84a 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	785b      	ldrb	r3, [r3, #1]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d006      	beq.n	80118ba <lwip_netconn_do_writemore+0x3a>
 80118ac:	4b90      	ldr	r3, [pc, #576]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 80118ae:	f240 6274 	movw	r2, #1652	@ 0x674
 80118b2:	4992      	ldr	r1, [pc, #584]	@ (8011afc <lwip_netconn_do_writemore+0x27c>)
 80118b4:	4890      	ldr	r0, [pc, #576]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 80118b6:	f011 f83f 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6a1b      	ldr	r3, [r3, #32]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d106      	bne.n	80118d0 <lwip_netconn_do_writemore+0x50>
 80118c2:	4b8b      	ldr	r3, [pc, #556]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 80118c4:	f240 6275 	movw	r2, #1653	@ 0x675
 80118c8:	498d      	ldr	r1, [pc, #564]	@ (8011b00 <lwip_netconn_do_writemore+0x280>)
 80118ca:	488b      	ldr	r0, [pc, #556]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 80118cc:	f011 f834 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d106      	bne.n	80118e6 <lwip_netconn_do_writemore+0x66>
 80118d8:	4b85      	ldr	r3, [pc, #532]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 80118da:	f240 6276 	movw	r2, #1654	@ 0x676
 80118de:	4989      	ldr	r1, [pc, #548]	@ (8011b04 <lwip_netconn_do_writemore+0x284>)
 80118e0:	4885      	ldr	r0, [pc, #532]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 80118e2:	f011 f829 	bl	8022938 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6a1b      	ldr	r3, [r3, #32]
 80118ea:	699a      	ldr	r2, [r3, #24]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6a1b      	ldr	r3, [r3, #32]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d306      	bcc.n	8011904 <lwip_netconn_do_writemore+0x84>
 80118f6:	4b7e      	ldr	r3, [pc, #504]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 80118f8:	f240 6277 	movw	r2, #1655	@ 0x677
 80118fc:	4982      	ldr	r1, [pc, #520]	@ (8011b08 <lwip_netconn_do_writemore+0x288>)
 80118fe:	487e      	ldr	r0, [pc, #504]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 8011900:	f011 f81a 	bl	8022938 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6a1b      	ldr	r3, [r3, #32]
 8011908:	899b      	ldrh	r3, [r3, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <lwip_netconn_do_writemore+0x9c>
 801190e:	4b78      	ldr	r3, [pc, #480]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 8011910:	f240 6279 	movw	r2, #1657	@ 0x679
 8011914:	497d      	ldr	r1, [pc, #500]	@ (8011b0c <lwip_netconn_do_writemore+0x28c>)
 8011916:	4878      	ldr	r0, [pc, #480]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 8011918:	f011 f80e 	bl	8022938 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a1b      	ldr	r3, [r3, #32]
 8011920:	7f1b      	ldrb	r3, [r3, #28]
 8011922:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	7f1b      	ldrb	r3, [r3, #28]
 8011928:	f003 0302 	and.w	r3, r3, #2
 801192c:	2b00      	cmp	r3, #0
 801192e:	d104      	bne.n	801193a <lwip_netconn_do_writemore+0xba>
 8011930:	7ebb      	ldrb	r3, [r7, #26]
 8011932:	f003 0304 	and.w	r3, r3, #4
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <lwip_netconn_do_writemore+0xbe>
 801193a:	2301      	movs	r3, #1
 801193c:	e000      	b.n	8011940 <lwip_netconn_do_writemore+0xc0>
 801193e:	2300      	movs	r3, #0
 8011940:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a1b      	ldr	r3, [r3, #32]
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	691b      	ldr	r3, [r3, #16]
 8011950:	4413      	add	r3, r2
 8011952:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a1b      	ldr	r3, [r3, #32]
 8011958:	689b      	ldr	r3, [r3, #8]
 801195a:	685a      	ldr	r2, [r3, #4]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6a1b      	ldr	r3, [r3, #32]
 8011960:	691b      	ldr	r3, [r3, #16]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801196c:	d307      	bcc.n	801197e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801196e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011972:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011974:	7ebb      	ldrb	r3, [r7, #26]
 8011976:	f043 0302 	orr.w	r3, r3, #2
 801197a:	76bb      	strb	r3, [r7, #26]
 801197c:	e001      	b.n	8011982 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801198a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801198c:	89fa      	ldrh	r2, [r7, #14]
 801198e:	8bbb      	ldrh	r3, [r7, #28]
 8011990:	429a      	cmp	r2, r3
 8011992:	d216      	bcs.n	80119c2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011994:	89fb      	ldrh	r3, [r7, #14]
 8011996:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011998:	7e3b      	ldrb	r3, [r7, #24]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00d      	beq.n	80119ba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801199e:	8bbb      	ldrh	r3, [r7, #28]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10e      	bne.n	80119c2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6a1b      	ldr	r3, [r3, #32]
 80119a8:	699b      	ldr	r3, [r3, #24]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d102      	bne.n	80119b4 <lwip_netconn_do_writemore+0x134>
 80119ae:	f06f 0306 	mvn.w	r3, #6
 80119b2:	e000      	b.n	80119b6 <lwip_netconn_do_writemore+0x136>
 80119b4:	2300      	movs	r3, #0
 80119b6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80119b8:	e07d      	b.n	8011ab6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80119ba:	7ebb      	ldrb	r3, [r7, #26]
 80119bc:	f043 0302 	orr.w	r3, r3, #2
 80119c0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a1b      	ldr	r3, [r3, #32]
 80119c6:	691a      	ldr	r2, [r3, #16]
 80119c8:	8bbb      	ldrh	r3, [r7, #28]
 80119ca:	441a      	add	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6a1b      	ldr	r3, [r3, #32]
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d906      	bls.n	80119e6 <lwip_netconn_do_writemore+0x166>
 80119d8:	4b45      	ldr	r3, [pc, #276]	@ (8011af0 <lwip_netconn_do_writemore+0x270>)
 80119da:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80119de:	494c      	ldr	r1, [pc, #304]	@ (8011b10 <lwip_netconn_do_writemore+0x290>)
 80119e0:	4845      	ldr	r0, [pc, #276]	@ (8011af8 <lwip_netconn_do_writemore+0x278>)
 80119e2:	f010 ffa9 	bl	8022938 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80119e6:	8bbb      	ldrh	r3, [r7, #28]
 80119e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d103      	bne.n	80119f8 <lwip_netconn_do_writemore+0x178>
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119f6:	d209      	bcs.n	8011a0c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80119fc:	8bba      	ldrh	r2, [r7, #28]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d10b      	bne.n	8011a1a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	899b      	ldrh	r3, [r3, #12]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d906      	bls.n	8011a1a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011a10:	7ebb      	ldrb	r3, [r7, #26]
 8011a12:	f043 0302 	orr.w	r3, r3, #2
 8011a16:	76bb      	strb	r3, [r7, #26]
 8011a18:	e001      	b.n	8011a1e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6858      	ldr	r0, [r3, #4]
 8011a22:	7ebb      	ldrb	r3, [r7, #26]
 8011a24:	8bba      	ldrh	r2, [r7, #28]
 8011a26:	6979      	ldr	r1, [r7, #20]
 8011a28:	f00d ff10 	bl	801f84c <tcp_write>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d12c      	bne.n	8011a92 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6a1b      	ldr	r3, [r3, #32]
 8011a3c:	6999      	ldr	r1, [r3, #24]
 8011a3e:	8bba      	ldrh	r2, [r7, #28]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a1b      	ldr	r3, [r3, #32]
 8011a44:	440a      	add	r2, r1
 8011a46:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6a1b      	ldr	r3, [r3, #32]
 8011a4c:	6919      	ldr	r1, [r3, #16]
 8011a4e:	8bba      	ldrh	r2, [r7, #28]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a1b      	ldr	r3, [r3, #32]
 8011a54:	440a      	add	r2, r1
 8011a56:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	691a      	ldr	r2, [r3, #16]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d113      	bne.n	8011a92 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6a1b      	ldr	r3, [r3, #32]
 8011a6e:	899a      	ldrh	r2, [r3, #12]
 8011a70:	3a01      	subs	r2, #1
 8011a72:	b292      	uxth	r2, r2
 8011a74:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	899b      	ldrh	r3, [r3, #12]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d008      	beq.n	8011a92 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a1b      	ldr	r3, [r3, #32]
 8011a84:	689a      	ldr	r2, [r3, #8]
 8011a86:	3208      	adds	r2, #8
 8011a88:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a1b      	ldr	r3, [r3, #32]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8011a92:	7e7b      	ldrb	r3, [r7, #25]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d004      	beq.n	8011aa2 <lwip_netconn_do_writemore+0x222>
 8011a98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f43f af50 	beq.w	8011942 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8011aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d004      	beq.n	8011ab4 <lwip_netconn_do_writemore+0x234>
 8011aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ab2:	d147      	bne.n	8011b44 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8011ab4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8011ab6:	7e3b      	ldrb	r3, [r7, #24]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d02b      	beq.n	8011b14 <lwip_netconn_do_writemore+0x294>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a1b      	ldr	r3, [r3, #32]
 8011ac0:	699a      	ldr	r2, [r3, #24]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a1b      	ldr	r3, [r3, #32]
 8011ac6:	695b      	ldr	r3, [r3, #20]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d223      	bcs.n	8011b14 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d005      	beq.n	8011ae0 <lwip_netconn_do_writemore+0x260>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad8:	2200      	movs	r2, #0
 8011ada:	2103      	movs	r1, #3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	7f1b      	ldrb	r3, [r3, #28]
 8011ae4:	f043 0310 	orr.w	r3, r3, #16
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	771a      	strb	r2, [r3, #28]
 8011aee:	e029      	b.n	8011b44 <lwip_netconn_do_writemore+0x2c4>
 8011af0:	08023ff8 	.word	0x08023ff8
 8011af4:	08024194 	.word	0x08024194
 8011af8:	08024080 	.word	0x08024080
 8011afc:	0802449c 	.word	0x0802449c
 8011b00:	080241a4 	.word	0x080241a4
 8011b04:	080244bc 	.word	0x080244bc
 8011b08:	080244d4 	.word	0x080244d4
 8011b0c:	08024514 	.word	0x08024514
 8011b10:	0802453c 	.word	0x0802453c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b1c:	f640 3269 	movw	r2, #2921	@ 0xb69
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d905      	bls.n	8011b30 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011b2c:	2b07      	cmp	r3, #7
 8011b2e:	d909      	bls.n	8011b44 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d005      	beq.n	8011b44 <lwip_netconn_do_writemore+0x2c4>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2103      	movs	r1, #3
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d11d      	bne.n	8011b88 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a1b      	ldr	r3, [r3, #32]
 8011b50:	699a      	ldr	r2, [r3, #24]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	695b      	ldr	r3, [r3, #20]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d002      	beq.n	8011b62 <lwip_netconn_do_writemore+0x2e2>
 8011b5c:	7e3b      	ldrb	r3, [r7, #24]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d001      	beq.n	8011b66 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011b62:	2301      	movs	r3, #1
 8011b64:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f00e fc58 	bl	8020420 <tcp_output>
 8011b70:	4603      	mov	r3, r0
 8011b72:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011b74:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011b78:	f113 0f04 	cmn.w	r3, #4
 8011b7c:	d12c      	bne.n	8011bd8 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011b7e:	7b3b      	ldrb	r3, [r7, #12]
 8011b80:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011b82:	2301      	movs	r3, #1
 8011b84:	76fb      	strb	r3, [r7, #27]
 8011b86:	e027      	b.n	8011bd8 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8011b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b90:	d120      	bne.n	8011bd4 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f00e fc42 	bl	8020420 <tcp_output>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011ba0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011ba4:	f113 0f04 	cmn.w	r3, #4
 8011ba8:	d104      	bne.n	8011bb4 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011baa:	7b7b      	ldrb	r3, [r7, #13]
 8011bac:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	76fb      	strb	r3, [r7, #27]
 8011bb2:	e011      	b.n	8011bd8 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8011bb4:	7e3b      	ldrb	r3, [r7, #24]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00e      	beq.n	8011bd8 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6a1b      	ldr	r3, [r3, #32]
 8011bbe:	699b      	ldr	r3, [r3, #24]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d102      	bne.n	8011bca <lwip_netconn_do_writemore+0x34a>
 8011bc4:	f06f 0306 	mvn.w	r3, #6
 8011bc8:	e000      	b.n	8011bcc <lwip_netconn_do_writemore+0x34c>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	76fb      	strb	r3, [r7, #27]
 8011bd2:	e001      	b.n	8011bd8 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011bd8:	7efb      	ldrb	r3, [r7, #27]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d015      	beq.n	8011c0a <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	330c      	adds	r3, #12
 8011be6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a1b      	ldr	r3, [r3, #32]
 8011bec:	7ffa      	ldrb	r2, [r7, #31]
 8011bee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011bfc:	78fb      	ldrb	r3, [r7, #3]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d006      	beq.n	8011c10 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011c02:	68b8      	ldr	r0, [r7, #8]
 8011c04:	f010 fc9c 	bl	8022540 <sys_sem_signal>
 8011c08:	e002      	b.n	8011c10 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0e:	e000      	b.n	8011c12 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 8011c10:	2300      	movs	r3, #0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3720      	adds	r7, #32
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop

08011c1c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 ff19 	bl	8012a64 <netconn_err>
 8011c32:	4603      	mov	r3, r0
 8011c34:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d166      	bne.n	8011d0c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c48:	2b10      	cmp	r3, #16
 8011c4a:	d15d      	bne.n	8011d08 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	785b      	ldrb	r3, [r3, #1]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d002      	beq.n	8011c5c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011c56:	23fb      	movs	r3, #251	@ 0xfb
 8011c58:	73fb      	strb	r3, [r7, #15]
 8011c5a:	e057      	b.n	8011d0c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d04d      	beq.n	8011d02 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	6a1b      	ldr	r3, [r3, #32]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d006      	beq.n	8011c86 <lwip_netconn_do_write+0x6a>
 8011c78:	4b28      	ldr	r3, [pc, #160]	@ (8011d1c <lwip_netconn_do_write+0x100>)
 8011c7a:	f240 7223 	movw	r2, #1827	@ 0x723
 8011c7e:	4928      	ldr	r1, [pc, #160]	@ (8011d20 <lwip_netconn_do_write+0x104>)
 8011c80:	4828      	ldr	r0, [pc, #160]	@ (8011d24 <lwip_netconn_do_write+0x108>)
 8011c82:	f010 fe59 	bl	8022938 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	695b      	ldr	r3, [r3, #20]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d106      	bne.n	8011c9c <lwip_netconn_do_write+0x80>
 8011c8e:	4b23      	ldr	r3, [pc, #140]	@ (8011d1c <lwip_netconn_do_write+0x100>)
 8011c90:	f240 7224 	movw	r2, #1828	@ 0x724
 8011c94:	4924      	ldr	r1, [pc, #144]	@ (8011d28 <lwip_netconn_do_write+0x10c>)
 8011c96:	4823      	ldr	r0, [pc, #140]	@ (8011d24 <lwip_netconn_do_write+0x108>)
 8011c98:	f010 fe4e 	bl	8022938 <iprintf>
        msg->conn->current_msg = msg;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	2100      	movs	r1, #0
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7ff fde8 	bl	8011880 <lwip_netconn_do_writemore>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d02e      	beq.n	8011d14 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	785b      	ldrb	r3, [r3, #1]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d006      	beq.n	8011cce <lwip_netconn_do_write+0xb2>
 8011cc0:	4b16      	ldr	r3, [pc, #88]	@ (8011d1c <lwip_netconn_do_write+0x100>)
 8011cc2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8011cc6:	4919      	ldr	r1, [pc, #100]	@ (8011d2c <lwip_netconn_do_write+0x110>)
 8011cc8:	4816      	ldr	r0, [pc, #88]	@ (8011d24 <lwip_netconn_do_write+0x108>)
 8011cca:	f010 fe35 	bl	8022938 <iprintf>
          UNLOCK_TCPIP_CORE();
 8011cce:	4818      	ldr	r0, [pc, #96]	@ (8011d30 <lwip_netconn_do_write+0x114>)
 8011cd0:	f010 fc9f 	bl	8022612 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	330c      	adds	r3, #12
 8011cda:	2100      	movs	r1, #0
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f010 fbfe 	bl	80224de <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011ce2:	4813      	ldr	r0, [pc, #76]	@ (8011d30 <lwip_netconn_do_write+0x114>)
 8011ce4:	f010 fc86 	bl	80225f4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	785b      	ldrb	r3, [r3, #1]
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d110      	bne.n	8011d14 <lwip_netconn_do_write+0xf8>
 8011cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8011d1c <lwip_netconn_do_write+0x100>)
 8011cf4:	f240 722c 	movw	r2, #1836	@ 0x72c
 8011cf8:	490c      	ldr	r1, [pc, #48]	@ (8011d2c <lwip_netconn_do_write+0x110>)
 8011cfa:	480a      	ldr	r0, [pc, #40]	@ (8011d24 <lwip_netconn_do_write+0x108>)
 8011cfc:	f010 fe1c 	bl	8022938 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011d00:	e008      	b.n	8011d14 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011d02:	23f5      	movs	r3, #245	@ 0xf5
 8011d04:	73fb      	strb	r3, [r7, #15]
 8011d06:	e001      	b.n	8011d0c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011d08:	23fa      	movs	r3, #250	@ 0xfa
 8011d0a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	7bfa      	ldrb	r2, [r7, #15]
 8011d10:	711a      	strb	r2, [r3, #4]
 8011d12:	e000      	b.n	8011d16 <lwip_netconn_do_write+0xfa>
        return;
 8011d14:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	08023ff8 	.word	0x08023ff8
 8011d20:	080243e0 	.word	0x080243e0
 8011d24:	08024080 	.word	0x08024080
 8011d28:	08024568 	.word	0x08024568
 8011d2c:	080243fc 	.word	0x080243fc
 8011d30:	20008d78 	.word	0x20008d78

08011d34 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d06b      	beq.n	8011e22 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	7c1b      	ldrb	r3, [r3, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d007      	beq.n	8011d62 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	685a      	ldr	r2, [r3, #4]
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	6812      	ldr	r2, [r2, #0]
 8011d5e:	601a      	str	r2, [r3, #0]
 8011d60:	e006      	b.n	8011d70 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	689b      	ldr	r3, [r3, #8]
 8011d6c:	6852      	ldr	r2, [r2, #4]
 8011d6e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2200      	movs	r2, #0
 8011d74:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011d80:	2b10      	cmp	r3, #16
 8011d82:	d021      	beq.n	8011dc8 <lwip_netconn_do_getaddr+0x94>
 8011d84:	2b20      	cmp	r3, #32
 8011d86:	d144      	bne.n	8011e12 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	7c1b      	ldrb	r3, [r3, #16]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d007      	beq.n	8011da0 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	685a      	ldr	r2, [r3, #4]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	8a52      	ldrh	r2, [r2, #18]
 8011d9c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8011d9e:	e044      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	7c1b      	ldrb	r3, [r3, #16]
 8011da8:	f003 0304 	and.w	r3, r3, #4
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d103      	bne.n	8011db8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	22f5      	movs	r2, #245	@ 0xf5
 8011db4:	711a      	strb	r2, [r3, #4]
        break;
 8011db6:	e038      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	685a      	ldr	r2, [r3, #4]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	8a92      	ldrh	r2, [r2, #20]
 8011dc4:	801a      	strh	r2, [r3, #0]
        break;
 8011dc6:	e030      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	7c1b      	ldrb	r3, [r3, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10f      	bne.n	8011df0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d005      	beq.n	8011de8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	7d1b      	ldrb	r3, [r3, #20]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d103      	bne.n	8011df0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	22f5      	movs	r2, #245	@ 0xf5
 8011dec:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8011dee:	e01c      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	7c1b      	ldrb	r3, [r3, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d004      	beq.n	8011e02 <lwip_netconn_do_getaddr+0xce>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	8adb      	ldrh	r3, [r3, #22]
 8011e00:	e003      	b.n	8011e0a <lwip_netconn_do_getaddr+0xd6>
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	8b1b      	ldrh	r3, [r3, #24]
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	68d2      	ldr	r2, [r2, #12]
 8011e0e:	8013      	strh	r3, [r2, #0]
        break;
 8011e10:	e00b      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8011e12:	4b08      	ldr	r3, [pc, #32]	@ (8011e34 <lwip_netconn_do_getaddr+0x100>)
 8011e14:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011e18:	4907      	ldr	r1, [pc, #28]	@ (8011e38 <lwip_netconn_do_getaddr+0x104>)
 8011e1a:	4808      	ldr	r0, [pc, #32]	@ (8011e3c <lwip_netconn_do_getaddr+0x108>)
 8011e1c:	f010 fd8c 	bl	8022938 <iprintf>
        break;
 8011e20:	e003      	b.n	8011e2a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	22f5      	movs	r2, #245	@ 0xf5
 8011e26:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011e28:	bf00      	nop
 8011e2a:	bf00      	nop
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	08023ff8 	.word	0x08023ff8
 8011e38:	0802457c 	.word	0x0802457c
 8011e3c:	08024080 	.word	0x08024080

08011e40 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	785b      	ldrb	r3, [r3, #1]
 8011e52:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d069      	beq.n	8011f32 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e68:	2b10      	cmp	r3, #16
 8011e6a:	d162      	bne.n	8011f32 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e70:	2b03      	cmp	r3, #3
 8011e72:	d002      	beq.n	8011e7a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e74:	7afb      	ldrb	r3, [r7, #11]
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d05b      	beq.n	8011f32 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011e7a:	7afb      	ldrb	r3, [r7, #11]
 8011e7c:	2b03      	cmp	r3, #3
 8011e7e:	d103      	bne.n	8011e88 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	22f5      	movs	r2, #245	@ 0xf5
 8011e84:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e86:	e059      	b.n	8011f3c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011e88:	7afb      	ldrb	r3, [r7, #11]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d103      	bne.n	8011e96 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	22fb      	movs	r2, #251	@ 0xfb
 8011e92:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e94:	e052      	b.n	8011f3c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	7a1b      	ldrb	r3, [r3, #8]
 8011e9a:	f003 0301 	and.w	r3, r3, #1
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d004      	beq.n	8011eac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff f8ca 	bl	8011040 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d006      	beq.n	8011ec4 <lwip_netconn_do_close+0x84>
 8011eb6:	4b23      	ldr	r3, [pc, #140]	@ (8011f44 <lwip_netconn_do_close+0x104>)
 8011eb8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8011ebc:	4922      	ldr	r1, [pc, #136]	@ (8011f48 <lwip_netconn_do_close+0x108>)
 8011ebe:	4823      	ldr	r0, [pc, #140]	@ (8011f4c <lwip_netconn_do_close+0x10c>)
 8011ec0:	f010 fd3a 	bl	8022938 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2204      	movs	r2, #4
 8011eca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2100      	movs	r1, #0
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7ff f92e 	bl	801113c <lwip_netconn_do_close_internal>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d029      	beq.n	8011f3a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	785b      	ldrb	r3, [r3, #1]
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	d006      	beq.n	8011efe <lwip_netconn_do_close+0xbe>
 8011ef0:	4b14      	ldr	r3, [pc, #80]	@ (8011f44 <lwip_netconn_do_close+0x104>)
 8011ef2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8011ef6:	4916      	ldr	r1, [pc, #88]	@ (8011f50 <lwip_netconn_do_close+0x110>)
 8011ef8:	4814      	ldr	r0, [pc, #80]	@ (8011f4c <lwip_netconn_do_close+0x10c>)
 8011efa:	f010 fd1d 	bl	8022938 <iprintf>
        UNLOCK_TCPIP_CORE();
 8011efe:	4815      	ldr	r0, [pc, #84]	@ (8011f54 <lwip_netconn_do_close+0x114>)
 8011f00:	f010 fb87 	bl	8022612 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	330c      	adds	r3, #12
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f010 fae6 	bl	80224de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011f12:	4810      	ldr	r0, [pc, #64]	@ (8011f54 <lwip_netconn_do_close+0x114>)
 8011f14:	f010 fb6e 	bl	80225f4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	785b      	ldrb	r3, [r3, #1]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00b      	beq.n	8011f3a <lwip_netconn_do_close+0xfa>
 8011f22:	4b08      	ldr	r3, [pc, #32]	@ (8011f44 <lwip_netconn_do_close+0x104>)
 8011f24:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8011f28:	4909      	ldr	r1, [pc, #36]	@ (8011f50 <lwip_netconn_do_close+0x110>)
 8011f2a:	4808      	ldr	r0, [pc, #32]	@ (8011f4c <lwip_netconn_do_close+0x10c>)
 8011f2c:	f010 fd04 	bl	8022938 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011f30:	e003      	b.n	8011f3a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	22f5      	movs	r2, #245	@ 0xf5
 8011f36:	711a      	strb	r2, [r3, #4]
 8011f38:	e000      	b.n	8011f3c <lwip_netconn_do_close+0xfc>
      return;
 8011f3a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	08023ff8 	.word	0x08023ff8
 8011f48:	080243e0 	.word	0x080243e0
 8011f4c:	08024080 	.word	0x08024080
 8011f50:	080243fc 	.word	0x080243fc
 8011f54:	20008d78 	.word	0x20008d78

08011f58 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_CONN;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	22f5      	movs	r2, #245	@ 0xf5
 8011f68:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d027      	beq.n	8011fc4 <lwip_netconn_do_join_leave_group+0x6c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f7e:	2b20      	cmp	r3, #32
 8011f80:	d11d      	bne.n	8011fbe <lwip_netconn_do_join_leave_group+0x66>
        }
      } else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
      {
#if LWIP_IGMP
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	7c5b      	ldrb	r3, [r3, #17]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d10c      	bne.n	8011fa4 <lwip_netconn_do_join_leave_group+0x4c>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	68da      	ldr	r2, [r3, #12]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011f92:	4619      	mov	r1, r3
 8011f94:	4610      	mov	r0, r2
 8011f96:	f005 fb45 	bl	8017624 <igmp_joingroup>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	711a      	strb	r2, [r3, #4]
      msg->err = ERR_VAL;
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011fa2:	e00f      	b.n	8011fc4 <lwip_netconn_do_join_leave_group+0x6c>
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	68da      	ldr	r2, [r3, #12]
                                     ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 8011fac:	4619      	mov	r1, r3
 8011fae:	4610      	mov	r0, r2
 8011fb0:	f005 fc14 	bl	80177dc <igmp_leavegroup>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	711a      	strb	r2, [r3, #4]
}
 8011fbc:	e002      	b.n	8011fc4 <lwip_netconn_do_join_leave_group+0x6c>
      msg->err = ERR_VAL;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	22fa      	movs	r2, #250	@ 0xfa
 8011fc2:	711a      	strb	r2, [r3, #4]
}
 8011fc4:	bf00      	nop
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	330c      	adds	r3, #12
 8011fdc:	461a      	mov	r2, r3
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f002 f979 	bl	80142d8 <tcpip_send_msg_wait_sem>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d103      	bne.n	8011ffa <netconn_apimsg+0x2e>
    return apimsg->err;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011ff8:	e001      	b.n	8011ffe <netconn_apimsg+0x32>
  }
  return err;
 8011ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
	...

08012008 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b08c      	sub	sp, #48	@ 0x30
 801200c:	af00      	add	r7, sp, #0
 801200e:	4603      	mov	r3, r0
 8012010:	603a      	str	r2, [r7, #0]
 8012012:	71fb      	strb	r3, [r7, #7]
 8012014:	460b      	mov	r3, r1
 8012016:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8012018:	79fb      	ldrb	r3, [r7, #7]
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	4618      	mov	r0, r3
 801201e:	f7fe ff57 	bl	8010ed0 <netconn_alloc>
 8012022:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8012024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012026:	2b00      	cmp	r3, #0
 8012028:	d054      	beq.n	80120d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 801202a:	79bb      	ldrb	r3, [r7, #6]
 801202c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012030:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8012032:	f107 0308 	add.w	r3, r7, #8
 8012036:	4619      	mov	r1, r3
 8012038:	4829      	ldr	r0, [pc, #164]	@ (80120e0 <netconn_new_with_proto_and_callback+0xd8>)
 801203a:	f7ff ffc7 	bl	8011fcc <netconn_apimsg>
 801203e:	4603      	mov	r3, r0
 8012040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8012044:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012048:	2b00      	cmp	r3, #0
 801204a:	d043      	beq.n	80120d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 801204c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d005      	beq.n	8012060 <netconn_new_with_proto_and_callback+0x58>
 8012054:	4b23      	ldr	r3, [pc, #140]	@ (80120e4 <netconn_new_with_proto_and_callback+0xdc>)
 8012056:	22a3      	movs	r2, #163	@ 0xa3
 8012058:	4923      	ldr	r1, [pc, #140]	@ (80120e8 <netconn_new_with_proto_and_callback+0xe0>)
 801205a:	4824      	ldr	r0, [pc, #144]	@ (80120ec <netconn_new_with_proto_and_callback+0xe4>)
 801205c:	f010 fc6c 	bl	8022938 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8012060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012062:	3310      	adds	r3, #16
 8012064:	4618      	mov	r0, r3
 8012066:	f010 f9f7 	bl	8022458 <sys_mbox_valid>
 801206a:	4603      	mov	r3, r0
 801206c:	2b00      	cmp	r3, #0
 801206e:	d105      	bne.n	801207c <netconn_new_with_proto_and_callback+0x74>
 8012070:	4b1c      	ldr	r3, [pc, #112]	@ (80120e4 <netconn_new_with_proto_and_callback+0xdc>)
 8012072:	22a4      	movs	r2, #164	@ 0xa4
 8012074:	491e      	ldr	r1, [pc, #120]	@ (80120f0 <netconn_new_with_proto_and_callback+0xe8>)
 8012076:	481d      	ldr	r0, [pc, #116]	@ (80120ec <netconn_new_with_proto_and_callback+0xe4>)
 8012078:	f010 fc5e 	bl	8022938 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 801207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801207e:	3314      	adds	r3, #20
 8012080:	4618      	mov	r0, r3
 8012082:	f010 f9e9 	bl	8022458 <sys_mbox_valid>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d005      	beq.n	8012098 <netconn_new_with_proto_and_callback+0x90>
 801208c:	4b15      	ldr	r3, [pc, #84]	@ (80120e4 <netconn_new_with_proto_and_callback+0xdc>)
 801208e:	22a6      	movs	r2, #166	@ 0xa6
 8012090:	4918      	ldr	r1, [pc, #96]	@ (80120f4 <netconn_new_with_proto_and_callback+0xec>)
 8012092:	4816      	ldr	r0, [pc, #88]	@ (80120ec <netconn_new_with_proto_and_callback+0xe4>)
 8012094:	f010 fc50 	bl	8022938 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8012098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801209a:	330c      	adds	r3, #12
 801209c:	4618      	mov	r0, r3
 801209e:	f010 fa69 	bl	8022574 <sys_sem_valid>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d105      	bne.n	80120b4 <netconn_new_with_proto_and_callback+0xac>
 80120a8:	4b0e      	ldr	r3, [pc, #56]	@ (80120e4 <netconn_new_with_proto_and_callback+0xdc>)
 80120aa:	22a9      	movs	r2, #169	@ 0xa9
 80120ac:	4912      	ldr	r1, [pc, #72]	@ (80120f8 <netconn_new_with_proto_and_callback+0xf0>)
 80120ae:	480f      	ldr	r0, [pc, #60]	@ (80120ec <netconn_new_with_proto_and_callback+0xe4>)
 80120b0:	f010 fc42 	bl	8022938 <iprintf>
      sys_sem_free(&conn->op_completed);
 80120b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b6:	330c      	adds	r3, #12
 80120b8:	4618      	mov	r0, r3
 80120ba:	f010 fa4e 	bl	802255a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80120be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c0:	3310      	adds	r3, #16
 80120c2:	4618      	mov	r0, r3
 80120c4:	f010 f954 	bl	8022370 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80120c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120ca:	2007      	movs	r0, #7
 80120cc:	f007 fe62 	bl	8019d94 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e000      	b.n	80120d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80120d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3730      	adds	r7, #48	@ 0x30
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	08010ea5 	.word	0x08010ea5
 80120e4:	08024594 	.word	0x08024594
 80120e8:	0802460c 	.word	0x0802460c
 80120ec:	08024080 	.word	0x08024080
 80120f0:	08024630 	.word	0x08024630
 80120f4:	08024648 	.word	0x08024648
 80120f8:	0802466c 	.word	0x0802466c

080120fc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b08c      	sub	sp, #48	@ 0x30
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d101      	bne.n	801210e <netconn_prepare_delete+0x12>
    return ERR_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	e014      	b.n	8012138 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012112:	2329      	movs	r3, #41	@ 0x29
 8012114:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8012116:	f107 030c 	add.w	r3, r7, #12
 801211a:	4619      	mov	r1, r3
 801211c:	4808      	ldr	r0, [pc, #32]	@ (8012140 <netconn_prepare_delete+0x44>)
 801211e:	f7ff ff55 	bl	8011fcc <netconn_apimsg>
 8012122:	4603      	mov	r3, r0
 8012124:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8012128:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <netconn_prepare_delete+0x3a>
    return err;
 8012130:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8012134:	e000      	b.n	8012138 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	3730      	adds	r7, #48	@ 0x30
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	08011411 	.word	0x08011411

08012144 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b084      	sub	sp, #16
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d101      	bne.n	8012156 <netconn_delete+0x12>
    return ERR_OK;
 8012152:	2300      	movs	r3, #0
 8012154:	e00d      	b.n	8012172 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff ffd0 	bl	80120fc <netconn_prepare_delete>
 801215c:	4603      	mov	r3, r0
 801215e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8012160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d102      	bne.n	801216e <netconn_delete+0x2a>
    netconn_free(conn);
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7fe ff1f 	bl	8010fac <netconn_free>
  }
  return err;
 801216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012172:	4618      	mov	r0, r3
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
	...

0801217c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08e      	sub	sp, #56	@ 0x38
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d109      	bne.n	80121a4 <netconn_getaddr+0x28>
 8012190:	4b1d      	ldr	r3, [pc, #116]	@ (8012208 <netconn_getaddr+0x8c>)
 8012192:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012196:	491d      	ldr	r1, [pc, #116]	@ (801220c <netconn_getaddr+0x90>)
 8012198:	481d      	ldr	r0, [pc, #116]	@ (8012210 <netconn_getaddr+0x94>)
 801219a:	f010 fbcd 	bl	8022938 <iprintf>
 801219e:	f06f 030f 	mvn.w	r3, #15
 80121a2:	e02d      	b.n	8012200 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d109      	bne.n	80121be <netconn_getaddr+0x42>
 80121aa:	4b17      	ldr	r3, [pc, #92]	@ (8012208 <netconn_getaddr+0x8c>)
 80121ac:	f240 1213 	movw	r2, #275	@ 0x113
 80121b0:	4918      	ldr	r1, [pc, #96]	@ (8012214 <netconn_getaddr+0x98>)
 80121b2:	4817      	ldr	r0, [pc, #92]	@ (8012210 <netconn_getaddr+0x94>)
 80121b4:	f010 fbc0 	bl	8022938 <iprintf>
 80121b8:	f06f 030f 	mvn.w	r3, #15
 80121bc:	e020      	b.n	8012200 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d109      	bne.n	80121d8 <netconn_getaddr+0x5c>
 80121c4:	4b10      	ldr	r3, [pc, #64]	@ (8012208 <netconn_getaddr+0x8c>)
 80121c6:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80121ca:	4913      	ldr	r1, [pc, #76]	@ (8012218 <netconn_getaddr+0x9c>)
 80121cc:	4810      	ldr	r0, [pc, #64]	@ (8012210 <netconn_getaddr+0x94>)
 80121ce:	f010 fbb3 	bl	8022938 <iprintf>
 80121d2:	f06f 030f 	mvn.w	r3, #15
 80121d6:	e013      	b.n	8012200 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80121dc:	78fb      	ldrb	r3, [r7, #3]
 80121de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80121ea:	f107 0314 	add.w	r3, r7, #20
 80121ee:	4619      	mov	r1, r3
 80121f0:	480a      	ldr	r0, [pc, #40]	@ (801221c <netconn_getaddr+0xa0>)
 80121f2:	f7ff feeb 	bl	8011fcc <netconn_apimsg>
 80121f6:	4603      	mov	r3, r0
 80121f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80121fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012200:	4618      	mov	r0, r3
 8012202:	3738      	adds	r7, #56	@ 0x38
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	08024594 	.word	0x08024594
 801220c:	08024688 	.word	0x08024688
 8012210:	08024080 	.word	0x08024080
 8012214:	080246a8 	.word	0x080246a8
 8012218:	080246c8 	.word	0x080246c8
 801221c:	08011d35 	.word	0x08011d35

08012220 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b08e      	sub	sp, #56	@ 0x38
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4613      	mov	r3, r2
 801222c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d109      	bne.n	8012248 <netconn_bind+0x28>
 8012234:	4b11      	ldr	r3, [pc, #68]	@ (801227c <netconn_bind+0x5c>)
 8012236:	f44f 729c 	mov.w	r2, #312	@ 0x138
 801223a:	4911      	ldr	r1, [pc, #68]	@ (8012280 <netconn_bind+0x60>)
 801223c:	4811      	ldr	r0, [pc, #68]	@ (8012284 <netconn_bind+0x64>)
 801223e:	f010 fb7b 	bl	8022938 <iprintf>
 8012242:	f06f 030f 	mvn.w	r3, #15
 8012246:	e015      	b.n	8012274 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801224e:	4b0e      	ldr	r3, [pc, #56]	@ (8012288 <netconn_bind+0x68>)
 8012250:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801225a:	88fb      	ldrh	r3, [r7, #6]
 801225c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801225e:	f107 0314 	add.w	r3, r7, #20
 8012262:	4619      	mov	r1, r3
 8012264:	4809      	ldr	r0, [pc, #36]	@ (801228c <netconn_bind+0x6c>)
 8012266:	f7ff feb1 	bl	8011fcc <netconn_apimsg>
 801226a:	4603      	mov	r3, r0
 801226c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012270:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012274:	4618      	mov	r0, r3
 8012276:	3738      	adds	r7, #56	@ 0x38
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	08024594 	.word	0x08024594
 8012280:	080246e8 	.word	0x080246e8
 8012284:	08024080 	.word	0x08024080
 8012288:	08028c18 	.word	0x08028c18
 801228c:	080115d9 	.word	0x080115d9

08012290 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08c      	sub	sp, #48	@ 0x30
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d109      	bne.n	80122b6 <netconn_listen_with_backlog+0x26>
 80122a2:	4b0d      	ldr	r3, [pc, #52]	@ (80122d8 <netconn_listen_with_backlog+0x48>)
 80122a4:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80122a8:	490c      	ldr	r1, [pc, #48]	@ (80122dc <netconn_listen_with_backlog+0x4c>)
 80122aa:	480d      	ldr	r0, [pc, #52]	@ (80122e0 <netconn_listen_with_backlog+0x50>)
 80122ac:	f010 fb44 	bl	8022938 <iprintf>
 80122b0:	f06f 030f 	mvn.w	r3, #15
 80122b4:	e00c      	b.n	80122d0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80122ba:	f107 030c 	add.w	r3, r7, #12
 80122be:	4619      	mov	r1, r3
 80122c0:	4808      	ldr	r0, [pc, #32]	@ (80122e4 <netconn_listen_with_backlog+0x54>)
 80122c2:	f7ff fe83 	bl	8011fcc <netconn_apimsg>
 80122c6:	4603      	mov	r3, r0
 80122c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80122cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3730      	adds	r7, #48	@ 0x30
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	08024594 	.word	0x08024594
 80122dc:	08024768 	.word	0x08024768
 80122e0:	08024080 	.word	0x08024080
 80122e4:	0801164d 	.word	0x0801164d

080122e8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b086      	sub	sp, #24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d109      	bne.n	801230c <netconn_accept+0x24>
 80122f8:	4b3d      	ldr	r3, [pc, #244]	@ (80123f0 <netconn_accept+0x108>)
 80122fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80122fe:	493d      	ldr	r1, [pc, #244]	@ (80123f4 <netconn_accept+0x10c>)
 8012300:	483d      	ldr	r0, [pc, #244]	@ (80123f8 <netconn_accept+0x110>)
 8012302:	f010 fb19 	bl	8022938 <iprintf>
 8012306:	f06f 030f 	mvn.w	r3, #15
 801230a:	e06c      	b.n	80123e6 <netconn_accept+0xfe>
  *new_conn = NULL;
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	2200      	movs	r2, #0
 8012310:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d109      	bne.n	801232c <netconn_accept+0x44>
 8012318:	4b35      	ldr	r3, [pc, #212]	@ (80123f0 <netconn_accept+0x108>)
 801231a:	f240 12e3 	movw	r2, #483	@ 0x1e3
 801231e:	4937      	ldr	r1, [pc, #220]	@ (80123fc <netconn_accept+0x114>)
 8012320:	4835      	ldr	r0, [pc, #212]	@ (80123f8 <netconn_accept+0x110>)
 8012322:	f010 fb09 	bl	8022938 <iprintf>
 8012326:	f06f 030f 	mvn.w	r3, #15
 801232a:	e05c      	b.n	80123e6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 fb99 	bl	8012a64 <netconn_err>
 8012332:	4603      	mov	r3, r0
 8012334:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8012336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d002      	beq.n	8012344 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 801233e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012342:	e050      	b.n	80123e6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3314      	adds	r3, #20
 8012348:	4618      	mov	r0, r3
 801234a:	f010 f885 	bl	8022458 <sys_mbox_valid>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <netconn_accept+0x78>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	7f1b      	ldrb	r3, [r3, #28]
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8012360:	f06f 030e 	mvn.w	r3, #14
 8012364:	e03f      	b.n	80123e6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	7f1b      	ldrb	r3, [r3, #28]
 801236a:	f003 0302 	and.w	r3, r3, #2
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00e      	beq.n	8012390 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	3314      	adds	r3, #20
 8012376:	f107 020c 	add.w	r2, r7, #12
 801237a:	4611      	mov	r1, r2
 801237c:	4618      	mov	r0, r3
 801237e:	f010 f854 	bl	802242a <sys_arch_mbox_tryfetch>
 8012382:	4603      	mov	r3, r0
 8012384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012388:	d10a      	bne.n	80123a0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801238a:	f06f 0306 	mvn.w	r3, #6
 801238e:	e02a      	b.n	80123e6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	3314      	adds	r3, #20
 8012394:	f107 010c 	add.w	r1, r7, #12
 8012398:	2200      	movs	r2, #0
 801239a:	4618      	mov	r0, r3
 801239c:	f010 f814 	bl	80223c8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d005      	beq.n	80123b4 <netconn_accept+0xcc>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123ac:	2200      	movs	r2, #0
 80123ae:	2101      	movs	r1, #1
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f107 0213 	add.w	r2, r7, #19
 80123ba:	4611      	mov	r1, r2
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fe f953 	bl	8010668 <lwip_netconn_is_err_msg>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80123c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123cc:	e00b      	b.n	80123e6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d102      	bne.n	80123da <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80123d4:	f06f 030e 	mvn.w	r3, #14
 80123d8:	e005      	b.n	80123e6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80123e4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3718      	adds	r7, #24
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	08024594 	.word	0x08024594
 80123f4:	08024788 	.word	0x08024788
 80123f8:	08024080 	.word	0x08024080
 80123fc:	080247a8 	.word	0x080247a8

08012400 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b088      	sub	sp, #32
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	4613      	mov	r3, r2
 801240c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801240e:	2300      	movs	r3, #0
 8012410:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d109      	bne.n	801242c <netconn_recv_data+0x2c>
 8012418:	4b58      	ldr	r3, [pc, #352]	@ (801257c <netconn_recv_data+0x17c>)
 801241a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801241e:	4958      	ldr	r1, [pc, #352]	@ (8012580 <netconn_recv_data+0x180>)
 8012420:	4858      	ldr	r0, [pc, #352]	@ (8012584 <netconn_recv_data+0x184>)
 8012422:	f010 fa89 	bl	8022938 <iprintf>
 8012426:	f06f 030f 	mvn.w	r3, #15
 801242a:	e0a2      	b.n	8012572 <netconn_recv_data+0x172>
  *new_buf = NULL;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d109      	bne.n	801244c <netconn_recv_data+0x4c>
 8012438:	4b50      	ldr	r3, [pc, #320]	@ (801257c <netconn_recv_data+0x17c>)
 801243a:	f240 224a 	movw	r2, #586	@ 0x24a
 801243e:	4952      	ldr	r1, [pc, #328]	@ (8012588 <netconn_recv_data+0x188>)
 8012440:	4850      	ldr	r0, [pc, #320]	@ (8012584 <netconn_recv_data+0x184>)
 8012442:	f010 fa79 	bl	8022938 <iprintf>
 8012446:	f06f 030f 	mvn.w	r3, #15
 801244a:	e092      	b.n	8012572 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	3310      	adds	r3, #16
 8012450:	4618      	mov	r0, r3
 8012452:	f010 f801 	bl	8022458 <sys_mbox_valid>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10e      	bne.n	801247a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f000 fb01 	bl	8012a64 <netconn_err>
 8012462:	4603      	mov	r3, r0
 8012464:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8012466:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d002      	beq.n	8012474 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801246e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8012472:	e07e      	b.n	8012572 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8012474:	f06f 030a 	mvn.w	r3, #10
 8012478:	e07b      	b.n	8012572 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	7f1b      	ldrb	r3, [r3, #28]
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10f      	bne.n	80124a6 <netconn_recv_data+0xa6>
 8012486:	79fb      	ldrb	r3, [r7, #7]
 8012488:	f003 0304 	and.w	r3, r3, #4
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10a      	bne.n	80124a6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	7f1b      	ldrb	r3, [r3, #28]
 8012494:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012498:	2b00      	cmp	r3, #0
 801249a:	d104      	bne.n	80124a6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d023      	beq.n	80124ee <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	3310      	adds	r3, #16
 80124aa:	f107 0218 	add.w	r2, r7, #24
 80124ae:	4611      	mov	r1, r2
 80124b0:	4618      	mov	r0, r3
 80124b2:	f00f ffba 	bl	802242a <sys_arch_mbox_tryfetch>
 80124b6:	4603      	mov	r3, r0
 80124b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124bc:	d11f      	bne.n	80124fe <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f000 fad0 	bl	8012a64 <netconn_err>
 80124c4:	4603      	mov	r3, r0
 80124c6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80124c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80124d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124d4:	e04d      	b.n	8012572 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	7f1b      	ldrb	r3, [r3, #28]
 80124da:	f003 0301 	and.w	r3, r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d002      	beq.n	80124e8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80124e2:	f06f 030a 	mvn.w	r3, #10
 80124e6:	e044      	b.n	8012572 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80124e8:	f06f 0306 	mvn.w	r3, #6
 80124ec:	e041      	b.n	8012572 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	3310      	adds	r3, #16
 80124f2:	f107 0118 	add.w	r1, r7, #24
 80124f6:	2200      	movs	r2, #0
 80124f8:	4618      	mov	r0, r3
 80124fa:	f00f ff65 	bl	80223c8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012506:	2b10      	cmp	r3, #16
 8012508:	d117      	bne.n	801253a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	f107 0217 	add.w	r2, r7, #23
 8012510:	4611      	mov	r1, r2
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe f8a8 	bl	8010668 <lwip_netconn_is_err_msg>
 8012518:	4603      	mov	r3, r0
 801251a:	2b00      	cmp	r3, #0
 801251c:	d009      	beq.n	8012532 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801251e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012522:	f113 0f0f 	cmn.w	r3, #15
 8012526:	d101      	bne.n	801252c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	e022      	b.n	8012572 <netconn_recv_data+0x172>
      }
      return err;
 801252c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012530:	e01f      	b.n	8012572 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	891b      	ldrh	r3, [r3, #8]
 8012536:	83fb      	strh	r3, [r7, #30]
 8012538:	e00d      	b.n	8012556 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <netconn_recv_data+0x14e>
 8012540:	4b0e      	ldr	r3, [pc, #56]	@ (801257c <netconn_recv_data+0x17c>)
 8012542:	f240 2291 	movw	r2, #657	@ 0x291
 8012546:	4911      	ldr	r1, [pc, #68]	@ (801258c <netconn_recv_data+0x18c>)
 8012548:	480e      	ldr	r0, [pc, #56]	@ (8012584 <netconn_recv_data+0x184>)
 801254a:	f010 f9f5 	bl	8022938 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	891b      	ldrh	r3, [r3, #8]
 8012554:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801255a:	2b00      	cmp	r3, #0
 801255c:	d005      	beq.n	801256a <netconn_recv_data+0x16a>
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012562:	8bfa      	ldrh	r2, [r7, #30]
 8012564:	2101      	movs	r1, #1
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801256a:	69ba      	ldr	r2, [r7, #24]
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012570:	2300      	movs	r3, #0
}
 8012572:	4618      	mov	r0, r3
 8012574:	3720      	adds	r7, #32
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	08024594 	.word	0x08024594
 8012580:	080247c8 	.word	0x080247c8
 8012584:	08024080 	.word	0x08024080
 8012588:	080247e8 	.word	0x080247e8
 801258c:	08024804 	.word	0x08024804

08012590 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d005      	beq.n	80125ae <netconn_tcp_recvd_msg+0x1e>
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125aa:	2b10      	cmp	r3, #16
 80125ac:	d009      	beq.n	80125c2 <netconn_tcp_recvd_msg+0x32>
 80125ae:	4b0c      	ldr	r3, [pc, #48]	@ (80125e0 <netconn_tcp_recvd_msg+0x50>)
 80125b0:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80125b4:	490b      	ldr	r1, [pc, #44]	@ (80125e4 <netconn_tcp_recvd_msg+0x54>)
 80125b6:	480c      	ldr	r0, [pc, #48]	@ (80125e8 <netconn_tcp_recvd_msg+0x58>)
 80125b8:	f010 f9be 	bl	8022938 <iprintf>
 80125bc:	f06f 030f 	mvn.w	r3, #15
 80125c0:	e00a      	b.n	80125d8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	68ba      	ldr	r2, [r7, #8]
 80125cc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80125ce:	6879      	ldr	r1, [r7, #4]
 80125d0:	4806      	ldr	r0, [pc, #24]	@ (80125ec <netconn_tcp_recvd_msg+0x5c>)
 80125d2:	f7ff fcfb 	bl	8011fcc <netconn_apimsg>
 80125d6:	4603      	mov	r3, r0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	08024594 	.word	0x08024594
 80125e4:	08024810 	.word	0x08024810
 80125e8:	08024080 	.word	0x08024080
 80125ec:	08011817 	.word	0x08011817

080125f0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b08c      	sub	sp, #48	@ 0x30
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d005      	beq.n	801260c <netconn_tcp_recvd+0x1c>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012608:	2b10      	cmp	r3, #16
 801260a:	d009      	beq.n	8012620 <netconn_tcp_recvd+0x30>
 801260c:	4b0c      	ldr	r3, [pc, #48]	@ (8012640 <netconn_tcp_recvd+0x50>)
 801260e:	f240 22b5 	movw	r2, #693	@ 0x2b5
 8012612:	490c      	ldr	r1, [pc, #48]	@ (8012644 <netconn_tcp_recvd+0x54>)
 8012614:	480c      	ldr	r0, [pc, #48]	@ (8012648 <netconn_tcp_recvd+0x58>)
 8012616:	f010 f98f 	bl	8022938 <iprintf>
 801261a:	f06f 030f 	mvn.w	r3, #15
 801261e:	e00b      	b.n	8012638 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8012620:	f107 030c 	add.w	r3, r7, #12
 8012624:	461a      	mov	r2, r3
 8012626:	6839      	ldr	r1, [r7, #0]
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ff ffb1 	bl	8012590 <netconn_tcp_recvd_msg>
 801262e:	4603      	mov	r3, r0
 8012630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8012634:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012638:	4618      	mov	r0, r3
 801263a:	3730      	adds	r7, #48	@ 0x30
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	08024594 	.word	0x08024594
 8012644:	08024810 	.word	0x08024810
 8012648:	08024080 	.word	0x08024080

0801264c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b090      	sub	sp, #64	@ 0x40
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	4613      	mov	r3, r2
 8012658:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	3310      	adds	r3, #16
 801265e:	4618      	mov	r0, r3
 8012660:	f00f fefa 	bl	8022458 <sys_mbox_valid>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d102      	bne.n	8012670 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801266a:	f06f 030a 	mvn.w	r3, #10
 801266e:	e06d      	b.n	801274c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	7f1b      	ldrb	r3, [r3, #28]
 8012674:	b25b      	sxtb	r3, r3
 8012676:	2b00      	cmp	r3, #0
 8012678:	da07      	bge.n	801268a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	7f1b      	ldrb	r3, [r3, #28]
 801267e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012682:	b2da      	uxtb	r2, r3
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8012688:	e039      	b.n	80126fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801268a:	79fb      	ldrb	r3, [r7, #7]
 801268c:	461a      	mov	r2, r3
 801268e:	68b9      	ldr	r1, [r7, #8]
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7ff feb5 	bl	8012400 <netconn_recv_data>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801269c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d002      	beq.n	80126aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80126a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80126a8:	e050      	b.n	801274c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80126b0:	79fb      	ldrb	r3, [r7, #7]
 80126b2:	f003 0308 	and.w	r3, r3, #8
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10e      	bne.n	80126d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80126ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <netconn_recv_data_tcp+0x7a>
 80126c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126c2:	891b      	ldrh	r3, [r3, #8]
 80126c4:	e000      	b.n	80126c8 <netconn_recv_data_tcp+0x7c>
 80126c6:	2301      	movs	r3, #1
 80126c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80126ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80126cc:	f107 0214 	add.w	r2, r7, #20
 80126d0:	4619      	mov	r1, r3
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ff ff5c 	bl	8012590 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80126d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d134      	bne.n	8012748 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80126de:	79fb      	ldrb	r3, [r7, #7]
 80126e0:	f003 0310 	and.w	r3, r3, #16
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d009      	beq.n	80126fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	7f1b      	ldrb	r3, [r3, #28]
 80126ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80126f6:	f06f 0306 	mvn.w	r3, #6
 80126fa:	e027      	b.n	801274c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80126fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012702:	2b00      	cmp	r3, #0
 8012704:	d005      	beq.n	8012712 <netconn_recv_data_tcp+0xc6>
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801270a:	2200      	movs	r2, #0
 801270c:	2101      	movs	r1, #1
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d10f      	bne.n	801273a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801271a:	68f8      	ldr	r0, [r7, #12]
 801271c:	f000 f9a2 	bl	8012a64 <netconn_err>
 8012720:	4603      	mov	r3, r0
 8012722:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8012726:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801272a:	2b00      	cmp	r3, #0
 801272c:	d002      	beq.n	8012734 <netconn_recv_data_tcp+0xe8>
          return err;
 801272e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8012732:	e00b      	b.n	801274c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8012734:	f06f 030d 	mvn.w	r3, #13
 8012738:	e008      	b.n	801274c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801273a:	2101      	movs	r1, #1
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f000 f961 	bl	8012a04 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012742:	f06f 030e 	mvn.w	r3, #14
 8012746:	e001      	b.n	801274c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8012748:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801274c:	4618      	mov	r0, r3
 801274e:	3740      	adds	r7, #64	@ 0x40
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	4613      	mov	r3, r2
 8012760:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d005      	beq.n	8012774 <netconn_recv_tcp_pbuf_flags+0x20>
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012770:	2b10      	cmp	r3, #16
 8012772:	d009      	beq.n	8012788 <netconn_recv_tcp_pbuf_flags+0x34>
 8012774:	4b0a      	ldr	r3, [pc, #40]	@ (80127a0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8012776:	f240 3225 	movw	r2, #805	@ 0x325
 801277a:	490a      	ldr	r1, [pc, #40]	@ (80127a4 <netconn_recv_tcp_pbuf_flags+0x50>)
 801277c:	480a      	ldr	r0, [pc, #40]	@ (80127a8 <netconn_recv_tcp_pbuf_flags+0x54>)
 801277e:	f010 f8db 	bl	8022938 <iprintf>
 8012782:	f06f 030f 	mvn.w	r3, #15
 8012786:	e006      	b.n	8012796 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8012788:	79fb      	ldrb	r3, [r7, #7]
 801278a:	461a      	mov	r2, r3
 801278c:	68b9      	ldr	r1, [r7, #8]
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f7ff ff5c 	bl	801264c <netconn_recv_data_tcp>
 8012794:	4603      	mov	r3, r0
}
 8012796:	4618      	mov	r0, r3
 8012798:	3710      	adds	r7, #16
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	08024594 	.word	0x08024594
 80127a4:	08024810 	.word	0x08024810
 80127a8:	08024080 	.word	0x08024080

080127ac <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	4613      	mov	r3, r2
 80127b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d005      	beq.n	80127cc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127c8:	2b10      	cmp	r3, #16
 80127ca:	d109      	bne.n	80127e0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80127cc:	4b0a      	ldr	r3, [pc, #40]	@ (80127f8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80127ce:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80127d2:	490a      	ldr	r1, [pc, #40]	@ (80127fc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80127d4:	480a      	ldr	r0, [pc, #40]	@ (8012800 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80127d6:	f010 f8af 	bl	8022938 <iprintf>
 80127da:	f06f 030f 	mvn.w	r3, #15
 80127de:	e006      	b.n	80127ee <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80127e0:	79fb      	ldrb	r3, [r7, #7]
 80127e2:	461a      	mov	r2, r3
 80127e4:	68b9      	ldr	r1, [r7, #8]
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f7ff fe0a 	bl	8012400 <netconn_recv_data>
 80127ec:	4603      	mov	r3, r0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3710      	adds	r7, #16
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	08024594 	.word	0x08024594
 80127fc:	08024834 	.word	0x08024834
 8012800:	08024080 	.word	0x08024080

08012804 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b08c      	sub	sp, #48	@ 0x30
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d109      	bne.n	8012828 <netconn_send+0x24>
 8012814:	4b0e      	ldr	r3, [pc, #56]	@ (8012850 <netconn_send+0x4c>)
 8012816:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801281a:	490e      	ldr	r1, [pc, #56]	@ (8012854 <netconn_send+0x50>)
 801281c:	480e      	ldr	r0, [pc, #56]	@ (8012858 <netconn_send+0x54>)
 801281e:	f010 f88b 	bl	8022938 <iprintf>
 8012822:	f06f 030f 	mvn.w	r3, #15
 8012826:	e00e      	b.n	8012846 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8012830:	f107 030c 	add.w	r3, r7, #12
 8012834:	4619      	mov	r1, r3
 8012836:	4809      	ldr	r0, [pc, #36]	@ (801285c <netconn_send+0x58>)
 8012838:	f7ff fbc8 	bl	8011fcc <netconn_apimsg>
 801283c:	4603      	mov	r3, r0
 801283e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012842:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012846:	4618      	mov	r0, r3
 8012848:	3730      	adds	r7, #48	@ 0x30
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	08024594 	.word	0x08024594
 8012854:	0802486c 	.word	0x0802486c
 8012858:	08024080 	.word	0x08024080
 801285c:	0801177d 	.word	0x0801177d

08012860 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b088      	sub	sp, #32
 8012864:	af02      	add	r7, sp, #8
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
 801286c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012876:	78fa      	ldrb	r2, [r7, #3]
 8012878:	f107 0110 	add.w	r1, r7, #16
 801287c:	6a3b      	ldr	r3, [r7, #32]
 801287e:	9300      	str	r3, [sp, #0]
 8012880:	4613      	mov	r3, r2
 8012882:	2201      	movs	r2, #1
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f000 f805 	bl	8012894 <netconn_write_vectors_partly>
 801288a:	4603      	mov	r3, r0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3718      	adds	r7, #24
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b092      	sub	sp, #72	@ 0x48
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	4611      	mov	r1, r2
 80128a0:	461a      	mov	r2, r3
 80128a2:	460b      	mov	r3, r1
 80128a4:	80fb      	strh	r3, [r7, #6]
 80128a6:	4613      	mov	r3, r2
 80128a8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d109      	bne.n	80128c4 <netconn_write_vectors_partly+0x30>
 80128b0:	4b4e      	ldr	r3, [pc, #312]	@ (80129ec <netconn_write_vectors_partly+0x158>)
 80128b2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80128b6:	494e      	ldr	r1, [pc, #312]	@ (80129f0 <netconn_write_vectors_partly+0x15c>)
 80128b8:	484e      	ldr	r0, [pc, #312]	@ (80129f4 <netconn_write_vectors_partly+0x160>)
 80128ba:	f010 f83d 	bl	8022938 <iprintf>
 80128be:	f06f 030f 	mvn.w	r3, #15
 80128c2:	e08e      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128cc:	2b10      	cmp	r3, #16
 80128ce:	d009      	beq.n	80128e4 <netconn_write_vectors_partly+0x50>
 80128d0:	4b46      	ldr	r3, [pc, #280]	@ (80129ec <netconn_write_vectors_partly+0x158>)
 80128d2:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80128d6:	4948      	ldr	r1, [pc, #288]	@ (80129f8 <netconn_write_vectors_partly+0x164>)
 80128d8:	4846      	ldr	r0, [pc, #280]	@ (80129f4 <netconn_write_vectors_partly+0x160>)
 80128da:	f010 f82d 	bl	8022938 <iprintf>
 80128de:	f06f 0305 	mvn.w	r3, #5
 80128e2:	e07e      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	7f1b      	ldrb	r3, [r3, #28]
 80128e8:	f003 0302 	and.w	r3, r3, #2
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d104      	bne.n	80128fa <netconn_write_vectors_partly+0x66>
 80128f0:	797b      	ldrb	r3, [r7, #5]
 80128f2:	f003 0304 	and.w	r3, r3, #4
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d001      	beq.n	80128fe <netconn_write_vectors_partly+0x6a>
 80128fa:	2301      	movs	r3, #1
 80128fc:	e000      	b.n	8012900 <netconn_write_vectors_partly+0x6c>
 80128fe:	2300      	movs	r3, #0
 8012900:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8012904:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012908:	2b00      	cmp	r3, #0
 801290a:	d005      	beq.n	8012918 <netconn_write_vectors_partly+0x84>
 801290c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801290e:	2b00      	cmp	r3, #0
 8012910:	d102      	bne.n	8012918 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8012912:	f06f 0305 	mvn.w	r3, #5
 8012916:	e064      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 801291c:	2300      	movs	r3, #0
 801291e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012920:	e015      	b.n	801294e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8012922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012924:	00db      	lsls	r3, r3, #3
 8012926:	68ba      	ldr	r2, [r7, #8]
 8012928:	4413      	add	r3, r2
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801292e:	4413      	add	r3, r2
 8012930:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8012932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	4413      	add	r3, r2
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801293e:	429a      	cmp	r2, r3
 8012940:	d202      	bcs.n	8012948 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8012942:	f06f 0305 	mvn.w	r3, #5
 8012946:	e04c      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8012948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801294a:	3301      	adds	r3, #1
 801294c:	643b      	str	r3, [r7, #64]	@ 0x40
 801294e:	88fb      	ldrh	r3, [r7, #6]
 8012950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012952:	429a      	cmp	r2, r3
 8012954:	dbe5      	blt.n	8012922 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8012956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012958:	2b00      	cmp	r3, #0
 801295a:	d101      	bne.n	8012960 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	e040      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8012960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012962:	2b00      	cmp	r3, #0
 8012964:	da0a      	bge.n	801297c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012968:	2b00      	cmp	r3, #0
 801296a:	d102      	bne.n	8012972 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 801296c:	f06f 0305 	mvn.w	r3, #5
 8012970:	e037      	b.n	80129e2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012972:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012976:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8012978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012984:	88fb      	ldrh	r3, [r7, #6]
 8012986:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012988:	2300      	movs	r3, #0
 801298a:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801298c:	797b      	ldrb	r3, [r7, #5]
 801298e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012994:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 801299a:	f107 0314 	add.w	r3, r7, #20
 801299e:	4619      	mov	r1, r3
 80129a0:	4816      	ldr	r0, [pc, #88]	@ (80129fc <netconn_write_vectors_partly+0x168>)
 80129a2:	f7ff fb13 	bl	8011fcc <netconn_apimsg>
 80129a6:	4603      	mov	r3, r0
 80129a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80129ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d114      	bne.n	80129de <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80129b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d002      	beq.n	80129c0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80129ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129be:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80129c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d10a      	bne.n	80129de <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80129c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d006      	beq.n	80129de <netconn_write_vectors_partly+0x14a>
 80129d0:	4b06      	ldr	r3, [pc, #24]	@ (80129ec <netconn_write_vectors_partly+0x158>)
 80129d2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80129d6:	490a      	ldr	r1, [pc, #40]	@ (8012a00 <netconn_write_vectors_partly+0x16c>)
 80129d8:	4806      	ldr	r0, [pc, #24]	@ (80129f4 <netconn_write_vectors_partly+0x160>)
 80129da:	f00f ffad 	bl	8022938 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80129de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3748      	adds	r7, #72	@ 0x48
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	08024594 	.word	0x08024594
 80129f0:	08024888 	.word	0x08024888
 80129f4:	08024080 	.word	0x08024080
 80129f8:	080248a4 	.word	0x080248a4
 80129fc:	08011c1d 	.word	0x08011c1d
 8012a00:	080248c8 	.word	0x080248c8

08012a04 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b08c      	sub	sp, #48	@ 0x30
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d109      	bne.n	8012a2a <netconn_close_shutdown+0x26>
 8012a16:	4b0f      	ldr	r3, [pc, #60]	@ (8012a54 <netconn_close_shutdown+0x50>)
 8012a18:	f240 4247 	movw	r2, #1095	@ 0x447
 8012a1c:	490e      	ldr	r1, [pc, #56]	@ (8012a58 <netconn_close_shutdown+0x54>)
 8012a1e:	480f      	ldr	r0, [pc, #60]	@ (8012a5c <netconn_close_shutdown+0x58>)
 8012a20:	f00f ff8a 	bl	8022938 <iprintf>
 8012a24:	f06f 030f 	mvn.w	r3, #15
 8012a28:	e010      	b.n	8012a4c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8012a2e:	78fb      	ldrb	r3, [r7, #3]
 8012a30:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012a32:	2329      	movs	r3, #41	@ 0x29
 8012a34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8012a36:	f107 030c 	add.w	r3, r7, #12
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4808      	ldr	r0, [pc, #32]	@ (8012a60 <netconn_close_shutdown+0x5c>)
 8012a3e:	f7ff fac5 	bl	8011fcc <netconn_apimsg>
 8012a42:	4603      	mov	r3, r0
 8012a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012a48:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3730      	adds	r7, #48	@ 0x30
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	08024594 	.word	0x08024594
 8012a58:	080248ec 	.word	0x080248ec
 8012a5c:	08024080 	.word	0x08024080
 8012a60:	08011e41 	.word	0x08011e41

08012a64 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <netconn_err+0x12>
    return ERR_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e00d      	b.n	8012a92 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012a76:	f00f fdf9 	bl	802266c <sys_arch_protect>
 8012a7a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	7a1b      	ldrb	r3, [r3, #8]
 8012a80:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f00f fdfd 	bl	8022688 <sys_arch_unprotect>
  return err;
 8012a8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3710      	adds	r7, #16
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
	...

08012a9c <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b08e      	sub	sp, #56	@ 0x38
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
 8012aa8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d109      	bne.n	8012ac4 <netconn_join_leave_group+0x28>
 8012ab0:	4b15      	ldr	r3, [pc, #84]	@ (8012b08 <netconn_join_leave_group+0x6c>)
 8012ab2:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 8012ab6:	4915      	ldr	r1, [pc, #84]	@ (8012b0c <netconn_join_leave_group+0x70>)
 8012ab8:	4815      	ldr	r0, [pc, #84]	@ (8012b10 <netconn_join_leave_group+0x74>)
 8012aba:	f00f ff3d 	bl	8022938 <iprintf>
 8012abe:	f06f 030f 	mvn.w	r3, #15
 8012ac2:	e01d      	b.n	8012b00 <netconn_join_leave_group+0x64>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d101      	bne.n	8012ace <netconn_join_leave_group+0x32>
    multiaddr = IP4_ADDR_ANY;
 8012aca:	4b12      	ldr	r3, [pc, #72]	@ (8012b14 <netconn_join_leave_group+0x78>)
 8012acc:	60bb      	str	r3, [r7, #8]
  }
  if (netif_addr == NULL) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <netconn_join_leave_group+0x3c>
    netif_addr = IP4_ADDR_ANY;
 8012ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8012b14 <netconn_join_leave_group+0x78>)
 8012ad6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 8012ae4:	78fb      	ldrb	r3, [r7, #3]
 8012ae6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
 8012aea:	f107 0314 	add.w	r3, r7, #20
 8012aee:	4619      	mov	r1, r3
 8012af0:	4809      	ldr	r0, [pc, #36]	@ (8012b18 <netconn_join_leave_group+0x7c>)
 8012af2:	f7ff fa6b 	bl	8011fcc <netconn_apimsg>
 8012af6:	4603      	mov	r3, r0
 8012af8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012afc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3738      	adds	r7, #56	@ 0x38
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	08024594 	.word	0x08024594
 8012b0c:	08024908 	.word	0x08024908
 8012b10:	08024080 	.word	0x08024080
 8012b14:	08028c18 	.word	0x08028c18
 8012b18:	08011f59 	.word	0x08011f59

08012b1c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d013      	beq.n	8012b52 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d00b      	beq.n	8012b4a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f008 f824 	bl	801ab84 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	605a      	str	r2, [r3, #4]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685a      	ldr	r2, [r3, #4]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012b4a:	6879      	ldr	r1, [r7, #4]
 8012b4c:	2006      	movs	r0, #6
 8012b4e:	f007 f921 	bl	8019d94 <memp_free>
  }
}
 8012b52:	bf00      	nop
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
	...

08012b5c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d106      	bne.n	8012b78 <netbuf_free+0x1c>
 8012b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba0 <netbuf_free+0x44>)
 8012b6c:	2281      	movs	r2, #129	@ 0x81
 8012b6e:	490d      	ldr	r1, [pc, #52]	@ (8012ba4 <netbuf_free+0x48>)
 8012b70:	480d      	ldr	r0, [pc, #52]	@ (8012ba8 <netbuf_free+0x4c>)
 8012b72:	f00f fee1 	bl	8022938 <iprintf>
 8012b76:	e00f      	b.n	8012b98 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d004      	beq.n	8012b8a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f007 fffd 	bl	801ab84 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	605a      	str	r2, [r3, #4]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	685a      	ldr	r2, [r3, #4]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	08024930 	.word	0x08024930
 8012ba4:	080249e4 	.word	0x080249e4
 8012ba8:	08024080 	.word	0x08024080

08012bac <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d108      	bne.n	8012bd2 <netbuf_ref+0x26>
 8012bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8012c34 <netbuf_ref+0x88>)
 8012bc2:	2299      	movs	r2, #153	@ 0x99
 8012bc4:	491c      	ldr	r1, [pc, #112]	@ (8012c38 <netbuf_ref+0x8c>)
 8012bc6:	481d      	ldr	r0, [pc, #116]	@ (8012c3c <netbuf_ref+0x90>)
 8012bc8:	f00f feb6 	bl	8022938 <iprintf>
 8012bcc:	f06f 030f 	mvn.w	r3, #15
 8012bd0:	e02b      	b.n	8012c2a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d004      	beq.n	8012be4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f007 ffd0 	bl	801ab84 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012be4:	2241      	movs	r2, #65	@ 0x41
 8012be6:	2100      	movs	r1, #0
 8012be8:	2036      	movs	r0, #54	@ 0x36
 8012bea:	f007 fcb5 	bl	801a558 <pbuf_alloc>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d105      	bne.n	8012c08 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012c02:	f04f 33ff 	mov.w	r3, #4294967295
 8012c06:	e010      	b.n	8012c2a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	68ba      	ldr	r2, [r7, #8]
 8012c0e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	88fa      	ldrh	r2, [r7, #6]
 8012c16:	811a      	strh	r2, [r3, #8]
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	6812      	ldr	r2, [r2, #0]
 8012c1c:	891b      	ldrh	r3, [r3, #8]
 8012c1e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012c28:	2300      	movs	r3, #0
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3710      	adds	r7, #16
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
 8012c32:	bf00      	nop
 8012c34:	08024930 	.word	0x08024930
 8012c38:	08024a00 	.word	0x08024a00
 8012c3c:	08024080 	.word	0x08024080

08012c40 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b085      	sub	sp, #20
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	db02      	blt.n	8012c58 <tryget_socket_unconn_nouse+0x18>
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	dd01      	ble.n	8012c5c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e003      	b.n	8012c64 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	011b      	lsls	r3, r3, #4
 8012c60:	4a03      	ldr	r2, [pc, #12]	@ (8012c70 <tryget_socket_unconn_nouse+0x30>)
 8012c62:	4413      	add	r3, r2
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3714      	adds	r7, #20
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	20008d28 	.word	0x20008d28

08012c74 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f7ff ffdf 	bl	8012c40 <tryget_socket_unconn_nouse>
 8012c82:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8012c84:	68fb      	ldr	r3, [r7, #12]
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b084      	sub	sp, #16
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7ff ffec 	bl	8012c74 <tryget_socket_unconn>
 8012c9c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d005      	beq.n	8012cb0 <tryget_socket+0x22>
    if (sock->conn) {
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <tryget_socket+0x22>
      return sock;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	e000      	b.n	8012cb2 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3710      	adds	r7, #16
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
	...

08012cbc <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff ffe2 	bl	8012c8e <tryget_socket>
 8012cca:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d104      	bne.n	8012cdc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8012cd2:	4b05      	ldr	r3, [pc, #20]	@ (8012ce8 <get_socket+0x2c>)
 8012cd4:	2209      	movs	r2, #9
 8012cd6:	601a      	str	r2, [r3, #0]
    return NULL;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	e000      	b.n	8012cde <get_socket+0x22>
  }
  return sock;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20010078 	.word	0x20010078

08012cec <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	e052      	b.n	8012da2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8012cfc:	f00f fcb6 	bl	802266c <sys_arch_protect>
 8012d00:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8012d02:	4a2c      	ldr	r2, [pc, #176]	@ (8012db4 <alloc_socket+0xc8>)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	011b      	lsls	r3, r3, #4
 8012d08:	4413      	add	r3, r2
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d142      	bne.n	8012d96 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8012d10:	4a28      	ldr	r2, [pc, #160]	@ (8012db4 <alloc_socket+0xc8>)
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	011b      	lsls	r3, r3, #4
 8012d16:	4413      	add	r3, r2
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8012d1c:	68b8      	ldr	r0, [r7, #8]
 8012d1e:	f00f fcb3 	bl	8022688 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8012d22:	4a24      	ldr	r2, [pc, #144]	@ (8012db4 <alloc_socket+0xc8>)
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	011b      	lsls	r3, r3, #4
 8012d28:	4413      	add	r3, r2
 8012d2a:	3304      	adds	r3, #4
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8012d30:	4a20      	ldr	r2, [pc, #128]	@ (8012db4 <alloc_socket+0xc8>)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	011b      	lsls	r3, r3, #4
 8012d36:	4413      	add	r3, r2
 8012d38:	330e      	adds	r3, #14
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d006      	beq.n	8012d4e <alloc_socket+0x62>
 8012d40:	4b1d      	ldr	r3, [pc, #116]	@ (8012db8 <alloc_socket+0xcc>)
 8012d42:	f240 220e 	movw	r2, #526	@ 0x20e
 8012d46:	491d      	ldr	r1, [pc, #116]	@ (8012dbc <alloc_socket+0xd0>)
 8012d48:	481d      	ldr	r0, [pc, #116]	@ (8012dc0 <alloc_socket+0xd4>)
 8012d4a:	f00f fdf5 	bl	8022938 <iprintf>
      sockets[i].rcvevent   = 0;
 8012d4e:	4a19      	ldr	r2, [pc, #100]	@ (8012db4 <alloc_socket+0xc8>)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	011b      	lsls	r3, r3, #4
 8012d54:	4413      	add	r3, r2
 8012d56:	3308      	adds	r3, #8
 8012d58:	2200      	movs	r2, #0
 8012d5a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d64:	2b10      	cmp	r3, #16
 8012d66:	d102      	bne.n	8012d6e <alloc_socket+0x82>
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d001      	beq.n	8012d72 <alloc_socket+0x86>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e000      	b.n	8012d74 <alloc_socket+0x88>
 8012d72:	2300      	movs	r3, #0
 8012d74:	b299      	uxth	r1, r3
 8012d76:	4a0f      	ldr	r2, [pc, #60]	@ (8012db4 <alloc_socket+0xc8>)
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	011b      	lsls	r3, r3, #4
 8012d7c:	4413      	add	r3, r2
 8012d7e:	330a      	adds	r3, #10
 8012d80:	460a      	mov	r2, r1
 8012d82:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8012d84:	4a0b      	ldr	r2, [pc, #44]	@ (8012db4 <alloc_socket+0xc8>)
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	011b      	lsls	r3, r3, #4
 8012d8a:	4413      	add	r3, r2
 8012d8c:	330c      	adds	r3, #12
 8012d8e:	2200      	movs	r2, #0
 8012d90:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	e00a      	b.n	8012dac <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8012d96:	68b8      	ldr	r0, [r7, #8]
 8012d98:	f00f fc76 	bl	8022688 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	60fb      	str	r3, [r7, #12]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2b03      	cmp	r3, #3
 8012da6:	dda9      	ble.n	8012cfc <alloc_socket+0x10>
  }
  return -1;
 8012da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	20008d28 	.word	0x20008d28
 8012db8:	08024ae0 	.word	0x08024ae0
 8012dbc:	08024b58 	.word	0x08024b58
 8012dc0:	08024080 	.word	0x08024080

08012dc4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	6852      	ldr	r2, [r2, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2200      	movs	r2, #0
 8012dec:	601a      	str	r2, [r3, #0]
  return 1;
 8012dee:	2301      	movs	r3, #1
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	60b9      	str	r1, [r7, #8]
 8012e06:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00d      	beq.n	8012e2c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d005      	beq.n	8012e22 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f007 feb2 	bl	801ab84 <pbuf_free>
 8012e20:	e004      	b.n	8012e2c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff fe78 	bl	8012b1c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d002      	beq.n	8012e38 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8012e32:	68b8      	ldr	r0, [r7, #8]
 8012e34:	f7ff f986 	bl	8012144 <netconn_delete>
  }
}
 8012e38:	bf00      	nop
 8012e3a:	3710      	adds	r7, #16
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8012e4a:	f00f fc0f 	bl	802266c <sys_arch_protect>
 8012e4e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8012e50:	f107 0308 	add.w	r3, r7, #8
 8012e54:	f107 020c 	add.w	r2, r7, #12
 8012e58:	6839      	ldr	r1, [r7, #0]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7ff ffb2 	bl	8012dc4 <free_socket_locked>
 8012e60:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f00f fc10 	bl	8022688 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d006      	beq.n	8012e7c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f107 0208 	add.w	r2, r7, #8
 8012e74:	4619      	mov	r1, r3
 8012e76:	6838      	ldr	r0, [r7, #0]
 8012e78:	f7ff ffc0 	bl	8012dfc <free_socket_free_elements>
  }
}
 8012e7c:	bf00      	nop
 8012e7e:	3718      	adds	r7, #24
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8012e84:	b590      	push	{r4, r7, lr}
 8012e86:	b099      	sub	sp, #100	@ 0x64
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8012e90:	2300      	movs	r3, #0
 8012e92:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f7ff ff11 	bl	8012cbc <get_socket>
 8012e9a:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 8012e9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d102      	bne.n	8012ea8 <lwip_accept+0x24>
    return -1;
 8012ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea6:	e0f8      	b.n	801309a <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8012ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff fa18 	bl	80122e8 <netconn_accept>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 8012ebe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d02c      	beq.n	8012f20 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8012ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012ed0:	2b10      	cmp	r3, #16
 8012ed2:	d008      	beq.n	8012ee6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 8012ed4:	235f      	movs	r3, #95	@ 0x5f
 8012ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d01d      	beq.n	8012f1a <lwip_accept+0x96>
 8012ede:	4a71      	ldr	r2, [pc, #452]	@ (80130a4 <lwip_accept+0x220>)
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ee2:	6013      	str	r3, [r2, #0]
 8012ee4:	e019      	b.n	8012f1a <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 8012ee6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012eea:	f113 0f0f 	cmn.w	r3, #15
 8012eee:	d108      	bne.n	8012f02 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8012ef0:	2316      	movs	r3, #22
 8012ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d00f      	beq.n	8012f1a <lwip_accept+0x96>
 8012efa:	4a6a      	ldr	r2, [pc, #424]	@ (80130a4 <lwip_accept+0x220>)
 8012efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	e00b      	b.n	8012f1a <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8012f02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fd fad8 	bl	80104bc <err_to_errno>
 8012f0c:	63b8      	str	r0, [r7, #56]	@ 0x38
 8012f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <lwip_accept+0x96>
 8012f14:	4a63      	ldr	r2, [pc, #396]	@ (80130a4 <lwip_accept+0x220>)
 8012f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f18:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8012f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f1e:	e0bc      	b.n	801309a <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8012f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d106      	bne.n	8012f34 <lwip_accept+0xb0>
 8012f26:	4b60      	ldr	r3, [pc, #384]	@ (80130a8 <lwip_accept+0x224>)
 8012f28:	f240 228b 	movw	r2, #651	@ 0x28b
 8012f2c:	495f      	ldr	r1, [pc, #380]	@ (80130ac <lwip_accept+0x228>)
 8012f2e:	4860      	ldr	r0, [pc, #384]	@ (80130b0 <lwip_accept+0x22c>)
 8012f30:	f00f fd02 	bl	8022938 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8012f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f36:	2101      	movs	r1, #1
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7ff fed7 	bl	8012cec <alloc_socket>
 8012f3e:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 8012f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f46:	d10e      	bne.n	8012f66 <lwip_accept+0xe2>
    netconn_delete(newconn);
 8012f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff f8fa 	bl	8012144 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8012f50:	2317      	movs	r3, #23
 8012f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d002      	beq.n	8012f60 <lwip_accept+0xdc>
 8012f5a:	4a52      	ldr	r2, [pc, #328]	@ (80130a4 <lwip_accept+0x220>)
 8012f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f5e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012f60:	f04f 33ff 	mov.w	r3, #4294967295
 8012f64:	e099      	b.n	801309a <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8012f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	db02      	blt.n	8012f72 <lwip_accept+0xee>
 8012f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f6e:	2b03      	cmp	r3, #3
 8012f70:	dd06      	ble.n	8012f80 <lwip_accept+0xfc>
 8012f72:	4b4d      	ldr	r3, [pc, #308]	@ (80130a8 <lwip_accept+0x224>)
 8012f74:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8012f78:	494e      	ldr	r1, [pc, #312]	@ (80130b4 <lwip_accept+0x230>)
 8012f7a:	484d      	ldr	r0, [pc, #308]	@ (80130b0 <lwip_accept+0x22c>)
 8012f7c:	f00f fcdc 	bl	8022938 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8012f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f82:	011b      	lsls	r3, r3, #4
 8012f84:	4a4c      	ldr	r2, [pc, #304]	@ (80130b8 <lwip_accept+0x234>)
 8012f86:	4413      	add	r3, r2
 8012f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8012f8a:	f00f fb6f 	bl	802266c <sys_arch_protect>
 8012f8e:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 8012f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f92:	699b      	ldr	r3, [r3, #24]
 8012f94:	b21b      	sxth	r3, r3
 8012f96:	43db      	mvns	r3, r3
 8012f98:	b21b      	sxth	r3, r3
 8012f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 8012f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012fa0:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8012fa2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012fa4:	f00f fb70 	bl	8022688 <sys_arch_unprotect>

  if (newconn->callback) {
 8012fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d012      	beq.n	8012fd6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 8012fb0:	4842      	ldr	r0, [pc, #264]	@ (80130bc <lwip_accept+0x238>)
 8012fb2:	f00f fb1f 	bl	80225f4 <sys_mutex_lock>
    while (recvevent > 0) {
 8012fb6:	e008      	b.n	8012fca <lwip_accept+0x146>
      recvevent--;
 8012fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8012fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	4798      	blx	r3
    while (recvevent > 0) {
 8012fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dcf3      	bgt.n	8012fb8 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8012fd0:	483a      	ldr	r0, [pc, #232]	@ (80130bc <lwip_accept+0x238>)
 8012fd2:	f00f fb1e 	bl	8022612 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d055      	beq.n	8013088 <lwip_accept+0x204>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d052      	beq.n	8013088 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8012fe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012fe4:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8012fe8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8012fec:	2300      	movs	r3, #0
 8012fee:	f7ff f8c5 	bl	801217c <netconn_getaddr>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 8012ff8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d016      	beq.n	801302e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8013000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013002:	4618      	mov	r0, r3
 8013004:	f7ff f89e 	bl	8012144 <netconn_delete>
      free_socket(nsock, 1);
 8013008:	2101      	movs	r1, #1
 801300a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801300c:	f7ff ff18 	bl	8012e40 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8013010:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd fa51 	bl	80104bc <err_to_errno>
 801301a:	6478      	str	r0, [r7, #68]	@ 0x44
 801301c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801301e:	2b00      	cmp	r3, #0
 8013020:	d002      	beq.n	8013028 <lwip_accept+0x1a4>
 8013022:	4a20      	ldr	r2, [pc, #128]	@ (80130a4 <lwip_accept+0x220>)
 8013024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013026:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8013028:	f04f 33ff 	mov.w	r3, #4294967295
 801302c:	e035      	b.n	801309a <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801302e:	f107 0314 	add.w	r3, r7, #20
 8013032:	2210      	movs	r2, #16
 8013034:	701a      	strb	r2, [r3, #0]
 8013036:	f107 0314 	add.w	r3, r7, #20
 801303a:	2202      	movs	r2, #2
 801303c:	705a      	strb	r2, [r3, #1]
 801303e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013040:	f107 0414 	add.w	r4, r7, #20
 8013044:	4618      	mov	r0, r3
 8013046:	f006 f8eb 	bl	8019220 <lwip_htons>
 801304a:	4603      	mov	r3, r0
 801304c:	8063      	strh	r3, [r4, #2]
 801304e:	f107 0314 	add.w	r3, r7, #20
 8013052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013054:	605a      	str	r2, [r3, #4]
 8013056:	f107 0314 	add.w	r3, r7, #20
 801305a:	3308      	adds	r3, #8
 801305c:	2208      	movs	r2, #8
 801305e:	2100      	movs	r1, #0
 8013060:	4618      	mov	r0, r3
 8013062:	f00f fdfb 	bl	8022c5c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	7d3a      	ldrb	r2, [r7, #20]
 801306c:	4293      	cmp	r3, r2
 801306e:	d903      	bls.n	8013078 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8013070:	7d3b      	ldrb	r3, [r7, #20]
 8013072:	461a      	mov	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	f107 0314 	add.w	r3, r7, #20
 8013080:	4619      	mov	r1, r3
 8013082:	68b8      	ldr	r0, [r7, #8]
 8013084:	f00f fe8f 	bl	8022da6 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8013088:	2300      	movs	r3, #0
 801308a:	643b      	str	r3, [r7, #64]	@ 0x40
 801308c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801308e:	2b00      	cmp	r3, #0
 8013090:	d002      	beq.n	8013098 <lwip_accept+0x214>
 8013092:	4a04      	ldr	r2, [pc, #16]	@ (80130a4 <lwip_accept+0x220>)
 8013094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013096:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8013098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 801309a:	4618      	mov	r0, r3
 801309c:	3764      	adds	r7, #100	@ 0x64
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd90      	pop	{r4, r7, pc}
 80130a2:	bf00      	nop
 80130a4:	20010078 	.word	0x20010078
 80130a8:	08024ae0 	.word	0x08024ae0
 80130ac:	08024b78 	.word	0x08024b78
 80130b0:	08024080 	.word	0x08024080
 80130b4:	08024b88 	.word	0x08024b88
 80130b8:	20008d28 	.word	0x20008d28
 80130bc:	20008d78 	.word	0x20008d78

080130c0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	@ 0x28
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f7ff fdf5 	bl	8012cbc <get_socket>
 80130d2:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 80130d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d102      	bne.n	80130e0 <lwip_bind+0x20>
    return -1;
 80130da:	f04f 33ff 	mov.w	r3, #4294967295
 80130de:	e051      	b.n	8013184 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b10      	cmp	r3, #16
 80130e4:	d108      	bne.n	80130f8 <lwip_bind+0x38>
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	785b      	ldrb	r3, [r3, #1]
 80130ea:	2b02      	cmp	r3, #2
 80130ec:	d104      	bne.n	80130f8 <lwip_bind+0x38>
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	f003 0303 	and.w	r3, r3, #3
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d014      	beq.n	8013122 <lwip_bind+0x62>
 80130f8:	4b24      	ldr	r3, [pc, #144]	@ (801318c <lwip_bind+0xcc>)
 80130fa:	f240 22e2 	movw	r2, #738	@ 0x2e2
 80130fe:	4924      	ldr	r1, [pc, #144]	@ (8013190 <lwip_bind+0xd0>)
 8013100:	4824      	ldr	r0, [pc, #144]	@ (8013194 <lwip_bind+0xd4>)
 8013102:	f00f fc19 	bl	8022938 <iprintf>
 8013106:	f06f 000f 	mvn.w	r0, #15
 801310a:	f7fd f9d7 	bl	80104bc <err_to_errno>
 801310e:	6178      	str	r0, [r7, #20]
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <lwip_bind+0x5c>
 8013116:	4a20      	ldr	r2, [pc, #128]	@ (8013198 <lwip_bind+0xd8>)
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	6013      	str	r3, [r2, #0]
 801311c:	f04f 33ff 	mov.w	r3, #4294967295
 8013120:	e030      	b.n	8013184 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	613b      	str	r3, [r7, #16]
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	885b      	ldrh	r3, [r3, #2]
 801312c:	4618      	mov	r0, r3
 801312e:	f006 f877 	bl	8019220 <lwip_htons>
 8013132:	4603      	mov	r3, r0
 8013134:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8013136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801313c:	f107 0110 	add.w	r1, r7, #16
 8013140:	4618      	mov	r0, r3
 8013142:	f7ff f86d 	bl	8012220 <netconn_bind>
 8013146:	4603      	mov	r3, r0
 8013148:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 801314c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00e      	beq.n	8013172 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8013154:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013158:	4618      	mov	r0, r3
 801315a:	f7fd f9af 	bl	80104bc <err_to_errno>
 801315e:	61b8      	str	r0, [r7, #24]
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <lwip_bind+0xac>
 8013166:	4a0c      	ldr	r2, [pc, #48]	@ (8013198 <lwip_bind+0xd8>)
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801316c:	f04f 33ff 	mov.w	r3, #4294967295
 8013170:	e008      	b.n	8013184 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8013172:	2300      	movs	r3, #0
 8013174:	61fb      	str	r3, [r7, #28]
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d002      	beq.n	8013182 <lwip_bind+0xc2>
 801317c:	4a06      	ldr	r2, [pc, #24]	@ (8013198 <lwip_bind+0xd8>)
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3728      	adds	r7, #40	@ 0x28
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	08024ae0 	.word	0x08024ae0
 8013190:	08024ba0 	.word	0x08024ba0
 8013194:	08024080 	.word	0x08024080
 8013198:	20010078 	.word	0x20010078

0801319c <lwip_close>:

int
lwip_close(int s)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80131a4:	2300      	movs	r3, #0
 80131a6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ff fd87 	bl	8012cbc <get_socket>
 80131ae:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d102      	bne.n	80131bc <lwip_close+0x20>
    return -1;
 80131b6:	f04f 33ff 	mov.w	r3, #4294967295
 80131ba:	e03c      	b.n	8013236 <lwip_close+0x9a>
  }

  if (sock->conn != NULL) {
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00b      	beq.n	80131dc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80131ce:	2b10      	cmp	r3, #16
 80131d0:	bf0c      	ite	eq
 80131d2:	2301      	moveq	r3, #1
 80131d4:	2300      	movne	r3, #0
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	617b      	str	r3, [r7, #20]
 80131da:	e00a      	b.n	80131f2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d006      	beq.n	80131f2 <lwip_close+0x56>
 80131e4:	4b16      	ldr	r3, [pc, #88]	@ (8013240 <lwip_close+0xa4>)
 80131e6:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80131ea:	4916      	ldr	r1, [pc, #88]	@ (8013244 <lwip_close+0xa8>)
 80131ec:	4816      	ldr	r0, [pc, #88]	@ (8013248 <lwip_close+0xac>)
 80131ee:	f00f fba3 	bl	8022938 <iprintf>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 feb8 	bl	8013f68 <lwip_socket_drop_registered_memberships>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fe ff7d 	bl	80120fc <netconn_prepare_delete>
 8013202:	4603      	mov	r3, r0
 8013204:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d00e      	beq.n	801322c <lwip_close+0x90>
    sock_set_errno(sock, err_to_errno(err));
 801320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013212:	4618      	mov	r0, r3
 8013214:	f7fd f952 	bl	80104bc <err_to_errno>
 8013218:	60b8      	str	r0, [r7, #8]
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <lwip_close+0x8a>
 8013220:	4a0a      	ldr	r2, [pc, #40]	@ (801324c <lwip_close+0xb0>)
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8013226:	f04f 33ff 	mov.w	r3, #4294967295
 801322a:	e004      	b.n	8013236 <lwip_close+0x9a>
  }

  free_socket(sock, is_tcp);
 801322c:	6979      	ldr	r1, [r7, #20]
 801322e:	6938      	ldr	r0, [r7, #16]
 8013230:	f7ff fe06 	bl	8012e40 <free_socket>
  set_errno(0);
  return 0;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	3718      	adds	r7, #24
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	08024ae0 	.word	0x08024ae0
 8013244:	08024bbc 	.word	0x08024bbc
 8013248:	08024080 	.word	0x08024080
 801324c:	20010078 	.word	0x20010078

08013250 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b088      	sub	sp, #32
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fd2e 	bl	8012cbc <get_socket>
 8013260:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d102      	bne.n	801326e <lwip_listen+0x1e>
    return -1;
 8013268:	f04f 33ff 	mov.w	r3, #4294967295
 801326c:	e03e      	b.n	80132ec <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	2bfe      	cmp	r3, #254	@ 0xfe
 8013272:	dc03      	bgt.n	801327c <lwip_listen+0x2c>
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801327a:	e000      	b.n	801327e <lwip_listen+0x2e>
 801327c:	23ff      	movs	r3, #255	@ 0xff
 801327e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	b2d2      	uxtb	r2, r2
 8013288:	4611      	mov	r1, r2
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff f800 	bl	8012290 <netconn_listen_with_backlog>
 8013290:	4603      	mov	r3, r0
 8013292:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8013294:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d01e      	beq.n	80132da <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80132a6:	2b10      	cmp	r3, #16
 80132a8:	d008      	beq.n	80132bc <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 80132aa:	235f      	movs	r3, #95	@ 0x5f
 80132ac:	60fb      	str	r3, [r7, #12]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00f      	beq.n	80132d4 <lwip_listen+0x84>
 80132b4:	4a0f      	ldr	r2, [pc, #60]	@ (80132f4 <lwip_listen+0xa4>)
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	6013      	str	r3, [r2, #0]
 80132ba:	e00b      	b.n	80132d4 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80132bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fd f8fb 	bl	80104bc <err_to_errno>
 80132c6:	6138      	str	r0, [r7, #16]
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <lwip_listen+0x84>
 80132ce:	4a09      	ldr	r2, [pc, #36]	@ (80132f4 <lwip_listen+0xa4>)
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80132d4:	f04f 33ff 	mov.w	r3, #4294967295
 80132d8:	e008      	b.n	80132ec <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 80132da:	2300      	movs	r3, #0
 80132dc:	617b      	str	r3, [r7, #20]
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <lwip_listen+0x9a>
 80132e4:	4a03      	ldr	r2, [pc, #12]	@ (80132f4 <lwip_listen+0xa4>)
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3720      	adds	r7, #32
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	20010078 	.word	0x20010078

080132f8 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08c      	sub	sp, #48	@ 0x30
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]
 8013304:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8013306:	2308      	movs	r3, #8
 8013308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	db01      	blt.n	801331a <lwip_recv_tcp+0x22>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	e001      	b.n	801331e <lwip_recv_tcp+0x26>
 801331a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801331e:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d106      	bne.n	8013334 <lwip_recv_tcp+0x3c>
 8013326:	4b74      	ldr	r3, [pc, #464]	@ (80134f8 <lwip_recv_tcp+0x200>)
 8013328:	f240 329e 	movw	r2, #926	@ 0x39e
 801332c:	4973      	ldr	r1, [pc, #460]	@ (80134fc <lwip_recv_tcp+0x204>)
 801332e:	4874      	ldr	r0, [pc, #464]	@ (8013500 <lwip_recv_tcp+0x208>)
 8013330:	f00f fb02 	bl	8022938 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801333e:	2b10      	cmp	r3, #16
 8013340:	d006      	beq.n	8013350 <lwip_recv_tcp+0x58>
 8013342:	4b6d      	ldr	r3, [pc, #436]	@ (80134f8 <lwip_recv_tcp+0x200>)
 8013344:	f240 329f 	movw	r2, #927	@ 0x39f
 8013348:	496e      	ldr	r1, [pc, #440]	@ (8013504 <lwip_recv_tcp+0x20c>)
 801334a:	486d      	ldr	r0, [pc, #436]	@ (8013500 <lwip_recv_tcp+0x208>)
 801334c:	f00f faf4 	bl	8022938 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	f003 0308 	and.w	r3, r3, #8
 8013356:	2b00      	cmp	r3, #0
 8013358:	d005      	beq.n	8013366 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 801335a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801335e:	f043 0304 	orr.w	r3, r3, #4
 8013362:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d003      	beq.n	8013376 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	e036      	b.n	80133e4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801337e:	f107 0114 	add.w	r1, r7, #20
 8013382:	4618      	mov	r0, r3
 8013384:	f7ff f9e6 	bl	8012754 <netconn_recv_tcp_pbuf_flags>
 8013388:	4603      	mov	r3, r0
 801338a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 801338e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8013392:	2b00      	cmp	r3, #0
 8013394:	d019      	beq.n	80133ca <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8013396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013398:	2b00      	cmp	r3, #0
 801339a:	f300 808d 	bgt.w	80134b8 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 801339e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7fd f88a 	bl	80104bc <err_to_errno>
 80133a8:	61f8      	str	r0, [r7, #28]
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <lwip_recv_tcp+0xbe>
 80133b0:	4a55      	ldr	r2, [pc, #340]	@ (8013508 <lwip_recv_tcp+0x210>)
 80133b2:	69fb      	ldr	r3, [r7, #28]
 80133b4:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 80133b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80133ba:	f113 0f0f 	cmn.w	r3, #15
 80133be:	d101      	bne.n	80133c4 <lwip_recv_tcp+0xcc>
          return 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	e094      	b.n	80134ee <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 80133c4:	f04f 33ff 	mov.w	r3, #4294967295
 80133c8:	e091      	b.n	80134ee <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d106      	bne.n	80133de <lwip_recv_tcp+0xe6>
 80133d0:	4b49      	ldr	r3, [pc, #292]	@ (80134f8 <lwip_recv_tcp+0x200>)
 80133d2:	f240 32c5 	movw	r2, #965	@ 0x3c5
 80133d6:	494d      	ldr	r1, [pc, #308]	@ (801350c <lwip_recv_tcp+0x214>)
 80133d8:	4849      	ldr	r0, [pc, #292]	@ (8013500 <lwip_recv_tcp+0x208>)
 80133da:	f00f faad 	bl	8022938 <iprintf>
      sock->lastdata.pbuf = p;
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	891b      	ldrh	r3, [r3, #8]
 80133e8:	461a      	mov	r2, r3
 80133ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ec:	4293      	cmp	r3, r2
 80133ee:	dd03      	ble.n	80133f8 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	891b      	ldrh	r3, [r3, #8]
 80133f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80133f6:	e001      	b.n	80133fc <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 80133f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133fa:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 80133fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013400:	4413      	add	r3, r2
 8013402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013404:	429a      	cmp	r2, r3
 8013406:	dd03      	ble.n	8013410 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8013408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801340a:	b29b      	uxth	r3, r3
 801340c:	43db      	mvns	r3, r3
 801340e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8013410:	6978      	ldr	r0, [r7, #20]
 8013412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013414:	68ba      	ldr	r2, [r7, #8]
 8013416:	18d1      	adds	r1, r2, r3
 8013418:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801341a:	2300      	movs	r3, #0
 801341c:	f007 fdb8 	bl	801af90 <pbuf_copy_partial>

    recvd += copylen;
 8013420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013424:	4413      	add	r3, r2
 8013426:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8013428:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801342c:	429a      	cmp	r2, r3
 801342e:	da06      	bge.n	801343e <lwip_recv_tcp+0x146>
 8013430:	4b31      	ldr	r3, [pc, #196]	@ (80134f8 <lwip_recv_tcp+0x200>)
 8013432:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8013436:	4936      	ldr	r1, [pc, #216]	@ (8013510 <lwip_recv_tcp+0x218>)
 8013438:	4831      	ldr	r0, [pc, #196]	@ (8013500 <lwip_recv_tcp+0x208>)
 801343a:	f00f fa7d 	bl	8022938 <iprintf>
    recv_left -= copylen;
 801343e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	f003 0301 	and.w	r3, r3, #1
 801344c:	2b00      	cmp	r3, #0
 801344e:	d123      	bne.n	8013498 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	891b      	ldrh	r3, [r3, #8]
 8013454:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013456:	429a      	cmp	r2, r3
 8013458:	d906      	bls.n	8013468 <lwip_recv_tcp+0x170>
 801345a:	4b27      	ldr	r3, [pc, #156]	@ (80134f8 <lwip_recv_tcp+0x200>)
 801345c:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8013460:	492c      	ldr	r1, [pc, #176]	@ (8013514 <lwip_recv_tcp+0x21c>)
 8013462:	4827      	ldr	r0, [pc, #156]	@ (8013500 <lwip_recv_tcp+0x208>)
 8013464:	f00f fa68 	bl	8022938 <iprintf>
      if (p->tot_len - copylen > 0) {
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	891b      	ldrh	r3, [r3, #8]
 801346c:	461a      	mov	r2, r3
 801346e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	dd09      	ble.n	801348a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801347a:	4611      	mov	r1, r2
 801347c:	4618      	mov	r0, r3
 801347e:	f007 fb4e 	bl	801ab1e <pbuf_free_header>
 8013482:	4602      	mov	r2, r0
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	605a      	str	r2, [r3, #4]
 8013488:	e006      	b.n	8013498 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2200      	movs	r2, #0
 801348e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	4618      	mov	r0, r3
 8013494:	f007 fb76 	bl	801ab84 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8013498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801349c:	f043 0314 	orr.w	r3, r3, #20
 80134a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 80134a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	dd08      	ble.n	80134bc <lwip_recv_tcp+0x1c4>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	f003 0301 	and.w	r3, r3, #1
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f43f af58 	beq.w	8013366 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 80134b6:	e001      	b.n	80134bc <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 80134b8:	bf00      	nop
 80134ba:	e000      	b.n	80134be <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 80134bc:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 80134be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	dd0b      	ble.n	80134dc <lwip_recv_tcp+0x1e4>
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	f003 0301 	and.w	r3, r3, #1
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d106      	bne.n	80134dc <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134d4:	4611      	mov	r1, r2
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7ff f88a 	bl	80125f0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 80134dc:	2300      	movs	r3, #0
 80134de:	61bb      	str	r3, [r7, #24]
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d002      	beq.n	80134ec <lwip_recv_tcp+0x1f4>
 80134e6:	4a08      	ldr	r2, [pc, #32]	@ (8013508 <lwip_recv_tcp+0x210>)
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	6013      	str	r3, [r2, #0]
  return recvd;
 80134ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3730      	adds	r7, #48	@ 0x30
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	08024ae0 	.word	0x08024ae0
 80134fc:	08024bf4 	.word	0x08024bf4
 8013500:	08024080 	.word	0x08024080
 8013504:	08024c04 	.word	0x08024c04
 8013508:	20010078 	.word	0x20010078
 801350c:	08024860 	.word	0x08024860
 8013510:	08024c28 	.word	0x08024c28
 8013514:	08024c50 	.word	0x08024c50

08013518 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b08b      	sub	sp, #44	@ 0x2c
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	4613      	mov	r3, r2
 8013526:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8013528:	2300      	movs	r3, #0
 801352a:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d106      	bne.n	8013540 <lwip_sock_make_addr+0x28>
 8013532:	4b2b      	ldr	r3, [pc, #172]	@ (80135e0 <lwip_sock_make_addr+0xc8>)
 8013534:	f240 4207 	movw	r2, #1031	@ 0x407
 8013538:	492a      	ldr	r1, [pc, #168]	@ (80135e4 <lwip_sock_make_addr+0xcc>)
 801353a:	482b      	ldr	r0, [pc, #172]	@ (80135e8 <lwip_sock_make_addr+0xd0>)
 801353c:	f00f f9fc 	bl	8022938 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d106      	bne.n	8013554 <lwip_sock_make_addr+0x3c>
 8013546:	4b26      	ldr	r3, [pc, #152]	@ (80135e0 <lwip_sock_make_addr+0xc8>)
 8013548:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 801354c:	4927      	ldr	r1, [pc, #156]	@ (80135ec <lwip_sock_make_addr+0xd4>)
 801354e:	4826      	ldr	r0, [pc, #152]	@ (80135e8 <lwip_sock_make_addr+0xd0>)
 8013550:	f00f f9f2 	bl	8022938 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8013554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013556:	2b00      	cmp	r3, #0
 8013558:	d106      	bne.n	8013568 <lwip_sock_make_addr+0x50>
 801355a:	4b21      	ldr	r3, [pc, #132]	@ (80135e0 <lwip_sock_make_addr+0xc8>)
 801355c:	f240 4209 	movw	r2, #1033	@ 0x409
 8013560:	4923      	ldr	r1, [pc, #140]	@ (80135f0 <lwip_sock_make_addr+0xd8>)
 8013562:	4821      	ldr	r0, [pc, #132]	@ (80135e8 <lwip_sock_make_addr+0xd0>)
 8013564:	f00f f9e8 	bl	8022938 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8013568:	f107 0314 	add.w	r3, r7, #20
 801356c:	2210      	movs	r2, #16
 801356e:	701a      	strb	r2, [r3, #0]
 8013570:	f107 0314 	add.w	r3, r7, #20
 8013574:	2202      	movs	r2, #2
 8013576:	705a      	strb	r2, [r3, #1]
 8013578:	f107 0414 	add.w	r4, r7, #20
 801357c:	88fb      	ldrh	r3, [r7, #6]
 801357e:	4618      	mov	r0, r3
 8013580:	f005 fe4e 	bl	8019220 <lwip_htons>
 8013584:	4603      	mov	r3, r0
 8013586:	8063      	strh	r3, [r4, #2]
 8013588:	f107 0314 	add.w	r3, r7, #20
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	6812      	ldr	r2, [r2, #0]
 8013590:	605a      	str	r2, [r3, #4]
 8013592:	f107 0314 	add.w	r3, r7, #20
 8013596:	3308      	adds	r3, #8
 8013598:	2208      	movs	r2, #8
 801359a:	2100      	movs	r1, #0
 801359c:	4618      	mov	r0, r3
 801359e:	f00f fb5d 	bl	8022c5c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 80135a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	7d3a      	ldrb	r2, [r7, #20]
 80135a8:	4293      	cmp	r3, r2
 80135aa:	d202      	bcs.n	80135b2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 80135ac:	2301      	movs	r3, #1
 80135ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80135b0:	e008      	b.n	80135c4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 80135b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	7d3a      	ldrb	r2, [r7, #20]
 80135b8:	4293      	cmp	r3, r2
 80135ba:	d903      	bls.n	80135c4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 80135bc:	7d3b      	ldrb	r3, [r7, #20]
 80135be:	461a      	mov	r2, r3
 80135c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 80135c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	f107 0314 	add.w	r3, r7, #20
 80135cc:	4619      	mov	r1, r3
 80135ce:	6838      	ldr	r0, [r7, #0]
 80135d0:	f00f fbe9 	bl	8022da6 <memcpy>
  return truncated;
 80135d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	372c      	adds	r7, #44	@ 0x2c
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd90      	pop	{r4, r7, pc}
 80135de:	bf00      	nop
 80135e0:	08024ae0 	.word	0x08024ae0
 80135e4:	08024c60 	.word	0x08024c60
 80135e8:	08024080 	.word	0x08024080
 80135ec:	08024c74 	.word	0x08024c74
 80135f0:	08024c84 	.word	0x08024c84

080135f4 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af02      	add	r7, sp, #8
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
 8013600:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d101      	bne.n	801360c <lwip_recv_tcp_from+0x18>
    return 0;
 8013608:	2300      	movs	r3, #0
 801360a:	e021      	b.n	8013650 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d01d      	beq.n	801364e <lwip_recv_tcp_from+0x5a>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d01a      	beq.n	801364e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6818      	ldr	r0, [r3, #0]
 801361c:	f107 0216 	add.w	r2, r7, #22
 8013620:	f107 0110 	add.w	r1, r7, #16
 8013624:	2300      	movs	r3, #0
 8013626:	f7fe fda9 	bl	801217c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00e      	beq.n	801364e <lwip_recv_tcp_from+0x5a>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00b      	beq.n	801364e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6818      	ldr	r0, [r3, #0]
 801363a:	8afa      	ldrh	r2, [r7, #22]
 801363c:	f107 0110 	add.w	r1, r7, #16
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	f7ff ff67 	bl	8013518 <lwip_sock_make_addr>
 801364a:	4603      	mov	r3, r0
 801364c:	e000      	b.n	8013650 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 801364e:	2300      	movs	r3, #0
}
 8013650:	4618      	mov	r0, r3
 8013652:	3718      	adds	r7, #24
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}

08013658 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8013658:	b590      	push	{r4, r7, lr}
 801365a:	b08d      	sub	sp, #52	@ 0x34
 801365c:	af02      	add	r7, sp, #8
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	689b      	ldr	r3, [r3, #8]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10d      	bne.n	801368a <lwip_recvfrom_udp_raw+0x32>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	2b00      	cmp	r3, #0
 8013674:	dd09      	ble.n	801368a <lwip_recvfrom_udp_raw+0x32>
 8013676:	4b5e      	ldr	r3, [pc, #376]	@ (80137f0 <lwip_recvfrom_udp_raw+0x198>)
 8013678:	f240 4249 	movw	r2, #1097	@ 0x449
 801367c:	495d      	ldr	r1, [pc, #372]	@ (80137f4 <lwip_recvfrom_udp_raw+0x19c>)
 801367e:	485e      	ldr	r0, [pc, #376]	@ (80137f8 <lwip_recvfrom_udp_raw+0x1a0>)
 8013680:	f00f f95a 	bl	8022938 <iprintf>
 8013684:	f06f 030f 	mvn.w	r3, #15
 8013688:	e0ad      	b.n	80137e6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	f003 0308 	and.w	r3, r3, #8
 8013690:	2b00      	cmp	r3, #0
 8013692:	d003      	beq.n	801369c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8013694:	2304      	movs	r3, #4
 8013696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801369a:	e002      	b.n	80136a2 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 801369c:	2300      	movs	r3, #0
 801369e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d11e      	bne.n	80136ec <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80136b6:	f107 0110 	add.w	r1, r7, #16
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7ff f876 	bl	80127ac <netconn_recv_udp_raw_netbuf_flags>
 80136c0:	4603      	mov	r3, r0
 80136c2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 80136c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d002      	beq.n	80136d2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 80136cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136d0:	e089      	b.n	80137e6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d106      	bne.n	80136e6 <lwip_recvfrom_udp_raw+0x8e>
 80136d8:	4b45      	ldr	r3, [pc, #276]	@ (80137f0 <lwip_recvfrom_udp_raw+0x198>)
 80136da:	f240 425e 	movw	r2, #1118	@ 0x45e
 80136de:	4947      	ldr	r1, [pc, #284]	@ (80137fc <lwip_recvfrom_udp_raw+0x1a4>)
 80136e0:	4845      	ldr	r0, [pc, #276]	@ (80137f8 <lwip_recvfrom_udp_raw+0x1a0>)
 80136e2:	f00f f929 	bl	8022938 <iprintf>
    sock->lastdata.netbuf = buf;
 80136e6:	693a      	ldr	r2, [r7, #16]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	891b      	ldrh	r3, [r3, #8]
 80136f2:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80136f8:	2300      	movs	r3, #0
 80136fa:	61fb      	str	r3, [r7, #28]
 80136fc:	e029      	b.n	8013752 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 80136fe:	8b3a      	ldrh	r2, [r7, #24]
 8013700:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	689a      	ldr	r2, [r3, #8]
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	4413      	add	r3, r2
 8013710:	685a      	ldr	r2, [r3, #4]
 8013712:	8afb      	ldrh	r3, [r7, #22]
 8013714:	429a      	cmp	r2, r3
 8013716:	d902      	bls.n	801371e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8013718:	8afb      	ldrh	r3, [r7, #22]
 801371a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801371c:	e006      	b.n	801372c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	689a      	ldr	r2, [r3, #8]
 8013722:	69fb      	ldr	r3, [r7, #28]
 8013724:	00db      	lsls	r3, r3, #3
 8013726:	4413      	add	r3, r2
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	6818      	ldr	r0, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	689a      	ldr	r2, [r3, #8]
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	4413      	add	r3, r2
 801373a:	6819      	ldr	r1, [r3, #0]
 801373c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801373e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013740:	f007 fc26 	bl	801af90 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8013744:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013748:	4413      	add	r3, r2
 801374a:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 801374c:	69fb      	ldr	r3, [r7, #28]
 801374e:	3301      	adds	r3, #1
 8013750:	61fb      	str	r3, [r7, #28]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	69fa      	ldr	r2, [r7, #28]
 8013758:	429a      	cmp	r2, r3
 801375a:	da03      	bge.n	8013764 <lwip_recvfrom_udp_raw+0x10c>
 801375c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801375e:	8b3b      	ldrh	r3, [r7, #24]
 8013760:	429a      	cmp	r2, r3
 8013762:	d3cc      	bcc.n	80136fe <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d01a      	beq.n	80137a2 <lwip_recvfrom_udp_raw+0x14a>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d016      	beq.n	80137a2 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d012      	beq.n	80137a2 <lwip_recvfrom_udp_raw+0x14a>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00e      	beq.n	80137a2 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	6818      	ldr	r0, [r3, #0]
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	f103 0108 	add.w	r1, r3, #8
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3304      	adds	r3, #4
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	4623      	mov	r3, r4
 801379e:	f7ff febb 	bl	8013518 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2200      	movs	r2, #0
 80137a6:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	691b      	ldr	r3, [r3, #16]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d007      	beq.n	80137c0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 80137b0:	2300      	movs	r3, #0
 80137b2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 80137b4:	7d7b      	ldrb	r3, [r7, #21]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d102      	bne.n	80137c0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	f003 0301 	and.w	r3, r3, #1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d106      	bne.n	80137d8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2200      	movs	r2, #0
 80137ce:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff f9a2 	bl	8012b1c <netbuf_delete>
  }
  if (datagram_len) {
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d002      	beq.n	80137e4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	8b3a      	ldrh	r2, [r7, #24]
 80137e2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	372c      	adds	r7, #44	@ 0x2c
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd90      	pop	{r4, r7, pc}
 80137ee:	bf00      	nop
 80137f0:	08024ae0 	.word	0x08024ae0
 80137f4:	08024c94 	.word	0x08024c94
 80137f8:	08024080 	.word	0x08024080
 80137fc:	08024804 	.word	0x08024804

08013800 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b096      	sub	sp, #88	@ 0x58
 8013804:	af02      	add	r7, sp, #8
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
 801380c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f7ff fa54 	bl	8012cbc <get_socket>
 8013814:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 8013816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <lwip_recvfrom+0x22>
    return -1;
 801381c:	f04f 33ff 	mov.w	r3, #4294967295
 8013820:	e078      	b.n	8013914 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8013822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801382c:	2b10      	cmp	r3, #16
 801382e:	d112      	bne.n	8013856 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	68b9      	ldr	r1, [r7, #8]
 8013836:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8013838:	f7ff fd5e 	bl	80132f8 <lwip_recv_tcp>
 801383c:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 801383e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013840:	9301      	str	r3, [sp, #4]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	9300      	str	r3, [sp, #0]
 8013846:	4b35      	ldr	r3, [pc, #212]	@ (801391c <lwip_recvfrom+0x11c>)
 8013848:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801384a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801384c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801384e:	f7ff fed1 	bl	80135f4 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8013852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013854:	e05e      	b.n	8013914 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8013856:	2300      	movs	r3, #0
 8013858:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 8013862:	2300      	movs	r3, #0
 8013864:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 801386e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013872:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8013874:	2301      	movs	r3, #1
 8013876:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8013878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801387a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 801387c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801387e:	2b00      	cmp	r3, #0
 8013880:	d002      	beq.n	8013888 <lwip_recvfrom+0x88>
 8013882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	e000      	b.n	801388a <lwip_recvfrom+0x8a>
 8013888:	2300      	movs	r3, #0
 801388a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 801388c:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8013890:	f107 0214 	add.w	r2, r7, #20
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	460b      	mov	r3, r1
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801389e:	f7ff fedb 	bl	8013658 <lwip_recvfrom_udp_raw>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 80138a8:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d00e      	beq.n	80138ce <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80138b0:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7fc fe01 	bl	80104bc <err_to_errno>
 80138ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80138bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <lwip_recvfrom+0xc8>
 80138c2:	4a17      	ldr	r2, [pc, #92]	@ (8013920 <lwip_recvfrom+0x120>)
 80138c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138c6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295
 80138cc:	e022      	b.n	8013914 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80138ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80138d0:	461a      	mov	r2, r3
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	4293      	cmp	r3, r2
 80138d6:	bf28      	it	cs
 80138d8:	4613      	movcs	r3, r2
 80138da:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80138de:	4293      	cmp	r3, r2
 80138e0:	d206      	bcs.n	80138f0 <lwip_recvfrom+0xf0>
 80138e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80138e4:	461a      	mov	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4293      	cmp	r3, r2
 80138ea:	bf28      	it	cs
 80138ec:	4613      	movcs	r3, r2
 80138ee:	e001      	b.n	80138f4 <lwip_recvfrom+0xf4>
 80138f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80138f4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 80138f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d002      	beq.n	8013902 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 80138fc:	69ba      	ldr	r2, [r7, #24]
 80138fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013900:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8013902:	2300      	movs	r3, #0
 8013904:	643b      	str	r3, [r7, #64]	@ 0x40
 8013906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	d002      	beq.n	8013912 <lwip_recvfrom+0x112>
 801390c:	4a04      	ldr	r2, [pc, #16]	@ (8013920 <lwip_recvfrom+0x120>)
 801390e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013910:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8013912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8013914:	4618      	mov	r0, r3
 8013916:	3750      	adds	r7, #80	@ 0x50
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	08024cc0 	.word	0x08024cc0
 8013920:	20010078 	.word	0x20010078

08013924 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b086      	sub	sp, #24
 8013928:	af02      	add	r7, sp, #8
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8013930:	2300      	movs	r3, #0
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	2300      	movs	r3, #0
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	2300      	movs	r3, #0
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	68b9      	ldr	r1, [r7, #8]
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	f7ff ff5e 	bl	8013800 <lwip_recvfrom>
 8013944:	4603      	mov	r3, r0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
	...

08013950 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b08a      	sub	sp, #40	@ 0x28
 8013954:	af02      	add	r7, sp, #8
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	607a      	str	r2, [r7, #4]
 801395c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7ff f9ac 	bl	8012cbc <get_socket>
 8013964:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d102      	bne.n	8013972 <lwip_send+0x22>
    return -1;
 801396c:	f04f 33ff 	mov.w	r3, #4294967295
 8013970:	e046      	b.n	8013a00 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801397c:	2b10      	cmp	r3, #16
 801397e:	d00b      	beq.n	8013998 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8013980:	2300      	movs	r3, #0
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	2300      	movs	r3, #0
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	68b9      	ldr	r1, [r7, #8]
 801398e:	68f8      	ldr	r0, [r7, #12]
 8013990:	f000 f83c 	bl	8013a0c <lwip_sendto>
 8013994:	4603      	mov	r3, r0
 8013996:	e033      	b.n	8013a00 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d001      	beq.n	80139a6 <lwip_send+0x56>
 80139a2:	2203      	movs	r2, #3
 80139a4:	e000      	b.n	80139a8 <lwip_send+0x58>
 80139a6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	105b      	asrs	r3, r3, #1
 80139ac:	b25b      	sxtb	r3, r3
 80139ae:	f003 0304 	and.w	r3, r3, #4
 80139b2:	b25b      	sxtb	r3, r3
 80139b4:	4313      	orrs	r3, r2
 80139b6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80139b8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	6818      	ldr	r0, [r3, #0]
 80139c2:	7efa      	ldrb	r2, [r7, #27]
 80139c4:	f107 0310 	add.w	r3, r7, #16
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	4613      	mov	r3, r2
 80139cc:	687a      	ldr	r2, [r7, #4]
 80139ce:	68b9      	ldr	r1, [r7, #8]
 80139d0:	f7fe ff46 	bl	8012860 <netconn_write_partly>
 80139d4:	4603      	mov	r3, r0
 80139d6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80139d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fc fd6d 	bl	80104bc <err_to_errno>
 80139e2:	6178      	str	r0, [r7, #20]
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <lwip_send+0xa0>
 80139ea:	4a07      	ldr	r2, [pc, #28]	@ (8013a08 <lwip_send+0xb8>)
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80139f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d101      	bne.n	80139fc <lwip_send+0xac>
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	e001      	b.n	8013a00 <lwip_send+0xb0>
 80139fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3720      	adds	r7, #32
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	20010078 	.word	0x20010078

08013a0c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08e      	sub	sp, #56	@ 0x38
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
 8013a18:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8013a1a:	68f8      	ldr	r0, [r7, #12]
 8013a1c:	f7ff f94e 	bl	8012cbc <get_socket>
 8013a20:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 8013a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d102      	bne.n	8013a2e <lwip_sendto+0x22>
    return -1;
 8013a28:	f04f 33ff 	mov.w	r3, #4294967295
 8013a2c:	e093      	b.n	8013b56 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013a38:	2b10      	cmp	r3, #16
 8013a3a:	d107      	bne.n	8013a4c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	68b9      	ldr	r1, [r7, #8]
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f7ff ff84 	bl	8013950 <lwip_send>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	e084      	b.n	8013b56 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a52:	d30a      	bcc.n	8013a6a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8013a54:	235a      	movs	r3, #90	@ 0x5a
 8013a56:	623b      	str	r3, [r7, #32]
 8013a58:	6a3b      	ldr	r3, [r7, #32]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d002      	beq.n	8013a64 <lwip_sendto+0x58>
 8013a5e:	4a40      	ldr	r2, [pc, #256]	@ (8013b60 <lwip_sendto+0x154>)
 8013a60:	6a3b      	ldr	r3, [r7, #32]
 8013a62:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8013a64:	f04f 33ff 	mov.w	r3, #4294967295
 8013a68:	e075      	b.n	8013b56 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8013a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d102      	bne.n	8013a7a <lwip_sendto+0x6e>
 8013a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d023      	beq.n	8013ac2 <lwip_sendto+0xb6>
 8013a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a7c:	2b10      	cmp	r3, #16
 8013a7e:	d10b      	bne.n	8013a98 <lwip_sendto+0x8c>
 8013a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d008      	beq.n	8013a98 <lwip_sendto+0x8c>
 8013a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a88:	785b      	ldrb	r3, [r3, #1]
 8013a8a:	2b02      	cmp	r3, #2
 8013a8c:	d104      	bne.n	8013a98 <lwip_sendto+0x8c>
 8013a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a90:	f003 0303 	and.w	r3, r3, #3
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d014      	beq.n	8013ac2 <lwip_sendto+0xb6>
 8013a98:	4b32      	ldr	r3, [pc, #200]	@ (8013b64 <lwip_sendto+0x158>)
 8013a9a:	f240 6252 	movw	r2, #1618	@ 0x652
 8013a9e:	4932      	ldr	r1, [pc, #200]	@ (8013b68 <lwip_sendto+0x15c>)
 8013aa0:	4832      	ldr	r0, [pc, #200]	@ (8013b6c <lwip_sendto+0x160>)
 8013aa2:	f00e ff49 	bl	8022938 <iprintf>
 8013aa6:	f06f 000f 	mvn.w	r0, #15
 8013aaa:	f7fc fd07 	bl	80104bc <err_to_errno>
 8013aae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <lwip_sendto+0xb0>
 8013ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8013b60 <lwip_sendto+0x154>)
 8013ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aba:	6013      	str	r3, [r2, #0]
 8013abc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ac0:	e049      	b.n	8013b56 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	617b      	str	r3, [r7, #20]
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8013aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00a      	beq.n	8013ae6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8013ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	61bb      	str	r3, [r7, #24]
 8013ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ad8:	885b      	ldrh	r3, [r3, #2]
 8013ada:	4618      	mov	r0, r3
 8013adc:	f005 fba0 	bl	8019220 <lwip_htons>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8013ae4:	e003      	b.n	8013aee <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8013aea:	2300      	movs	r3, #0
 8013aec:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8013aee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013af0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8013af2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013af4:	f107 0310 	add.w	r3, r7, #16
 8013af8:	68b9      	ldr	r1, [r7, #8]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7ff f856 	bl	8012bac <netbuf_ref>
 8013b00:	4603      	mov	r3, r0
 8013b02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8013b06:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d10a      	bne.n	8013b24 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f107 0210 	add.w	r2, r7, #16
 8013b16:	4611      	mov	r1, r2
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe fe73 	bl	8012804 <netconn_send>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8013b24:	f107 0310 	add.w	r3, r7, #16
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7ff f817 	bl	8012b5c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8013b2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fc fcc2 	bl	80104bc <err_to_errno>
 8013b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <lwip_sendto+0x13a>
 8013b40:	4a07      	ldr	r2, [pc, #28]	@ (8013b60 <lwip_sendto+0x154>)
 8013b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b44:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8013b46:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d101      	bne.n	8013b52 <lwip_sendto+0x146>
 8013b4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013b50:	e001      	b.n	8013b56 <lwip_sendto+0x14a>
 8013b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3738      	adds	r7, #56	@ 0x38
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	20010078 	.word	0x20010078
 8013b64:	08024ae0 	.word	0x08024ae0
 8013b68:	08024dc4 	.word	0x08024dc4
 8013b6c:	08024080 	.word	0x08024080

08013b70 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b086      	sub	sp, #24
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	2b03      	cmp	r3, #3
 8013b80:	d009      	beq.n	8013b96 <lwip_socket+0x26>
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	2b03      	cmp	r3, #3
 8013b86:	dc23      	bgt.n	8013bd0 <lwip_socket+0x60>
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d019      	beq.n	8013bc2 <lwip_socket+0x52>
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	2b02      	cmp	r3, #2
 8013b92:	d009      	beq.n	8013ba8 <lwip_socket+0x38>
 8013b94:	e01c      	b.n	8013bd0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	4a22      	ldr	r2, [pc, #136]	@ (8013c24 <lwip_socket+0xb4>)
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	2040      	movs	r0, #64	@ 0x40
 8013ba0:	f7fe fa32 	bl	8012008 <netconn_new_with_proto_and_callback>
 8013ba4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8013ba6:	e019      	b.n	8013bdc <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b88      	cmp	r3, #136	@ 0x88
 8013bac:	d101      	bne.n	8013bb2 <lwip_socket+0x42>
 8013bae:	2321      	movs	r3, #33	@ 0x21
 8013bb0:	e000      	b.n	8013bb4 <lwip_socket+0x44>
 8013bb2:	2320      	movs	r3, #32
 8013bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8013c24 <lwip_socket+0xb4>)
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe fa25 	bl	8012008 <netconn_new_with_proto_and_callback>
 8013bbe:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8013bc0:	e00c      	b.n	8013bdc <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8013bc2:	4a18      	ldr	r2, [pc, #96]	@ (8013c24 <lwip_socket+0xb4>)
 8013bc4:	2100      	movs	r1, #0
 8013bc6:	2010      	movs	r0, #16
 8013bc8:	f7fe fa1e 	bl	8012008 <netconn_new_with_proto_and_callback>
 8013bcc:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8013bce:	e005      	b.n	8013bdc <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8013bd0:	4b15      	ldr	r3, [pc, #84]	@ (8013c28 <lwip_socket+0xb8>)
 8013bd2:	2216      	movs	r2, #22
 8013bd4:	601a      	str	r2, [r3, #0]
      return -1;
 8013bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bda:	e01e      	b.n	8013c1a <lwip_socket+0xaa>
  }

  if (!conn) {
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d105      	bne.n	8013bee <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8013be2:	4b11      	ldr	r3, [pc, #68]	@ (8013c28 <lwip_socket+0xb8>)
 8013be4:	2269      	movs	r2, #105	@ 0x69
 8013be6:	601a      	str	r2, [r3, #0]
    return -1;
 8013be8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bec:	e015      	b.n	8013c1a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8013bee:	2100      	movs	r1, #0
 8013bf0:	6978      	ldr	r0, [r7, #20]
 8013bf2:	f7ff f87b 	bl	8012cec <alloc_socket>
 8013bf6:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bfe:	d108      	bne.n	8013c12 <lwip_socket+0xa2>
    netconn_delete(conn);
 8013c00:	6978      	ldr	r0, [r7, #20]
 8013c02:	f7fe fa9f 	bl	8012144 <netconn_delete>
    set_errno(ENFILE);
 8013c06:	4b08      	ldr	r3, [pc, #32]	@ (8013c28 <lwip_socket+0xb8>)
 8013c08:	2217      	movs	r2, #23
 8013c0a:	601a      	str	r2, [r3, #0]
    return -1;
 8013c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c10:	e003      	b.n	8013c1a <lwip_socket+0xaa>
  }
  conn->socket = i;
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	693a      	ldr	r2, [r7, #16]
 8013c16:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8013c18:	693b      	ldr	r3, [r7, #16]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3718      	adds	r7, #24
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	08013cd5 	.word	0x08013cd5
 8013c28:	20010078 	.word	0x20010078

08013c2c <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8013c38:	2300      	movs	r3, #0
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	68b9      	ldr	r1, [r7, #8]
 8013c3e:	68f8      	ldr	r0, [r7, #12]
 8013c40:	f7ff fe86 	bl	8013950 <lwip_send>
 8013c44:	4603      	mov	r3, r0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8013c4e:	b480      	push	{r7}
 8013c50:	b087      	sub	sp, #28
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	60f8      	str	r0, [r7, #12]
 8013c56:	60b9      	str	r1, [r7, #8]
 8013c58:	607a      	str	r2, [r7, #4]
 8013c5a:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	617b      	str	r3, [r7, #20]
 8013c60:	e02c      	b.n	8013cbc <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	695a      	ldr	r2, [r3, #20]
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	00db      	lsls	r3, r3, #3
 8013c6a:	4413      	add	r3, r2
 8013c6c:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	68ba      	ldr	r2, [r7, #8]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d11e      	bne.n	8013cb6 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d009      	beq.n	8013c92 <lwip_poll_should_wake+0x44>
 8013c7e:	693b      	ldr	r3, [r7, #16]
 8013c80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	f003 0301 	and.w	r3, r3, #1
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d001      	beq.n	8013c92 <lwip_poll_should_wake+0x44>
        return 1;
 8013c8e:	2301      	movs	r3, #1
 8013c90:	e01a      	b.n	8013cc8 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d009      	beq.n	8013cac <lwip_poll_should_wake+0x5e>
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	f003 0302 	and.w	r3, r3, #2
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d001      	beq.n	8013cac <lwip_poll_should_wake+0x5e>
        return 1;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e00d      	b.n	8013cc8 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8013cac:	6a3b      	ldr	r3, [r7, #32]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e008      	b.n	8013cc8 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	617b      	str	r3, [r7, #20]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	699b      	ldr	r3, [r3, #24]
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d3cd      	bcc.n	8013c62 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	371c      	adds	r7, #28
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b08a      	sub	sp, #40	@ 0x28
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	70fb      	strb	r3, [r7, #3]
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 80a4 	beq.w	8013e34 <event_callback+0x160>
    s = conn->socket;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	699b      	ldr	r3, [r3, #24]
 8013cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	da18      	bge.n	8013d2a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8013cf8:	f00e fcb8 	bl	802266c <sys_arch_protect>
 8013cfc:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	699b      	ldr	r3, [r3, #24]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	da0b      	bge.n	8013d1e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8013d06:	78fb      	ldrb	r3, [r7, #3]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d104      	bne.n	8013d16 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	699b      	ldr	r3, [r3, #24]
 8013d10:	1e5a      	subs	r2, r3, #1
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8013d16:	69f8      	ldr	r0, [r7, #28]
 8013d18:	f00e fcb6 	bl	8022688 <sys_arch_unprotect>
        return;
 8013d1c:	e08d      	b.n	8013e3a <event_callback+0x166>
      }
      s = conn->socket;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	699b      	ldr	r3, [r3, #24]
 8013d22:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8013d24:	69f8      	ldr	r0, [r7, #28]
 8013d26:	f00e fcaf 	bl	8022688 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8013d2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d2c:	f7fe ffc6 	bl	8012cbc <get_socket>
 8013d30:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8013d32:	69bb      	ldr	r3, [r7, #24]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d07f      	beq.n	8013e38 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8013d3c:	f00e fc96 	bl	802266c <sys_arch_protect>
 8013d40:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8013d42:	78fb      	ldrb	r3, [r7, #3]
 8013d44:	2b04      	cmp	r3, #4
 8013d46:	d83e      	bhi.n	8013dc6 <event_callback+0xf2>
 8013d48:	a201      	add	r2, pc, #4	@ (adr r2, 8013d50 <event_callback+0x7c>)
 8013d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d4e:	bf00      	nop
 8013d50:	08013d65 	.word	0x08013d65
 8013d54:	08013d87 	.word	0x08013d87
 8013d58:	08013d9f 	.word	0x08013d9f
 8013d5c:	08013db3 	.word	0x08013db3
 8013d60:	08013dbf 	.word	0x08013dbf
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8013d64:	69bb      	ldr	r3, [r7, #24]
 8013d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	b21a      	sxth	r2, r3
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	dd2a      	ble.n	8013dd6 <event_callback+0x102>
        check_waiters = 0;
 8013d80:	2300      	movs	r3, #0
 8013d82:	623b      	str	r3, [r7, #32]
      }
      break;
 8013d84:	e027      	b.n	8013dd6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	3b01      	subs	r3, #1
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	b21a      	sxth	r2, r3
 8013d94:	69bb      	ldr	r3, [r7, #24]
 8013d96:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	623b      	str	r3, [r7, #32]
      break;
 8013d9c:	e01c      	b.n	8013dd8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8013d9e:	69bb      	ldr	r3, [r7, #24]
 8013da0:	895b      	ldrh	r3, [r3, #10]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d001      	beq.n	8013daa <event_callback+0xd6>
        check_waiters = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	2201      	movs	r2, #1
 8013dae:	815a      	strh	r2, [r3, #10]
      break;
 8013db0:	e012      	b.n	8013dd8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	2200      	movs	r2, #0
 8013db6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8013db8:	2300      	movs	r3, #0
 8013dba:	623b      	str	r3, [r7, #32]
      break;
 8013dbc:	e00c      	b.n	8013dd8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	819a      	strh	r2, [r3, #12]
      break;
 8013dc4:	e008      	b.n	8013dd8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8013dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8013e40 <event_callback+0x16c>)
 8013dc8:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8013dcc:	491d      	ldr	r1, [pc, #116]	@ (8013e44 <event_callback+0x170>)
 8013dce:	481e      	ldr	r0, [pc, #120]	@ (8013e48 <event_callback+0x174>)
 8013dd0:	f00e fdb2 	bl	8022938 <iprintf>
      break;
 8013dd4:	e000      	b.n	8013dd8 <event_callback+0x104>
      break;
 8013dd6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	7b9b      	ldrb	r3, [r3, #14]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d025      	beq.n	8013e2c <event_callback+0x158>
 8013de0:	6a3b      	ldr	r3, [r7, #32]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d022      	beq.n	8013e2c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8013de6:	69bb      	ldr	r3, [r7, #24]
 8013de8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	bfcc      	ite	gt
 8013df0:	2301      	movgt	r3, #1
 8013df2:	2300      	movle	r3, #0
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	895b      	ldrh	r3, [r3, #10]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	bf14      	ite	ne
 8013e00:	2301      	movne	r3, #1
 8013e02:	2300      	moveq	r3, #0
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	899b      	ldrh	r3, [r3, #12]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	bf14      	ite	ne
 8013e10:	2301      	movne	r3, #1
 8013e12:	2300      	moveq	r3, #0
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8013e18:	69f8      	ldr	r0, [r7, #28]
 8013e1a:	f00e fc35 	bl	8022688 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	693a      	ldr	r2, [r7, #16]
 8013e22:	6979      	ldr	r1, [r7, #20]
 8013e24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e26:	f000 f811 	bl	8013e4c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8013e2a:	e006      	b.n	8013e3a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8013e2c:	69f8      	ldr	r0, [r7, #28]
 8013e2e:	f00e fc2b 	bl	8022688 <sys_arch_unprotect>
 8013e32:	e002      	b.n	8013e3a <event_callback+0x166>
    return;
 8013e34:	bf00      	nop
 8013e36:	e000      	b.n	8013e3a <event_callback+0x166>
      return;
 8013e38:	bf00      	nop
  }
  done_socket(sock);
}
 8013e3a:	3728      	adds	r7, #40	@ 0x28
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	08024ae0 	.word	0x08024ae0
 8013e44:	08024e60 	.word	0x08024e60
 8013e48:	08024080 	.word	0x08024080

08013e4c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b088      	sub	sp, #32
 8013e50:	af02      	add	r7, sp, #8
 8013e52:	60f8      	str	r0, [r7, #12]
 8013e54:	60b9      	str	r1, [r7, #8]
 8013e56:	607a      	str	r2, [r7, #4]
 8013e58:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8013e5a:	4b42      	ldr	r3, [pc, #264]	@ (8013f64 <select_check_waiters+0x118>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	617b      	str	r3, [r7, #20]
 8013e60:	e078      	b.n	8013f54 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d171      	bne.n	8013f4e <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	695b      	ldr	r3, [r3, #20]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d009      	beq.n	8013e8a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	68ba      	ldr	r2, [r7, #8]
 8013e7e:	68f9      	ldr	r1, [r7, #12]
 8013e80:	6978      	ldr	r0, [r7, #20]
 8013e82:	f7ff fee4 	bl	8013c4e <lwip_poll_should_wake>
 8013e86:	6138      	str	r0, [r7, #16]
 8013e88:	e056      	b.n	8013f38 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d017      	beq.n	8013ec0 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d013      	beq.n	8013ec0 <select_check_waiters+0x74>
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	689a      	ldr	r2, [r3, #8]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	da00      	bge.n	8013ea4 <select_check_waiters+0x58>
 8013ea2:	331f      	adds	r3, #31
 8013ea4:	115b      	asrs	r3, r3, #5
 8013ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	f003 031f 	and.w	r3, r3, #31
 8013eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8013eb4:	f003 0301 	and.w	r3, r3, #1
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <select_check_waiters+0x74>
            do_signal = 1;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d01a      	beq.n	8013efc <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d117      	bne.n	8013efc <select_check_waiters+0xb0>
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d013      	beq.n	8013efc <select_check_waiters+0xb0>
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	68da      	ldr	r2, [r3, #12]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	da00      	bge.n	8013ee0 <select_check_waiters+0x94>
 8013ede:	331f      	adds	r3, #31
 8013ee0:	115b      	asrs	r3, r3, #5
 8013ee2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f003 031f 	and.w	r3, r3, #31
 8013eec:	fa22 f303 	lsr.w	r3, r2, r3
 8013ef0:	f003 0301 	and.w	r3, r3, #1
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d001      	beq.n	8013efc <select_check_waiters+0xb0>
            do_signal = 1;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d01a      	beq.n	8013f38 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d117      	bne.n	8013f38 <select_check_waiters+0xec>
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	691b      	ldr	r3, [r3, #16]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d013      	beq.n	8013f38 <select_check_waiters+0xec>
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	691a      	ldr	r2, [r3, #16]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	da00      	bge.n	8013f1c <select_check_waiters+0xd0>
 8013f1a:	331f      	adds	r3, #31
 8013f1c:	115b      	asrs	r3, r3, #5
 8013f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f003 031f 	and.w	r3, r3, #31
 8013f28:	fa22 f303 	lsr.w	r3, r2, r3
 8013f2c:	f003 0301 	and.w	r3, r3, #1
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <select_check_waiters+0xec>
            do_signal = 1;
 8013f34:	2301      	movs	r3, #1
 8013f36:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d007      	beq.n	8013f4e <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	2201      	movs	r2, #1
 8013f42:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	3320      	adds	r3, #32
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f00e faf9 	bl	8022540 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	617b      	str	r3, [r7, #20]
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d183      	bne.n	8013e62 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8013f5a:	bf00      	nop
 8013f5c:	bf00      	nop
 8013f5e:	3718      	adds	r7, #24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	20008d68 	.word	0x20008d68

08013f68 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7fe fea3 	bl	8012cbc <get_socket>
 8013f76:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d04e      	beq.n	801401c <lwip_socket_drop_registered_memberships+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8013f7e:	2300      	movs	r3, #0
 8013f80:	617b      	str	r3, [r7, #20]
 8013f82:	e047      	b.n	8014014 <lwip_socket_drop_registered_memberships+0xac>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 8013f84:	4927      	ldr	r1, [pc, #156]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013f86:	697a      	ldr	r2, [r7, #20]
 8013f88:	4613      	mov	r3, r2
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	4413      	add	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	440b      	add	r3, r1
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	693a      	ldr	r2, [r7, #16]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d139      	bne.n	801400e <lwip_socket_drop_registered_memberships+0xa6>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 8013f9a:	4922      	ldr	r1, [pc, #136]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013f9c:	697a      	ldr	r2, [r7, #20]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4413      	add	r3, r2
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	440b      	add	r3, r1
 8013fa8:	3308      	adds	r3, #8
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	60fb      	str	r3, [r7, #12]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 8013fae:	491d      	ldr	r1, [pc, #116]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fb0:	697a      	ldr	r2, [r7, #20]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	005b      	lsls	r3, r3, #1
 8013fb6:	4413      	add	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	440b      	add	r3, r1
 8013fbc:	3304      	adds	r3, #4
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	60bb      	str	r3, [r7, #8]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 8013fc2:	4918      	ldr	r1, [pc, #96]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fc4:	697a      	ldr	r2, [r7, #20]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	4413      	add	r3, r2
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	440b      	add	r3, r1
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 8013fd4:	4913      	ldr	r1, [pc, #76]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fd6:	697a      	ldr	r2, [r7, #20]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	440b      	add	r3, r1
 8013fe2:	3304      	adds	r3, #4
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 8013fe8:	490e      	ldr	r1, [pc, #56]	@ (8014024 <lwip_socket_drop_registered_memberships+0xbc>)
 8013fea:	697a      	ldr	r2, [r7, #20]
 8013fec:	4613      	mov	r3, r2
 8013fee:	005b      	lsls	r3, r3, #1
 8013ff0:	4413      	add	r3, r2
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	440b      	add	r3, r1
 8013ff6:	3308      	adds	r3, #8
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	601a      	str	r2, [r3, #0]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	6818      	ldr	r0, [r3, #0]
 8014000:	f107 0208 	add.w	r2, r7, #8
 8014004:	f107 010c 	add.w	r1, r7, #12
 8014008:	2301      	movs	r3, #1
 801400a:	f7fe fd47 	bl	8012a9c <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	3301      	adds	r3, #1
 8014012:	617b      	str	r3, [r7, #20]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	2b03      	cmp	r3, #3
 8014018:	ddb4      	ble.n	8013f84 <lwip_socket_drop_registered_memberships+0x1c>
 801401a:	e000      	b.n	801401e <lwip_socket_drop_registered_memberships+0xb6>
    return;
 801401c:	bf00      	nop
    }
  }
  done_socket(sock);
}
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	20008cf8 	.word	0x20008cf8

08014028 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8014032:	f00d faad 	bl	8021590 <sys_timeouts_sleeptime>
 8014036:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801403e:	d10b      	bne.n	8014058 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014040:	4813      	ldr	r0, [pc, #76]	@ (8014090 <tcpip_timeouts_mbox_fetch+0x68>)
 8014042:	f00e fae6 	bl	8022612 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014046:	2200      	movs	r2, #0
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f00e f9bc 	bl	80223c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014050:	480f      	ldr	r0, [pc, #60]	@ (8014090 <tcpip_timeouts_mbox_fetch+0x68>)
 8014052:	f00e facf 	bl	80225f4 <sys_mutex_lock>
    return;
 8014056:	e018      	b.n	801408a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d102      	bne.n	8014064 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801405e:	f00d fa5d 	bl	802151c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014062:	e7e6      	b.n	8014032 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014064:	480a      	ldr	r0, [pc, #40]	@ (8014090 <tcpip_timeouts_mbox_fetch+0x68>)
 8014066:	f00e fad4 	bl	8022612 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f00e f9aa 	bl	80223c8 <sys_arch_mbox_fetch>
 8014074:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8014076:	4806      	ldr	r0, [pc, #24]	@ (8014090 <tcpip_timeouts_mbox_fetch+0x68>)
 8014078:	f00e fabc 	bl	80225f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014082:	d102      	bne.n	801408a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014084:	f00d fa4a 	bl	802151c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014088:	e7d3      	b.n	8014032 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801408a:	3710      	adds	r7, #16
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	20008d78 	.word	0x20008d78

08014094 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801409c:	4810      	ldr	r0, [pc, #64]	@ (80140e0 <tcpip_thread+0x4c>)
 801409e:	f00e faa9 	bl	80225f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80140a2:	4b10      	ldr	r3, [pc, #64]	@ (80140e4 <tcpip_thread+0x50>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d005      	beq.n	80140b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80140aa:	4b0e      	ldr	r3, [pc, #56]	@ (80140e4 <tcpip_thread+0x50>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4a0e      	ldr	r2, [pc, #56]	@ (80140e8 <tcpip_thread+0x54>)
 80140b0:	6812      	ldr	r2, [r2, #0]
 80140b2:	4610      	mov	r0, r2
 80140b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80140b6:	f107 030c 	add.w	r3, r7, #12
 80140ba:	4619      	mov	r1, r3
 80140bc:	480b      	ldr	r0, [pc, #44]	@ (80140ec <tcpip_thread+0x58>)
 80140be:	f7ff ffb3 	bl	8014028 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d106      	bne.n	80140d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80140c8:	4b09      	ldr	r3, [pc, #36]	@ (80140f0 <tcpip_thread+0x5c>)
 80140ca:	2291      	movs	r2, #145	@ 0x91
 80140cc:	4909      	ldr	r1, [pc, #36]	@ (80140f4 <tcpip_thread+0x60>)
 80140ce:	480a      	ldr	r0, [pc, #40]	@ (80140f8 <tcpip_thread+0x64>)
 80140d0:	f00e fc32 	bl	8022938 <iprintf>
      continue;
 80140d4:	e003      	b.n	80140de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	4618      	mov	r0, r3
 80140da:	f000 f80f 	bl	80140fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80140de:	e7ea      	b.n	80140b6 <tcpip_thread+0x22>
 80140e0:	20008d78 	.word	0x20008d78
 80140e4:	20008d6c 	.word	0x20008d6c
 80140e8:	20008d70 	.word	0x20008d70
 80140ec:	20008d74 	.word	0x20008d74
 80140f0:	08024eb4 	.word	0x08024eb4
 80140f4:	08024f28 	.word	0x08024f28
 80140f8:	08024f48 	.word	0x08024f48

080140fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b02      	cmp	r3, #2
 801410a:	d026      	beq.n	801415a <tcpip_thread_handle_msg+0x5e>
 801410c:	2b02      	cmp	r3, #2
 801410e:	dc2b      	bgt.n	8014168 <tcpip_thread_handle_msg+0x6c>
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <tcpip_thread_handle_msg+0x1e>
 8014114:	2b01      	cmp	r3, #1
 8014116:	d015      	beq.n	8014144 <tcpip_thread_handle_msg+0x48>
 8014118:	e026      	b.n	8014168 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	6850      	ldr	r0, [r2, #4]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	6892      	ldr	r2, [r2, #8]
 8014126:	4611      	mov	r1, r2
 8014128:	4798      	blx	r3
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d004      	beq.n	801413a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	4618      	mov	r0, r3
 8014136:	f006 fd25 	bl	801ab84 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801413a:	6879      	ldr	r1, [r7, #4]
 801413c:	2009      	movs	r0, #9
 801413e:	f005 fe29 	bl	8019d94 <memp_free>
      break;
 8014142:	e018      	b.n	8014176 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	6892      	ldr	r2, [r2, #8]
 801414c:	4610      	mov	r0, r2
 801414e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014150:	6879      	ldr	r1, [r7, #4]
 8014152:	2008      	movs	r0, #8
 8014154:	f005 fe1e 	bl	8019d94 <memp_free>
      break;
 8014158:	e00d      	b.n	8014176 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	6892      	ldr	r2, [r2, #8]
 8014162:	4610      	mov	r0, r2
 8014164:	4798      	blx	r3
      break;
 8014166:	e006      	b.n	8014176 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014168:	4b05      	ldr	r3, [pc, #20]	@ (8014180 <tcpip_thread_handle_msg+0x84>)
 801416a:	22cf      	movs	r2, #207	@ 0xcf
 801416c:	4905      	ldr	r1, [pc, #20]	@ (8014184 <tcpip_thread_handle_msg+0x88>)
 801416e:	4806      	ldr	r0, [pc, #24]	@ (8014188 <tcpip_thread_handle_msg+0x8c>)
 8014170:	f00e fbe2 	bl	8022938 <iprintf>
      break;
 8014174:	bf00      	nop
  }
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	08024eb4 	.word	0x08024eb4
 8014184:	08024f28 	.word	0x08024f28
 8014188:	08024f48 	.word	0x08024f48

0801418c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b086      	sub	sp, #24
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014198:	481a      	ldr	r0, [pc, #104]	@ (8014204 <tcpip_inpkt+0x78>)
 801419a:	f00e f95d 	bl	8022458 <sys_mbox_valid>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d105      	bne.n	80141b0 <tcpip_inpkt+0x24>
 80141a4:	4b18      	ldr	r3, [pc, #96]	@ (8014208 <tcpip_inpkt+0x7c>)
 80141a6:	22fc      	movs	r2, #252	@ 0xfc
 80141a8:	4918      	ldr	r1, [pc, #96]	@ (801420c <tcpip_inpkt+0x80>)
 80141aa:	4819      	ldr	r0, [pc, #100]	@ (8014210 <tcpip_inpkt+0x84>)
 80141ac:	f00e fbc4 	bl	8022938 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80141b0:	2009      	movs	r0, #9
 80141b2:	f005 fd79 	bl	8019ca8 <memp_malloc>
 80141b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d102      	bne.n	80141c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80141be:	f04f 33ff 	mov.w	r3, #4294967295
 80141c2:	e01a      	b.n	80141fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	2200      	movs	r2, #0
 80141c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	68fa      	ldr	r2, [r7, #12]
 80141ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80141dc:	6979      	ldr	r1, [r7, #20]
 80141de:	4809      	ldr	r0, [pc, #36]	@ (8014204 <tcpip_inpkt+0x78>)
 80141e0:	f00e f8d8 	bl	8022394 <sys_mbox_trypost>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d006      	beq.n	80141f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80141ea:	6979      	ldr	r1, [r7, #20]
 80141ec:	2009      	movs	r0, #9
 80141ee:	f005 fdd1 	bl	8019d94 <memp_free>
    return ERR_MEM;
 80141f2:	f04f 33ff 	mov.w	r3, #4294967295
 80141f6:	e000      	b.n	80141fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80141f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3718      	adds	r7, #24
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	20008d74 	.word	0x20008d74
 8014208:	08024eb4 	.word	0x08024eb4
 801420c:	08024f70 	.word	0x08024f70
 8014210:	08024f48 	.word	0x08024f48

08014214 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014224:	f003 0318 	and.w	r3, r3, #24
 8014228:	2b00      	cmp	r3, #0
 801422a:	d006      	beq.n	801423a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801422c:	4a08      	ldr	r2, [pc, #32]	@ (8014250 <tcpip_input+0x3c>)
 801422e:	6839      	ldr	r1, [r7, #0]
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7ff ffab 	bl	801418c <tcpip_inpkt>
 8014236:	4603      	mov	r3, r0
 8014238:	e005      	b.n	8014246 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801423a:	4a06      	ldr	r2, [pc, #24]	@ (8014254 <tcpip_input+0x40>)
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7ff ffa4 	bl	801418c <tcpip_inpkt>
 8014244:	4603      	mov	r3, r0
}
 8014246:	4618      	mov	r0, r3
 8014248:	3708      	adds	r7, #8
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	08022191 	.word	0x08022191
 8014254:	08017d3d 	.word	0x08017d3d

08014258 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014262:	4819      	ldr	r0, [pc, #100]	@ (80142c8 <tcpip_try_callback+0x70>)
 8014264:	f00e f8f8 	bl	8022458 <sys_mbox_valid>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d106      	bne.n	801427c <tcpip_try_callback+0x24>
 801426e:	4b17      	ldr	r3, [pc, #92]	@ (80142cc <tcpip_try_callback+0x74>)
 8014270:	f240 125d 	movw	r2, #349	@ 0x15d
 8014274:	4916      	ldr	r1, [pc, #88]	@ (80142d0 <tcpip_try_callback+0x78>)
 8014276:	4817      	ldr	r0, [pc, #92]	@ (80142d4 <tcpip_try_callback+0x7c>)
 8014278:	f00e fb5e 	bl	8022938 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801427c:	2008      	movs	r0, #8
 801427e:	f005 fd13 	bl	8019ca8 <memp_malloc>
 8014282:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d102      	bne.n	8014290 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801428a:	f04f 33ff 	mov.w	r3, #4294967295
 801428e:	e017      	b.n	80142c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2201      	movs	r2, #1
 8014294:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	683a      	ldr	r2, [r7, #0]
 80142a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80142a2:	68f9      	ldr	r1, [r7, #12]
 80142a4:	4808      	ldr	r0, [pc, #32]	@ (80142c8 <tcpip_try_callback+0x70>)
 80142a6:	f00e f875 	bl	8022394 <sys_mbox_trypost>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d006      	beq.n	80142be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80142b0:	68f9      	ldr	r1, [r7, #12]
 80142b2:	2008      	movs	r0, #8
 80142b4:	f005 fd6e 	bl	8019d94 <memp_free>
    return ERR_MEM;
 80142b8:	f04f 33ff 	mov.w	r3, #4294967295
 80142bc:	e000      	b.n	80142c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3710      	adds	r7, #16
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	20008d74 	.word	0x20008d74
 80142cc:	08024eb4 	.word	0x08024eb4
 80142d0:	08024f70 	.word	0x08024f70
 80142d4:	08024f48 	.word	0x08024f48

080142d8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80142e4:	4806      	ldr	r0, [pc, #24]	@ (8014300 <tcpip_send_msg_wait_sem+0x28>)
 80142e6:	f00e f985 	bl	80225f4 <sys_mutex_lock>
  fn(apimsg);
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	68b8      	ldr	r0, [r7, #8]
 80142ee:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80142f0:	4803      	ldr	r0, [pc, #12]	@ (8014300 <tcpip_send_msg_wait_sem+0x28>)
 80142f2:	f00e f98e 	bl	8022612 <sys_mutex_unlock>
  return ERR_OK;
 80142f6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	20008d78 	.word	0x20008d78

08014304 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 801430e:	4808      	ldr	r0, [pc, #32]	@ (8014330 <tcpip_api_call+0x2c>)
 8014310:	f00e f970 	bl	80225f4 <sys_mutex_lock>
  err = fn(call);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6838      	ldr	r0, [r7, #0]
 8014318:	4798      	blx	r3
 801431a:	4603      	mov	r3, r0
 801431c:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 801431e:	4804      	ldr	r0, [pc, #16]	@ (8014330 <tcpip_api_call+0x2c>)
 8014320:	f00e f977 	bl	8022612 <sys_mutex_unlock>
  return err;
 8014324:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8014328:	4618      	mov	r0, r3
 801432a:	3710      	adds	r7, #16
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	20008d78 	.word	0x20008d78

08014334 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af02      	add	r7, sp, #8
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801433e:	f005 f80c 	bl	801935a <lwip_init>

  tcpip_init_done = initfunc;
 8014342:	4a17      	ldr	r2, [pc, #92]	@ (80143a0 <tcpip_init+0x6c>)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014348:	4a16      	ldr	r2, [pc, #88]	@ (80143a4 <tcpip_init+0x70>)
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801434e:	2106      	movs	r1, #6
 8014350:	4815      	ldr	r0, [pc, #84]	@ (80143a8 <tcpip_init+0x74>)
 8014352:	f00d fff3 	bl	802233c <sys_mbox_new>
 8014356:	4603      	mov	r3, r0
 8014358:	2b00      	cmp	r3, #0
 801435a:	d006      	beq.n	801436a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801435c:	4b13      	ldr	r3, [pc, #76]	@ (80143ac <tcpip_init+0x78>)
 801435e:	f240 2261 	movw	r2, #609	@ 0x261
 8014362:	4913      	ldr	r1, [pc, #76]	@ (80143b0 <tcpip_init+0x7c>)
 8014364:	4813      	ldr	r0, [pc, #76]	@ (80143b4 <tcpip_init+0x80>)
 8014366:	f00e fae7 	bl	8022938 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801436a:	4813      	ldr	r0, [pc, #76]	@ (80143b8 <tcpip_init+0x84>)
 801436c:	f00e f92c 	bl	80225c8 <sys_mutex_new>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d006      	beq.n	8014384 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014376:	4b0d      	ldr	r3, [pc, #52]	@ (80143ac <tcpip_init+0x78>)
 8014378:	f240 2265 	movw	r2, #613	@ 0x265
 801437c:	490f      	ldr	r1, [pc, #60]	@ (80143bc <tcpip_init+0x88>)
 801437e:	480d      	ldr	r0, [pc, #52]	@ (80143b4 <tcpip_init+0x80>)
 8014380:	f00e fada 	bl	8022938 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014384:	2328      	movs	r3, #40	@ 0x28
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801438c:	2200      	movs	r2, #0
 801438e:	490c      	ldr	r1, [pc, #48]	@ (80143c0 <tcpip_init+0x8c>)
 8014390:	480c      	ldr	r0, [pc, #48]	@ (80143c4 <tcpip_init+0x90>)
 8014392:	f00e f94b 	bl	802262c <sys_thread_new>
}
 8014396:	bf00      	nop
 8014398:	3708      	adds	r7, #8
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20008d6c 	.word	0x20008d6c
 80143a4:	20008d70 	.word	0x20008d70
 80143a8:	20008d74 	.word	0x20008d74
 80143ac:	08024eb4 	.word	0x08024eb4
 80143b0:	08024f80 	.word	0x08024f80
 80143b4:	08024f48 	.word	0x08024f48
 80143b8:	20008d78 	.word	0x20008d78
 80143bc:	08024fa4 	.word	0x08024fa4
 80143c0:	08014095 	.word	0x08014095
 80143c4:	08024fc8 	.word	0x08024fc8

080143c8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80143cc:	4b20      	ldr	r3, [pc, #128]	@ (8014450 <dhcp_inc_pcb_refcount+0x88>)
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d133      	bne.n	801443c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80143d4:	4b1f      	ldr	r3, [pc, #124]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d005      	beq.n	80143e8 <dhcp_inc_pcb_refcount+0x20>
 80143dc:	4b1e      	ldr	r3, [pc, #120]	@ (8014458 <dhcp_inc_pcb_refcount+0x90>)
 80143de:	22e5      	movs	r2, #229	@ 0xe5
 80143e0:	491e      	ldr	r1, [pc, #120]	@ (801445c <dhcp_inc_pcb_refcount+0x94>)
 80143e2:	481f      	ldr	r0, [pc, #124]	@ (8014460 <dhcp_inc_pcb_refcount+0x98>)
 80143e4:	f00e faa8 	bl	8022938 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80143e8:	f00d fe7a 	bl	80220e0 <udp_new>
 80143ec:	4603      	mov	r3, r0
 80143ee:	4a19      	ldr	r2, [pc, #100]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 80143f0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80143f2:	4b18      	ldr	r3, [pc, #96]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d102      	bne.n	8014400 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80143fa:	f04f 33ff 	mov.w	r3, #4294967295
 80143fe:	e024      	b.n	801444a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014400:	4b14      	ldr	r3, [pc, #80]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	7a5a      	ldrb	r2, [r3, #9]
 8014406:	4b13      	ldr	r3, [pc, #76]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f042 0220 	orr.w	r2, r2, #32
 801440e:	b2d2      	uxtb	r2, r2
 8014410:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014412:	4b10      	ldr	r3, [pc, #64]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	2244      	movs	r2, #68	@ 0x44
 8014418:	4912      	ldr	r1, [pc, #72]	@ (8014464 <dhcp_inc_pcb_refcount+0x9c>)
 801441a:	4618      	mov	r0, r3
 801441c:	f00d fce0 	bl	8021de0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014420:	4b0c      	ldr	r3, [pc, #48]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2243      	movs	r2, #67	@ 0x43
 8014426:	490f      	ldr	r1, [pc, #60]	@ (8014464 <dhcp_inc_pcb_refcount+0x9c>)
 8014428:	4618      	mov	r0, r3
 801442a:	f00d fd61 	bl	8021ef0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801442e:	4b09      	ldr	r3, [pc, #36]	@ (8014454 <dhcp_inc_pcb_refcount+0x8c>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2200      	movs	r2, #0
 8014434:	490c      	ldr	r1, [pc, #48]	@ (8014468 <dhcp_inc_pcb_refcount+0xa0>)
 8014436:	4618      	mov	r0, r3
 8014438:	f00d fdf0 	bl	802201c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801443c:	4b04      	ldr	r3, [pc, #16]	@ (8014450 <dhcp_inc_pcb_refcount+0x88>)
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	3301      	adds	r3, #1
 8014442:	b2da      	uxtb	r2, r3
 8014444:	4b02      	ldr	r3, [pc, #8]	@ (8014450 <dhcp_inc_pcb_refcount+0x88>)
 8014446:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014448:	2300      	movs	r3, #0
}
 801444a:	4618      	mov	r0, r3
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	20008da8 	.word	0x20008da8
 8014454:	20008da4 	.word	0x20008da4
 8014458:	08024fd0 	.word	0x08024fd0
 801445c:	08025048 	.word	0x08025048
 8014460:	08025070 	.word	0x08025070
 8014464:	08028c18 	.word	0x08028c18
 8014468:	08015cf5 	.word	0x08015cf5

0801446c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014470:	4b0e      	ldr	r3, [pc, #56]	@ (80144ac <dhcp_dec_pcb_refcount+0x40>)
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d105      	bne.n	8014484 <dhcp_dec_pcb_refcount+0x18>
 8014478:	4b0d      	ldr	r3, [pc, #52]	@ (80144b0 <dhcp_dec_pcb_refcount+0x44>)
 801447a:	22ff      	movs	r2, #255	@ 0xff
 801447c:	490d      	ldr	r1, [pc, #52]	@ (80144b4 <dhcp_dec_pcb_refcount+0x48>)
 801447e:	480e      	ldr	r0, [pc, #56]	@ (80144b8 <dhcp_dec_pcb_refcount+0x4c>)
 8014480:	f00e fa5a 	bl	8022938 <iprintf>
  dhcp_pcb_refcount--;
 8014484:	4b09      	ldr	r3, [pc, #36]	@ (80144ac <dhcp_dec_pcb_refcount+0x40>)
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	3b01      	subs	r3, #1
 801448a:	b2da      	uxtb	r2, r3
 801448c:	4b07      	ldr	r3, [pc, #28]	@ (80144ac <dhcp_dec_pcb_refcount+0x40>)
 801448e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014490:	4b06      	ldr	r3, [pc, #24]	@ (80144ac <dhcp_dec_pcb_refcount+0x40>)
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d107      	bne.n	80144a8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014498:	4b08      	ldr	r3, [pc, #32]	@ (80144bc <dhcp_dec_pcb_refcount+0x50>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4618      	mov	r0, r3
 801449e:	f00d fddd 	bl	802205c <udp_remove>
    dhcp_pcb = NULL;
 80144a2:	4b06      	ldr	r3, [pc, #24]	@ (80144bc <dhcp_dec_pcb_refcount+0x50>)
 80144a4:	2200      	movs	r2, #0
 80144a6:	601a      	str	r2, [r3, #0]
  }
}
 80144a8:	bf00      	nop
 80144aa:	bd80      	pop	{r7, pc}
 80144ac:	20008da8 	.word	0x20008da8
 80144b0:	08024fd0 	.word	0x08024fd0
 80144b4:	08025098 	.word	0x08025098
 80144b8:	08025070 	.word	0x08025070
 80144bc:	20008da4 	.word	0x20008da4

080144c0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80144ce:	210c      	movs	r1, #12
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f001 f851 	bl	8015578 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80144d6:	4b06      	ldr	r3, [pc, #24]	@ (80144f0 <dhcp_handle_nak+0x30>)
 80144d8:	4a05      	ldr	r2, [pc, #20]	@ (80144f0 <dhcp_handle_nak+0x30>)
 80144da:	4905      	ldr	r1, [pc, #20]	@ (80144f0 <dhcp_handle_nak+0x30>)
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f005 fe07 	bl	801a0f0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f000 fc4a 	bl	8014d7c <dhcp_discover>
}
 80144e8:	bf00      	nop
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	08028c18 	.word	0x08028c18

080144f4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014500:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014502:	2108      	movs	r1, #8
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f001 f837 	bl	8015578 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	331c      	adds	r3, #28
 801450e:	2200      	movs	r2, #0
 8014510:	4619      	mov	r1, r3
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f002 fb38 	bl	8016b88 <etharp_query>
 8014518:	4603      	mov	r3, r0
 801451a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	799b      	ldrb	r3, [r3, #6]
 8014520:	2bff      	cmp	r3, #255	@ 0xff
 8014522:	d005      	beq.n	8014530 <dhcp_check+0x3c>
    dhcp->tries++;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	799b      	ldrb	r3, [r3, #6]
 8014528:	3301      	adds	r3, #1
 801452a:	b2da      	uxtb	r2, r3
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014530:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014534:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014536:	893b      	ldrh	r3, [r7, #8]
 8014538:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801453c:	4a06      	ldr	r2, [pc, #24]	@ (8014558 <dhcp_check+0x64>)
 801453e:	fb82 1203 	smull	r1, r2, r2, r3
 8014542:	1152      	asrs	r2, r2, #5
 8014544:	17db      	asrs	r3, r3, #31
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	b29a      	uxth	r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801454e:	bf00      	nop
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	10624dd3 	.word	0x10624dd3

0801455c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801456a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801456c:	4b0c      	ldr	r3, [pc, #48]	@ (80145a0 <dhcp_handle_offer+0x44>)
 801456e:	789b      	ldrb	r3, [r3, #2]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d011      	beq.n	8014598 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2200      	movs	r2, #0
 8014578:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801457a:	4b0a      	ldr	r3, [pc, #40]	@ (80145a4 <dhcp_handle_offer+0x48>)
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	4618      	mov	r0, r3
 8014580:	f004 fe63 	bl	801924a <lwip_htonl>
 8014584:	4602      	mov	r2, r0
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	691a      	ldr	r2, [r3, #16]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 f808 	bl	80145a8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014598:	bf00      	nop
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	20008d9c 	.word	0x20008d9c
 80145a4:	20008d7c 	.word	0x20008d7c

080145a8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80145a8:	b5b0      	push	{r4, r5, r7, lr}
 80145aa:	b08a      	sub	sp, #40	@ 0x28
 80145ac:	af02      	add	r7, sp, #8
 80145ae:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d109      	bne.n	80145ca <dhcp_select+0x22>
 80145b6:	4b71      	ldr	r3, [pc, #452]	@ (801477c <dhcp_select+0x1d4>)
 80145b8:	f240 1277 	movw	r2, #375	@ 0x177
 80145bc:	4970      	ldr	r1, [pc, #448]	@ (8014780 <dhcp_select+0x1d8>)
 80145be:	4871      	ldr	r0, [pc, #452]	@ (8014784 <dhcp_select+0x1dc>)
 80145c0:	f00e f9ba 	bl	8022938 <iprintf>
 80145c4:	f06f 030f 	mvn.w	r3, #15
 80145c8:	e0d3      	b.n	8014772 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145ce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d109      	bne.n	80145ea <dhcp_select+0x42>
 80145d6:	4b69      	ldr	r3, [pc, #420]	@ (801477c <dhcp_select+0x1d4>)
 80145d8:	f240 1279 	movw	r2, #377	@ 0x179
 80145dc:	496a      	ldr	r1, [pc, #424]	@ (8014788 <dhcp_select+0x1e0>)
 80145de:	4869      	ldr	r0, [pc, #420]	@ (8014784 <dhcp_select+0x1dc>)
 80145e0:	f00e f9aa 	bl	8022938 <iprintf>
 80145e4:	f06f 0305 	mvn.w	r3, #5
 80145e8:	e0c3      	b.n	8014772 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80145ea:	2101      	movs	r1, #1
 80145ec:	69b8      	ldr	r0, [r7, #24]
 80145ee:	f000 ffc3 	bl	8015578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80145f2:	f107 030c 	add.w	r3, r7, #12
 80145f6:	2203      	movs	r2, #3
 80145f8:	69b9      	ldr	r1, [r7, #24]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f001 fc48 	bl	8015e90 <dhcp_create_msg>
 8014600:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	2b00      	cmp	r3, #0
 8014606:	f000 8085 	beq.w	8014714 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014610:	89b8      	ldrh	r0, [r7, #12]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014618:	2302      	movs	r3, #2
 801461a:	2239      	movs	r2, #57	@ 0x39
 801461c:	f000 ffc6 	bl	80155ac <dhcp_option>
 8014620:	4603      	mov	r3, r0
 8014622:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014624:	89b8      	ldrh	r0, [r7, #12]
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014630:	461a      	mov	r2, r3
 8014632:	f001 f815 	bl	8015660 <dhcp_option_short>
 8014636:	4603      	mov	r3, r0
 8014638:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801463a:	89b8      	ldrh	r0, [r7, #12]
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014642:	2304      	movs	r3, #4
 8014644:	2232      	movs	r2, #50	@ 0x32
 8014646:	f000 ffb1 	bl	80155ac <dhcp_option>
 801464a:	4603      	mov	r3, r0
 801464c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801464e:	89bc      	ldrh	r4, [r7, #12]
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	4618      	mov	r0, r3
 801465c:	f004 fdf5 	bl	801924a <lwip_htonl>
 8014660:	4603      	mov	r3, r0
 8014662:	461a      	mov	r2, r3
 8014664:	4629      	mov	r1, r5
 8014666:	4620      	mov	r0, r4
 8014668:	f001 f82c 	bl	80156c4 <dhcp_option_long>
 801466c:	4603      	mov	r3, r0
 801466e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014670:	89b8      	ldrh	r0, [r7, #12]
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014678:	2304      	movs	r3, #4
 801467a:	2236      	movs	r2, #54	@ 0x36
 801467c:	f000 ff96 	bl	80155ac <dhcp_option>
 8014680:	4603      	mov	r3, r0
 8014682:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014684:	89bc      	ldrh	r4, [r7, #12]
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	4618      	mov	r0, r3
 8014692:	f004 fdda 	bl	801924a <lwip_htonl>
 8014696:	4603      	mov	r3, r0
 8014698:	461a      	mov	r2, r3
 801469a:	4629      	mov	r1, r5
 801469c:	4620      	mov	r0, r4
 801469e:	f001 f811 	bl	80156c4 <dhcp_option_long>
 80146a2:	4603      	mov	r3, r0
 80146a4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80146a6:	89b8      	ldrh	r0, [r7, #12]
 80146a8:	693b      	ldr	r3, [r7, #16]
 80146aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146ae:	2303      	movs	r3, #3
 80146b0:	2237      	movs	r2, #55	@ 0x37
 80146b2:	f000 ff7b 	bl	80155ac <dhcp_option>
 80146b6:	4603      	mov	r3, r0
 80146b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146ba:	2300      	movs	r3, #0
 80146bc:	77bb      	strb	r3, [r7, #30]
 80146be:	e00e      	b.n	80146de <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146c0:	89b8      	ldrh	r0, [r7, #12]
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146c8:	7fbb      	ldrb	r3, [r7, #30]
 80146ca:	4a30      	ldr	r2, [pc, #192]	@ (801478c <dhcp_select+0x1e4>)
 80146cc:	5cd3      	ldrb	r3, [r2, r3]
 80146ce:	461a      	mov	r2, r3
 80146d0:	f000 ffa0 	bl	8015614 <dhcp_option_byte>
 80146d4:	4603      	mov	r3, r0
 80146d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146d8:	7fbb      	ldrb	r3, [r7, #30]
 80146da:	3301      	adds	r3, #1
 80146dc:	77bb      	strb	r3, [r7, #30]
 80146de:	7fbb      	ldrb	r3, [r7, #30]
 80146e0:	2b02      	cmp	r3, #2
 80146e2:	d9ed      	bls.n	80146c0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146e4:	89b8      	ldrh	r0, [r7, #12]
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	33f0      	adds	r3, #240	@ 0xf0
 80146ea:	697a      	ldr	r2, [r7, #20]
 80146ec:	4619      	mov	r1, r3
 80146ee:	f001 fca5 	bl	801603c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80146f2:	4b27      	ldr	r3, [pc, #156]	@ (8014790 <dhcp_select+0x1e8>)
 80146f4:	6818      	ldr	r0, [r3, #0]
 80146f6:	4b27      	ldr	r3, [pc, #156]	@ (8014794 <dhcp_select+0x1ec>)
 80146f8:	9301      	str	r3, [sp, #4]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	2343      	movs	r3, #67	@ 0x43
 8014700:	4a25      	ldr	r2, [pc, #148]	@ (8014798 <dhcp_select+0x1f0>)
 8014702:	6979      	ldr	r1, [r7, #20]
 8014704:	f00d fa6a 	bl	8021bdc <udp_sendto_if_src>
 8014708:	4603      	mov	r3, r0
 801470a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801470c:	6978      	ldr	r0, [r7, #20]
 801470e:	f006 fa39 	bl	801ab84 <pbuf_free>
 8014712:	e001      	b.n	8014718 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014714:	23ff      	movs	r3, #255	@ 0xff
 8014716:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	799b      	ldrb	r3, [r3, #6]
 801471c:	2bff      	cmp	r3, #255	@ 0xff
 801471e:	d005      	beq.n	801472c <dhcp_select+0x184>
    dhcp->tries++;
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	799b      	ldrb	r3, [r3, #6]
 8014724:	3301      	adds	r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	799b      	ldrb	r3, [r3, #6]
 8014730:	2b05      	cmp	r3, #5
 8014732:	d80d      	bhi.n	8014750 <dhcp_select+0x1a8>
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	799b      	ldrb	r3, [r3, #6]
 8014738:	461a      	mov	r2, r3
 801473a:	2301      	movs	r3, #1
 801473c:	4093      	lsls	r3, r2
 801473e:	b29b      	uxth	r3, r3
 8014740:	461a      	mov	r2, r3
 8014742:	0152      	lsls	r2, r2, #5
 8014744:	1ad2      	subs	r2, r2, r3
 8014746:	0092      	lsls	r2, r2, #2
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	b29b      	uxth	r3, r3
 801474e:	e001      	b.n	8014754 <dhcp_select+0x1ac>
 8014750:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014754:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014756:	89fb      	ldrh	r3, [r7, #14]
 8014758:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801475c:	4a0f      	ldr	r2, [pc, #60]	@ (801479c <dhcp_select+0x1f4>)
 801475e:	fb82 1203 	smull	r1, r2, r2, r3
 8014762:	1152      	asrs	r2, r2, #5
 8014764:	17db      	asrs	r3, r3, #31
 8014766:	1ad3      	subs	r3, r2, r3
 8014768:	b29a      	uxth	r2, r3
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801476e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3720      	adds	r7, #32
 8014776:	46bd      	mov	sp, r7
 8014778:	bdb0      	pop	{r4, r5, r7, pc}
 801477a:	bf00      	nop
 801477c:	08024fd0 	.word	0x08024fd0
 8014780:	080250bc 	.word	0x080250bc
 8014784:	08025070 	.word	0x08025070
 8014788:	080250d8 	.word	0x080250d8
 801478c:	20000034 	.word	0x20000034
 8014790:	20008da4 	.word	0x20008da4
 8014794:	08028c18 	.word	0x08028c18
 8014798:	08028c1c 	.word	0x08028c1c
 801479c:	10624dd3 	.word	0x10624dd3

080147a0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80147a6:	4b27      	ldr	r3, [pc, #156]	@ (8014844 <dhcp_coarse_tmr+0xa4>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	607b      	str	r3, [r7, #4]
 80147ac:	e042      	b.n	8014834 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147b2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d039      	beq.n	801482e <dhcp_coarse_tmr+0x8e>
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	795b      	ldrb	r3, [r3, #5]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d035      	beq.n	801482e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	8a9b      	ldrh	r3, [r3, #20]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d012      	beq.n	80147f0 <dhcp_coarse_tmr+0x50>
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	8a5b      	ldrh	r3, [r3, #18]
 80147ce:	3301      	adds	r3, #1
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	825a      	strh	r2, [r3, #18]
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	8a5a      	ldrh	r2, [r3, #18]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	8a9b      	ldrh	r3, [r3, #20]
 80147de:	429a      	cmp	r2, r3
 80147e0:	d106      	bne.n	80147f0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 fe2e 	bl	8015444 <dhcp_release_and_stop>
        dhcp_start(netif);
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 f96b 	bl	8014ac4 <dhcp_start>
 80147ee:	e01e      	b.n	801482e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	8a1b      	ldrh	r3, [r3, #16]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d00b      	beq.n	8014810 <dhcp_coarse_tmr+0x70>
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	8a1b      	ldrh	r3, [r3, #16]
 80147fc:	1e5a      	subs	r2, r3, #1
 80147fe:	b291      	uxth	r1, r2
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	8211      	strh	r1, [r2, #16]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d103      	bne.n	8014810 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f8c7 	bl	801499c <dhcp_t2_timeout>
 801480e:	e00e      	b.n	801482e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	89db      	ldrh	r3, [r3, #14]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00a      	beq.n	801482e <dhcp_coarse_tmr+0x8e>
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	89db      	ldrh	r3, [r3, #14]
 801481c:	1e5a      	subs	r2, r3, #1
 801481e:	b291      	uxth	r1, r2
 8014820:	683a      	ldr	r2, [r7, #0]
 8014822:	81d1      	strh	r1, [r2, #14]
 8014824:	2b01      	cmp	r3, #1
 8014826:	d102      	bne.n	801482e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 f888 	bl	801493e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	607b      	str	r3, [r7, #4]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1b9      	bne.n	80147ae <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801483a:	bf00      	nop
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	2001000c 	.word	0x2001000c

08014848 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801484e:	4b16      	ldr	r3, [pc, #88]	@ (80148a8 <dhcp_fine_tmr+0x60>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	607b      	str	r3, [r7, #4]
 8014854:	e020      	b.n	8014898 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801485a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d017      	beq.n	8014892 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	891b      	ldrh	r3, [r3, #8]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d906      	bls.n	8014878 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	891b      	ldrh	r3, [r3, #8]
 801486e:	3b01      	subs	r3, #1
 8014870:	b29a      	uxth	r2, r3
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	811a      	strh	r2, [r3, #8]
 8014876:	e00c      	b.n	8014892 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	891b      	ldrh	r3, [r3, #8]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d108      	bne.n	8014892 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	891b      	ldrh	r3, [r3, #8]
 8014884:	3b01      	subs	r3, #1
 8014886:	b29a      	uxth	r2, r3
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 f80d 	bl	80148ac <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	607b      	str	r3, [r7, #4]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d1db      	bne.n	8014856 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801489e:	bf00      	nop
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	2001000c 	.word	0x2001000c

080148ac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	795b      	ldrb	r3, [r3, #5]
 80148be:	2b0c      	cmp	r3, #12
 80148c0:	d003      	beq.n	80148ca <dhcp_timeout+0x1e>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	795b      	ldrb	r3, [r3, #5]
 80148c6:	2b06      	cmp	r3, #6
 80148c8:	d103      	bne.n	80148d2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fa56 	bl	8014d7c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80148d0:	e031      	b.n	8014936 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	795b      	ldrb	r3, [r3, #5]
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d10e      	bne.n	80148f8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	799b      	ldrb	r3, [r3, #6]
 80148de:	2b05      	cmp	r3, #5
 80148e0:	d803      	bhi.n	80148ea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ff fe60 	bl	80145a8 <dhcp_select>
}
 80148e8:	e025      	b.n	8014936 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 fdaa 	bl	8015444 <dhcp_release_and_stop>
      dhcp_start(netif);
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 f8e7 	bl	8014ac4 <dhcp_start>
}
 80148f6:	e01e      	b.n	8014936 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	795b      	ldrb	r3, [r3, #5]
 80148fc:	2b08      	cmp	r3, #8
 80148fe:	d10b      	bne.n	8014918 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	799b      	ldrb	r3, [r3, #6]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d803      	bhi.n	8014910 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7ff fdf3 	bl	80144f4 <dhcp_check>
}
 801490e:	e012      	b.n	8014936 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f000 fad5 	bl	8014ec0 <dhcp_bind>
}
 8014916:	e00e      	b.n	8014936 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	795b      	ldrb	r3, [r3, #5]
 801491c:	2b03      	cmp	r3, #3
 801491e:	d10a      	bne.n	8014936 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	799b      	ldrb	r3, [r3, #6]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d803      	bhi.n	8014930 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f000 fcd7 	bl	80152dc <dhcp_reboot>
}
 801492e:	e002      	b.n	8014936 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fa23 	bl	8014d7c <dhcp_discover>
}
 8014936:	bf00      	nop
 8014938:	3710      	adds	r7, #16
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801493e:	b580      	push	{r7, lr}
 8014940:	b084      	sub	sp, #16
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801494a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	795b      	ldrb	r3, [r3, #5]
 8014950:	2b01      	cmp	r3, #1
 8014952:	d007      	beq.n	8014964 <dhcp_t1_timeout+0x26>
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	795b      	ldrb	r3, [r3, #5]
 8014958:	2b0a      	cmp	r3, #10
 801495a:	d003      	beq.n	8014964 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014960:	2b05      	cmp	r3, #5
 8014962:	d117      	bne.n	8014994 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f000 fb85 	bl	8015074 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	899b      	ldrh	r3, [r3, #12]
 801496e:	461a      	mov	r2, r3
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	8a5b      	ldrh	r3, [r3, #18]
 8014974:	1ad3      	subs	r3, r2, r3
 8014976:	2b01      	cmp	r3, #1
 8014978:	dd0c      	ble.n	8014994 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	899b      	ldrh	r3, [r3, #12]
 801497e:	461a      	mov	r2, r3
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	8a5b      	ldrh	r3, [r3, #18]
 8014984:	1ad3      	subs	r3, r2, r3
 8014986:	2b00      	cmp	r3, #0
 8014988:	da00      	bge.n	801498c <dhcp_t1_timeout+0x4e>
 801498a:	3301      	adds	r3, #1
 801498c:	105b      	asrs	r3, r3, #1
 801498e:	b29a      	uxth	r2, r3
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014994:	bf00      	nop
 8014996:	3710      	adds	r7, #16
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149a8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	795b      	ldrb	r3, [r3, #5]
 80149ae:	2b01      	cmp	r3, #1
 80149b0:	d00b      	beq.n	80149ca <dhcp_t2_timeout+0x2e>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	795b      	ldrb	r3, [r3, #5]
 80149b6:	2b0a      	cmp	r3, #10
 80149b8:	d007      	beq.n	80149ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149be:	2b05      	cmp	r3, #5
 80149c0:	d003      	beq.n	80149ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	795b      	ldrb	r3, [r3, #5]
 80149c6:	2b04      	cmp	r3, #4
 80149c8:	d117      	bne.n	80149fa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fbec 	bl	80151a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	8a9b      	ldrh	r3, [r3, #20]
 80149d4:	461a      	mov	r2, r3
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	8a5b      	ldrh	r3, [r3, #18]
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	2b01      	cmp	r3, #1
 80149de:	dd0c      	ble.n	80149fa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	8a9b      	ldrh	r3, [r3, #20]
 80149e4:	461a      	mov	r2, r3
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	8a5b      	ldrh	r3, [r3, #18]
 80149ea:	1ad3      	subs	r3, r2, r3
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	da00      	bge.n	80149f2 <dhcp_t2_timeout+0x56>
 80149f0:	3301      	adds	r3, #1
 80149f2:	105b      	asrs	r3, r3, #1
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80149fa:	bf00      	nop
 80149fc:	3710      	adds	r7, #16
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
	...

08014a04 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a12:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2200      	movs	r2, #0
 8014a18:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014a20:	4b26      	ldr	r3, [pc, #152]	@ (8014abc <dhcp_handle_ack+0xb8>)
 8014a22:	78db      	ldrb	r3, [r3, #3]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d003      	beq.n	8014a30 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014a28:	4b25      	ldr	r3, [pc, #148]	@ (8014ac0 <dhcp_handle_ack+0xbc>)
 8014a2a:	68da      	ldr	r2, [r3, #12]
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014a30:	4b22      	ldr	r3, [pc, #136]	@ (8014abc <dhcp_handle_ack+0xb8>)
 8014a32:	791b      	ldrb	r3, [r3, #4]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d004      	beq.n	8014a42 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014a38:	4b21      	ldr	r3, [pc, #132]	@ (8014ac0 <dhcp_handle_ack+0xbc>)
 8014a3a:	691a      	ldr	r2, [r3, #16]
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014a40:	e004      	b.n	8014a4c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a46:	085a      	lsrs	r2, r3, #1
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8014abc <dhcp_handle_ack+0xb8>)
 8014a4e:	795b      	ldrb	r3, [r3, #5]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d004      	beq.n	8014a5e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014a54:	4b1a      	ldr	r3, [pc, #104]	@ (8014ac0 <dhcp_handle_ack+0xbc>)
 8014a56:	695a      	ldr	r2, [r3, #20]
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014a5c:	e007      	b.n	8014a6e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014a62:	4613      	mov	r3, r2
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	1a9b      	subs	r3, r3, r2
 8014a68:	08da      	lsrs	r2, r3, #3
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	691a      	ldr	r2, [r3, #16]
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014a76:	4b11      	ldr	r3, [pc, #68]	@ (8014abc <dhcp_handle_ack+0xb8>)
 8014a78:	799b      	ldrb	r3, [r3, #6]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00b      	beq.n	8014a96 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014a7e:	4b10      	ldr	r3, [pc, #64]	@ (8014ac0 <dhcp_handle_ack+0xbc>)
 8014a80:	699b      	ldr	r3, [r3, #24]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f004 fbe1 	bl	801924a <lwip_htonl>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2201      	movs	r2, #1
 8014a92:	71da      	strb	r2, [r3, #7]
 8014a94:	e002      	b.n	8014a9c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014a9c:	4b07      	ldr	r3, [pc, #28]	@ (8014abc <dhcp_handle_ack+0xb8>)
 8014a9e:	79db      	ldrb	r3, [r3, #7]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d007      	beq.n	8014ab4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014aa4:	4b06      	ldr	r3, [pc, #24]	@ (8014ac0 <dhcp_handle_ack+0xbc>)
 8014aa6:	69db      	ldr	r3, [r3, #28]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f004 fbce 	bl	801924a <lwip_htonl>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014ab4:	bf00      	nop
 8014ab6:	3710      	adds	r7, #16
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	20008d9c 	.word	0x20008d9c
 8014ac0:	20008d7c 	.word	0x20008d7c

08014ac4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d109      	bne.n	8014ae6 <dhcp_start+0x22>
 8014ad2:	4b37      	ldr	r3, [pc, #220]	@ (8014bb0 <dhcp_start+0xec>)
 8014ad4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8014ad8:	4936      	ldr	r1, [pc, #216]	@ (8014bb4 <dhcp_start+0xf0>)
 8014ada:	4837      	ldr	r0, [pc, #220]	@ (8014bb8 <dhcp_start+0xf4>)
 8014adc:	f00d ff2c 	bl	8022938 <iprintf>
 8014ae0:	f06f 030f 	mvn.w	r3, #15
 8014ae4:	e060      	b.n	8014ba8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014aec:	f003 0301 	and.w	r3, r3, #1
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d109      	bne.n	8014b08 <dhcp_start+0x44>
 8014af4:	4b2e      	ldr	r3, [pc, #184]	@ (8014bb0 <dhcp_start+0xec>)
 8014af6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8014afa:	4930      	ldr	r1, [pc, #192]	@ (8014bbc <dhcp_start+0xf8>)
 8014afc:	482e      	ldr	r0, [pc, #184]	@ (8014bb8 <dhcp_start+0xf4>)
 8014afe:	f00d ff1b 	bl	8022938 <iprintf>
 8014b02:	f06f 030f 	mvn.w	r3, #15
 8014b06:	e04f      	b.n	8014ba8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b0c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014b12:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014b16:	d202      	bcs.n	8014b1e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014b18:	f04f 33ff 	mov.w	r3, #4294967295
 8014b1c:	e044      	b.n	8014ba8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d10d      	bne.n	8014b40 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014b24:	2034      	movs	r0, #52	@ 0x34
 8014b26:	f004 ff1b 	bl	8019960 <mem_malloc>
 8014b2a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d102      	bne.n	8014b38 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014b32:	f04f 33ff 	mov.w	r3, #4294967295
 8014b36:	e037      	b.n	8014ba8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014b3e:	e005      	b.n	8014b4c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	791b      	ldrb	r3, [r3, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014b48:	f7ff fc90 	bl	801446c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014b4c:	2234      	movs	r2, #52	@ 0x34
 8014b4e:	2100      	movs	r1, #0
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f00e f883 	bl	8022c5c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014b56:	f7ff fc37 	bl	80143c8 <dhcp_inc_pcb_refcount>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d002      	beq.n	8014b66 <dhcp_start+0xa2>
    return ERR_MEM;
 8014b60:	f04f 33ff 	mov.w	r3, #4294967295
 8014b64:	e020      	b.n	8014ba8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2201      	movs	r2, #1
 8014b6a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014b72:	f003 0304 	and.w	r3, r3, #4
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d105      	bne.n	8014b86 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014b7a:	2102      	movs	r1, #2
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f000 fcfb 	bl	8015578 <dhcp_set_state>
    return ERR_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	e010      	b.n	8014ba8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 f8f8 	bl	8014d7c <dhcp_discover>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d005      	beq.n	8014ba4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f000 fc53 	bl	8015444 <dhcp_release_and_stop>
    return ERR_MEM;
 8014b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba2:	e001      	b.n	8014ba8 <dhcp_start+0xe4>
  }
  return result;
 8014ba4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3710      	adds	r7, #16
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	08024fd0 	.word	0x08024fd0
 8014bb4:	080250f4 	.word	0x080250f4
 8014bb8:	08025070 	.word	0x08025070
 8014bbc:	08025138 	.word	0x08025138

08014bc0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bcc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d025      	beq.n	8014c20 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	795b      	ldrb	r3, [r3, #5]
 8014bd8:	2b0a      	cmp	r3, #10
 8014bda:	d008      	beq.n	8014bee <dhcp_network_changed+0x2e>
 8014bdc:	2b0a      	cmp	r3, #10
 8014bde:	dc0d      	bgt.n	8014bfc <dhcp_network_changed+0x3c>
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d01f      	beq.n	8014c24 <dhcp_network_changed+0x64>
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	db09      	blt.n	8014bfc <dhcp_network_changed+0x3c>
 8014be8:	3b03      	subs	r3, #3
 8014bea:	2b02      	cmp	r3, #2
 8014bec:	d806      	bhi.n	8014bfc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fb71 	bl	80152dc <dhcp_reboot>
      break;
 8014bfa:	e014      	b.n	8014c26 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	795b      	ldrb	r3, [r3, #5]
 8014c00:	2b0c      	cmp	r3, #12
 8014c02:	d906      	bls.n	8014c12 <dhcp_network_changed+0x52>
 8014c04:	4b09      	ldr	r3, [pc, #36]	@ (8014c2c <dhcp_network_changed+0x6c>)
 8014c06:	f240 326d 	movw	r2, #877	@ 0x36d
 8014c0a:	4909      	ldr	r1, [pc, #36]	@ (8014c30 <dhcp_network_changed+0x70>)
 8014c0c:	4809      	ldr	r0, [pc, #36]	@ (8014c34 <dhcp_network_changed+0x74>)
 8014c0e:	f00d fe93 	bl	8022938 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2200      	movs	r2, #0
 8014c16:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 f8af 	bl	8014d7c <dhcp_discover>
      break;
 8014c1e:	e002      	b.n	8014c26 <dhcp_network_changed+0x66>
    return;
 8014c20:	bf00      	nop
 8014c22:	e000      	b.n	8014c26 <dhcp_network_changed+0x66>
      break;
 8014c24:	bf00      	nop
  }
}
 8014c26:	3710      	adds	r7, #16
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	08024fd0 	.word	0x08024fd0
 8014c30:	0802515c 	.word	0x0802515c
 8014c34:	08025070 	.word	0x08025070

08014c38 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d107      	bne.n	8014c58 <dhcp_arp_reply+0x20>
 8014c48:	4b0e      	ldr	r3, [pc, #56]	@ (8014c84 <dhcp_arp_reply+0x4c>)
 8014c4a:	f240 328b 	movw	r2, #907	@ 0x38b
 8014c4e:	490e      	ldr	r1, [pc, #56]	@ (8014c88 <dhcp_arp_reply+0x50>)
 8014c50:	480e      	ldr	r0, [pc, #56]	@ (8014c8c <dhcp_arp_reply+0x54>)
 8014c52:	f00d fe71 	bl	8022938 <iprintf>
 8014c56:	e012      	b.n	8014c7e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d00c      	beq.n	8014c7e <dhcp_arp_reply+0x46>
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	795b      	ldrb	r3, [r3, #5]
 8014c68:	2b08      	cmp	r3, #8
 8014c6a:	d108      	bne.n	8014c7e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	69db      	ldr	r3, [r3, #28]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d102      	bne.n	8014c7e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 f809 	bl	8014c90 <dhcp_decline>
    }
  }
}
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	08024fd0 	.word	0x08024fd0
 8014c88:	080250f4 	.word	0x080250f4
 8014c8c:	08025070 	.word	0x08025070

08014c90 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014c90:	b5b0      	push	{r4, r5, r7, lr}
 8014c92:	b08a      	sub	sp, #40	@ 0x28
 8014c94:	af02      	add	r7, sp, #8
 8014c96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c9c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014c9e:	210c      	movs	r1, #12
 8014ca0:	69b8      	ldr	r0, [r7, #24]
 8014ca2:	f000 fc69 	bl	8015578 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014ca6:	f107 030c 	add.w	r3, r7, #12
 8014caa:	2204      	movs	r2, #4
 8014cac:	69b9      	ldr	r1, [r7, #24]
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f001 f8ee 	bl	8015e90 <dhcp_create_msg>
 8014cb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d035      	beq.n	8014d28 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014cc2:	89b8      	ldrh	r0, [r7, #12]
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014cca:	2304      	movs	r3, #4
 8014ccc:	2232      	movs	r2, #50	@ 0x32
 8014cce:	f000 fc6d 	bl	80155ac <dhcp_option>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cd6:	89bc      	ldrh	r4, [r7, #12]
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	69db      	ldr	r3, [r3, #28]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f004 fab1 	bl	801924a <lwip_htonl>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	461a      	mov	r2, r3
 8014cec:	4629      	mov	r1, r5
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f000 fce8 	bl	80156c4 <dhcp_option_long>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014cf8:	89b8      	ldrh	r0, [r7, #12]
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	33f0      	adds	r3, #240	@ 0xf0
 8014cfe:	697a      	ldr	r2, [r7, #20]
 8014d00:	4619      	mov	r1, r3
 8014d02:	f001 f99b 	bl	801603c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d06:	4b19      	ldr	r3, [pc, #100]	@ (8014d6c <dhcp_decline+0xdc>)
 8014d08:	6818      	ldr	r0, [r3, #0]
 8014d0a:	4b19      	ldr	r3, [pc, #100]	@ (8014d70 <dhcp_decline+0xe0>)
 8014d0c:	9301      	str	r3, [sp, #4]
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	2343      	movs	r3, #67	@ 0x43
 8014d14:	4a17      	ldr	r2, [pc, #92]	@ (8014d74 <dhcp_decline+0xe4>)
 8014d16:	6979      	ldr	r1, [r7, #20]
 8014d18:	f00c ff60 	bl	8021bdc <udp_sendto_if_src>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d20:	6978      	ldr	r0, [r7, #20]
 8014d22:	f005 ff2f 	bl	801ab84 <pbuf_free>
 8014d26:	e001      	b.n	8014d2c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d28:	23ff      	movs	r3, #255	@ 0xff
 8014d2a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d2c:	69bb      	ldr	r3, [r7, #24]
 8014d2e:	799b      	ldrb	r3, [r3, #6]
 8014d30:	2bff      	cmp	r3, #255	@ 0xff
 8014d32:	d005      	beq.n	8014d40 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	799b      	ldrb	r3, [r3, #6]
 8014d38:	3301      	adds	r3, #1
 8014d3a:	b2da      	uxtb	r2, r3
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014d40:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014d44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d46:	89fb      	ldrh	r3, [r7, #14]
 8014d48:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8014d78 <dhcp_decline+0xe8>)
 8014d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8014d52:	1152      	asrs	r2, r2, #5
 8014d54:	17db      	asrs	r3, r3, #31
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	b29a      	uxth	r2, r3
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3720      	adds	r7, #32
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bdb0      	pop	{r4, r5, r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	20008da4 	.word	0x20008da4
 8014d70:	08028c18 	.word	0x08028c18
 8014d74:	08028c1c 	.word	0x08028c1c
 8014d78:	10624dd3 	.word	0x10624dd3

08014d7c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b08a      	sub	sp, #40	@ 0x28
 8014d80:	af02      	add	r7, sp, #8
 8014d82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d88:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	2200      	movs	r2, #0
 8014d92:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014d94:	2106      	movs	r1, #6
 8014d96:	69b8      	ldr	r0, [r7, #24]
 8014d98:	f000 fbee 	bl	8015578 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014d9c:	f107 0308 	add.w	r3, r7, #8
 8014da0:	2201      	movs	r2, #1
 8014da2:	69b9      	ldr	r1, [r7, #24]
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f001 f873 	bl	8015e90 <dhcp_create_msg>
 8014daa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d04b      	beq.n	8014e4a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014db8:	8938      	ldrh	r0, [r7, #8]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014dc0:	2302      	movs	r3, #2
 8014dc2:	2239      	movs	r2, #57	@ 0x39
 8014dc4:	f000 fbf2 	bl	80155ac <dhcp_option>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014dcc:	8938      	ldrh	r0, [r7, #8]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014dd8:	461a      	mov	r2, r3
 8014dda:	f000 fc41 	bl	8015660 <dhcp_option_short>
 8014dde:	4603      	mov	r3, r0
 8014de0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014de2:	8938      	ldrh	r0, [r7, #8]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014dea:	2303      	movs	r3, #3
 8014dec:	2237      	movs	r2, #55	@ 0x37
 8014dee:	f000 fbdd 	bl	80155ac <dhcp_option>
 8014df2:	4603      	mov	r3, r0
 8014df4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014df6:	2300      	movs	r3, #0
 8014df8:	77fb      	strb	r3, [r7, #31]
 8014dfa:	e00e      	b.n	8014e1a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014dfc:	8938      	ldrh	r0, [r7, #8]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014e04:	7ffb      	ldrb	r3, [r7, #31]
 8014e06:	4a29      	ldr	r2, [pc, #164]	@ (8014eac <dhcp_discover+0x130>)
 8014e08:	5cd3      	ldrb	r3, [r2, r3]
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	f000 fc02 	bl	8015614 <dhcp_option_byte>
 8014e10:	4603      	mov	r3, r0
 8014e12:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e14:	7ffb      	ldrb	r3, [r7, #31]
 8014e16:	3301      	adds	r3, #1
 8014e18:	77fb      	strb	r3, [r7, #31]
 8014e1a:	7ffb      	ldrb	r3, [r7, #31]
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	d9ed      	bls.n	8014dfc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e20:	8938      	ldrh	r0, [r7, #8]
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	33f0      	adds	r3, #240	@ 0xf0
 8014e26:	693a      	ldr	r2, [r7, #16]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	f001 f907 	bl	801603c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014e2e:	4b20      	ldr	r3, [pc, #128]	@ (8014eb0 <dhcp_discover+0x134>)
 8014e30:	6818      	ldr	r0, [r3, #0]
 8014e32:	4b20      	ldr	r3, [pc, #128]	@ (8014eb4 <dhcp_discover+0x138>)
 8014e34:	9301      	str	r3, [sp, #4]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	2343      	movs	r3, #67	@ 0x43
 8014e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8014eb8 <dhcp_discover+0x13c>)
 8014e3e:	6939      	ldr	r1, [r7, #16]
 8014e40:	f00c fecc 	bl	8021bdc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014e44:	6938      	ldr	r0, [r7, #16]
 8014e46:	f005 fe9d 	bl	801ab84 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	799b      	ldrb	r3, [r3, #6]
 8014e4e:	2bff      	cmp	r3, #255	@ 0xff
 8014e50:	d005      	beq.n	8014e5e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	799b      	ldrb	r3, [r3, #6]
 8014e56:	3301      	adds	r3, #1
 8014e58:	b2da      	uxtb	r2, r3
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	799b      	ldrb	r3, [r3, #6]
 8014e62:	2b05      	cmp	r3, #5
 8014e64:	d80d      	bhi.n	8014e82 <dhcp_discover+0x106>
 8014e66:	69bb      	ldr	r3, [r7, #24]
 8014e68:	799b      	ldrb	r3, [r3, #6]
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	4093      	lsls	r3, r2
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	461a      	mov	r2, r3
 8014e74:	0152      	lsls	r2, r2, #5
 8014e76:	1ad2      	subs	r2, r2, r3
 8014e78:	0092      	lsls	r2, r2, #2
 8014e7a:	4413      	add	r3, r2
 8014e7c:	00db      	lsls	r3, r3, #3
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	e001      	b.n	8014e86 <dhcp_discover+0x10a>
 8014e82:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014e86:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e88:	897b      	ldrh	r3, [r7, #10]
 8014e8a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8014ebc <dhcp_discover+0x140>)
 8014e90:	fb82 1203 	smull	r1, r2, r2, r3
 8014e94:	1152      	asrs	r2, r2, #5
 8014e96:	17db      	asrs	r3, r3, #31
 8014e98:	1ad3      	subs	r3, r2, r3
 8014e9a:	b29a      	uxth	r2, r3
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3720      	adds	r7, #32
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	20000034 	.word	0x20000034
 8014eb0:	20008da4 	.word	0x20008da4
 8014eb4:	08028c18 	.word	0x08028c18
 8014eb8:	08028c1c 	.word	0x08028c1c
 8014ebc:	10624dd3 	.word	0x10624dd3

08014ec0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b088      	sub	sp, #32
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d107      	bne.n	8014ede <dhcp_bind+0x1e>
 8014ece:	4b64      	ldr	r3, [pc, #400]	@ (8015060 <dhcp_bind+0x1a0>)
 8014ed0:	f240 4215 	movw	r2, #1045	@ 0x415
 8014ed4:	4963      	ldr	r1, [pc, #396]	@ (8015064 <dhcp_bind+0x1a4>)
 8014ed6:	4864      	ldr	r0, [pc, #400]	@ (8015068 <dhcp_bind+0x1a8>)
 8014ed8:	f00d fd2e 	bl	8022938 <iprintf>
 8014edc:	e0bc      	b.n	8015058 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d107      	bne.n	8014efa <dhcp_bind+0x3a>
 8014eea:	4b5d      	ldr	r3, [pc, #372]	@ (8015060 <dhcp_bind+0x1a0>)
 8014eec:	f240 4217 	movw	r2, #1047	@ 0x417
 8014ef0:	495e      	ldr	r1, [pc, #376]	@ (801506c <dhcp_bind+0x1ac>)
 8014ef2:	485d      	ldr	r0, [pc, #372]	@ (8015068 <dhcp_bind+0x1a8>)
 8014ef4:	f00d fd20 	bl	8022938 <iprintf>
 8014ef8:	e0ae      	b.n	8015058 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	2200      	movs	r2, #0
 8014efe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f08:	d019      	beq.n	8014f3e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f0e:	331e      	adds	r3, #30
 8014f10:	4a57      	ldr	r2, [pc, #348]	@ (8015070 <dhcp_bind+0x1b0>)
 8014f12:	fba2 2303 	umull	r2, r3, r2, r3
 8014f16:	095b      	lsrs	r3, r3, #5
 8014f18:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f1a:	69fb      	ldr	r3, [r7, #28]
 8014f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f20:	d302      	bcc.n	8014f28 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f26:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014f28:	69fb      	ldr	r3, [r7, #28]
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	69bb      	ldr	r3, [r7, #24]
 8014f2e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	8a9b      	ldrh	r3, [r3, #20]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d102      	bne.n	8014f3e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f46:	d01d      	beq.n	8014f84 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f4c:	331e      	adds	r3, #30
 8014f4e:	4a48      	ldr	r2, [pc, #288]	@ (8015070 <dhcp_bind+0x1b0>)
 8014f50:	fba2 2303 	umull	r2, r3, r2, r3
 8014f54:	095b      	lsrs	r3, r3, #5
 8014f56:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f5e:	d302      	bcc.n	8014f66 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f64:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014f6e:	69bb      	ldr	r3, [r7, #24]
 8014f70:	895b      	ldrh	r3, [r3, #10]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d102      	bne.n	8014f7c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014f76:	69bb      	ldr	r3, [r7, #24]
 8014f78:	2201      	movs	r2, #1
 8014f7a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	895a      	ldrh	r2, [r3, #10]
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014f84:	69bb      	ldr	r3, [r7, #24]
 8014f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f8c:	d01d      	beq.n	8014fca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f92:	331e      	adds	r3, #30
 8014f94:	4a36      	ldr	r2, [pc, #216]	@ (8015070 <dhcp_bind+0x1b0>)
 8014f96:	fba2 2303 	umull	r2, r3, r2, r3
 8014f9a:	095b      	lsrs	r3, r3, #5
 8014f9c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fa4:	d302      	bcc.n	8014fac <dhcp_bind+0xec>
      timeout = 0xffff;
 8014fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014faa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	899b      	ldrh	r3, [r3, #12]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	899a      	ldrh	r2, [r3, #12]
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014fca:	69bb      	ldr	r3, [r7, #24]
 8014fcc:	895a      	ldrh	r2, [r3, #10]
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	899b      	ldrh	r3, [r3, #12]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d306      	bcc.n	8014fe4 <dhcp_bind+0x124>
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	899b      	ldrh	r3, [r3, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d002      	beq.n	8014fe4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014fe4:	69bb      	ldr	r3, [r7, #24]
 8014fe6:	79db      	ldrb	r3, [r3, #7]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d003      	beq.n	8014ff4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	6a1b      	ldr	r3, [r3, #32]
 8014ff0:	613b      	str	r3, [r7, #16]
 8014ff2:	e014      	b.n	801501e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	331c      	adds	r3, #28
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015000:	2b00      	cmp	r3, #0
 8015002:	db02      	blt.n	801500a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015004:	23ff      	movs	r3, #255	@ 0xff
 8015006:	613b      	str	r3, [r7, #16]
 8015008:	e009      	b.n	801501e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801500a:	7dfb      	ldrb	r3, [r7, #23]
 801500c:	2bbf      	cmp	r3, #191	@ 0xbf
 801500e:	d903      	bls.n	8015018 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015010:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8015014:	613b      	str	r3, [r7, #16]
 8015016:	e002      	b.n	801501e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801501c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015022:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d108      	bne.n	801503c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	69da      	ldr	r2, [r3, #28]
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	4013      	ands	r3, r2
 8015032:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801503a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801503c:	210a      	movs	r1, #10
 801503e:	69b8      	ldr	r0, [r7, #24]
 8015040:	f000 fa9a 	bl	8015578 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	f103 011c 	add.w	r1, r3, #28
 801504a:	f107 030c 	add.w	r3, r7, #12
 801504e:	f107 0210 	add.w	r2, r7, #16
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f005 f84c 	bl	801a0f0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015058:	3720      	adds	r7, #32
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	08024fd0 	.word	0x08024fd0
 8015064:	08025170 	.word	0x08025170
 8015068:	08025070 	.word	0x08025070
 801506c:	0802518c 	.word	0x0802518c
 8015070:	88888889 	.word	0x88888889

08015074 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b08a      	sub	sp, #40	@ 0x28
 8015078:	af02      	add	r7, sp, #8
 801507a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015080:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015082:	2105      	movs	r1, #5
 8015084:	69b8      	ldr	r0, [r7, #24]
 8015086:	f000 fa77 	bl	8015578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801508a:	f107 030c 	add.w	r3, r7, #12
 801508e:	2203      	movs	r2, #3
 8015090:	69b9      	ldr	r1, [r7, #24]
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f000 fefc 	bl	8015e90 <dhcp_create_msg>
 8015098:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d04e      	beq.n	801513e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80150a6:	89b8      	ldrh	r0, [r7, #12]
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150ae:	2302      	movs	r3, #2
 80150b0:	2239      	movs	r2, #57	@ 0x39
 80150b2:	f000 fa7b 	bl	80155ac <dhcp_option>
 80150b6:	4603      	mov	r3, r0
 80150b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80150ba:	89b8      	ldrh	r0, [r7, #12]
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80150c6:	461a      	mov	r2, r3
 80150c8:	f000 faca 	bl	8015660 <dhcp_option_short>
 80150cc:	4603      	mov	r3, r0
 80150ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150d0:	89b8      	ldrh	r0, [r7, #12]
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150d8:	2303      	movs	r3, #3
 80150da:	2237      	movs	r2, #55	@ 0x37
 80150dc:	f000 fa66 	bl	80155ac <dhcp_option>
 80150e0:	4603      	mov	r3, r0
 80150e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150e4:	2300      	movs	r3, #0
 80150e6:	77bb      	strb	r3, [r7, #30]
 80150e8:	e00e      	b.n	8015108 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150ea:	89b8      	ldrh	r0, [r7, #12]
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80150f2:	7fbb      	ldrb	r3, [r7, #30]
 80150f4:	4a29      	ldr	r2, [pc, #164]	@ (801519c <dhcp_renew+0x128>)
 80150f6:	5cd3      	ldrb	r3, [r2, r3]
 80150f8:	461a      	mov	r2, r3
 80150fa:	f000 fa8b 	bl	8015614 <dhcp_option_byte>
 80150fe:	4603      	mov	r3, r0
 8015100:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015102:	7fbb      	ldrb	r3, [r7, #30]
 8015104:	3301      	adds	r3, #1
 8015106:	77bb      	strb	r3, [r7, #30]
 8015108:	7fbb      	ldrb	r3, [r7, #30]
 801510a:	2b02      	cmp	r3, #2
 801510c:	d9ed      	bls.n	80150ea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801510e:	89b8      	ldrh	r0, [r7, #12]
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	33f0      	adds	r3, #240	@ 0xf0
 8015114:	697a      	ldr	r2, [r7, #20]
 8015116:	4619      	mov	r1, r3
 8015118:	f000 ff90 	bl	801603c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801511c:	4b20      	ldr	r3, [pc, #128]	@ (80151a0 <dhcp_renew+0x12c>)
 801511e:	6818      	ldr	r0, [r3, #0]
 8015120:	69bb      	ldr	r3, [r7, #24]
 8015122:	f103 0218 	add.w	r2, r3, #24
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	2343      	movs	r3, #67	@ 0x43
 801512c:	6979      	ldr	r1, [r7, #20]
 801512e:	f00c fce1 	bl	8021af4 <udp_sendto_if>
 8015132:	4603      	mov	r3, r0
 8015134:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015136:	6978      	ldr	r0, [r7, #20]
 8015138:	f005 fd24 	bl	801ab84 <pbuf_free>
 801513c:	e001      	b.n	8015142 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801513e:	23ff      	movs	r3, #255	@ 0xff
 8015140:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015142:	69bb      	ldr	r3, [r7, #24]
 8015144:	799b      	ldrb	r3, [r3, #6]
 8015146:	2bff      	cmp	r3, #255	@ 0xff
 8015148:	d005      	beq.n	8015156 <dhcp_renew+0xe2>
    dhcp->tries++;
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	799b      	ldrb	r3, [r3, #6]
 801514e:	3301      	adds	r3, #1
 8015150:	b2da      	uxtb	r2, r3
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	799b      	ldrb	r3, [r3, #6]
 801515a:	2b09      	cmp	r3, #9
 801515c:	d809      	bhi.n	8015172 <dhcp_renew+0xfe>
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	799b      	ldrb	r3, [r3, #6]
 8015162:	461a      	mov	r2, r3
 8015164:	0152      	lsls	r2, r2, #5
 8015166:	1ad2      	subs	r2, r2, r3
 8015168:	0092      	lsls	r2, r2, #2
 801516a:	4413      	add	r3, r2
 801516c:	011b      	lsls	r3, r3, #4
 801516e:	b29b      	uxth	r3, r3
 8015170:	e001      	b.n	8015176 <dhcp_renew+0x102>
 8015172:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8015176:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015178:	89fb      	ldrh	r3, [r7, #14]
 801517a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801517e:	4a09      	ldr	r2, [pc, #36]	@ (80151a4 <dhcp_renew+0x130>)
 8015180:	fb82 1203 	smull	r1, r2, r2, r3
 8015184:	1152      	asrs	r2, r2, #5
 8015186:	17db      	asrs	r3, r3, #31
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	b29a      	uxth	r2, r3
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015190:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015194:	4618      	mov	r0, r3
 8015196:	3720      	adds	r7, #32
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	20000034 	.word	0x20000034
 80151a0:	20008da4 	.word	0x20008da4
 80151a4:	10624dd3 	.word	0x10624dd3

080151a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b08a      	sub	sp, #40	@ 0x28
 80151ac:	af02      	add	r7, sp, #8
 80151ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80151b6:	2104      	movs	r1, #4
 80151b8:	69b8      	ldr	r0, [r7, #24]
 80151ba:	f000 f9dd 	bl	8015578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80151be:	f107 030c 	add.w	r3, r7, #12
 80151c2:	2203      	movs	r2, #3
 80151c4:	69b9      	ldr	r1, [r7, #24]
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 fe62 	bl	8015e90 <dhcp_create_msg>
 80151cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d04c      	beq.n	801526e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151da:	89b8      	ldrh	r0, [r7, #12]
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80151e2:	2302      	movs	r3, #2
 80151e4:	2239      	movs	r2, #57	@ 0x39
 80151e6:	f000 f9e1 	bl	80155ac <dhcp_option>
 80151ea:	4603      	mov	r3, r0
 80151ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80151ee:	89b8      	ldrh	r0, [r7, #12]
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80151fa:	461a      	mov	r2, r3
 80151fc:	f000 fa30 	bl	8015660 <dhcp_option_short>
 8015200:	4603      	mov	r3, r0
 8015202:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015204:	89b8      	ldrh	r0, [r7, #12]
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801520c:	2303      	movs	r3, #3
 801520e:	2237      	movs	r2, #55	@ 0x37
 8015210:	f000 f9cc 	bl	80155ac <dhcp_option>
 8015214:	4603      	mov	r3, r0
 8015216:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015218:	2300      	movs	r3, #0
 801521a:	77bb      	strb	r3, [r7, #30]
 801521c:	e00e      	b.n	801523c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801521e:	89b8      	ldrh	r0, [r7, #12]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015226:	7fbb      	ldrb	r3, [r7, #30]
 8015228:	4a28      	ldr	r2, [pc, #160]	@ (80152cc <dhcp_rebind+0x124>)
 801522a:	5cd3      	ldrb	r3, [r2, r3]
 801522c:	461a      	mov	r2, r3
 801522e:	f000 f9f1 	bl	8015614 <dhcp_option_byte>
 8015232:	4603      	mov	r3, r0
 8015234:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015236:	7fbb      	ldrb	r3, [r7, #30]
 8015238:	3301      	adds	r3, #1
 801523a:	77bb      	strb	r3, [r7, #30]
 801523c:	7fbb      	ldrb	r3, [r7, #30]
 801523e:	2b02      	cmp	r3, #2
 8015240:	d9ed      	bls.n	801521e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015242:	89b8      	ldrh	r0, [r7, #12]
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	33f0      	adds	r3, #240	@ 0xf0
 8015248:	697a      	ldr	r2, [r7, #20]
 801524a:	4619      	mov	r1, r3
 801524c:	f000 fef6 	bl	801603c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015250:	4b1f      	ldr	r3, [pc, #124]	@ (80152d0 <dhcp_rebind+0x128>)
 8015252:	6818      	ldr	r0, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	9300      	str	r3, [sp, #0]
 8015258:	2343      	movs	r3, #67	@ 0x43
 801525a:	4a1e      	ldr	r2, [pc, #120]	@ (80152d4 <dhcp_rebind+0x12c>)
 801525c:	6979      	ldr	r1, [r7, #20]
 801525e:	f00c fc49 	bl	8021af4 <udp_sendto_if>
 8015262:	4603      	mov	r3, r0
 8015264:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015266:	6978      	ldr	r0, [r7, #20]
 8015268:	f005 fc8c 	bl	801ab84 <pbuf_free>
 801526c:	e001      	b.n	8015272 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801526e:	23ff      	movs	r3, #255	@ 0xff
 8015270:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015272:	69bb      	ldr	r3, [r7, #24]
 8015274:	799b      	ldrb	r3, [r3, #6]
 8015276:	2bff      	cmp	r3, #255	@ 0xff
 8015278:	d005      	beq.n	8015286 <dhcp_rebind+0xde>
    dhcp->tries++;
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	799b      	ldrb	r3, [r3, #6]
 801527e:	3301      	adds	r3, #1
 8015280:	b2da      	uxtb	r2, r3
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	799b      	ldrb	r3, [r3, #6]
 801528a:	2b09      	cmp	r3, #9
 801528c:	d809      	bhi.n	80152a2 <dhcp_rebind+0xfa>
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	799b      	ldrb	r3, [r3, #6]
 8015292:	461a      	mov	r2, r3
 8015294:	0152      	lsls	r2, r2, #5
 8015296:	1ad2      	subs	r2, r2, r3
 8015298:	0092      	lsls	r2, r2, #2
 801529a:	4413      	add	r3, r2
 801529c:	00db      	lsls	r3, r3, #3
 801529e:	b29b      	uxth	r3, r3
 80152a0:	e001      	b.n	80152a6 <dhcp_rebind+0xfe>
 80152a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80152a6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152a8:	89fb      	ldrh	r3, [r7, #14]
 80152aa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80152ae:	4a0a      	ldr	r2, [pc, #40]	@ (80152d8 <dhcp_rebind+0x130>)
 80152b0:	fb82 1203 	smull	r1, r2, r2, r3
 80152b4:	1152      	asrs	r2, r2, #5
 80152b6:	17db      	asrs	r3, r3, #31
 80152b8:	1ad3      	subs	r3, r2, r3
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	69bb      	ldr	r3, [r7, #24]
 80152be:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80152c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3720      	adds	r7, #32
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	20000034 	.word	0x20000034
 80152d0:	20008da4 	.word	0x20008da4
 80152d4:	08028c1c 	.word	0x08028c1c
 80152d8:	10624dd3 	.word	0x10624dd3

080152dc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80152dc:	b5b0      	push	{r4, r5, r7, lr}
 80152de:	b08a      	sub	sp, #40	@ 0x28
 80152e0:	af02      	add	r7, sp, #8
 80152e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80152ea:	2103      	movs	r1, #3
 80152ec:	69b8      	ldr	r0, [r7, #24]
 80152ee:	f000 f943 	bl	8015578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80152f2:	f107 030c 	add.w	r3, r7, #12
 80152f6:	2203      	movs	r2, #3
 80152f8:	69b9      	ldr	r1, [r7, #24]
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 fdc8 	bl	8015e90 <dhcp_create_msg>
 8015300:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d066      	beq.n	80153d6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801530e:	89b8      	ldrh	r0, [r7, #12]
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015316:	2302      	movs	r3, #2
 8015318:	2239      	movs	r2, #57	@ 0x39
 801531a:	f000 f947 	bl	80155ac <dhcp_option>
 801531e:	4603      	mov	r3, r0
 8015320:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015322:	89b8      	ldrh	r0, [r7, #12]
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	33f0      	adds	r3, #240	@ 0xf0
 8015328:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801532c:	4619      	mov	r1, r3
 801532e:	f000 f997 	bl	8015660 <dhcp_option_short>
 8015332:	4603      	mov	r3, r0
 8015334:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015336:	89b8      	ldrh	r0, [r7, #12]
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801533e:	2304      	movs	r3, #4
 8015340:	2232      	movs	r2, #50	@ 0x32
 8015342:	f000 f933 	bl	80155ac <dhcp_option>
 8015346:	4603      	mov	r3, r0
 8015348:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801534a:	89bc      	ldrh	r4, [r7, #12]
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	69db      	ldr	r3, [r3, #28]
 8015356:	4618      	mov	r0, r3
 8015358:	f003 ff77 	bl	801924a <lwip_htonl>
 801535c:	4603      	mov	r3, r0
 801535e:	461a      	mov	r2, r3
 8015360:	4629      	mov	r1, r5
 8015362:	4620      	mov	r0, r4
 8015364:	f000 f9ae 	bl	80156c4 <dhcp_option_long>
 8015368:	4603      	mov	r3, r0
 801536a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801536c:	89b8      	ldrh	r0, [r7, #12]
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015374:	2303      	movs	r3, #3
 8015376:	2237      	movs	r2, #55	@ 0x37
 8015378:	f000 f918 	bl	80155ac <dhcp_option>
 801537c:	4603      	mov	r3, r0
 801537e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015380:	2300      	movs	r3, #0
 8015382:	77bb      	strb	r3, [r7, #30]
 8015384:	e00e      	b.n	80153a4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015386:	89b8      	ldrh	r0, [r7, #12]
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801538e:	7fbb      	ldrb	r3, [r7, #30]
 8015390:	4a28      	ldr	r2, [pc, #160]	@ (8015434 <dhcp_reboot+0x158>)
 8015392:	5cd3      	ldrb	r3, [r2, r3]
 8015394:	461a      	mov	r2, r3
 8015396:	f000 f93d 	bl	8015614 <dhcp_option_byte>
 801539a:	4603      	mov	r3, r0
 801539c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801539e:	7fbb      	ldrb	r3, [r7, #30]
 80153a0:	3301      	adds	r3, #1
 80153a2:	77bb      	strb	r3, [r7, #30]
 80153a4:	7fbb      	ldrb	r3, [r7, #30]
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d9ed      	bls.n	8015386 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153aa:	89b8      	ldrh	r0, [r7, #12]
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	33f0      	adds	r3, #240	@ 0xf0
 80153b0:	697a      	ldr	r2, [r7, #20]
 80153b2:	4619      	mov	r1, r3
 80153b4:	f000 fe42 	bl	801603c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80153b8:	4b1f      	ldr	r3, [pc, #124]	@ (8015438 <dhcp_reboot+0x15c>)
 80153ba:	6818      	ldr	r0, [r3, #0]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	2343      	movs	r3, #67	@ 0x43
 80153c2:	4a1e      	ldr	r2, [pc, #120]	@ (801543c <dhcp_reboot+0x160>)
 80153c4:	6979      	ldr	r1, [r7, #20]
 80153c6:	f00c fb95 	bl	8021af4 <udp_sendto_if>
 80153ca:	4603      	mov	r3, r0
 80153cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80153ce:	6978      	ldr	r0, [r7, #20]
 80153d0:	f005 fbd8 	bl	801ab84 <pbuf_free>
 80153d4:	e001      	b.n	80153da <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80153d6:	23ff      	movs	r3, #255	@ 0xff
 80153d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	799b      	ldrb	r3, [r3, #6]
 80153de:	2bff      	cmp	r3, #255	@ 0xff
 80153e0:	d005      	beq.n	80153ee <dhcp_reboot+0x112>
    dhcp->tries++;
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	799b      	ldrb	r3, [r3, #6]
 80153e6:	3301      	adds	r3, #1
 80153e8:	b2da      	uxtb	r2, r3
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	799b      	ldrb	r3, [r3, #6]
 80153f2:	2b09      	cmp	r3, #9
 80153f4:	d809      	bhi.n	801540a <dhcp_reboot+0x12e>
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	799b      	ldrb	r3, [r3, #6]
 80153fa:	461a      	mov	r2, r3
 80153fc:	0152      	lsls	r2, r2, #5
 80153fe:	1ad2      	subs	r2, r2, r3
 8015400:	0092      	lsls	r2, r2, #2
 8015402:	4413      	add	r3, r2
 8015404:	00db      	lsls	r3, r3, #3
 8015406:	b29b      	uxth	r3, r3
 8015408:	e001      	b.n	801540e <dhcp_reboot+0x132>
 801540a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801540e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015410:	89fb      	ldrh	r3, [r7, #14]
 8015412:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015416:	4a0a      	ldr	r2, [pc, #40]	@ (8015440 <dhcp_reboot+0x164>)
 8015418:	fb82 1203 	smull	r1, r2, r2, r3
 801541c:	1152      	asrs	r2, r2, #5
 801541e:	17db      	asrs	r3, r3, #31
 8015420:	1ad3      	subs	r3, r2, r3
 8015422:	b29a      	uxth	r2, r3
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015428:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3720      	adds	r7, #32
 8015430:	46bd      	mov	sp, r7
 8015432:	bdb0      	pop	{r4, r5, r7, pc}
 8015434:	20000034 	.word	0x20000034
 8015438:	20008da4 	.word	0x20008da4
 801543c:	08028c1c 	.word	0x08028c1c
 8015440:	10624dd3 	.word	0x10624dd3

08015444 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015444:	b5b0      	push	{r4, r5, r7, lr}
 8015446:	b08a      	sub	sp, #40	@ 0x28
 8015448:	af02      	add	r7, sp, #8
 801544a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015450:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015452:	69fb      	ldr	r3, [r7, #28]
 8015454:	2b00      	cmp	r3, #0
 8015456:	f000 8084 	beq.w	8015562 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	795b      	ldrb	r3, [r3, #5]
 801545e:	2b00      	cmp	r3, #0
 8015460:	f000 8081 	beq.w	8015566 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	699b      	ldr	r3, [r3, #24]
 8015468:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	2200      	movs	r2, #0
 801546e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	2200      	movs	r2, #0
 8015474:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015476:	69fb      	ldr	r3, [r7, #28]
 8015478:	2200      	movs	r2, #0
 801547a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	2200      	movs	r2, #0
 8015480:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	2200      	movs	r2, #0
 8015486:	631a      	str	r2, [r3, #48]	@ 0x30
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	2200      	movs	r2, #0
 801549c:	829a      	strh	r2, [r3, #20]
 801549e:	69fb      	ldr	r3, [r7, #28]
 80154a0:	8a9a      	ldrh	r2, [r3, #20]
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	825a      	strh	r2, [r3, #18]
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	8a5a      	ldrh	r2, [r3, #18]
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	821a      	strh	r2, [r3, #16]
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	8a1a      	ldrh	r2, [r3, #16]
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 fdee 	bl	8016098 <dhcp_supplied_address>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d03b      	beq.n	801553a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80154c2:	f107 030e 	add.w	r3, r7, #14
 80154c6:	2207      	movs	r2, #7
 80154c8:	69f9      	ldr	r1, [r7, #28]
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fce0 	bl	8015e90 <dhcp_create_msg>
 80154d0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d030      	beq.n	801553a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80154de:	89f8      	ldrh	r0, [r7, #14]
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80154e6:	2304      	movs	r3, #4
 80154e8:	2236      	movs	r2, #54	@ 0x36
 80154ea:	f000 f85f 	bl	80155ac <dhcp_option>
 80154ee:	4603      	mov	r3, r0
 80154f0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80154f2:	89fc      	ldrh	r4, [r7, #14]
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f003 fea4 	bl	801924a <lwip_htonl>
 8015502:	4603      	mov	r3, r0
 8015504:	461a      	mov	r2, r3
 8015506:	4629      	mov	r1, r5
 8015508:	4620      	mov	r0, r4
 801550a:	f000 f8db 	bl	80156c4 <dhcp_option_long>
 801550e:	4603      	mov	r3, r0
 8015510:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015512:	89f8      	ldrh	r0, [r7, #14]
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	33f0      	adds	r3, #240	@ 0xf0
 8015518:	69ba      	ldr	r2, [r7, #24]
 801551a:	4619      	mov	r1, r3
 801551c:	f000 fd8e 	bl	801603c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015520:	4b13      	ldr	r3, [pc, #76]	@ (8015570 <dhcp_release_and_stop+0x12c>)
 8015522:	6818      	ldr	r0, [r3, #0]
 8015524:	f107 0210 	add.w	r2, r7, #16
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	2343      	movs	r3, #67	@ 0x43
 801552e:	69b9      	ldr	r1, [r7, #24]
 8015530:	f00c fae0 	bl	8021af4 <udp_sendto_if>
      pbuf_free(p_out);
 8015534:	69b8      	ldr	r0, [r7, #24]
 8015536:	f005 fb25 	bl	801ab84 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801553a:	4b0e      	ldr	r3, [pc, #56]	@ (8015574 <dhcp_release_and_stop+0x130>)
 801553c:	4a0d      	ldr	r2, [pc, #52]	@ (8015574 <dhcp_release_and_stop+0x130>)
 801553e:	490d      	ldr	r1, [pc, #52]	@ (8015574 <dhcp_release_and_stop+0x130>)
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f004 fdd5 	bl	801a0f0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015546:	2100      	movs	r1, #0
 8015548:	69f8      	ldr	r0, [r7, #28]
 801554a:	f000 f815 	bl	8015578 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	791b      	ldrb	r3, [r3, #4]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d008      	beq.n	8015568 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015556:	f7fe ff89 	bl	801446c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	2200      	movs	r2, #0
 801555e:	711a      	strb	r2, [r3, #4]
 8015560:	e002      	b.n	8015568 <dhcp_release_and_stop+0x124>
    return;
 8015562:	bf00      	nop
 8015564:	e000      	b.n	8015568 <dhcp_release_and_stop+0x124>
    return;
 8015566:	bf00      	nop
  }
}
 8015568:	3720      	adds	r7, #32
 801556a:	46bd      	mov	sp, r7
 801556c:	bdb0      	pop	{r4, r5, r7, pc}
 801556e:	bf00      	nop
 8015570:	20008da4 	.word	0x20008da4
 8015574:	08028c18 	.word	0x08028c18

08015578 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	460b      	mov	r3, r1
 8015582:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	795b      	ldrb	r3, [r3, #5]
 8015588:	78fa      	ldrb	r2, [r7, #3]
 801558a:	429a      	cmp	r2, r3
 801558c:	d008      	beq.n	80155a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	78fa      	ldrb	r2, [r7, #3]
 8015592:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2200      	movs	r2, #0
 8015598:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2200      	movs	r2, #0
 801559e:	811a      	strh	r2, [r3, #8]
  }
}
 80155a0:	bf00      	nop
 80155a2:	370c      	adds	r7, #12
 80155a4:	46bd      	mov	sp, r7
 80155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155aa:	4770      	bx	lr

080155ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6039      	str	r1, [r7, #0]
 80155b4:	4611      	mov	r1, r2
 80155b6:	461a      	mov	r2, r3
 80155b8:	4603      	mov	r3, r0
 80155ba:	80fb      	strh	r3, [r7, #6]
 80155bc:	460b      	mov	r3, r1
 80155be:	717b      	strb	r3, [r7, #5]
 80155c0:	4613      	mov	r3, r2
 80155c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80155c4:	88fa      	ldrh	r2, [r7, #6]
 80155c6:	793b      	ldrb	r3, [r7, #4]
 80155c8:	4413      	add	r3, r2
 80155ca:	3302      	adds	r3, #2
 80155cc:	2b44      	cmp	r3, #68	@ 0x44
 80155ce:	d906      	bls.n	80155de <dhcp_option+0x32>
 80155d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015608 <dhcp_option+0x5c>)
 80155d2:	f240 529a 	movw	r2, #1434	@ 0x59a
 80155d6:	490d      	ldr	r1, [pc, #52]	@ (801560c <dhcp_option+0x60>)
 80155d8:	480d      	ldr	r0, [pc, #52]	@ (8015610 <dhcp_option+0x64>)
 80155da:	f00d f9ad 	bl	8022938 <iprintf>
  options[options_out_len++] = option_type;
 80155de:	88fb      	ldrh	r3, [r7, #6]
 80155e0:	1c5a      	adds	r2, r3, #1
 80155e2:	80fa      	strh	r2, [r7, #6]
 80155e4:	461a      	mov	r2, r3
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	4413      	add	r3, r2
 80155ea:	797a      	ldrb	r2, [r7, #5]
 80155ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80155ee:	88fb      	ldrh	r3, [r7, #6]
 80155f0:	1c5a      	adds	r2, r3, #1
 80155f2:	80fa      	strh	r2, [r7, #6]
 80155f4:	461a      	mov	r2, r3
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	4413      	add	r3, r2
 80155fa:	793a      	ldrb	r2, [r7, #4]
 80155fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80155fe:	88fb      	ldrh	r3, [r7, #6]
}
 8015600:	4618      	mov	r0, r3
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	08024fd0 	.word	0x08024fd0
 801560c:	080251a4 	.word	0x080251a4
 8015610:	08025070 	.word	0x08025070

08015614 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	4603      	mov	r3, r0
 801561c:	6039      	str	r1, [r7, #0]
 801561e:	80fb      	strh	r3, [r7, #6]
 8015620:	4613      	mov	r3, r2
 8015622:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015624:	88fb      	ldrh	r3, [r7, #6]
 8015626:	2b43      	cmp	r3, #67	@ 0x43
 8015628:	d906      	bls.n	8015638 <dhcp_option_byte+0x24>
 801562a:	4b0a      	ldr	r3, [pc, #40]	@ (8015654 <dhcp_option_byte+0x40>)
 801562c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8015630:	4909      	ldr	r1, [pc, #36]	@ (8015658 <dhcp_option_byte+0x44>)
 8015632:	480a      	ldr	r0, [pc, #40]	@ (801565c <dhcp_option_byte+0x48>)
 8015634:	f00d f980 	bl	8022938 <iprintf>
  options[options_out_len++] = value;
 8015638:	88fb      	ldrh	r3, [r7, #6]
 801563a:	1c5a      	adds	r2, r3, #1
 801563c:	80fa      	strh	r2, [r7, #6]
 801563e:	461a      	mov	r2, r3
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	4413      	add	r3, r2
 8015644:	797a      	ldrb	r2, [r7, #5]
 8015646:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015648:	88fb      	ldrh	r3, [r7, #6]
}
 801564a:	4618      	mov	r0, r3
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	08024fd0 	.word	0x08024fd0
 8015658:	080251e8 	.word	0x080251e8
 801565c:	08025070 	.word	0x08025070

08015660 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	4603      	mov	r3, r0
 8015668:	6039      	str	r1, [r7, #0]
 801566a:	80fb      	strh	r3, [r7, #6]
 801566c:	4613      	mov	r3, r2
 801566e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015670:	88fb      	ldrh	r3, [r7, #6]
 8015672:	3302      	adds	r3, #2
 8015674:	2b44      	cmp	r3, #68	@ 0x44
 8015676:	d906      	bls.n	8015686 <dhcp_option_short+0x26>
 8015678:	4b0f      	ldr	r3, [pc, #60]	@ (80156b8 <dhcp_option_short+0x58>)
 801567a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801567e:	490f      	ldr	r1, [pc, #60]	@ (80156bc <dhcp_option_short+0x5c>)
 8015680:	480f      	ldr	r0, [pc, #60]	@ (80156c0 <dhcp_option_short+0x60>)
 8015682:	f00d f959 	bl	8022938 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015686:	88bb      	ldrh	r3, [r7, #4]
 8015688:	0a1b      	lsrs	r3, r3, #8
 801568a:	b29a      	uxth	r2, r3
 801568c:	88fb      	ldrh	r3, [r7, #6]
 801568e:	1c59      	adds	r1, r3, #1
 8015690:	80f9      	strh	r1, [r7, #6]
 8015692:	4619      	mov	r1, r3
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	440b      	add	r3, r1
 8015698:	b2d2      	uxtb	r2, r2
 801569a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801569c:	88fb      	ldrh	r3, [r7, #6]
 801569e:	1c5a      	adds	r2, r3, #1
 80156a0:	80fa      	strh	r2, [r7, #6]
 80156a2:	461a      	mov	r2, r3
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	4413      	add	r3, r2
 80156a8:	88ba      	ldrh	r2, [r7, #4]
 80156aa:	b2d2      	uxtb	r2, r2
 80156ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80156ae:	88fb      	ldrh	r3, [r7, #6]
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	08024fd0 	.word	0x08024fd0
 80156bc:	08025220 	.word	0x08025220
 80156c0:	08025070 	.word	0x08025070

080156c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b084      	sub	sp, #16
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	4603      	mov	r3, r0
 80156cc:	60b9      	str	r1, [r7, #8]
 80156ce:	607a      	str	r2, [r7, #4]
 80156d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80156d2:	89fb      	ldrh	r3, [r7, #14]
 80156d4:	3304      	adds	r3, #4
 80156d6:	2b44      	cmp	r3, #68	@ 0x44
 80156d8:	d906      	bls.n	80156e8 <dhcp_option_long+0x24>
 80156da:	4b19      	ldr	r3, [pc, #100]	@ (8015740 <dhcp_option_long+0x7c>)
 80156dc:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80156e0:	4918      	ldr	r1, [pc, #96]	@ (8015744 <dhcp_option_long+0x80>)
 80156e2:	4819      	ldr	r0, [pc, #100]	@ (8015748 <dhcp_option_long+0x84>)
 80156e4:	f00d f928 	bl	8022938 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	0e1a      	lsrs	r2, r3, #24
 80156ec:	89fb      	ldrh	r3, [r7, #14]
 80156ee:	1c59      	adds	r1, r3, #1
 80156f0:	81f9      	strh	r1, [r7, #14]
 80156f2:	4619      	mov	r1, r3
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	440b      	add	r3, r1
 80156f8:	b2d2      	uxtb	r2, r2
 80156fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	0c1a      	lsrs	r2, r3, #16
 8015700:	89fb      	ldrh	r3, [r7, #14]
 8015702:	1c59      	adds	r1, r3, #1
 8015704:	81f9      	strh	r1, [r7, #14]
 8015706:	4619      	mov	r1, r3
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	440b      	add	r3, r1
 801570c:	b2d2      	uxtb	r2, r2
 801570e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	0a1a      	lsrs	r2, r3, #8
 8015714:	89fb      	ldrh	r3, [r7, #14]
 8015716:	1c59      	adds	r1, r3, #1
 8015718:	81f9      	strh	r1, [r7, #14]
 801571a:	4619      	mov	r1, r3
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	440b      	add	r3, r1
 8015720:	b2d2      	uxtb	r2, r2
 8015722:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015724:	89fb      	ldrh	r3, [r7, #14]
 8015726:	1c5a      	adds	r2, r3, #1
 8015728:	81fa      	strh	r2, [r7, #14]
 801572a:	461a      	mov	r2, r3
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	4413      	add	r3, r2
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	b2d2      	uxtb	r2, r2
 8015734:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015736:	89fb      	ldrh	r3, [r7, #14]
}
 8015738:	4618      	mov	r0, r3
 801573a:	3710      	adds	r7, #16
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	08024fd0 	.word	0x08024fd0
 8015744:	0802525c 	.word	0x0802525c
 8015748:	08025070 	.word	0x08025070

0801574c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b090      	sub	sp, #64	@ 0x40
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801575a:	2300      	movs	r3, #0
 801575c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801575e:	2208      	movs	r2, #8
 8015760:	2100      	movs	r1, #0
 8015762:	48b5      	ldr	r0, [pc, #724]	@ (8015a38 <dhcp_parse_reply+0x2ec>)
 8015764:	f00d fa7a 	bl	8022c5c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	895b      	ldrh	r3, [r3, #10]
 801576c:	2b2b      	cmp	r3, #43	@ 0x2b
 801576e:	d802      	bhi.n	8015776 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015770:	f06f 0301 	mvn.w	r3, #1
 8015774:	e2a7      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801577c:	23f0      	movs	r3, #240	@ 0xf0
 801577e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	891b      	ldrh	r3, [r3, #8]
 8015784:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801578a:	e00c      	b.n	80157a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578e:	895b      	ldrh	r3, [r3, #10]
 8015790:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015798:	895b      	ldrh	r3, [r3, #10]
 801579a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80157a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80157a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d004      	beq.n	80157b6 <dhcp_parse_reply+0x6a>
 80157ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ae:	895b      	ldrh	r3, [r3, #10]
 80157b0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d2ea      	bcs.n	801578c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80157b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d102      	bne.n	80157c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80157bc:	f06f 0301 	mvn.w	r3, #1
 80157c0:	e281      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80157c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80157c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80157c8:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80157ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80157d0:	e239      	b.n	8015c46 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80157d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80157d6:	4413      	add	r3, r2
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80157dc:	2300      	movs	r3, #0
 80157de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80157e2:	f04f 33ff 	mov.w	r3, #4294967295
 80157e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80157e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157ea:	3302      	adds	r3, #2
 80157ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80157ee:	8bfa      	ldrh	r2, [r7, #30]
 80157f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d202      	bcs.n	80157fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80157f6:	f06f 0301 	mvn.w	r3, #1
 80157fa:	e264      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80157fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157fe:	3301      	adds	r3, #1
 8015800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015802:	8952      	ldrh	r2, [r2, #10]
 8015804:	4293      	cmp	r3, r2
 8015806:	da07      	bge.n	8015818 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015808:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801580a:	3301      	adds	r3, #1
 801580c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801580e:	4413      	add	r3, r2
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015816:	e00b      	b.n	8015830 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d004      	beq.n	801582a <dhcp_parse_reply+0xde>
 8015820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	e000      	b.n	801582c <dhcp_parse_reply+0xe0>
 801582a:	2300      	movs	r3, #0
 801582c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8015838:	7dfb      	ldrb	r3, [r7, #23]
 801583a:	2b3b      	cmp	r3, #59	@ 0x3b
 801583c:	f200 812c 	bhi.w	8015a98 <dhcp_parse_reply+0x34c>
 8015840:	a201      	add	r2, pc, #4	@ (adr r2, 8015848 <dhcp_parse_reply+0xfc>)
 8015842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015846:	bf00      	nop
 8015848:	08015939 	.word	0x08015939
 801584c:	08015949 	.word	0x08015949
 8015850:	08015a99 	.word	0x08015a99
 8015854:	0801596b 	.word	0x0801596b
 8015858:	08015a99 	.word	0x08015a99
 801585c:	08015a99 	.word	0x08015a99
 8015860:	08015a99 	.word	0x08015a99
 8015864:	08015a99 	.word	0x08015a99
 8015868:	08015a99 	.word	0x08015a99
 801586c:	08015a99 	.word	0x08015a99
 8015870:	08015a99 	.word	0x08015a99
 8015874:	08015a99 	.word	0x08015a99
 8015878:	08015a99 	.word	0x08015a99
 801587c:	08015a99 	.word	0x08015a99
 8015880:	08015a99 	.word	0x08015a99
 8015884:	08015a99 	.word	0x08015a99
 8015888:	08015a99 	.word	0x08015a99
 801588c:	08015a99 	.word	0x08015a99
 8015890:	08015a99 	.word	0x08015a99
 8015894:	08015a99 	.word	0x08015a99
 8015898:	08015a99 	.word	0x08015a99
 801589c:	08015a99 	.word	0x08015a99
 80158a0:	08015a99 	.word	0x08015a99
 80158a4:	08015a99 	.word	0x08015a99
 80158a8:	08015a99 	.word	0x08015a99
 80158ac:	08015a99 	.word	0x08015a99
 80158b0:	08015a99 	.word	0x08015a99
 80158b4:	08015a99 	.word	0x08015a99
 80158b8:	08015a99 	.word	0x08015a99
 80158bc:	08015a99 	.word	0x08015a99
 80158c0:	08015a99 	.word	0x08015a99
 80158c4:	08015a99 	.word	0x08015a99
 80158c8:	08015a99 	.word	0x08015a99
 80158cc:	08015a99 	.word	0x08015a99
 80158d0:	08015a99 	.word	0x08015a99
 80158d4:	08015a99 	.word	0x08015a99
 80158d8:	08015a99 	.word	0x08015a99
 80158dc:	08015a99 	.word	0x08015a99
 80158e0:	08015a99 	.word	0x08015a99
 80158e4:	08015a99 	.word	0x08015a99
 80158e8:	08015a99 	.word	0x08015a99
 80158ec:	08015a99 	.word	0x08015a99
 80158f0:	08015a99 	.word	0x08015a99
 80158f4:	08015a99 	.word	0x08015a99
 80158f8:	08015a99 	.word	0x08015a99
 80158fc:	08015a99 	.word	0x08015a99
 8015900:	08015a99 	.word	0x08015a99
 8015904:	08015a99 	.word	0x08015a99
 8015908:	08015a99 	.word	0x08015a99
 801590c:	08015a99 	.word	0x08015a99
 8015910:	08015a99 	.word	0x08015a99
 8015914:	08015997 	.word	0x08015997
 8015918:	080159b9 	.word	0x080159b9
 801591c:	080159f5 	.word	0x080159f5
 8015920:	08015a17 	.word	0x08015a17
 8015924:	08015a99 	.word	0x08015a99
 8015928:	08015a99 	.word	0x08015a99
 801592c:	08015a99 	.word	0x08015a99
 8015930:	08015a55 	.word	0x08015a55
 8015934:	08015a77 	.word	0x08015a77
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015938:	2300      	movs	r3, #0
 801593a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801593e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015942:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015946:	e0ab      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801594c:	2b04      	cmp	r3, #4
 801594e:	d009      	beq.n	8015964 <dhcp_parse_reply+0x218>
 8015950:	4b3a      	ldr	r3, [pc, #232]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 8015952:	f240 622e 	movw	r2, #1582	@ 0x62e
 8015956:	493a      	ldr	r1, [pc, #232]	@ (8015a40 <dhcp_parse_reply+0x2f4>)
 8015958:	483a      	ldr	r0, [pc, #232]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 801595a:	f00c ffed 	bl	8022938 <iprintf>
 801595e:	f06f 0305 	mvn.w	r3, #5
 8015962:	e1b0      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015964:	2306      	movs	r3, #6
 8015966:	623b      	str	r3, [r7, #32]
        break;
 8015968:	e09a      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801596a:	2304      	movs	r3, #4
 801596c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015970:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015978:	429a      	cmp	r2, r3
 801597a:	d209      	bcs.n	8015990 <dhcp_parse_reply+0x244>
 801597c:	4b2f      	ldr	r3, [pc, #188]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 801597e:	f240 6233 	movw	r2, #1587	@ 0x633
 8015982:	4931      	ldr	r1, [pc, #196]	@ (8015a48 <dhcp_parse_reply+0x2fc>)
 8015984:	482f      	ldr	r0, [pc, #188]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 8015986:	f00c ffd7 	bl	8022938 <iprintf>
 801598a:	f06f 0305 	mvn.w	r3, #5
 801598e:	e19a      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015990:	2307      	movs	r3, #7
 8015992:	623b      	str	r3, [r7, #32]
        break;
 8015994:	e084      	b.n	8015aa0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801599a:	2b04      	cmp	r3, #4
 801599c:	d009      	beq.n	80159b2 <dhcp_parse_reply+0x266>
 801599e:	4b27      	ldr	r3, [pc, #156]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 80159a0:	f240 6241 	movw	r2, #1601	@ 0x641
 80159a4:	4926      	ldr	r1, [pc, #152]	@ (8015a40 <dhcp_parse_reply+0x2f4>)
 80159a6:	4827      	ldr	r0, [pc, #156]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 80159a8:	f00c ffc6 	bl	8022938 <iprintf>
 80159ac:	f06f 0305 	mvn.w	r3, #5
 80159b0:	e189      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80159b2:	2303      	movs	r3, #3
 80159b4:	623b      	str	r3, [r7, #32]
        break;
 80159b6:	e073      	b.n	8015aa0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80159b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d009      	beq.n	80159d4 <dhcp_parse_reply+0x288>
 80159c0:	4b1e      	ldr	r3, [pc, #120]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 80159c2:	f240 624f 	movw	r2, #1615	@ 0x64f
 80159c6:	4921      	ldr	r1, [pc, #132]	@ (8015a4c <dhcp_parse_reply+0x300>)
 80159c8:	481e      	ldr	r0, [pc, #120]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 80159ca:	f00c ffb5 	bl	8022938 <iprintf>
 80159ce:	f06f 0305 	mvn.w	r3, #5
 80159d2:	e178      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80159d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80159d6:	2bf0      	cmp	r3, #240	@ 0xf0
 80159d8:	d009      	beq.n	80159ee <dhcp_parse_reply+0x2a2>
 80159da:	4b18      	ldr	r3, [pc, #96]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 80159dc:	f240 6251 	movw	r2, #1617	@ 0x651
 80159e0:	491b      	ldr	r1, [pc, #108]	@ (8015a50 <dhcp_parse_reply+0x304>)
 80159e2:	4818      	ldr	r0, [pc, #96]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 80159e4:	f00c ffa8 	bl	8022938 <iprintf>
 80159e8:	f06f 0305 	mvn.w	r3, #5
 80159ec:	e16b      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80159ee:	2300      	movs	r3, #0
 80159f0:	623b      	str	r3, [r7, #32]
        break;
 80159f2:	e055      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80159f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d009      	beq.n	8015a10 <dhcp_parse_reply+0x2c4>
 80159fc:	4b0f      	ldr	r3, [pc, #60]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 80159fe:	f240 6255 	movw	r2, #1621	@ 0x655
 8015a02:	4912      	ldr	r1, [pc, #72]	@ (8015a4c <dhcp_parse_reply+0x300>)
 8015a04:	480f      	ldr	r0, [pc, #60]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 8015a06:	f00c ff97 	bl	8022938 <iprintf>
 8015a0a:	f06f 0305 	mvn.w	r3, #5
 8015a0e:	e15a      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015a10:	2301      	movs	r3, #1
 8015a12:	623b      	str	r3, [r7, #32]
        break;
 8015a14:	e044      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a1a:	2b04      	cmp	r3, #4
 8015a1c:	d009      	beq.n	8015a32 <dhcp_parse_reply+0x2e6>
 8015a1e:	4b07      	ldr	r3, [pc, #28]	@ (8015a3c <dhcp_parse_reply+0x2f0>)
 8015a20:	f240 6259 	movw	r2, #1625	@ 0x659
 8015a24:	4906      	ldr	r1, [pc, #24]	@ (8015a40 <dhcp_parse_reply+0x2f4>)
 8015a26:	4807      	ldr	r0, [pc, #28]	@ (8015a44 <dhcp_parse_reply+0x2f8>)
 8015a28:	f00c ff86 	bl	8022938 <iprintf>
 8015a2c:	f06f 0305 	mvn.w	r3, #5
 8015a30:	e149      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015a32:	2302      	movs	r3, #2
 8015a34:	623b      	str	r3, [r7, #32]
        break;
 8015a36:	e033      	b.n	8015aa0 <dhcp_parse_reply+0x354>
 8015a38:	20008d9c 	.word	0x20008d9c
 8015a3c:	08024fd0 	.word	0x08024fd0
 8015a40:	08025298 	.word	0x08025298
 8015a44:	08025070 	.word	0x08025070
 8015a48:	080252a4 	.word	0x080252a4
 8015a4c:	080252b8 	.word	0x080252b8
 8015a50:	080252c4 	.word	0x080252c4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a58:	2b04      	cmp	r3, #4
 8015a5a:	d009      	beq.n	8015a70 <dhcp_parse_reply+0x324>
 8015a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015a5e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8015a62:	499c      	ldr	r1, [pc, #624]	@ (8015cd4 <dhcp_parse_reply+0x588>)
 8015a64:	489c      	ldr	r0, [pc, #624]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015a66:	f00c ff67 	bl	8022938 <iprintf>
 8015a6a:	f06f 0305 	mvn.w	r3, #5
 8015a6e:	e12a      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015a70:	2304      	movs	r3, #4
 8015a72:	623b      	str	r3, [r7, #32]
        break;
 8015a74:	e014      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a7a:	2b04      	cmp	r3, #4
 8015a7c:	d009      	beq.n	8015a92 <dhcp_parse_reply+0x346>
 8015a7e:	4b94      	ldr	r3, [pc, #592]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015a80:	f240 6261 	movw	r2, #1633	@ 0x661
 8015a84:	4993      	ldr	r1, [pc, #588]	@ (8015cd4 <dhcp_parse_reply+0x588>)
 8015a86:	4894      	ldr	r0, [pc, #592]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015a88:	f00c ff56 	bl	8022938 <iprintf>
 8015a8c:	f06f 0305 	mvn.w	r3, #5
 8015a90:	e119      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015a92:	2305      	movs	r3, #5
 8015a94:	623b      	str	r3, [r7, #32]
        break;
 8015a96:	e003      	b.n	8015aa0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015a9e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015aa0:	7dfb      	ldrb	r3, [r7, #23]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d103      	bne.n	8015aae <dhcp_parse_reply+0x362>
      offset++;
 8015aa6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015aac:	e0a1      	b.n	8015bf2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015aae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ab4:	4413      	add	r3, r2
 8015ab6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015aba:	4293      	cmp	r3, r2
 8015abc:	dd02      	ble.n	8015ac4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015abe:	f06f 0301 	mvn.w	r3, #1
 8015ac2:	e100      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ac8:	b29a      	uxth	r2, r3
 8015aca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015acc:	4413      	add	r3, r2
 8015ace:	b29b      	uxth	r3, r3
 8015ad0:	3302      	adds	r3, #2
 8015ad2:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f000 808a 	beq.w	8015bf2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015ae2:	6a3b      	ldr	r3, [r7, #32]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	db02      	blt.n	8015aee <dhcp_parse_reply+0x3a2>
 8015ae8:	6a3b      	ldr	r3, [r7, #32]
 8015aea:	2b07      	cmp	r3, #7
 8015aec:	dd06      	ble.n	8015afc <dhcp_parse_reply+0x3b0>
 8015aee:	4b78      	ldr	r3, [pc, #480]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015af0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8015af4:	4979      	ldr	r1, [pc, #484]	@ (8015cdc <dhcp_parse_reply+0x590>)
 8015af6:	4878      	ldr	r0, [pc, #480]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015af8:	f00c ff1e 	bl	8022938 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015afc:	4a78      	ldr	r2, [pc, #480]	@ (8015ce0 <dhcp_parse_reply+0x594>)
 8015afe:	6a3b      	ldr	r3, [r7, #32]
 8015b00:	4413      	add	r3, r2
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d174      	bne.n	8015bf2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	bf28      	it	cs
 8015b10:	2304      	movcs	r3, #4
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015b16:	8bfb      	ldrh	r3, [r7, #30]
 8015b18:	8aba      	ldrh	r2, [r7, #20]
 8015b1a:	f107 0108 	add.w	r1, r7, #8
 8015b1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015b20:	f005 fa36 	bl	801af90 <pbuf_copy_partial>
 8015b24:	4603      	mov	r3, r0
 8015b26:	461a      	mov	r2, r3
 8015b28:	8abb      	ldrh	r3, [r7, #20]
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	d002      	beq.n	8015b34 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015b2e:	f06f 0301 	mvn.w	r3, #1
 8015b32:	e0c8      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015b34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b38:	2b04      	cmp	r3, #4
 8015b3a:	d933      	bls.n	8015ba4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b40:	f003 0303 	and.w	r3, r3, #3
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d009      	beq.n	8015b5e <dhcp_parse_reply+0x412>
 8015b4a:	4b61      	ldr	r3, [pc, #388]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015b4c:	f240 6281 	movw	r2, #1665	@ 0x681
 8015b50:	4964      	ldr	r1, [pc, #400]	@ (8015ce4 <dhcp_parse_reply+0x598>)
 8015b52:	4861      	ldr	r0, [pc, #388]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015b54:	f00c fef0 	bl	8022938 <iprintf>
 8015b58:	f06f 0305 	mvn.w	r3, #5
 8015b5c:	e0b3      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015b5e:	4a60      	ldr	r2, [pc, #384]	@ (8015ce0 <dhcp_parse_reply+0x594>)
 8015b60:	6a3b      	ldr	r3, [r7, #32]
 8015b62:	4413      	add	r3, r2
 8015b64:	2201      	movs	r2, #1
 8015b66:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f003 fb6d 	bl	801924a <lwip_htonl>
 8015b70:	4602      	mov	r2, r0
 8015b72:	495d      	ldr	r1, [pc, #372]	@ (8015ce8 <dhcp_parse_reply+0x59c>)
 8015b74:	6a3b      	ldr	r3, [r7, #32]
 8015b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b7e:	3b04      	subs	r3, #4
 8015b80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015b84:	8bfb      	ldrh	r3, [r7, #30]
 8015b86:	3304      	adds	r3, #4
 8015b88:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015b8a:	8a7a      	ldrh	r2, [r7, #18]
 8015b8c:	8bfb      	ldrh	r3, [r7, #30]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d202      	bcs.n	8015b98 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015b92:	f06f 0301 	mvn.w	r3, #1
 8015b96:	e096      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015b98:	8a7b      	ldrh	r3, [r7, #18]
 8015b9a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015b9c:	6a3b      	ldr	r3, [r7, #32]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015ba2:	e79e      	b.n	8015ae2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ba8:	2b04      	cmp	r3, #4
 8015baa:	d106      	bne.n	8015bba <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f003 fb4b 	bl	801924a <lwip_htonl>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	60bb      	str	r3, [r7, #8]
 8015bb8:	e011      	b.n	8015bde <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015bba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	d009      	beq.n	8015bd6 <dhcp_parse_reply+0x48a>
 8015bc2:	4b43      	ldr	r3, [pc, #268]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015bc4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8015bc8:	4948      	ldr	r1, [pc, #288]	@ (8015cec <dhcp_parse_reply+0x5a0>)
 8015bca:	4843      	ldr	r0, [pc, #268]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015bcc:	f00c feb4 	bl	8022938 <iprintf>
 8015bd0:	f06f 0305 	mvn.w	r3, #5
 8015bd4:	e077      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015bd6:	f107 0308 	add.w	r3, r7, #8
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015bde:	4a40      	ldr	r2, [pc, #256]	@ (8015ce0 <dhcp_parse_reply+0x594>)
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	4413      	add	r3, r2
 8015be4:	2201      	movs	r2, #1
 8015be6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015be8:	68ba      	ldr	r2, [r7, #8]
 8015bea:	493f      	ldr	r1, [pc, #252]	@ (8015ce8 <dhcp_parse_reply+0x59c>)
 8015bec:	6a3b      	ldr	r3, [r7, #32]
 8015bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bf4:	895b      	ldrh	r3, [r3, #10]
 8015bf6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d324      	bcc.n	8015c46 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bfe:	895b      	ldrh	r3, [r3, #10]
 8015c00:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c02:	1ad3      	subs	r3, r2, r3
 8015c04:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c08:	895b      	ldrh	r3, [r3, #10]
 8015c0a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015c0c:	1ad3      	subs	r3, r2, r3
 8015c0e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015c10:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d213      	bcs.n	8015c40 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d109      	bne.n	8015c38 <dhcp_parse_reply+0x4ec>
 8015c24:	4b2a      	ldr	r3, [pc, #168]	@ (8015cd0 <dhcp_parse_reply+0x584>)
 8015c26:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015c2a:	4931      	ldr	r1, [pc, #196]	@ (8015cf0 <dhcp_parse_reply+0x5a4>)
 8015c2c:	482a      	ldr	r0, [pc, #168]	@ (8015cd8 <dhcp_parse_reply+0x58c>)
 8015c2e:	f00c fe83 	bl	8022938 <iprintf>
 8015c32:	f06f 0305 	mvn.w	r3, #5
 8015c36:	e046      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015c3e:	e002      	b.n	8015c46 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015c40:	f06f 0301 	mvn.w	r3, #1
 8015c44:	e03f      	b.n	8015cc6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00a      	beq.n	8015c62 <dhcp_parse_reply+0x516>
 8015c4c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d206      	bcs.n	8015c62 <dhcp_parse_reply+0x516>
 8015c54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015c56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c58:	4413      	add	r3, r2
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	2bff      	cmp	r3, #255	@ 0xff
 8015c5e:	f47f adb8 	bne.w	80157d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015c62:	4b1f      	ldr	r3, [pc, #124]	@ (8015ce0 <dhcp_parse_reply+0x594>)
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d018      	beq.n	8015c9c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8015ce8 <dhcp_parse_reply+0x59c>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c70:	4b1b      	ldr	r3, [pc, #108]	@ (8015ce0 <dhcp_parse_reply+0x594>)
 8015c72:	2200      	movs	r2, #0
 8015c74:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d102      	bne.n	8015c82 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c80:	e00c      	b.n	8015c9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d102      	bne.n	8015c8e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c8c:	e006      	b.n	8015c9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	2b03      	cmp	r3, #3
 8015c92:	d103      	bne.n	8015c9c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d006      	beq.n	8015cb0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015ca6:	236c      	movs	r3, #108	@ 0x6c
 8015ca8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015caa:	23ec      	movs	r3, #236	@ 0xec
 8015cac:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015cae:	e56a      	b.n	8015786 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d006      	beq.n	8015cc4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015cba:	232c      	movs	r3, #44	@ 0x2c
 8015cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015cbe:	236c      	movs	r3, #108	@ 0x6c
 8015cc0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015cc2:	e560      	b.n	8015786 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015cc4:	2300      	movs	r3, #0
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3740      	adds	r7, #64	@ 0x40
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	08024fd0 	.word	0x08024fd0
 8015cd4:	08025298 	.word	0x08025298
 8015cd8:	08025070 	.word	0x08025070
 8015cdc:	080252dc 	.word	0x080252dc
 8015ce0:	20008d9c 	.word	0x20008d9c
 8015ce4:	080252f0 	.word	0x080252f0
 8015ce8:	20008d7c 	.word	0x20008d7c
 8015cec:	08025308 	.word	0x08025308
 8015cf0:	0802531c 	.word	0x0802531c

08015cf4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b08a      	sub	sp, #40	@ 0x28
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
 8015d00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015d02:	4b60      	ldr	r3, [pc, #384]	@ (8015e84 <dhcp_recv+0x190>)
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d08:	6a3b      	ldr	r3, [r7, #32]
 8015d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	f000 809d 	beq.w	8015e56 <dhcp_recv+0x162>
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	791b      	ldrb	r3, [r3, #4]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	f000 8098 	beq.w	8015e56 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	895b      	ldrh	r3, [r3, #10]
 8015d2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d2c:	f240 8095 	bls.w	8015e5a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	2b02      	cmp	r3, #2
 8015d36:	f040 8092 	bne.w	8015e5e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d40:	e012      	b.n	8015d68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d46:	6a3a      	ldr	r2, [r7, #32]
 8015d48:	4413      	add	r3, r2
 8015d4a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8015d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d52:	69b9      	ldr	r1, [r7, #24]
 8015d54:	440b      	add	r3, r1
 8015d56:	7f1b      	ldrb	r3, [r3, #28]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	f040 8082 	bne.w	8015e62 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d62:	3301      	adds	r3, #1
 8015d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d68:	6a3b      	ldr	r3, [r7, #32]
 8015d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015d6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d203      	bcs.n	8015d7e <dhcp_recv+0x8a>
 8015d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d7a:	2b05      	cmp	r3, #5
 8015d7c:	d9e1      	bls.n	8015d42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f003 fa61 	bl	801924a <lwip_htonl>
 8015d88:	4602      	mov	r2, r0
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d169      	bne.n	8015e66 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015d92:	69f9      	ldr	r1, [r7, #28]
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7ff fcd9 	bl	801574c <dhcp_parse_reply>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d164      	bne.n	8015e6a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015da0:	4b39      	ldr	r3, [pc, #228]	@ (8015e88 <dhcp_recv+0x194>)
 8015da2:	785b      	ldrb	r3, [r3, #1]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d062      	beq.n	8015e6e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015dae:	4b37      	ldr	r3, [pc, #220]	@ (8015e8c <dhcp_recv+0x198>)
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015db4:	7cfb      	ldrb	r3, [r7, #19]
 8015db6:	2b05      	cmp	r3, #5
 8015db8:	d12a      	bne.n	8015e10 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015dba:	69fb      	ldr	r3, [r7, #28]
 8015dbc:	795b      	ldrb	r3, [r3, #5]
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	d112      	bne.n	8015de8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015dc2:	6979      	ldr	r1, [r7, #20]
 8015dc4:	6a38      	ldr	r0, [r7, #32]
 8015dc6:	f7fe fe1d 	bl	8014a04 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015dca:	6a3b      	ldr	r3, [r7, #32]
 8015dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015dd0:	f003 0308 	and.w	r3, r3, #8
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d003      	beq.n	8015de0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015dd8:	6a38      	ldr	r0, [r7, #32]
 8015dda:	f7fe fb8b 	bl	80144f4 <dhcp_check>
 8015dde:	e049      	b.n	8015e74 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015de0:	6a38      	ldr	r0, [r7, #32]
 8015de2:	f7ff f86d 	bl	8014ec0 <dhcp_bind>
 8015de6:	e045      	b.n	8015e74 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	795b      	ldrb	r3, [r3, #5]
 8015dec:	2b03      	cmp	r3, #3
 8015dee:	d007      	beq.n	8015e00 <dhcp_recv+0x10c>
 8015df0:	69fb      	ldr	r3, [r7, #28]
 8015df2:	795b      	ldrb	r3, [r3, #5]
 8015df4:	2b04      	cmp	r3, #4
 8015df6:	d003      	beq.n	8015e00 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015dfc:	2b05      	cmp	r3, #5
 8015dfe:	d139      	bne.n	8015e74 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015e00:	6979      	ldr	r1, [r7, #20]
 8015e02:	6a38      	ldr	r0, [r7, #32]
 8015e04:	f7fe fdfe 	bl	8014a04 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015e08:	6a38      	ldr	r0, [r7, #32]
 8015e0a:	f7ff f859 	bl	8014ec0 <dhcp_bind>
 8015e0e:	e031      	b.n	8015e74 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015e10:	7cfb      	ldrb	r3, [r7, #19]
 8015e12:	2b06      	cmp	r3, #6
 8015e14:	d113      	bne.n	8015e3e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e16:	69fb      	ldr	r3, [r7, #28]
 8015e18:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d00b      	beq.n	8015e36 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	795b      	ldrb	r3, [r3, #5]
 8015e22:	2b01      	cmp	r3, #1
 8015e24:	d007      	beq.n	8015e36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e2a:	2b04      	cmp	r3, #4
 8015e2c:	d003      	beq.n	8015e36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	795b      	ldrb	r3, [r3, #5]
 8015e32:	2b05      	cmp	r3, #5
 8015e34:	d103      	bne.n	8015e3e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015e36:	6a38      	ldr	r0, [r7, #32]
 8015e38:	f7fe fb42 	bl	80144c0 <dhcp_handle_nak>
 8015e3c:	e01a      	b.n	8015e74 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015e3e:	7cfb      	ldrb	r3, [r7, #19]
 8015e40:	2b02      	cmp	r3, #2
 8015e42:	d116      	bne.n	8015e72 <dhcp_recv+0x17e>
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	795b      	ldrb	r3, [r3, #5]
 8015e48:	2b06      	cmp	r3, #6
 8015e4a:	d112      	bne.n	8015e72 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015e4c:	6979      	ldr	r1, [r7, #20]
 8015e4e:	6a38      	ldr	r0, [r7, #32]
 8015e50:	f7fe fb84 	bl	801455c <dhcp_handle_offer>
 8015e54:	e00e      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e56:	bf00      	nop
 8015e58:	e00c      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e5a:	bf00      	nop
 8015e5c:	e00a      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e5e:	bf00      	nop
 8015e60:	e008      	b.n	8015e74 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015e62:	bf00      	nop
 8015e64:	e006      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e66:	bf00      	nop
 8015e68:	e004      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e6a:	bf00      	nop
 8015e6c:	e002      	b.n	8015e74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e6e:	bf00      	nop
 8015e70:	e000      	b.n	8015e74 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015e72:	bf00      	nop
  pbuf_free(p);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f004 fe85 	bl	801ab84 <pbuf_free>
}
 8015e7a:	bf00      	nop
 8015e7c:	3728      	adds	r7, #40	@ 0x28
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	20008ebc 	.word	0x20008ebc
 8015e88:	20008d9c 	.word	0x20008d9c
 8015e8c:	20008d7c 	.word	0x20008d7c

08015e90 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b088      	sub	sp, #32
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	603b      	str	r3, [r7, #0]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d108      	bne.n	8015eb8 <dhcp_create_msg+0x28>
 8015ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8016024 <dhcp_create_msg+0x194>)
 8015ea8:	f240 7269 	movw	r2, #1897	@ 0x769
 8015eac:	495e      	ldr	r1, [pc, #376]	@ (8016028 <dhcp_create_msg+0x198>)
 8015eae:	485f      	ldr	r0, [pc, #380]	@ (801602c <dhcp_create_msg+0x19c>)
 8015eb0:	f00c fd42 	bl	8022938 <iprintf>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	e0b1      	b.n	801601c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d108      	bne.n	8015ed0 <dhcp_create_msg+0x40>
 8015ebe:	4b59      	ldr	r3, [pc, #356]	@ (8016024 <dhcp_create_msg+0x194>)
 8015ec0:	f240 726a 	movw	r2, #1898	@ 0x76a
 8015ec4:	495a      	ldr	r1, [pc, #360]	@ (8016030 <dhcp_create_msg+0x1a0>)
 8015ec6:	4859      	ldr	r0, [pc, #356]	@ (801602c <dhcp_create_msg+0x19c>)
 8015ec8:	f00c fd36 	bl	8022938 <iprintf>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	e0a5      	b.n	801601c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015ed0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015ed4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015ed8:	2036      	movs	r0, #54	@ 0x36
 8015eda:	f004 fb3d 	bl	801a558 <pbuf_alloc>
 8015ede:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015ee0:	69bb      	ldr	r3, [r7, #24]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e098      	b.n	801601c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015eea:	69bb      	ldr	r3, [r7, #24]
 8015eec:	895b      	ldrh	r3, [r3, #10]
 8015eee:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8015ef2:	d206      	bcs.n	8015f02 <dhcp_create_msg+0x72>
 8015ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8016024 <dhcp_create_msg+0x194>)
 8015ef6:	f240 7271 	movw	r2, #1905	@ 0x771
 8015efa:	494e      	ldr	r1, [pc, #312]	@ (8016034 <dhcp_create_msg+0x1a4>)
 8015efc:	484b      	ldr	r0, [pc, #300]	@ (801602c <dhcp_create_msg+0x19c>)
 8015efe:	f00c fd1b 	bl	8022938 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015f02:	79fb      	ldrb	r3, [r7, #7]
 8015f04:	2b03      	cmp	r3, #3
 8015f06:	d103      	bne.n	8015f10 <dhcp_create_msg+0x80>
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	795b      	ldrb	r3, [r3, #5]
 8015f0c:	2b03      	cmp	r3, #3
 8015f0e:	d10d      	bne.n	8015f2c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	799b      	ldrb	r3, [r3, #6]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d105      	bne.n	8015f24 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015f18:	f00c fc0e 	bl	8022738 <rand>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	461a      	mov	r2, r3
 8015f20:	4b45      	ldr	r3, [pc, #276]	@ (8016038 <dhcp_create_msg+0x1a8>)
 8015f22:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015f24:	4b44      	ldr	r3, [pc, #272]	@ (8016038 <dhcp_create_msg+0x1a8>)
 8015f26:	681a      	ldr	r2, [r3, #0]
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015f32:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8015f36:	2100      	movs	r1, #0
 8015f38:	6978      	ldr	r0, [r7, #20]
 8015f3a:	f00c fe8f 	bl	8022c5c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	2201      	movs	r2, #1
 8015f42:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	2201      	movs	r2, #1
 8015f48:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f003 f976 	bl	801924a <lwip_htonl>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015f64:	79fb      	ldrb	r3, [r7, #7]
 8015f66:	2b08      	cmp	r3, #8
 8015f68:	d010      	beq.n	8015f8c <dhcp_create_msg+0xfc>
 8015f6a:	79fb      	ldrb	r3, [r7, #7]
 8015f6c:	2b04      	cmp	r3, #4
 8015f6e:	d00d      	beq.n	8015f8c <dhcp_create_msg+0xfc>
 8015f70:	79fb      	ldrb	r3, [r7, #7]
 8015f72:	2b07      	cmp	r3, #7
 8015f74:	d00a      	beq.n	8015f8c <dhcp_create_msg+0xfc>
 8015f76:	79fb      	ldrb	r3, [r7, #7]
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	d10c      	bne.n	8015f96 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015f80:	2b05      	cmp	r3, #5
 8015f82:	d003      	beq.n	8015f8c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	795b      	ldrb	r3, [r3, #5]
 8015f88:	2b04      	cmp	r3, #4
 8015f8a:	d104      	bne.n	8015f96 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	3304      	adds	r3, #4
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f96:	2300      	movs	r3, #0
 8015f98:	83fb      	strh	r3, [r7, #30]
 8015f9a:	e00c      	b.n	8015fb6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015f9c:	8bfa      	ldrh	r2, [r7, #30]
 8015f9e:	8bfb      	ldrh	r3, [r7, #30]
 8015fa0:	68f9      	ldr	r1, [r7, #12]
 8015fa2:	440a      	add	r2, r1
 8015fa4:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8015fa8:	697a      	ldr	r2, [r7, #20]
 8015faa:	4413      	add	r3, r2
 8015fac:	460a      	mov	r2, r1
 8015fae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015fb0:	8bfb      	ldrh	r3, [r7, #30]
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	83fb      	strh	r3, [r7, #30]
 8015fb6:	8bfb      	ldrh	r3, [r7, #30]
 8015fb8:	2b05      	cmp	r3, #5
 8015fba:	d9ef      	bls.n	8015f9c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015fc4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8015fce:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8015fd8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015fe2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015fec:	2301      	movs	r3, #1
 8015fee:	2235      	movs	r2, #53	@ 0x35
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	f7ff fadb 	bl	80155ac <dhcp_option>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016000:	79fa      	ldrb	r2, [r7, #7]
 8016002:	8a7b      	ldrh	r3, [r7, #18]
 8016004:	4618      	mov	r0, r3
 8016006:	f7ff fb05 	bl	8015614 <dhcp_option_byte>
 801600a:	4603      	mov	r3, r0
 801600c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d002      	beq.n	801601a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	8a7a      	ldrh	r2, [r7, #18]
 8016018:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801601a:	69bb      	ldr	r3, [r7, #24]
}
 801601c:	4618      	mov	r0, r3
 801601e:	3720      	adds	r7, #32
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}
 8016024:	08024fd0 	.word	0x08024fd0
 8016028:	08025330 	.word	0x08025330
 801602c:	08025070 	.word	0x08025070
 8016030:	08025350 	.word	0x08025350
 8016034:	08025370 	.word	0x08025370
 8016038:	20008dac 	.word	0x20008dac

0801603c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	4603      	mov	r3, r0
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
 8016048:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801604a:	89fb      	ldrh	r3, [r7, #14]
 801604c:	1c5a      	adds	r2, r3, #1
 801604e:	81fa      	strh	r2, [r7, #14]
 8016050:	461a      	mov	r2, r3
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	4413      	add	r3, r2
 8016056:	22ff      	movs	r2, #255	@ 0xff
 8016058:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801605a:	e007      	b.n	801606c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801605c:	89fb      	ldrh	r3, [r7, #14]
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	81fa      	strh	r2, [r7, #14]
 8016062:	461a      	mov	r2, r3
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	4413      	add	r3, r2
 8016068:	2200      	movs	r2, #0
 801606a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801606c:	89fb      	ldrh	r3, [r7, #14]
 801606e:	2b43      	cmp	r3, #67	@ 0x43
 8016070:	d904      	bls.n	801607c <dhcp_option_trailer+0x40>
 8016072:	89fb      	ldrh	r3, [r7, #14]
 8016074:	f003 0303 	and.w	r3, r3, #3
 8016078:	2b00      	cmp	r3, #0
 801607a:	d002      	beq.n	8016082 <dhcp_option_trailer+0x46>
 801607c:	89fb      	ldrh	r3, [r7, #14]
 801607e:	2b43      	cmp	r3, #67	@ 0x43
 8016080:	d9ec      	bls.n	801605c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016082:	89fb      	ldrh	r3, [r7, #14]
 8016084:	33f0      	adds	r3, #240	@ 0xf0
 8016086:	b29b      	uxth	r3, r3
 8016088:	4619      	mov	r1, r3
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f004 fbc2 	bl	801a814 <pbuf_realloc>
}
 8016090:	bf00      	nop
 8016092:	3710      	adds	r7, #16
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016098:	b480      	push	{r7}
 801609a:	b085      	sub	sp, #20
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d017      	beq.n	80160d6 <dhcp_supplied_address+0x3e>
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d013      	beq.n	80160d6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160b2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	795b      	ldrb	r3, [r3, #5]
 80160b8:	2b0a      	cmp	r3, #10
 80160ba:	d007      	beq.n	80160cc <dhcp_supplied_address+0x34>
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	795b      	ldrb	r3, [r3, #5]
 80160c0:	2b05      	cmp	r3, #5
 80160c2:	d003      	beq.n	80160cc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80160c8:	2b04      	cmp	r3, #4
 80160ca:	d101      	bne.n	80160d0 <dhcp_supplied_address+0x38>
 80160cc:	2301      	movs	r3, #1
 80160ce:	e000      	b.n	80160d2 <dhcp_supplied_address+0x3a>
 80160d0:	2300      	movs	r3, #0
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	e000      	b.n	80160d8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80160d6:	2300      	movs	r3, #0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3714      	adds	r7, #20
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr

080160e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80160ec:	4915      	ldr	r1, [pc, #84]	@ (8016144 <etharp_free_entry+0x60>)
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	4613      	mov	r3, r2
 80160f2:	005b      	lsls	r3, r3, #1
 80160f4:	4413      	add	r3, r2
 80160f6:	00db      	lsls	r3, r3, #3
 80160f8:	440b      	add	r3, r1
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d013      	beq.n	8016128 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016100:	4910      	ldr	r1, [pc, #64]	@ (8016144 <etharp_free_entry+0x60>)
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4618      	mov	r0, r3
 8016112:	f004 fd37 	bl	801ab84 <pbuf_free>
    arp_table[i].q = NULL;
 8016116:	490b      	ldr	r1, [pc, #44]	@ (8016144 <etharp_free_entry+0x60>)
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	4613      	mov	r3, r2
 801611c:	005b      	lsls	r3, r3, #1
 801611e:	4413      	add	r3, r2
 8016120:	00db      	lsls	r3, r3, #3
 8016122:	440b      	add	r3, r1
 8016124:	2200      	movs	r2, #0
 8016126:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016128:	4906      	ldr	r1, [pc, #24]	@ (8016144 <etharp_free_entry+0x60>)
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	4613      	mov	r3, r2
 801612e:	005b      	lsls	r3, r3, #1
 8016130:	4413      	add	r3, r2
 8016132:	00db      	lsls	r3, r3, #3
 8016134:	440b      	add	r3, r1
 8016136:	3314      	adds	r3, #20
 8016138:	2200      	movs	r2, #0
 801613a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801613c:	bf00      	nop
 801613e:	3708      	adds	r7, #8
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}
 8016144:	20008db0 	.word	0x20008db0

08016148 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801614e:	2300      	movs	r3, #0
 8016150:	607b      	str	r3, [r7, #4]
 8016152:	e096      	b.n	8016282 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016154:	494f      	ldr	r1, [pc, #316]	@ (8016294 <etharp_tmr+0x14c>)
 8016156:	687a      	ldr	r2, [r7, #4]
 8016158:	4613      	mov	r3, r2
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	4413      	add	r3, r2
 801615e:	00db      	lsls	r3, r3, #3
 8016160:	440b      	add	r3, r1
 8016162:	3314      	adds	r3, #20
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016168:	78fb      	ldrb	r3, [r7, #3]
 801616a:	2b00      	cmp	r3, #0
 801616c:	f000 8086 	beq.w	801627c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016170:	4948      	ldr	r1, [pc, #288]	@ (8016294 <etharp_tmr+0x14c>)
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	4613      	mov	r3, r2
 8016176:	005b      	lsls	r3, r3, #1
 8016178:	4413      	add	r3, r2
 801617a:	00db      	lsls	r3, r3, #3
 801617c:	440b      	add	r3, r1
 801617e:	3312      	adds	r3, #18
 8016180:	881b      	ldrh	r3, [r3, #0]
 8016182:	3301      	adds	r3, #1
 8016184:	b298      	uxth	r0, r3
 8016186:	4943      	ldr	r1, [pc, #268]	@ (8016294 <etharp_tmr+0x14c>)
 8016188:	687a      	ldr	r2, [r7, #4]
 801618a:	4613      	mov	r3, r2
 801618c:	005b      	lsls	r3, r3, #1
 801618e:	4413      	add	r3, r2
 8016190:	00db      	lsls	r3, r3, #3
 8016192:	440b      	add	r3, r1
 8016194:	3312      	adds	r3, #18
 8016196:	4602      	mov	r2, r0
 8016198:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801619a:	493e      	ldr	r1, [pc, #248]	@ (8016294 <etharp_tmr+0x14c>)
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	4613      	mov	r3, r2
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	4413      	add	r3, r2
 80161a4:	00db      	lsls	r3, r3, #3
 80161a6:	440b      	add	r3, r1
 80161a8:	3312      	adds	r3, #18
 80161aa:	881b      	ldrh	r3, [r3, #0]
 80161ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80161b0:	d215      	bcs.n	80161de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161b2:	4938      	ldr	r1, [pc, #224]	@ (8016294 <etharp_tmr+0x14c>)
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	4613      	mov	r3, r2
 80161b8:	005b      	lsls	r3, r3, #1
 80161ba:	4413      	add	r3, r2
 80161bc:	00db      	lsls	r3, r3, #3
 80161be:	440b      	add	r3, r1
 80161c0:	3314      	adds	r3, #20
 80161c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d10e      	bne.n	80161e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80161c8:	4932      	ldr	r1, [pc, #200]	@ (8016294 <etharp_tmr+0x14c>)
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	4613      	mov	r3, r2
 80161ce:	005b      	lsls	r3, r3, #1
 80161d0:	4413      	add	r3, r2
 80161d2:	00db      	lsls	r3, r3, #3
 80161d4:	440b      	add	r3, r1
 80161d6:	3312      	adds	r3, #18
 80161d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161da:	2b04      	cmp	r3, #4
 80161dc:	d903      	bls.n	80161e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f7ff ff80 	bl	80160e4 <etharp_free_entry>
 80161e4:	e04a      	b.n	801627c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80161e6:	492b      	ldr	r1, [pc, #172]	@ (8016294 <etharp_tmr+0x14c>)
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	4613      	mov	r3, r2
 80161ec:	005b      	lsls	r3, r3, #1
 80161ee:	4413      	add	r3, r2
 80161f0:	00db      	lsls	r3, r3, #3
 80161f2:	440b      	add	r3, r1
 80161f4:	3314      	adds	r3, #20
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b03      	cmp	r3, #3
 80161fa:	d10a      	bne.n	8016212 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80161fc:	4925      	ldr	r1, [pc, #148]	@ (8016294 <etharp_tmr+0x14c>)
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	4613      	mov	r3, r2
 8016202:	005b      	lsls	r3, r3, #1
 8016204:	4413      	add	r3, r2
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	440b      	add	r3, r1
 801620a:	3314      	adds	r3, #20
 801620c:	2204      	movs	r2, #4
 801620e:	701a      	strb	r2, [r3, #0]
 8016210:	e034      	b.n	801627c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016212:	4920      	ldr	r1, [pc, #128]	@ (8016294 <etharp_tmr+0x14c>)
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	4613      	mov	r3, r2
 8016218:	005b      	lsls	r3, r3, #1
 801621a:	4413      	add	r3, r2
 801621c:	00db      	lsls	r3, r3, #3
 801621e:	440b      	add	r3, r1
 8016220:	3314      	adds	r3, #20
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	2b04      	cmp	r3, #4
 8016226:	d10a      	bne.n	801623e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016228:	491a      	ldr	r1, [pc, #104]	@ (8016294 <etharp_tmr+0x14c>)
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	4613      	mov	r3, r2
 801622e:	005b      	lsls	r3, r3, #1
 8016230:	4413      	add	r3, r2
 8016232:	00db      	lsls	r3, r3, #3
 8016234:	440b      	add	r3, r1
 8016236:	3314      	adds	r3, #20
 8016238:	2202      	movs	r2, #2
 801623a:	701a      	strb	r2, [r3, #0]
 801623c:	e01e      	b.n	801627c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801623e:	4915      	ldr	r1, [pc, #84]	@ (8016294 <etharp_tmr+0x14c>)
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	4613      	mov	r3, r2
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	4413      	add	r3, r2
 8016248:	00db      	lsls	r3, r3, #3
 801624a:	440b      	add	r3, r1
 801624c:	3314      	adds	r3, #20
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	2b01      	cmp	r3, #1
 8016252:	d113      	bne.n	801627c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016254:	490f      	ldr	r1, [pc, #60]	@ (8016294 <etharp_tmr+0x14c>)
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	4613      	mov	r3, r2
 801625a:	005b      	lsls	r3, r3, #1
 801625c:	4413      	add	r3, r2
 801625e:	00db      	lsls	r3, r3, #3
 8016260:	440b      	add	r3, r1
 8016262:	3308      	adds	r3, #8
 8016264:	6818      	ldr	r0, [r3, #0]
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	4613      	mov	r3, r2
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	4413      	add	r3, r2
 801626e:	00db      	lsls	r3, r3, #3
 8016270:	4a08      	ldr	r2, [pc, #32]	@ (8016294 <etharp_tmr+0x14c>)
 8016272:	4413      	add	r3, r2
 8016274:	3304      	adds	r3, #4
 8016276:	4619      	mov	r1, r3
 8016278:	f000 fe72 	bl	8016f60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	3301      	adds	r3, #1
 8016280:	607b      	str	r3, [r7, #4]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2b09      	cmp	r3, #9
 8016286:	f77f af65 	ble.w	8016154 <etharp_tmr+0xc>
      }
    }
  }
}
 801628a:	bf00      	nop
 801628c:	bf00      	nop
 801628e:	3708      	adds	r7, #8
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20008db0 	.word	0x20008db0

08016298 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b08a      	sub	sp, #40	@ 0x28
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	460b      	mov	r3, r1
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80162a6:	230a      	movs	r3, #10
 80162a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80162aa:	230a      	movs	r3, #10
 80162ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80162ae:	230a      	movs	r3, #10
 80162b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80162b6:	230a      	movs	r3, #10
 80162b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80162ba:	2300      	movs	r3, #0
 80162bc:	83bb      	strh	r3, [r7, #28]
 80162be:	2300      	movs	r3, #0
 80162c0:	837b      	strh	r3, [r7, #26]
 80162c2:	2300      	movs	r3, #0
 80162c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162c6:	2300      	movs	r3, #0
 80162c8:	843b      	strh	r3, [r7, #32]
 80162ca:	e0ae      	b.n	801642a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80162cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162d0:	49a6      	ldr	r1, [pc, #664]	@ (801656c <etharp_find_entry+0x2d4>)
 80162d2:	4613      	mov	r3, r2
 80162d4:	005b      	lsls	r3, r3, #1
 80162d6:	4413      	add	r3, r2
 80162d8:	00db      	lsls	r3, r3, #3
 80162da:	440b      	add	r3, r1
 80162dc:	3314      	adds	r3, #20
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80162e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80162e6:	2b0a      	cmp	r3, #10
 80162e8:	d105      	bne.n	80162f6 <etharp_find_entry+0x5e>
 80162ea:	7dfb      	ldrb	r3, [r7, #23]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d102      	bne.n	80162f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80162f0:	8c3b      	ldrh	r3, [r7, #32]
 80162f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80162f4:	e095      	b.n	8016422 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	f000 8092 	beq.w	8016422 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80162fe:	7dfb      	ldrb	r3, [r7, #23]
 8016300:	2b01      	cmp	r3, #1
 8016302:	d009      	beq.n	8016318 <etharp_find_entry+0x80>
 8016304:	7dfb      	ldrb	r3, [r7, #23]
 8016306:	2b01      	cmp	r3, #1
 8016308:	d806      	bhi.n	8016318 <etharp_find_entry+0x80>
 801630a:	4b99      	ldr	r3, [pc, #612]	@ (8016570 <etharp_find_entry+0x2d8>)
 801630c:	f240 1223 	movw	r2, #291	@ 0x123
 8016310:	4998      	ldr	r1, [pc, #608]	@ (8016574 <etharp_find_entry+0x2dc>)
 8016312:	4899      	ldr	r0, [pc, #612]	@ (8016578 <etharp_find_entry+0x2e0>)
 8016314:	f00c fb10 	bl	8022938 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d020      	beq.n	8016360 <etharp_find_entry+0xc8>
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	6819      	ldr	r1, [r3, #0]
 8016322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016326:	4891      	ldr	r0, [pc, #580]	@ (801656c <etharp_find_entry+0x2d4>)
 8016328:	4613      	mov	r3, r2
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	4413      	add	r3, r2
 801632e:	00db      	lsls	r3, r3, #3
 8016330:	4403      	add	r3, r0
 8016332:	3304      	adds	r3, #4
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4299      	cmp	r1, r3
 8016338:	d112      	bne.n	8016360 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d00c      	beq.n	801635a <etharp_find_entry+0xc2>
 8016340:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016344:	4989      	ldr	r1, [pc, #548]	@ (801656c <etharp_find_entry+0x2d4>)
 8016346:	4613      	mov	r3, r2
 8016348:	005b      	lsls	r3, r3, #1
 801634a:	4413      	add	r3, r2
 801634c:	00db      	lsls	r3, r3, #3
 801634e:	440b      	add	r3, r1
 8016350:	3308      	adds	r3, #8
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	429a      	cmp	r2, r3
 8016358:	d102      	bne.n	8016360 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801635a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801635e:	e100      	b.n	8016562 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016360:	7dfb      	ldrb	r3, [r7, #23]
 8016362:	2b01      	cmp	r3, #1
 8016364:	d140      	bne.n	80163e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801636a:	4980      	ldr	r1, [pc, #512]	@ (801656c <etharp_find_entry+0x2d4>)
 801636c:	4613      	mov	r3, r2
 801636e:	005b      	lsls	r3, r3, #1
 8016370:	4413      	add	r3, r2
 8016372:	00db      	lsls	r3, r3, #3
 8016374:	440b      	add	r3, r1
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d01a      	beq.n	80163b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801637c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016380:	497a      	ldr	r1, [pc, #488]	@ (801656c <etharp_find_entry+0x2d4>)
 8016382:	4613      	mov	r3, r2
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	4413      	add	r3, r2
 8016388:	00db      	lsls	r3, r3, #3
 801638a:	440b      	add	r3, r1
 801638c:	3312      	adds	r3, #18
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	8bba      	ldrh	r2, [r7, #28]
 8016392:	429a      	cmp	r2, r3
 8016394:	d845      	bhi.n	8016422 <etharp_find_entry+0x18a>
            old_queue = i;
 8016396:	8c3b      	ldrh	r3, [r7, #32]
 8016398:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801639a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801639e:	4973      	ldr	r1, [pc, #460]	@ (801656c <etharp_find_entry+0x2d4>)
 80163a0:	4613      	mov	r3, r2
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	4413      	add	r3, r2
 80163a6:	00db      	lsls	r3, r3, #3
 80163a8:	440b      	add	r3, r1
 80163aa:	3312      	adds	r3, #18
 80163ac:	881b      	ldrh	r3, [r3, #0]
 80163ae:	83bb      	strh	r3, [r7, #28]
 80163b0:	e037      	b.n	8016422 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80163b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163b6:	496d      	ldr	r1, [pc, #436]	@ (801656c <etharp_find_entry+0x2d4>)
 80163b8:	4613      	mov	r3, r2
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	4413      	add	r3, r2
 80163be:	00db      	lsls	r3, r3, #3
 80163c0:	440b      	add	r3, r1
 80163c2:	3312      	adds	r3, #18
 80163c4:	881b      	ldrh	r3, [r3, #0]
 80163c6:	8b7a      	ldrh	r2, [r7, #26]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d82a      	bhi.n	8016422 <etharp_find_entry+0x18a>
            old_pending = i;
 80163cc:	8c3b      	ldrh	r3, [r7, #32]
 80163ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80163d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163d4:	4965      	ldr	r1, [pc, #404]	@ (801656c <etharp_find_entry+0x2d4>)
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	440b      	add	r3, r1
 80163e0:	3312      	adds	r3, #18
 80163e2:	881b      	ldrh	r3, [r3, #0]
 80163e4:	837b      	strh	r3, [r7, #26]
 80163e6:	e01c      	b.n	8016422 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80163e8:	7dfb      	ldrb	r3, [r7, #23]
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d919      	bls.n	8016422 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80163ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163f2:	495e      	ldr	r1, [pc, #376]	@ (801656c <etharp_find_entry+0x2d4>)
 80163f4:	4613      	mov	r3, r2
 80163f6:	005b      	lsls	r3, r3, #1
 80163f8:	4413      	add	r3, r2
 80163fa:	00db      	lsls	r3, r3, #3
 80163fc:	440b      	add	r3, r1
 80163fe:	3312      	adds	r3, #18
 8016400:	881b      	ldrh	r3, [r3, #0]
 8016402:	8b3a      	ldrh	r2, [r7, #24]
 8016404:	429a      	cmp	r2, r3
 8016406:	d80c      	bhi.n	8016422 <etharp_find_entry+0x18a>
            old_stable = i;
 8016408:	8c3b      	ldrh	r3, [r7, #32]
 801640a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801640c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016410:	4956      	ldr	r1, [pc, #344]	@ (801656c <etharp_find_entry+0x2d4>)
 8016412:	4613      	mov	r3, r2
 8016414:	005b      	lsls	r3, r3, #1
 8016416:	4413      	add	r3, r2
 8016418:	00db      	lsls	r3, r3, #3
 801641a:	440b      	add	r3, r1
 801641c:	3312      	adds	r3, #18
 801641e:	881b      	ldrh	r3, [r3, #0]
 8016420:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016422:	8c3b      	ldrh	r3, [r7, #32]
 8016424:	3301      	adds	r3, #1
 8016426:	b29b      	uxth	r3, r3
 8016428:	843b      	strh	r3, [r7, #32]
 801642a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801642e:	2b09      	cmp	r3, #9
 8016430:	f77f af4c 	ble.w	80162cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016434:	7afb      	ldrb	r3, [r7, #11]
 8016436:	f003 0302 	and.w	r3, r3, #2
 801643a:	2b00      	cmp	r3, #0
 801643c:	d108      	bne.n	8016450 <etharp_find_entry+0x1b8>
 801643e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016442:	2b0a      	cmp	r3, #10
 8016444:	d107      	bne.n	8016456 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016446:	7afb      	ldrb	r3, [r7, #11]
 8016448:	f003 0301 	and.w	r3, r3, #1
 801644c:	2b00      	cmp	r3, #0
 801644e:	d102      	bne.n	8016456 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016450:	f04f 33ff 	mov.w	r3, #4294967295
 8016454:	e085      	b.n	8016562 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016456:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801645a:	2b09      	cmp	r3, #9
 801645c:	dc02      	bgt.n	8016464 <etharp_find_entry+0x1cc>
    i = empty;
 801645e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016460:	843b      	strh	r3, [r7, #32]
 8016462:	e039      	b.n	80164d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016464:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016468:	2b09      	cmp	r3, #9
 801646a:	dc14      	bgt.n	8016496 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801646c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801646e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016474:	493d      	ldr	r1, [pc, #244]	@ (801656c <etharp_find_entry+0x2d4>)
 8016476:	4613      	mov	r3, r2
 8016478:	005b      	lsls	r3, r3, #1
 801647a:	4413      	add	r3, r2
 801647c:	00db      	lsls	r3, r3, #3
 801647e:	440b      	add	r3, r1
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d018      	beq.n	80164b8 <etharp_find_entry+0x220>
 8016486:	4b3a      	ldr	r3, [pc, #232]	@ (8016570 <etharp_find_entry+0x2d8>)
 8016488:	f240 126d 	movw	r2, #365	@ 0x16d
 801648c:	493b      	ldr	r1, [pc, #236]	@ (801657c <etharp_find_entry+0x2e4>)
 801648e:	483a      	ldr	r0, [pc, #232]	@ (8016578 <etharp_find_entry+0x2e0>)
 8016490:	f00c fa52 	bl	8022938 <iprintf>
 8016494:	e010      	b.n	80164b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016496:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801649a:	2b09      	cmp	r3, #9
 801649c:	dc02      	bgt.n	80164a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801649e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80164a0:	843b      	strh	r3, [r7, #32]
 80164a2:	e009      	b.n	80164b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80164a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80164a8:	2b09      	cmp	r3, #9
 80164aa:	dc02      	bgt.n	80164b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80164ac:	8bfb      	ldrh	r3, [r7, #30]
 80164ae:	843b      	strh	r3, [r7, #32]
 80164b0:	e002      	b.n	80164b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80164b2:	f04f 33ff 	mov.w	r3, #4294967295
 80164b6:	e054      	b.n	8016562 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164bc:	2b09      	cmp	r3, #9
 80164be:	dd06      	ble.n	80164ce <etharp_find_entry+0x236>
 80164c0:	4b2b      	ldr	r3, [pc, #172]	@ (8016570 <etharp_find_entry+0x2d8>)
 80164c2:	f240 127f 	movw	r2, #383	@ 0x17f
 80164c6:	492e      	ldr	r1, [pc, #184]	@ (8016580 <etharp_find_entry+0x2e8>)
 80164c8:	482b      	ldr	r0, [pc, #172]	@ (8016578 <etharp_find_entry+0x2e0>)
 80164ca:	f00c fa35 	bl	8022938 <iprintf>
    etharp_free_entry(i);
 80164ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7ff fe06 	bl	80160e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164dc:	2b09      	cmp	r3, #9
 80164de:	dd06      	ble.n	80164ee <etharp_find_entry+0x256>
 80164e0:	4b23      	ldr	r3, [pc, #140]	@ (8016570 <etharp_find_entry+0x2d8>)
 80164e2:	f240 1283 	movw	r2, #387	@ 0x183
 80164e6:	4926      	ldr	r1, [pc, #152]	@ (8016580 <etharp_find_entry+0x2e8>)
 80164e8:	4823      	ldr	r0, [pc, #140]	@ (8016578 <etharp_find_entry+0x2e0>)
 80164ea:	f00c fa25 	bl	8022938 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80164ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164f2:	491e      	ldr	r1, [pc, #120]	@ (801656c <etharp_find_entry+0x2d4>)
 80164f4:	4613      	mov	r3, r2
 80164f6:	005b      	lsls	r3, r3, #1
 80164f8:	4413      	add	r3, r2
 80164fa:	00db      	lsls	r3, r3, #3
 80164fc:	440b      	add	r3, r1
 80164fe:	3314      	adds	r3, #20
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d006      	beq.n	8016514 <etharp_find_entry+0x27c>
 8016506:	4b1a      	ldr	r3, [pc, #104]	@ (8016570 <etharp_find_entry+0x2d8>)
 8016508:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801650c:	491d      	ldr	r1, [pc, #116]	@ (8016584 <etharp_find_entry+0x2ec>)
 801650e:	481a      	ldr	r0, [pc, #104]	@ (8016578 <etharp_find_entry+0x2e0>)
 8016510:	f00c fa12 	bl	8022938 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d00b      	beq.n	8016532 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801651a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	4812      	ldr	r0, [pc, #72]	@ (801656c <etharp_find_entry+0x2d4>)
 8016524:	4613      	mov	r3, r2
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	4403      	add	r3, r0
 801652e:	3304      	adds	r3, #4
 8016530:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016536:	490d      	ldr	r1, [pc, #52]	@ (801656c <etharp_find_entry+0x2d4>)
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	440b      	add	r3, r1
 8016542:	3312      	adds	r3, #18
 8016544:	2200      	movs	r2, #0
 8016546:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801654c:	4907      	ldr	r1, [pc, #28]	@ (801656c <etharp_find_entry+0x2d4>)
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	3308      	adds	r3, #8
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801655e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016562:	4618      	mov	r0, r3
 8016564:	3728      	adds	r7, #40	@ 0x28
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	20008db0 	.word	0x20008db0
 8016570:	080253b0 	.word	0x080253b0
 8016574:	0802542c 	.word	0x0802542c
 8016578:	0802546c 	.word	0x0802546c
 801657c:	08025494 	.word	0x08025494
 8016580:	080254ac 	.word	0x080254ac
 8016584:	080254c0 	.word	0x080254c0

08016588 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b088      	sub	sp, #32
 801658c:	af02      	add	r7, sp, #8
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	607a      	str	r2, [r7, #4]
 8016594:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801659c:	2b06      	cmp	r3, #6
 801659e:	d006      	beq.n	80165ae <etharp_update_arp_entry+0x26>
 80165a0:	4b48      	ldr	r3, [pc, #288]	@ (80166c4 <etharp_update_arp_entry+0x13c>)
 80165a2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80165a6:	4948      	ldr	r1, [pc, #288]	@ (80166c8 <etharp_update_arp_entry+0x140>)
 80165a8:	4848      	ldr	r0, [pc, #288]	@ (80166cc <etharp_update_arp_entry+0x144>)
 80165aa:	f00c f9c5 	bl	8022938 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d012      	beq.n	80165da <etharp_update_arp_entry+0x52>
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d00e      	beq.n	80165da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	68f9      	ldr	r1, [r7, #12]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f001 fe82 	bl	80182cc <ip4_addr_isbroadcast_u32>
 80165c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d105      	bne.n	80165da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165d6:	2be0      	cmp	r3, #224	@ 0xe0
 80165d8:	d102      	bne.n	80165e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80165da:	f06f 030f 	mvn.w	r3, #15
 80165de:	e06c      	b.n	80166ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80165e0:	78fb      	ldrb	r3, [r7, #3]
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	4619      	mov	r1, r3
 80165e6:	68b8      	ldr	r0, [r7, #8]
 80165e8:	f7ff fe56 	bl	8016298 <etharp_find_entry>
 80165ec:	4603      	mov	r3, r0
 80165ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80165f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	da02      	bge.n	80165fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80165f8:	8afb      	ldrh	r3, [r7, #22]
 80165fa:	b25b      	sxtb	r3, r3
 80165fc:	e05d      	b.n	80166ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80165fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016602:	4933      	ldr	r1, [pc, #204]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 8016604:	4613      	mov	r3, r2
 8016606:	005b      	lsls	r3, r3, #1
 8016608:	4413      	add	r3, r2
 801660a:	00db      	lsls	r3, r3, #3
 801660c:	440b      	add	r3, r1
 801660e:	3314      	adds	r3, #20
 8016610:	2202      	movs	r2, #2
 8016612:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016618:	492d      	ldr	r1, [pc, #180]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 801661a:	4613      	mov	r3, r2
 801661c:	005b      	lsls	r3, r3, #1
 801661e:	4413      	add	r3, r2
 8016620:	00db      	lsls	r3, r3, #3
 8016622:	440b      	add	r3, r1
 8016624:	3308      	adds	r3, #8
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801662a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801662e:	4613      	mov	r3, r2
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	4413      	add	r3, r2
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	3308      	adds	r3, #8
 8016638:	4a25      	ldr	r2, [pc, #148]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 801663a:	4413      	add	r3, r2
 801663c:	3304      	adds	r3, #4
 801663e:	2206      	movs	r2, #6
 8016640:	6879      	ldr	r1, [r7, #4]
 8016642:	4618      	mov	r0, r3
 8016644:	f00c fbaf 	bl	8022da6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801664c:	4920      	ldr	r1, [pc, #128]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 801664e:	4613      	mov	r3, r2
 8016650:	005b      	lsls	r3, r3, #1
 8016652:	4413      	add	r3, r2
 8016654:	00db      	lsls	r3, r3, #3
 8016656:	440b      	add	r3, r1
 8016658:	3312      	adds	r3, #18
 801665a:	2200      	movs	r2, #0
 801665c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801665e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016662:	491b      	ldr	r1, [pc, #108]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 8016664:	4613      	mov	r3, r2
 8016666:	005b      	lsls	r3, r3, #1
 8016668:	4413      	add	r3, r2
 801666a:	00db      	lsls	r3, r3, #3
 801666c:	440b      	add	r3, r1
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d021      	beq.n	80166b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016678:	4915      	ldr	r1, [pc, #84]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 801667a:	4613      	mov	r3, r2
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	4413      	add	r3, r2
 8016680:	00db      	lsls	r3, r3, #3
 8016682:	440b      	add	r3, r1
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801668c:	4910      	ldr	r1, [pc, #64]	@ (80166d0 <etharp_update_arp_entry+0x148>)
 801668e:	4613      	mov	r3, r2
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4413      	add	r3, r2
 8016694:	00db      	lsls	r3, r3, #3
 8016696:	440b      	add	r3, r1
 8016698:	2200      	movs	r2, #0
 801669a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80166a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80166a6:	9300      	str	r3, [sp, #0]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6939      	ldr	r1, [r7, #16]
 80166ac:	68f8      	ldr	r0, [r7, #12]
 80166ae:	f00b fdfd 	bl	80222ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80166b2:	6938      	ldr	r0, [r7, #16]
 80166b4:	f004 fa66 	bl	801ab84 <pbuf_free>
  }
  return ERR_OK;
 80166b8:	2300      	movs	r3, #0
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3718      	adds	r7, #24
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	080253b0 	.word	0x080253b0
 80166c8:	080254ec 	.word	0x080254ec
 80166cc:	0802546c 	.word	0x0802546c
 80166d0:	20008db0 	.word	0x20008db0

080166d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166dc:	2300      	movs	r3, #0
 80166de:	60fb      	str	r3, [r7, #12]
 80166e0:	e01e      	b.n	8016720 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80166e2:	4913      	ldr	r1, [pc, #76]	@ (8016730 <etharp_cleanup_netif+0x5c>)
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	4613      	mov	r3, r2
 80166e8:	005b      	lsls	r3, r3, #1
 80166ea:	4413      	add	r3, r2
 80166ec:	00db      	lsls	r3, r3, #3
 80166ee:	440b      	add	r3, r1
 80166f0:	3314      	adds	r3, #20
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80166f6:	7afb      	ldrb	r3, [r7, #11]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d00e      	beq.n	801671a <etharp_cleanup_netif+0x46>
 80166fc:	490c      	ldr	r1, [pc, #48]	@ (8016730 <etharp_cleanup_netif+0x5c>)
 80166fe:	68fa      	ldr	r2, [r7, #12]
 8016700:	4613      	mov	r3, r2
 8016702:	005b      	lsls	r3, r3, #1
 8016704:	4413      	add	r3, r2
 8016706:	00db      	lsls	r3, r3, #3
 8016708:	440b      	add	r3, r1
 801670a:	3308      	adds	r3, #8
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	429a      	cmp	r2, r3
 8016712:	d102      	bne.n	801671a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016714:	68f8      	ldr	r0, [r7, #12]
 8016716:	f7ff fce5 	bl	80160e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	3301      	adds	r3, #1
 801671e:	60fb      	str	r3, [r7, #12]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2b09      	cmp	r3, #9
 8016724:	dddd      	ble.n	80166e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016726:	bf00      	nop
 8016728:	bf00      	nop
 801672a:	3710      	adds	r7, #16
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	20008db0 	.word	0x20008db0

08016734 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016734:	b5b0      	push	{r4, r5, r7, lr}
 8016736:	b08a      	sub	sp, #40	@ 0x28
 8016738:	af04      	add	r7, sp, #16
 801673a:	6078      	str	r0, [r7, #4]
 801673c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d107      	bne.n	8016754 <etharp_input+0x20>
 8016744:	4b3f      	ldr	r3, [pc, #252]	@ (8016844 <etharp_input+0x110>)
 8016746:	f240 228a 	movw	r2, #650	@ 0x28a
 801674a:	493f      	ldr	r1, [pc, #252]	@ (8016848 <etharp_input+0x114>)
 801674c:	483f      	ldr	r0, [pc, #252]	@ (801684c <etharp_input+0x118>)
 801674e:	f00c f8f3 	bl	8022938 <iprintf>
 8016752:	e074      	b.n	801683e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	881b      	ldrh	r3, [r3, #0]
 801675e:	b29b      	uxth	r3, r3
 8016760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016764:	d10c      	bne.n	8016780 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801676a:	2b06      	cmp	r3, #6
 801676c:	d108      	bne.n	8016780 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016772:	2b04      	cmp	r3, #4
 8016774:	d104      	bne.n	8016780 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	885b      	ldrh	r3, [r3, #2]
 801677a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801677c:	2b08      	cmp	r3, #8
 801677e:	d003      	beq.n	8016788 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f004 f9ff 	bl	801ab84 <pbuf_free>
    return;
 8016786:	e05a      	b.n	801683e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	330e      	adds	r3, #14
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	3318      	adds	r3, #24
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	3304      	adds	r3, #4
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d102      	bne.n	80167a8 <etharp_input+0x74>
    for_us = 0;
 80167a2:	2300      	movs	r3, #0
 80167a4:	75fb      	strb	r3, [r7, #23]
 80167a6:	e009      	b.n	80167bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80167a8:	68ba      	ldr	r2, [r7, #8]
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	3304      	adds	r3, #4
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	bf0c      	ite	eq
 80167b4:	2301      	moveq	r3, #1
 80167b6:	2300      	movne	r3, #0
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80167bc:	693b      	ldr	r3, [r7, #16]
 80167be:	f103 0208 	add.w	r2, r3, #8
 80167c2:	7dfb      	ldrb	r3, [r7, #23]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d001      	beq.n	80167cc <etharp_input+0x98>
 80167c8:	2301      	movs	r3, #1
 80167ca:	e000      	b.n	80167ce <etharp_input+0x9a>
 80167cc:	2302      	movs	r3, #2
 80167ce:	f107 010c 	add.w	r1, r7, #12
 80167d2:	6838      	ldr	r0, [r7, #0]
 80167d4:	f7ff fed8 	bl	8016588 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	88db      	ldrh	r3, [r3, #6]
 80167dc:	b29b      	uxth	r3, r3
 80167de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80167e2:	d003      	beq.n	80167ec <etharp_input+0xb8>
 80167e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80167e8:	d01e      	beq.n	8016828 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80167ea:	e025      	b.n	8016838 <etharp_input+0x104>
      if (for_us) {
 80167ec:	7dfb      	ldrb	r3, [r7, #23]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d021      	beq.n	8016836 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016808:	693a      	ldr	r2, [r7, #16]
 801680a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801680c:	2102      	movs	r1, #2
 801680e:	9103      	str	r1, [sp, #12]
 8016810:	f107 010c 	add.w	r1, r7, #12
 8016814:	9102      	str	r1, [sp, #8]
 8016816:	9201      	str	r2, [sp, #4]
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	462b      	mov	r3, r5
 801681c:	4622      	mov	r2, r4
 801681e:	4601      	mov	r1, r0
 8016820:	6838      	ldr	r0, [r7, #0]
 8016822:	f000 faef 	bl	8016e04 <etharp_raw>
      break;
 8016826:	e006      	b.n	8016836 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016828:	f107 030c 	add.w	r3, r7, #12
 801682c:	4619      	mov	r1, r3
 801682e:	6838      	ldr	r0, [r7, #0]
 8016830:	f7fe fa02 	bl	8014c38 <dhcp_arp_reply>
      break;
 8016834:	e000      	b.n	8016838 <etharp_input+0x104>
      break;
 8016836:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f004 f9a3 	bl	801ab84 <pbuf_free>
}
 801683e:	3718      	adds	r7, #24
 8016840:	46bd      	mov	sp, r7
 8016842:	bdb0      	pop	{r4, r5, r7, pc}
 8016844:	080253b0 	.word	0x080253b0
 8016848:	08025544 	.word	0x08025544
 801684c:	0802546c 	.word	0x0802546c

08016850 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af02      	add	r7, sp, #8
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	4613      	mov	r3, r2
 801685c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801685e:	79fa      	ldrb	r2, [r7, #7]
 8016860:	4944      	ldr	r1, [pc, #272]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 8016862:	4613      	mov	r3, r2
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	4413      	add	r3, r2
 8016868:	00db      	lsls	r3, r3, #3
 801686a:	440b      	add	r3, r1
 801686c:	3314      	adds	r3, #20
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b01      	cmp	r3, #1
 8016872:	d806      	bhi.n	8016882 <etharp_output_to_arp_index+0x32>
 8016874:	4b40      	ldr	r3, [pc, #256]	@ (8016978 <etharp_output_to_arp_index+0x128>)
 8016876:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801687a:	4940      	ldr	r1, [pc, #256]	@ (801697c <etharp_output_to_arp_index+0x12c>)
 801687c:	4840      	ldr	r0, [pc, #256]	@ (8016980 <etharp_output_to_arp_index+0x130>)
 801687e:	f00c f85b 	bl	8022938 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016882:	79fa      	ldrb	r2, [r7, #7]
 8016884:	493b      	ldr	r1, [pc, #236]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 8016886:	4613      	mov	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	4413      	add	r3, r2
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	440b      	add	r3, r1
 8016890:	3314      	adds	r3, #20
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	2b02      	cmp	r3, #2
 8016896:	d153      	bne.n	8016940 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016898:	79fa      	ldrb	r2, [r7, #7]
 801689a:	4936      	ldr	r1, [pc, #216]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 801689c:	4613      	mov	r3, r2
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	4413      	add	r3, r2
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	440b      	add	r3, r1
 80168a6:	3312      	adds	r3, #18
 80168a8:	881b      	ldrh	r3, [r3, #0]
 80168aa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80168ae:	d919      	bls.n	80168e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80168b0:	79fa      	ldrb	r2, [r7, #7]
 80168b2:	4613      	mov	r3, r2
 80168b4:	005b      	lsls	r3, r3, #1
 80168b6:	4413      	add	r3, r2
 80168b8:	00db      	lsls	r3, r3, #3
 80168ba:	4a2e      	ldr	r2, [pc, #184]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 80168bc:	4413      	add	r3, r2
 80168be:	3304      	adds	r3, #4
 80168c0:	4619      	mov	r1, r3
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	f000 fb4c 	bl	8016f60 <etharp_request>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d138      	bne.n	8016940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80168ce:	79fa      	ldrb	r2, [r7, #7]
 80168d0:	4928      	ldr	r1, [pc, #160]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 80168d2:	4613      	mov	r3, r2
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	4413      	add	r3, r2
 80168d8:	00db      	lsls	r3, r3, #3
 80168da:	440b      	add	r3, r1
 80168dc:	3314      	adds	r3, #20
 80168de:	2203      	movs	r2, #3
 80168e0:	701a      	strb	r2, [r3, #0]
 80168e2:	e02d      	b.n	8016940 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80168e4:	79fa      	ldrb	r2, [r7, #7]
 80168e6:	4923      	ldr	r1, [pc, #140]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 80168e8:	4613      	mov	r3, r2
 80168ea:	005b      	lsls	r3, r3, #1
 80168ec:	4413      	add	r3, r2
 80168ee:	00db      	lsls	r3, r3, #3
 80168f0:	440b      	add	r3, r1
 80168f2:	3312      	adds	r3, #18
 80168f4:	881b      	ldrh	r3, [r3, #0]
 80168f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80168fa:	d321      	bcc.n	8016940 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80168fc:	79fa      	ldrb	r2, [r7, #7]
 80168fe:	4613      	mov	r3, r2
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4413      	add	r3, r2
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	4a1b      	ldr	r2, [pc, #108]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 8016908:	4413      	add	r3, r2
 801690a:	1d19      	adds	r1, r3, #4
 801690c:	79fa      	ldrb	r2, [r7, #7]
 801690e:	4613      	mov	r3, r2
 8016910:	005b      	lsls	r3, r3, #1
 8016912:	4413      	add	r3, r2
 8016914:	00db      	lsls	r3, r3, #3
 8016916:	3308      	adds	r3, #8
 8016918:	4a16      	ldr	r2, [pc, #88]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 801691a:	4413      	add	r3, r2
 801691c:	3304      	adds	r3, #4
 801691e:	461a      	mov	r2, r3
 8016920:	68f8      	ldr	r0, [r7, #12]
 8016922:	f000 fafb 	bl	8016f1c <etharp_request_dst>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d109      	bne.n	8016940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801692c:	79fa      	ldrb	r2, [r7, #7]
 801692e:	4911      	ldr	r1, [pc, #68]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 8016930:	4613      	mov	r3, r2
 8016932:	005b      	lsls	r3, r3, #1
 8016934:	4413      	add	r3, r2
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	440b      	add	r3, r1
 801693a:	3314      	adds	r3, #20
 801693c:	2203      	movs	r2, #3
 801693e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8016946:	79fa      	ldrb	r2, [r7, #7]
 8016948:	4613      	mov	r3, r2
 801694a:	005b      	lsls	r3, r3, #1
 801694c:	4413      	add	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	3308      	adds	r3, #8
 8016952:	4a08      	ldr	r2, [pc, #32]	@ (8016974 <etharp_output_to_arp_index+0x124>)
 8016954:	4413      	add	r3, r2
 8016956:	3304      	adds	r3, #4
 8016958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801695c:	9200      	str	r2, [sp, #0]
 801695e:	460a      	mov	r2, r1
 8016960:	68b9      	ldr	r1, [r7, #8]
 8016962:	68f8      	ldr	r0, [r7, #12]
 8016964:	f00b fca2 	bl	80222ac <ethernet_output>
 8016968:	4603      	mov	r3, r0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3710      	adds	r7, #16
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20008db0 	.word	0x20008db0
 8016978:	080253b0 	.word	0x080253b0
 801697c:	08025564 	.word	0x08025564
 8016980:	0802546c 	.word	0x0802546c

08016984 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b08a      	sub	sp, #40	@ 0x28
 8016988:	af02      	add	r7, sp, #8
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d106      	bne.n	80169a8 <etharp_output+0x24>
 801699a:	4b73      	ldr	r3, [pc, #460]	@ (8016b68 <etharp_output+0x1e4>)
 801699c:	f240 321e 	movw	r2, #798	@ 0x31e
 80169a0:	4972      	ldr	r1, [pc, #456]	@ (8016b6c <etharp_output+0x1e8>)
 80169a2:	4873      	ldr	r0, [pc, #460]	@ (8016b70 <etharp_output+0x1ec>)
 80169a4:	f00b ffc8 	bl	8022938 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d106      	bne.n	80169bc <etharp_output+0x38>
 80169ae:	4b6e      	ldr	r3, [pc, #440]	@ (8016b68 <etharp_output+0x1e4>)
 80169b0:	f240 321f 	movw	r2, #799	@ 0x31f
 80169b4:	496f      	ldr	r1, [pc, #444]	@ (8016b74 <etharp_output+0x1f0>)
 80169b6:	486e      	ldr	r0, [pc, #440]	@ (8016b70 <etharp_output+0x1ec>)
 80169b8:	f00b ffbe 	bl	8022938 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d106      	bne.n	80169d0 <etharp_output+0x4c>
 80169c2:	4b69      	ldr	r3, [pc, #420]	@ (8016b68 <etharp_output+0x1e4>)
 80169c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80169c8:	496b      	ldr	r1, [pc, #428]	@ (8016b78 <etharp_output+0x1f4>)
 80169ca:	4869      	ldr	r0, [pc, #420]	@ (8016b70 <etharp_output+0x1ec>)
 80169cc:	f00b ffb4 	bl	8022938 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	68f9      	ldr	r1, [r7, #12]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f001 fc78 	bl	80182cc <ip4_addr_isbroadcast_u32>
 80169dc:	4603      	mov	r3, r0
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d002      	beq.n	80169e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80169e2:	4b66      	ldr	r3, [pc, #408]	@ (8016b7c <etharp_output+0x1f8>)
 80169e4:	61fb      	str	r3, [r7, #28]
 80169e6:	e0af      	b.n	8016b48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80169f0:	2be0      	cmp	r3, #224	@ 0xe0
 80169f2:	d118      	bne.n	8016a26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80169f4:	2301      	movs	r3, #1
 80169f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80169f8:	2300      	movs	r3, #0
 80169fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80169fc:	235e      	movs	r3, #94	@ 0x5e
 80169fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3301      	adds	r3, #1
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	3302      	adds	r3, #2
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	3303      	adds	r3, #3
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016a1e:	f107 0310 	add.w	r3, r7, #16
 8016a22:	61fb      	str	r3, [r7, #28]
 8016a24:	e090      	b.n	8016b48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	405a      	eors	r2, r3
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	3308      	adds	r3, #8
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4013      	ands	r3, r2
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d012      	beq.n	8016a64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a44:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	d00b      	beq.n	8016a64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	330c      	adds	r3, #12
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d003      	beq.n	8016a5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	330c      	adds	r3, #12
 8016a5a:	61bb      	str	r3, [r7, #24]
 8016a5c:	e002      	b.n	8016a64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016a5e:	f06f 0303 	mvn.w	r3, #3
 8016a62:	e07d      	b.n	8016b60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a64:	4b46      	ldr	r3, [pc, #280]	@ (8016b80 <etharp_output+0x1fc>)
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	4619      	mov	r1, r3
 8016a6a:	4a46      	ldr	r2, [pc, #280]	@ (8016b84 <etharp_output+0x200>)
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	440b      	add	r3, r1
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	4413      	add	r3, r2
 8016a76:	3314      	adds	r3, #20
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d925      	bls.n	8016aca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a7e:	4b40      	ldr	r3, [pc, #256]	@ (8016b80 <etharp_output+0x1fc>)
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	4619      	mov	r1, r3
 8016a84:	4a3f      	ldr	r2, [pc, #252]	@ (8016b84 <etharp_output+0x200>)
 8016a86:	460b      	mov	r3, r1
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	440b      	add	r3, r1
 8016a8c:	00db      	lsls	r3, r3, #3
 8016a8e:	4413      	add	r3, r2
 8016a90:	3308      	adds	r3, #8
 8016a92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d117      	bne.n	8016aca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	4b38      	ldr	r3, [pc, #224]	@ (8016b80 <etharp_output+0x1fc>)
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	4937      	ldr	r1, [pc, #220]	@ (8016b84 <etharp_output+0x200>)
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	4403      	add	r3, r0
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	440b      	add	r3, r1
 8016ab0:	3304      	adds	r3, #4
 8016ab2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d108      	bne.n	8016aca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016ab8:	4b31      	ldr	r3, [pc, #196]	@ (8016b80 <etharp_output+0x1fc>)
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	461a      	mov	r2, r3
 8016abe:	68b9      	ldr	r1, [r7, #8]
 8016ac0:	68f8      	ldr	r0, [r7, #12]
 8016ac2:	f7ff fec5 	bl	8016850 <etharp_output_to_arp_index>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	e04a      	b.n	8016b60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016aca:	2300      	movs	r3, #0
 8016acc:	75fb      	strb	r3, [r7, #23]
 8016ace:	e031      	b.n	8016b34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ad0:	7dfa      	ldrb	r2, [r7, #23]
 8016ad2:	492c      	ldr	r1, [pc, #176]	@ (8016b84 <etharp_output+0x200>)
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3314      	adds	r3, #20
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d923      	bls.n	8016b2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016ae6:	7dfa      	ldrb	r2, [r7, #23]
 8016ae8:	4926      	ldr	r1, [pc, #152]	@ (8016b84 <etharp_output+0x200>)
 8016aea:	4613      	mov	r3, r2
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	4413      	add	r3, r2
 8016af0:	00db      	lsls	r3, r3, #3
 8016af2:	440b      	add	r3, r1
 8016af4:	3308      	adds	r3, #8
 8016af6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016af8:	68fa      	ldr	r2, [r7, #12]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d117      	bne.n	8016b2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016afe:	69bb      	ldr	r3, [r7, #24]
 8016b00:	6819      	ldr	r1, [r3, #0]
 8016b02:	7dfa      	ldrb	r2, [r7, #23]
 8016b04:	481f      	ldr	r0, [pc, #124]	@ (8016b84 <etharp_output+0x200>)
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	4403      	add	r3, r0
 8016b10:	3304      	adds	r3, #4
 8016b12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016b14:	4299      	cmp	r1, r3
 8016b16:	d10a      	bne.n	8016b2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016b18:	4a19      	ldr	r2, [pc, #100]	@ (8016b80 <etharp_output+0x1fc>)
 8016b1a:	7dfb      	ldrb	r3, [r7, #23]
 8016b1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016b1e:	7dfb      	ldrb	r3, [r7, #23]
 8016b20:	461a      	mov	r2, r3
 8016b22:	68b9      	ldr	r1, [r7, #8]
 8016b24:	68f8      	ldr	r0, [r7, #12]
 8016b26:	f7ff fe93 	bl	8016850 <etharp_output_to_arp_index>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	e018      	b.n	8016b60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b2e:	7dfb      	ldrb	r3, [r7, #23]
 8016b30:	3301      	adds	r3, #1
 8016b32:	75fb      	strb	r3, [r7, #23]
 8016b34:	7dfb      	ldrb	r3, [r7, #23]
 8016b36:	2b09      	cmp	r3, #9
 8016b38:	d9ca      	bls.n	8016ad0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016b3a:	68ba      	ldr	r2, [r7, #8]
 8016b3c:	69b9      	ldr	r1, [r7, #24]
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	f000 f822 	bl	8016b88 <etharp_query>
 8016b44:	4603      	mov	r3, r0
 8016b46:	e00b      	b.n	8016b60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8016b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016b52:	9300      	str	r3, [sp, #0]
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	68b9      	ldr	r1, [r7, #8]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f00b fba7 	bl	80222ac <ethernet_output>
 8016b5e:	4603      	mov	r3, r0
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3720      	adds	r7, #32
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}
 8016b68:	080253b0 	.word	0x080253b0
 8016b6c:	08025544 	.word	0x08025544
 8016b70:	0802546c 	.word	0x0802546c
 8016b74:	08025594 	.word	0x08025594
 8016b78:	08025534 	.word	0x08025534
 8016b7c:	08028d58 	.word	0x08028d58
 8016b80:	20008ea0 	.word	0x20008ea0
 8016b84:	20008db0 	.word	0x20008db0

08016b88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b08c      	sub	sp, #48	@ 0x30
 8016b8c:	af02      	add	r7, sp, #8
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	332e      	adds	r3, #46	@ 0x2e
 8016b98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016b9a:	23ff      	movs	r3, #255	@ 0xff
 8016b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	68f9      	ldr	r1, [r7, #12]
 8016baa:	4618      	mov	r0, r3
 8016bac:	f001 fb8e 	bl	80182cc <ip4_addr_isbroadcast_u32>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d10c      	bne.n	8016bd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bbe:	2be0      	cmp	r3, #224	@ 0xe0
 8016bc0:	d006      	beq.n	8016bd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d003      	beq.n	8016bd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d102      	bne.n	8016bd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016bd0:	f06f 030f 	mvn.w	r3, #15
 8016bd4:	e101      	b.n	8016dda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016bd6:	68fa      	ldr	r2, [r7, #12]
 8016bd8:	2101      	movs	r1, #1
 8016bda:	68b8      	ldr	r0, [r7, #8]
 8016bdc:	f7ff fb5c 	bl	8016298 <etharp_find_entry>
 8016be0:	4603      	mov	r3, r0
 8016be2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	da02      	bge.n	8016bf2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016bec:	8a7b      	ldrh	r3, [r7, #18]
 8016bee:	b25b      	sxtb	r3, r3
 8016bf0:	e0f3      	b.n	8016dda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016bf2:	8a7b      	ldrh	r3, [r7, #18]
 8016bf4:	2b7e      	cmp	r3, #126	@ 0x7e
 8016bf6:	d906      	bls.n	8016c06 <etharp_query+0x7e>
 8016bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8016de4 <etharp_query+0x25c>)
 8016bfa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016bfe:	497a      	ldr	r1, [pc, #488]	@ (8016de8 <etharp_query+0x260>)
 8016c00:	487a      	ldr	r0, [pc, #488]	@ (8016dec <etharp_query+0x264>)
 8016c02:	f00b fe99 	bl	8022938 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016c06:	8a7b      	ldrh	r3, [r7, #18]
 8016c08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016c0a:	7c7a      	ldrb	r2, [r7, #17]
 8016c0c:	4978      	ldr	r1, [pc, #480]	@ (8016df0 <etharp_query+0x268>)
 8016c0e:	4613      	mov	r3, r2
 8016c10:	005b      	lsls	r3, r3, #1
 8016c12:	4413      	add	r3, r2
 8016c14:	00db      	lsls	r3, r3, #3
 8016c16:	440b      	add	r3, r1
 8016c18:	3314      	adds	r3, #20
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d115      	bne.n	8016c4c <etharp_query+0xc4>
    is_new_entry = 1;
 8016c20:	2301      	movs	r3, #1
 8016c22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c24:	7c7a      	ldrb	r2, [r7, #17]
 8016c26:	4972      	ldr	r1, [pc, #456]	@ (8016df0 <etharp_query+0x268>)
 8016c28:	4613      	mov	r3, r2
 8016c2a:	005b      	lsls	r3, r3, #1
 8016c2c:	4413      	add	r3, r2
 8016c2e:	00db      	lsls	r3, r3, #3
 8016c30:	440b      	add	r3, r1
 8016c32:	3314      	adds	r3, #20
 8016c34:	2201      	movs	r2, #1
 8016c36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016c38:	7c7a      	ldrb	r2, [r7, #17]
 8016c3a:	496d      	ldr	r1, [pc, #436]	@ (8016df0 <etharp_query+0x268>)
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	005b      	lsls	r3, r3, #1
 8016c40:	4413      	add	r3, r2
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	440b      	add	r3, r1
 8016c46:	3308      	adds	r3, #8
 8016c48:	68fa      	ldr	r2, [r7, #12]
 8016c4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016c4c:	7c7a      	ldrb	r2, [r7, #17]
 8016c4e:	4968      	ldr	r1, [pc, #416]	@ (8016df0 <etharp_query+0x268>)
 8016c50:	4613      	mov	r3, r2
 8016c52:	005b      	lsls	r3, r3, #1
 8016c54:	4413      	add	r3, r2
 8016c56:	00db      	lsls	r3, r3, #3
 8016c58:	440b      	add	r3, r1
 8016c5a:	3314      	adds	r3, #20
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d011      	beq.n	8016c86 <etharp_query+0xfe>
 8016c62:	7c7a      	ldrb	r2, [r7, #17]
 8016c64:	4962      	ldr	r1, [pc, #392]	@ (8016df0 <etharp_query+0x268>)
 8016c66:	4613      	mov	r3, r2
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	4413      	add	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	440b      	add	r3, r1
 8016c70:	3314      	adds	r3, #20
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d806      	bhi.n	8016c86 <etharp_query+0xfe>
 8016c78:	4b5a      	ldr	r3, [pc, #360]	@ (8016de4 <etharp_query+0x25c>)
 8016c7a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016c7e:	495d      	ldr	r1, [pc, #372]	@ (8016df4 <etharp_query+0x26c>)
 8016c80:	485a      	ldr	r0, [pc, #360]	@ (8016dec <etharp_query+0x264>)
 8016c82:	f00b fe59 	bl	8022938 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d102      	bne.n	8016c92 <etharp_query+0x10a>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d10c      	bne.n	8016cac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016c92:	68b9      	ldr	r1, [r7, #8]
 8016c94:	68f8      	ldr	r0, [r7, #12]
 8016c96:	f000 f963 	bl	8016f60 <etharp_request>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d102      	bne.n	8016cac <etharp_query+0x124>
      return result;
 8016ca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016caa:	e096      	b.n	8016dda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d106      	bne.n	8016cc0 <etharp_query+0x138>
 8016cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8016de4 <etharp_query+0x25c>)
 8016cb4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016cb8:	494f      	ldr	r1, [pc, #316]	@ (8016df8 <etharp_query+0x270>)
 8016cba:	484c      	ldr	r0, [pc, #304]	@ (8016dec <etharp_query+0x264>)
 8016cbc:	f00b fe3c 	bl	8022938 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016cc0:	7c7a      	ldrb	r2, [r7, #17]
 8016cc2:	494b      	ldr	r1, [pc, #300]	@ (8016df0 <etharp_query+0x268>)
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	4413      	add	r3, r2
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	440b      	add	r3, r1
 8016cce:	3314      	adds	r3, #20
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d917      	bls.n	8016d06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016cd6:	4a49      	ldr	r2, [pc, #292]	@ (8016dfc <etharp_query+0x274>)
 8016cd8:	7c7b      	ldrb	r3, [r7, #17]
 8016cda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016cdc:	7c7a      	ldrb	r2, [r7, #17]
 8016cde:	4613      	mov	r3, r2
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4413      	add	r3, r2
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	3308      	adds	r3, #8
 8016ce8:	4a41      	ldr	r2, [pc, #260]	@ (8016df0 <etharp_query+0x268>)
 8016cea:	4413      	add	r3, r2
 8016cec:	3304      	adds	r3, #4
 8016cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016cf2:	9200      	str	r2, [sp, #0]
 8016cf4:	697a      	ldr	r2, [r7, #20]
 8016cf6:	6879      	ldr	r1, [r7, #4]
 8016cf8:	68f8      	ldr	r0, [r7, #12]
 8016cfa:	f00b fad7 	bl	80222ac <ethernet_output>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016d04:	e067      	b.n	8016dd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d06:	7c7a      	ldrb	r2, [r7, #17]
 8016d08:	4939      	ldr	r1, [pc, #228]	@ (8016df0 <etharp_query+0x268>)
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	005b      	lsls	r3, r3, #1
 8016d0e:	4413      	add	r3, r2
 8016d10:	00db      	lsls	r3, r3, #3
 8016d12:	440b      	add	r3, r1
 8016d14:	3314      	adds	r3, #20
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	2b01      	cmp	r3, #1
 8016d1a:	d15c      	bne.n	8016dd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d24:	e01c      	b.n	8016d60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d26:	69fb      	ldr	r3, [r7, #28]
 8016d28:	895a      	ldrh	r2, [r3, #10]
 8016d2a:	69fb      	ldr	r3, [r7, #28]
 8016d2c:	891b      	ldrh	r3, [r3, #8]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d10a      	bne.n	8016d48 <etharp_query+0x1c0>
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d006      	beq.n	8016d48 <etharp_query+0x1c0>
 8016d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8016de4 <etharp_query+0x25c>)
 8016d3c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016d40:	492f      	ldr	r1, [pc, #188]	@ (8016e00 <etharp_query+0x278>)
 8016d42:	482a      	ldr	r0, [pc, #168]	@ (8016dec <etharp_query+0x264>)
 8016d44:	f00b fdf8 	bl	8022938 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	7b1b      	ldrb	r3, [r3, #12]
 8016d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d002      	beq.n	8016d5a <etharp_query+0x1d2>
        copy_needed = 1;
 8016d54:	2301      	movs	r3, #1
 8016d56:	61bb      	str	r3, [r7, #24]
        break;
 8016d58:	e005      	b.n	8016d66 <etharp_query+0x1de>
      }
      p = p->next;
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d1df      	bne.n	8016d26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d007      	beq.n	8016d7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016d6c:	687a      	ldr	r2, [r7, #4]
 8016d6e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016d72:	200e      	movs	r0, #14
 8016d74:	f004 fa10 	bl	801b198 <pbuf_clone>
 8016d78:	61f8      	str	r0, [r7, #28]
 8016d7a:	e004      	b.n	8016d86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016d80:	69f8      	ldr	r0, [r7, #28]
 8016d82:	f003 ffa5 	bl	801acd0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d021      	beq.n	8016dd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016d8c:	7c7a      	ldrb	r2, [r7, #17]
 8016d8e:	4918      	ldr	r1, [pc, #96]	@ (8016df0 <etharp_query+0x268>)
 8016d90:	4613      	mov	r3, r2
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	4413      	add	r3, r2
 8016d96:	00db      	lsls	r3, r3, #3
 8016d98:	440b      	add	r3, r1
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00a      	beq.n	8016db6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016da0:	7c7a      	ldrb	r2, [r7, #17]
 8016da2:	4913      	ldr	r1, [pc, #76]	@ (8016df0 <etharp_query+0x268>)
 8016da4:	4613      	mov	r3, r2
 8016da6:	005b      	lsls	r3, r3, #1
 8016da8:	4413      	add	r3, r2
 8016daa:	00db      	lsls	r3, r3, #3
 8016dac:	440b      	add	r3, r1
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	4618      	mov	r0, r3
 8016db2:	f003 fee7 	bl	801ab84 <pbuf_free>
      }
      arp_table[i].q = p;
 8016db6:	7c7a      	ldrb	r2, [r7, #17]
 8016db8:	490d      	ldr	r1, [pc, #52]	@ (8016df0 <etharp_query+0x268>)
 8016dba:	4613      	mov	r3, r2
 8016dbc:	005b      	lsls	r3, r3, #1
 8016dbe:	4413      	add	r3, r2
 8016dc0:	00db      	lsls	r3, r3, #3
 8016dc2:	440b      	add	r3, r1
 8016dc4:	69fa      	ldr	r2, [r7, #28]
 8016dc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016dce:	e002      	b.n	8016dd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016dd0:	23ff      	movs	r3, #255	@ 0xff
 8016dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3728      	adds	r7, #40	@ 0x28
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
 8016de2:	bf00      	nop
 8016de4:	080253b0 	.word	0x080253b0
 8016de8:	080255a0 	.word	0x080255a0
 8016dec:	0802546c 	.word	0x0802546c
 8016df0:	20008db0 	.word	0x20008db0
 8016df4:	080255b0 	.word	0x080255b0
 8016df8:	08025594 	.word	0x08025594
 8016dfc:	20008ea0 	.word	0x20008ea0
 8016e00:	080255d8 	.word	0x080255d8

08016e04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b08a      	sub	sp, #40	@ 0x28
 8016e08:	af02      	add	r7, sp, #8
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
 8016e10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e12:	2300      	movs	r3, #0
 8016e14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d106      	bne.n	8016e2a <etharp_raw+0x26>
 8016e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8016f08 <etharp_raw+0x104>)
 8016e1e:	f240 4257 	movw	r2, #1111	@ 0x457
 8016e22:	493a      	ldr	r1, [pc, #232]	@ (8016f0c <etharp_raw+0x108>)
 8016e24:	483a      	ldr	r0, [pc, #232]	@ (8016f10 <etharp_raw+0x10c>)
 8016e26:	f00b fd87 	bl	8022938 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e2e:	211c      	movs	r1, #28
 8016e30:	200e      	movs	r0, #14
 8016e32:	f003 fb91 	bl	801a558 <pbuf_alloc>
 8016e36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016e38:	69bb      	ldr	r3, [r7, #24]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d102      	bne.n	8016e44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e42:	e05d      	b.n	8016f00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016e44:	69bb      	ldr	r3, [r7, #24]
 8016e46:	895b      	ldrh	r3, [r3, #10]
 8016e48:	2b1b      	cmp	r3, #27
 8016e4a:	d806      	bhi.n	8016e5a <etharp_raw+0x56>
 8016e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8016f08 <etharp_raw+0x104>)
 8016e4e:	f240 4262 	movw	r2, #1122	@ 0x462
 8016e52:	4930      	ldr	r1, [pc, #192]	@ (8016f14 <etharp_raw+0x110>)
 8016e54:	482e      	ldr	r0, [pc, #184]	@ (8016f10 <etharp_raw+0x10c>)
 8016e56:	f00b fd6f 	bl	8022938 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016e60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e62:	4618      	mov	r0, r3
 8016e64:	f002 f9dc 	bl	8019220 <lwip_htons>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016e76:	2b06      	cmp	r3, #6
 8016e78:	d006      	beq.n	8016e88 <etharp_raw+0x84>
 8016e7a:	4b23      	ldr	r3, [pc, #140]	@ (8016f08 <etharp_raw+0x104>)
 8016e7c:	f240 4269 	movw	r2, #1129	@ 0x469
 8016e80:	4925      	ldr	r1, [pc, #148]	@ (8016f18 <etharp_raw+0x114>)
 8016e82:	4823      	ldr	r0, [pc, #140]	@ (8016f10 <etharp_raw+0x10c>)
 8016e84:	f00b fd58 	bl	8022938 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	3308      	adds	r3, #8
 8016e8c:	2206      	movs	r2, #6
 8016e8e:	6839      	ldr	r1, [r7, #0]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f00b ff88 	bl	8022da6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	3312      	adds	r3, #18
 8016e9a:	2206      	movs	r2, #6
 8016e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f00b ff81 	bl	8022da6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	330e      	adds	r3, #14
 8016ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016eaa:	6812      	ldr	r2, [r2, #0]
 8016eac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	3318      	adds	r3, #24
 8016eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016eb4:	6812      	ldr	r2, [r2, #0]
 8016eb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	701a      	strb	r2, [r3, #0]
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f042 0201 	orr.w	r2, r2, #1
 8016ec4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	f042 0208 	orr.w	r2, r2, #8
 8016ece:	709a      	strb	r2, [r3, #2]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	2206      	movs	r2, #6
 8016ed8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	2204      	movs	r2, #4
 8016ede:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016ee0:	f640 0306 	movw	r3, #2054	@ 0x806
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	68ba      	ldr	r2, [r7, #8]
 8016eea:	69b9      	ldr	r1, [r7, #24]
 8016eec:	68f8      	ldr	r0, [r7, #12]
 8016eee:	f00b f9dd 	bl	80222ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016ef2:	69b8      	ldr	r0, [r7, #24]
 8016ef4:	f003 fe46 	bl	801ab84 <pbuf_free>
  p = NULL;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016efc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3720      	adds	r7, #32
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	080253b0 	.word	0x080253b0
 8016f0c:	08025544 	.word	0x08025544
 8016f10:	0802546c 	.word	0x0802546c
 8016f14:	080255f4 	.word	0x080255f4
 8016f18:	08025628 	.word	0x08025628

08016f1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b088      	sub	sp, #32
 8016f20:	af04      	add	r7, sp, #16
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f38:	2201      	movs	r2, #1
 8016f3a:	9203      	str	r2, [sp, #12]
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	9202      	str	r2, [sp, #8]
 8016f40:	4a06      	ldr	r2, [pc, #24]	@ (8016f5c <etharp_request_dst+0x40>)
 8016f42:	9201      	str	r2, [sp, #4]
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	4603      	mov	r3, r0
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	68f8      	ldr	r0, [r7, #12]
 8016f4c:	f7ff ff5a 	bl	8016e04 <etharp_raw>
 8016f50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3710      	adds	r7, #16
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	08028d60 	.word	0x08028d60

08016f60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016f6a:	4a05      	ldr	r2, [pc, #20]	@ (8016f80 <etharp_request+0x20>)
 8016f6c:	6839      	ldr	r1, [r7, #0]
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7ff ffd4 	bl	8016f1c <etharp_request_dst>
 8016f74:	4603      	mov	r3, r0
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3708      	adds	r7, #8
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	08028d58 	.word	0x08028d58

08016f84 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b08e      	sub	sp, #56	@ 0x38
 8016f88:	af04      	add	r7, sp, #16
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016f8e:	4b82      	ldr	r3, [pc, #520]	@ (8017198 <icmp_input+0x214>)
 8016f90:	689b      	ldr	r3, [r3, #8]
 8016f92:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	f003 030f 	and.w	r3, r3, #15
 8016f9c:	b2db      	uxtb	r3, r3
 8016f9e:	009b      	lsls	r3, r3, #2
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016fa6:	2b13      	cmp	r3, #19
 8016fa8:	f240 80de 	bls.w	8017168 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	895b      	ldrh	r3, [r3, #10]
 8016fb0:	2b03      	cmp	r3, #3
 8016fb2:	f240 80db 	bls.w	801716c <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016fc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f000 80c8 	beq.w	801715a <icmp_input+0x1d6>
 8016fca:	2b08      	cmp	r3, #8
 8016fcc:	f040 80c8 	bne.w	8017160 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016fd0:	4b72      	ldr	r3, [pc, #456]	@ (801719c <icmp_input+0x218>)
 8016fd2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016fd4:	4b70      	ldr	r3, [pc, #448]	@ (8017198 <icmp_input+0x214>)
 8016fd6:	695b      	ldr	r3, [r3, #20]
 8016fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fdc:	2be0      	cmp	r3, #224	@ 0xe0
 8016fde:	f000 80cc 	beq.w	801717a <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8017198 <icmp_input+0x214>)
 8016fe4:	695b      	ldr	r3, [r3, #20]
 8016fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8017198 <icmp_input+0x214>)
 8016fe8:	6812      	ldr	r2, [r2, #0]
 8016fea:	4611      	mov	r1, r2
 8016fec:	4618      	mov	r0, r3
 8016fee:	f001 f96d 	bl	80182cc <ip4_addr_isbroadcast_u32>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f040 80c2 	bne.w	801717e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	891b      	ldrh	r3, [r3, #8]
 8016ffe:	2b07      	cmp	r3, #7
 8017000:	f240 80b6 	bls.w	8017170 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017006:	330e      	adds	r3, #14
 8017008:	4619      	mov	r1, r3
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f003 fcf2 	bl	801a9f4 <pbuf_add_header>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d04b      	beq.n	80170ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	891a      	ldrh	r2, [r3, #8]
 801701a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801701c:	4413      	add	r3, r2
 801701e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	891b      	ldrh	r3, [r3, #8]
 8017024:	8b7a      	ldrh	r2, [r7, #26]
 8017026:	429a      	cmp	r2, r3
 8017028:	f0c0 80ab 	bcc.w	8017182 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801702c:	8b7b      	ldrh	r3, [r7, #26]
 801702e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017032:	4619      	mov	r1, r3
 8017034:	200e      	movs	r0, #14
 8017036:	f003 fa8f 	bl	801a558 <pbuf_alloc>
 801703a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	2b00      	cmp	r3, #0
 8017040:	f000 80a1 	beq.w	8017186 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	895b      	ldrh	r3, [r3, #10]
 8017048:	461a      	mov	r2, r3
 801704a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801704c:	3308      	adds	r3, #8
 801704e:	429a      	cmp	r2, r3
 8017050:	d203      	bcs.n	801705a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017052:	6978      	ldr	r0, [r7, #20]
 8017054:	f003 fd96 	bl	801ab84 <pbuf_free>
          goto icmperr;
 8017058:	e096      	b.n	8017188 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017062:	4618      	mov	r0, r3
 8017064:	f00b fe9f 	bl	8022da6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801706a:	4619      	mov	r1, r3
 801706c:	6978      	ldr	r0, [r7, #20]
 801706e:	f003 fcd1 	bl	801aa14 <pbuf_remove_header>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d009      	beq.n	801708c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017078:	4b49      	ldr	r3, [pc, #292]	@ (80171a0 <icmp_input+0x21c>)
 801707a:	22b6      	movs	r2, #182	@ 0xb6
 801707c:	4949      	ldr	r1, [pc, #292]	@ (80171a4 <icmp_input+0x220>)
 801707e:	484a      	ldr	r0, [pc, #296]	@ (80171a8 <icmp_input+0x224>)
 8017080:	f00b fc5a 	bl	8022938 <iprintf>
          pbuf_free(r);
 8017084:	6978      	ldr	r0, [r7, #20]
 8017086:	f003 fd7d 	bl	801ab84 <pbuf_free>
          goto icmperr;
 801708a:	e07d      	b.n	8017188 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801708c:	6879      	ldr	r1, [r7, #4]
 801708e:	6978      	ldr	r0, [r7, #20]
 8017090:	f003 feac 	bl	801adec <pbuf_copy>
 8017094:	4603      	mov	r3, r0
 8017096:	2b00      	cmp	r3, #0
 8017098:	d003      	beq.n	80170a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801709a:	6978      	ldr	r0, [r7, #20]
 801709c:	f003 fd72 	bl	801ab84 <pbuf_free>
          goto icmperr;
 80170a0:	e072      	b.n	8017188 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f003 fd6e 	bl	801ab84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	607b      	str	r3, [r7, #4]
 80170ac:	e00f      	b.n	80170ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80170ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170b0:	330e      	adds	r3, #14
 80170b2:	4619      	mov	r1, r3
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f003 fcad 	bl	801aa14 <pbuf_remove_header>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d006      	beq.n	80170ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80170c0:	4b37      	ldr	r3, [pc, #220]	@ (80171a0 <icmp_input+0x21c>)
 80170c2:	22c7      	movs	r2, #199	@ 0xc7
 80170c4:	4939      	ldr	r1, [pc, #228]	@ (80171ac <icmp_input+0x228>)
 80170c6:	4838      	ldr	r0, [pc, #224]	@ (80171a8 <icmp_input+0x224>)
 80170c8:	f00b fc36 	bl	8022938 <iprintf>
          goto icmperr;
 80170cc:	e05c      	b.n	8017188 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	685b      	ldr	r3, [r3, #4]
 80170d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80170d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170d6:	4619      	mov	r1, r3
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f003 fc8b 	bl	801a9f4 <pbuf_add_header>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d13c      	bne.n	801715e <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	681a      	ldr	r2, [r3, #0]
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80170f2:	4b29      	ldr	r3, [pc, #164]	@ (8017198 <icmp_input+0x214>)
 80170f4:	691a      	ldr	r2, [r3, #16]
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	2200      	movs	r2, #0
 80170fe:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	885b      	ldrh	r3, [r3, #2]
 8017104:	b29b      	uxth	r3, r3
 8017106:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801710a:	4293      	cmp	r3, r2
 801710c:	d907      	bls.n	801711e <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	885b      	ldrh	r3, [r3, #2]
 8017112:	b29b      	uxth	r3, r3
 8017114:	3309      	adds	r3, #9
 8017116:	b29a      	uxth	r2, r3
 8017118:	693b      	ldr	r3, [r7, #16]
 801711a:	805a      	strh	r2, [r3, #2]
 801711c:	e006      	b.n	801712c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801711e:	693b      	ldr	r3, [r7, #16]
 8017120:	885b      	ldrh	r3, [r3, #2]
 8017122:	b29b      	uxth	r3, r3
 8017124:	3308      	adds	r3, #8
 8017126:	b29a      	uxth	r2, r3
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	22ff      	movs	r2, #255	@ 0xff
 8017130:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	2200      	movs	r2, #0
 8017136:	729a      	strb	r2, [r3, #10]
 8017138:	2200      	movs	r2, #0
 801713a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	9302      	str	r3, [sp, #8]
 8017140:	2301      	movs	r3, #1
 8017142:	9301      	str	r3, [sp, #4]
 8017144:	2300      	movs	r3, #0
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	23ff      	movs	r3, #255	@ 0xff
 801714a:	2200      	movs	r2, #0
 801714c:	69f9      	ldr	r1, [r7, #28]
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 ff6e 	bl	8018030 <ip4_output_if>
 8017154:	4603      	mov	r3, r0
 8017156:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017158:	e001      	b.n	801715e <icmp_input+0x1da>
      break;
 801715a:	bf00      	nop
 801715c:	e000      	b.n	8017160 <icmp_input+0x1dc>
      break;
 801715e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f003 fd0f 	bl	801ab84 <pbuf_free>
  return;
 8017166:	e013      	b.n	8017190 <icmp_input+0x20c>
    goto lenerr;
 8017168:	bf00      	nop
 801716a:	e002      	b.n	8017172 <icmp_input+0x1ee>
    goto lenerr;
 801716c:	bf00      	nop
 801716e:	e000      	b.n	8017172 <icmp_input+0x1ee>
        goto lenerr;
 8017170:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f003 fd06 	bl	801ab84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017178:	e00a      	b.n	8017190 <icmp_input+0x20c>
        goto icmperr;
 801717a:	bf00      	nop
 801717c:	e004      	b.n	8017188 <icmp_input+0x204>
        goto icmperr;
 801717e:	bf00      	nop
 8017180:	e002      	b.n	8017188 <icmp_input+0x204>
          goto icmperr;
 8017182:	bf00      	nop
 8017184:	e000      	b.n	8017188 <icmp_input+0x204>
          goto icmperr;
 8017186:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f003 fcfb 	bl	801ab84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801718e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017190:	3728      	adds	r7, #40	@ 0x28
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}
 8017196:	bf00      	nop
 8017198:	20008ebc 	.word	0x20008ebc
 801719c:	20008ed0 	.word	0x20008ed0
 80171a0:	0802566c 	.word	0x0802566c
 80171a4:	080256e4 	.word	0x080256e4
 80171a8:	0802571c 	.word	0x0802571c
 80171ac:	08025744 	.word	0x08025744

080171b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
 80171b8:	460b      	mov	r3, r1
 80171ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80171bc:	78fb      	ldrb	r3, [r7, #3]
 80171be:	461a      	mov	r2, r3
 80171c0:	2103      	movs	r1, #3
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f000 f814 	bl	80171f0 <icmp_send_response>
}
 80171c8:	bf00      	nop
 80171ca:	3708      	adds	r7, #8
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	460b      	mov	r3, r1
 80171da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80171dc:	78fb      	ldrb	r3, [r7, #3]
 80171de:	461a      	mov	r2, r3
 80171e0:	210b      	movs	r1, #11
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f000 f804 	bl	80171f0 <icmp_send_response>
}
 80171e8:	bf00      	nop
 80171ea:	3708      	adds	r7, #8
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b08c      	sub	sp, #48	@ 0x30
 80171f4:	af04      	add	r7, sp, #16
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	460b      	mov	r3, r1
 80171fa:	70fb      	strb	r3, [r7, #3]
 80171fc:	4613      	mov	r3, r2
 80171fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017200:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017204:	2124      	movs	r1, #36	@ 0x24
 8017206:	2022      	movs	r0, #34	@ 0x22
 8017208:	f003 f9a6 	bl	801a558 <pbuf_alloc>
 801720c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801720e:	69fb      	ldr	r3, [r7, #28]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d056      	beq.n	80172c2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	895b      	ldrh	r3, [r3, #10]
 8017218:	2b23      	cmp	r3, #35	@ 0x23
 801721a:	d806      	bhi.n	801722a <icmp_send_response+0x3a>
 801721c:	4b2b      	ldr	r3, [pc, #172]	@ (80172cc <icmp_send_response+0xdc>)
 801721e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017222:	492b      	ldr	r1, [pc, #172]	@ (80172d0 <icmp_send_response+0xe0>)
 8017224:	482b      	ldr	r0, [pc, #172]	@ (80172d4 <icmp_send_response+0xe4>)
 8017226:	f00b fb87 	bl	8022938 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017230:	69fb      	ldr	r3, [r7, #28]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	78fa      	ldrb	r2, [r7, #3]
 801723a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	78ba      	ldrb	r2, [r7, #2]
 8017240:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	2200      	movs	r2, #0
 8017246:	711a      	strb	r2, [r3, #4]
 8017248:	2200      	movs	r2, #0
 801724a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	2200      	movs	r2, #0
 8017250:	719a      	strb	r2, [r3, #6]
 8017252:	2200      	movs	r2, #0
 8017254:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	f103 0008 	add.w	r0, r3, #8
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	685b      	ldr	r3, [r3, #4]
 8017262:	221c      	movs	r2, #28
 8017264:	4619      	mov	r1, r3
 8017266:	f00b fd9e 	bl	8022da6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017270:	f107 030c 	add.w	r3, r7, #12
 8017274:	4618      	mov	r0, r3
 8017276:	f000 fcb9 	bl	8017bec <ip4_route>
 801727a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d01b      	beq.n	80172ba <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	2200      	movs	r2, #0
 8017286:	709a      	strb	r2, [r3, #2]
 8017288:	2200      	movs	r2, #0
 801728a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801728c:	69fb      	ldr	r3, [r7, #28]
 801728e:	895b      	ldrh	r3, [r3, #10]
 8017290:	4619      	mov	r1, r3
 8017292:	6978      	ldr	r0, [r7, #20]
 8017294:	f002 f84f 	bl	8019336 <inet_chksum>
 8017298:	4603      	mov	r3, r0
 801729a:	461a      	mov	r2, r3
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80172a0:	f107 020c 	add.w	r2, r7, #12
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	9302      	str	r3, [sp, #8]
 80172a8:	2301      	movs	r3, #1
 80172aa:	9301      	str	r3, [sp, #4]
 80172ac:	2300      	movs	r3, #0
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	23ff      	movs	r3, #255	@ 0xff
 80172b2:	2100      	movs	r1, #0
 80172b4:	69f8      	ldr	r0, [r7, #28]
 80172b6:	f000 febb 	bl	8018030 <ip4_output_if>
  }
  pbuf_free(q);
 80172ba:	69f8      	ldr	r0, [r7, #28]
 80172bc:	f003 fc62 	bl	801ab84 <pbuf_free>
 80172c0:	e000      	b.n	80172c4 <icmp_send_response+0xd4>
    return;
 80172c2:	bf00      	nop
}
 80172c4:	3720      	adds	r7, #32
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	bf00      	nop
 80172cc:	0802566c 	.word	0x0802566c
 80172d0:	08025778 	.word	0x08025778
 80172d4:	0802571c 	.word	0x0802571c

080172d8 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 80172d8:	b480      	push	{r7}
 80172da:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80172dc:	4b05      	ldr	r3, [pc, #20]	@ (80172f4 <igmp_init+0x1c>)
 80172de:	4a06      	ldr	r2, [pc, #24]	@ (80172f8 <igmp_init+0x20>)
 80172e0:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80172e2:	4b06      	ldr	r3, [pc, #24]	@ (80172fc <igmp_init+0x24>)
 80172e4:	4a06      	ldr	r2, [pc, #24]	@ (8017300 <igmp_init+0x28>)
 80172e6:	601a      	str	r2, [r3, #0]
}
 80172e8:	bf00      	nop
 80172ea:	46bd      	mov	sp, r7
 80172ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f0:	4770      	bx	lr
 80172f2:	bf00      	nop
 80172f4:	20008ea4 	.word	0x20008ea4
 80172f8:	010000e0 	.word	0x010000e0
 80172fc:	20008ea8 	.word	0x20008ea8
 8017300:	020000e0 	.word	0x020000e0

08017304 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b084      	sub	sp, #16
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801730c:	4911      	ldr	r1, [pc, #68]	@ (8017354 <igmp_start+0x50>)
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f000 f85e 	bl	80173d0 <igmp_lookup_group>
 8017314:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d014      	beq.n	8017346 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	2202      	movs	r2, #2
 8017320:	725a      	strb	r2, [r3, #9]
    group->use++;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	7b1b      	ldrb	r3, [r3, #12]
 8017326:	3301      	adds	r3, #1
 8017328:	b2da      	uxtb	r2, r3
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017332:	2b00      	cmp	r3, #0
 8017334:	d005      	beq.n	8017342 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801733a:	2201      	movs	r2, #1
 801733c:	4905      	ldr	r1, [pc, #20]	@ (8017354 <igmp_start+0x50>)
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	4798      	blx	r3
    }

    return ERR_OK;
 8017342:	2300      	movs	r3, #0
 8017344:	e001      	b.n	801734a <igmp_start+0x46>
  }

  return ERR_MEM;
 8017346:	f04f 33ff 	mov.w	r3, #4294967295
}
 801734a:	4618      	mov	r0, r3
 801734c:	3710      	adds	r7, #16
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	20008ea4 	.word	0x20008ea4

08017358 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017364:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d00a      	beq.n	8017382 <igmp_report_groups+0x2a>
    group = group->next;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8017372:	e006      	b.n	8017382 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8017374:	2105      	movs	r1, #5
 8017376:	68f8      	ldr	r0, [r7, #12]
 8017378:	f000 fb7d 	bl	8017a76 <igmp_delaying_member>
    group = group->next;
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d1f5      	bne.n	8017374 <igmp_report_groups+0x1c>
  }
}
 8017388:	bf00      	nop
 801738a:	bf00      	nop
 801738c:	3710      	adds	r7, #16
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}

08017392 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8017392:	b480      	push	{r7}
 8017394:	b085      	sub	sp, #20
 8017396:	af00      	add	r7, sp, #0
 8017398:	6078      	str	r0, [r7, #4]
 801739a:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173a0:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 80173a2:	e00a      	b.n	80173ba <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	685a      	ldr	r2, [r3, #4]
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d101      	bne.n	80173b4 <igmp_lookfor_group+0x22>
      return group;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	e006      	b.n	80173c2 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d1f1      	bne.n	80173a4 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80173c0:	2300      	movs	r3, #0
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3714      	adds	r7, #20
 80173c6:	46bd      	mov	sp, r7
 80173c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173cc:	4770      	bx	lr
	...

080173d0 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173de:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 80173e0:	6839      	ldr	r1, [r7, #0]
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f7ff ffd5 	bl	8017392 <igmp_lookfor_group>
 80173e8:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d001      	beq.n	80173f4 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	e047      	b.n	8017484 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 80173f4:	200a      	movs	r0, #10
 80173f6:	f002 fc57 	bl	8019ca8 <memp_malloc>
 80173fa:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d03f      	beq.n	8017482 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d002      	beq.n	801740e <igmp_lookup_group+0x3e>
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	e000      	b.n	8017410 <igmp_lookup_group+0x40>
 801740e:	2300      	movs	r3, #0
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	2200      	movs	r2, #0
 8017418:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	2200      	movs	r2, #0
 801741e:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	2200      	movs	r2, #0
 8017424:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	2200      	movs	r2, #0
 801742a:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d113      	bne.n	801745a <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	681a      	ldr	r2, [r3, #0]
 8017436:	4b15      	ldr	r3, [pc, #84]	@ (801748c <igmp_lookup_group+0xbc>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	429a      	cmp	r2, r3
 801743c:	d006      	beq.n	801744c <igmp_lookup_group+0x7c>
 801743e:	4b14      	ldr	r3, [pc, #80]	@ (8017490 <igmp_lookup_group+0xc0>)
 8017440:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8017444:	4913      	ldr	r1, [pc, #76]	@ (8017494 <igmp_lookup_group+0xc4>)
 8017446:	4814      	ldr	r0, [pc, #80]	@ (8017498 <igmp_lookup_group+0xc8>)
 8017448:	f00b fa76 	bl	8022938 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	2200      	movs	r2, #0
 8017450:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	68ba      	ldr	r2, [r7, #8]
 8017456:	629a      	str	r2, [r3, #40]	@ 0x28
 8017458:	e013      	b.n	8017482 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	4b0b      	ldr	r3, [pc, #44]	@ (801748c <igmp_lookup_group+0xbc>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	429a      	cmp	r2, r3
 8017464:	d106      	bne.n	8017474 <igmp_lookup_group+0xa4>
 8017466:	4b0a      	ldr	r3, [pc, #40]	@ (8017490 <igmp_lookup_group+0xc0>)
 8017468:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801746c:	490b      	ldr	r1, [pc, #44]	@ (801749c <igmp_lookup_group+0xcc>)
 801746e:	480a      	ldr	r0, [pc, #40]	@ (8017498 <igmp_lookup_group+0xc8>)
 8017470:	f00b fa62 	bl	8022938 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	681a      	ldr	r2, [r3, #0]
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	68ba      	ldr	r2, [r7, #8]
 8017480:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8017482:	68bb      	ldr	r3, [r7, #8]
}
 8017484:	4618      	mov	r0, r3
 8017486:	3710      	adds	r7, #16
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}
 801748c:	20008ea4 	.word	0x20008ea4
 8017490:	080257a4 	.word	0x080257a4
 8017494:	0802581c 	.word	0x0802581c
 8017498:	08025850 	.word	0x08025850
 801749c:	08025878 	.word	0x08025878

080174a0 <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 80174a0:	b480      	push	{r7}
 80174a2:	b085      	sub	sp, #20
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80174aa:	2300      	movs	r3, #0
 80174ac:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174b2:	60bb      	str	r3, [r7, #8]
 80174b4:	e00c      	b.n	80174d0 <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	683a      	ldr	r2, [r7, #0]
 80174bc:	429a      	cmp	r2, r3
 80174be:	d104      	bne.n	80174ca <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	681a      	ldr	r2, [r3, #0]
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	601a      	str	r2, [r3, #0]
      break;
 80174c8:	e005      	b.n	80174d6 <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	60bb      	str	r3, [r7, #8]
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d1ef      	bne.n	80174b6 <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 80174d6:	68bb      	ldr	r3, [r7, #8]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d101      	bne.n	80174e0 <igmp_remove_group+0x40>
    err = ERR_ARG;
 80174dc:	23f0      	movs	r3, #240	@ 0xf0
 80174de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80174e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3714      	adds	r7, #20
 80174e8:	46bd      	mov	sp, r7
 80174ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ee:	4770      	bx	lr

080174f0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b088      	sub	sp, #32
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	60f8      	str	r0, [r7, #12]
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	895b      	ldrh	r3, [r3, #10]
 8017500:	2b07      	cmp	r3, #7
 8017502:	d803      	bhi.n	801750c <igmp_input+0x1c>
    pbuf_free(p);
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f003 fb3d 	bl	801ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801750a:	e086      	b.n	801761a <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	895b      	ldrh	r3, [r3, #10]
 8017516:	4619      	mov	r1, r3
 8017518:	6978      	ldr	r0, [r7, #20]
 801751a:	f001 ff0c 	bl	8019336 <inet_chksum>
 801751e:	4603      	mov	r3, r0
 8017520:	2b00      	cmp	r3, #0
 8017522:	d003      	beq.n	801752c <igmp_input+0x3c>
    pbuf_free(p);
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f003 fb2d 	bl	801ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801752a:	e076      	b.n	801761a <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801752c:	6879      	ldr	r1, [r7, #4]
 801752e:	68b8      	ldr	r0, [r7, #8]
 8017530:	f7ff ff2f 	bl	8017392 <igmp_lookfor_group>
 8017534:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d103      	bne.n	8017544 <igmp_input+0x54>
    pbuf_free(p);
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	f003 fb21 	bl	801ab84 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8017542:	e06a      	b.n	801761a <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	2b11      	cmp	r3, #17
 801754a:	d002      	beq.n	8017552 <igmp_input+0x62>
 801754c:	2b16      	cmp	r3, #22
 801754e:	d04f      	beq.n	80175f0 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8017550:	e05f      	b.n	8017612 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681a      	ldr	r2, [r3, #0]
 8017556:	4b32      	ldr	r3, [pc, #200]	@ (8017620 <igmp_input+0x130>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	429a      	cmp	r2, r3
 801755c:	d125      	bne.n	80175aa <igmp_input+0xba>
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	3304      	adds	r3, #4
 8017562:	2b00      	cmp	r3, #0
 8017564:	d003      	beq.n	801756e <igmp_input+0x7e>
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d11d      	bne.n	80175aa <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801756e:	697b      	ldr	r3, [r7, #20]
 8017570:	785b      	ldrb	r3, [r3, #1]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d102      	bne.n	801757c <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	220a      	movs	r2, #10
 801757a:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017580:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d00c      	beq.n	80175a2 <igmp_input+0xb2>
          groupref = groupref->next;
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801758e:	e008      	b.n	80175a2 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	785b      	ldrb	r3, [r3, #1]
 8017594:	4619      	mov	r1, r3
 8017596:	69b8      	ldr	r0, [r7, #24]
 8017598:	f000 fa6d 	bl	8017a76 <igmp_delaying_member>
          groupref = groupref->next;
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1f3      	bne.n	8017590 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 80175a8:	e021      	b.n	80175ee <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 80175aa:	697b      	ldr	r3, [r7, #20]
 80175ac:	3304      	adds	r3, #4
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d02c      	beq.n	801760c <igmp_input+0x11c>
 80175b2:	697b      	ldr	r3, [r7, #20]
 80175b4:	685b      	ldr	r3, [r3, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d028      	beq.n	801760c <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681a      	ldr	r2, [r3, #0]
 80175be:	4b18      	ldr	r3, [pc, #96]	@ (8017620 <igmp_input+0x130>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d109      	bne.n	80175da <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80175c6:	697b      	ldr	r3, [r7, #20]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80175cc:	f107 0310 	add.w	r3, r7, #16
 80175d0:	4619      	mov	r1, r3
 80175d2:	68b8      	ldr	r0, [r7, #8]
 80175d4:	f7ff fedd 	bl	8017392 <igmp_lookfor_group>
 80175d8:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d015      	beq.n	801760c <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	785b      	ldrb	r3, [r3, #1]
 80175e4:	4619      	mov	r1, r3
 80175e6:	69f8      	ldr	r0, [r7, #28]
 80175e8:	f000 fa45 	bl	8017a76 <igmp_delaying_member>
      break;
 80175ec:	e00e      	b.n	801760c <igmp_input+0x11c>
 80175ee:	e00d      	b.n	801760c <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80175f0:	69fb      	ldr	r3, [r7, #28]
 80175f2:	7a5b      	ldrb	r3, [r3, #9]
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d10b      	bne.n	8017610 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	2200      	movs	r2, #0
 80175fc:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	2202      	movs	r2, #2
 8017602:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	2200      	movs	r2, #0
 8017608:	721a      	strb	r2, [r3, #8]
      break;
 801760a:	e001      	b.n	8017610 <igmp_input+0x120>
      break;
 801760c:	bf00      	nop
 801760e:	e000      	b.n	8017612 <igmp_input+0x122>
      break;
 8017610:	bf00      	nop
  }

  pbuf_free(p);
 8017612:	68f8      	ldr	r0, [r7, #12]
 8017614:	f003 fab6 	bl	801ab84 <pbuf_free>
  return;
 8017618:	bf00      	nop
}
 801761a:	3720      	adds	r7, #32
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	20008ea4 	.word	0x20008ea4

08017624 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 801762e:	23fa      	movs	r3, #250	@ 0xfa
 8017630:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801763a:	2be0      	cmp	r3, #224	@ 0xe0
 801763c:	d009      	beq.n	8017652 <igmp_joingroup+0x2e>
 801763e:	4b26      	ldr	r3, [pc, #152]	@ (80176d8 <igmp_joingroup+0xb4>)
 8017640:	f240 12c9 	movw	r2, #457	@ 0x1c9
 8017644:	4925      	ldr	r1, [pc, #148]	@ (80176dc <igmp_joingroup+0xb8>)
 8017646:	4826      	ldr	r0, [pc, #152]	@ (80176e0 <igmp_joingroup+0xbc>)
 8017648:	f00b f976 	bl	8022938 <iprintf>
 801764c:	f06f 0305 	mvn.w	r3, #5
 8017650:	e03d      	b.n	80176ce <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	4b23      	ldr	r3, [pc, #140]	@ (80176e4 <igmp_joingroup+0xc0>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	429a      	cmp	r2, r3
 801765c:	d109      	bne.n	8017672 <igmp_joingroup+0x4e>
 801765e:	4b1e      	ldr	r3, [pc, #120]	@ (80176d8 <igmp_joingroup+0xb4>)
 8017660:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8017664:	4920      	ldr	r1, [pc, #128]	@ (80176e8 <igmp_joingroup+0xc4>)
 8017666:	481e      	ldr	r0, [pc, #120]	@ (80176e0 <igmp_joingroup+0xbc>)
 8017668:	f00b f966 	bl	8022938 <iprintf>
 801766c:	f06f 0305 	mvn.w	r3, #5
 8017670:	e02d      	b.n	80176ce <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8017672:	4b1e      	ldr	r3, [pc, #120]	@ (80176ec <igmp_joingroup+0xc8>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	60bb      	str	r3, [r7, #8]
 8017678:	e024      	b.n	80176c4 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017680:	f003 0320 	and.w	r3, r3, #32
 8017684:	2b00      	cmp	r3, #0
 8017686:	d01a      	beq.n	80176be <igmp_joingroup+0x9a>
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d00a      	beq.n	80176a4 <igmp_joingroup+0x80>
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d006      	beq.n	80176a4 <igmp_joingroup+0x80>
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	3304      	adds	r3, #4
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d10c      	bne.n	80176be <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 80176a4:	6839      	ldr	r1, [r7, #0]
 80176a6:	68b8      	ldr	r0, [r7, #8]
 80176a8:	f000 f822 	bl	80176f0 <igmp_joingroup_netif>
 80176ac:	4603      	mov	r3, r0
 80176ae:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80176b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d002      	beq.n	80176be <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 80176b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176bc:	e007      	b.n	80176ce <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	60bb      	str	r3, [r7, #8]
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d1d7      	bne.n	801767a <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 80176ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3710      	adds	r7, #16
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	080257a4 	.word	0x080257a4
 80176dc:	080258bc 	.word	0x080258bc
 80176e0:	08025850 	.word	0x08025850
 80176e4:	20008ea4 	.word	0x20008ea4
 80176e8:	080258f4 	.word	0x080258f4
 80176ec:	2001000c 	.word	0x2001000c

080176f0 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017702:	2be0      	cmp	r3, #224	@ 0xe0
 8017704:	d009      	beq.n	801771a <igmp_joingroup_netif+0x2a>
 8017706:	4b2f      	ldr	r3, [pc, #188]	@ (80177c4 <igmp_joingroup_netif+0xd4>)
 8017708:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 801770c:	492e      	ldr	r1, [pc, #184]	@ (80177c8 <igmp_joingroup_netif+0xd8>)
 801770e:	482f      	ldr	r0, [pc, #188]	@ (80177cc <igmp_joingroup_netif+0xdc>)
 8017710:	f00b f912 	bl	8022938 <iprintf>
 8017714:	f06f 0305 	mvn.w	r3, #5
 8017718:	e050      	b.n	80177bc <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	4b2c      	ldr	r3, [pc, #176]	@ (80177d0 <igmp_joingroup_netif+0xe0>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	429a      	cmp	r2, r3
 8017724:	d109      	bne.n	801773a <igmp_joingroup_netif+0x4a>
 8017726:	4b27      	ldr	r3, [pc, #156]	@ (80177c4 <igmp_joingroup_netif+0xd4>)
 8017728:	f240 12ed 	movw	r2, #493	@ 0x1ed
 801772c:	4929      	ldr	r1, [pc, #164]	@ (80177d4 <igmp_joingroup_netif+0xe4>)
 801772e:	4827      	ldr	r0, [pc, #156]	@ (80177cc <igmp_joingroup_netif+0xdc>)
 8017730:	f00b f902 	bl	8022938 <iprintf>
 8017734:	f06f 0305 	mvn.w	r3, #5
 8017738:	e040      	b.n	80177bc <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017740:	f003 0320 	and.w	r3, r3, #32
 8017744:	2b00      	cmp	r3, #0
 8017746:	d109      	bne.n	801775c <igmp_joingroup_netif+0x6c>
 8017748:	4b1e      	ldr	r3, [pc, #120]	@ (80177c4 <igmp_joingroup_netif+0xd4>)
 801774a:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 801774e:	4922      	ldr	r1, [pc, #136]	@ (80177d8 <igmp_joingroup_netif+0xe8>)
 8017750:	481e      	ldr	r0, [pc, #120]	@ (80177cc <igmp_joingroup_netif+0xdc>)
 8017752:	f00b f8f1 	bl	8022938 <iprintf>
 8017756:	f06f 0305 	mvn.w	r3, #5
 801775a:	e02f      	b.n	80177bc <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 801775c:	6839      	ldr	r1, [r7, #0]
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f7ff fe36 	bl	80173d0 <igmp_lookup_group>
 8017764:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d025      	beq.n	80177b8 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	7a5b      	ldrb	r3, [r3, #9]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d119      	bne.n	80177a8 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	7b1b      	ldrb	r3, [r3, #12]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d109      	bne.n	8017790 <igmp_joingroup_netif+0xa0>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017780:	2b00      	cmp	r3, #0
 8017782:	d005      	beq.n	8017790 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017788:	2201      	movs	r2, #1
 801778a:	6839      	ldr	r1, [r7, #0]
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8017790:	2216      	movs	r2, #22
 8017792:	68f9      	ldr	r1, [r7, #12]
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f000 f9b5 	bl	8017b04 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801779a:	2105      	movs	r1, #5
 801779c:	68f8      	ldr	r0, [r7, #12]
 801779e:	f000 f947 	bl	8017a30 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	2201      	movs	r2, #1
 80177a6:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	7b1b      	ldrb	r3, [r3, #12]
 80177ac:	3301      	adds	r3, #1
 80177ae:	b2da      	uxtb	r2, r3
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 80177b4:	2300      	movs	r3, #0
 80177b6:	e001      	b.n	80177bc <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 80177b8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80177bc:	4618      	mov	r0, r3
 80177be:	3710      	adds	r7, #16
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	080257a4 	.word	0x080257a4
 80177c8:	08025928 	.word	0x08025928
 80177cc:	08025850 	.word	0x08025850
 80177d0:	20008ea4 	.word	0x20008ea4
 80177d4:	08025964 	.word	0x08025964
 80177d8:	080259a0 	.word	0x080259a0

080177dc <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 80177e6:	23fa      	movs	r3, #250	@ 0xfa
 80177e8:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80177f2:	2be0      	cmp	r3, #224	@ 0xe0
 80177f4:	d009      	beq.n	801780a <igmp_leavegroup+0x2e>
 80177f6:	4b25      	ldr	r3, [pc, #148]	@ (801788c <igmp_leavegroup+0xb0>)
 80177f8:	f240 222a 	movw	r2, #554	@ 0x22a
 80177fc:	4924      	ldr	r1, [pc, #144]	@ (8017890 <igmp_leavegroup+0xb4>)
 80177fe:	4825      	ldr	r0, [pc, #148]	@ (8017894 <igmp_leavegroup+0xb8>)
 8017800:	f00b f89a 	bl	8022938 <iprintf>
 8017804:	f06f 0305 	mvn.w	r3, #5
 8017808:	e03c      	b.n	8017884 <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	681a      	ldr	r2, [r3, #0]
 801780e:	4b22      	ldr	r3, [pc, #136]	@ (8017898 <igmp_leavegroup+0xbc>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	429a      	cmp	r2, r3
 8017814:	d109      	bne.n	801782a <igmp_leavegroup+0x4e>
 8017816:	4b1d      	ldr	r3, [pc, #116]	@ (801788c <igmp_leavegroup+0xb0>)
 8017818:	f240 222b 	movw	r2, #555	@ 0x22b
 801781c:	491f      	ldr	r1, [pc, #124]	@ (801789c <igmp_leavegroup+0xc0>)
 801781e:	481d      	ldr	r0, [pc, #116]	@ (8017894 <igmp_leavegroup+0xb8>)
 8017820:	f00b f88a 	bl	8022938 <iprintf>
 8017824:	f06f 0305 	mvn.w	r3, #5
 8017828:	e02c      	b.n	8017884 <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801782a:	4b1d      	ldr	r3, [pc, #116]	@ (80178a0 <igmp_leavegroup+0xc4>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	613b      	str	r3, [r7, #16]
 8017830:	e023      	b.n	801787a <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017838:	f003 0320 	and.w	r3, r3, #32
 801783c:	2b00      	cmp	r3, #0
 801783e:	d019      	beq.n	8017874 <igmp_leavegroup+0x98>
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d00a      	beq.n	801785c <igmp_leavegroup+0x80>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d006      	beq.n	801785c <igmp_leavegroup+0x80>
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	3304      	adds	r3, #4
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	429a      	cmp	r2, r3
 801785a:	d10b      	bne.n	8017874 <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 801785c:	6839      	ldr	r1, [r7, #0]
 801785e:	6938      	ldr	r0, [r7, #16]
 8017860:	f000 f820 	bl	80178a4 <igmp_leavegroup_netif>
 8017864:	4603      	mov	r3, r0
 8017866:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8017868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d001      	beq.n	8017874 <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8017870:	7bfb      	ldrb	r3, [r7, #15]
 8017872:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	613b      	str	r3, [r7, #16]
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1d8      	bne.n	8017832 <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 8017880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017884:	4618      	mov	r0, r3
 8017886:	3718      	adds	r7, #24
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	080257a4 	.word	0x080257a4
 8017890:	080259d8 	.word	0x080259d8
 8017894:	08025850 	.word	0x08025850
 8017898:	20008ea4 	.word	0x20008ea4
 801789c:	08025a10 	.word	0x08025a10
 80178a0:	2001000c 	.word	0x2001000c

080178a4 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b084      	sub	sp, #16
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
 80178ac:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80178b6:	2be0      	cmp	r3, #224	@ 0xe0
 80178b8:	d009      	beq.n	80178ce <igmp_leavegroup_netif+0x2a>
 80178ba:	4b30      	ldr	r3, [pc, #192]	@ (801797c <igmp_leavegroup_netif+0xd8>)
 80178bc:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 80178c0:	492f      	ldr	r1, [pc, #188]	@ (8017980 <igmp_leavegroup_netif+0xdc>)
 80178c2:	4830      	ldr	r0, [pc, #192]	@ (8017984 <igmp_leavegroup_netif+0xe0>)
 80178c4:	f00b f838 	bl	8022938 <iprintf>
 80178c8:	f06f 0305 	mvn.w	r3, #5
 80178cc:	e052      	b.n	8017974 <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	681a      	ldr	r2, [r3, #0]
 80178d2:	4b2d      	ldr	r3, [pc, #180]	@ (8017988 <igmp_leavegroup_netif+0xe4>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d109      	bne.n	80178ee <igmp_leavegroup_netif+0x4a>
 80178da:	4b28      	ldr	r3, [pc, #160]	@ (801797c <igmp_leavegroup_netif+0xd8>)
 80178dc:	f240 224d 	movw	r2, #589	@ 0x24d
 80178e0:	492a      	ldr	r1, [pc, #168]	@ (801798c <igmp_leavegroup_netif+0xe8>)
 80178e2:	4828      	ldr	r0, [pc, #160]	@ (8017984 <igmp_leavegroup_netif+0xe0>)
 80178e4:	f00b f828 	bl	8022938 <iprintf>
 80178e8:	f06f 0305 	mvn.w	r3, #5
 80178ec:	e042      	b.n	8017974 <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80178f4:	f003 0320 	and.w	r3, r3, #32
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d109      	bne.n	8017910 <igmp_leavegroup_netif+0x6c>
 80178fc:	4b1f      	ldr	r3, [pc, #124]	@ (801797c <igmp_leavegroup_netif+0xd8>)
 80178fe:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8017902:	4923      	ldr	r1, [pc, #140]	@ (8017990 <igmp_leavegroup_netif+0xec>)
 8017904:	481f      	ldr	r0, [pc, #124]	@ (8017984 <igmp_leavegroup_netif+0xe0>)
 8017906:	f00b f817 	bl	8022938 <iprintf>
 801790a:	f06f 0305 	mvn.w	r3, #5
 801790e:	e031      	b.n	8017974 <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 8017910:	6839      	ldr	r1, [r7, #0]
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7ff fd3d 	bl	8017392 <igmp_lookfor_group>
 8017918:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d027      	beq.n	8017970 <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	7b1b      	ldrb	r3, [r3, #12]
 8017924:	2b01      	cmp	r3, #1
 8017926:	d81b      	bhi.n	8017960 <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8017928:	68f9      	ldr	r1, [r7, #12]
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f7ff fdb8 	bl	80174a0 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	7a1b      	ldrb	r3, [r3, #8]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d004      	beq.n	8017942 <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8017938:	2217      	movs	r2, #23
 801793a:	68f9      	ldr	r1, [r7, #12]
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f000 f8e1 	bl	8017b04 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017946:	2b00      	cmp	r3, #0
 8017948:	d005      	beq.n	8017956 <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801794e:	2200      	movs	r2, #0
 8017950:	6839      	ldr	r1, [r7, #0]
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8017956:	68f9      	ldr	r1, [r7, #12]
 8017958:	200a      	movs	r0, #10
 801795a:	f002 fa1b 	bl	8019d94 <memp_free>
 801795e:	e005      	b.n	801796c <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	7b1b      	ldrb	r3, [r3, #12]
 8017964:	3b01      	subs	r3, #1
 8017966:	b2da      	uxtb	r2, r3
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 801796c:	2300      	movs	r3, #0
 801796e:	e001      	b.n	8017974 <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8017970:	f06f 0305 	mvn.w	r3, #5
  }
}
 8017974:	4618      	mov	r0, r3
 8017976:	3710      	adds	r7, #16
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}
 801797c:	080257a4 	.word	0x080257a4
 8017980:	08025a48 	.word	0x08025a48
 8017984:	08025850 	.word	0x08025850
 8017988:	20008ea4 	.word	0x20008ea4
 801798c:	08025a88 	.word	0x08025a88
 8017990:	08025ac4 	.word	0x08025ac4

08017994 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801799a:	4b15      	ldr	r3, [pc, #84]	@ (80179f0 <igmp_tmr+0x5c>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	607b      	str	r3, [r7, #4]
 80179a0:	e01e      	b.n	80179e0 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179a6:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 80179a8:	e014      	b.n	80179d4 <igmp_tmr+0x40>
      if (group->timer > 0) {
 80179aa:	683b      	ldr	r3, [r7, #0]
 80179ac:	895b      	ldrh	r3, [r3, #10]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d00d      	beq.n	80179ce <igmp_tmr+0x3a>
        group->timer--;
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	895b      	ldrh	r3, [r3, #10]
 80179b6:	3b01      	subs	r3, #1
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	895b      	ldrh	r3, [r3, #10]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d103      	bne.n	80179ce <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 80179c6:	6839      	ldr	r1, [r7, #0]
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f000 f813 	bl	80179f4 <igmp_timeout>
        }
      }
      group = group->next;
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d1e7      	bne.n	80179aa <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	607b      	str	r3, [r7, #4]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d1dd      	bne.n	80179a2 <igmp_tmr+0xe>
    }
  }
}
 80179e6:	bf00      	nop
 80179e8:	bf00      	nop
 80179ea:	3708      	adds	r7, #8
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}
 80179f0:	2001000c 	.word	0x2001000c

080179f4 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b082      	sub	sp, #8
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80179fe:	683b      	ldr	r3, [r7, #0]
 8017a00:	7a5b      	ldrb	r3, [r3, #9]
 8017a02:	2b01      	cmp	r3, #1
 8017a04:	d10d      	bne.n	8017a22 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	685a      	ldr	r2, [r3, #4]
 8017a0a:	4b08      	ldr	r3, [pc, #32]	@ (8017a2c <igmp_timeout+0x38>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d007      	beq.n	8017a22 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	2202      	movs	r2, #2
 8017a16:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8017a18:	2216      	movs	r2, #22
 8017a1a:	6839      	ldr	r1, [r7, #0]
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f000 f871 	bl	8017b04 <igmp_send>
  }
}
 8017a22:	bf00      	nop
 8017a24:	3708      	adds	r7, #8
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	20008ea4 	.word	0x20008ea4

08017a30 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	460b      	mov	r3, r1
 8017a3a:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8017a3c:	78fb      	ldrb	r3, [r7, #3]
 8017a3e:	2b02      	cmp	r3, #2
 8017a40:	d90b      	bls.n	8017a5a <igmp_start_timer+0x2a>
 8017a42:	f00a fe79 	bl	8022738 <rand>
 8017a46:	4603      	mov	r3, r0
 8017a48:	461a      	mov	r2, r3
 8017a4a:	78fb      	ldrb	r3, [r7, #3]
 8017a4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8017a50:	fb01 f303 	mul.w	r3, r1, r3
 8017a54:	1ad3      	subs	r3, r2, r3
 8017a56:	b29a      	uxth	r2, r3
 8017a58:	e000      	b.n	8017a5c <igmp_start_timer+0x2c>
 8017a5a:	2201      	movs	r2, #1
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	895b      	ldrh	r3, [r3, #10]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d102      	bne.n	8017a6e <igmp_start_timer+0x3e>
    group->timer = 1;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	815a      	strh	r2, [r3, #10]
  }
}
 8017a6e:	bf00      	nop
 8017a70:	3708      	adds	r7, #8
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8017a76:	b580      	push	{r7, lr}
 8017a78:	b082      	sub	sp, #8
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
 8017a7e:	460b      	mov	r3, r1
 8017a80:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	7a5b      	ldrb	r3, [r3, #9]
 8017a86:	2b02      	cmp	r3, #2
 8017a88:	d00d      	beq.n	8017aa6 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d111      	bne.n	8017ab6 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d005      	beq.n	8017aa6 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8017a9a:	78fb      	ldrb	r3, [r7, #3]
 8017a9c:	b29a      	uxth	r2, r3
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	895b      	ldrh	r3, [r3, #10]
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	d207      	bcs.n	8017ab6 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8017aa6:	78fb      	ldrb	r3, [r7, #3]
 8017aa8:	4619      	mov	r1, r3
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f7ff ffc0 	bl	8017a30 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2201      	movs	r2, #1
 8017ab4:	725a      	strb	r2, [r3, #9]
  }
}
 8017ab6:	bf00      	nop
 8017ab8:	3708      	adds	r7, #8
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}

08017abe <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8017abe:	b580      	push	{r7, lr}
 8017ac0:	b08c      	sub	sp, #48	@ 0x30
 8017ac2:	af06      	add	r7, sp, #24
 8017ac4:	60f8      	str	r0, [r7, #12]
 8017ac6:	60b9      	str	r1, [r7, #8]
 8017ac8:	607a      	str	r2, [r7, #4]
 8017aca:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8017acc:	f240 4394 	movw	r3, #1172	@ 0x494
 8017ad0:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8017ad6:	2304      	movs	r3, #4
 8017ad8:	9304      	str	r3, [sp, #16]
 8017ada:	f107 0314 	add.w	r3, r7, #20
 8017ade:	9303      	str	r3, [sp, #12]
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	9302      	str	r3, [sp, #8]
 8017ae4:	2302      	movs	r3, #2
 8017ae6:	9301      	str	r3, [sp, #4]
 8017ae8:	2300      	movs	r3, #0
 8017aea:	9300      	str	r3, [sp, #0]
 8017aec:	2301      	movs	r3, #1
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	68b9      	ldr	r1, [r7, #8]
 8017af2:	68f8      	ldr	r0, [r7, #12]
 8017af4:	f000 fab9 	bl	801806a <ip4_output_if_opt>
 8017af8:	4603      	mov	r3, r0
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	3718      	adds	r7, #24
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
	...

08017b04 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b088      	sub	sp, #32
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	4613      	mov	r3, r2
 8017b10:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8017b16:	2300      	movs	r3, #0
 8017b18:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8017b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8017bd8 <igmp_send+0xd4>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8017b20:	2300      	movs	r3, #0
 8017b22:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8017b24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b28:	2108      	movs	r1, #8
 8017b2a:	2036      	movs	r0, #54	@ 0x36
 8017b2c:	f002 fd14 	bl	801a558 <pbuf_alloc>
 8017b30:	61b8      	str	r0, [r7, #24]

  if (p) {
 8017b32:	69bb      	ldr	r3, [r7, #24]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d04b      	beq.n	8017bd0 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8017b3e:	69bb      	ldr	r3, [r7, #24]
 8017b40:	895b      	ldrh	r3, [r3, #10]
 8017b42:	2b07      	cmp	r3, #7
 8017b44:	d806      	bhi.n	8017b54 <igmp_send+0x50>
 8017b46:	4b25      	ldr	r3, [pc, #148]	@ (8017bdc <igmp_send+0xd8>)
 8017b48:	f240 3202 	movw	r2, #770	@ 0x302
 8017b4c:	4924      	ldr	r1, [pc, #144]	@ (8017be0 <igmp_send+0xdc>)
 8017b4e:	4825      	ldr	r0, [pc, #148]	@ (8017be4 <igmp_send+0xe0>)
 8017b50:	f00a fef2 	bl	8022938 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	3304      	adds	r3, #4
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8017b5c:	79fb      	ldrb	r3, [r7, #7]
 8017b5e:	2b16      	cmp	r3, #22
 8017b60:	d10a      	bne.n	8017b78 <igmp_send+0x74>
      dest = &(group->group_address);
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	3304      	adds	r3, #4
 8017b66:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	685a      	ldr	r2, [r3, #4]
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	2201      	movs	r2, #1
 8017b74:	721a      	strb	r2, [r3, #8]
 8017b76:	e008      	b.n	8017b8a <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	2b17      	cmp	r3, #23
 8017b7c:	d105      	bne.n	8017b8a <igmp_send+0x86>
        dest = &allrouters;
 8017b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8017be8 <igmp_send+0xe4>)
 8017b80:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	685a      	ldr	r2, [r3, #4]
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8017b8a:	79fb      	ldrb	r3, [r7, #7]
 8017b8c:	2b16      	cmp	r3, #22
 8017b8e:	d002      	beq.n	8017b96 <igmp_send+0x92>
 8017b90:	79fb      	ldrb	r3, [r7, #7]
 8017b92:	2b17      	cmp	r3, #23
 8017b94:	d119      	bne.n	8017bca <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	79fa      	ldrb	r2, [r7, #7]
 8017b9a:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	709a      	strb	r2, [r3, #2]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8017bac:	2108      	movs	r1, #8
 8017bae:	6978      	ldr	r0, [r7, #20]
 8017bb0:	f001 fbc1 	bl	8019336 <inet_chksum>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8017bbc:	f107 0110 	add.w	r1, r7, #16
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	69fa      	ldr	r2, [r7, #28]
 8017bc4:	69b8      	ldr	r0, [r7, #24]
 8017bc6:	f7ff ff7a 	bl	8017abe <igmp_ip_output_if>
    }

    pbuf_free(p);
 8017bca:	69b8      	ldr	r0, [r7, #24]
 8017bcc:	f002 ffda 	bl	801ab84 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8017bd0:	bf00      	nop
 8017bd2:	3720      	adds	r7, #32
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	08028c18 	.word	0x08028c18
 8017bdc:	080257a4 	.word	0x080257a4
 8017be0:	08025b00 	.word	0x08025b00
 8017be4:	08025850 	.word	0x08025850
 8017be8:	20008ea8 	.word	0x20008ea8

08017bec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017bec:	b480      	push	{r7}
 8017bee:	b085      	sub	sp, #20
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bfc:	2be0      	cmp	r3, #224	@ 0xe0
 8017bfe:	d106      	bne.n	8017c0e <ip4_route+0x22>
 8017c00:	4b36      	ldr	r3, [pc, #216]	@ (8017cdc <ip4_route+0xf0>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d002      	beq.n	8017c0e <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8017c08:	4b34      	ldr	r3, [pc, #208]	@ (8017cdc <ip4_route+0xf0>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	e060      	b.n	8017cd0 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017c0e:	4b34      	ldr	r3, [pc, #208]	@ (8017ce0 <ip4_route+0xf4>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60fb      	str	r3, [r7, #12]
 8017c14:	e036      	b.n	8017c84 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c1c:	f003 0301 	and.w	r3, r3, #1
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d02b      	beq.n	8017c7e <ip4_route+0x92>
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c2c:	089b      	lsrs	r3, r3, #2
 8017c2e:	f003 0301 	and.w	r3, r3, #1
 8017c32:	b2db      	uxtb	r3, r3
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d022      	beq.n	8017c7e <ip4_route+0x92>
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	3304      	adds	r3, #4
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d01d      	beq.n	8017c7e <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	3304      	adds	r3, #4
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	405a      	eors	r2, r3
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	3308      	adds	r3, #8
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4013      	ands	r3, r2
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d101      	bne.n	8017c5e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	e038      	b.n	8017cd0 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c64:	f003 0302 	and.w	r3, r3, #2
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d108      	bne.n	8017c7e <ip4_route+0x92>
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681a      	ldr	r2, [r3, #0]
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	330c      	adds	r3, #12
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d101      	bne.n	8017c7e <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	e028      	b.n	8017cd0 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	60fb      	str	r3, [r7, #12]
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d1c5      	bne.n	8017c16 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c8a:	4b16      	ldr	r3, [pc, #88]	@ (8017ce4 <ip4_route+0xf8>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d01a      	beq.n	8017cc8 <ip4_route+0xdc>
 8017c92:	4b14      	ldr	r3, [pc, #80]	@ (8017ce4 <ip4_route+0xf8>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017c9a:	f003 0301 	and.w	r3, r3, #1
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d012      	beq.n	8017cc8 <ip4_route+0xdc>
 8017ca2:	4b10      	ldr	r3, [pc, #64]	@ (8017ce4 <ip4_route+0xf8>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017caa:	f003 0304 	and.w	r3, r3, #4
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d00a      	beq.n	8017cc8 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8017ce4 <ip4_route+0xf8>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	3304      	adds	r3, #4
 8017cb8:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d004      	beq.n	8017cc8 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8017cc6:	d101      	bne.n	8017ccc <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	e001      	b.n	8017cd0 <ip4_route+0xe4>
  }

  return netif_default;
 8017ccc:	4b05      	ldr	r3, [pc, #20]	@ (8017ce4 <ip4_route+0xf8>)
 8017cce:	681b      	ldr	r3, [r3, #0]
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3714      	adds	r7, #20
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr
 8017cdc:	20008eb0 	.word	0x20008eb0
 8017ce0:	2001000c 	.word	0x2001000c
 8017ce4:	20010010 	.word	0x20010010

08017ce8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017cf6:	f003 0301 	and.w	r3, r3, #1
 8017cfa:	b2db      	uxtb	r3, r3
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d016      	beq.n	8017d2e <ip4_input_accept+0x46>
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	3304      	adds	r3, #4
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d011      	beq.n	8017d2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8017d38 <ip4_input_accept+0x50>)
 8017d0c:	695a      	ldr	r2, [r3, #20]
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	3304      	adds	r3, #4
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d008      	beq.n	8017d2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017d18:	4b07      	ldr	r3, [pc, #28]	@ (8017d38 <ip4_input_accept+0x50>)
 8017d1a:	695b      	ldr	r3, [r3, #20]
 8017d1c:	6879      	ldr	r1, [r7, #4]
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f000 fad4 	bl	80182cc <ip4_addr_isbroadcast_u32>
 8017d24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d001      	beq.n	8017d2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	e000      	b.n	8017d30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017d2e:	2300      	movs	r3, #0
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	3708      	adds	r7, #8
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}
 8017d38:	20008ebc 	.word	0x20008ebc

08017d3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b088      	sub	sp, #32
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017d46:	2301      	movs	r3, #1
 8017d48:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017d50:	69fb      	ldr	r3, [r7, #28]
 8017d52:	781b      	ldrb	r3, [r3, #0]
 8017d54:	091b      	lsrs	r3, r3, #4
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	2b04      	cmp	r3, #4
 8017d5a:	d004      	beq.n	8017d66 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017d5c:	6878      	ldr	r0, [r7, #4]
 8017d5e:	f002 ff11 	bl	801ab84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017d62:	2300      	movs	r3, #0
 8017d64:	e157      	b.n	8018016 <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	781b      	ldrb	r3, [r3, #0]
 8017d6a:	f003 030f 	and.w	r3, r3, #15
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	009b      	lsls	r3, r3, #2
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017d76:	69fb      	ldr	r3, [r7, #28]
 8017d78:	885b      	ldrh	r3, [r3, #2]
 8017d7a:	b29b      	uxth	r3, r3
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f001 fa4f 	bl	8019220 <lwip_htons>
 8017d82:	4603      	mov	r3, r0
 8017d84:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	891b      	ldrh	r3, [r3, #8]
 8017d8a:	8a3a      	ldrh	r2, [r7, #16]
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	d204      	bcs.n	8017d9a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017d90:	8a3b      	ldrh	r3, [r7, #16]
 8017d92:	4619      	mov	r1, r3
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f002 fd3d 	bl	801a814 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	895b      	ldrh	r3, [r3, #10]
 8017d9e:	8a7a      	ldrh	r2, [r7, #18]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d807      	bhi.n	8017db4 <ip4_input+0x78>
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	891b      	ldrh	r3, [r3, #8]
 8017da8:	8a3a      	ldrh	r2, [r7, #16]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d802      	bhi.n	8017db4 <ip4_input+0x78>
 8017dae:	8a7b      	ldrh	r3, [r7, #18]
 8017db0:	2b13      	cmp	r3, #19
 8017db2:	d804      	bhi.n	8017dbe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f002 fee5 	bl	801ab84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	e12b      	b.n	8018016 <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	691b      	ldr	r3, [r3, #16]
 8017dc2:	4a97      	ldr	r2, [pc, #604]	@ (8018020 <ip4_input+0x2e4>)
 8017dc4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017dc6:	69fb      	ldr	r3, [r7, #28]
 8017dc8:	68db      	ldr	r3, [r3, #12]
 8017dca:	4a95      	ldr	r2, [pc, #596]	@ (8018020 <ip4_input+0x2e4>)
 8017dcc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017dce:	4b94      	ldr	r3, [pc, #592]	@ (8018020 <ip4_input+0x2e4>)
 8017dd0:	695b      	ldr	r3, [r3, #20]
 8017dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017dd6:	2be0      	cmp	r3, #224	@ 0xe0
 8017dd8:	d120      	bne.n	8017e1c <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017de0:	f003 0320 	and.w	r3, r3, #32
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d016      	beq.n	8017e16 <ip4_input+0xda>
 8017de8:	498e      	ldr	r1, [pc, #568]	@ (8018024 <ip4_input+0x2e8>)
 8017dea:	6838      	ldr	r0, [r7, #0]
 8017dec:	f7ff fad1 	bl	8017392 <igmp_lookfor_group>
 8017df0:	4603      	mov	r3, r0
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d00f      	beq.n	8017e16 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8017df6:	4b8c      	ldr	r3, [pc, #560]	@ (8018028 <ip4_input+0x2ec>)
 8017df8:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8017dfa:	4b89      	ldr	r3, [pc, #548]	@ (8018020 <ip4_input+0x2e4>)
 8017dfc:	695a      	ldr	r2, [r3, #20]
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d105      	bne.n	8017e10 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8017e04:	4b86      	ldr	r3, [pc, #536]	@ (8018020 <ip4_input+0x2e4>)
 8017e06:	691b      	ldr	r3, [r3, #16]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d101      	bne.n	8017e10 <ip4_input+0xd4>
        check_ip_src = 0;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8017e14:	e02a      	b.n	8017e6c <ip4_input+0x130>
    } else {
      netif = NULL;
 8017e16:	2300      	movs	r3, #0
 8017e18:	61bb      	str	r3, [r7, #24]
 8017e1a:	e027      	b.n	8017e6c <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017e1c:	6838      	ldr	r0, [r7, #0]
 8017e1e:	f7ff ff63 	bl	8017ce8 <ip4_input_accept>
 8017e22:	4603      	mov	r3, r0
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d002      	beq.n	8017e2e <ip4_input+0xf2>
      netif = inp;
 8017e28:	683b      	ldr	r3, [r7, #0]
 8017e2a:	61bb      	str	r3, [r7, #24]
 8017e2c:	e01e      	b.n	8017e6c <ip4_input+0x130>
    } else {
      netif = NULL;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017e32:	4b7b      	ldr	r3, [pc, #492]	@ (8018020 <ip4_input+0x2e4>)
 8017e34:	695b      	ldr	r3, [r3, #20]
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8017e3a:	d017      	beq.n	8017e6c <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017e3c:	4b7b      	ldr	r3, [pc, #492]	@ (801802c <ip4_input+0x2f0>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	61bb      	str	r3, [r7, #24]
 8017e42:	e00e      	b.n	8017e62 <ip4_input+0x126>
          if (netif == inp) {
 8017e44:	69ba      	ldr	r2, [r7, #24]
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d006      	beq.n	8017e5a <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017e4c:	69b8      	ldr	r0, [r7, #24]
 8017e4e:	f7ff ff4b 	bl	8017ce8 <ip4_input_accept>
 8017e52:	4603      	mov	r3, r0
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d108      	bne.n	8017e6a <ip4_input+0x12e>
 8017e58:	e000      	b.n	8017e5c <ip4_input+0x120>
            continue;
 8017e5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	61bb      	str	r3, [r7, #24]
 8017e62:	69bb      	ldr	r3, [r7, #24]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d1ed      	bne.n	8017e44 <ip4_input+0x108>
 8017e68:	e000      	b.n	8017e6c <ip4_input+0x130>
            break;
 8017e6a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017e6c:	69bb      	ldr	r3, [r7, #24]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d111      	bne.n	8017e96 <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017e72:	69fb      	ldr	r3, [r7, #28]
 8017e74:	7a5b      	ldrb	r3, [r3, #9]
 8017e76:	2b11      	cmp	r3, #17
 8017e78:	d10d      	bne.n	8017e96 <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017e7a:	8a7b      	ldrh	r3, [r7, #18]
 8017e7c:	69fa      	ldr	r2, [r7, #28]
 8017e7e:	4413      	add	r3, r2
 8017e80:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	885b      	ldrh	r3, [r3, #2]
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8017e8c:	d103      	bne.n	8017e96 <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017e8e:	683b      	ldr	r3, [r7, #0]
 8017e90:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017e92:	2300      	movs	r3, #0
 8017e94:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d017      	beq.n	8017ecc <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017e9c:	4b60      	ldr	r3, [pc, #384]	@ (8018020 <ip4_input+0x2e4>)
 8017e9e:	691b      	ldr	r3, [r3, #16]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d013      	beq.n	8017ecc <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8018020 <ip4_input+0x2e4>)
 8017ea6:	691b      	ldr	r3, [r3, #16]
 8017ea8:	6839      	ldr	r1, [r7, #0]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f000 fa0e 	bl	80182cc <ip4_addr_isbroadcast_u32>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d105      	bne.n	8017ec2 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8018020 <ip4_input+0x2e4>)
 8017eb8:	691b      	ldr	r3, [r3, #16]
 8017eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017ebe:	2be0      	cmp	r3, #224	@ 0xe0
 8017ec0:	d104      	bne.n	8017ecc <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f002 fe5e 	bl	801ab84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	e0a4      	b.n	8018016 <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ecc:	69bb      	ldr	r3, [r7, #24]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d104      	bne.n	8017edc <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f002 fe56 	bl	801ab84 <pbuf_free>
    return ERR_OK;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	e09c      	b.n	8018016 <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	88db      	ldrh	r3, [r3, #6]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017ee8:	4013      	ands	r3, r2
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d00b      	beq.n	8017f06 <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f000 fe5c 	bl	8018bac <ip4_reass>
 8017ef4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d101      	bne.n	8017f00 <ip4_input+0x1c4>
      return ERR_OK;
 8017efc:	2300      	movs	r3, #0
 8017efe:	e08a      	b.n	8018016 <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017f06:	4a46      	ldr	r2, [pc, #280]	@ (8018020 <ip4_input+0x2e4>)
 8017f08:	69bb      	ldr	r3, [r7, #24]
 8017f0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017f0c:	4a44      	ldr	r2, [pc, #272]	@ (8018020 <ip4_input+0x2e4>)
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017f12:	4a43      	ldr	r2, [pc, #268]	@ (8018020 <ip4_input+0x2e4>)
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	f003 030f 	and.w	r3, r3, #15
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	009b      	lsls	r3, r3, #2
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	461a      	mov	r2, r3
 8017f28:	4b3d      	ldr	r3, [pc, #244]	@ (8018020 <ip4_input+0x2e4>)
 8017f2a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017f2c:	8a7b      	ldrh	r3, [r7, #18]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f002 fd6f 	bl	801aa14 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017f36:	69fb      	ldr	r3, [r7, #28]
 8017f38:	7a5b      	ldrb	r3, [r3, #9]
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	2b10      	cmp	r3, #16
 8017f3e:	d83a      	bhi.n	8017fb6 <ip4_input+0x27a>
 8017f40:	a201      	add	r2, pc, #4	@ (adr r2, 8017f48 <ip4_input+0x20c>)
 8017f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f46:	bf00      	nop
 8017f48:	08017fa1 	.word	0x08017fa1
 8017f4c:	08017fab 	.word	0x08017fab
 8017f50:	08017fb7 	.word	0x08017fb7
 8017f54:	08017fb7 	.word	0x08017fb7
 8017f58:	08017fb7 	.word	0x08017fb7
 8017f5c:	08017f97 	.word	0x08017f97
 8017f60:	08017fb7 	.word	0x08017fb7
 8017f64:	08017fb7 	.word	0x08017fb7
 8017f68:	08017fb7 	.word	0x08017fb7
 8017f6c:	08017fb7 	.word	0x08017fb7
 8017f70:	08017fb7 	.word	0x08017fb7
 8017f74:	08017fb7 	.word	0x08017fb7
 8017f78:	08017fb7 	.word	0x08017fb7
 8017f7c:	08017fb7 	.word	0x08017fb7
 8017f80:	08017fb7 	.word	0x08017fb7
 8017f84:	08017fb7 	.word	0x08017fb7
 8017f88:	08017f8d 	.word	0x08017f8d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017f8c:	6839      	ldr	r1, [r7, #0]
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f009 fbe4 	bl	802175c <udp_input>
        break;
 8017f94:	e02c      	b.n	8017ff0 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017f96:	6839      	ldr	r1, [r7, #0]
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f004 ffa1 	bl	801cee0 <tcp_input>
        break;
 8017f9e:	e027      	b.n	8017ff0 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017fa0:	6839      	ldr	r1, [r7, #0]
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f7fe ffee 	bl	8016f84 <icmp_input>
        break;
 8017fa8:	e022      	b.n	8017ff0 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 8017faa:	4a1e      	ldr	r2, [pc, #120]	@ (8018024 <ip4_input+0x2e8>)
 8017fac:	6839      	ldr	r1, [r7, #0]
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f7ff fa9e 	bl	80174f0 <igmp_input>
        break;
 8017fb4:	e01c      	b.n	8017ff0 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8018020 <ip4_input+0x2e4>)
 8017fb8:	695b      	ldr	r3, [r3, #20]
 8017fba:	69b9      	ldr	r1, [r7, #24]
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f000 f985 	bl	80182cc <ip4_addr_isbroadcast_u32>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d10f      	bne.n	8017fe8 <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fc8:	4b15      	ldr	r3, [pc, #84]	@ (8018020 <ip4_input+0x2e4>)
 8017fca:	695b      	ldr	r3, [r3, #20]
 8017fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017fd0:	2be0      	cmp	r3, #224	@ 0xe0
 8017fd2:	d009      	beq.n	8017fe8 <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017fd8:	4619      	mov	r1, r3
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f002 fd8d 	bl	801aafa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017fe0:	2102      	movs	r1, #2
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7ff f8e4 	bl	80171b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f002 fdcb 	bl	801ab84 <pbuf_free>
        break;
 8017fee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8018020 <ip4_input+0x2e4>)
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8018020 <ip4_input+0x2e4>)
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017ffc:	4b08      	ldr	r3, [pc, #32]	@ (8018020 <ip4_input+0x2e4>)
 8017ffe:	2200      	movs	r2, #0
 8018000:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018002:	4b07      	ldr	r3, [pc, #28]	@ (8018020 <ip4_input+0x2e4>)
 8018004:	2200      	movs	r2, #0
 8018006:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018008:	4b05      	ldr	r3, [pc, #20]	@ (8018020 <ip4_input+0x2e4>)
 801800a:	2200      	movs	r2, #0
 801800c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801800e:	4b04      	ldr	r3, [pc, #16]	@ (8018020 <ip4_input+0x2e4>)
 8018010:	2200      	movs	r2, #0
 8018012:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018014:	2300      	movs	r3, #0
}
 8018016:	4618      	mov	r0, r3
 8018018:	3720      	adds	r7, #32
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}
 801801e:	bf00      	nop
 8018020:	20008ebc 	.word	0x20008ebc
 8018024:	20008ed0 	.word	0x20008ed0
 8018028:	010000e0 	.word	0x010000e0
 801802c:	2001000c 	.word	0x2001000c

08018030 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b08a      	sub	sp, #40	@ 0x28
 8018034:	af06      	add	r7, sp, #24
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	607a      	str	r2, [r7, #4]
 801803c:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801803e:	78fa      	ldrb	r2, [r7, #3]
 8018040:	2300      	movs	r3, #0
 8018042:	9304      	str	r3, [sp, #16]
 8018044:	2300      	movs	r3, #0
 8018046:	9303      	str	r3, [sp, #12]
 8018048:	6a3b      	ldr	r3, [r7, #32]
 801804a:	9302      	str	r3, [sp, #8]
 801804c:	7f3b      	ldrb	r3, [r7, #28]
 801804e:	9301      	str	r3, [sp, #4]
 8018050:	7e3b      	ldrb	r3, [r7, #24]
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	4613      	mov	r3, r2
 8018056:	687a      	ldr	r2, [r7, #4]
 8018058:	68b9      	ldr	r1, [r7, #8]
 801805a:	68f8      	ldr	r0, [r7, #12]
 801805c:	f000 f805 	bl	801806a <ip4_output_if_opt>
 8018060:	4603      	mov	r3, r0
}
 8018062:	4618      	mov	r0, r3
 8018064:	3710      	adds	r7, #16
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}

0801806a <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801806a:	b580      	push	{r7, lr}
 801806c:	b08c      	sub	sp, #48	@ 0x30
 801806e:	af06      	add	r7, sp, #24
 8018070:	60f8      	str	r0, [r7, #12]
 8018072:	60b9      	str	r1, [r7, #8]
 8018074:	607a      	str	r2, [r7, #4]
 8018076:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d009      	beq.n	8018096 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d003      	beq.n	8018090 <ip4_output_if_opt+0x26>
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d102      	bne.n	8018096 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8018090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018092:	3304      	adds	r3, #4
 8018094:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8018096:	78fa      	ldrb	r2, [r7, #3]
 8018098:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801809e:	9303      	str	r3, [sp, #12]
 80180a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180a2:	9302      	str	r3, [sp, #8]
 80180a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80180a8:	9301      	str	r3, [sp, #4]
 80180aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80180ae:	9300      	str	r3, [sp, #0]
 80180b0:	4613      	mov	r3, r2
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	6979      	ldr	r1, [r7, #20]
 80180b6:	68f8      	ldr	r0, [r7, #12]
 80180b8:	f000 f822 	bl	8018100 <ip4_output_if_opt_src>
 80180bc:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3718      	adds	r7, #24
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}

080180c6 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80180c6:	b580      	push	{r7, lr}
 80180c8:	b08a      	sub	sp, #40	@ 0x28
 80180ca:	af06      	add	r7, sp, #24
 80180cc:	60f8      	str	r0, [r7, #12]
 80180ce:	60b9      	str	r1, [r7, #8]
 80180d0:	607a      	str	r2, [r7, #4]
 80180d2:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80180d4:	78fa      	ldrb	r2, [r7, #3]
 80180d6:	2300      	movs	r3, #0
 80180d8:	9304      	str	r3, [sp, #16]
 80180da:	2300      	movs	r3, #0
 80180dc:	9303      	str	r3, [sp, #12]
 80180de:	6a3b      	ldr	r3, [r7, #32]
 80180e0:	9302      	str	r3, [sp, #8]
 80180e2:	7f3b      	ldrb	r3, [r7, #28]
 80180e4:	9301      	str	r3, [sp, #4]
 80180e6:	7e3b      	ldrb	r3, [r7, #24]
 80180e8:	9300      	str	r3, [sp, #0]
 80180ea:	4613      	mov	r3, r2
 80180ec:	687a      	ldr	r2, [r7, #4]
 80180ee:	68b9      	ldr	r1, [r7, #8]
 80180f0:	68f8      	ldr	r0, [r7, #12]
 80180f2:	f000 f805 	bl	8018100 <ip4_output_if_opt_src>
 80180f6:	4603      	mov	r3, r0
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	3710      	adds	r7, #16
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}

08018100 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b088      	sub	sp, #32
 8018104:	af00      	add	r7, sp, #0
 8018106:	60f8      	str	r0, [r7, #12]
 8018108:	60b9      	str	r1, [r7, #8]
 801810a:	607a      	str	r2, [r7, #4]
 801810c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	7b9b      	ldrb	r3, [r3, #14]
 8018112:	2b01      	cmp	r3, #1
 8018114:	d006      	beq.n	8018124 <ip4_output_if_opt_src+0x24>
 8018116:	4b67      	ldr	r3, [pc, #412]	@ (80182b4 <ip4_output_if_opt_src+0x1b4>)
 8018118:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801811c:	4966      	ldr	r1, [pc, #408]	@ (80182b8 <ip4_output_if_opt_src+0x1b8>)
 801811e:	4867      	ldr	r0, [pc, #412]	@ (80182bc <ip4_output_if_opt_src+0x1bc>)
 8018120:	f00a fc0a 	bl	8022938 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	2b00      	cmp	r3, #0
 8018128:	f000 8097 	beq.w	801825a <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801812c:	2314      	movs	r3, #20
 801812e:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8018130:	2300      	movs	r3, #0
 8018132:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8018134:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018136:	2b00      	cmp	r3, #0
 8018138:	d030      	beq.n	801819c <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801813a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801813c:	2b28      	cmp	r3, #40	@ 0x28
 801813e:	d902      	bls.n	8018146 <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8018140:	f06f 0305 	mvn.w	r3, #5
 8018144:	e0b1      	b.n	80182aa <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8018146:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018148:	3303      	adds	r3, #3
 801814a:	b29b      	uxth	r3, r3
 801814c:	f023 0303 	bic.w	r3, r3, #3
 8018150:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8018152:	8bfa      	ldrh	r2, [r7, #30]
 8018154:	8afb      	ldrh	r3, [r7, #22]
 8018156:	4413      	add	r3, r2
 8018158:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801815a:	8afb      	ldrh	r3, [r7, #22]
 801815c:	4619      	mov	r1, r3
 801815e:	68f8      	ldr	r0, [r7, #12]
 8018160:	f002 fc48 	bl	801a9f4 <pbuf_add_header>
 8018164:	4603      	mov	r3, r0
 8018166:	2b00      	cmp	r3, #0
 8018168:	d002      	beq.n	8018170 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801816a:	f06f 0301 	mvn.w	r3, #1
 801816e:	e09c      	b.n	80182aa <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8018176:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018178:	4618      	mov	r0, r3
 801817a:	f00a fe14 	bl	8022da6 <memcpy>
      if (optlen < optlen_aligned) {
 801817e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8018180:	8afb      	ldrh	r3, [r7, #22]
 8018182:	429a      	cmp	r2, r3
 8018184:	d20a      	bcs.n	801819c <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	685a      	ldr	r2, [r3, #4]
 801818a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801818c:	18d0      	adds	r0, r2, r3
 801818e:	8afa      	ldrh	r2, [r7, #22]
 8018190:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018192:	1ad3      	subs	r3, r2, r3
 8018194:	461a      	mov	r2, r3
 8018196:	2100      	movs	r1, #0
 8018198:	f00a fd60 	bl	8022c5c <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801819c:	2114      	movs	r1, #20
 801819e:	68f8      	ldr	r0, [r7, #12]
 80181a0:	f002 fc28 	bl	801a9f4 <pbuf_add_header>
 80181a4:	4603      	mov	r3, r0
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d002      	beq.n	80181b0 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80181aa:	f06f 0301 	mvn.w	r3, #1
 80181ae:	e07c      	b.n	80182aa <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	895b      	ldrh	r3, [r3, #10]
 80181ba:	2b13      	cmp	r3, #19
 80181bc:	d806      	bhi.n	80181cc <ip4_output_if_opt_src+0xcc>
 80181be:	4b3d      	ldr	r3, [pc, #244]	@ (80182b4 <ip4_output_if_opt_src+0x1b4>)
 80181c0:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80181c4:	493e      	ldr	r1, [pc, #248]	@ (80182c0 <ip4_output_if_opt_src+0x1c0>)
 80181c6:	483d      	ldr	r0, [pc, #244]	@ (80182bc <ip4_output_if_opt_src+0x1bc>)
 80181c8:	f00a fbb6 	bl	8022938 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80181cc:	69bb      	ldr	r3, [r7, #24]
 80181ce:	78fa      	ldrb	r2, [r7, #3]
 80181d0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80181d8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681a      	ldr	r2, [r3, #0]
 80181de:	69bb      	ldr	r3, [r7, #24]
 80181e0:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80181e2:	8bfb      	ldrh	r3, [r7, #30]
 80181e4:	089b      	lsrs	r3, r3, #2
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181ee:	b2da      	uxtb	r2, r3
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80181fa:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	891b      	ldrh	r3, [r3, #8]
 8018200:	4618      	mov	r0, r3
 8018202:	f001 f80d 	bl	8019220 <lwip_htons>
 8018206:	4603      	mov	r3, r0
 8018208:	461a      	mov	r2, r3
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	2200      	movs	r2, #0
 8018212:	719a      	strb	r2, [r3, #6]
 8018214:	2200      	movs	r2, #0
 8018216:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018218:	4b2a      	ldr	r3, [pc, #168]	@ (80182c4 <ip4_output_if_opt_src+0x1c4>)
 801821a:	881b      	ldrh	r3, [r3, #0]
 801821c:	4618      	mov	r0, r3
 801821e:	f000 ffff 	bl	8019220 <lwip_htons>
 8018222:	4603      	mov	r3, r0
 8018224:	461a      	mov	r2, r3
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801822a:	4b26      	ldr	r3, [pc, #152]	@ (80182c4 <ip4_output_if_opt_src+0x1c4>)
 801822c:	881b      	ldrh	r3, [r3, #0]
 801822e:	3301      	adds	r3, #1
 8018230:	b29a      	uxth	r2, r3
 8018232:	4b24      	ldr	r3, [pc, #144]	@ (80182c4 <ip4_output_if_opt_src+0x1c4>)
 8018234:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d104      	bne.n	8018246 <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801823c:	4b22      	ldr	r3, [pc, #136]	@ (80182c8 <ip4_output_if_opt_src+0x1c8>)
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	69bb      	ldr	r3, [r7, #24]
 8018242:	60da      	str	r2, [r3, #12]
 8018244:	e003      	b.n	801824e <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018246:	68bb      	ldr	r3, [r7, #8]
 8018248:	681a      	ldr	r2, [r3, #0]
 801824a:	69bb      	ldr	r3, [r7, #24]
 801824c:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	2200      	movs	r2, #0
 8018252:	729a      	strb	r2, [r3, #10]
 8018254:	2200      	movs	r2, #0
 8018256:	72da      	strb	r2, [r3, #11]
 8018258:	e00f      	b.n	801827a <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	895b      	ldrh	r3, [r3, #10]
 801825e:	2b13      	cmp	r3, #19
 8018260:	d802      	bhi.n	8018268 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018262:	f06f 0301 	mvn.w	r3, #1
 8018266:	e020      	b.n	80182aa <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801826e:	69bb      	ldr	r3, [r7, #24]
 8018270:	691b      	ldr	r3, [r3, #16]
 8018272:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8018274:	f107 0310 	add.w	r3, r7, #16
 8018278:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801827a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801827c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801827e:	2b00      	cmp	r3, #0
 8018280:	d00c      	beq.n	801829c <ip4_output_if_opt_src+0x19c>
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	891a      	ldrh	r2, [r3, #8]
 8018286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018288:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801828a:	429a      	cmp	r2, r3
 801828c:	d906      	bls.n	801829c <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018292:	68f8      	ldr	r0, [r7, #12]
 8018294:	f000 fe7e 	bl	8018f94 <ip4_frag>
 8018298:	4603      	mov	r3, r0
 801829a:	e006      	b.n	80182aa <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801829c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801829e:	695b      	ldr	r3, [r3, #20]
 80182a0:	687a      	ldr	r2, [r7, #4]
 80182a2:	68f9      	ldr	r1, [r7, #12]
 80182a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80182a6:	4798      	blx	r3
 80182a8:	4603      	mov	r3, r0
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3720      	adds	r7, #32
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	bf00      	nop
 80182b4:	08025b3c 	.word	0x08025b3c
 80182b8:	08025bb4 	.word	0x08025bb4
 80182bc:	08025bc0 	.word	0x08025bc0
 80182c0:	08025be8 	.word	0x08025be8
 80182c4:	20008eac 	.word	0x20008eac
 80182c8:	08028c18 	.word	0x08028c18

080182cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80182cc:	b480      	push	{r7}
 80182ce:	b085      	sub	sp, #20
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e0:	d002      	beq.n	80182e8 <ip4_addr_isbroadcast_u32+0x1c>
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d101      	bne.n	80182ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80182e8:	2301      	movs	r3, #1
 80182ea:	e02a      	b.n	8018342 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80182f2:	f003 0302 	and.w	r3, r3, #2
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d101      	bne.n	80182fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80182fa:	2300      	movs	r3, #0
 80182fc:	e021      	b.n	8018342 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	3304      	adds	r3, #4
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	429a      	cmp	r2, r3
 8018308:	d101      	bne.n	801830e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801830a:	2300      	movs	r3, #0
 801830c:	e019      	b.n	8018342 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801830e:	68fa      	ldr	r2, [r7, #12]
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	3304      	adds	r3, #4
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	405a      	eors	r2, r3
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	3308      	adds	r3, #8
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	4013      	ands	r3, r2
 8018320:	2b00      	cmp	r3, #0
 8018322:	d10d      	bne.n	8018340 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018324:	683b      	ldr	r3, [r7, #0]
 8018326:	3308      	adds	r3, #8
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	43da      	mvns	r2, r3
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018330:	683b      	ldr	r3, [r7, #0]
 8018332:	3308      	adds	r3, #8
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018338:	429a      	cmp	r2, r3
 801833a:	d101      	bne.n	8018340 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801833c:	2301      	movs	r3, #1
 801833e:	e000      	b.n	8018342 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018340:	2300      	movs	r3, #0
  }
}
 8018342:	4618      	mov	r0, r3
 8018344:	3714      	adds	r7, #20
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr
	...

08018350 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b08a      	sub	sp, #40	@ 0x28
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
 8018358:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801835a:	f107 030c 	add.w	r3, r7, #12
 801835e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8018368:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801836c:	3301      	adds	r3, #1
 801836e:	4a89      	ldr	r2, [pc, #548]	@ (8018594 <ip4addr_aton+0x244>)
 8018370:	4413      	add	r3, r2
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	f003 0304 	and.w	r3, r3, #4
 8018378:	2b00      	cmp	r3, #0
 801837a:	d101      	bne.n	8018380 <ip4addr_aton+0x30>
      return 0;
 801837c:	2300      	movs	r3, #0
 801837e:	e105      	b.n	801858c <ip4addr_aton+0x23c>
    }
    val = 0;
 8018380:	2300      	movs	r3, #0
 8018382:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8018384:	230a      	movs	r3, #10
 8018386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801838a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801838e:	2b30      	cmp	r3, #48	@ 0x30
 8018390:	d11c      	bne.n	80183cc <ip4addr_aton+0x7c>
      c = *++cp;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	3301      	adds	r3, #1
 8018396:	607b      	str	r3, [r7, #4]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 80183a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183a4:	2b78      	cmp	r3, #120	@ 0x78
 80183a6:	d003      	beq.n	80183b0 <ip4addr_aton+0x60>
 80183a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183ac:	2b58      	cmp	r3, #88	@ 0x58
 80183ae:	d10a      	bne.n	80183c6 <ip4addr_aton+0x76>
        base = 16;
 80183b0:	2310      	movs	r3, #16
 80183b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	3301      	adds	r3, #1
 80183ba:	607b      	str	r3, [r7, #4]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80183c4:	e002      	b.n	80183cc <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80183c6:	2308      	movs	r3, #8
 80183c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80183cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183d0:	3301      	adds	r3, #1
 80183d2:	4a70      	ldr	r2, [pc, #448]	@ (8018594 <ip4addr_aton+0x244>)
 80183d4:	4413      	add	r3, r2
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	f003 0304 	and.w	r3, r3, #4
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d011      	beq.n	8018404 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80183e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80183e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80183e6:	fb03 f202 	mul.w	r2, r3, r2
 80183ea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183ee:	4413      	add	r3, r2
 80183f0:	3b30      	subs	r3, #48	@ 0x30
 80183f2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	3301      	adds	r3, #1
 80183f8:	607b      	str	r3, [r7, #4]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8018402:	e7e3      	b.n	80183cc <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8018404:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018408:	2b10      	cmp	r3, #16
 801840a:	d127      	bne.n	801845c <ip4addr_aton+0x10c>
 801840c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018410:	3301      	adds	r3, #1
 8018412:	4a60      	ldr	r2, [pc, #384]	@ (8018594 <ip4addr_aton+0x244>)
 8018414:	4413      	add	r3, r2
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801841c:	2b00      	cmp	r3, #0
 801841e:	d01d      	beq.n	801845c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8018420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018422:	011b      	lsls	r3, r3, #4
 8018424:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8018428:	f102 010a 	add.w	r1, r2, #10
 801842c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8018430:	3201      	adds	r2, #1
 8018432:	4858      	ldr	r0, [pc, #352]	@ (8018594 <ip4addr_aton+0x244>)
 8018434:	4402      	add	r2, r0
 8018436:	7812      	ldrb	r2, [r2, #0]
 8018438:	f002 0203 	and.w	r2, r2, #3
 801843c:	2a02      	cmp	r2, #2
 801843e:	d101      	bne.n	8018444 <ip4addr_aton+0xf4>
 8018440:	2261      	movs	r2, #97	@ 0x61
 8018442:	e000      	b.n	8018446 <ip4addr_aton+0xf6>
 8018444:	2241      	movs	r2, #65	@ 0x41
 8018446:	1a8a      	subs	r2, r1, r2
 8018448:	4313      	orrs	r3, r2
 801844a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	3301      	adds	r3, #1
 8018450:	607b      	str	r3, [r7, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801845a:	e7b7      	b.n	80183cc <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801845c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018460:	2b2e      	cmp	r3, #46	@ 0x2e
 8018462:	d114      	bne.n	801848e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8018464:	f107 030c 	add.w	r3, r7, #12
 8018468:	330c      	adds	r3, #12
 801846a:	69fa      	ldr	r2, [r7, #28]
 801846c:	429a      	cmp	r2, r3
 801846e:	d301      	bcc.n	8018474 <ip4addr_aton+0x124>
        return 0;
 8018470:	2300      	movs	r3, #0
 8018472:	e08b      	b.n	801858c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8018474:	69fb      	ldr	r3, [r7, #28]
 8018476:	1d1a      	adds	r2, r3, #4
 8018478:	61fa      	str	r2, [r7, #28]
 801847a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801847c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	3301      	adds	r3, #1
 8018482:	607b      	str	r3, [r7, #4]
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801848c:	e76c      	b.n	8018368 <ip4addr_aton+0x18>
    } else {
      break;
 801848e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018490:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018494:	2b00      	cmp	r3, #0
 8018496:	d00b      	beq.n	80184b0 <ip4addr_aton+0x160>
 8018498:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801849c:	3301      	adds	r3, #1
 801849e:	4a3d      	ldr	r2, [pc, #244]	@ (8018594 <ip4addr_aton+0x244>)
 80184a0:	4413      	add	r3, r2
 80184a2:	781b      	ldrb	r3, [r3, #0]
 80184a4:	f003 0308 	and.w	r3, r3, #8
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d101      	bne.n	80184b0 <ip4addr_aton+0x160>
    return 0;
 80184ac:	2300      	movs	r3, #0
 80184ae:	e06d      	b.n	801858c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80184b0:	f107 030c 	add.w	r3, r7, #12
 80184b4:	69fa      	ldr	r2, [r7, #28]
 80184b6:	1ad3      	subs	r3, r2, r3
 80184b8:	109b      	asrs	r3, r3, #2
 80184ba:	3301      	adds	r3, #1
 80184bc:	2b04      	cmp	r3, #4
 80184be:	d853      	bhi.n	8018568 <ip4addr_aton+0x218>
 80184c0:	a201      	add	r2, pc, #4	@ (adr r2, 80184c8 <ip4addr_aton+0x178>)
 80184c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184c6:	bf00      	nop
 80184c8:	080184dd 	.word	0x080184dd
 80184cc:	08018577 	.word	0x08018577
 80184d0:	080184e1 	.word	0x080184e1
 80184d4:	08018503 	.word	0x08018503
 80184d8:	08018531 	.word	0x08018531

    case 0:
      return 0;       /* initial nondigit */
 80184dc:	2300      	movs	r3, #0
 80184de:	e055      	b.n	801858c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80184e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80184e6:	d301      	bcc.n	80184ec <ip4addr_aton+0x19c>
        return 0;
 80184e8:	2300      	movs	r3, #0
 80184ea:	e04f      	b.n	801858c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	2bff      	cmp	r3, #255	@ 0xff
 80184f0:	d901      	bls.n	80184f6 <ip4addr_aton+0x1a6>
        return 0;
 80184f2:	2300      	movs	r3, #0
 80184f4:	e04a      	b.n	801858c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	061b      	lsls	r3, r3, #24
 80184fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184fc:	4313      	orrs	r3, r2
 80184fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8018500:	e03a      	b.n	8018578 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8018502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018508:	d301      	bcc.n	801850e <ip4addr_aton+0x1be>
        return 0;
 801850a:	2300      	movs	r3, #0
 801850c:	e03e      	b.n	801858c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	2bff      	cmp	r3, #255	@ 0xff
 8018512:	d802      	bhi.n	801851a <ip4addr_aton+0x1ca>
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	2bff      	cmp	r3, #255	@ 0xff
 8018518:	d901      	bls.n	801851e <ip4addr_aton+0x1ce>
        return 0;
 801851a:	2300      	movs	r3, #0
 801851c:	e036      	b.n	801858c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	061a      	lsls	r2, r3, #24
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	041b      	lsls	r3, r3, #16
 8018526:	4313      	orrs	r3, r2
 8018528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801852a:	4313      	orrs	r3, r2
 801852c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801852e:	e023      	b.n	8018578 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8018530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018532:	2bff      	cmp	r3, #255	@ 0xff
 8018534:	d901      	bls.n	801853a <ip4addr_aton+0x1ea>
        return 0;
 8018536:	2300      	movs	r3, #0
 8018538:	e028      	b.n	801858c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	2bff      	cmp	r3, #255	@ 0xff
 801853e:	d805      	bhi.n	801854c <ip4addr_aton+0x1fc>
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	2bff      	cmp	r3, #255	@ 0xff
 8018544:	d802      	bhi.n	801854c <ip4addr_aton+0x1fc>
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	2bff      	cmp	r3, #255	@ 0xff
 801854a:	d901      	bls.n	8018550 <ip4addr_aton+0x200>
        return 0;
 801854c:	2300      	movs	r3, #0
 801854e:	e01d      	b.n	801858c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	061a      	lsls	r2, r3, #24
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	041b      	lsls	r3, r3, #16
 8018558:	431a      	orrs	r2, r3
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	021b      	lsls	r3, r3, #8
 801855e:	4313      	orrs	r3, r2
 8018560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018562:	4313      	orrs	r3, r2
 8018564:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8018566:	e007      	b.n	8018578 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8018568:	4b0b      	ldr	r3, [pc, #44]	@ (8018598 <ip4addr_aton+0x248>)
 801856a:	22f9      	movs	r2, #249	@ 0xf9
 801856c:	490b      	ldr	r1, [pc, #44]	@ (801859c <ip4addr_aton+0x24c>)
 801856e:	480c      	ldr	r0, [pc, #48]	@ (80185a0 <ip4addr_aton+0x250>)
 8018570:	f00a f9e2 	bl	8022938 <iprintf>
      break;
 8018574:	e000      	b.n	8018578 <ip4addr_aton+0x228>
      break;
 8018576:	bf00      	nop
  }
  if (addr) {
 8018578:	683b      	ldr	r3, [r7, #0]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d005      	beq.n	801858a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801857e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018580:	f000 fe63 	bl	801924a <lwip_htonl>
 8018584:	4602      	mov	r2, r0
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801858a:	2301      	movs	r3, #1
}
 801858c:	4618      	mov	r0, r3
 801858e:	3728      	adds	r7, #40	@ 0x28
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}
 8018594:	08038e8f 	.word	0x08038e8f
 8018598:	08025c18 	.word	0x08025c18
 801859c:	08025c94 	.word	0x08025c94
 80185a0:	08025ca0 	.word	0x08025ca0

080185a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80185aa:	2300      	movs	r3, #0
 80185ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80185ae:	4b12      	ldr	r3, [pc, #72]	@ (80185f8 <ip_reass_tmr+0x54>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80185b4:	e018      	b.n	80185e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	7fdb      	ldrb	r3, [r3, #31]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d00b      	beq.n	80185d6 <ip_reass_tmr+0x32>
      r->timer--;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	7fdb      	ldrb	r3, [r3, #31]
 80185c2:	3b01      	subs	r3, #1
 80185c4:	b2da      	uxtb	r2, r3
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	60fb      	str	r3, [r7, #12]
 80185d4:	e008      	b.n	80185e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80185e0:	68b9      	ldr	r1, [r7, #8]
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f000 f80a 	bl	80185fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d1e3      	bne.n	80185b6 <ip_reass_tmr+0x12>
    }
  }
}
 80185ee:	bf00      	nop
 80185f0:	bf00      	nop
 80185f2:	3710      	adds	r7, #16
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	20008eb4 	.word	0x20008eb4

080185fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b088      	sub	sp, #32
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
 8018604:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018606:	2300      	movs	r3, #0
 8018608:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801860a:	683a      	ldr	r2, [r7, #0]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	429a      	cmp	r2, r3
 8018610:	d105      	bne.n	801861e <ip_reass_free_complete_datagram+0x22>
 8018612:	4b45      	ldr	r3, [pc, #276]	@ (8018728 <ip_reass_free_complete_datagram+0x12c>)
 8018614:	22ab      	movs	r2, #171	@ 0xab
 8018616:	4945      	ldr	r1, [pc, #276]	@ (801872c <ip_reass_free_complete_datagram+0x130>)
 8018618:	4845      	ldr	r0, [pc, #276]	@ (8018730 <ip_reass_free_complete_datagram+0x134>)
 801861a:	f00a f98d 	bl	8022938 <iprintf>
  if (prev != NULL) {
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d00a      	beq.n	801863a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	429a      	cmp	r2, r3
 801862c:	d005      	beq.n	801863a <ip_reass_free_complete_datagram+0x3e>
 801862e:	4b3e      	ldr	r3, [pc, #248]	@ (8018728 <ip_reass_free_complete_datagram+0x12c>)
 8018630:	22ad      	movs	r2, #173	@ 0xad
 8018632:	4940      	ldr	r1, [pc, #256]	@ (8018734 <ip_reass_free_complete_datagram+0x138>)
 8018634:	483e      	ldr	r0, [pc, #248]	@ (8018730 <ip_reass_free_complete_datagram+0x134>)
 8018636:	f00a f97f 	bl	8022938 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	889b      	ldrh	r3, [r3, #4]
 8018646:	b29b      	uxth	r3, r3
 8018648:	2b00      	cmp	r3, #0
 801864a:	d12a      	bne.n	80186a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	685b      	ldr	r3, [r3, #4]
 8018650:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801865a:	69bb      	ldr	r3, [r7, #24]
 801865c:	6858      	ldr	r0, [r3, #4]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	3308      	adds	r3, #8
 8018662:	2214      	movs	r2, #20
 8018664:	4619      	mov	r1, r3
 8018666:	f00a fb9e 	bl	8022da6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801866a:	2101      	movs	r1, #1
 801866c:	69b8      	ldr	r0, [r7, #24]
 801866e:	f7fe fdaf 	bl	80171d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018672:	69b8      	ldr	r0, [r7, #24]
 8018674:	f002 fb14 	bl	801aca0 <pbuf_clen>
 8018678:	4603      	mov	r3, r0
 801867a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801867c:	8bfa      	ldrh	r2, [r7, #30]
 801867e:	8a7b      	ldrh	r3, [r7, #18]
 8018680:	4413      	add	r3, r2
 8018682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018686:	db05      	blt.n	8018694 <ip_reass_free_complete_datagram+0x98>
 8018688:	4b27      	ldr	r3, [pc, #156]	@ (8018728 <ip_reass_free_complete_datagram+0x12c>)
 801868a:	22bc      	movs	r2, #188	@ 0xbc
 801868c:	492a      	ldr	r1, [pc, #168]	@ (8018738 <ip_reass_free_complete_datagram+0x13c>)
 801868e:	4828      	ldr	r0, [pc, #160]	@ (8018730 <ip_reass_free_complete_datagram+0x134>)
 8018690:	f00a f952 	bl	8022938 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018694:	8bfa      	ldrh	r2, [r7, #30]
 8018696:	8a7b      	ldrh	r3, [r7, #18]
 8018698:	4413      	add	r3, r2
 801869a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801869c:	69b8      	ldr	r0, [r7, #24]
 801869e:	f002 fa71 	bl	801ab84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80186a8:	e01f      	b.n	80186ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80186aa:	69bb      	ldr	r3, [r7, #24]
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80186b0:	69bb      	ldr	r3, [r7, #24]
 80186b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80186b4:	697b      	ldr	r3, [r7, #20]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80186ba:	68f8      	ldr	r0, [r7, #12]
 80186bc:	f002 faf0 	bl	801aca0 <pbuf_clen>
 80186c0:	4603      	mov	r3, r0
 80186c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186c4:	8bfa      	ldrh	r2, [r7, #30]
 80186c6:	8a7b      	ldrh	r3, [r7, #18]
 80186c8:	4413      	add	r3, r2
 80186ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80186ce:	db05      	blt.n	80186dc <ip_reass_free_complete_datagram+0xe0>
 80186d0:	4b15      	ldr	r3, [pc, #84]	@ (8018728 <ip_reass_free_complete_datagram+0x12c>)
 80186d2:	22cc      	movs	r2, #204	@ 0xcc
 80186d4:	4918      	ldr	r1, [pc, #96]	@ (8018738 <ip_reass_free_complete_datagram+0x13c>)
 80186d6:	4816      	ldr	r0, [pc, #88]	@ (8018730 <ip_reass_free_complete_datagram+0x134>)
 80186d8:	f00a f92e 	bl	8022938 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186dc:	8bfa      	ldrh	r2, [r7, #30]
 80186de:	8a7b      	ldrh	r3, [r7, #18]
 80186e0:	4413      	add	r3, r2
 80186e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80186e4:	68f8      	ldr	r0, [r7, #12]
 80186e6:	f002 fa4d 	bl	801ab84 <pbuf_free>
  while (p != NULL) {
 80186ea:	69bb      	ldr	r3, [r7, #24]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d1dc      	bne.n	80186aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80186f0:	6839      	ldr	r1, [r7, #0]
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f000 f8c2 	bl	801887c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80186f8:	4b10      	ldr	r3, [pc, #64]	@ (801873c <ip_reass_free_complete_datagram+0x140>)
 80186fa:	881b      	ldrh	r3, [r3, #0]
 80186fc:	8bfa      	ldrh	r2, [r7, #30]
 80186fe:	429a      	cmp	r2, r3
 8018700:	d905      	bls.n	801870e <ip_reass_free_complete_datagram+0x112>
 8018702:	4b09      	ldr	r3, [pc, #36]	@ (8018728 <ip_reass_free_complete_datagram+0x12c>)
 8018704:	22d2      	movs	r2, #210	@ 0xd2
 8018706:	490e      	ldr	r1, [pc, #56]	@ (8018740 <ip_reass_free_complete_datagram+0x144>)
 8018708:	4809      	ldr	r0, [pc, #36]	@ (8018730 <ip_reass_free_complete_datagram+0x134>)
 801870a:	f00a f915 	bl	8022938 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801870e:	4b0b      	ldr	r3, [pc, #44]	@ (801873c <ip_reass_free_complete_datagram+0x140>)
 8018710:	881a      	ldrh	r2, [r3, #0]
 8018712:	8bfb      	ldrh	r3, [r7, #30]
 8018714:	1ad3      	subs	r3, r2, r3
 8018716:	b29a      	uxth	r2, r3
 8018718:	4b08      	ldr	r3, [pc, #32]	@ (801873c <ip_reass_free_complete_datagram+0x140>)
 801871a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801871c:	8bfb      	ldrh	r3, [r7, #30]
}
 801871e:	4618      	mov	r0, r3
 8018720:	3720      	adds	r7, #32
 8018722:	46bd      	mov	sp, r7
 8018724:	bd80      	pop	{r7, pc}
 8018726:	bf00      	nop
 8018728:	08025cc8 	.word	0x08025cc8
 801872c:	08025d44 	.word	0x08025d44
 8018730:	08025d50 	.word	0x08025d50
 8018734:	08025d78 	.word	0x08025d78
 8018738:	08025d8c 	.word	0x08025d8c
 801873c:	20008eb8 	.word	0x20008eb8
 8018740:	08025dac 	.word	0x08025dac

08018744 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b08a      	sub	sp, #40	@ 0x28
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
 801874c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801874e:	2300      	movs	r3, #0
 8018750:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018752:	2300      	movs	r3, #0
 8018754:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018756:	2300      	movs	r3, #0
 8018758:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801875e:	2300      	movs	r3, #0
 8018760:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018762:	4b28      	ldr	r3, [pc, #160]	@ (8018804 <ip_reass_remove_oldest_datagram+0xc0>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018768:	e030      	b.n	80187cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801876c:	695a      	ldr	r2, [r3, #20]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	68db      	ldr	r3, [r3, #12]
 8018772:	429a      	cmp	r2, r3
 8018774:	d10c      	bne.n	8018790 <ip_reass_remove_oldest_datagram+0x4c>
 8018776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018778:	699a      	ldr	r2, [r3, #24]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	691b      	ldr	r3, [r3, #16]
 801877e:	429a      	cmp	r2, r3
 8018780:	d106      	bne.n	8018790 <ip_reass_remove_oldest_datagram+0x4c>
 8018782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018784:	899a      	ldrh	r2, [r3, #12]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	889b      	ldrh	r3, [r3, #4]
 801878a:	b29b      	uxth	r3, r3
 801878c:	429a      	cmp	r2, r3
 801878e:	d014      	beq.n	80187ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	3301      	adds	r3, #1
 8018794:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018796:	6a3b      	ldr	r3, [r7, #32]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d104      	bne.n	80187a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801879e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187a0:	69fb      	ldr	r3, [r7, #28]
 80187a2:	61bb      	str	r3, [r7, #24]
 80187a4:	e009      	b.n	80187ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	7fda      	ldrb	r2, [r3, #31]
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	7fdb      	ldrb	r3, [r3, #31]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	d803      	bhi.n	80187ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80187b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187b6:	69fb      	ldr	r3, [r7, #28]
 80187b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80187ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d001      	beq.n	80187c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80187cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d1cb      	bne.n	801876a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80187d2:	6a3b      	ldr	r3, [r7, #32]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d008      	beq.n	80187ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80187d8:	69b9      	ldr	r1, [r7, #24]
 80187da:	6a38      	ldr	r0, [r7, #32]
 80187dc:	f7ff ff0e 	bl	80185fc <ip_reass_free_complete_datagram>
 80187e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80187e2:	697a      	ldr	r2, [r7, #20]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	4413      	add	r3, r2
 80187e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80187ea:	697a      	ldr	r2, [r7, #20]
 80187ec:	683b      	ldr	r3, [r7, #0]
 80187ee:	429a      	cmp	r2, r3
 80187f0:	da02      	bge.n	80187f8 <ip_reass_remove_oldest_datagram+0xb4>
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	dcac      	bgt.n	8018752 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80187f8:	697b      	ldr	r3, [r7, #20]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3728      	adds	r7, #40	@ 0x28
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	20008eb4 	.word	0x20008eb4

08018808 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b084      	sub	sp, #16
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018812:	2004      	movs	r0, #4
 8018814:	f001 fa48 	bl	8019ca8 <memp_malloc>
 8018818:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d110      	bne.n	8018842 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018820:	6839      	ldr	r1, [r7, #0]
 8018822:	6878      	ldr	r0, [r7, #4]
 8018824:	f7ff ff8e 	bl	8018744 <ip_reass_remove_oldest_datagram>
 8018828:	4602      	mov	r2, r0
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	4293      	cmp	r3, r2
 801882e:	dc03      	bgt.n	8018838 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018830:	2004      	movs	r0, #4
 8018832:	f001 fa39 	bl	8019ca8 <memp_malloc>
 8018836:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d101      	bne.n	8018842 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801883e:	2300      	movs	r3, #0
 8018840:	e016      	b.n	8018870 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018842:	2220      	movs	r2, #32
 8018844:	2100      	movs	r1, #0
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	f00a fa08 	bl	8022c5c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	220f      	movs	r2, #15
 8018850:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018852:	4b09      	ldr	r3, [pc, #36]	@ (8018878 <ip_reass_enqueue_new_datagram+0x70>)
 8018854:	681a      	ldr	r2, [r3, #0]
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801885a:	4a07      	ldr	r2, [pc, #28]	@ (8018878 <ip_reass_enqueue_new_datagram+0x70>)
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	3308      	adds	r3, #8
 8018864:	2214      	movs	r2, #20
 8018866:	6879      	ldr	r1, [r7, #4]
 8018868:	4618      	mov	r0, r3
 801886a:	f00a fa9c 	bl	8022da6 <memcpy>
  return ipr;
 801886e:	68fb      	ldr	r3, [r7, #12]
}
 8018870:	4618      	mov	r0, r3
 8018872:	3710      	adds	r7, #16
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}
 8018878:	20008eb4 	.word	0x20008eb4

0801887c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b082      	sub	sp, #8
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
 8018884:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018886:	4b10      	ldr	r3, [pc, #64]	@ (80188c8 <ip_reass_dequeue_datagram+0x4c>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	429a      	cmp	r2, r3
 801888e:	d104      	bne.n	801889a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	4a0c      	ldr	r2, [pc, #48]	@ (80188c8 <ip_reass_dequeue_datagram+0x4c>)
 8018896:	6013      	str	r3, [r2, #0]
 8018898:	e00d      	b.n	80188b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d106      	bne.n	80188ae <ip_reass_dequeue_datagram+0x32>
 80188a0:	4b0a      	ldr	r3, [pc, #40]	@ (80188cc <ip_reass_dequeue_datagram+0x50>)
 80188a2:	f240 1245 	movw	r2, #325	@ 0x145
 80188a6:	490a      	ldr	r1, [pc, #40]	@ (80188d0 <ip_reass_dequeue_datagram+0x54>)
 80188a8:	480a      	ldr	r0, [pc, #40]	@ (80188d4 <ip_reass_dequeue_datagram+0x58>)
 80188aa:	f00a f845 	bl	8022938 <iprintf>
    prev->next = ipr->next;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681a      	ldr	r2, [r3, #0]
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80188b6:	6879      	ldr	r1, [r7, #4]
 80188b8:	2004      	movs	r0, #4
 80188ba:	f001 fa6b 	bl	8019d94 <memp_free>
}
 80188be:	bf00      	nop
 80188c0:	3708      	adds	r7, #8
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}
 80188c6:	bf00      	nop
 80188c8:	20008eb4 	.word	0x20008eb4
 80188cc:	08025cc8 	.word	0x08025cc8
 80188d0:	08025dd0 	.word	0x08025dd0
 80188d4:	08025d50 	.word	0x08025d50

080188d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b08c      	sub	sp, #48	@ 0x30
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80188e4:	2300      	movs	r3, #0
 80188e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80188e8:	2301      	movs	r3, #1
 80188ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	685b      	ldr	r3, [r3, #4]
 80188f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80188f2:	69fb      	ldr	r3, [r7, #28]
 80188f4:	885b      	ldrh	r3, [r3, #2]
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	4618      	mov	r0, r3
 80188fa:	f000 fc91 	bl	8019220 <lwip_htons>
 80188fe:	4603      	mov	r3, r0
 8018900:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018902:	69fb      	ldr	r3, [r7, #28]
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	f003 030f 	and.w	r3, r3, #15
 801890a:	b2db      	uxtb	r3, r3
 801890c:	009b      	lsls	r3, r3, #2
 801890e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018910:	7e7b      	ldrb	r3, [r7, #25]
 8018912:	b29b      	uxth	r3, r3
 8018914:	8b7a      	ldrh	r2, [r7, #26]
 8018916:	429a      	cmp	r2, r3
 8018918:	d202      	bcs.n	8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801891a:	f04f 33ff 	mov.w	r3, #4294967295
 801891e:	e135      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018920:	7e7b      	ldrb	r3, [r7, #25]
 8018922:	b29b      	uxth	r3, r3
 8018924:	8b7a      	ldrh	r2, [r7, #26]
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	88db      	ldrh	r3, [r3, #6]
 801892e:	b29b      	uxth	r3, r3
 8018930:	4618      	mov	r0, r3
 8018932:	f000 fc75 	bl	8019220 <lwip_htons>
 8018936:	4603      	mov	r3, r0
 8018938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801893c:	b29b      	uxth	r3, r3
 801893e:	00db      	lsls	r3, r3, #3
 8018940:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018942:	68bb      	ldr	r3, [r7, #8]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801894a:	2200      	movs	r2, #0
 801894c:	701a      	strb	r2, [r3, #0]
 801894e:	2200      	movs	r2, #0
 8018950:	705a      	strb	r2, [r3, #1]
 8018952:	2200      	movs	r2, #0
 8018954:	709a      	strb	r2, [r3, #2]
 8018956:	2200      	movs	r2, #0
 8018958:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801895a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801895c:	8afa      	ldrh	r2, [r7, #22]
 801895e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018960:	8afa      	ldrh	r2, [r7, #22]
 8018962:	8b7b      	ldrh	r3, [r7, #26]
 8018964:	4413      	add	r3, r2
 8018966:	b29a      	uxth	r2, r3
 8018968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801896a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801896e:	88db      	ldrh	r3, [r3, #6]
 8018970:	b29b      	uxth	r3, r3
 8018972:	8afa      	ldrh	r2, [r7, #22]
 8018974:	429a      	cmp	r2, r3
 8018976:	d902      	bls.n	801897e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018978:	f04f 33ff 	mov.w	r3, #4294967295
 801897c:	e106      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	685b      	ldr	r3, [r3, #4]
 8018982:	627b      	str	r3, [r7, #36]	@ 0x24
 8018984:	e068      	b.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801898e:	889b      	ldrh	r3, [r3, #4]
 8018990:	b29a      	uxth	r2, r3
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	889b      	ldrh	r3, [r3, #4]
 8018996:	b29b      	uxth	r3, r3
 8018998:	429a      	cmp	r2, r3
 801899a:	d235      	bcs.n	8018a08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801899e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80189a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80189a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d020      	beq.n	80189ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80189a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189aa:	889b      	ldrh	r3, [r3, #4]
 80189ac:	b29a      	uxth	r2, r3
 80189ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189b0:	88db      	ldrh	r3, [r3, #6]
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	429a      	cmp	r2, r3
 80189b6:	d307      	bcc.n	80189c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80189b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189ba:	88db      	ldrh	r3, [r3, #6]
 80189bc:	b29a      	uxth	r2, r3
 80189be:	693b      	ldr	r3, [r7, #16]
 80189c0:	889b      	ldrh	r3, [r3, #4]
 80189c2:	b29b      	uxth	r3, r3
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d902      	bls.n	80189ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189c8:	f04f 33ff 	mov.w	r3, #4294967295
 80189cc:	e0de      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80189ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189d0:	68ba      	ldr	r2, [r7, #8]
 80189d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80189d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189d6:	88db      	ldrh	r3, [r3, #6]
 80189d8:	b29a      	uxth	r2, r3
 80189da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189dc:	889b      	ldrh	r3, [r3, #4]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d03d      	beq.n	8018a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80189e4:	2300      	movs	r3, #0
 80189e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80189e8:	e03a      	b.n	8018a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80189ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189ec:	88db      	ldrh	r3, [r3, #6]
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	693b      	ldr	r3, [r7, #16]
 80189f2:	889b      	ldrh	r3, [r3, #4]
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d902      	bls.n	8018a00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189fa:	f04f 33ff 	mov.w	r3, #4294967295
 80189fe:	e0c5      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	68ba      	ldr	r2, [r7, #8]
 8018a04:	605a      	str	r2, [r3, #4]
      break;
 8018a06:	e02b      	b.n	8018a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a0a:	889b      	ldrh	r3, [r3, #4]
 8018a0c:	b29a      	uxth	r2, r3
 8018a0e:	693b      	ldr	r3, [r7, #16]
 8018a10:	889b      	ldrh	r3, [r3, #4]
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d102      	bne.n	8018a1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a18:	f04f 33ff 	mov.w	r3, #4294967295
 8018a1c:	e0b6      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a20:	889b      	ldrh	r3, [r3, #4]
 8018a22:	b29a      	uxth	r2, r3
 8018a24:	693b      	ldr	r3, [r7, #16]
 8018a26:	88db      	ldrh	r3, [r3, #6]
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d202      	bcs.n	8018a34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a32:	e0ab      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d009      	beq.n	8018a4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a3c:	88db      	ldrh	r3, [r3, #6]
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	889b      	ldrh	r3, [r3, #4]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d001      	beq.n	8018a4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a4e:	693b      	ldr	r3, [r7, #16]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018a54:	693b      	ldr	r3, [r7, #16]
 8018a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d193      	bne.n	8018986 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a5e:	e000      	b.n	8018a62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d12d      	bne.n	8018ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d01c      	beq.n	8018aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a70:	88db      	ldrh	r3, [r3, #6]
 8018a72:	b29a      	uxth	r2, r3
 8018a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a76:	889b      	ldrh	r3, [r3, #4]
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d906      	bls.n	8018a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018a7e:	4b45      	ldr	r3, [pc, #276]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a80:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018a84:	4944      	ldr	r1, [pc, #272]	@ (8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018a86:	4845      	ldr	r0, [pc, #276]	@ (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a88:	f009 ff56 	bl	8022938 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a8e:	68ba      	ldr	r2, [r7, #8]
 8018a90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a94:	88db      	ldrh	r3, [r3, #6]
 8018a96:	b29a      	uxth	r2, r3
 8018a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a9a:	889b      	ldrh	r3, [r3, #4]
 8018a9c:	b29b      	uxth	r3, r3
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d010      	beq.n	8018ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	623b      	str	r3, [r7, #32]
 8018aa6:	e00d      	b.n	8018ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	685b      	ldr	r3, [r3, #4]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d006      	beq.n	8018abe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018ab0:	4b38      	ldr	r3, [pc, #224]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ab2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018ab6:	493a      	ldr	r1, [pc, #232]	@ (8018ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018ab8:	4838      	ldr	r0, [pc, #224]	@ (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018aba:	f009 ff3d 	bl	8022938 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	68ba      	ldr	r2, [r7, #8]
 8018ac2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d105      	bne.n	8018ad6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	7f9b      	ldrb	r3, [r3, #30]
 8018ace:	f003 0301 	and.w	r3, r3, #1
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d059      	beq.n	8018b8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018ad6:	6a3b      	ldr	r3, [r7, #32]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d04f      	beq.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	685b      	ldr	r3, [r3, #4]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d006      	beq.n	8018af2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	685b      	ldr	r3, [r3, #4]
 8018aea:	889b      	ldrh	r3, [r3, #4]
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d002      	beq.n	8018af8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018af2:	2300      	movs	r3, #0
 8018af4:	623b      	str	r3, [r7, #32]
 8018af6:	e041      	b.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018afa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018b02:	e012      	b.n	8018b2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b06:	685b      	ldr	r3, [r3, #4]
 8018b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b0c:	88db      	ldrh	r3, [r3, #6]
 8018b0e:	b29a      	uxth	r2, r3
 8018b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b12:	889b      	ldrh	r3, [r3, #4]
 8018b14:	b29b      	uxth	r3, r3
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d002      	beq.n	8018b20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	623b      	str	r3, [r7, #32]
            break;
 8018b1e:	e007      	b.n	8018b30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b22:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d1e9      	bne.n	8018b04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b30:	6a3b      	ldr	r3, [r7, #32]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d022      	beq.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	685b      	ldr	r3, [r3, #4]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d106      	bne.n	8018b4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b3e:	4b15      	ldr	r3, [pc, #84]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b40:	f240 12df 	movw	r2, #479	@ 0x1df
 8018b44:	4917      	ldr	r1, [pc, #92]	@ (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b46:	4815      	ldr	r0, [pc, #84]	@ (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b48:	f009 fef6 	bl	8022938 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	685b      	ldr	r3, [r3, #4]
 8018b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d106      	bne.n	8018b66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b58:	4b0e      	ldr	r3, [pc, #56]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018b5e:	4911      	ldr	r1, [pc, #68]	@ (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b60:	480e      	ldr	r0, [pc, #56]	@ (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b62:	f009 fee9 	bl	8022938 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d006      	beq.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018b6e:	4b09      	ldr	r3, [pc, #36]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b70:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018b74:	490c      	ldr	r1, [pc, #48]	@ (8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018b76:	4809      	ldr	r0, [pc, #36]	@ (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b78:	f009 fede 	bl	8022938 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018b7c:	6a3b      	ldr	r3, [r7, #32]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	bf14      	ite	ne
 8018b82:	2301      	movne	r3, #1
 8018b84:	2300      	moveq	r3, #0
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	e000      	b.n	8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018b8a:	2300      	movs	r3, #0
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3730      	adds	r7, #48	@ 0x30
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	08025cc8 	.word	0x08025cc8
 8018b98:	08025dec 	.word	0x08025dec
 8018b9c:	08025d50 	.word	0x08025d50
 8018ba0:	08025e0c 	.word	0x08025e0c
 8018ba4:	08025e44 	.word	0x08025e44
 8018ba8:	08025e54 	.word	0x08025e54

08018bac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b08e      	sub	sp, #56	@ 0x38
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	685b      	ldr	r3, [r3, #4]
 8018bb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	f003 030f 	and.w	r3, r3, #15
 8018bc2:	b2db      	uxtb	r3, r3
 8018bc4:	009b      	lsls	r3, r3, #2
 8018bc6:	b2db      	uxtb	r3, r3
 8018bc8:	2b14      	cmp	r3, #20
 8018bca:	f040 8171 	bne.w	8018eb0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd0:	88db      	ldrh	r3, [r3, #6]
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f000 fb23 	bl	8019220 <lwip_htons>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018be0:	b29b      	uxth	r3, r3
 8018be2:	00db      	lsls	r3, r3, #3
 8018be4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018be8:	885b      	ldrh	r3, [r3, #2]
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	4618      	mov	r0, r3
 8018bee:	f000 fb17 	bl	8019220 <lwip_htons>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	f003 030f 	and.w	r3, r3, #15
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	009b      	lsls	r3, r3, #2
 8018c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018c0e:	429a      	cmp	r2, r3
 8018c10:	f0c0 8150 	bcc.w	8018eb4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018c14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018c18:	b29b      	uxth	r3, r3
 8018c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018c1c:	1ad3      	subs	r3, r2, r3
 8018c1e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f002 f83d 	bl	801aca0 <pbuf_clen>
 8018c26:	4603      	mov	r3, r0
 8018c28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8018e5c <ip4_reass+0x2b0>)
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	461a      	mov	r2, r3
 8018c30:	8c3b      	ldrh	r3, [r7, #32]
 8018c32:	4413      	add	r3, r2
 8018c34:	2b0a      	cmp	r3, #10
 8018c36:	dd10      	ble.n	8018c5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c38:	8c3b      	ldrh	r3, [r7, #32]
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c3e:	f7ff fd81 	bl	8018744 <ip_reass_remove_oldest_datagram>
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	f000 8137 	beq.w	8018eb8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c4a:	4b84      	ldr	r3, [pc, #528]	@ (8018e5c <ip4_reass+0x2b0>)
 8018c4c:	881b      	ldrh	r3, [r3, #0]
 8018c4e:	461a      	mov	r2, r3
 8018c50:	8c3b      	ldrh	r3, [r7, #32]
 8018c52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c54:	2b0a      	cmp	r3, #10
 8018c56:	f300 812f 	bgt.w	8018eb8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c5a:	4b81      	ldr	r3, [pc, #516]	@ (8018e60 <ip4_reass+0x2b4>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c60:	e015      	b.n	8018c8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c64:	695a      	ldr	r2, [r3, #20]
 8018c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c68:	68db      	ldr	r3, [r3, #12]
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d10c      	bne.n	8018c88 <ip4_reass+0xdc>
 8018c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c70:	699a      	ldr	r2, [r3, #24]
 8018c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c74:	691b      	ldr	r3, [r3, #16]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d106      	bne.n	8018c88 <ip4_reass+0xdc>
 8018c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c7c:	899a      	ldrh	r2, [r3, #12]
 8018c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c80:	889b      	ldrh	r3, [r3, #4]
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	429a      	cmp	r2, r3
 8018c86:	d006      	beq.n	8018c96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d1e6      	bne.n	8018c62 <ip4_reass+0xb6>
 8018c94:	e000      	b.n	8018c98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018c96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d109      	bne.n	8018cb2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018c9e:	8c3b      	ldrh	r3, [r7, #32]
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ca4:	f7ff fdb0 	bl	8018808 <ip_reass_enqueue_new_datagram>
 8018ca8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d11c      	bne.n	8018cea <ip4_reass+0x13e>
      goto nullreturn;
 8018cb0:	e105      	b.n	8018ebe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cb4:	88db      	ldrh	r3, [r3, #6]
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f000 fab1 	bl	8019220 <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d110      	bne.n	8018cea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cca:	89db      	ldrh	r3, [r3, #14]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f000 faa7 	bl	8019220 <lwip_htons>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d006      	beq.n	8018cea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cde:	3308      	adds	r3, #8
 8018ce0:	2214      	movs	r2, #20
 8018ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f00a f85e 	bl	8022da6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cec:	88db      	ldrh	r3, [r3, #6]
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	f003 0320 	and.w	r3, r3, #32
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	bf0c      	ite	eq
 8018cf8:	2301      	moveq	r3, #1
 8018cfa:	2300      	movne	r3, #0
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018d00:	69fb      	ldr	r3, [r7, #28]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d00e      	beq.n	8018d24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d06:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d0a:	4413      	add	r3, r2
 8018d0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018d0e:	8b7a      	ldrh	r2, [r7, #26]
 8018d10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018d12:	429a      	cmp	r2, r3
 8018d14:	f0c0 80a0 	bcc.w	8018e58 <ip4_reass+0x2ac>
 8018d18:	8b7b      	ldrh	r3, [r7, #26]
 8018d1a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018d1e:	4293      	cmp	r3, r2
 8018d20:	f200 809a 	bhi.w	8018e58 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d24:	69fa      	ldr	r2, [r7, #28]
 8018d26:	6879      	ldr	r1, [r7, #4]
 8018d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018d2a:	f7ff fdd5 	bl	80188d8 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d36:	f000 809b 	beq.w	8018e70 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d3a:	4b48      	ldr	r3, [pc, #288]	@ (8018e5c <ip4_reass+0x2b0>)
 8018d3c:	881a      	ldrh	r2, [r3, #0]
 8018d3e:	8c3b      	ldrh	r3, [r7, #32]
 8018d40:	4413      	add	r3, r2
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	4b45      	ldr	r3, [pc, #276]	@ (8018e5c <ip4_reass+0x2b0>)
 8018d46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d48:	69fb      	ldr	r3, [r7, #28]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d00d      	beq.n	8018d6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d52:	4413      	add	r3, r2
 8018d54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d58:	8a7a      	ldrh	r2, [r7, #18]
 8018d5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d5e:	7f9b      	ldrb	r3, [r3, #30]
 8018d60:	f043 0301 	orr.w	r3, r3, #1
 8018d64:	b2da      	uxtb	r2, r3
 8018d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018d6a:	697b      	ldr	r3, [r7, #20]
 8018d6c:	2b01      	cmp	r3, #1
 8018d6e:	d171      	bne.n	8018e54 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d72:	8b9b      	ldrh	r3, [r3, #28]
 8018d74:	3314      	adds	r3, #20
 8018d76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	685b      	ldr	r3, [r3, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	685b      	ldr	r3, [r3, #4]
 8018d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d8c:	3308      	adds	r3, #8
 8018d8e:	2214      	movs	r2, #20
 8018d90:	4619      	mov	r1, r3
 8018d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018d94:	f00a f807 	bl	8022da6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018d98:	8a3b      	ldrh	r3, [r7, #16]
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f000 fa40 	bl	8019220 <lwip_htons>
 8018da0:	4603      	mov	r3, r0
 8018da2:	461a      	mov	r2, r3
 8018da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018da6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018daa:	2200      	movs	r2, #0
 8018dac:	719a      	strb	r2, [r3, #6]
 8018dae:	2200      	movs	r2, #0
 8018db0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018db4:	2200      	movs	r2, #0
 8018db6:	729a      	strb	r2, [r3, #10]
 8018db8:	2200      	movs	r2, #0
 8018dba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018dc2:	e00d      	b.n	8018de0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018dca:	2114      	movs	r1, #20
 8018dcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018dce:	f001 fe21 	bl	801aa14 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018dd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f001 ffa3 	bl	801ad20 <pbuf_cat>
      r = iprh->next_pbuf;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d1ee      	bne.n	8018dc4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018de6:	4b1e      	ldr	r3, [pc, #120]	@ (8018e60 <ip4_reass+0x2b4>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d102      	bne.n	8018df6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018df0:	2300      	movs	r3, #0
 8018df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018df4:	e010      	b.n	8018e18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018df6:	4b1a      	ldr	r3, [pc, #104]	@ (8018e60 <ip4_reass+0x2b4>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018dfc:	e007      	b.n	8018e0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d006      	beq.n	8018e16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d1f4      	bne.n	8018dfe <ip4_reass+0x252>
 8018e14:	e000      	b.n	8018e18 <ip4_reass+0x26c>
          break;
 8018e16:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e1c:	f7ff fd2e 	bl	801887c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f001 ff3d 	bl	801aca0 <pbuf_clen>
 8018e26:	4603      	mov	r3, r0
 8018e28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8018e5c <ip4_reass+0x2b0>)
 8018e2c:	881b      	ldrh	r3, [r3, #0]
 8018e2e:	8c3a      	ldrh	r2, [r7, #32]
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d906      	bls.n	8018e42 <ip4_reass+0x296>
 8018e34:	4b0b      	ldr	r3, [pc, #44]	@ (8018e64 <ip4_reass+0x2b8>)
 8018e36:	f240 229b 	movw	r2, #667	@ 0x29b
 8018e3a:	490b      	ldr	r1, [pc, #44]	@ (8018e68 <ip4_reass+0x2bc>)
 8018e3c:	480b      	ldr	r0, [pc, #44]	@ (8018e6c <ip4_reass+0x2c0>)
 8018e3e:	f009 fd7b 	bl	8022938 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e42:	4b06      	ldr	r3, [pc, #24]	@ (8018e5c <ip4_reass+0x2b0>)
 8018e44:	881a      	ldrh	r2, [r3, #0]
 8018e46:	8c3b      	ldrh	r3, [r7, #32]
 8018e48:	1ad3      	subs	r3, r2, r3
 8018e4a:	b29a      	uxth	r2, r3
 8018e4c:	4b03      	ldr	r3, [pc, #12]	@ (8018e5c <ip4_reass+0x2b0>)
 8018e4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	e038      	b.n	8018ec6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e54:	2300      	movs	r3, #0
 8018e56:	e036      	b.n	8018ec6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018e58:	bf00      	nop
 8018e5a:	e00a      	b.n	8018e72 <ip4_reass+0x2c6>
 8018e5c:	20008eb8 	.word	0x20008eb8
 8018e60:	20008eb4 	.word	0x20008eb4
 8018e64:	08025cc8 	.word	0x08025cc8
 8018e68:	08025e78 	.word	0x08025e78
 8018e6c:	08025d50 	.word	0x08025d50
    goto nullreturn_ipr;
 8018e70:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d106      	bne.n	8018e86 <ip4_reass+0x2da>
 8018e78:	4b15      	ldr	r3, [pc, #84]	@ (8018ed0 <ip4_reass+0x324>)
 8018e7a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018e7e:	4915      	ldr	r1, [pc, #84]	@ (8018ed4 <ip4_reass+0x328>)
 8018e80:	4815      	ldr	r0, [pc, #84]	@ (8018ed8 <ip4_reass+0x32c>)
 8018e82:	f009 fd59 	bl	8022938 <iprintf>
  if (ipr->p == NULL) {
 8018e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d116      	bne.n	8018ebc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018e8e:	4b13      	ldr	r3, [pc, #76]	@ (8018edc <ip4_reass+0x330>)
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d006      	beq.n	8018ea6 <ip4_reass+0x2fa>
 8018e98:	4b0d      	ldr	r3, [pc, #52]	@ (8018ed0 <ip4_reass+0x324>)
 8018e9a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018e9e:	4910      	ldr	r1, [pc, #64]	@ (8018ee0 <ip4_reass+0x334>)
 8018ea0:	480d      	ldr	r0, [pc, #52]	@ (8018ed8 <ip4_reass+0x32c>)
 8018ea2:	f009 fd49 	bl	8022938 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018ea6:	2100      	movs	r1, #0
 8018ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018eaa:	f7ff fce7 	bl	801887c <ip_reass_dequeue_datagram>
 8018eae:	e006      	b.n	8018ebe <ip4_reass+0x312>
    goto nullreturn;
 8018eb0:	bf00      	nop
 8018eb2:	e004      	b.n	8018ebe <ip4_reass+0x312>
    goto nullreturn;
 8018eb4:	bf00      	nop
 8018eb6:	e002      	b.n	8018ebe <ip4_reass+0x312>
      goto nullreturn;
 8018eb8:	bf00      	nop
 8018eba:	e000      	b.n	8018ebe <ip4_reass+0x312>
  }

nullreturn:
 8018ebc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018ebe:	6878      	ldr	r0, [r7, #4]
 8018ec0:	f001 fe60 	bl	801ab84 <pbuf_free>
  return NULL;
 8018ec4:	2300      	movs	r3, #0
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3738      	adds	r7, #56	@ 0x38
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
 8018ece:	bf00      	nop
 8018ed0:	08025cc8 	.word	0x08025cc8
 8018ed4:	08025e94 	.word	0x08025e94
 8018ed8:	08025d50 	.word	0x08025d50
 8018edc:	20008eb4 	.word	0x20008eb4
 8018ee0:	08025ea0 	.word	0x08025ea0

08018ee4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018ee8:	2005      	movs	r0, #5
 8018eea:	f000 fedd 	bl	8019ca8 <memp_malloc>
 8018eee:	4603      	mov	r3, r0
}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d106      	bne.n	8018f10 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018f02:	4b07      	ldr	r3, [pc, #28]	@ (8018f20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018f04:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018f08:	4906      	ldr	r1, [pc, #24]	@ (8018f24 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018f0a:	4807      	ldr	r0, [pc, #28]	@ (8018f28 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018f0c:	f009 fd14 	bl	8022938 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018f10:	6879      	ldr	r1, [r7, #4]
 8018f12:	2005      	movs	r0, #5
 8018f14:	f000 ff3e 	bl	8019d94 <memp_free>
}
 8018f18:	bf00      	nop
 8018f1a:	3708      	adds	r7, #8
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	08025cc8 	.word	0x08025cc8
 8018f24:	08025ec0 	.word	0x08025ec0
 8018f28:	08025d50 	.word	0x08025d50

08018f2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b084      	sub	sp, #16
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d106      	bne.n	8018f4c <ipfrag_free_pbuf_custom+0x20>
 8018f3e:	4b11      	ldr	r3, [pc, #68]	@ (8018f84 <ipfrag_free_pbuf_custom+0x58>)
 8018f40:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018f44:	4910      	ldr	r1, [pc, #64]	@ (8018f88 <ipfrag_free_pbuf_custom+0x5c>)
 8018f46:	4811      	ldr	r0, [pc, #68]	@ (8018f8c <ipfrag_free_pbuf_custom+0x60>)
 8018f48:	f009 fcf6 	bl	8022938 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f4c:	68fa      	ldr	r2, [r7, #12]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	429a      	cmp	r2, r3
 8018f52:	d006      	beq.n	8018f62 <ipfrag_free_pbuf_custom+0x36>
 8018f54:	4b0b      	ldr	r3, [pc, #44]	@ (8018f84 <ipfrag_free_pbuf_custom+0x58>)
 8018f56:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018f5a:	490d      	ldr	r1, [pc, #52]	@ (8018f90 <ipfrag_free_pbuf_custom+0x64>)
 8018f5c:	480b      	ldr	r0, [pc, #44]	@ (8018f8c <ipfrag_free_pbuf_custom+0x60>)
 8018f5e:	f009 fceb 	bl	8022938 <iprintf>
  if (pcr->original != NULL) {
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	69db      	ldr	r3, [r3, #28]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d004      	beq.n	8018f74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	69db      	ldr	r3, [r3, #28]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f001 fe08 	bl	801ab84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018f74:	68f8      	ldr	r0, [r7, #12]
 8018f76:	f7ff ffbd 	bl	8018ef4 <ip_frag_free_pbuf_custom_ref>
}
 8018f7a:	bf00      	nop
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}
 8018f82:	bf00      	nop
 8018f84:	08025cc8 	.word	0x08025cc8
 8018f88:	08025ecc 	.word	0x08025ecc
 8018f8c:	08025d50 	.word	0x08025d50
 8018f90:	08025ed8 	.word	0x08025ed8

08018f94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b094      	sub	sp, #80	@ 0x50
 8018f98:	af02      	add	r7, sp, #8
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018faa:	3b14      	subs	r3, #20
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	da00      	bge.n	8018fb2 <ip4_frag+0x1e>
 8018fb0:	3307      	adds	r3, #7
 8018fb2:	10db      	asrs	r3, r3, #3
 8018fb4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018fb6:	2314      	movs	r3, #20
 8018fb8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	f003 030f 	and.w	r3, r3, #15
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	009b      	lsls	r3, r3, #2
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	2b14      	cmp	r3, #20
 8018fd4:	d002      	beq.n	8018fdc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018fd6:	f06f 0305 	mvn.w	r3, #5
 8018fda:	e110      	b.n	80191fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	895b      	ldrh	r3, [r3, #10]
 8018fe0:	2b13      	cmp	r3, #19
 8018fe2:	d809      	bhi.n	8018ff8 <ip4_frag+0x64>
 8018fe4:	4b88      	ldr	r3, [pc, #544]	@ (8019208 <ip4_frag+0x274>)
 8018fe6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018fea:	4988      	ldr	r1, [pc, #544]	@ (801920c <ip4_frag+0x278>)
 8018fec:	4888      	ldr	r0, [pc, #544]	@ (8019210 <ip4_frag+0x27c>)
 8018fee:	f009 fca3 	bl	8022938 <iprintf>
 8018ff2:	f06f 0305 	mvn.w	r3, #5
 8018ff6:	e102      	b.n	80191fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ffa:	88db      	ldrh	r3, [r3, #6]
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	4618      	mov	r0, r3
 8019000:	f000 f90e 	bl	8019220 <lwip_htons>
 8019004:	4603      	mov	r3, r0
 8019006:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019008:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801900a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801900e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019012:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019018:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	891b      	ldrh	r3, [r3, #8]
 801901e:	3b14      	subs	r3, #20
 8019020:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019024:	e0e1      	b.n	80191ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019026:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019028:	00db      	lsls	r3, r3, #3
 801902a:	b29b      	uxth	r3, r3
 801902c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019030:	4293      	cmp	r3, r2
 8019032:	bf28      	it	cs
 8019034:	4613      	movcs	r3, r2
 8019036:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019038:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801903c:	2114      	movs	r1, #20
 801903e:	200e      	movs	r0, #14
 8019040:	f001 fa8a 	bl	801a558 <pbuf_alloc>
 8019044:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019048:	2b00      	cmp	r3, #0
 801904a:	f000 80d5 	beq.w	80191f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019050:	895b      	ldrh	r3, [r3, #10]
 8019052:	2b13      	cmp	r3, #19
 8019054:	d806      	bhi.n	8019064 <ip4_frag+0xd0>
 8019056:	4b6c      	ldr	r3, [pc, #432]	@ (8019208 <ip4_frag+0x274>)
 8019058:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801905c:	496d      	ldr	r1, [pc, #436]	@ (8019214 <ip4_frag+0x280>)
 801905e:	486c      	ldr	r0, [pc, #432]	@ (8019210 <ip4_frag+0x27c>)
 8019060:	f009 fc6a 	bl	8022938 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	2214      	movs	r2, #20
 801906a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801906c:	4618      	mov	r0, r3
 801906e:	f009 fe9a 	bl	8022da6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019074:	685b      	ldr	r3, [r3, #4]
 8019076:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019078:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801907a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801907e:	e064      	b.n	801914a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	895a      	ldrh	r2, [r3, #10]
 8019084:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	895b      	ldrh	r3, [r3, #10]
 801908e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019090:	429a      	cmp	r2, r3
 8019092:	d906      	bls.n	80190a2 <ip4_frag+0x10e>
 8019094:	4b5c      	ldr	r3, [pc, #368]	@ (8019208 <ip4_frag+0x274>)
 8019096:	f240 322d 	movw	r2, #813	@ 0x32d
 801909a:	495f      	ldr	r1, [pc, #380]	@ (8019218 <ip4_frag+0x284>)
 801909c:	485c      	ldr	r0, [pc, #368]	@ (8019210 <ip4_frag+0x27c>)
 801909e:	f009 fc4b 	bl	8022938 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80190a2:	8bfa      	ldrh	r2, [r7, #30]
 80190a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80190a8:	4293      	cmp	r3, r2
 80190aa:	bf28      	it	cs
 80190ac:	4613      	movcs	r3, r2
 80190ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80190b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d105      	bne.n	80190c6 <ip4_frag+0x132>
        poff = 0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	60fb      	str	r3, [r7, #12]
        continue;
 80190c4:	e041      	b.n	801914a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190c6:	f7ff ff0d 	bl	8018ee4 <ip_frag_alloc_pbuf_custom_ref>
 80190ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190cc:	69bb      	ldr	r3, [r7, #24]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d103      	bne.n	80190da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80190d4:	f001 fd56 	bl	801ab84 <pbuf_free>
        goto memerr;
 80190d8:	e08f      	b.n	80191fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190e2:	4413      	add	r3, r2
 80190e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80190e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80190ec:	9201      	str	r2, [sp, #4]
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	4603      	mov	r3, r0
 80190f2:	2241      	movs	r2, #65	@ 0x41
 80190f4:	2000      	movs	r0, #0
 80190f6:	f001 fb59 	bl	801a7ac <pbuf_alloced_custom>
 80190fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d106      	bne.n	8019110 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019102:	69b8      	ldr	r0, [r7, #24]
 8019104:	f7ff fef6 	bl	8018ef4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801910a:	f001 fd3b 	bl	801ab84 <pbuf_free>
        goto memerr;
 801910e:	e074      	b.n	80191fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019110:	68f8      	ldr	r0, [r7, #12]
 8019112:	f001 fddd 	bl	801acd0 <pbuf_ref>
      pcr->original = p;
 8019116:	69bb      	ldr	r3, [r7, #24]
 8019118:	68fa      	ldr	r2, [r7, #12]
 801911a:	61da      	str	r2, [r3, #28]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801911c:	69bb      	ldr	r3, [r7, #24]
 801911e:	4a3f      	ldr	r2, [pc, #252]	@ (801921c <ip4_frag+0x288>)
 8019120:	619a      	str	r2, [r3, #24]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019122:	6979      	ldr	r1, [r7, #20]
 8019124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019126:	f001 fdfb 	bl	801ad20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801912a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801912e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019132:	1ad3      	subs	r3, r2, r3
 8019134:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019138:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801913c:	2b00      	cmp	r3, #0
 801913e:	d004      	beq.n	801914a <ip4_frag+0x1b6>
        poff = 0;
 8019140:	2300      	movs	r3, #0
 8019142:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801914a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801914e:	2b00      	cmp	r3, #0
 8019150:	d196      	bne.n	8019080 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019152:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019158:	4413      	add	r3, r2
 801915a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8019160:	f1a3 0213 	sub.w	r2, r3, #19
 8019164:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019168:	429a      	cmp	r2, r3
 801916a:	bfcc      	ite	gt
 801916c:	2301      	movgt	r3, #1
 801916e:	2300      	movle	r3, #0
 8019170:	b2db      	uxtb	r3, r3
 8019172:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801917c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801917e:	6a3b      	ldr	r3, [r7, #32]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d002      	beq.n	801918a <ip4_frag+0x1f6>
 8019184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019186:	2b00      	cmp	r3, #0
 8019188:	d003      	beq.n	8019192 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801918a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801918c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019190:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019192:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019194:	4618      	mov	r0, r3
 8019196:	f000 f843 	bl	8019220 <lwip_htons>
 801919a:	4603      	mov	r3, r0
 801919c:	461a      	mov	r2, r3
 801919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80191a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80191a4:	3314      	adds	r3, #20
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	4618      	mov	r0, r3
 80191aa:	f000 f839 	bl	8019220 <lwip_htons>
 80191ae:	4603      	mov	r3, r0
 80191b0:	461a      	mov	r2, r3
 80191b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80191b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b8:	2200      	movs	r2, #0
 80191ba:	729a      	strb	r2, [r3, #10]
 80191bc:	2200      	movs	r2, #0
 80191be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	695b      	ldr	r3, [r3, #20]
 80191c4:	687a      	ldr	r2, [r7, #4]
 80191c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80191c8:	68b8      	ldr	r0, [r7, #8]
 80191ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80191ce:	f001 fcd9 	bl	801ab84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80191d8:	1ad3      	subs	r3, r2, r3
 80191da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80191de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80191e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80191e4:	4413      	add	r3, r2
 80191e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80191ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	f47f af19 	bne.w	8019026 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80191f4:	2300      	movs	r3, #0
 80191f6:	e002      	b.n	80191fe <ip4_frag+0x26a>
      goto memerr;
 80191f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80191fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3748      	adds	r7, #72	@ 0x48
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	08025cc8 	.word	0x08025cc8
 801920c:	08025ee4 	.word	0x08025ee4
 8019210:	08025d50 	.word	0x08025d50
 8019214:	08025f00 	.word	0x08025f00
 8019218:	08025f20 	.word	0x08025f20
 801921c:	08018f2d 	.word	0x08018f2d

08019220 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019220:	b480      	push	{r7}
 8019222:	b083      	sub	sp, #12
 8019224:	af00      	add	r7, sp, #0
 8019226:	4603      	mov	r3, r0
 8019228:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801922a:	88fb      	ldrh	r3, [r7, #6]
 801922c:	021b      	lsls	r3, r3, #8
 801922e:	b21a      	sxth	r2, r3
 8019230:	88fb      	ldrh	r3, [r7, #6]
 8019232:	0a1b      	lsrs	r3, r3, #8
 8019234:	b29b      	uxth	r3, r3
 8019236:	b21b      	sxth	r3, r3
 8019238:	4313      	orrs	r3, r2
 801923a:	b21b      	sxth	r3, r3
 801923c:	b29b      	uxth	r3, r3
}
 801923e:	4618      	mov	r0, r3
 8019240:	370c      	adds	r7, #12
 8019242:	46bd      	mov	sp, r7
 8019244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019248:	4770      	bx	lr

0801924a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801924a:	b480      	push	{r7}
 801924c:	b083      	sub	sp, #12
 801924e:	af00      	add	r7, sp, #0
 8019250:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	061a      	lsls	r2, r3, #24
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	021b      	lsls	r3, r3, #8
 801925a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801925e:	431a      	orrs	r2, r3
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	0a1b      	lsrs	r3, r3, #8
 8019264:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019268:	431a      	orrs	r2, r3
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	0e1b      	lsrs	r3, r3, #24
 801926e:	4313      	orrs	r3, r2
}
 8019270:	4618      	mov	r0, r3
 8019272:	370c      	adds	r7, #12
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr

0801927c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801927c:	b480      	push	{r7}
 801927e:	b089      	sub	sp, #36	@ 0x24
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
 8019284:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801928a:	2300      	movs	r3, #0
 801928c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801928e:	2300      	movs	r3, #0
 8019290:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8019292:	69fb      	ldr	r3, [r7, #28]
 8019294:	f003 0301 	and.w	r3, r3, #1
 8019298:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d00d      	beq.n	80192bc <lwip_standard_chksum+0x40>
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	dd0a      	ble.n	80192bc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80192a6:	69fa      	ldr	r2, [r7, #28]
 80192a8:	1c53      	adds	r3, r2, #1
 80192aa:	61fb      	str	r3, [r7, #28]
 80192ac:	f107 030e 	add.w	r3, r7, #14
 80192b0:	3301      	adds	r3, #1
 80192b2:	7812      	ldrb	r2, [r2, #0]
 80192b4:	701a      	strb	r2, [r3, #0]
    len--;
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	3b01      	subs	r3, #1
 80192ba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80192bc:	69fb      	ldr	r3, [r7, #28]
 80192be:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80192c0:	e00a      	b.n	80192d8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80192c2:	69bb      	ldr	r3, [r7, #24]
 80192c4:	1c9a      	adds	r2, r3, #2
 80192c6:	61ba      	str	r2, [r7, #24]
 80192c8:	881b      	ldrh	r3, [r3, #0]
 80192ca:	461a      	mov	r2, r3
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	4413      	add	r3, r2
 80192d0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	3b02      	subs	r3, #2
 80192d6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80192d8:	683b      	ldr	r3, [r7, #0]
 80192da:	2b01      	cmp	r3, #1
 80192dc:	dcf1      	bgt.n	80192c2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	dd04      	ble.n	80192ee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80192e4:	f107 030e 	add.w	r3, r7, #14
 80192e8:	69ba      	ldr	r2, [r7, #24]
 80192ea:	7812      	ldrb	r2, [r2, #0]
 80192ec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80192ee:	89fb      	ldrh	r3, [r7, #14]
 80192f0:	461a      	mov	r2, r3
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	4413      	add	r3, r2
 80192f6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	0c1a      	lsrs	r2, r3, #16
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	b29b      	uxth	r3, r3
 8019300:	4413      	add	r3, r2
 8019302:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	0c1a      	lsrs	r2, r3, #16
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	b29b      	uxth	r3, r3
 801930c:	4413      	add	r3, r2
 801930e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8019310:	693b      	ldr	r3, [r7, #16]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d007      	beq.n	8019326 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	021b      	lsls	r3, r3, #8
 801931a:	b29a      	uxth	r2, r3
 801931c:	697b      	ldr	r3, [r7, #20]
 801931e:	0a1b      	lsrs	r3, r3, #8
 8019320:	b2db      	uxtb	r3, r3
 8019322:	4313      	orrs	r3, r2
 8019324:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	b29b      	uxth	r3, r3
}
 801932a:	4618      	mov	r0, r3
 801932c:	3724      	adds	r7, #36	@ 0x24
 801932e:	46bd      	mov	sp, r7
 8019330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019334:	4770      	bx	lr

08019336 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019336:	b580      	push	{r7, lr}
 8019338:	b082      	sub	sp, #8
 801933a:	af00      	add	r7, sp, #0
 801933c:	6078      	str	r0, [r7, #4]
 801933e:	460b      	mov	r3, r1
 8019340:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8019342:	887b      	ldrh	r3, [r7, #2]
 8019344:	4619      	mov	r1, r3
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	f7ff ff98 	bl	801927c <lwip_standard_chksum>
 801934c:	4603      	mov	r3, r0
 801934e:	43db      	mvns	r3, r3
 8019350:	b29b      	uxth	r3, r3
}
 8019352:	4618      	mov	r0, r3
 8019354:	3708      	adds	r7, #8
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}

0801935a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801935a:	b580      	push	{r7, lr}
 801935c:	b082      	sub	sp, #8
 801935e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019360:	2300      	movs	r3, #0
 8019362:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019364:	f009 f924 	bl	80225b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019368:	f000 f8d6 	bl	8019518 <mem_init>
  memp_init();
 801936c:	f000 fc2e 	bl	8019bcc <memp_init>
  pbuf_init();
  netif_init();
 8019370:	f000 fd3a 	bl	8019de8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019374:	f008 f944 	bl	8021600 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019378:	f001 ff40 	bl	801b1fc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 801937c:	f7fd ffac 	bl	80172d8 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8019380:	f008 f884 	bl	802148c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019384:	bf00      	nop
 8019386:	3708      	adds	r7, #8
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801938c:	b480      	push	{r7}
 801938e:	b083      	sub	sp, #12
 8019390:	af00      	add	r7, sp, #0
 8019392:	4603      	mov	r3, r0
 8019394:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8019396:	4b05      	ldr	r3, [pc, #20]	@ (80193ac <ptr_to_mem+0x20>)
 8019398:	681a      	ldr	r2, [r3, #0]
 801939a:	88fb      	ldrh	r3, [r7, #6]
 801939c:	4413      	add	r3, r2
}
 801939e:	4618      	mov	r0, r3
 80193a0:	370c      	adds	r7, #12
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	20008ed4 	.word	0x20008ed4

080193b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80193b8:	4b05      	ldr	r3, [pc, #20]	@ (80193d0 <mem_to_ptr+0x20>)
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	687a      	ldr	r2, [r7, #4]
 80193be:	1ad3      	subs	r3, r2, r3
 80193c0:	b29b      	uxth	r3, r3
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	370c      	adds	r7, #12
 80193c6:	46bd      	mov	sp, r7
 80193c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop
 80193d0:	20008ed4 	.word	0x20008ed4

080193d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80193d4:	b590      	push	{r4, r7, lr}
 80193d6:	b085      	sub	sp, #20
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80193dc:	4b45      	ldr	r3, [pc, #276]	@ (80194f4 <plug_holes+0x120>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	687a      	ldr	r2, [r7, #4]
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d206      	bcs.n	80193f4 <plug_holes+0x20>
 80193e6:	4b44      	ldr	r3, [pc, #272]	@ (80194f8 <plug_holes+0x124>)
 80193e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80193ec:	4943      	ldr	r1, [pc, #268]	@ (80194fc <plug_holes+0x128>)
 80193ee:	4844      	ldr	r0, [pc, #272]	@ (8019500 <plug_holes+0x12c>)
 80193f0:	f009 faa2 	bl	8022938 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80193f4:	4b43      	ldr	r3, [pc, #268]	@ (8019504 <plug_holes+0x130>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	687a      	ldr	r2, [r7, #4]
 80193fa:	429a      	cmp	r2, r3
 80193fc:	d306      	bcc.n	801940c <plug_holes+0x38>
 80193fe:	4b3e      	ldr	r3, [pc, #248]	@ (80194f8 <plug_holes+0x124>)
 8019400:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019404:	4940      	ldr	r1, [pc, #256]	@ (8019508 <plug_holes+0x134>)
 8019406:	483e      	ldr	r0, [pc, #248]	@ (8019500 <plug_holes+0x12c>)
 8019408:	f009 fa96 	bl	8022938 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	791b      	ldrb	r3, [r3, #4]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d006      	beq.n	8019422 <plug_holes+0x4e>
 8019414:	4b38      	ldr	r3, [pc, #224]	@ (80194f8 <plug_holes+0x124>)
 8019416:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801941a:	493c      	ldr	r1, [pc, #240]	@ (801950c <plug_holes+0x138>)
 801941c:	4838      	ldr	r0, [pc, #224]	@ (8019500 <plug_holes+0x12c>)
 801941e:	f009 fa8b 	bl	8022938 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	881b      	ldrh	r3, [r3, #0]
 8019426:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 801942a:	d906      	bls.n	801943a <plug_holes+0x66>
 801942c:	4b32      	ldr	r3, [pc, #200]	@ (80194f8 <plug_holes+0x124>)
 801942e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8019432:	4937      	ldr	r1, [pc, #220]	@ (8019510 <plug_holes+0x13c>)
 8019434:	4832      	ldr	r0, [pc, #200]	@ (8019500 <plug_holes+0x12c>)
 8019436:	f009 fa7f 	bl	8022938 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	881b      	ldrh	r3, [r3, #0]
 801943e:	4618      	mov	r0, r3
 8019440:	f7ff ffa4 	bl	801938c <ptr_to_mem>
 8019444:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	429a      	cmp	r2, r3
 801944c:	d024      	beq.n	8019498 <plug_holes+0xc4>
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	791b      	ldrb	r3, [r3, #4]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d120      	bne.n	8019498 <plug_holes+0xc4>
 8019456:	4b2b      	ldr	r3, [pc, #172]	@ (8019504 <plug_holes+0x130>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	68fa      	ldr	r2, [r7, #12]
 801945c:	429a      	cmp	r2, r3
 801945e:	d01b      	beq.n	8019498 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8019460:	4b2c      	ldr	r3, [pc, #176]	@ (8019514 <plug_holes+0x140>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	68fa      	ldr	r2, [r7, #12]
 8019466:	429a      	cmp	r2, r3
 8019468:	d102      	bne.n	8019470 <plug_holes+0x9c>
      lfree = mem;
 801946a:	4a2a      	ldr	r2, [pc, #168]	@ (8019514 <plug_holes+0x140>)
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	881a      	ldrh	r2, [r3, #0]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	881b      	ldrh	r3, [r3, #0]
 801947c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019480:	d00a      	beq.n	8019498 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	881b      	ldrh	r3, [r3, #0]
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff ff80 	bl	801938c <ptr_to_mem>
 801948c:	4604      	mov	r4, r0
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	f7ff ff8e 	bl	80193b0 <mem_to_ptr>
 8019494:	4603      	mov	r3, r0
 8019496:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	885b      	ldrh	r3, [r3, #2]
 801949c:	4618      	mov	r0, r3
 801949e:	f7ff ff75 	bl	801938c <ptr_to_mem>
 80194a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80194a4:	68ba      	ldr	r2, [r7, #8]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d01f      	beq.n	80194ec <plug_holes+0x118>
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	791b      	ldrb	r3, [r3, #4]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d11b      	bne.n	80194ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80194b4:	4b17      	ldr	r3, [pc, #92]	@ (8019514 <plug_holes+0x140>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d102      	bne.n	80194c4 <plug_holes+0xf0>
      lfree = pmem;
 80194be:	4a15      	ldr	r2, [pc, #84]	@ (8019514 <plug_holes+0x140>)
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	881a      	ldrh	r2, [r3, #0]
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	881b      	ldrh	r3, [r3, #0]
 80194d0:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80194d4:	d00a      	beq.n	80194ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	881b      	ldrh	r3, [r3, #0]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7ff ff56 	bl	801938c <ptr_to_mem>
 80194e0:	4604      	mov	r4, r0
 80194e2:	68b8      	ldr	r0, [r7, #8]
 80194e4:	f7ff ff64 	bl	80193b0 <mem_to_ptr>
 80194e8:	4603      	mov	r3, r0
 80194ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80194ec:	bf00      	nop
 80194ee:	3714      	adds	r7, #20
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd90      	pop	{r4, r7, pc}
 80194f4:	20008ed4 	.word	0x20008ed4
 80194f8:	08025f30 	.word	0x08025f30
 80194fc:	08025fa4 	.word	0x08025fa4
 8019500:	08025fbc 	.word	0x08025fbc
 8019504:	20008ed8 	.word	0x20008ed8
 8019508:	08025fe4 	.word	0x08025fe4
 801950c:	08026000 	.word	0x08026000
 8019510:	0802601c 	.word	0x0802601c
 8019514:	20008ee0 	.word	0x20008ee0

08019518 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801951e:	4b1d      	ldr	r3, [pc, #116]	@ (8019594 <mem_init+0x7c>)
 8019520:	4a1d      	ldr	r2, [pc, #116]	@ (8019598 <mem_init+0x80>)
 8019522:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8019524:	4b1b      	ldr	r3, [pc, #108]	@ (8019594 <mem_init+0x7c>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8019530:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2200      	movs	r2, #0
 8019536:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2200      	movs	r2, #0
 801953c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801953e:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 8019542:	f7ff ff23 	bl	801938c <ptr_to_mem>
 8019546:	4603      	mov	r3, r0
 8019548:	4a14      	ldr	r2, [pc, #80]	@ (801959c <mem_init+0x84>)
 801954a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801954c:	4b13      	ldr	r3, [pc, #76]	@ (801959c <mem_init+0x84>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2201      	movs	r2, #1
 8019552:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8019554:	4b11      	ldr	r3, [pc, #68]	@ (801959c <mem_init+0x84>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 801955c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801955e:	4b0f      	ldr	r3, [pc, #60]	@ (801959c <mem_init+0x84>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8019566:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019568:	4b0a      	ldr	r3, [pc, #40]	@ (8019594 <mem_init+0x7c>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	4a0c      	ldr	r2, [pc, #48]	@ (80195a0 <mem_init+0x88>)
 801956e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019570:	480c      	ldr	r0, [pc, #48]	@ (80195a4 <mem_init+0x8c>)
 8019572:	f009 f829 	bl	80225c8 <sys_mutex_new>
 8019576:	4603      	mov	r3, r0
 8019578:	2b00      	cmp	r3, #0
 801957a:	d006      	beq.n	801958a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801957c:	4b0a      	ldr	r3, [pc, #40]	@ (80195a8 <mem_init+0x90>)
 801957e:	f240 221f 	movw	r2, #543	@ 0x21f
 8019582:	490a      	ldr	r1, [pc, #40]	@ (80195ac <mem_init+0x94>)
 8019584:	480a      	ldr	r0, [pc, #40]	@ (80195b0 <mem_init+0x98>)
 8019586:	f009 f9d7 	bl	8022938 <iprintf>
  }
}
 801958a:	bf00      	nop
 801958c:	3708      	adds	r7, #8
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}
 8019592:	bf00      	nop
 8019594:	20008ed4 	.word	0x20008ed4
 8019598:	30004000 	.word	0x30004000
 801959c:	20008ed8 	.word	0x20008ed8
 80195a0:	20008ee0 	.word	0x20008ee0
 80195a4:	20008edc 	.word	0x20008edc
 80195a8:	08025f30 	.word	0x08025f30
 80195ac:	08026048 	.word	0x08026048
 80195b0:	08025fbc 	.word	0x08025fbc

080195b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b086      	sub	sp, #24
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7ff fef7 	bl	80193b0 <mem_to_ptr>
 80195c2:	4603      	mov	r3, r0
 80195c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7ff fede 	bl	801938c <ptr_to_mem>
 80195d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	885b      	ldrh	r3, [r3, #2]
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7ff fed8 	bl	801938c <ptr_to_mem>
 80195dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	881b      	ldrh	r3, [r3, #0]
 80195e2:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80195e6:	d818      	bhi.n	801961a <mem_link_valid+0x66>
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	885b      	ldrh	r3, [r3, #2]
 80195ec:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80195f0:	d813      	bhi.n	801961a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80195f6:	8afa      	ldrh	r2, [r7, #22]
 80195f8:	429a      	cmp	r2, r3
 80195fa:	d004      	beq.n	8019606 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	881b      	ldrh	r3, [r3, #0]
 8019600:	8afa      	ldrh	r2, [r7, #22]
 8019602:	429a      	cmp	r2, r3
 8019604:	d109      	bne.n	801961a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019606:	4b08      	ldr	r3, [pc, #32]	@ (8019628 <mem_link_valid+0x74>)
 8019608:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801960a:	693a      	ldr	r2, [r7, #16]
 801960c:	429a      	cmp	r2, r3
 801960e:	d006      	beq.n	801961e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	885b      	ldrh	r3, [r3, #2]
 8019614:	8afa      	ldrh	r2, [r7, #22]
 8019616:	429a      	cmp	r2, r3
 8019618:	d001      	beq.n	801961e <mem_link_valid+0x6a>
    return 0;
 801961a:	2300      	movs	r3, #0
 801961c:	e000      	b.n	8019620 <mem_link_valid+0x6c>
  }
  return 1;
 801961e:	2301      	movs	r3, #1
}
 8019620:	4618      	mov	r0, r3
 8019622:	3718      	adds	r7, #24
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}
 8019628:	20008ed8 	.word	0x20008ed8

0801962c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b088      	sub	sp, #32
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d070      	beq.n	801971c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	f003 0303 	and.w	r3, r3, #3
 8019640:	2b00      	cmp	r3, #0
 8019642:	d00d      	beq.n	8019660 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019644:	4b37      	ldr	r3, [pc, #220]	@ (8019724 <mem_free+0xf8>)
 8019646:	f240 2273 	movw	r2, #627	@ 0x273
 801964a:	4937      	ldr	r1, [pc, #220]	@ (8019728 <mem_free+0xfc>)
 801964c:	4837      	ldr	r0, [pc, #220]	@ (801972c <mem_free+0x100>)
 801964e:	f009 f973 	bl	8022938 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019652:	f009 f80b 	bl	802266c <sys_arch_protect>
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	68f8      	ldr	r0, [r7, #12]
 801965a:	f009 f815 	bl	8022688 <sys_arch_unprotect>
    return;
 801965e:	e05e      	b.n	801971e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	3b08      	subs	r3, #8
 8019664:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019666:	4b32      	ldr	r3, [pc, #200]	@ (8019730 <mem_free+0x104>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	69fa      	ldr	r2, [r7, #28]
 801966c:	429a      	cmp	r2, r3
 801966e:	d306      	bcc.n	801967e <mem_free+0x52>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f103 020c 	add.w	r2, r3, #12
 8019676:	4b2f      	ldr	r3, [pc, #188]	@ (8019734 <mem_free+0x108>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	429a      	cmp	r2, r3
 801967c:	d90d      	bls.n	801969a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801967e:	4b29      	ldr	r3, [pc, #164]	@ (8019724 <mem_free+0xf8>)
 8019680:	f240 227f 	movw	r2, #639	@ 0x27f
 8019684:	492c      	ldr	r1, [pc, #176]	@ (8019738 <mem_free+0x10c>)
 8019686:	4829      	ldr	r0, [pc, #164]	@ (801972c <mem_free+0x100>)
 8019688:	f009 f956 	bl	8022938 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801968c:	f008 ffee 	bl	802266c <sys_arch_protect>
 8019690:	6138      	str	r0, [r7, #16]
 8019692:	6938      	ldr	r0, [r7, #16]
 8019694:	f008 fff8 	bl	8022688 <sys_arch_unprotect>
    return;
 8019698:	e041      	b.n	801971e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801969a:	4828      	ldr	r0, [pc, #160]	@ (801973c <mem_free+0x110>)
 801969c:	f008 ffaa 	bl	80225f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80196a0:	69fb      	ldr	r3, [r7, #28]
 80196a2:	791b      	ldrb	r3, [r3, #4]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d110      	bne.n	80196ca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80196a8:	4b1e      	ldr	r3, [pc, #120]	@ (8019724 <mem_free+0xf8>)
 80196aa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80196ae:	4924      	ldr	r1, [pc, #144]	@ (8019740 <mem_free+0x114>)
 80196b0:	481e      	ldr	r0, [pc, #120]	@ (801972c <mem_free+0x100>)
 80196b2:	f009 f941 	bl	8022938 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80196b6:	4821      	ldr	r0, [pc, #132]	@ (801973c <mem_free+0x110>)
 80196b8:	f008 ffab 	bl	8022612 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80196bc:	f008 ffd6 	bl	802266c <sys_arch_protect>
 80196c0:	6178      	str	r0, [r7, #20]
 80196c2:	6978      	ldr	r0, [r7, #20]
 80196c4:	f008 ffe0 	bl	8022688 <sys_arch_unprotect>
    return;
 80196c8:	e029      	b.n	801971e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80196ca:	69f8      	ldr	r0, [r7, #28]
 80196cc:	f7ff ff72 	bl	80195b4 <mem_link_valid>
 80196d0:	4603      	mov	r3, r0
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d110      	bne.n	80196f8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80196d6:	4b13      	ldr	r3, [pc, #76]	@ (8019724 <mem_free+0xf8>)
 80196d8:	f240 2295 	movw	r2, #661	@ 0x295
 80196dc:	4919      	ldr	r1, [pc, #100]	@ (8019744 <mem_free+0x118>)
 80196de:	4813      	ldr	r0, [pc, #76]	@ (801972c <mem_free+0x100>)
 80196e0:	f009 f92a 	bl	8022938 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80196e4:	4815      	ldr	r0, [pc, #84]	@ (801973c <mem_free+0x110>)
 80196e6:	f008 ff94 	bl	8022612 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80196ea:	f008 ffbf 	bl	802266c <sys_arch_protect>
 80196ee:	61b8      	str	r0, [r7, #24]
 80196f0:	69b8      	ldr	r0, [r7, #24]
 80196f2:	f008 ffc9 	bl	8022688 <sys_arch_unprotect>
    return;
 80196f6:	e012      	b.n	801971e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80196f8:	69fb      	ldr	r3, [r7, #28]
 80196fa:	2200      	movs	r2, #0
 80196fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80196fe:	4b12      	ldr	r3, [pc, #72]	@ (8019748 <mem_free+0x11c>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	69fa      	ldr	r2, [r7, #28]
 8019704:	429a      	cmp	r2, r3
 8019706:	d202      	bcs.n	801970e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8019708:	4a0f      	ldr	r2, [pc, #60]	@ (8019748 <mem_free+0x11c>)
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801970e:	69f8      	ldr	r0, [r7, #28]
 8019710:	f7ff fe60 	bl	80193d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8019714:	4809      	ldr	r0, [pc, #36]	@ (801973c <mem_free+0x110>)
 8019716:	f008 ff7c 	bl	8022612 <sys_mutex_unlock>
 801971a:	e000      	b.n	801971e <mem_free+0xf2>
    return;
 801971c:	bf00      	nop
}
 801971e:	3720      	adds	r7, #32
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}
 8019724:	08025f30 	.word	0x08025f30
 8019728:	08026064 	.word	0x08026064
 801972c:	08025fbc 	.word	0x08025fbc
 8019730:	20008ed4 	.word	0x20008ed4
 8019734:	20008ed8 	.word	0x20008ed8
 8019738:	08026088 	.word	0x08026088
 801973c:	20008edc 	.word	0x20008edc
 8019740:	080260a4 	.word	0x080260a4
 8019744:	080260cc 	.word	0x080260cc
 8019748:	20008ee0 	.word	0x20008ee0

0801974c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b088      	sub	sp, #32
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	460b      	mov	r3, r1
 8019756:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019758:	887b      	ldrh	r3, [r7, #2]
 801975a:	3303      	adds	r3, #3
 801975c:	b29b      	uxth	r3, r3
 801975e:	f023 0303 	bic.w	r3, r3, #3
 8019762:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8019764:	8bfb      	ldrh	r3, [r7, #30]
 8019766:	2b0b      	cmp	r3, #11
 8019768:	d801      	bhi.n	801976e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801976a:	230c      	movs	r3, #12
 801976c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801976e:	8bfb      	ldrh	r3, [r7, #30]
 8019770:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019774:	d803      	bhi.n	801977e <mem_trim+0x32>
 8019776:	8bfa      	ldrh	r2, [r7, #30]
 8019778:	887b      	ldrh	r3, [r7, #2]
 801977a:	429a      	cmp	r2, r3
 801977c:	d201      	bcs.n	8019782 <mem_trim+0x36>
    return NULL;
 801977e:	2300      	movs	r3, #0
 8019780:	e0d8      	b.n	8019934 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019782:	4b6e      	ldr	r3, [pc, #440]	@ (801993c <mem_trim+0x1f0>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	687a      	ldr	r2, [r7, #4]
 8019788:	429a      	cmp	r2, r3
 801978a:	d304      	bcc.n	8019796 <mem_trim+0x4a>
 801978c:	4b6c      	ldr	r3, [pc, #432]	@ (8019940 <mem_trim+0x1f4>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	687a      	ldr	r2, [r7, #4]
 8019792:	429a      	cmp	r2, r3
 8019794:	d306      	bcc.n	80197a4 <mem_trim+0x58>
 8019796:	4b6b      	ldr	r3, [pc, #428]	@ (8019944 <mem_trim+0x1f8>)
 8019798:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801979c:	496a      	ldr	r1, [pc, #424]	@ (8019948 <mem_trim+0x1fc>)
 801979e:	486b      	ldr	r0, [pc, #428]	@ (801994c <mem_trim+0x200>)
 80197a0:	f009 f8ca 	bl	8022938 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80197a4:	4b65      	ldr	r3, [pc, #404]	@ (801993c <mem_trim+0x1f0>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d304      	bcc.n	80197b8 <mem_trim+0x6c>
 80197ae:	4b64      	ldr	r3, [pc, #400]	@ (8019940 <mem_trim+0x1f4>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	687a      	ldr	r2, [r7, #4]
 80197b4:	429a      	cmp	r2, r3
 80197b6:	d307      	bcc.n	80197c8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80197b8:	f008 ff58 	bl	802266c <sys_arch_protect>
 80197bc:	60b8      	str	r0, [r7, #8]
 80197be:	68b8      	ldr	r0, [r7, #8]
 80197c0:	f008 ff62 	bl	8022688 <sys_arch_unprotect>
    return rmem;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	e0b5      	b.n	8019934 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	3b08      	subs	r3, #8
 80197cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80197ce:	69b8      	ldr	r0, [r7, #24]
 80197d0:	f7ff fdee 	bl	80193b0 <mem_to_ptr>
 80197d4:	4603      	mov	r3, r0
 80197d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80197d8:	69bb      	ldr	r3, [r7, #24]
 80197da:	881a      	ldrh	r2, [r3, #0]
 80197dc:	8afb      	ldrh	r3, [r7, #22]
 80197de:	1ad3      	subs	r3, r2, r3
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	3b08      	subs	r3, #8
 80197e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80197e6:	8bfa      	ldrh	r2, [r7, #30]
 80197e8:	8abb      	ldrh	r3, [r7, #20]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d906      	bls.n	80197fc <mem_trim+0xb0>
 80197ee:	4b55      	ldr	r3, [pc, #340]	@ (8019944 <mem_trim+0x1f8>)
 80197f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80197f4:	4956      	ldr	r1, [pc, #344]	@ (8019950 <mem_trim+0x204>)
 80197f6:	4855      	ldr	r0, [pc, #340]	@ (801994c <mem_trim+0x200>)
 80197f8:	f009 f89e 	bl	8022938 <iprintf>
  if (newsize > size) {
 80197fc:	8bfa      	ldrh	r2, [r7, #30]
 80197fe:	8abb      	ldrh	r3, [r7, #20]
 8019800:	429a      	cmp	r2, r3
 8019802:	d901      	bls.n	8019808 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8019804:	2300      	movs	r3, #0
 8019806:	e095      	b.n	8019934 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8019808:	8bfa      	ldrh	r2, [r7, #30]
 801980a:	8abb      	ldrh	r3, [r7, #20]
 801980c:	429a      	cmp	r2, r3
 801980e:	d101      	bne.n	8019814 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	e08f      	b.n	8019934 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8019814:	484f      	ldr	r0, [pc, #316]	@ (8019954 <mem_trim+0x208>)
 8019816:	f008 feed 	bl	80225f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801981a:	69bb      	ldr	r3, [r7, #24]
 801981c:	881b      	ldrh	r3, [r3, #0]
 801981e:	4618      	mov	r0, r3
 8019820:	f7ff fdb4 	bl	801938c <ptr_to_mem>
 8019824:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	791b      	ldrb	r3, [r3, #4]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d13f      	bne.n	80198ae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801982e:	69bb      	ldr	r3, [r7, #24]
 8019830:	881b      	ldrh	r3, [r3, #0]
 8019832:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019836:	d106      	bne.n	8019846 <mem_trim+0xfa>
 8019838:	4b42      	ldr	r3, [pc, #264]	@ (8019944 <mem_trim+0x1f8>)
 801983a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801983e:	4946      	ldr	r1, [pc, #280]	@ (8019958 <mem_trim+0x20c>)
 8019840:	4842      	ldr	r0, [pc, #264]	@ (801994c <mem_trim+0x200>)
 8019842:	f009 f879 	bl	8022938 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8019846:	693b      	ldr	r3, [r7, #16]
 8019848:	881b      	ldrh	r3, [r3, #0]
 801984a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801984c:	8afa      	ldrh	r2, [r7, #22]
 801984e:	8bfb      	ldrh	r3, [r7, #30]
 8019850:	4413      	add	r3, r2
 8019852:	b29b      	uxth	r3, r3
 8019854:	3308      	adds	r3, #8
 8019856:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8019858:	4b40      	ldr	r3, [pc, #256]	@ (801995c <mem_trim+0x210>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	693a      	ldr	r2, [r7, #16]
 801985e:	429a      	cmp	r2, r3
 8019860:	d106      	bne.n	8019870 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8019862:	89fb      	ldrh	r3, [r7, #14]
 8019864:	4618      	mov	r0, r3
 8019866:	f7ff fd91 	bl	801938c <ptr_to_mem>
 801986a:	4603      	mov	r3, r0
 801986c:	4a3b      	ldr	r2, [pc, #236]	@ (801995c <mem_trim+0x210>)
 801986e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8019870:	89fb      	ldrh	r3, [r7, #14]
 8019872:	4618      	mov	r0, r3
 8019874:	f7ff fd8a 	bl	801938c <ptr_to_mem>
 8019878:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801987a:	693b      	ldr	r3, [r7, #16]
 801987c:	2200      	movs	r2, #0
 801987e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019880:	693b      	ldr	r3, [r7, #16]
 8019882:	89ba      	ldrh	r2, [r7, #12]
 8019884:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8019886:	693b      	ldr	r3, [r7, #16]
 8019888:	8afa      	ldrh	r2, [r7, #22]
 801988a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801988c:	69bb      	ldr	r3, [r7, #24]
 801988e:	89fa      	ldrh	r2, [r7, #14]
 8019890:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	881b      	ldrh	r3, [r3, #0]
 8019896:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 801989a:	d047      	beq.n	801992c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801989c:	693b      	ldr	r3, [r7, #16]
 801989e:	881b      	ldrh	r3, [r3, #0]
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ff fd73 	bl	801938c <ptr_to_mem>
 80198a6:	4602      	mov	r2, r0
 80198a8:	89fb      	ldrh	r3, [r7, #14]
 80198aa:	8053      	strh	r3, [r2, #2]
 80198ac:	e03e      	b.n	801992c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80198ae:	8bfb      	ldrh	r3, [r7, #30]
 80198b0:	f103 0214 	add.w	r2, r3, #20
 80198b4:	8abb      	ldrh	r3, [r7, #20]
 80198b6:	429a      	cmp	r2, r3
 80198b8:	d838      	bhi.n	801992c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80198ba:	8afa      	ldrh	r2, [r7, #22]
 80198bc:	8bfb      	ldrh	r3, [r7, #30]
 80198be:	4413      	add	r3, r2
 80198c0:	b29b      	uxth	r3, r3
 80198c2:	3308      	adds	r3, #8
 80198c4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80198c6:	69bb      	ldr	r3, [r7, #24]
 80198c8:	881b      	ldrh	r3, [r3, #0]
 80198ca:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80198ce:	d106      	bne.n	80198de <mem_trim+0x192>
 80198d0:	4b1c      	ldr	r3, [pc, #112]	@ (8019944 <mem_trim+0x1f8>)
 80198d2:	f240 3216 	movw	r2, #790	@ 0x316
 80198d6:	4920      	ldr	r1, [pc, #128]	@ (8019958 <mem_trim+0x20c>)
 80198d8:	481c      	ldr	r0, [pc, #112]	@ (801994c <mem_trim+0x200>)
 80198da:	f009 f82d 	bl	8022938 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80198de:	89fb      	ldrh	r3, [r7, #14]
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7ff fd53 	bl	801938c <ptr_to_mem>
 80198e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80198e8:	4b1c      	ldr	r3, [pc, #112]	@ (801995c <mem_trim+0x210>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	693a      	ldr	r2, [r7, #16]
 80198ee:	429a      	cmp	r2, r3
 80198f0:	d202      	bcs.n	80198f8 <mem_trim+0x1ac>
      lfree = mem2;
 80198f2:	4a1a      	ldr	r2, [pc, #104]	@ (801995c <mem_trim+0x210>)
 80198f4:	693b      	ldr	r3, [r7, #16]
 80198f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	2200      	movs	r2, #0
 80198fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	881a      	ldrh	r2, [r3, #0]
 8019902:	693b      	ldr	r3, [r7, #16]
 8019904:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8019906:	693b      	ldr	r3, [r7, #16]
 8019908:	8afa      	ldrh	r2, [r7, #22]
 801990a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801990c:	69bb      	ldr	r3, [r7, #24]
 801990e:	89fa      	ldrh	r2, [r7, #14]
 8019910:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019912:	693b      	ldr	r3, [r7, #16]
 8019914:	881b      	ldrh	r3, [r3, #0]
 8019916:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 801991a:	d007      	beq.n	801992c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	881b      	ldrh	r3, [r3, #0]
 8019920:	4618      	mov	r0, r3
 8019922:	f7ff fd33 	bl	801938c <ptr_to_mem>
 8019926:	4602      	mov	r2, r0
 8019928:	89fb      	ldrh	r3, [r7, #14]
 801992a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801992c:	4809      	ldr	r0, [pc, #36]	@ (8019954 <mem_trim+0x208>)
 801992e:	f008 fe70 	bl	8022612 <sys_mutex_unlock>
  return rmem;
 8019932:	687b      	ldr	r3, [r7, #4]
}
 8019934:	4618      	mov	r0, r3
 8019936:	3720      	adds	r7, #32
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}
 801993c:	20008ed4 	.word	0x20008ed4
 8019940:	20008ed8 	.word	0x20008ed8
 8019944:	08025f30 	.word	0x08025f30
 8019948:	08026100 	.word	0x08026100
 801994c:	08025fbc 	.word	0x08025fbc
 8019950:	08026118 	.word	0x08026118
 8019954:	20008edc 	.word	0x20008edc
 8019958:	08026138 	.word	0x08026138
 801995c:	20008ee0 	.word	0x20008ee0

08019960 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b088      	sub	sp, #32
 8019964:	af00      	add	r7, sp, #0
 8019966:	4603      	mov	r3, r0
 8019968:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801996a:	88fb      	ldrh	r3, [r7, #6]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d101      	bne.n	8019974 <mem_malloc+0x14>
    return NULL;
 8019970:	2300      	movs	r3, #0
 8019972:	e0e2      	b.n	8019b3a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019974:	88fb      	ldrh	r3, [r7, #6]
 8019976:	3303      	adds	r3, #3
 8019978:	b29b      	uxth	r3, r3
 801997a:	f023 0303 	bic.w	r3, r3, #3
 801997e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019980:	8bbb      	ldrh	r3, [r7, #28]
 8019982:	2b0b      	cmp	r3, #11
 8019984:	d801      	bhi.n	801998a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8019986:	230c      	movs	r3, #12
 8019988:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801998a:	8bbb      	ldrh	r3, [r7, #28]
 801998c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019990:	d803      	bhi.n	801999a <mem_malloc+0x3a>
 8019992:	8bba      	ldrh	r2, [r7, #28]
 8019994:	88fb      	ldrh	r3, [r7, #6]
 8019996:	429a      	cmp	r2, r3
 8019998:	d201      	bcs.n	801999e <mem_malloc+0x3e>
    return NULL;
 801999a:	2300      	movs	r3, #0
 801999c:	e0cd      	b.n	8019b3a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801999e:	4869      	ldr	r0, [pc, #420]	@ (8019b44 <mem_malloc+0x1e4>)
 80199a0:	f008 fe28 	bl	80225f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80199a4:	4b68      	ldr	r3, [pc, #416]	@ (8019b48 <mem_malloc+0x1e8>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4618      	mov	r0, r3
 80199aa:	f7ff fd01 	bl	80193b0 <mem_to_ptr>
 80199ae:	4603      	mov	r3, r0
 80199b0:	83fb      	strh	r3, [r7, #30]
 80199b2:	e0b7      	b.n	8019b24 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80199b4:	8bfb      	ldrh	r3, [r7, #30]
 80199b6:	4618      	mov	r0, r3
 80199b8:	f7ff fce8 	bl	801938c <ptr_to_mem>
 80199bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	791b      	ldrb	r3, [r3, #4]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	f040 80a7 	bne.w	8019b16 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	881b      	ldrh	r3, [r3, #0]
 80199cc:	461a      	mov	r2, r3
 80199ce:	8bfb      	ldrh	r3, [r7, #30]
 80199d0:	1ad3      	subs	r3, r2, r3
 80199d2:	f1a3 0208 	sub.w	r2, r3, #8
 80199d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80199d8:	429a      	cmp	r2, r3
 80199da:	f0c0 809c 	bcc.w	8019b16 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	881b      	ldrh	r3, [r3, #0]
 80199e2:	461a      	mov	r2, r3
 80199e4:	8bfb      	ldrh	r3, [r7, #30]
 80199e6:	1ad3      	subs	r3, r2, r3
 80199e8:	f1a3 0208 	sub.w	r2, r3, #8
 80199ec:	8bbb      	ldrh	r3, [r7, #28]
 80199ee:	3314      	adds	r3, #20
 80199f0:	429a      	cmp	r2, r3
 80199f2:	d333      	bcc.n	8019a5c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80199f4:	8bfa      	ldrh	r2, [r7, #30]
 80199f6:	8bbb      	ldrh	r3, [r7, #28]
 80199f8:	4413      	add	r3, r2
 80199fa:	b29b      	uxth	r3, r3
 80199fc:	3308      	adds	r3, #8
 80199fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019a00:	8a7b      	ldrh	r3, [r7, #18]
 8019a02:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019a06:	d106      	bne.n	8019a16 <mem_malloc+0xb6>
 8019a08:	4b50      	ldr	r3, [pc, #320]	@ (8019b4c <mem_malloc+0x1ec>)
 8019a0a:	f240 3287 	movw	r2, #903	@ 0x387
 8019a0e:	4950      	ldr	r1, [pc, #320]	@ (8019b50 <mem_malloc+0x1f0>)
 8019a10:	4850      	ldr	r0, [pc, #320]	@ (8019b54 <mem_malloc+0x1f4>)
 8019a12:	f008 ff91 	bl	8022938 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8019a16:	8a7b      	ldrh	r3, [r7, #18]
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7ff fcb7 	bl	801938c <ptr_to_mem>
 8019a1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	2200      	movs	r2, #0
 8019a24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	881a      	ldrh	r2, [r3, #0]
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	8bfa      	ldrh	r2, [r7, #30]
 8019a32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	8a7a      	ldrh	r2, [r7, #18]
 8019a38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8019a3a:	697b      	ldr	r3, [r7, #20]
 8019a3c:	2201      	movs	r2, #1
 8019a3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	881b      	ldrh	r3, [r3, #0]
 8019a44:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8019a48:	d00b      	beq.n	8019a62 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	881b      	ldrh	r3, [r3, #0]
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7ff fc9c 	bl	801938c <ptr_to_mem>
 8019a54:	4602      	mov	r2, r0
 8019a56:	8a7b      	ldrh	r3, [r7, #18]
 8019a58:	8053      	strh	r3, [r2, #2]
 8019a5a:	e002      	b.n	8019a62 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8019a62:	4b39      	ldr	r3, [pc, #228]	@ (8019b48 <mem_malloc+0x1e8>)
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	697a      	ldr	r2, [r7, #20]
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	d127      	bne.n	8019abc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8019a6c:	4b36      	ldr	r3, [pc, #216]	@ (8019b48 <mem_malloc+0x1e8>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8019a72:	e005      	b.n	8019a80 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	881b      	ldrh	r3, [r3, #0]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f7ff fc87 	bl	801938c <ptr_to_mem>
 8019a7e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019a80:	69bb      	ldr	r3, [r7, #24]
 8019a82:	791b      	ldrb	r3, [r3, #4]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d004      	beq.n	8019a92 <mem_malloc+0x132>
 8019a88:	4b33      	ldr	r3, [pc, #204]	@ (8019b58 <mem_malloc+0x1f8>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	69ba      	ldr	r2, [r7, #24]
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	d1f0      	bne.n	8019a74 <mem_malloc+0x114>
          }
          lfree = cur;
 8019a92:	4a2d      	ldr	r2, [pc, #180]	@ (8019b48 <mem_malloc+0x1e8>)
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019a98:	4b2b      	ldr	r3, [pc, #172]	@ (8019b48 <mem_malloc+0x1e8>)
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8019b58 <mem_malloc+0x1f8>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	d00b      	beq.n	8019abc <mem_malloc+0x15c>
 8019aa4:	4b28      	ldr	r3, [pc, #160]	@ (8019b48 <mem_malloc+0x1e8>)
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	791b      	ldrb	r3, [r3, #4]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d006      	beq.n	8019abc <mem_malloc+0x15c>
 8019aae:	4b27      	ldr	r3, [pc, #156]	@ (8019b4c <mem_malloc+0x1ec>)
 8019ab0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8019ab4:	4929      	ldr	r1, [pc, #164]	@ (8019b5c <mem_malloc+0x1fc>)
 8019ab6:	4827      	ldr	r0, [pc, #156]	@ (8019b54 <mem_malloc+0x1f4>)
 8019ab8:	f008 ff3e 	bl	8022938 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8019abc:	4821      	ldr	r0, [pc, #132]	@ (8019b44 <mem_malloc+0x1e4>)
 8019abe:	f008 fda8 	bl	8022612 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019ac2:	8bba      	ldrh	r2, [r7, #28]
 8019ac4:	697b      	ldr	r3, [r7, #20]
 8019ac6:	4413      	add	r3, r2
 8019ac8:	3308      	adds	r3, #8
 8019aca:	4a23      	ldr	r2, [pc, #140]	@ (8019b58 <mem_malloc+0x1f8>)
 8019acc:	6812      	ldr	r2, [r2, #0]
 8019ace:	4293      	cmp	r3, r2
 8019ad0:	d906      	bls.n	8019ae0 <mem_malloc+0x180>
 8019ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8019b4c <mem_malloc+0x1ec>)
 8019ad4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8019ad8:	4921      	ldr	r1, [pc, #132]	@ (8019b60 <mem_malloc+0x200>)
 8019ada:	481e      	ldr	r0, [pc, #120]	@ (8019b54 <mem_malloc+0x1f4>)
 8019adc:	f008 ff2c 	bl	8022938 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019ae0:	697b      	ldr	r3, [r7, #20]
 8019ae2:	f003 0303 	and.w	r3, r3, #3
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d006      	beq.n	8019af8 <mem_malloc+0x198>
 8019aea:	4b18      	ldr	r3, [pc, #96]	@ (8019b4c <mem_malloc+0x1ec>)
 8019aec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8019af0:	491c      	ldr	r1, [pc, #112]	@ (8019b64 <mem_malloc+0x204>)
 8019af2:	4818      	ldr	r0, [pc, #96]	@ (8019b54 <mem_malloc+0x1f4>)
 8019af4:	f008 ff20 	bl	8022938 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	f003 0303 	and.w	r3, r3, #3
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d006      	beq.n	8019b10 <mem_malloc+0x1b0>
 8019b02:	4b12      	ldr	r3, [pc, #72]	@ (8019b4c <mem_malloc+0x1ec>)
 8019b04:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8019b08:	4917      	ldr	r1, [pc, #92]	@ (8019b68 <mem_malloc+0x208>)
 8019b0a:	4812      	ldr	r0, [pc, #72]	@ (8019b54 <mem_malloc+0x1f4>)
 8019b0c:	f008 ff14 	bl	8022938 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	3308      	adds	r3, #8
 8019b14:	e011      	b.n	8019b3a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8019b16:	8bfb      	ldrh	r3, [r7, #30]
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7ff fc37 	bl	801938c <ptr_to_mem>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	881b      	ldrh	r3, [r3, #0]
 8019b22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019b24:	8bfa      	ldrh	r2, [r7, #30]
 8019b26:	8bbb      	ldrh	r3, [r7, #28]
 8019b28:	f5c3 5360 	rsb	r3, r3, #14336	@ 0x3800
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	f4ff af41 	bcc.w	80199b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8019b32:	4804      	ldr	r0, [pc, #16]	@ (8019b44 <mem_malloc+0x1e4>)
 8019b34:	f008 fd6d 	bl	8022612 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8019b38:	2300      	movs	r3, #0
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3720      	adds	r7, #32
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	20008edc 	.word	0x20008edc
 8019b48:	20008ee0 	.word	0x20008ee0
 8019b4c:	08025f30 	.word	0x08025f30
 8019b50:	08026138 	.word	0x08026138
 8019b54:	08025fbc 	.word	0x08025fbc
 8019b58:	20008ed8 	.word	0x20008ed8
 8019b5c:	0802614c 	.word	0x0802614c
 8019b60:	08026168 	.word	0x08026168
 8019b64:	08026198 	.word	0x08026198
 8019b68:	080261c8 	.word	0x080261c8

08019b6c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8019b6c:	b480      	push	{r7}
 8019b6e:	b085      	sub	sp, #20
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	689b      	ldr	r3, [r3, #8]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	685b      	ldr	r3, [r3, #4]
 8019b80:	3303      	adds	r3, #3
 8019b82:	f023 0303 	bic.w	r3, r3, #3
 8019b86:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019b88:	2300      	movs	r3, #0
 8019b8a:	60fb      	str	r3, [r7, #12]
 8019b8c:	e011      	b.n	8019bb2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	689b      	ldr	r3, [r3, #8]
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	689b      	ldr	r3, [r3, #8]
 8019b9c:	68ba      	ldr	r2, [r7, #8]
 8019b9e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	881b      	ldrh	r3, [r3, #0]
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	4413      	add	r3, r2
 8019baa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	3301      	adds	r3, #1
 8019bb0:	60fb      	str	r3, [r7, #12]
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	885b      	ldrh	r3, [r3, #2]
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	4293      	cmp	r3, r2
 8019bbc:	dbe7      	blt.n	8019b8e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8019bbe:	bf00      	nop
 8019bc0:	bf00      	nop
 8019bc2:	3714      	adds	r7, #20
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bca:	4770      	bx	lr

08019bcc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b082      	sub	sp, #8
 8019bd0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	80fb      	strh	r3, [r7, #6]
 8019bd6:	e009      	b.n	8019bec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019bd8:	88fb      	ldrh	r3, [r7, #6]
 8019bda:	4a08      	ldr	r2, [pc, #32]	@ (8019bfc <memp_init+0x30>)
 8019bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019be0:	4618      	mov	r0, r3
 8019be2:	f7ff ffc3 	bl	8019b6c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019be6:	88fb      	ldrh	r3, [r7, #6]
 8019be8:	3301      	adds	r3, #1
 8019bea:	80fb      	strh	r3, [r7, #6]
 8019bec:	88fb      	ldrh	r3, [r7, #6]
 8019bee:	2b0d      	cmp	r3, #13
 8019bf0:	d9f2      	bls.n	8019bd8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8019bf2:	bf00      	nop
 8019bf4:	bf00      	nop
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	08028cc8 	.word	0x08028cc8

08019c00 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8019c08:	f008 fd30 	bl	802266c <sys_arch_protect>
 8019c0c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	689b      	ldr	r3, [r3, #8]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d015      	beq.n	8019c48 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	689b      	ldr	r3, [r3, #8]
 8019c20:	68ba      	ldr	r2, [r7, #8]
 8019c22:	6812      	ldr	r2, [r2, #0]
 8019c24:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019c26:	68bb      	ldr	r3, [r7, #8]
 8019c28:	f003 0303 	and.w	r3, r3, #3
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d006      	beq.n	8019c3e <do_memp_malloc_pool+0x3e>
 8019c30:	4b09      	ldr	r3, [pc, #36]	@ (8019c58 <do_memp_malloc_pool+0x58>)
 8019c32:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8019c36:	4909      	ldr	r1, [pc, #36]	@ (8019c5c <do_memp_malloc_pool+0x5c>)
 8019c38:	4809      	ldr	r0, [pc, #36]	@ (8019c60 <do_memp_malloc_pool+0x60>)
 8019c3a:	f008 fe7d 	bl	8022938 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019c3e:	68f8      	ldr	r0, [r7, #12]
 8019c40:	f008 fd22 	bl	8022688 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	e003      	b.n	8019c50 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	f008 fd1d 	bl	8022688 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8019c4e:	2300      	movs	r3, #0
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3710      	adds	r7, #16
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}
 8019c58:	080261ec 	.word	0x080261ec
 8019c5c:	08026260 	.word	0x08026260
 8019c60:	08026284 	.word	0x08026284

08019c64 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b082      	sub	sp, #8
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d106      	bne.n	8019c80 <memp_malloc_pool+0x1c>
 8019c72:	4b0a      	ldr	r3, [pc, #40]	@ (8019c9c <memp_malloc_pool+0x38>)
 8019c74:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8019c78:	4909      	ldr	r1, [pc, #36]	@ (8019ca0 <memp_malloc_pool+0x3c>)
 8019c7a:	480a      	ldr	r0, [pc, #40]	@ (8019ca4 <memp_malloc_pool+0x40>)
 8019c7c:	f008 fe5c 	bl	8022938 <iprintf>
  if (desc == NULL) {
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d101      	bne.n	8019c8a <memp_malloc_pool+0x26>
    return NULL;
 8019c86:	2300      	movs	r3, #0
 8019c88:	e003      	b.n	8019c92 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f7ff ffb8 	bl	8019c00 <do_memp_malloc_pool>
 8019c90:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3708      	adds	r7, #8
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}
 8019c9a:	bf00      	nop
 8019c9c:	080261ec 	.word	0x080261ec
 8019ca0:	080262ac 	.word	0x080262ac
 8019ca4:	08026284 	.word	0x08026284

08019ca8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b084      	sub	sp, #16
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	4603      	mov	r3, r0
 8019cb0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019cb2:	79fb      	ldrb	r3, [r7, #7]
 8019cb4:	2b0d      	cmp	r3, #13
 8019cb6:	d908      	bls.n	8019cca <memp_malloc+0x22>
 8019cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8019ce4 <memp_malloc+0x3c>)
 8019cba:	f240 1257 	movw	r2, #343	@ 0x157
 8019cbe:	490a      	ldr	r1, [pc, #40]	@ (8019ce8 <memp_malloc+0x40>)
 8019cc0:	480a      	ldr	r0, [pc, #40]	@ (8019cec <memp_malloc+0x44>)
 8019cc2:	f008 fe39 	bl	8022938 <iprintf>
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	e008      	b.n	8019cdc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019cca:	79fb      	ldrb	r3, [r7, #7]
 8019ccc:	4a08      	ldr	r2, [pc, #32]	@ (8019cf0 <memp_malloc+0x48>)
 8019cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7ff ff94 	bl	8019c00 <do_memp_malloc_pool>
 8019cd8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019cda:	68fb      	ldr	r3, [r7, #12]
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	080261ec 	.word	0x080261ec
 8019ce8:	080262c0 	.word	0x080262c0
 8019cec:	08026284 	.word	0x08026284
 8019cf0:	08028cc8 	.word	0x08028cc8

08019cf4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b084      	sub	sp, #16
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	f003 0303 	and.w	r3, r3, #3
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d006      	beq.n	8019d16 <do_memp_free_pool+0x22>
 8019d08:	4b0d      	ldr	r3, [pc, #52]	@ (8019d40 <do_memp_free_pool+0x4c>)
 8019d0a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8019d0e:	490d      	ldr	r1, [pc, #52]	@ (8019d44 <do_memp_free_pool+0x50>)
 8019d10:	480d      	ldr	r0, [pc, #52]	@ (8019d48 <do_memp_free_pool+0x54>)
 8019d12:	f008 fe11 	bl	8022938 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019d1a:	f008 fca7 	bl	802266c <sys_arch_protect>
 8019d1e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	689b      	ldr	r3, [r3, #8]
 8019d24:	681a      	ldr	r2, [r3, #0]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	689b      	ldr	r3, [r3, #8]
 8019d2e:	68fa      	ldr	r2, [r7, #12]
 8019d30:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8019d32:	68b8      	ldr	r0, [r7, #8]
 8019d34:	f008 fca8 	bl	8022688 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019d38:	bf00      	nop
 8019d3a:	3710      	adds	r7, #16
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}
 8019d40:	080261ec 	.word	0x080261ec
 8019d44:	080262e0 	.word	0x080262e0
 8019d48:	08026284 	.word	0x08026284

08019d4c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b082      	sub	sp, #8
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
 8019d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d106      	bne.n	8019d6a <memp_free_pool+0x1e>
 8019d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8019d88 <memp_free_pool+0x3c>)
 8019d5e:	f240 1295 	movw	r2, #405	@ 0x195
 8019d62:	490a      	ldr	r1, [pc, #40]	@ (8019d8c <memp_free_pool+0x40>)
 8019d64:	480a      	ldr	r0, [pc, #40]	@ (8019d90 <memp_free_pool+0x44>)
 8019d66:	f008 fde7 	bl	8022938 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d007      	beq.n	8019d80 <memp_free_pool+0x34>
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d004      	beq.n	8019d80 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8019d76:	6839      	ldr	r1, [r7, #0]
 8019d78:	6878      	ldr	r0, [r7, #4]
 8019d7a:	f7ff ffbb 	bl	8019cf4 <do_memp_free_pool>
 8019d7e:	e000      	b.n	8019d82 <memp_free_pool+0x36>
    return;
 8019d80:	bf00      	nop
}
 8019d82:	3708      	adds	r7, #8
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}
 8019d88:	080261ec 	.word	0x080261ec
 8019d8c:	080262ac 	.word	0x080262ac
 8019d90:	08026284 	.word	0x08026284

08019d94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	6039      	str	r1, [r7, #0]
 8019d9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019da0:	79fb      	ldrb	r3, [r7, #7]
 8019da2:	2b0d      	cmp	r3, #13
 8019da4:	d907      	bls.n	8019db6 <memp_free+0x22>
 8019da6:	4b0c      	ldr	r3, [pc, #48]	@ (8019dd8 <memp_free+0x44>)
 8019da8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8019dac:	490b      	ldr	r1, [pc, #44]	@ (8019ddc <memp_free+0x48>)
 8019dae:	480c      	ldr	r0, [pc, #48]	@ (8019de0 <memp_free+0x4c>)
 8019db0:	f008 fdc2 	bl	8022938 <iprintf>
 8019db4:	e00c      	b.n	8019dd0 <memp_free+0x3c>

  if (mem == NULL) {
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d008      	beq.n	8019dce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019dbc:	79fb      	ldrb	r3, [r7, #7]
 8019dbe:	4a09      	ldr	r2, [pc, #36]	@ (8019de4 <memp_free+0x50>)
 8019dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dc4:	6839      	ldr	r1, [r7, #0]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7ff ff94 	bl	8019cf4 <do_memp_free_pool>
 8019dcc:	e000      	b.n	8019dd0 <memp_free+0x3c>
    return;
 8019dce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019dd0:	3708      	adds	r7, #8
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	080261ec 	.word	0x080261ec
 8019ddc:	08026300 	.word	0x08026300
 8019de0:	08026284 	.word	0x08026284
 8019de4:	08028cc8 	.word	0x08028cc8

08019de8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8019de8:	b480      	push	{r7}
 8019dea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8019dec:	bf00      	nop
 8019dee:	46bd      	mov	sp, r7
 8019df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df4:	4770      	bx	lr
	...

08019df8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b086      	sub	sp, #24
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	60f8      	str	r0, [r7, #12]
 8019e00:	60b9      	str	r1, [r7, #8]
 8019e02:	607a      	str	r2, [r7, #4]
 8019e04:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d108      	bne.n	8019e1e <netif_add+0x26>
 8019e0c:	4b61      	ldr	r3, [pc, #388]	@ (8019f94 <netif_add+0x19c>)
 8019e0e:	f240 1227 	movw	r2, #295	@ 0x127
 8019e12:	4961      	ldr	r1, [pc, #388]	@ (8019f98 <netif_add+0x1a0>)
 8019e14:	4861      	ldr	r0, [pc, #388]	@ (8019f9c <netif_add+0x1a4>)
 8019e16:	f008 fd8f 	bl	8022938 <iprintf>
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	e0b6      	b.n	8019f8c <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8019e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d108      	bne.n	8019e36 <netif_add+0x3e>
 8019e24:	4b5b      	ldr	r3, [pc, #364]	@ (8019f94 <netif_add+0x19c>)
 8019e26:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8019e2a:	495d      	ldr	r1, [pc, #372]	@ (8019fa0 <netif_add+0x1a8>)
 8019e2c:	485b      	ldr	r0, [pc, #364]	@ (8019f9c <netif_add+0x1a4>)
 8019e2e:	f008 fd83 	bl	8022938 <iprintf>
 8019e32:	2300      	movs	r3, #0
 8019e34:	e0aa      	b.n	8019f8c <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d101      	bne.n	8019e40 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019e3c:	4b59      	ldr	r3, [pc, #356]	@ (8019fa4 <netif_add+0x1ac>)
 8019e3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d101      	bne.n	8019e4a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8019e46:	4b57      	ldr	r3, [pc, #348]	@ (8019fa4 <netif_add+0x1ac>)
 8019e48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019e4a:	683b      	ldr	r3, [r7, #0]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d101      	bne.n	8019e54 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019e50:	4b54      	ldr	r3, [pc, #336]	@ (8019fa4 <netif_add+0x1ac>)
 8019e52:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	2200      	movs	r2, #0
 8019e58:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	2200      	movs	r2, #0
 8019e64:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	4a4f      	ldr	r2, [pc, #316]	@ (8019fa8 <netif_add+0x1b0>)
 8019e6a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	2200      	movs	r2, #0
 8019e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	3324      	adds	r3, #36	@ 0x24
 8019e7e:	2208      	movs	r2, #8
 8019e80:	2100      	movs	r1, #0
 8019e82:	4618      	mov	r0, r3
 8019e84:	f008 feea 	bl	8022c5c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	2200      	movs	r2, #0
 8019e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6a3a      	ldr	r2, [r7, #32]
 8019e98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8019e9a:	4b44      	ldr	r3, [pc, #272]	@ (8019fac <netif_add+0x1b4>)
 8019e9c:	781a      	ldrb	r2, [r3, #0]
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019ea8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	687a      	ldr	r2, [r7, #4]
 8019eae:	68b9      	ldr	r1, [r7, #8]
 8019eb0:	68f8      	ldr	r0, [r7, #12]
 8019eb2:	f000 f91d 	bl	801a0f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8019eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb8:	68f8      	ldr	r0, [r7, #12]
 8019eba:	4798      	blx	r3
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d001      	beq.n	8019ec6 <netif_add+0xce>
    return NULL;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	e062      	b.n	8019f8c <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019ecc:	2bff      	cmp	r3, #255	@ 0xff
 8019ece:	d103      	bne.n	8019ed8 <netif_add+0xe0>
        netif->num = 0;
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019edc:	4b34      	ldr	r3, [pc, #208]	@ (8019fb0 <netif_add+0x1b8>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	617b      	str	r3, [r7, #20]
 8019ee2:	e02b      	b.n	8019f3c <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019ee4:	697a      	ldr	r2, [r7, #20]
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d106      	bne.n	8019efa <netif_add+0x102>
 8019eec:	4b29      	ldr	r3, [pc, #164]	@ (8019f94 <netif_add+0x19c>)
 8019eee:	f240 128b 	movw	r2, #395	@ 0x18b
 8019ef2:	4930      	ldr	r1, [pc, #192]	@ (8019fb4 <netif_add+0x1bc>)
 8019ef4:	4829      	ldr	r0, [pc, #164]	@ (8019f9c <netif_add+0x1a4>)
 8019ef6:	f008 fd1f 	bl	8022938 <iprintf>
        num_netifs++;
 8019efa:	693b      	ldr	r3, [r7, #16]
 8019efc:	3301      	adds	r3, #1
 8019efe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	2bff      	cmp	r3, #255	@ 0xff
 8019f04:	dd06      	ble.n	8019f14 <netif_add+0x11c>
 8019f06:	4b23      	ldr	r3, [pc, #140]	@ (8019f94 <netif_add+0x19c>)
 8019f08:	f240 128d 	movw	r2, #397	@ 0x18d
 8019f0c:	492a      	ldr	r1, [pc, #168]	@ (8019fb8 <netif_add+0x1c0>)
 8019f0e:	4823      	ldr	r0, [pc, #140]	@ (8019f9c <netif_add+0x1a4>)
 8019f10:	f008 fd12 	bl	8022938 <iprintf>
        if (netif2->num == netif->num) {
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f20:	429a      	cmp	r2, r3
 8019f22:	d108      	bne.n	8019f36 <netif_add+0x13e>
          netif->num++;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f2a:	3301      	adds	r3, #1
 8019f2c:	b2da      	uxtb	r2, r3
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 8019f34:	e005      	b.n	8019f42 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	617b      	str	r3, [r7, #20]
 8019f3c:	697b      	ldr	r3, [r7, #20]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d1d0      	bne.n	8019ee4 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d1be      	bne.n	8019ec6 <netif_add+0xce>
  }
  if (netif->num == 254) {
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8019f50:	d103      	bne.n	8019f5a <netif_add+0x162>
    netif_num = 0;
 8019f52:	4b16      	ldr	r3, [pc, #88]	@ (8019fac <netif_add+0x1b4>)
 8019f54:	2200      	movs	r2, #0
 8019f56:	701a      	strb	r2, [r3, #0]
 8019f58:	e006      	b.n	8019f68 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f60:	3301      	adds	r3, #1
 8019f62:	b2da      	uxtb	r2, r3
 8019f64:	4b11      	ldr	r3, [pc, #68]	@ (8019fac <netif_add+0x1b4>)
 8019f66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019f68:	4b11      	ldr	r3, [pc, #68]	@ (8019fb0 <netif_add+0x1b8>)
 8019f6a:	681a      	ldr	r2, [r3, #0]
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8019f70:	4a0f      	ldr	r2, [pc, #60]	@ (8019fb0 <netif_add+0x1b8>)
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019f7c:	f003 0320 	and.w	r3, r3, #32
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d002      	beq.n	8019f8a <netif_add+0x192>
    igmp_start(netif);
 8019f84:	68f8      	ldr	r0, [r7, #12]
 8019f86:	f7fd f9bd 	bl	8017304 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3718      	adds	r7, #24
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}
 8019f94:	0802631c 	.word	0x0802631c
 8019f98:	080263f0 	.word	0x080263f0
 8019f9c:	080263ac 	.word	0x080263ac
 8019fa0:	0802640c 	.word	0x0802640c
 8019fa4:	08028c18 	.word	0x08028c18
 8019fa8:	0801a3e7 	.word	0x0801a3e7
 8019fac:	20010014 	.word	0x20010014
 8019fb0:	2001000c 	.word	0x2001000c
 8019fb4:	08026430 	.word	0x08026430
 8019fb8:	08026444 	.word	0x08026444

08019fbc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019fc6:	6839      	ldr	r1, [r7, #0]
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f002 ff37 	bl	801ce3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019fce:	6839      	ldr	r1, [r7, #0]
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f008 f8ad 	bl	8022130 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019fd6:	bf00      	nop
 8019fd8:	3708      	adds	r7, #8
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
	...

08019fe0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b086      	sub	sp, #24
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	60f8      	str	r0, [r7, #12]
 8019fe8:	60b9      	str	r1, [r7, #8]
 8019fea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d106      	bne.n	801a000 <netif_do_set_ipaddr+0x20>
 8019ff2:	4b1d      	ldr	r3, [pc, #116]	@ (801a068 <netif_do_set_ipaddr+0x88>)
 8019ff4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8019ff8:	491c      	ldr	r1, [pc, #112]	@ (801a06c <netif_do_set_ipaddr+0x8c>)
 8019ffa:	481d      	ldr	r0, [pc, #116]	@ (801a070 <netif_do_set_ipaddr+0x90>)
 8019ffc:	f008 fc9c 	bl	8022938 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d106      	bne.n	801a014 <netif_do_set_ipaddr+0x34>
 801a006:	4b18      	ldr	r3, [pc, #96]	@ (801a068 <netif_do_set_ipaddr+0x88>)
 801a008:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801a00c:	4917      	ldr	r1, [pc, #92]	@ (801a06c <netif_do_set_ipaddr+0x8c>)
 801a00e:	4818      	ldr	r0, [pc, #96]	@ (801a070 <netif_do_set_ipaddr+0x90>)
 801a010:	f008 fc92 	bl	8022938 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	681a      	ldr	r2, [r3, #0]
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	3304      	adds	r3, #4
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d01c      	beq.n	801a05c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	3304      	adds	r3, #4
 801a02c:	681a      	ldr	r2, [r3, #0]
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801a032:	f107 0314 	add.w	r3, r7, #20
 801a036:	4619      	mov	r1, r3
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f7ff ffbf 	bl	8019fbc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a03e:	68bb      	ldr	r3, [r7, #8]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d002      	beq.n	801a04a <netif_do_set_ipaddr+0x6a>
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	e000      	b.n	801a04c <netif_do_set_ipaddr+0x6c>
 801a04a:	2300      	movs	r3, #0
 801a04c:	68fa      	ldr	r2, [r7, #12]
 801a04e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a050:	2101      	movs	r1, #1
 801a052:	68f8      	ldr	r0, [r7, #12]
 801a054:	f000 f8d2 	bl	801a1fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801a058:	2301      	movs	r3, #1
 801a05a:	e000      	b.n	801a05e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801a05c:	2300      	movs	r3, #0
}
 801a05e:	4618      	mov	r0, r3
 801a060:	3718      	adds	r7, #24
 801a062:	46bd      	mov	sp, r7
 801a064:	bd80      	pop	{r7, pc}
 801a066:	bf00      	nop
 801a068:	0802631c 	.word	0x0802631c
 801a06c:	08026474 	.word	0x08026474
 801a070:	080263ac 	.word	0x080263ac

0801a074 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801a074:	b480      	push	{r7}
 801a076:	b085      	sub	sp, #20
 801a078:	af00      	add	r7, sp, #0
 801a07a:	60f8      	str	r0, [r7, #12]
 801a07c:	60b9      	str	r1, [r7, #8]
 801a07e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	681a      	ldr	r2, [r3, #0]
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	3308      	adds	r3, #8
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	429a      	cmp	r2, r3
 801a08c:	d00a      	beq.n	801a0a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a08e:	68bb      	ldr	r3, [r7, #8]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d002      	beq.n	801a09a <netif_do_set_netmask+0x26>
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	e000      	b.n	801a09c <netif_do_set_netmask+0x28>
 801a09a:	2300      	movs	r3, #0
 801a09c:	68fa      	ldr	r2, [r7, #12]
 801a09e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801a0a0:	2301      	movs	r3, #1
 801a0a2:	e000      	b.n	801a0a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801a0a4:	2300      	movs	r3, #0
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3714      	adds	r7, #20
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b0:	4770      	bx	lr

0801a0b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801a0b2:	b480      	push	{r7}
 801a0b4:	b085      	sub	sp, #20
 801a0b6:	af00      	add	r7, sp, #0
 801a0b8:	60f8      	str	r0, [r7, #12]
 801a0ba:	60b9      	str	r1, [r7, #8]
 801a0bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	681a      	ldr	r2, [r3, #0]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	330c      	adds	r3, #12
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	429a      	cmp	r2, r3
 801a0ca:	d00a      	beq.n	801a0e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d002      	beq.n	801a0d8 <netif_do_set_gw+0x26>
 801a0d2:	68bb      	ldr	r3, [r7, #8]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	e000      	b.n	801a0da <netif_do_set_gw+0x28>
 801a0d8:	2300      	movs	r3, #0
 801a0da:	68fa      	ldr	r2, [r7, #12]
 801a0dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801a0de:	2301      	movs	r3, #1
 801a0e0:	e000      	b.n	801a0e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801a0e2:	2300      	movs	r3, #0
}
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	3714      	adds	r7, #20
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr

0801a0f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b088      	sub	sp, #32
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
 801a0fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801a0fe:	2300      	movs	r3, #0
 801a100:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801a102:	2300      	movs	r3, #0
 801a104:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d101      	bne.n	801a110 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801a10c:	4b1c      	ldr	r3, [pc, #112]	@ (801a180 <netif_set_addr+0x90>)
 801a10e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d101      	bne.n	801a11a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801a116:	4b1a      	ldr	r3, [pc, #104]	@ (801a180 <netif_set_addr+0x90>)
 801a118:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d101      	bne.n	801a124 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801a120:	4b17      	ldr	r3, [pc, #92]	@ (801a180 <netif_set_addr+0x90>)
 801a122:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d003      	beq.n	801a132 <netif_set_addr+0x42>
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d101      	bne.n	801a136 <netif_set_addr+0x46>
 801a132:	2301      	movs	r3, #1
 801a134:	e000      	b.n	801a138 <netif_set_addr+0x48>
 801a136:	2300      	movs	r3, #0
 801a138:	617b      	str	r3, [r7, #20]
  if (remove) {
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d006      	beq.n	801a14e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a140:	f107 0310 	add.w	r3, r7, #16
 801a144:	461a      	mov	r2, r3
 801a146:	68b9      	ldr	r1, [r7, #8]
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f7ff ff49 	bl	8019fe0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801a14e:	69fa      	ldr	r2, [r7, #28]
 801a150:	6879      	ldr	r1, [r7, #4]
 801a152:	68f8      	ldr	r0, [r7, #12]
 801a154:	f7ff ff8e 	bl	801a074 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801a158:	69ba      	ldr	r2, [r7, #24]
 801a15a:	6839      	ldr	r1, [r7, #0]
 801a15c:	68f8      	ldr	r0, [r7, #12]
 801a15e:	f7ff ffa8 	bl	801a0b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801a162:	697b      	ldr	r3, [r7, #20]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d106      	bne.n	801a176 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a168:	f107 0310 	add.w	r3, r7, #16
 801a16c:	461a      	mov	r2, r3
 801a16e:	68b9      	ldr	r1, [r7, #8]
 801a170:	68f8      	ldr	r0, [r7, #12]
 801a172:	f7ff ff35 	bl	8019fe0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801a176:	bf00      	nop
 801a178:	3720      	adds	r7, #32
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}
 801a17e:	bf00      	nop
 801a180:	08028c18 	.word	0x08028c18

0801a184 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801a184:	b480      	push	{r7}
 801a186:	b083      	sub	sp, #12
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801a18c:	4a04      	ldr	r2, [pc, #16]	@ (801a1a0 <netif_set_default+0x1c>)
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801a192:	bf00      	nop
 801a194:	370c      	adds	r7, #12
 801a196:	46bd      	mov	sp, r7
 801a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19c:	4770      	bx	lr
 801a19e:	bf00      	nop
 801a1a0:	20010010 	.word	0x20010010

0801a1a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d107      	bne.n	801a1c2 <netif_set_up+0x1e>
 801a1b2:	4b0f      	ldr	r3, [pc, #60]	@ (801a1f0 <netif_set_up+0x4c>)
 801a1b4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801a1b8:	490e      	ldr	r1, [pc, #56]	@ (801a1f4 <netif_set_up+0x50>)
 801a1ba:	480f      	ldr	r0, [pc, #60]	@ (801a1f8 <netif_set_up+0x54>)
 801a1bc:	f008 fbbc 	bl	8022938 <iprintf>
 801a1c0:	e013      	b.n	801a1ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a1c8:	f003 0301 	and.w	r3, r3, #1
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d10c      	bne.n	801a1ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a1d6:	f043 0301 	orr.w	r3, r3, #1
 801a1da:	b2da      	uxtb	r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a1e2:	2103      	movs	r1, #3
 801a1e4:	6878      	ldr	r0, [r7, #4]
 801a1e6:	f000 f809 	bl	801a1fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801a1ea:	3708      	adds	r7, #8
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	0802631c 	.word	0x0802631c
 801a1f4:	080264e4 	.word	0x080264e4
 801a1f8:	080263ac 	.word	0x080263ac

0801a1fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	460b      	mov	r3, r1
 801a206:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d106      	bne.n	801a21c <netif_issue_reports+0x20>
 801a20e:	4b1d      	ldr	r3, [pc, #116]	@ (801a284 <netif_issue_reports+0x88>)
 801a210:	f240 326d 	movw	r2, #877	@ 0x36d
 801a214:	491c      	ldr	r1, [pc, #112]	@ (801a288 <netif_issue_reports+0x8c>)
 801a216:	481d      	ldr	r0, [pc, #116]	@ (801a28c <netif_issue_reports+0x90>)
 801a218:	f008 fb8e 	bl	8022938 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a222:	f003 0304 	and.w	r3, r3, #4
 801a226:	2b00      	cmp	r3, #0
 801a228:	d028      	beq.n	801a27c <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a230:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a234:	2b00      	cmp	r3, #0
 801a236:	d021      	beq.n	801a27c <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a238:	78fb      	ldrb	r3, [r7, #3]
 801a23a:	f003 0301 	and.w	r3, r3, #1
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d01d      	beq.n	801a27e <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	3304      	adds	r3, #4
 801a246:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d018      	beq.n	801a27e <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a252:	f003 0308 	and.w	r3, r3, #8
 801a256:	2b00      	cmp	r3, #0
 801a258:	d005      	beq.n	801a266 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	3304      	adds	r3, #4
 801a25e:	4619      	mov	r1, r3
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f7fc fe7d 	bl	8016f60 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a26c:	f003 0320 	and.w	r3, r3, #32
 801a270:	2b00      	cmp	r3, #0
 801a272:	d004      	beq.n	801a27e <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f7fd f86f 	bl	8017358 <igmp_report_groups>
 801a27a:	e000      	b.n	801a27e <netif_issue_reports+0x82>
    return;
 801a27c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801a27e:	3708      	adds	r7, #8
 801a280:	46bd      	mov	sp, r7
 801a282:	bd80      	pop	{r7, pc}
 801a284:	0802631c 	.word	0x0802631c
 801a288:	08026500 	.word	0x08026500
 801a28c:	080263ac 	.word	0x080263ac

0801a290 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d107      	bne.n	801a2ae <netif_set_down+0x1e>
 801a29e:	4b12      	ldr	r3, [pc, #72]	@ (801a2e8 <netif_set_down+0x58>)
 801a2a0:	f240 329b 	movw	r2, #923	@ 0x39b
 801a2a4:	4911      	ldr	r1, [pc, #68]	@ (801a2ec <netif_set_down+0x5c>)
 801a2a6:	4812      	ldr	r0, [pc, #72]	@ (801a2f0 <netif_set_down+0x60>)
 801a2a8:	f008 fb46 	bl	8022938 <iprintf>
 801a2ac:	e019      	b.n	801a2e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2b4:	f003 0301 	and.w	r3, r3, #1
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d012      	beq.n	801a2e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2c2:	f023 0301 	bic.w	r3, r3, #1
 801a2c6:	b2da      	uxtb	r2, r3
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2d4:	f003 0308 	and.w	r3, r3, #8
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d002      	beq.n	801a2e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801a2dc:	6878      	ldr	r0, [r7, #4]
 801a2de:	f7fc f9f9 	bl	80166d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801a2e2:	3708      	adds	r7, #8
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	0802631c 	.word	0x0802631c
 801a2ec:	08026524 	.word	0x08026524
 801a2f0:	080263ac 	.word	0x080263ac

0801a2f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b082      	sub	sp, #8
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d107      	bne.n	801a312 <netif_set_link_up+0x1e>
 801a302:	4b15      	ldr	r3, [pc, #84]	@ (801a358 <netif_set_link_up+0x64>)
 801a304:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801a308:	4914      	ldr	r1, [pc, #80]	@ (801a35c <netif_set_link_up+0x68>)
 801a30a:	4815      	ldr	r0, [pc, #84]	@ (801a360 <netif_set_link_up+0x6c>)
 801a30c:	f008 fb14 	bl	8022938 <iprintf>
 801a310:	e01e      	b.n	801a350 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a318:	f003 0304 	and.w	r3, r3, #4
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d117      	bne.n	801a350 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a326:	f043 0304 	orr.w	r3, r3, #4
 801a32a:	b2da      	uxtb	r2, r3
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f7fa fc44 	bl	8014bc0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a338:	2103      	movs	r1, #3
 801a33a:	6878      	ldr	r0, [r7, #4]
 801a33c:	f7ff ff5e 	bl	801a1fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	69db      	ldr	r3, [r3, #28]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d003      	beq.n	801a350 <netif_set_link_up+0x5c>
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	69db      	ldr	r3, [r3, #28]
 801a34c:	6878      	ldr	r0, [r7, #4]
 801a34e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801a350:	3708      	adds	r7, #8
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}
 801a356:	bf00      	nop
 801a358:	0802631c 	.word	0x0802631c
 801a35c:	08026544 	.word	0x08026544
 801a360:	080263ac 	.word	0x080263ac

0801a364 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d107      	bne.n	801a382 <netif_set_link_down+0x1e>
 801a372:	4b11      	ldr	r3, [pc, #68]	@ (801a3b8 <netif_set_link_down+0x54>)
 801a374:	f240 4206 	movw	r2, #1030	@ 0x406
 801a378:	4910      	ldr	r1, [pc, #64]	@ (801a3bc <netif_set_link_down+0x58>)
 801a37a:	4811      	ldr	r0, [pc, #68]	@ (801a3c0 <netif_set_link_down+0x5c>)
 801a37c:	f008 fadc 	bl	8022938 <iprintf>
 801a380:	e017      	b.n	801a3b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a388:	f003 0304 	and.w	r3, r3, #4
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d010      	beq.n	801a3b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a396:	f023 0304 	bic.w	r3, r3, #4
 801a39a:	b2da      	uxtb	r2, r3
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	69db      	ldr	r3, [r3, #28]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d003      	beq.n	801a3b2 <netif_set_link_down+0x4e>
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	69db      	ldr	r3, [r3, #28]
 801a3ae:	6878      	ldr	r0, [r7, #4]
 801a3b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801a3b2:	3708      	adds	r7, #8
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}
 801a3b8:	0802631c 	.word	0x0802631c
 801a3bc:	08026568 	.word	0x08026568
 801a3c0:	080263ac 	.word	0x080263ac

0801a3c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b083      	sub	sp, #12
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d002      	beq.n	801a3da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	683a      	ldr	r2, [r7, #0]
 801a3d8:	61da      	str	r2, [r3, #28]
  }
}
 801a3da:	bf00      	nop
 801a3dc:	370c      	adds	r7, #12
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e4:	4770      	bx	lr

0801a3e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801a3e6:	b480      	push	{r7}
 801a3e8:	b085      	sub	sp, #20
 801a3ea:	af00      	add	r7, sp, #0
 801a3ec:	60f8      	str	r0, [r7, #12]
 801a3ee:	60b9      	str	r1, [r7, #8]
 801a3f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801a3f2:	f06f 030b 	mvn.w	r3, #11
}
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	3714      	adds	r7, #20
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a400:	4770      	bx	lr
	...

0801a404 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801a404:	b480      	push	{r7}
 801a406:	b085      	sub	sp, #20
 801a408:	af00      	add	r7, sp, #0
 801a40a:	4603      	mov	r3, r0
 801a40c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801a40e:	79fb      	ldrb	r3, [r7, #7]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d013      	beq.n	801a43c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801a414:	4b0d      	ldr	r3, [pc, #52]	@ (801a44c <netif_get_by_index+0x48>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	60fb      	str	r3, [r7, #12]
 801a41a:	e00c      	b.n	801a436 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a422:	3301      	adds	r3, #1
 801a424:	b2db      	uxtb	r3, r3
 801a426:	79fa      	ldrb	r2, [r7, #7]
 801a428:	429a      	cmp	r2, r3
 801a42a:	d101      	bne.n	801a430 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	e006      	b.n	801a43e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	60fb      	str	r3, [r7, #12]
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d1ef      	bne.n	801a41c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801a43c:	2300      	movs	r3, #0
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3714      	adds	r7, #20
 801a442:	46bd      	mov	sp, r7
 801a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a448:	4770      	bx	lr
 801a44a:	bf00      	nop
 801a44c:	2001000c 	.word	0x2001000c

0801a450 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a456:	f008 f909 	bl	802266c <sys_arch_protect>
 801a45a:	6038      	str	r0, [r7, #0]
 801a45c:	4b0d      	ldr	r3, [pc, #52]	@ (801a494 <pbuf_free_ooseq+0x44>)
 801a45e:	2200      	movs	r2, #0
 801a460:	701a      	strb	r2, [r3, #0]
 801a462:	6838      	ldr	r0, [r7, #0]
 801a464:	f008 f910 	bl	8022688 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a468:	4b0b      	ldr	r3, [pc, #44]	@ (801a498 <pbuf_free_ooseq+0x48>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	607b      	str	r3, [r7, #4]
 801a46e:	e00a      	b.n	801a486 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a474:	2b00      	cmp	r3, #0
 801a476:	d003      	beq.n	801a480 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f002 fd1d 	bl	801ceb8 <tcp_free_ooseq>
      return;
 801a47e:	e005      	b.n	801a48c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	68db      	ldr	r3, [r3, #12]
 801a484:	607b      	str	r3, [r7, #4]
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d1f1      	bne.n	801a470 <pbuf_free_ooseq+0x20>
    }
  }
}
 801a48c:	3708      	adds	r7, #8
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	20010015 	.word	0x20010015
 801a498:	20010024 	.word	0x20010024

0801a49c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b082      	sub	sp, #8
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801a4a4:	f7ff ffd4 	bl	801a450 <pbuf_free_ooseq>
}
 801a4a8:	bf00      	nop
 801a4aa:	3708      	adds	r7, #8
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b082      	sub	sp, #8
 801a4b4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801a4b6:	f008 f8d9 	bl	802266c <sys_arch_protect>
 801a4ba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801a4bc:	4b0f      	ldr	r3, [pc, #60]	@ (801a4fc <pbuf_pool_is_empty+0x4c>)
 801a4be:	781b      	ldrb	r3, [r3, #0]
 801a4c0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801a4c2:	4b0e      	ldr	r3, [pc, #56]	@ (801a4fc <pbuf_pool_is_empty+0x4c>)
 801a4c4:	2201      	movs	r2, #1
 801a4c6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f008 f8dd 	bl	8022688 <sys_arch_unprotect>

  if (!queued) {
 801a4ce:	78fb      	ldrb	r3, [r7, #3]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d10f      	bne.n	801a4f4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	480a      	ldr	r0, [pc, #40]	@ (801a500 <pbuf_pool_is_empty+0x50>)
 801a4d8:	f7f9 febe 	bl	8014258 <tcpip_try_callback>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d008      	beq.n	801a4f4 <pbuf_pool_is_empty+0x44>
 801a4e2:	f008 f8c3 	bl	802266c <sys_arch_protect>
 801a4e6:	6078      	str	r0, [r7, #4]
 801a4e8:	4b04      	ldr	r3, [pc, #16]	@ (801a4fc <pbuf_pool_is_empty+0x4c>)
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	701a      	strb	r2, [r3, #0]
 801a4ee:	6878      	ldr	r0, [r7, #4]
 801a4f0:	f008 f8ca 	bl	8022688 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801a4f4:	bf00      	nop
 801a4f6:	3708      	adds	r7, #8
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	20010015 	.word	0x20010015
 801a500:	0801a49d 	.word	0x0801a49d

0801a504 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801a504:	b480      	push	{r7}
 801a506:	b085      	sub	sp, #20
 801a508:	af00      	add	r7, sp, #0
 801a50a:	60f8      	str	r0, [r7, #12]
 801a50c:	60b9      	str	r1, [r7, #8]
 801a50e:	4611      	mov	r1, r2
 801a510:	461a      	mov	r2, r3
 801a512:	460b      	mov	r3, r1
 801a514:	80fb      	strh	r3, [r7, #6]
 801a516:	4613      	mov	r3, r2
 801a518:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	2200      	movs	r2, #0
 801a51e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	68ba      	ldr	r2, [r7, #8]
 801a524:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	88fa      	ldrh	r2, [r7, #6]
 801a52a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	88ba      	ldrh	r2, [r7, #4]
 801a530:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801a532:	8b3b      	ldrh	r3, [r7, #24]
 801a534:	b2da      	uxtb	r2, r3
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	7f3a      	ldrb	r2, [r7, #28]
 801a53e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	2201      	movs	r2, #1
 801a544:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	2200      	movs	r2, #0
 801a54a:	73da      	strb	r2, [r3, #15]
}
 801a54c:	bf00      	nop
 801a54e:	3714      	adds	r7, #20
 801a550:	46bd      	mov	sp, r7
 801a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a556:	4770      	bx	lr

0801a558 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b08c      	sub	sp, #48	@ 0x30
 801a55c:	af02      	add	r7, sp, #8
 801a55e:	4603      	mov	r3, r0
 801a560:	71fb      	strb	r3, [r7, #7]
 801a562:	460b      	mov	r3, r1
 801a564:	80bb      	strh	r3, [r7, #4]
 801a566:	4613      	mov	r3, r2
 801a568:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801a56a:	79fb      	ldrb	r3, [r7, #7]
 801a56c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801a56e:	887b      	ldrh	r3, [r7, #2]
 801a570:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a574:	d07f      	beq.n	801a676 <pbuf_alloc+0x11e>
 801a576:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a57a:	f300 80c8 	bgt.w	801a70e <pbuf_alloc+0x1b6>
 801a57e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a582:	d010      	beq.n	801a5a6 <pbuf_alloc+0x4e>
 801a584:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a588:	f300 80c1 	bgt.w	801a70e <pbuf_alloc+0x1b6>
 801a58c:	2b01      	cmp	r3, #1
 801a58e:	d002      	beq.n	801a596 <pbuf_alloc+0x3e>
 801a590:	2b41      	cmp	r3, #65	@ 0x41
 801a592:	f040 80bc 	bne.w	801a70e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801a596:	887a      	ldrh	r2, [r7, #2]
 801a598:	88bb      	ldrh	r3, [r7, #4]
 801a59a:	4619      	mov	r1, r3
 801a59c:	2000      	movs	r0, #0
 801a59e:	f000 f8d1 	bl	801a744 <pbuf_alloc_reference>
 801a5a2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801a5a4:	e0bd      	b.n	801a722 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801a5ae:	88bb      	ldrh	r3, [r7, #4]
 801a5b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a5b2:	200d      	movs	r0, #13
 801a5b4:	f7ff fb78 	bl	8019ca8 <memp_malloc>
 801a5b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801a5ba:	693b      	ldr	r3, [r7, #16]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d109      	bne.n	801a5d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801a5c0:	f7ff ff76 	bl	801a4b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d002      	beq.n	801a5d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 801a5ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a5cc:	f000 fada 	bl	801ab84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	e0a7      	b.n	801a724 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a5d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5d6:	3303      	adds	r3, #3
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	f023 0303 	bic.w	r3, r3, #3
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	8b7a      	ldrh	r2, [r7, #26]
 801a5e8:	4293      	cmp	r3, r2
 801a5ea:	bf28      	it	cs
 801a5ec:	4613      	movcs	r3, r2
 801a5ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a5f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5f2:	3318      	adds	r3, #24
 801a5f4:	693a      	ldr	r2, [r7, #16]
 801a5f6:	4413      	add	r3, r2
 801a5f8:	3303      	adds	r3, #3
 801a5fa:	f023 0303 	bic.w	r3, r3, #3
 801a5fe:	4618      	mov	r0, r3
 801a600:	89f9      	ldrh	r1, [r7, #14]
 801a602:	8b7a      	ldrh	r2, [r7, #26]
 801a604:	2300      	movs	r3, #0
 801a606:	9301      	str	r3, [sp, #4]
 801a608:	887b      	ldrh	r3, [r7, #2]
 801a60a:	9300      	str	r3, [sp, #0]
 801a60c:	460b      	mov	r3, r1
 801a60e:	4601      	mov	r1, r0
 801a610:	6938      	ldr	r0, [r7, #16]
 801a612:	f7ff ff77 	bl	801a504 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801a616:	693b      	ldr	r3, [r7, #16]
 801a618:	685b      	ldr	r3, [r3, #4]
 801a61a:	f003 0303 	and.w	r3, r3, #3
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d006      	beq.n	801a630 <pbuf_alloc+0xd8>
 801a622:	4b42      	ldr	r3, [pc, #264]	@ (801a72c <pbuf_alloc+0x1d4>)
 801a624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a628:	4941      	ldr	r1, [pc, #260]	@ (801a730 <pbuf_alloc+0x1d8>)
 801a62a:	4842      	ldr	r0, [pc, #264]	@ (801a734 <pbuf_alloc+0x1dc>)
 801a62c:	f008 f984 	bl	8022938 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801a630:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a632:	3303      	adds	r3, #3
 801a634:	f023 0303 	bic.w	r3, r3, #3
 801a638:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801a63c:	d106      	bne.n	801a64c <pbuf_alloc+0xf4>
 801a63e:	4b3b      	ldr	r3, [pc, #236]	@ (801a72c <pbuf_alloc+0x1d4>)
 801a640:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801a644:	493c      	ldr	r1, [pc, #240]	@ (801a738 <pbuf_alloc+0x1e0>)
 801a646:	483b      	ldr	r0, [pc, #236]	@ (801a734 <pbuf_alloc+0x1dc>)
 801a648:	f008 f976 	bl	8022938 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d102      	bne.n	801a658 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	627b      	str	r3, [r7, #36]	@ 0x24
 801a656:	e002      	b.n	801a65e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801a658:	69fb      	ldr	r3, [r7, #28]
 801a65a:	693a      	ldr	r2, [r7, #16]
 801a65c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801a65e:	693b      	ldr	r3, [r7, #16]
 801a660:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801a662:	8b7a      	ldrh	r2, [r7, #26]
 801a664:	89fb      	ldrh	r3, [r7, #14]
 801a666:	1ad3      	subs	r3, r2, r3
 801a668:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801a66e:	8b7b      	ldrh	r3, [r7, #26]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d19e      	bne.n	801a5b2 <pbuf_alloc+0x5a>
      break;
 801a674:	e055      	b.n	801a722 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a676:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a678:	3303      	adds	r3, #3
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	f023 0303 	bic.w	r3, r3, #3
 801a680:	b29a      	uxth	r2, r3
 801a682:	88bb      	ldrh	r3, [r7, #4]
 801a684:	3303      	adds	r3, #3
 801a686:	b29b      	uxth	r3, r3
 801a688:	f023 0303 	bic.w	r3, r3, #3
 801a68c:	b29b      	uxth	r3, r3
 801a68e:	4413      	add	r3, r2
 801a690:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a692:	8b3b      	ldrh	r3, [r7, #24]
 801a694:	3318      	adds	r3, #24
 801a696:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a698:	8b3a      	ldrh	r2, [r7, #24]
 801a69a:	88bb      	ldrh	r3, [r7, #4]
 801a69c:	3303      	adds	r3, #3
 801a69e:	f023 0303 	bic.w	r3, r3, #3
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d306      	bcc.n	801a6b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801a6a6:	8afa      	ldrh	r2, [r7, #22]
 801a6a8:	88bb      	ldrh	r3, [r7, #4]
 801a6aa:	3303      	adds	r3, #3
 801a6ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d201      	bcs.n	801a6b8 <pbuf_alloc+0x160>
        return NULL;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	e035      	b.n	801a724 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a6b8:	8afb      	ldrh	r3, [r7, #22]
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7ff f950 	bl	8019960 <mem_malloc>
 801a6c0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d101      	bne.n	801a6cc <pbuf_alloc+0x174>
        return NULL;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	e02b      	b.n	801a724 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a6cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a6ce:	3318      	adds	r3, #24
 801a6d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6d2:	4413      	add	r3, r2
 801a6d4:	3303      	adds	r3, #3
 801a6d6:	f023 0303 	bic.w	r3, r3, #3
 801a6da:	4618      	mov	r0, r3
 801a6dc:	88b9      	ldrh	r1, [r7, #4]
 801a6de:	88ba      	ldrh	r2, [r7, #4]
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	9301      	str	r3, [sp, #4]
 801a6e4:	887b      	ldrh	r3, [r7, #2]
 801a6e6:	9300      	str	r3, [sp, #0]
 801a6e8:	460b      	mov	r3, r1
 801a6ea:	4601      	mov	r1, r0
 801a6ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6ee:	f7ff ff09 	bl	801a504 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	f003 0303 	and.w	r3, r3, #3
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d010      	beq.n	801a720 <pbuf_alloc+0x1c8>
 801a6fe:	4b0b      	ldr	r3, [pc, #44]	@ (801a72c <pbuf_alloc+0x1d4>)
 801a700:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801a704:	490d      	ldr	r1, [pc, #52]	@ (801a73c <pbuf_alloc+0x1e4>)
 801a706:	480b      	ldr	r0, [pc, #44]	@ (801a734 <pbuf_alloc+0x1dc>)
 801a708:	f008 f916 	bl	8022938 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801a70c:	e008      	b.n	801a720 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a70e:	4b07      	ldr	r3, [pc, #28]	@ (801a72c <pbuf_alloc+0x1d4>)
 801a710:	f240 1227 	movw	r2, #295	@ 0x127
 801a714:	490a      	ldr	r1, [pc, #40]	@ (801a740 <pbuf_alloc+0x1e8>)
 801a716:	4807      	ldr	r0, [pc, #28]	@ (801a734 <pbuf_alloc+0x1dc>)
 801a718:	f008 f90e 	bl	8022938 <iprintf>
      return NULL;
 801a71c:	2300      	movs	r3, #0
 801a71e:	e001      	b.n	801a724 <pbuf_alloc+0x1cc>
      break;
 801a720:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a724:	4618      	mov	r0, r3
 801a726:	3728      	adds	r7, #40	@ 0x28
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	0802658c 	.word	0x0802658c
 801a730:	08026600 	.word	0x08026600
 801a734:	08026630 	.word	0x08026630
 801a738:	08026658 	.word	0x08026658
 801a73c:	0802668c 	.word	0x0802668c
 801a740:	080266b8 	.word	0x080266b8

0801a744 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b086      	sub	sp, #24
 801a748:	af02      	add	r7, sp, #8
 801a74a:	6078      	str	r0, [r7, #4]
 801a74c:	460b      	mov	r3, r1
 801a74e:	807b      	strh	r3, [r7, #2]
 801a750:	4613      	mov	r3, r2
 801a752:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a754:	883b      	ldrh	r3, [r7, #0]
 801a756:	2b41      	cmp	r3, #65	@ 0x41
 801a758:	d009      	beq.n	801a76e <pbuf_alloc_reference+0x2a>
 801a75a:	883b      	ldrh	r3, [r7, #0]
 801a75c:	2b01      	cmp	r3, #1
 801a75e:	d006      	beq.n	801a76e <pbuf_alloc_reference+0x2a>
 801a760:	4b0f      	ldr	r3, [pc, #60]	@ (801a7a0 <pbuf_alloc_reference+0x5c>)
 801a762:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801a766:	490f      	ldr	r1, [pc, #60]	@ (801a7a4 <pbuf_alloc_reference+0x60>)
 801a768:	480f      	ldr	r0, [pc, #60]	@ (801a7a8 <pbuf_alloc_reference+0x64>)
 801a76a:	f008 f8e5 	bl	8022938 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a76e:	200c      	movs	r0, #12
 801a770:	f7ff fa9a 	bl	8019ca8 <memp_malloc>
 801a774:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d101      	bne.n	801a780 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801a77c:	2300      	movs	r3, #0
 801a77e:	e00b      	b.n	801a798 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801a780:	8879      	ldrh	r1, [r7, #2]
 801a782:	887a      	ldrh	r2, [r7, #2]
 801a784:	2300      	movs	r3, #0
 801a786:	9301      	str	r3, [sp, #4]
 801a788:	883b      	ldrh	r3, [r7, #0]
 801a78a:	9300      	str	r3, [sp, #0]
 801a78c:	460b      	mov	r3, r1
 801a78e:	6879      	ldr	r1, [r7, #4]
 801a790:	68f8      	ldr	r0, [r7, #12]
 801a792:	f7ff feb7 	bl	801a504 <pbuf_init_alloced_pbuf>
  return p;
 801a796:	68fb      	ldr	r3, [r7, #12]
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3710      	adds	r7, #16
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	0802658c 	.word	0x0802658c
 801a7a4:	080266d4 	.word	0x080266d4
 801a7a8:	08026630 	.word	0x08026630

0801a7ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b088      	sub	sp, #32
 801a7b0:	af02      	add	r7, sp, #8
 801a7b2:	607b      	str	r3, [r7, #4]
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	73fb      	strb	r3, [r7, #15]
 801a7b8:	460b      	mov	r3, r1
 801a7ba:	81bb      	strh	r3, [r7, #12]
 801a7bc:	4613      	mov	r3, r2
 801a7be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a7c0:	7bfb      	ldrb	r3, [r7, #15]
 801a7c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a7c4:	8a7b      	ldrh	r3, [r7, #18]
 801a7c6:	3303      	adds	r3, #3
 801a7c8:	f023 0203 	bic.w	r2, r3, #3
 801a7cc:	89bb      	ldrh	r3, [r7, #12]
 801a7ce:	441a      	add	r2, r3
 801a7d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a7d2:	429a      	cmp	r2, r3
 801a7d4:	d901      	bls.n	801a7da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	e018      	b.n	801a80c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a7da:	6a3b      	ldr	r3, [r7, #32]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d007      	beq.n	801a7f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a7e0:	8a7b      	ldrh	r3, [r7, #18]
 801a7e2:	3303      	adds	r3, #3
 801a7e4:	f023 0303 	bic.w	r3, r3, #3
 801a7e8:	6a3a      	ldr	r2, [r7, #32]
 801a7ea:	4413      	add	r3, r2
 801a7ec:	617b      	str	r3, [r7, #20]
 801a7ee:	e001      	b.n	801a7f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	89b9      	ldrh	r1, [r7, #12]
 801a7f8:	89ba      	ldrh	r2, [r7, #12]
 801a7fa:	2302      	movs	r3, #2
 801a7fc:	9301      	str	r3, [sp, #4]
 801a7fe:	897b      	ldrh	r3, [r7, #10]
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	460b      	mov	r3, r1
 801a804:	6979      	ldr	r1, [r7, #20]
 801a806:	f7ff fe7d 	bl	801a504 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a80a:	687b      	ldr	r3, [r7, #4]
}
 801a80c:	4618      	mov	r0, r3
 801a80e:	3718      	adds	r7, #24
 801a810:	46bd      	mov	sp, r7
 801a812:	bd80      	pop	{r7, pc}

0801a814 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b084      	sub	sp, #16
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
 801a81c:	460b      	mov	r3, r1
 801a81e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d106      	bne.n	801a834 <pbuf_realloc+0x20>
 801a826:	4b3a      	ldr	r3, [pc, #232]	@ (801a910 <pbuf_realloc+0xfc>)
 801a828:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801a82c:	4939      	ldr	r1, [pc, #228]	@ (801a914 <pbuf_realloc+0x100>)
 801a82e:	483a      	ldr	r0, [pc, #232]	@ (801a918 <pbuf_realloc+0x104>)
 801a830:	f008 f882 	bl	8022938 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	891b      	ldrh	r3, [r3, #8]
 801a838:	887a      	ldrh	r2, [r7, #2]
 801a83a:	429a      	cmp	r2, r3
 801a83c:	d263      	bcs.n	801a906 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	891a      	ldrh	r2, [r3, #8]
 801a842:	887b      	ldrh	r3, [r7, #2]
 801a844:	1ad3      	subs	r3, r2, r3
 801a846:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a848:	887b      	ldrh	r3, [r7, #2]
 801a84a:	817b      	strh	r3, [r7, #10]
  q = p;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a850:	e018      	b.n	801a884 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	895b      	ldrh	r3, [r3, #10]
 801a856:	897a      	ldrh	r2, [r7, #10]
 801a858:	1ad3      	subs	r3, r2, r3
 801a85a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	891a      	ldrh	r2, [r3, #8]
 801a860:	893b      	ldrh	r3, [r7, #8]
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	b29a      	uxth	r2, r3
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d106      	bne.n	801a884 <pbuf_realloc+0x70>
 801a876:	4b26      	ldr	r3, [pc, #152]	@ (801a910 <pbuf_realloc+0xfc>)
 801a878:	f240 12af 	movw	r2, #431	@ 0x1af
 801a87c:	4927      	ldr	r1, [pc, #156]	@ (801a91c <pbuf_realloc+0x108>)
 801a87e:	4826      	ldr	r0, [pc, #152]	@ (801a918 <pbuf_realloc+0x104>)
 801a880:	f008 f85a 	bl	8022938 <iprintf>
  while (rem_len > q->len) {
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	895b      	ldrh	r3, [r3, #10]
 801a888:	897a      	ldrh	r2, [r7, #10]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d8e1      	bhi.n	801a852 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	7b1b      	ldrb	r3, [r3, #12]
 801a892:	f003 030f 	and.w	r3, r3, #15
 801a896:	2b00      	cmp	r3, #0
 801a898:	d121      	bne.n	801a8de <pbuf_realloc+0xca>
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	895b      	ldrh	r3, [r3, #10]
 801a89e:	897a      	ldrh	r2, [r7, #10]
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	d01c      	beq.n	801a8de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	7b5b      	ldrb	r3, [r3, #13]
 801a8a8:	f003 0302 	and.w	r3, r3, #2
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d116      	bne.n	801a8de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	685a      	ldr	r2, [r3, #4]
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	1ad3      	subs	r3, r2, r3
 801a8b8:	b29a      	uxth	r2, r3
 801a8ba:	897b      	ldrh	r3, [r7, #10]
 801a8bc:	4413      	add	r3, r2
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	4619      	mov	r1, r3
 801a8c2:	68f8      	ldr	r0, [r7, #12]
 801a8c4:	f7fe ff42 	bl	801974c <mem_trim>
 801a8c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d106      	bne.n	801a8de <pbuf_realloc+0xca>
 801a8d0:	4b0f      	ldr	r3, [pc, #60]	@ (801a910 <pbuf_realloc+0xfc>)
 801a8d2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801a8d6:	4912      	ldr	r1, [pc, #72]	@ (801a920 <pbuf_realloc+0x10c>)
 801a8d8:	480f      	ldr	r0, [pc, #60]	@ (801a918 <pbuf_realloc+0x104>)
 801a8da:	f008 f82d 	bl	8022938 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	897a      	ldrh	r2, [r7, #10]
 801a8e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	895a      	ldrh	r2, [r3, #10]
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d004      	beq.n	801a8fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f000 f943 	bl	801ab84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	2200      	movs	r2, #0
 801a902:	601a      	str	r2, [r3, #0]
 801a904:	e000      	b.n	801a908 <pbuf_realloc+0xf4>
    return;
 801a906:	bf00      	nop

}
 801a908:	3710      	adds	r7, #16
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	0802658c 	.word	0x0802658c
 801a914:	080266e8 	.word	0x080266e8
 801a918:	08026630 	.word	0x08026630
 801a91c:	08026700 	.word	0x08026700
 801a920:	08026718 	.word	0x08026718

0801a924 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b086      	sub	sp, #24
 801a928:	af00      	add	r7, sp, #0
 801a92a:	60f8      	str	r0, [r7, #12]
 801a92c:	60b9      	str	r1, [r7, #8]
 801a92e:	4613      	mov	r3, r2
 801a930:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d106      	bne.n	801a946 <pbuf_add_header_impl+0x22>
 801a938:	4b2b      	ldr	r3, [pc, #172]	@ (801a9e8 <pbuf_add_header_impl+0xc4>)
 801a93a:	f240 12df 	movw	r2, #479	@ 0x1df
 801a93e:	492b      	ldr	r1, [pc, #172]	@ (801a9ec <pbuf_add_header_impl+0xc8>)
 801a940:	482b      	ldr	r0, [pc, #172]	@ (801a9f0 <pbuf_add_header_impl+0xcc>)
 801a942:	f007 fff9 	bl	8022938 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d003      	beq.n	801a954 <pbuf_add_header_impl+0x30>
 801a94c:	68bb      	ldr	r3, [r7, #8]
 801a94e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a952:	d301      	bcc.n	801a958 <pbuf_add_header_impl+0x34>
    return 1;
 801a954:	2301      	movs	r3, #1
 801a956:	e043      	b.n	801a9e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d101      	bne.n	801a962 <pbuf_add_header_impl+0x3e>
    return 0;
 801a95e:	2300      	movs	r3, #0
 801a960:	e03e      	b.n	801a9e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a962:	68bb      	ldr	r3, [r7, #8]
 801a964:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	891a      	ldrh	r2, [r3, #8]
 801a96a:	8a7b      	ldrh	r3, [r7, #18]
 801a96c:	4413      	add	r3, r2
 801a96e:	b29b      	uxth	r3, r3
 801a970:	8a7a      	ldrh	r2, [r7, #18]
 801a972:	429a      	cmp	r2, r3
 801a974:	d901      	bls.n	801a97a <pbuf_add_header_impl+0x56>
    return 1;
 801a976:	2301      	movs	r3, #1
 801a978:	e032      	b.n	801a9e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	7b1b      	ldrb	r3, [r3, #12]
 801a97e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a980:	8a3b      	ldrh	r3, [r7, #16]
 801a982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a986:	2b00      	cmp	r3, #0
 801a988:	d00c      	beq.n	801a9a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	685a      	ldr	r2, [r3, #4]
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	425b      	negs	r3, r3
 801a992:	4413      	add	r3, r2
 801a994:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	3318      	adds	r3, #24
 801a99a:	697a      	ldr	r2, [r7, #20]
 801a99c:	429a      	cmp	r2, r3
 801a99e:	d20d      	bcs.n	801a9bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a9a0:	2301      	movs	r3, #1
 801a9a2:	e01d      	b.n	801a9e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a9a4:	79fb      	ldrb	r3, [r7, #7]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d006      	beq.n	801a9b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	685a      	ldr	r2, [r3, #4]
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	425b      	negs	r3, r3
 801a9b2:	4413      	add	r3, r2
 801a9b4:	617b      	str	r3, [r7, #20]
 801a9b6:	e001      	b.n	801a9bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a9b8:	2301      	movs	r3, #1
 801a9ba:	e011      	b.n	801a9e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	697a      	ldr	r2, [r7, #20]
 801a9c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	895a      	ldrh	r2, [r3, #10]
 801a9c6:	8a7b      	ldrh	r3, [r7, #18]
 801a9c8:	4413      	add	r3, r2
 801a9ca:	b29a      	uxth	r2, r3
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	891a      	ldrh	r2, [r3, #8]
 801a9d4:	8a7b      	ldrh	r3, [r7, #18]
 801a9d6:	4413      	add	r3, r2
 801a9d8:	b29a      	uxth	r2, r3
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	811a      	strh	r2, [r3, #8]


  return 0;
 801a9de:	2300      	movs	r3, #0
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3718      	adds	r7, #24
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd80      	pop	{r7, pc}
 801a9e8:	0802658c 	.word	0x0802658c
 801a9ec:	08026734 	.word	0x08026734
 801a9f0:	08026630 	.word	0x08026630

0801a9f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a9fe:	2200      	movs	r2, #0
 801aa00:	6839      	ldr	r1, [r7, #0]
 801aa02:	6878      	ldr	r0, [r7, #4]
 801aa04:	f7ff ff8e 	bl	801a924 <pbuf_add_header_impl>
 801aa08:	4603      	mov	r3, r0
}
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	3708      	adds	r7, #8
 801aa0e:	46bd      	mov	sp, r7
 801aa10:	bd80      	pop	{r7, pc}
	...

0801aa14 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	b084      	sub	sp, #16
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
 801aa1c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d106      	bne.n	801aa32 <pbuf_remove_header+0x1e>
 801aa24:	4b20      	ldr	r3, [pc, #128]	@ (801aaa8 <pbuf_remove_header+0x94>)
 801aa26:	f240 224b 	movw	r2, #587	@ 0x24b
 801aa2a:	4920      	ldr	r1, [pc, #128]	@ (801aaac <pbuf_remove_header+0x98>)
 801aa2c:	4820      	ldr	r0, [pc, #128]	@ (801aab0 <pbuf_remove_header+0x9c>)
 801aa2e:	f007 ff83 	bl	8022938 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d003      	beq.n	801aa40 <pbuf_remove_header+0x2c>
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801aa3e:	d301      	bcc.n	801aa44 <pbuf_remove_header+0x30>
    return 1;
 801aa40:	2301      	movs	r3, #1
 801aa42:	e02c      	b.n	801aa9e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d101      	bne.n	801aa4e <pbuf_remove_header+0x3a>
    return 0;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	e027      	b.n	801aa9e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	895b      	ldrh	r3, [r3, #10]
 801aa56:	89fa      	ldrh	r2, [r7, #14]
 801aa58:	429a      	cmp	r2, r3
 801aa5a:	d908      	bls.n	801aa6e <pbuf_remove_header+0x5a>
 801aa5c:	4b12      	ldr	r3, [pc, #72]	@ (801aaa8 <pbuf_remove_header+0x94>)
 801aa5e:	f240 2255 	movw	r2, #597	@ 0x255
 801aa62:	4914      	ldr	r1, [pc, #80]	@ (801aab4 <pbuf_remove_header+0xa0>)
 801aa64:	4812      	ldr	r0, [pc, #72]	@ (801aab0 <pbuf_remove_header+0x9c>)
 801aa66:	f007 ff67 	bl	8022938 <iprintf>
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	e017      	b.n	801aa9e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	685b      	ldr	r3, [r3, #4]
 801aa72:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	685a      	ldr	r2, [r3, #4]
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	441a      	add	r2, r3
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	895a      	ldrh	r2, [r3, #10]
 801aa84:	89fb      	ldrh	r3, [r7, #14]
 801aa86:	1ad3      	subs	r3, r2, r3
 801aa88:	b29a      	uxth	r2, r3
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	891a      	ldrh	r2, [r3, #8]
 801aa92:	89fb      	ldrh	r3, [r7, #14]
 801aa94:	1ad3      	subs	r3, r2, r3
 801aa96:	b29a      	uxth	r2, r3
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801aa9c:	2300      	movs	r3, #0
}
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	3710      	adds	r7, #16
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	0802658c 	.word	0x0802658c
 801aaac:	08026734 	.word	0x08026734
 801aab0:	08026630 	.word	0x08026630
 801aab4:	08026740 	.word	0x08026740

0801aab8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
 801aac0:	460b      	mov	r3, r1
 801aac2:	807b      	strh	r3, [r7, #2]
 801aac4:	4613      	mov	r3, r2
 801aac6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801aac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	da08      	bge.n	801aae2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801aad0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aad4:	425b      	negs	r3, r3
 801aad6:	4619      	mov	r1, r3
 801aad8:	6878      	ldr	r0, [r7, #4]
 801aada:	f7ff ff9b 	bl	801aa14 <pbuf_remove_header>
 801aade:	4603      	mov	r3, r0
 801aae0:	e007      	b.n	801aaf2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801aae2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aae6:	787a      	ldrb	r2, [r7, #1]
 801aae8:	4619      	mov	r1, r3
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f7ff ff1a 	bl	801a924 <pbuf_add_header_impl>
 801aaf0:	4603      	mov	r3, r0
  }
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3708      	adds	r7, #8
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}

0801aafa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801aafa:	b580      	push	{r7, lr}
 801aafc:	b082      	sub	sp, #8
 801aafe:	af00      	add	r7, sp, #0
 801ab00:	6078      	str	r0, [r7, #4]
 801ab02:	460b      	mov	r3, r1
 801ab04:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801ab06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab0a:	2201      	movs	r2, #1
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	6878      	ldr	r0, [r7, #4]
 801ab10:	f7ff ffd2 	bl	801aab8 <pbuf_header_impl>
 801ab14:	4603      	mov	r3, r0
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	3708      	adds	r7, #8
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}

0801ab1e <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801ab1e:	b580      	push	{r7, lr}
 801ab20:	b086      	sub	sp, #24
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
 801ab26:	460b      	mov	r3, r1
 801ab28:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801ab2e:	887b      	ldrh	r3, [r7, #2]
 801ab30:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801ab32:	e01c      	b.n	801ab6e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801ab34:	697b      	ldr	r3, [r7, #20]
 801ab36:	895b      	ldrh	r3, [r3, #10]
 801ab38:	8a7a      	ldrh	r2, [r7, #18]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d310      	bcc.n	801ab60 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801ab42:	697b      	ldr	r3, [r7, #20]
 801ab44:	895b      	ldrh	r3, [r3, #10]
 801ab46:	8a7a      	ldrh	r2, [r7, #18]
 801ab48:	1ad3      	subs	r3, r2, r3
 801ab4a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801ab4c:	697b      	ldr	r3, [r7, #20]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	2200      	movs	r2, #0
 801ab56:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801ab58:	68f8      	ldr	r0, [r7, #12]
 801ab5a:	f000 f813 	bl	801ab84 <pbuf_free>
 801ab5e:	e006      	b.n	801ab6e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801ab60:	8a7b      	ldrh	r3, [r7, #18]
 801ab62:	4619      	mov	r1, r3
 801ab64:	6978      	ldr	r0, [r7, #20]
 801ab66:	f7ff ff55 	bl	801aa14 <pbuf_remove_header>
      free_left = 0;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801ab6e:	8a7b      	ldrh	r3, [r7, #18]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d002      	beq.n	801ab7a <pbuf_free_header+0x5c>
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d1dc      	bne.n	801ab34 <pbuf_free_header+0x16>
    }
  }
  return p;
 801ab7a:	697b      	ldr	r3, [r7, #20]
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3718      	adds	r7, #24
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}

0801ab84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b088      	sub	sp, #32
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d10b      	bne.n	801abaa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d106      	bne.n	801aba6 <pbuf_free+0x22>
 801ab98:	4b3b      	ldr	r3, [pc, #236]	@ (801ac88 <pbuf_free+0x104>)
 801ab9a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801ab9e:	493b      	ldr	r1, [pc, #236]	@ (801ac8c <pbuf_free+0x108>)
 801aba0:	483b      	ldr	r0, [pc, #236]	@ (801ac90 <pbuf_free+0x10c>)
 801aba2:	f007 fec9 	bl	8022938 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801aba6:	2300      	movs	r3, #0
 801aba8:	e069      	b.n	801ac7e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801abaa:	2300      	movs	r3, #0
 801abac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801abae:	e062      	b.n	801ac76 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801abb0:	f007 fd5c 	bl	802266c <sys_arch_protect>
 801abb4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	7b9b      	ldrb	r3, [r3, #14]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d106      	bne.n	801abcc <pbuf_free+0x48>
 801abbe:	4b32      	ldr	r3, [pc, #200]	@ (801ac88 <pbuf_free+0x104>)
 801abc0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801abc4:	4933      	ldr	r1, [pc, #204]	@ (801ac94 <pbuf_free+0x110>)
 801abc6:	4832      	ldr	r0, [pc, #200]	@ (801ac90 <pbuf_free+0x10c>)
 801abc8:	f007 feb6 	bl	8022938 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	7b9b      	ldrb	r3, [r3, #14]
 801abd0:	3b01      	subs	r3, #1
 801abd2:	b2da      	uxtb	r2, r3
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	739a      	strb	r2, [r3, #14]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	7b9b      	ldrb	r3, [r3, #14]
 801abdc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801abde:	69b8      	ldr	r0, [r7, #24]
 801abe0:	f007 fd52 	bl	8022688 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801abe4:	7dfb      	ldrb	r3, [r7, #23]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d143      	bne.n	801ac72 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	7b1b      	ldrb	r3, [r3, #12]
 801abf4:	f003 030f 	and.w	r3, r3, #15
 801abf8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	7b5b      	ldrb	r3, [r3, #13]
 801abfe:	f003 0302 	and.w	r3, r3, #2
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d011      	beq.n	801ac2a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ac0a:	68bb      	ldr	r3, [r7, #8]
 801ac0c:	699b      	ldr	r3, [r3, #24]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d106      	bne.n	801ac20 <pbuf_free+0x9c>
 801ac12:	4b1d      	ldr	r3, [pc, #116]	@ (801ac88 <pbuf_free+0x104>)
 801ac14:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801ac18:	491f      	ldr	r1, [pc, #124]	@ (801ac98 <pbuf_free+0x114>)
 801ac1a:	481d      	ldr	r0, [pc, #116]	@ (801ac90 <pbuf_free+0x10c>)
 801ac1c:	f007 fe8c 	bl	8022938 <iprintf>
        pc->custom_free_function(p);
 801ac20:	68bb      	ldr	r3, [r7, #8]
 801ac22:	699b      	ldr	r3, [r3, #24]
 801ac24:	6878      	ldr	r0, [r7, #4]
 801ac26:	4798      	blx	r3
 801ac28:	e01d      	b.n	801ac66 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ac2a:	7bfb      	ldrb	r3, [r7, #15]
 801ac2c:	2b02      	cmp	r3, #2
 801ac2e:	d104      	bne.n	801ac3a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801ac30:	6879      	ldr	r1, [r7, #4]
 801ac32:	200d      	movs	r0, #13
 801ac34:	f7ff f8ae 	bl	8019d94 <memp_free>
 801ac38:	e015      	b.n	801ac66 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ac3a:	7bfb      	ldrb	r3, [r7, #15]
 801ac3c:	2b01      	cmp	r3, #1
 801ac3e:	d104      	bne.n	801ac4a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801ac40:	6879      	ldr	r1, [r7, #4]
 801ac42:	200c      	movs	r0, #12
 801ac44:	f7ff f8a6 	bl	8019d94 <memp_free>
 801ac48:	e00d      	b.n	801ac66 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ac4a:	7bfb      	ldrb	r3, [r7, #15]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d103      	bne.n	801ac58 <pbuf_free+0xd4>
          mem_free(p);
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f7fe fceb 	bl	801962c <mem_free>
 801ac56:	e006      	b.n	801ac66 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ac58:	4b0b      	ldr	r3, [pc, #44]	@ (801ac88 <pbuf_free+0x104>)
 801ac5a:	f240 320f 	movw	r2, #783	@ 0x30f
 801ac5e:	490f      	ldr	r1, [pc, #60]	@ (801ac9c <pbuf_free+0x118>)
 801ac60:	480b      	ldr	r0, [pc, #44]	@ (801ac90 <pbuf_free+0x10c>)
 801ac62:	f007 fe69 	bl	8022938 <iprintf>
        }
      }
      count++;
 801ac66:	7ffb      	ldrb	r3, [r7, #31]
 801ac68:	3301      	adds	r3, #1
 801ac6a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801ac6c:	693b      	ldr	r3, [r7, #16]
 801ac6e:	607b      	str	r3, [r7, #4]
 801ac70:	e001      	b.n	801ac76 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801ac72:	2300      	movs	r3, #0
 801ac74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d199      	bne.n	801abb0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801ac7c:	7ffb      	ldrb	r3, [r7, #31]
}
 801ac7e:	4618      	mov	r0, r3
 801ac80:	3720      	adds	r7, #32
 801ac82:	46bd      	mov	sp, r7
 801ac84:	bd80      	pop	{r7, pc}
 801ac86:	bf00      	nop
 801ac88:	0802658c 	.word	0x0802658c
 801ac8c:	08026734 	.word	0x08026734
 801ac90:	08026630 	.word	0x08026630
 801ac94:	08026760 	.word	0x08026760
 801ac98:	08026778 	.word	0x08026778
 801ac9c:	0802679c 	.word	0x0802679c

0801aca0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801aca0:	b480      	push	{r7}
 801aca2:	b085      	sub	sp, #20
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801aca8:	2300      	movs	r3, #0
 801acaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801acac:	e005      	b.n	801acba <pbuf_clen+0x1a>
    ++len;
 801acae:	89fb      	ldrh	r3, [r7, #14]
 801acb0:	3301      	adds	r3, #1
 801acb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d1f6      	bne.n	801acae <pbuf_clen+0xe>
  }
  return len;
 801acc0:	89fb      	ldrh	r3, [r7, #14]
}
 801acc2:	4618      	mov	r0, r3
 801acc4:	3714      	adds	r7, #20
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr
	...

0801acd0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b084      	sub	sp, #16
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d016      	beq.n	801ad0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801acde:	f007 fcc5 	bl	802266c <sys_arch_protect>
 801ace2:	60f8      	str	r0, [r7, #12]
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	7b9b      	ldrb	r3, [r3, #14]
 801ace8:	3301      	adds	r3, #1
 801acea:	b2da      	uxtb	r2, r3
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	739a      	strb	r2, [r3, #14]
 801acf0:	68f8      	ldr	r0, [r7, #12]
 801acf2:	f007 fcc9 	bl	8022688 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	7b9b      	ldrb	r3, [r3, #14]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d106      	bne.n	801ad0c <pbuf_ref+0x3c>
 801acfe:	4b05      	ldr	r3, [pc, #20]	@ (801ad14 <pbuf_ref+0x44>)
 801ad00:	f240 3242 	movw	r2, #834	@ 0x342
 801ad04:	4904      	ldr	r1, [pc, #16]	@ (801ad18 <pbuf_ref+0x48>)
 801ad06:	4805      	ldr	r0, [pc, #20]	@ (801ad1c <pbuf_ref+0x4c>)
 801ad08:	f007 fe16 	bl	8022938 <iprintf>
  }
}
 801ad0c:	bf00      	nop
 801ad0e:	3710      	adds	r7, #16
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}
 801ad14:	0802658c 	.word	0x0802658c
 801ad18:	080267b0 	.word	0x080267b0
 801ad1c:	08026630 	.word	0x08026630

0801ad20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d002      	beq.n	801ad36 <pbuf_cat+0x16>
 801ad30:	683b      	ldr	r3, [r7, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d107      	bne.n	801ad46 <pbuf_cat+0x26>
 801ad36:	4b20      	ldr	r3, [pc, #128]	@ (801adb8 <pbuf_cat+0x98>)
 801ad38:	f240 3259 	movw	r2, #857	@ 0x359
 801ad3c:	491f      	ldr	r1, [pc, #124]	@ (801adbc <pbuf_cat+0x9c>)
 801ad3e:	4820      	ldr	r0, [pc, #128]	@ (801adc0 <pbuf_cat+0xa0>)
 801ad40:	f007 fdfa 	bl	8022938 <iprintf>
 801ad44:	e034      	b.n	801adb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	60fb      	str	r3, [r7, #12]
 801ad4a:	e00a      	b.n	801ad62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	891a      	ldrh	r2, [r3, #8]
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	891b      	ldrh	r3, [r3, #8]
 801ad54:	4413      	add	r3, r2
 801ad56:	b29a      	uxth	r2, r3
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	60fb      	str	r3, [r7, #12]
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d1f0      	bne.n	801ad4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	891a      	ldrh	r2, [r3, #8]
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	895b      	ldrh	r3, [r3, #10]
 801ad72:	429a      	cmp	r2, r3
 801ad74:	d006      	beq.n	801ad84 <pbuf_cat+0x64>
 801ad76:	4b10      	ldr	r3, [pc, #64]	@ (801adb8 <pbuf_cat+0x98>)
 801ad78:	f240 3262 	movw	r2, #866	@ 0x362
 801ad7c:	4911      	ldr	r1, [pc, #68]	@ (801adc4 <pbuf_cat+0xa4>)
 801ad7e:	4810      	ldr	r0, [pc, #64]	@ (801adc0 <pbuf_cat+0xa0>)
 801ad80:	f007 fdda 	bl	8022938 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d006      	beq.n	801ad9a <pbuf_cat+0x7a>
 801ad8c:	4b0a      	ldr	r3, [pc, #40]	@ (801adb8 <pbuf_cat+0x98>)
 801ad8e:	f240 3263 	movw	r2, #867	@ 0x363
 801ad92:	490d      	ldr	r1, [pc, #52]	@ (801adc8 <pbuf_cat+0xa8>)
 801ad94:	480a      	ldr	r0, [pc, #40]	@ (801adc0 <pbuf_cat+0xa0>)
 801ad96:	f007 fdcf 	bl	8022938 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	891a      	ldrh	r2, [r3, #8]
 801ad9e:	683b      	ldr	r3, [r7, #0]
 801ada0:	891b      	ldrh	r3, [r3, #8]
 801ada2:	4413      	add	r3, r2
 801ada4:	b29a      	uxth	r2, r3
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	683a      	ldr	r2, [r7, #0]
 801adae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801adb0:	3710      	adds	r7, #16
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}
 801adb6:	bf00      	nop
 801adb8:	0802658c 	.word	0x0802658c
 801adbc:	080267c4 	.word	0x080267c4
 801adc0:	08026630 	.word	0x08026630
 801adc4:	080267fc 	.word	0x080267fc
 801adc8:	0802682c 	.word	0x0802682c

0801adcc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b082      	sub	sp, #8
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801add6:	6839      	ldr	r1, [r7, #0]
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	f7ff ffa1 	bl	801ad20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801adde:	6838      	ldr	r0, [r7, #0]
 801ade0:	f7ff ff76 	bl	801acd0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801ade4:	bf00      	nop
 801ade6:	3708      	adds	r7, #8
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}

0801adec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b086      	sub	sp, #24
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
 801adf4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801adf6:	2300      	movs	r3, #0
 801adf8:	617b      	str	r3, [r7, #20]
 801adfa:	2300      	movs	r3, #0
 801adfc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d008      	beq.n	801ae16 <pbuf_copy+0x2a>
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d005      	beq.n	801ae16 <pbuf_copy+0x2a>
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	891a      	ldrh	r2, [r3, #8]
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	891b      	ldrh	r3, [r3, #8]
 801ae12:	429a      	cmp	r2, r3
 801ae14:	d209      	bcs.n	801ae2a <pbuf_copy+0x3e>
 801ae16:	4b57      	ldr	r3, [pc, #348]	@ (801af74 <pbuf_copy+0x188>)
 801ae18:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801ae1c:	4956      	ldr	r1, [pc, #344]	@ (801af78 <pbuf_copy+0x18c>)
 801ae1e:	4857      	ldr	r0, [pc, #348]	@ (801af7c <pbuf_copy+0x190>)
 801ae20:	f007 fd8a 	bl	8022938 <iprintf>
 801ae24:	f06f 030f 	mvn.w	r3, #15
 801ae28:	e09f      	b.n	801af6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	895b      	ldrh	r3, [r3, #10]
 801ae2e:	461a      	mov	r2, r3
 801ae30:	697b      	ldr	r3, [r7, #20]
 801ae32:	1ad2      	subs	r2, r2, r3
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	895b      	ldrh	r3, [r3, #10]
 801ae38:	4619      	mov	r1, r3
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	1acb      	subs	r3, r1, r3
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	d306      	bcc.n	801ae50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801ae42:	683b      	ldr	r3, [r7, #0]
 801ae44:	895b      	ldrh	r3, [r3, #10]
 801ae46:	461a      	mov	r2, r3
 801ae48:	693b      	ldr	r3, [r7, #16]
 801ae4a:	1ad3      	subs	r3, r2, r3
 801ae4c:	60fb      	str	r3, [r7, #12]
 801ae4e:	e005      	b.n	801ae5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	895b      	ldrh	r3, [r3, #10]
 801ae54:	461a      	mov	r2, r3
 801ae56:	697b      	ldr	r3, [r7, #20]
 801ae58:	1ad3      	subs	r3, r2, r3
 801ae5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	685a      	ldr	r2, [r3, #4]
 801ae60:	697b      	ldr	r3, [r7, #20]
 801ae62:	18d0      	adds	r0, r2, r3
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	685a      	ldr	r2, [r3, #4]
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	4413      	add	r3, r2
 801ae6c:	68fa      	ldr	r2, [r7, #12]
 801ae6e:	4619      	mov	r1, r3
 801ae70:	f007 ff99 	bl	8022da6 <memcpy>
    offset_to += len;
 801ae74:	697a      	ldr	r2, [r7, #20]
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	4413      	add	r3, r2
 801ae7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801ae7c:	693a      	ldr	r2, [r7, #16]
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	4413      	add	r3, r2
 801ae82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	895b      	ldrh	r3, [r3, #10]
 801ae88:	461a      	mov	r2, r3
 801ae8a:	697b      	ldr	r3, [r7, #20]
 801ae8c:	4293      	cmp	r3, r2
 801ae8e:	d906      	bls.n	801ae9e <pbuf_copy+0xb2>
 801ae90:	4b38      	ldr	r3, [pc, #224]	@ (801af74 <pbuf_copy+0x188>)
 801ae92:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801ae96:	493a      	ldr	r1, [pc, #232]	@ (801af80 <pbuf_copy+0x194>)
 801ae98:	4838      	ldr	r0, [pc, #224]	@ (801af7c <pbuf_copy+0x190>)
 801ae9a:	f007 fd4d 	bl	8022938 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	895b      	ldrh	r3, [r3, #10]
 801aea2:	461a      	mov	r2, r3
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	4293      	cmp	r3, r2
 801aea8:	d906      	bls.n	801aeb8 <pbuf_copy+0xcc>
 801aeaa:	4b32      	ldr	r3, [pc, #200]	@ (801af74 <pbuf_copy+0x188>)
 801aeac:	f240 32da 	movw	r2, #986	@ 0x3da
 801aeb0:	4934      	ldr	r1, [pc, #208]	@ (801af84 <pbuf_copy+0x198>)
 801aeb2:	4832      	ldr	r0, [pc, #200]	@ (801af7c <pbuf_copy+0x190>)
 801aeb4:	f007 fd40 	bl	8022938 <iprintf>
    if (offset_from >= p_from->len) {
 801aeb8:	683b      	ldr	r3, [r7, #0]
 801aeba:	895b      	ldrh	r3, [r3, #10]
 801aebc:	461a      	mov	r2, r3
 801aebe:	693b      	ldr	r3, [r7, #16]
 801aec0:	4293      	cmp	r3, r2
 801aec2:	d304      	bcc.n	801aece <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801aec4:	2300      	movs	r3, #0
 801aec6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	895b      	ldrh	r3, [r3, #10]
 801aed2:	461a      	mov	r2, r3
 801aed4:	697b      	ldr	r3, [r7, #20]
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d114      	bne.n	801af04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801aeda:	2300      	movs	r3, #0
 801aedc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d10c      	bne.n	801af04 <pbuf_copy+0x118>
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d009      	beq.n	801af04 <pbuf_copy+0x118>
 801aef0:	4b20      	ldr	r3, [pc, #128]	@ (801af74 <pbuf_copy+0x188>)
 801aef2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801aef6:	4924      	ldr	r1, [pc, #144]	@ (801af88 <pbuf_copy+0x19c>)
 801aef8:	4820      	ldr	r0, [pc, #128]	@ (801af7c <pbuf_copy+0x190>)
 801aefa:	f007 fd1d 	bl	8022938 <iprintf>
 801aefe:	f06f 030f 	mvn.w	r3, #15
 801af02:	e032      	b.n	801af6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d013      	beq.n	801af32 <pbuf_copy+0x146>
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	895a      	ldrh	r2, [r3, #10]
 801af0e:	683b      	ldr	r3, [r7, #0]
 801af10:	891b      	ldrh	r3, [r3, #8]
 801af12:	429a      	cmp	r2, r3
 801af14:	d10d      	bne.n	801af32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d009      	beq.n	801af32 <pbuf_copy+0x146>
 801af1e:	4b15      	ldr	r3, [pc, #84]	@ (801af74 <pbuf_copy+0x188>)
 801af20:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801af24:	4919      	ldr	r1, [pc, #100]	@ (801af8c <pbuf_copy+0x1a0>)
 801af26:	4815      	ldr	r0, [pc, #84]	@ (801af7c <pbuf_copy+0x190>)
 801af28:	f007 fd06 	bl	8022938 <iprintf>
 801af2c:	f06f 0305 	mvn.w	r3, #5
 801af30:	e01b      	b.n	801af6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d013      	beq.n	801af60 <pbuf_copy+0x174>
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	895a      	ldrh	r2, [r3, #10]
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	891b      	ldrh	r3, [r3, #8]
 801af40:	429a      	cmp	r2, r3
 801af42:	d10d      	bne.n	801af60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d009      	beq.n	801af60 <pbuf_copy+0x174>
 801af4c:	4b09      	ldr	r3, [pc, #36]	@ (801af74 <pbuf_copy+0x188>)
 801af4e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801af52:	490e      	ldr	r1, [pc, #56]	@ (801af8c <pbuf_copy+0x1a0>)
 801af54:	4809      	ldr	r0, [pc, #36]	@ (801af7c <pbuf_copy+0x190>)
 801af56:	f007 fcef 	bl	8022938 <iprintf>
 801af5a:	f06f 0305 	mvn.w	r3, #5
 801af5e:	e004      	b.n	801af6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801af60:	683b      	ldr	r3, [r7, #0]
 801af62:	2b00      	cmp	r3, #0
 801af64:	f47f af61 	bne.w	801ae2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801af68:	2300      	movs	r3, #0
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3718      	adds	r7, #24
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}
 801af72:	bf00      	nop
 801af74:	0802658c 	.word	0x0802658c
 801af78:	08026878 	.word	0x08026878
 801af7c:	08026630 	.word	0x08026630
 801af80:	080268a8 	.word	0x080268a8
 801af84:	080268c0 	.word	0x080268c0
 801af88:	080268dc 	.word	0x080268dc
 801af8c:	080268ec 	.word	0x080268ec

0801af90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b088      	sub	sp, #32
 801af94:	af00      	add	r7, sp, #0
 801af96:	60f8      	str	r0, [r7, #12]
 801af98:	60b9      	str	r1, [r7, #8]
 801af9a:	4611      	mov	r1, r2
 801af9c:	461a      	mov	r2, r3
 801af9e:	460b      	mov	r3, r1
 801afa0:	80fb      	strh	r3, [r7, #6]
 801afa2:	4613      	mov	r3, r2
 801afa4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801afa6:	2300      	movs	r3, #0
 801afa8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801afaa:	2300      	movs	r3, #0
 801afac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d108      	bne.n	801afc6 <pbuf_copy_partial+0x36>
 801afb4:	4b2b      	ldr	r3, [pc, #172]	@ (801b064 <pbuf_copy_partial+0xd4>)
 801afb6:	f240 420a 	movw	r2, #1034	@ 0x40a
 801afba:	492b      	ldr	r1, [pc, #172]	@ (801b068 <pbuf_copy_partial+0xd8>)
 801afbc:	482b      	ldr	r0, [pc, #172]	@ (801b06c <pbuf_copy_partial+0xdc>)
 801afbe:	f007 fcbb 	bl	8022938 <iprintf>
 801afc2:	2300      	movs	r3, #0
 801afc4:	e04a      	b.n	801b05c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801afc6:	68bb      	ldr	r3, [r7, #8]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d108      	bne.n	801afde <pbuf_copy_partial+0x4e>
 801afcc:	4b25      	ldr	r3, [pc, #148]	@ (801b064 <pbuf_copy_partial+0xd4>)
 801afce:	f240 420b 	movw	r2, #1035	@ 0x40b
 801afd2:	4927      	ldr	r1, [pc, #156]	@ (801b070 <pbuf_copy_partial+0xe0>)
 801afd4:	4825      	ldr	r0, [pc, #148]	@ (801b06c <pbuf_copy_partial+0xdc>)
 801afd6:	f007 fcaf 	bl	8022938 <iprintf>
 801afda:	2300      	movs	r3, #0
 801afdc:	e03e      	b.n	801b05c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	61fb      	str	r3, [r7, #28]
 801afe2:	e034      	b.n	801b04e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801afe4:	88bb      	ldrh	r3, [r7, #4]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d00a      	beq.n	801b000 <pbuf_copy_partial+0x70>
 801afea:	69fb      	ldr	r3, [r7, #28]
 801afec:	895b      	ldrh	r3, [r3, #10]
 801afee:	88ba      	ldrh	r2, [r7, #4]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d305      	bcc.n	801b000 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801aff4:	69fb      	ldr	r3, [r7, #28]
 801aff6:	895b      	ldrh	r3, [r3, #10]
 801aff8:	88ba      	ldrh	r2, [r7, #4]
 801affa:	1ad3      	subs	r3, r2, r3
 801affc:	80bb      	strh	r3, [r7, #4]
 801affe:	e023      	b.n	801b048 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801b000:	69fb      	ldr	r3, [r7, #28]
 801b002:	895a      	ldrh	r2, [r3, #10]
 801b004:	88bb      	ldrh	r3, [r7, #4]
 801b006:	1ad3      	subs	r3, r2, r3
 801b008:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801b00a:	8b3a      	ldrh	r2, [r7, #24]
 801b00c:	88fb      	ldrh	r3, [r7, #6]
 801b00e:	429a      	cmp	r2, r3
 801b010:	d901      	bls.n	801b016 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801b012:	88fb      	ldrh	r3, [r7, #6]
 801b014:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b016:	8b7b      	ldrh	r3, [r7, #26]
 801b018:	68ba      	ldr	r2, [r7, #8]
 801b01a:	18d0      	adds	r0, r2, r3
 801b01c:	69fb      	ldr	r3, [r7, #28]
 801b01e:	685a      	ldr	r2, [r3, #4]
 801b020:	88bb      	ldrh	r3, [r7, #4]
 801b022:	4413      	add	r3, r2
 801b024:	8b3a      	ldrh	r2, [r7, #24]
 801b026:	4619      	mov	r1, r3
 801b028:	f007 febd 	bl	8022da6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b02c:	8afa      	ldrh	r2, [r7, #22]
 801b02e:	8b3b      	ldrh	r3, [r7, #24]
 801b030:	4413      	add	r3, r2
 801b032:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801b034:	8b7a      	ldrh	r2, [r7, #26]
 801b036:	8b3b      	ldrh	r3, [r7, #24]
 801b038:	4413      	add	r3, r2
 801b03a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801b03c:	88fa      	ldrh	r2, [r7, #6]
 801b03e:	8b3b      	ldrh	r3, [r7, #24]
 801b040:	1ad3      	subs	r3, r2, r3
 801b042:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801b044:	2300      	movs	r3, #0
 801b046:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b048:	69fb      	ldr	r3, [r7, #28]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	61fb      	str	r3, [r7, #28]
 801b04e:	88fb      	ldrh	r3, [r7, #6]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d002      	beq.n	801b05a <pbuf_copy_partial+0xca>
 801b054:	69fb      	ldr	r3, [r7, #28]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d1c4      	bne.n	801afe4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801b05a:	8afb      	ldrh	r3, [r7, #22]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3720      	adds	r7, #32
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	0802658c 	.word	0x0802658c
 801b068:	08026918 	.word	0x08026918
 801b06c:	08026630 	.word	0x08026630
 801b070:	08026938 	.word	0x08026938

0801b074 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b088      	sub	sp, #32
 801b078:	af00      	add	r7, sp, #0
 801b07a:	60f8      	str	r0, [r7, #12]
 801b07c:	60b9      	str	r1, [r7, #8]
 801b07e:	4613      	mov	r3, r2
 801b080:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801b082:	88fb      	ldrh	r3, [r7, #6]
 801b084:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801b086:	2300      	movs	r3, #0
 801b088:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d109      	bne.n	801b0a4 <pbuf_take+0x30>
 801b090:	4b3a      	ldr	r3, [pc, #232]	@ (801b17c <pbuf_take+0x108>)
 801b092:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 801b096:	493a      	ldr	r1, [pc, #232]	@ (801b180 <pbuf_take+0x10c>)
 801b098:	483a      	ldr	r0, [pc, #232]	@ (801b184 <pbuf_take+0x110>)
 801b09a:	f007 fc4d 	bl	8022938 <iprintf>
 801b09e:	f06f 030f 	mvn.w	r3, #15
 801b0a2:	e067      	b.n	801b174 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d109      	bne.n	801b0be <pbuf_take+0x4a>
 801b0aa:	4b34      	ldr	r3, [pc, #208]	@ (801b17c <pbuf_take+0x108>)
 801b0ac:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801b0b0:	4935      	ldr	r1, [pc, #212]	@ (801b188 <pbuf_take+0x114>)
 801b0b2:	4834      	ldr	r0, [pc, #208]	@ (801b184 <pbuf_take+0x110>)
 801b0b4:	f007 fc40 	bl	8022938 <iprintf>
 801b0b8:	f06f 030f 	mvn.w	r3, #15
 801b0bc:	e05a      	b.n	801b174 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	891b      	ldrh	r3, [r3, #8]
 801b0c2:	88fa      	ldrh	r2, [r7, #6]
 801b0c4:	429a      	cmp	r2, r3
 801b0c6:	d909      	bls.n	801b0dc <pbuf_take+0x68>
 801b0c8:	4b2c      	ldr	r3, [pc, #176]	@ (801b17c <pbuf_take+0x108>)
 801b0ca:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801b0ce:	492f      	ldr	r1, [pc, #188]	@ (801b18c <pbuf_take+0x118>)
 801b0d0:	482c      	ldr	r0, [pc, #176]	@ (801b184 <pbuf_take+0x110>)
 801b0d2:	f007 fc31 	bl	8022938 <iprintf>
 801b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b0da:	e04b      	b.n	801b174 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d007      	beq.n	801b0f2 <pbuf_take+0x7e>
 801b0e2:	68bb      	ldr	r3, [r7, #8]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d004      	beq.n	801b0f2 <pbuf_take+0x7e>
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	891b      	ldrh	r3, [r3, #8]
 801b0ec:	88fa      	ldrh	r2, [r7, #6]
 801b0ee:	429a      	cmp	r2, r3
 801b0f0:	d902      	bls.n	801b0f8 <pbuf_take+0x84>
    return ERR_ARG;
 801b0f2:	f06f 030f 	mvn.w	r3, #15
 801b0f6:	e03d      	b.n	801b174 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	61fb      	str	r3, [r7, #28]
 801b0fc:	e028      	b.n	801b150 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b0fe:	69fb      	ldr	r3, [r7, #28]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d106      	bne.n	801b112 <pbuf_take+0x9e>
 801b104:	4b1d      	ldr	r3, [pc, #116]	@ (801b17c <pbuf_take+0x108>)
 801b106:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 801b10a:	4921      	ldr	r1, [pc, #132]	@ (801b190 <pbuf_take+0x11c>)
 801b10c:	481d      	ldr	r0, [pc, #116]	@ (801b184 <pbuf_take+0x110>)
 801b10e:	f007 fc13 	bl	8022938 <iprintf>
    buf_copy_len = total_copy_len;
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801b116:	69fb      	ldr	r3, [r7, #28]
 801b118:	895b      	ldrh	r3, [r3, #10]
 801b11a:	461a      	mov	r2, r3
 801b11c:	69bb      	ldr	r3, [r7, #24]
 801b11e:	4293      	cmp	r3, r2
 801b120:	d902      	bls.n	801b128 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	895b      	ldrh	r3, [r3, #10]
 801b126:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b128:	69fb      	ldr	r3, [r7, #28]
 801b12a:	6858      	ldr	r0, [r3, #4]
 801b12c:	68ba      	ldr	r2, [r7, #8]
 801b12e:	693b      	ldr	r3, [r7, #16]
 801b130:	4413      	add	r3, r2
 801b132:	69ba      	ldr	r2, [r7, #24]
 801b134:	4619      	mov	r1, r3
 801b136:	f007 fe36 	bl	8022da6 <memcpy>
    total_copy_len -= buf_copy_len;
 801b13a:	697a      	ldr	r2, [r7, #20]
 801b13c:	69bb      	ldr	r3, [r7, #24]
 801b13e:	1ad3      	subs	r3, r2, r3
 801b140:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801b142:	693a      	ldr	r2, [r7, #16]
 801b144:	69bb      	ldr	r3, [r7, #24]
 801b146:	4413      	add	r3, r2
 801b148:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b14a:	69fb      	ldr	r3, [r7, #28]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	61fb      	str	r3, [r7, #28]
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d1d3      	bne.n	801b0fe <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801b156:	697b      	ldr	r3, [r7, #20]
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d103      	bne.n	801b164 <pbuf_take+0xf0>
 801b15c:	88fb      	ldrh	r3, [r7, #6]
 801b15e:	693a      	ldr	r2, [r7, #16]
 801b160:	429a      	cmp	r2, r3
 801b162:	d006      	beq.n	801b172 <pbuf_take+0xfe>
 801b164:	4b05      	ldr	r3, [pc, #20]	@ (801b17c <pbuf_take+0x108>)
 801b166:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 801b16a:	490a      	ldr	r1, [pc, #40]	@ (801b194 <pbuf_take+0x120>)
 801b16c:	4805      	ldr	r0, [pc, #20]	@ (801b184 <pbuf_take+0x110>)
 801b16e:	f007 fbe3 	bl	8022938 <iprintf>
  return ERR_OK;
 801b172:	2300      	movs	r3, #0
}
 801b174:	4618      	mov	r0, r3
 801b176:	3720      	adds	r7, #32
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}
 801b17c:	0802658c 	.word	0x0802658c
 801b180:	080269a8 	.word	0x080269a8
 801b184:	08026630 	.word	0x08026630
 801b188:	080269c0 	.word	0x080269c0
 801b18c:	080269dc 	.word	0x080269dc
 801b190:	080269fc 	.word	0x080269fc
 801b194:	08026a14 	.word	0x08026a14

0801b198 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b084      	sub	sp, #16
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	4603      	mov	r3, r0
 801b1a0:	603a      	str	r2, [r7, #0]
 801b1a2:	71fb      	strb	r3, [r7, #7]
 801b1a4:	460b      	mov	r3, r1
 801b1a6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	8919      	ldrh	r1, [r3, #8]
 801b1ac:	88ba      	ldrh	r2, [r7, #4]
 801b1ae:	79fb      	ldrb	r3, [r7, #7]
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7ff f9d1 	bl	801a558 <pbuf_alloc>
 801b1b6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d101      	bne.n	801b1c2 <pbuf_clone+0x2a>
    return NULL;
 801b1be:	2300      	movs	r3, #0
 801b1c0:	e011      	b.n	801b1e6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801b1c2:	6839      	ldr	r1, [r7, #0]
 801b1c4:	68f8      	ldr	r0, [r7, #12]
 801b1c6:	f7ff fe11 	bl	801adec <pbuf_copy>
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b1ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d006      	beq.n	801b1e4 <pbuf_clone+0x4c>
 801b1d6:	4b06      	ldr	r3, [pc, #24]	@ (801b1f0 <pbuf_clone+0x58>)
 801b1d8:	f240 5224 	movw	r2, #1316	@ 0x524
 801b1dc:	4905      	ldr	r1, [pc, #20]	@ (801b1f4 <pbuf_clone+0x5c>)
 801b1de:	4806      	ldr	r0, [pc, #24]	@ (801b1f8 <pbuf_clone+0x60>)
 801b1e0:	f007 fbaa 	bl	8022938 <iprintf>
  return q;
 801b1e4:	68fb      	ldr	r3, [r7, #12]
}
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	3710      	adds	r7, #16
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}
 801b1ee:	bf00      	nop
 801b1f0:	0802658c 	.word	0x0802658c
 801b1f4:	08026a44 	.word	0x08026a44
 801b1f8:	08026630 	.word	0x08026630

0801b1fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b200:	f007 fa9a 	bl	8022738 <rand>
 801b204:	4603      	mov	r3, r0
 801b206:	b29b      	uxth	r3, r3
 801b208:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b20c:	b29b      	uxth	r3, r3
 801b20e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b212:	b29a      	uxth	r2, r3
 801b214:	4b01      	ldr	r3, [pc, #4]	@ (801b21c <tcp_init+0x20>)
 801b216:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b218:	bf00      	nop
 801b21a:	bd80      	pop	{r7, pc}
 801b21c:	20000038 	.word	0x20000038

0801b220 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b082      	sub	sp, #8
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	7d1b      	ldrb	r3, [r3, #20]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	d105      	bne.n	801b23c <tcp_free+0x1c>
 801b230:	4b06      	ldr	r3, [pc, #24]	@ (801b24c <tcp_free+0x2c>)
 801b232:	22d4      	movs	r2, #212	@ 0xd4
 801b234:	4906      	ldr	r1, [pc, #24]	@ (801b250 <tcp_free+0x30>)
 801b236:	4807      	ldr	r0, [pc, #28]	@ (801b254 <tcp_free+0x34>)
 801b238:	f007 fb7e 	bl	8022938 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801b23c:	6879      	ldr	r1, [r7, #4]
 801b23e:	2001      	movs	r0, #1
 801b240:	f7fe fda8 	bl	8019d94 <memp_free>
}
 801b244:	bf00      	nop
 801b246:	3708      	adds	r7, #8
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}
 801b24c:	08026ad0 	.word	0x08026ad0
 801b250:	08026b44 	.word	0x08026b44
 801b254:	08026b58 	.word	0x08026b58

0801b258 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b082      	sub	sp, #8
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	7d1b      	ldrb	r3, [r3, #20]
 801b264:	2b01      	cmp	r3, #1
 801b266:	d105      	bne.n	801b274 <tcp_free_listen+0x1c>
 801b268:	4b06      	ldr	r3, [pc, #24]	@ (801b284 <tcp_free_listen+0x2c>)
 801b26a:	22df      	movs	r2, #223	@ 0xdf
 801b26c:	4906      	ldr	r1, [pc, #24]	@ (801b288 <tcp_free_listen+0x30>)
 801b26e:	4807      	ldr	r0, [pc, #28]	@ (801b28c <tcp_free_listen+0x34>)
 801b270:	f007 fb62 	bl	8022938 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801b274:	6879      	ldr	r1, [r7, #4]
 801b276:	2002      	movs	r0, #2
 801b278:	f7fe fd8c 	bl	8019d94 <memp_free>
}
 801b27c:	bf00      	nop
 801b27e:	3708      	adds	r7, #8
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}
 801b284:	08026ad0 	.word	0x08026ad0
 801b288:	08026b80 	.word	0x08026b80
 801b28c:	08026b58 	.word	0x08026b58

0801b290 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801b294:	f001 f8aa 	bl	801c3ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801b298:	4b07      	ldr	r3, [pc, #28]	@ (801b2b8 <tcp_tmr+0x28>)
 801b29a:	781b      	ldrb	r3, [r3, #0]
 801b29c:	3301      	adds	r3, #1
 801b29e:	b2da      	uxtb	r2, r3
 801b2a0:	4b05      	ldr	r3, [pc, #20]	@ (801b2b8 <tcp_tmr+0x28>)
 801b2a2:	701a      	strb	r2, [r3, #0]
 801b2a4:	4b04      	ldr	r3, [pc, #16]	@ (801b2b8 <tcp_tmr+0x28>)
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	f003 0301 	and.w	r3, r3, #1
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d001      	beq.n	801b2b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801b2b0:	f000 fd5a 	bl	801bd68 <tcp_slowtmr>
  }
}
 801b2b4:	bf00      	nop
 801b2b6:	bd80      	pop	{r7, pc}
 801b2b8:	2001002d 	.word	0x2001002d

0801b2bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
 801b2c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d105      	bne.n	801b2d8 <tcp_remove_listener+0x1c>
 801b2cc:	4b0d      	ldr	r3, [pc, #52]	@ (801b304 <tcp_remove_listener+0x48>)
 801b2ce:	22ff      	movs	r2, #255	@ 0xff
 801b2d0:	490d      	ldr	r1, [pc, #52]	@ (801b308 <tcp_remove_listener+0x4c>)
 801b2d2:	480e      	ldr	r0, [pc, #56]	@ (801b30c <tcp_remove_listener+0x50>)
 801b2d4:	f007 fb30 	bl	8022938 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	60fb      	str	r3, [r7, #12]
 801b2dc:	e00a      	b.n	801b2f4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b2e2:	683a      	ldr	r2, [r7, #0]
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	d102      	bne.n	801b2ee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	68db      	ldr	r3, [r3, #12]
 801b2f2:	60fb      	str	r3, [r7, #12]
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d1f1      	bne.n	801b2de <tcp_remove_listener+0x22>
    }
  }
}
 801b2fa:	bf00      	nop
 801b2fc:	bf00      	nop
 801b2fe:	3710      	adds	r7, #16
 801b300:	46bd      	mov	sp, r7
 801b302:	bd80      	pop	{r7, pc}
 801b304:	08026ad0 	.word	0x08026ad0
 801b308:	08026b9c 	.word	0x08026b9c
 801b30c:	08026b58 	.word	0x08026b58

0801b310 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801b310:	b580      	push	{r7, lr}
 801b312:	b084      	sub	sp, #16
 801b314:	af00      	add	r7, sp, #0
 801b316:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d106      	bne.n	801b32c <tcp_listen_closed+0x1c>
 801b31e:	4b14      	ldr	r3, [pc, #80]	@ (801b370 <tcp_listen_closed+0x60>)
 801b320:	f240 1211 	movw	r2, #273	@ 0x111
 801b324:	4913      	ldr	r1, [pc, #76]	@ (801b374 <tcp_listen_closed+0x64>)
 801b326:	4814      	ldr	r0, [pc, #80]	@ (801b378 <tcp_listen_closed+0x68>)
 801b328:	f007 fb06 	bl	8022938 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	7d1b      	ldrb	r3, [r3, #20]
 801b330:	2b01      	cmp	r3, #1
 801b332:	d006      	beq.n	801b342 <tcp_listen_closed+0x32>
 801b334:	4b0e      	ldr	r3, [pc, #56]	@ (801b370 <tcp_listen_closed+0x60>)
 801b336:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801b33a:	4910      	ldr	r1, [pc, #64]	@ (801b37c <tcp_listen_closed+0x6c>)
 801b33c:	480e      	ldr	r0, [pc, #56]	@ (801b378 <tcp_listen_closed+0x68>)
 801b33e:	f007 fafb 	bl	8022938 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b342:	2301      	movs	r3, #1
 801b344:	60fb      	str	r3, [r7, #12]
 801b346:	e00b      	b.n	801b360 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b348:	4a0d      	ldr	r2, [pc, #52]	@ (801b380 <tcp_listen_closed+0x70>)
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	6879      	ldr	r1, [r7, #4]
 801b354:	4618      	mov	r0, r3
 801b356:	f7ff ffb1 	bl	801b2bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	3301      	adds	r3, #1
 801b35e:	60fb      	str	r3, [r7, #12]
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	2b03      	cmp	r3, #3
 801b364:	d9f0      	bls.n	801b348 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801b366:	bf00      	nop
 801b368:	bf00      	nop
 801b36a:	3710      	adds	r7, #16
 801b36c:	46bd      	mov	sp, r7
 801b36e:	bd80      	pop	{r7, pc}
 801b370:	08026ad0 	.word	0x08026ad0
 801b374:	08026bc4 	.word	0x08026bc4
 801b378:	08026b58 	.word	0x08026b58
 801b37c:	08026bd0 	.word	0x08026bd0
 801b380:	08028d18 	.word	0x08028d18

0801b384 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801b384:	b5b0      	push	{r4, r5, r7, lr}
 801b386:	b088      	sub	sp, #32
 801b388:	af04      	add	r7, sp, #16
 801b38a:	6078      	str	r0, [r7, #4]
 801b38c:	460b      	mov	r3, r1
 801b38e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	2b00      	cmp	r3, #0
 801b394:	d106      	bne.n	801b3a4 <tcp_close_shutdown+0x20>
 801b396:	4b63      	ldr	r3, [pc, #396]	@ (801b524 <tcp_close_shutdown+0x1a0>)
 801b398:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801b39c:	4962      	ldr	r1, [pc, #392]	@ (801b528 <tcp_close_shutdown+0x1a4>)
 801b39e:	4863      	ldr	r0, [pc, #396]	@ (801b52c <tcp_close_shutdown+0x1a8>)
 801b3a0:	f007 faca 	bl	8022938 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801b3a4:	78fb      	ldrb	r3, [r7, #3]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d067      	beq.n	801b47a <tcp_close_shutdown+0xf6>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	7d1b      	ldrb	r3, [r3, #20]
 801b3ae:	2b04      	cmp	r3, #4
 801b3b0:	d003      	beq.n	801b3ba <tcp_close_shutdown+0x36>
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	7d1b      	ldrb	r3, [r3, #20]
 801b3b6:	2b07      	cmp	r3, #7
 801b3b8:	d15f      	bne.n	801b47a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d105      	bne.n	801b3ce <tcp_close_shutdown+0x4a>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b3c6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d055      	beq.n	801b47a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	8b5b      	ldrh	r3, [r3, #26]
 801b3d2:	f003 0310 	and.w	r3, r3, #16
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d106      	bne.n	801b3e8 <tcp_close_shutdown+0x64>
 801b3da:	4b52      	ldr	r3, [pc, #328]	@ (801b524 <tcp_close_shutdown+0x1a0>)
 801b3dc:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801b3e0:	4953      	ldr	r1, [pc, #332]	@ (801b530 <tcp_close_shutdown+0x1ac>)
 801b3e2:	4852      	ldr	r0, [pc, #328]	@ (801b52c <tcp_close_shutdown+0x1a8>)
 801b3e4:	f007 faa8 	bl	8022938 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801b3f0:	687d      	ldr	r5, [r7, #4]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	3304      	adds	r3, #4
 801b3f6:	687a      	ldr	r2, [r7, #4]
 801b3f8:	8ad2      	ldrh	r2, [r2, #22]
 801b3fa:	6879      	ldr	r1, [r7, #4]
 801b3fc:	8b09      	ldrh	r1, [r1, #24]
 801b3fe:	9102      	str	r1, [sp, #8]
 801b400:	9201      	str	r2, [sp, #4]
 801b402:	9300      	str	r3, [sp, #0]
 801b404:	462b      	mov	r3, r5
 801b406:	4622      	mov	r2, r4
 801b408:	4601      	mov	r1, r0
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f005 fdbc 	bl	8020f88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801b410:	6878      	ldr	r0, [r7, #4]
 801b412:	f001 fb9d 	bl	801cb50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801b416:	4b47      	ldr	r3, [pc, #284]	@ (801b534 <tcp_close_shutdown+0x1b0>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	687a      	ldr	r2, [r7, #4]
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d105      	bne.n	801b42c <tcp_close_shutdown+0xa8>
 801b420:	4b44      	ldr	r3, [pc, #272]	@ (801b534 <tcp_close_shutdown+0x1b0>)
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	68db      	ldr	r3, [r3, #12]
 801b426:	4a43      	ldr	r2, [pc, #268]	@ (801b534 <tcp_close_shutdown+0x1b0>)
 801b428:	6013      	str	r3, [r2, #0]
 801b42a:	e013      	b.n	801b454 <tcp_close_shutdown+0xd0>
 801b42c:	4b41      	ldr	r3, [pc, #260]	@ (801b534 <tcp_close_shutdown+0x1b0>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	60fb      	str	r3, [r7, #12]
 801b432:	e00c      	b.n	801b44e <tcp_close_shutdown+0xca>
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	68db      	ldr	r3, [r3, #12]
 801b438:	687a      	ldr	r2, [r7, #4]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d104      	bne.n	801b448 <tcp_close_shutdown+0xc4>
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	68da      	ldr	r2, [r3, #12]
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	60da      	str	r2, [r3, #12]
 801b446:	e005      	b.n	801b454 <tcp_close_shutdown+0xd0>
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	60fb      	str	r3, [r7, #12]
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d1ef      	bne.n	801b434 <tcp_close_shutdown+0xb0>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2200      	movs	r2, #0
 801b458:	60da      	str	r2, [r3, #12]
 801b45a:	4b37      	ldr	r3, [pc, #220]	@ (801b538 <tcp_close_shutdown+0x1b4>)
 801b45c:	2201      	movs	r2, #1
 801b45e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801b460:	4b36      	ldr	r3, [pc, #216]	@ (801b53c <tcp_close_shutdown+0x1b8>)
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	687a      	ldr	r2, [r7, #4]
 801b466:	429a      	cmp	r2, r3
 801b468:	d102      	bne.n	801b470 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801b46a:	f004 f833 	bl	801f4d4 <tcp_trigger_input_pcb_close>
 801b46e:	e002      	b.n	801b476 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 801b470:	6878      	ldr	r0, [r7, #4]
 801b472:	f7ff fed5 	bl	801b220 <tcp_free>
      }
      return ERR_OK;
 801b476:	2300      	movs	r3, #0
 801b478:	e050      	b.n	801b51c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	7d1b      	ldrb	r3, [r3, #20]
 801b47e:	2b02      	cmp	r3, #2
 801b480:	d03b      	beq.n	801b4fa <tcp_close_shutdown+0x176>
 801b482:	2b02      	cmp	r3, #2
 801b484:	dc44      	bgt.n	801b510 <tcp_close_shutdown+0x18c>
 801b486:	2b00      	cmp	r3, #0
 801b488:	d002      	beq.n	801b490 <tcp_close_shutdown+0x10c>
 801b48a:	2b01      	cmp	r3, #1
 801b48c:	d02a      	beq.n	801b4e4 <tcp_close_shutdown+0x160>
 801b48e:	e03f      	b.n	801b510 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	8adb      	ldrh	r3, [r3, #22]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d021      	beq.n	801b4dc <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b498:	4b29      	ldr	r3, [pc, #164]	@ (801b540 <tcp_close_shutdown+0x1bc>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	687a      	ldr	r2, [r7, #4]
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	d105      	bne.n	801b4ae <tcp_close_shutdown+0x12a>
 801b4a2:	4b27      	ldr	r3, [pc, #156]	@ (801b540 <tcp_close_shutdown+0x1bc>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	68db      	ldr	r3, [r3, #12]
 801b4a8:	4a25      	ldr	r2, [pc, #148]	@ (801b540 <tcp_close_shutdown+0x1bc>)
 801b4aa:	6013      	str	r3, [r2, #0]
 801b4ac:	e013      	b.n	801b4d6 <tcp_close_shutdown+0x152>
 801b4ae:	4b24      	ldr	r3, [pc, #144]	@ (801b540 <tcp_close_shutdown+0x1bc>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	60bb      	str	r3, [r7, #8]
 801b4b4:	e00c      	b.n	801b4d0 <tcp_close_shutdown+0x14c>
 801b4b6:	68bb      	ldr	r3, [r7, #8]
 801b4b8:	68db      	ldr	r3, [r3, #12]
 801b4ba:	687a      	ldr	r2, [r7, #4]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d104      	bne.n	801b4ca <tcp_close_shutdown+0x146>
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	68da      	ldr	r2, [r3, #12]
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	60da      	str	r2, [r3, #12]
 801b4c8:	e005      	b.n	801b4d6 <tcp_close_shutdown+0x152>
 801b4ca:	68bb      	ldr	r3, [r7, #8]
 801b4cc:	68db      	ldr	r3, [r3, #12]
 801b4ce:	60bb      	str	r3, [r7, #8]
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d1ef      	bne.n	801b4b6 <tcp_close_shutdown+0x132>
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f7ff fe9f 	bl	801b220 <tcp_free>
      break;
 801b4e2:	e01a      	b.n	801b51a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801b4e4:	6878      	ldr	r0, [r7, #4]
 801b4e6:	f7ff ff13 	bl	801b310 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801b4ea:	6879      	ldr	r1, [r7, #4]
 801b4ec:	4815      	ldr	r0, [pc, #84]	@ (801b544 <tcp_close_shutdown+0x1c0>)
 801b4ee:	f001 fb7f 	bl	801cbf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801b4f2:	6878      	ldr	r0, [r7, #4]
 801b4f4:	f7ff feb0 	bl	801b258 <tcp_free_listen>
      break;
 801b4f8:	e00f      	b.n	801b51a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b4fa:	6879      	ldr	r1, [r7, #4]
 801b4fc:	480d      	ldr	r0, [pc, #52]	@ (801b534 <tcp_close_shutdown+0x1b0>)
 801b4fe:	f001 fb77 	bl	801cbf0 <tcp_pcb_remove>
 801b502:	4b0d      	ldr	r3, [pc, #52]	@ (801b538 <tcp_close_shutdown+0x1b4>)
 801b504:	2201      	movs	r2, #1
 801b506:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7ff fe89 	bl	801b220 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801b50e:	e004      	b.n	801b51a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f000 f819 	bl	801b548 <tcp_close_shutdown_fin>
 801b516:	4603      	mov	r3, r0
 801b518:	e000      	b.n	801b51c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801b51a:	2300      	movs	r3, #0
}
 801b51c:	4618      	mov	r0, r3
 801b51e:	3710      	adds	r7, #16
 801b520:	46bd      	mov	sp, r7
 801b522:	bdb0      	pop	{r4, r5, r7, pc}
 801b524:	08026ad0 	.word	0x08026ad0
 801b528:	08026be8 	.word	0x08026be8
 801b52c:	08026b58 	.word	0x08026b58
 801b530:	08026c08 	.word	0x08026c08
 801b534:	20010024 	.word	0x20010024
 801b538:	2001002c 	.word	0x2001002c
 801b53c:	20010064 	.word	0x20010064
 801b540:	2001001c 	.word	0x2001001c
 801b544:	20010020 	.word	0x20010020

0801b548 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b084      	sub	sp, #16
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d106      	bne.n	801b564 <tcp_close_shutdown_fin+0x1c>
 801b556:	4b2e      	ldr	r3, [pc, #184]	@ (801b610 <tcp_close_shutdown_fin+0xc8>)
 801b558:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801b55c:	492d      	ldr	r1, [pc, #180]	@ (801b614 <tcp_close_shutdown_fin+0xcc>)
 801b55e:	482e      	ldr	r0, [pc, #184]	@ (801b618 <tcp_close_shutdown_fin+0xd0>)
 801b560:	f007 f9ea 	bl	8022938 <iprintf>

  switch (pcb->state) {
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	7d1b      	ldrb	r3, [r3, #20]
 801b568:	2b07      	cmp	r3, #7
 801b56a:	d020      	beq.n	801b5ae <tcp_close_shutdown_fin+0x66>
 801b56c:	2b07      	cmp	r3, #7
 801b56e:	dc2b      	bgt.n	801b5c8 <tcp_close_shutdown_fin+0x80>
 801b570:	2b03      	cmp	r3, #3
 801b572:	d002      	beq.n	801b57a <tcp_close_shutdown_fin+0x32>
 801b574:	2b04      	cmp	r3, #4
 801b576:	d00d      	beq.n	801b594 <tcp_close_shutdown_fin+0x4c>
 801b578:	e026      	b.n	801b5c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801b57a:	6878      	ldr	r0, [r7, #4]
 801b57c:	f004 fe12 	bl	80201a4 <tcp_send_fin>
 801b580:	4603      	mov	r3, r0
 801b582:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d11f      	bne.n	801b5cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	2205      	movs	r2, #5
 801b590:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b592:	e01b      	b.n	801b5cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	f004 fe05 	bl	80201a4 <tcp_send_fin>
 801b59a:	4603      	mov	r3, r0
 801b59c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d114      	bne.n	801b5d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	2205      	movs	r2, #5
 801b5aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b5ac:	e010      	b.n	801b5d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801b5ae:	6878      	ldr	r0, [r7, #4]
 801b5b0:	f004 fdf8 	bl	80201a4 <tcp_send_fin>
 801b5b4:	4603      	mov	r3, r0
 801b5b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801b5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d109      	bne.n	801b5d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	2209      	movs	r2, #9
 801b5c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b5c6:	e005      	b.n	801b5d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	e01c      	b.n	801b606 <tcp_close_shutdown_fin+0xbe>
      break;
 801b5cc:	bf00      	nop
 801b5ce:	e002      	b.n	801b5d6 <tcp_close_shutdown_fin+0x8e>
      break;
 801b5d0:	bf00      	nop
 801b5d2:	e000      	b.n	801b5d6 <tcp_close_shutdown_fin+0x8e>
      break;
 801b5d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 801b5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d103      	bne.n	801b5e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	f004 ff1e 	bl	8020420 <tcp_output>
 801b5e4:	e00d      	b.n	801b602 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801b5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5ee:	d108      	bne.n	801b602 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	8b5b      	ldrh	r3, [r3, #26]
 801b5f4:	f043 0308 	orr.w	r3, r3, #8
 801b5f8:	b29a      	uxth	r2, r3
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801b5fe:	2300      	movs	r3, #0
 801b600:	e001      	b.n	801b606 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801b602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b606:	4618      	mov	r0, r3
 801b608:	3710      	adds	r7, #16
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bd80      	pop	{r7, pc}
 801b60e:	bf00      	nop
 801b610:	08026ad0 	.word	0x08026ad0
 801b614:	08026bc4 	.word	0x08026bc4
 801b618:	08026b58 	.word	0x08026b58

0801b61c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b082      	sub	sp, #8
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d109      	bne.n	801b63e <tcp_close+0x22>
 801b62a:	4b0f      	ldr	r3, [pc, #60]	@ (801b668 <tcp_close+0x4c>)
 801b62c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801b630:	490e      	ldr	r1, [pc, #56]	@ (801b66c <tcp_close+0x50>)
 801b632:	480f      	ldr	r0, [pc, #60]	@ (801b670 <tcp_close+0x54>)
 801b634:	f007 f980 	bl	8022938 <iprintf>
 801b638:	f06f 030f 	mvn.w	r3, #15
 801b63c:	e00f      	b.n	801b65e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	7d1b      	ldrb	r3, [r3, #20]
 801b642:	2b01      	cmp	r3, #1
 801b644:	d006      	beq.n	801b654 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	8b5b      	ldrh	r3, [r3, #26]
 801b64a:	f043 0310 	orr.w	r3, r3, #16
 801b64e:	b29a      	uxth	r2, r3
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801b654:	2101      	movs	r1, #1
 801b656:	6878      	ldr	r0, [r7, #4]
 801b658:	f7ff fe94 	bl	801b384 <tcp_close_shutdown>
 801b65c:	4603      	mov	r3, r0
}
 801b65e:	4618      	mov	r0, r3
 801b660:	3708      	adds	r7, #8
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}
 801b666:	bf00      	nop
 801b668:	08026ad0 	.word	0x08026ad0
 801b66c:	08026c24 	.word	0x08026c24
 801b670:	08026b58 	.word	0x08026b58

0801b674 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b084      	sub	sp, #16
 801b678:	af00      	add	r7, sp, #0
 801b67a:	60f8      	str	r0, [r7, #12]
 801b67c:	60b9      	str	r1, [r7, #8]
 801b67e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d109      	bne.n	801b69a <tcp_shutdown+0x26>
 801b686:	4b26      	ldr	r3, [pc, #152]	@ (801b720 <tcp_shutdown+0xac>)
 801b688:	f240 2207 	movw	r2, #519	@ 0x207
 801b68c:	4925      	ldr	r1, [pc, #148]	@ (801b724 <tcp_shutdown+0xb0>)
 801b68e:	4826      	ldr	r0, [pc, #152]	@ (801b728 <tcp_shutdown+0xb4>)
 801b690:	f007 f952 	bl	8022938 <iprintf>
 801b694:	f06f 030f 	mvn.w	r3, #15
 801b698:	e03d      	b.n	801b716 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	7d1b      	ldrb	r3, [r3, #20]
 801b69e:	2b01      	cmp	r3, #1
 801b6a0:	d102      	bne.n	801b6a8 <tcp_shutdown+0x34>
    return ERR_CONN;
 801b6a2:	f06f 030a 	mvn.w	r3, #10
 801b6a6:	e036      	b.n	801b716 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801b6a8:	68bb      	ldr	r3, [r7, #8]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d01b      	beq.n	801b6e6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	8b5b      	ldrh	r3, [r3, #26]
 801b6b2:	f043 0310 	orr.w	r3, r3, #16
 801b6b6:	b29a      	uxth	r2, r3
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d005      	beq.n	801b6ce <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	68f8      	ldr	r0, [r7, #12]
 801b6c6:	f7ff fe5d 	bl	801b384 <tcp_close_shutdown>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	e023      	b.n	801b716 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d007      	beq.n	801b6e6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f7ff fa52 	bl	801ab84 <pbuf_free>
      pcb->refused_data = NULL;
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d013      	beq.n	801b714 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	7d1b      	ldrb	r3, [r3, #20]
 801b6f0:	2b04      	cmp	r3, #4
 801b6f2:	dc02      	bgt.n	801b6fa <tcp_shutdown+0x86>
 801b6f4:	2b03      	cmp	r3, #3
 801b6f6:	da02      	bge.n	801b6fe <tcp_shutdown+0x8a>
 801b6f8:	e009      	b.n	801b70e <tcp_shutdown+0x9a>
 801b6fa:	2b07      	cmp	r3, #7
 801b6fc:	d107      	bne.n	801b70e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	b2db      	uxtb	r3, r3
 801b702:	4619      	mov	r1, r3
 801b704:	68f8      	ldr	r0, [r7, #12]
 801b706:	f7ff fe3d 	bl	801b384 <tcp_close_shutdown>
 801b70a:	4603      	mov	r3, r0
 801b70c:	e003      	b.n	801b716 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801b70e:	f06f 030a 	mvn.w	r3, #10
 801b712:	e000      	b.n	801b716 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801b714:	2300      	movs	r3, #0
}
 801b716:	4618      	mov	r0, r3
 801b718:	3710      	adds	r7, #16
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bd80      	pop	{r7, pc}
 801b71e:	bf00      	nop
 801b720:	08026ad0 	.word	0x08026ad0
 801b724:	08026c3c 	.word	0x08026c3c
 801b728:	08026b58 	.word	0x08026b58

0801b72c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b08e      	sub	sp, #56	@ 0x38
 801b730:	af04      	add	r7, sp, #16
 801b732:	6078      	str	r0, [r7, #4]
 801b734:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d107      	bne.n	801b74c <tcp_abandon+0x20>
 801b73c:	4b52      	ldr	r3, [pc, #328]	@ (801b888 <tcp_abandon+0x15c>)
 801b73e:	f240 223d 	movw	r2, #573	@ 0x23d
 801b742:	4952      	ldr	r1, [pc, #328]	@ (801b88c <tcp_abandon+0x160>)
 801b744:	4852      	ldr	r0, [pc, #328]	@ (801b890 <tcp_abandon+0x164>)
 801b746:	f007 f8f7 	bl	8022938 <iprintf>
 801b74a:	e099      	b.n	801b880 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	7d1b      	ldrb	r3, [r3, #20]
 801b750:	2b01      	cmp	r3, #1
 801b752:	d106      	bne.n	801b762 <tcp_abandon+0x36>
 801b754:	4b4c      	ldr	r3, [pc, #304]	@ (801b888 <tcp_abandon+0x15c>)
 801b756:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801b75a:	494e      	ldr	r1, [pc, #312]	@ (801b894 <tcp_abandon+0x168>)
 801b75c:	484c      	ldr	r0, [pc, #304]	@ (801b890 <tcp_abandon+0x164>)
 801b75e:	f007 f8eb 	bl	8022938 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	7d1b      	ldrb	r3, [r3, #20]
 801b766:	2b0a      	cmp	r3, #10
 801b768:	d107      	bne.n	801b77a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b76a:	6879      	ldr	r1, [r7, #4]
 801b76c:	484a      	ldr	r0, [pc, #296]	@ (801b898 <tcp_abandon+0x16c>)
 801b76e:	f001 fa3f 	bl	801cbf0 <tcp_pcb_remove>
    tcp_free(pcb);
 801b772:	6878      	ldr	r0, [r7, #4]
 801b774:	f7ff fd54 	bl	801b220 <tcp_free>
 801b778:	e082      	b.n	801b880 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801b77a:	2300      	movs	r3, #0
 801b77c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801b77e:	2300      	movs	r3, #0
 801b780:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b786:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b78c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b794:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	691b      	ldr	r3, [r3, #16]
 801b79a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	7d1b      	ldrb	r3, [r3, #20]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d126      	bne.n	801b7f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	8adb      	ldrh	r3, [r3, #22]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d02e      	beq.n	801b80a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b7ac:	4b3b      	ldr	r3, [pc, #236]	@ (801b89c <tcp_abandon+0x170>)
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	687a      	ldr	r2, [r7, #4]
 801b7b2:	429a      	cmp	r2, r3
 801b7b4:	d105      	bne.n	801b7c2 <tcp_abandon+0x96>
 801b7b6:	4b39      	ldr	r3, [pc, #228]	@ (801b89c <tcp_abandon+0x170>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	68db      	ldr	r3, [r3, #12]
 801b7bc:	4a37      	ldr	r2, [pc, #220]	@ (801b89c <tcp_abandon+0x170>)
 801b7be:	6013      	str	r3, [r2, #0]
 801b7c0:	e013      	b.n	801b7ea <tcp_abandon+0xbe>
 801b7c2:	4b36      	ldr	r3, [pc, #216]	@ (801b89c <tcp_abandon+0x170>)
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	61fb      	str	r3, [r7, #28]
 801b7c8:	e00c      	b.n	801b7e4 <tcp_abandon+0xb8>
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	68db      	ldr	r3, [r3, #12]
 801b7ce:	687a      	ldr	r2, [r7, #4]
 801b7d0:	429a      	cmp	r2, r3
 801b7d2:	d104      	bne.n	801b7de <tcp_abandon+0xb2>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	68da      	ldr	r2, [r3, #12]
 801b7d8:	69fb      	ldr	r3, [r7, #28]
 801b7da:	60da      	str	r2, [r3, #12]
 801b7dc:	e005      	b.n	801b7ea <tcp_abandon+0xbe>
 801b7de:	69fb      	ldr	r3, [r7, #28]
 801b7e0:	68db      	ldr	r3, [r3, #12]
 801b7e2:	61fb      	str	r3, [r7, #28]
 801b7e4:	69fb      	ldr	r3, [r7, #28]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d1ef      	bne.n	801b7ca <tcp_abandon+0x9e>
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	60da      	str	r2, [r3, #12]
 801b7f0:	e00b      	b.n	801b80a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801b7f2:	683b      	ldr	r3, [r7, #0]
 801b7f4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	8adb      	ldrh	r3, [r3, #22]
 801b7fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b7fc:	6879      	ldr	r1, [r7, #4]
 801b7fe:	4828      	ldr	r0, [pc, #160]	@ (801b8a0 <tcp_abandon+0x174>)
 801b800:	f001 f9f6 	bl	801cbf0 <tcp_pcb_remove>
 801b804:	4b27      	ldr	r3, [pc, #156]	@ (801b8a4 <tcp_abandon+0x178>)
 801b806:	2201      	movs	r2, #1
 801b808:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d004      	beq.n	801b81c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b816:	4618      	mov	r0, r3
 801b818:	f000 feca 	bl	801c5b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b820:	2b00      	cmp	r3, #0
 801b822:	d004      	beq.n	801b82e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b828:	4618      	mov	r0, r3
 801b82a:	f000 fec1 	bl	801c5b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b832:	2b00      	cmp	r3, #0
 801b834:	d004      	beq.n	801b840 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b83a:	4618      	mov	r0, r3
 801b83c:	f000 feb8 	bl	801c5b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b842:	2b00      	cmp	r3, #0
 801b844:	d00e      	beq.n	801b864 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b846:	6879      	ldr	r1, [r7, #4]
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	3304      	adds	r3, #4
 801b84c:	687a      	ldr	r2, [r7, #4]
 801b84e:	8b12      	ldrh	r2, [r2, #24]
 801b850:	9202      	str	r2, [sp, #8]
 801b852:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b854:	9201      	str	r2, [sp, #4]
 801b856:	9300      	str	r3, [sp, #0]
 801b858:	460b      	mov	r3, r1
 801b85a:	697a      	ldr	r2, [r7, #20]
 801b85c:	69b9      	ldr	r1, [r7, #24]
 801b85e:	6878      	ldr	r0, [r7, #4]
 801b860:	f005 fb92 	bl	8020f88 <tcp_rst>
    }
    last_state = pcb->state;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	7d1b      	ldrb	r3, [r3, #20]
 801b868:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f7ff fcd8 	bl	801b220 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b870:	693b      	ldr	r3, [r7, #16]
 801b872:	2b00      	cmp	r3, #0
 801b874:	d004      	beq.n	801b880 <tcp_abandon+0x154>
 801b876:	693b      	ldr	r3, [r7, #16]
 801b878:	f06f 010c 	mvn.w	r1, #12
 801b87c:	68f8      	ldr	r0, [r7, #12]
 801b87e:	4798      	blx	r3
  }
}
 801b880:	3728      	adds	r7, #40	@ 0x28
 801b882:	46bd      	mov	sp, r7
 801b884:	bd80      	pop	{r7, pc}
 801b886:	bf00      	nop
 801b888:	08026ad0 	.word	0x08026ad0
 801b88c:	08026c58 	.word	0x08026c58
 801b890:	08026b58 	.word	0x08026b58
 801b894:	08026c74 	.word	0x08026c74
 801b898:	20010028 	.word	0x20010028
 801b89c:	2001001c 	.word	0x2001001c
 801b8a0:	20010024 	.word	0x20010024
 801b8a4:	2001002c 	.word	0x2001002c

0801b8a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b8b0:	2101      	movs	r1, #1
 801b8b2:	6878      	ldr	r0, [r7, #4]
 801b8b4:	f7ff ff3a 	bl	801b72c <tcp_abandon>
}
 801b8b8:	bf00      	nop
 801b8ba:	3708      	adds	r7, #8
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	bd80      	pop	{r7, pc}

0801b8c0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b088      	sub	sp, #32
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	60f8      	str	r0, [r7, #12]
 801b8c8:	60b9      	str	r1, [r7, #8]
 801b8ca:	4613      	mov	r3, r2
 801b8cc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801b8ce:	2304      	movs	r3, #4
 801b8d0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b8d2:	68bb      	ldr	r3, [r7, #8]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d101      	bne.n	801b8dc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801b8d8:	4b3e      	ldr	r3, [pc, #248]	@ (801b9d4 <tcp_bind+0x114>)
 801b8da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d109      	bne.n	801b8f6 <tcp_bind+0x36>
 801b8e2:	4b3d      	ldr	r3, [pc, #244]	@ (801b9d8 <tcp_bind+0x118>)
 801b8e4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801b8e8:	493c      	ldr	r1, [pc, #240]	@ (801b9dc <tcp_bind+0x11c>)
 801b8ea:	483d      	ldr	r0, [pc, #244]	@ (801b9e0 <tcp_bind+0x120>)
 801b8ec:	f007 f824 	bl	8022938 <iprintf>
 801b8f0:	f06f 030f 	mvn.w	r3, #15
 801b8f4:	e06a      	b.n	801b9cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	7d1b      	ldrb	r3, [r3, #20]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d009      	beq.n	801b912 <tcp_bind+0x52>
 801b8fe:	4b36      	ldr	r3, [pc, #216]	@ (801b9d8 <tcp_bind+0x118>)
 801b900:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b904:	4937      	ldr	r1, [pc, #220]	@ (801b9e4 <tcp_bind+0x124>)
 801b906:	4836      	ldr	r0, [pc, #216]	@ (801b9e0 <tcp_bind+0x120>)
 801b908:	f007 f816 	bl	8022938 <iprintf>
 801b90c:	f06f 0305 	mvn.w	r3, #5
 801b910:	e05c      	b.n	801b9cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b912:	88fb      	ldrh	r3, [r7, #6]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d109      	bne.n	801b92c <tcp_bind+0x6c>
    port = tcp_new_port();
 801b918:	f000 f9e0 	bl	801bcdc <tcp_new_port>
 801b91c:	4603      	mov	r3, r0
 801b91e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b920:	88fb      	ldrh	r3, [r7, #6]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d135      	bne.n	801b992 <tcp_bind+0xd2>
      return ERR_BUF;
 801b926:	f06f 0301 	mvn.w	r3, #1
 801b92a:	e04f      	b.n	801b9cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b92c:	2300      	movs	r3, #0
 801b92e:	61fb      	str	r3, [r7, #28]
 801b930:	e02b      	b.n	801b98a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b932:	4a2d      	ldr	r2, [pc, #180]	@ (801b9e8 <tcp_bind+0x128>)
 801b934:	69fb      	ldr	r3, [r7, #28]
 801b936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	61bb      	str	r3, [r7, #24]
 801b93e:	e01e      	b.n	801b97e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b940:	69bb      	ldr	r3, [r7, #24]
 801b942:	8adb      	ldrh	r3, [r3, #22]
 801b944:	88fa      	ldrh	r2, [r7, #6]
 801b946:	429a      	cmp	r2, r3
 801b948:	d116      	bne.n	801b978 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b94a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d010      	beq.n	801b972 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b950:	69bb      	ldr	r3, [r7, #24]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d00c      	beq.n	801b972 <tcp_bind+0xb2>
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d009      	beq.n	801b972 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d005      	beq.n	801b972 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	681a      	ldr	r2, [r3, #0]
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b96e:	429a      	cmp	r2, r3
 801b970:	d102      	bne.n	801b978 <tcp_bind+0xb8>
              return ERR_USE;
 801b972:	f06f 0307 	mvn.w	r3, #7
 801b976:	e029      	b.n	801b9cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b978:	69bb      	ldr	r3, [r7, #24]
 801b97a:	68db      	ldr	r3, [r3, #12]
 801b97c:	61bb      	str	r3, [r7, #24]
 801b97e:	69bb      	ldr	r3, [r7, #24]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d1dd      	bne.n	801b940 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b984:	69fb      	ldr	r3, [r7, #28]
 801b986:	3301      	adds	r3, #1
 801b988:	61fb      	str	r3, [r7, #28]
 801b98a:	69fa      	ldr	r2, [r7, #28]
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	429a      	cmp	r2, r3
 801b990:	dbcf      	blt.n	801b932 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b992:	68bb      	ldr	r3, [r7, #8]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d00c      	beq.n	801b9b2 <tcp_bind+0xf2>
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d008      	beq.n	801b9b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d002      	beq.n	801b9ac <tcp_bind+0xec>
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	e000      	b.n	801b9ae <tcp_bind+0xee>
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	68fa      	ldr	r2, [r7, #12]
 801b9b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	88fa      	ldrh	r2, [r7, #6]
 801b9b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b9b8:	4b0c      	ldr	r3, [pc, #48]	@ (801b9ec <tcp_bind+0x12c>)
 801b9ba:	681a      	ldr	r2, [r3, #0]
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	60da      	str	r2, [r3, #12]
 801b9c0:	4a0a      	ldr	r2, [pc, #40]	@ (801b9ec <tcp_bind+0x12c>)
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	6013      	str	r3, [r2, #0]
 801b9c6:	f005 fca1 	bl	802130c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b9ca:	2300      	movs	r3, #0
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	3720      	adds	r7, #32
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	08028c18 	.word	0x08028c18
 801b9d8:	08026ad0 	.word	0x08026ad0
 801b9dc:	08026ca8 	.word	0x08026ca8
 801b9e0:	08026b58 	.word	0x08026b58
 801b9e4:	08026cc0 	.word	0x08026cc0
 801b9e8:	08028d18 	.word	0x08028d18
 801b9ec:	2001001c 	.word	0x2001001c

0801b9f0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b084      	sub	sp, #16
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	60f8      	str	r0, [r7, #12]
 801b9f8:	60b9      	str	r1, [r7, #8]
 801b9fa:	4613      	mov	r3, r2
 801b9fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b9fe:	68bb      	ldr	r3, [r7, #8]
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d106      	bne.n	801ba12 <tcp_accept_null+0x22>
 801ba04:	4b07      	ldr	r3, [pc, #28]	@ (801ba24 <tcp_accept_null+0x34>)
 801ba06:	f240 320f 	movw	r2, #783	@ 0x30f
 801ba0a:	4907      	ldr	r1, [pc, #28]	@ (801ba28 <tcp_accept_null+0x38>)
 801ba0c:	4807      	ldr	r0, [pc, #28]	@ (801ba2c <tcp_accept_null+0x3c>)
 801ba0e:	f006 ff93 	bl	8022938 <iprintf>

  tcp_abort(pcb);
 801ba12:	68b8      	ldr	r0, [r7, #8]
 801ba14:	f7ff ff48 	bl	801b8a8 <tcp_abort>

  return ERR_ABRT;
 801ba18:	f06f 030c 	mvn.w	r3, #12
}
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	3710      	adds	r7, #16
 801ba20:	46bd      	mov	sp, r7
 801ba22:	bd80      	pop	{r7, pc}
 801ba24:	08026ad0 	.word	0x08026ad0
 801ba28:	08026ce8 	.word	0x08026ce8
 801ba2c:	08026b58 	.word	0x08026b58

0801ba30 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b088      	sub	sp, #32
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	60f8      	str	r0, [r7, #12]
 801ba38:	460b      	mov	r3, r1
 801ba3a:	607a      	str	r2, [r7, #4]
 801ba3c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801ba3e:	2300      	movs	r3, #0
 801ba40:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d109      	bne.n	801ba5c <tcp_listen_with_backlog_and_err+0x2c>
 801ba48:	4b47      	ldr	r3, [pc, #284]	@ (801bb68 <tcp_listen_with_backlog_and_err+0x138>)
 801ba4a:	f240 3259 	movw	r2, #857	@ 0x359
 801ba4e:	4947      	ldr	r1, [pc, #284]	@ (801bb6c <tcp_listen_with_backlog_and_err+0x13c>)
 801ba50:	4847      	ldr	r0, [pc, #284]	@ (801bb70 <tcp_listen_with_backlog_and_err+0x140>)
 801ba52:	f006 ff71 	bl	8022938 <iprintf>
 801ba56:	23f0      	movs	r3, #240	@ 0xf0
 801ba58:	76fb      	strb	r3, [r7, #27]
 801ba5a:	e079      	b.n	801bb50 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	7d1b      	ldrb	r3, [r3, #20]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d009      	beq.n	801ba78 <tcp_listen_with_backlog_and_err+0x48>
 801ba64:	4b40      	ldr	r3, [pc, #256]	@ (801bb68 <tcp_listen_with_backlog_and_err+0x138>)
 801ba66:	f240 325a 	movw	r2, #858	@ 0x35a
 801ba6a:	4942      	ldr	r1, [pc, #264]	@ (801bb74 <tcp_listen_with_backlog_and_err+0x144>)
 801ba6c:	4840      	ldr	r0, [pc, #256]	@ (801bb70 <tcp_listen_with_backlog_and_err+0x140>)
 801ba6e:	f006 ff63 	bl	8022938 <iprintf>
 801ba72:	23f1      	movs	r3, #241	@ 0xf1
 801ba74:	76fb      	strb	r3, [r7, #27]
 801ba76:	e06b      	b.n	801bb50 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	7d1b      	ldrb	r3, [r3, #20]
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d104      	bne.n	801ba8a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801ba84:	23f7      	movs	r3, #247	@ 0xf7
 801ba86:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ba88:	e062      	b.n	801bb50 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801ba8a:	2002      	movs	r0, #2
 801ba8c:	f7fe f90c 	bl	8019ca8 <memp_malloc>
 801ba90:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801ba92:	69fb      	ldr	r3, [r7, #28]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d102      	bne.n	801ba9e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801ba98:	23ff      	movs	r3, #255	@ 0xff
 801ba9a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ba9c:	e058      	b.n	801bb50 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	691a      	ldr	r2, [r3, #16]
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	8ada      	ldrh	r2, [r3, #22]
 801baaa:	69fb      	ldr	r3, [r7, #28]
 801baac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801baae:	69fb      	ldr	r3, [r7, #28]
 801bab0:	2201      	movs	r2, #1
 801bab2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	7d5a      	ldrb	r2, [r3, #21]
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	7a5a      	ldrb	r2, [r3, #9]
 801bac0:	69fb      	ldr	r3, [r7, #28]
 801bac2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801bac4:	69fb      	ldr	r3, [r7, #28]
 801bac6:	2200      	movs	r2, #0
 801bac8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	7ada      	ldrb	r2, [r3, #11]
 801bace:	69fb      	ldr	r3, [r7, #28]
 801bad0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	7a9a      	ldrb	r2, [r3, #10]
 801bad6:	69fb      	ldr	r3, [r7, #28]
 801bad8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	681a      	ldr	r2, [r3, #0]
 801bade:	69fb      	ldr	r3, [r7, #28]
 801bae0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	8adb      	ldrh	r3, [r3, #22]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d021      	beq.n	801bb2e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801baea:	4b23      	ldr	r3, [pc, #140]	@ (801bb78 <tcp_listen_with_backlog_and_err+0x148>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	68fa      	ldr	r2, [r7, #12]
 801baf0:	429a      	cmp	r2, r3
 801baf2:	d105      	bne.n	801bb00 <tcp_listen_with_backlog_and_err+0xd0>
 801baf4:	4b20      	ldr	r3, [pc, #128]	@ (801bb78 <tcp_listen_with_backlog_and_err+0x148>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	68db      	ldr	r3, [r3, #12]
 801bafa:	4a1f      	ldr	r2, [pc, #124]	@ (801bb78 <tcp_listen_with_backlog_and_err+0x148>)
 801bafc:	6013      	str	r3, [r2, #0]
 801bafe:	e013      	b.n	801bb28 <tcp_listen_with_backlog_and_err+0xf8>
 801bb00:	4b1d      	ldr	r3, [pc, #116]	@ (801bb78 <tcp_listen_with_backlog_and_err+0x148>)
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	617b      	str	r3, [r7, #20]
 801bb06:	e00c      	b.n	801bb22 <tcp_listen_with_backlog_and_err+0xf2>
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	68db      	ldr	r3, [r3, #12]
 801bb0c:	68fa      	ldr	r2, [r7, #12]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d104      	bne.n	801bb1c <tcp_listen_with_backlog_and_err+0xec>
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	68da      	ldr	r2, [r3, #12]
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	60da      	str	r2, [r3, #12]
 801bb1a:	e005      	b.n	801bb28 <tcp_listen_with_backlog_and_err+0xf8>
 801bb1c:	697b      	ldr	r3, [r7, #20]
 801bb1e:	68db      	ldr	r3, [r3, #12]
 801bb20:	617b      	str	r3, [r7, #20]
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d1ef      	bne.n	801bb08 <tcp_listen_with_backlog_and_err+0xd8>
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801bb2e:	68f8      	ldr	r0, [r7, #12]
 801bb30:	f7ff fb76 	bl	801b220 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801bb34:	69fb      	ldr	r3, [r7, #28]
 801bb36:	4a11      	ldr	r2, [pc, #68]	@ (801bb7c <tcp_listen_with_backlog_and_err+0x14c>)
 801bb38:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801bb3a:	4b11      	ldr	r3, [pc, #68]	@ (801bb80 <tcp_listen_with_backlog_and_err+0x150>)
 801bb3c:	681a      	ldr	r2, [r3, #0]
 801bb3e:	69fb      	ldr	r3, [r7, #28]
 801bb40:	60da      	str	r2, [r3, #12]
 801bb42:	4a0f      	ldr	r2, [pc, #60]	@ (801bb80 <tcp_listen_with_backlog_and_err+0x150>)
 801bb44:	69fb      	ldr	r3, [r7, #28]
 801bb46:	6013      	str	r3, [r2, #0]
 801bb48:	f005 fbe0 	bl	802130c <tcp_timer_needed>
  res = ERR_OK;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d002      	beq.n	801bb5c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	7efa      	ldrb	r2, [r7, #27]
 801bb5a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801bb5c:	69fb      	ldr	r3, [r7, #28]
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3720      	adds	r7, #32
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	08026ad0 	.word	0x08026ad0
 801bb6c:	08026d08 	.word	0x08026d08
 801bb70:	08026b58 	.word	0x08026b58
 801bb74:	08026d38 	.word	0x08026d38
 801bb78:	2001001c 	.word	0x2001001c
 801bb7c:	0801b9f1 	.word	0x0801b9f1
 801bb80:	20010020 	.word	0x20010020

0801bb84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b084      	sub	sp, #16
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d106      	bne.n	801bba0 <tcp_update_rcv_ann_wnd+0x1c>
 801bb92:	4b25      	ldr	r3, [pc, #148]	@ (801bc28 <tcp_update_rcv_ann_wnd+0xa4>)
 801bb94:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801bb98:	4924      	ldr	r1, [pc, #144]	@ (801bc2c <tcp_update_rcv_ann_wnd+0xa8>)
 801bb9a:	4825      	ldr	r0, [pc, #148]	@ (801bc30 <tcp_update_rcv_ann_wnd+0xac>)
 801bb9c:	f006 fecc 	bl	8022938 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bba4:	687a      	ldr	r2, [r7, #4]
 801bba6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801bba8:	4413      	add	r3, r2
 801bbaa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbb0:	687a      	ldr	r2, [r7, #4]
 801bbb2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801bbb4:	f640 3168 	movw	r1, #2920	@ 0xb68
 801bbb8:	428a      	cmp	r2, r1
 801bbba:	bf28      	it	cs
 801bbbc:	460a      	movcs	r2, r1
 801bbbe:	b292      	uxth	r2, r2
 801bbc0:	4413      	add	r3, r2
 801bbc2:	68fa      	ldr	r2, [r7, #12]
 801bbc4:	1ad3      	subs	r3, r2, r3
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	db08      	blt.n	801bbdc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbd6:	68fa      	ldr	r2, [r7, #12]
 801bbd8:	1ad3      	subs	r3, r2, r3
 801bbda:	e020      	b.n	801bc1e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbe4:	1ad3      	subs	r3, r2, r3
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	dd03      	ble.n	801bbf2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2200      	movs	r2, #0
 801bbee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801bbf0:	e014      	b.n	801bc1c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbfa:	1ad3      	subs	r3, r2, r3
 801bbfc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc04:	d306      	bcc.n	801bc14 <tcp_update_rcv_ann_wnd+0x90>
 801bc06:	4b08      	ldr	r3, [pc, #32]	@ (801bc28 <tcp_update_rcv_ann_wnd+0xa4>)
 801bc08:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801bc0c:	4909      	ldr	r1, [pc, #36]	@ (801bc34 <tcp_update_rcv_ann_wnd+0xb0>)
 801bc0e:	4808      	ldr	r0, [pc, #32]	@ (801bc30 <tcp_update_rcv_ann_wnd+0xac>)
 801bc10:	f006 fe92 	bl	8022938 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801bc14:	68bb      	ldr	r3, [r7, #8]
 801bc16:	b29a      	uxth	r2, r3
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801bc1c:	2300      	movs	r3, #0
  }
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3710      	adds	r7, #16
 801bc22:	46bd      	mov	sp, r7
 801bc24:	bd80      	pop	{r7, pc}
 801bc26:	bf00      	nop
 801bc28:	08026ad0 	.word	0x08026ad0
 801bc2c:	08026d70 	.word	0x08026d70
 801bc30:	08026b58 	.word	0x08026b58
 801bc34:	08026d94 	.word	0x08026d94

0801bc38 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b084      	sub	sp, #16
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
 801bc40:	460b      	mov	r3, r1
 801bc42:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d107      	bne.n	801bc5a <tcp_recved+0x22>
 801bc4a:	4b20      	ldr	r3, [pc, #128]	@ (801bccc <tcp_recved+0x94>)
 801bc4c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801bc50:	491f      	ldr	r1, [pc, #124]	@ (801bcd0 <tcp_recved+0x98>)
 801bc52:	4820      	ldr	r0, [pc, #128]	@ (801bcd4 <tcp_recved+0x9c>)
 801bc54:	f006 fe70 	bl	8022938 <iprintf>
 801bc58:	e034      	b.n	801bcc4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	7d1b      	ldrb	r3, [r3, #20]
 801bc5e:	2b01      	cmp	r3, #1
 801bc60:	d106      	bne.n	801bc70 <tcp_recved+0x38>
 801bc62:	4b1a      	ldr	r3, [pc, #104]	@ (801bccc <tcp_recved+0x94>)
 801bc64:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801bc68:	491b      	ldr	r1, [pc, #108]	@ (801bcd8 <tcp_recved+0xa0>)
 801bc6a:	481a      	ldr	r0, [pc, #104]	@ (801bcd4 <tcp_recved+0x9c>)
 801bc6c:	f006 fe64 	bl	8022938 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801bc74:	887b      	ldrh	r3, [r7, #2]
 801bc76:	4413      	add	r3, r2
 801bc78:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801bc7a:	89fb      	ldrh	r3, [r7, #14]
 801bc7c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801bc80:	4293      	cmp	r3, r2
 801bc82:	d804      	bhi.n	801bc8e <tcp_recved+0x56>
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bc88:	89fa      	ldrh	r2, [r7, #14]
 801bc8a:	429a      	cmp	r2, r3
 801bc8c:	d204      	bcs.n	801bc98 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801bc94:	851a      	strh	r2, [r3, #40]	@ 0x28
 801bc96:	e002      	b.n	801bc9e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	89fa      	ldrh	r2, [r7, #14]
 801bc9c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7ff ff70 	bl	801bb84 <tcp_update_rcv_ann_wnd>
 801bca4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801bcac:	4293      	cmp	r3, r2
 801bcae:	d909      	bls.n	801bcc4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	8b5b      	ldrh	r3, [r3, #26]
 801bcb4:	f043 0302 	orr.w	r3, r3, #2
 801bcb8:	b29a      	uxth	r2, r3
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bcbe:	6878      	ldr	r0, [r7, #4]
 801bcc0:	f004 fbae 	bl	8020420 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801bcc4:	3710      	adds	r7, #16
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bd80      	pop	{r7, pc}
 801bcca:	bf00      	nop
 801bccc:	08026ad0 	.word	0x08026ad0
 801bcd0:	08026db0 	.word	0x08026db0
 801bcd4:	08026b58 	.word	0x08026b58
 801bcd8:	08026dc8 	.word	0x08026dc8

0801bcdc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801bcdc:	b480      	push	{r7}
 801bcde:	b083      	sub	sp, #12
 801bce0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801bce2:	2300      	movs	r3, #0
 801bce4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801bce6:	4b1e      	ldr	r3, [pc, #120]	@ (801bd60 <tcp_new_port+0x84>)
 801bce8:	881b      	ldrh	r3, [r3, #0]
 801bcea:	3301      	adds	r3, #1
 801bcec:	b29a      	uxth	r2, r3
 801bcee:	4b1c      	ldr	r3, [pc, #112]	@ (801bd60 <tcp_new_port+0x84>)
 801bcf0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801bcf2:	4b1b      	ldr	r3, [pc, #108]	@ (801bd60 <tcp_new_port+0x84>)
 801bcf4:	881b      	ldrh	r3, [r3, #0]
 801bcf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	d103      	bne.n	801bd06 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801bcfe:	4b18      	ldr	r3, [pc, #96]	@ (801bd60 <tcp_new_port+0x84>)
 801bd00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801bd04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801bd06:	2300      	movs	r3, #0
 801bd08:	71fb      	strb	r3, [r7, #7]
 801bd0a:	e01e      	b.n	801bd4a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801bd0c:	79fb      	ldrb	r3, [r7, #7]
 801bd0e:	4a15      	ldr	r2, [pc, #84]	@ (801bd64 <tcp_new_port+0x88>)
 801bd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	603b      	str	r3, [r7, #0]
 801bd18:	e011      	b.n	801bd3e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	8ada      	ldrh	r2, [r3, #22]
 801bd1e:	4b10      	ldr	r3, [pc, #64]	@ (801bd60 <tcp_new_port+0x84>)
 801bd20:	881b      	ldrh	r3, [r3, #0]
 801bd22:	429a      	cmp	r2, r3
 801bd24:	d108      	bne.n	801bd38 <tcp_new_port+0x5c>
        n++;
 801bd26:	88bb      	ldrh	r3, [r7, #4]
 801bd28:	3301      	adds	r3, #1
 801bd2a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801bd2c:	88bb      	ldrh	r3, [r7, #4]
 801bd2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bd32:	d3d8      	bcc.n	801bce6 <tcp_new_port+0xa>
          return 0;
 801bd34:	2300      	movs	r3, #0
 801bd36:	e00d      	b.n	801bd54 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801bd38:	683b      	ldr	r3, [r7, #0]
 801bd3a:	68db      	ldr	r3, [r3, #12]
 801bd3c:	603b      	str	r3, [r7, #0]
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d1ea      	bne.n	801bd1a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801bd44:	79fb      	ldrb	r3, [r7, #7]
 801bd46:	3301      	adds	r3, #1
 801bd48:	71fb      	strb	r3, [r7, #7]
 801bd4a:	79fb      	ldrb	r3, [r7, #7]
 801bd4c:	2b03      	cmp	r3, #3
 801bd4e:	d9dd      	bls.n	801bd0c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801bd50:	4b03      	ldr	r3, [pc, #12]	@ (801bd60 <tcp_new_port+0x84>)
 801bd52:	881b      	ldrh	r3, [r3, #0]
}
 801bd54:	4618      	mov	r0, r3
 801bd56:	370c      	adds	r7, #12
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5e:	4770      	bx	lr
 801bd60:	20000038 	.word	0x20000038
 801bd64:	08028d18 	.word	0x08028d18

0801bd68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801bd68:	b5b0      	push	{r4, r5, r7, lr}
 801bd6a:	b090      	sub	sp, #64	@ 0x40
 801bd6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801bd74:	4b95      	ldr	r3, [pc, #596]	@ (801bfcc <tcp_slowtmr+0x264>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	3301      	adds	r3, #1
 801bd7a:	4a94      	ldr	r2, [pc, #592]	@ (801bfcc <tcp_slowtmr+0x264>)
 801bd7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801bd7e:	4b94      	ldr	r3, [pc, #592]	@ (801bfd0 <tcp_slowtmr+0x268>)
 801bd80:	781b      	ldrb	r3, [r3, #0]
 801bd82:	3301      	adds	r3, #1
 801bd84:	b2da      	uxtb	r2, r3
 801bd86:	4b92      	ldr	r3, [pc, #584]	@ (801bfd0 <tcp_slowtmr+0x268>)
 801bd88:	701a      	strb	r2, [r3, #0]
 801bd8a:	e000      	b.n	801bd8e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801bd8c:	bf00      	nop
  prev = NULL;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801bd92:	4b90      	ldr	r3, [pc, #576]	@ (801bfd4 <tcp_slowtmr+0x26c>)
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801bd98:	e29d      	b.n	801c2d6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd9c:	7d1b      	ldrb	r3, [r3, #20]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d106      	bne.n	801bdb0 <tcp_slowtmr+0x48>
 801bda2:	4b8d      	ldr	r3, [pc, #564]	@ (801bfd8 <tcp_slowtmr+0x270>)
 801bda4:	f240 42be 	movw	r2, #1214	@ 0x4be
 801bda8:	498c      	ldr	r1, [pc, #560]	@ (801bfdc <tcp_slowtmr+0x274>)
 801bdaa:	488d      	ldr	r0, [pc, #564]	@ (801bfe0 <tcp_slowtmr+0x278>)
 801bdac:	f006 fdc4 	bl	8022938 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdb2:	7d1b      	ldrb	r3, [r3, #20]
 801bdb4:	2b01      	cmp	r3, #1
 801bdb6:	d106      	bne.n	801bdc6 <tcp_slowtmr+0x5e>
 801bdb8:	4b87      	ldr	r3, [pc, #540]	@ (801bfd8 <tcp_slowtmr+0x270>)
 801bdba:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801bdbe:	4989      	ldr	r1, [pc, #548]	@ (801bfe4 <tcp_slowtmr+0x27c>)
 801bdc0:	4887      	ldr	r0, [pc, #540]	@ (801bfe0 <tcp_slowtmr+0x278>)
 801bdc2:	f006 fdb9 	bl	8022938 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdc8:	7d1b      	ldrb	r3, [r3, #20]
 801bdca:	2b0a      	cmp	r3, #10
 801bdcc:	d106      	bne.n	801bddc <tcp_slowtmr+0x74>
 801bdce:	4b82      	ldr	r3, [pc, #520]	@ (801bfd8 <tcp_slowtmr+0x270>)
 801bdd0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801bdd4:	4984      	ldr	r1, [pc, #528]	@ (801bfe8 <tcp_slowtmr+0x280>)
 801bdd6:	4882      	ldr	r0, [pc, #520]	@ (801bfe0 <tcp_slowtmr+0x278>)
 801bdd8:	f006 fdae 	bl	8022938 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdde:	7f9a      	ldrb	r2, [r3, #30]
 801bde0:	4b7b      	ldr	r3, [pc, #492]	@ (801bfd0 <tcp_slowtmr+0x268>)
 801bde2:	781b      	ldrb	r3, [r3, #0]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	d105      	bne.n	801bdf4 <tcp_slowtmr+0x8c>
      prev = pcb;
 801bde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdee:	68db      	ldr	r3, [r3, #12]
 801bdf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801bdf2:	e270      	b.n	801c2d6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801bdf4:	4b76      	ldr	r3, [pc, #472]	@ (801bfd0 <tcp_slowtmr+0x268>)
 801bdf6:	781a      	ldrb	r2, [r3, #0]
 801bdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdfa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801be02:	2300      	movs	r3, #0
 801be04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801be08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be0a:	7d1b      	ldrb	r3, [r3, #20]
 801be0c:	2b02      	cmp	r3, #2
 801be0e:	d10a      	bne.n	801be26 <tcp_slowtmr+0xbe>
 801be10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be16:	2b05      	cmp	r3, #5
 801be18:	d905      	bls.n	801be26 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801be1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801be1e:	3301      	adds	r3, #1
 801be20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be24:	e11e      	b.n	801c064 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801be26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be2c:	2b0b      	cmp	r3, #11
 801be2e:	d905      	bls.n	801be3c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801be30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801be34:	3301      	adds	r3, #1
 801be36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be3a:	e113      	b.n	801c064 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801be42:	2b00      	cmp	r3, #0
 801be44:	d075      	beq.n	801bf32 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801be46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d006      	beq.n	801be5c <tcp_slowtmr+0xf4>
 801be4e:	4b62      	ldr	r3, [pc, #392]	@ (801bfd8 <tcp_slowtmr+0x270>)
 801be50:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801be54:	4965      	ldr	r1, [pc, #404]	@ (801bfec <tcp_slowtmr+0x284>)
 801be56:	4862      	ldr	r0, [pc, #392]	@ (801bfe0 <tcp_slowtmr+0x278>)
 801be58:	f006 fd6e 	bl	8022938 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801be5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801be60:	2b00      	cmp	r3, #0
 801be62:	d106      	bne.n	801be72 <tcp_slowtmr+0x10a>
 801be64:	4b5c      	ldr	r3, [pc, #368]	@ (801bfd8 <tcp_slowtmr+0x270>)
 801be66:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801be6a:	4961      	ldr	r1, [pc, #388]	@ (801bff0 <tcp_slowtmr+0x288>)
 801be6c:	485c      	ldr	r0, [pc, #368]	@ (801bfe0 <tcp_slowtmr+0x278>)
 801be6e:	f006 fd63 	bl	8022938 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801be72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be74:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801be78:	2b0b      	cmp	r3, #11
 801be7a:	d905      	bls.n	801be88 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801be7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801be80:	3301      	adds	r3, #1
 801be82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801be86:	e0ed      	b.n	801c064 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be8a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801be8e:	3b01      	subs	r3, #1
 801be90:	4a58      	ldr	r2, [pc, #352]	@ (801bff4 <tcp_slowtmr+0x28c>)
 801be92:	5cd3      	ldrb	r3, [r2, r3]
 801be94:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801be9c:	7c7a      	ldrb	r2, [r7, #17]
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d907      	bls.n	801beb2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801bea8:	3301      	adds	r3, #1
 801beaa:	b2da      	uxtb	r2, r3
 801beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beb4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801beb8:	7c7a      	ldrb	r2, [r7, #17]
 801beba:	429a      	cmp	r2, r3
 801bebc:	f200 80d2 	bhi.w	801c064 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801bec0:	2301      	movs	r3, #1
 801bec2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801beca:	2b00      	cmp	r3, #0
 801becc:	d108      	bne.n	801bee0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801bece:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bed0:	f005 f94e 	bl	8021170 <tcp_zero_window_probe>
 801bed4:	4603      	mov	r3, r0
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d014      	beq.n	801bf04 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801beda:	2300      	movs	r3, #0
 801bedc:	623b      	str	r3, [r7, #32]
 801bede:	e011      	b.n	801bf04 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801bee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801bee6:	4619      	mov	r1, r3
 801bee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801beea:	f004 f813 	bl	801ff14 <tcp_split_unsent_seg>
 801beee:	4603      	mov	r3, r0
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d107      	bne.n	801bf04 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801bef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bef6:	f004 fa93 	bl	8020420 <tcp_output>
 801befa:	4603      	mov	r3, r0
 801befc:	2b00      	cmp	r3, #0
 801befe:	d101      	bne.n	801bf04 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801bf00:	2300      	movs	r3, #0
 801bf02:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801bf04:	6a3b      	ldr	r3, [r7, #32]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	f000 80ac 	beq.w	801c064 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf0e:	2200      	movs	r2, #0
 801bf10:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bf14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf16:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801bf1a:	2b06      	cmp	r3, #6
 801bf1c:	f200 80a2 	bhi.w	801c064 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf22:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801bf26:	3301      	adds	r3, #1
 801bf28:	b2da      	uxtb	r2, r3
 801bf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801bf30:	e098      	b.n	801c064 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801bf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	db0f      	blt.n	801bf5c <tcp_slowtmr+0x1f4>
 801bf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801bf46:	4293      	cmp	r3, r2
 801bf48:	d008      	beq.n	801bf5c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801bf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	3301      	adds	r3, #1
 801bf54:	b29b      	uxth	r3, r3
 801bf56:	b21a      	sxth	r2, r3
 801bf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf5a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf5e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf64:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801bf68:	429a      	cmp	r2, r3
 801bf6a:	db7b      	blt.n	801c064 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801bf6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bf6e:	f004 fd4b 	bl	8020a08 <tcp_rexmit_rto_prepare>
 801bf72:	4603      	mov	r3, r0
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d007      	beq.n	801bf88 <tcp_slowtmr+0x220>
 801bf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d171      	bne.n	801c064 <tcp_slowtmr+0x2fc>
 801bf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d06d      	beq.n	801c064 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801bf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf8a:	7d1b      	ldrb	r3, [r3, #20]
 801bf8c:	2b02      	cmp	r3, #2
 801bf8e:	d03a      	beq.n	801c006 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801bf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bf96:	2b0c      	cmp	r3, #12
 801bf98:	bf28      	it	cs
 801bf9a:	230c      	movcs	r3, #12
 801bf9c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801bf9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801bfa4:	10db      	asrs	r3, r3, #3
 801bfa6:	b21b      	sxth	r3, r3
 801bfa8:	461a      	mov	r2, r3
 801bfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801bfb0:	4413      	add	r3, r2
 801bfb2:	7efa      	ldrb	r2, [r7, #27]
 801bfb4:	4910      	ldr	r1, [pc, #64]	@ (801bff8 <tcp_slowtmr+0x290>)
 801bfb6:	5c8a      	ldrb	r2, [r1, r2]
 801bfb8:	4093      	lsls	r3, r2
 801bfba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801bfc2:	4293      	cmp	r3, r2
 801bfc4:	dc1a      	bgt.n	801bffc <tcp_slowtmr+0x294>
 801bfc6:	697b      	ldr	r3, [r7, #20]
 801bfc8:	b21a      	sxth	r2, r3
 801bfca:	e019      	b.n	801c000 <tcp_slowtmr+0x298>
 801bfcc:	20010018 	.word	0x20010018
 801bfd0:	2001002e 	.word	0x2001002e
 801bfd4:	20010024 	.word	0x20010024
 801bfd8:	08026ad0 	.word	0x08026ad0
 801bfdc:	08026e58 	.word	0x08026e58
 801bfe0:	08026b58 	.word	0x08026b58
 801bfe4:	08026e84 	.word	0x08026e84
 801bfe8:	08026eb0 	.word	0x08026eb0
 801bfec:	08026ee0 	.word	0x08026ee0
 801bff0:	08026f14 	.word	0x08026f14
 801bff4:	08028d10 	.word	0x08028d10
 801bff8:	08028d00 	.word	0x08028d00
 801bffc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c002:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801c006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c008:	2200      	movs	r2, #0
 801c00a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c00e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801c012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c014:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801c018:	4293      	cmp	r3, r2
 801c01a:	bf28      	it	cs
 801c01c:	4613      	movcs	r3, r2
 801c01e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801c020:	8a7b      	ldrh	r3, [r7, #18]
 801c022:	085b      	lsrs	r3, r3, #1
 801c024:	b29a      	uxth	r2, r3
 801c026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c028:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c02e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801c032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c034:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c036:	005b      	lsls	r3, r3, #1
 801c038:	b29b      	uxth	r3, r3
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d206      	bcs.n	801c04c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c042:	005b      	lsls	r3, r3, #1
 801c044:	b29a      	uxth	r2, r3
 801c046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c048:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801c04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c04e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c052:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c058:	2200      	movs	r2, #0
 801c05a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c05e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c060:	f004 fd42 	bl	8020ae8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801c064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c066:	7d1b      	ldrb	r3, [r3, #20]
 801c068:	2b06      	cmp	r3, #6
 801c06a:	d111      	bne.n	801c090 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801c06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c06e:	8b5b      	ldrh	r3, [r3, #26]
 801c070:	f003 0310 	and.w	r3, r3, #16
 801c074:	2b00      	cmp	r3, #0
 801c076:	d00b      	beq.n	801c090 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c078:	4b9c      	ldr	r3, [pc, #624]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c07a:	681a      	ldr	r2, [r3, #0]
 801c07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c07e:	6a1b      	ldr	r3, [r3, #32]
 801c080:	1ad3      	subs	r3, r2, r3
 801c082:	2b28      	cmp	r3, #40	@ 0x28
 801c084:	d904      	bls.n	801c090 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801c086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c08a:	3301      	adds	r3, #1
 801c08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c092:	7a5b      	ldrb	r3, [r3, #9]
 801c094:	f003 0308 	and.w	r3, r3, #8
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d04a      	beq.n	801c132 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801c09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c09e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c0a0:	2b04      	cmp	r3, #4
 801c0a2:	d003      	beq.n	801c0ac <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801c0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801c0a8:	2b07      	cmp	r3, #7
 801c0aa:	d142      	bne.n	801c132 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0ac:	4b8f      	ldr	r3, [pc, #572]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c0ae:	681a      	ldr	r2, [r3, #0]
 801c0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0b2:	6a1b      	ldr	r3, [r3, #32]
 801c0b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801c0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0b8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c0bc:	4b8c      	ldr	r3, [pc, #560]	@ (801c2f0 <tcp_slowtmr+0x588>)
 801c0be:	440b      	add	r3, r1
 801c0c0:	498c      	ldr	r1, [pc, #560]	@ (801c2f4 <tcp_slowtmr+0x58c>)
 801c0c2:	fba1 1303 	umull	r1, r3, r1, r3
 801c0c6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	d90a      	bls.n	801c0e2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801c0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c0d0:	3301      	adds	r3, #1
 801c0d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801c0d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c0da:	3301      	adds	r3, #1
 801c0dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c0e0:	e027      	b.n	801c132 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0e2:	4b82      	ldr	r3, [pc, #520]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c0e4:	681a      	ldr	r2, [r3, #0]
 801c0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0e8:	6a1b      	ldr	r3, [r3, #32]
 801c0ea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801c0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0f4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	4b7f      	ldr	r3, [pc, #508]	@ (801c2f8 <tcp_slowtmr+0x590>)
 801c0fc:	fb00 f303 	mul.w	r3, r0, r3
 801c100:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801c102:	497c      	ldr	r1, [pc, #496]	@ (801c2f4 <tcp_slowtmr+0x58c>)
 801c104:	fba1 1303 	umull	r1, r3, r1, r3
 801c108:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d911      	bls.n	801c132 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801c10e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c110:	f004 ffee 	bl	80210f0 <tcp_keepalive>
 801c114:	4603      	mov	r3, r0
 801c116:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801c11a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d107      	bne.n	801c132 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801c122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c124:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c128:	3301      	adds	r3, #1
 801c12a:	b2da      	uxtb	r2, r3
 801c12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c12e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801c132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c136:	2b00      	cmp	r3, #0
 801c138:	d011      	beq.n	801c15e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801c13a:	4b6c      	ldr	r3, [pc, #432]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c13c:	681a      	ldr	r2, [r3, #0]
 801c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c140:	6a1b      	ldr	r3, [r3, #32]
 801c142:	1ad2      	subs	r2, r2, r3
 801c144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c146:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801c14a:	4619      	mov	r1, r3
 801c14c:	460b      	mov	r3, r1
 801c14e:	005b      	lsls	r3, r3, #1
 801c150:	440b      	add	r3, r1
 801c152:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801c154:	429a      	cmp	r2, r3
 801c156:	d302      	bcc.n	801c15e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801c158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c15a:	f000 fead 	bl	801ceb8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c160:	7d1b      	ldrb	r3, [r3, #20]
 801c162:	2b03      	cmp	r3, #3
 801c164:	d10b      	bne.n	801c17e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c166:	4b61      	ldr	r3, [pc, #388]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c168:	681a      	ldr	r2, [r3, #0]
 801c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c16c:	6a1b      	ldr	r3, [r3, #32]
 801c16e:	1ad3      	subs	r3, r2, r3
 801c170:	2b28      	cmp	r3, #40	@ 0x28
 801c172:	d904      	bls.n	801c17e <tcp_slowtmr+0x416>
        ++pcb_remove;
 801c174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c178:	3301      	adds	r3, #1
 801c17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801c17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c180:	7d1b      	ldrb	r3, [r3, #20]
 801c182:	2b09      	cmp	r3, #9
 801c184:	d10b      	bne.n	801c19e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c186:	4b59      	ldr	r3, [pc, #356]	@ (801c2ec <tcp_slowtmr+0x584>)
 801c188:	681a      	ldr	r2, [r3, #0]
 801c18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c18c:	6a1b      	ldr	r3, [r3, #32]
 801c18e:	1ad3      	subs	r3, r2, r3
 801c190:	2bf0      	cmp	r3, #240	@ 0xf0
 801c192:	d904      	bls.n	801c19e <tcp_slowtmr+0x436>
        ++pcb_remove;
 801c194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c198:	3301      	adds	r3, #1
 801c19a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801c19e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d060      	beq.n	801c268 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801c1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c1ac:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801c1ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c1b0:	f000 fcce 	bl	801cb50 <tcp_pcb_purge>
      if (prev != NULL) {
 801c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d010      	beq.n	801c1dc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c1ba:	4b50      	ldr	r3, [pc, #320]	@ (801c2fc <tcp_slowtmr+0x594>)
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d106      	bne.n	801c1d2 <tcp_slowtmr+0x46a>
 801c1c4:	4b4e      	ldr	r3, [pc, #312]	@ (801c300 <tcp_slowtmr+0x598>)
 801c1c6:	f240 526d 	movw	r2, #1389	@ 0x56d
 801c1ca:	494e      	ldr	r1, [pc, #312]	@ (801c304 <tcp_slowtmr+0x59c>)
 801c1cc:	484e      	ldr	r0, [pc, #312]	@ (801c308 <tcp_slowtmr+0x5a0>)
 801c1ce:	f006 fbb3 	bl	8022938 <iprintf>
        prev->next = pcb->next;
 801c1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1d4:	68da      	ldr	r2, [r3, #12]
 801c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1d8:	60da      	str	r2, [r3, #12]
 801c1da:	e00f      	b.n	801c1fc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801c1dc:	4b47      	ldr	r3, [pc, #284]	@ (801c2fc <tcp_slowtmr+0x594>)
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d006      	beq.n	801c1f4 <tcp_slowtmr+0x48c>
 801c1e6:	4b46      	ldr	r3, [pc, #280]	@ (801c300 <tcp_slowtmr+0x598>)
 801c1e8:	f240 5271 	movw	r2, #1393	@ 0x571
 801c1ec:	4947      	ldr	r1, [pc, #284]	@ (801c30c <tcp_slowtmr+0x5a4>)
 801c1ee:	4846      	ldr	r0, [pc, #280]	@ (801c308 <tcp_slowtmr+0x5a0>)
 801c1f0:	f006 fba2 	bl	8022938 <iprintf>
        tcp_active_pcbs = pcb->next;
 801c1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f6:	68db      	ldr	r3, [r3, #12]
 801c1f8:	4a40      	ldr	r2, [pc, #256]	@ (801c2fc <tcp_slowtmr+0x594>)
 801c1fa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801c1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c200:	2b00      	cmp	r3, #0
 801c202:	d013      	beq.n	801c22c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c206:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801c208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c20a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801c20c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801c20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c210:	3304      	adds	r3, #4
 801c212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c214:	8ad2      	ldrh	r2, [r2, #22]
 801c216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c218:	8b09      	ldrh	r1, [r1, #24]
 801c21a:	9102      	str	r1, [sp, #8]
 801c21c:	9201      	str	r2, [sp, #4]
 801c21e:	9300      	str	r3, [sp, #0]
 801c220:	462b      	mov	r3, r5
 801c222:	4622      	mov	r2, r4
 801c224:	4601      	mov	r1, r0
 801c226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c228:	f004 feae 	bl	8020f88 <tcp_rst>
      err_arg = pcb->callback_arg;
 801c22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c22e:	691b      	ldr	r3, [r3, #16]
 801c230:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801c232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c234:	7d1b      	ldrb	r3, [r3, #20]
 801c236:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801c238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c23a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801c23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c23e:	68db      	ldr	r3, [r3, #12]
 801c240:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801c242:	6838      	ldr	r0, [r7, #0]
 801c244:	f7fe ffec 	bl	801b220 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801c248:	4b31      	ldr	r3, [pc, #196]	@ (801c310 <tcp_slowtmr+0x5a8>)
 801c24a:	2200      	movs	r2, #0
 801c24c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d004      	beq.n	801c25e <tcp_slowtmr+0x4f6>
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	f06f 010c 	mvn.w	r1, #12
 801c25a:	68b8      	ldr	r0, [r7, #8]
 801c25c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801c25e:	4b2c      	ldr	r3, [pc, #176]	@ (801c310 <tcp_slowtmr+0x5a8>)
 801c260:	781b      	ldrb	r3, [r3, #0]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d037      	beq.n	801c2d6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801c266:	e592      	b.n	801bd8e <tcp_slowtmr+0x26>
      prev = pcb;
 801c268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c26a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c26e:	68db      	ldr	r3, [r3, #12]
 801c270:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c274:	7f1b      	ldrb	r3, [r3, #28]
 801c276:	3301      	adds	r3, #1
 801c278:	b2da      	uxtb	r2, r3
 801c27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c27c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c280:	7f1a      	ldrb	r2, [r3, #28]
 801c282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c284:	7f5b      	ldrb	r3, [r3, #29]
 801c286:	429a      	cmp	r2, r3
 801c288:	d325      	bcc.n	801c2d6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801c28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c28c:	2200      	movs	r2, #0
 801c28e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801c290:	4b1f      	ldr	r3, [pc, #124]	@ (801c310 <tcp_slowtmr+0x5a8>)
 801c292:	2200      	movs	r2, #0
 801c294:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d00b      	beq.n	801c2b8 <tcp_slowtmr+0x550>
 801c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c2a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c2a8:	6912      	ldr	r2, [r2, #16]
 801c2aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c2ac:	4610      	mov	r0, r2
 801c2ae:	4798      	blx	r3
 801c2b0:	4603      	mov	r3, r0
 801c2b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801c2b6:	e002      	b.n	801c2be <tcp_slowtmr+0x556>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801c2be:	4b14      	ldr	r3, [pc, #80]	@ (801c310 <tcp_slowtmr+0x5a8>)
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	f47f ad62 	bne.w	801bd8c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801c2c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d102      	bne.n	801c2d6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801c2d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c2d2:	f004 f8a5 	bl	8020420 <tcp_output>
  while (pcb != NULL) {
 801c2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	f47f ad5e 	bne.w	801bd9a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801c2de:	2300      	movs	r3, #0
 801c2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801c2e2:	4b0c      	ldr	r3, [pc, #48]	@ (801c314 <tcp_slowtmr+0x5ac>)
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c2e8:	e069      	b.n	801c3be <tcp_slowtmr+0x656>
 801c2ea:	bf00      	nop
 801c2ec:	20010018 	.word	0x20010018
 801c2f0:	000a4cb8 	.word	0x000a4cb8
 801c2f4:	10624dd3 	.word	0x10624dd3
 801c2f8:	000124f8 	.word	0x000124f8
 801c2fc:	20010024 	.word	0x20010024
 801c300:	08026ad0 	.word	0x08026ad0
 801c304:	08026f4c 	.word	0x08026f4c
 801c308:	08026b58 	.word	0x08026b58
 801c30c:	08026f78 	.word	0x08026f78
 801c310:	2001002c 	.word	0x2001002c
 801c314:	20010028 	.word	0x20010028
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c31a:	7d1b      	ldrb	r3, [r3, #20]
 801c31c:	2b0a      	cmp	r3, #10
 801c31e:	d006      	beq.n	801c32e <tcp_slowtmr+0x5c6>
 801c320:	4b2b      	ldr	r3, [pc, #172]	@ (801c3d0 <tcp_slowtmr+0x668>)
 801c322:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801c326:	492b      	ldr	r1, [pc, #172]	@ (801c3d4 <tcp_slowtmr+0x66c>)
 801c328:	482b      	ldr	r0, [pc, #172]	@ (801c3d8 <tcp_slowtmr+0x670>)
 801c32a:	f006 fb05 	bl	8022938 <iprintf>
    pcb_remove = 0;
 801c32e:	2300      	movs	r3, #0
 801c330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c334:	4b29      	ldr	r3, [pc, #164]	@ (801c3dc <tcp_slowtmr+0x674>)
 801c336:	681a      	ldr	r2, [r3, #0]
 801c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c33a:	6a1b      	ldr	r3, [r3, #32]
 801c33c:	1ad3      	subs	r3, r2, r3
 801c33e:	2bf0      	cmp	r3, #240	@ 0xf0
 801c340:	d904      	bls.n	801c34c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801c342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c346:	3301      	adds	r3, #1
 801c348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801c34c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c350:	2b00      	cmp	r3, #0
 801c352:	d02f      	beq.n	801c3b4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801c354:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c356:	f000 fbfb 	bl	801cb50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801c35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d010      	beq.n	801c382 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c360:	4b1f      	ldr	r3, [pc, #124]	@ (801c3e0 <tcp_slowtmr+0x678>)
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c366:	429a      	cmp	r2, r3
 801c368:	d106      	bne.n	801c378 <tcp_slowtmr+0x610>
 801c36a:	4b19      	ldr	r3, [pc, #100]	@ (801c3d0 <tcp_slowtmr+0x668>)
 801c36c:	f240 52af 	movw	r2, #1455	@ 0x5af
 801c370:	491c      	ldr	r1, [pc, #112]	@ (801c3e4 <tcp_slowtmr+0x67c>)
 801c372:	4819      	ldr	r0, [pc, #100]	@ (801c3d8 <tcp_slowtmr+0x670>)
 801c374:	f006 fae0 	bl	8022938 <iprintf>
        prev->next = pcb->next;
 801c378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c37a:	68da      	ldr	r2, [r3, #12]
 801c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c37e:	60da      	str	r2, [r3, #12]
 801c380:	e00f      	b.n	801c3a2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801c382:	4b17      	ldr	r3, [pc, #92]	@ (801c3e0 <tcp_slowtmr+0x678>)
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c388:	429a      	cmp	r2, r3
 801c38a:	d006      	beq.n	801c39a <tcp_slowtmr+0x632>
 801c38c:	4b10      	ldr	r3, [pc, #64]	@ (801c3d0 <tcp_slowtmr+0x668>)
 801c38e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801c392:	4915      	ldr	r1, [pc, #84]	@ (801c3e8 <tcp_slowtmr+0x680>)
 801c394:	4810      	ldr	r0, [pc, #64]	@ (801c3d8 <tcp_slowtmr+0x670>)
 801c396:	f006 facf 	bl	8022938 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801c39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c39c:	68db      	ldr	r3, [r3, #12]
 801c39e:	4a10      	ldr	r2, [pc, #64]	@ (801c3e0 <tcp_slowtmr+0x678>)
 801c3a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801c3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801c3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a8:	68db      	ldr	r3, [r3, #12]
 801c3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801c3ac:	69f8      	ldr	r0, [r7, #28]
 801c3ae:	f7fe ff37 	bl	801b220 <tcp_free>
 801c3b2:	e004      	b.n	801c3be <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801c3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ba:	68db      	ldr	r3, [r3, #12]
 801c3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d1a9      	bne.n	801c318 <tcp_slowtmr+0x5b0>
    }
  }
}
 801c3c4:	bf00      	nop
 801c3c6:	bf00      	nop
 801c3c8:	3730      	adds	r7, #48	@ 0x30
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	bdb0      	pop	{r4, r5, r7, pc}
 801c3ce:	bf00      	nop
 801c3d0:	08026ad0 	.word	0x08026ad0
 801c3d4:	08026fa4 	.word	0x08026fa4
 801c3d8:	08026b58 	.word	0x08026b58
 801c3dc:	20010018 	.word	0x20010018
 801c3e0:	20010028 	.word	0x20010028
 801c3e4:	08026fd4 	.word	0x08026fd4
 801c3e8:	08026ffc 	.word	0x08026ffc

0801c3ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b082      	sub	sp, #8
 801c3f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801c3f2:	4b2d      	ldr	r3, [pc, #180]	@ (801c4a8 <tcp_fasttmr+0xbc>)
 801c3f4:	781b      	ldrb	r3, [r3, #0]
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	b2da      	uxtb	r2, r3
 801c3fa:	4b2b      	ldr	r3, [pc, #172]	@ (801c4a8 <tcp_fasttmr+0xbc>)
 801c3fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801c3fe:	4b2b      	ldr	r3, [pc, #172]	@ (801c4ac <tcp_fasttmr+0xc0>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c404:	e048      	b.n	801c498 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	7f9a      	ldrb	r2, [r3, #30]
 801c40a:	4b27      	ldr	r3, [pc, #156]	@ (801c4a8 <tcp_fasttmr+0xbc>)
 801c40c:	781b      	ldrb	r3, [r3, #0]
 801c40e:	429a      	cmp	r2, r3
 801c410:	d03f      	beq.n	801c492 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801c412:	4b25      	ldr	r3, [pc, #148]	@ (801c4a8 <tcp_fasttmr+0xbc>)
 801c414:	781a      	ldrb	r2, [r3, #0]
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	8b5b      	ldrh	r3, [r3, #26]
 801c41e:	f003 0301 	and.w	r3, r3, #1
 801c422:	2b00      	cmp	r3, #0
 801c424:	d010      	beq.n	801c448 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	8b5b      	ldrh	r3, [r3, #26]
 801c42a:	f043 0302 	orr.w	r3, r3, #2
 801c42e:	b29a      	uxth	r2, r3
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801c434:	6878      	ldr	r0, [r7, #4]
 801c436:	f003 fff3 	bl	8020420 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	8b5b      	ldrh	r3, [r3, #26]
 801c43e:	f023 0303 	bic.w	r3, r3, #3
 801c442:	b29a      	uxth	r2, r3
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	8b5b      	ldrh	r3, [r3, #26]
 801c44c:	f003 0308 	and.w	r3, r3, #8
 801c450:	2b00      	cmp	r3, #0
 801c452:	d009      	beq.n	801c468 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	8b5b      	ldrh	r3, [r3, #26]
 801c458:	f023 0308 	bic.w	r3, r3, #8
 801c45c:	b29a      	uxth	r2, r3
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801c462:	6878      	ldr	r0, [r7, #4]
 801c464:	f7ff f870 	bl	801b548 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	68db      	ldr	r3, [r3, #12]
 801c46c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c472:	2b00      	cmp	r3, #0
 801c474:	d00a      	beq.n	801c48c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801c476:	4b0e      	ldr	r3, [pc, #56]	@ (801c4b0 <tcp_fasttmr+0xc4>)
 801c478:	2200      	movs	r2, #0
 801c47a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801c47c:	6878      	ldr	r0, [r7, #4]
 801c47e:	f000 f819 	bl	801c4b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801c482:	4b0b      	ldr	r3, [pc, #44]	@ (801c4b0 <tcp_fasttmr+0xc4>)
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d000      	beq.n	801c48c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801c48a:	e7b8      	b.n	801c3fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	607b      	str	r3, [r7, #4]
 801c490:	e002      	b.n	801c498 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	68db      	ldr	r3, [r3, #12]
 801c496:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d1b3      	bne.n	801c406 <tcp_fasttmr+0x1a>
    }
  }
}
 801c49e:	bf00      	nop
 801c4a0:	bf00      	nop
 801c4a2:	3708      	adds	r7, #8
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	bd80      	pop	{r7, pc}
 801c4a8:	2001002e 	.word	0x2001002e
 801c4ac:	20010024 	.word	0x20010024
 801c4b0:	2001002c 	.word	0x2001002c

0801c4b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801c4b4:	b590      	push	{r4, r7, lr}
 801c4b6:	b085      	sub	sp, #20
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d109      	bne.n	801c4d6 <tcp_process_refused_data+0x22>
 801c4c2:	4b38      	ldr	r3, [pc, #224]	@ (801c5a4 <tcp_process_refused_data+0xf0>)
 801c4c4:	f240 6209 	movw	r2, #1545	@ 0x609
 801c4c8:	4937      	ldr	r1, [pc, #220]	@ (801c5a8 <tcp_process_refused_data+0xf4>)
 801c4ca:	4838      	ldr	r0, [pc, #224]	@ (801c5ac <tcp_process_refused_data+0xf8>)
 801c4cc:	f006 fa34 	bl	8022938 <iprintf>
 801c4d0:	f06f 030f 	mvn.w	r3, #15
 801c4d4:	e061      	b.n	801c59a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4da:	7b5b      	ldrb	r3, [r3, #13]
 801c4dc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4e2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d00b      	beq.n	801c50c <tcp_process_refused_data+0x58>
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	6918      	ldr	r0, [r3, #16]
 801c4fe:	2300      	movs	r3, #0
 801c500:	68ba      	ldr	r2, [r7, #8]
 801c502:	6879      	ldr	r1, [r7, #4]
 801c504:	47a0      	blx	r4
 801c506:	4603      	mov	r3, r0
 801c508:	73fb      	strb	r3, [r7, #15]
 801c50a:	e007      	b.n	801c51c <tcp_process_refused_data+0x68>
 801c50c:	2300      	movs	r3, #0
 801c50e:	68ba      	ldr	r2, [r7, #8]
 801c510:	6879      	ldr	r1, [r7, #4]
 801c512:	2000      	movs	r0, #0
 801c514:	f000 f8a6 	bl	801c664 <tcp_recv_null>
 801c518:	4603      	mov	r3, r0
 801c51a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801c51c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d12b      	bne.n	801c57c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801c524:	7bbb      	ldrb	r3, [r7, #14]
 801c526:	f003 0320 	and.w	r3, r3, #32
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d034      	beq.n	801c598 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c532:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c536:	4293      	cmp	r3, r2
 801c538:	d005      	beq.n	801c546 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c53e:	3301      	adds	r3, #1
 801c540:	b29a      	uxth	r2, r3
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d00b      	beq.n	801c568 <tcp_process_refused_data+0xb4>
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	6918      	ldr	r0, [r3, #16]
 801c55a:	2300      	movs	r3, #0
 801c55c:	2200      	movs	r2, #0
 801c55e:	6879      	ldr	r1, [r7, #4]
 801c560:	47a0      	blx	r4
 801c562:	4603      	mov	r3, r0
 801c564:	73fb      	strb	r3, [r7, #15]
 801c566:	e001      	b.n	801c56c <tcp_process_refused_data+0xb8>
 801c568:	2300      	movs	r3, #0
 801c56a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801c56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c570:	f113 0f0d 	cmn.w	r3, #13
 801c574:	d110      	bne.n	801c598 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801c576:	f06f 030c 	mvn.w	r3, #12
 801c57a:	e00e      	b.n	801c59a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 801c57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c580:	f113 0f0d 	cmn.w	r3, #13
 801c584:	d102      	bne.n	801c58c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801c586:	f06f 030c 	mvn.w	r3, #12
 801c58a:	e006      	b.n	801c59a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	68ba      	ldr	r2, [r7, #8]
 801c590:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801c592:	f06f 0304 	mvn.w	r3, #4
 801c596:	e000      	b.n	801c59a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801c598:	2300      	movs	r3, #0
}
 801c59a:	4618      	mov	r0, r3
 801c59c:	3714      	adds	r7, #20
 801c59e:	46bd      	mov	sp, r7
 801c5a0:	bd90      	pop	{r4, r7, pc}
 801c5a2:	bf00      	nop
 801c5a4:	08026ad0 	.word	0x08026ad0
 801c5a8:	08027024 	.word	0x08027024
 801c5ac:	08026b58 	.word	0x08026b58

0801c5b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b084      	sub	sp, #16
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801c5b8:	e007      	b.n	801c5ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801c5c0:	6878      	ldr	r0, [r7, #4]
 801c5c2:	f000 f80a 	bl	801c5da <tcp_seg_free>
    seg = next;
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d1f4      	bne.n	801c5ba <tcp_segs_free+0xa>
  }
}
 801c5d0:	bf00      	nop
 801c5d2:	bf00      	nop
 801c5d4:	3710      	adds	r7, #16
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}

0801c5da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b082      	sub	sp, #8
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d00c      	beq.n	801c602 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	685b      	ldr	r3, [r3, #4]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d004      	beq.n	801c5fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	685b      	ldr	r3, [r3, #4]
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7fe fac5 	bl	801ab84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801c5fa:	6879      	ldr	r1, [r7, #4]
 801c5fc:	2003      	movs	r0, #3
 801c5fe:	f7fd fbc9 	bl	8019d94 <memp_free>
  }
}
 801c602:	bf00      	nop
 801c604:	3708      	adds	r7, #8
 801c606:	46bd      	mov	sp, r7
 801c608:	bd80      	pop	{r7, pc}
	...

0801c60c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b084      	sub	sp, #16
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d106      	bne.n	801c628 <tcp_seg_copy+0x1c>
 801c61a:	4b0f      	ldr	r3, [pc, #60]	@ (801c658 <tcp_seg_copy+0x4c>)
 801c61c:	f240 6282 	movw	r2, #1666	@ 0x682
 801c620:	490e      	ldr	r1, [pc, #56]	@ (801c65c <tcp_seg_copy+0x50>)
 801c622:	480f      	ldr	r0, [pc, #60]	@ (801c660 <tcp_seg_copy+0x54>)
 801c624:	f006 f988 	bl	8022938 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801c628:	2003      	movs	r0, #3
 801c62a:	f7fd fb3d 	bl	8019ca8 <memp_malloc>
 801c62e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d101      	bne.n	801c63a <tcp_seg_copy+0x2e>
    return NULL;
 801c636:	2300      	movs	r3, #0
 801c638:	e00a      	b.n	801c650 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801c63a:	2210      	movs	r2, #16
 801c63c:	6879      	ldr	r1, [r7, #4]
 801c63e:	68f8      	ldr	r0, [r7, #12]
 801c640:	f006 fbb1 	bl	8022da6 <memcpy>
  pbuf_ref(cseg->p);
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	685b      	ldr	r3, [r3, #4]
 801c648:	4618      	mov	r0, r3
 801c64a:	f7fe fb41 	bl	801acd0 <pbuf_ref>
  return cseg;
 801c64e:	68fb      	ldr	r3, [r7, #12]
}
 801c650:	4618      	mov	r0, r3
 801c652:	3710      	adds	r7, #16
 801c654:	46bd      	mov	sp, r7
 801c656:	bd80      	pop	{r7, pc}
 801c658:	08026ad0 	.word	0x08026ad0
 801c65c:	08027068 	.word	0x08027068
 801c660:	08026b58 	.word	0x08026b58

0801c664 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b084      	sub	sp, #16
 801c668:	af00      	add	r7, sp, #0
 801c66a:	60f8      	str	r0, [r7, #12]
 801c66c:	60b9      	str	r1, [r7, #8]
 801c66e:	607a      	str	r2, [r7, #4]
 801c670:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c672:	68bb      	ldr	r3, [r7, #8]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d109      	bne.n	801c68c <tcp_recv_null+0x28>
 801c678:	4b12      	ldr	r3, [pc, #72]	@ (801c6c4 <tcp_recv_null+0x60>)
 801c67a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801c67e:	4912      	ldr	r1, [pc, #72]	@ (801c6c8 <tcp_recv_null+0x64>)
 801c680:	4812      	ldr	r0, [pc, #72]	@ (801c6cc <tcp_recv_null+0x68>)
 801c682:	f006 f959 	bl	8022938 <iprintf>
 801c686:	f06f 030f 	mvn.w	r3, #15
 801c68a:	e016      	b.n	801c6ba <tcp_recv_null+0x56>

  if (p != NULL) {
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d009      	beq.n	801c6a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	891b      	ldrh	r3, [r3, #8]
 801c696:	4619      	mov	r1, r3
 801c698:	68b8      	ldr	r0, [r7, #8]
 801c69a:	f7ff facd 	bl	801bc38 <tcp_recved>
    pbuf_free(p);
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	f7fe fa70 	bl	801ab84 <pbuf_free>
 801c6a4:	e008      	b.n	801c6b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801c6a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d104      	bne.n	801c6b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801c6ae:	68b8      	ldr	r0, [r7, #8]
 801c6b0:	f7fe ffb4 	bl	801b61c <tcp_close>
 801c6b4:	4603      	mov	r3, r0
 801c6b6:	e000      	b.n	801c6ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801c6b8:	2300      	movs	r3, #0
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	3710      	adds	r7, #16
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bd80      	pop	{r7, pc}
 801c6c2:	bf00      	nop
 801c6c4:	08026ad0 	.word	0x08026ad0
 801c6c8:	08027084 	.word	0x08027084
 801c6cc:	08026b58 	.word	0x08026b58

0801c6d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b086      	sub	sp, #24
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c6da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	db01      	blt.n	801c6e6 <tcp_kill_prio+0x16>
 801c6e2:	79fb      	ldrb	r3, [r7, #7]
 801c6e4:	e000      	b.n	801c6e8 <tcp_kill_prio+0x18>
 801c6e6:	237f      	movs	r3, #127	@ 0x7f
 801c6e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801c6ea:	7afb      	ldrb	r3, [r7, #11]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d034      	beq.n	801c75a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801c6f0:	7afb      	ldrb	r3, [r7, #11]
 801c6f2:	3b01      	subs	r3, #1
 801c6f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c6fe:	4b19      	ldr	r3, [pc, #100]	@ (801c764 <tcp_kill_prio+0x94>)
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	617b      	str	r3, [r7, #20]
 801c704:	e01f      	b.n	801c746 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801c706:	697b      	ldr	r3, [r7, #20]
 801c708:	7d5b      	ldrb	r3, [r3, #21]
 801c70a:	7afa      	ldrb	r2, [r7, #11]
 801c70c:	429a      	cmp	r2, r3
 801c70e:	d80c      	bhi.n	801c72a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c710:	697b      	ldr	r3, [r7, #20]
 801c712:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801c714:	7afa      	ldrb	r2, [r7, #11]
 801c716:	429a      	cmp	r2, r3
 801c718:	d112      	bne.n	801c740 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c71a:	4b13      	ldr	r3, [pc, #76]	@ (801c768 <tcp_kill_prio+0x98>)
 801c71c:	681a      	ldr	r2, [r3, #0]
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	6a1b      	ldr	r3, [r3, #32]
 801c722:	1ad3      	subs	r3, r2, r3
 801c724:	68fa      	ldr	r2, [r7, #12]
 801c726:	429a      	cmp	r2, r3
 801c728:	d80a      	bhi.n	801c740 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801c72a:	4b0f      	ldr	r3, [pc, #60]	@ (801c768 <tcp_kill_prio+0x98>)
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	6a1b      	ldr	r3, [r3, #32]
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801c736:	697b      	ldr	r3, [r7, #20]
 801c738:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801c73a:	697b      	ldr	r3, [r7, #20]
 801c73c:	7d5b      	ldrb	r3, [r3, #21]
 801c73e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c740:	697b      	ldr	r3, [r7, #20]
 801c742:	68db      	ldr	r3, [r3, #12]
 801c744:	617b      	str	r3, [r7, #20]
 801c746:	697b      	ldr	r3, [r7, #20]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d1dc      	bne.n	801c706 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801c74c:	693b      	ldr	r3, [r7, #16]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d004      	beq.n	801c75c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801c752:	6938      	ldr	r0, [r7, #16]
 801c754:	f7ff f8a8 	bl	801b8a8 <tcp_abort>
 801c758:	e000      	b.n	801c75c <tcp_kill_prio+0x8c>
    return;
 801c75a:	bf00      	nop
  }
}
 801c75c:	3718      	adds	r7, #24
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}
 801c762:	bf00      	nop
 801c764:	20010024 	.word	0x20010024
 801c768:	20010018 	.word	0x20010018

0801c76c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b086      	sub	sp, #24
 801c770:	af00      	add	r7, sp, #0
 801c772:	4603      	mov	r3, r0
 801c774:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801c776:	79fb      	ldrb	r3, [r7, #7]
 801c778:	2b08      	cmp	r3, #8
 801c77a:	d009      	beq.n	801c790 <tcp_kill_state+0x24>
 801c77c:	79fb      	ldrb	r3, [r7, #7]
 801c77e:	2b09      	cmp	r3, #9
 801c780:	d006      	beq.n	801c790 <tcp_kill_state+0x24>
 801c782:	4b1a      	ldr	r3, [pc, #104]	@ (801c7ec <tcp_kill_state+0x80>)
 801c784:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801c788:	4919      	ldr	r1, [pc, #100]	@ (801c7f0 <tcp_kill_state+0x84>)
 801c78a:	481a      	ldr	r0, [pc, #104]	@ (801c7f4 <tcp_kill_state+0x88>)
 801c78c:	f006 f8d4 	bl	8022938 <iprintf>

  inactivity = 0;
 801c790:	2300      	movs	r3, #0
 801c792:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801c794:	2300      	movs	r3, #0
 801c796:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c798:	4b17      	ldr	r3, [pc, #92]	@ (801c7f8 <tcp_kill_state+0x8c>)
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	617b      	str	r3, [r7, #20]
 801c79e:	e017      	b.n	801c7d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	7d1b      	ldrb	r3, [r3, #20]
 801c7a4:	79fa      	ldrb	r2, [r7, #7]
 801c7a6:	429a      	cmp	r2, r3
 801c7a8:	d10f      	bne.n	801c7ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7aa:	4b14      	ldr	r3, [pc, #80]	@ (801c7fc <tcp_kill_state+0x90>)
 801c7ac:	681a      	ldr	r2, [r3, #0]
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	6a1b      	ldr	r3, [r3, #32]
 801c7b2:	1ad3      	subs	r3, r2, r3
 801c7b4:	68fa      	ldr	r2, [r7, #12]
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d807      	bhi.n	801c7ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801c7ba:	4b10      	ldr	r3, [pc, #64]	@ (801c7fc <tcp_kill_state+0x90>)
 801c7bc:	681a      	ldr	r2, [r3, #0]
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	6a1b      	ldr	r3, [r3, #32]
 801c7c2:	1ad3      	subs	r3, r2, r3
 801c7c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801c7c6:	697b      	ldr	r3, [r7, #20]
 801c7c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	68db      	ldr	r3, [r3, #12]
 801c7ce:	617b      	str	r3, [r7, #20]
 801c7d0:	697b      	ldr	r3, [r7, #20]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d1e4      	bne.n	801c7a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d003      	beq.n	801c7e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801c7dc:	2100      	movs	r1, #0
 801c7de:	6938      	ldr	r0, [r7, #16]
 801c7e0:	f7fe ffa4 	bl	801b72c <tcp_abandon>
  }
}
 801c7e4:	bf00      	nop
 801c7e6:	3718      	adds	r7, #24
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	bd80      	pop	{r7, pc}
 801c7ec:	08026ad0 	.word	0x08026ad0
 801c7f0:	080270a0 	.word	0x080270a0
 801c7f4:	08026b58 	.word	0x08026b58
 801c7f8:	20010024 	.word	0x20010024
 801c7fc:	20010018 	.word	0x20010018

0801c800 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b084      	sub	sp, #16
 801c804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801c806:	2300      	movs	r3, #0
 801c808:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801c80a:	2300      	movs	r3, #0
 801c80c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c80e:	4b12      	ldr	r3, [pc, #72]	@ (801c858 <tcp_kill_timewait+0x58>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	60fb      	str	r3, [r7, #12]
 801c814:	e012      	b.n	801c83c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c816:	4b11      	ldr	r3, [pc, #68]	@ (801c85c <tcp_kill_timewait+0x5c>)
 801c818:	681a      	ldr	r2, [r3, #0]
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	6a1b      	ldr	r3, [r3, #32]
 801c81e:	1ad3      	subs	r3, r2, r3
 801c820:	687a      	ldr	r2, [r7, #4]
 801c822:	429a      	cmp	r2, r3
 801c824:	d807      	bhi.n	801c836 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801c826:	4b0d      	ldr	r3, [pc, #52]	@ (801c85c <tcp_kill_timewait+0x5c>)
 801c828:	681a      	ldr	r2, [r3, #0]
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	6a1b      	ldr	r3, [r3, #32]
 801c82e:	1ad3      	subs	r3, r2, r3
 801c830:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	68db      	ldr	r3, [r3, #12]
 801c83a:	60fb      	str	r3, [r7, #12]
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d1e9      	bne.n	801c816 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d002      	beq.n	801c84e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801c848:	68b8      	ldr	r0, [r7, #8]
 801c84a:	f7ff f82d 	bl	801b8a8 <tcp_abort>
  }
}
 801c84e:	bf00      	nop
 801c850:	3710      	adds	r7, #16
 801c852:	46bd      	mov	sp, r7
 801c854:	bd80      	pop	{r7, pc}
 801c856:	bf00      	nop
 801c858:	20010028 	.word	0x20010028
 801c85c:	20010018 	.word	0x20010018

0801c860 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c866:	4b10      	ldr	r3, [pc, #64]	@ (801c8a8 <tcp_handle_closepend+0x48>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c86c:	e014      	b.n	801c898 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	68db      	ldr	r3, [r3, #12]
 801c872:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	8b5b      	ldrh	r3, [r3, #26]
 801c878:	f003 0308 	and.w	r3, r3, #8
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d009      	beq.n	801c894 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	8b5b      	ldrh	r3, [r3, #26]
 801c884:	f023 0308 	bic.w	r3, r3, #8
 801c888:	b29a      	uxth	r2, r3
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801c88e:	6878      	ldr	r0, [r7, #4]
 801c890:	f7fe fe5a 	bl	801b548 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801c894:	683b      	ldr	r3, [r7, #0]
 801c896:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d1e7      	bne.n	801c86e <tcp_handle_closepend+0xe>
  }
}
 801c89e:	bf00      	nop
 801c8a0:	bf00      	nop
 801c8a2:	3708      	adds	r7, #8
 801c8a4:	46bd      	mov	sp, r7
 801c8a6:	bd80      	pop	{r7, pc}
 801c8a8:	20010024 	.word	0x20010024

0801c8ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b084      	sub	sp, #16
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8b6:	2001      	movs	r0, #1
 801c8b8:	f7fd f9f6 	bl	8019ca8 <memp_malloc>
 801c8bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d126      	bne.n	801c912 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801c8c4:	f7ff ffcc 	bl	801c860 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801c8c8:	f7ff ff9a 	bl	801c800 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8cc:	2001      	movs	r0, #1
 801c8ce:	f7fd f9eb 	bl	8019ca8 <memp_malloc>
 801c8d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d11b      	bne.n	801c912 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801c8da:	2009      	movs	r0, #9
 801c8dc:	f7ff ff46 	bl	801c76c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8e0:	2001      	movs	r0, #1
 801c8e2:	f7fd f9e1 	bl	8019ca8 <memp_malloc>
 801c8e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d111      	bne.n	801c912 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801c8ee:	2008      	movs	r0, #8
 801c8f0:	f7ff ff3c 	bl	801c76c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8f4:	2001      	movs	r0, #1
 801c8f6:	f7fd f9d7 	bl	8019ca8 <memp_malloc>
 801c8fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d107      	bne.n	801c912 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801c902:	79fb      	ldrb	r3, [r7, #7]
 801c904:	4618      	mov	r0, r3
 801c906:	f7ff fee3 	bl	801c6d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c90a:	2001      	movs	r0, #1
 801c90c:	f7fd f9cc 	bl	8019ca8 <memp_malloc>
 801c910:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	2b00      	cmp	r3, #0
 801c916:	d03f      	beq.n	801c998 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c918:	229c      	movs	r2, #156	@ 0x9c
 801c91a:	2100      	movs	r1, #0
 801c91c:	68f8      	ldr	r0, [r7, #12]
 801c91e:	f006 f99d 	bl	8022c5c <memset>
    pcb->prio = prio;
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	79fa      	ldrb	r2, [r7, #7]
 801c926:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c92e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c938:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	22ff      	movs	r2, #255	@ 0xff
 801c946:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c94e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	2206      	movs	r2, #6
 801c954:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	2206      	movs	r2, #6
 801c95c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c964:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	2201      	movs	r2, #1
 801c96a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801c96e:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a4 <tcp_alloc+0xf8>)
 801c970:	681a      	ldr	r2, [r3, #0]
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801c976:	4b0c      	ldr	r3, [pc, #48]	@ (801c9a8 <tcp_alloc+0xfc>)
 801c978:	781a      	ldrb	r2, [r3, #0]
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801c984:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	4a08      	ldr	r2, [pc, #32]	@ (801c9ac <tcp_alloc+0x100>)
 801c98c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	4a07      	ldr	r2, [pc, #28]	@ (801c9b0 <tcp_alloc+0x104>)
 801c994:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801c998:	68fb      	ldr	r3, [r7, #12]
}
 801c99a:	4618      	mov	r0, r3
 801c99c:	3710      	adds	r7, #16
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	20010018 	.word	0x20010018
 801c9a8:	2001002e 	.word	0x2001002e
 801c9ac:	0801c665 	.word	0x0801c665
 801c9b0:	006ddd00 	.word	0x006ddd00

0801c9b4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	b084      	sub	sp, #16
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	4603      	mov	r3, r0
 801c9bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c9be:	2040      	movs	r0, #64	@ 0x40
 801c9c0:	f7ff ff74 	bl	801c8ac <tcp_alloc>
 801c9c4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c9c6:	68fb      	ldr	r3, [r7, #12]
}
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	3710      	adds	r7, #16
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd80      	pop	{r7, pc}

0801c9d0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801c9d0:	b480      	push	{r7}
 801c9d2:	b083      	sub	sp, #12
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	6078      	str	r0, [r7, #4]
 801c9d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d002      	beq.n	801c9e6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	683a      	ldr	r2, [r7, #0]
 801c9e4:	611a      	str	r2, [r3, #16]
  }
}
 801c9e6:	bf00      	nop
 801c9e8:	370c      	adds	r7, #12
 801c9ea:	46bd      	mov	sp, r7
 801c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f0:	4770      	bx	lr
	...

0801c9f4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b082      	sub	sp, #8
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
 801c9fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d00e      	beq.n	801ca22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	7d1b      	ldrb	r3, [r3, #20]
 801ca08:	2b01      	cmp	r3, #1
 801ca0a:	d106      	bne.n	801ca1a <tcp_recv+0x26>
 801ca0c:	4b07      	ldr	r3, [pc, #28]	@ (801ca2c <tcp_recv+0x38>)
 801ca0e:	f240 72df 	movw	r2, #2015	@ 0x7df
 801ca12:	4907      	ldr	r1, [pc, #28]	@ (801ca30 <tcp_recv+0x3c>)
 801ca14:	4807      	ldr	r0, [pc, #28]	@ (801ca34 <tcp_recv+0x40>)
 801ca16:	f005 ff8f 	bl	8022938 <iprintf>
    pcb->recv = recv;
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	683a      	ldr	r2, [r7, #0]
 801ca1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801ca22:	bf00      	nop
 801ca24:	3708      	adds	r7, #8
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	08026ad0 	.word	0x08026ad0
 801ca30:	080270b0 	.word	0x080270b0
 801ca34:	08026b58 	.word	0x08026b58

0801ca38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b082      	sub	sp, #8
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
 801ca40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d00e      	beq.n	801ca66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	7d1b      	ldrb	r3, [r3, #20]
 801ca4c:	2b01      	cmp	r3, #1
 801ca4e:	d106      	bne.n	801ca5e <tcp_sent+0x26>
 801ca50:	4b07      	ldr	r3, [pc, #28]	@ (801ca70 <tcp_sent+0x38>)
 801ca52:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801ca56:	4907      	ldr	r1, [pc, #28]	@ (801ca74 <tcp_sent+0x3c>)
 801ca58:	4807      	ldr	r0, [pc, #28]	@ (801ca78 <tcp_sent+0x40>)
 801ca5a:	f005 ff6d 	bl	8022938 <iprintf>
    pcb->sent = sent;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	683a      	ldr	r2, [r7, #0]
 801ca62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801ca66:	bf00      	nop
 801ca68:	3708      	adds	r7, #8
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	bd80      	pop	{r7, pc}
 801ca6e:	bf00      	nop
 801ca70:	08026ad0 	.word	0x08026ad0
 801ca74:	080270d8 	.word	0x080270d8
 801ca78:	08026b58 	.word	0x08026b58

0801ca7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d00e      	beq.n	801caaa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	7d1b      	ldrb	r3, [r3, #20]
 801ca90:	2b01      	cmp	r3, #1
 801ca92:	d106      	bne.n	801caa2 <tcp_err+0x26>
 801ca94:	4b07      	ldr	r3, [pc, #28]	@ (801cab4 <tcp_err+0x38>)
 801ca96:	f640 020d 	movw	r2, #2061	@ 0x80d
 801ca9a:	4907      	ldr	r1, [pc, #28]	@ (801cab8 <tcp_err+0x3c>)
 801ca9c:	4807      	ldr	r0, [pc, #28]	@ (801cabc <tcp_err+0x40>)
 801ca9e:	f005 ff4b 	bl	8022938 <iprintf>
    pcb->errf = err;
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	683a      	ldr	r2, [r7, #0]
 801caa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801caaa:	bf00      	nop
 801caac:	3708      	adds	r7, #8
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}
 801cab2:	bf00      	nop
 801cab4:	08026ad0 	.word	0x08026ad0
 801cab8:	08027100 	.word	0x08027100
 801cabc:	08026b58 	.word	0x08026b58

0801cac0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801cac0:	b480      	push	{r7}
 801cac2:	b085      	sub	sp, #20
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]
 801cac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d008      	beq.n	801cae2 <tcp_accept+0x22>
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	7d1b      	ldrb	r3, [r3, #20]
 801cad4:	2b01      	cmp	r3, #1
 801cad6:	d104      	bne.n	801cae2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	683a      	ldr	r2, [r7, #0]
 801cae0:	619a      	str	r2, [r3, #24]
  }
}
 801cae2:	bf00      	nop
 801cae4:	3714      	adds	r7, #20
 801cae6:	46bd      	mov	sp, r7
 801cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caec:	4770      	bx	lr
	...

0801caf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b084      	sub	sp, #16
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	60f8      	str	r0, [r7, #12]
 801caf8:	60b9      	str	r1, [r7, #8]
 801cafa:	4613      	mov	r3, r2
 801cafc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d107      	bne.n	801cb14 <tcp_poll+0x24>
 801cb04:	4b0e      	ldr	r3, [pc, #56]	@ (801cb40 <tcp_poll+0x50>)
 801cb06:	f640 023d 	movw	r2, #2109	@ 0x83d
 801cb0a:	490e      	ldr	r1, [pc, #56]	@ (801cb44 <tcp_poll+0x54>)
 801cb0c:	480e      	ldr	r0, [pc, #56]	@ (801cb48 <tcp_poll+0x58>)
 801cb0e:	f005 ff13 	bl	8022938 <iprintf>
 801cb12:	e011      	b.n	801cb38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	7d1b      	ldrb	r3, [r3, #20]
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	d106      	bne.n	801cb2a <tcp_poll+0x3a>
 801cb1c:	4b08      	ldr	r3, [pc, #32]	@ (801cb40 <tcp_poll+0x50>)
 801cb1e:	f640 023e 	movw	r2, #2110	@ 0x83e
 801cb22:	490a      	ldr	r1, [pc, #40]	@ (801cb4c <tcp_poll+0x5c>)
 801cb24:	4808      	ldr	r0, [pc, #32]	@ (801cb48 <tcp_poll+0x58>)
 801cb26:	f005 ff07 	bl	8022938 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	68ba      	ldr	r2, [r7, #8]
 801cb2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	79fa      	ldrb	r2, [r7, #7]
 801cb36:	775a      	strb	r2, [r3, #29]
}
 801cb38:	3710      	adds	r7, #16
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bd80      	pop	{r7, pc}
 801cb3e:	bf00      	nop
 801cb40:	08026ad0 	.word	0x08026ad0
 801cb44:	08027128 	.word	0x08027128
 801cb48:	08026b58 	.word	0x08026b58
 801cb4c:	08027140 	.word	0x08027140

0801cb50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b082      	sub	sp, #8
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d107      	bne.n	801cb6e <tcp_pcb_purge+0x1e>
 801cb5e:	4b21      	ldr	r3, [pc, #132]	@ (801cbe4 <tcp_pcb_purge+0x94>)
 801cb60:	f640 0251 	movw	r2, #2129	@ 0x851
 801cb64:	4920      	ldr	r1, [pc, #128]	@ (801cbe8 <tcp_pcb_purge+0x98>)
 801cb66:	4821      	ldr	r0, [pc, #132]	@ (801cbec <tcp_pcb_purge+0x9c>)
 801cb68:	f005 fee6 	bl	8022938 <iprintf>
 801cb6c:	e037      	b.n	801cbde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	7d1b      	ldrb	r3, [r3, #20]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d033      	beq.n	801cbde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801cb7a:	2b0a      	cmp	r3, #10
 801cb7c:	d02f      	beq.n	801cbde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801cb82:	2b01      	cmp	r3, #1
 801cb84:	d02b      	beq.n	801cbde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d007      	beq.n	801cb9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb92:	4618      	mov	r0, r3
 801cb94:	f7fd fff6 	bl	801ab84 <pbuf_free>
      pcb->refused_data = NULL;
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d002      	beq.n	801cbac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801cba6:	6878      	ldr	r0, [r7, #4]
 801cba8:	f000 f986 	bl	801ceb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cbb2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f7ff fcf9 	bl	801c5b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f7ff fcf4 	bl	801c5b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	2200      	movs	r2, #0
 801cbcc:	66da      	str	r2, [r3, #108]	@ 0x6c
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	2200      	movs	r2, #0
 801cbda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801cbde:	3708      	adds	r7, #8
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	bd80      	pop	{r7, pc}
 801cbe4:	08026ad0 	.word	0x08026ad0
 801cbe8:	08027160 	.word	0x08027160
 801cbec:	08026b58 	.word	0x08026b58

0801cbf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b084      	sub	sp, #16
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801cbfa:	683b      	ldr	r3, [r7, #0]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d106      	bne.n	801cc0e <tcp_pcb_remove+0x1e>
 801cc00:	4b3e      	ldr	r3, [pc, #248]	@ (801ccfc <tcp_pcb_remove+0x10c>)
 801cc02:	f640 0283 	movw	r2, #2179	@ 0x883
 801cc06:	493e      	ldr	r1, [pc, #248]	@ (801cd00 <tcp_pcb_remove+0x110>)
 801cc08:	483e      	ldr	r0, [pc, #248]	@ (801cd04 <tcp_pcb_remove+0x114>)
 801cc0a:	f005 fe95 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d106      	bne.n	801cc22 <tcp_pcb_remove+0x32>
 801cc14:	4b39      	ldr	r3, [pc, #228]	@ (801ccfc <tcp_pcb_remove+0x10c>)
 801cc16:	f640 0284 	movw	r2, #2180	@ 0x884
 801cc1a:	493b      	ldr	r1, [pc, #236]	@ (801cd08 <tcp_pcb_remove+0x118>)
 801cc1c:	4839      	ldr	r0, [pc, #228]	@ (801cd04 <tcp_pcb_remove+0x114>)
 801cc1e:	f005 fe8b 	bl	8022938 <iprintf>

  TCP_RMV(pcblist, pcb);
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	683a      	ldr	r2, [r7, #0]
 801cc28:	429a      	cmp	r2, r3
 801cc2a:	d105      	bne.n	801cc38 <tcp_pcb_remove+0x48>
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	68da      	ldr	r2, [r3, #12]
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	601a      	str	r2, [r3, #0]
 801cc36:	e013      	b.n	801cc60 <tcp_pcb_remove+0x70>
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	60fb      	str	r3, [r7, #12]
 801cc3e:	e00c      	b.n	801cc5a <tcp_pcb_remove+0x6a>
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	68db      	ldr	r3, [r3, #12]
 801cc44:	683a      	ldr	r2, [r7, #0]
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d104      	bne.n	801cc54 <tcp_pcb_remove+0x64>
 801cc4a:	683b      	ldr	r3, [r7, #0]
 801cc4c:	68da      	ldr	r2, [r3, #12]
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	60da      	str	r2, [r3, #12]
 801cc52:	e005      	b.n	801cc60 <tcp_pcb_remove+0x70>
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	68db      	ldr	r3, [r3, #12]
 801cc58:	60fb      	str	r3, [r7, #12]
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d1ef      	bne.n	801cc40 <tcp_pcb_remove+0x50>
 801cc60:	683b      	ldr	r3, [r7, #0]
 801cc62:	2200      	movs	r2, #0
 801cc64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801cc66:	6838      	ldr	r0, [r7, #0]
 801cc68:	f7ff ff72 	bl	801cb50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801cc6c:	683b      	ldr	r3, [r7, #0]
 801cc6e:	7d1b      	ldrb	r3, [r3, #20]
 801cc70:	2b0a      	cmp	r3, #10
 801cc72:	d013      	beq.n	801cc9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801cc74:	683b      	ldr	r3, [r7, #0]
 801cc76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801cc78:	2b01      	cmp	r3, #1
 801cc7a:	d00f      	beq.n	801cc9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	8b5b      	ldrh	r3, [r3, #26]
 801cc80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d009      	beq.n	801cc9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	8b5b      	ldrh	r3, [r3, #26]
 801cc8c:	f043 0302 	orr.w	r3, r3, #2
 801cc90:	b29a      	uxth	r2, r3
 801cc92:	683b      	ldr	r3, [r7, #0]
 801cc94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801cc96:	6838      	ldr	r0, [r7, #0]
 801cc98:	f003 fbc2 	bl	8020420 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801cc9c:	683b      	ldr	r3, [r7, #0]
 801cc9e:	7d1b      	ldrb	r3, [r3, #20]
 801cca0:	2b01      	cmp	r3, #1
 801cca2:	d020      	beq.n	801cce6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801cca4:	683b      	ldr	r3, [r7, #0]
 801cca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d006      	beq.n	801ccba <tcp_pcb_remove+0xca>
 801ccac:	4b13      	ldr	r3, [pc, #76]	@ (801ccfc <tcp_pcb_remove+0x10c>)
 801ccae:	f640 0293 	movw	r2, #2195	@ 0x893
 801ccb2:	4916      	ldr	r1, [pc, #88]	@ (801cd0c <tcp_pcb_remove+0x11c>)
 801ccb4:	4813      	ldr	r0, [pc, #76]	@ (801cd04 <tcp_pcb_remove+0x114>)
 801ccb6:	f005 fe3f 	bl	8022938 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801ccba:	683b      	ldr	r3, [r7, #0]
 801ccbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d006      	beq.n	801ccd0 <tcp_pcb_remove+0xe0>
 801ccc2:	4b0e      	ldr	r3, [pc, #56]	@ (801ccfc <tcp_pcb_remove+0x10c>)
 801ccc4:	f640 0294 	movw	r2, #2196	@ 0x894
 801ccc8:	4911      	ldr	r1, [pc, #68]	@ (801cd10 <tcp_pcb_remove+0x120>)
 801ccca:	480e      	ldr	r0, [pc, #56]	@ (801cd04 <tcp_pcb_remove+0x114>)
 801cccc:	f005 fe34 	bl	8022938 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801ccd0:	683b      	ldr	r3, [r7, #0]
 801ccd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d006      	beq.n	801cce6 <tcp_pcb_remove+0xf6>
 801ccd8:	4b08      	ldr	r3, [pc, #32]	@ (801ccfc <tcp_pcb_remove+0x10c>)
 801ccda:	f640 0296 	movw	r2, #2198	@ 0x896
 801ccde:	490d      	ldr	r1, [pc, #52]	@ (801cd14 <tcp_pcb_remove+0x124>)
 801cce0:	4808      	ldr	r0, [pc, #32]	@ (801cd04 <tcp_pcb_remove+0x114>)
 801cce2:	f005 fe29 	bl	8022938 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801cce6:	683b      	ldr	r3, [r7, #0]
 801cce8:	2200      	movs	r2, #0
 801ccea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801ccec:	683b      	ldr	r3, [r7, #0]
 801ccee:	2200      	movs	r2, #0
 801ccf0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801ccf2:	bf00      	nop
 801ccf4:	3710      	adds	r7, #16
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	bd80      	pop	{r7, pc}
 801ccfa:	bf00      	nop
 801ccfc:	08026ad0 	.word	0x08026ad0
 801cd00:	0802717c 	.word	0x0802717c
 801cd04:	08026b58 	.word	0x08026b58
 801cd08:	08027198 	.word	0x08027198
 801cd0c:	080271b8 	.word	0x080271b8
 801cd10:	080271d0 	.word	0x080271d0
 801cd14:	080271ec 	.word	0x080271ec

0801cd18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801cd18:	b580      	push	{r7, lr}
 801cd1a:	b082      	sub	sp, #8
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d106      	bne.n	801cd34 <tcp_next_iss+0x1c>
 801cd26:	4b0a      	ldr	r3, [pc, #40]	@ (801cd50 <tcp_next_iss+0x38>)
 801cd28:	f640 02af 	movw	r2, #2223	@ 0x8af
 801cd2c:	4909      	ldr	r1, [pc, #36]	@ (801cd54 <tcp_next_iss+0x3c>)
 801cd2e:	480a      	ldr	r0, [pc, #40]	@ (801cd58 <tcp_next_iss+0x40>)
 801cd30:	f005 fe02 	bl	8022938 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cd34:	4b09      	ldr	r3, [pc, #36]	@ (801cd5c <tcp_next_iss+0x44>)
 801cd36:	681a      	ldr	r2, [r3, #0]
 801cd38:	4b09      	ldr	r3, [pc, #36]	@ (801cd60 <tcp_next_iss+0x48>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	4413      	add	r3, r2
 801cd3e:	4a07      	ldr	r2, [pc, #28]	@ (801cd5c <tcp_next_iss+0x44>)
 801cd40:	6013      	str	r3, [r2, #0]
  return iss;
 801cd42:	4b06      	ldr	r3, [pc, #24]	@ (801cd5c <tcp_next_iss+0x44>)
 801cd44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	3708      	adds	r7, #8
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	bd80      	pop	{r7, pc}
 801cd4e:	bf00      	nop
 801cd50:	08026ad0 	.word	0x08026ad0
 801cd54:	08027204 	.word	0x08027204
 801cd58:	08026b58 	.word	0x08026b58
 801cd5c:	2000003c 	.word	0x2000003c
 801cd60:	20010018 	.word	0x20010018

0801cd64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b086      	sub	sp, #24
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
 801cd70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d106      	bne.n	801cd86 <tcp_eff_send_mss_netif+0x22>
 801cd78:	4b14      	ldr	r3, [pc, #80]	@ (801cdcc <tcp_eff_send_mss_netif+0x68>)
 801cd7a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801cd7e:	4914      	ldr	r1, [pc, #80]	@ (801cdd0 <tcp_eff_send_mss_netif+0x6c>)
 801cd80:	4814      	ldr	r0, [pc, #80]	@ (801cdd4 <tcp_eff_send_mss_netif+0x70>)
 801cd82:	f005 fdd9 	bl	8022938 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801cd86:	68bb      	ldr	r3, [r7, #8]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d101      	bne.n	801cd90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801cd8c:	89fb      	ldrh	r3, [r7, #14]
 801cd8e:	e019      	b.n	801cdc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801cd90:	68bb      	ldr	r3, [r7, #8]
 801cd92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cd94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cd96:	8afb      	ldrh	r3, [r7, #22]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d012      	beq.n	801cdc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801cd9c:	2328      	movs	r3, #40	@ 0x28
 801cd9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cda0:	8afa      	ldrh	r2, [r7, #22]
 801cda2:	8abb      	ldrh	r3, [r7, #20]
 801cda4:	429a      	cmp	r2, r3
 801cda6:	d904      	bls.n	801cdb2 <tcp_eff_send_mss_netif+0x4e>
 801cda8:	8afa      	ldrh	r2, [r7, #22]
 801cdaa:	8abb      	ldrh	r3, [r7, #20]
 801cdac:	1ad3      	subs	r3, r2, r3
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	e000      	b.n	801cdb4 <tcp_eff_send_mss_netif+0x50>
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cdb6:	8a7a      	ldrh	r2, [r7, #18]
 801cdb8:	89fb      	ldrh	r3, [r7, #14]
 801cdba:	4293      	cmp	r3, r2
 801cdbc:	bf28      	it	cs
 801cdbe:	4613      	movcs	r3, r2
 801cdc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801cdc2:	89fb      	ldrh	r3, [r7, #14]
}
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	3718      	adds	r7, #24
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	08026ad0 	.word	0x08026ad0
 801cdd0:	08027220 	.word	0x08027220
 801cdd4:	08026b58 	.word	0x08026b58

0801cdd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	b084      	sub	sp, #16
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	6078      	str	r0, [r7, #4]
 801cde0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d119      	bne.n	801ce20 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801cdec:	4b10      	ldr	r3, [pc, #64]	@ (801ce30 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801cdee:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801cdf2:	4910      	ldr	r1, [pc, #64]	@ (801ce34 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801cdf4:	4810      	ldr	r0, [pc, #64]	@ (801ce38 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801cdf6:	f005 fd9f 	bl	8022938 <iprintf>

  while (pcb != NULL) {
 801cdfa:	e011      	b.n	801ce20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	681a      	ldr	r2, [r3, #0]
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d108      	bne.n	801ce1a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	68db      	ldr	r3, [r3, #12]
 801ce0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801ce0e:	68f8      	ldr	r0, [r7, #12]
 801ce10:	f7fe fd4a 	bl	801b8a8 <tcp_abort>
      pcb = next;
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	60fb      	str	r3, [r7, #12]
 801ce18:	e002      	b.n	801ce20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	68db      	ldr	r3, [r3, #12]
 801ce1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d1ea      	bne.n	801cdfc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ce26:	bf00      	nop
 801ce28:	bf00      	nop
 801ce2a:	3710      	adds	r7, #16
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}
 801ce30:	08026ad0 	.word	0x08026ad0
 801ce34:	08027248 	.word	0x08027248
 801ce38:	08026b58 	.word	0x08026b58

0801ce3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce3c:	b580      	push	{r7, lr}
 801ce3e:	b084      	sub	sp, #16
 801ce40:	af00      	add	r7, sp, #0
 801ce42:	6078      	str	r0, [r7, #4]
 801ce44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d02a      	beq.n	801cea2 <tcp_netif_ip_addr_changed+0x66>
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d026      	beq.n	801cea2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ce54:	4b15      	ldr	r3, [pc, #84]	@ (801ceac <tcp_netif_ip_addr_changed+0x70>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	4619      	mov	r1, r3
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f7ff ffbc 	bl	801cdd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801ce60:	4b13      	ldr	r3, [pc, #76]	@ (801ceb0 <tcp_netif_ip_addr_changed+0x74>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	4619      	mov	r1, r3
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f7ff ffb6 	bl	801cdd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ce6c:	683b      	ldr	r3, [r7, #0]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d017      	beq.n	801cea2 <tcp_netif_ip_addr_changed+0x66>
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d013      	beq.n	801cea2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ce7a:	4b0e      	ldr	r3, [pc, #56]	@ (801ceb4 <tcp_netif_ip_addr_changed+0x78>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	60fb      	str	r3, [r7, #12]
 801ce80:	e00c      	b.n	801ce9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	681a      	ldr	r2, [r3, #0]
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	429a      	cmp	r2, r3
 801ce8c:	d103      	bne.n	801ce96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	681a      	ldr	r2, [r3, #0]
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	68db      	ldr	r3, [r3, #12]
 801ce9a:	60fb      	str	r3, [r7, #12]
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d1ef      	bne.n	801ce82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801cea2:	bf00      	nop
 801cea4:	3710      	adds	r7, #16
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd80      	pop	{r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	20010024 	.word	0x20010024
 801ceb0:	2001001c 	.word	0x2001001c
 801ceb4:	20010020 	.word	0x20010020

0801ceb8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b082      	sub	sp, #8
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d007      	beq.n	801ced8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cecc:	4618      	mov	r0, r3
 801cece:	f7ff fb6f 	bl	801c5b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2200      	movs	r2, #0
 801ced6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801ced8:	bf00      	nop
 801ceda:	3708      	adds	r7, #8
 801cedc:	46bd      	mov	sp, r7
 801cede:	bd80      	pop	{r7, pc}

0801cee0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801cee0:	b590      	push	{r4, r7, lr}
 801cee2:	b08d      	sub	sp, #52	@ 0x34
 801cee4:	af04      	add	r7, sp, #16
 801cee6:	6078      	str	r0, [r7, #4]
 801cee8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d105      	bne.n	801cefc <tcp_input+0x1c>
 801cef0:	4b9b      	ldr	r3, [pc, #620]	@ (801d160 <tcp_input+0x280>)
 801cef2:	2283      	movs	r2, #131	@ 0x83
 801cef4:	499b      	ldr	r1, [pc, #620]	@ (801d164 <tcp_input+0x284>)
 801cef6:	489c      	ldr	r0, [pc, #624]	@ (801d168 <tcp_input+0x288>)
 801cef8:	f005 fd1e 	bl	8022938 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	685b      	ldr	r3, [r3, #4]
 801cf00:	4a9a      	ldr	r2, [pc, #616]	@ (801d16c <tcp_input+0x28c>)
 801cf02:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	895b      	ldrh	r3, [r3, #10]
 801cf08:	2b13      	cmp	r3, #19
 801cf0a:	f240 83d1 	bls.w	801d6b0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801cf0e:	4b98      	ldr	r3, [pc, #608]	@ (801d170 <tcp_input+0x290>)
 801cf10:	695b      	ldr	r3, [r3, #20]
 801cf12:	4a97      	ldr	r2, [pc, #604]	@ (801d170 <tcp_input+0x290>)
 801cf14:	6812      	ldr	r2, [r2, #0]
 801cf16:	4611      	mov	r1, r2
 801cf18:	4618      	mov	r0, r3
 801cf1a:	f7fb f9d7 	bl	80182cc <ip4_addr_isbroadcast_u32>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	f040 83c7 	bne.w	801d6b4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801cf26:	4b92      	ldr	r3, [pc, #584]	@ (801d170 <tcp_input+0x290>)
 801cf28:	695b      	ldr	r3, [r3, #20]
 801cf2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801cf2e:	2be0      	cmp	r3, #224	@ 0xe0
 801cf30:	f000 83c0 	beq.w	801d6b4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801cf34:	4b8d      	ldr	r3, [pc, #564]	@ (801d16c <tcp_input+0x28c>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	899b      	ldrh	r3, [r3, #12]
 801cf3a:	b29b      	uxth	r3, r3
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7fc f96f 	bl	8019220 <lwip_htons>
 801cf42:	4603      	mov	r3, r0
 801cf44:	0b1b      	lsrs	r3, r3, #12
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	b2db      	uxtb	r3, r3
 801cf4a:	009b      	lsls	r3, r3, #2
 801cf4c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801cf4e:	7cbb      	ldrb	r3, [r7, #18]
 801cf50:	2b13      	cmp	r3, #19
 801cf52:	f240 83b1 	bls.w	801d6b8 <tcp_input+0x7d8>
 801cf56:	7cbb      	ldrb	r3, [r7, #18]
 801cf58:	b29a      	uxth	r2, r3
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	891b      	ldrh	r3, [r3, #8]
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	f200 83aa 	bhi.w	801d6b8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801cf64:	7cbb      	ldrb	r3, [r7, #18]
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	3b14      	subs	r3, #20
 801cf6a:	b29a      	uxth	r2, r3
 801cf6c:	4b81      	ldr	r3, [pc, #516]	@ (801d174 <tcp_input+0x294>)
 801cf6e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801cf70:	4b81      	ldr	r3, [pc, #516]	@ (801d178 <tcp_input+0x298>)
 801cf72:	2200      	movs	r2, #0
 801cf74:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	895a      	ldrh	r2, [r3, #10]
 801cf7a:	7cbb      	ldrb	r3, [r7, #18]
 801cf7c:	b29b      	uxth	r3, r3
 801cf7e:	429a      	cmp	r2, r3
 801cf80:	d309      	bcc.n	801cf96 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801cf82:	4b7c      	ldr	r3, [pc, #496]	@ (801d174 <tcp_input+0x294>)
 801cf84:	881a      	ldrh	r2, [r3, #0]
 801cf86:	4b7d      	ldr	r3, [pc, #500]	@ (801d17c <tcp_input+0x29c>)
 801cf88:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cf8a:	7cbb      	ldrb	r3, [r7, #18]
 801cf8c:	4619      	mov	r1, r3
 801cf8e:	6878      	ldr	r0, [r7, #4]
 801cf90:	f7fd fd40 	bl	801aa14 <pbuf_remove_header>
 801cf94:	e04e      	b.n	801d034 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d105      	bne.n	801cfaa <tcp_input+0xca>
 801cf9e:	4b70      	ldr	r3, [pc, #448]	@ (801d160 <tcp_input+0x280>)
 801cfa0:	22c2      	movs	r2, #194	@ 0xc2
 801cfa2:	4977      	ldr	r1, [pc, #476]	@ (801d180 <tcp_input+0x2a0>)
 801cfa4:	4870      	ldr	r0, [pc, #448]	@ (801d168 <tcp_input+0x288>)
 801cfa6:	f005 fcc7 	bl	8022938 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801cfaa:	2114      	movs	r1, #20
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f7fd fd31 	bl	801aa14 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	895a      	ldrh	r2, [r3, #10]
 801cfb6:	4b71      	ldr	r3, [pc, #452]	@ (801d17c <tcp_input+0x29c>)
 801cfb8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801cfba:	4b6e      	ldr	r3, [pc, #440]	@ (801d174 <tcp_input+0x294>)
 801cfbc:	881a      	ldrh	r2, [r3, #0]
 801cfbe:	4b6f      	ldr	r3, [pc, #444]	@ (801d17c <tcp_input+0x29c>)
 801cfc0:	881b      	ldrh	r3, [r3, #0]
 801cfc2:	1ad3      	subs	r3, r2, r3
 801cfc4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801cfc6:	4b6d      	ldr	r3, [pc, #436]	@ (801d17c <tcp_input+0x29c>)
 801cfc8:	881b      	ldrh	r3, [r3, #0]
 801cfca:	4619      	mov	r1, r3
 801cfcc:	6878      	ldr	r0, [r7, #4]
 801cfce:	f7fd fd21 	bl	801aa14 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	895b      	ldrh	r3, [r3, #10]
 801cfd8:	8a3a      	ldrh	r2, [r7, #16]
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	f200 836e 	bhi.w	801d6bc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	685b      	ldr	r3, [r3, #4]
 801cfe6:	4a64      	ldr	r2, [pc, #400]	@ (801d178 <tcp_input+0x298>)
 801cfe8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	8a3a      	ldrh	r2, [r7, #16]
 801cff0:	4611      	mov	r1, r2
 801cff2:	4618      	mov	r0, r3
 801cff4:	f7fd fd0e 	bl	801aa14 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	891a      	ldrh	r2, [r3, #8]
 801cffc:	8a3b      	ldrh	r3, [r7, #16]
 801cffe:	1ad3      	subs	r3, r2, r3
 801d000:	b29a      	uxth	r2, r3
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	895b      	ldrh	r3, [r3, #10]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d005      	beq.n	801d01a <tcp_input+0x13a>
 801d00e:	4b54      	ldr	r3, [pc, #336]	@ (801d160 <tcp_input+0x280>)
 801d010:	22df      	movs	r2, #223	@ 0xdf
 801d012:	495c      	ldr	r1, [pc, #368]	@ (801d184 <tcp_input+0x2a4>)
 801d014:	4854      	ldr	r0, [pc, #336]	@ (801d168 <tcp_input+0x288>)
 801d016:	f005 fc8f 	bl	8022938 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	891a      	ldrh	r2, [r3, #8]
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	891b      	ldrh	r3, [r3, #8]
 801d024:	429a      	cmp	r2, r3
 801d026:	d005      	beq.n	801d034 <tcp_input+0x154>
 801d028:	4b4d      	ldr	r3, [pc, #308]	@ (801d160 <tcp_input+0x280>)
 801d02a:	22e0      	movs	r2, #224	@ 0xe0
 801d02c:	4956      	ldr	r1, [pc, #344]	@ (801d188 <tcp_input+0x2a8>)
 801d02e:	484e      	ldr	r0, [pc, #312]	@ (801d168 <tcp_input+0x288>)
 801d030:	f005 fc82 	bl	8022938 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d034:	4b4d      	ldr	r3, [pc, #308]	@ (801d16c <tcp_input+0x28c>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	881b      	ldrh	r3, [r3, #0]
 801d03a:	b29b      	uxth	r3, r3
 801d03c:	4a4b      	ldr	r2, [pc, #300]	@ (801d16c <tcp_input+0x28c>)
 801d03e:	6814      	ldr	r4, [r2, #0]
 801d040:	4618      	mov	r0, r3
 801d042:	f7fc f8ed 	bl	8019220 <lwip_htons>
 801d046:	4603      	mov	r3, r0
 801d048:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d04a:	4b48      	ldr	r3, [pc, #288]	@ (801d16c <tcp_input+0x28c>)
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	885b      	ldrh	r3, [r3, #2]
 801d050:	b29b      	uxth	r3, r3
 801d052:	4a46      	ldr	r2, [pc, #280]	@ (801d16c <tcp_input+0x28c>)
 801d054:	6814      	ldr	r4, [r2, #0]
 801d056:	4618      	mov	r0, r3
 801d058:	f7fc f8e2 	bl	8019220 <lwip_htons>
 801d05c:	4603      	mov	r3, r0
 801d05e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d060:	4b42      	ldr	r3, [pc, #264]	@ (801d16c <tcp_input+0x28c>)
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	685b      	ldr	r3, [r3, #4]
 801d066:	4a41      	ldr	r2, [pc, #260]	@ (801d16c <tcp_input+0x28c>)
 801d068:	6814      	ldr	r4, [r2, #0]
 801d06a:	4618      	mov	r0, r3
 801d06c:	f7fc f8ed 	bl	801924a <lwip_htonl>
 801d070:	4603      	mov	r3, r0
 801d072:	6063      	str	r3, [r4, #4]
 801d074:	6863      	ldr	r3, [r4, #4]
 801d076:	4a45      	ldr	r2, [pc, #276]	@ (801d18c <tcp_input+0x2ac>)
 801d078:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d07a:	4b3c      	ldr	r3, [pc, #240]	@ (801d16c <tcp_input+0x28c>)
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	689b      	ldr	r3, [r3, #8]
 801d080:	4a3a      	ldr	r2, [pc, #232]	@ (801d16c <tcp_input+0x28c>)
 801d082:	6814      	ldr	r4, [r2, #0]
 801d084:	4618      	mov	r0, r3
 801d086:	f7fc f8e0 	bl	801924a <lwip_htonl>
 801d08a:	4603      	mov	r3, r0
 801d08c:	60a3      	str	r3, [r4, #8]
 801d08e:	68a3      	ldr	r3, [r4, #8]
 801d090:	4a3f      	ldr	r2, [pc, #252]	@ (801d190 <tcp_input+0x2b0>)
 801d092:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d094:	4b35      	ldr	r3, [pc, #212]	@ (801d16c <tcp_input+0x28c>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	89db      	ldrh	r3, [r3, #14]
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	4a33      	ldr	r2, [pc, #204]	@ (801d16c <tcp_input+0x28c>)
 801d09e:	6814      	ldr	r4, [r2, #0]
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	f7fc f8bd 	bl	8019220 <lwip_htons>
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801d0aa:	4b30      	ldr	r3, [pc, #192]	@ (801d16c <tcp_input+0x28c>)
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	899b      	ldrh	r3, [r3, #12]
 801d0b0:	b29b      	uxth	r3, r3
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7fc f8b4 	bl	8019220 <lwip_htons>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	b2db      	uxtb	r3, r3
 801d0bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0c0:	b2da      	uxtb	r2, r3
 801d0c2:	4b34      	ldr	r3, [pc, #208]	@ (801d194 <tcp_input+0x2b4>)
 801d0c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	891a      	ldrh	r2, [r3, #8]
 801d0ca:	4b33      	ldr	r3, [pc, #204]	@ (801d198 <tcp_input+0x2b8>)
 801d0cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d0ce:	4b31      	ldr	r3, [pc, #196]	@ (801d194 <tcp_input+0x2b4>)
 801d0d0:	781b      	ldrb	r3, [r3, #0]
 801d0d2:	f003 0303 	and.w	r3, r3, #3
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d00c      	beq.n	801d0f4 <tcp_input+0x214>
    tcplen++;
 801d0da:	4b2f      	ldr	r3, [pc, #188]	@ (801d198 <tcp_input+0x2b8>)
 801d0dc:	881b      	ldrh	r3, [r3, #0]
 801d0de:	3301      	adds	r3, #1
 801d0e0:	b29a      	uxth	r2, r3
 801d0e2:	4b2d      	ldr	r3, [pc, #180]	@ (801d198 <tcp_input+0x2b8>)
 801d0e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	891a      	ldrh	r2, [r3, #8]
 801d0ea:	4b2b      	ldr	r3, [pc, #172]	@ (801d198 <tcp_input+0x2b8>)
 801d0ec:	881b      	ldrh	r3, [r3, #0]
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	f200 82e6 	bhi.w	801d6c0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d0f8:	4b28      	ldr	r3, [pc, #160]	@ (801d19c <tcp_input+0x2bc>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	61fb      	str	r3, [r7, #28]
 801d0fe:	e09d      	b.n	801d23c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	7d1b      	ldrb	r3, [r3, #20]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d105      	bne.n	801d114 <tcp_input+0x234>
 801d108:	4b15      	ldr	r3, [pc, #84]	@ (801d160 <tcp_input+0x280>)
 801d10a:	22fb      	movs	r2, #251	@ 0xfb
 801d10c:	4924      	ldr	r1, [pc, #144]	@ (801d1a0 <tcp_input+0x2c0>)
 801d10e:	4816      	ldr	r0, [pc, #88]	@ (801d168 <tcp_input+0x288>)
 801d110:	f005 fc12 	bl	8022938 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d114:	69fb      	ldr	r3, [r7, #28]
 801d116:	7d1b      	ldrb	r3, [r3, #20]
 801d118:	2b0a      	cmp	r3, #10
 801d11a:	d105      	bne.n	801d128 <tcp_input+0x248>
 801d11c:	4b10      	ldr	r3, [pc, #64]	@ (801d160 <tcp_input+0x280>)
 801d11e:	22fc      	movs	r2, #252	@ 0xfc
 801d120:	4920      	ldr	r1, [pc, #128]	@ (801d1a4 <tcp_input+0x2c4>)
 801d122:	4811      	ldr	r0, [pc, #68]	@ (801d168 <tcp_input+0x288>)
 801d124:	f005 fc08 	bl	8022938 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d128:	69fb      	ldr	r3, [r7, #28]
 801d12a:	7d1b      	ldrb	r3, [r3, #20]
 801d12c:	2b01      	cmp	r3, #1
 801d12e:	d105      	bne.n	801d13c <tcp_input+0x25c>
 801d130:	4b0b      	ldr	r3, [pc, #44]	@ (801d160 <tcp_input+0x280>)
 801d132:	22fd      	movs	r2, #253	@ 0xfd
 801d134:	491c      	ldr	r1, [pc, #112]	@ (801d1a8 <tcp_input+0x2c8>)
 801d136:	480c      	ldr	r0, [pc, #48]	@ (801d168 <tcp_input+0x288>)
 801d138:	f005 fbfe 	bl	8022938 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d13c:	69fb      	ldr	r3, [r7, #28]
 801d13e:	7a1b      	ldrb	r3, [r3, #8]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d033      	beq.n	801d1ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d144:	69fb      	ldr	r3, [r7, #28]
 801d146:	7a1a      	ldrb	r2, [r3, #8]
 801d148:	4b09      	ldr	r3, [pc, #36]	@ (801d170 <tcp_input+0x290>)
 801d14a:	685b      	ldr	r3, [r3, #4]
 801d14c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d150:	3301      	adds	r3, #1
 801d152:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d154:	429a      	cmp	r2, r3
 801d156:	d029      	beq.n	801d1ac <tcp_input+0x2cc>
      prev = pcb;
 801d158:	69fb      	ldr	r3, [r7, #28]
 801d15a:	61bb      	str	r3, [r7, #24]
      continue;
 801d15c:	e06b      	b.n	801d236 <tcp_input+0x356>
 801d15e:	bf00      	nop
 801d160:	0802727c 	.word	0x0802727c
 801d164:	080272f4 	.word	0x080272f4
 801d168:	0802730c 	.word	0x0802730c
 801d16c:	20010040 	.word	0x20010040
 801d170:	20008ebc 	.word	0x20008ebc
 801d174:	20010044 	.word	0x20010044
 801d178:	20010048 	.word	0x20010048
 801d17c:	20010046 	.word	0x20010046
 801d180:	08027334 	.word	0x08027334
 801d184:	08027344 	.word	0x08027344
 801d188:	08027350 	.word	0x08027350
 801d18c:	20010050 	.word	0x20010050
 801d190:	20010054 	.word	0x20010054
 801d194:	2001005c 	.word	0x2001005c
 801d198:	2001005a 	.word	0x2001005a
 801d19c:	20010024 	.word	0x20010024
 801d1a0:	08027370 	.word	0x08027370
 801d1a4:	08027398 	.word	0x08027398
 801d1a8:	080273c4 	.word	0x080273c4
    }

    if (pcb->remote_port == tcphdr->src &&
 801d1ac:	69fb      	ldr	r3, [r7, #28]
 801d1ae:	8b1a      	ldrh	r2, [r3, #24]
 801d1b0:	4b72      	ldr	r3, [pc, #456]	@ (801d37c <tcp_input+0x49c>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	881b      	ldrh	r3, [r3, #0]
 801d1b6:	b29b      	uxth	r3, r3
 801d1b8:	429a      	cmp	r2, r3
 801d1ba:	d13a      	bne.n	801d232 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801d1bc:	69fb      	ldr	r3, [r7, #28]
 801d1be:	8ada      	ldrh	r2, [r3, #22]
 801d1c0:	4b6e      	ldr	r3, [pc, #440]	@ (801d37c <tcp_input+0x49c>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	885b      	ldrh	r3, [r3, #2]
 801d1c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801d1c8:	429a      	cmp	r2, r3
 801d1ca:	d132      	bne.n	801d232 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d1cc:	69fb      	ldr	r3, [r7, #28]
 801d1ce:	685a      	ldr	r2, [r3, #4]
 801d1d0:	4b6b      	ldr	r3, [pc, #428]	@ (801d380 <tcp_input+0x4a0>)
 801d1d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801d1d4:	429a      	cmp	r2, r3
 801d1d6:	d12c      	bne.n	801d232 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d1d8:	69fb      	ldr	r3, [r7, #28]
 801d1da:	681a      	ldr	r2, [r3, #0]
 801d1dc:	4b68      	ldr	r3, [pc, #416]	@ (801d380 <tcp_input+0x4a0>)
 801d1de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d1e0:	429a      	cmp	r2, r3
 801d1e2:	d126      	bne.n	801d232 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d1e4:	69fb      	ldr	r3, [r7, #28]
 801d1e6:	68db      	ldr	r3, [r3, #12]
 801d1e8:	69fa      	ldr	r2, [r7, #28]
 801d1ea:	429a      	cmp	r2, r3
 801d1ec:	d106      	bne.n	801d1fc <tcp_input+0x31c>
 801d1ee:	4b65      	ldr	r3, [pc, #404]	@ (801d384 <tcp_input+0x4a4>)
 801d1f0:	f240 120d 	movw	r2, #269	@ 0x10d
 801d1f4:	4964      	ldr	r1, [pc, #400]	@ (801d388 <tcp_input+0x4a8>)
 801d1f6:	4865      	ldr	r0, [pc, #404]	@ (801d38c <tcp_input+0x4ac>)
 801d1f8:	f005 fb9e 	bl	8022938 <iprintf>
      if (prev != NULL) {
 801d1fc:	69bb      	ldr	r3, [r7, #24]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d00a      	beq.n	801d218 <tcp_input+0x338>
        prev->next = pcb->next;
 801d202:	69fb      	ldr	r3, [r7, #28]
 801d204:	68da      	ldr	r2, [r3, #12]
 801d206:	69bb      	ldr	r3, [r7, #24]
 801d208:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801d20a:	4b61      	ldr	r3, [pc, #388]	@ (801d390 <tcp_input+0x4b0>)
 801d20c:	681a      	ldr	r2, [r3, #0]
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801d212:	4a5f      	ldr	r2, [pc, #380]	@ (801d390 <tcp_input+0x4b0>)
 801d214:	69fb      	ldr	r3, [r7, #28]
 801d216:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d218:	69fb      	ldr	r3, [r7, #28]
 801d21a:	68db      	ldr	r3, [r3, #12]
 801d21c:	69fa      	ldr	r2, [r7, #28]
 801d21e:	429a      	cmp	r2, r3
 801d220:	d111      	bne.n	801d246 <tcp_input+0x366>
 801d222:	4b58      	ldr	r3, [pc, #352]	@ (801d384 <tcp_input+0x4a4>)
 801d224:	f240 1215 	movw	r2, #277	@ 0x115
 801d228:	495a      	ldr	r1, [pc, #360]	@ (801d394 <tcp_input+0x4b4>)
 801d22a:	4858      	ldr	r0, [pc, #352]	@ (801d38c <tcp_input+0x4ac>)
 801d22c:	f005 fb84 	bl	8022938 <iprintf>
      break;
 801d230:	e009      	b.n	801d246 <tcp_input+0x366>
    }
    prev = pcb;
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d236:	69fb      	ldr	r3, [r7, #28]
 801d238:	68db      	ldr	r3, [r3, #12]
 801d23a:	61fb      	str	r3, [r7, #28]
 801d23c:	69fb      	ldr	r3, [r7, #28]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f47f af5e 	bne.w	801d100 <tcp_input+0x220>
 801d244:	e000      	b.n	801d248 <tcp_input+0x368>
      break;
 801d246:	bf00      	nop
  }

  if (pcb == NULL) {
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f040 80aa 	bne.w	801d3a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d250:	4b51      	ldr	r3, [pc, #324]	@ (801d398 <tcp_input+0x4b8>)
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	61fb      	str	r3, [r7, #28]
 801d256:	e03f      	b.n	801d2d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	7d1b      	ldrb	r3, [r3, #20]
 801d25c:	2b0a      	cmp	r3, #10
 801d25e:	d006      	beq.n	801d26e <tcp_input+0x38e>
 801d260:	4b48      	ldr	r3, [pc, #288]	@ (801d384 <tcp_input+0x4a4>)
 801d262:	f240 121f 	movw	r2, #287	@ 0x11f
 801d266:	494d      	ldr	r1, [pc, #308]	@ (801d39c <tcp_input+0x4bc>)
 801d268:	4848      	ldr	r0, [pc, #288]	@ (801d38c <tcp_input+0x4ac>)
 801d26a:	f005 fb65 	bl	8022938 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d26e:	69fb      	ldr	r3, [r7, #28]
 801d270:	7a1b      	ldrb	r3, [r3, #8]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d009      	beq.n	801d28a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d276:	69fb      	ldr	r3, [r7, #28]
 801d278:	7a1a      	ldrb	r2, [r3, #8]
 801d27a:	4b41      	ldr	r3, [pc, #260]	@ (801d380 <tcp_input+0x4a0>)
 801d27c:	685b      	ldr	r3, [r3, #4]
 801d27e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d282:	3301      	adds	r3, #1
 801d284:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d286:	429a      	cmp	r2, r3
 801d288:	d122      	bne.n	801d2d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801d28a:	69fb      	ldr	r3, [r7, #28]
 801d28c:	8b1a      	ldrh	r2, [r3, #24]
 801d28e:	4b3b      	ldr	r3, [pc, #236]	@ (801d37c <tcp_input+0x49c>)
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	881b      	ldrh	r3, [r3, #0]
 801d294:	b29b      	uxth	r3, r3
 801d296:	429a      	cmp	r2, r3
 801d298:	d11b      	bne.n	801d2d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801d29a:	69fb      	ldr	r3, [r7, #28]
 801d29c:	8ada      	ldrh	r2, [r3, #22]
 801d29e:	4b37      	ldr	r3, [pc, #220]	@ (801d37c <tcp_input+0x49c>)
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	885b      	ldrh	r3, [r3, #2]
 801d2a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801d2a6:	429a      	cmp	r2, r3
 801d2a8:	d113      	bne.n	801d2d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d2aa:	69fb      	ldr	r3, [r7, #28]
 801d2ac:	685a      	ldr	r2, [r3, #4]
 801d2ae:	4b34      	ldr	r3, [pc, #208]	@ (801d380 <tcp_input+0x4a0>)
 801d2b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801d2b2:	429a      	cmp	r2, r3
 801d2b4:	d10d      	bne.n	801d2d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d2b6:	69fb      	ldr	r3, [r7, #28]
 801d2b8:	681a      	ldr	r2, [r3, #0]
 801d2ba:	4b31      	ldr	r3, [pc, #196]	@ (801d380 <tcp_input+0x4a0>)
 801d2bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d2be:	429a      	cmp	r2, r3
 801d2c0:	d107      	bne.n	801d2d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801d2c2:	69f8      	ldr	r0, [r7, #28]
 801d2c4:	f000 fb56 	bl	801d974 <tcp_timewait_input>
        }
        pbuf_free(p);
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	f7fd fc5b 	bl	801ab84 <pbuf_free>
        return;
 801d2ce:	e1fd      	b.n	801d6cc <tcp_input+0x7ec>
        continue;
 801d2d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d2d2:	69fb      	ldr	r3, [r7, #28]
 801d2d4:	68db      	ldr	r3, [r3, #12]
 801d2d6:	61fb      	str	r3, [r7, #28]
 801d2d8:	69fb      	ldr	r3, [r7, #28]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d1bc      	bne.n	801d258 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801d2de:	2300      	movs	r3, #0
 801d2e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d2e2:	4b2f      	ldr	r3, [pc, #188]	@ (801d3a0 <tcp_input+0x4c0>)
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	617b      	str	r3, [r7, #20]
 801d2e8:	e02a      	b.n	801d340 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d2ea:	697b      	ldr	r3, [r7, #20]
 801d2ec:	7a1b      	ldrb	r3, [r3, #8]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d00c      	beq.n	801d30c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d2f2:	697b      	ldr	r3, [r7, #20]
 801d2f4:	7a1a      	ldrb	r2, [r3, #8]
 801d2f6:	4b22      	ldr	r3, [pc, #136]	@ (801d380 <tcp_input+0x4a0>)
 801d2f8:	685b      	ldr	r3, [r3, #4]
 801d2fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d2fe:	3301      	adds	r3, #1
 801d300:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d302:	429a      	cmp	r2, r3
 801d304:	d002      	beq.n	801d30c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	61bb      	str	r3, [r7, #24]
        continue;
 801d30a:	e016      	b.n	801d33a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801d30c:	697b      	ldr	r3, [r7, #20]
 801d30e:	8ada      	ldrh	r2, [r3, #22]
 801d310:	4b1a      	ldr	r3, [pc, #104]	@ (801d37c <tcp_input+0x49c>)
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	885b      	ldrh	r3, [r3, #2]
 801d316:	b29b      	uxth	r3, r3
 801d318:	429a      	cmp	r2, r3
 801d31a:	d10c      	bne.n	801d336 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d31c:	697b      	ldr	r3, [r7, #20]
 801d31e:	681a      	ldr	r2, [r3, #0]
 801d320:	4b17      	ldr	r3, [pc, #92]	@ (801d380 <tcp_input+0x4a0>)
 801d322:	695b      	ldr	r3, [r3, #20]
 801d324:	429a      	cmp	r2, r3
 801d326:	d00f      	beq.n	801d348 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801d328:	697b      	ldr	r3, [r7, #20]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d00d      	beq.n	801d34a <tcp_input+0x46a>
 801d32e:	697b      	ldr	r3, [r7, #20]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	2b00      	cmp	r3, #0
 801d334:	d009      	beq.n	801d34a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d33a:	697b      	ldr	r3, [r7, #20]
 801d33c:	68db      	ldr	r3, [r3, #12]
 801d33e:	617b      	str	r3, [r7, #20]
 801d340:	697b      	ldr	r3, [r7, #20]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d1d1      	bne.n	801d2ea <tcp_input+0x40a>
 801d346:	e000      	b.n	801d34a <tcp_input+0x46a>
            break;
 801d348:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d029      	beq.n	801d3a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801d350:	69bb      	ldr	r3, [r7, #24]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d00a      	beq.n	801d36c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	68da      	ldr	r2, [r3, #12]
 801d35a:	69bb      	ldr	r3, [r7, #24]
 801d35c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801d35e:	4b10      	ldr	r3, [pc, #64]	@ (801d3a0 <tcp_input+0x4c0>)
 801d360:	681a      	ldr	r2, [r3, #0]
 801d362:	697b      	ldr	r3, [r7, #20]
 801d364:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801d366:	4a0e      	ldr	r2, [pc, #56]	@ (801d3a0 <tcp_input+0x4c0>)
 801d368:	697b      	ldr	r3, [r7, #20]
 801d36a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801d36c:	6978      	ldr	r0, [r7, #20]
 801d36e:	f000 fa03 	bl	801d778 <tcp_listen_input>
      }
      pbuf_free(p);
 801d372:	6878      	ldr	r0, [r7, #4]
 801d374:	f7fd fc06 	bl	801ab84 <pbuf_free>
      return;
 801d378:	e1a8      	b.n	801d6cc <tcp_input+0x7ec>
 801d37a:	bf00      	nop
 801d37c:	20010040 	.word	0x20010040
 801d380:	20008ebc 	.word	0x20008ebc
 801d384:	0802727c 	.word	0x0802727c
 801d388:	080273ec 	.word	0x080273ec
 801d38c:	0802730c 	.word	0x0802730c
 801d390:	20010024 	.word	0x20010024
 801d394:	08027418 	.word	0x08027418
 801d398:	20010028 	.word	0x20010028
 801d39c:	08027444 	.word	0x08027444
 801d3a0:	20010020 	.word	0x20010020
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801d3a4:	69fb      	ldr	r3, [r7, #28]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	f000 8158 	beq.w	801d65c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801d3ac:	4b95      	ldr	r3, [pc, #596]	@ (801d604 <tcp_input+0x724>)
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	891a      	ldrh	r2, [r3, #8]
 801d3b6:	4b93      	ldr	r3, [pc, #588]	@ (801d604 <tcp_input+0x724>)
 801d3b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801d3ba:	4a92      	ldr	r2, [pc, #584]	@ (801d604 <tcp_input+0x724>)
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801d3c0:	4b91      	ldr	r3, [pc, #580]	@ (801d608 <tcp_input+0x728>)
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	4a8f      	ldr	r2, [pc, #572]	@ (801d604 <tcp_input+0x724>)
 801d3c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801d3c8:	4b90      	ldr	r3, [pc, #576]	@ (801d60c <tcp_input+0x72c>)
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801d3ce:	4b90      	ldr	r3, [pc, #576]	@ (801d610 <tcp_input+0x730>)
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801d3d4:	4b8f      	ldr	r3, [pc, #572]	@ (801d614 <tcp_input+0x734>)
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801d3da:	4b8f      	ldr	r3, [pc, #572]	@ (801d618 <tcp_input+0x738>)
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	f003 0308 	and.w	r3, r3, #8
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d006      	beq.n	801d3f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	7b5b      	ldrb	r3, [r3, #13]
 801d3ea:	f043 0301 	orr.w	r3, r3, #1
 801d3ee:	b2da      	uxtb	r2, r3
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801d3f4:	69fb      	ldr	r3, [r7, #28]
 801d3f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d017      	beq.n	801d42c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d3fc:	69f8      	ldr	r0, [r7, #28]
 801d3fe:	f7ff f859 	bl	801c4b4 <tcp_process_refused_data>
 801d402:	4603      	mov	r3, r0
 801d404:	f113 0f0d 	cmn.w	r3, #13
 801d408:	d007      	beq.n	801d41a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d40a:	69fb      	ldr	r3, [r7, #28]
 801d40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d00c      	beq.n	801d42c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d412:	4b82      	ldr	r3, [pc, #520]	@ (801d61c <tcp_input+0x73c>)
 801d414:	881b      	ldrh	r3, [r3, #0]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d008      	beq.n	801d42c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801d41a:	69fb      	ldr	r3, [r7, #28]
 801d41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d41e:	2b00      	cmp	r3, #0
 801d420:	f040 80e4 	bne.w	801d5ec <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801d424:	69f8      	ldr	r0, [r7, #28]
 801d426:	f003 fe01 	bl	802102c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801d42a:	e0df      	b.n	801d5ec <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801d42c:	4a7c      	ldr	r2, [pc, #496]	@ (801d620 <tcp_input+0x740>)
 801d42e:	69fb      	ldr	r3, [r7, #28]
 801d430:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801d432:	69f8      	ldr	r0, [r7, #28]
 801d434:	f000 fb18 	bl	801da68 <tcp_process>
 801d438:	4603      	mov	r3, r0
 801d43a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801d43c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d440:	f113 0f0d 	cmn.w	r3, #13
 801d444:	f000 80d4 	beq.w	801d5f0 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801d448:	4b71      	ldr	r3, [pc, #452]	@ (801d610 <tcp_input+0x730>)
 801d44a:	781b      	ldrb	r3, [r3, #0]
 801d44c:	f003 0308 	and.w	r3, r3, #8
 801d450:	2b00      	cmp	r3, #0
 801d452:	d015      	beq.n	801d480 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801d454:	69fb      	ldr	r3, [r7, #28]
 801d456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d008      	beq.n	801d470 <tcp_input+0x590>
 801d45e:	69fb      	ldr	r3, [r7, #28]
 801d460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d464:	69fa      	ldr	r2, [r7, #28]
 801d466:	6912      	ldr	r2, [r2, #16]
 801d468:	f06f 010d 	mvn.w	r1, #13
 801d46c:	4610      	mov	r0, r2
 801d46e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d470:	69f9      	ldr	r1, [r7, #28]
 801d472:	486c      	ldr	r0, [pc, #432]	@ (801d624 <tcp_input+0x744>)
 801d474:	f7ff fbbc 	bl	801cbf0 <tcp_pcb_remove>
        tcp_free(pcb);
 801d478:	69f8      	ldr	r0, [r7, #28]
 801d47a:	f7fd fed1 	bl	801b220 <tcp_free>
 801d47e:	e0da      	b.n	801d636 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801d480:	2300      	movs	r3, #0
 801d482:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801d484:	4b63      	ldr	r3, [pc, #396]	@ (801d614 <tcp_input+0x734>)
 801d486:	881b      	ldrh	r3, [r3, #0]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d01d      	beq.n	801d4c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801d48c:	4b61      	ldr	r3, [pc, #388]	@ (801d614 <tcp_input+0x734>)
 801d48e:	881b      	ldrh	r3, [r3, #0]
 801d490:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801d492:	69fb      	ldr	r3, [r7, #28]
 801d494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d00a      	beq.n	801d4b2 <tcp_input+0x5d2>
 801d49c:	69fb      	ldr	r3, [r7, #28]
 801d49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d4a2:	69fa      	ldr	r2, [r7, #28]
 801d4a4:	6910      	ldr	r0, [r2, #16]
 801d4a6:	89fa      	ldrh	r2, [r7, #14]
 801d4a8:	69f9      	ldr	r1, [r7, #28]
 801d4aa:	4798      	blx	r3
 801d4ac:	4603      	mov	r3, r0
 801d4ae:	74fb      	strb	r3, [r7, #19]
 801d4b0:	e001      	b.n	801d4b6 <tcp_input+0x5d6>
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801d4b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d4ba:	f113 0f0d 	cmn.w	r3, #13
 801d4be:	f000 8099 	beq.w	801d5f4 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801d4c2:	4b54      	ldr	r3, [pc, #336]	@ (801d614 <tcp_input+0x734>)
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801d4c8:	69f8      	ldr	r0, [r7, #28]
 801d4ca:	f000 f915 	bl	801d6f8 <tcp_input_delayed_close>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	f040 8091 	bne.w	801d5f8 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801d4d6:	4b4d      	ldr	r3, [pc, #308]	@ (801d60c <tcp_input+0x72c>)
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d041      	beq.n	801d562 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801d4de:	69fb      	ldr	r3, [r7, #28]
 801d4e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d006      	beq.n	801d4f4 <tcp_input+0x614>
 801d4e6:	4b50      	ldr	r3, [pc, #320]	@ (801d628 <tcp_input+0x748>)
 801d4e8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801d4ec:	494f      	ldr	r1, [pc, #316]	@ (801d62c <tcp_input+0x74c>)
 801d4ee:	4850      	ldr	r0, [pc, #320]	@ (801d630 <tcp_input+0x750>)
 801d4f0:	f005 fa22 	bl	8022938 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801d4f4:	69fb      	ldr	r3, [r7, #28]
 801d4f6:	8b5b      	ldrh	r3, [r3, #26]
 801d4f8:	f003 0310 	and.w	r3, r3, #16
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d008      	beq.n	801d512 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801d500:	4b42      	ldr	r3, [pc, #264]	@ (801d60c <tcp_input+0x72c>)
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	4618      	mov	r0, r3
 801d506:	f7fd fb3d 	bl	801ab84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801d50a:	69f8      	ldr	r0, [r7, #28]
 801d50c:	f7fe f9cc 	bl	801b8a8 <tcp_abort>
            goto aborted;
 801d510:	e091      	b.n	801d636 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d512:	69fb      	ldr	r3, [r7, #28]
 801d514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d00c      	beq.n	801d536 <tcp_input+0x656>
 801d51c:	69fb      	ldr	r3, [r7, #28]
 801d51e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801d522:	69fb      	ldr	r3, [r7, #28]
 801d524:	6918      	ldr	r0, [r3, #16]
 801d526:	4b39      	ldr	r3, [pc, #228]	@ (801d60c <tcp_input+0x72c>)
 801d528:	681a      	ldr	r2, [r3, #0]
 801d52a:	2300      	movs	r3, #0
 801d52c:	69f9      	ldr	r1, [r7, #28]
 801d52e:	47a0      	blx	r4
 801d530:	4603      	mov	r3, r0
 801d532:	74fb      	strb	r3, [r7, #19]
 801d534:	e008      	b.n	801d548 <tcp_input+0x668>
 801d536:	4b35      	ldr	r3, [pc, #212]	@ (801d60c <tcp_input+0x72c>)
 801d538:	681a      	ldr	r2, [r3, #0]
 801d53a:	2300      	movs	r3, #0
 801d53c:	69f9      	ldr	r1, [r7, #28]
 801d53e:	2000      	movs	r0, #0
 801d540:	f7ff f890 	bl	801c664 <tcp_recv_null>
 801d544:	4603      	mov	r3, r0
 801d546:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801d548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d54c:	f113 0f0d 	cmn.w	r3, #13
 801d550:	d054      	beq.n	801d5fc <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801d552:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d003      	beq.n	801d562 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801d55a:	4b2c      	ldr	r3, [pc, #176]	@ (801d60c <tcp_input+0x72c>)
 801d55c:	681a      	ldr	r2, [r3, #0]
 801d55e:	69fb      	ldr	r3, [r7, #28]
 801d560:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801d562:	4b2b      	ldr	r3, [pc, #172]	@ (801d610 <tcp_input+0x730>)
 801d564:	781b      	ldrb	r3, [r3, #0]
 801d566:	f003 0320 	and.w	r3, r3, #32
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d031      	beq.n	801d5d2 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801d56e:	69fb      	ldr	r3, [r7, #28]
 801d570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d572:	2b00      	cmp	r3, #0
 801d574:	d009      	beq.n	801d58a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801d576:	69fb      	ldr	r3, [r7, #28]
 801d578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d57a:	7b5a      	ldrb	r2, [r3, #13]
 801d57c:	69fb      	ldr	r3, [r7, #28]
 801d57e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d580:	f042 0220 	orr.w	r2, r2, #32
 801d584:	b2d2      	uxtb	r2, r2
 801d586:	735a      	strb	r2, [r3, #13]
 801d588:	e023      	b.n	801d5d2 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801d58a:	69fb      	ldr	r3, [r7, #28]
 801d58c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d58e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801d592:	4293      	cmp	r3, r2
 801d594:	d005      	beq.n	801d5a2 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801d596:	69fb      	ldr	r3, [r7, #28]
 801d598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d59a:	3301      	adds	r3, #1
 801d59c:	b29a      	uxth	r2, r3
 801d59e:	69fb      	ldr	r3, [r7, #28]
 801d5a0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801d5a2:	69fb      	ldr	r3, [r7, #28]
 801d5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d00b      	beq.n	801d5c4 <tcp_input+0x6e4>
 801d5ac:	69fb      	ldr	r3, [r7, #28]
 801d5ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	6918      	ldr	r0, [r3, #16]
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	69f9      	ldr	r1, [r7, #28]
 801d5bc:	47a0      	blx	r4
 801d5be:	4603      	mov	r3, r0
 801d5c0:	74fb      	strb	r3, [r7, #19]
 801d5c2:	e001      	b.n	801d5c8 <tcp_input+0x6e8>
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801d5c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d5cc:	f113 0f0d 	cmn.w	r3, #13
 801d5d0:	d016      	beq.n	801d600 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801d5d2:	4b13      	ldr	r3, [pc, #76]	@ (801d620 <tcp_input+0x740>)
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801d5d8:	69f8      	ldr	r0, [r7, #28]
 801d5da:	f000 f88d 	bl	801d6f8 <tcp_input_delayed_close>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d127      	bne.n	801d634 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801d5e4:	69f8      	ldr	r0, [r7, #28]
 801d5e6:	f002 ff1b 	bl	8020420 <tcp_output>
 801d5ea:	e024      	b.n	801d636 <tcp_input+0x756>
        goto aborted;
 801d5ec:	bf00      	nop
 801d5ee:	e022      	b.n	801d636 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801d5f0:	bf00      	nop
 801d5f2:	e020      	b.n	801d636 <tcp_input+0x756>
              goto aborted;
 801d5f4:	bf00      	nop
 801d5f6:	e01e      	b.n	801d636 <tcp_input+0x756>
          goto aborted;
 801d5f8:	bf00      	nop
 801d5fa:	e01c      	b.n	801d636 <tcp_input+0x756>
            goto aborted;
 801d5fc:	bf00      	nop
 801d5fe:	e01a      	b.n	801d636 <tcp_input+0x756>
              goto aborted;
 801d600:	bf00      	nop
 801d602:	e018      	b.n	801d636 <tcp_input+0x756>
 801d604:	20010030 	.word	0x20010030
 801d608:	20010040 	.word	0x20010040
 801d60c:	20010060 	.word	0x20010060
 801d610:	2001005d 	.word	0x2001005d
 801d614:	20010058 	.word	0x20010058
 801d618:	2001005c 	.word	0x2001005c
 801d61c:	2001005a 	.word	0x2001005a
 801d620:	20010064 	.word	0x20010064
 801d624:	20010024 	.word	0x20010024
 801d628:	0802727c 	.word	0x0802727c
 801d62c:	08027474 	.word	0x08027474
 801d630:	0802730c 	.word	0x0802730c
          goto aborted;
 801d634:	bf00      	nop
    tcp_input_pcb = NULL;
 801d636:	4b27      	ldr	r3, [pc, #156]	@ (801d6d4 <tcp_input+0x7f4>)
 801d638:	2200      	movs	r2, #0
 801d63a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801d63c:	4b26      	ldr	r3, [pc, #152]	@ (801d6d8 <tcp_input+0x7f8>)
 801d63e:	2200      	movs	r2, #0
 801d640:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801d642:	4b26      	ldr	r3, [pc, #152]	@ (801d6dc <tcp_input+0x7fc>)
 801d644:	685b      	ldr	r3, [r3, #4]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d03f      	beq.n	801d6ca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801d64a:	4b24      	ldr	r3, [pc, #144]	@ (801d6dc <tcp_input+0x7fc>)
 801d64c:	685b      	ldr	r3, [r3, #4]
 801d64e:	4618      	mov	r0, r3
 801d650:	f7fd fa98 	bl	801ab84 <pbuf_free>
      inseg.p = NULL;
 801d654:	4b21      	ldr	r3, [pc, #132]	@ (801d6dc <tcp_input+0x7fc>)
 801d656:	2200      	movs	r2, #0
 801d658:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801d65a:	e036      	b.n	801d6ca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801d65c:	4b20      	ldr	r3, [pc, #128]	@ (801d6e0 <tcp_input+0x800>)
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	899b      	ldrh	r3, [r3, #12]
 801d662:	b29b      	uxth	r3, r3
 801d664:	4618      	mov	r0, r3
 801d666:	f7fb fddb 	bl	8019220 <lwip_htons>
 801d66a:	4603      	mov	r3, r0
 801d66c:	b2db      	uxtb	r3, r3
 801d66e:	f003 0304 	and.w	r3, r3, #4
 801d672:	2b00      	cmp	r3, #0
 801d674:	d118      	bne.n	801d6a8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d676:	4b1b      	ldr	r3, [pc, #108]	@ (801d6e4 <tcp_input+0x804>)
 801d678:	6819      	ldr	r1, [r3, #0]
 801d67a:	4b1b      	ldr	r3, [pc, #108]	@ (801d6e8 <tcp_input+0x808>)
 801d67c:	881b      	ldrh	r3, [r3, #0]
 801d67e:	461a      	mov	r2, r3
 801d680:	4b1a      	ldr	r3, [pc, #104]	@ (801d6ec <tcp_input+0x80c>)
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d686:	4b16      	ldr	r3, [pc, #88]	@ (801d6e0 <tcp_input+0x800>)
 801d688:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d68a:	885b      	ldrh	r3, [r3, #2]
 801d68c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d68e:	4a14      	ldr	r2, [pc, #80]	@ (801d6e0 <tcp_input+0x800>)
 801d690:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d692:	8812      	ldrh	r2, [r2, #0]
 801d694:	b292      	uxth	r2, r2
 801d696:	9202      	str	r2, [sp, #8]
 801d698:	9301      	str	r3, [sp, #4]
 801d69a:	4b15      	ldr	r3, [pc, #84]	@ (801d6f0 <tcp_input+0x810>)
 801d69c:	9300      	str	r3, [sp, #0]
 801d69e:	4b15      	ldr	r3, [pc, #84]	@ (801d6f4 <tcp_input+0x814>)
 801d6a0:	4602      	mov	r2, r0
 801d6a2:	2000      	movs	r0, #0
 801d6a4:	f003 fc70 	bl	8020f88 <tcp_rst>
    pbuf_free(p);
 801d6a8:	6878      	ldr	r0, [r7, #4]
 801d6aa:	f7fd fa6b 	bl	801ab84 <pbuf_free>
  return;
 801d6ae:	e00c      	b.n	801d6ca <tcp_input+0x7ea>
    goto dropped;
 801d6b0:	bf00      	nop
 801d6b2:	e006      	b.n	801d6c2 <tcp_input+0x7e2>
    goto dropped;
 801d6b4:	bf00      	nop
 801d6b6:	e004      	b.n	801d6c2 <tcp_input+0x7e2>
    goto dropped;
 801d6b8:	bf00      	nop
 801d6ba:	e002      	b.n	801d6c2 <tcp_input+0x7e2>
      goto dropped;
 801d6bc:	bf00      	nop
 801d6be:	e000      	b.n	801d6c2 <tcp_input+0x7e2>
      goto dropped;
 801d6c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801d6c2:	6878      	ldr	r0, [r7, #4]
 801d6c4:	f7fd fa5e 	bl	801ab84 <pbuf_free>
 801d6c8:	e000      	b.n	801d6cc <tcp_input+0x7ec>
  return;
 801d6ca:	bf00      	nop
}
 801d6cc:	3724      	adds	r7, #36	@ 0x24
 801d6ce:	46bd      	mov	sp, r7
 801d6d0:	bd90      	pop	{r4, r7, pc}
 801d6d2:	bf00      	nop
 801d6d4:	20010064 	.word	0x20010064
 801d6d8:	20010060 	.word	0x20010060
 801d6dc:	20010030 	.word	0x20010030
 801d6e0:	20010040 	.word	0x20010040
 801d6e4:	20010054 	.word	0x20010054
 801d6e8:	2001005a 	.word	0x2001005a
 801d6ec:	20010050 	.word	0x20010050
 801d6f0:	20008ecc 	.word	0x20008ecc
 801d6f4:	20008ed0 	.word	0x20008ed0

0801d6f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b082      	sub	sp, #8
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	2b00      	cmp	r3, #0
 801d704:	d106      	bne.n	801d714 <tcp_input_delayed_close+0x1c>
 801d706:	4b17      	ldr	r3, [pc, #92]	@ (801d764 <tcp_input_delayed_close+0x6c>)
 801d708:	f240 225a 	movw	r2, #602	@ 0x25a
 801d70c:	4916      	ldr	r1, [pc, #88]	@ (801d768 <tcp_input_delayed_close+0x70>)
 801d70e:	4817      	ldr	r0, [pc, #92]	@ (801d76c <tcp_input_delayed_close+0x74>)
 801d710:	f005 f912 	bl	8022938 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801d714:	4b16      	ldr	r3, [pc, #88]	@ (801d770 <tcp_input_delayed_close+0x78>)
 801d716:	781b      	ldrb	r3, [r3, #0]
 801d718:	f003 0310 	and.w	r3, r3, #16
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d01c      	beq.n	801d75a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	8b5b      	ldrh	r3, [r3, #26]
 801d724:	f003 0310 	and.w	r3, r3, #16
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d10d      	bne.n	801d748 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d732:	2b00      	cmp	r3, #0
 801d734:	d008      	beq.n	801d748 <tcp_input_delayed_close+0x50>
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d73c:	687a      	ldr	r2, [r7, #4]
 801d73e:	6912      	ldr	r2, [r2, #16]
 801d740:	f06f 010e 	mvn.w	r1, #14
 801d744:	4610      	mov	r0, r2
 801d746:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d748:	6879      	ldr	r1, [r7, #4]
 801d74a:	480a      	ldr	r0, [pc, #40]	@ (801d774 <tcp_input_delayed_close+0x7c>)
 801d74c:	f7ff fa50 	bl	801cbf0 <tcp_pcb_remove>
    tcp_free(pcb);
 801d750:	6878      	ldr	r0, [r7, #4]
 801d752:	f7fd fd65 	bl	801b220 <tcp_free>
    return 1;
 801d756:	2301      	movs	r3, #1
 801d758:	e000      	b.n	801d75c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801d75a:	2300      	movs	r3, #0
}
 801d75c:	4618      	mov	r0, r3
 801d75e:	3708      	adds	r7, #8
 801d760:	46bd      	mov	sp, r7
 801d762:	bd80      	pop	{r7, pc}
 801d764:	0802727c 	.word	0x0802727c
 801d768:	08027490 	.word	0x08027490
 801d76c:	0802730c 	.word	0x0802730c
 801d770:	2001005d 	.word	0x2001005d
 801d774:	20010024 	.word	0x20010024

0801d778 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801d778:	b590      	push	{r4, r7, lr}
 801d77a:	b08b      	sub	sp, #44	@ 0x2c
 801d77c:	af04      	add	r7, sp, #16
 801d77e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801d780:	4b6f      	ldr	r3, [pc, #444]	@ (801d940 <tcp_listen_input+0x1c8>)
 801d782:	781b      	ldrb	r3, [r3, #0]
 801d784:	f003 0304 	and.w	r3, r3, #4
 801d788:	2b00      	cmp	r3, #0
 801d78a:	f040 80d2 	bne.w	801d932 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d106      	bne.n	801d7a2 <tcp_listen_input+0x2a>
 801d794:	4b6b      	ldr	r3, [pc, #428]	@ (801d944 <tcp_listen_input+0x1cc>)
 801d796:	f240 2281 	movw	r2, #641	@ 0x281
 801d79a:	496b      	ldr	r1, [pc, #428]	@ (801d948 <tcp_listen_input+0x1d0>)
 801d79c:	486b      	ldr	r0, [pc, #428]	@ (801d94c <tcp_listen_input+0x1d4>)
 801d79e:	f005 f8cb 	bl	8022938 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801d7a2:	4b67      	ldr	r3, [pc, #412]	@ (801d940 <tcp_listen_input+0x1c8>)
 801d7a4:	781b      	ldrb	r3, [r3, #0]
 801d7a6:	f003 0310 	and.w	r3, r3, #16
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d019      	beq.n	801d7e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d7ae:	4b68      	ldr	r3, [pc, #416]	@ (801d950 <tcp_listen_input+0x1d8>)
 801d7b0:	6819      	ldr	r1, [r3, #0]
 801d7b2:	4b68      	ldr	r3, [pc, #416]	@ (801d954 <tcp_listen_input+0x1dc>)
 801d7b4:	881b      	ldrh	r3, [r3, #0]
 801d7b6:	461a      	mov	r2, r3
 801d7b8:	4b67      	ldr	r3, [pc, #412]	@ (801d958 <tcp_listen_input+0x1e0>)
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d7be:	4b67      	ldr	r3, [pc, #412]	@ (801d95c <tcp_listen_input+0x1e4>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d7c2:	885b      	ldrh	r3, [r3, #2]
 801d7c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d7c6:	4a65      	ldr	r2, [pc, #404]	@ (801d95c <tcp_listen_input+0x1e4>)
 801d7c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d7ca:	8812      	ldrh	r2, [r2, #0]
 801d7cc:	b292      	uxth	r2, r2
 801d7ce:	9202      	str	r2, [sp, #8]
 801d7d0:	9301      	str	r3, [sp, #4]
 801d7d2:	4b63      	ldr	r3, [pc, #396]	@ (801d960 <tcp_listen_input+0x1e8>)
 801d7d4:	9300      	str	r3, [sp, #0]
 801d7d6:	4b63      	ldr	r3, [pc, #396]	@ (801d964 <tcp_listen_input+0x1ec>)
 801d7d8:	4602      	mov	r2, r0
 801d7da:	6878      	ldr	r0, [r7, #4]
 801d7dc:	f003 fbd4 	bl	8020f88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801d7e0:	e0a9      	b.n	801d936 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801d7e2:	4b57      	ldr	r3, [pc, #348]	@ (801d940 <tcp_listen_input+0x1c8>)
 801d7e4:	781b      	ldrb	r3, [r3, #0]
 801d7e6:	f003 0302 	and.w	r3, r3, #2
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	f000 80a3 	beq.w	801d936 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	7d5b      	ldrb	r3, [r3, #21]
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7ff f859 	bl	801c8ac <tcp_alloc>
 801d7fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801d7fc:	697b      	ldr	r3, [r7, #20]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d111      	bne.n	801d826 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	699b      	ldr	r3, [r3, #24]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d00a      	beq.n	801d820 <tcp_listen_input+0xa8>
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	699b      	ldr	r3, [r3, #24]
 801d80e:	687a      	ldr	r2, [r7, #4]
 801d810:	6910      	ldr	r0, [r2, #16]
 801d812:	f04f 32ff 	mov.w	r2, #4294967295
 801d816:	2100      	movs	r1, #0
 801d818:	4798      	blx	r3
 801d81a:	4603      	mov	r3, r0
 801d81c:	73bb      	strb	r3, [r7, #14]
      return;
 801d81e:	e08b      	b.n	801d938 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d820:	23f0      	movs	r3, #240	@ 0xf0
 801d822:	73bb      	strb	r3, [r7, #14]
      return;
 801d824:	e088      	b.n	801d938 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d826:	4b50      	ldr	r3, [pc, #320]	@ (801d968 <tcp_listen_input+0x1f0>)
 801d828:	695a      	ldr	r2, [r3, #20]
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d82e:	4b4e      	ldr	r3, [pc, #312]	@ (801d968 <tcp_listen_input+0x1f0>)
 801d830:	691a      	ldr	r2, [r3, #16]
 801d832:	697b      	ldr	r3, [r7, #20]
 801d834:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	8ada      	ldrh	r2, [r3, #22]
 801d83a:	697b      	ldr	r3, [r7, #20]
 801d83c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801d83e:	4b47      	ldr	r3, [pc, #284]	@ (801d95c <tcp_listen_input+0x1e4>)
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	881b      	ldrh	r3, [r3, #0]
 801d844:	b29a      	uxth	r2, r3
 801d846:	697b      	ldr	r3, [r7, #20]
 801d848:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801d84a:	697b      	ldr	r3, [r7, #20]
 801d84c:	2203      	movs	r2, #3
 801d84e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801d850:	4b41      	ldr	r3, [pc, #260]	@ (801d958 <tcp_listen_input+0x1e0>)
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	1c5a      	adds	r2, r3, #1
 801d856:	697b      	ldr	r3, [r7, #20]
 801d858:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801d85a:	697b      	ldr	r3, [r7, #20]
 801d85c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d85e:	697b      	ldr	r3, [r7, #20]
 801d860:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801d862:	6978      	ldr	r0, [r7, #20]
 801d864:	f7ff fa58 	bl	801cd18 <tcp_next_iss>
 801d868:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801d86a:	697b      	ldr	r3, [r7, #20]
 801d86c:	693a      	ldr	r2, [r7, #16]
 801d86e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801d870:	697b      	ldr	r3, [r7, #20]
 801d872:	693a      	ldr	r2, [r7, #16]
 801d874:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	693a      	ldr	r2, [r7, #16]
 801d87a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801d87c:	697b      	ldr	r3, [r7, #20]
 801d87e:	693a      	ldr	r2, [r7, #16]
 801d880:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d882:	4b35      	ldr	r3, [pc, #212]	@ (801d958 <tcp_listen_input+0x1e0>)
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	1e5a      	subs	r2, r3, #1
 801d888:	697b      	ldr	r3, [r7, #20]
 801d88a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	691a      	ldr	r2, [r3, #16]
 801d890:	697b      	ldr	r3, [r7, #20]
 801d892:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801d894:	697b      	ldr	r3, [r7, #20]
 801d896:	687a      	ldr	r2, [r7, #4]
 801d898:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	7a5b      	ldrb	r3, [r3, #9]
 801d89e:	f003 030c 	and.w	r3, r3, #12
 801d8a2:	b2da      	uxtb	r2, r3
 801d8a4:	697b      	ldr	r3, [r7, #20]
 801d8a6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	7a1a      	ldrb	r2, [r3, #8]
 801d8ac:	697b      	ldr	r3, [r7, #20]
 801d8ae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801d8b0:	4b2e      	ldr	r3, [pc, #184]	@ (801d96c <tcp_listen_input+0x1f4>)
 801d8b2:	681a      	ldr	r2, [r3, #0]
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	60da      	str	r2, [r3, #12]
 801d8b8:	4a2c      	ldr	r2, [pc, #176]	@ (801d96c <tcp_listen_input+0x1f4>)
 801d8ba:	697b      	ldr	r3, [r7, #20]
 801d8bc:	6013      	str	r3, [r2, #0]
 801d8be:	f003 fd25 	bl	802130c <tcp_timer_needed>
 801d8c2:	4b2b      	ldr	r3, [pc, #172]	@ (801d970 <tcp_listen_input+0x1f8>)
 801d8c4:	2201      	movs	r2, #1
 801d8c6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801d8c8:	6978      	ldr	r0, [r7, #20]
 801d8ca:	f001 fd8b 	bl	801f3e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801d8ce:	4b23      	ldr	r3, [pc, #140]	@ (801d95c <tcp_listen_input+0x1e4>)
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	89db      	ldrh	r3, [r3, #14]
 801d8d4:	b29a      	uxth	r2, r3
 801d8d6:	697b      	ldr	r3, [r7, #20]
 801d8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d8dc:	697b      	ldr	r3, [r7, #20]
 801d8de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d8e8:	697b      	ldr	r3, [r7, #20]
 801d8ea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d8ec:	697b      	ldr	r3, [r7, #20]
 801d8ee:	3304      	adds	r3, #4
 801d8f0:	4618      	mov	r0, r3
 801d8f2:	f7fa f97b 	bl	8017bec <ip4_route>
 801d8f6:	4601      	mov	r1, r0
 801d8f8:	697b      	ldr	r3, [r7, #20]
 801d8fa:	3304      	adds	r3, #4
 801d8fc:	461a      	mov	r2, r3
 801d8fe:	4620      	mov	r0, r4
 801d900:	f7ff fa30 	bl	801cd64 <tcp_eff_send_mss_netif>
 801d904:	4603      	mov	r3, r0
 801d906:	461a      	mov	r2, r3
 801d908:	697b      	ldr	r3, [r7, #20]
 801d90a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d90c:	2112      	movs	r1, #18
 801d90e:	6978      	ldr	r0, [r7, #20]
 801d910:	f002 fc98 	bl	8020244 <tcp_enqueue_flags>
 801d914:	4603      	mov	r3, r0
 801d916:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801d918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d004      	beq.n	801d92a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801d920:	2100      	movs	r1, #0
 801d922:	6978      	ldr	r0, [r7, #20]
 801d924:	f7fd ff02 	bl	801b72c <tcp_abandon>
      return;
 801d928:	e006      	b.n	801d938 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801d92a:	6978      	ldr	r0, [r7, #20]
 801d92c:	f002 fd78 	bl	8020420 <tcp_output>
  return;
 801d930:	e001      	b.n	801d936 <tcp_listen_input+0x1be>
    return;
 801d932:	bf00      	nop
 801d934:	e000      	b.n	801d938 <tcp_listen_input+0x1c0>
  return;
 801d936:	bf00      	nop
}
 801d938:	371c      	adds	r7, #28
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd90      	pop	{r4, r7, pc}
 801d93e:	bf00      	nop
 801d940:	2001005c 	.word	0x2001005c
 801d944:	0802727c 	.word	0x0802727c
 801d948:	080274b8 	.word	0x080274b8
 801d94c:	0802730c 	.word	0x0802730c
 801d950:	20010054 	.word	0x20010054
 801d954:	2001005a 	.word	0x2001005a
 801d958:	20010050 	.word	0x20010050
 801d95c:	20010040 	.word	0x20010040
 801d960:	20008ecc 	.word	0x20008ecc
 801d964:	20008ed0 	.word	0x20008ed0
 801d968:	20008ebc 	.word	0x20008ebc
 801d96c:	20010024 	.word	0x20010024
 801d970:	2001002c 	.word	0x2001002c

0801d974 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b086      	sub	sp, #24
 801d978:	af04      	add	r7, sp, #16
 801d97a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801d97c:	4b2f      	ldr	r3, [pc, #188]	@ (801da3c <tcp_timewait_input+0xc8>)
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	f003 0304 	and.w	r3, r3, #4
 801d984:	2b00      	cmp	r3, #0
 801d986:	d153      	bne.n	801da30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d106      	bne.n	801d99c <tcp_timewait_input+0x28>
 801d98e:	4b2c      	ldr	r3, [pc, #176]	@ (801da40 <tcp_timewait_input+0xcc>)
 801d990:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d994:	492b      	ldr	r1, [pc, #172]	@ (801da44 <tcp_timewait_input+0xd0>)
 801d996:	482c      	ldr	r0, [pc, #176]	@ (801da48 <tcp_timewait_input+0xd4>)
 801d998:	f004 ffce 	bl	8022938 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801d99c:	4b27      	ldr	r3, [pc, #156]	@ (801da3c <tcp_timewait_input+0xc8>)
 801d99e:	781b      	ldrb	r3, [r3, #0]
 801d9a0:	f003 0302 	and.w	r3, r3, #2
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d02a      	beq.n	801d9fe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d9a8:	4b28      	ldr	r3, [pc, #160]	@ (801da4c <tcp_timewait_input+0xd8>)
 801d9aa:	681a      	ldr	r2, [r3, #0]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d9b0:	1ad3      	subs	r3, r2, r3
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	db2d      	blt.n	801da12 <tcp_timewait_input+0x9e>
 801d9b6:	4b25      	ldr	r3, [pc, #148]	@ (801da4c <tcp_timewait_input+0xd8>)
 801d9b8:	681a      	ldr	r2, [r3, #0]
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d9be:	6879      	ldr	r1, [r7, #4]
 801d9c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d9c2:	440b      	add	r3, r1
 801d9c4:	1ad3      	subs	r3, r2, r3
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	dc23      	bgt.n	801da12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9ca:	4b21      	ldr	r3, [pc, #132]	@ (801da50 <tcp_timewait_input+0xdc>)
 801d9cc:	6819      	ldr	r1, [r3, #0]
 801d9ce:	4b21      	ldr	r3, [pc, #132]	@ (801da54 <tcp_timewait_input+0xe0>)
 801d9d0:	881b      	ldrh	r3, [r3, #0]
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	4b1d      	ldr	r3, [pc, #116]	@ (801da4c <tcp_timewait_input+0xd8>)
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d9da:	4b1f      	ldr	r3, [pc, #124]	@ (801da58 <tcp_timewait_input+0xe4>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9de:	885b      	ldrh	r3, [r3, #2]
 801d9e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d9e2:	4a1d      	ldr	r2, [pc, #116]	@ (801da58 <tcp_timewait_input+0xe4>)
 801d9e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9e6:	8812      	ldrh	r2, [r2, #0]
 801d9e8:	b292      	uxth	r2, r2
 801d9ea:	9202      	str	r2, [sp, #8]
 801d9ec:	9301      	str	r3, [sp, #4]
 801d9ee:	4b1b      	ldr	r3, [pc, #108]	@ (801da5c <tcp_timewait_input+0xe8>)
 801d9f0:	9300      	str	r3, [sp, #0]
 801d9f2:	4b1b      	ldr	r3, [pc, #108]	@ (801da60 <tcp_timewait_input+0xec>)
 801d9f4:	4602      	mov	r2, r0
 801d9f6:	6878      	ldr	r0, [r7, #4]
 801d9f8:	f003 fac6 	bl	8020f88 <tcp_rst>
      return;
 801d9fc:	e01b      	b.n	801da36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801d9fe:	4b0f      	ldr	r3, [pc, #60]	@ (801da3c <tcp_timewait_input+0xc8>)
 801da00:	781b      	ldrb	r3, [r3, #0]
 801da02:	f003 0301 	and.w	r3, r3, #1
 801da06:	2b00      	cmp	r3, #0
 801da08:	d003      	beq.n	801da12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801da0a:	4b16      	ldr	r3, [pc, #88]	@ (801da64 <tcp_timewait_input+0xf0>)
 801da0c:	681a      	ldr	r2, [r3, #0]
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801da12:	4b10      	ldr	r3, [pc, #64]	@ (801da54 <tcp_timewait_input+0xe0>)
 801da14:	881b      	ldrh	r3, [r3, #0]
 801da16:	2b00      	cmp	r3, #0
 801da18:	d00c      	beq.n	801da34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	8b5b      	ldrh	r3, [r3, #26]
 801da1e:	f043 0302 	orr.w	r3, r3, #2
 801da22:	b29a      	uxth	r2, r3
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801da28:	6878      	ldr	r0, [r7, #4]
 801da2a:	f002 fcf9 	bl	8020420 <tcp_output>
  }
  return;
 801da2e:	e001      	b.n	801da34 <tcp_timewait_input+0xc0>
    return;
 801da30:	bf00      	nop
 801da32:	e000      	b.n	801da36 <tcp_timewait_input+0xc2>
  return;
 801da34:	bf00      	nop
}
 801da36:	3708      	adds	r7, #8
 801da38:	46bd      	mov	sp, r7
 801da3a:	bd80      	pop	{r7, pc}
 801da3c:	2001005c 	.word	0x2001005c
 801da40:	0802727c 	.word	0x0802727c
 801da44:	080274d8 	.word	0x080274d8
 801da48:	0802730c 	.word	0x0802730c
 801da4c:	20010050 	.word	0x20010050
 801da50:	20010054 	.word	0x20010054
 801da54:	2001005a 	.word	0x2001005a
 801da58:	20010040 	.word	0x20010040
 801da5c:	20008ecc 	.word	0x20008ecc
 801da60:	20008ed0 	.word	0x20008ed0
 801da64:	20010018 	.word	0x20010018

0801da68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801da68:	b590      	push	{r4, r7, lr}
 801da6a:	b08d      	sub	sp, #52	@ 0x34
 801da6c:	af04      	add	r7, sp, #16
 801da6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801da70:	2300      	movs	r3, #0
 801da72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801da74:	2300      	movs	r3, #0
 801da76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d106      	bne.n	801da8c <tcp_process+0x24>
 801da7e:	4b9d      	ldr	r3, [pc, #628]	@ (801dcf4 <tcp_process+0x28c>)
 801da80:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801da84:	499c      	ldr	r1, [pc, #624]	@ (801dcf8 <tcp_process+0x290>)
 801da86:	489d      	ldr	r0, [pc, #628]	@ (801dcfc <tcp_process+0x294>)
 801da88:	f004 ff56 	bl	8022938 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801da8c:	4b9c      	ldr	r3, [pc, #624]	@ (801dd00 <tcp_process+0x298>)
 801da8e:	781b      	ldrb	r3, [r3, #0]
 801da90:	f003 0304 	and.w	r3, r3, #4
 801da94:	2b00      	cmp	r3, #0
 801da96:	d04e      	beq.n	801db36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	7d1b      	ldrb	r3, [r3, #20]
 801da9c:	2b02      	cmp	r3, #2
 801da9e:	d108      	bne.n	801dab2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801daa4:	4b97      	ldr	r3, [pc, #604]	@ (801dd04 <tcp_process+0x29c>)
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d123      	bne.n	801daf4 <tcp_process+0x8c>
        acceptable = 1;
 801daac:	2301      	movs	r3, #1
 801daae:	76fb      	strb	r3, [r7, #27]
 801dab0:	e020      	b.n	801daf4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801dab6:	4b94      	ldr	r3, [pc, #592]	@ (801dd08 <tcp_process+0x2a0>)
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	429a      	cmp	r2, r3
 801dabc:	d102      	bne.n	801dac4 <tcp_process+0x5c>
        acceptable = 1;
 801dabe:	2301      	movs	r3, #1
 801dac0:	76fb      	strb	r3, [r7, #27]
 801dac2:	e017      	b.n	801daf4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dac4:	4b90      	ldr	r3, [pc, #576]	@ (801dd08 <tcp_process+0x2a0>)
 801dac6:	681a      	ldr	r2, [r3, #0]
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dacc:	1ad3      	subs	r3, r2, r3
 801dace:	2b00      	cmp	r3, #0
 801dad0:	db10      	blt.n	801daf4 <tcp_process+0x8c>
 801dad2:	4b8d      	ldr	r3, [pc, #564]	@ (801dd08 <tcp_process+0x2a0>)
 801dad4:	681a      	ldr	r2, [r3, #0]
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dada:	6879      	ldr	r1, [r7, #4]
 801dadc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801dade:	440b      	add	r3, r1
 801dae0:	1ad3      	subs	r3, r2, r3
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	dc06      	bgt.n	801daf4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	8b5b      	ldrh	r3, [r3, #26]
 801daea:	f043 0302 	orr.w	r3, r3, #2
 801daee:	b29a      	uxth	r2, r3
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801daf4:	7efb      	ldrb	r3, [r7, #27]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d01b      	beq.n	801db32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	7d1b      	ldrb	r3, [r3, #20]
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d106      	bne.n	801db10 <tcp_process+0xa8>
 801db02:	4b7c      	ldr	r3, [pc, #496]	@ (801dcf4 <tcp_process+0x28c>)
 801db04:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801db08:	4980      	ldr	r1, [pc, #512]	@ (801dd0c <tcp_process+0x2a4>)
 801db0a:	487c      	ldr	r0, [pc, #496]	@ (801dcfc <tcp_process+0x294>)
 801db0c:	f004 ff14 	bl	8022938 <iprintf>
      recv_flags |= TF_RESET;
 801db10:	4b7f      	ldr	r3, [pc, #508]	@ (801dd10 <tcp_process+0x2a8>)
 801db12:	781b      	ldrb	r3, [r3, #0]
 801db14:	f043 0308 	orr.w	r3, r3, #8
 801db18:	b2da      	uxtb	r2, r3
 801db1a:	4b7d      	ldr	r3, [pc, #500]	@ (801dd10 <tcp_process+0x2a8>)
 801db1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	8b5b      	ldrh	r3, [r3, #26]
 801db22:	f023 0301 	bic.w	r3, r3, #1
 801db26:	b29a      	uxth	r2, r3
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801db2c:	f06f 030d 	mvn.w	r3, #13
 801db30:	e37a      	b.n	801e228 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801db32:	2300      	movs	r3, #0
 801db34:	e378      	b.n	801e228 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801db36:	4b72      	ldr	r3, [pc, #456]	@ (801dd00 <tcp_process+0x298>)
 801db38:	781b      	ldrb	r3, [r3, #0]
 801db3a:	f003 0302 	and.w	r3, r3, #2
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d010      	beq.n	801db64 <tcp_process+0xfc>
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	7d1b      	ldrb	r3, [r3, #20]
 801db46:	2b02      	cmp	r3, #2
 801db48:	d00c      	beq.n	801db64 <tcp_process+0xfc>
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	7d1b      	ldrb	r3, [r3, #20]
 801db4e:	2b03      	cmp	r3, #3
 801db50:	d008      	beq.n	801db64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	8b5b      	ldrh	r3, [r3, #26]
 801db56:	f043 0302 	orr.w	r3, r3, #2
 801db5a:	b29a      	uxth	r2, r3
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801db60:	2300      	movs	r3, #0
 801db62:	e361      	b.n	801e228 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	8b5b      	ldrh	r3, [r3, #26]
 801db68:	f003 0310 	and.w	r3, r3, #16
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d103      	bne.n	801db78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801db70:	4b68      	ldr	r3, [pc, #416]	@ (801dd14 <tcp_process+0x2ac>)
 801db72:	681a      	ldr	r2, [r3, #0]
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	2200      	movs	r2, #0
 801db7c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	2200      	movs	r2, #0
 801db84:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801db88:	6878      	ldr	r0, [r7, #4]
 801db8a:	f001 fc2b 	bl	801f3e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	7d1b      	ldrb	r3, [r3, #20]
 801db92:	3b02      	subs	r3, #2
 801db94:	2b07      	cmp	r3, #7
 801db96:	f200 8337 	bhi.w	801e208 <tcp_process+0x7a0>
 801db9a:	a201      	add	r2, pc, #4	@ (adr r2, 801dba0 <tcp_process+0x138>)
 801db9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dba0:	0801dbc1 	.word	0x0801dbc1
 801dba4:	0801ddf1 	.word	0x0801ddf1
 801dba8:	0801df69 	.word	0x0801df69
 801dbac:	0801df93 	.word	0x0801df93
 801dbb0:	0801e0b7 	.word	0x0801e0b7
 801dbb4:	0801df69 	.word	0x0801df69
 801dbb8:	0801e143 	.word	0x0801e143
 801dbbc:	0801e1d3 	.word	0x0801e1d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801dbc0:	4b4f      	ldr	r3, [pc, #316]	@ (801dd00 <tcp_process+0x298>)
 801dbc2:	781b      	ldrb	r3, [r3, #0]
 801dbc4:	f003 0310 	and.w	r3, r3, #16
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	f000 80e4 	beq.w	801dd96 <tcp_process+0x32e>
 801dbce:	4b4c      	ldr	r3, [pc, #304]	@ (801dd00 <tcp_process+0x298>)
 801dbd0:	781b      	ldrb	r3, [r3, #0]
 801dbd2:	f003 0302 	and.w	r3, r3, #2
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	f000 80dd 	beq.w	801dd96 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dbe0:	1c5a      	adds	r2, r3, #1
 801dbe2:	4b48      	ldr	r3, [pc, #288]	@ (801dd04 <tcp_process+0x29c>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	f040 80d5 	bne.w	801dd96 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801dbec:	4b46      	ldr	r3, [pc, #280]	@ (801dd08 <tcp_process+0x2a0>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	1c5a      	adds	r2, r3, #1
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801dbfe:	4b41      	ldr	r3, [pc, #260]	@ (801dd04 <tcp_process+0x29c>)
 801dc00:	681a      	ldr	r2, [r3, #0]
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801dc06:	4b44      	ldr	r3, [pc, #272]	@ (801dd18 <tcp_process+0x2b0>)
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	89db      	ldrh	r3, [r3, #14]
 801dc0c:	b29a      	uxth	r2, r3
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801dc20:	4b39      	ldr	r3, [pc, #228]	@ (801dd08 <tcp_process+0x2a0>)
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	1e5a      	subs	r2, r3, #1
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	2204      	movs	r2, #4
 801dc2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	3304      	adds	r3, #4
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7f9 ffd7 	bl	8017bec <ip4_route>
 801dc3e:	4601      	mov	r1, r0
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	3304      	adds	r3, #4
 801dc44:	461a      	mov	r2, r3
 801dc46:	4620      	mov	r0, r4
 801dc48:	f7ff f88c 	bl	801cd64 <tcp_eff_send_mss_netif>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	461a      	mov	r2, r3
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc58:	009a      	lsls	r2, r3, #2
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc5e:	005b      	lsls	r3, r3, #1
 801dc60:	f241 111c 	movw	r1, #4380	@ 0x111c
 801dc64:	428b      	cmp	r3, r1
 801dc66:	bf38      	it	cc
 801dc68:	460b      	movcc	r3, r1
 801dc6a:	429a      	cmp	r2, r3
 801dc6c:	d204      	bcs.n	801dc78 <tcp_process+0x210>
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc72:	009b      	lsls	r3, r3, #2
 801dc74:	b29b      	uxth	r3, r3
 801dc76:	e00d      	b.n	801dc94 <tcp_process+0x22c>
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc7c:	005b      	lsls	r3, r3, #1
 801dc7e:	f241 121c 	movw	r2, #4380	@ 0x111c
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d904      	bls.n	801dc90 <tcp_process+0x228>
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc8a:	005b      	lsls	r3, r3, #1
 801dc8c:	b29b      	uxth	r3, r3
 801dc8e:	e001      	b.n	801dc94 <tcp_process+0x22c>
 801dc90:	f241 131c 	movw	r3, #4380	@ 0x111c
 801dc94:	687a      	ldr	r2, [r7, #4]
 801dc96:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d106      	bne.n	801dcb2 <tcp_process+0x24a>
 801dca4:	4b13      	ldr	r3, [pc, #76]	@ (801dcf4 <tcp_process+0x28c>)
 801dca6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801dcaa:	491c      	ldr	r1, [pc, #112]	@ (801dd1c <tcp_process+0x2b4>)
 801dcac:	4813      	ldr	r0, [pc, #76]	@ (801dcfc <tcp_process+0x294>)
 801dcae:	f004 fe43 	bl	8022938 <iprintf>
        --pcb->snd_queuelen;
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dcb8:	3b01      	subs	r3, #1
 801dcba:	b29a      	uxth	r2, r3
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dcc6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801dcc8:	69fb      	ldr	r3, [r7, #28]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d12a      	bne.n	801dd24 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dcd2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801dcd4:	69fb      	ldr	r3, [r7, #28]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d106      	bne.n	801dce8 <tcp_process+0x280>
 801dcda:	4b06      	ldr	r3, [pc, #24]	@ (801dcf4 <tcp_process+0x28c>)
 801dcdc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801dce0:	490f      	ldr	r1, [pc, #60]	@ (801dd20 <tcp_process+0x2b8>)
 801dce2:	4806      	ldr	r0, [pc, #24]	@ (801dcfc <tcp_process+0x294>)
 801dce4:	f004 fe28 	bl	8022938 <iprintf>
          pcb->unsent = rseg->next;
 801dce8:	69fb      	ldr	r3, [r7, #28]
 801dcea:	681a      	ldr	r2, [r3, #0]
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	66da      	str	r2, [r3, #108]	@ 0x6c
 801dcf0:	e01c      	b.n	801dd2c <tcp_process+0x2c4>
 801dcf2:	bf00      	nop
 801dcf4:	0802727c 	.word	0x0802727c
 801dcf8:	080274f8 	.word	0x080274f8
 801dcfc:	0802730c 	.word	0x0802730c
 801dd00:	2001005c 	.word	0x2001005c
 801dd04:	20010054 	.word	0x20010054
 801dd08:	20010050 	.word	0x20010050
 801dd0c:	08027514 	.word	0x08027514
 801dd10:	2001005d 	.word	0x2001005d
 801dd14:	20010018 	.word	0x20010018
 801dd18:	20010040 	.word	0x20010040
 801dd1c:	08027534 	.word	0x08027534
 801dd20:	0802754c 	.word	0x0802754c
        } else {
          pcb->unacked = rseg->next;
 801dd24:	69fb      	ldr	r3, [r7, #28]
 801dd26:	681a      	ldr	r2, [r3, #0]
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801dd2c:	69f8      	ldr	r0, [r7, #28]
 801dd2e:	f7fe fc54 	bl	801c5da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d104      	bne.n	801dd44 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd40:	861a      	strh	r2, [r3, #48]	@ 0x30
 801dd42:	e006      	b.n	801dd52 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	2200      	movs	r2, #0
 801dd48:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	2200      	movs	r2, #0
 801dd4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d00a      	beq.n	801dd72 <tcp_process+0x30a>
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd62:	687a      	ldr	r2, [r7, #4]
 801dd64:	6910      	ldr	r0, [r2, #16]
 801dd66:	2200      	movs	r2, #0
 801dd68:	6879      	ldr	r1, [r7, #4]
 801dd6a:	4798      	blx	r3
 801dd6c:	4603      	mov	r3, r0
 801dd6e:	76bb      	strb	r3, [r7, #26]
 801dd70:	e001      	b.n	801dd76 <tcp_process+0x30e>
 801dd72:	2300      	movs	r3, #0
 801dd74:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801dd76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801dd7a:	f113 0f0d 	cmn.w	r3, #13
 801dd7e:	d102      	bne.n	801dd86 <tcp_process+0x31e>
          return ERR_ABRT;
 801dd80:	f06f 030c 	mvn.w	r3, #12
 801dd84:	e250      	b.n	801e228 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	8b5b      	ldrh	r3, [r3, #26]
 801dd8a:	f043 0302 	orr.w	r3, r3, #2
 801dd8e:	b29a      	uxth	r2, r3
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801dd94:	e23a      	b.n	801e20c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801dd96:	4b98      	ldr	r3, [pc, #608]	@ (801dff8 <tcp_process+0x590>)
 801dd98:	781b      	ldrb	r3, [r3, #0]
 801dd9a:	f003 0310 	and.w	r3, r3, #16
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	f000 8234 	beq.w	801e20c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dda4:	4b95      	ldr	r3, [pc, #596]	@ (801dffc <tcp_process+0x594>)
 801dda6:	6819      	ldr	r1, [r3, #0]
 801dda8:	4b95      	ldr	r3, [pc, #596]	@ (801e000 <tcp_process+0x598>)
 801ddaa:	881b      	ldrh	r3, [r3, #0]
 801ddac:	461a      	mov	r2, r3
 801ddae:	4b95      	ldr	r3, [pc, #596]	@ (801e004 <tcp_process+0x59c>)
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ddb4:	4b94      	ldr	r3, [pc, #592]	@ (801e008 <tcp_process+0x5a0>)
 801ddb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ddb8:	885b      	ldrh	r3, [r3, #2]
 801ddba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ddbc:	4a92      	ldr	r2, [pc, #584]	@ (801e008 <tcp_process+0x5a0>)
 801ddbe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ddc0:	8812      	ldrh	r2, [r2, #0]
 801ddc2:	b292      	uxth	r2, r2
 801ddc4:	9202      	str	r2, [sp, #8]
 801ddc6:	9301      	str	r3, [sp, #4]
 801ddc8:	4b90      	ldr	r3, [pc, #576]	@ (801e00c <tcp_process+0x5a4>)
 801ddca:	9300      	str	r3, [sp, #0]
 801ddcc:	4b90      	ldr	r3, [pc, #576]	@ (801e010 <tcp_process+0x5a8>)
 801ddce:	4602      	mov	r2, r0
 801ddd0:	6878      	ldr	r0, [r7, #4]
 801ddd2:	f003 f8d9 	bl	8020f88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801dddc:	2b05      	cmp	r3, #5
 801ddde:	f200 8215 	bhi.w	801e20c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	2200      	movs	r2, #0
 801dde6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801dde8:	6878      	ldr	r0, [r7, #4]
 801ddea:	f002 fea5 	bl	8020b38 <tcp_rexmit_rto>
      break;
 801ddee:	e20d      	b.n	801e20c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801ddf0:	4b81      	ldr	r3, [pc, #516]	@ (801dff8 <tcp_process+0x590>)
 801ddf2:	781b      	ldrb	r3, [r3, #0]
 801ddf4:	f003 0310 	and.w	r3, r3, #16
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	f000 80a1 	beq.w	801df40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ddfe:	4b7f      	ldr	r3, [pc, #508]	@ (801dffc <tcp_process+0x594>)
 801de00:	681a      	ldr	r2, [r3, #0]
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801de06:	1ad3      	subs	r3, r2, r3
 801de08:	3b01      	subs	r3, #1
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	db7e      	blt.n	801df0c <tcp_process+0x4a4>
 801de0e:	4b7b      	ldr	r3, [pc, #492]	@ (801dffc <tcp_process+0x594>)
 801de10:	681a      	ldr	r2, [r3, #0]
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de16:	1ad3      	subs	r3, r2, r3
 801de18:	2b00      	cmp	r3, #0
 801de1a:	dc77      	bgt.n	801df0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	2204      	movs	r2, #4
 801de20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de26:	2b00      	cmp	r3, #0
 801de28:	d102      	bne.n	801de30 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801de2a:	23fa      	movs	r3, #250	@ 0xfa
 801de2c:	76bb      	strb	r3, [r7, #26]
 801de2e:	e01d      	b.n	801de6c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de34:	699b      	ldr	r3, [r3, #24]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d106      	bne.n	801de48 <tcp_process+0x3e0>
 801de3a:	4b76      	ldr	r3, [pc, #472]	@ (801e014 <tcp_process+0x5ac>)
 801de3c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801de40:	4975      	ldr	r1, [pc, #468]	@ (801e018 <tcp_process+0x5b0>)
 801de42:	4876      	ldr	r0, [pc, #472]	@ (801e01c <tcp_process+0x5b4>)
 801de44:	f004 fd78 	bl	8022938 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de4c:	699b      	ldr	r3, [r3, #24]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d00a      	beq.n	801de68 <tcp_process+0x400>
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de56:	699b      	ldr	r3, [r3, #24]
 801de58:	687a      	ldr	r2, [r7, #4]
 801de5a:	6910      	ldr	r0, [r2, #16]
 801de5c:	2200      	movs	r2, #0
 801de5e:	6879      	ldr	r1, [r7, #4]
 801de60:	4798      	blx	r3
 801de62:	4603      	mov	r3, r0
 801de64:	76bb      	strb	r3, [r7, #26]
 801de66:	e001      	b.n	801de6c <tcp_process+0x404>
 801de68:	23f0      	movs	r3, #240	@ 0xf0
 801de6a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801de6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801de70:	2b00      	cmp	r3, #0
 801de72:	d00a      	beq.n	801de8a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801de74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801de78:	f113 0f0d 	cmn.w	r3, #13
 801de7c:	d002      	beq.n	801de84 <tcp_process+0x41c>
              tcp_abort(pcb);
 801de7e:	6878      	ldr	r0, [r7, #4]
 801de80:	f7fd fd12 	bl	801b8a8 <tcp_abort>
            }
            return ERR_ABRT;
 801de84:	f06f 030c 	mvn.w	r3, #12
 801de88:	e1ce      	b.n	801e228 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801de8a:	6878      	ldr	r0, [r7, #4]
 801de8c:	f000 fae0 	bl	801e450 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801de90:	4b63      	ldr	r3, [pc, #396]	@ (801e020 <tcp_process+0x5b8>)
 801de92:	881b      	ldrh	r3, [r3, #0]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d005      	beq.n	801dea4 <tcp_process+0x43c>
            recv_acked--;
 801de98:	4b61      	ldr	r3, [pc, #388]	@ (801e020 <tcp_process+0x5b8>)
 801de9a:	881b      	ldrh	r3, [r3, #0]
 801de9c:	3b01      	subs	r3, #1
 801de9e:	b29a      	uxth	r2, r3
 801dea0:	4b5f      	ldr	r3, [pc, #380]	@ (801e020 <tcp_process+0x5b8>)
 801dea2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dea8:	009a      	lsls	r2, r3, #2
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801deae:	005b      	lsls	r3, r3, #1
 801deb0:	f241 111c 	movw	r1, #4380	@ 0x111c
 801deb4:	428b      	cmp	r3, r1
 801deb6:	bf38      	it	cc
 801deb8:	460b      	movcc	r3, r1
 801deba:	429a      	cmp	r2, r3
 801debc:	d204      	bcs.n	801dec8 <tcp_process+0x460>
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dec2:	009b      	lsls	r3, r3, #2
 801dec4:	b29b      	uxth	r3, r3
 801dec6:	e00d      	b.n	801dee4 <tcp_process+0x47c>
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801decc:	005b      	lsls	r3, r3, #1
 801dece:	f241 121c 	movw	r2, #4380	@ 0x111c
 801ded2:	4293      	cmp	r3, r2
 801ded4:	d904      	bls.n	801dee0 <tcp_process+0x478>
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801deda:	005b      	lsls	r3, r3, #1
 801dedc:	b29b      	uxth	r3, r3
 801dede:	e001      	b.n	801dee4 <tcp_process+0x47c>
 801dee0:	f241 131c 	movw	r3, #4380	@ 0x111c
 801dee4:	687a      	ldr	r2, [r7, #4]
 801dee6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801deea:	4b4e      	ldr	r3, [pc, #312]	@ (801e024 <tcp_process+0x5bc>)
 801deec:	781b      	ldrb	r3, [r3, #0]
 801deee:	f003 0320 	and.w	r3, r3, #32
 801def2:	2b00      	cmp	r3, #0
 801def4:	d037      	beq.n	801df66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	8b5b      	ldrh	r3, [r3, #26]
 801defa:	f043 0302 	orr.w	r3, r3, #2
 801defe:	b29a      	uxth	r2, r3
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	2207      	movs	r2, #7
 801df08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801df0a:	e02c      	b.n	801df66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801df0c:	4b3b      	ldr	r3, [pc, #236]	@ (801dffc <tcp_process+0x594>)
 801df0e:	6819      	ldr	r1, [r3, #0]
 801df10:	4b3b      	ldr	r3, [pc, #236]	@ (801e000 <tcp_process+0x598>)
 801df12:	881b      	ldrh	r3, [r3, #0]
 801df14:	461a      	mov	r2, r3
 801df16:	4b3b      	ldr	r3, [pc, #236]	@ (801e004 <tcp_process+0x59c>)
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801df1c:	4b3a      	ldr	r3, [pc, #232]	@ (801e008 <tcp_process+0x5a0>)
 801df1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801df20:	885b      	ldrh	r3, [r3, #2]
 801df22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801df24:	4a38      	ldr	r2, [pc, #224]	@ (801e008 <tcp_process+0x5a0>)
 801df26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801df28:	8812      	ldrh	r2, [r2, #0]
 801df2a:	b292      	uxth	r2, r2
 801df2c:	9202      	str	r2, [sp, #8]
 801df2e:	9301      	str	r3, [sp, #4]
 801df30:	4b36      	ldr	r3, [pc, #216]	@ (801e00c <tcp_process+0x5a4>)
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	4b36      	ldr	r3, [pc, #216]	@ (801e010 <tcp_process+0x5a8>)
 801df36:	4602      	mov	r2, r0
 801df38:	6878      	ldr	r0, [r7, #4]
 801df3a:	f003 f825 	bl	8020f88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801df3e:	e167      	b.n	801e210 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801df40:	4b2d      	ldr	r3, [pc, #180]	@ (801dff8 <tcp_process+0x590>)
 801df42:	781b      	ldrb	r3, [r3, #0]
 801df44:	f003 0302 	and.w	r3, r3, #2
 801df48:	2b00      	cmp	r3, #0
 801df4a:	f000 8161 	beq.w	801e210 <tcp_process+0x7a8>
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801df52:	1e5a      	subs	r2, r3, #1
 801df54:	4b2b      	ldr	r3, [pc, #172]	@ (801e004 <tcp_process+0x59c>)
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	429a      	cmp	r2, r3
 801df5a:	f040 8159 	bne.w	801e210 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801df5e:	6878      	ldr	r0, [r7, #4]
 801df60:	f002 fe0c 	bl	8020b7c <tcp_rexmit>
      break;
 801df64:	e154      	b.n	801e210 <tcp_process+0x7a8>
 801df66:	e153      	b.n	801e210 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801df68:	6878      	ldr	r0, [r7, #4]
 801df6a:	f000 fa71 	bl	801e450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801df6e:	4b2d      	ldr	r3, [pc, #180]	@ (801e024 <tcp_process+0x5bc>)
 801df70:	781b      	ldrb	r3, [r3, #0]
 801df72:	f003 0320 	and.w	r3, r3, #32
 801df76:	2b00      	cmp	r3, #0
 801df78:	f000 814c 	beq.w	801e214 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	8b5b      	ldrh	r3, [r3, #26]
 801df80:	f043 0302 	orr.w	r3, r3, #2
 801df84:	b29a      	uxth	r2, r3
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	2207      	movs	r2, #7
 801df8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801df90:	e140      	b.n	801e214 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801df92:	6878      	ldr	r0, [r7, #4]
 801df94:	f000 fa5c 	bl	801e450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801df98:	4b22      	ldr	r3, [pc, #136]	@ (801e024 <tcp_process+0x5bc>)
 801df9a:	781b      	ldrb	r3, [r3, #0]
 801df9c:	f003 0320 	and.w	r3, r3, #32
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d071      	beq.n	801e088 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dfa4:	4b14      	ldr	r3, [pc, #80]	@ (801dff8 <tcp_process+0x590>)
 801dfa6:	781b      	ldrb	r3, [r3, #0]
 801dfa8:	f003 0310 	and.w	r3, r3, #16
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d060      	beq.n	801e072 <tcp_process+0x60a>
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801dfb4:	4b11      	ldr	r3, [pc, #68]	@ (801dffc <tcp_process+0x594>)
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	429a      	cmp	r2, r3
 801dfba:	d15a      	bne.n	801e072 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d156      	bne.n	801e072 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	8b5b      	ldrh	r3, [r3, #26]
 801dfc8:	f043 0302 	orr.w	r3, r3, #2
 801dfcc:	b29a      	uxth	r2, r3
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801dfd2:	6878      	ldr	r0, [r7, #4]
 801dfd4:	f7fe fdbc 	bl	801cb50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801dfd8:	4b13      	ldr	r3, [pc, #76]	@ (801e028 <tcp_process+0x5c0>)
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	687a      	ldr	r2, [r7, #4]
 801dfde:	429a      	cmp	r2, r3
 801dfe0:	d105      	bne.n	801dfee <tcp_process+0x586>
 801dfe2:	4b11      	ldr	r3, [pc, #68]	@ (801e028 <tcp_process+0x5c0>)
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	68db      	ldr	r3, [r3, #12]
 801dfe8:	4a0f      	ldr	r2, [pc, #60]	@ (801e028 <tcp_process+0x5c0>)
 801dfea:	6013      	str	r3, [r2, #0]
 801dfec:	e02e      	b.n	801e04c <tcp_process+0x5e4>
 801dfee:	4b0e      	ldr	r3, [pc, #56]	@ (801e028 <tcp_process+0x5c0>)
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	617b      	str	r3, [r7, #20]
 801dff4:	e027      	b.n	801e046 <tcp_process+0x5de>
 801dff6:	bf00      	nop
 801dff8:	2001005c 	.word	0x2001005c
 801dffc:	20010054 	.word	0x20010054
 801e000:	2001005a 	.word	0x2001005a
 801e004:	20010050 	.word	0x20010050
 801e008:	20010040 	.word	0x20010040
 801e00c:	20008ecc 	.word	0x20008ecc
 801e010:	20008ed0 	.word	0x20008ed0
 801e014:	0802727c 	.word	0x0802727c
 801e018:	08027560 	.word	0x08027560
 801e01c:	0802730c 	.word	0x0802730c
 801e020:	20010058 	.word	0x20010058
 801e024:	2001005d 	.word	0x2001005d
 801e028:	20010024 	.word	0x20010024
 801e02c:	697b      	ldr	r3, [r7, #20]
 801e02e:	68db      	ldr	r3, [r3, #12]
 801e030:	687a      	ldr	r2, [r7, #4]
 801e032:	429a      	cmp	r2, r3
 801e034:	d104      	bne.n	801e040 <tcp_process+0x5d8>
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	68da      	ldr	r2, [r3, #12]
 801e03a:	697b      	ldr	r3, [r7, #20]
 801e03c:	60da      	str	r2, [r3, #12]
 801e03e:	e005      	b.n	801e04c <tcp_process+0x5e4>
 801e040:	697b      	ldr	r3, [r7, #20]
 801e042:	68db      	ldr	r3, [r3, #12]
 801e044:	617b      	str	r3, [r7, #20]
 801e046:	697b      	ldr	r3, [r7, #20]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d1ef      	bne.n	801e02c <tcp_process+0x5c4>
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	2200      	movs	r2, #0
 801e050:	60da      	str	r2, [r3, #12]
 801e052:	4b77      	ldr	r3, [pc, #476]	@ (801e230 <tcp_process+0x7c8>)
 801e054:	2201      	movs	r2, #1
 801e056:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	220a      	movs	r2, #10
 801e05c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801e05e:	4b75      	ldr	r3, [pc, #468]	@ (801e234 <tcp_process+0x7cc>)
 801e060:	681a      	ldr	r2, [r3, #0]
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	60da      	str	r2, [r3, #12]
 801e066:	4a73      	ldr	r2, [pc, #460]	@ (801e234 <tcp_process+0x7cc>)
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	6013      	str	r3, [r2, #0]
 801e06c:	f003 f94e 	bl	802130c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801e070:	e0d2      	b.n	801e218 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	8b5b      	ldrh	r3, [r3, #26]
 801e076:	f043 0302 	orr.w	r3, r3, #2
 801e07a:	b29a      	uxth	r2, r3
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	2208      	movs	r2, #8
 801e084:	751a      	strb	r2, [r3, #20]
      break;
 801e086:	e0c7      	b.n	801e218 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e088:	4b6b      	ldr	r3, [pc, #428]	@ (801e238 <tcp_process+0x7d0>)
 801e08a:	781b      	ldrb	r3, [r3, #0]
 801e08c:	f003 0310 	and.w	r3, r3, #16
 801e090:	2b00      	cmp	r3, #0
 801e092:	f000 80c1 	beq.w	801e218 <tcp_process+0x7b0>
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e09a:	4b68      	ldr	r3, [pc, #416]	@ (801e23c <tcp_process+0x7d4>)
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	429a      	cmp	r2, r3
 801e0a0:	f040 80ba 	bne.w	801e218 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	f040 80b5 	bne.w	801e218 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	2206      	movs	r2, #6
 801e0b2:	751a      	strb	r2, [r3, #20]
      break;
 801e0b4:	e0b0      	b.n	801e218 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801e0b6:	6878      	ldr	r0, [r7, #4]
 801e0b8:	f000 f9ca 	bl	801e450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e0bc:	4b60      	ldr	r3, [pc, #384]	@ (801e240 <tcp_process+0x7d8>)
 801e0be:	781b      	ldrb	r3, [r3, #0]
 801e0c0:	f003 0320 	and.w	r3, r3, #32
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	f000 80a9 	beq.w	801e21c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	8b5b      	ldrh	r3, [r3, #26]
 801e0ce:	f043 0302 	orr.w	r3, r3, #2
 801e0d2:	b29a      	uxth	r2, r3
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801e0d8:	6878      	ldr	r0, [r7, #4]
 801e0da:	f7fe fd39 	bl	801cb50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e0de:	4b59      	ldr	r3, [pc, #356]	@ (801e244 <tcp_process+0x7dc>)
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	687a      	ldr	r2, [r7, #4]
 801e0e4:	429a      	cmp	r2, r3
 801e0e6:	d105      	bne.n	801e0f4 <tcp_process+0x68c>
 801e0e8:	4b56      	ldr	r3, [pc, #344]	@ (801e244 <tcp_process+0x7dc>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	68db      	ldr	r3, [r3, #12]
 801e0ee:	4a55      	ldr	r2, [pc, #340]	@ (801e244 <tcp_process+0x7dc>)
 801e0f0:	6013      	str	r3, [r2, #0]
 801e0f2:	e013      	b.n	801e11c <tcp_process+0x6b4>
 801e0f4:	4b53      	ldr	r3, [pc, #332]	@ (801e244 <tcp_process+0x7dc>)
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	613b      	str	r3, [r7, #16]
 801e0fa:	e00c      	b.n	801e116 <tcp_process+0x6ae>
 801e0fc:	693b      	ldr	r3, [r7, #16]
 801e0fe:	68db      	ldr	r3, [r3, #12]
 801e100:	687a      	ldr	r2, [r7, #4]
 801e102:	429a      	cmp	r2, r3
 801e104:	d104      	bne.n	801e110 <tcp_process+0x6a8>
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	68da      	ldr	r2, [r3, #12]
 801e10a:	693b      	ldr	r3, [r7, #16]
 801e10c:	60da      	str	r2, [r3, #12]
 801e10e:	e005      	b.n	801e11c <tcp_process+0x6b4>
 801e110:	693b      	ldr	r3, [r7, #16]
 801e112:	68db      	ldr	r3, [r3, #12]
 801e114:	613b      	str	r3, [r7, #16]
 801e116:	693b      	ldr	r3, [r7, #16]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d1ef      	bne.n	801e0fc <tcp_process+0x694>
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	2200      	movs	r2, #0
 801e120:	60da      	str	r2, [r3, #12]
 801e122:	4b43      	ldr	r3, [pc, #268]	@ (801e230 <tcp_process+0x7c8>)
 801e124:	2201      	movs	r2, #1
 801e126:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	220a      	movs	r2, #10
 801e12c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e12e:	4b41      	ldr	r3, [pc, #260]	@ (801e234 <tcp_process+0x7cc>)
 801e130:	681a      	ldr	r2, [r3, #0]
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	60da      	str	r2, [r3, #12]
 801e136:	4a3f      	ldr	r2, [pc, #252]	@ (801e234 <tcp_process+0x7cc>)
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	6013      	str	r3, [r2, #0]
 801e13c:	f003 f8e6 	bl	802130c <tcp_timer_needed>
      }
      break;
 801e140:	e06c      	b.n	801e21c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801e142:	6878      	ldr	r0, [r7, #4]
 801e144:	f000 f984 	bl	801e450 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e148:	4b3b      	ldr	r3, [pc, #236]	@ (801e238 <tcp_process+0x7d0>)
 801e14a:	781b      	ldrb	r3, [r3, #0]
 801e14c:	f003 0310 	and.w	r3, r3, #16
 801e150:	2b00      	cmp	r3, #0
 801e152:	d065      	beq.n	801e220 <tcp_process+0x7b8>
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e158:	4b38      	ldr	r3, [pc, #224]	@ (801e23c <tcp_process+0x7d4>)
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	429a      	cmp	r2, r3
 801e15e:	d15f      	bne.n	801e220 <tcp_process+0x7b8>
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e164:	2b00      	cmp	r3, #0
 801e166:	d15b      	bne.n	801e220 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801e168:	6878      	ldr	r0, [r7, #4]
 801e16a:	f7fe fcf1 	bl	801cb50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e16e:	4b35      	ldr	r3, [pc, #212]	@ (801e244 <tcp_process+0x7dc>)
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	687a      	ldr	r2, [r7, #4]
 801e174:	429a      	cmp	r2, r3
 801e176:	d105      	bne.n	801e184 <tcp_process+0x71c>
 801e178:	4b32      	ldr	r3, [pc, #200]	@ (801e244 <tcp_process+0x7dc>)
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	68db      	ldr	r3, [r3, #12]
 801e17e:	4a31      	ldr	r2, [pc, #196]	@ (801e244 <tcp_process+0x7dc>)
 801e180:	6013      	str	r3, [r2, #0]
 801e182:	e013      	b.n	801e1ac <tcp_process+0x744>
 801e184:	4b2f      	ldr	r3, [pc, #188]	@ (801e244 <tcp_process+0x7dc>)
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	60fb      	str	r3, [r7, #12]
 801e18a:	e00c      	b.n	801e1a6 <tcp_process+0x73e>
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	68db      	ldr	r3, [r3, #12]
 801e190:	687a      	ldr	r2, [r7, #4]
 801e192:	429a      	cmp	r2, r3
 801e194:	d104      	bne.n	801e1a0 <tcp_process+0x738>
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	68da      	ldr	r2, [r3, #12]
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	60da      	str	r2, [r3, #12]
 801e19e:	e005      	b.n	801e1ac <tcp_process+0x744>
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	68db      	ldr	r3, [r3, #12]
 801e1a4:	60fb      	str	r3, [r7, #12]
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d1ef      	bne.n	801e18c <tcp_process+0x724>
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	2200      	movs	r2, #0
 801e1b0:	60da      	str	r2, [r3, #12]
 801e1b2:	4b1f      	ldr	r3, [pc, #124]	@ (801e230 <tcp_process+0x7c8>)
 801e1b4:	2201      	movs	r2, #1
 801e1b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	220a      	movs	r2, #10
 801e1bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e1be:	4b1d      	ldr	r3, [pc, #116]	@ (801e234 <tcp_process+0x7cc>)
 801e1c0:	681a      	ldr	r2, [r3, #0]
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	60da      	str	r2, [r3, #12]
 801e1c6:	4a1b      	ldr	r2, [pc, #108]	@ (801e234 <tcp_process+0x7cc>)
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	6013      	str	r3, [r2, #0]
 801e1cc:	f003 f89e 	bl	802130c <tcp_timer_needed>
      }
      break;
 801e1d0:	e026      	b.n	801e220 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801e1d2:	6878      	ldr	r0, [r7, #4]
 801e1d4:	f000 f93c 	bl	801e450 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e1d8:	4b17      	ldr	r3, [pc, #92]	@ (801e238 <tcp_process+0x7d0>)
 801e1da:	781b      	ldrb	r3, [r3, #0]
 801e1dc:	f003 0310 	and.w	r3, r3, #16
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d01f      	beq.n	801e224 <tcp_process+0x7bc>
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e1e8:	4b14      	ldr	r3, [pc, #80]	@ (801e23c <tcp_process+0x7d4>)
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	429a      	cmp	r2, r3
 801e1ee:	d119      	bne.n	801e224 <tcp_process+0x7bc>
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d115      	bne.n	801e224 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801e1f8:	4b11      	ldr	r3, [pc, #68]	@ (801e240 <tcp_process+0x7d8>)
 801e1fa:	781b      	ldrb	r3, [r3, #0]
 801e1fc:	f043 0310 	orr.w	r3, r3, #16
 801e200:	b2da      	uxtb	r2, r3
 801e202:	4b0f      	ldr	r3, [pc, #60]	@ (801e240 <tcp_process+0x7d8>)
 801e204:	701a      	strb	r2, [r3, #0]
      }
      break;
 801e206:	e00d      	b.n	801e224 <tcp_process+0x7bc>
    default:
      break;
 801e208:	bf00      	nop
 801e20a:	e00c      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e20c:	bf00      	nop
 801e20e:	e00a      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e210:	bf00      	nop
 801e212:	e008      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e214:	bf00      	nop
 801e216:	e006      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e218:	bf00      	nop
 801e21a:	e004      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e21c:	bf00      	nop
 801e21e:	e002      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e220:	bf00      	nop
 801e222:	e000      	b.n	801e226 <tcp_process+0x7be>
      break;
 801e224:	bf00      	nop
  }
  return ERR_OK;
 801e226:	2300      	movs	r3, #0
}
 801e228:	4618      	mov	r0, r3
 801e22a:	3724      	adds	r7, #36	@ 0x24
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd90      	pop	{r4, r7, pc}
 801e230:	2001002c 	.word	0x2001002c
 801e234:	20010028 	.word	0x20010028
 801e238:	2001005c 	.word	0x2001005c
 801e23c:	20010054 	.word	0x20010054
 801e240:	2001005d 	.word	0x2001005d
 801e244:	20010024 	.word	0x20010024

0801e248 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e248:	b590      	push	{r4, r7, lr}
 801e24a:	b085      	sub	sp, #20
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
 801e250:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d106      	bne.n	801e266 <tcp_oos_insert_segment+0x1e>
 801e258:	4b3b      	ldr	r3, [pc, #236]	@ (801e348 <tcp_oos_insert_segment+0x100>)
 801e25a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801e25e:	493b      	ldr	r1, [pc, #236]	@ (801e34c <tcp_oos_insert_segment+0x104>)
 801e260:	483b      	ldr	r0, [pc, #236]	@ (801e350 <tcp_oos_insert_segment+0x108>)
 801e262:	f004 fb69 	bl	8022938 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	68db      	ldr	r3, [r3, #12]
 801e26a:	899b      	ldrh	r3, [r3, #12]
 801e26c:	b29b      	uxth	r3, r3
 801e26e:	4618      	mov	r0, r3
 801e270:	f7fa ffd6 	bl	8019220 <lwip_htons>
 801e274:	4603      	mov	r3, r0
 801e276:	b2db      	uxtb	r3, r3
 801e278:	f003 0301 	and.w	r3, r3, #1
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d028      	beq.n	801e2d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801e280:	6838      	ldr	r0, [r7, #0]
 801e282:	f7fe f995 	bl	801c5b0 <tcp_segs_free>
    next = NULL;
 801e286:	2300      	movs	r3, #0
 801e288:	603b      	str	r3, [r7, #0]
 801e28a:	e056      	b.n	801e33a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e28c:	683b      	ldr	r3, [r7, #0]
 801e28e:	68db      	ldr	r3, [r3, #12]
 801e290:	899b      	ldrh	r3, [r3, #12]
 801e292:	b29b      	uxth	r3, r3
 801e294:	4618      	mov	r0, r3
 801e296:	f7fa ffc3 	bl	8019220 <lwip_htons>
 801e29a:	4603      	mov	r3, r0
 801e29c:	b2db      	uxtb	r3, r3
 801e29e:	f003 0301 	and.w	r3, r3, #1
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d00d      	beq.n	801e2c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	68db      	ldr	r3, [r3, #12]
 801e2aa:	899b      	ldrh	r3, [r3, #12]
 801e2ac:	b29c      	uxth	r4, r3
 801e2ae:	2001      	movs	r0, #1
 801e2b0:	f7fa ffb6 	bl	8019220 <lwip_htons>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	461a      	mov	r2, r3
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	68db      	ldr	r3, [r3, #12]
 801e2bc:	4322      	orrs	r2, r4
 801e2be:	b292      	uxth	r2, r2
 801e2c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801e2c2:	683b      	ldr	r3, [r7, #0]
 801e2c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801e2c6:	683b      	ldr	r3, [r7, #0]
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801e2cc:	68f8      	ldr	r0, [r7, #12]
 801e2ce:	f7fe f984 	bl	801c5da <tcp_seg_free>
    while (next &&
 801e2d2:	683b      	ldr	r3, [r7, #0]
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d00e      	beq.n	801e2f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	891b      	ldrh	r3, [r3, #8]
 801e2dc:	461a      	mov	r2, r3
 801e2de:	4b1d      	ldr	r3, [pc, #116]	@ (801e354 <tcp_oos_insert_segment+0x10c>)
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	441a      	add	r2, r3
 801e2e4:	683b      	ldr	r3, [r7, #0]
 801e2e6:	68db      	ldr	r3, [r3, #12]
 801e2e8:	685b      	ldr	r3, [r3, #4]
 801e2ea:	6839      	ldr	r1, [r7, #0]
 801e2ec:	8909      	ldrh	r1, [r1, #8]
 801e2ee:	440b      	add	r3, r1
 801e2f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	daca      	bge.n	801e28c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801e2f6:	683b      	ldr	r3, [r7, #0]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d01e      	beq.n	801e33a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	891b      	ldrh	r3, [r3, #8]
 801e300:	461a      	mov	r2, r3
 801e302:	4b14      	ldr	r3, [pc, #80]	@ (801e354 <tcp_oos_insert_segment+0x10c>)
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	441a      	add	r2, r3
 801e308:	683b      	ldr	r3, [r7, #0]
 801e30a:	68db      	ldr	r3, [r3, #12]
 801e30c:	685b      	ldr	r3, [r3, #4]
 801e30e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801e310:	2b00      	cmp	r3, #0
 801e312:	dd12      	ble.n	801e33a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e314:	683b      	ldr	r3, [r7, #0]
 801e316:	68db      	ldr	r3, [r3, #12]
 801e318:	685b      	ldr	r3, [r3, #4]
 801e31a:	b29a      	uxth	r2, r3
 801e31c:	4b0d      	ldr	r3, [pc, #52]	@ (801e354 <tcp_oos_insert_segment+0x10c>)
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	b29b      	uxth	r3, r3
 801e322:	1ad3      	subs	r3, r2, r3
 801e324:	b29a      	uxth	r2, r3
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	685a      	ldr	r2, [r3, #4]
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	891b      	ldrh	r3, [r3, #8]
 801e332:	4619      	mov	r1, r3
 801e334:	4610      	mov	r0, r2
 801e336:	f7fc fa6d 	bl	801a814 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	683a      	ldr	r2, [r7, #0]
 801e33e:	601a      	str	r2, [r3, #0]
}
 801e340:	bf00      	nop
 801e342:	3714      	adds	r7, #20
 801e344:	46bd      	mov	sp, r7
 801e346:	bd90      	pop	{r4, r7, pc}
 801e348:	0802727c 	.word	0x0802727c
 801e34c:	08027580 	.word	0x08027580
 801e350:	0802730c 	.word	0x0802730c
 801e354:	20010050 	.word	0x20010050

0801e358 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801e358:	b5b0      	push	{r4, r5, r7, lr}
 801e35a:	b086      	sub	sp, #24
 801e35c:	af00      	add	r7, sp, #0
 801e35e:	60f8      	str	r0, [r7, #12]
 801e360:	60b9      	str	r1, [r7, #8]
 801e362:	607a      	str	r2, [r7, #4]
 801e364:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801e366:	e03e      	b.n	801e3e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801e36c:	68bb      	ldr	r3, [r7, #8]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801e372:	697b      	ldr	r3, [r7, #20]
 801e374:	685b      	ldr	r3, [r3, #4]
 801e376:	4618      	mov	r0, r3
 801e378:	f7fc fc92 	bl	801aca0 <pbuf_clen>
 801e37c:	4603      	mov	r3, r0
 801e37e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e386:	8a7a      	ldrh	r2, [r7, #18]
 801e388:	429a      	cmp	r2, r3
 801e38a:	d906      	bls.n	801e39a <tcp_free_acked_segments+0x42>
 801e38c:	4b2a      	ldr	r3, [pc, #168]	@ (801e438 <tcp_free_acked_segments+0xe0>)
 801e38e:	f240 4257 	movw	r2, #1111	@ 0x457
 801e392:	492a      	ldr	r1, [pc, #168]	@ (801e43c <tcp_free_acked_segments+0xe4>)
 801e394:	482a      	ldr	r0, [pc, #168]	@ (801e440 <tcp_free_acked_segments+0xe8>)
 801e396:	f004 facf 	bl	8022938 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801e3a0:	8a7b      	ldrh	r3, [r7, #18]
 801e3a2:	1ad3      	subs	r3, r2, r3
 801e3a4:	b29a      	uxth	r2, r3
 801e3a6:	68fb      	ldr	r3, [r7, #12]
 801e3a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e3ac:	697b      	ldr	r3, [r7, #20]
 801e3ae:	891a      	ldrh	r2, [r3, #8]
 801e3b0:	4b24      	ldr	r3, [pc, #144]	@ (801e444 <tcp_free_acked_segments+0xec>)
 801e3b2:	881b      	ldrh	r3, [r3, #0]
 801e3b4:	4413      	add	r3, r2
 801e3b6:	b29a      	uxth	r2, r3
 801e3b8:	4b22      	ldr	r3, [pc, #136]	@ (801e444 <tcp_free_acked_segments+0xec>)
 801e3ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801e3bc:	6978      	ldr	r0, [r7, #20]
 801e3be:	f7fe f90c 	bl	801c5da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d00c      	beq.n	801e3e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e3cc:	68bb      	ldr	r3, [r7, #8]
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d109      	bne.n	801e3e6 <tcp_free_acked_segments+0x8e>
 801e3d2:	683b      	ldr	r3, [r7, #0]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d106      	bne.n	801e3e6 <tcp_free_acked_segments+0x8e>
 801e3d8:	4b17      	ldr	r3, [pc, #92]	@ (801e438 <tcp_free_acked_segments+0xe0>)
 801e3da:	f240 4261 	movw	r2, #1121	@ 0x461
 801e3de:	491a      	ldr	r1, [pc, #104]	@ (801e448 <tcp_free_acked_segments+0xf0>)
 801e3e0:	4817      	ldr	r0, [pc, #92]	@ (801e440 <tcp_free_acked_segments+0xe8>)
 801e3e2:	f004 faa9 	bl	8022938 <iprintf>
  while (seg_list != NULL &&
 801e3e6:	68bb      	ldr	r3, [r7, #8]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d020      	beq.n	801e42e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801e3ec:	68bb      	ldr	r3, [r7, #8]
 801e3ee:	68db      	ldr	r3, [r3, #12]
 801e3f0:	685b      	ldr	r3, [r3, #4]
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7fa ff29 	bl	801924a <lwip_htonl>
 801e3f8:	4604      	mov	r4, r0
 801e3fa:	68bb      	ldr	r3, [r7, #8]
 801e3fc:	891b      	ldrh	r3, [r3, #8]
 801e3fe:	461d      	mov	r5, r3
 801e400:	68bb      	ldr	r3, [r7, #8]
 801e402:	68db      	ldr	r3, [r3, #12]
 801e404:	899b      	ldrh	r3, [r3, #12]
 801e406:	b29b      	uxth	r3, r3
 801e408:	4618      	mov	r0, r3
 801e40a:	f7fa ff09 	bl	8019220 <lwip_htons>
 801e40e:	4603      	mov	r3, r0
 801e410:	b2db      	uxtb	r3, r3
 801e412:	f003 0303 	and.w	r3, r3, #3
 801e416:	2b00      	cmp	r3, #0
 801e418:	d001      	beq.n	801e41e <tcp_free_acked_segments+0xc6>
 801e41a:	2301      	movs	r3, #1
 801e41c:	e000      	b.n	801e420 <tcp_free_acked_segments+0xc8>
 801e41e:	2300      	movs	r3, #0
 801e420:	442b      	add	r3, r5
 801e422:	18e2      	adds	r2, r4, r3
 801e424:	4b09      	ldr	r3, [pc, #36]	@ (801e44c <tcp_free_acked_segments+0xf4>)
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	dd9c      	ble.n	801e368 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801e42e:	68bb      	ldr	r3, [r7, #8]
}
 801e430:	4618      	mov	r0, r3
 801e432:	3718      	adds	r7, #24
 801e434:	46bd      	mov	sp, r7
 801e436:	bdb0      	pop	{r4, r5, r7, pc}
 801e438:	0802727c 	.word	0x0802727c
 801e43c:	080275a8 	.word	0x080275a8
 801e440:	0802730c 	.word	0x0802730c
 801e444:	20010058 	.word	0x20010058
 801e448:	080275d0 	.word	0x080275d0
 801e44c:	20010054 	.word	0x20010054

0801e450 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801e450:	b5b0      	push	{r4, r5, r7, lr}
 801e452:	b094      	sub	sp, #80	@ 0x50
 801e454:	af00      	add	r7, sp, #0
 801e456:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801e458:	2300      	movs	r3, #0
 801e45a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d106      	bne.n	801e470 <tcp_receive+0x20>
 801e462:	4b91      	ldr	r3, [pc, #580]	@ (801e6a8 <tcp_receive+0x258>)
 801e464:	f240 427b 	movw	r2, #1147	@ 0x47b
 801e468:	4990      	ldr	r1, [pc, #576]	@ (801e6ac <tcp_receive+0x25c>)
 801e46a:	4891      	ldr	r0, [pc, #580]	@ (801e6b0 <tcp_receive+0x260>)
 801e46c:	f004 fa64 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	7d1b      	ldrb	r3, [r3, #20]
 801e474:	2b03      	cmp	r3, #3
 801e476:	d806      	bhi.n	801e486 <tcp_receive+0x36>
 801e478:	4b8b      	ldr	r3, [pc, #556]	@ (801e6a8 <tcp_receive+0x258>)
 801e47a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801e47e:	498d      	ldr	r1, [pc, #564]	@ (801e6b4 <tcp_receive+0x264>)
 801e480:	488b      	ldr	r0, [pc, #556]	@ (801e6b0 <tcp_receive+0x260>)
 801e482:	f004 fa59 	bl	8022938 <iprintf>

  if (flags & TCP_ACK) {
 801e486:	4b8c      	ldr	r3, [pc, #560]	@ (801e6b8 <tcp_receive+0x268>)
 801e488:	781b      	ldrb	r3, [r3, #0]
 801e48a:	f003 0310 	and.w	r3, r3, #16
 801e48e:	2b00      	cmp	r3, #0
 801e490:	f000 8264 	beq.w	801e95c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e49a:	461a      	mov	r2, r3
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e4a0:	4413      	add	r3, r2
 801e4a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e4a8:	4b84      	ldr	r3, [pc, #528]	@ (801e6bc <tcp_receive+0x26c>)
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	1ad3      	subs	r3, r2, r3
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	db1b      	blt.n	801e4ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e4b6:	4b81      	ldr	r3, [pc, #516]	@ (801e6bc <tcp_receive+0x26c>)
 801e4b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4ba:	429a      	cmp	r2, r3
 801e4bc:	d106      	bne.n	801e4cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e4c2:	4b7f      	ldr	r3, [pc, #508]	@ (801e6c0 <tcp_receive+0x270>)
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	1ad3      	subs	r3, r2, r3
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	db0e      	blt.n	801e4ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e4d0:	4b7b      	ldr	r3, [pc, #492]	@ (801e6c0 <tcp_receive+0x270>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4d4:	429a      	cmp	r2, r3
 801e4d6:	d125      	bne.n	801e524 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e4d8:	4b7a      	ldr	r3, [pc, #488]	@ (801e6c4 <tcp_receive+0x274>)
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	89db      	ldrh	r3, [r3, #14]
 801e4de:	b29a      	uxth	r2, r3
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e4e6:	429a      	cmp	r2, r3
 801e4e8:	d91c      	bls.n	801e524 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e4ea:	4b76      	ldr	r3, [pc, #472]	@ (801e6c4 <tcp_receive+0x274>)
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	89db      	ldrh	r3, [r3, #14]
 801e4f0:	b29a      	uxth	r2, r3
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e504:	429a      	cmp	r2, r3
 801e506:	d205      	bcs.n	801e514 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801e514:	4b69      	ldr	r3, [pc, #420]	@ (801e6bc <tcp_receive+0x26c>)
 801e516:	681a      	ldr	r2, [r3, #0]
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801e51c:	4b68      	ldr	r3, [pc, #416]	@ (801e6c0 <tcp_receive+0x270>)
 801e51e:	681a      	ldr	r2, [r3, #0]
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e524:	4b66      	ldr	r3, [pc, #408]	@ (801e6c0 <tcp_receive+0x270>)
 801e526:	681a      	ldr	r2, [r3, #0]
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e52c:	1ad3      	subs	r3, r2, r3
 801e52e:	2b00      	cmp	r3, #0
 801e530:	dc58      	bgt.n	801e5e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801e532:	4b65      	ldr	r3, [pc, #404]	@ (801e6c8 <tcp_receive+0x278>)
 801e534:	881b      	ldrh	r3, [r3, #0]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d14b      	bne.n	801e5d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e53e:	687a      	ldr	r2, [r7, #4]
 801e540:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801e544:	4413      	add	r3, r2
 801e546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e548:	429a      	cmp	r2, r3
 801e54a:	d142      	bne.n	801e5d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801e552:	2b00      	cmp	r3, #0
 801e554:	db3d      	blt.n	801e5d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e55a:	4b59      	ldr	r3, [pc, #356]	@ (801e6c0 <tcp_receive+0x270>)
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	429a      	cmp	r2, r3
 801e560:	d137      	bne.n	801e5d2 <tcp_receive+0x182>
              found_dupack = 1;
 801e562:	2301      	movs	r3, #1
 801e564:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e56c:	2bff      	cmp	r3, #255	@ 0xff
 801e56e:	d007      	beq.n	801e580 <tcp_receive+0x130>
                ++pcb->dupacks;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e576:	3301      	adds	r3, #1
 801e578:	b2da      	uxtb	r2, r3
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e586:	2b03      	cmp	r3, #3
 801e588:	d91b      	bls.n	801e5c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e594:	4413      	add	r3, r2
 801e596:	b29a      	uxth	r2, r3
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e59e:	429a      	cmp	r2, r3
 801e5a0:	d30a      	bcc.n	801e5b8 <tcp_receive+0x168>
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e5ac:	4413      	add	r3, r2
 801e5ae:	b29a      	uxth	r2, r3
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e5b6:	e004      	b.n	801e5c2 <tcp_receive+0x172>
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e5be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e5c8:	2b02      	cmp	r3, #2
 801e5ca:	d902      	bls.n	801e5d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801e5cc:	6878      	ldr	r0, [r7, #4]
 801e5ce:	f002 fb41 	bl	8020c54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801e5d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	f040 8161 	bne.w	801e89c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	2200      	movs	r2, #0
 801e5de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801e5e2:	e15b      	b.n	801e89c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e5e4:	4b36      	ldr	r3, [pc, #216]	@ (801e6c0 <tcp_receive+0x270>)
 801e5e6:	681a      	ldr	r2, [r3, #0]
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e5ec:	1ad3      	subs	r3, r2, r3
 801e5ee:	3b01      	subs	r3, #1
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	f2c0 814e 	blt.w	801e892 <tcp_receive+0x442>
 801e5f6:	4b32      	ldr	r3, [pc, #200]	@ (801e6c0 <tcp_receive+0x270>)
 801e5f8:	681a      	ldr	r2, [r3, #0]
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e5fe:	1ad3      	subs	r3, r2, r3
 801e600:	2b00      	cmp	r3, #0
 801e602:	f300 8146 	bgt.w	801e892 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	8b5b      	ldrh	r3, [r3, #26]
 801e60a:	f003 0304 	and.w	r3, r3, #4
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d010      	beq.n	801e634 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	8b5b      	ldrh	r3, [r3, #26]
 801e616:	f023 0304 	bic.w	r3, r3, #4
 801e61a:	b29a      	uxth	r2, r3
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	2200      	movs	r2, #0
 801e630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	2200      	movs	r2, #0
 801e638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e642:	10db      	asrs	r3, r3, #3
 801e644:	b21b      	sxth	r3, r3
 801e646:	b29a      	uxth	r2, r3
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e64e:	b29b      	uxth	r3, r3
 801e650:	4413      	add	r3, r2
 801e652:	b29b      	uxth	r3, r3
 801e654:	b21a      	sxth	r2, r3
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e65c:	4b18      	ldr	r3, [pc, #96]	@ (801e6c0 <tcp_receive+0x270>)
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	b29a      	uxth	r2, r3
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e666:	b29b      	uxth	r3, r3
 801e668:	1ad3      	subs	r3, r2, r3
 801e66a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	2200      	movs	r2, #0
 801e670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801e674:	4b12      	ldr	r3, [pc, #72]	@ (801e6c0 <tcp_receive+0x270>)
 801e676:	681a      	ldr	r2, [r3, #0]
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	7d1b      	ldrb	r3, [r3, #20]
 801e680:	2b03      	cmp	r3, #3
 801e682:	f240 8097 	bls.w	801e7b4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e692:	429a      	cmp	r2, r3
 801e694:	d245      	bcs.n	801e722 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	8b5b      	ldrh	r3, [r3, #26]
 801e69a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d014      	beq.n	801e6cc <tcp_receive+0x27c>
 801e6a2:	2301      	movs	r3, #1
 801e6a4:	e013      	b.n	801e6ce <tcp_receive+0x27e>
 801e6a6:	bf00      	nop
 801e6a8:	0802727c 	.word	0x0802727c
 801e6ac:	080275f0 	.word	0x080275f0
 801e6b0:	0802730c 	.word	0x0802730c
 801e6b4:	0802760c 	.word	0x0802760c
 801e6b8:	2001005c 	.word	0x2001005c
 801e6bc:	20010050 	.word	0x20010050
 801e6c0:	20010054 	.word	0x20010054
 801e6c4:	20010040 	.word	0x20010040
 801e6c8:	2001005a 	.word	0x2001005a
 801e6cc:	2302      	movs	r3, #2
 801e6ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e6d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801e6d6:	b29a      	uxth	r2, r3
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e6dc:	fb12 f303 	smulbb	r3, r2, r3
 801e6e0:	b29b      	uxth	r3, r3
 801e6e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801e6e4:	4293      	cmp	r3, r2
 801e6e6:	bf28      	it	cs
 801e6e8:	4613      	movcs	r3, r2
 801e6ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e6f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e6f4:	4413      	add	r3, r2
 801e6f6:	b29a      	uxth	r2, r3
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e6fe:	429a      	cmp	r2, r3
 801e700:	d309      	bcc.n	801e716 <tcp_receive+0x2c6>
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e708:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e70a:	4413      	add	r3, r2
 801e70c:	b29a      	uxth	r2, r3
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e714:	e04e      	b.n	801e7b4 <tcp_receive+0x364>
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e71c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e720:	e048      	b.n	801e7b4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e72a:	4413      	add	r3, r2
 801e72c:	b29a      	uxth	r2, r3
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e734:	429a      	cmp	r2, r3
 801e736:	d309      	bcc.n	801e74c <tcp_receive+0x2fc>
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e73e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e740:	4413      	add	r3, r2
 801e742:	b29a      	uxth	r2, r3
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801e74a:	e004      	b.n	801e756 <tcp_receive+0x306>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e762:	429a      	cmp	r2, r3
 801e764:	d326      	bcc.n	801e7b4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e772:	1ad3      	subs	r3, r2, r3
 801e774:	b29a      	uxth	r2, r3
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e786:	4413      	add	r3, r2
 801e788:	b29a      	uxth	r2, r3
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e790:	429a      	cmp	r2, r3
 801e792:	d30a      	bcc.n	801e7aa <tcp_receive+0x35a>
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e79e:	4413      	add	r3, r2
 801e7a0:	b29a      	uxth	r2, r3
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801e7a8:	e004      	b.n	801e7b4 <tcp_receive+0x364>
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e7b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e7bc:	4a98      	ldr	r2, [pc, #608]	@ (801ea20 <tcp_receive+0x5d0>)
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7ff fdca 	bl	801e358 <tcp_free_acked_segments>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7d2:	4a94      	ldr	r2, [pc, #592]	@ (801ea24 <tcp_receive+0x5d4>)
 801e7d4:	6878      	ldr	r0, [r7, #4]
 801e7d6:	f7ff fdbf 	bl	801e358 <tcp_free_acked_segments>
 801e7da:	4602      	mov	r2, r0
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d104      	bne.n	801e7f2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e7ee:	861a      	strh	r2, [r3, #48]	@ 0x30
 801e7f0:	e002      	b.n	801e7f8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e802:	2b00      	cmp	r3, #0
 801e804:	d103      	bne.n	801e80e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	2200      	movs	r2, #0
 801e80a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801e814:	4b84      	ldr	r3, [pc, #528]	@ (801ea28 <tcp_receive+0x5d8>)
 801e816:	881b      	ldrh	r3, [r3, #0]
 801e818:	4413      	add	r3, r2
 801e81a:	b29a      	uxth	r2, r3
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	8b5b      	ldrh	r3, [r3, #26]
 801e826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d035      	beq.n	801e89a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e832:	2b00      	cmp	r3, #0
 801e834:	d118      	bne.n	801e868 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d00c      	beq.n	801e858 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	685b      	ldr	r3, [r3, #4]
 801e84a:	4618      	mov	r0, r3
 801e84c:	f7fa fcfd 	bl	801924a <lwip_htonl>
 801e850:	4603      	mov	r3, r0
 801e852:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801e854:	2b00      	cmp	r3, #0
 801e856:	dc20      	bgt.n	801e89a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	8b5b      	ldrh	r3, [r3, #26]
 801e85c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e860:	b29a      	uxth	r2, r3
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e866:	e018      	b.n	801e89a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e870:	68db      	ldr	r3, [r3, #12]
 801e872:	685b      	ldr	r3, [r3, #4]
 801e874:	4618      	mov	r0, r3
 801e876:	f7fa fce8 	bl	801924a <lwip_htonl>
 801e87a:	4603      	mov	r3, r0
 801e87c:	1ae3      	subs	r3, r4, r3
 801e87e:	2b00      	cmp	r3, #0
 801e880:	dc0b      	bgt.n	801e89a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	8b5b      	ldrh	r3, [r3, #26]
 801e886:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e88a:	b29a      	uxth	r2, r3
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e890:	e003      	b.n	801e89a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801e892:	6878      	ldr	r0, [r7, #4]
 801e894:	f002 fbca 	bl	802102c <tcp_send_empty_ack>
 801e898:	e000      	b.n	801e89c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e89a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d05b      	beq.n	801e95c <tcp_receive+0x50c>
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e8a8:	4b60      	ldr	r3, [pc, #384]	@ (801ea2c <tcp_receive+0x5dc>)
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	1ad3      	subs	r3, r2, r3
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	da54      	bge.n	801e95c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e8b2:	4b5f      	ldr	r3, [pc, #380]	@ (801ea30 <tcp_receive+0x5e0>)
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	b29a      	uxth	r2, r3
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e8bc:	b29b      	uxth	r3, r3
 801e8be:	1ad3      	subs	r3, r2, r3
 801e8c0:	b29b      	uxth	r3, r3
 801e8c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801e8c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e8d0:	10db      	asrs	r3, r3, #3
 801e8d2:	b21b      	sxth	r3, r3
 801e8d4:	b29b      	uxth	r3, r3
 801e8d6:	1ad3      	subs	r3, r2, r3
 801e8d8:	b29b      	uxth	r3, r3
 801e8da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e8e4:	b29a      	uxth	r2, r3
 801e8e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e8ea:	4413      	add	r3, r2
 801e8ec:	b29b      	uxth	r3, r3
 801e8ee:	b21a      	sxth	r2, r3
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801e8f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	da05      	bge.n	801e908 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801e8fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e900:	425b      	negs	r3, r3
 801e902:	b29b      	uxth	r3, r3
 801e904:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801e908:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e912:	109b      	asrs	r3, r3, #2
 801e914:	b21b      	sxth	r3, r3
 801e916:	b29b      	uxth	r3, r3
 801e918:	1ad3      	subs	r3, r2, r3
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e926:	b29a      	uxth	r2, r3
 801e928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e92c:	4413      	add	r3, r2
 801e92e:	b29b      	uxth	r3, r3
 801e930:	b21a      	sxth	r2, r3
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e93c:	10db      	asrs	r3, r3, #3
 801e93e:	b21b      	sxth	r3, r3
 801e940:	b29a      	uxth	r2, r3
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e948:	b29b      	uxth	r3, r3
 801e94a:	4413      	add	r3, r2
 801e94c:	b29b      	uxth	r3, r3
 801e94e:	b21a      	sxth	r2, r3
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	2200      	movs	r2, #0
 801e95a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e95c:	4b35      	ldr	r3, [pc, #212]	@ (801ea34 <tcp_receive+0x5e4>)
 801e95e:	881b      	ldrh	r3, [r3, #0]
 801e960:	2b00      	cmp	r3, #0
 801e962:	f000 84df 	beq.w	801f324 <tcp_receive+0xed4>
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	7d1b      	ldrb	r3, [r3, #20]
 801e96a:	2b06      	cmp	r3, #6
 801e96c:	f200 84da 	bhi.w	801f324 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e974:	4b30      	ldr	r3, [pc, #192]	@ (801ea38 <tcp_receive+0x5e8>)
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	1ad3      	subs	r3, r2, r3
 801e97a:	3b01      	subs	r3, #1
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	f2c0 808f 	blt.w	801eaa0 <tcp_receive+0x650>
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e986:	4b2b      	ldr	r3, [pc, #172]	@ (801ea34 <tcp_receive+0x5e4>)
 801e988:	881b      	ldrh	r3, [r3, #0]
 801e98a:	4619      	mov	r1, r3
 801e98c:	4b2a      	ldr	r3, [pc, #168]	@ (801ea38 <tcp_receive+0x5e8>)
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	440b      	add	r3, r1
 801e992:	1ad3      	subs	r3, r2, r3
 801e994:	3301      	adds	r3, #1
 801e996:	2b00      	cmp	r3, #0
 801e998:	f300 8082 	bgt.w	801eaa0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801e99c:	4b27      	ldr	r3, [pc, #156]	@ (801ea3c <tcp_receive+0x5ec>)
 801e99e:	685b      	ldr	r3, [r3, #4]
 801e9a0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e9a6:	4b24      	ldr	r3, [pc, #144]	@ (801ea38 <tcp_receive+0x5e8>)
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	1ad3      	subs	r3, r2, r3
 801e9ac:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e9ae:	4b23      	ldr	r3, [pc, #140]	@ (801ea3c <tcp_receive+0x5ec>)
 801e9b0:	685b      	ldr	r3, [r3, #4]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d106      	bne.n	801e9c4 <tcp_receive+0x574>
 801e9b6:	4b22      	ldr	r3, [pc, #136]	@ (801ea40 <tcp_receive+0x5f0>)
 801e9b8:	f240 5294 	movw	r2, #1428	@ 0x594
 801e9bc:	4921      	ldr	r1, [pc, #132]	@ (801ea44 <tcp_receive+0x5f4>)
 801e9be:	4822      	ldr	r0, [pc, #136]	@ (801ea48 <tcp_receive+0x5f8>)
 801e9c0:	f003 ffba 	bl	8022938 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e9ca:	4293      	cmp	r3, r2
 801e9cc:	d906      	bls.n	801e9dc <tcp_receive+0x58c>
 801e9ce:	4b1c      	ldr	r3, [pc, #112]	@ (801ea40 <tcp_receive+0x5f0>)
 801e9d0:	f240 5295 	movw	r2, #1429	@ 0x595
 801e9d4:	491d      	ldr	r1, [pc, #116]	@ (801ea4c <tcp_receive+0x5fc>)
 801e9d6:	481c      	ldr	r0, [pc, #112]	@ (801ea48 <tcp_receive+0x5f8>)
 801e9d8:	f003 ffae 	bl	8022938 <iprintf>
      off = (u16_t)off32;
 801e9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e9e2:	4b16      	ldr	r3, [pc, #88]	@ (801ea3c <tcp_receive+0x5ec>)
 801e9e4:	685b      	ldr	r3, [r3, #4]
 801e9e6:	891b      	ldrh	r3, [r3, #8]
 801e9e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e9ec:	429a      	cmp	r2, r3
 801e9ee:	d906      	bls.n	801e9fe <tcp_receive+0x5ae>
 801e9f0:	4b13      	ldr	r3, [pc, #76]	@ (801ea40 <tcp_receive+0x5f0>)
 801e9f2:	f240 5297 	movw	r2, #1431	@ 0x597
 801e9f6:	4916      	ldr	r1, [pc, #88]	@ (801ea50 <tcp_receive+0x600>)
 801e9f8:	4813      	ldr	r0, [pc, #76]	@ (801ea48 <tcp_receive+0x5f8>)
 801e9fa:	f003 ff9d 	bl	8022938 <iprintf>
      inseg.len -= off;
 801e9fe:	4b0f      	ldr	r3, [pc, #60]	@ (801ea3c <tcp_receive+0x5ec>)
 801ea00:	891a      	ldrh	r2, [r3, #8]
 801ea02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea06:	1ad3      	subs	r3, r2, r3
 801ea08:	b29a      	uxth	r2, r3
 801ea0a:	4b0c      	ldr	r3, [pc, #48]	@ (801ea3c <tcp_receive+0x5ec>)
 801ea0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ea0e:	4b0b      	ldr	r3, [pc, #44]	@ (801ea3c <tcp_receive+0x5ec>)
 801ea10:	685b      	ldr	r3, [r3, #4]
 801ea12:	891a      	ldrh	r2, [r3, #8]
 801ea14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea18:	1ad3      	subs	r3, r2, r3
 801ea1a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801ea1c:	e02a      	b.n	801ea74 <tcp_receive+0x624>
 801ea1e:	bf00      	nop
 801ea20:	08027628 	.word	0x08027628
 801ea24:	08027630 	.word	0x08027630
 801ea28:	20010058 	.word	0x20010058
 801ea2c:	20010054 	.word	0x20010054
 801ea30:	20010018 	.word	0x20010018
 801ea34:	2001005a 	.word	0x2001005a
 801ea38:	20010050 	.word	0x20010050
 801ea3c:	20010030 	.word	0x20010030
 801ea40:	0802727c 	.word	0x0802727c
 801ea44:	08027638 	.word	0x08027638
 801ea48:	0802730c 	.word	0x0802730c
 801ea4c:	08027648 	.word	0x08027648
 801ea50:	08027658 	.word	0x08027658
        off -= p->len;
 801ea54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea56:	895b      	ldrh	r3, [r3, #10]
 801ea58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea5c:	1ad3      	subs	r3, r2, r3
 801ea5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801ea62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea64:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801ea66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ea68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ea6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801ea74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea76:	895b      	ldrh	r3, [r3, #10]
 801ea78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea7c:	429a      	cmp	r2, r3
 801ea7e:	d8e9      	bhi.n	801ea54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ea80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea84:	4619      	mov	r1, r3
 801ea86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ea88:	f7fb ffc4 	bl	801aa14 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea90:	4a90      	ldr	r2, [pc, #576]	@ (801ecd4 <tcp_receive+0x884>)
 801ea92:	6013      	str	r3, [r2, #0]
 801ea94:	4b90      	ldr	r3, [pc, #576]	@ (801ecd8 <tcp_receive+0x888>)
 801ea96:	68db      	ldr	r3, [r3, #12]
 801ea98:	4a8e      	ldr	r2, [pc, #568]	@ (801ecd4 <tcp_receive+0x884>)
 801ea9a:	6812      	ldr	r2, [r2, #0]
 801ea9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ea9e:	e00d      	b.n	801eabc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801eaa0:	4b8c      	ldr	r3, [pc, #560]	@ (801ecd4 <tcp_receive+0x884>)
 801eaa2:	681a      	ldr	r2, [r3, #0]
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eaa8:	1ad3      	subs	r3, r2, r3
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	da06      	bge.n	801eabc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	8b5b      	ldrh	r3, [r3, #26]
 801eab2:	f043 0302 	orr.w	r3, r3, #2
 801eab6:	b29a      	uxth	r2, r3
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801eabc:	4b85      	ldr	r3, [pc, #532]	@ (801ecd4 <tcp_receive+0x884>)
 801eabe:	681a      	ldr	r2, [r3, #0]
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eac4:	1ad3      	subs	r3, r2, r3
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	f2c0 8427 	blt.w	801f31a <tcp_receive+0xeca>
 801eacc:	4b81      	ldr	r3, [pc, #516]	@ (801ecd4 <tcp_receive+0x884>)
 801eace:	681a      	ldr	r2, [r3, #0]
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ead4:	6879      	ldr	r1, [r7, #4]
 801ead6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ead8:	440b      	add	r3, r1
 801eada:	1ad3      	subs	r3, r2, r3
 801eadc:	3301      	adds	r3, #1
 801eade:	2b00      	cmp	r3, #0
 801eae0:	f300 841b 	bgt.w	801f31a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801eae8:	4b7a      	ldr	r3, [pc, #488]	@ (801ecd4 <tcp_receive+0x884>)
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	429a      	cmp	r2, r3
 801eaee:	f040 8298 	bne.w	801f022 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801eaf2:	4b79      	ldr	r3, [pc, #484]	@ (801ecd8 <tcp_receive+0x888>)
 801eaf4:	891c      	ldrh	r4, [r3, #8]
 801eaf6:	4b78      	ldr	r3, [pc, #480]	@ (801ecd8 <tcp_receive+0x888>)
 801eaf8:	68db      	ldr	r3, [r3, #12]
 801eafa:	899b      	ldrh	r3, [r3, #12]
 801eafc:	b29b      	uxth	r3, r3
 801eafe:	4618      	mov	r0, r3
 801eb00:	f7fa fb8e 	bl	8019220 <lwip_htons>
 801eb04:	4603      	mov	r3, r0
 801eb06:	b2db      	uxtb	r3, r3
 801eb08:	f003 0303 	and.w	r3, r3, #3
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d001      	beq.n	801eb14 <tcp_receive+0x6c4>
 801eb10:	2301      	movs	r3, #1
 801eb12:	e000      	b.n	801eb16 <tcp_receive+0x6c6>
 801eb14:	2300      	movs	r3, #0
 801eb16:	4423      	add	r3, r4
 801eb18:	b29a      	uxth	r2, r3
 801eb1a:	4b70      	ldr	r3, [pc, #448]	@ (801ecdc <tcp_receive+0x88c>)
 801eb1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801eb22:	4b6e      	ldr	r3, [pc, #440]	@ (801ecdc <tcp_receive+0x88c>)
 801eb24:	881b      	ldrh	r3, [r3, #0]
 801eb26:	429a      	cmp	r2, r3
 801eb28:	d274      	bcs.n	801ec14 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb2a:	4b6b      	ldr	r3, [pc, #428]	@ (801ecd8 <tcp_receive+0x888>)
 801eb2c:	68db      	ldr	r3, [r3, #12]
 801eb2e:	899b      	ldrh	r3, [r3, #12]
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	4618      	mov	r0, r3
 801eb34:	f7fa fb74 	bl	8019220 <lwip_htons>
 801eb38:	4603      	mov	r3, r0
 801eb3a:	b2db      	uxtb	r3, r3
 801eb3c:	f003 0301 	and.w	r3, r3, #1
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d01e      	beq.n	801eb82 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eb44:	4b64      	ldr	r3, [pc, #400]	@ (801ecd8 <tcp_receive+0x888>)
 801eb46:	68db      	ldr	r3, [r3, #12]
 801eb48:	899b      	ldrh	r3, [r3, #12]
 801eb4a:	b29b      	uxth	r3, r3
 801eb4c:	b21b      	sxth	r3, r3
 801eb4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801eb52:	b21c      	sxth	r4, r3
 801eb54:	4b60      	ldr	r3, [pc, #384]	@ (801ecd8 <tcp_receive+0x888>)
 801eb56:	68db      	ldr	r3, [r3, #12]
 801eb58:	899b      	ldrh	r3, [r3, #12]
 801eb5a:	b29b      	uxth	r3, r3
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	f7fa fb5f 	bl	8019220 <lwip_htons>
 801eb62:	4603      	mov	r3, r0
 801eb64:	b2db      	uxtb	r3, r3
 801eb66:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f7fa fb57 	bl	8019220 <lwip_htons>
 801eb72:	4603      	mov	r3, r0
 801eb74:	b21b      	sxth	r3, r3
 801eb76:	4323      	orrs	r3, r4
 801eb78:	b21a      	sxth	r2, r3
 801eb7a:	4b57      	ldr	r3, [pc, #348]	@ (801ecd8 <tcp_receive+0x888>)
 801eb7c:	68db      	ldr	r3, [r3, #12]
 801eb7e:	b292      	uxth	r2, r2
 801eb80:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801eb86:	4b54      	ldr	r3, [pc, #336]	@ (801ecd8 <tcp_receive+0x888>)
 801eb88:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb8a:	4b53      	ldr	r3, [pc, #332]	@ (801ecd8 <tcp_receive+0x888>)
 801eb8c:	68db      	ldr	r3, [r3, #12]
 801eb8e:	899b      	ldrh	r3, [r3, #12]
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	4618      	mov	r0, r3
 801eb94:	f7fa fb44 	bl	8019220 <lwip_htons>
 801eb98:	4603      	mov	r3, r0
 801eb9a:	b2db      	uxtb	r3, r3
 801eb9c:	f003 0302 	and.w	r3, r3, #2
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d005      	beq.n	801ebb0 <tcp_receive+0x760>
            inseg.len -= 1;
 801eba4:	4b4c      	ldr	r3, [pc, #304]	@ (801ecd8 <tcp_receive+0x888>)
 801eba6:	891b      	ldrh	r3, [r3, #8]
 801eba8:	3b01      	subs	r3, #1
 801ebaa:	b29a      	uxth	r2, r3
 801ebac:	4b4a      	ldr	r3, [pc, #296]	@ (801ecd8 <tcp_receive+0x888>)
 801ebae:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801ebb0:	4b49      	ldr	r3, [pc, #292]	@ (801ecd8 <tcp_receive+0x888>)
 801ebb2:	685b      	ldr	r3, [r3, #4]
 801ebb4:	4a48      	ldr	r2, [pc, #288]	@ (801ecd8 <tcp_receive+0x888>)
 801ebb6:	8912      	ldrh	r2, [r2, #8]
 801ebb8:	4611      	mov	r1, r2
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7fb fe2a 	bl	801a814 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ebc0:	4b45      	ldr	r3, [pc, #276]	@ (801ecd8 <tcp_receive+0x888>)
 801ebc2:	891c      	ldrh	r4, [r3, #8]
 801ebc4:	4b44      	ldr	r3, [pc, #272]	@ (801ecd8 <tcp_receive+0x888>)
 801ebc6:	68db      	ldr	r3, [r3, #12]
 801ebc8:	899b      	ldrh	r3, [r3, #12]
 801ebca:	b29b      	uxth	r3, r3
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7fa fb27 	bl	8019220 <lwip_htons>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	b2db      	uxtb	r3, r3
 801ebd6:	f003 0303 	and.w	r3, r3, #3
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d001      	beq.n	801ebe2 <tcp_receive+0x792>
 801ebde:	2301      	movs	r3, #1
 801ebe0:	e000      	b.n	801ebe4 <tcp_receive+0x794>
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	4423      	add	r3, r4
 801ebe6:	b29a      	uxth	r2, r3
 801ebe8:	4b3c      	ldr	r3, [pc, #240]	@ (801ecdc <tcp_receive+0x88c>)
 801ebea:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ebec:	4b3b      	ldr	r3, [pc, #236]	@ (801ecdc <tcp_receive+0x88c>)
 801ebee:	881b      	ldrh	r3, [r3, #0]
 801ebf0:	461a      	mov	r2, r3
 801ebf2:	4b38      	ldr	r3, [pc, #224]	@ (801ecd4 <tcp_receive+0x884>)
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	441a      	add	r2, r3
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ebfc:	6879      	ldr	r1, [r7, #4]
 801ebfe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ec00:	440b      	add	r3, r1
 801ec02:	429a      	cmp	r2, r3
 801ec04:	d006      	beq.n	801ec14 <tcp_receive+0x7c4>
 801ec06:	4b36      	ldr	r3, [pc, #216]	@ (801ece0 <tcp_receive+0x890>)
 801ec08:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801ec0c:	4935      	ldr	r1, [pc, #212]	@ (801ece4 <tcp_receive+0x894>)
 801ec0e:	4836      	ldr	r0, [pc, #216]	@ (801ece8 <tcp_receive+0x898>)
 801ec10:	f003 fe92 	bl	8022938 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	f000 80e6 	beq.w	801edea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ec1e:	4b2e      	ldr	r3, [pc, #184]	@ (801ecd8 <tcp_receive+0x888>)
 801ec20:	68db      	ldr	r3, [r3, #12]
 801ec22:	899b      	ldrh	r3, [r3, #12]
 801ec24:	b29b      	uxth	r3, r3
 801ec26:	4618      	mov	r0, r3
 801ec28:	f7fa fafa 	bl	8019220 <lwip_htons>
 801ec2c:	4603      	mov	r3, r0
 801ec2e:	b2db      	uxtb	r3, r3
 801ec30:	f003 0301 	and.w	r3, r3, #1
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d010      	beq.n	801ec5a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801ec38:	e00a      	b.n	801ec50 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec3e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec44:	681a      	ldr	r2, [r3, #0]
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801ec4a:	68f8      	ldr	r0, [r7, #12]
 801ec4c:	f7fd fcc5 	bl	801c5da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d1f0      	bne.n	801ec3a <tcp_receive+0x7ea>
 801ec58:	e0c7      	b.n	801edea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801ec60:	e051      	b.n	801ed06 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ec62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec64:	68db      	ldr	r3, [r3, #12]
 801ec66:	899b      	ldrh	r3, [r3, #12]
 801ec68:	b29b      	uxth	r3, r3
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	f7fa fad8 	bl	8019220 <lwip_htons>
 801ec70:	4603      	mov	r3, r0
 801ec72:	b2db      	uxtb	r3, r3
 801ec74:	f003 0301 	and.w	r3, r3, #1
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d03c      	beq.n	801ecf6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801ec7c:	4b16      	ldr	r3, [pc, #88]	@ (801ecd8 <tcp_receive+0x888>)
 801ec7e:	68db      	ldr	r3, [r3, #12]
 801ec80:	899b      	ldrh	r3, [r3, #12]
 801ec82:	b29b      	uxth	r3, r3
 801ec84:	4618      	mov	r0, r3
 801ec86:	f7fa facb 	bl	8019220 <lwip_htons>
 801ec8a:	4603      	mov	r3, r0
 801ec8c:	b2db      	uxtb	r3, r3
 801ec8e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d12f      	bne.n	801ecf6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801ec96:	4b10      	ldr	r3, [pc, #64]	@ (801ecd8 <tcp_receive+0x888>)
 801ec98:	68db      	ldr	r3, [r3, #12]
 801ec9a:	899b      	ldrh	r3, [r3, #12]
 801ec9c:	b29c      	uxth	r4, r3
 801ec9e:	2001      	movs	r0, #1
 801eca0:	f7fa fabe 	bl	8019220 <lwip_htons>
 801eca4:	4603      	mov	r3, r0
 801eca6:	461a      	mov	r2, r3
 801eca8:	4b0b      	ldr	r3, [pc, #44]	@ (801ecd8 <tcp_receive+0x888>)
 801ecaa:	68db      	ldr	r3, [r3, #12]
 801ecac:	4322      	orrs	r2, r4
 801ecae:	b292      	uxth	r2, r2
 801ecb0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801ecb2:	4b09      	ldr	r3, [pc, #36]	@ (801ecd8 <tcp_receive+0x888>)
 801ecb4:	891c      	ldrh	r4, [r3, #8]
 801ecb6:	4b08      	ldr	r3, [pc, #32]	@ (801ecd8 <tcp_receive+0x888>)
 801ecb8:	68db      	ldr	r3, [r3, #12]
 801ecba:	899b      	ldrh	r3, [r3, #12]
 801ecbc:	b29b      	uxth	r3, r3
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7fa faae 	bl	8019220 <lwip_htons>
 801ecc4:	4603      	mov	r3, r0
 801ecc6:	b2db      	uxtb	r3, r3
 801ecc8:	f003 0303 	and.w	r3, r3, #3
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d00d      	beq.n	801ecec <tcp_receive+0x89c>
 801ecd0:	2301      	movs	r3, #1
 801ecd2:	e00c      	b.n	801ecee <tcp_receive+0x89e>
 801ecd4:	20010050 	.word	0x20010050
 801ecd8:	20010030 	.word	0x20010030
 801ecdc:	2001005a 	.word	0x2001005a
 801ece0:	0802727c 	.word	0x0802727c
 801ece4:	08027668 	.word	0x08027668
 801ece8:	0802730c 	.word	0x0802730c
 801ecec:	2300      	movs	r3, #0
 801ecee:	4423      	add	r3, r4
 801ecf0:	b29a      	uxth	r2, r3
 801ecf2:	4b98      	ldr	r3, [pc, #608]	@ (801ef54 <tcp_receive+0xb04>)
 801ecf4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ecf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecf8:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ecfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801ed00:	6938      	ldr	r0, [r7, #16]
 801ed02:	f7fd fc6a 	bl	801c5da <tcp_seg_free>
            while (next &&
 801ed06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d00e      	beq.n	801ed2a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ed0c:	4b91      	ldr	r3, [pc, #580]	@ (801ef54 <tcp_receive+0xb04>)
 801ed0e:	881b      	ldrh	r3, [r3, #0]
 801ed10:	461a      	mov	r2, r3
 801ed12:	4b91      	ldr	r3, [pc, #580]	@ (801ef58 <tcp_receive+0xb08>)
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	441a      	add	r2, r3
 801ed18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed1a:	68db      	ldr	r3, [r3, #12]
 801ed1c:	685b      	ldr	r3, [r3, #4]
 801ed1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ed20:	8909      	ldrh	r1, [r1, #8]
 801ed22:	440b      	add	r3, r1
 801ed24:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	da9b      	bge.n	801ec62 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ed2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d059      	beq.n	801ede4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801ed30:	4b88      	ldr	r3, [pc, #544]	@ (801ef54 <tcp_receive+0xb04>)
 801ed32:	881b      	ldrh	r3, [r3, #0]
 801ed34:	461a      	mov	r2, r3
 801ed36:	4b88      	ldr	r3, [pc, #544]	@ (801ef58 <tcp_receive+0xb08>)
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	441a      	add	r2, r3
 801ed3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed3e:	68db      	ldr	r3, [r3, #12]
 801ed40:	685b      	ldr	r3, [r3, #4]
 801ed42:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	dd4d      	ble.n	801ede4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ed48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed4a:	68db      	ldr	r3, [r3, #12]
 801ed4c:	685b      	ldr	r3, [r3, #4]
 801ed4e:	b29a      	uxth	r2, r3
 801ed50:	4b81      	ldr	r3, [pc, #516]	@ (801ef58 <tcp_receive+0xb08>)
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	b29b      	uxth	r3, r3
 801ed56:	1ad3      	subs	r3, r2, r3
 801ed58:	b29a      	uxth	r2, r3
 801ed5a:	4b80      	ldr	r3, [pc, #512]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ed5e:	4b7f      	ldr	r3, [pc, #508]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed60:	68db      	ldr	r3, [r3, #12]
 801ed62:	899b      	ldrh	r3, [r3, #12]
 801ed64:	b29b      	uxth	r3, r3
 801ed66:	4618      	mov	r0, r3
 801ed68:	f7fa fa5a 	bl	8019220 <lwip_htons>
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	b2db      	uxtb	r3, r3
 801ed70:	f003 0302 	and.w	r3, r3, #2
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d005      	beq.n	801ed84 <tcp_receive+0x934>
                inseg.len -= 1;
 801ed78:	4b78      	ldr	r3, [pc, #480]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed7a:	891b      	ldrh	r3, [r3, #8]
 801ed7c:	3b01      	subs	r3, #1
 801ed7e:	b29a      	uxth	r2, r3
 801ed80:	4b76      	ldr	r3, [pc, #472]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801ed84:	4b75      	ldr	r3, [pc, #468]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed86:	685b      	ldr	r3, [r3, #4]
 801ed88:	4a74      	ldr	r2, [pc, #464]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed8a:	8912      	ldrh	r2, [r2, #8]
 801ed8c:	4611      	mov	r1, r2
 801ed8e:	4618      	mov	r0, r3
 801ed90:	f7fb fd40 	bl	801a814 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801ed94:	4b71      	ldr	r3, [pc, #452]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed96:	891c      	ldrh	r4, [r3, #8]
 801ed98:	4b70      	ldr	r3, [pc, #448]	@ (801ef5c <tcp_receive+0xb0c>)
 801ed9a:	68db      	ldr	r3, [r3, #12]
 801ed9c:	899b      	ldrh	r3, [r3, #12]
 801ed9e:	b29b      	uxth	r3, r3
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7fa fa3d 	bl	8019220 <lwip_htons>
 801eda6:	4603      	mov	r3, r0
 801eda8:	b2db      	uxtb	r3, r3
 801edaa:	f003 0303 	and.w	r3, r3, #3
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d001      	beq.n	801edb6 <tcp_receive+0x966>
 801edb2:	2301      	movs	r3, #1
 801edb4:	e000      	b.n	801edb8 <tcp_receive+0x968>
 801edb6:	2300      	movs	r3, #0
 801edb8:	4423      	add	r3, r4
 801edba:	b29a      	uxth	r2, r3
 801edbc:	4b65      	ldr	r3, [pc, #404]	@ (801ef54 <tcp_receive+0xb04>)
 801edbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801edc0:	4b64      	ldr	r3, [pc, #400]	@ (801ef54 <tcp_receive+0xb04>)
 801edc2:	881b      	ldrh	r3, [r3, #0]
 801edc4:	461a      	mov	r2, r3
 801edc6:	4b64      	ldr	r3, [pc, #400]	@ (801ef58 <tcp_receive+0xb08>)
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	441a      	add	r2, r3
 801edcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801edce:	68db      	ldr	r3, [r3, #12]
 801edd0:	685b      	ldr	r3, [r3, #4]
 801edd2:	429a      	cmp	r2, r3
 801edd4:	d006      	beq.n	801ede4 <tcp_receive+0x994>
 801edd6:	4b62      	ldr	r3, [pc, #392]	@ (801ef60 <tcp_receive+0xb10>)
 801edd8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801eddc:	4961      	ldr	r1, [pc, #388]	@ (801ef64 <tcp_receive+0xb14>)
 801edde:	4862      	ldr	r0, [pc, #392]	@ (801ef68 <tcp_receive+0xb18>)
 801ede0:	f003 fdaa 	bl	8022938 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ede8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801edea:	4b5a      	ldr	r3, [pc, #360]	@ (801ef54 <tcp_receive+0xb04>)
 801edec:	881b      	ldrh	r3, [r3, #0]
 801edee:	461a      	mov	r2, r3
 801edf0:	4b59      	ldr	r3, [pc, #356]	@ (801ef58 <tcp_receive+0xb08>)
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	441a      	add	r2, r3
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801edfe:	4b55      	ldr	r3, [pc, #340]	@ (801ef54 <tcp_receive+0xb04>)
 801ee00:	881b      	ldrh	r3, [r3, #0]
 801ee02:	429a      	cmp	r2, r3
 801ee04:	d206      	bcs.n	801ee14 <tcp_receive+0x9c4>
 801ee06:	4b56      	ldr	r3, [pc, #344]	@ (801ef60 <tcp_receive+0xb10>)
 801ee08:	f240 6207 	movw	r2, #1543	@ 0x607
 801ee0c:	4957      	ldr	r1, [pc, #348]	@ (801ef6c <tcp_receive+0xb1c>)
 801ee0e:	4856      	ldr	r0, [pc, #344]	@ (801ef68 <tcp_receive+0xb18>)
 801ee10:	f003 fd92 	bl	8022938 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801ee18:	4b4e      	ldr	r3, [pc, #312]	@ (801ef54 <tcp_receive+0xb04>)
 801ee1a:	881b      	ldrh	r3, [r3, #0]
 801ee1c:	1ad3      	subs	r3, r2, r3
 801ee1e:	b29a      	uxth	r2, r3
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ee24:	6878      	ldr	r0, [r7, #4]
 801ee26:	f7fc fead 	bl	801bb84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ee2a:	4b4c      	ldr	r3, [pc, #304]	@ (801ef5c <tcp_receive+0xb0c>)
 801ee2c:	685b      	ldr	r3, [r3, #4]
 801ee2e:	891b      	ldrh	r3, [r3, #8]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d006      	beq.n	801ee42 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801ee34:	4b49      	ldr	r3, [pc, #292]	@ (801ef5c <tcp_receive+0xb0c>)
 801ee36:	685b      	ldr	r3, [r3, #4]
 801ee38:	4a4d      	ldr	r2, [pc, #308]	@ (801ef70 <tcp_receive+0xb20>)
 801ee3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ee3c:	4b47      	ldr	r3, [pc, #284]	@ (801ef5c <tcp_receive+0xb0c>)
 801ee3e:	2200      	movs	r2, #0
 801ee40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ee42:	4b46      	ldr	r3, [pc, #280]	@ (801ef5c <tcp_receive+0xb0c>)
 801ee44:	68db      	ldr	r3, [r3, #12]
 801ee46:	899b      	ldrh	r3, [r3, #12]
 801ee48:	b29b      	uxth	r3, r3
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f7fa f9e8 	bl	8019220 <lwip_htons>
 801ee50:	4603      	mov	r3, r0
 801ee52:	b2db      	uxtb	r3, r3
 801ee54:	f003 0301 	and.w	r3, r3, #1
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	f000 80b8 	beq.w	801efce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ee5e:	4b45      	ldr	r3, [pc, #276]	@ (801ef74 <tcp_receive+0xb24>)
 801ee60:	781b      	ldrb	r3, [r3, #0]
 801ee62:	f043 0320 	orr.w	r3, r3, #32
 801ee66:	b2da      	uxtb	r2, r3
 801ee68:	4b42      	ldr	r3, [pc, #264]	@ (801ef74 <tcp_receive+0xb24>)
 801ee6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801ee6c:	e0af      	b.n	801efce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee78:	68db      	ldr	r3, [r3, #12]
 801ee7a:	685b      	ldr	r3, [r3, #4]
 801ee7c:	4a36      	ldr	r2, [pc, #216]	@ (801ef58 <tcp_receive+0xb08>)
 801ee7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ee80:	68bb      	ldr	r3, [r7, #8]
 801ee82:	891b      	ldrh	r3, [r3, #8]
 801ee84:	461c      	mov	r4, r3
 801ee86:	68bb      	ldr	r3, [r7, #8]
 801ee88:	68db      	ldr	r3, [r3, #12]
 801ee8a:	899b      	ldrh	r3, [r3, #12]
 801ee8c:	b29b      	uxth	r3, r3
 801ee8e:	4618      	mov	r0, r3
 801ee90:	f7fa f9c6 	bl	8019220 <lwip_htons>
 801ee94:	4603      	mov	r3, r0
 801ee96:	b2db      	uxtb	r3, r3
 801ee98:	f003 0303 	and.w	r3, r3, #3
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	d001      	beq.n	801eea4 <tcp_receive+0xa54>
 801eea0:	2301      	movs	r3, #1
 801eea2:	e000      	b.n	801eea6 <tcp_receive+0xa56>
 801eea4:	2300      	movs	r3, #0
 801eea6:	191a      	adds	r2, r3, r4
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eeac:	441a      	add	r2, r3
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801eeb6:	461c      	mov	r4, r3
 801eeb8:	68bb      	ldr	r3, [r7, #8]
 801eeba:	891b      	ldrh	r3, [r3, #8]
 801eebc:	461d      	mov	r5, r3
 801eebe:	68bb      	ldr	r3, [r7, #8]
 801eec0:	68db      	ldr	r3, [r3, #12]
 801eec2:	899b      	ldrh	r3, [r3, #12]
 801eec4:	b29b      	uxth	r3, r3
 801eec6:	4618      	mov	r0, r3
 801eec8:	f7fa f9aa 	bl	8019220 <lwip_htons>
 801eecc:	4603      	mov	r3, r0
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	f003 0303 	and.w	r3, r3, #3
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d001      	beq.n	801eedc <tcp_receive+0xa8c>
 801eed8:	2301      	movs	r3, #1
 801eeda:	e000      	b.n	801eede <tcp_receive+0xa8e>
 801eedc:	2300      	movs	r3, #0
 801eede:	442b      	add	r3, r5
 801eee0:	429c      	cmp	r4, r3
 801eee2:	d206      	bcs.n	801eef2 <tcp_receive+0xaa2>
 801eee4:	4b1e      	ldr	r3, [pc, #120]	@ (801ef60 <tcp_receive+0xb10>)
 801eee6:	f240 622b 	movw	r2, #1579	@ 0x62b
 801eeea:	4923      	ldr	r1, [pc, #140]	@ (801ef78 <tcp_receive+0xb28>)
 801eeec:	481e      	ldr	r0, [pc, #120]	@ (801ef68 <tcp_receive+0xb18>)
 801eeee:	f003 fd23 	bl	8022938 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801eef2:	68bb      	ldr	r3, [r7, #8]
 801eef4:	891b      	ldrh	r3, [r3, #8]
 801eef6:	461c      	mov	r4, r3
 801eef8:	68bb      	ldr	r3, [r7, #8]
 801eefa:	68db      	ldr	r3, [r3, #12]
 801eefc:	899b      	ldrh	r3, [r3, #12]
 801eefe:	b29b      	uxth	r3, r3
 801ef00:	4618      	mov	r0, r3
 801ef02:	f7fa f98d 	bl	8019220 <lwip_htons>
 801ef06:	4603      	mov	r3, r0
 801ef08:	b2db      	uxtb	r3, r3
 801ef0a:	f003 0303 	and.w	r3, r3, #3
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d001      	beq.n	801ef16 <tcp_receive+0xac6>
 801ef12:	2301      	movs	r3, #1
 801ef14:	e000      	b.n	801ef18 <tcp_receive+0xac8>
 801ef16:	2300      	movs	r3, #0
 801ef18:	1919      	adds	r1, r3, r4
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801ef1e:	b28b      	uxth	r3, r1
 801ef20:	1ad3      	subs	r3, r2, r3
 801ef22:	b29a      	uxth	r2, r3
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ef28:	6878      	ldr	r0, [r7, #4]
 801ef2a:	f7fc fe2b 	bl	801bb84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ef2e:	68bb      	ldr	r3, [r7, #8]
 801ef30:	685b      	ldr	r3, [r3, #4]
 801ef32:	891b      	ldrh	r3, [r3, #8]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d028      	beq.n	801ef8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ef38:	4b0d      	ldr	r3, [pc, #52]	@ (801ef70 <tcp_receive+0xb20>)
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d01d      	beq.n	801ef7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801ef40:	4b0b      	ldr	r3, [pc, #44]	@ (801ef70 <tcp_receive+0xb20>)
 801ef42:	681a      	ldr	r2, [r3, #0]
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	685b      	ldr	r3, [r3, #4]
 801ef48:	4619      	mov	r1, r3
 801ef4a:	4610      	mov	r0, r2
 801ef4c:	f7fb fee8 	bl	801ad20 <pbuf_cat>
 801ef50:	e018      	b.n	801ef84 <tcp_receive+0xb34>
 801ef52:	bf00      	nop
 801ef54:	2001005a 	.word	0x2001005a
 801ef58:	20010050 	.word	0x20010050
 801ef5c:	20010030 	.word	0x20010030
 801ef60:	0802727c 	.word	0x0802727c
 801ef64:	080276a0 	.word	0x080276a0
 801ef68:	0802730c 	.word	0x0802730c
 801ef6c:	080276dc 	.word	0x080276dc
 801ef70:	20010060 	.word	0x20010060
 801ef74:	2001005d 	.word	0x2001005d
 801ef78:	080276fc 	.word	0x080276fc
            } else {
              recv_data = cseg->p;
 801ef7c:	68bb      	ldr	r3, [r7, #8]
 801ef7e:	685b      	ldr	r3, [r3, #4]
 801ef80:	4a70      	ldr	r2, [pc, #448]	@ (801f144 <tcp_receive+0xcf4>)
 801ef82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801ef84:	68bb      	ldr	r3, [r7, #8]
 801ef86:	2200      	movs	r2, #0
 801ef88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ef8a:	68bb      	ldr	r3, [r7, #8]
 801ef8c:	68db      	ldr	r3, [r3, #12]
 801ef8e:	899b      	ldrh	r3, [r3, #12]
 801ef90:	b29b      	uxth	r3, r3
 801ef92:	4618      	mov	r0, r3
 801ef94:	f7fa f944 	bl	8019220 <lwip_htons>
 801ef98:	4603      	mov	r3, r0
 801ef9a:	b2db      	uxtb	r3, r3
 801ef9c:	f003 0301 	and.w	r3, r3, #1
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d00d      	beq.n	801efc0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801efa4:	4b68      	ldr	r3, [pc, #416]	@ (801f148 <tcp_receive+0xcf8>)
 801efa6:	781b      	ldrb	r3, [r3, #0]
 801efa8:	f043 0320 	orr.w	r3, r3, #32
 801efac:	b2da      	uxtb	r2, r3
 801efae:	4b66      	ldr	r3, [pc, #408]	@ (801f148 <tcp_receive+0xcf8>)
 801efb0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	7d1b      	ldrb	r3, [r3, #20]
 801efb6:	2b04      	cmp	r3, #4
 801efb8:	d102      	bne.n	801efc0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	2207      	movs	r2, #7
 801efbe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801efc0:	68bb      	ldr	r3, [r7, #8]
 801efc2:	681a      	ldr	r2, [r3, #0]
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801efc8:	68b8      	ldr	r0, [r7, #8]
 801efca:	f7fd fb06 	bl	801c5da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d008      	beq.n	801efe8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efda:	68db      	ldr	r3, [r3, #12]
 801efdc:	685a      	ldr	r2, [r3, #4]
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801efe2:	429a      	cmp	r2, r3
 801efe4:	f43f af43 	beq.w	801ee6e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	8b5b      	ldrh	r3, [r3, #26]
 801efec:	f003 0301 	and.w	r3, r3, #1
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d00e      	beq.n	801f012 <tcp_receive+0xbc2>
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	8b5b      	ldrh	r3, [r3, #26]
 801eff8:	f023 0301 	bic.w	r3, r3, #1
 801effc:	b29a      	uxth	r2, r3
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	835a      	strh	r2, [r3, #26]
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	8b5b      	ldrh	r3, [r3, #26]
 801f006:	f043 0302 	orr.w	r3, r3, #2
 801f00a:	b29a      	uxth	r2, r3
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f010:	e187      	b.n	801f322 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	8b5b      	ldrh	r3, [r3, #26]
 801f016:	f043 0301 	orr.w	r3, r3, #1
 801f01a:	b29a      	uxth	r2, r3
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f020:	e17f      	b.n	801f322 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f026:	2b00      	cmp	r3, #0
 801f028:	d106      	bne.n	801f038 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801f02a:	4848      	ldr	r0, [pc, #288]	@ (801f14c <tcp_receive+0xcfc>)
 801f02c:	f7fd faee 	bl	801c60c <tcp_seg_copy>
 801f030:	4602      	mov	r2, r0
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	675a      	str	r2, [r3, #116]	@ 0x74
 801f036:	e16c      	b.n	801f312 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801f038:	2300      	movs	r3, #0
 801f03a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f040:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f042:	e156      	b.n	801f2f2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801f044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f046:	68db      	ldr	r3, [r3, #12]
 801f048:	685a      	ldr	r2, [r3, #4]
 801f04a:	4b41      	ldr	r3, [pc, #260]	@ (801f150 <tcp_receive+0xd00>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	429a      	cmp	r2, r3
 801f050:	d11d      	bne.n	801f08e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801f052:	4b3e      	ldr	r3, [pc, #248]	@ (801f14c <tcp_receive+0xcfc>)
 801f054:	891a      	ldrh	r2, [r3, #8]
 801f056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f058:	891b      	ldrh	r3, [r3, #8]
 801f05a:	429a      	cmp	r2, r3
 801f05c:	f240 814e 	bls.w	801f2fc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f060:	483a      	ldr	r0, [pc, #232]	@ (801f14c <tcp_receive+0xcfc>)
 801f062:	f7fd fad3 	bl	801c60c <tcp_seg_copy>
 801f066:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801f068:	697b      	ldr	r3, [r7, #20]
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	f000 8148 	beq.w	801f300 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801f070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f072:	2b00      	cmp	r3, #0
 801f074:	d003      	beq.n	801f07e <tcp_receive+0xc2e>
                    prev->next = cseg;
 801f076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f078:	697a      	ldr	r2, [r7, #20]
 801f07a:	601a      	str	r2, [r3, #0]
 801f07c:	e002      	b.n	801f084 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	697a      	ldr	r2, [r7, #20]
 801f082:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801f084:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f086:	6978      	ldr	r0, [r7, #20]
 801f088:	f7ff f8de 	bl	801e248 <tcp_oos_insert_segment>
                }
                break;
 801f08c:	e138      	b.n	801f300 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801f08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f090:	2b00      	cmp	r3, #0
 801f092:	d117      	bne.n	801f0c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801f094:	4b2e      	ldr	r3, [pc, #184]	@ (801f150 <tcp_receive+0xd00>)
 801f096:	681a      	ldr	r2, [r3, #0]
 801f098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f09a:	68db      	ldr	r3, [r3, #12]
 801f09c:	685b      	ldr	r3, [r3, #4]
 801f09e:	1ad3      	subs	r3, r2, r3
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	da57      	bge.n	801f154 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f0a4:	4829      	ldr	r0, [pc, #164]	@ (801f14c <tcp_receive+0xcfc>)
 801f0a6:	f7fd fab1 	bl	801c60c <tcp_seg_copy>
 801f0aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801f0ac:	69bb      	ldr	r3, [r7, #24]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	f000 8128 	beq.w	801f304 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	69ba      	ldr	r2, [r7, #24]
 801f0b8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801f0ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f0bc:	69b8      	ldr	r0, [r7, #24]
 801f0be:	f7ff f8c3 	bl	801e248 <tcp_oos_insert_segment>
                  }
                  break;
 801f0c2:	e11f      	b.n	801f304 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801f0c4:	4b22      	ldr	r3, [pc, #136]	@ (801f150 <tcp_receive+0xd00>)
 801f0c6:	681a      	ldr	r2, [r3, #0]
 801f0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0ca:	68db      	ldr	r3, [r3, #12]
 801f0cc:	685b      	ldr	r3, [r3, #4]
 801f0ce:	1ad3      	subs	r3, r2, r3
 801f0d0:	3b01      	subs	r3, #1
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	db3e      	blt.n	801f154 <tcp_receive+0xd04>
 801f0d6:	4b1e      	ldr	r3, [pc, #120]	@ (801f150 <tcp_receive+0xd00>)
 801f0d8:	681a      	ldr	r2, [r3, #0]
 801f0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f0dc:	68db      	ldr	r3, [r3, #12]
 801f0de:	685b      	ldr	r3, [r3, #4]
 801f0e0:	1ad3      	subs	r3, r2, r3
 801f0e2:	3301      	adds	r3, #1
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	dc35      	bgt.n	801f154 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f0e8:	4818      	ldr	r0, [pc, #96]	@ (801f14c <tcp_receive+0xcfc>)
 801f0ea:	f7fd fa8f 	bl	801c60c <tcp_seg_copy>
 801f0ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801f0f0:	69fb      	ldr	r3, [r7, #28]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	f000 8108 	beq.w	801f308 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801f0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f0fa:	68db      	ldr	r3, [r3, #12]
 801f0fc:	685b      	ldr	r3, [r3, #4]
 801f0fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f100:	8912      	ldrh	r2, [r2, #8]
 801f102:	441a      	add	r2, r3
 801f104:	4b12      	ldr	r3, [pc, #72]	@ (801f150 <tcp_receive+0xd00>)
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	1ad3      	subs	r3, r2, r3
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	dd12      	ble.n	801f134 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801f10e:	4b10      	ldr	r3, [pc, #64]	@ (801f150 <tcp_receive+0xd00>)
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	b29a      	uxth	r2, r3
 801f114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f116:	68db      	ldr	r3, [r3, #12]
 801f118:	685b      	ldr	r3, [r3, #4]
 801f11a:	b29b      	uxth	r3, r3
 801f11c:	1ad3      	subs	r3, r2, r3
 801f11e:	b29a      	uxth	r2, r3
 801f120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f122:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801f124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f126:	685a      	ldr	r2, [r3, #4]
 801f128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f12a:	891b      	ldrh	r3, [r3, #8]
 801f12c:	4619      	mov	r1, r3
 801f12e:	4610      	mov	r0, r2
 801f130:	f7fb fb70 	bl	801a814 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801f134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f136:	69fa      	ldr	r2, [r7, #28]
 801f138:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801f13a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f13c:	69f8      	ldr	r0, [r7, #28]
 801f13e:	f7ff f883 	bl	801e248 <tcp_oos_insert_segment>
                  }
                  break;
 801f142:	e0e1      	b.n	801f308 <tcp_receive+0xeb8>
 801f144:	20010060 	.word	0x20010060
 801f148:	2001005d 	.word	0x2001005d
 801f14c:	20010030 	.word	0x20010030
 801f150:	20010050 	.word	0x20010050
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801f154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f156:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801f158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	f040 80c5 	bne.w	801f2ec <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801f162:	4b7f      	ldr	r3, [pc, #508]	@ (801f360 <tcp_receive+0xf10>)
 801f164:	681a      	ldr	r2, [r3, #0]
 801f166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f168:	68db      	ldr	r3, [r3, #12]
 801f16a:	685b      	ldr	r3, [r3, #4]
 801f16c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801f16e:	2b00      	cmp	r3, #0
 801f170:	f340 80bc 	ble.w	801f2ec <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801f174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f176:	68db      	ldr	r3, [r3, #12]
 801f178:	899b      	ldrh	r3, [r3, #12]
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	4618      	mov	r0, r3
 801f17e:	f7fa f84f 	bl	8019220 <lwip_htons>
 801f182:	4603      	mov	r3, r0
 801f184:	b2db      	uxtb	r3, r3
 801f186:	f003 0301 	and.w	r3, r3, #1
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	f040 80be 	bne.w	801f30c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801f190:	4874      	ldr	r0, [pc, #464]	@ (801f364 <tcp_receive+0xf14>)
 801f192:	f7fd fa3b 	bl	801c60c <tcp_seg_copy>
 801f196:	4602      	mov	r2, r0
 801f198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f19a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801f19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	f000 80b5 	beq.w	801f310 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801f1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1a8:	68db      	ldr	r3, [r3, #12]
 801f1aa:	685b      	ldr	r3, [r3, #4]
 801f1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f1ae:	8912      	ldrh	r2, [r2, #8]
 801f1b0:	441a      	add	r2, r3
 801f1b2:	4b6b      	ldr	r3, [pc, #428]	@ (801f360 <tcp_receive+0xf10>)
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	1ad3      	subs	r3, r2, r3
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	dd12      	ble.n	801f1e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801f1bc:	4b68      	ldr	r3, [pc, #416]	@ (801f360 <tcp_receive+0xf10>)
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	b29a      	uxth	r2, r3
 801f1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1c4:	68db      	ldr	r3, [r3, #12]
 801f1c6:	685b      	ldr	r3, [r3, #4]
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	1ad3      	subs	r3, r2, r3
 801f1cc:	b29a      	uxth	r2, r3
 801f1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801f1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1d4:	685a      	ldr	r2, [r3, #4]
 801f1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1d8:	891b      	ldrh	r3, [r3, #8]
 801f1da:	4619      	mov	r1, r3
 801f1dc:	4610      	mov	r0, r2
 801f1de:	f7fb fb19 	bl	801a814 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801f1e2:	4b61      	ldr	r3, [pc, #388]	@ (801f368 <tcp_receive+0xf18>)
 801f1e4:	881b      	ldrh	r3, [r3, #0]
 801f1e6:	461a      	mov	r2, r3
 801f1e8:	4b5d      	ldr	r3, [pc, #372]	@ (801f360 <tcp_receive+0xf10>)
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	441a      	add	r2, r3
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f1f2:	6879      	ldr	r1, [r7, #4]
 801f1f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f1f6:	440b      	add	r3, r1
 801f1f8:	1ad3      	subs	r3, r2, r3
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	f340 8088 	ble.w	801f310 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801f200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	68db      	ldr	r3, [r3, #12]
 801f206:	899b      	ldrh	r3, [r3, #12]
 801f208:	b29b      	uxth	r3, r3
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7fa f808 	bl	8019220 <lwip_htons>
 801f210:	4603      	mov	r3, r0
 801f212:	b2db      	uxtb	r3, r3
 801f214:	f003 0301 	and.w	r3, r3, #1
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d021      	beq.n	801f260 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801f21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	68db      	ldr	r3, [r3, #12]
 801f222:	899b      	ldrh	r3, [r3, #12]
 801f224:	b29b      	uxth	r3, r3
 801f226:	b21b      	sxth	r3, r3
 801f228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801f22c:	b21c      	sxth	r4, r3
 801f22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	68db      	ldr	r3, [r3, #12]
 801f234:	899b      	ldrh	r3, [r3, #12]
 801f236:	b29b      	uxth	r3, r3
 801f238:	4618      	mov	r0, r3
 801f23a:	f7f9 fff1 	bl	8019220 <lwip_htons>
 801f23e:	4603      	mov	r3, r0
 801f240:	b2db      	uxtb	r3, r3
 801f242:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801f246:	b29b      	uxth	r3, r3
 801f248:	4618      	mov	r0, r3
 801f24a:	f7f9 ffe9 	bl	8019220 <lwip_htons>
 801f24e:	4603      	mov	r3, r0
 801f250:	b21b      	sxth	r3, r3
 801f252:	4323      	orrs	r3, r4
 801f254:	b21a      	sxth	r2, r3
 801f256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	68db      	ldr	r3, [r3, #12]
 801f25c:	b292      	uxth	r2, r2
 801f25e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f264:	b29a      	uxth	r2, r3
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f26a:	4413      	add	r3, r2
 801f26c:	b299      	uxth	r1, r3
 801f26e:	4b3c      	ldr	r3, [pc, #240]	@ (801f360 <tcp_receive+0xf10>)
 801f270:	681b      	ldr	r3, [r3, #0]
 801f272:	b29a      	uxth	r2, r3
 801f274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	1a8a      	subs	r2, r1, r2
 801f27a:	b292      	uxth	r2, r2
 801f27c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801f27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	685a      	ldr	r2, [r3, #4]
 801f284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	891b      	ldrh	r3, [r3, #8]
 801f28a:	4619      	mov	r1, r3
 801f28c:	4610      	mov	r0, r2
 801f28e:	f7fb fac1 	bl	801a814 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801f292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	891c      	ldrh	r4, [r3, #8]
 801f298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	68db      	ldr	r3, [r3, #12]
 801f29e:	899b      	ldrh	r3, [r3, #12]
 801f2a0:	b29b      	uxth	r3, r3
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f7f9 ffbc 	bl	8019220 <lwip_htons>
 801f2a8:	4603      	mov	r3, r0
 801f2aa:	b2db      	uxtb	r3, r3
 801f2ac:	f003 0303 	and.w	r3, r3, #3
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d001      	beq.n	801f2b8 <tcp_receive+0xe68>
 801f2b4:	2301      	movs	r3, #1
 801f2b6:	e000      	b.n	801f2ba <tcp_receive+0xe6a>
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	4423      	add	r3, r4
 801f2bc:	b29a      	uxth	r2, r3
 801f2be:	4b2a      	ldr	r3, [pc, #168]	@ (801f368 <tcp_receive+0xf18>)
 801f2c0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f2c2:	4b29      	ldr	r3, [pc, #164]	@ (801f368 <tcp_receive+0xf18>)
 801f2c4:	881b      	ldrh	r3, [r3, #0]
 801f2c6:	461a      	mov	r2, r3
 801f2c8:	4b25      	ldr	r3, [pc, #148]	@ (801f360 <tcp_receive+0xf10>)
 801f2ca:	681b      	ldr	r3, [r3, #0]
 801f2cc:	441a      	add	r2, r3
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f2d2:	6879      	ldr	r1, [r7, #4]
 801f2d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f2d6:	440b      	add	r3, r1
 801f2d8:	429a      	cmp	r2, r3
 801f2da:	d019      	beq.n	801f310 <tcp_receive+0xec0>
 801f2dc:	4b23      	ldr	r3, [pc, #140]	@ (801f36c <tcp_receive+0xf1c>)
 801f2de:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801f2e2:	4923      	ldr	r1, [pc, #140]	@ (801f370 <tcp_receive+0xf20>)
 801f2e4:	4823      	ldr	r0, [pc, #140]	@ (801f374 <tcp_receive+0xf24>)
 801f2e6:	f003 fb27 	bl	8022938 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801f2ea:	e011      	b.n	801f310 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	f47f aea5 	bne.w	801f044 <tcp_receive+0xbf4>
 801f2fa:	e00a      	b.n	801f312 <tcp_receive+0xec2>
                break;
 801f2fc:	bf00      	nop
 801f2fe:	e008      	b.n	801f312 <tcp_receive+0xec2>
                break;
 801f300:	bf00      	nop
 801f302:	e006      	b.n	801f312 <tcp_receive+0xec2>
                  break;
 801f304:	bf00      	nop
 801f306:	e004      	b.n	801f312 <tcp_receive+0xec2>
                  break;
 801f308:	bf00      	nop
 801f30a:	e002      	b.n	801f312 <tcp_receive+0xec2>
                  break;
 801f30c:	bf00      	nop
 801f30e:	e000      	b.n	801f312 <tcp_receive+0xec2>
                break;
 801f310:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801f312:	6878      	ldr	r0, [r7, #4]
 801f314:	f001 fe8a 	bl	802102c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801f318:	e003      	b.n	801f322 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801f31a:	6878      	ldr	r0, [r7, #4]
 801f31c:	f001 fe86 	bl	802102c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f320:	e01a      	b.n	801f358 <tcp_receive+0xf08>
 801f322:	e019      	b.n	801f358 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801f324:	4b0e      	ldr	r3, [pc, #56]	@ (801f360 <tcp_receive+0xf10>)
 801f326:	681a      	ldr	r2, [r3, #0]
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f32c:	1ad3      	subs	r3, r2, r3
 801f32e:	2b00      	cmp	r3, #0
 801f330:	db0a      	blt.n	801f348 <tcp_receive+0xef8>
 801f332:	4b0b      	ldr	r3, [pc, #44]	@ (801f360 <tcp_receive+0xf10>)
 801f334:	681a      	ldr	r2, [r3, #0]
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f33a:	6879      	ldr	r1, [r7, #4]
 801f33c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f33e:	440b      	add	r3, r1
 801f340:	1ad3      	subs	r3, r2, r3
 801f342:	3301      	adds	r3, #1
 801f344:	2b00      	cmp	r3, #0
 801f346:	dd07      	ble.n	801f358 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	8b5b      	ldrh	r3, [r3, #26]
 801f34c:	f043 0302 	orr.w	r3, r3, #2
 801f350:	b29a      	uxth	r2, r3
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801f356:	e7ff      	b.n	801f358 <tcp_receive+0xf08>
 801f358:	bf00      	nop
 801f35a:	3750      	adds	r7, #80	@ 0x50
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bdb0      	pop	{r4, r5, r7, pc}
 801f360:	20010050 	.word	0x20010050
 801f364:	20010030 	.word	0x20010030
 801f368:	2001005a 	.word	0x2001005a
 801f36c:	0802727c 	.word	0x0802727c
 801f370:	08027668 	.word	0x08027668
 801f374:	0802730c 	.word	0x0802730c

0801f378 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801f378:	b480      	push	{r7}
 801f37a:	b083      	sub	sp, #12
 801f37c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801f37e:	4b15      	ldr	r3, [pc, #84]	@ (801f3d4 <tcp_get_next_optbyte+0x5c>)
 801f380:	881b      	ldrh	r3, [r3, #0]
 801f382:	1c5a      	adds	r2, r3, #1
 801f384:	b291      	uxth	r1, r2
 801f386:	4a13      	ldr	r2, [pc, #76]	@ (801f3d4 <tcp_get_next_optbyte+0x5c>)
 801f388:	8011      	strh	r1, [r2, #0]
 801f38a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801f38c:	4b12      	ldr	r3, [pc, #72]	@ (801f3d8 <tcp_get_next_optbyte+0x60>)
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d004      	beq.n	801f39e <tcp_get_next_optbyte+0x26>
 801f394:	4b11      	ldr	r3, [pc, #68]	@ (801f3dc <tcp_get_next_optbyte+0x64>)
 801f396:	881b      	ldrh	r3, [r3, #0]
 801f398:	88fa      	ldrh	r2, [r7, #6]
 801f39a:	429a      	cmp	r2, r3
 801f39c:	d208      	bcs.n	801f3b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801f39e:	4b10      	ldr	r3, [pc, #64]	@ (801f3e0 <tcp_get_next_optbyte+0x68>)
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	3314      	adds	r3, #20
 801f3a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801f3a6:	88fb      	ldrh	r3, [r7, #6]
 801f3a8:	683a      	ldr	r2, [r7, #0]
 801f3aa:	4413      	add	r3, r2
 801f3ac:	781b      	ldrb	r3, [r3, #0]
 801f3ae:	e00b      	b.n	801f3c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801f3b0:	88fb      	ldrh	r3, [r7, #6]
 801f3b2:	b2da      	uxtb	r2, r3
 801f3b4:	4b09      	ldr	r3, [pc, #36]	@ (801f3dc <tcp_get_next_optbyte+0x64>)
 801f3b6:	881b      	ldrh	r3, [r3, #0]
 801f3b8:	b2db      	uxtb	r3, r3
 801f3ba:	1ad3      	subs	r3, r2, r3
 801f3bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801f3be:	4b06      	ldr	r3, [pc, #24]	@ (801f3d8 <tcp_get_next_optbyte+0x60>)
 801f3c0:	681a      	ldr	r2, [r3, #0]
 801f3c2:	797b      	ldrb	r3, [r7, #5]
 801f3c4:	4413      	add	r3, r2
 801f3c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801f3c8:	4618      	mov	r0, r3
 801f3ca:	370c      	adds	r7, #12
 801f3cc:	46bd      	mov	sp, r7
 801f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d2:	4770      	bx	lr
 801f3d4:	2001004c 	.word	0x2001004c
 801f3d8:	20010048 	.word	0x20010048
 801f3dc:	20010046 	.word	0x20010046
 801f3e0:	20010040 	.word	0x20010040

0801f3e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b084      	sub	sp, #16
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d106      	bne.n	801f400 <tcp_parseopt+0x1c>
 801f3f2:	4b33      	ldr	r3, [pc, #204]	@ (801f4c0 <tcp_parseopt+0xdc>)
 801f3f4:	f240 727d 	movw	r2, #1917	@ 0x77d
 801f3f8:	4932      	ldr	r1, [pc, #200]	@ (801f4c4 <tcp_parseopt+0xe0>)
 801f3fa:	4833      	ldr	r0, [pc, #204]	@ (801f4c8 <tcp_parseopt+0xe4>)
 801f3fc:	f003 fa9c 	bl	8022938 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801f400:	4b32      	ldr	r3, [pc, #200]	@ (801f4cc <tcp_parseopt+0xe8>)
 801f402:	881b      	ldrh	r3, [r3, #0]
 801f404:	2b00      	cmp	r3, #0
 801f406:	d057      	beq.n	801f4b8 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f408:	4b31      	ldr	r3, [pc, #196]	@ (801f4d0 <tcp_parseopt+0xec>)
 801f40a:	2200      	movs	r2, #0
 801f40c:	801a      	strh	r2, [r3, #0]
 801f40e:	e047      	b.n	801f4a0 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801f410:	f7ff ffb2 	bl	801f378 <tcp_get_next_optbyte>
 801f414:	4603      	mov	r3, r0
 801f416:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801f418:	7bfb      	ldrb	r3, [r7, #15]
 801f41a:	2b02      	cmp	r3, #2
 801f41c:	d006      	beq.n	801f42c <tcp_parseopt+0x48>
 801f41e:	2b02      	cmp	r3, #2
 801f420:	dc2b      	bgt.n	801f47a <tcp_parseopt+0x96>
 801f422:	2b00      	cmp	r3, #0
 801f424:	d043      	beq.n	801f4ae <tcp_parseopt+0xca>
 801f426:	2b01      	cmp	r3, #1
 801f428:	d039      	beq.n	801f49e <tcp_parseopt+0xba>
 801f42a:	e026      	b.n	801f47a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801f42c:	f7ff ffa4 	bl	801f378 <tcp_get_next_optbyte>
 801f430:	4603      	mov	r3, r0
 801f432:	2b04      	cmp	r3, #4
 801f434:	d13d      	bne.n	801f4b2 <tcp_parseopt+0xce>
 801f436:	4b26      	ldr	r3, [pc, #152]	@ (801f4d0 <tcp_parseopt+0xec>)
 801f438:	881b      	ldrh	r3, [r3, #0]
 801f43a:	3301      	adds	r3, #1
 801f43c:	4a23      	ldr	r2, [pc, #140]	@ (801f4cc <tcp_parseopt+0xe8>)
 801f43e:	8812      	ldrh	r2, [r2, #0]
 801f440:	4293      	cmp	r3, r2
 801f442:	da36      	bge.n	801f4b2 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801f444:	f7ff ff98 	bl	801f378 <tcp_get_next_optbyte>
 801f448:	4603      	mov	r3, r0
 801f44a:	021b      	lsls	r3, r3, #8
 801f44c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801f44e:	f7ff ff93 	bl	801f378 <tcp_get_next_optbyte>
 801f452:	4603      	mov	r3, r0
 801f454:	461a      	mov	r2, r3
 801f456:	89bb      	ldrh	r3, [r7, #12]
 801f458:	4313      	orrs	r3, r2
 801f45a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801f45c:	89bb      	ldrh	r3, [r7, #12]
 801f45e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801f462:	4293      	cmp	r3, r2
 801f464:	d804      	bhi.n	801f470 <tcp_parseopt+0x8c>
 801f466:	89bb      	ldrh	r3, [r7, #12]
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d001      	beq.n	801f470 <tcp_parseopt+0x8c>
 801f46c:	89ba      	ldrh	r2, [r7, #12]
 801f46e:	e001      	b.n	801f474 <tcp_parseopt+0x90>
 801f470:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801f474:	687b      	ldr	r3, [r7, #4]
 801f476:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801f478:	e012      	b.n	801f4a0 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801f47a:	f7ff ff7d 	bl	801f378 <tcp_get_next_optbyte>
 801f47e:	4603      	mov	r3, r0
 801f480:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801f482:	7afb      	ldrb	r3, [r7, #11]
 801f484:	2b01      	cmp	r3, #1
 801f486:	d916      	bls.n	801f4b6 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801f488:	7afb      	ldrb	r3, [r7, #11]
 801f48a:	b29a      	uxth	r2, r3
 801f48c:	4b10      	ldr	r3, [pc, #64]	@ (801f4d0 <tcp_parseopt+0xec>)
 801f48e:	881b      	ldrh	r3, [r3, #0]
 801f490:	4413      	add	r3, r2
 801f492:	b29b      	uxth	r3, r3
 801f494:	3b02      	subs	r3, #2
 801f496:	b29a      	uxth	r2, r3
 801f498:	4b0d      	ldr	r3, [pc, #52]	@ (801f4d0 <tcp_parseopt+0xec>)
 801f49a:	801a      	strh	r2, [r3, #0]
 801f49c:	e000      	b.n	801f4a0 <tcp_parseopt+0xbc>
          break;
 801f49e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f4a0:	4b0b      	ldr	r3, [pc, #44]	@ (801f4d0 <tcp_parseopt+0xec>)
 801f4a2:	881a      	ldrh	r2, [r3, #0]
 801f4a4:	4b09      	ldr	r3, [pc, #36]	@ (801f4cc <tcp_parseopt+0xe8>)
 801f4a6:	881b      	ldrh	r3, [r3, #0]
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	d3b1      	bcc.n	801f410 <tcp_parseopt+0x2c>
 801f4ac:	e004      	b.n	801f4b8 <tcp_parseopt+0xd4>
          return;
 801f4ae:	bf00      	nop
 801f4b0:	e002      	b.n	801f4b8 <tcp_parseopt+0xd4>
            return;
 801f4b2:	bf00      	nop
 801f4b4:	e000      	b.n	801f4b8 <tcp_parseopt+0xd4>
            return;
 801f4b6:	bf00      	nop
      }
    }
  }
}
 801f4b8:	3710      	adds	r7, #16
 801f4ba:	46bd      	mov	sp, r7
 801f4bc:	bd80      	pop	{r7, pc}
 801f4be:	bf00      	nop
 801f4c0:	0802727c 	.word	0x0802727c
 801f4c4:	08027724 	.word	0x08027724
 801f4c8:	0802730c 	.word	0x0802730c
 801f4cc:	20010044 	.word	0x20010044
 801f4d0:	2001004c 	.word	0x2001004c

0801f4d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801f4d4:	b480      	push	{r7}
 801f4d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801f4d8:	4b05      	ldr	r3, [pc, #20]	@ (801f4f0 <tcp_trigger_input_pcb_close+0x1c>)
 801f4da:	781b      	ldrb	r3, [r3, #0]
 801f4dc:	f043 0310 	orr.w	r3, r3, #16
 801f4e0:	b2da      	uxtb	r2, r3
 801f4e2:	4b03      	ldr	r3, [pc, #12]	@ (801f4f0 <tcp_trigger_input_pcb_close+0x1c>)
 801f4e4:	701a      	strb	r2, [r3, #0]
}
 801f4e6:	bf00      	nop
 801f4e8:	46bd      	mov	sp, r7
 801f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ee:	4770      	bx	lr
 801f4f0:	2001005d 	.word	0x2001005d

0801f4f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801f4f4:	b580      	push	{r7, lr}
 801f4f6:	b084      	sub	sp, #16
 801f4f8:	af00      	add	r7, sp, #0
 801f4fa:	60f8      	str	r0, [r7, #12]
 801f4fc:	60b9      	str	r1, [r7, #8]
 801f4fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	2b00      	cmp	r3, #0
 801f504:	d00a      	beq.n	801f51c <tcp_route+0x28>
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	7a1b      	ldrb	r3, [r3, #8]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d006      	beq.n	801f51c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801f50e:	68fb      	ldr	r3, [r7, #12]
 801f510:	7a1b      	ldrb	r3, [r3, #8]
 801f512:	4618      	mov	r0, r3
 801f514:	f7fa ff76 	bl	801a404 <netif_get_by_index>
 801f518:	4603      	mov	r3, r0
 801f51a:	e003      	b.n	801f524 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801f51c:	6878      	ldr	r0, [r7, #4]
 801f51e:	f7f8 fb65 	bl	8017bec <ip4_route>
 801f522:	4603      	mov	r3, r0
  }
}
 801f524:	4618      	mov	r0, r3
 801f526:	3710      	adds	r7, #16
 801f528:	46bd      	mov	sp, r7
 801f52a:	bd80      	pop	{r7, pc}

0801f52c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801f52c:	b590      	push	{r4, r7, lr}
 801f52e:	b087      	sub	sp, #28
 801f530:	af00      	add	r7, sp, #0
 801f532:	60f8      	str	r0, [r7, #12]
 801f534:	60b9      	str	r1, [r7, #8]
 801f536:	603b      	str	r3, [r7, #0]
 801f538:	4613      	mov	r3, r2
 801f53a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d105      	bne.n	801f54e <tcp_create_segment+0x22>
 801f542:	4b43      	ldr	r3, [pc, #268]	@ (801f650 <tcp_create_segment+0x124>)
 801f544:	22a3      	movs	r2, #163	@ 0xa3
 801f546:	4943      	ldr	r1, [pc, #268]	@ (801f654 <tcp_create_segment+0x128>)
 801f548:	4843      	ldr	r0, [pc, #268]	@ (801f658 <tcp_create_segment+0x12c>)
 801f54a:	f003 f9f5 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801f54e:	68bb      	ldr	r3, [r7, #8]
 801f550:	2b00      	cmp	r3, #0
 801f552:	d105      	bne.n	801f560 <tcp_create_segment+0x34>
 801f554:	4b3e      	ldr	r3, [pc, #248]	@ (801f650 <tcp_create_segment+0x124>)
 801f556:	22a4      	movs	r2, #164	@ 0xa4
 801f558:	4940      	ldr	r1, [pc, #256]	@ (801f65c <tcp_create_segment+0x130>)
 801f55a:	483f      	ldr	r0, [pc, #252]	@ (801f658 <tcp_create_segment+0x12c>)
 801f55c:	f003 f9ec 	bl	8022938 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f560:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f564:	009b      	lsls	r3, r3, #2
 801f566:	b2db      	uxtb	r3, r3
 801f568:	f003 0304 	and.w	r3, r3, #4
 801f56c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801f56e:	2003      	movs	r0, #3
 801f570:	f7fa fb9a 	bl	8019ca8 <memp_malloc>
 801f574:	6138      	str	r0, [r7, #16]
 801f576:	693b      	ldr	r3, [r7, #16]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d104      	bne.n	801f586 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801f57c:	68b8      	ldr	r0, [r7, #8]
 801f57e:	f7fb fb01 	bl	801ab84 <pbuf_free>
    return NULL;
 801f582:	2300      	movs	r3, #0
 801f584:	e060      	b.n	801f648 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801f586:	693b      	ldr	r3, [r7, #16]
 801f588:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801f58c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801f58e:	693b      	ldr	r3, [r7, #16]
 801f590:	2200      	movs	r2, #0
 801f592:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801f594:	693b      	ldr	r3, [r7, #16]
 801f596:	68ba      	ldr	r2, [r7, #8]
 801f598:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f59a:	68bb      	ldr	r3, [r7, #8]
 801f59c:	891a      	ldrh	r2, [r3, #8]
 801f59e:	7dfb      	ldrb	r3, [r7, #23]
 801f5a0:	b29b      	uxth	r3, r3
 801f5a2:	429a      	cmp	r2, r3
 801f5a4:	d205      	bcs.n	801f5b2 <tcp_create_segment+0x86>
 801f5a6:	4b2a      	ldr	r3, [pc, #168]	@ (801f650 <tcp_create_segment+0x124>)
 801f5a8:	22b0      	movs	r2, #176	@ 0xb0
 801f5aa:	492d      	ldr	r1, [pc, #180]	@ (801f660 <tcp_create_segment+0x134>)
 801f5ac:	482a      	ldr	r0, [pc, #168]	@ (801f658 <tcp_create_segment+0x12c>)
 801f5ae:	f003 f9c3 	bl	8022938 <iprintf>
  seg->len = p->tot_len - optlen;
 801f5b2:	68bb      	ldr	r3, [r7, #8]
 801f5b4:	891a      	ldrh	r2, [r3, #8]
 801f5b6:	7dfb      	ldrb	r3, [r7, #23]
 801f5b8:	b29b      	uxth	r3, r3
 801f5ba:	1ad3      	subs	r3, r2, r3
 801f5bc:	b29a      	uxth	r2, r3
 801f5be:	693b      	ldr	r3, [r7, #16]
 801f5c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801f5c2:	2114      	movs	r1, #20
 801f5c4:	68b8      	ldr	r0, [r7, #8]
 801f5c6:	f7fb fa15 	bl	801a9f4 <pbuf_add_header>
 801f5ca:	4603      	mov	r3, r0
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	d004      	beq.n	801f5da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801f5d0:	6938      	ldr	r0, [r7, #16]
 801f5d2:	f7fd f802 	bl	801c5da <tcp_seg_free>
    return NULL;
 801f5d6:	2300      	movs	r3, #0
 801f5d8:	e036      	b.n	801f648 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801f5da:	693b      	ldr	r3, [r7, #16]
 801f5dc:	685b      	ldr	r3, [r3, #4]
 801f5de:	685a      	ldr	r2, [r3, #4]
 801f5e0:	693b      	ldr	r3, [r7, #16]
 801f5e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	8ada      	ldrh	r2, [r3, #22]
 801f5e8:	693b      	ldr	r3, [r7, #16]
 801f5ea:	68dc      	ldr	r4, [r3, #12]
 801f5ec:	4610      	mov	r0, r2
 801f5ee:	f7f9 fe17 	bl	8019220 <lwip_htons>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801f5f6:	68fb      	ldr	r3, [r7, #12]
 801f5f8:	8b1a      	ldrh	r2, [r3, #24]
 801f5fa:	693b      	ldr	r3, [r7, #16]
 801f5fc:	68dc      	ldr	r4, [r3, #12]
 801f5fe:	4610      	mov	r0, r2
 801f600:	f7f9 fe0e 	bl	8019220 <lwip_htons>
 801f604:	4603      	mov	r3, r0
 801f606:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801f608:	693b      	ldr	r3, [r7, #16]
 801f60a:	68dc      	ldr	r4, [r3, #12]
 801f60c:	6838      	ldr	r0, [r7, #0]
 801f60e:	f7f9 fe1c 	bl	801924a <lwip_htonl>
 801f612:	4603      	mov	r3, r0
 801f614:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f616:	7dfb      	ldrb	r3, [r7, #23]
 801f618:	089b      	lsrs	r3, r3, #2
 801f61a:	b2db      	uxtb	r3, r3
 801f61c:	3305      	adds	r3, #5
 801f61e:	b29b      	uxth	r3, r3
 801f620:	031b      	lsls	r3, r3, #12
 801f622:	b29a      	uxth	r2, r3
 801f624:	79fb      	ldrb	r3, [r7, #7]
 801f626:	b29b      	uxth	r3, r3
 801f628:	4313      	orrs	r3, r2
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	693b      	ldr	r3, [r7, #16]
 801f62e:	68dc      	ldr	r4, [r3, #12]
 801f630:	4610      	mov	r0, r2
 801f632:	f7f9 fdf5 	bl	8019220 <lwip_htons>
 801f636:	4603      	mov	r3, r0
 801f638:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801f63a:	693b      	ldr	r3, [r7, #16]
 801f63c:	68db      	ldr	r3, [r3, #12]
 801f63e:	2200      	movs	r2, #0
 801f640:	749a      	strb	r2, [r3, #18]
 801f642:	2200      	movs	r2, #0
 801f644:	74da      	strb	r2, [r3, #19]
  return seg;
 801f646:	693b      	ldr	r3, [r7, #16]
}
 801f648:	4618      	mov	r0, r3
 801f64a:	371c      	adds	r7, #28
 801f64c:	46bd      	mov	sp, r7
 801f64e:	bd90      	pop	{r4, r7, pc}
 801f650:	08027740 	.word	0x08027740
 801f654:	080277b8 	.word	0x080277b8
 801f658:	080277d8 	.word	0x080277d8
 801f65c:	08027800 	.word	0x08027800
 801f660:	08027824 	.word	0x08027824

0801f664 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f664:	b580      	push	{r7, lr}
 801f666:	b086      	sub	sp, #24
 801f668:	af00      	add	r7, sp, #0
 801f66a:	607b      	str	r3, [r7, #4]
 801f66c:	4603      	mov	r3, r0
 801f66e:	73fb      	strb	r3, [r7, #15]
 801f670:	460b      	mov	r3, r1
 801f672:	81bb      	strh	r3, [r7, #12]
 801f674:	4613      	mov	r3, r2
 801f676:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801f678:	89bb      	ldrh	r3, [r7, #12]
 801f67a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d105      	bne.n	801f68e <tcp_pbuf_prealloc+0x2a>
 801f682:	4b30      	ldr	r3, [pc, #192]	@ (801f744 <tcp_pbuf_prealloc+0xe0>)
 801f684:	22e8      	movs	r2, #232	@ 0xe8
 801f686:	4930      	ldr	r1, [pc, #192]	@ (801f748 <tcp_pbuf_prealloc+0xe4>)
 801f688:	4830      	ldr	r0, [pc, #192]	@ (801f74c <tcp_pbuf_prealloc+0xe8>)
 801f68a:	f003 f955 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f68e:	6a3b      	ldr	r3, [r7, #32]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d105      	bne.n	801f6a0 <tcp_pbuf_prealloc+0x3c>
 801f694:	4b2b      	ldr	r3, [pc, #172]	@ (801f744 <tcp_pbuf_prealloc+0xe0>)
 801f696:	22e9      	movs	r2, #233	@ 0xe9
 801f698:	492d      	ldr	r1, [pc, #180]	@ (801f750 <tcp_pbuf_prealloc+0xec>)
 801f69a:	482c      	ldr	r0, [pc, #176]	@ (801f74c <tcp_pbuf_prealloc+0xe8>)
 801f69c:	f003 f94c 	bl	8022938 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f6a0:	89ba      	ldrh	r2, [r7, #12]
 801f6a2:	897b      	ldrh	r3, [r7, #10]
 801f6a4:	429a      	cmp	r2, r3
 801f6a6:	d221      	bcs.n	801f6ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f6a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801f6ac:	f003 0302 	and.w	r3, r3, #2
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d111      	bne.n	801f6d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801f6b4:	6a3b      	ldr	r3, [r7, #32]
 801f6b6:	8b5b      	ldrh	r3, [r3, #26]
 801f6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d115      	bne.n	801f6ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801f6c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d007      	beq.n	801f6d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801f6c8:	6a3b      	ldr	r3, [r7, #32]
 801f6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d103      	bne.n	801f6d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801f6d0:	6a3b      	ldr	r3, [r7, #32]
 801f6d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	d009      	beq.n	801f6ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f6d8:	89bb      	ldrh	r3, [r7, #12]
 801f6da:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801f6de:	f023 0203 	bic.w	r2, r3, #3
 801f6e2:	897b      	ldrh	r3, [r7, #10]
 801f6e4:	4293      	cmp	r3, r2
 801f6e6:	bf28      	it	cs
 801f6e8:	4613      	movcs	r3, r2
 801f6ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f6ec:	8af9      	ldrh	r1, [r7, #22]
 801f6ee:	7bfb      	ldrb	r3, [r7, #15]
 801f6f0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	f7fa ff2f 	bl	801a558 <pbuf_alloc>
 801f6fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f6fc:	693b      	ldr	r3, [r7, #16]
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	d101      	bne.n	801f706 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801f702:	2300      	movs	r3, #0
 801f704:	e019      	b.n	801f73a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801f706:	693b      	ldr	r3, [r7, #16]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d006      	beq.n	801f71c <tcp_pbuf_prealloc+0xb8>
 801f70e:	4b0d      	ldr	r3, [pc, #52]	@ (801f744 <tcp_pbuf_prealloc+0xe0>)
 801f710:	f240 120b 	movw	r2, #267	@ 0x10b
 801f714:	490f      	ldr	r1, [pc, #60]	@ (801f754 <tcp_pbuf_prealloc+0xf0>)
 801f716:	480d      	ldr	r0, [pc, #52]	@ (801f74c <tcp_pbuf_prealloc+0xe8>)
 801f718:	f003 f90e 	bl	8022938 <iprintf>
  *oversize = p->len - length;
 801f71c:	693b      	ldr	r3, [r7, #16]
 801f71e:	895a      	ldrh	r2, [r3, #10]
 801f720:	89bb      	ldrh	r3, [r7, #12]
 801f722:	1ad3      	subs	r3, r2, r3
 801f724:	b29a      	uxth	r2, r3
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801f72a:	693b      	ldr	r3, [r7, #16]
 801f72c:	89ba      	ldrh	r2, [r7, #12]
 801f72e:	811a      	strh	r2, [r3, #8]
 801f730:	693b      	ldr	r3, [r7, #16]
 801f732:	891a      	ldrh	r2, [r3, #8]
 801f734:	693b      	ldr	r3, [r7, #16]
 801f736:	815a      	strh	r2, [r3, #10]
  return p;
 801f738:	693b      	ldr	r3, [r7, #16]
}
 801f73a:	4618      	mov	r0, r3
 801f73c:	3718      	adds	r7, #24
 801f73e:	46bd      	mov	sp, r7
 801f740:	bd80      	pop	{r7, pc}
 801f742:	bf00      	nop
 801f744:	08027740 	.word	0x08027740
 801f748:	0802783c 	.word	0x0802783c
 801f74c:	080277d8 	.word	0x080277d8
 801f750:	08027860 	.word	0x08027860
 801f754:	08027880 	.word	0x08027880

0801f758 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801f758:	b580      	push	{r7, lr}
 801f75a:	b082      	sub	sp, #8
 801f75c:	af00      	add	r7, sp, #0
 801f75e:	6078      	str	r0, [r7, #4]
 801f760:	460b      	mov	r3, r1
 801f762:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d106      	bne.n	801f778 <tcp_write_checks+0x20>
 801f76a:	4b33      	ldr	r3, [pc, #204]	@ (801f838 <tcp_write_checks+0xe0>)
 801f76c:	f240 1233 	movw	r2, #307	@ 0x133
 801f770:	4932      	ldr	r1, [pc, #200]	@ (801f83c <tcp_write_checks+0xe4>)
 801f772:	4833      	ldr	r0, [pc, #204]	@ (801f840 <tcp_write_checks+0xe8>)
 801f774:	f003 f8e0 	bl	8022938 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	7d1b      	ldrb	r3, [r3, #20]
 801f77c:	2b04      	cmp	r3, #4
 801f77e:	d00e      	beq.n	801f79e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801f784:	2b07      	cmp	r3, #7
 801f786:	d00a      	beq.n	801f79e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801f78c:	2b02      	cmp	r3, #2
 801f78e:	d006      	beq.n	801f79e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801f794:	2b03      	cmp	r3, #3
 801f796:	d002      	beq.n	801f79e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801f798:	f06f 030a 	mvn.w	r3, #10
 801f79c:	e048      	b.n	801f830 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801f79e:	887b      	ldrh	r3, [r7, #2]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d101      	bne.n	801f7a8 <tcp_write_checks+0x50>
    return ERR_OK;
 801f7a4:	2300      	movs	r3, #0
 801f7a6:	e043      	b.n	801f830 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801f7ae:	887a      	ldrh	r2, [r7, #2]
 801f7b0:	429a      	cmp	r2, r3
 801f7b2:	d909      	bls.n	801f7c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	8b5b      	ldrh	r3, [r3, #26]
 801f7b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f7bc:	b29a      	uxth	r2, r3
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801f7c2:	f04f 33ff 	mov.w	r3, #4294967295
 801f7c6:	e033      	b.n	801f830 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f7ce:	2b0f      	cmp	r3, #15
 801f7d0:	d909      	bls.n	801f7e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	8b5b      	ldrh	r3, [r3, #26]
 801f7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f7da:	b29a      	uxth	r2, r3
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801f7e0:	f04f 33ff 	mov.w	r3, #4294967295
 801f7e4:	e024      	b.n	801f830 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d00f      	beq.n	801f810 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d11a      	bne.n	801f82e <tcp_write_checks+0xd6>
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d116      	bne.n	801f82e <tcp_write_checks+0xd6>
 801f800:	4b0d      	ldr	r3, [pc, #52]	@ (801f838 <tcp_write_checks+0xe0>)
 801f802:	f240 1255 	movw	r2, #341	@ 0x155
 801f806:	490f      	ldr	r1, [pc, #60]	@ (801f844 <tcp_write_checks+0xec>)
 801f808:	480d      	ldr	r0, [pc, #52]	@ (801f840 <tcp_write_checks+0xe8>)
 801f80a:	f003 f895 	bl	8022938 <iprintf>
 801f80e:	e00e      	b.n	801f82e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f814:	2b00      	cmp	r3, #0
 801f816:	d103      	bne.n	801f820 <tcp_write_checks+0xc8>
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d006      	beq.n	801f82e <tcp_write_checks+0xd6>
 801f820:	4b05      	ldr	r3, [pc, #20]	@ (801f838 <tcp_write_checks+0xe0>)
 801f822:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801f826:	4908      	ldr	r1, [pc, #32]	@ (801f848 <tcp_write_checks+0xf0>)
 801f828:	4805      	ldr	r0, [pc, #20]	@ (801f840 <tcp_write_checks+0xe8>)
 801f82a:	f003 f885 	bl	8022938 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801f82e:	2300      	movs	r3, #0
}
 801f830:	4618      	mov	r0, r3
 801f832:	3708      	adds	r7, #8
 801f834:	46bd      	mov	sp, r7
 801f836:	bd80      	pop	{r7, pc}
 801f838:	08027740 	.word	0x08027740
 801f83c:	08027894 	.word	0x08027894
 801f840:	080277d8 	.word	0x080277d8
 801f844:	080278b4 	.word	0x080278b4
 801f848:	080278f0 	.word	0x080278f0

0801f84c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801f84c:	b590      	push	{r4, r7, lr}
 801f84e:	b09b      	sub	sp, #108	@ 0x6c
 801f850:	af04      	add	r7, sp, #16
 801f852:	60f8      	str	r0, [r7, #12]
 801f854:	60b9      	str	r1, [r7, #8]
 801f856:	4611      	mov	r1, r2
 801f858:	461a      	mov	r2, r3
 801f85a:	460b      	mov	r3, r1
 801f85c:	80fb      	strh	r3, [r7, #6]
 801f85e:	4613      	mov	r3, r2
 801f860:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801f862:	2300      	movs	r3, #0
 801f864:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801f866:	2300      	movs	r3, #0
 801f868:	653b      	str	r3, [r7, #80]	@ 0x50
 801f86a:	2300      	movs	r3, #0
 801f86c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f86e:	2300      	movs	r3, #0
 801f870:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f872:	2300      	movs	r3, #0
 801f874:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801f876:	2300      	movs	r3, #0
 801f878:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801f87c:	2300      	movs	r3, #0
 801f87e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801f882:	2300      	movs	r3, #0
 801f884:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801f886:	2300      	movs	r3, #0
 801f888:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801f88a:	2300      	movs	r3, #0
 801f88c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d109      	bne.n	801f8a8 <tcp_write+0x5c>
 801f894:	4ba4      	ldr	r3, [pc, #656]	@ (801fb28 <tcp_write+0x2dc>)
 801f896:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801f89a:	49a4      	ldr	r1, [pc, #656]	@ (801fb2c <tcp_write+0x2e0>)
 801f89c:	48a4      	ldr	r0, [pc, #656]	@ (801fb30 <tcp_write+0x2e4>)
 801f89e:	f003 f84b 	bl	8022938 <iprintf>
 801f8a2:	f06f 030f 	mvn.w	r3, #15
 801f8a6:	e32a      	b.n	801fefe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f8ae:	085b      	lsrs	r3, r3, #1
 801f8b0:	b29a      	uxth	r2, r3
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f8b6:	4293      	cmp	r3, r2
 801f8b8:	bf28      	it	cs
 801f8ba:	4613      	movcs	r3, r2
 801f8bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801f8be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d102      	bne.n	801f8ca <tcp_write+0x7e>
 801f8c4:	68fb      	ldr	r3, [r7, #12]
 801f8c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f8c8:	e000      	b.n	801f8cc <tcp_write+0x80>
 801f8ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f8cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f8ce:	68bb      	ldr	r3, [r7, #8]
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d109      	bne.n	801f8e8 <tcp_write+0x9c>
 801f8d4:	4b94      	ldr	r3, [pc, #592]	@ (801fb28 <tcp_write+0x2dc>)
 801f8d6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801f8da:	4996      	ldr	r1, [pc, #600]	@ (801fb34 <tcp_write+0x2e8>)
 801f8dc:	4894      	ldr	r0, [pc, #592]	@ (801fb30 <tcp_write+0x2e4>)
 801f8de:	f003 f82b 	bl	8022938 <iprintf>
 801f8e2:	f06f 030f 	mvn.w	r3, #15
 801f8e6:	e30a      	b.n	801fefe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801f8e8:	88fb      	ldrh	r3, [r7, #6]
 801f8ea:	4619      	mov	r1, r3
 801f8ec:	68f8      	ldr	r0, [r7, #12]
 801f8ee:	f7ff ff33 	bl	801f758 <tcp_write_checks>
 801f8f2:	4603      	mov	r3, r0
 801f8f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801f8f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d002      	beq.n	801f906 <tcp_write+0xba>
    return err;
 801f900:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f904:	e2fb      	b.n	801fefe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f90c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f910:	2300      	movs	r3, #0
 801f912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	f000 80f6 	beq.w	801fb0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f920:	68fb      	ldr	r3, [r7, #12]
 801f922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f924:	653b      	str	r3, [r7, #80]	@ 0x50
 801f926:	e002      	b.n	801f92e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801f928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f92e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	2b00      	cmp	r3, #0
 801f934:	d1f8      	bne.n	801f928 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f938:	7a9b      	ldrb	r3, [r3, #10]
 801f93a:	009b      	lsls	r3, r3, #2
 801f93c:	b29b      	uxth	r3, r3
 801f93e:	f003 0304 	and.w	r3, r3, #4
 801f942:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f948:	891b      	ldrh	r3, [r3, #8]
 801f94a:	4619      	mov	r1, r3
 801f94c:	8c3b      	ldrh	r3, [r7, #32]
 801f94e:	440b      	add	r3, r1
 801f950:	429a      	cmp	r2, r3
 801f952:	da06      	bge.n	801f962 <tcp_write+0x116>
 801f954:	4b74      	ldr	r3, [pc, #464]	@ (801fb28 <tcp_write+0x2dc>)
 801f956:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801f95a:	4977      	ldr	r1, [pc, #476]	@ (801fb38 <tcp_write+0x2ec>)
 801f95c:	4874      	ldr	r0, [pc, #464]	@ (801fb30 <tcp_write+0x2e4>)
 801f95e:	f002 ffeb 	bl	8022938 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f964:	891a      	ldrh	r2, [r3, #8]
 801f966:	8c3b      	ldrh	r3, [r7, #32]
 801f968:	4413      	add	r3, r2
 801f96a:	b29b      	uxth	r3, r3
 801f96c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f96e:	1ad3      	subs	r3, r2, r3
 801f970:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801f972:	68fb      	ldr	r3, [r7, #12]
 801f974:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f978:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801f97a:	8a7b      	ldrh	r3, [r7, #18]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d026      	beq.n	801f9ce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f980:	8a7b      	ldrh	r3, [r7, #18]
 801f982:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f984:	429a      	cmp	r2, r3
 801f986:	d206      	bcs.n	801f996 <tcp_write+0x14a>
 801f988:	4b67      	ldr	r3, [pc, #412]	@ (801fb28 <tcp_write+0x2dc>)
 801f98a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801f98e:	496b      	ldr	r1, [pc, #428]	@ (801fb3c <tcp_write+0x2f0>)
 801f990:	4867      	ldr	r0, [pc, #412]	@ (801fb30 <tcp_write+0x2e4>)
 801f992:	f002 ffd1 	bl	8022938 <iprintf>
      seg = last_unsent;
 801f996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f998:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f99a:	8a7b      	ldrh	r3, [r7, #18]
 801f99c:	88fa      	ldrh	r2, [r7, #6]
 801f99e:	4293      	cmp	r3, r2
 801f9a0:	bf28      	it	cs
 801f9a2:	4613      	movcs	r3, r2
 801f9a4:	b29b      	uxth	r3, r3
 801f9a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f9a8:	4293      	cmp	r3, r2
 801f9aa:	bf28      	it	cs
 801f9ac:	4613      	movcs	r3, r2
 801f9ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801f9b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f9b6:	4413      	add	r3, r2
 801f9b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801f9bc:	8a7a      	ldrh	r2, [r7, #18]
 801f9be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f9c0:	1ad3      	subs	r3, r2, r3
 801f9c2:	b29b      	uxth	r3, r3
 801f9c4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801f9c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f9c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f9ca:	1ad3      	subs	r3, r2, r3
 801f9cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f9ce:	8a7b      	ldrh	r3, [r7, #18]
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d00b      	beq.n	801f9ec <tcp_write+0x1a0>
 801f9d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9d8:	88fb      	ldrh	r3, [r7, #6]
 801f9da:	429a      	cmp	r2, r3
 801f9dc:	d006      	beq.n	801f9ec <tcp_write+0x1a0>
 801f9de:	4b52      	ldr	r3, [pc, #328]	@ (801fb28 <tcp_write+0x2dc>)
 801f9e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f9e4:	4956      	ldr	r1, [pc, #344]	@ (801fb40 <tcp_write+0x2f4>)
 801f9e6:	4852      	ldr	r0, [pc, #328]	@ (801fb30 <tcp_write+0x2e4>)
 801f9e8:	f002 ffa6 	bl	8022938 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f9ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9f0:	88fb      	ldrh	r3, [r7, #6]
 801f9f2:	429a      	cmp	r2, r3
 801f9f4:	f080 8167 	bcs.w	801fcc6 <tcp_write+0x47a>
 801f9f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	f000 8163 	beq.w	801fcc6 <tcp_write+0x47a>
 801fa00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fa02:	891b      	ldrh	r3, [r3, #8]
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	f000 815e 	beq.w	801fcc6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fa0a:	88fa      	ldrh	r2, [r7, #6]
 801fa0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fa10:	1ad2      	subs	r2, r2, r3
 801fa12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801fa14:	4293      	cmp	r3, r2
 801fa16:	bfa8      	it	ge
 801fa18:	4613      	movge	r3, r2
 801fa1a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801fa1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fa1e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fa20:	797b      	ldrb	r3, [r7, #5]
 801fa22:	f003 0301 	and.w	r3, r3, #1
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d027      	beq.n	801fa7a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801fa2a:	f107 0012 	add.w	r0, r7, #18
 801fa2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801fa30:	8bf9      	ldrh	r1, [r7, #30]
 801fa32:	2301      	movs	r3, #1
 801fa34:	9302      	str	r3, [sp, #8]
 801fa36:	797b      	ldrb	r3, [r7, #5]
 801fa38:	9301      	str	r3, [sp, #4]
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	9300      	str	r3, [sp, #0]
 801fa3e:	4603      	mov	r3, r0
 801fa40:	2000      	movs	r0, #0
 801fa42:	f7ff fe0f 	bl	801f664 <tcp_pbuf_prealloc>
 801fa46:	6578      	str	r0, [r7, #84]	@ 0x54
 801fa48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	f000 8225 	beq.w	801fe9a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801fa50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa52:	6858      	ldr	r0, [r3, #4]
 801fa54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fa58:	68ba      	ldr	r2, [r7, #8]
 801fa5a:	4413      	add	r3, r2
 801fa5c:	8bfa      	ldrh	r2, [r7, #30]
 801fa5e:	4619      	mov	r1, r3
 801fa60:	f003 f9a1 	bl	8022da6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801fa64:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801fa66:	f7fb f91b 	bl	801aca0 <pbuf_clen>
 801fa6a:	4603      	mov	r3, r0
 801fa6c:	461a      	mov	r2, r3
 801fa6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fa72:	4413      	add	r3, r2
 801fa74:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801fa78:	e041      	b.n	801fafe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801fa7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fa7c:	685b      	ldr	r3, [r3, #4]
 801fa7e:	637b      	str	r3, [r7, #52]	@ 0x34
 801fa80:	e002      	b.n	801fa88 <tcp_write+0x23c>
 801fa82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	637b      	str	r3, [r7, #52]	@ 0x34
 801fa88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d1f8      	bne.n	801fa82 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801fa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa92:	7b1b      	ldrb	r3, [r3, #12]
 801fa94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d115      	bne.n	801fac8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801fa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa9e:	685b      	ldr	r3, [r3, #4]
 801faa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801faa2:	8952      	ldrh	r2, [r2, #10]
 801faa4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801faa6:	68ba      	ldr	r2, [r7, #8]
 801faa8:	429a      	cmp	r2, r3
 801faaa:	d10d      	bne.n	801fac8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801faac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d006      	beq.n	801fac2 <tcp_write+0x276>
 801fab4:	4b1c      	ldr	r3, [pc, #112]	@ (801fb28 <tcp_write+0x2dc>)
 801fab6:	f240 2231 	movw	r2, #561	@ 0x231
 801faba:	4922      	ldr	r1, [pc, #136]	@ (801fb44 <tcp_write+0x2f8>)
 801fabc:	481c      	ldr	r0, [pc, #112]	@ (801fb30 <tcp_write+0x2e4>)
 801fabe:	f002 ff3b 	bl	8022938 <iprintf>
          extendlen = seglen;
 801fac2:	8bfb      	ldrh	r3, [r7, #30]
 801fac4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801fac6:	e01a      	b.n	801fafe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801fac8:	8bfb      	ldrh	r3, [r7, #30]
 801faca:	2201      	movs	r2, #1
 801facc:	4619      	mov	r1, r3
 801face:	2000      	movs	r0, #0
 801fad0:	f7fa fd42 	bl	801a558 <pbuf_alloc>
 801fad4:	6578      	str	r0, [r7, #84]	@ 0x54
 801fad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fad8:	2b00      	cmp	r3, #0
 801fada:	f000 81e0 	beq.w	801fe9e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801fade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fae2:	68ba      	ldr	r2, [r7, #8]
 801fae4:	441a      	add	r2, r3
 801fae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fae8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801faea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801faec:	f7fb f8d8 	bl	801aca0 <pbuf_clen>
 801faf0:	4603      	mov	r3, r0
 801faf2:	461a      	mov	r2, r3
 801faf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801faf8:	4413      	add	r3, r2
 801fafa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801fafe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fb02:	8bfb      	ldrh	r3, [r7, #30]
 801fb04:	4413      	add	r3, r2
 801fb06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801fb0a:	e0dc      	b.n	801fcc6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801fb0c:	68fb      	ldr	r3, [r7, #12]
 801fb0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	f000 80d7 	beq.w	801fcc6 <tcp_write+0x47a>
 801fb18:	4b03      	ldr	r3, [pc, #12]	@ (801fb28 <tcp_write+0x2dc>)
 801fb1a:	f240 224a 	movw	r2, #586	@ 0x24a
 801fb1e:	490a      	ldr	r1, [pc, #40]	@ (801fb48 <tcp_write+0x2fc>)
 801fb20:	4803      	ldr	r0, [pc, #12]	@ (801fb30 <tcp_write+0x2e4>)
 801fb22:	f002 ff09 	bl	8022938 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801fb26:	e0ce      	b.n	801fcc6 <tcp_write+0x47a>
 801fb28:	08027740 	.word	0x08027740
 801fb2c:	08027924 	.word	0x08027924
 801fb30:	080277d8 	.word	0x080277d8
 801fb34:	0802793c 	.word	0x0802793c
 801fb38:	08027970 	.word	0x08027970
 801fb3c:	08027988 	.word	0x08027988
 801fb40:	080279a8 	.word	0x080279a8
 801fb44:	080279c8 	.word	0x080279c8
 801fb48:	080279f4 	.word	0x080279f4
    struct pbuf *p;
    u16_t left = len - pos;
 801fb4c:	88fa      	ldrh	r2, [r7, #6]
 801fb4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fb52:	1ad3      	subs	r3, r2, r3
 801fb54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801fb56:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fb5a:	b29b      	uxth	r3, r3
 801fb5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb5e:	1ad3      	subs	r3, r2, r3
 801fb60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801fb62:	8b7a      	ldrh	r2, [r7, #26]
 801fb64:	8bbb      	ldrh	r3, [r7, #28]
 801fb66:	4293      	cmp	r3, r2
 801fb68:	bf28      	it	cs
 801fb6a:	4613      	movcs	r3, r2
 801fb6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fb6e:	797b      	ldrb	r3, [r7, #5]
 801fb70:	f003 0301 	and.w	r3, r3, #1
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d036      	beq.n	801fbe6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801fb78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fb7c:	b29a      	uxth	r2, r3
 801fb7e:	8b3b      	ldrh	r3, [r7, #24]
 801fb80:	4413      	add	r3, r2
 801fb82:	b299      	uxth	r1, r3
 801fb84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	bf0c      	ite	eq
 801fb8a:	2301      	moveq	r3, #1
 801fb8c:	2300      	movne	r3, #0
 801fb8e:	b2db      	uxtb	r3, r3
 801fb90:	f107 0012 	add.w	r0, r7, #18
 801fb94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb96:	9302      	str	r3, [sp, #8]
 801fb98:	797b      	ldrb	r3, [r7, #5]
 801fb9a:	9301      	str	r3, [sp, #4]
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	9300      	str	r3, [sp, #0]
 801fba0:	4603      	mov	r3, r0
 801fba2:	2036      	movs	r0, #54	@ 0x36
 801fba4:	f7ff fd5e 	bl	801f664 <tcp_pbuf_prealloc>
 801fba8:	6338      	str	r0, [r7, #48]	@ 0x30
 801fbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	f000 8178 	beq.w	801fea2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbb4:	895b      	ldrh	r3, [r3, #10]
 801fbb6:	8b3a      	ldrh	r2, [r7, #24]
 801fbb8:	429a      	cmp	r2, r3
 801fbba:	d906      	bls.n	801fbca <tcp_write+0x37e>
 801fbbc:	4b8c      	ldr	r3, [pc, #560]	@ (801fdf0 <tcp_write+0x5a4>)
 801fbbe:	f240 2266 	movw	r2, #614	@ 0x266
 801fbc2:	498c      	ldr	r1, [pc, #560]	@ (801fdf4 <tcp_write+0x5a8>)
 801fbc4:	488c      	ldr	r0, [pc, #560]	@ (801fdf8 <tcp_write+0x5ac>)
 801fbc6:	f002 feb7 	bl	8022938 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbcc:	685a      	ldr	r2, [r3, #4]
 801fbce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fbd2:	18d0      	adds	r0, r2, r3
 801fbd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fbd8:	68ba      	ldr	r2, [r7, #8]
 801fbda:	4413      	add	r3, r2
 801fbdc:	8b3a      	ldrh	r2, [r7, #24]
 801fbde:	4619      	mov	r1, r3
 801fbe0:	f003 f8e1 	bl	8022da6 <memcpy>
 801fbe4:	e02f      	b.n	801fc46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fbe6:	8a7b      	ldrh	r3, [r7, #18]
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d006      	beq.n	801fbfa <tcp_write+0x3ae>
 801fbec:	4b80      	ldr	r3, [pc, #512]	@ (801fdf0 <tcp_write+0x5a4>)
 801fbee:	f240 2271 	movw	r2, #625	@ 0x271
 801fbf2:	4982      	ldr	r1, [pc, #520]	@ (801fdfc <tcp_write+0x5b0>)
 801fbf4:	4880      	ldr	r0, [pc, #512]	@ (801fdf8 <tcp_write+0x5ac>)
 801fbf6:	f002 fe9f 	bl	8022938 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fbfa:	8b3b      	ldrh	r3, [r7, #24]
 801fbfc:	2201      	movs	r2, #1
 801fbfe:	4619      	mov	r1, r3
 801fc00:	2036      	movs	r0, #54	@ 0x36
 801fc02:	f7fa fca9 	bl	801a558 <pbuf_alloc>
 801fc06:	6178      	str	r0, [r7, #20]
 801fc08:	697b      	ldr	r3, [r7, #20]
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	f000 814b 	beq.w	801fea6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fc10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fc14:	68ba      	ldr	r2, [r7, #8]
 801fc16:	441a      	add	r2, r3
 801fc18:	697b      	ldr	r3, [r7, #20]
 801fc1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fc1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fc20:	b29b      	uxth	r3, r3
 801fc22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fc26:	4619      	mov	r1, r3
 801fc28:	2036      	movs	r0, #54	@ 0x36
 801fc2a:	f7fa fc95 	bl	801a558 <pbuf_alloc>
 801fc2e:	6338      	str	r0, [r7, #48]	@ 0x30
 801fc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d103      	bne.n	801fc3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801fc36:	6978      	ldr	r0, [r7, #20]
 801fc38:	f7fa ffa4 	bl	801ab84 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801fc3c:	e136      	b.n	801feac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801fc3e:	6979      	ldr	r1, [r7, #20]
 801fc40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc42:	f7fb f86d 	bl	801ad20 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801fc46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc48:	f7fb f82a 	bl	801aca0 <pbuf_clen>
 801fc4c:	4603      	mov	r3, r0
 801fc4e:	461a      	mov	r2, r3
 801fc50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fc54:	4413      	add	r3, r2
 801fc56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fc5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fc5e:	2b10      	cmp	r3, #16
 801fc60:	d903      	bls.n	801fc6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801fc62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc64:	f7fa ff8e 	bl	801ab84 <pbuf_free>
      goto memerr;
 801fc68:	e120      	b.n	801feac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801fc6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fc72:	441a      	add	r2, r3
 801fc74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fc78:	9300      	str	r3, [sp, #0]
 801fc7a:	4613      	mov	r3, r2
 801fc7c:	2200      	movs	r2, #0
 801fc7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801fc80:	68f8      	ldr	r0, [r7, #12]
 801fc82:	f7ff fc53 	bl	801f52c <tcp_create_segment>
 801fc86:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801fc88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	f000 810d 	beq.w	801feaa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801fc90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d102      	bne.n	801fc9c <tcp_write+0x450>
      queue = seg;
 801fc96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc98:	647b      	str	r3, [r7, #68]	@ 0x44
 801fc9a:	e00c      	b.n	801fcb6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fc9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d106      	bne.n	801fcb0 <tcp_write+0x464>
 801fca2:	4b53      	ldr	r3, [pc, #332]	@ (801fdf0 <tcp_write+0x5a4>)
 801fca4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801fca8:	4955      	ldr	r1, [pc, #340]	@ (801fe00 <tcp_write+0x5b4>)
 801fcaa:	4853      	ldr	r0, [pc, #332]	@ (801fdf8 <tcp_write+0x5ac>)
 801fcac:	f002 fe44 	bl	8022938 <iprintf>
      prev_seg->next = seg;
 801fcb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fcb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801fcb4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801fcb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fcb8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801fcba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fcbe:	8b3b      	ldrh	r3, [r7, #24]
 801fcc0:	4413      	add	r3, r2
 801fcc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801fcc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fcca:	88fb      	ldrh	r3, [r7, #6]
 801fccc:	429a      	cmp	r2, r3
 801fcce:	f4ff af3d 	bcc.w	801fb4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801fcd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d02c      	beq.n	801fd32 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801fcd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fcda:	685b      	ldr	r3, [r3, #4]
 801fcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fcde:	e01e      	b.n	801fd1e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801fce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fce2:	891a      	ldrh	r2, [r3, #8]
 801fce4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fce6:	4413      	add	r3, r2
 801fce8:	b29a      	uxth	r2, r3
 801fcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801fcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d110      	bne.n	801fd18 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801fcf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcf8:	685b      	ldr	r3, [r3, #4]
 801fcfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fcfc:	8952      	ldrh	r2, [r2, #10]
 801fcfe:	4413      	add	r3, r2
 801fd00:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801fd02:	68b9      	ldr	r1, [r7, #8]
 801fd04:	4618      	mov	r0, r3
 801fd06:	f003 f84e 	bl	8022da6 <memcpy>
        p->len += oversize_used;
 801fd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd0c:	895a      	ldrh	r2, [r3, #10]
 801fd0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fd10:	4413      	add	r3, r2
 801fd12:	b29a      	uxth	r2, r3
 801fd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd16:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801fd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d1dd      	bne.n	801fce0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801fd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd26:	891a      	ldrh	r2, [r3, #8]
 801fd28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fd2a:	4413      	add	r3, r2
 801fd2c:	b29a      	uxth	r2, r3
 801fd2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd30:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801fd32:	8a7a      	ldrh	r2, [r7, #18]
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801fd3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d018      	beq.n	801fd72 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801fd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d106      	bne.n	801fd54 <tcp_write+0x508>
 801fd46:	4b2a      	ldr	r3, [pc, #168]	@ (801fdf0 <tcp_write+0x5a4>)
 801fd48:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801fd4c:	492d      	ldr	r1, [pc, #180]	@ (801fe04 <tcp_write+0x5b8>)
 801fd4e:	482a      	ldr	r0, [pc, #168]	@ (801fdf8 <tcp_write+0x5ac>)
 801fd50:	f002 fdf2 	bl	8022938 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801fd54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd56:	685b      	ldr	r3, [r3, #4]
 801fd58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801fd5a:	4618      	mov	r0, r3
 801fd5c:	f7fa ffe0 	bl	801ad20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801fd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd62:	891a      	ldrh	r2, [r3, #8]
 801fd64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fd66:	891b      	ldrh	r3, [r3, #8]
 801fd68:	4413      	add	r3, r2
 801fd6a:	b29a      	uxth	r2, r3
 801fd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd6e:	811a      	strh	r2, [r3, #8]
 801fd70:	e037      	b.n	801fde2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801fd72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d034      	beq.n	801fde2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801fd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d003      	beq.n	801fd86 <tcp_write+0x53a>
 801fd7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd80:	685b      	ldr	r3, [r3, #4]
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d106      	bne.n	801fd94 <tcp_write+0x548>
 801fd86:	4b1a      	ldr	r3, [pc, #104]	@ (801fdf0 <tcp_write+0x5a4>)
 801fd88:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801fd8c:	491e      	ldr	r1, [pc, #120]	@ (801fe08 <tcp_write+0x5bc>)
 801fd8e:	481a      	ldr	r0, [pc, #104]	@ (801fdf8 <tcp_write+0x5ac>)
 801fd90:	f002 fdd2 	bl	8022938 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fd96:	685b      	ldr	r3, [r3, #4]
 801fd98:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fd9a:	e009      	b.n	801fdb0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801fd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd9e:	891a      	ldrh	r2, [r3, #8]
 801fda0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fda2:	4413      	add	r3, r2
 801fda4:	b29a      	uxth	r2, r3
 801fda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fda8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d1f1      	bne.n	801fd9c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801fdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdba:	891a      	ldrh	r2, [r3, #8]
 801fdbc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fdbe:	4413      	add	r3, r2
 801fdc0:	b29a      	uxth	r2, r3
 801fdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdc4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801fdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdc8:	895a      	ldrh	r2, [r3, #10]
 801fdca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fdcc:	4413      	add	r3, r2
 801fdce:	b29a      	uxth	r2, r3
 801fdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdd2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801fdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fdd6:	891a      	ldrh	r2, [r3, #8]
 801fdd8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fdda:	4413      	add	r3, r2
 801fddc:	b29a      	uxth	r2, r3
 801fdde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fde0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801fde2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d111      	bne.n	801fe0c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fdec:	66da      	str	r2, [r3, #108]	@ 0x6c
 801fdee:	e010      	b.n	801fe12 <tcp_write+0x5c6>
 801fdf0:	08027740 	.word	0x08027740
 801fdf4:	08027a24 	.word	0x08027a24
 801fdf8:	080277d8 	.word	0x080277d8
 801fdfc:	08027a64 	.word	0x08027a64
 801fe00:	08027a74 	.word	0x08027a74
 801fe04:	08027a88 	.word	0x08027a88
 801fe08:	08027ac0 	.word	0x08027ac0
  } else {
    last_unsent->next = queue;
 801fe0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fe0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fe10:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801fe16:	88fb      	ldrh	r3, [r7, #6]
 801fe18:	441a      	add	r2, r3
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801fe24:	88fb      	ldrh	r3, [r7, #6]
 801fe26:	1ad3      	subs	r3, r2, r3
 801fe28:	b29a      	uxth	r2, r3
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801fe36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801fe3a:	68fb      	ldr	r3, [r7, #12]
 801fe3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d00e      	beq.n	801fe62 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801fe44:	68fb      	ldr	r3, [r7, #12]
 801fe46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d10a      	bne.n	801fe62 <tcp_write+0x616>
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d106      	bne.n	801fe62 <tcp_write+0x616>
 801fe54:	4b2c      	ldr	r3, [pc, #176]	@ (801ff08 <tcp_write+0x6bc>)
 801fe56:	f240 3212 	movw	r2, #786	@ 0x312
 801fe5a:	492c      	ldr	r1, [pc, #176]	@ (801ff0c <tcp_write+0x6c0>)
 801fe5c:	482c      	ldr	r0, [pc, #176]	@ (801ff10 <tcp_write+0x6c4>)
 801fe5e:	f002 fd6b 	bl	8022938 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801fe62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d016      	beq.n	801fe96 <tcp_write+0x64a>
 801fe68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe6a:	68db      	ldr	r3, [r3, #12]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d012      	beq.n	801fe96 <tcp_write+0x64a>
 801fe70:	797b      	ldrb	r3, [r7, #5]
 801fe72:	f003 0302 	and.w	r3, r3, #2
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	d10d      	bne.n	801fe96 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801fe7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe7c:	68db      	ldr	r3, [r3, #12]
 801fe7e:	899b      	ldrh	r3, [r3, #12]
 801fe80:	b29c      	uxth	r4, r3
 801fe82:	2008      	movs	r0, #8
 801fe84:	f7f9 f9cc 	bl	8019220 <lwip_htons>
 801fe88:	4603      	mov	r3, r0
 801fe8a:	461a      	mov	r2, r3
 801fe8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe8e:	68db      	ldr	r3, [r3, #12]
 801fe90:	4322      	orrs	r2, r4
 801fe92:	b292      	uxth	r2, r2
 801fe94:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801fe96:	2300      	movs	r3, #0
 801fe98:	e031      	b.n	801fefe <tcp_write+0x6b2>
          goto memerr;
 801fe9a:	bf00      	nop
 801fe9c:	e006      	b.n	801feac <tcp_write+0x660>
            goto memerr;
 801fe9e:	bf00      	nop
 801fea0:	e004      	b.n	801feac <tcp_write+0x660>
        goto memerr;
 801fea2:	bf00      	nop
 801fea4:	e002      	b.n	801feac <tcp_write+0x660>
        goto memerr;
 801fea6:	bf00      	nop
 801fea8:	e000      	b.n	801feac <tcp_write+0x660>
      goto memerr;
 801feaa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801feac:	68fb      	ldr	r3, [r7, #12]
 801feae:	8b5b      	ldrh	r3, [r3, #26]
 801feb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801feb4:	b29a      	uxth	r2, r3
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801feba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801febc:	2b00      	cmp	r3, #0
 801febe:	d002      	beq.n	801fec6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801fec0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801fec2:	f7fa fe5f 	bl	801ab84 <pbuf_free>
  }
  if (queue != NULL) {
 801fec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d002      	beq.n	801fed2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801fecc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801fece:	f7fc fb6f 	bl	801c5b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d00e      	beq.n	801fefa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d10a      	bne.n	801fefa <tcp_write+0x6ae>
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d106      	bne.n	801fefa <tcp_write+0x6ae>
 801feec:	4b06      	ldr	r3, [pc, #24]	@ (801ff08 <tcp_write+0x6bc>)
 801feee:	f240 3227 	movw	r2, #807	@ 0x327
 801fef2:	4906      	ldr	r1, [pc, #24]	@ (801ff0c <tcp_write+0x6c0>)
 801fef4:	4806      	ldr	r0, [pc, #24]	@ (801ff10 <tcp_write+0x6c4>)
 801fef6:	f002 fd1f 	bl	8022938 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801fefa:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fefe:	4618      	mov	r0, r3
 801ff00:	375c      	adds	r7, #92	@ 0x5c
 801ff02:	46bd      	mov	sp, r7
 801ff04:	bd90      	pop	{r4, r7, pc}
 801ff06:	bf00      	nop
 801ff08:	08027740 	.word	0x08027740
 801ff0c:	08027af8 	.word	0x08027af8
 801ff10:	080277d8 	.word	0x080277d8

0801ff14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ff14:	b590      	push	{r4, r7, lr}
 801ff16:	b08b      	sub	sp, #44	@ 0x2c
 801ff18:	af02      	add	r7, sp, #8
 801ff1a:	6078      	str	r0, [r7, #4]
 801ff1c:	460b      	mov	r3, r1
 801ff1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ff20:	2300      	movs	r3, #0
 801ff22:	61fb      	str	r3, [r7, #28]
 801ff24:	2300      	movs	r3, #0
 801ff26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ff28:	2300      	movs	r3, #0
 801ff2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d106      	bne.n	801ff40 <tcp_split_unsent_seg+0x2c>
 801ff32:	4b95      	ldr	r3, [pc, #596]	@ (8020188 <tcp_split_unsent_seg+0x274>)
 801ff34:	f240 324b 	movw	r2, #843	@ 0x34b
 801ff38:	4994      	ldr	r1, [pc, #592]	@ (802018c <tcp_split_unsent_seg+0x278>)
 801ff3a:	4895      	ldr	r0, [pc, #596]	@ (8020190 <tcp_split_unsent_seg+0x27c>)
 801ff3c:	f002 fcfc 	bl	8022938 <iprintf>

  useg = pcb->unsent;
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ff46:	697b      	ldr	r3, [r7, #20]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d102      	bne.n	801ff52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ff4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ff50:	e116      	b.n	8020180 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ff52:	887b      	ldrh	r3, [r7, #2]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d109      	bne.n	801ff6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ff58:	4b8b      	ldr	r3, [pc, #556]	@ (8020188 <tcp_split_unsent_seg+0x274>)
 801ff5a:	f240 3253 	movw	r2, #851	@ 0x353
 801ff5e:	498d      	ldr	r1, [pc, #564]	@ (8020194 <tcp_split_unsent_seg+0x280>)
 801ff60:	488b      	ldr	r0, [pc, #556]	@ (8020190 <tcp_split_unsent_seg+0x27c>)
 801ff62:	f002 fce9 	bl	8022938 <iprintf>
    return ERR_VAL;
 801ff66:	f06f 0305 	mvn.w	r3, #5
 801ff6a:	e109      	b.n	8020180 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ff6c:	697b      	ldr	r3, [r7, #20]
 801ff6e:	891b      	ldrh	r3, [r3, #8]
 801ff70:	887a      	ldrh	r2, [r7, #2]
 801ff72:	429a      	cmp	r2, r3
 801ff74:	d301      	bcc.n	801ff7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ff76:	2300      	movs	r3, #0
 801ff78:	e102      	b.n	8020180 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ff7e:	887a      	ldrh	r2, [r7, #2]
 801ff80:	429a      	cmp	r2, r3
 801ff82:	d906      	bls.n	801ff92 <tcp_split_unsent_seg+0x7e>
 801ff84:	4b80      	ldr	r3, [pc, #512]	@ (8020188 <tcp_split_unsent_seg+0x274>)
 801ff86:	f240 325b 	movw	r2, #859	@ 0x35b
 801ff8a:	4983      	ldr	r1, [pc, #524]	@ (8020198 <tcp_split_unsent_seg+0x284>)
 801ff8c:	4880      	ldr	r0, [pc, #512]	@ (8020190 <tcp_split_unsent_seg+0x27c>)
 801ff8e:	f002 fcd3 	bl	8022938 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ff92:	697b      	ldr	r3, [r7, #20]
 801ff94:	891b      	ldrh	r3, [r3, #8]
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d106      	bne.n	801ffa8 <tcp_split_unsent_seg+0x94>
 801ff9a:	4b7b      	ldr	r3, [pc, #492]	@ (8020188 <tcp_split_unsent_seg+0x274>)
 801ff9c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801ffa0:	497e      	ldr	r1, [pc, #504]	@ (802019c <tcp_split_unsent_seg+0x288>)
 801ffa2:	487b      	ldr	r0, [pc, #492]	@ (8020190 <tcp_split_unsent_seg+0x27c>)
 801ffa4:	f002 fcc8 	bl	8022938 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ffa8:	697b      	ldr	r3, [r7, #20]
 801ffaa:	7a9b      	ldrb	r3, [r3, #10]
 801ffac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ffae:	7bfb      	ldrb	r3, [r7, #15]
 801ffb0:	009b      	lsls	r3, r3, #2
 801ffb2:	b2db      	uxtb	r3, r3
 801ffb4:	f003 0304 	and.w	r3, r3, #4
 801ffb8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	891a      	ldrh	r2, [r3, #8]
 801ffbe:	887b      	ldrh	r3, [r7, #2]
 801ffc0:	1ad3      	subs	r3, r2, r3
 801ffc2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ffc4:	7bbb      	ldrb	r3, [r7, #14]
 801ffc6:	b29a      	uxth	r2, r3
 801ffc8:	89bb      	ldrh	r3, [r7, #12]
 801ffca:	4413      	add	r3, r2
 801ffcc:	b29b      	uxth	r3, r3
 801ffce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ffd2:	4619      	mov	r1, r3
 801ffd4:	2036      	movs	r0, #54	@ 0x36
 801ffd6:	f7fa fabf 	bl	801a558 <pbuf_alloc>
 801ffda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ffdc:	693b      	ldr	r3, [r7, #16]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	f000 80b7 	beq.w	8020152 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ffe4:	697b      	ldr	r3, [r7, #20]
 801ffe6:	685b      	ldr	r3, [r3, #4]
 801ffe8:	891a      	ldrh	r2, [r3, #8]
 801ffea:	697b      	ldr	r3, [r7, #20]
 801ffec:	891b      	ldrh	r3, [r3, #8]
 801ffee:	1ad3      	subs	r3, r2, r3
 801fff0:	b29a      	uxth	r2, r3
 801fff2:	887b      	ldrh	r3, [r7, #2]
 801fff4:	4413      	add	r3, r2
 801fff6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	6858      	ldr	r0, [r3, #4]
 801fffc:	693b      	ldr	r3, [r7, #16]
 801fffe:	685a      	ldr	r2, [r3, #4]
 8020000:	7bbb      	ldrb	r3, [r7, #14]
 8020002:	18d1      	adds	r1, r2, r3
 8020004:	897b      	ldrh	r3, [r7, #10]
 8020006:	89ba      	ldrh	r2, [r7, #12]
 8020008:	f7fa ffc2 	bl	801af90 <pbuf_copy_partial>
 802000c:	4603      	mov	r3, r0
 802000e:	461a      	mov	r2, r3
 8020010:	89bb      	ldrh	r3, [r7, #12]
 8020012:	4293      	cmp	r3, r2
 8020014:	f040 809f 	bne.w	8020156 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8020018:	697b      	ldr	r3, [r7, #20]
 802001a:	68db      	ldr	r3, [r3, #12]
 802001c:	899b      	ldrh	r3, [r3, #12]
 802001e:	b29b      	uxth	r3, r3
 8020020:	4618      	mov	r0, r3
 8020022:	f7f9 f8fd 	bl	8019220 <lwip_htons>
 8020026:	4603      	mov	r3, r0
 8020028:	b2db      	uxtb	r3, r3
 802002a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802002e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8020030:	2300      	movs	r3, #0
 8020032:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8020034:	7efb      	ldrb	r3, [r7, #27]
 8020036:	f003 0308 	and.w	r3, r3, #8
 802003a:	2b00      	cmp	r3, #0
 802003c:	d007      	beq.n	802004e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 802003e:	7efb      	ldrb	r3, [r7, #27]
 8020040:	f023 0308 	bic.w	r3, r3, #8
 8020044:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8020046:	7ebb      	ldrb	r3, [r7, #26]
 8020048:	f043 0308 	orr.w	r3, r3, #8
 802004c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 802004e:	7efb      	ldrb	r3, [r7, #27]
 8020050:	f003 0301 	and.w	r3, r3, #1
 8020054:	2b00      	cmp	r3, #0
 8020056:	d007      	beq.n	8020068 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8020058:	7efb      	ldrb	r3, [r7, #27]
 802005a:	f023 0301 	bic.w	r3, r3, #1
 802005e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8020060:	7ebb      	ldrb	r3, [r7, #26]
 8020062:	f043 0301 	orr.w	r3, r3, #1
 8020066:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020068:	697b      	ldr	r3, [r7, #20]
 802006a:	68db      	ldr	r3, [r3, #12]
 802006c:	685b      	ldr	r3, [r3, #4]
 802006e:	4618      	mov	r0, r3
 8020070:	f7f9 f8eb 	bl	801924a <lwip_htonl>
 8020074:	4602      	mov	r2, r0
 8020076:	887b      	ldrh	r3, [r7, #2]
 8020078:	18d1      	adds	r1, r2, r3
 802007a:	7eba      	ldrb	r2, [r7, #26]
 802007c:	7bfb      	ldrb	r3, [r7, #15]
 802007e:	9300      	str	r3, [sp, #0]
 8020080:	460b      	mov	r3, r1
 8020082:	6939      	ldr	r1, [r7, #16]
 8020084:	6878      	ldr	r0, [r7, #4]
 8020086:	f7ff fa51 	bl	801f52c <tcp_create_segment>
 802008a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 802008c:	69fb      	ldr	r3, [r7, #28]
 802008e:	2b00      	cmp	r3, #0
 8020090:	d063      	beq.n	802015a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020092:	697b      	ldr	r3, [r7, #20]
 8020094:	685b      	ldr	r3, [r3, #4]
 8020096:	4618      	mov	r0, r3
 8020098:	f7fa fe02 	bl	801aca0 <pbuf_clen>
 802009c:	4603      	mov	r3, r0
 802009e:	461a      	mov	r2, r3
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80200a6:	1a9b      	subs	r3, r3, r2
 80200a8:	b29a      	uxth	r2, r3
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	6858      	ldr	r0, [r3, #4]
 80200b4:	697b      	ldr	r3, [r7, #20]
 80200b6:	685b      	ldr	r3, [r3, #4]
 80200b8:	891a      	ldrh	r2, [r3, #8]
 80200ba:	89bb      	ldrh	r3, [r7, #12]
 80200bc:	1ad3      	subs	r3, r2, r3
 80200be:	b29b      	uxth	r3, r3
 80200c0:	4619      	mov	r1, r3
 80200c2:	f7fa fba7 	bl	801a814 <pbuf_realloc>
  useg->len -= remainder;
 80200c6:	697b      	ldr	r3, [r7, #20]
 80200c8:	891a      	ldrh	r2, [r3, #8]
 80200ca:	89bb      	ldrh	r3, [r7, #12]
 80200cc:	1ad3      	subs	r3, r2, r3
 80200ce:	b29a      	uxth	r2, r3
 80200d0:	697b      	ldr	r3, [r7, #20]
 80200d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80200d4:	697b      	ldr	r3, [r7, #20]
 80200d6:	68db      	ldr	r3, [r3, #12]
 80200d8:	899b      	ldrh	r3, [r3, #12]
 80200da:	b29c      	uxth	r4, r3
 80200dc:	7efb      	ldrb	r3, [r7, #27]
 80200de:	b29b      	uxth	r3, r3
 80200e0:	4618      	mov	r0, r3
 80200e2:	f7f9 f89d 	bl	8019220 <lwip_htons>
 80200e6:	4603      	mov	r3, r0
 80200e8:	461a      	mov	r2, r3
 80200ea:	697b      	ldr	r3, [r7, #20]
 80200ec:	68db      	ldr	r3, [r3, #12]
 80200ee:	4322      	orrs	r2, r4
 80200f0:	b292      	uxth	r2, r2
 80200f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80200f4:	697b      	ldr	r3, [r7, #20]
 80200f6:	685b      	ldr	r3, [r3, #4]
 80200f8:	4618      	mov	r0, r3
 80200fa:	f7fa fdd1 	bl	801aca0 <pbuf_clen>
 80200fe:	4603      	mov	r3, r0
 8020100:	461a      	mov	r2, r3
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020108:	4413      	add	r3, r2
 802010a:	b29a      	uxth	r2, r3
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020112:	69fb      	ldr	r3, [r7, #28]
 8020114:	685b      	ldr	r3, [r3, #4]
 8020116:	4618      	mov	r0, r3
 8020118:	f7fa fdc2 	bl	801aca0 <pbuf_clen>
 802011c:	4603      	mov	r3, r0
 802011e:	461a      	mov	r2, r3
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020126:	4413      	add	r3, r2
 8020128:	b29a      	uxth	r2, r3
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8020130:	697b      	ldr	r3, [r7, #20]
 8020132:	681a      	ldr	r2, [r3, #0]
 8020134:	69fb      	ldr	r3, [r7, #28]
 8020136:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8020138:	697b      	ldr	r3, [r7, #20]
 802013a:	69fa      	ldr	r2, [r7, #28]
 802013c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 802013e:	69fb      	ldr	r3, [r7, #28]
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	2b00      	cmp	r3, #0
 8020144:	d103      	bne.n	802014e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	2200      	movs	r2, #0
 802014a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 802014e:	2300      	movs	r3, #0
 8020150:	e016      	b.n	8020180 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8020152:	bf00      	nop
 8020154:	e002      	b.n	802015c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020156:	bf00      	nop
 8020158:	e000      	b.n	802015c <tcp_split_unsent_seg+0x248>
    goto memerr;
 802015a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 802015c:	69fb      	ldr	r3, [r7, #28]
 802015e:	2b00      	cmp	r3, #0
 8020160:	d006      	beq.n	8020170 <tcp_split_unsent_seg+0x25c>
 8020162:	4b09      	ldr	r3, [pc, #36]	@ (8020188 <tcp_split_unsent_seg+0x274>)
 8020164:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8020168:	490d      	ldr	r1, [pc, #52]	@ (80201a0 <tcp_split_unsent_seg+0x28c>)
 802016a:	4809      	ldr	r0, [pc, #36]	@ (8020190 <tcp_split_unsent_seg+0x27c>)
 802016c:	f002 fbe4 	bl	8022938 <iprintf>
  if (p != NULL) {
 8020170:	693b      	ldr	r3, [r7, #16]
 8020172:	2b00      	cmp	r3, #0
 8020174:	d002      	beq.n	802017c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8020176:	6938      	ldr	r0, [r7, #16]
 8020178:	f7fa fd04 	bl	801ab84 <pbuf_free>
  }

  return ERR_MEM;
 802017c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020180:	4618      	mov	r0, r3
 8020182:	3724      	adds	r7, #36	@ 0x24
 8020184:	46bd      	mov	sp, r7
 8020186:	bd90      	pop	{r4, r7, pc}
 8020188:	08027740 	.word	0x08027740
 802018c:	08027b18 	.word	0x08027b18
 8020190:	080277d8 	.word	0x080277d8
 8020194:	08027b3c 	.word	0x08027b3c
 8020198:	08027b60 	.word	0x08027b60
 802019c:	08027b70 	.word	0x08027b70
 80201a0:	08027b80 	.word	0x08027b80

080201a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80201a4:	b590      	push	{r4, r7, lr}
 80201a6:	b085      	sub	sp, #20
 80201a8:	af00      	add	r7, sp, #0
 80201aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d106      	bne.n	80201c0 <tcp_send_fin+0x1c>
 80201b2:	4b21      	ldr	r3, [pc, #132]	@ (8020238 <tcp_send_fin+0x94>)
 80201b4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80201b8:	4920      	ldr	r1, [pc, #128]	@ (802023c <tcp_send_fin+0x98>)
 80201ba:	4821      	ldr	r0, [pc, #132]	@ (8020240 <tcp_send_fin+0x9c>)
 80201bc:	f002 fbbc 	bl	8022938 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d02e      	beq.n	8020226 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80201cc:	60fb      	str	r3, [r7, #12]
 80201ce:	e002      	b.n	80201d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80201d0:	68fb      	ldr	r3, [r7, #12]
 80201d2:	681b      	ldr	r3, [r3, #0]
 80201d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80201d6:	68fb      	ldr	r3, [r7, #12]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d1f8      	bne.n	80201d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	68db      	ldr	r3, [r3, #12]
 80201e2:	899b      	ldrh	r3, [r3, #12]
 80201e4:	b29b      	uxth	r3, r3
 80201e6:	4618      	mov	r0, r3
 80201e8:	f7f9 f81a 	bl	8019220 <lwip_htons>
 80201ec:	4603      	mov	r3, r0
 80201ee:	b2db      	uxtb	r3, r3
 80201f0:	f003 0307 	and.w	r3, r3, #7
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d116      	bne.n	8020226 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80201f8:	68fb      	ldr	r3, [r7, #12]
 80201fa:	68db      	ldr	r3, [r3, #12]
 80201fc:	899b      	ldrh	r3, [r3, #12]
 80201fe:	b29c      	uxth	r4, r3
 8020200:	2001      	movs	r0, #1
 8020202:	f7f9 f80d 	bl	8019220 <lwip_htons>
 8020206:	4603      	mov	r3, r0
 8020208:	461a      	mov	r2, r3
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	68db      	ldr	r3, [r3, #12]
 802020e:	4322      	orrs	r2, r4
 8020210:	b292      	uxth	r2, r2
 8020212:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	8b5b      	ldrh	r3, [r3, #26]
 8020218:	f043 0320 	orr.w	r3, r3, #32
 802021c:	b29a      	uxth	r2, r3
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8020222:	2300      	movs	r3, #0
 8020224:	e004      	b.n	8020230 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020226:	2101      	movs	r1, #1
 8020228:	6878      	ldr	r0, [r7, #4]
 802022a:	f000 f80b 	bl	8020244 <tcp_enqueue_flags>
 802022e:	4603      	mov	r3, r0
}
 8020230:	4618      	mov	r0, r3
 8020232:	3714      	adds	r7, #20
 8020234:	46bd      	mov	sp, r7
 8020236:	bd90      	pop	{r4, r7, pc}
 8020238:	08027740 	.word	0x08027740
 802023c:	08027b8c 	.word	0x08027b8c
 8020240:	080277d8 	.word	0x080277d8

08020244 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8020244:	b580      	push	{r7, lr}
 8020246:	b08a      	sub	sp, #40	@ 0x28
 8020248:	af02      	add	r7, sp, #8
 802024a:	6078      	str	r0, [r7, #4]
 802024c:	460b      	mov	r3, r1
 802024e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8020250:	2300      	movs	r3, #0
 8020252:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8020254:	2300      	movs	r3, #0
 8020256:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8020258:	78fb      	ldrb	r3, [r7, #3]
 802025a:	f003 0303 	and.w	r3, r3, #3
 802025e:	2b00      	cmp	r3, #0
 8020260:	d106      	bne.n	8020270 <tcp_enqueue_flags+0x2c>
 8020262:	4b67      	ldr	r3, [pc, #412]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 8020264:	f240 4211 	movw	r2, #1041	@ 0x411
 8020268:	4966      	ldr	r1, [pc, #408]	@ (8020404 <tcp_enqueue_flags+0x1c0>)
 802026a:	4867      	ldr	r0, [pc, #412]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 802026c:	f002 fb64 	bl	8022938 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	2b00      	cmp	r3, #0
 8020274:	d106      	bne.n	8020284 <tcp_enqueue_flags+0x40>
 8020276:	4b62      	ldr	r3, [pc, #392]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 8020278:	f240 4213 	movw	r2, #1043	@ 0x413
 802027c:	4963      	ldr	r1, [pc, #396]	@ (802040c <tcp_enqueue_flags+0x1c8>)
 802027e:	4862      	ldr	r0, [pc, #392]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 8020280:	f002 fb5a 	bl	8022938 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8020284:	78fb      	ldrb	r3, [r7, #3]
 8020286:	f003 0302 	and.w	r3, r3, #2
 802028a:	2b00      	cmp	r3, #0
 802028c:	d001      	beq.n	8020292 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 802028e:	2301      	movs	r3, #1
 8020290:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020292:	7ffb      	ldrb	r3, [r7, #31]
 8020294:	009b      	lsls	r3, r3, #2
 8020296:	b2db      	uxtb	r3, r3
 8020298:	f003 0304 	and.w	r3, r3, #4
 802029c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802029e:	7dfb      	ldrb	r3, [r7, #23]
 80202a0:	b29b      	uxth	r3, r3
 80202a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80202a6:	4619      	mov	r1, r3
 80202a8:	2036      	movs	r0, #54	@ 0x36
 80202aa:	f7fa f955 	bl	801a558 <pbuf_alloc>
 80202ae:	6138      	str	r0, [r7, #16]
 80202b0:	693b      	ldr	r3, [r7, #16]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d109      	bne.n	80202ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	8b5b      	ldrh	r3, [r3, #26]
 80202ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80202be:	b29a      	uxth	r2, r3
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80202c4:	f04f 33ff 	mov.w	r3, #4294967295
 80202c8:	e095      	b.n	80203f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80202ca:	693b      	ldr	r3, [r7, #16]
 80202cc:	895a      	ldrh	r2, [r3, #10]
 80202ce:	7dfb      	ldrb	r3, [r7, #23]
 80202d0:	b29b      	uxth	r3, r3
 80202d2:	429a      	cmp	r2, r3
 80202d4:	d206      	bcs.n	80202e4 <tcp_enqueue_flags+0xa0>
 80202d6:	4b4a      	ldr	r3, [pc, #296]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 80202d8:	f240 4239 	movw	r2, #1081	@ 0x439
 80202dc:	494c      	ldr	r1, [pc, #304]	@ (8020410 <tcp_enqueue_flags+0x1cc>)
 80202de:	484a      	ldr	r0, [pc, #296]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 80202e0:	f002 fb2a 	bl	8022938 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80202e8:	78fa      	ldrb	r2, [r7, #3]
 80202ea:	7ffb      	ldrb	r3, [r7, #31]
 80202ec:	9300      	str	r3, [sp, #0]
 80202ee:	460b      	mov	r3, r1
 80202f0:	6939      	ldr	r1, [r7, #16]
 80202f2:	6878      	ldr	r0, [r7, #4]
 80202f4:	f7ff f91a 	bl	801f52c <tcp_create_segment>
 80202f8:	60f8      	str	r0, [r7, #12]
 80202fa:	68fb      	ldr	r3, [r7, #12]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d109      	bne.n	8020314 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	8b5b      	ldrh	r3, [r3, #26]
 8020304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020308:	b29a      	uxth	r2, r3
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 802030e:	f04f 33ff 	mov.w	r3, #4294967295
 8020312:	e070      	b.n	80203f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	68db      	ldr	r3, [r3, #12]
 8020318:	f003 0303 	and.w	r3, r3, #3
 802031c:	2b00      	cmp	r3, #0
 802031e:	d006      	beq.n	802032e <tcp_enqueue_flags+0xea>
 8020320:	4b37      	ldr	r3, [pc, #220]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 8020322:	f240 4242 	movw	r2, #1090	@ 0x442
 8020326:	493b      	ldr	r1, [pc, #236]	@ (8020414 <tcp_enqueue_flags+0x1d0>)
 8020328:	4837      	ldr	r0, [pc, #220]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 802032a:	f002 fb05 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	891b      	ldrh	r3, [r3, #8]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d006      	beq.n	8020344 <tcp_enqueue_flags+0x100>
 8020336:	4b32      	ldr	r3, [pc, #200]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 8020338:	f240 4243 	movw	r2, #1091	@ 0x443
 802033c:	4936      	ldr	r1, [pc, #216]	@ (8020418 <tcp_enqueue_flags+0x1d4>)
 802033e:	4832      	ldr	r0, [pc, #200]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 8020340:	f002 fafa 	bl	8022938 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020348:	2b00      	cmp	r3, #0
 802034a:	d103      	bne.n	8020354 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	68fa      	ldr	r2, [r7, #12]
 8020350:	66da      	str	r2, [r3, #108]	@ 0x6c
 8020352:	e00d      	b.n	8020370 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020358:	61bb      	str	r3, [r7, #24]
 802035a:	e002      	b.n	8020362 <tcp_enqueue_flags+0x11e>
 802035c:	69bb      	ldr	r3, [r7, #24]
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	61bb      	str	r3, [r7, #24]
 8020362:	69bb      	ldr	r3, [r7, #24]
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	2b00      	cmp	r3, #0
 8020368:	d1f8      	bne.n	802035c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 802036a:	69bb      	ldr	r3, [r7, #24]
 802036c:	68fa      	ldr	r2, [r7, #12]
 802036e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	2200      	movs	r2, #0
 8020374:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020378:	78fb      	ldrb	r3, [r7, #3]
 802037a:	f003 0302 	and.w	r3, r3, #2
 802037e:	2b00      	cmp	r3, #0
 8020380:	d104      	bne.n	802038c <tcp_enqueue_flags+0x148>
 8020382:	78fb      	ldrb	r3, [r7, #3]
 8020384:	f003 0301 	and.w	r3, r3, #1
 8020388:	2b00      	cmp	r3, #0
 802038a:	d004      	beq.n	8020396 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020390:	1c5a      	adds	r2, r3, #1
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8020396:	78fb      	ldrb	r3, [r7, #3]
 8020398:	f003 0301 	and.w	r3, r3, #1
 802039c:	2b00      	cmp	r3, #0
 802039e:	d006      	beq.n	80203ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	8b5b      	ldrh	r3, [r3, #26]
 80203a4:	f043 0320 	orr.w	r3, r3, #32
 80203a8:	b29a      	uxth	r2, r3
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80203ae:	68fb      	ldr	r3, [r7, #12]
 80203b0:	685b      	ldr	r3, [r3, #4]
 80203b2:	4618      	mov	r0, r3
 80203b4:	f7fa fc74 	bl	801aca0 <pbuf_clen>
 80203b8:	4603      	mov	r3, r0
 80203ba:	461a      	mov	r2, r3
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80203c2:	4413      	add	r3, r2
 80203c4:	b29a      	uxth	r2, r3
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d00e      	beq.n	80203f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d10a      	bne.n	80203f4 <tcp_enqueue_flags+0x1b0>
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d106      	bne.n	80203f4 <tcp_enqueue_flags+0x1b0>
 80203e6:	4b06      	ldr	r3, [pc, #24]	@ (8020400 <tcp_enqueue_flags+0x1bc>)
 80203e8:	f240 4265 	movw	r2, #1125	@ 0x465
 80203ec:	490b      	ldr	r1, [pc, #44]	@ (802041c <tcp_enqueue_flags+0x1d8>)
 80203ee:	4806      	ldr	r0, [pc, #24]	@ (8020408 <tcp_enqueue_flags+0x1c4>)
 80203f0:	f002 faa2 	bl	8022938 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80203f4:	2300      	movs	r3, #0
}
 80203f6:	4618      	mov	r0, r3
 80203f8:	3720      	adds	r7, #32
 80203fa:	46bd      	mov	sp, r7
 80203fc:	bd80      	pop	{r7, pc}
 80203fe:	bf00      	nop
 8020400:	08027740 	.word	0x08027740
 8020404:	08027ba8 	.word	0x08027ba8
 8020408:	080277d8 	.word	0x080277d8
 802040c:	08027c00 	.word	0x08027c00
 8020410:	08027c20 	.word	0x08027c20
 8020414:	08027c5c 	.word	0x08027c5c
 8020418:	08027c74 	.word	0x08027c74
 802041c:	08027ca0 	.word	0x08027ca0

08020420 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8020420:	b5b0      	push	{r4, r5, r7, lr}
 8020422:	b08a      	sub	sp, #40	@ 0x28
 8020424:	af00      	add	r7, sp, #0
 8020426:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d106      	bne.n	802043c <tcp_output+0x1c>
 802042e:	4b8a      	ldr	r3, [pc, #552]	@ (8020658 <tcp_output+0x238>)
 8020430:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8020434:	4989      	ldr	r1, [pc, #548]	@ (802065c <tcp_output+0x23c>)
 8020436:	488a      	ldr	r0, [pc, #552]	@ (8020660 <tcp_output+0x240>)
 8020438:	f002 fa7e 	bl	8022938 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	7d1b      	ldrb	r3, [r3, #20]
 8020440:	2b01      	cmp	r3, #1
 8020442:	d106      	bne.n	8020452 <tcp_output+0x32>
 8020444:	4b84      	ldr	r3, [pc, #528]	@ (8020658 <tcp_output+0x238>)
 8020446:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 802044a:	4986      	ldr	r1, [pc, #536]	@ (8020664 <tcp_output+0x244>)
 802044c:	4884      	ldr	r0, [pc, #528]	@ (8020660 <tcp_output+0x240>)
 802044e:	f002 fa73 	bl	8022938 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8020452:	4b85      	ldr	r3, [pc, #532]	@ (8020668 <tcp_output+0x248>)
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	687a      	ldr	r2, [r7, #4]
 8020458:	429a      	cmp	r2, r3
 802045a:	d101      	bne.n	8020460 <tcp_output+0x40>
    return ERR_OK;
 802045c:	2300      	movs	r3, #0
 802045e:	e1ce      	b.n	80207fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 802046c:	4293      	cmp	r3, r2
 802046e:	bf28      	it	cs
 8020470:	4613      	movcs	r3, r2
 8020472:	b29b      	uxth	r3, r3
 8020474:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802047a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 802047c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802047e:	2b00      	cmp	r3, #0
 8020480:	d10b      	bne.n	802049a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	8b5b      	ldrh	r3, [r3, #26]
 8020486:	f003 0302 	and.w	r3, r3, #2
 802048a:	2b00      	cmp	r3, #0
 802048c:	f000 81aa 	beq.w	80207e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8020490:	6878      	ldr	r0, [r7, #4]
 8020492:	f000 fdcb 	bl	802102c <tcp_send_empty_ack>
 8020496:	4603      	mov	r3, r0
 8020498:	e1b1      	b.n	80207fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802049a:	6879      	ldr	r1, [r7, #4]
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	3304      	adds	r3, #4
 80204a0:	461a      	mov	r2, r3
 80204a2:	6878      	ldr	r0, [r7, #4]
 80204a4:	f7ff f826 	bl	801f4f4 <tcp_route>
 80204a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80204aa:	697b      	ldr	r3, [r7, #20]
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d102      	bne.n	80204b6 <tcp_output+0x96>
    return ERR_RTE;
 80204b0:	f06f 0303 	mvn.w	r3, #3
 80204b4:	e1a3      	b.n	80207fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	d003      	beq.n	80204c4 <tcp_output+0xa4>
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d111      	bne.n	80204e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80204c4:	697b      	ldr	r3, [r7, #20]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d002      	beq.n	80204d0 <tcp_output+0xb0>
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	3304      	adds	r3, #4
 80204ce:	e000      	b.n	80204d2 <tcp_output+0xb2>
 80204d0:	2300      	movs	r3, #0
 80204d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80204d4:	693b      	ldr	r3, [r7, #16]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d102      	bne.n	80204e0 <tcp_output+0xc0>
      return ERR_RTE;
 80204da:	f06f 0303 	mvn.w	r3, #3
 80204de:	e18e      	b.n	80207fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80204e0:	693b      	ldr	r3, [r7, #16]
 80204e2:	681a      	ldr	r2, [r3, #0]
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80204e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204ea:	68db      	ldr	r3, [r3, #12]
 80204ec:	685b      	ldr	r3, [r3, #4]
 80204ee:	4618      	mov	r0, r3
 80204f0:	f7f8 feab 	bl	801924a <lwip_htonl>
 80204f4:	4602      	mov	r2, r0
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80204fa:	1ad3      	subs	r3, r2, r3
 80204fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80204fe:	8912      	ldrh	r2, [r2, #8]
 8020500:	4413      	add	r3, r2
 8020502:	69ba      	ldr	r2, [r7, #24]
 8020504:	429a      	cmp	r2, r3
 8020506:	d227      	bcs.n	8020558 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 802050e:	461a      	mov	r2, r3
 8020510:	69bb      	ldr	r3, [r7, #24]
 8020512:	4293      	cmp	r3, r2
 8020514:	d114      	bne.n	8020540 <tcp_output+0x120>
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802051a:	2b00      	cmp	r3, #0
 802051c:	d110      	bne.n	8020540 <tcp_output+0x120>
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8020524:	2b00      	cmp	r3, #0
 8020526:	d10b      	bne.n	8020540 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	2200      	movs	r2, #0
 802052c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	2201      	movs	r2, #1
 8020534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	2200      	movs	r2, #0
 802053c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	8b5b      	ldrh	r3, [r3, #26]
 8020544:	f003 0302 	and.w	r3, r3, #2
 8020548:	2b00      	cmp	r3, #0
 802054a:	f000 814d 	beq.w	80207e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 802054e:	6878      	ldr	r0, [r7, #4]
 8020550:	f000 fd6c 	bl	802102c <tcp_send_empty_ack>
 8020554:	4603      	mov	r3, r0
 8020556:	e152      	b.n	80207fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	2200      	movs	r2, #0
 802055c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020564:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8020566:	6a3b      	ldr	r3, [r7, #32]
 8020568:	2b00      	cmp	r3, #0
 802056a:	f000 811c 	beq.w	80207a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 802056e:	e002      	b.n	8020576 <tcp_output+0x156>
 8020570:	6a3b      	ldr	r3, [r7, #32]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	623b      	str	r3, [r7, #32]
 8020576:	6a3b      	ldr	r3, [r7, #32]
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	2b00      	cmp	r3, #0
 802057c:	d1f8      	bne.n	8020570 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 802057e:	e112      	b.n	80207a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8020580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020582:	68db      	ldr	r3, [r3, #12]
 8020584:	899b      	ldrh	r3, [r3, #12]
 8020586:	b29b      	uxth	r3, r3
 8020588:	4618      	mov	r0, r3
 802058a:	f7f8 fe49 	bl	8019220 <lwip_htons>
 802058e:	4603      	mov	r3, r0
 8020590:	b2db      	uxtb	r3, r3
 8020592:	f003 0304 	and.w	r3, r3, #4
 8020596:	2b00      	cmp	r3, #0
 8020598:	d006      	beq.n	80205a8 <tcp_output+0x188>
 802059a:	4b2f      	ldr	r3, [pc, #188]	@ (8020658 <tcp_output+0x238>)
 802059c:	f240 5236 	movw	r2, #1334	@ 0x536
 80205a0:	4932      	ldr	r1, [pc, #200]	@ (802066c <tcp_output+0x24c>)
 80205a2:	482f      	ldr	r0, [pc, #188]	@ (8020660 <tcp_output+0x240>)
 80205a4:	f002 f9c8 	bl	8022938 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d01f      	beq.n	80205f0 <tcp_output+0x1d0>
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	8b5b      	ldrh	r3, [r3, #26]
 80205b4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	d119      	bne.n	80205f0 <tcp_output+0x1d0>
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d00b      	beq.n	80205dc <tcp_output+0x1bc>
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	2b00      	cmp	r3, #0
 80205cc:	d110      	bne.n	80205f0 <tcp_output+0x1d0>
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205d2:	891a      	ldrh	r2, [r3, #8]
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80205d8:	429a      	cmp	r2, r3
 80205da:	d209      	bcs.n	80205f0 <tcp_output+0x1d0>
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d004      	beq.n	80205f0 <tcp_output+0x1d0>
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80205ec:	2b0f      	cmp	r3, #15
 80205ee:	d901      	bls.n	80205f4 <tcp_output+0x1d4>
 80205f0:	2301      	movs	r3, #1
 80205f2:	e000      	b.n	80205f6 <tcp_output+0x1d6>
 80205f4:	2300      	movs	r3, #0
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d106      	bne.n	8020608 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	8b5b      	ldrh	r3, [r3, #26]
 80205fe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020602:	2b00      	cmp	r3, #0
 8020604:	f000 80e4 	beq.w	80207d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	7d1b      	ldrb	r3, [r3, #20]
 802060c:	2b02      	cmp	r3, #2
 802060e:	d00d      	beq.n	802062c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8020610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020612:	68db      	ldr	r3, [r3, #12]
 8020614:	899b      	ldrh	r3, [r3, #12]
 8020616:	b29c      	uxth	r4, r3
 8020618:	2010      	movs	r0, #16
 802061a:	f7f8 fe01 	bl	8019220 <lwip_htons>
 802061e:	4603      	mov	r3, r0
 8020620:	461a      	mov	r2, r3
 8020622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020624:	68db      	ldr	r3, [r3, #12]
 8020626:	4322      	orrs	r2, r4
 8020628:	b292      	uxth	r2, r2
 802062a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 802062c:	697a      	ldr	r2, [r7, #20]
 802062e:	6879      	ldr	r1, [r7, #4]
 8020630:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020632:	f000 f909 	bl	8020848 <tcp_output_segment>
 8020636:	4603      	mov	r3, r0
 8020638:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 802063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802063e:	2b00      	cmp	r3, #0
 8020640:	d016      	beq.n	8020670 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	8b5b      	ldrh	r3, [r3, #26]
 8020646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802064a:	b29a      	uxth	r2, r3
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	835a      	strh	r2, [r3, #26]
      return err;
 8020650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020654:	e0d3      	b.n	80207fe <tcp_output+0x3de>
 8020656:	bf00      	nop
 8020658:	08027740 	.word	0x08027740
 802065c:	08027cc8 	.word	0x08027cc8
 8020660:	080277d8 	.word	0x080277d8
 8020664:	08027ce0 	.word	0x08027ce0
 8020668:	20010064 	.word	0x20010064
 802066c:	08027d08 	.word	0x08027d08
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8020670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020672:	681a      	ldr	r2, [r3, #0]
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	7d1b      	ldrb	r3, [r3, #20]
 802067c:	2b02      	cmp	r3, #2
 802067e:	d006      	beq.n	802068e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	8b5b      	ldrh	r3, [r3, #26]
 8020684:	f023 0303 	bic.w	r3, r3, #3
 8020688:	b29a      	uxth	r2, r3
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802068e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020690:	68db      	ldr	r3, [r3, #12]
 8020692:	685b      	ldr	r3, [r3, #4]
 8020694:	4618      	mov	r0, r3
 8020696:	f7f8 fdd8 	bl	801924a <lwip_htonl>
 802069a:	4604      	mov	r4, r0
 802069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802069e:	891b      	ldrh	r3, [r3, #8]
 80206a0:	461d      	mov	r5, r3
 80206a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206a4:	68db      	ldr	r3, [r3, #12]
 80206a6:	899b      	ldrh	r3, [r3, #12]
 80206a8:	b29b      	uxth	r3, r3
 80206aa:	4618      	mov	r0, r3
 80206ac:	f7f8 fdb8 	bl	8019220 <lwip_htons>
 80206b0:	4603      	mov	r3, r0
 80206b2:	b2db      	uxtb	r3, r3
 80206b4:	f003 0303 	and.w	r3, r3, #3
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d001      	beq.n	80206c0 <tcp_output+0x2a0>
 80206bc:	2301      	movs	r3, #1
 80206be:	e000      	b.n	80206c2 <tcp_output+0x2a2>
 80206c0:	2300      	movs	r3, #0
 80206c2:	442b      	add	r3, r5
 80206c4:	4423      	add	r3, r4
 80206c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80206cc:	68bb      	ldr	r3, [r7, #8]
 80206ce:	1ad3      	subs	r3, r2, r3
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	da02      	bge.n	80206da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	68ba      	ldr	r2, [r7, #8]
 80206d8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80206da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206dc:	891b      	ldrh	r3, [r3, #8]
 80206de:	461c      	mov	r4, r3
 80206e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206e2:	68db      	ldr	r3, [r3, #12]
 80206e4:	899b      	ldrh	r3, [r3, #12]
 80206e6:	b29b      	uxth	r3, r3
 80206e8:	4618      	mov	r0, r3
 80206ea:	f7f8 fd99 	bl	8019220 <lwip_htons>
 80206ee:	4603      	mov	r3, r0
 80206f0:	b2db      	uxtb	r3, r3
 80206f2:	f003 0303 	and.w	r3, r3, #3
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d001      	beq.n	80206fe <tcp_output+0x2de>
 80206fa:	2301      	movs	r3, #1
 80206fc:	e000      	b.n	8020700 <tcp_output+0x2e0>
 80206fe:	2300      	movs	r3, #0
 8020700:	4423      	add	r3, r4
 8020702:	2b00      	cmp	r3, #0
 8020704:	d049      	beq.n	802079a <tcp_output+0x37a>
      seg->next = NULL;
 8020706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020708:	2200      	movs	r2, #0
 802070a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020710:	2b00      	cmp	r3, #0
 8020712:	d105      	bne.n	8020720 <tcp_output+0x300>
        pcb->unacked = seg;
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020718:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 802071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802071c:	623b      	str	r3, [r7, #32]
 802071e:	e03f      	b.n	80207a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020722:	68db      	ldr	r3, [r3, #12]
 8020724:	685b      	ldr	r3, [r3, #4]
 8020726:	4618      	mov	r0, r3
 8020728:	f7f8 fd8f 	bl	801924a <lwip_htonl>
 802072c:	4604      	mov	r4, r0
 802072e:	6a3b      	ldr	r3, [r7, #32]
 8020730:	68db      	ldr	r3, [r3, #12]
 8020732:	685b      	ldr	r3, [r3, #4]
 8020734:	4618      	mov	r0, r3
 8020736:	f7f8 fd88 	bl	801924a <lwip_htonl>
 802073a:	4603      	mov	r3, r0
 802073c:	1ae3      	subs	r3, r4, r3
 802073e:	2b00      	cmp	r3, #0
 8020740:	da24      	bge.n	802078c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	3370      	adds	r3, #112	@ 0x70
 8020746:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020748:	e002      	b.n	8020750 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 802074a:	69fb      	ldr	r3, [r7, #28]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020750:	69fb      	ldr	r3, [r7, #28]
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	2b00      	cmp	r3, #0
 8020756:	d011      	beq.n	802077c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020758:	69fb      	ldr	r3, [r7, #28]
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	68db      	ldr	r3, [r3, #12]
 802075e:	685b      	ldr	r3, [r3, #4]
 8020760:	4618      	mov	r0, r3
 8020762:	f7f8 fd72 	bl	801924a <lwip_htonl>
 8020766:	4604      	mov	r4, r0
 8020768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802076a:	68db      	ldr	r3, [r3, #12]
 802076c:	685b      	ldr	r3, [r3, #4]
 802076e:	4618      	mov	r0, r3
 8020770:	f7f8 fd6b 	bl	801924a <lwip_htonl>
 8020774:	4603      	mov	r3, r0
 8020776:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8020778:	2b00      	cmp	r3, #0
 802077a:	dbe6      	blt.n	802074a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 802077c:	69fb      	ldr	r3, [r7, #28]
 802077e:	681a      	ldr	r2, [r3, #0]
 8020780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020782:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8020784:	69fb      	ldr	r3, [r7, #28]
 8020786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020788:	601a      	str	r2, [r3, #0]
 802078a:	e009      	b.n	80207a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 802078c:	6a3b      	ldr	r3, [r7, #32]
 802078e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020790:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8020792:	6a3b      	ldr	r3, [r7, #32]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	623b      	str	r3, [r7, #32]
 8020798:	e002      	b.n	80207a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802079a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802079c:	f7fb ff1d 	bl	801c5da <tcp_seg_free>
    }
    seg = pcb->unsent;
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80207a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80207a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d012      	beq.n	80207d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80207ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207ae:	68db      	ldr	r3, [r3, #12]
 80207b0:	685b      	ldr	r3, [r3, #4]
 80207b2:	4618      	mov	r0, r3
 80207b4:	f7f8 fd49 	bl	801924a <lwip_htonl>
 80207b8:	4602      	mov	r2, r0
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80207be:	1ad3      	subs	r3, r2, r3
 80207c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80207c2:	8912      	ldrh	r2, [r2, #8]
 80207c4:	4413      	add	r3, r2
  while (seg != NULL &&
 80207c6:	69ba      	ldr	r2, [r7, #24]
 80207c8:	429a      	cmp	r2, r3
 80207ca:	f4bf aed9 	bcs.w	8020580 <tcp_output+0x160>
 80207ce:	e000      	b.n	80207d2 <tcp_output+0x3b2>
      break;
 80207d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d108      	bne.n	80207ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	2200      	movs	r2, #0
 80207de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80207e2:	e004      	b.n	80207ee <tcp_output+0x3ce>
    goto output_done;
 80207e4:	bf00      	nop
 80207e6:	e002      	b.n	80207ee <tcp_output+0x3ce>
    goto output_done;
 80207e8:	bf00      	nop
 80207ea:	e000      	b.n	80207ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80207ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	8b5b      	ldrh	r3, [r3, #26]
 80207f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80207f6:	b29a      	uxth	r2, r3
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80207fc:	2300      	movs	r3, #0
}
 80207fe:	4618      	mov	r0, r3
 8020800:	3728      	adds	r7, #40	@ 0x28
 8020802:	46bd      	mov	sp, r7
 8020804:	bdb0      	pop	{r4, r5, r7, pc}
 8020806:	bf00      	nop

08020808 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8020808:	b580      	push	{r7, lr}
 802080a:	b082      	sub	sp, #8
 802080c:	af00      	add	r7, sp, #0
 802080e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d106      	bne.n	8020824 <tcp_output_segment_busy+0x1c>
 8020816:	4b09      	ldr	r3, [pc, #36]	@ (802083c <tcp_output_segment_busy+0x34>)
 8020818:	f240 529a 	movw	r2, #1434	@ 0x59a
 802081c:	4908      	ldr	r1, [pc, #32]	@ (8020840 <tcp_output_segment_busy+0x38>)
 802081e:	4809      	ldr	r0, [pc, #36]	@ (8020844 <tcp_output_segment_busy+0x3c>)
 8020820:	f002 f88a 	bl	8022938 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	685b      	ldr	r3, [r3, #4]
 8020828:	7b9b      	ldrb	r3, [r3, #14]
 802082a:	2b01      	cmp	r3, #1
 802082c:	d001      	beq.n	8020832 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 802082e:	2301      	movs	r3, #1
 8020830:	e000      	b.n	8020834 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8020832:	2300      	movs	r3, #0
}
 8020834:	4618      	mov	r0, r3
 8020836:	3708      	adds	r7, #8
 8020838:	46bd      	mov	sp, r7
 802083a:	bd80      	pop	{r7, pc}
 802083c:	08027740 	.word	0x08027740
 8020840:	08027d20 	.word	0x08027d20
 8020844:	080277d8 	.word	0x080277d8

08020848 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8020848:	b5b0      	push	{r4, r5, r7, lr}
 802084a:	b08c      	sub	sp, #48	@ 0x30
 802084c:	af04      	add	r7, sp, #16
 802084e:	60f8      	str	r0, [r7, #12]
 8020850:	60b9      	str	r1, [r7, #8]
 8020852:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	2b00      	cmp	r3, #0
 8020858:	d106      	bne.n	8020868 <tcp_output_segment+0x20>
 802085a:	4b64      	ldr	r3, [pc, #400]	@ (80209ec <tcp_output_segment+0x1a4>)
 802085c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8020860:	4963      	ldr	r1, [pc, #396]	@ (80209f0 <tcp_output_segment+0x1a8>)
 8020862:	4864      	ldr	r0, [pc, #400]	@ (80209f4 <tcp_output_segment+0x1ac>)
 8020864:	f002 f868 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8020868:	68bb      	ldr	r3, [r7, #8]
 802086a:	2b00      	cmp	r3, #0
 802086c:	d106      	bne.n	802087c <tcp_output_segment+0x34>
 802086e:	4b5f      	ldr	r3, [pc, #380]	@ (80209ec <tcp_output_segment+0x1a4>)
 8020870:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8020874:	4960      	ldr	r1, [pc, #384]	@ (80209f8 <tcp_output_segment+0x1b0>)
 8020876:	485f      	ldr	r0, [pc, #380]	@ (80209f4 <tcp_output_segment+0x1ac>)
 8020878:	f002 f85e 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d106      	bne.n	8020890 <tcp_output_segment+0x48>
 8020882:	4b5a      	ldr	r3, [pc, #360]	@ (80209ec <tcp_output_segment+0x1a4>)
 8020884:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8020888:	495c      	ldr	r1, [pc, #368]	@ (80209fc <tcp_output_segment+0x1b4>)
 802088a:	485a      	ldr	r0, [pc, #360]	@ (80209f4 <tcp_output_segment+0x1ac>)
 802088c:	f002 f854 	bl	8022938 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020890:	68f8      	ldr	r0, [r7, #12]
 8020892:	f7ff ffb9 	bl	8020808 <tcp_output_segment_busy>
 8020896:	4603      	mov	r3, r0
 8020898:	2b00      	cmp	r3, #0
 802089a:	d001      	beq.n	80208a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 802089c:	2300      	movs	r3, #0
 802089e:	e0a1      	b.n	80209e4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80208a0:	68bb      	ldr	r3, [r7, #8]
 80208a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80208a4:	68fb      	ldr	r3, [r7, #12]
 80208a6:	68dc      	ldr	r4, [r3, #12]
 80208a8:	4610      	mov	r0, r2
 80208aa:	f7f8 fcce 	bl	801924a <lwip_htonl>
 80208ae:	4603      	mov	r3, r0
 80208b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80208b2:	68bb      	ldr	r3, [r7, #8]
 80208b4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80208b6:	68fb      	ldr	r3, [r7, #12]
 80208b8:	68dc      	ldr	r4, [r3, #12]
 80208ba:	4610      	mov	r0, r2
 80208bc:	f7f8 fcb0 	bl	8019220 <lwip_htons>
 80208c0:	4603      	mov	r3, r0
 80208c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80208c4:	68bb      	ldr	r3, [r7, #8]
 80208c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80208c8:	68ba      	ldr	r2, [r7, #8]
 80208ca:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80208cc:	441a      	add	r2, r3
 80208ce:	68bb      	ldr	r3, [r7, #8]
 80208d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	68db      	ldr	r3, [r3, #12]
 80208d6:	3314      	adds	r3, #20
 80208d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80208da:	68fb      	ldr	r3, [r7, #12]
 80208dc:	7a9b      	ldrb	r3, [r3, #10]
 80208de:	f003 0301 	and.w	r3, r3, #1
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	d015      	beq.n	8020912 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80208e6:	68bb      	ldr	r3, [r7, #8]
 80208e8:	3304      	adds	r3, #4
 80208ea:	461a      	mov	r2, r3
 80208ec:	6879      	ldr	r1, [r7, #4]
 80208ee:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80208f2:	f7fc fa37 	bl	801cd64 <tcp_eff_send_mss_netif>
 80208f6:	4603      	mov	r3, r0
 80208f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80208fa:	8b7b      	ldrh	r3, [r7, #26]
 80208fc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8020900:	4618      	mov	r0, r3
 8020902:	f7f8 fca2 	bl	801924a <lwip_htonl>
 8020906:	4602      	mov	r2, r0
 8020908:	69fb      	ldr	r3, [r7, #28]
 802090a:	601a      	str	r2, [r3, #0]
    opts += 1;
 802090c:	69fb      	ldr	r3, [r7, #28]
 802090e:	3304      	adds	r3, #4
 8020910:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8020912:	68bb      	ldr	r3, [r7, #8]
 8020914:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8020918:	2b00      	cmp	r3, #0
 802091a:	da02      	bge.n	8020922 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 802091c:	68bb      	ldr	r3, [r7, #8]
 802091e:	2200      	movs	r2, #0
 8020920:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8020922:	68bb      	ldr	r3, [r7, #8]
 8020924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020926:	2b00      	cmp	r3, #0
 8020928:	d10c      	bne.n	8020944 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 802092a:	4b35      	ldr	r3, [pc, #212]	@ (8020a00 <tcp_output_segment+0x1b8>)
 802092c:	681a      	ldr	r2, [r3, #0]
 802092e:	68bb      	ldr	r3, [r7, #8]
 8020930:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	68db      	ldr	r3, [r3, #12]
 8020936:	685b      	ldr	r3, [r3, #4]
 8020938:	4618      	mov	r0, r3
 802093a:	f7f8 fc86 	bl	801924a <lwip_htonl>
 802093e:	4602      	mov	r2, r0
 8020940:	68bb      	ldr	r3, [r7, #8]
 8020942:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	68da      	ldr	r2, [r3, #12]
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	685b      	ldr	r3, [r3, #4]
 802094c:	685b      	ldr	r3, [r3, #4]
 802094e:	1ad3      	subs	r3, r2, r3
 8020950:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	685b      	ldr	r3, [r3, #4]
 8020956:	8959      	ldrh	r1, [r3, #10]
 8020958:	68fb      	ldr	r3, [r7, #12]
 802095a:	685b      	ldr	r3, [r3, #4]
 802095c:	8b3a      	ldrh	r2, [r7, #24]
 802095e:	1a8a      	subs	r2, r1, r2
 8020960:	b292      	uxth	r2, r2
 8020962:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	685b      	ldr	r3, [r3, #4]
 8020968:	8919      	ldrh	r1, [r3, #8]
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	685b      	ldr	r3, [r3, #4]
 802096e:	8b3a      	ldrh	r2, [r7, #24]
 8020970:	1a8a      	subs	r2, r1, r2
 8020972:	b292      	uxth	r2, r2
 8020974:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8020976:	68fb      	ldr	r3, [r7, #12]
 8020978:	685b      	ldr	r3, [r3, #4]
 802097a:	68fa      	ldr	r2, [r7, #12]
 802097c:	68d2      	ldr	r2, [r2, #12]
 802097e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	68db      	ldr	r3, [r3, #12]
 8020984:	2200      	movs	r2, #0
 8020986:	741a      	strb	r2, [r3, #16]
 8020988:	2200      	movs	r2, #0
 802098a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	68da      	ldr	r2, [r3, #12]
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	7a9b      	ldrb	r3, [r3, #10]
 8020994:	f003 0301 	and.w	r3, r3, #1
 8020998:	2b00      	cmp	r3, #0
 802099a:	d001      	beq.n	80209a0 <tcp_output_segment+0x158>
 802099c:	2318      	movs	r3, #24
 802099e:	e000      	b.n	80209a2 <tcp_output_segment+0x15a>
 80209a0:	2314      	movs	r3, #20
 80209a2:	4413      	add	r3, r2
 80209a4:	69fa      	ldr	r2, [r7, #28]
 80209a6:	429a      	cmp	r2, r3
 80209a8:	d006      	beq.n	80209b8 <tcp_output_segment+0x170>
 80209aa:	4b10      	ldr	r3, [pc, #64]	@ (80209ec <tcp_output_segment+0x1a4>)
 80209ac:	f240 621c 	movw	r2, #1564	@ 0x61c
 80209b0:	4914      	ldr	r1, [pc, #80]	@ (8020a04 <tcp_output_segment+0x1bc>)
 80209b2:	4810      	ldr	r0, [pc, #64]	@ (80209f4 <tcp_output_segment+0x1ac>)
 80209b4:	f001 ffc0 	bl	8022938 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	6858      	ldr	r0, [r3, #4]
 80209bc:	68b9      	ldr	r1, [r7, #8]
 80209be:	68bb      	ldr	r3, [r7, #8]
 80209c0:	1d1c      	adds	r4, r3, #4
 80209c2:	68bb      	ldr	r3, [r7, #8]
 80209c4:	7add      	ldrb	r5, [r3, #11]
 80209c6:	68bb      	ldr	r3, [r7, #8]
 80209c8:	7a9b      	ldrb	r3, [r3, #10]
 80209ca:	687a      	ldr	r2, [r7, #4]
 80209cc:	9202      	str	r2, [sp, #8]
 80209ce:	2206      	movs	r2, #6
 80209d0:	9201      	str	r2, [sp, #4]
 80209d2:	9300      	str	r3, [sp, #0]
 80209d4:	462b      	mov	r3, r5
 80209d6:	4622      	mov	r2, r4
 80209d8:	f7f7 fb2a 	bl	8018030 <ip4_output_if>
 80209dc:	4603      	mov	r3, r0
 80209de:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80209e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80209e4:	4618      	mov	r0, r3
 80209e6:	3720      	adds	r7, #32
 80209e8:	46bd      	mov	sp, r7
 80209ea:	bdb0      	pop	{r4, r5, r7, pc}
 80209ec:	08027740 	.word	0x08027740
 80209f0:	08027d48 	.word	0x08027d48
 80209f4:	080277d8 	.word	0x080277d8
 80209f8:	08027d68 	.word	0x08027d68
 80209fc:	08027d88 	.word	0x08027d88
 8020a00:	20010018 	.word	0x20010018
 8020a04:	08027dac 	.word	0x08027dac

08020a08 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8020a08:	b5b0      	push	{r4, r5, r7, lr}
 8020a0a:	b084      	sub	sp, #16
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d106      	bne.n	8020a24 <tcp_rexmit_rto_prepare+0x1c>
 8020a16:	4b31      	ldr	r3, [pc, #196]	@ (8020adc <tcp_rexmit_rto_prepare+0xd4>)
 8020a18:	f240 6263 	movw	r2, #1635	@ 0x663
 8020a1c:	4930      	ldr	r1, [pc, #192]	@ (8020ae0 <tcp_rexmit_rto_prepare+0xd8>)
 8020a1e:	4831      	ldr	r0, [pc, #196]	@ (8020ae4 <tcp_rexmit_rto_prepare+0xdc>)
 8020a20:	f001 ff8a 	bl	8022938 <iprintf>

  if (pcb->unacked == NULL) {
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d102      	bne.n	8020a32 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8020a2c:	f06f 0305 	mvn.w	r3, #5
 8020a30:	e050      	b.n	8020ad4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020a36:	60fb      	str	r3, [r7, #12]
 8020a38:	e00b      	b.n	8020a52 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8020a3a:	68f8      	ldr	r0, [r7, #12]
 8020a3c:	f7ff fee4 	bl	8020808 <tcp_output_segment_busy>
 8020a40:	4603      	mov	r3, r0
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d002      	beq.n	8020a4c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8020a46:	f06f 0305 	mvn.w	r3, #5
 8020a4a:	e043      	b.n	8020ad4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020a4c:	68fb      	ldr	r3, [r7, #12]
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	60fb      	str	r3, [r7, #12]
 8020a52:	68fb      	ldr	r3, [r7, #12]
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d1ef      	bne.n	8020a3a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8020a5a:	68f8      	ldr	r0, [r7, #12]
 8020a5c:	f7ff fed4 	bl	8020808 <tcp_output_segment_busy>
 8020a60:	4603      	mov	r3, r0
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d002      	beq.n	8020a6c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8020a66:	f06f 0305 	mvn.w	r3, #5
 8020a6a:	e033      	b.n	8020ad4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020a78:	687b      	ldr	r3, [r7, #4]
 8020a7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	2200      	movs	r2, #0
 8020a80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	8b5b      	ldrh	r3, [r3, #26]
 8020a86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8020a8a:	b29a      	uxth	r2, r3
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	68db      	ldr	r3, [r3, #12]
 8020a94:	685b      	ldr	r3, [r3, #4]
 8020a96:	4618      	mov	r0, r3
 8020a98:	f7f8 fbd7 	bl	801924a <lwip_htonl>
 8020a9c:	4604      	mov	r4, r0
 8020a9e:	68fb      	ldr	r3, [r7, #12]
 8020aa0:	891b      	ldrh	r3, [r3, #8]
 8020aa2:	461d      	mov	r5, r3
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	68db      	ldr	r3, [r3, #12]
 8020aa8:	899b      	ldrh	r3, [r3, #12]
 8020aaa:	b29b      	uxth	r3, r3
 8020aac:	4618      	mov	r0, r3
 8020aae:	f7f8 fbb7 	bl	8019220 <lwip_htons>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	b2db      	uxtb	r3, r3
 8020ab6:	f003 0303 	and.w	r3, r3, #3
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d001      	beq.n	8020ac2 <tcp_rexmit_rto_prepare+0xba>
 8020abe:	2301      	movs	r3, #1
 8020ac0:	e000      	b.n	8020ac4 <tcp_rexmit_rto_prepare+0xbc>
 8020ac2:	2300      	movs	r3, #0
 8020ac4:	442b      	add	r3, r5
 8020ac6:	18e2      	adds	r2, r4, r3
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	2200      	movs	r2, #0
 8020ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8020ad2:	2300      	movs	r3, #0
}
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	3710      	adds	r7, #16
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bdb0      	pop	{r4, r5, r7, pc}
 8020adc:	08027740 	.word	0x08027740
 8020ae0:	08027dc0 	.word	0x08027dc0
 8020ae4:	080277d8 	.word	0x080277d8

08020ae8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b082      	sub	sp, #8
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d106      	bne.n	8020b04 <tcp_rexmit_rto_commit+0x1c>
 8020af6:	4b0d      	ldr	r3, [pc, #52]	@ (8020b2c <tcp_rexmit_rto_commit+0x44>)
 8020af8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8020afc:	490c      	ldr	r1, [pc, #48]	@ (8020b30 <tcp_rexmit_rto_commit+0x48>)
 8020afe:	480d      	ldr	r0, [pc, #52]	@ (8020b34 <tcp_rexmit_rto_commit+0x4c>)
 8020b00:	f001 ff1a 	bl	8022938 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020b0a:	2bff      	cmp	r3, #255	@ 0xff
 8020b0c:	d007      	beq.n	8020b1e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020b14:	3301      	adds	r3, #1
 8020b16:	b2da      	uxtb	r2, r3
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8020b1e:	6878      	ldr	r0, [r7, #4]
 8020b20:	f7ff fc7e 	bl	8020420 <tcp_output>
}
 8020b24:	bf00      	nop
 8020b26:	3708      	adds	r7, #8
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	bd80      	pop	{r7, pc}
 8020b2c:	08027740 	.word	0x08027740
 8020b30:	08027de4 	.word	0x08027de4
 8020b34:	080277d8 	.word	0x080277d8

08020b38 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b082      	sub	sp, #8
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d106      	bne.n	8020b54 <tcp_rexmit_rto+0x1c>
 8020b46:	4b0a      	ldr	r3, [pc, #40]	@ (8020b70 <tcp_rexmit_rto+0x38>)
 8020b48:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8020b4c:	4909      	ldr	r1, [pc, #36]	@ (8020b74 <tcp_rexmit_rto+0x3c>)
 8020b4e:	480a      	ldr	r0, [pc, #40]	@ (8020b78 <tcp_rexmit_rto+0x40>)
 8020b50:	f001 fef2 	bl	8022938 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020b54:	6878      	ldr	r0, [r7, #4]
 8020b56:	f7ff ff57 	bl	8020a08 <tcp_rexmit_rto_prepare>
 8020b5a:	4603      	mov	r3, r0
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d102      	bne.n	8020b66 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8020b60:	6878      	ldr	r0, [r7, #4]
 8020b62:	f7ff ffc1 	bl	8020ae8 <tcp_rexmit_rto_commit>
  }
}
 8020b66:	bf00      	nop
 8020b68:	3708      	adds	r7, #8
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	bd80      	pop	{r7, pc}
 8020b6e:	bf00      	nop
 8020b70:	08027740 	.word	0x08027740
 8020b74:	08027e08 	.word	0x08027e08
 8020b78:	080277d8 	.word	0x080277d8

08020b7c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8020b7c:	b590      	push	{r4, r7, lr}
 8020b7e:	b085      	sub	sp, #20
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d106      	bne.n	8020b98 <tcp_rexmit+0x1c>
 8020b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8020c48 <tcp_rexmit+0xcc>)
 8020b8c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8020b90:	492e      	ldr	r1, [pc, #184]	@ (8020c4c <tcp_rexmit+0xd0>)
 8020b92:	482f      	ldr	r0, [pc, #188]	@ (8020c50 <tcp_rexmit+0xd4>)
 8020b94:	f001 fed0 	bl	8022938 <iprintf>

  if (pcb->unacked == NULL) {
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d102      	bne.n	8020ba6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020ba0:	f06f 0305 	mvn.w	r3, #5
 8020ba4:	e04c      	b.n	8020c40 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020baa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8020bac:	68b8      	ldr	r0, [r7, #8]
 8020bae:	f7ff fe2b 	bl	8020808 <tcp_output_segment_busy>
 8020bb2:	4603      	mov	r3, r0
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d002      	beq.n	8020bbe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020bb8:	f06f 0305 	mvn.w	r3, #5
 8020bbc:	e040      	b.n	8020c40 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8020bbe:	68bb      	ldr	r3, [r7, #8]
 8020bc0:	681a      	ldr	r2, [r3, #0]
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	336c      	adds	r3, #108	@ 0x6c
 8020bca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020bcc:	e002      	b.n	8020bd4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8020bce:	68fb      	ldr	r3, [r7, #12]
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d011      	beq.n	8020c00 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	68db      	ldr	r3, [r3, #12]
 8020be2:	685b      	ldr	r3, [r3, #4]
 8020be4:	4618      	mov	r0, r3
 8020be6:	f7f8 fb30 	bl	801924a <lwip_htonl>
 8020bea:	4604      	mov	r4, r0
 8020bec:	68bb      	ldr	r3, [r7, #8]
 8020bee:	68db      	ldr	r3, [r3, #12]
 8020bf0:	685b      	ldr	r3, [r3, #4]
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	f7f8 fb29 	bl	801924a <lwip_htonl>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	dbe6      	blt.n	8020bce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020c00:	68fb      	ldr	r3, [r7, #12]
 8020c02:	681a      	ldr	r2, [r3, #0]
 8020c04:	68bb      	ldr	r3, [r7, #8]
 8020c06:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	68ba      	ldr	r2, [r7, #8]
 8020c0c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8020c0e:	68bb      	ldr	r3, [r7, #8]
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d103      	bne.n	8020c1e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	2200      	movs	r2, #0
 8020c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020c24:	2bff      	cmp	r3, #255	@ 0xff
 8020c26:	d007      	beq.n	8020c38 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020c2e:	3301      	adds	r3, #1
 8020c30:	b2da      	uxtb	r2, r3
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	2200      	movs	r2, #0
 8020c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8020c3e:	2300      	movs	r3, #0
}
 8020c40:	4618      	mov	r0, r3
 8020c42:	3714      	adds	r7, #20
 8020c44:	46bd      	mov	sp, r7
 8020c46:	bd90      	pop	{r4, r7, pc}
 8020c48:	08027740 	.word	0x08027740
 8020c4c:	08027e24 	.word	0x08027e24
 8020c50:	080277d8 	.word	0x080277d8

08020c54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8020c54:	b580      	push	{r7, lr}
 8020c56:	b082      	sub	sp, #8
 8020c58:	af00      	add	r7, sp, #0
 8020c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d106      	bne.n	8020c70 <tcp_rexmit_fast+0x1c>
 8020c62:	4b2a      	ldr	r3, [pc, #168]	@ (8020d0c <tcp_rexmit_fast+0xb8>)
 8020c64:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8020c68:	4929      	ldr	r1, [pc, #164]	@ (8020d10 <tcp_rexmit_fast+0xbc>)
 8020c6a:	482a      	ldr	r0, [pc, #168]	@ (8020d14 <tcp_rexmit_fast+0xc0>)
 8020c6c:	f001 fe64 	bl	8022938 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	d045      	beq.n	8020d04 <tcp_rexmit_fast+0xb0>
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	8b5b      	ldrh	r3, [r3, #26]
 8020c7c:	f003 0304 	and.w	r3, r3, #4
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d13f      	bne.n	8020d04 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020c84:	6878      	ldr	r0, [r7, #4]
 8020c86:	f7ff ff79 	bl	8020b7c <tcp_rexmit>
 8020c8a:	4603      	mov	r3, r0
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d139      	bne.n	8020d04 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8020c9c:	4293      	cmp	r3, r2
 8020c9e:	bf28      	it	cs
 8020ca0:	4613      	movcs	r3, r2
 8020ca2:	b29b      	uxth	r3, r3
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	da00      	bge.n	8020caa <tcp_rexmit_fast+0x56>
 8020ca8:	3301      	adds	r3, #1
 8020caa:	105b      	asrs	r3, r3, #1
 8020cac:	b29a      	uxth	r2, r3
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8020cba:	461a      	mov	r2, r3
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020cc0:	005b      	lsls	r3, r3, #1
 8020cc2:	429a      	cmp	r2, r3
 8020cc4:	d206      	bcs.n	8020cd4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020cca:	005b      	lsls	r3, r3, #1
 8020ccc:	b29a      	uxth	r2, r3
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020cde:	4619      	mov	r1, r3
 8020ce0:	0049      	lsls	r1, r1, #1
 8020ce2:	440b      	add	r3, r1
 8020ce4:	b29b      	uxth	r3, r3
 8020ce6:	4413      	add	r3, r2
 8020ce8:	b29a      	uxth	r2, r3
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	8b5b      	ldrh	r3, [r3, #26]
 8020cf4:	f043 0304 	orr.w	r3, r3, #4
 8020cf8:	b29a      	uxth	r2, r3
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2200      	movs	r2, #0
 8020d02:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8020d04:	bf00      	nop
 8020d06:	3708      	adds	r7, #8
 8020d08:	46bd      	mov	sp, r7
 8020d0a:	bd80      	pop	{r7, pc}
 8020d0c:	08027740 	.word	0x08027740
 8020d10:	08027e3c 	.word	0x08027e3c
 8020d14:	080277d8 	.word	0x080277d8

08020d18 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8020d18:	b580      	push	{r7, lr}
 8020d1a:	b086      	sub	sp, #24
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	60f8      	str	r0, [r7, #12]
 8020d20:	607b      	str	r3, [r7, #4]
 8020d22:	460b      	mov	r3, r1
 8020d24:	817b      	strh	r3, [r7, #10]
 8020d26:	4613      	mov	r3, r2
 8020d28:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020d2a:	897a      	ldrh	r2, [r7, #10]
 8020d2c:	893b      	ldrh	r3, [r7, #8]
 8020d2e:	4413      	add	r3, r2
 8020d30:	b29b      	uxth	r3, r3
 8020d32:	3314      	adds	r3, #20
 8020d34:	b29b      	uxth	r3, r3
 8020d36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020d3a:	4619      	mov	r1, r3
 8020d3c:	2022      	movs	r0, #34	@ 0x22
 8020d3e:	f7f9 fc0b 	bl	801a558 <pbuf_alloc>
 8020d42:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	d04d      	beq.n	8020de6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020d4a:	897b      	ldrh	r3, [r7, #10]
 8020d4c:	3313      	adds	r3, #19
 8020d4e:	697a      	ldr	r2, [r7, #20]
 8020d50:	8952      	ldrh	r2, [r2, #10]
 8020d52:	4293      	cmp	r3, r2
 8020d54:	db06      	blt.n	8020d64 <tcp_output_alloc_header_common+0x4c>
 8020d56:	4b26      	ldr	r3, [pc, #152]	@ (8020df0 <tcp_output_alloc_header_common+0xd8>)
 8020d58:	f240 7223 	movw	r2, #1827	@ 0x723
 8020d5c:	4925      	ldr	r1, [pc, #148]	@ (8020df4 <tcp_output_alloc_header_common+0xdc>)
 8020d5e:	4826      	ldr	r0, [pc, #152]	@ (8020df8 <tcp_output_alloc_header_common+0xe0>)
 8020d60:	f001 fdea 	bl	8022938 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020d64:	697b      	ldr	r3, [r7, #20]
 8020d66:	685b      	ldr	r3, [r3, #4]
 8020d68:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8020d6a:	8c3b      	ldrh	r3, [r7, #32]
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7f8 fa57 	bl	8019220 <lwip_htons>
 8020d72:	4603      	mov	r3, r0
 8020d74:	461a      	mov	r2, r3
 8020d76:	693b      	ldr	r3, [r7, #16]
 8020d78:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8020d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	f7f8 fa4f 	bl	8019220 <lwip_htons>
 8020d82:	4603      	mov	r3, r0
 8020d84:	461a      	mov	r2, r3
 8020d86:	693b      	ldr	r3, [r7, #16]
 8020d88:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	687a      	ldr	r2, [r7, #4]
 8020d8e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020d90:	68f8      	ldr	r0, [r7, #12]
 8020d92:	f7f8 fa5a 	bl	801924a <lwip_htonl>
 8020d96:	4602      	mov	r2, r0
 8020d98:	693b      	ldr	r3, [r7, #16]
 8020d9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8020d9c:	897b      	ldrh	r3, [r7, #10]
 8020d9e:	089b      	lsrs	r3, r3, #2
 8020da0:	b29b      	uxth	r3, r3
 8020da2:	3305      	adds	r3, #5
 8020da4:	b29b      	uxth	r3, r3
 8020da6:	031b      	lsls	r3, r3, #12
 8020da8:	b29a      	uxth	r2, r3
 8020daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8020dae:	b29b      	uxth	r3, r3
 8020db0:	4313      	orrs	r3, r2
 8020db2:	b29b      	uxth	r3, r3
 8020db4:	4618      	mov	r0, r3
 8020db6:	f7f8 fa33 	bl	8019220 <lwip_htons>
 8020dba:	4603      	mov	r3, r0
 8020dbc:	461a      	mov	r2, r3
 8020dbe:	693b      	ldr	r3, [r7, #16]
 8020dc0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020dc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	f7f8 fa2b 	bl	8019220 <lwip_htons>
 8020dca:	4603      	mov	r3, r0
 8020dcc:	461a      	mov	r2, r3
 8020dce:	693b      	ldr	r3, [r7, #16]
 8020dd0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020dd2:	693b      	ldr	r3, [r7, #16]
 8020dd4:	2200      	movs	r2, #0
 8020dd6:	741a      	strb	r2, [r3, #16]
 8020dd8:	2200      	movs	r2, #0
 8020dda:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020ddc:	693b      	ldr	r3, [r7, #16]
 8020dde:	2200      	movs	r2, #0
 8020de0:	749a      	strb	r2, [r3, #18]
 8020de2:	2200      	movs	r2, #0
 8020de4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020de6:	697b      	ldr	r3, [r7, #20]
}
 8020de8:	4618      	mov	r0, r3
 8020dea:	3718      	adds	r7, #24
 8020dec:	46bd      	mov	sp, r7
 8020dee:	bd80      	pop	{r7, pc}
 8020df0:	08027740 	.word	0x08027740
 8020df4:	08027e5c 	.word	0x08027e5c
 8020df8:	080277d8 	.word	0x080277d8

08020dfc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8020dfc:	b5b0      	push	{r4, r5, r7, lr}
 8020dfe:	b08a      	sub	sp, #40	@ 0x28
 8020e00:	af04      	add	r7, sp, #16
 8020e02:	60f8      	str	r0, [r7, #12]
 8020e04:	607b      	str	r3, [r7, #4]
 8020e06:	460b      	mov	r3, r1
 8020e08:	817b      	strh	r3, [r7, #10]
 8020e0a:	4613      	mov	r3, r2
 8020e0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8020e0e:	68fb      	ldr	r3, [r7, #12]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d106      	bne.n	8020e22 <tcp_output_alloc_header+0x26>
 8020e14:	4b15      	ldr	r3, [pc, #84]	@ (8020e6c <tcp_output_alloc_header+0x70>)
 8020e16:	f240 7242 	movw	r2, #1858	@ 0x742
 8020e1a:	4915      	ldr	r1, [pc, #84]	@ (8020e70 <tcp_output_alloc_header+0x74>)
 8020e1c:	4815      	ldr	r0, [pc, #84]	@ (8020e74 <tcp_output_alloc_header+0x78>)
 8020e1e:	f001 fd8b 	bl	8022938 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	8adb      	ldrh	r3, [r3, #22]
 8020e2a:	68fa      	ldr	r2, [r7, #12]
 8020e2c:	8b12      	ldrh	r2, [r2, #24]
 8020e2e:	68f9      	ldr	r1, [r7, #12]
 8020e30:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8020e32:	893d      	ldrh	r5, [r7, #8]
 8020e34:	897c      	ldrh	r4, [r7, #10]
 8020e36:	9103      	str	r1, [sp, #12]
 8020e38:	2110      	movs	r1, #16
 8020e3a:	9102      	str	r1, [sp, #8]
 8020e3c:	9201      	str	r2, [sp, #4]
 8020e3e:	9300      	str	r3, [sp, #0]
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	462a      	mov	r2, r5
 8020e44:	4621      	mov	r1, r4
 8020e46:	f7ff ff67 	bl	8020d18 <tcp_output_alloc_header_common>
 8020e4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8020e4c:	697b      	ldr	r3, [r7, #20]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d006      	beq.n	8020e60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020e52:	68fb      	ldr	r3, [r7, #12]
 8020e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020e56:	68fa      	ldr	r2, [r7, #12]
 8020e58:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8020e5a:	441a      	add	r2, r3
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8020e60:	697b      	ldr	r3, [r7, #20]
}
 8020e62:	4618      	mov	r0, r3
 8020e64:	3718      	adds	r7, #24
 8020e66:	46bd      	mov	sp, r7
 8020e68:	bdb0      	pop	{r4, r5, r7, pc}
 8020e6a:	bf00      	nop
 8020e6c:	08027740 	.word	0x08027740
 8020e70:	08027e8c 	.word	0x08027e8c
 8020e74:	080277d8 	.word	0x080277d8

08020e78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020e78:	b580      	push	{r7, lr}
 8020e7a:	b088      	sub	sp, #32
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	60f8      	str	r0, [r7, #12]
 8020e80:	60b9      	str	r1, [r7, #8]
 8020e82:	4611      	mov	r1, r2
 8020e84:	461a      	mov	r2, r3
 8020e86:	460b      	mov	r3, r1
 8020e88:	71fb      	strb	r3, [r7, #7]
 8020e8a:	4613      	mov	r3, r2
 8020e8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8020e8e:	2300      	movs	r3, #0
 8020e90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020e92:	68bb      	ldr	r3, [r7, #8]
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d106      	bne.n	8020ea6 <tcp_output_fill_options+0x2e>
 8020e98:	4b12      	ldr	r3, [pc, #72]	@ (8020ee4 <tcp_output_fill_options+0x6c>)
 8020e9a:	f240 7256 	movw	r2, #1878	@ 0x756
 8020e9e:	4912      	ldr	r1, [pc, #72]	@ (8020ee8 <tcp_output_fill_options+0x70>)
 8020ea0:	4812      	ldr	r0, [pc, #72]	@ (8020eec <tcp_output_fill_options+0x74>)
 8020ea2:	f001 fd49 	bl	8022938 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020ea6:	68bb      	ldr	r3, [r7, #8]
 8020ea8:	685b      	ldr	r3, [r3, #4]
 8020eaa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8020eac:	69bb      	ldr	r3, [r7, #24]
 8020eae:	3314      	adds	r3, #20
 8020eb0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020eb2:	8bfb      	ldrh	r3, [r7, #30]
 8020eb4:	009b      	lsls	r3, r3, #2
 8020eb6:	461a      	mov	r2, r3
 8020eb8:	79fb      	ldrb	r3, [r7, #7]
 8020eba:	009b      	lsls	r3, r3, #2
 8020ebc:	f003 0304 	and.w	r3, r3, #4
 8020ec0:	4413      	add	r3, r2
 8020ec2:	3314      	adds	r3, #20
 8020ec4:	69ba      	ldr	r2, [r7, #24]
 8020ec6:	4413      	add	r3, r2
 8020ec8:	697a      	ldr	r2, [r7, #20]
 8020eca:	429a      	cmp	r2, r3
 8020ecc:	d006      	beq.n	8020edc <tcp_output_fill_options+0x64>
 8020ece:	4b05      	ldr	r3, [pc, #20]	@ (8020ee4 <tcp_output_fill_options+0x6c>)
 8020ed0:	f240 7275 	movw	r2, #1909	@ 0x775
 8020ed4:	4906      	ldr	r1, [pc, #24]	@ (8020ef0 <tcp_output_fill_options+0x78>)
 8020ed6:	4805      	ldr	r0, [pc, #20]	@ (8020eec <tcp_output_fill_options+0x74>)
 8020ed8:	f001 fd2e 	bl	8022938 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8020edc:	bf00      	nop
 8020ede:	3720      	adds	r7, #32
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	bd80      	pop	{r7, pc}
 8020ee4:	08027740 	.word	0x08027740
 8020ee8:	08027eb4 	.word	0x08027eb4
 8020eec:	080277d8 	.word	0x080277d8
 8020ef0:	08027dac 	.word	0x08027dac

08020ef4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020ef4:	b580      	push	{r7, lr}
 8020ef6:	b08a      	sub	sp, #40	@ 0x28
 8020ef8:	af04      	add	r7, sp, #16
 8020efa:	60f8      	str	r0, [r7, #12]
 8020efc:	60b9      	str	r1, [r7, #8]
 8020efe:	607a      	str	r2, [r7, #4]
 8020f00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020f02:	68bb      	ldr	r3, [r7, #8]
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d106      	bne.n	8020f16 <tcp_output_control_segment+0x22>
 8020f08:	4b1c      	ldr	r3, [pc, #112]	@ (8020f7c <tcp_output_control_segment+0x88>)
 8020f0a:	f240 7287 	movw	r2, #1927	@ 0x787
 8020f0e:	491c      	ldr	r1, [pc, #112]	@ (8020f80 <tcp_output_control_segment+0x8c>)
 8020f10:	481c      	ldr	r0, [pc, #112]	@ (8020f84 <tcp_output_control_segment+0x90>)
 8020f12:	f001 fd11 	bl	8022938 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8020f16:	683a      	ldr	r2, [r7, #0]
 8020f18:	6879      	ldr	r1, [r7, #4]
 8020f1a:	68f8      	ldr	r0, [r7, #12]
 8020f1c:	f7fe faea 	bl	801f4f4 <tcp_route>
 8020f20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8020f22:	693b      	ldr	r3, [r7, #16]
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d102      	bne.n	8020f2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8020f28:	23fc      	movs	r3, #252	@ 0xfc
 8020f2a:	75fb      	strb	r3, [r7, #23]
 8020f2c:	e01c      	b.n	8020f68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8020f2e:	68fb      	ldr	r3, [r7, #12]
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d006      	beq.n	8020f42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8020f34:	68fb      	ldr	r3, [r7, #12]
 8020f36:	7adb      	ldrb	r3, [r3, #11]
 8020f38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8020f3a:	68fb      	ldr	r3, [r7, #12]
 8020f3c:	7a9b      	ldrb	r3, [r3, #10]
 8020f3e:	757b      	strb	r3, [r7, #21]
 8020f40:	e003      	b.n	8020f4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8020f42:	23ff      	movs	r3, #255	@ 0xff
 8020f44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8020f46:	2300      	movs	r3, #0
 8020f48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8020f4a:	7dba      	ldrb	r2, [r7, #22]
 8020f4c:	693b      	ldr	r3, [r7, #16]
 8020f4e:	9302      	str	r3, [sp, #8]
 8020f50:	2306      	movs	r3, #6
 8020f52:	9301      	str	r3, [sp, #4]
 8020f54:	7d7b      	ldrb	r3, [r7, #21]
 8020f56:	9300      	str	r3, [sp, #0]
 8020f58:	4613      	mov	r3, r2
 8020f5a:	683a      	ldr	r2, [r7, #0]
 8020f5c:	6879      	ldr	r1, [r7, #4]
 8020f5e:	68b8      	ldr	r0, [r7, #8]
 8020f60:	f7f7 f866 	bl	8018030 <ip4_output_if>
 8020f64:	4603      	mov	r3, r0
 8020f66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8020f68:	68b8      	ldr	r0, [r7, #8]
 8020f6a:	f7f9 fe0b 	bl	801ab84 <pbuf_free>
  return err;
 8020f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020f72:	4618      	mov	r0, r3
 8020f74:	3718      	adds	r7, #24
 8020f76:	46bd      	mov	sp, r7
 8020f78:	bd80      	pop	{r7, pc}
 8020f7a:	bf00      	nop
 8020f7c:	08027740 	.word	0x08027740
 8020f80:	08027edc 	.word	0x08027edc
 8020f84:	080277d8 	.word	0x080277d8

08020f88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020f88:	b590      	push	{r4, r7, lr}
 8020f8a:	b08b      	sub	sp, #44	@ 0x2c
 8020f8c:	af04      	add	r7, sp, #16
 8020f8e:	60f8      	str	r0, [r7, #12]
 8020f90:	60b9      	str	r1, [r7, #8]
 8020f92:	607a      	str	r2, [r7, #4]
 8020f94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020f96:	683b      	ldr	r3, [r7, #0]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d106      	bne.n	8020faa <tcp_rst+0x22>
 8020f9c:	4b1f      	ldr	r3, [pc, #124]	@ (802101c <tcp_rst+0x94>)
 8020f9e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8020fa2:	491f      	ldr	r1, [pc, #124]	@ (8021020 <tcp_rst+0x98>)
 8020fa4:	481f      	ldr	r0, [pc, #124]	@ (8021024 <tcp_rst+0x9c>)
 8020fa6:	f001 fcc7 	bl	8022938 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8020faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d106      	bne.n	8020fbe <tcp_rst+0x36>
 8020fb0:	4b1a      	ldr	r3, [pc, #104]	@ (802101c <tcp_rst+0x94>)
 8020fb2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8020fb6:	491c      	ldr	r1, [pc, #112]	@ (8021028 <tcp_rst+0xa0>)
 8020fb8:	481a      	ldr	r0, [pc, #104]	@ (8021024 <tcp_rst+0x9c>)
 8020fba:	f001 fcbd 	bl	8022938 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020fbe:	2300      	movs	r3, #0
 8020fc0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020fc2:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8020fc6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020fc8:	7dfb      	ldrb	r3, [r7, #23]
 8020fca:	b29c      	uxth	r4, r3
 8020fcc:	68b8      	ldr	r0, [r7, #8]
 8020fce:	f7f8 f93c 	bl	801924a <lwip_htonl>
 8020fd2:	4602      	mov	r2, r0
 8020fd4:	8abb      	ldrh	r3, [r7, #20]
 8020fd6:	9303      	str	r3, [sp, #12]
 8020fd8:	2314      	movs	r3, #20
 8020fda:	9302      	str	r3, [sp, #8]
 8020fdc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8020fde:	9301      	str	r3, [sp, #4]
 8020fe0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020fe2:	9300      	str	r3, [sp, #0]
 8020fe4:	4613      	mov	r3, r2
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	4621      	mov	r1, r4
 8020fea:	6878      	ldr	r0, [r7, #4]
 8020fec:	f7ff fe94 	bl	8020d18 <tcp_output_alloc_header_common>
 8020ff0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020ff2:	693b      	ldr	r3, [r7, #16]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d00c      	beq.n	8021012 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020ff8:	7dfb      	ldrb	r3, [r7, #23]
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	6939      	ldr	r1, [r7, #16]
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f7ff ff3a 	bl	8020e78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8021004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021006:	683a      	ldr	r2, [r7, #0]
 8021008:	6939      	ldr	r1, [r7, #16]
 802100a:	68f8      	ldr	r0, [r7, #12]
 802100c:	f7ff ff72 	bl	8020ef4 <tcp_output_control_segment>
 8021010:	e000      	b.n	8021014 <tcp_rst+0x8c>
    return;
 8021012:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8021014:	371c      	adds	r7, #28
 8021016:	46bd      	mov	sp, r7
 8021018:	bd90      	pop	{r4, r7, pc}
 802101a:	bf00      	nop
 802101c:	08027740 	.word	0x08027740
 8021020:	08027f08 	.word	0x08027f08
 8021024:	080277d8 	.word	0x080277d8
 8021028:	08027f24 	.word	0x08027f24

0802102c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 802102c:	b590      	push	{r4, r7, lr}
 802102e:	b087      	sub	sp, #28
 8021030:	af00      	add	r7, sp, #0
 8021032:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8021034:	2300      	movs	r3, #0
 8021036:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8021038:	2300      	movs	r3, #0
 802103a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	2b00      	cmp	r3, #0
 8021040:	d106      	bne.n	8021050 <tcp_send_empty_ack+0x24>
 8021042:	4b28      	ldr	r3, [pc, #160]	@ (80210e4 <tcp_send_empty_ack+0xb8>)
 8021044:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8021048:	4927      	ldr	r1, [pc, #156]	@ (80210e8 <tcp_send_empty_ack+0xbc>)
 802104a:	4828      	ldr	r0, [pc, #160]	@ (80210ec <tcp_send_empty_ack+0xc0>)
 802104c:	f001 fc74 	bl	8022938 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021050:	7dfb      	ldrb	r3, [r7, #23]
 8021052:	009b      	lsls	r3, r3, #2
 8021054:	b2db      	uxtb	r3, r3
 8021056:	f003 0304 	and.w	r3, r3, #4
 802105a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 802105c:	7d7b      	ldrb	r3, [r7, #21]
 802105e:	b29c      	uxth	r4, r3
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021064:	4618      	mov	r0, r3
 8021066:	f7f8 f8f0 	bl	801924a <lwip_htonl>
 802106a:	4603      	mov	r3, r0
 802106c:	2200      	movs	r2, #0
 802106e:	4621      	mov	r1, r4
 8021070:	6878      	ldr	r0, [r7, #4]
 8021072:	f7ff fec3 	bl	8020dfc <tcp_output_alloc_header>
 8021076:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021078:	693b      	ldr	r3, [r7, #16]
 802107a:	2b00      	cmp	r3, #0
 802107c:	d109      	bne.n	8021092 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	8b5b      	ldrh	r3, [r3, #26]
 8021082:	f043 0303 	orr.w	r3, r3, #3
 8021086:	b29a      	uxth	r2, r3
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802108c:	f06f 0301 	mvn.w	r3, #1
 8021090:	e023      	b.n	80210da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8021092:	7dbb      	ldrb	r3, [r7, #22]
 8021094:	7dfa      	ldrb	r2, [r7, #23]
 8021096:	6939      	ldr	r1, [r7, #16]
 8021098:	6878      	ldr	r0, [r7, #4]
 802109a:	f7ff feed 	bl	8020e78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802109e:	687a      	ldr	r2, [r7, #4]
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	3304      	adds	r3, #4
 80210a4:	6939      	ldr	r1, [r7, #16]
 80210a6:	6878      	ldr	r0, [r7, #4]
 80210a8:	f7ff ff24 	bl	8020ef4 <tcp_output_control_segment>
 80210ac:	4603      	mov	r3, r0
 80210ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80210b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d007      	beq.n	80210c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	8b5b      	ldrh	r3, [r3, #26]
 80210bc:	f043 0303 	orr.w	r3, r3, #3
 80210c0:	b29a      	uxth	r2, r3
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	835a      	strh	r2, [r3, #26]
 80210c6:	e006      	b.n	80210d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	8b5b      	ldrh	r3, [r3, #26]
 80210cc:	f023 0303 	bic.w	r3, r3, #3
 80210d0:	b29a      	uxth	r2, r3
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80210d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80210da:	4618      	mov	r0, r3
 80210dc:	371c      	adds	r7, #28
 80210de:	46bd      	mov	sp, r7
 80210e0:	bd90      	pop	{r4, r7, pc}
 80210e2:	bf00      	nop
 80210e4:	08027740 	.word	0x08027740
 80210e8:	08027f40 	.word	0x08027f40
 80210ec:	080277d8 	.word	0x080277d8

080210f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80210f0:	b590      	push	{r4, r7, lr}
 80210f2:	b087      	sub	sp, #28
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80210f8:	2300      	movs	r3, #0
 80210fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d106      	bne.n	8021110 <tcp_keepalive+0x20>
 8021102:	4b18      	ldr	r3, [pc, #96]	@ (8021164 <tcp_keepalive+0x74>)
 8021104:	f640 0224 	movw	r2, #2084	@ 0x824
 8021108:	4917      	ldr	r1, [pc, #92]	@ (8021168 <tcp_keepalive+0x78>)
 802110a:	4818      	ldr	r0, [pc, #96]	@ (802116c <tcp_keepalive+0x7c>)
 802110c:	f001 fc14 	bl	8022938 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8021110:	7dfb      	ldrb	r3, [r7, #23]
 8021112:	b29c      	uxth	r4, r3
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021118:	3b01      	subs	r3, #1
 802111a:	4618      	mov	r0, r3
 802111c:	f7f8 f895 	bl	801924a <lwip_htonl>
 8021120:	4603      	mov	r3, r0
 8021122:	2200      	movs	r2, #0
 8021124:	4621      	mov	r1, r4
 8021126:	6878      	ldr	r0, [r7, #4]
 8021128:	f7ff fe68 	bl	8020dfc <tcp_output_alloc_header>
 802112c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802112e:	693b      	ldr	r3, [r7, #16]
 8021130:	2b00      	cmp	r3, #0
 8021132:	d102      	bne.n	802113a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8021134:	f04f 33ff 	mov.w	r3, #4294967295
 8021138:	e010      	b.n	802115c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802113a:	7dfb      	ldrb	r3, [r7, #23]
 802113c:	2200      	movs	r2, #0
 802113e:	6939      	ldr	r1, [r7, #16]
 8021140:	6878      	ldr	r0, [r7, #4]
 8021142:	f7ff fe99 	bl	8020e78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021146:	687a      	ldr	r2, [r7, #4]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	3304      	adds	r3, #4
 802114c:	6939      	ldr	r1, [r7, #16]
 802114e:	6878      	ldr	r0, [r7, #4]
 8021150:	f7ff fed0 	bl	8020ef4 <tcp_output_control_segment>
 8021154:	4603      	mov	r3, r0
 8021156:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802115c:	4618      	mov	r0, r3
 802115e:	371c      	adds	r7, #28
 8021160:	46bd      	mov	sp, r7
 8021162:	bd90      	pop	{r4, r7, pc}
 8021164:	08027740 	.word	0x08027740
 8021168:	08027f60 	.word	0x08027f60
 802116c:	080277d8 	.word	0x080277d8

08021170 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8021170:	b590      	push	{r4, r7, lr}
 8021172:	b08b      	sub	sp, #44	@ 0x2c
 8021174:	af00      	add	r7, sp, #0
 8021176:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021178:	2300      	movs	r3, #0
 802117a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d106      	bne.n	8021192 <tcp_zero_window_probe+0x22>
 8021184:	4b4c      	ldr	r3, [pc, #304]	@ (80212b8 <tcp_zero_window_probe+0x148>)
 8021186:	f640 024f 	movw	r2, #2127	@ 0x84f
 802118a:	494c      	ldr	r1, [pc, #304]	@ (80212bc <tcp_zero_window_probe+0x14c>)
 802118c:	484c      	ldr	r0, [pc, #304]	@ (80212c0 <tcp_zero_window_probe+0x150>)
 802118e:	f001 fbd3 	bl	8022938 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021196:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8021198:	6a3b      	ldr	r3, [r7, #32]
 802119a:	2b00      	cmp	r3, #0
 802119c:	d101      	bne.n	80211a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802119e:	2300      	movs	r3, #0
 80211a0:	e086      	b.n	80212b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80211a8:	2bff      	cmp	r3, #255	@ 0xff
 80211aa:	d007      	beq.n	80211bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80211b2:	3301      	adds	r3, #1
 80211b4:	b2da      	uxtb	r2, r3
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80211bc:	6a3b      	ldr	r3, [r7, #32]
 80211be:	68db      	ldr	r3, [r3, #12]
 80211c0:	899b      	ldrh	r3, [r3, #12]
 80211c2:	b29b      	uxth	r3, r3
 80211c4:	4618      	mov	r0, r3
 80211c6:	f7f8 f82b 	bl	8019220 <lwip_htons>
 80211ca:	4603      	mov	r3, r0
 80211cc:	b2db      	uxtb	r3, r3
 80211ce:	f003 0301 	and.w	r3, r3, #1
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d005      	beq.n	80211e2 <tcp_zero_window_probe+0x72>
 80211d6:	6a3b      	ldr	r3, [r7, #32]
 80211d8:	891b      	ldrh	r3, [r3, #8]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d101      	bne.n	80211e2 <tcp_zero_window_probe+0x72>
 80211de:	2301      	movs	r3, #1
 80211e0:	e000      	b.n	80211e4 <tcp_zero_window_probe+0x74>
 80211e2:	2300      	movs	r3, #0
 80211e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80211e6:	7ffb      	ldrb	r3, [r7, #31]
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	bf0c      	ite	eq
 80211ec:	2301      	moveq	r3, #1
 80211ee:	2300      	movne	r3, #0
 80211f0:	b2db      	uxtb	r3, r3
 80211f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80211f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80211f8:	b299      	uxth	r1, r3
 80211fa:	6a3b      	ldr	r3, [r7, #32]
 80211fc:	68db      	ldr	r3, [r3, #12]
 80211fe:	685b      	ldr	r3, [r3, #4]
 8021200:	8bba      	ldrh	r2, [r7, #28]
 8021202:	6878      	ldr	r0, [r7, #4]
 8021204:	f7ff fdfa 	bl	8020dfc <tcp_output_alloc_header>
 8021208:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802120a:	69bb      	ldr	r3, [r7, #24]
 802120c:	2b00      	cmp	r3, #0
 802120e:	d102      	bne.n	8021216 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8021210:	f04f 33ff 	mov.w	r3, #4294967295
 8021214:	e04c      	b.n	80212b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8021216:	69bb      	ldr	r3, [r7, #24]
 8021218:	685b      	ldr	r3, [r3, #4]
 802121a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802121c:	7ffb      	ldrb	r3, [r7, #31]
 802121e:	2b00      	cmp	r3, #0
 8021220:	d011      	beq.n	8021246 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8021222:	697b      	ldr	r3, [r7, #20]
 8021224:	899b      	ldrh	r3, [r3, #12]
 8021226:	b29b      	uxth	r3, r3
 8021228:	b21b      	sxth	r3, r3
 802122a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 802122e:	b21c      	sxth	r4, r3
 8021230:	2011      	movs	r0, #17
 8021232:	f7f7 fff5 	bl	8019220 <lwip_htons>
 8021236:	4603      	mov	r3, r0
 8021238:	b21b      	sxth	r3, r3
 802123a:	4323      	orrs	r3, r4
 802123c:	b21b      	sxth	r3, r3
 802123e:	b29a      	uxth	r2, r3
 8021240:	697b      	ldr	r3, [r7, #20]
 8021242:	819a      	strh	r2, [r3, #12]
 8021244:	e010      	b.n	8021268 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8021246:	69bb      	ldr	r3, [r7, #24]
 8021248:	685b      	ldr	r3, [r3, #4]
 802124a:	3314      	adds	r3, #20
 802124c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 802124e:	6a3b      	ldr	r3, [r7, #32]
 8021250:	6858      	ldr	r0, [r3, #4]
 8021252:	6a3b      	ldr	r3, [r7, #32]
 8021254:	685b      	ldr	r3, [r3, #4]
 8021256:	891a      	ldrh	r2, [r3, #8]
 8021258:	6a3b      	ldr	r3, [r7, #32]
 802125a:	891b      	ldrh	r3, [r3, #8]
 802125c:	1ad3      	subs	r3, r2, r3
 802125e:	b29b      	uxth	r3, r3
 8021260:	2201      	movs	r2, #1
 8021262:	6939      	ldr	r1, [r7, #16]
 8021264:	f7f9 fe94 	bl	801af90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8021268:	6a3b      	ldr	r3, [r7, #32]
 802126a:	68db      	ldr	r3, [r3, #12]
 802126c:	685b      	ldr	r3, [r3, #4]
 802126e:	4618      	mov	r0, r3
 8021270:	f7f7 ffeb 	bl	801924a <lwip_htonl>
 8021274:	4603      	mov	r3, r0
 8021276:	3301      	adds	r3, #1
 8021278:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	1ad3      	subs	r3, r2, r3
 8021282:	2b00      	cmp	r3, #0
 8021284:	da02      	bge.n	802128c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	68fa      	ldr	r2, [r7, #12]
 802128a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802128c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021290:	2200      	movs	r2, #0
 8021292:	69b9      	ldr	r1, [r7, #24]
 8021294:	6878      	ldr	r0, [r7, #4]
 8021296:	f7ff fdef 	bl	8020e78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802129a:	687a      	ldr	r2, [r7, #4]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	3304      	adds	r3, #4
 80212a0:	69b9      	ldr	r1, [r7, #24]
 80212a2:	6878      	ldr	r0, [r7, #4]
 80212a4:	f7ff fe26 	bl	8020ef4 <tcp_output_control_segment>
 80212a8:	4603      	mov	r3, r0
 80212aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80212ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80212b0:	4618      	mov	r0, r3
 80212b2:	372c      	adds	r7, #44	@ 0x2c
 80212b4:	46bd      	mov	sp, r7
 80212b6:	bd90      	pop	{r4, r7, pc}
 80212b8:	08027740 	.word	0x08027740
 80212bc:	08027f7c 	.word	0x08027f7c
 80212c0:	080277d8 	.word	0x080277d8

080212c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80212c4:	b580      	push	{r7, lr}
 80212c6:	b082      	sub	sp, #8
 80212c8:	af00      	add	r7, sp, #0
 80212ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80212cc:	f7f9 ffe0 	bl	801b290 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80212d0:	4b0a      	ldr	r3, [pc, #40]	@ (80212fc <tcpip_tcp_timer+0x38>)
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d103      	bne.n	80212e0 <tcpip_tcp_timer+0x1c>
 80212d8:	4b09      	ldr	r3, [pc, #36]	@ (8021300 <tcpip_tcp_timer+0x3c>)
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d005      	beq.n	80212ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80212e0:	2200      	movs	r2, #0
 80212e2:	4908      	ldr	r1, [pc, #32]	@ (8021304 <tcpip_tcp_timer+0x40>)
 80212e4:	20fa      	movs	r0, #250	@ 0xfa
 80212e6:	f000 f8f3 	bl	80214d0 <sys_timeout>
 80212ea:	e003      	b.n	80212f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80212ec:	4b06      	ldr	r3, [pc, #24]	@ (8021308 <tcpip_tcp_timer+0x44>)
 80212ee:	2200      	movs	r2, #0
 80212f0:	601a      	str	r2, [r3, #0]
  }
}
 80212f2:	bf00      	nop
 80212f4:	bf00      	nop
 80212f6:	3708      	adds	r7, #8
 80212f8:	46bd      	mov	sp, r7
 80212fa:	bd80      	pop	{r7, pc}
 80212fc:	20010024 	.word	0x20010024
 8021300:	20010028 	.word	0x20010028
 8021304:	080212c5 	.word	0x080212c5
 8021308:	20010070 	.word	0x20010070

0802130c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 802130c:	b580      	push	{r7, lr}
 802130e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8021310:	4b0a      	ldr	r3, [pc, #40]	@ (802133c <tcp_timer_needed+0x30>)
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d10f      	bne.n	8021338 <tcp_timer_needed+0x2c>
 8021318:	4b09      	ldr	r3, [pc, #36]	@ (8021340 <tcp_timer_needed+0x34>)
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d103      	bne.n	8021328 <tcp_timer_needed+0x1c>
 8021320:	4b08      	ldr	r3, [pc, #32]	@ (8021344 <tcp_timer_needed+0x38>)
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d007      	beq.n	8021338 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8021328:	4b04      	ldr	r3, [pc, #16]	@ (802133c <tcp_timer_needed+0x30>)
 802132a:	2201      	movs	r2, #1
 802132c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802132e:	2200      	movs	r2, #0
 8021330:	4905      	ldr	r1, [pc, #20]	@ (8021348 <tcp_timer_needed+0x3c>)
 8021332:	20fa      	movs	r0, #250	@ 0xfa
 8021334:	f000 f8cc 	bl	80214d0 <sys_timeout>
  }
}
 8021338:	bf00      	nop
 802133a:	bd80      	pop	{r7, pc}
 802133c:	20010070 	.word	0x20010070
 8021340:	20010024 	.word	0x20010024
 8021344:	20010028 	.word	0x20010028
 8021348:	080212c5 	.word	0x080212c5

0802134c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 802134c:	b580      	push	{r7, lr}
 802134e:	b086      	sub	sp, #24
 8021350:	af00      	add	r7, sp, #0
 8021352:	60f8      	str	r0, [r7, #12]
 8021354:	60b9      	str	r1, [r7, #8]
 8021356:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021358:	200b      	movs	r0, #11
 802135a:	f7f8 fca5 	bl	8019ca8 <memp_malloc>
 802135e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021360:	693b      	ldr	r3, [r7, #16]
 8021362:	2b00      	cmp	r3, #0
 8021364:	d109      	bne.n	802137a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021366:	693b      	ldr	r3, [r7, #16]
 8021368:	2b00      	cmp	r3, #0
 802136a:	d151      	bne.n	8021410 <sys_timeout_abs+0xc4>
 802136c:	4b2a      	ldr	r3, [pc, #168]	@ (8021418 <sys_timeout_abs+0xcc>)
 802136e:	22be      	movs	r2, #190	@ 0xbe
 8021370:	492a      	ldr	r1, [pc, #168]	@ (802141c <sys_timeout_abs+0xd0>)
 8021372:	482b      	ldr	r0, [pc, #172]	@ (8021420 <sys_timeout_abs+0xd4>)
 8021374:	f001 fae0 	bl	8022938 <iprintf>
    return;
 8021378:	e04a      	b.n	8021410 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 802137a:	693b      	ldr	r3, [r7, #16]
 802137c:	2200      	movs	r2, #0
 802137e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021380:	693b      	ldr	r3, [r7, #16]
 8021382:	68ba      	ldr	r2, [r7, #8]
 8021384:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021386:	693b      	ldr	r3, [r7, #16]
 8021388:	687a      	ldr	r2, [r7, #4]
 802138a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 802138c:	693b      	ldr	r3, [r7, #16]
 802138e:	68fa      	ldr	r2, [r7, #12]
 8021390:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8021392:	4b24      	ldr	r3, [pc, #144]	@ (8021424 <sys_timeout_abs+0xd8>)
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	2b00      	cmp	r3, #0
 8021398:	d103      	bne.n	80213a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 802139a:	4a22      	ldr	r2, [pc, #136]	@ (8021424 <sys_timeout_abs+0xd8>)
 802139c:	693b      	ldr	r3, [r7, #16]
 802139e:	6013      	str	r3, [r2, #0]
    return;
 80213a0:	e037      	b.n	8021412 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80213a2:	693b      	ldr	r3, [r7, #16]
 80213a4:	685a      	ldr	r2, [r3, #4]
 80213a6:	4b1f      	ldr	r3, [pc, #124]	@ (8021424 <sys_timeout_abs+0xd8>)
 80213a8:	681b      	ldr	r3, [r3, #0]
 80213aa:	685b      	ldr	r3, [r3, #4]
 80213ac:	1ad3      	subs	r3, r2, r3
 80213ae:	0fdb      	lsrs	r3, r3, #31
 80213b0:	f003 0301 	and.w	r3, r3, #1
 80213b4:	b2db      	uxtb	r3, r3
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d007      	beq.n	80213ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80213ba:	4b1a      	ldr	r3, [pc, #104]	@ (8021424 <sys_timeout_abs+0xd8>)
 80213bc:	681a      	ldr	r2, [r3, #0]
 80213be:	693b      	ldr	r3, [r7, #16]
 80213c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80213c2:	4a18      	ldr	r2, [pc, #96]	@ (8021424 <sys_timeout_abs+0xd8>)
 80213c4:	693b      	ldr	r3, [r7, #16]
 80213c6:	6013      	str	r3, [r2, #0]
 80213c8:	e023      	b.n	8021412 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80213ca:	4b16      	ldr	r3, [pc, #88]	@ (8021424 <sys_timeout_abs+0xd8>)
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	617b      	str	r3, [r7, #20]
 80213d0:	e01a      	b.n	8021408 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80213d2:	697b      	ldr	r3, [r7, #20]
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d00b      	beq.n	80213f2 <sys_timeout_abs+0xa6>
 80213da:	693b      	ldr	r3, [r7, #16]
 80213dc:	685a      	ldr	r2, [r3, #4]
 80213de:	697b      	ldr	r3, [r7, #20]
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	685b      	ldr	r3, [r3, #4]
 80213e4:	1ad3      	subs	r3, r2, r3
 80213e6:	0fdb      	lsrs	r3, r3, #31
 80213e8:	f003 0301 	and.w	r3, r3, #1
 80213ec:	b2db      	uxtb	r3, r3
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d007      	beq.n	8021402 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80213f2:	697b      	ldr	r3, [r7, #20]
 80213f4:	681a      	ldr	r2, [r3, #0]
 80213f6:	693b      	ldr	r3, [r7, #16]
 80213f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80213fa:	697b      	ldr	r3, [r7, #20]
 80213fc:	693a      	ldr	r2, [r7, #16]
 80213fe:	601a      	str	r2, [r3, #0]
        break;
 8021400:	e007      	b.n	8021412 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8021402:	697b      	ldr	r3, [r7, #20]
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	617b      	str	r3, [r7, #20]
 8021408:	697b      	ldr	r3, [r7, #20]
 802140a:	2b00      	cmp	r3, #0
 802140c:	d1e1      	bne.n	80213d2 <sys_timeout_abs+0x86>
 802140e:	e000      	b.n	8021412 <sys_timeout_abs+0xc6>
    return;
 8021410:	bf00      	nop
      }
    }
  }
}
 8021412:	3718      	adds	r7, #24
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}
 8021418:	08027fa0 	.word	0x08027fa0
 802141c:	08028018 	.word	0x08028018
 8021420:	08028058 	.word	0x08028058
 8021424:	20010068 	.word	0x20010068

08021428 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021428:	b580      	push	{r7, lr}
 802142a:	b086      	sub	sp, #24
 802142c:	af00      	add	r7, sp, #0
 802142e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8021434:	697b      	ldr	r3, [r7, #20]
 8021436:	685b      	ldr	r3, [r3, #4]
 8021438:	4798      	blx	r3

  now = sys_now();
 802143a:	f7df ff39 	bl	80012b0 <sys_now>
 802143e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021440:	697b      	ldr	r3, [r7, #20]
 8021442:	681a      	ldr	r2, [r3, #0]
 8021444:	4b0f      	ldr	r3, [pc, #60]	@ (8021484 <lwip_cyclic_timer+0x5c>)
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	4413      	add	r3, r2
 802144a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 802144c:	68fa      	ldr	r2, [r7, #12]
 802144e:	693b      	ldr	r3, [r7, #16]
 8021450:	1ad3      	subs	r3, r2, r3
 8021452:	0fdb      	lsrs	r3, r3, #31
 8021454:	f003 0301 	and.w	r3, r3, #1
 8021458:	b2db      	uxtb	r3, r3
 802145a:	2b00      	cmp	r3, #0
 802145c:	d009      	beq.n	8021472 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 802145e:	697b      	ldr	r3, [r7, #20]
 8021460:	681a      	ldr	r2, [r3, #0]
 8021462:	693b      	ldr	r3, [r7, #16]
 8021464:	4413      	add	r3, r2
 8021466:	687a      	ldr	r2, [r7, #4]
 8021468:	4907      	ldr	r1, [pc, #28]	@ (8021488 <lwip_cyclic_timer+0x60>)
 802146a:	4618      	mov	r0, r3
 802146c:	f7ff ff6e 	bl	802134c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021470:	e004      	b.n	802147c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8021472:	687a      	ldr	r2, [r7, #4]
 8021474:	4904      	ldr	r1, [pc, #16]	@ (8021488 <lwip_cyclic_timer+0x60>)
 8021476:	68f8      	ldr	r0, [r7, #12]
 8021478:	f7ff ff68 	bl	802134c <sys_timeout_abs>
}
 802147c:	bf00      	nop
 802147e:	3718      	adds	r7, #24
 8021480:	46bd      	mov	sp, r7
 8021482:	bd80      	pop	{r7, pc}
 8021484:	2001006c 	.word	0x2001006c
 8021488:	08021429 	.word	0x08021429

0802148c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 802148c:	b580      	push	{r7, lr}
 802148e:	b082      	sub	sp, #8
 8021490:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021492:	2301      	movs	r3, #1
 8021494:	607b      	str	r3, [r7, #4]
 8021496:	e00e      	b.n	80214b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021498:	4a0b      	ldr	r2, [pc, #44]	@ (80214c8 <sys_timeouts_init+0x3c>)
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	00db      	lsls	r3, r3, #3
 80214a4:	4a08      	ldr	r2, [pc, #32]	@ (80214c8 <sys_timeouts_init+0x3c>)
 80214a6:	4413      	add	r3, r2
 80214a8:	461a      	mov	r2, r3
 80214aa:	4908      	ldr	r1, [pc, #32]	@ (80214cc <sys_timeouts_init+0x40>)
 80214ac:	f000 f810 	bl	80214d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	3301      	adds	r3, #1
 80214b4:	607b      	str	r3, [r7, #4]
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	2b05      	cmp	r3, #5
 80214ba:	d9ed      	bls.n	8021498 <sys_timeouts_init+0xc>
  }
}
 80214bc:	bf00      	nop
 80214be:	bf00      	nop
 80214c0:	3708      	adds	r7, #8
 80214c2:	46bd      	mov	sp, r7
 80214c4:	bd80      	pop	{r7, pc}
 80214c6:	bf00      	nop
 80214c8:	08028d28 	.word	0x08028d28
 80214cc:	08021429 	.word	0x08021429

080214d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80214d0:	b580      	push	{r7, lr}
 80214d2:	b086      	sub	sp, #24
 80214d4:	af00      	add	r7, sp, #0
 80214d6:	60f8      	str	r0, [r7, #12]
 80214d8:	60b9      	str	r1, [r7, #8]
 80214da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80214dc:	68fb      	ldr	r3, [r7, #12]
 80214de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80214e2:	d306      	bcc.n	80214f2 <sys_timeout+0x22>
 80214e4:	4b0a      	ldr	r3, [pc, #40]	@ (8021510 <sys_timeout+0x40>)
 80214e6:	f240 1229 	movw	r2, #297	@ 0x129
 80214ea:	490a      	ldr	r1, [pc, #40]	@ (8021514 <sys_timeout+0x44>)
 80214ec:	480a      	ldr	r0, [pc, #40]	@ (8021518 <sys_timeout+0x48>)
 80214ee:	f001 fa23 	bl	8022938 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80214f2:	f7df fedd 	bl	80012b0 <sys_now>
 80214f6:	4602      	mov	r2, r0
 80214f8:	68fb      	ldr	r3, [r7, #12]
 80214fa:	4413      	add	r3, r2
 80214fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80214fe:	687a      	ldr	r2, [r7, #4]
 8021500:	68b9      	ldr	r1, [r7, #8]
 8021502:	6978      	ldr	r0, [r7, #20]
 8021504:	f7ff ff22 	bl	802134c <sys_timeout_abs>
#endif
}
 8021508:	bf00      	nop
 802150a:	3718      	adds	r7, #24
 802150c:	46bd      	mov	sp, r7
 802150e:	bd80      	pop	{r7, pc}
 8021510:	08027fa0 	.word	0x08027fa0
 8021514:	08028080 	.word	0x08028080
 8021518:	08028058 	.word	0x08028058

0802151c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 802151c:	b580      	push	{r7, lr}
 802151e:	b084      	sub	sp, #16
 8021520:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8021522:	f7df fec5 	bl	80012b0 <sys_now>
 8021526:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021528:	4b17      	ldr	r3, [pc, #92]	@ (8021588 <sys_check_timeouts+0x6c>)
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 802152e:	68bb      	ldr	r3, [r7, #8]
 8021530:	2b00      	cmp	r3, #0
 8021532:	d022      	beq.n	802157a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8021534:	68bb      	ldr	r3, [r7, #8]
 8021536:	685b      	ldr	r3, [r3, #4]
 8021538:	68fa      	ldr	r2, [r7, #12]
 802153a:	1ad3      	subs	r3, r2, r3
 802153c:	0fdb      	lsrs	r3, r3, #31
 802153e:	f003 0301 	and.w	r3, r3, #1
 8021542:	b2db      	uxtb	r3, r3
 8021544:	2b00      	cmp	r3, #0
 8021546:	d11a      	bne.n	802157e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	681b      	ldr	r3, [r3, #0]
 802154c:	4a0e      	ldr	r2, [pc, #56]	@ (8021588 <sys_check_timeouts+0x6c>)
 802154e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021550:	68bb      	ldr	r3, [r7, #8]
 8021552:	689b      	ldr	r3, [r3, #8]
 8021554:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8021556:	68bb      	ldr	r3, [r7, #8]
 8021558:	68db      	ldr	r3, [r3, #12]
 802155a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	685b      	ldr	r3, [r3, #4]
 8021560:	4a0a      	ldr	r2, [pc, #40]	@ (802158c <sys_check_timeouts+0x70>)
 8021562:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021564:	68b9      	ldr	r1, [r7, #8]
 8021566:	200b      	movs	r0, #11
 8021568:	f7f8 fc14 	bl	8019d94 <memp_free>
    if (handler != NULL) {
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d0da      	beq.n	8021528 <sys_check_timeouts+0xc>
      handler(arg);
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	6838      	ldr	r0, [r7, #0]
 8021576:	4798      	blx	r3
  do {
 8021578:	e7d6      	b.n	8021528 <sys_check_timeouts+0xc>
      return;
 802157a:	bf00      	nop
 802157c:	e000      	b.n	8021580 <sys_check_timeouts+0x64>
      return;
 802157e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021580:	3710      	adds	r7, #16
 8021582:	46bd      	mov	sp, r7
 8021584:	bd80      	pop	{r7, pc}
 8021586:	bf00      	nop
 8021588:	20010068 	.word	0x20010068
 802158c:	2001006c 	.word	0x2001006c

08021590 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021590:	b580      	push	{r7, lr}
 8021592:	b082      	sub	sp, #8
 8021594:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8021596:	4b16      	ldr	r3, [pc, #88]	@ (80215f0 <sys_timeouts_sleeptime+0x60>)
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	2b00      	cmp	r3, #0
 802159c:	d102      	bne.n	80215a4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 802159e:	f04f 33ff 	mov.w	r3, #4294967295
 80215a2:	e020      	b.n	80215e6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80215a4:	f7df fe84 	bl	80012b0 <sys_now>
 80215a8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80215aa:	4b11      	ldr	r3, [pc, #68]	@ (80215f0 <sys_timeouts_sleeptime+0x60>)
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	685a      	ldr	r2, [r3, #4]
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	1ad3      	subs	r3, r2, r3
 80215b4:	0fdb      	lsrs	r3, r3, #31
 80215b6:	f003 0301 	and.w	r3, r3, #1
 80215ba:	b2db      	uxtb	r3, r3
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d001      	beq.n	80215c4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80215c0:	2300      	movs	r3, #0
 80215c2:	e010      	b.n	80215e6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80215c4:	4b0a      	ldr	r3, [pc, #40]	@ (80215f0 <sys_timeouts_sleeptime+0x60>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	685a      	ldr	r2, [r3, #4]
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	1ad3      	subs	r3, r2, r3
 80215ce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80215d0:	683b      	ldr	r3, [r7, #0]
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	da06      	bge.n	80215e4 <sys_timeouts_sleeptime+0x54>
 80215d6:	4b07      	ldr	r3, [pc, #28]	@ (80215f4 <sys_timeouts_sleeptime+0x64>)
 80215d8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80215dc:	4906      	ldr	r1, [pc, #24]	@ (80215f8 <sys_timeouts_sleeptime+0x68>)
 80215de:	4807      	ldr	r0, [pc, #28]	@ (80215fc <sys_timeouts_sleeptime+0x6c>)
 80215e0:	f001 f9aa 	bl	8022938 <iprintf>
    return ret;
 80215e4:	683b      	ldr	r3, [r7, #0]
  }
}
 80215e6:	4618      	mov	r0, r3
 80215e8:	3708      	adds	r7, #8
 80215ea:	46bd      	mov	sp, r7
 80215ec:	bd80      	pop	{r7, pc}
 80215ee:	bf00      	nop
 80215f0:	20010068 	.word	0x20010068
 80215f4:	08027fa0 	.word	0x08027fa0
 80215f8:	080280b8 	.word	0x080280b8
 80215fc:	08028058 	.word	0x08028058

08021600 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8021600:	b580      	push	{r7, lr}
 8021602:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8021604:	f001 f898 	bl	8022738 <rand>
 8021608:	4603      	mov	r3, r0
 802160a:	b29b      	uxth	r3, r3
 802160c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021610:	b29b      	uxth	r3, r3
 8021612:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8021616:	b29a      	uxth	r2, r3
 8021618:	4b01      	ldr	r3, [pc, #4]	@ (8021620 <udp_init+0x20>)
 802161a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 802161c:	bf00      	nop
 802161e:	bd80      	pop	{r7, pc}
 8021620:	20000040 	.word	0x20000040

08021624 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8021624:	b480      	push	{r7}
 8021626:	b083      	sub	sp, #12
 8021628:	af00      	add	r7, sp, #0
  u16_t n = 0;
 802162a:	2300      	movs	r3, #0
 802162c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802162e:	4b17      	ldr	r3, [pc, #92]	@ (802168c <udp_new_port+0x68>)
 8021630:	881b      	ldrh	r3, [r3, #0]
 8021632:	1c5a      	adds	r2, r3, #1
 8021634:	b291      	uxth	r1, r2
 8021636:	4a15      	ldr	r2, [pc, #84]	@ (802168c <udp_new_port+0x68>)
 8021638:	8011      	strh	r1, [r2, #0]
 802163a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802163e:	4293      	cmp	r3, r2
 8021640:	d103      	bne.n	802164a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8021642:	4b12      	ldr	r3, [pc, #72]	@ (802168c <udp_new_port+0x68>)
 8021644:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8021648:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802164a:	4b11      	ldr	r3, [pc, #68]	@ (8021690 <udp_new_port+0x6c>)
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	603b      	str	r3, [r7, #0]
 8021650:	e011      	b.n	8021676 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8021652:	683b      	ldr	r3, [r7, #0]
 8021654:	8a5a      	ldrh	r2, [r3, #18]
 8021656:	4b0d      	ldr	r3, [pc, #52]	@ (802168c <udp_new_port+0x68>)
 8021658:	881b      	ldrh	r3, [r3, #0]
 802165a:	429a      	cmp	r2, r3
 802165c:	d108      	bne.n	8021670 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802165e:	88fb      	ldrh	r3, [r7, #6]
 8021660:	3301      	adds	r3, #1
 8021662:	80fb      	strh	r3, [r7, #6]
 8021664:	88fb      	ldrh	r3, [r7, #6]
 8021666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802166a:	d3e0      	bcc.n	802162e <udp_new_port+0xa>
        return 0;
 802166c:	2300      	movs	r3, #0
 802166e:	e007      	b.n	8021680 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021670:	683b      	ldr	r3, [r7, #0]
 8021672:	68db      	ldr	r3, [r3, #12]
 8021674:	603b      	str	r3, [r7, #0]
 8021676:	683b      	ldr	r3, [r7, #0]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d1ea      	bne.n	8021652 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 802167c:	4b03      	ldr	r3, [pc, #12]	@ (802168c <udp_new_port+0x68>)
 802167e:	881b      	ldrh	r3, [r3, #0]
}
 8021680:	4618      	mov	r0, r3
 8021682:	370c      	adds	r7, #12
 8021684:	46bd      	mov	sp, r7
 8021686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802168a:	4770      	bx	lr
 802168c:	20000040 	.word	0x20000040
 8021690:	20010074 	.word	0x20010074

08021694 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8021694:	b580      	push	{r7, lr}
 8021696:	b084      	sub	sp, #16
 8021698:	af00      	add	r7, sp, #0
 802169a:	60f8      	str	r0, [r7, #12]
 802169c:	60b9      	str	r1, [r7, #8]
 802169e:	4613      	mov	r3, r2
 80216a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80216a2:	68fb      	ldr	r3, [r7, #12]
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d105      	bne.n	80216b4 <udp_input_local_match+0x20>
 80216a8:	4b27      	ldr	r3, [pc, #156]	@ (8021748 <udp_input_local_match+0xb4>)
 80216aa:	2287      	movs	r2, #135	@ 0x87
 80216ac:	4927      	ldr	r1, [pc, #156]	@ (802174c <udp_input_local_match+0xb8>)
 80216ae:	4828      	ldr	r0, [pc, #160]	@ (8021750 <udp_input_local_match+0xbc>)
 80216b0:	f001 f942 	bl	8022938 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80216b4:	68bb      	ldr	r3, [r7, #8]
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	d105      	bne.n	80216c6 <udp_input_local_match+0x32>
 80216ba:	4b23      	ldr	r3, [pc, #140]	@ (8021748 <udp_input_local_match+0xb4>)
 80216bc:	2288      	movs	r2, #136	@ 0x88
 80216be:	4925      	ldr	r1, [pc, #148]	@ (8021754 <udp_input_local_match+0xc0>)
 80216c0:	4823      	ldr	r0, [pc, #140]	@ (8021750 <udp_input_local_match+0xbc>)
 80216c2:	f001 f939 	bl	8022938 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	7a1b      	ldrb	r3, [r3, #8]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d00b      	beq.n	80216e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	7a1a      	ldrb	r2, [r3, #8]
 80216d2:	4b21      	ldr	r3, [pc, #132]	@ (8021758 <udp_input_local_match+0xc4>)
 80216d4:	685b      	ldr	r3, [r3, #4]
 80216d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80216da:	3301      	adds	r3, #1
 80216dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80216de:	429a      	cmp	r2, r3
 80216e0:	d001      	beq.n	80216e6 <udp_input_local_match+0x52>
    return 0;
 80216e2:	2300      	movs	r3, #0
 80216e4:	e02b      	b.n	802173e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80216e6:	79fb      	ldrb	r3, [r7, #7]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d018      	beq.n	802171e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d013      	beq.n	802171a <udp_input_local_match+0x86>
 80216f2:	68fb      	ldr	r3, [r7, #12]
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d00f      	beq.n	802171a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80216fa:	4b17      	ldr	r3, [pc, #92]	@ (8021758 <udp_input_local_match+0xc4>)
 80216fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021702:	d00a      	beq.n	802171a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	681a      	ldr	r2, [r3, #0]
 8021708:	4b13      	ldr	r3, [pc, #76]	@ (8021758 <udp_input_local_match+0xc4>)
 802170a:	695b      	ldr	r3, [r3, #20]
 802170c:	405a      	eors	r2, r3
 802170e:	68bb      	ldr	r3, [r7, #8]
 8021710:	3308      	adds	r3, #8
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8021716:	2b00      	cmp	r3, #0
 8021718:	d110      	bne.n	802173c <udp_input_local_match+0xa8>
          return 1;
 802171a:	2301      	movs	r3, #1
 802171c:	e00f      	b.n	802173e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d009      	beq.n	8021738 <udp_input_local_match+0xa4>
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	681b      	ldr	r3, [r3, #0]
 8021728:	2b00      	cmp	r3, #0
 802172a:	d005      	beq.n	8021738 <udp_input_local_match+0xa4>
 802172c:	68fb      	ldr	r3, [r7, #12]
 802172e:	681a      	ldr	r2, [r3, #0]
 8021730:	4b09      	ldr	r3, [pc, #36]	@ (8021758 <udp_input_local_match+0xc4>)
 8021732:	695b      	ldr	r3, [r3, #20]
 8021734:	429a      	cmp	r2, r3
 8021736:	d101      	bne.n	802173c <udp_input_local_match+0xa8>
        return 1;
 8021738:	2301      	movs	r3, #1
 802173a:	e000      	b.n	802173e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 802173c:	2300      	movs	r3, #0
}
 802173e:	4618      	mov	r0, r3
 8021740:	3710      	adds	r7, #16
 8021742:	46bd      	mov	sp, r7
 8021744:	bd80      	pop	{r7, pc}
 8021746:	bf00      	nop
 8021748:	080280cc 	.word	0x080280cc
 802174c:	08028140 	.word	0x08028140
 8021750:	08028164 	.word	0x08028164
 8021754:	0802818c 	.word	0x0802818c
 8021758:	20008ebc 	.word	0x20008ebc

0802175c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 802175c:	b590      	push	{r4, r7, lr}
 802175e:	b08d      	sub	sp, #52	@ 0x34
 8021760:	af02      	add	r7, sp, #8
 8021762:	6078      	str	r0, [r7, #4]
 8021764:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8021766:	2300      	movs	r3, #0
 8021768:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	2b00      	cmp	r3, #0
 802176e:	d105      	bne.n	802177c <udp_input+0x20>
 8021770:	4b7c      	ldr	r3, [pc, #496]	@ (8021964 <udp_input+0x208>)
 8021772:	22cf      	movs	r2, #207	@ 0xcf
 8021774:	497c      	ldr	r1, [pc, #496]	@ (8021968 <udp_input+0x20c>)
 8021776:	487d      	ldr	r0, [pc, #500]	@ (802196c <udp_input+0x210>)
 8021778:	f001 f8de 	bl	8022938 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802177c:	683b      	ldr	r3, [r7, #0]
 802177e:	2b00      	cmp	r3, #0
 8021780:	d105      	bne.n	802178e <udp_input+0x32>
 8021782:	4b78      	ldr	r3, [pc, #480]	@ (8021964 <udp_input+0x208>)
 8021784:	22d0      	movs	r2, #208	@ 0xd0
 8021786:	497a      	ldr	r1, [pc, #488]	@ (8021970 <udp_input+0x214>)
 8021788:	4878      	ldr	r0, [pc, #480]	@ (802196c <udp_input+0x210>)
 802178a:	f001 f8d5 	bl	8022938 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802178e:	687b      	ldr	r3, [r7, #4]
 8021790:	895b      	ldrh	r3, [r3, #10]
 8021792:	2b07      	cmp	r3, #7
 8021794:	d803      	bhi.n	802179e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8021796:	6878      	ldr	r0, [r7, #4]
 8021798:	f7f9 f9f4 	bl	801ab84 <pbuf_free>
    goto end;
 802179c:	e0de      	b.n	802195c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	685b      	ldr	r3, [r3, #4]
 80217a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80217a4:	4b73      	ldr	r3, [pc, #460]	@ (8021974 <udp_input+0x218>)
 80217a6:	695b      	ldr	r3, [r3, #20]
 80217a8:	4a72      	ldr	r2, [pc, #456]	@ (8021974 <udp_input+0x218>)
 80217aa:	6812      	ldr	r2, [r2, #0]
 80217ac:	4611      	mov	r1, r2
 80217ae:	4618      	mov	r0, r3
 80217b0:	f7f6 fd8c 	bl	80182cc <ip4_addr_isbroadcast_u32>
 80217b4:	4603      	mov	r3, r0
 80217b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80217b8:	697b      	ldr	r3, [r7, #20]
 80217ba:	881b      	ldrh	r3, [r3, #0]
 80217bc:	b29b      	uxth	r3, r3
 80217be:	4618      	mov	r0, r3
 80217c0:	f7f7 fd2e 	bl	8019220 <lwip_htons>
 80217c4:	4603      	mov	r3, r0
 80217c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80217c8:	697b      	ldr	r3, [r7, #20]
 80217ca:	885b      	ldrh	r3, [r3, #2]
 80217cc:	b29b      	uxth	r3, r3
 80217ce:	4618      	mov	r0, r3
 80217d0:	f7f7 fd26 	bl	8019220 <lwip_htons>
 80217d4:	4603      	mov	r3, r0
 80217d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80217d8:	2300      	movs	r3, #0
 80217da:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80217dc:	2300      	movs	r3, #0
 80217de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80217e0:	2300      	movs	r3, #0
 80217e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80217e4:	4b64      	ldr	r3, [pc, #400]	@ (8021978 <udp_input+0x21c>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80217ea:	e054      	b.n	8021896 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80217ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217ee:	8a5b      	ldrh	r3, [r3, #18]
 80217f0:	89fa      	ldrh	r2, [r7, #14]
 80217f2:	429a      	cmp	r2, r3
 80217f4:	d14a      	bne.n	802188c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80217f6:	7cfb      	ldrb	r3, [r7, #19]
 80217f8:	461a      	mov	r2, r3
 80217fa:	6839      	ldr	r1, [r7, #0]
 80217fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80217fe:	f7ff ff49 	bl	8021694 <udp_input_local_match>
 8021802:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8021804:	2b00      	cmp	r3, #0
 8021806:	d041      	beq.n	802188c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8021808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802180a:	7c1b      	ldrb	r3, [r3, #16]
 802180c:	f003 0304 	and.w	r3, r3, #4
 8021810:	2b00      	cmp	r3, #0
 8021812:	d11d      	bne.n	8021850 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8021814:	69fb      	ldr	r3, [r7, #28]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d102      	bne.n	8021820 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 802181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802181c:	61fb      	str	r3, [r7, #28]
 802181e:	e017      	b.n	8021850 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021820:	7cfb      	ldrb	r3, [r7, #19]
 8021822:	2b00      	cmp	r3, #0
 8021824:	d014      	beq.n	8021850 <udp_input+0xf4>
 8021826:	4b53      	ldr	r3, [pc, #332]	@ (8021974 <udp_input+0x218>)
 8021828:	695b      	ldr	r3, [r3, #20]
 802182a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802182e:	d10f      	bne.n	8021850 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021830:	69fb      	ldr	r3, [r7, #28]
 8021832:	681a      	ldr	r2, [r3, #0]
 8021834:	683b      	ldr	r3, [r7, #0]
 8021836:	3304      	adds	r3, #4
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	429a      	cmp	r2, r3
 802183c:	d008      	beq.n	8021850 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 802183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021840:	681a      	ldr	r2, [r3, #0]
 8021842:	683b      	ldr	r3, [r7, #0]
 8021844:	3304      	adds	r3, #4
 8021846:	681b      	ldr	r3, [r3, #0]
 8021848:	429a      	cmp	r2, r3
 802184a:	d101      	bne.n	8021850 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 802184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802184e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8021850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021852:	8a9b      	ldrh	r3, [r3, #20]
 8021854:	8a3a      	ldrh	r2, [r7, #16]
 8021856:	429a      	cmp	r2, r3
 8021858:	d118      	bne.n	802188c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802185c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802185e:	2b00      	cmp	r3, #0
 8021860:	d005      	beq.n	802186e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8021862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021864:	685a      	ldr	r2, [r3, #4]
 8021866:	4b43      	ldr	r3, [pc, #268]	@ (8021974 <udp_input+0x218>)
 8021868:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802186a:	429a      	cmp	r2, r3
 802186c:	d10e      	bne.n	802188c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802186e:	6a3b      	ldr	r3, [r7, #32]
 8021870:	2b00      	cmp	r3, #0
 8021872:	d014      	beq.n	802189e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021876:	68da      	ldr	r2, [r3, #12]
 8021878:	6a3b      	ldr	r3, [r7, #32]
 802187a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802187c:	4b3e      	ldr	r3, [pc, #248]	@ (8021978 <udp_input+0x21c>)
 802187e:	681a      	ldr	r2, [r3, #0]
 8021880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021882:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021884:	4a3c      	ldr	r2, [pc, #240]	@ (8021978 <udp_input+0x21c>)
 8021886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021888:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802188a:	e008      	b.n	802189e <udp_input+0x142>
      }
    }

    prev = pcb;
 802188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802188e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021892:	68db      	ldr	r3, [r3, #12]
 8021894:	627b      	str	r3, [r7, #36]	@ 0x24
 8021896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021898:	2b00      	cmp	r3, #0
 802189a:	d1a7      	bne.n	80217ec <udp_input+0x90>
 802189c:	e000      	b.n	80218a0 <udp_input+0x144>
        break;
 802189e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80218a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	d101      	bne.n	80218aa <udp_input+0x14e>
    pcb = uncon_pcb;
 80218a6:	69fb      	ldr	r3, [r7, #28]
 80218a8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80218aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d002      	beq.n	80218b6 <udp_input+0x15a>
    for_us = 1;
 80218b0:	2301      	movs	r3, #1
 80218b2:	76fb      	strb	r3, [r7, #27]
 80218b4:	e00a      	b.n	80218cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80218b6:	683b      	ldr	r3, [r7, #0]
 80218b8:	3304      	adds	r3, #4
 80218ba:	681a      	ldr	r2, [r3, #0]
 80218bc:	4b2d      	ldr	r3, [pc, #180]	@ (8021974 <udp_input+0x218>)
 80218be:	695b      	ldr	r3, [r3, #20]
 80218c0:	429a      	cmp	r2, r3
 80218c2:	bf0c      	ite	eq
 80218c4:	2301      	moveq	r3, #1
 80218c6:	2300      	movne	r3, #0
 80218c8:	b2db      	uxtb	r3, r3
 80218ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80218cc:	7efb      	ldrb	r3, [r7, #27]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d041      	beq.n	8021956 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80218d2:	2108      	movs	r1, #8
 80218d4:	6878      	ldr	r0, [r7, #4]
 80218d6:	f7f9 f89d 	bl	801aa14 <pbuf_remove_header>
 80218da:	4603      	mov	r3, r0
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d00a      	beq.n	80218f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80218e0:	4b20      	ldr	r3, [pc, #128]	@ (8021964 <udp_input+0x208>)
 80218e2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80218e6:	4925      	ldr	r1, [pc, #148]	@ (802197c <udp_input+0x220>)
 80218e8:	4820      	ldr	r0, [pc, #128]	@ (802196c <udp_input+0x210>)
 80218ea:	f001 f825 	bl	8022938 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80218ee:	6878      	ldr	r0, [r7, #4]
 80218f0:	f7f9 f948 	bl	801ab84 <pbuf_free>
      goto end;
 80218f4:	e032      	b.n	802195c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80218f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d012      	beq.n	8021922 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80218fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218fe:	6a1b      	ldr	r3, [r3, #32]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d00a      	beq.n	802191a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021906:	6a1c      	ldr	r4, [r3, #32]
 8021908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802190a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 802190c:	8a3b      	ldrh	r3, [r7, #16]
 802190e:	9300      	str	r3, [sp, #0]
 8021910:	4b1b      	ldr	r3, [pc, #108]	@ (8021980 <udp_input+0x224>)
 8021912:	687a      	ldr	r2, [r7, #4]
 8021914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021916:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8021918:	e021      	b.n	802195e <udp_input+0x202>
        pbuf_free(p);
 802191a:	6878      	ldr	r0, [r7, #4]
 802191c:	f7f9 f932 	bl	801ab84 <pbuf_free>
        goto end;
 8021920:	e01c      	b.n	802195c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021922:	7cfb      	ldrb	r3, [r7, #19]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d112      	bne.n	802194e <udp_input+0x1f2>
 8021928:	4b12      	ldr	r3, [pc, #72]	@ (8021974 <udp_input+0x218>)
 802192a:	695b      	ldr	r3, [r3, #20]
 802192c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021930:	2be0      	cmp	r3, #224	@ 0xe0
 8021932:	d00c      	beq.n	802194e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8021934:	4b0f      	ldr	r3, [pc, #60]	@ (8021974 <udp_input+0x218>)
 8021936:	899b      	ldrh	r3, [r3, #12]
 8021938:	3308      	adds	r3, #8
 802193a:	b29b      	uxth	r3, r3
 802193c:	b21b      	sxth	r3, r3
 802193e:	4619      	mov	r1, r3
 8021940:	6878      	ldr	r0, [r7, #4]
 8021942:	f7f9 f8da 	bl	801aafa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8021946:	2103      	movs	r1, #3
 8021948:	6878      	ldr	r0, [r7, #4]
 802194a:	f7f5 fc31 	bl	80171b0 <icmp_dest_unreach>
      pbuf_free(p);
 802194e:	6878      	ldr	r0, [r7, #4]
 8021950:	f7f9 f918 	bl	801ab84 <pbuf_free>
  return;
 8021954:	e003      	b.n	802195e <udp_input+0x202>
    pbuf_free(p);
 8021956:	6878      	ldr	r0, [r7, #4]
 8021958:	f7f9 f914 	bl	801ab84 <pbuf_free>
  return;
 802195c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802195e:	372c      	adds	r7, #44	@ 0x2c
 8021960:	46bd      	mov	sp, r7
 8021962:	bd90      	pop	{r4, r7, pc}
 8021964:	080280cc 	.word	0x080280cc
 8021968:	080281b4 	.word	0x080281b4
 802196c:	08028164 	.word	0x08028164
 8021970:	080281cc 	.word	0x080281cc
 8021974:	20008ebc 	.word	0x20008ebc
 8021978:	20010074 	.word	0x20010074
 802197c:	080281e8 	.word	0x080281e8
 8021980:	20008ecc 	.word	0x20008ecc

08021984 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8021984:	b580      	push	{r7, lr}
 8021986:	b082      	sub	sp, #8
 8021988:	af00      	add	r7, sp, #0
 802198a:	6078      	str	r0, [r7, #4]
 802198c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d109      	bne.n	80219a8 <udp_send+0x24>
 8021994:	4b11      	ldr	r3, [pc, #68]	@ (80219dc <udp_send+0x58>)
 8021996:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802199a:	4911      	ldr	r1, [pc, #68]	@ (80219e0 <udp_send+0x5c>)
 802199c:	4811      	ldr	r0, [pc, #68]	@ (80219e4 <udp_send+0x60>)
 802199e:	f000 ffcb 	bl	8022938 <iprintf>
 80219a2:	f06f 030f 	mvn.w	r3, #15
 80219a6:	e015      	b.n	80219d4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80219a8:	683b      	ldr	r3, [r7, #0]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d109      	bne.n	80219c2 <udp_send+0x3e>
 80219ae:	4b0b      	ldr	r3, [pc, #44]	@ (80219dc <udp_send+0x58>)
 80219b0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80219b4:	490c      	ldr	r1, [pc, #48]	@ (80219e8 <udp_send+0x64>)
 80219b6:	480b      	ldr	r0, [pc, #44]	@ (80219e4 <udp_send+0x60>)
 80219b8:	f000 ffbe 	bl	8022938 <iprintf>
 80219bc:	f06f 030f 	mvn.w	r3, #15
 80219c0:	e008      	b.n	80219d4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	1d1a      	adds	r2, r3, #4
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	8a9b      	ldrh	r3, [r3, #20]
 80219ca:	6839      	ldr	r1, [r7, #0]
 80219cc:	6878      	ldr	r0, [r7, #4]
 80219ce:	f000 f80d 	bl	80219ec <udp_sendto>
 80219d2:	4603      	mov	r3, r0
}
 80219d4:	4618      	mov	r0, r3
 80219d6:	3708      	adds	r7, #8
 80219d8:	46bd      	mov	sp, r7
 80219da:	bd80      	pop	{r7, pc}
 80219dc:	080280cc 	.word	0x080280cc
 80219e0:	08028204 	.word	0x08028204
 80219e4:	08028164 	.word	0x08028164
 80219e8:	0802821c 	.word	0x0802821c

080219ec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b088      	sub	sp, #32
 80219f0:	af02      	add	r7, sp, #8
 80219f2:	60f8      	str	r0, [r7, #12]
 80219f4:	60b9      	str	r1, [r7, #8]
 80219f6:	607a      	str	r2, [r7, #4]
 80219f8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	2b00      	cmp	r3, #0
 80219fe:	d109      	bne.n	8021a14 <udp_sendto+0x28>
 8021a00:	4b36      	ldr	r3, [pc, #216]	@ (8021adc <udp_sendto+0xf0>)
 8021a02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8021a06:	4936      	ldr	r1, [pc, #216]	@ (8021ae0 <udp_sendto+0xf4>)
 8021a08:	4836      	ldr	r0, [pc, #216]	@ (8021ae4 <udp_sendto+0xf8>)
 8021a0a:	f000 ff95 	bl	8022938 <iprintf>
 8021a0e:	f06f 030f 	mvn.w	r3, #15
 8021a12:	e05e      	b.n	8021ad2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021a14:	68bb      	ldr	r3, [r7, #8]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d109      	bne.n	8021a2e <udp_sendto+0x42>
 8021a1a:	4b30      	ldr	r3, [pc, #192]	@ (8021adc <udp_sendto+0xf0>)
 8021a1c:	f240 2219 	movw	r2, #537	@ 0x219
 8021a20:	4931      	ldr	r1, [pc, #196]	@ (8021ae8 <udp_sendto+0xfc>)
 8021a22:	4830      	ldr	r0, [pc, #192]	@ (8021ae4 <udp_sendto+0xf8>)
 8021a24:	f000 ff88 	bl	8022938 <iprintf>
 8021a28:	f06f 030f 	mvn.w	r3, #15
 8021a2c:	e051      	b.n	8021ad2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d109      	bne.n	8021a48 <udp_sendto+0x5c>
 8021a34:	4b29      	ldr	r3, [pc, #164]	@ (8021adc <udp_sendto+0xf0>)
 8021a36:	f240 221a 	movw	r2, #538	@ 0x21a
 8021a3a:	492c      	ldr	r1, [pc, #176]	@ (8021aec <udp_sendto+0x100>)
 8021a3c:	4829      	ldr	r0, [pc, #164]	@ (8021ae4 <udp_sendto+0xf8>)
 8021a3e:	f000 ff7b 	bl	8022938 <iprintf>
 8021a42:	f06f 030f 	mvn.w	r3, #15
 8021a46:	e044      	b.n	8021ad2 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	7a1b      	ldrb	r3, [r3, #8]
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d006      	beq.n	8021a5e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	7a1b      	ldrb	r3, [r3, #8]
 8021a54:	4618      	mov	r0, r3
 8021a56:	f7f8 fcd5 	bl	801a404 <netif_get_by_index>
 8021a5a:	6178      	str	r0, [r7, #20]
 8021a5c:	e029      	b.n	8021ab2 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 8021a5e:	2300      	movs	r3, #0
 8021a60:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021a6a:	2be0      	cmp	r3, #224	@ 0xe0
 8021a6c:	d11a      	bne.n	8021aa4 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	7f1b      	ldrb	r3, [r3, #28]
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d006      	beq.n	8021a84 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8021a76:	68fb      	ldr	r3, [r7, #12]
 8021a78:	7f1b      	ldrb	r3, [r3, #28]
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	f7f8 fcc2 	bl	801a404 <netif_get_by_index>
 8021a80:	6178      	str	r0, [r7, #20]
 8021a82:	e00f      	b.n	8021aa4 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8021a84:	68fb      	ldr	r3, [r7, #12]
 8021a86:	699b      	ldr	r3, [r3, #24]
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	d00b      	beq.n	8021aa4 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8021a8c:	68fb      	ldr	r3, [r7, #12]
 8021a8e:	699a      	ldr	r2, [r3, #24]
 8021a90:	4b17      	ldr	r3, [pc, #92]	@ (8021af0 <udp_sendto+0x104>)
 8021a92:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8021a94:	429a      	cmp	r2, r3
 8021a96:	d005      	beq.n	8021aa4 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8021a98:	68fb      	ldr	r3, [r7, #12]
 8021a9a:	3318      	adds	r3, #24
 8021a9c:	4618      	mov	r0, r3
 8021a9e:	f7f6 f8a5 	bl	8017bec <ip4_route>
 8021aa2:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8021aa4:	697b      	ldr	r3, [r7, #20]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d103      	bne.n	8021ab2 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8021aaa:	6878      	ldr	r0, [r7, #4]
 8021aac:	f7f6 f89e 	bl	8017bec <ip4_route>
 8021ab0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8021ab2:	697b      	ldr	r3, [r7, #20]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d102      	bne.n	8021abe <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8021ab8:	f06f 0303 	mvn.w	r3, #3
 8021abc:	e009      	b.n	8021ad2 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021abe:	887a      	ldrh	r2, [r7, #2]
 8021ac0:	697b      	ldr	r3, [r7, #20]
 8021ac2:	9300      	str	r3, [sp, #0]
 8021ac4:	4613      	mov	r3, r2
 8021ac6:	687a      	ldr	r2, [r7, #4]
 8021ac8:	68b9      	ldr	r1, [r7, #8]
 8021aca:	68f8      	ldr	r0, [r7, #12]
 8021acc:	f000 f812 	bl	8021af4 <udp_sendto_if>
 8021ad0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021ad2:	4618      	mov	r0, r3
 8021ad4:	3718      	adds	r7, #24
 8021ad6:	46bd      	mov	sp, r7
 8021ad8:	bd80      	pop	{r7, pc}
 8021ada:	bf00      	nop
 8021adc:	080280cc 	.word	0x080280cc
 8021ae0:	08028234 	.word	0x08028234
 8021ae4:	08028164 	.word	0x08028164
 8021ae8:	0802824c 	.word	0x0802824c
 8021aec:	08028268 	.word	0x08028268
 8021af0:	08028c1c 	.word	0x08028c1c

08021af4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b088      	sub	sp, #32
 8021af8:	af02      	add	r7, sp, #8
 8021afa:	60f8      	str	r0, [r7, #12]
 8021afc:	60b9      	str	r1, [r7, #8]
 8021afe:	607a      	str	r2, [r7, #4]
 8021b00:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021b02:	68fb      	ldr	r3, [r7, #12]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d109      	bne.n	8021b1c <udp_sendto_if+0x28>
 8021b08:	4b2e      	ldr	r3, [pc, #184]	@ (8021bc4 <udp_sendto_if+0xd0>)
 8021b0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021b0e:	492e      	ldr	r1, [pc, #184]	@ (8021bc8 <udp_sendto_if+0xd4>)
 8021b10:	482e      	ldr	r0, [pc, #184]	@ (8021bcc <udp_sendto_if+0xd8>)
 8021b12:	f000 ff11 	bl	8022938 <iprintf>
 8021b16:	f06f 030f 	mvn.w	r3, #15
 8021b1a:	e04f      	b.n	8021bbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8021b1c:	68bb      	ldr	r3, [r7, #8]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d109      	bne.n	8021b36 <udp_sendto_if+0x42>
 8021b22:	4b28      	ldr	r3, [pc, #160]	@ (8021bc4 <udp_sendto_if+0xd0>)
 8021b24:	f240 2281 	movw	r2, #641	@ 0x281
 8021b28:	4929      	ldr	r1, [pc, #164]	@ (8021bd0 <udp_sendto_if+0xdc>)
 8021b2a:	4828      	ldr	r0, [pc, #160]	@ (8021bcc <udp_sendto_if+0xd8>)
 8021b2c:	f000 ff04 	bl	8022938 <iprintf>
 8021b30:	f06f 030f 	mvn.w	r3, #15
 8021b34:	e042      	b.n	8021bbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d109      	bne.n	8021b50 <udp_sendto_if+0x5c>
 8021b3c:	4b21      	ldr	r3, [pc, #132]	@ (8021bc4 <udp_sendto_if+0xd0>)
 8021b3e:	f240 2282 	movw	r2, #642	@ 0x282
 8021b42:	4924      	ldr	r1, [pc, #144]	@ (8021bd4 <udp_sendto_if+0xe0>)
 8021b44:	4821      	ldr	r0, [pc, #132]	@ (8021bcc <udp_sendto_if+0xd8>)
 8021b46:	f000 fef7 	bl	8022938 <iprintf>
 8021b4a:	f06f 030f 	mvn.w	r3, #15
 8021b4e:	e035      	b.n	8021bbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021b50:	6a3b      	ldr	r3, [r7, #32]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d109      	bne.n	8021b6a <udp_sendto_if+0x76>
 8021b56:	4b1b      	ldr	r3, [pc, #108]	@ (8021bc4 <udp_sendto_if+0xd0>)
 8021b58:	f240 2283 	movw	r2, #643	@ 0x283
 8021b5c:	491e      	ldr	r1, [pc, #120]	@ (8021bd8 <udp_sendto_if+0xe4>)
 8021b5e:	481b      	ldr	r0, [pc, #108]	@ (8021bcc <udp_sendto_if+0xd8>)
 8021b60:	f000 feea 	bl	8022938 <iprintf>
 8021b64:	f06f 030f 	mvn.w	r3, #15
 8021b68:	e028      	b.n	8021bbc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b6a:	68fb      	ldr	r3, [r7, #12]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d009      	beq.n	8021b84 <udp_sendto_if+0x90>
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d005      	beq.n	8021b84 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b80:	2be0      	cmp	r3, #224	@ 0xe0
 8021b82:	d103      	bne.n	8021b8c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8021b84:	6a3b      	ldr	r3, [r7, #32]
 8021b86:	3304      	adds	r3, #4
 8021b88:	617b      	str	r3, [r7, #20]
 8021b8a:	e00b      	b.n	8021ba4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	681a      	ldr	r2, [r3, #0]
 8021b90:	6a3b      	ldr	r3, [r7, #32]
 8021b92:	3304      	adds	r3, #4
 8021b94:	681b      	ldr	r3, [r3, #0]
 8021b96:	429a      	cmp	r2, r3
 8021b98:	d002      	beq.n	8021ba0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8021b9a:	f06f 0303 	mvn.w	r3, #3
 8021b9e:	e00d      	b.n	8021bbc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8021ba4:	887a      	ldrh	r2, [r7, #2]
 8021ba6:	697b      	ldr	r3, [r7, #20]
 8021ba8:	9301      	str	r3, [sp, #4]
 8021baa:	6a3b      	ldr	r3, [r7, #32]
 8021bac:	9300      	str	r3, [sp, #0]
 8021bae:	4613      	mov	r3, r2
 8021bb0:	687a      	ldr	r2, [r7, #4]
 8021bb2:	68b9      	ldr	r1, [r7, #8]
 8021bb4:	68f8      	ldr	r0, [r7, #12]
 8021bb6:	f000 f811 	bl	8021bdc <udp_sendto_if_src>
 8021bba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021bbc:	4618      	mov	r0, r3
 8021bbe:	3718      	adds	r7, #24
 8021bc0:	46bd      	mov	sp, r7
 8021bc2:	bd80      	pop	{r7, pc}
 8021bc4:	080280cc 	.word	0x080280cc
 8021bc8:	08028284 	.word	0x08028284
 8021bcc:	08028164 	.word	0x08028164
 8021bd0:	080282a0 	.word	0x080282a0
 8021bd4:	080282bc 	.word	0x080282bc
 8021bd8:	080282dc 	.word	0x080282dc

08021bdc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	b08c      	sub	sp, #48	@ 0x30
 8021be0:	af04      	add	r7, sp, #16
 8021be2:	60f8      	str	r0, [r7, #12]
 8021be4:	60b9      	str	r1, [r7, #8]
 8021be6:	607a      	str	r2, [r7, #4]
 8021be8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021bea:	68fb      	ldr	r3, [r7, #12]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d109      	bne.n	8021c04 <udp_sendto_if_src+0x28>
 8021bf0:	4b73      	ldr	r3, [pc, #460]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021bf2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8021bf6:	4973      	ldr	r1, [pc, #460]	@ (8021dc4 <udp_sendto_if_src+0x1e8>)
 8021bf8:	4873      	ldr	r0, [pc, #460]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021bfa:	f000 fe9d 	bl	8022938 <iprintf>
 8021bfe:	f06f 030f 	mvn.w	r3, #15
 8021c02:	e0d8      	b.n	8021db6 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021c04:	68bb      	ldr	r3, [r7, #8]
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	d109      	bne.n	8021c1e <udp_sendto_if_src+0x42>
 8021c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021c0c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8021c10:	496e      	ldr	r1, [pc, #440]	@ (8021dcc <udp_sendto_if_src+0x1f0>)
 8021c12:	486d      	ldr	r0, [pc, #436]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021c14:	f000 fe90 	bl	8022938 <iprintf>
 8021c18:	f06f 030f 	mvn.w	r3, #15
 8021c1c:	e0cb      	b.n	8021db6 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d109      	bne.n	8021c38 <udp_sendto_if_src+0x5c>
 8021c24:	4b66      	ldr	r3, [pc, #408]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021c26:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8021c2a:	4969      	ldr	r1, [pc, #420]	@ (8021dd0 <udp_sendto_if_src+0x1f4>)
 8021c2c:	4866      	ldr	r0, [pc, #408]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021c2e:	f000 fe83 	bl	8022938 <iprintf>
 8021c32:	f06f 030f 	mvn.w	r3, #15
 8021c36:	e0be      	b.n	8021db6 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d109      	bne.n	8021c52 <udp_sendto_if_src+0x76>
 8021c3e:	4b60      	ldr	r3, [pc, #384]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021c40:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8021c44:	4963      	ldr	r1, [pc, #396]	@ (8021dd4 <udp_sendto_if_src+0x1f8>)
 8021c46:	4860      	ldr	r0, [pc, #384]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021c48:	f000 fe76 	bl	8022938 <iprintf>
 8021c4c:	f06f 030f 	mvn.w	r3, #15
 8021c50:	e0b1      	b.n	8021db6 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	d109      	bne.n	8021c6c <udp_sendto_if_src+0x90>
 8021c58:	4b59      	ldr	r3, [pc, #356]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021c5a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8021c5e:	495e      	ldr	r1, [pc, #376]	@ (8021dd8 <udp_sendto_if_src+0x1fc>)
 8021c60:	4859      	ldr	r0, [pc, #356]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021c62:	f000 fe69 	bl	8022938 <iprintf>
 8021c66:	f06f 030f 	mvn.w	r3, #15
 8021c6a:	e0a4      	b.n	8021db6 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	8a5b      	ldrh	r3, [r3, #18]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d10f      	bne.n	8021c94 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021c74:	68f9      	ldr	r1, [r7, #12]
 8021c76:	68fb      	ldr	r3, [r7, #12]
 8021c78:	8a5b      	ldrh	r3, [r3, #18]
 8021c7a:	461a      	mov	r2, r3
 8021c7c:	68f8      	ldr	r0, [r7, #12]
 8021c7e:	f000 f8af 	bl	8021de0 <udp_bind>
 8021c82:	4603      	mov	r3, r0
 8021c84:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021c86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d002      	beq.n	8021c94 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8021c8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c92:	e090      	b.n	8021db6 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021c94:	68bb      	ldr	r3, [r7, #8]
 8021c96:	891b      	ldrh	r3, [r3, #8]
 8021c98:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8021c9c:	4293      	cmp	r3, r2
 8021c9e:	d902      	bls.n	8021ca6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8021ca4:	e087      	b.n	8021db6 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021ca6:	2108      	movs	r1, #8
 8021ca8:	68b8      	ldr	r0, [r7, #8]
 8021caa:	f7f8 fea3 	bl	801a9f4 <pbuf_add_header>
 8021cae:	4603      	mov	r3, r0
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d015      	beq.n	8021ce0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021cb4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021cb8:	2108      	movs	r1, #8
 8021cba:	2022      	movs	r0, #34	@ 0x22
 8021cbc:	f7f8 fc4c 	bl	801a558 <pbuf_alloc>
 8021cc0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021cc2:	69fb      	ldr	r3, [r7, #28]
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d102      	bne.n	8021cce <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8021ccc:	e073      	b.n	8021db6 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8021cce:	68bb      	ldr	r3, [r7, #8]
 8021cd0:	891b      	ldrh	r3, [r3, #8]
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d006      	beq.n	8021ce4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021cd6:	68b9      	ldr	r1, [r7, #8]
 8021cd8:	69f8      	ldr	r0, [r7, #28]
 8021cda:	f7f9 f877 	bl	801adcc <pbuf_chain>
 8021cde:	e001      	b.n	8021ce4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021ce0:	68bb      	ldr	r3, [r7, #8]
 8021ce2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021ce4:	69fb      	ldr	r3, [r7, #28]
 8021ce6:	895b      	ldrh	r3, [r3, #10]
 8021ce8:	2b07      	cmp	r3, #7
 8021cea:	d806      	bhi.n	8021cfa <udp_sendto_if_src+0x11e>
 8021cec:	4b34      	ldr	r3, [pc, #208]	@ (8021dc0 <udp_sendto_if_src+0x1e4>)
 8021cee:	f240 320d 	movw	r2, #781	@ 0x30d
 8021cf2:	493a      	ldr	r1, [pc, #232]	@ (8021ddc <udp_sendto_if_src+0x200>)
 8021cf4:	4834      	ldr	r0, [pc, #208]	@ (8021dc8 <udp_sendto_if_src+0x1ec>)
 8021cf6:	f000 fe1f 	bl	8022938 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8021cfa:	69fb      	ldr	r3, [r7, #28]
 8021cfc:	685b      	ldr	r3, [r3, #4]
 8021cfe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021d00:	68fb      	ldr	r3, [r7, #12]
 8021d02:	8a5b      	ldrh	r3, [r3, #18]
 8021d04:	4618      	mov	r0, r3
 8021d06:	f7f7 fa8b 	bl	8019220 <lwip_htons>
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	461a      	mov	r2, r3
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021d12:	887b      	ldrh	r3, [r7, #2]
 8021d14:	4618      	mov	r0, r3
 8021d16:	f7f7 fa83 	bl	8019220 <lwip_htons>
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	461a      	mov	r2, r3
 8021d1e:	697b      	ldr	r3, [r7, #20]
 8021d20:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021d22:	697b      	ldr	r3, [r7, #20]
 8021d24:	2200      	movs	r2, #0
 8021d26:	719a      	strb	r2, [r3, #6]
 8021d28:	2200      	movs	r2, #0
 8021d2a:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	7c1b      	ldrb	r3, [r3, #16]
 8021d30:	f003 0308 	and.w	r3, r3, #8
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d00c      	beq.n	8021d52 <udp_sendto_if_src+0x176>
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021d40:	2be0      	cmp	r3, #224	@ 0xe0
 8021d42:	d106      	bne.n	8021d52 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8021d44:	69fb      	ldr	r3, [r7, #28]
 8021d46:	7b5b      	ldrb	r3, [r3, #13]
 8021d48:	f043 0304 	orr.w	r3, r3, #4
 8021d4c:	b2da      	uxtb	r2, r3
 8021d4e:	69fb      	ldr	r3, [r7, #28]
 8021d50:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8021d52:	69fb      	ldr	r3, [r7, #28]
 8021d54:	891b      	ldrh	r3, [r3, #8]
 8021d56:	4618      	mov	r0, r3
 8021d58:	f7f7 fa62 	bl	8019220 <lwip_htons>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	461a      	mov	r2, r3
 8021d60:	697b      	ldr	r3, [r7, #20]
 8021d62:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8021d64:	2311      	movs	r3, #17
 8021d66:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	681b      	ldr	r3, [r3, #0]
 8021d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021d70:	2be0      	cmp	r3, #224	@ 0xe0
 8021d72:	d102      	bne.n	8021d7a <udp_sendto_if_src+0x19e>
 8021d74:	68fb      	ldr	r3, [r7, #12]
 8021d76:	7f5b      	ldrb	r3, [r3, #29]
 8021d78:	e001      	b.n	8021d7e <udp_sendto_if_src+0x1a2>
 8021d7a:	68fb      	ldr	r3, [r7, #12]
 8021d7c:	7adb      	ldrb	r3, [r3, #11]
 8021d7e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	7a9b      	ldrb	r3, [r3, #10]
 8021d84:	7cb9      	ldrb	r1, [r7, #18]
 8021d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021d88:	9202      	str	r2, [sp, #8]
 8021d8a:	7cfa      	ldrb	r2, [r7, #19]
 8021d8c:	9201      	str	r2, [sp, #4]
 8021d8e:	9300      	str	r3, [sp, #0]
 8021d90:	460b      	mov	r3, r1
 8021d92:	687a      	ldr	r2, [r7, #4]
 8021d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021d96:	69f8      	ldr	r0, [r7, #28]
 8021d98:	f7f6 f995 	bl	80180c6 <ip4_output_if_src>
 8021d9c:	4603      	mov	r3, r0
 8021d9e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021da0:	69fa      	ldr	r2, [r7, #28]
 8021da2:	68bb      	ldr	r3, [r7, #8]
 8021da4:	429a      	cmp	r2, r3
 8021da6:	d004      	beq.n	8021db2 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8021da8:	69f8      	ldr	r0, [r7, #28]
 8021daa:	f7f8 feeb 	bl	801ab84 <pbuf_free>
    q = NULL;
 8021dae:	2300      	movs	r3, #0
 8021db0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8021db2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3720      	adds	r7, #32
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	bd80      	pop	{r7, pc}
 8021dbe:	bf00      	nop
 8021dc0:	080280cc 	.word	0x080280cc
 8021dc4:	080282fc 	.word	0x080282fc
 8021dc8:	08028164 	.word	0x08028164
 8021dcc:	0802831c 	.word	0x0802831c
 8021dd0:	0802833c 	.word	0x0802833c
 8021dd4:	08028360 	.word	0x08028360
 8021dd8:	08028384 	.word	0x08028384
 8021ddc:	080283a8 	.word	0x080283a8

08021de0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b086      	sub	sp, #24
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	60f8      	str	r0, [r7, #12]
 8021de8:	60b9      	str	r1, [r7, #8]
 8021dea:	4613      	mov	r3, r2
 8021dec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021dee:	68bb      	ldr	r3, [r7, #8]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d101      	bne.n	8021df8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8021df4:	4b39      	ldr	r3, [pc, #228]	@ (8021edc <udp_bind+0xfc>)
 8021df6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d109      	bne.n	8021e12 <udp_bind+0x32>
 8021dfe:	4b38      	ldr	r3, [pc, #224]	@ (8021ee0 <udp_bind+0x100>)
 8021e00:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8021e04:	4937      	ldr	r1, [pc, #220]	@ (8021ee4 <udp_bind+0x104>)
 8021e06:	4838      	ldr	r0, [pc, #224]	@ (8021ee8 <udp_bind+0x108>)
 8021e08:	f000 fd96 	bl	8022938 <iprintf>
 8021e0c:	f06f 030f 	mvn.w	r3, #15
 8021e10:	e060      	b.n	8021ed4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8021e12:	2300      	movs	r3, #0
 8021e14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e16:	4b35      	ldr	r3, [pc, #212]	@ (8021eec <udp_bind+0x10c>)
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	617b      	str	r3, [r7, #20]
 8021e1c:	e009      	b.n	8021e32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021e1e:	68fa      	ldr	r2, [r7, #12]
 8021e20:	697b      	ldr	r3, [r7, #20]
 8021e22:	429a      	cmp	r2, r3
 8021e24:	d102      	bne.n	8021e2c <udp_bind+0x4c>
      rebind = 1;
 8021e26:	2301      	movs	r3, #1
 8021e28:	74fb      	strb	r3, [r7, #19]
      break;
 8021e2a:	e005      	b.n	8021e38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e2c:	697b      	ldr	r3, [r7, #20]
 8021e2e:	68db      	ldr	r3, [r3, #12]
 8021e30:	617b      	str	r3, [r7, #20]
 8021e32:	697b      	ldr	r3, [r7, #20]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d1f2      	bne.n	8021e1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021e38:	88fb      	ldrh	r3, [r7, #6]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d109      	bne.n	8021e52 <udp_bind+0x72>
    port = udp_new_port();
 8021e3e:	f7ff fbf1 	bl	8021624 <udp_new_port>
 8021e42:	4603      	mov	r3, r0
 8021e44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8021e46:	88fb      	ldrh	r3, [r7, #6]
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d12c      	bne.n	8021ea6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021e4c:	f06f 0307 	mvn.w	r3, #7
 8021e50:	e040      	b.n	8021ed4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e52:	4b26      	ldr	r3, [pc, #152]	@ (8021eec <udp_bind+0x10c>)
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	617b      	str	r3, [r7, #20]
 8021e58:	e022      	b.n	8021ea0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021e5a:	68fa      	ldr	r2, [r7, #12]
 8021e5c:	697b      	ldr	r3, [r7, #20]
 8021e5e:	429a      	cmp	r2, r3
 8021e60:	d01b      	beq.n	8021e9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8021e62:	697b      	ldr	r3, [r7, #20]
 8021e64:	8a5b      	ldrh	r3, [r3, #18]
 8021e66:	88fa      	ldrh	r2, [r7, #6]
 8021e68:	429a      	cmp	r2, r3
 8021e6a:	d116      	bne.n	8021e9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e6c:	697b      	ldr	r3, [r7, #20]
 8021e6e:	681a      	ldr	r2, [r3, #0]
 8021e70:	68bb      	ldr	r3, [r7, #8]
 8021e72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8021e74:	429a      	cmp	r2, r3
 8021e76:	d00d      	beq.n	8021e94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e78:	68bb      	ldr	r3, [r7, #8]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d00a      	beq.n	8021e94 <udp_bind+0xb4>
 8021e7e:	68bb      	ldr	r3, [r7, #8]
 8021e80:	681b      	ldr	r3, [r3, #0]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d006      	beq.n	8021e94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d003      	beq.n	8021e94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e8c:	697b      	ldr	r3, [r7, #20]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	2b00      	cmp	r3, #0
 8021e92:	d102      	bne.n	8021e9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8021e94:	f06f 0307 	mvn.w	r3, #7
 8021e98:	e01c      	b.n	8021ed4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e9a:	697b      	ldr	r3, [r7, #20]
 8021e9c:	68db      	ldr	r3, [r3, #12]
 8021e9e:	617b      	str	r3, [r7, #20]
 8021ea0:	697b      	ldr	r3, [r7, #20]
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d1d9      	bne.n	8021e5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021ea6:	68bb      	ldr	r3, [r7, #8]
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d002      	beq.n	8021eb2 <udp_bind+0xd2>
 8021eac:	68bb      	ldr	r3, [r7, #8]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	e000      	b.n	8021eb4 <udp_bind+0xd4>
 8021eb2:	2300      	movs	r3, #0
 8021eb4:	68fa      	ldr	r2, [r7, #12]
 8021eb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021eb8:	68fb      	ldr	r3, [r7, #12]
 8021eba:	88fa      	ldrh	r2, [r7, #6]
 8021ebc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021ebe:	7cfb      	ldrb	r3, [r7, #19]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d106      	bne.n	8021ed2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8021ec4:	4b09      	ldr	r3, [pc, #36]	@ (8021eec <udp_bind+0x10c>)
 8021ec6:	681a      	ldr	r2, [r3, #0]
 8021ec8:	68fb      	ldr	r3, [r7, #12]
 8021eca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021ecc:	4a07      	ldr	r2, [pc, #28]	@ (8021eec <udp_bind+0x10c>)
 8021ece:	68fb      	ldr	r3, [r7, #12]
 8021ed0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8021ed2:	2300      	movs	r3, #0
}
 8021ed4:	4618      	mov	r0, r3
 8021ed6:	3718      	adds	r7, #24
 8021ed8:	46bd      	mov	sp, r7
 8021eda:	bd80      	pop	{r7, pc}
 8021edc:	08028c18 	.word	0x08028c18
 8021ee0:	080280cc 	.word	0x080280cc
 8021ee4:	080283d8 	.word	0x080283d8
 8021ee8:	08028164 	.word	0x08028164
 8021eec:	20010074 	.word	0x20010074

08021ef0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021ef0:	b580      	push	{r7, lr}
 8021ef2:	b086      	sub	sp, #24
 8021ef4:	af00      	add	r7, sp, #0
 8021ef6:	60f8      	str	r0, [r7, #12]
 8021ef8:	60b9      	str	r1, [r7, #8]
 8021efa:	4613      	mov	r3, r2
 8021efc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8021efe:	68fb      	ldr	r3, [r7, #12]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d109      	bne.n	8021f18 <udp_connect+0x28>
 8021f04:	4b2c      	ldr	r3, [pc, #176]	@ (8021fb8 <udp_connect+0xc8>)
 8021f06:	f240 4235 	movw	r2, #1077	@ 0x435
 8021f0a:	492c      	ldr	r1, [pc, #176]	@ (8021fbc <udp_connect+0xcc>)
 8021f0c:	482c      	ldr	r0, [pc, #176]	@ (8021fc0 <udp_connect+0xd0>)
 8021f0e:	f000 fd13 	bl	8022938 <iprintf>
 8021f12:	f06f 030f 	mvn.w	r3, #15
 8021f16:	e04b      	b.n	8021fb0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021f18:	68bb      	ldr	r3, [r7, #8]
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d109      	bne.n	8021f32 <udp_connect+0x42>
 8021f1e:	4b26      	ldr	r3, [pc, #152]	@ (8021fb8 <udp_connect+0xc8>)
 8021f20:	f240 4236 	movw	r2, #1078	@ 0x436
 8021f24:	4927      	ldr	r1, [pc, #156]	@ (8021fc4 <udp_connect+0xd4>)
 8021f26:	4826      	ldr	r0, [pc, #152]	@ (8021fc0 <udp_connect+0xd0>)
 8021f28:	f000 fd06 	bl	8022938 <iprintf>
 8021f2c:	f06f 030f 	mvn.w	r3, #15
 8021f30:	e03e      	b.n	8021fb0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8021f32:	68fb      	ldr	r3, [r7, #12]
 8021f34:	8a5b      	ldrh	r3, [r3, #18]
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d10f      	bne.n	8021f5a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021f3a:	68f9      	ldr	r1, [r7, #12]
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	8a5b      	ldrh	r3, [r3, #18]
 8021f40:	461a      	mov	r2, r3
 8021f42:	68f8      	ldr	r0, [r7, #12]
 8021f44:	f7ff ff4c 	bl	8021de0 <udp_bind>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8021f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d002      	beq.n	8021f5a <udp_connect+0x6a>
      return err;
 8021f54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021f58:	e02a      	b.n	8021fb0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8021f5a:	68bb      	ldr	r3, [r7, #8]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d002      	beq.n	8021f66 <udp_connect+0x76>
 8021f60:	68bb      	ldr	r3, [r7, #8]
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	e000      	b.n	8021f68 <udp_connect+0x78>
 8021f66:	2300      	movs	r3, #0
 8021f68:	68fa      	ldr	r2, [r7, #12]
 8021f6a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	88fa      	ldrh	r2, [r7, #6]
 8021f70:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8021f72:	68fb      	ldr	r3, [r7, #12]
 8021f74:	7c1b      	ldrb	r3, [r3, #16]
 8021f76:	f043 0304 	orr.w	r3, r3, #4
 8021f7a:	b2da      	uxtb	r2, r3
 8021f7c:	68fb      	ldr	r3, [r7, #12]
 8021f7e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021f80:	4b11      	ldr	r3, [pc, #68]	@ (8021fc8 <udp_connect+0xd8>)
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	617b      	str	r3, [r7, #20]
 8021f86:	e008      	b.n	8021f9a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8021f88:	68fa      	ldr	r2, [r7, #12]
 8021f8a:	697b      	ldr	r3, [r7, #20]
 8021f8c:	429a      	cmp	r2, r3
 8021f8e:	d101      	bne.n	8021f94 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8021f90:	2300      	movs	r3, #0
 8021f92:	e00d      	b.n	8021fb0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021f94:	697b      	ldr	r3, [r7, #20]
 8021f96:	68db      	ldr	r3, [r3, #12]
 8021f98:	617b      	str	r3, [r7, #20]
 8021f9a:	697b      	ldr	r3, [r7, #20]
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d1f3      	bne.n	8021f88 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8021fa0:	4b09      	ldr	r3, [pc, #36]	@ (8021fc8 <udp_connect+0xd8>)
 8021fa2:	681a      	ldr	r2, [r3, #0]
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8021fa8:	4a07      	ldr	r2, [pc, #28]	@ (8021fc8 <udp_connect+0xd8>)
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8021fae:	2300      	movs	r3, #0
}
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	3718      	adds	r7, #24
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}
 8021fb8:	080280cc 	.word	0x080280cc
 8021fbc:	080283f0 	.word	0x080283f0
 8021fc0:	08028164 	.word	0x08028164
 8021fc4:	0802840c 	.word	0x0802840c
 8021fc8:	20010074 	.word	0x20010074

08021fcc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8021fcc:	b580      	push	{r7, lr}
 8021fce:	b082      	sub	sp, #8
 8021fd0:	af00      	add	r7, sp, #0
 8021fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	d107      	bne.n	8021fea <udp_disconnect+0x1e>
 8021fda:	4b0d      	ldr	r3, [pc, #52]	@ (8022010 <udp_disconnect+0x44>)
 8021fdc:	f240 426a 	movw	r2, #1130	@ 0x46a
 8021fe0:	490c      	ldr	r1, [pc, #48]	@ (8022014 <udp_disconnect+0x48>)
 8021fe2:	480d      	ldr	r0, [pc, #52]	@ (8022018 <udp_disconnect+0x4c>)
 8021fe4:	f000 fca8 	bl	8022938 <iprintf>
 8021fe8:	e00f      	b.n	802200a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	2200      	movs	r2, #0
 8021fee:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	2200      	movs	r2, #0
 8021ff4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	2200      	movs	r2, #0
 8021ffa:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	7c1b      	ldrb	r3, [r3, #16]
 8022000:	f023 0304 	bic.w	r3, r3, #4
 8022004:	b2da      	uxtb	r2, r3
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	741a      	strb	r2, [r3, #16]
}
 802200a:	3708      	adds	r7, #8
 802200c:	46bd      	mov	sp, r7
 802200e:	bd80      	pop	{r7, pc}
 8022010:	080280cc 	.word	0x080280cc
 8022014:	08028428 	.word	0x08028428
 8022018:	08028164 	.word	0x08028164

0802201c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b084      	sub	sp, #16
 8022020:	af00      	add	r7, sp, #0
 8022022:	60f8      	str	r0, [r7, #12]
 8022024:	60b9      	str	r1, [r7, #8]
 8022026:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	2b00      	cmp	r3, #0
 802202c:	d107      	bne.n	802203e <udp_recv+0x22>
 802202e:	4b08      	ldr	r3, [pc, #32]	@ (8022050 <udp_recv+0x34>)
 8022030:	f240 428a 	movw	r2, #1162	@ 0x48a
 8022034:	4907      	ldr	r1, [pc, #28]	@ (8022054 <udp_recv+0x38>)
 8022036:	4808      	ldr	r0, [pc, #32]	@ (8022058 <udp_recv+0x3c>)
 8022038:	f000 fc7e 	bl	8022938 <iprintf>
 802203c:	e005      	b.n	802204a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802203e:	68fb      	ldr	r3, [r7, #12]
 8022040:	68ba      	ldr	r2, [r7, #8]
 8022042:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	687a      	ldr	r2, [r7, #4]
 8022048:	625a      	str	r2, [r3, #36]	@ 0x24
}
 802204a:	3710      	adds	r7, #16
 802204c:	46bd      	mov	sp, r7
 802204e:	bd80      	pop	{r7, pc}
 8022050:	080280cc 	.word	0x080280cc
 8022054:	08028444 	.word	0x08028444
 8022058:	08028164 	.word	0x08028164

0802205c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	b084      	sub	sp, #16
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d107      	bne.n	802207a <udp_remove+0x1e>
 802206a:	4b19      	ldr	r3, [pc, #100]	@ (80220d0 <udp_remove+0x74>)
 802206c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8022070:	4918      	ldr	r1, [pc, #96]	@ (80220d4 <udp_remove+0x78>)
 8022072:	4819      	ldr	r0, [pc, #100]	@ (80220d8 <udp_remove+0x7c>)
 8022074:	f000 fc60 	bl	8022938 <iprintf>
 8022078:	e026      	b.n	80220c8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802207a:	4b18      	ldr	r3, [pc, #96]	@ (80220dc <udp_remove+0x80>)
 802207c:	681b      	ldr	r3, [r3, #0]
 802207e:	687a      	ldr	r2, [r7, #4]
 8022080:	429a      	cmp	r2, r3
 8022082:	d105      	bne.n	8022090 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8022084:	4b15      	ldr	r3, [pc, #84]	@ (80220dc <udp_remove+0x80>)
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	68db      	ldr	r3, [r3, #12]
 802208a:	4a14      	ldr	r2, [pc, #80]	@ (80220dc <udp_remove+0x80>)
 802208c:	6013      	str	r3, [r2, #0]
 802208e:	e017      	b.n	80220c0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022090:	4b12      	ldr	r3, [pc, #72]	@ (80220dc <udp_remove+0x80>)
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	60fb      	str	r3, [r7, #12]
 8022096:	e010      	b.n	80220ba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	68db      	ldr	r3, [r3, #12]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d009      	beq.n	80220b4 <udp_remove+0x58>
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	68db      	ldr	r3, [r3, #12]
 80220a4:	687a      	ldr	r2, [r7, #4]
 80220a6:	429a      	cmp	r2, r3
 80220a8:	d104      	bne.n	80220b4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	68da      	ldr	r2, [r3, #12]
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	60da      	str	r2, [r3, #12]
        break;
 80220b2:	e005      	b.n	80220c0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	68db      	ldr	r3, [r3, #12]
 80220b8:	60fb      	str	r3, [r7, #12]
 80220ba:	68fb      	ldr	r3, [r7, #12]
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d1eb      	bne.n	8022098 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80220c0:	6879      	ldr	r1, [r7, #4]
 80220c2:	2000      	movs	r0, #0
 80220c4:	f7f7 fe66 	bl	8019d94 <memp_free>
}
 80220c8:	3710      	adds	r7, #16
 80220ca:	46bd      	mov	sp, r7
 80220cc:	bd80      	pop	{r7, pc}
 80220ce:	bf00      	nop
 80220d0:	080280cc 	.word	0x080280cc
 80220d4:	0802845c 	.word	0x0802845c
 80220d8:	08028164 	.word	0x08028164
 80220dc:	20010074 	.word	0x20010074

080220e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b082      	sub	sp, #8
 80220e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80220e6:	2000      	movs	r0, #0
 80220e8:	f7f7 fdde 	bl	8019ca8 <memp_malloc>
 80220ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d00a      	beq.n	802210a <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80220f4:	2228      	movs	r2, #40	@ 0x28
 80220f6:	2100      	movs	r1, #0
 80220f8:	6878      	ldr	r0, [r7, #4]
 80220fa:	f000 fdaf 	bl	8022c5c <memset>
    pcb->ttl = UDP_TTL;
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	22ff      	movs	r2, #255	@ 0xff
 8022102:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	22ff      	movs	r2, #255	@ 0xff
 8022108:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 802210a:	687b      	ldr	r3, [r7, #4]
}
 802210c:	4618      	mov	r0, r3
 802210e:	3708      	adds	r7, #8
 8022110:	46bd      	mov	sp, r7
 8022112:	bd80      	pop	{r7, pc}

08022114 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8022114:	b580      	push	{r7, lr}
 8022116:	b084      	sub	sp, #16
 8022118:	af00      	add	r7, sp, #0
 802211a:	4603      	mov	r3, r0
 802211c:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 802211e:	f7ff ffdf 	bl	80220e0 <udp_new>
 8022122:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8022124:	68fb      	ldr	r3, [r7, #12]
}
 8022126:	4618      	mov	r0, r3
 8022128:	3710      	adds	r7, #16
 802212a:	46bd      	mov	sp, r7
 802212c:	bd80      	pop	{r7, pc}
	...

08022130 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8022130:	b480      	push	{r7}
 8022132:	b085      	sub	sp, #20
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
 8022138:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	2b00      	cmp	r3, #0
 802213e:	d01e      	beq.n	802217e <udp_netif_ip_addr_changed+0x4e>
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	681b      	ldr	r3, [r3, #0]
 8022144:	2b00      	cmp	r3, #0
 8022146:	d01a      	beq.n	802217e <udp_netif_ip_addr_changed+0x4e>
 8022148:	683b      	ldr	r3, [r7, #0]
 802214a:	2b00      	cmp	r3, #0
 802214c:	d017      	beq.n	802217e <udp_netif_ip_addr_changed+0x4e>
 802214e:	683b      	ldr	r3, [r7, #0]
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	2b00      	cmp	r3, #0
 8022154:	d013      	beq.n	802217e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022156:	4b0d      	ldr	r3, [pc, #52]	@ (802218c <udp_netif_ip_addr_changed+0x5c>)
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	60fb      	str	r3, [r7, #12]
 802215c:	e00c      	b.n	8022178 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802215e:	68fb      	ldr	r3, [r7, #12]
 8022160:	681a      	ldr	r2, [r3, #0]
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	429a      	cmp	r2, r3
 8022168:	d103      	bne.n	8022172 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	681a      	ldr	r2, [r3, #0]
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022172:	68fb      	ldr	r3, [r7, #12]
 8022174:	68db      	ldr	r3, [r3, #12]
 8022176:	60fb      	str	r3, [r7, #12]
 8022178:	68fb      	ldr	r3, [r7, #12]
 802217a:	2b00      	cmp	r3, #0
 802217c:	d1ef      	bne.n	802215e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802217e:	bf00      	nop
 8022180:	3714      	adds	r7, #20
 8022182:	46bd      	mov	sp, r7
 8022184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022188:	4770      	bx	lr
 802218a:	bf00      	nop
 802218c:	20010074 	.word	0x20010074

08022190 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022190:	b580      	push	{r7, lr}
 8022192:	b086      	sub	sp, #24
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
 8022198:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802219a:	230e      	movs	r3, #14
 802219c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	895b      	ldrh	r3, [r3, #10]
 80221a2:	2b0e      	cmp	r3, #14
 80221a4:	d96e      	bls.n	8022284 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	7bdb      	ldrb	r3, [r3, #15]
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	d106      	bne.n	80221bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80221ae:	683b      	ldr	r3, [r7, #0]
 80221b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80221b4:	3301      	adds	r3, #1
 80221b6:	b2da      	uxtb	r2, r3
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	685b      	ldr	r3, [r3, #4]
 80221c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80221c2:	693b      	ldr	r3, [r7, #16]
 80221c4:	7b1a      	ldrb	r2, [r3, #12]
 80221c6:	7b5b      	ldrb	r3, [r3, #13]
 80221c8:	021b      	lsls	r3, r3, #8
 80221ca:	4313      	orrs	r3, r2
 80221cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80221ce:	693b      	ldr	r3, [r7, #16]
 80221d0:	781b      	ldrb	r3, [r3, #0]
 80221d2:	f003 0301 	and.w	r3, r3, #1
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d023      	beq.n	8022222 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80221da:	693b      	ldr	r3, [r7, #16]
 80221dc:	781b      	ldrb	r3, [r3, #0]
 80221de:	2b01      	cmp	r3, #1
 80221e0:	d10f      	bne.n	8022202 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221e2:	693b      	ldr	r3, [r7, #16]
 80221e4:	785b      	ldrb	r3, [r3, #1]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d11b      	bne.n	8022222 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80221ea:	693b      	ldr	r3, [r7, #16]
 80221ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80221f0:	d117      	bne.n	8022222 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	7b5b      	ldrb	r3, [r3, #13]
 80221f6:	f043 0310 	orr.w	r3, r3, #16
 80221fa:	b2da      	uxtb	r2, r3
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	735a      	strb	r2, [r3, #13]
 8022200:	e00f      	b.n	8022222 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022202:	693b      	ldr	r3, [r7, #16]
 8022204:	2206      	movs	r2, #6
 8022206:	4928      	ldr	r1, [pc, #160]	@ (80222a8 <ethernet_input+0x118>)
 8022208:	4618      	mov	r0, r3
 802220a:	f000 fcfd 	bl	8022c08 <memcmp>
 802220e:	4603      	mov	r3, r0
 8022210:	2b00      	cmp	r3, #0
 8022212:	d106      	bne.n	8022222 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	7b5b      	ldrb	r3, [r3, #13]
 8022218:	f043 0308 	orr.w	r3, r3, #8
 802221c:	b2da      	uxtb	r2, r3
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022222:	89fb      	ldrh	r3, [r7, #14]
 8022224:	2b08      	cmp	r3, #8
 8022226:	d003      	beq.n	8022230 <ethernet_input+0xa0>
 8022228:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 802222c:	d014      	beq.n	8022258 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802222e:	e032      	b.n	8022296 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022230:	683b      	ldr	r3, [r7, #0]
 8022232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8022236:	f003 0308 	and.w	r3, r3, #8
 802223a:	2b00      	cmp	r3, #0
 802223c:	d024      	beq.n	8022288 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802223e:	8afb      	ldrh	r3, [r7, #22]
 8022240:	4619      	mov	r1, r3
 8022242:	6878      	ldr	r0, [r7, #4]
 8022244:	f7f8 fbe6 	bl	801aa14 <pbuf_remove_header>
 8022248:	4603      	mov	r3, r0
 802224a:	2b00      	cmp	r3, #0
 802224c:	d11e      	bne.n	802228c <ethernet_input+0xfc>
        ip4_input(p, netif);
 802224e:	6839      	ldr	r1, [r7, #0]
 8022250:	6878      	ldr	r0, [r7, #4]
 8022252:	f7f5 fd73 	bl	8017d3c <ip4_input>
      break;
 8022256:	e013      	b.n	8022280 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022258:	683b      	ldr	r3, [r7, #0]
 802225a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802225e:	f003 0308 	and.w	r3, r3, #8
 8022262:	2b00      	cmp	r3, #0
 8022264:	d014      	beq.n	8022290 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022266:	8afb      	ldrh	r3, [r7, #22]
 8022268:	4619      	mov	r1, r3
 802226a:	6878      	ldr	r0, [r7, #4]
 802226c:	f7f8 fbd2 	bl	801aa14 <pbuf_remove_header>
 8022270:	4603      	mov	r3, r0
 8022272:	2b00      	cmp	r3, #0
 8022274:	d10e      	bne.n	8022294 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022276:	6839      	ldr	r1, [r7, #0]
 8022278:	6878      	ldr	r0, [r7, #4]
 802227a:	f7f4 fa5b 	bl	8016734 <etharp_input>
      break;
 802227e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022280:	2300      	movs	r3, #0
 8022282:	e00c      	b.n	802229e <ethernet_input+0x10e>
    goto free_and_return;
 8022284:	bf00      	nop
 8022286:	e006      	b.n	8022296 <ethernet_input+0x106>
        goto free_and_return;
 8022288:	bf00      	nop
 802228a:	e004      	b.n	8022296 <ethernet_input+0x106>
        goto free_and_return;
 802228c:	bf00      	nop
 802228e:	e002      	b.n	8022296 <ethernet_input+0x106>
        goto free_and_return;
 8022290:	bf00      	nop
 8022292:	e000      	b.n	8022296 <ethernet_input+0x106>
        goto free_and_return;
 8022294:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022296:	6878      	ldr	r0, [r7, #4]
 8022298:	f7f8 fc74 	bl	801ab84 <pbuf_free>
  return ERR_OK;
 802229c:	2300      	movs	r3, #0
}
 802229e:	4618      	mov	r0, r3
 80222a0:	3718      	adds	r7, #24
 80222a2:	46bd      	mov	sp, r7
 80222a4:	bd80      	pop	{r7, pc}
 80222a6:	bf00      	nop
 80222a8:	08028d58 	.word	0x08028d58

080222ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b086      	sub	sp, #24
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	60f8      	str	r0, [r7, #12]
 80222b4:	60b9      	str	r1, [r7, #8]
 80222b6:	607a      	str	r2, [r7, #4]
 80222b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80222ba:	8c3b      	ldrh	r3, [r7, #32]
 80222bc:	4618      	mov	r0, r3
 80222be:	f7f6 ffaf 	bl	8019220 <lwip_htons>
 80222c2:	4603      	mov	r3, r0
 80222c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80222c6:	210e      	movs	r1, #14
 80222c8:	68b8      	ldr	r0, [r7, #8]
 80222ca:	f7f8 fb93 	bl	801a9f4 <pbuf_add_header>
 80222ce:	4603      	mov	r3, r0
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d125      	bne.n	8022320 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80222d4:	68bb      	ldr	r3, [r7, #8]
 80222d6:	685b      	ldr	r3, [r3, #4]
 80222d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80222da:	693b      	ldr	r3, [r7, #16]
 80222dc:	8afa      	ldrh	r2, [r7, #22]
 80222de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80222e0:	693b      	ldr	r3, [r7, #16]
 80222e2:	2206      	movs	r2, #6
 80222e4:	6839      	ldr	r1, [r7, #0]
 80222e6:	4618      	mov	r0, r3
 80222e8:	f000 fd5d 	bl	8022da6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80222ec:	693b      	ldr	r3, [r7, #16]
 80222ee:	3306      	adds	r3, #6
 80222f0:	2206      	movs	r2, #6
 80222f2:	6879      	ldr	r1, [r7, #4]
 80222f4:	4618      	mov	r0, r3
 80222f6:	f000 fd56 	bl	8022da6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80222fa:	68fb      	ldr	r3, [r7, #12]
 80222fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8022300:	2b06      	cmp	r3, #6
 8022302:	d006      	beq.n	8022312 <ethernet_output+0x66>
 8022304:	4b0a      	ldr	r3, [pc, #40]	@ (8022330 <ethernet_output+0x84>)
 8022306:	f44f 7299 	mov.w	r2, #306	@ 0x132
 802230a:	490a      	ldr	r1, [pc, #40]	@ (8022334 <ethernet_output+0x88>)
 802230c:	480a      	ldr	r0, [pc, #40]	@ (8022338 <ethernet_output+0x8c>)
 802230e:	f000 fb13 	bl	8022938 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022312:	68fb      	ldr	r3, [r7, #12]
 8022314:	699b      	ldr	r3, [r3, #24]
 8022316:	68b9      	ldr	r1, [r7, #8]
 8022318:	68f8      	ldr	r0, [r7, #12]
 802231a:	4798      	blx	r3
 802231c:	4603      	mov	r3, r0
 802231e:	e002      	b.n	8022326 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022320:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022322:	f06f 0301 	mvn.w	r3, #1
}
 8022326:	4618      	mov	r0, r3
 8022328:	3718      	adds	r7, #24
 802232a:	46bd      	mov	sp, r7
 802232c:	bd80      	pop	{r7, pc}
 802232e:	bf00      	nop
 8022330:	08028474 	.word	0x08028474
 8022334:	080284ec 	.word	0x080284ec
 8022338:	08028520 	.word	0x08028520

0802233c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802233c:	b580      	push	{r7, lr}
 802233e:	b082      	sub	sp, #8
 8022340:	af00      	add	r7, sp, #0
 8022342:	6078      	str	r0, [r7, #4]
 8022344:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8022346:	683b      	ldr	r3, [r7, #0]
 8022348:	2200      	movs	r2, #0
 802234a:	2104      	movs	r1, #4
 802234c:	4618      	mov	r0, r3
 802234e:	f7ed fac7 	bl	800f8e0 <osMessageQueueNew>
 8022352:	4602      	mov	r2, r0
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	2b00      	cmp	r3, #0
 802235e:	d102      	bne.n	8022366 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8022360:	f04f 33ff 	mov.w	r3, #4294967295
 8022364:	e000      	b.n	8022368 <sys_mbox_new+0x2c>

  return ERR_OK;
 8022366:	2300      	movs	r3, #0
}
 8022368:	4618      	mov	r0, r3
 802236a:	3708      	adds	r7, #8
 802236c:	46bd      	mov	sp, r7
 802236e:	bd80      	pop	{r7, pc}

08022370 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022370:	b580      	push	{r7, lr}
 8022372:	b082      	sub	sp, #8
 8022374:	af00      	add	r7, sp, #0
 8022376:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	4618      	mov	r0, r3
 802237e:	f7ed fbe1 	bl	800fb44 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	4618      	mov	r0, r3
 8022388:	f7ed fbfc 	bl	800fb84 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 802238c:	bf00      	nop
 802238e:	3708      	adds	r7, #8
 8022390:	46bd      	mov	sp, r7
 8022392:	bd80      	pop	{r7, pc}

08022394 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	b084      	sub	sp, #16
 8022398:	af00      	add	r7, sp, #0
 802239a:	6078      	str	r0, [r7, #4]
 802239c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	6818      	ldr	r0, [r3, #0]
 80223a2:	4639      	mov	r1, r7
 80223a4:	2300      	movs	r3, #0
 80223a6:	2200      	movs	r2, #0
 80223a8:	f7ed fb0e 	bl	800f9c8 <osMessageQueuePut>
 80223ac:	4603      	mov	r3, r0
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	d102      	bne.n	80223b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80223b2:	2300      	movs	r3, #0
 80223b4:	73fb      	strb	r3, [r7, #15]
 80223b6:	e001      	b.n	80223bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80223b8:	23ff      	movs	r3, #255	@ 0xff
 80223ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80223bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80223c0:	4618      	mov	r0, r3
 80223c2:	3710      	adds	r7, #16
 80223c4:	46bd      	mov	sp, r7
 80223c6:	bd80      	pop	{r7, pc}

080223c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80223c8:	b580      	push	{r7, lr}
 80223ca:	b086      	sub	sp, #24
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	60f8      	str	r0, [r7, #12]
 80223d0:	60b9      	str	r1, [r7, #8]
 80223d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80223d4:	f7ec ff42 	bl	800f25c <osKernelGetTickCount>
 80223d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d013      	beq.n	8022408 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80223e0:	68fb      	ldr	r3, [r7, #12]
 80223e2:	6818      	ldr	r0, [r3, #0]
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	2200      	movs	r2, #0
 80223e8:	68b9      	ldr	r1, [r7, #8]
 80223ea:	f7ed fb4d 	bl	800fa88 <osMessageQueueGet>
 80223ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80223f0:	693b      	ldr	r3, [r7, #16]
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	d105      	bne.n	8022402 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80223f6:	f7ec ff31 	bl	800f25c <osKernelGetTickCount>
 80223fa:	4602      	mov	r2, r0
 80223fc:	697b      	ldr	r3, [r7, #20]
 80223fe:	1ad3      	subs	r3, r2, r3
 8022400:	e00f      	b.n	8022422 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022402:	f04f 33ff 	mov.w	r3, #4294967295
 8022406:	e00c      	b.n	8022422 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8022408:	68fb      	ldr	r3, [r7, #12]
 802240a:	6818      	ldr	r0, [r3, #0]
 802240c:	f04f 33ff 	mov.w	r3, #4294967295
 8022410:	2200      	movs	r2, #0
 8022412:	68b9      	ldr	r1, [r7, #8]
 8022414:	f7ed fb38 	bl	800fa88 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8022418:	f7ec ff20 	bl	800f25c <osKernelGetTickCount>
 802241c:	4602      	mov	r2, r0
 802241e:	697b      	ldr	r3, [r7, #20]
 8022420:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8022422:	4618      	mov	r0, r3
 8022424:	3718      	adds	r7, #24
 8022426:	46bd      	mov	sp, r7
 8022428:	bd80      	pop	{r7, pc}

0802242a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 802242a:	b580      	push	{r7, lr}
 802242c:	b082      	sub	sp, #8
 802242e:	af00      	add	r7, sp, #0
 8022430:	6078      	str	r0, [r7, #4]
 8022432:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	6818      	ldr	r0, [r3, #0]
 8022438:	2300      	movs	r3, #0
 802243a:	2200      	movs	r2, #0
 802243c:	6839      	ldr	r1, [r7, #0]
 802243e:	f7ed fb23 	bl	800fa88 <osMessageQueueGet>
 8022442:	4603      	mov	r3, r0
 8022444:	2b00      	cmp	r3, #0
 8022446:	d101      	bne.n	802244c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8022448:	2300      	movs	r3, #0
 802244a:	e001      	b.n	8022450 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 802244c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022450:	4618      	mov	r0, r3
 8022452:	3708      	adds	r7, #8
 8022454:	46bd      	mov	sp, r7
 8022456:	bd80      	pop	{r7, pc}

08022458 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022458:	b480      	push	{r7}
 802245a:	b083      	sub	sp, #12
 802245c:	af00      	add	r7, sp, #0
 802245e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	2b00      	cmp	r3, #0
 8022466:	d101      	bne.n	802246c <sys_mbox_valid+0x14>
    return 0;
 8022468:	2300      	movs	r3, #0
 802246a:	e000      	b.n	802246e <sys_mbox_valid+0x16>
  else
    return 1;
 802246c:	2301      	movs	r3, #1
}
 802246e:	4618      	mov	r0, r3
 8022470:	370c      	adds	r7, #12
 8022472:	46bd      	mov	sp, r7
 8022474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022478:	4770      	bx	lr

0802247a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 802247a:	b480      	push	{r7}
 802247c:	b083      	sub	sp, #12
 802247e:	af00      	add	r7, sp, #0
 8022480:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	2200      	movs	r2, #0
 8022486:	601a      	str	r2, [r3, #0]
}
 8022488:	bf00      	nop
 802248a:	370c      	adds	r7, #12
 802248c:	46bd      	mov	sp, r7
 802248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022492:	4770      	bx	lr

08022494 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b082      	sub	sp, #8
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
 802249c:	460b      	mov	r3, r1
 802249e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80224a0:	78fb      	ldrb	r3, [r7, #3]
 80224a2:	2200      	movs	r2, #0
 80224a4:	4619      	mov	r1, r3
 80224a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80224aa:	f7ed f8d5 	bl	800f658 <osSemaphoreNew>
 80224ae:	4602      	mov	r2, r0
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	681b      	ldr	r3, [r3, #0]
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	d102      	bne.n	80224c2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80224bc:	f04f 33ff 	mov.w	r3, #4294967295
 80224c0:	e009      	b.n	80224d6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80224c2:	78fb      	ldrb	r3, [r7, #3]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d105      	bne.n	80224d4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	2100      	movs	r1, #0
 80224ce:	4618      	mov	r0, r3
 80224d0:	f7ed f94c 	bl	800f76c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80224d4:	2300      	movs	r3, #0
}
 80224d6:	4618      	mov	r0, r3
 80224d8:	3708      	adds	r7, #8
 80224da:	46bd      	mov	sp, r7
 80224dc:	bd80      	pop	{r7, pc}

080224de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80224de:	b580      	push	{r7, lr}
 80224e0:	b084      	sub	sp, #16
 80224e2:	af00      	add	r7, sp, #0
 80224e4:	6078      	str	r0, [r7, #4]
 80224e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80224e8:	f7ec feb8 	bl	800f25c <osKernelGetTickCount>
 80224ec:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80224ee:	683b      	ldr	r3, [r7, #0]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d011      	beq.n	8022518 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	6839      	ldr	r1, [r7, #0]
 80224fa:	4618      	mov	r0, r3
 80224fc:	f7ed f936 	bl	800f76c <osSemaphoreAcquire>
 8022500:	4603      	mov	r3, r0
 8022502:	2b00      	cmp	r3, #0
 8022504:	d105      	bne.n	8022512 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8022506:	f7ec fea9 	bl	800f25c <osKernelGetTickCount>
 802250a:	4602      	mov	r2, r0
 802250c:	68fb      	ldr	r3, [r7, #12]
 802250e:	1ad3      	subs	r3, r2, r3
 8022510:	e012      	b.n	8022538 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022512:	f04f 33ff 	mov.w	r3, #4294967295
 8022516:	e00f      	b.n	8022538 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8022518:	bf00      	nop
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	f04f 31ff 	mov.w	r1, #4294967295
 8022522:	4618      	mov	r0, r3
 8022524:	f7ed f922 	bl	800f76c <osSemaphoreAcquire>
 8022528:	4603      	mov	r3, r0
 802252a:	2b00      	cmp	r3, #0
 802252c:	d1f5      	bne.n	802251a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 802252e:	f7ec fe95 	bl	800f25c <osKernelGetTickCount>
 8022532:	4602      	mov	r2, r0
 8022534:	68fb      	ldr	r3, [r7, #12]
 8022536:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8022538:	4618      	mov	r0, r3
 802253a:	3710      	adds	r7, #16
 802253c:	46bd      	mov	sp, r7
 802253e:	bd80      	pop	{r7, pc}

08022540 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022540:	b580      	push	{r7, lr}
 8022542:	b082      	sub	sp, #8
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	4618      	mov	r0, r3
 802254e:	f7ed f95f 	bl	800f810 <osSemaphoreRelease>
}
 8022552:	bf00      	nop
 8022554:	3708      	adds	r7, #8
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}

0802255a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802255a:	b580      	push	{r7, lr}
 802255c:	b082      	sub	sp, #8
 802255e:	af00      	add	r7, sp, #0
 8022560:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	4618      	mov	r0, r3
 8022568:	f7ed f996 	bl	800f898 <osSemaphoreDelete>
}
 802256c:	bf00      	nop
 802256e:	3708      	adds	r7, #8
 8022570:	46bd      	mov	sp, r7
 8022572:	bd80      	pop	{r7, pc}

08022574 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022574:	b480      	push	{r7}
 8022576:	b083      	sub	sp, #12
 8022578:	af00      	add	r7, sp, #0
 802257a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	681b      	ldr	r3, [r3, #0]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d101      	bne.n	8022588 <sys_sem_valid+0x14>
    return 0;
 8022584:	2300      	movs	r3, #0
 8022586:	e000      	b.n	802258a <sys_sem_valid+0x16>
  else
    return 1;
 8022588:	2301      	movs	r3, #1
}
 802258a:	4618      	mov	r0, r3
 802258c:	370c      	adds	r7, #12
 802258e:	46bd      	mov	sp, r7
 8022590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022594:	4770      	bx	lr

08022596 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022596:	b480      	push	{r7}
 8022598:	b083      	sub	sp, #12
 802259a:	af00      	add	r7, sp, #0
 802259c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	2200      	movs	r2, #0
 80225a2:	601a      	str	r2, [r3, #0]
}
 80225a4:	bf00      	nop
 80225a6:	370c      	adds	r7, #12
 80225a8:	46bd      	mov	sp, r7
 80225aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ae:	4770      	bx	lr

080225b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80225b0:	b580      	push	{r7, lr}
 80225b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80225b4:	2000      	movs	r0, #0
 80225b6:	f7ec ff41 	bl	800f43c <osMutexNew>
 80225ba:	4603      	mov	r3, r0
 80225bc:	4a01      	ldr	r2, [pc, #4]	@ (80225c4 <sys_init+0x14>)
 80225be:	6013      	str	r3, [r2, #0]
#endif
}
 80225c0:	bf00      	nop
 80225c2:	bd80      	pop	{r7, pc}
 80225c4:	2001007c 	.word	0x2001007c

080225c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80225c8:	b580      	push	{r7, lr}
 80225ca:	b082      	sub	sp, #8
 80225cc:	af00      	add	r7, sp, #0
 80225ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80225d0:	2000      	movs	r0, #0
 80225d2:	f7ec ff33 	bl	800f43c <osMutexNew>
 80225d6:	4602      	mov	r2, r0
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d102      	bne.n	80225ea <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80225e4:	f04f 33ff 	mov.w	r3, #4294967295
 80225e8:	e000      	b.n	80225ec <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80225ea:	2300      	movs	r3, #0
}
 80225ec:	4618      	mov	r0, r3
 80225ee:	3708      	adds	r7, #8
 80225f0:	46bd      	mov	sp, r7
 80225f2:	bd80      	pop	{r7, pc}

080225f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80225f4:	b580      	push	{r7, lr}
 80225f6:	b082      	sub	sp, #8
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	f04f 31ff 	mov.w	r1, #4294967295
 8022604:	4618      	mov	r0, r3
 8022606:	f7ec ff9f 	bl	800f548 <osMutexAcquire>
#endif
}
 802260a:	bf00      	nop
 802260c:	3708      	adds	r7, #8
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}

08022612 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022612:	b580      	push	{r7, lr}
 8022614:	b082      	sub	sp, #8
 8022616:	af00      	add	r7, sp, #0
 8022618:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	681b      	ldr	r3, [r3, #0]
 802261e:	4618      	mov	r0, r3
 8022620:	f7ec ffdd 	bl	800f5de <osMutexRelease>
}
 8022624:	bf00      	nop
 8022626:	3708      	adds	r7, #8
 8022628:	46bd      	mov	sp, r7
 802262a:	bd80      	pop	{r7, pc}

0802262c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b08e      	sub	sp, #56	@ 0x38
 8022630:	af00      	add	r7, sp, #0
 8022632:	60f8      	str	r0, [r7, #12]
 8022634:	60b9      	str	r1, [r7, #8]
 8022636:	607a      	str	r2, [r7, #4]
 8022638:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 802263a:	f107 0314 	add.w	r3, r7, #20
 802263e:	2224      	movs	r2, #36	@ 0x24
 8022640:	2100      	movs	r1, #0
 8022642:	4618      	mov	r0, r3
 8022644:	f000 fb0a 	bl	8022c5c <memset>
 8022648:	68fb      	ldr	r3, [r7, #12]
 802264a:	617b      	str	r3, [r7, #20]
 802264c:	683b      	ldr	r3, [r7, #0]
 802264e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022652:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8022654:	f107 0314 	add.w	r3, r7, #20
 8022658:	461a      	mov	r2, r3
 802265a:	6879      	ldr	r1, [r7, #4]
 802265c:	68b8      	ldr	r0, [r7, #8]
 802265e:	f7ec fe12 	bl	800f286 <osThreadNew>
 8022662:	4603      	mov	r3, r0
#endif
}
 8022664:	4618      	mov	r0, r3
 8022666:	3738      	adds	r7, #56	@ 0x38
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}

0802266c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 802266c:	b580      	push	{r7, lr}
 802266e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8022670:	4b04      	ldr	r3, [pc, #16]	@ (8022684 <sys_arch_protect+0x18>)
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	f04f 31ff 	mov.w	r1, #4294967295
 8022678:	4618      	mov	r0, r3
 802267a:	f7ec ff65 	bl	800f548 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 802267e:	2301      	movs	r3, #1
}
 8022680:	4618      	mov	r0, r3
 8022682:	bd80      	pop	{r7, pc}
 8022684:	2001007c 	.word	0x2001007c

08022688 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b082      	sub	sp, #8
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022690:	4b04      	ldr	r3, [pc, #16]	@ (80226a4 <sys_arch_unprotect+0x1c>)
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	4618      	mov	r0, r3
 8022696:	f7ec ffa2 	bl	800f5de <osMutexRelease>
}
 802269a:	bf00      	nop
 802269c:	3708      	adds	r7, #8
 802269e:	46bd      	mov	sp, r7
 80226a0:	bd80      	pop	{r7, pc}
 80226a2:	bf00      	nop
 80226a4:	2001007c 	.word	0x2001007c

080226a8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80226a8:	b580      	push	{r7, lr}
 80226aa:	b084      	sub	sp, #16
 80226ac:	af00      	add	r7, sp, #0
 80226ae:	6078      	str	r0, [r7, #4]
 80226b0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d002      	beq.n	80226be <fs_open+0x16>
 80226b8:	683b      	ldr	r3, [r7, #0]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d102      	bne.n	80226c4 <fs_open+0x1c>
    return ERR_ARG;
 80226be:	f06f 030f 	mvn.w	r3, #15
 80226c2:	e028      	b.n	8022716 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80226c4:	4b16      	ldr	r3, [pc, #88]	@ (8022720 <fs_open+0x78>)
 80226c6:	60fb      	str	r3, [r7, #12]
 80226c8:	e020      	b.n	802270c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80226ca:	68fb      	ldr	r3, [r7, #12]
 80226cc:	685b      	ldr	r3, [r3, #4]
 80226ce:	4619      	mov	r1, r3
 80226d0:	6838      	ldr	r0, [r7, #0]
 80226d2:	f7dd fe1d 	bl	8000310 <strcmp>
 80226d6:	4603      	mov	r3, r0
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d114      	bne.n	8022706 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	689a      	ldr	r2, [r3, #8]
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	68da      	ldr	r2, [r3, #12]
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	68da      	ldr	r2, [r3, #12]
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	2200      	movs	r2, #0
 80226f8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	7c1a      	ldrb	r2, [r3, #16]
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8022702:	2300      	movs	r3, #0
 8022704:	e007      	b.n	8022716 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8022706:	68fb      	ldr	r3, [r7, #12]
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	60fb      	str	r3, [r7, #12]
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d1db      	bne.n	80226ca <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8022712:	f06f 0305 	mvn.w	r3, #5
}
 8022716:	4618      	mov	r0, r3
 8022718:	3710      	adds	r7, #16
 802271a:	46bd      	mov	sp, r7
 802271c:	bd80      	pop	{r7, pc}
 802271e:	bf00      	nop
 8022720:	08038e0c 	.word	0x08038e0c

08022724 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8022724:	b480      	push	{r7}
 8022726:	b083      	sub	sp, #12
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 802272c:	bf00      	nop
 802272e:	370c      	adds	r7, #12
 8022730:	46bd      	mov	sp, r7
 8022732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022736:	4770      	bx	lr

08022738 <rand>:
 8022738:	4b16      	ldr	r3, [pc, #88]	@ (8022794 <rand+0x5c>)
 802273a:	b510      	push	{r4, lr}
 802273c:	681c      	ldr	r4, [r3, #0]
 802273e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022740:	b9b3      	cbnz	r3, 8022770 <rand+0x38>
 8022742:	2018      	movs	r0, #24
 8022744:	f000 fba6 	bl	8022e94 <malloc>
 8022748:	4602      	mov	r2, r0
 802274a:	6320      	str	r0, [r4, #48]	@ 0x30
 802274c:	b920      	cbnz	r0, 8022758 <rand+0x20>
 802274e:	4b12      	ldr	r3, [pc, #72]	@ (8022798 <rand+0x60>)
 8022750:	4812      	ldr	r0, [pc, #72]	@ (802279c <rand+0x64>)
 8022752:	2152      	movs	r1, #82	@ 0x52
 8022754:	f000 fb36 	bl	8022dc4 <__assert_func>
 8022758:	4911      	ldr	r1, [pc, #68]	@ (80227a0 <rand+0x68>)
 802275a:	4b12      	ldr	r3, [pc, #72]	@ (80227a4 <rand+0x6c>)
 802275c:	e9c0 1300 	strd	r1, r3, [r0]
 8022760:	4b11      	ldr	r3, [pc, #68]	@ (80227a8 <rand+0x70>)
 8022762:	6083      	str	r3, [r0, #8]
 8022764:	230b      	movs	r3, #11
 8022766:	8183      	strh	r3, [r0, #12]
 8022768:	2100      	movs	r1, #0
 802276a:	2001      	movs	r0, #1
 802276c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022770:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022772:	480e      	ldr	r0, [pc, #56]	@ (80227ac <rand+0x74>)
 8022774:	690b      	ldr	r3, [r1, #16]
 8022776:	694c      	ldr	r4, [r1, #20]
 8022778:	4a0d      	ldr	r2, [pc, #52]	@ (80227b0 <rand+0x78>)
 802277a:	4358      	muls	r0, r3
 802277c:	fb02 0004 	mla	r0, r2, r4, r0
 8022780:	fba3 3202 	umull	r3, r2, r3, r2
 8022784:	3301      	adds	r3, #1
 8022786:	eb40 0002 	adc.w	r0, r0, r2
 802278a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802278e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8022792:	bd10      	pop	{r4, pc}
 8022794:	20000050 	.word	0x20000050
 8022798:	08038e20 	.word	0x08038e20
 802279c:	08038e37 	.word	0x08038e37
 80227a0:	abcd330e 	.word	0xabcd330e
 80227a4:	e66d1234 	.word	0xe66d1234
 80227a8:	0005deec 	.word	0x0005deec
 80227ac:	5851f42d 	.word	0x5851f42d
 80227b0:	4c957f2d 	.word	0x4c957f2d

080227b4 <std>:
 80227b4:	2300      	movs	r3, #0
 80227b6:	b510      	push	{r4, lr}
 80227b8:	4604      	mov	r4, r0
 80227ba:	e9c0 3300 	strd	r3, r3, [r0]
 80227be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80227c2:	6083      	str	r3, [r0, #8]
 80227c4:	8181      	strh	r1, [r0, #12]
 80227c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80227c8:	81c2      	strh	r2, [r0, #14]
 80227ca:	6183      	str	r3, [r0, #24]
 80227cc:	4619      	mov	r1, r3
 80227ce:	2208      	movs	r2, #8
 80227d0:	305c      	adds	r0, #92	@ 0x5c
 80227d2:	f000 fa43 	bl	8022c5c <memset>
 80227d6:	4b0d      	ldr	r3, [pc, #52]	@ (802280c <std+0x58>)
 80227d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80227da:	4b0d      	ldr	r3, [pc, #52]	@ (8022810 <std+0x5c>)
 80227dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80227de:	4b0d      	ldr	r3, [pc, #52]	@ (8022814 <std+0x60>)
 80227e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80227e2:	4b0d      	ldr	r3, [pc, #52]	@ (8022818 <std+0x64>)
 80227e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80227e6:	4b0d      	ldr	r3, [pc, #52]	@ (802281c <std+0x68>)
 80227e8:	6224      	str	r4, [r4, #32]
 80227ea:	429c      	cmp	r4, r3
 80227ec:	d006      	beq.n	80227fc <std+0x48>
 80227ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80227f2:	4294      	cmp	r4, r2
 80227f4:	d002      	beq.n	80227fc <std+0x48>
 80227f6:	33d0      	adds	r3, #208	@ 0xd0
 80227f8:	429c      	cmp	r4, r3
 80227fa:	d105      	bne.n	8022808 <std+0x54>
 80227fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022804:	f000 bac4 	b.w	8022d90 <__retarget_lock_init_recursive>
 8022808:	bd10      	pop	{r4, pc}
 802280a:	bf00      	nop
 802280c:	08022a59 	.word	0x08022a59
 8022810:	08022a7b 	.word	0x08022a7b
 8022814:	08022ab3 	.word	0x08022ab3
 8022818:	08022ad7 	.word	0x08022ad7
 802281c:	20010080 	.word	0x20010080

08022820 <stdio_exit_handler>:
 8022820:	4a02      	ldr	r2, [pc, #8]	@ (802282c <stdio_exit_handler+0xc>)
 8022822:	4903      	ldr	r1, [pc, #12]	@ (8022830 <stdio_exit_handler+0x10>)
 8022824:	4803      	ldr	r0, [pc, #12]	@ (8022834 <stdio_exit_handler+0x14>)
 8022826:	f000 b869 	b.w	80228fc <_fwalk_sglue>
 802282a:	bf00      	nop
 802282c:	20000044 	.word	0x20000044
 8022830:	08023959 	.word	0x08023959
 8022834:	20000054 	.word	0x20000054

08022838 <cleanup_stdio>:
 8022838:	6841      	ldr	r1, [r0, #4]
 802283a:	4b0c      	ldr	r3, [pc, #48]	@ (802286c <cleanup_stdio+0x34>)
 802283c:	4299      	cmp	r1, r3
 802283e:	b510      	push	{r4, lr}
 8022840:	4604      	mov	r4, r0
 8022842:	d001      	beq.n	8022848 <cleanup_stdio+0x10>
 8022844:	f001 f888 	bl	8023958 <_fflush_r>
 8022848:	68a1      	ldr	r1, [r4, #8]
 802284a:	4b09      	ldr	r3, [pc, #36]	@ (8022870 <cleanup_stdio+0x38>)
 802284c:	4299      	cmp	r1, r3
 802284e:	d002      	beq.n	8022856 <cleanup_stdio+0x1e>
 8022850:	4620      	mov	r0, r4
 8022852:	f001 f881 	bl	8023958 <_fflush_r>
 8022856:	68e1      	ldr	r1, [r4, #12]
 8022858:	4b06      	ldr	r3, [pc, #24]	@ (8022874 <cleanup_stdio+0x3c>)
 802285a:	4299      	cmp	r1, r3
 802285c:	d004      	beq.n	8022868 <cleanup_stdio+0x30>
 802285e:	4620      	mov	r0, r4
 8022860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022864:	f001 b878 	b.w	8023958 <_fflush_r>
 8022868:	bd10      	pop	{r4, pc}
 802286a:	bf00      	nop
 802286c:	20010080 	.word	0x20010080
 8022870:	200100e8 	.word	0x200100e8
 8022874:	20010150 	.word	0x20010150

08022878 <global_stdio_init.part.0>:
 8022878:	b510      	push	{r4, lr}
 802287a:	4b0b      	ldr	r3, [pc, #44]	@ (80228a8 <global_stdio_init.part.0+0x30>)
 802287c:	4c0b      	ldr	r4, [pc, #44]	@ (80228ac <global_stdio_init.part.0+0x34>)
 802287e:	4a0c      	ldr	r2, [pc, #48]	@ (80228b0 <global_stdio_init.part.0+0x38>)
 8022880:	601a      	str	r2, [r3, #0]
 8022882:	4620      	mov	r0, r4
 8022884:	2200      	movs	r2, #0
 8022886:	2104      	movs	r1, #4
 8022888:	f7ff ff94 	bl	80227b4 <std>
 802288c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022890:	2201      	movs	r2, #1
 8022892:	2109      	movs	r1, #9
 8022894:	f7ff ff8e 	bl	80227b4 <std>
 8022898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802289c:	2202      	movs	r2, #2
 802289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228a2:	2112      	movs	r1, #18
 80228a4:	f7ff bf86 	b.w	80227b4 <std>
 80228a8:	200101b8 	.word	0x200101b8
 80228ac:	20010080 	.word	0x20010080
 80228b0:	08022821 	.word	0x08022821

080228b4 <__sfp_lock_acquire>:
 80228b4:	4801      	ldr	r0, [pc, #4]	@ (80228bc <__sfp_lock_acquire+0x8>)
 80228b6:	f000 ba6c 	b.w	8022d92 <__retarget_lock_acquire_recursive>
 80228ba:	bf00      	nop
 80228bc:	200101bd 	.word	0x200101bd

080228c0 <__sfp_lock_release>:
 80228c0:	4801      	ldr	r0, [pc, #4]	@ (80228c8 <__sfp_lock_release+0x8>)
 80228c2:	f000 ba67 	b.w	8022d94 <__retarget_lock_release_recursive>
 80228c6:	bf00      	nop
 80228c8:	200101bd 	.word	0x200101bd

080228cc <__sinit>:
 80228cc:	b510      	push	{r4, lr}
 80228ce:	4604      	mov	r4, r0
 80228d0:	f7ff fff0 	bl	80228b4 <__sfp_lock_acquire>
 80228d4:	6a23      	ldr	r3, [r4, #32]
 80228d6:	b11b      	cbz	r3, 80228e0 <__sinit+0x14>
 80228d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228dc:	f7ff bff0 	b.w	80228c0 <__sfp_lock_release>
 80228e0:	4b04      	ldr	r3, [pc, #16]	@ (80228f4 <__sinit+0x28>)
 80228e2:	6223      	str	r3, [r4, #32]
 80228e4:	4b04      	ldr	r3, [pc, #16]	@ (80228f8 <__sinit+0x2c>)
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d1f5      	bne.n	80228d8 <__sinit+0xc>
 80228ec:	f7ff ffc4 	bl	8022878 <global_stdio_init.part.0>
 80228f0:	e7f2      	b.n	80228d8 <__sinit+0xc>
 80228f2:	bf00      	nop
 80228f4:	08022839 	.word	0x08022839
 80228f8:	200101b8 	.word	0x200101b8

080228fc <_fwalk_sglue>:
 80228fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022900:	4607      	mov	r7, r0
 8022902:	4688      	mov	r8, r1
 8022904:	4614      	mov	r4, r2
 8022906:	2600      	movs	r6, #0
 8022908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802290c:	f1b9 0901 	subs.w	r9, r9, #1
 8022910:	d505      	bpl.n	802291e <_fwalk_sglue+0x22>
 8022912:	6824      	ldr	r4, [r4, #0]
 8022914:	2c00      	cmp	r4, #0
 8022916:	d1f7      	bne.n	8022908 <_fwalk_sglue+0xc>
 8022918:	4630      	mov	r0, r6
 802291a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802291e:	89ab      	ldrh	r3, [r5, #12]
 8022920:	2b01      	cmp	r3, #1
 8022922:	d907      	bls.n	8022934 <_fwalk_sglue+0x38>
 8022924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022928:	3301      	adds	r3, #1
 802292a:	d003      	beq.n	8022934 <_fwalk_sglue+0x38>
 802292c:	4629      	mov	r1, r5
 802292e:	4638      	mov	r0, r7
 8022930:	47c0      	blx	r8
 8022932:	4306      	orrs	r6, r0
 8022934:	3568      	adds	r5, #104	@ 0x68
 8022936:	e7e9      	b.n	802290c <_fwalk_sglue+0x10>

08022938 <iprintf>:
 8022938:	b40f      	push	{r0, r1, r2, r3}
 802293a:	b507      	push	{r0, r1, r2, lr}
 802293c:	4906      	ldr	r1, [pc, #24]	@ (8022958 <iprintf+0x20>)
 802293e:	ab04      	add	r3, sp, #16
 8022940:	6808      	ldr	r0, [r1, #0]
 8022942:	f853 2b04 	ldr.w	r2, [r3], #4
 8022946:	6881      	ldr	r1, [r0, #8]
 8022948:	9301      	str	r3, [sp, #4]
 802294a:	f000 fcdb 	bl	8023304 <_vfiprintf_r>
 802294e:	b003      	add	sp, #12
 8022950:	f85d eb04 	ldr.w	lr, [sp], #4
 8022954:	b004      	add	sp, #16
 8022956:	4770      	bx	lr
 8022958:	20000050 	.word	0x20000050

0802295c <_puts_r>:
 802295c:	6a03      	ldr	r3, [r0, #32]
 802295e:	b570      	push	{r4, r5, r6, lr}
 8022960:	6884      	ldr	r4, [r0, #8]
 8022962:	4605      	mov	r5, r0
 8022964:	460e      	mov	r6, r1
 8022966:	b90b      	cbnz	r3, 802296c <_puts_r+0x10>
 8022968:	f7ff ffb0 	bl	80228cc <__sinit>
 802296c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802296e:	07db      	lsls	r3, r3, #31
 8022970:	d405      	bmi.n	802297e <_puts_r+0x22>
 8022972:	89a3      	ldrh	r3, [r4, #12]
 8022974:	0598      	lsls	r0, r3, #22
 8022976:	d402      	bmi.n	802297e <_puts_r+0x22>
 8022978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802297a:	f000 fa0a 	bl	8022d92 <__retarget_lock_acquire_recursive>
 802297e:	89a3      	ldrh	r3, [r4, #12]
 8022980:	0719      	lsls	r1, r3, #28
 8022982:	d502      	bpl.n	802298a <_puts_r+0x2e>
 8022984:	6923      	ldr	r3, [r4, #16]
 8022986:	2b00      	cmp	r3, #0
 8022988:	d135      	bne.n	80229f6 <_puts_r+0x9a>
 802298a:	4621      	mov	r1, r4
 802298c:	4628      	mov	r0, r5
 802298e:	f000 f8e5 	bl	8022b5c <__swsetup_r>
 8022992:	b380      	cbz	r0, 80229f6 <_puts_r+0x9a>
 8022994:	f04f 35ff 	mov.w	r5, #4294967295
 8022998:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802299a:	07da      	lsls	r2, r3, #31
 802299c:	d405      	bmi.n	80229aa <_puts_r+0x4e>
 802299e:	89a3      	ldrh	r3, [r4, #12]
 80229a0:	059b      	lsls	r3, r3, #22
 80229a2:	d402      	bmi.n	80229aa <_puts_r+0x4e>
 80229a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80229a6:	f000 f9f5 	bl	8022d94 <__retarget_lock_release_recursive>
 80229aa:	4628      	mov	r0, r5
 80229ac:	bd70      	pop	{r4, r5, r6, pc}
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	da04      	bge.n	80229bc <_puts_r+0x60>
 80229b2:	69a2      	ldr	r2, [r4, #24]
 80229b4:	429a      	cmp	r2, r3
 80229b6:	dc17      	bgt.n	80229e8 <_puts_r+0x8c>
 80229b8:	290a      	cmp	r1, #10
 80229ba:	d015      	beq.n	80229e8 <_puts_r+0x8c>
 80229bc:	6823      	ldr	r3, [r4, #0]
 80229be:	1c5a      	adds	r2, r3, #1
 80229c0:	6022      	str	r2, [r4, #0]
 80229c2:	7019      	strb	r1, [r3, #0]
 80229c4:	68a3      	ldr	r3, [r4, #8]
 80229c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80229ca:	3b01      	subs	r3, #1
 80229cc:	60a3      	str	r3, [r4, #8]
 80229ce:	2900      	cmp	r1, #0
 80229d0:	d1ed      	bne.n	80229ae <_puts_r+0x52>
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	da11      	bge.n	80229fa <_puts_r+0x9e>
 80229d6:	4622      	mov	r2, r4
 80229d8:	210a      	movs	r1, #10
 80229da:	4628      	mov	r0, r5
 80229dc:	f000 f87f 	bl	8022ade <__swbuf_r>
 80229e0:	3001      	adds	r0, #1
 80229e2:	d0d7      	beq.n	8022994 <_puts_r+0x38>
 80229e4:	250a      	movs	r5, #10
 80229e6:	e7d7      	b.n	8022998 <_puts_r+0x3c>
 80229e8:	4622      	mov	r2, r4
 80229ea:	4628      	mov	r0, r5
 80229ec:	f000 f877 	bl	8022ade <__swbuf_r>
 80229f0:	3001      	adds	r0, #1
 80229f2:	d1e7      	bne.n	80229c4 <_puts_r+0x68>
 80229f4:	e7ce      	b.n	8022994 <_puts_r+0x38>
 80229f6:	3e01      	subs	r6, #1
 80229f8:	e7e4      	b.n	80229c4 <_puts_r+0x68>
 80229fa:	6823      	ldr	r3, [r4, #0]
 80229fc:	1c5a      	adds	r2, r3, #1
 80229fe:	6022      	str	r2, [r4, #0]
 8022a00:	220a      	movs	r2, #10
 8022a02:	701a      	strb	r2, [r3, #0]
 8022a04:	e7ee      	b.n	80229e4 <_puts_r+0x88>
	...

08022a08 <puts>:
 8022a08:	4b02      	ldr	r3, [pc, #8]	@ (8022a14 <puts+0xc>)
 8022a0a:	4601      	mov	r1, r0
 8022a0c:	6818      	ldr	r0, [r3, #0]
 8022a0e:	f7ff bfa5 	b.w	802295c <_puts_r>
 8022a12:	bf00      	nop
 8022a14:	20000050 	.word	0x20000050

08022a18 <siprintf>:
 8022a18:	b40e      	push	{r1, r2, r3}
 8022a1a:	b500      	push	{lr}
 8022a1c:	b09c      	sub	sp, #112	@ 0x70
 8022a1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8022a20:	9002      	str	r0, [sp, #8]
 8022a22:	9006      	str	r0, [sp, #24]
 8022a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8022a28:	4809      	ldr	r0, [pc, #36]	@ (8022a50 <siprintf+0x38>)
 8022a2a:	9107      	str	r1, [sp, #28]
 8022a2c:	9104      	str	r1, [sp, #16]
 8022a2e:	4909      	ldr	r1, [pc, #36]	@ (8022a54 <siprintf+0x3c>)
 8022a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a34:	9105      	str	r1, [sp, #20]
 8022a36:	6800      	ldr	r0, [r0, #0]
 8022a38:	9301      	str	r3, [sp, #4]
 8022a3a:	a902      	add	r1, sp, #8
 8022a3c:	f000 fb3c 	bl	80230b8 <_svfiprintf_r>
 8022a40:	9b02      	ldr	r3, [sp, #8]
 8022a42:	2200      	movs	r2, #0
 8022a44:	701a      	strb	r2, [r3, #0]
 8022a46:	b01c      	add	sp, #112	@ 0x70
 8022a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a4c:	b003      	add	sp, #12
 8022a4e:	4770      	bx	lr
 8022a50:	20000050 	.word	0x20000050
 8022a54:	ffff0208 	.word	0xffff0208

08022a58 <__sread>:
 8022a58:	b510      	push	{r4, lr}
 8022a5a:	460c      	mov	r4, r1
 8022a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a60:	f000 f948 	bl	8022cf4 <_read_r>
 8022a64:	2800      	cmp	r0, #0
 8022a66:	bfab      	itete	ge
 8022a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8022a6c:	181b      	addge	r3, r3, r0
 8022a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022a72:	bfac      	ite	ge
 8022a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022a76:	81a3      	strhlt	r3, [r4, #12]
 8022a78:	bd10      	pop	{r4, pc}

08022a7a <__swrite>:
 8022a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a7e:	461f      	mov	r7, r3
 8022a80:	898b      	ldrh	r3, [r1, #12]
 8022a82:	05db      	lsls	r3, r3, #23
 8022a84:	4605      	mov	r5, r0
 8022a86:	460c      	mov	r4, r1
 8022a88:	4616      	mov	r6, r2
 8022a8a:	d505      	bpl.n	8022a98 <__swrite+0x1e>
 8022a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a90:	2302      	movs	r3, #2
 8022a92:	2200      	movs	r2, #0
 8022a94:	f000 f91c 	bl	8022cd0 <_lseek_r>
 8022a98:	89a3      	ldrh	r3, [r4, #12]
 8022a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022a9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022aa2:	81a3      	strh	r3, [r4, #12]
 8022aa4:	4632      	mov	r2, r6
 8022aa6:	463b      	mov	r3, r7
 8022aa8:	4628      	mov	r0, r5
 8022aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022aae:	f000 b933 	b.w	8022d18 <_write_r>

08022ab2 <__sseek>:
 8022ab2:	b510      	push	{r4, lr}
 8022ab4:	460c      	mov	r4, r1
 8022ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022aba:	f000 f909 	bl	8022cd0 <_lseek_r>
 8022abe:	1c43      	adds	r3, r0, #1
 8022ac0:	89a3      	ldrh	r3, [r4, #12]
 8022ac2:	bf15      	itete	ne
 8022ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022ace:	81a3      	strheq	r3, [r4, #12]
 8022ad0:	bf18      	it	ne
 8022ad2:	81a3      	strhne	r3, [r4, #12]
 8022ad4:	bd10      	pop	{r4, pc}

08022ad6 <__sclose>:
 8022ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ada:	f000 b8e9 	b.w	8022cb0 <_close_r>

08022ade <__swbuf_r>:
 8022ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ae0:	460e      	mov	r6, r1
 8022ae2:	4614      	mov	r4, r2
 8022ae4:	4605      	mov	r5, r0
 8022ae6:	b118      	cbz	r0, 8022af0 <__swbuf_r+0x12>
 8022ae8:	6a03      	ldr	r3, [r0, #32]
 8022aea:	b90b      	cbnz	r3, 8022af0 <__swbuf_r+0x12>
 8022aec:	f7ff feee 	bl	80228cc <__sinit>
 8022af0:	69a3      	ldr	r3, [r4, #24]
 8022af2:	60a3      	str	r3, [r4, #8]
 8022af4:	89a3      	ldrh	r3, [r4, #12]
 8022af6:	071a      	lsls	r2, r3, #28
 8022af8:	d501      	bpl.n	8022afe <__swbuf_r+0x20>
 8022afa:	6923      	ldr	r3, [r4, #16]
 8022afc:	b943      	cbnz	r3, 8022b10 <__swbuf_r+0x32>
 8022afe:	4621      	mov	r1, r4
 8022b00:	4628      	mov	r0, r5
 8022b02:	f000 f82b 	bl	8022b5c <__swsetup_r>
 8022b06:	b118      	cbz	r0, 8022b10 <__swbuf_r+0x32>
 8022b08:	f04f 37ff 	mov.w	r7, #4294967295
 8022b0c:	4638      	mov	r0, r7
 8022b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b10:	6823      	ldr	r3, [r4, #0]
 8022b12:	6922      	ldr	r2, [r4, #16]
 8022b14:	1a98      	subs	r0, r3, r2
 8022b16:	6963      	ldr	r3, [r4, #20]
 8022b18:	b2f6      	uxtb	r6, r6
 8022b1a:	4283      	cmp	r3, r0
 8022b1c:	4637      	mov	r7, r6
 8022b1e:	dc05      	bgt.n	8022b2c <__swbuf_r+0x4e>
 8022b20:	4621      	mov	r1, r4
 8022b22:	4628      	mov	r0, r5
 8022b24:	f000 ff18 	bl	8023958 <_fflush_r>
 8022b28:	2800      	cmp	r0, #0
 8022b2a:	d1ed      	bne.n	8022b08 <__swbuf_r+0x2a>
 8022b2c:	68a3      	ldr	r3, [r4, #8]
 8022b2e:	3b01      	subs	r3, #1
 8022b30:	60a3      	str	r3, [r4, #8]
 8022b32:	6823      	ldr	r3, [r4, #0]
 8022b34:	1c5a      	adds	r2, r3, #1
 8022b36:	6022      	str	r2, [r4, #0]
 8022b38:	701e      	strb	r6, [r3, #0]
 8022b3a:	6962      	ldr	r2, [r4, #20]
 8022b3c:	1c43      	adds	r3, r0, #1
 8022b3e:	429a      	cmp	r2, r3
 8022b40:	d004      	beq.n	8022b4c <__swbuf_r+0x6e>
 8022b42:	89a3      	ldrh	r3, [r4, #12]
 8022b44:	07db      	lsls	r3, r3, #31
 8022b46:	d5e1      	bpl.n	8022b0c <__swbuf_r+0x2e>
 8022b48:	2e0a      	cmp	r6, #10
 8022b4a:	d1df      	bne.n	8022b0c <__swbuf_r+0x2e>
 8022b4c:	4621      	mov	r1, r4
 8022b4e:	4628      	mov	r0, r5
 8022b50:	f000 ff02 	bl	8023958 <_fflush_r>
 8022b54:	2800      	cmp	r0, #0
 8022b56:	d0d9      	beq.n	8022b0c <__swbuf_r+0x2e>
 8022b58:	e7d6      	b.n	8022b08 <__swbuf_r+0x2a>
	...

08022b5c <__swsetup_r>:
 8022b5c:	b538      	push	{r3, r4, r5, lr}
 8022b5e:	4b29      	ldr	r3, [pc, #164]	@ (8022c04 <__swsetup_r+0xa8>)
 8022b60:	4605      	mov	r5, r0
 8022b62:	6818      	ldr	r0, [r3, #0]
 8022b64:	460c      	mov	r4, r1
 8022b66:	b118      	cbz	r0, 8022b70 <__swsetup_r+0x14>
 8022b68:	6a03      	ldr	r3, [r0, #32]
 8022b6a:	b90b      	cbnz	r3, 8022b70 <__swsetup_r+0x14>
 8022b6c:	f7ff feae 	bl	80228cc <__sinit>
 8022b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b74:	0719      	lsls	r1, r3, #28
 8022b76:	d422      	bmi.n	8022bbe <__swsetup_r+0x62>
 8022b78:	06da      	lsls	r2, r3, #27
 8022b7a:	d407      	bmi.n	8022b8c <__swsetup_r+0x30>
 8022b7c:	2209      	movs	r2, #9
 8022b7e:	602a      	str	r2, [r5, #0]
 8022b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022b84:	81a3      	strh	r3, [r4, #12]
 8022b86:	f04f 30ff 	mov.w	r0, #4294967295
 8022b8a:	e033      	b.n	8022bf4 <__swsetup_r+0x98>
 8022b8c:	0758      	lsls	r0, r3, #29
 8022b8e:	d512      	bpl.n	8022bb6 <__swsetup_r+0x5a>
 8022b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022b92:	b141      	cbz	r1, 8022ba6 <__swsetup_r+0x4a>
 8022b94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022b98:	4299      	cmp	r1, r3
 8022b9a:	d002      	beq.n	8022ba2 <__swsetup_r+0x46>
 8022b9c:	4628      	mov	r0, r5
 8022b9e:	f000 f92f 	bl	8022e00 <_free_r>
 8022ba2:	2300      	movs	r3, #0
 8022ba4:	6363      	str	r3, [r4, #52]	@ 0x34
 8022ba6:	89a3      	ldrh	r3, [r4, #12]
 8022ba8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022bac:	81a3      	strh	r3, [r4, #12]
 8022bae:	2300      	movs	r3, #0
 8022bb0:	6063      	str	r3, [r4, #4]
 8022bb2:	6923      	ldr	r3, [r4, #16]
 8022bb4:	6023      	str	r3, [r4, #0]
 8022bb6:	89a3      	ldrh	r3, [r4, #12]
 8022bb8:	f043 0308 	orr.w	r3, r3, #8
 8022bbc:	81a3      	strh	r3, [r4, #12]
 8022bbe:	6923      	ldr	r3, [r4, #16]
 8022bc0:	b94b      	cbnz	r3, 8022bd6 <__swsetup_r+0x7a>
 8022bc2:	89a3      	ldrh	r3, [r4, #12]
 8022bc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022bcc:	d003      	beq.n	8022bd6 <__swsetup_r+0x7a>
 8022bce:	4621      	mov	r1, r4
 8022bd0:	4628      	mov	r0, r5
 8022bd2:	f000 ff21 	bl	8023a18 <__smakebuf_r>
 8022bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022bda:	f013 0201 	ands.w	r2, r3, #1
 8022bde:	d00a      	beq.n	8022bf6 <__swsetup_r+0x9a>
 8022be0:	2200      	movs	r2, #0
 8022be2:	60a2      	str	r2, [r4, #8]
 8022be4:	6962      	ldr	r2, [r4, #20]
 8022be6:	4252      	negs	r2, r2
 8022be8:	61a2      	str	r2, [r4, #24]
 8022bea:	6922      	ldr	r2, [r4, #16]
 8022bec:	b942      	cbnz	r2, 8022c00 <__swsetup_r+0xa4>
 8022bee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022bf2:	d1c5      	bne.n	8022b80 <__swsetup_r+0x24>
 8022bf4:	bd38      	pop	{r3, r4, r5, pc}
 8022bf6:	0799      	lsls	r1, r3, #30
 8022bf8:	bf58      	it	pl
 8022bfa:	6962      	ldrpl	r2, [r4, #20]
 8022bfc:	60a2      	str	r2, [r4, #8]
 8022bfe:	e7f4      	b.n	8022bea <__swsetup_r+0x8e>
 8022c00:	2000      	movs	r0, #0
 8022c02:	e7f7      	b.n	8022bf4 <__swsetup_r+0x98>
 8022c04:	20000050 	.word	0x20000050

08022c08 <memcmp>:
 8022c08:	b510      	push	{r4, lr}
 8022c0a:	3901      	subs	r1, #1
 8022c0c:	4402      	add	r2, r0
 8022c0e:	4290      	cmp	r0, r2
 8022c10:	d101      	bne.n	8022c16 <memcmp+0xe>
 8022c12:	2000      	movs	r0, #0
 8022c14:	e005      	b.n	8022c22 <memcmp+0x1a>
 8022c16:	7803      	ldrb	r3, [r0, #0]
 8022c18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022c1c:	42a3      	cmp	r3, r4
 8022c1e:	d001      	beq.n	8022c24 <memcmp+0x1c>
 8022c20:	1b18      	subs	r0, r3, r4
 8022c22:	bd10      	pop	{r4, pc}
 8022c24:	3001      	adds	r0, #1
 8022c26:	e7f2      	b.n	8022c0e <memcmp+0x6>

08022c28 <memmove>:
 8022c28:	4288      	cmp	r0, r1
 8022c2a:	b510      	push	{r4, lr}
 8022c2c:	eb01 0402 	add.w	r4, r1, r2
 8022c30:	d902      	bls.n	8022c38 <memmove+0x10>
 8022c32:	4284      	cmp	r4, r0
 8022c34:	4623      	mov	r3, r4
 8022c36:	d807      	bhi.n	8022c48 <memmove+0x20>
 8022c38:	1e43      	subs	r3, r0, #1
 8022c3a:	42a1      	cmp	r1, r4
 8022c3c:	d008      	beq.n	8022c50 <memmove+0x28>
 8022c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c46:	e7f8      	b.n	8022c3a <memmove+0x12>
 8022c48:	4402      	add	r2, r0
 8022c4a:	4601      	mov	r1, r0
 8022c4c:	428a      	cmp	r2, r1
 8022c4e:	d100      	bne.n	8022c52 <memmove+0x2a>
 8022c50:	bd10      	pop	{r4, pc}
 8022c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022c5a:	e7f7      	b.n	8022c4c <memmove+0x24>

08022c5c <memset>:
 8022c5c:	4402      	add	r2, r0
 8022c5e:	4603      	mov	r3, r0
 8022c60:	4293      	cmp	r3, r2
 8022c62:	d100      	bne.n	8022c66 <memset+0xa>
 8022c64:	4770      	bx	lr
 8022c66:	f803 1b01 	strb.w	r1, [r3], #1
 8022c6a:	e7f9      	b.n	8022c60 <memset+0x4>

08022c6c <strcat>:
 8022c6c:	b510      	push	{r4, lr}
 8022c6e:	4602      	mov	r2, r0
 8022c70:	7814      	ldrb	r4, [r2, #0]
 8022c72:	4613      	mov	r3, r2
 8022c74:	3201      	adds	r2, #1
 8022c76:	2c00      	cmp	r4, #0
 8022c78:	d1fa      	bne.n	8022c70 <strcat+0x4>
 8022c7a:	3b01      	subs	r3, #1
 8022c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c84:	2a00      	cmp	r2, #0
 8022c86:	d1f9      	bne.n	8022c7c <strcat+0x10>
 8022c88:	bd10      	pop	{r4, pc}

08022c8a <strncmp>:
 8022c8a:	b510      	push	{r4, lr}
 8022c8c:	b16a      	cbz	r2, 8022caa <strncmp+0x20>
 8022c8e:	3901      	subs	r1, #1
 8022c90:	1884      	adds	r4, r0, r2
 8022c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022c96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022c9a:	429a      	cmp	r2, r3
 8022c9c:	d103      	bne.n	8022ca6 <strncmp+0x1c>
 8022c9e:	42a0      	cmp	r0, r4
 8022ca0:	d001      	beq.n	8022ca6 <strncmp+0x1c>
 8022ca2:	2a00      	cmp	r2, #0
 8022ca4:	d1f5      	bne.n	8022c92 <strncmp+0x8>
 8022ca6:	1ad0      	subs	r0, r2, r3
 8022ca8:	bd10      	pop	{r4, pc}
 8022caa:	4610      	mov	r0, r2
 8022cac:	e7fc      	b.n	8022ca8 <strncmp+0x1e>
	...

08022cb0 <_close_r>:
 8022cb0:	b538      	push	{r3, r4, r5, lr}
 8022cb2:	4d06      	ldr	r5, [pc, #24]	@ (8022ccc <_close_r+0x1c>)
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	4604      	mov	r4, r0
 8022cb8:	4608      	mov	r0, r1
 8022cba:	602b      	str	r3, [r5, #0]
 8022cbc:	f7df fabe 	bl	800223c <_close>
 8022cc0:	1c43      	adds	r3, r0, #1
 8022cc2:	d102      	bne.n	8022cca <_close_r+0x1a>
 8022cc4:	682b      	ldr	r3, [r5, #0]
 8022cc6:	b103      	cbz	r3, 8022cca <_close_r+0x1a>
 8022cc8:	6023      	str	r3, [r4, #0]
 8022cca:	bd38      	pop	{r3, r4, r5, pc}
 8022ccc:	20010078 	.word	0x20010078

08022cd0 <_lseek_r>:
 8022cd0:	b538      	push	{r3, r4, r5, lr}
 8022cd2:	4d07      	ldr	r5, [pc, #28]	@ (8022cf0 <_lseek_r+0x20>)
 8022cd4:	4604      	mov	r4, r0
 8022cd6:	4608      	mov	r0, r1
 8022cd8:	4611      	mov	r1, r2
 8022cda:	2200      	movs	r2, #0
 8022cdc:	602a      	str	r2, [r5, #0]
 8022cde:	461a      	mov	r2, r3
 8022ce0:	f7df fad3 	bl	800228a <_lseek>
 8022ce4:	1c43      	adds	r3, r0, #1
 8022ce6:	d102      	bne.n	8022cee <_lseek_r+0x1e>
 8022ce8:	682b      	ldr	r3, [r5, #0]
 8022cea:	b103      	cbz	r3, 8022cee <_lseek_r+0x1e>
 8022cec:	6023      	str	r3, [r4, #0]
 8022cee:	bd38      	pop	{r3, r4, r5, pc}
 8022cf0:	20010078 	.word	0x20010078

08022cf4 <_read_r>:
 8022cf4:	b538      	push	{r3, r4, r5, lr}
 8022cf6:	4d07      	ldr	r5, [pc, #28]	@ (8022d14 <_read_r+0x20>)
 8022cf8:	4604      	mov	r4, r0
 8022cfa:	4608      	mov	r0, r1
 8022cfc:	4611      	mov	r1, r2
 8022cfe:	2200      	movs	r2, #0
 8022d00:	602a      	str	r2, [r5, #0]
 8022d02:	461a      	mov	r2, r3
 8022d04:	f7df fa7d 	bl	8002202 <_read>
 8022d08:	1c43      	adds	r3, r0, #1
 8022d0a:	d102      	bne.n	8022d12 <_read_r+0x1e>
 8022d0c:	682b      	ldr	r3, [r5, #0]
 8022d0e:	b103      	cbz	r3, 8022d12 <_read_r+0x1e>
 8022d10:	6023      	str	r3, [r4, #0]
 8022d12:	bd38      	pop	{r3, r4, r5, pc}
 8022d14:	20010078 	.word	0x20010078

08022d18 <_write_r>:
 8022d18:	b538      	push	{r3, r4, r5, lr}
 8022d1a:	4d07      	ldr	r5, [pc, #28]	@ (8022d38 <_write_r+0x20>)
 8022d1c:	4604      	mov	r4, r0
 8022d1e:	4608      	mov	r0, r1
 8022d20:	4611      	mov	r1, r2
 8022d22:	2200      	movs	r2, #0
 8022d24:	602a      	str	r2, [r5, #0]
 8022d26:	461a      	mov	r2, r3
 8022d28:	f7dd fdaa 	bl	8000880 <_write>
 8022d2c:	1c43      	adds	r3, r0, #1
 8022d2e:	d102      	bne.n	8022d36 <_write_r+0x1e>
 8022d30:	682b      	ldr	r3, [r5, #0]
 8022d32:	b103      	cbz	r3, 8022d36 <_write_r+0x1e>
 8022d34:	6023      	str	r3, [r4, #0]
 8022d36:	bd38      	pop	{r3, r4, r5, pc}
 8022d38:	20010078 	.word	0x20010078

08022d3c <__errno>:
 8022d3c:	4b01      	ldr	r3, [pc, #4]	@ (8022d44 <__errno+0x8>)
 8022d3e:	6818      	ldr	r0, [r3, #0]
 8022d40:	4770      	bx	lr
 8022d42:	bf00      	nop
 8022d44:	20000050 	.word	0x20000050

08022d48 <__libc_init_array>:
 8022d48:	b570      	push	{r4, r5, r6, lr}
 8022d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8022d80 <__libc_init_array+0x38>)
 8022d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8022d84 <__libc_init_array+0x3c>)
 8022d4e:	1b64      	subs	r4, r4, r5
 8022d50:	10a4      	asrs	r4, r4, #2
 8022d52:	2600      	movs	r6, #0
 8022d54:	42a6      	cmp	r6, r4
 8022d56:	d109      	bne.n	8022d6c <__libc_init_array+0x24>
 8022d58:	4d0b      	ldr	r5, [pc, #44]	@ (8022d88 <__libc_init_array+0x40>)
 8022d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8022d8c <__libc_init_array+0x44>)
 8022d5c:	f000 ff4c 	bl	8023bf8 <_init>
 8022d60:	1b64      	subs	r4, r4, r5
 8022d62:	10a4      	asrs	r4, r4, #2
 8022d64:	2600      	movs	r6, #0
 8022d66:	42a6      	cmp	r6, r4
 8022d68:	d105      	bne.n	8022d76 <__libc_init_array+0x2e>
 8022d6a:	bd70      	pop	{r4, r5, r6, pc}
 8022d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d70:	4798      	blx	r3
 8022d72:	3601      	adds	r6, #1
 8022d74:	e7ee      	b.n	8022d54 <__libc_init_array+0xc>
 8022d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d7a:	4798      	blx	r3
 8022d7c:	3601      	adds	r6, #1
 8022d7e:	e7f2      	b.n	8022d66 <__libc_init_array+0x1e>
 8022d80:	08039008 	.word	0x08039008
 8022d84:	08039008 	.word	0x08039008
 8022d88:	08039008 	.word	0x08039008
 8022d8c:	0803900c 	.word	0x0803900c

08022d90 <__retarget_lock_init_recursive>:
 8022d90:	4770      	bx	lr

08022d92 <__retarget_lock_acquire_recursive>:
 8022d92:	4770      	bx	lr

08022d94 <__retarget_lock_release_recursive>:
 8022d94:	4770      	bx	lr

08022d96 <strcpy>:
 8022d96:	4603      	mov	r3, r0
 8022d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d9c:	f803 2b01 	strb.w	r2, [r3], #1
 8022da0:	2a00      	cmp	r2, #0
 8022da2:	d1f9      	bne.n	8022d98 <strcpy+0x2>
 8022da4:	4770      	bx	lr

08022da6 <memcpy>:
 8022da6:	440a      	add	r2, r1
 8022da8:	4291      	cmp	r1, r2
 8022daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8022dae:	d100      	bne.n	8022db2 <memcpy+0xc>
 8022db0:	4770      	bx	lr
 8022db2:	b510      	push	{r4, lr}
 8022db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022dbc:	4291      	cmp	r1, r2
 8022dbe:	d1f9      	bne.n	8022db4 <memcpy+0xe>
 8022dc0:	bd10      	pop	{r4, pc}
	...

08022dc4 <__assert_func>:
 8022dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022dc6:	4614      	mov	r4, r2
 8022dc8:	461a      	mov	r2, r3
 8022dca:	4b09      	ldr	r3, [pc, #36]	@ (8022df0 <__assert_func+0x2c>)
 8022dcc:	681b      	ldr	r3, [r3, #0]
 8022dce:	4605      	mov	r5, r0
 8022dd0:	68d8      	ldr	r0, [r3, #12]
 8022dd2:	b954      	cbnz	r4, 8022dea <__assert_func+0x26>
 8022dd4:	4b07      	ldr	r3, [pc, #28]	@ (8022df4 <__assert_func+0x30>)
 8022dd6:	461c      	mov	r4, r3
 8022dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022ddc:	9100      	str	r1, [sp, #0]
 8022dde:	462b      	mov	r3, r5
 8022de0:	4905      	ldr	r1, [pc, #20]	@ (8022df8 <__assert_func+0x34>)
 8022de2:	f000 fde1 	bl	80239a8 <fiprintf>
 8022de6:	f000 fe85 	bl	8023af4 <abort>
 8022dea:	4b04      	ldr	r3, [pc, #16]	@ (8022dfc <__assert_func+0x38>)
 8022dec:	e7f4      	b.n	8022dd8 <__assert_func+0x14>
 8022dee:	bf00      	nop
 8022df0:	20000050 	.word	0x20000050
 8022df4:	08038fcb 	.word	0x08038fcb
 8022df8:	08038f9d 	.word	0x08038f9d
 8022dfc:	08038f90 	.word	0x08038f90

08022e00 <_free_r>:
 8022e00:	b538      	push	{r3, r4, r5, lr}
 8022e02:	4605      	mov	r5, r0
 8022e04:	2900      	cmp	r1, #0
 8022e06:	d041      	beq.n	8022e8c <_free_r+0x8c>
 8022e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022e0c:	1f0c      	subs	r4, r1, #4
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	bfb8      	it	lt
 8022e12:	18e4      	addlt	r4, r4, r3
 8022e14:	f000 f8e8 	bl	8022fe8 <__malloc_lock>
 8022e18:	4a1d      	ldr	r2, [pc, #116]	@ (8022e90 <_free_r+0x90>)
 8022e1a:	6813      	ldr	r3, [r2, #0]
 8022e1c:	b933      	cbnz	r3, 8022e2c <_free_r+0x2c>
 8022e1e:	6063      	str	r3, [r4, #4]
 8022e20:	6014      	str	r4, [r2, #0]
 8022e22:	4628      	mov	r0, r5
 8022e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022e28:	f000 b8e4 	b.w	8022ff4 <__malloc_unlock>
 8022e2c:	42a3      	cmp	r3, r4
 8022e2e:	d908      	bls.n	8022e42 <_free_r+0x42>
 8022e30:	6820      	ldr	r0, [r4, #0]
 8022e32:	1821      	adds	r1, r4, r0
 8022e34:	428b      	cmp	r3, r1
 8022e36:	bf01      	itttt	eq
 8022e38:	6819      	ldreq	r1, [r3, #0]
 8022e3a:	685b      	ldreq	r3, [r3, #4]
 8022e3c:	1809      	addeq	r1, r1, r0
 8022e3e:	6021      	streq	r1, [r4, #0]
 8022e40:	e7ed      	b.n	8022e1e <_free_r+0x1e>
 8022e42:	461a      	mov	r2, r3
 8022e44:	685b      	ldr	r3, [r3, #4]
 8022e46:	b10b      	cbz	r3, 8022e4c <_free_r+0x4c>
 8022e48:	42a3      	cmp	r3, r4
 8022e4a:	d9fa      	bls.n	8022e42 <_free_r+0x42>
 8022e4c:	6811      	ldr	r1, [r2, #0]
 8022e4e:	1850      	adds	r0, r2, r1
 8022e50:	42a0      	cmp	r0, r4
 8022e52:	d10b      	bne.n	8022e6c <_free_r+0x6c>
 8022e54:	6820      	ldr	r0, [r4, #0]
 8022e56:	4401      	add	r1, r0
 8022e58:	1850      	adds	r0, r2, r1
 8022e5a:	4283      	cmp	r3, r0
 8022e5c:	6011      	str	r1, [r2, #0]
 8022e5e:	d1e0      	bne.n	8022e22 <_free_r+0x22>
 8022e60:	6818      	ldr	r0, [r3, #0]
 8022e62:	685b      	ldr	r3, [r3, #4]
 8022e64:	6053      	str	r3, [r2, #4]
 8022e66:	4408      	add	r0, r1
 8022e68:	6010      	str	r0, [r2, #0]
 8022e6a:	e7da      	b.n	8022e22 <_free_r+0x22>
 8022e6c:	d902      	bls.n	8022e74 <_free_r+0x74>
 8022e6e:	230c      	movs	r3, #12
 8022e70:	602b      	str	r3, [r5, #0]
 8022e72:	e7d6      	b.n	8022e22 <_free_r+0x22>
 8022e74:	6820      	ldr	r0, [r4, #0]
 8022e76:	1821      	adds	r1, r4, r0
 8022e78:	428b      	cmp	r3, r1
 8022e7a:	bf04      	itt	eq
 8022e7c:	6819      	ldreq	r1, [r3, #0]
 8022e7e:	685b      	ldreq	r3, [r3, #4]
 8022e80:	6063      	str	r3, [r4, #4]
 8022e82:	bf04      	itt	eq
 8022e84:	1809      	addeq	r1, r1, r0
 8022e86:	6021      	streq	r1, [r4, #0]
 8022e88:	6054      	str	r4, [r2, #4]
 8022e8a:	e7ca      	b.n	8022e22 <_free_r+0x22>
 8022e8c:	bd38      	pop	{r3, r4, r5, pc}
 8022e8e:	bf00      	nop
 8022e90:	200101c4 	.word	0x200101c4

08022e94 <malloc>:
 8022e94:	4b02      	ldr	r3, [pc, #8]	@ (8022ea0 <malloc+0xc>)
 8022e96:	4601      	mov	r1, r0
 8022e98:	6818      	ldr	r0, [r3, #0]
 8022e9a:	f000 b825 	b.w	8022ee8 <_malloc_r>
 8022e9e:	bf00      	nop
 8022ea0:	20000050 	.word	0x20000050

08022ea4 <sbrk_aligned>:
 8022ea4:	b570      	push	{r4, r5, r6, lr}
 8022ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8022ee4 <sbrk_aligned+0x40>)
 8022ea8:	460c      	mov	r4, r1
 8022eaa:	6831      	ldr	r1, [r6, #0]
 8022eac:	4605      	mov	r5, r0
 8022eae:	b911      	cbnz	r1, 8022eb6 <sbrk_aligned+0x12>
 8022eb0:	f000 fe10 	bl	8023ad4 <_sbrk_r>
 8022eb4:	6030      	str	r0, [r6, #0]
 8022eb6:	4621      	mov	r1, r4
 8022eb8:	4628      	mov	r0, r5
 8022eba:	f000 fe0b 	bl	8023ad4 <_sbrk_r>
 8022ebe:	1c43      	adds	r3, r0, #1
 8022ec0:	d103      	bne.n	8022eca <sbrk_aligned+0x26>
 8022ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8022ec6:	4620      	mov	r0, r4
 8022ec8:	bd70      	pop	{r4, r5, r6, pc}
 8022eca:	1cc4      	adds	r4, r0, #3
 8022ecc:	f024 0403 	bic.w	r4, r4, #3
 8022ed0:	42a0      	cmp	r0, r4
 8022ed2:	d0f8      	beq.n	8022ec6 <sbrk_aligned+0x22>
 8022ed4:	1a21      	subs	r1, r4, r0
 8022ed6:	4628      	mov	r0, r5
 8022ed8:	f000 fdfc 	bl	8023ad4 <_sbrk_r>
 8022edc:	3001      	adds	r0, #1
 8022ede:	d1f2      	bne.n	8022ec6 <sbrk_aligned+0x22>
 8022ee0:	e7ef      	b.n	8022ec2 <sbrk_aligned+0x1e>
 8022ee2:	bf00      	nop
 8022ee4:	200101c0 	.word	0x200101c0

08022ee8 <_malloc_r>:
 8022ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022eec:	1ccd      	adds	r5, r1, #3
 8022eee:	f025 0503 	bic.w	r5, r5, #3
 8022ef2:	3508      	adds	r5, #8
 8022ef4:	2d0c      	cmp	r5, #12
 8022ef6:	bf38      	it	cc
 8022ef8:	250c      	movcc	r5, #12
 8022efa:	2d00      	cmp	r5, #0
 8022efc:	4606      	mov	r6, r0
 8022efe:	db01      	blt.n	8022f04 <_malloc_r+0x1c>
 8022f00:	42a9      	cmp	r1, r5
 8022f02:	d904      	bls.n	8022f0e <_malloc_r+0x26>
 8022f04:	230c      	movs	r3, #12
 8022f06:	6033      	str	r3, [r6, #0]
 8022f08:	2000      	movs	r0, #0
 8022f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022fe4 <_malloc_r+0xfc>
 8022f12:	f000 f869 	bl	8022fe8 <__malloc_lock>
 8022f16:	f8d8 3000 	ldr.w	r3, [r8]
 8022f1a:	461c      	mov	r4, r3
 8022f1c:	bb44      	cbnz	r4, 8022f70 <_malloc_r+0x88>
 8022f1e:	4629      	mov	r1, r5
 8022f20:	4630      	mov	r0, r6
 8022f22:	f7ff ffbf 	bl	8022ea4 <sbrk_aligned>
 8022f26:	1c43      	adds	r3, r0, #1
 8022f28:	4604      	mov	r4, r0
 8022f2a:	d158      	bne.n	8022fde <_malloc_r+0xf6>
 8022f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8022f30:	4627      	mov	r7, r4
 8022f32:	2f00      	cmp	r7, #0
 8022f34:	d143      	bne.n	8022fbe <_malloc_r+0xd6>
 8022f36:	2c00      	cmp	r4, #0
 8022f38:	d04b      	beq.n	8022fd2 <_malloc_r+0xea>
 8022f3a:	6823      	ldr	r3, [r4, #0]
 8022f3c:	4639      	mov	r1, r7
 8022f3e:	4630      	mov	r0, r6
 8022f40:	eb04 0903 	add.w	r9, r4, r3
 8022f44:	f000 fdc6 	bl	8023ad4 <_sbrk_r>
 8022f48:	4581      	cmp	r9, r0
 8022f4a:	d142      	bne.n	8022fd2 <_malloc_r+0xea>
 8022f4c:	6821      	ldr	r1, [r4, #0]
 8022f4e:	1a6d      	subs	r5, r5, r1
 8022f50:	4629      	mov	r1, r5
 8022f52:	4630      	mov	r0, r6
 8022f54:	f7ff ffa6 	bl	8022ea4 <sbrk_aligned>
 8022f58:	3001      	adds	r0, #1
 8022f5a:	d03a      	beq.n	8022fd2 <_malloc_r+0xea>
 8022f5c:	6823      	ldr	r3, [r4, #0]
 8022f5e:	442b      	add	r3, r5
 8022f60:	6023      	str	r3, [r4, #0]
 8022f62:	f8d8 3000 	ldr.w	r3, [r8]
 8022f66:	685a      	ldr	r2, [r3, #4]
 8022f68:	bb62      	cbnz	r2, 8022fc4 <_malloc_r+0xdc>
 8022f6a:	f8c8 7000 	str.w	r7, [r8]
 8022f6e:	e00f      	b.n	8022f90 <_malloc_r+0xa8>
 8022f70:	6822      	ldr	r2, [r4, #0]
 8022f72:	1b52      	subs	r2, r2, r5
 8022f74:	d420      	bmi.n	8022fb8 <_malloc_r+0xd0>
 8022f76:	2a0b      	cmp	r2, #11
 8022f78:	d917      	bls.n	8022faa <_malloc_r+0xc2>
 8022f7a:	1961      	adds	r1, r4, r5
 8022f7c:	42a3      	cmp	r3, r4
 8022f7e:	6025      	str	r5, [r4, #0]
 8022f80:	bf18      	it	ne
 8022f82:	6059      	strne	r1, [r3, #4]
 8022f84:	6863      	ldr	r3, [r4, #4]
 8022f86:	bf08      	it	eq
 8022f88:	f8c8 1000 	streq.w	r1, [r8]
 8022f8c:	5162      	str	r2, [r4, r5]
 8022f8e:	604b      	str	r3, [r1, #4]
 8022f90:	4630      	mov	r0, r6
 8022f92:	f000 f82f 	bl	8022ff4 <__malloc_unlock>
 8022f96:	f104 000b 	add.w	r0, r4, #11
 8022f9a:	1d23      	adds	r3, r4, #4
 8022f9c:	f020 0007 	bic.w	r0, r0, #7
 8022fa0:	1ac2      	subs	r2, r0, r3
 8022fa2:	bf1c      	itt	ne
 8022fa4:	1a1b      	subne	r3, r3, r0
 8022fa6:	50a3      	strne	r3, [r4, r2]
 8022fa8:	e7af      	b.n	8022f0a <_malloc_r+0x22>
 8022faa:	6862      	ldr	r2, [r4, #4]
 8022fac:	42a3      	cmp	r3, r4
 8022fae:	bf0c      	ite	eq
 8022fb0:	f8c8 2000 	streq.w	r2, [r8]
 8022fb4:	605a      	strne	r2, [r3, #4]
 8022fb6:	e7eb      	b.n	8022f90 <_malloc_r+0xa8>
 8022fb8:	4623      	mov	r3, r4
 8022fba:	6864      	ldr	r4, [r4, #4]
 8022fbc:	e7ae      	b.n	8022f1c <_malloc_r+0x34>
 8022fbe:	463c      	mov	r4, r7
 8022fc0:	687f      	ldr	r7, [r7, #4]
 8022fc2:	e7b6      	b.n	8022f32 <_malloc_r+0x4a>
 8022fc4:	461a      	mov	r2, r3
 8022fc6:	685b      	ldr	r3, [r3, #4]
 8022fc8:	42a3      	cmp	r3, r4
 8022fca:	d1fb      	bne.n	8022fc4 <_malloc_r+0xdc>
 8022fcc:	2300      	movs	r3, #0
 8022fce:	6053      	str	r3, [r2, #4]
 8022fd0:	e7de      	b.n	8022f90 <_malloc_r+0xa8>
 8022fd2:	230c      	movs	r3, #12
 8022fd4:	6033      	str	r3, [r6, #0]
 8022fd6:	4630      	mov	r0, r6
 8022fd8:	f000 f80c 	bl	8022ff4 <__malloc_unlock>
 8022fdc:	e794      	b.n	8022f08 <_malloc_r+0x20>
 8022fde:	6005      	str	r5, [r0, #0]
 8022fe0:	e7d6      	b.n	8022f90 <_malloc_r+0xa8>
 8022fe2:	bf00      	nop
 8022fe4:	200101c4 	.word	0x200101c4

08022fe8 <__malloc_lock>:
 8022fe8:	4801      	ldr	r0, [pc, #4]	@ (8022ff0 <__malloc_lock+0x8>)
 8022fea:	f7ff bed2 	b.w	8022d92 <__retarget_lock_acquire_recursive>
 8022fee:	bf00      	nop
 8022ff0:	200101bc 	.word	0x200101bc

08022ff4 <__malloc_unlock>:
 8022ff4:	4801      	ldr	r0, [pc, #4]	@ (8022ffc <__malloc_unlock+0x8>)
 8022ff6:	f7ff becd 	b.w	8022d94 <__retarget_lock_release_recursive>
 8022ffa:	bf00      	nop
 8022ffc:	200101bc 	.word	0x200101bc

08023000 <__ssputs_r>:
 8023000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023004:	688e      	ldr	r6, [r1, #8]
 8023006:	461f      	mov	r7, r3
 8023008:	42be      	cmp	r6, r7
 802300a:	680b      	ldr	r3, [r1, #0]
 802300c:	4682      	mov	sl, r0
 802300e:	460c      	mov	r4, r1
 8023010:	4690      	mov	r8, r2
 8023012:	d82d      	bhi.n	8023070 <__ssputs_r+0x70>
 8023014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802301c:	d026      	beq.n	802306c <__ssputs_r+0x6c>
 802301e:	6965      	ldr	r5, [r4, #20]
 8023020:	6909      	ldr	r1, [r1, #16]
 8023022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023026:	eba3 0901 	sub.w	r9, r3, r1
 802302a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802302e:	1c7b      	adds	r3, r7, #1
 8023030:	444b      	add	r3, r9
 8023032:	106d      	asrs	r5, r5, #1
 8023034:	429d      	cmp	r5, r3
 8023036:	bf38      	it	cc
 8023038:	461d      	movcc	r5, r3
 802303a:	0553      	lsls	r3, r2, #21
 802303c:	d527      	bpl.n	802308e <__ssputs_r+0x8e>
 802303e:	4629      	mov	r1, r5
 8023040:	f7ff ff52 	bl	8022ee8 <_malloc_r>
 8023044:	4606      	mov	r6, r0
 8023046:	b360      	cbz	r0, 80230a2 <__ssputs_r+0xa2>
 8023048:	6921      	ldr	r1, [r4, #16]
 802304a:	464a      	mov	r2, r9
 802304c:	f7ff feab 	bl	8022da6 <memcpy>
 8023050:	89a3      	ldrh	r3, [r4, #12]
 8023052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8023056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802305a:	81a3      	strh	r3, [r4, #12]
 802305c:	6126      	str	r6, [r4, #16]
 802305e:	6165      	str	r5, [r4, #20]
 8023060:	444e      	add	r6, r9
 8023062:	eba5 0509 	sub.w	r5, r5, r9
 8023066:	6026      	str	r6, [r4, #0]
 8023068:	60a5      	str	r5, [r4, #8]
 802306a:	463e      	mov	r6, r7
 802306c:	42be      	cmp	r6, r7
 802306e:	d900      	bls.n	8023072 <__ssputs_r+0x72>
 8023070:	463e      	mov	r6, r7
 8023072:	6820      	ldr	r0, [r4, #0]
 8023074:	4632      	mov	r2, r6
 8023076:	4641      	mov	r1, r8
 8023078:	f7ff fdd6 	bl	8022c28 <memmove>
 802307c:	68a3      	ldr	r3, [r4, #8]
 802307e:	1b9b      	subs	r3, r3, r6
 8023080:	60a3      	str	r3, [r4, #8]
 8023082:	6823      	ldr	r3, [r4, #0]
 8023084:	4433      	add	r3, r6
 8023086:	6023      	str	r3, [r4, #0]
 8023088:	2000      	movs	r0, #0
 802308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802308e:	462a      	mov	r2, r5
 8023090:	f000 fd37 	bl	8023b02 <_realloc_r>
 8023094:	4606      	mov	r6, r0
 8023096:	2800      	cmp	r0, #0
 8023098:	d1e0      	bne.n	802305c <__ssputs_r+0x5c>
 802309a:	6921      	ldr	r1, [r4, #16]
 802309c:	4650      	mov	r0, sl
 802309e:	f7ff feaf 	bl	8022e00 <_free_r>
 80230a2:	230c      	movs	r3, #12
 80230a4:	f8ca 3000 	str.w	r3, [sl]
 80230a8:	89a3      	ldrh	r3, [r4, #12]
 80230aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80230ae:	81a3      	strh	r3, [r4, #12]
 80230b0:	f04f 30ff 	mov.w	r0, #4294967295
 80230b4:	e7e9      	b.n	802308a <__ssputs_r+0x8a>
	...

080230b8 <_svfiprintf_r>:
 80230b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230bc:	4698      	mov	r8, r3
 80230be:	898b      	ldrh	r3, [r1, #12]
 80230c0:	061b      	lsls	r3, r3, #24
 80230c2:	b09d      	sub	sp, #116	@ 0x74
 80230c4:	4607      	mov	r7, r0
 80230c6:	460d      	mov	r5, r1
 80230c8:	4614      	mov	r4, r2
 80230ca:	d510      	bpl.n	80230ee <_svfiprintf_r+0x36>
 80230cc:	690b      	ldr	r3, [r1, #16]
 80230ce:	b973      	cbnz	r3, 80230ee <_svfiprintf_r+0x36>
 80230d0:	2140      	movs	r1, #64	@ 0x40
 80230d2:	f7ff ff09 	bl	8022ee8 <_malloc_r>
 80230d6:	6028      	str	r0, [r5, #0]
 80230d8:	6128      	str	r0, [r5, #16]
 80230da:	b930      	cbnz	r0, 80230ea <_svfiprintf_r+0x32>
 80230dc:	230c      	movs	r3, #12
 80230de:	603b      	str	r3, [r7, #0]
 80230e0:	f04f 30ff 	mov.w	r0, #4294967295
 80230e4:	b01d      	add	sp, #116	@ 0x74
 80230e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ea:	2340      	movs	r3, #64	@ 0x40
 80230ec:	616b      	str	r3, [r5, #20]
 80230ee:	2300      	movs	r3, #0
 80230f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80230f2:	2320      	movs	r3, #32
 80230f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80230f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80230fc:	2330      	movs	r3, #48	@ 0x30
 80230fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802329c <_svfiprintf_r+0x1e4>
 8023102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023106:	f04f 0901 	mov.w	r9, #1
 802310a:	4623      	mov	r3, r4
 802310c:	469a      	mov	sl, r3
 802310e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023112:	b10a      	cbz	r2, 8023118 <_svfiprintf_r+0x60>
 8023114:	2a25      	cmp	r2, #37	@ 0x25
 8023116:	d1f9      	bne.n	802310c <_svfiprintf_r+0x54>
 8023118:	ebba 0b04 	subs.w	fp, sl, r4
 802311c:	d00b      	beq.n	8023136 <_svfiprintf_r+0x7e>
 802311e:	465b      	mov	r3, fp
 8023120:	4622      	mov	r2, r4
 8023122:	4629      	mov	r1, r5
 8023124:	4638      	mov	r0, r7
 8023126:	f7ff ff6b 	bl	8023000 <__ssputs_r>
 802312a:	3001      	adds	r0, #1
 802312c:	f000 80a7 	beq.w	802327e <_svfiprintf_r+0x1c6>
 8023130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023132:	445a      	add	r2, fp
 8023134:	9209      	str	r2, [sp, #36]	@ 0x24
 8023136:	f89a 3000 	ldrb.w	r3, [sl]
 802313a:	2b00      	cmp	r3, #0
 802313c:	f000 809f 	beq.w	802327e <_svfiprintf_r+0x1c6>
 8023140:	2300      	movs	r3, #0
 8023142:	f04f 32ff 	mov.w	r2, #4294967295
 8023146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802314a:	f10a 0a01 	add.w	sl, sl, #1
 802314e:	9304      	str	r3, [sp, #16]
 8023150:	9307      	str	r3, [sp, #28]
 8023152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023156:	931a      	str	r3, [sp, #104]	@ 0x68
 8023158:	4654      	mov	r4, sl
 802315a:	2205      	movs	r2, #5
 802315c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023160:	484e      	ldr	r0, [pc, #312]	@ (802329c <_svfiprintf_r+0x1e4>)
 8023162:	f7dd f8ed 	bl	8000340 <memchr>
 8023166:	9a04      	ldr	r2, [sp, #16]
 8023168:	b9d8      	cbnz	r0, 80231a2 <_svfiprintf_r+0xea>
 802316a:	06d0      	lsls	r0, r2, #27
 802316c:	bf44      	itt	mi
 802316e:	2320      	movmi	r3, #32
 8023170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023174:	0711      	lsls	r1, r2, #28
 8023176:	bf44      	itt	mi
 8023178:	232b      	movmi	r3, #43	@ 0x2b
 802317a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802317e:	f89a 3000 	ldrb.w	r3, [sl]
 8023182:	2b2a      	cmp	r3, #42	@ 0x2a
 8023184:	d015      	beq.n	80231b2 <_svfiprintf_r+0xfa>
 8023186:	9a07      	ldr	r2, [sp, #28]
 8023188:	4654      	mov	r4, sl
 802318a:	2000      	movs	r0, #0
 802318c:	f04f 0c0a 	mov.w	ip, #10
 8023190:	4621      	mov	r1, r4
 8023192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023196:	3b30      	subs	r3, #48	@ 0x30
 8023198:	2b09      	cmp	r3, #9
 802319a:	d94b      	bls.n	8023234 <_svfiprintf_r+0x17c>
 802319c:	b1b0      	cbz	r0, 80231cc <_svfiprintf_r+0x114>
 802319e:	9207      	str	r2, [sp, #28]
 80231a0:	e014      	b.n	80231cc <_svfiprintf_r+0x114>
 80231a2:	eba0 0308 	sub.w	r3, r0, r8
 80231a6:	fa09 f303 	lsl.w	r3, r9, r3
 80231aa:	4313      	orrs	r3, r2
 80231ac:	9304      	str	r3, [sp, #16]
 80231ae:	46a2      	mov	sl, r4
 80231b0:	e7d2      	b.n	8023158 <_svfiprintf_r+0xa0>
 80231b2:	9b03      	ldr	r3, [sp, #12]
 80231b4:	1d19      	adds	r1, r3, #4
 80231b6:	681b      	ldr	r3, [r3, #0]
 80231b8:	9103      	str	r1, [sp, #12]
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	bfbb      	ittet	lt
 80231be:	425b      	neglt	r3, r3
 80231c0:	f042 0202 	orrlt.w	r2, r2, #2
 80231c4:	9307      	strge	r3, [sp, #28]
 80231c6:	9307      	strlt	r3, [sp, #28]
 80231c8:	bfb8      	it	lt
 80231ca:	9204      	strlt	r2, [sp, #16]
 80231cc:	7823      	ldrb	r3, [r4, #0]
 80231ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80231d0:	d10a      	bne.n	80231e8 <_svfiprintf_r+0x130>
 80231d2:	7863      	ldrb	r3, [r4, #1]
 80231d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80231d6:	d132      	bne.n	802323e <_svfiprintf_r+0x186>
 80231d8:	9b03      	ldr	r3, [sp, #12]
 80231da:	1d1a      	adds	r2, r3, #4
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	9203      	str	r2, [sp, #12]
 80231e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80231e4:	3402      	adds	r4, #2
 80231e6:	9305      	str	r3, [sp, #20]
 80231e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80232ac <_svfiprintf_r+0x1f4>
 80231ec:	7821      	ldrb	r1, [r4, #0]
 80231ee:	2203      	movs	r2, #3
 80231f0:	4650      	mov	r0, sl
 80231f2:	f7dd f8a5 	bl	8000340 <memchr>
 80231f6:	b138      	cbz	r0, 8023208 <_svfiprintf_r+0x150>
 80231f8:	9b04      	ldr	r3, [sp, #16]
 80231fa:	eba0 000a 	sub.w	r0, r0, sl
 80231fe:	2240      	movs	r2, #64	@ 0x40
 8023200:	4082      	lsls	r2, r0
 8023202:	4313      	orrs	r3, r2
 8023204:	3401      	adds	r4, #1
 8023206:	9304      	str	r3, [sp, #16]
 8023208:	f814 1b01 	ldrb.w	r1, [r4], #1
 802320c:	4824      	ldr	r0, [pc, #144]	@ (80232a0 <_svfiprintf_r+0x1e8>)
 802320e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023212:	2206      	movs	r2, #6
 8023214:	f7dd f894 	bl	8000340 <memchr>
 8023218:	2800      	cmp	r0, #0
 802321a:	d036      	beq.n	802328a <_svfiprintf_r+0x1d2>
 802321c:	4b21      	ldr	r3, [pc, #132]	@ (80232a4 <_svfiprintf_r+0x1ec>)
 802321e:	bb1b      	cbnz	r3, 8023268 <_svfiprintf_r+0x1b0>
 8023220:	9b03      	ldr	r3, [sp, #12]
 8023222:	3307      	adds	r3, #7
 8023224:	f023 0307 	bic.w	r3, r3, #7
 8023228:	3308      	adds	r3, #8
 802322a:	9303      	str	r3, [sp, #12]
 802322c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802322e:	4433      	add	r3, r6
 8023230:	9309      	str	r3, [sp, #36]	@ 0x24
 8023232:	e76a      	b.n	802310a <_svfiprintf_r+0x52>
 8023234:	fb0c 3202 	mla	r2, ip, r2, r3
 8023238:	460c      	mov	r4, r1
 802323a:	2001      	movs	r0, #1
 802323c:	e7a8      	b.n	8023190 <_svfiprintf_r+0xd8>
 802323e:	2300      	movs	r3, #0
 8023240:	3401      	adds	r4, #1
 8023242:	9305      	str	r3, [sp, #20]
 8023244:	4619      	mov	r1, r3
 8023246:	f04f 0c0a 	mov.w	ip, #10
 802324a:	4620      	mov	r0, r4
 802324c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023250:	3a30      	subs	r2, #48	@ 0x30
 8023252:	2a09      	cmp	r2, #9
 8023254:	d903      	bls.n	802325e <_svfiprintf_r+0x1a6>
 8023256:	2b00      	cmp	r3, #0
 8023258:	d0c6      	beq.n	80231e8 <_svfiprintf_r+0x130>
 802325a:	9105      	str	r1, [sp, #20]
 802325c:	e7c4      	b.n	80231e8 <_svfiprintf_r+0x130>
 802325e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023262:	4604      	mov	r4, r0
 8023264:	2301      	movs	r3, #1
 8023266:	e7f0      	b.n	802324a <_svfiprintf_r+0x192>
 8023268:	ab03      	add	r3, sp, #12
 802326a:	9300      	str	r3, [sp, #0]
 802326c:	462a      	mov	r2, r5
 802326e:	4b0e      	ldr	r3, [pc, #56]	@ (80232a8 <_svfiprintf_r+0x1f0>)
 8023270:	a904      	add	r1, sp, #16
 8023272:	4638      	mov	r0, r7
 8023274:	f3af 8000 	nop.w
 8023278:	1c42      	adds	r2, r0, #1
 802327a:	4606      	mov	r6, r0
 802327c:	d1d6      	bne.n	802322c <_svfiprintf_r+0x174>
 802327e:	89ab      	ldrh	r3, [r5, #12]
 8023280:	065b      	lsls	r3, r3, #25
 8023282:	f53f af2d 	bmi.w	80230e0 <_svfiprintf_r+0x28>
 8023286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023288:	e72c      	b.n	80230e4 <_svfiprintf_r+0x2c>
 802328a:	ab03      	add	r3, sp, #12
 802328c:	9300      	str	r3, [sp, #0]
 802328e:	462a      	mov	r2, r5
 8023290:	4b05      	ldr	r3, [pc, #20]	@ (80232a8 <_svfiprintf_r+0x1f0>)
 8023292:	a904      	add	r1, sp, #16
 8023294:	4638      	mov	r0, r7
 8023296:	f000 f9bb 	bl	8023610 <_printf_i>
 802329a:	e7ed      	b.n	8023278 <_svfiprintf_r+0x1c0>
 802329c:	08038fcc 	.word	0x08038fcc
 80232a0:	08038fd6 	.word	0x08038fd6
 80232a4:	00000000 	.word	0x00000000
 80232a8:	08023001 	.word	0x08023001
 80232ac:	08038fd2 	.word	0x08038fd2

080232b0 <__sfputc_r>:
 80232b0:	6893      	ldr	r3, [r2, #8]
 80232b2:	3b01      	subs	r3, #1
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	b410      	push	{r4}
 80232b8:	6093      	str	r3, [r2, #8]
 80232ba:	da08      	bge.n	80232ce <__sfputc_r+0x1e>
 80232bc:	6994      	ldr	r4, [r2, #24]
 80232be:	42a3      	cmp	r3, r4
 80232c0:	db01      	blt.n	80232c6 <__sfputc_r+0x16>
 80232c2:	290a      	cmp	r1, #10
 80232c4:	d103      	bne.n	80232ce <__sfputc_r+0x1e>
 80232c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232ca:	f7ff bc08 	b.w	8022ade <__swbuf_r>
 80232ce:	6813      	ldr	r3, [r2, #0]
 80232d0:	1c58      	adds	r0, r3, #1
 80232d2:	6010      	str	r0, [r2, #0]
 80232d4:	7019      	strb	r1, [r3, #0]
 80232d6:	4608      	mov	r0, r1
 80232d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232dc:	4770      	bx	lr

080232de <__sfputs_r>:
 80232de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232e0:	4606      	mov	r6, r0
 80232e2:	460f      	mov	r7, r1
 80232e4:	4614      	mov	r4, r2
 80232e6:	18d5      	adds	r5, r2, r3
 80232e8:	42ac      	cmp	r4, r5
 80232ea:	d101      	bne.n	80232f0 <__sfputs_r+0x12>
 80232ec:	2000      	movs	r0, #0
 80232ee:	e007      	b.n	8023300 <__sfputs_r+0x22>
 80232f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232f4:	463a      	mov	r2, r7
 80232f6:	4630      	mov	r0, r6
 80232f8:	f7ff ffda 	bl	80232b0 <__sfputc_r>
 80232fc:	1c43      	adds	r3, r0, #1
 80232fe:	d1f3      	bne.n	80232e8 <__sfputs_r+0xa>
 8023300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023304 <_vfiprintf_r>:
 8023304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023308:	460d      	mov	r5, r1
 802330a:	b09d      	sub	sp, #116	@ 0x74
 802330c:	4614      	mov	r4, r2
 802330e:	4698      	mov	r8, r3
 8023310:	4606      	mov	r6, r0
 8023312:	b118      	cbz	r0, 802331c <_vfiprintf_r+0x18>
 8023314:	6a03      	ldr	r3, [r0, #32]
 8023316:	b90b      	cbnz	r3, 802331c <_vfiprintf_r+0x18>
 8023318:	f7ff fad8 	bl	80228cc <__sinit>
 802331c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802331e:	07d9      	lsls	r1, r3, #31
 8023320:	d405      	bmi.n	802332e <_vfiprintf_r+0x2a>
 8023322:	89ab      	ldrh	r3, [r5, #12]
 8023324:	059a      	lsls	r2, r3, #22
 8023326:	d402      	bmi.n	802332e <_vfiprintf_r+0x2a>
 8023328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802332a:	f7ff fd32 	bl	8022d92 <__retarget_lock_acquire_recursive>
 802332e:	89ab      	ldrh	r3, [r5, #12]
 8023330:	071b      	lsls	r3, r3, #28
 8023332:	d501      	bpl.n	8023338 <_vfiprintf_r+0x34>
 8023334:	692b      	ldr	r3, [r5, #16]
 8023336:	b99b      	cbnz	r3, 8023360 <_vfiprintf_r+0x5c>
 8023338:	4629      	mov	r1, r5
 802333a:	4630      	mov	r0, r6
 802333c:	f7ff fc0e 	bl	8022b5c <__swsetup_r>
 8023340:	b170      	cbz	r0, 8023360 <_vfiprintf_r+0x5c>
 8023342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023344:	07dc      	lsls	r4, r3, #31
 8023346:	d504      	bpl.n	8023352 <_vfiprintf_r+0x4e>
 8023348:	f04f 30ff 	mov.w	r0, #4294967295
 802334c:	b01d      	add	sp, #116	@ 0x74
 802334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023352:	89ab      	ldrh	r3, [r5, #12]
 8023354:	0598      	lsls	r0, r3, #22
 8023356:	d4f7      	bmi.n	8023348 <_vfiprintf_r+0x44>
 8023358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802335a:	f7ff fd1b 	bl	8022d94 <__retarget_lock_release_recursive>
 802335e:	e7f3      	b.n	8023348 <_vfiprintf_r+0x44>
 8023360:	2300      	movs	r3, #0
 8023362:	9309      	str	r3, [sp, #36]	@ 0x24
 8023364:	2320      	movs	r3, #32
 8023366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802336a:	f8cd 800c 	str.w	r8, [sp, #12]
 802336e:	2330      	movs	r3, #48	@ 0x30
 8023370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023520 <_vfiprintf_r+0x21c>
 8023374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023378:	f04f 0901 	mov.w	r9, #1
 802337c:	4623      	mov	r3, r4
 802337e:	469a      	mov	sl, r3
 8023380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023384:	b10a      	cbz	r2, 802338a <_vfiprintf_r+0x86>
 8023386:	2a25      	cmp	r2, #37	@ 0x25
 8023388:	d1f9      	bne.n	802337e <_vfiprintf_r+0x7a>
 802338a:	ebba 0b04 	subs.w	fp, sl, r4
 802338e:	d00b      	beq.n	80233a8 <_vfiprintf_r+0xa4>
 8023390:	465b      	mov	r3, fp
 8023392:	4622      	mov	r2, r4
 8023394:	4629      	mov	r1, r5
 8023396:	4630      	mov	r0, r6
 8023398:	f7ff ffa1 	bl	80232de <__sfputs_r>
 802339c:	3001      	adds	r0, #1
 802339e:	f000 80a7 	beq.w	80234f0 <_vfiprintf_r+0x1ec>
 80233a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80233a4:	445a      	add	r2, fp
 80233a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80233a8:	f89a 3000 	ldrb.w	r3, [sl]
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	f000 809f 	beq.w	80234f0 <_vfiprintf_r+0x1ec>
 80233b2:	2300      	movs	r3, #0
 80233b4:	f04f 32ff 	mov.w	r2, #4294967295
 80233b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233bc:	f10a 0a01 	add.w	sl, sl, #1
 80233c0:	9304      	str	r3, [sp, #16]
 80233c2:	9307      	str	r3, [sp, #28]
 80233c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80233c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80233ca:	4654      	mov	r4, sl
 80233cc:	2205      	movs	r2, #5
 80233ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233d2:	4853      	ldr	r0, [pc, #332]	@ (8023520 <_vfiprintf_r+0x21c>)
 80233d4:	f7dc ffb4 	bl	8000340 <memchr>
 80233d8:	9a04      	ldr	r2, [sp, #16]
 80233da:	b9d8      	cbnz	r0, 8023414 <_vfiprintf_r+0x110>
 80233dc:	06d1      	lsls	r1, r2, #27
 80233de:	bf44      	itt	mi
 80233e0:	2320      	movmi	r3, #32
 80233e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233e6:	0713      	lsls	r3, r2, #28
 80233e8:	bf44      	itt	mi
 80233ea:	232b      	movmi	r3, #43	@ 0x2b
 80233ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233f0:	f89a 3000 	ldrb.w	r3, [sl]
 80233f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80233f6:	d015      	beq.n	8023424 <_vfiprintf_r+0x120>
 80233f8:	9a07      	ldr	r2, [sp, #28]
 80233fa:	4654      	mov	r4, sl
 80233fc:	2000      	movs	r0, #0
 80233fe:	f04f 0c0a 	mov.w	ip, #10
 8023402:	4621      	mov	r1, r4
 8023404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023408:	3b30      	subs	r3, #48	@ 0x30
 802340a:	2b09      	cmp	r3, #9
 802340c:	d94b      	bls.n	80234a6 <_vfiprintf_r+0x1a2>
 802340e:	b1b0      	cbz	r0, 802343e <_vfiprintf_r+0x13a>
 8023410:	9207      	str	r2, [sp, #28]
 8023412:	e014      	b.n	802343e <_vfiprintf_r+0x13a>
 8023414:	eba0 0308 	sub.w	r3, r0, r8
 8023418:	fa09 f303 	lsl.w	r3, r9, r3
 802341c:	4313      	orrs	r3, r2
 802341e:	9304      	str	r3, [sp, #16]
 8023420:	46a2      	mov	sl, r4
 8023422:	e7d2      	b.n	80233ca <_vfiprintf_r+0xc6>
 8023424:	9b03      	ldr	r3, [sp, #12]
 8023426:	1d19      	adds	r1, r3, #4
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	9103      	str	r1, [sp, #12]
 802342c:	2b00      	cmp	r3, #0
 802342e:	bfbb      	ittet	lt
 8023430:	425b      	neglt	r3, r3
 8023432:	f042 0202 	orrlt.w	r2, r2, #2
 8023436:	9307      	strge	r3, [sp, #28]
 8023438:	9307      	strlt	r3, [sp, #28]
 802343a:	bfb8      	it	lt
 802343c:	9204      	strlt	r2, [sp, #16]
 802343e:	7823      	ldrb	r3, [r4, #0]
 8023440:	2b2e      	cmp	r3, #46	@ 0x2e
 8023442:	d10a      	bne.n	802345a <_vfiprintf_r+0x156>
 8023444:	7863      	ldrb	r3, [r4, #1]
 8023446:	2b2a      	cmp	r3, #42	@ 0x2a
 8023448:	d132      	bne.n	80234b0 <_vfiprintf_r+0x1ac>
 802344a:	9b03      	ldr	r3, [sp, #12]
 802344c:	1d1a      	adds	r2, r3, #4
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	9203      	str	r2, [sp, #12]
 8023452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023456:	3402      	adds	r4, #2
 8023458:	9305      	str	r3, [sp, #20]
 802345a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023530 <_vfiprintf_r+0x22c>
 802345e:	7821      	ldrb	r1, [r4, #0]
 8023460:	2203      	movs	r2, #3
 8023462:	4650      	mov	r0, sl
 8023464:	f7dc ff6c 	bl	8000340 <memchr>
 8023468:	b138      	cbz	r0, 802347a <_vfiprintf_r+0x176>
 802346a:	9b04      	ldr	r3, [sp, #16]
 802346c:	eba0 000a 	sub.w	r0, r0, sl
 8023470:	2240      	movs	r2, #64	@ 0x40
 8023472:	4082      	lsls	r2, r0
 8023474:	4313      	orrs	r3, r2
 8023476:	3401      	adds	r4, #1
 8023478:	9304      	str	r3, [sp, #16]
 802347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802347e:	4829      	ldr	r0, [pc, #164]	@ (8023524 <_vfiprintf_r+0x220>)
 8023480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023484:	2206      	movs	r2, #6
 8023486:	f7dc ff5b 	bl	8000340 <memchr>
 802348a:	2800      	cmp	r0, #0
 802348c:	d03f      	beq.n	802350e <_vfiprintf_r+0x20a>
 802348e:	4b26      	ldr	r3, [pc, #152]	@ (8023528 <_vfiprintf_r+0x224>)
 8023490:	bb1b      	cbnz	r3, 80234da <_vfiprintf_r+0x1d6>
 8023492:	9b03      	ldr	r3, [sp, #12]
 8023494:	3307      	adds	r3, #7
 8023496:	f023 0307 	bic.w	r3, r3, #7
 802349a:	3308      	adds	r3, #8
 802349c:	9303      	str	r3, [sp, #12]
 802349e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234a0:	443b      	add	r3, r7
 80234a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80234a4:	e76a      	b.n	802337c <_vfiprintf_r+0x78>
 80234a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80234aa:	460c      	mov	r4, r1
 80234ac:	2001      	movs	r0, #1
 80234ae:	e7a8      	b.n	8023402 <_vfiprintf_r+0xfe>
 80234b0:	2300      	movs	r3, #0
 80234b2:	3401      	adds	r4, #1
 80234b4:	9305      	str	r3, [sp, #20]
 80234b6:	4619      	mov	r1, r3
 80234b8:	f04f 0c0a 	mov.w	ip, #10
 80234bc:	4620      	mov	r0, r4
 80234be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234c2:	3a30      	subs	r2, #48	@ 0x30
 80234c4:	2a09      	cmp	r2, #9
 80234c6:	d903      	bls.n	80234d0 <_vfiprintf_r+0x1cc>
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	d0c6      	beq.n	802345a <_vfiprintf_r+0x156>
 80234cc:	9105      	str	r1, [sp, #20]
 80234ce:	e7c4      	b.n	802345a <_vfiprintf_r+0x156>
 80234d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80234d4:	4604      	mov	r4, r0
 80234d6:	2301      	movs	r3, #1
 80234d8:	e7f0      	b.n	80234bc <_vfiprintf_r+0x1b8>
 80234da:	ab03      	add	r3, sp, #12
 80234dc:	9300      	str	r3, [sp, #0]
 80234de:	462a      	mov	r2, r5
 80234e0:	4b12      	ldr	r3, [pc, #72]	@ (802352c <_vfiprintf_r+0x228>)
 80234e2:	a904      	add	r1, sp, #16
 80234e4:	4630      	mov	r0, r6
 80234e6:	f3af 8000 	nop.w
 80234ea:	4607      	mov	r7, r0
 80234ec:	1c78      	adds	r0, r7, #1
 80234ee:	d1d6      	bne.n	802349e <_vfiprintf_r+0x19a>
 80234f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80234f2:	07d9      	lsls	r1, r3, #31
 80234f4:	d405      	bmi.n	8023502 <_vfiprintf_r+0x1fe>
 80234f6:	89ab      	ldrh	r3, [r5, #12]
 80234f8:	059a      	lsls	r2, r3, #22
 80234fa:	d402      	bmi.n	8023502 <_vfiprintf_r+0x1fe>
 80234fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80234fe:	f7ff fc49 	bl	8022d94 <__retarget_lock_release_recursive>
 8023502:	89ab      	ldrh	r3, [r5, #12]
 8023504:	065b      	lsls	r3, r3, #25
 8023506:	f53f af1f 	bmi.w	8023348 <_vfiprintf_r+0x44>
 802350a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802350c:	e71e      	b.n	802334c <_vfiprintf_r+0x48>
 802350e:	ab03      	add	r3, sp, #12
 8023510:	9300      	str	r3, [sp, #0]
 8023512:	462a      	mov	r2, r5
 8023514:	4b05      	ldr	r3, [pc, #20]	@ (802352c <_vfiprintf_r+0x228>)
 8023516:	a904      	add	r1, sp, #16
 8023518:	4630      	mov	r0, r6
 802351a:	f000 f879 	bl	8023610 <_printf_i>
 802351e:	e7e4      	b.n	80234ea <_vfiprintf_r+0x1e6>
 8023520:	08038fcc 	.word	0x08038fcc
 8023524:	08038fd6 	.word	0x08038fd6
 8023528:	00000000 	.word	0x00000000
 802352c:	080232df 	.word	0x080232df
 8023530:	08038fd2 	.word	0x08038fd2

08023534 <_printf_common>:
 8023534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023538:	4616      	mov	r6, r2
 802353a:	4698      	mov	r8, r3
 802353c:	688a      	ldr	r2, [r1, #8]
 802353e:	690b      	ldr	r3, [r1, #16]
 8023540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023544:	4293      	cmp	r3, r2
 8023546:	bfb8      	it	lt
 8023548:	4613      	movlt	r3, r2
 802354a:	6033      	str	r3, [r6, #0]
 802354c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023550:	4607      	mov	r7, r0
 8023552:	460c      	mov	r4, r1
 8023554:	b10a      	cbz	r2, 802355a <_printf_common+0x26>
 8023556:	3301      	adds	r3, #1
 8023558:	6033      	str	r3, [r6, #0]
 802355a:	6823      	ldr	r3, [r4, #0]
 802355c:	0699      	lsls	r1, r3, #26
 802355e:	bf42      	ittt	mi
 8023560:	6833      	ldrmi	r3, [r6, #0]
 8023562:	3302      	addmi	r3, #2
 8023564:	6033      	strmi	r3, [r6, #0]
 8023566:	6825      	ldr	r5, [r4, #0]
 8023568:	f015 0506 	ands.w	r5, r5, #6
 802356c:	d106      	bne.n	802357c <_printf_common+0x48>
 802356e:	f104 0a19 	add.w	sl, r4, #25
 8023572:	68e3      	ldr	r3, [r4, #12]
 8023574:	6832      	ldr	r2, [r6, #0]
 8023576:	1a9b      	subs	r3, r3, r2
 8023578:	42ab      	cmp	r3, r5
 802357a:	dc26      	bgt.n	80235ca <_printf_common+0x96>
 802357c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023580:	6822      	ldr	r2, [r4, #0]
 8023582:	3b00      	subs	r3, #0
 8023584:	bf18      	it	ne
 8023586:	2301      	movne	r3, #1
 8023588:	0692      	lsls	r2, r2, #26
 802358a:	d42b      	bmi.n	80235e4 <_printf_common+0xb0>
 802358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023590:	4641      	mov	r1, r8
 8023592:	4638      	mov	r0, r7
 8023594:	47c8      	blx	r9
 8023596:	3001      	adds	r0, #1
 8023598:	d01e      	beq.n	80235d8 <_printf_common+0xa4>
 802359a:	6823      	ldr	r3, [r4, #0]
 802359c:	6922      	ldr	r2, [r4, #16]
 802359e:	f003 0306 	and.w	r3, r3, #6
 80235a2:	2b04      	cmp	r3, #4
 80235a4:	bf02      	ittt	eq
 80235a6:	68e5      	ldreq	r5, [r4, #12]
 80235a8:	6833      	ldreq	r3, [r6, #0]
 80235aa:	1aed      	subeq	r5, r5, r3
 80235ac:	68a3      	ldr	r3, [r4, #8]
 80235ae:	bf0c      	ite	eq
 80235b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80235b4:	2500      	movne	r5, #0
 80235b6:	4293      	cmp	r3, r2
 80235b8:	bfc4      	itt	gt
 80235ba:	1a9b      	subgt	r3, r3, r2
 80235bc:	18ed      	addgt	r5, r5, r3
 80235be:	2600      	movs	r6, #0
 80235c0:	341a      	adds	r4, #26
 80235c2:	42b5      	cmp	r5, r6
 80235c4:	d11a      	bne.n	80235fc <_printf_common+0xc8>
 80235c6:	2000      	movs	r0, #0
 80235c8:	e008      	b.n	80235dc <_printf_common+0xa8>
 80235ca:	2301      	movs	r3, #1
 80235cc:	4652      	mov	r2, sl
 80235ce:	4641      	mov	r1, r8
 80235d0:	4638      	mov	r0, r7
 80235d2:	47c8      	blx	r9
 80235d4:	3001      	adds	r0, #1
 80235d6:	d103      	bne.n	80235e0 <_printf_common+0xac>
 80235d8:	f04f 30ff 	mov.w	r0, #4294967295
 80235dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235e0:	3501      	adds	r5, #1
 80235e2:	e7c6      	b.n	8023572 <_printf_common+0x3e>
 80235e4:	18e1      	adds	r1, r4, r3
 80235e6:	1c5a      	adds	r2, r3, #1
 80235e8:	2030      	movs	r0, #48	@ 0x30
 80235ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80235ee:	4422      	add	r2, r4
 80235f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80235f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80235f8:	3302      	adds	r3, #2
 80235fa:	e7c7      	b.n	802358c <_printf_common+0x58>
 80235fc:	2301      	movs	r3, #1
 80235fe:	4622      	mov	r2, r4
 8023600:	4641      	mov	r1, r8
 8023602:	4638      	mov	r0, r7
 8023604:	47c8      	blx	r9
 8023606:	3001      	adds	r0, #1
 8023608:	d0e6      	beq.n	80235d8 <_printf_common+0xa4>
 802360a:	3601      	adds	r6, #1
 802360c:	e7d9      	b.n	80235c2 <_printf_common+0x8e>
	...

08023610 <_printf_i>:
 8023610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023614:	7e0f      	ldrb	r7, [r1, #24]
 8023616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023618:	2f78      	cmp	r7, #120	@ 0x78
 802361a:	4691      	mov	r9, r2
 802361c:	4680      	mov	r8, r0
 802361e:	460c      	mov	r4, r1
 8023620:	469a      	mov	sl, r3
 8023622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023626:	d807      	bhi.n	8023638 <_printf_i+0x28>
 8023628:	2f62      	cmp	r7, #98	@ 0x62
 802362a:	d80a      	bhi.n	8023642 <_printf_i+0x32>
 802362c:	2f00      	cmp	r7, #0
 802362e:	f000 80d2 	beq.w	80237d6 <_printf_i+0x1c6>
 8023632:	2f58      	cmp	r7, #88	@ 0x58
 8023634:	f000 80b9 	beq.w	80237aa <_printf_i+0x19a>
 8023638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023640:	e03a      	b.n	80236b8 <_printf_i+0xa8>
 8023642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023646:	2b15      	cmp	r3, #21
 8023648:	d8f6      	bhi.n	8023638 <_printf_i+0x28>
 802364a:	a101      	add	r1, pc, #4	@ (adr r1, 8023650 <_printf_i+0x40>)
 802364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023650:	080236a9 	.word	0x080236a9
 8023654:	080236bd 	.word	0x080236bd
 8023658:	08023639 	.word	0x08023639
 802365c:	08023639 	.word	0x08023639
 8023660:	08023639 	.word	0x08023639
 8023664:	08023639 	.word	0x08023639
 8023668:	080236bd 	.word	0x080236bd
 802366c:	08023639 	.word	0x08023639
 8023670:	08023639 	.word	0x08023639
 8023674:	08023639 	.word	0x08023639
 8023678:	08023639 	.word	0x08023639
 802367c:	080237bd 	.word	0x080237bd
 8023680:	080236e7 	.word	0x080236e7
 8023684:	08023777 	.word	0x08023777
 8023688:	08023639 	.word	0x08023639
 802368c:	08023639 	.word	0x08023639
 8023690:	080237df 	.word	0x080237df
 8023694:	08023639 	.word	0x08023639
 8023698:	080236e7 	.word	0x080236e7
 802369c:	08023639 	.word	0x08023639
 80236a0:	08023639 	.word	0x08023639
 80236a4:	0802377f 	.word	0x0802377f
 80236a8:	6833      	ldr	r3, [r6, #0]
 80236aa:	1d1a      	adds	r2, r3, #4
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	6032      	str	r2, [r6, #0]
 80236b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80236b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80236b8:	2301      	movs	r3, #1
 80236ba:	e09d      	b.n	80237f8 <_printf_i+0x1e8>
 80236bc:	6833      	ldr	r3, [r6, #0]
 80236be:	6820      	ldr	r0, [r4, #0]
 80236c0:	1d19      	adds	r1, r3, #4
 80236c2:	6031      	str	r1, [r6, #0]
 80236c4:	0606      	lsls	r6, r0, #24
 80236c6:	d501      	bpl.n	80236cc <_printf_i+0xbc>
 80236c8:	681d      	ldr	r5, [r3, #0]
 80236ca:	e003      	b.n	80236d4 <_printf_i+0xc4>
 80236cc:	0645      	lsls	r5, r0, #25
 80236ce:	d5fb      	bpl.n	80236c8 <_printf_i+0xb8>
 80236d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80236d4:	2d00      	cmp	r5, #0
 80236d6:	da03      	bge.n	80236e0 <_printf_i+0xd0>
 80236d8:	232d      	movs	r3, #45	@ 0x2d
 80236da:	426d      	negs	r5, r5
 80236dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236e0:	4859      	ldr	r0, [pc, #356]	@ (8023848 <_printf_i+0x238>)
 80236e2:	230a      	movs	r3, #10
 80236e4:	e011      	b.n	802370a <_printf_i+0xfa>
 80236e6:	6821      	ldr	r1, [r4, #0]
 80236e8:	6833      	ldr	r3, [r6, #0]
 80236ea:	0608      	lsls	r0, r1, #24
 80236ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80236f0:	d402      	bmi.n	80236f8 <_printf_i+0xe8>
 80236f2:	0649      	lsls	r1, r1, #25
 80236f4:	bf48      	it	mi
 80236f6:	b2ad      	uxthmi	r5, r5
 80236f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80236fa:	4853      	ldr	r0, [pc, #332]	@ (8023848 <_printf_i+0x238>)
 80236fc:	6033      	str	r3, [r6, #0]
 80236fe:	bf14      	ite	ne
 8023700:	230a      	movne	r3, #10
 8023702:	2308      	moveq	r3, #8
 8023704:	2100      	movs	r1, #0
 8023706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802370a:	6866      	ldr	r6, [r4, #4]
 802370c:	60a6      	str	r6, [r4, #8]
 802370e:	2e00      	cmp	r6, #0
 8023710:	bfa2      	ittt	ge
 8023712:	6821      	ldrge	r1, [r4, #0]
 8023714:	f021 0104 	bicge.w	r1, r1, #4
 8023718:	6021      	strge	r1, [r4, #0]
 802371a:	b90d      	cbnz	r5, 8023720 <_printf_i+0x110>
 802371c:	2e00      	cmp	r6, #0
 802371e:	d04b      	beq.n	80237b8 <_printf_i+0x1a8>
 8023720:	4616      	mov	r6, r2
 8023722:	fbb5 f1f3 	udiv	r1, r5, r3
 8023726:	fb03 5711 	mls	r7, r3, r1, r5
 802372a:	5dc7      	ldrb	r7, [r0, r7]
 802372c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023730:	462f      	mov	r7, r5
 8023732:	42bb      	cmp	r3, r7
 8023734:	460d      	mov	r5, r1
 8023736:	d9f4      	bls.n	8023722 <_printf_i+0x112>
 8023738:	2b08      	cmp	r3, #8
 802373a:	d10b      	bne.n	8023754 <_printf_i+0x144>
 802373c:	6823      	ldr	r3, [r4, #0]
 802373e:	07df      	lsls	r7, r3, #31
 8023740:	d508      	bpl.n	8023754 <_printf_i+0x144>
 8023742:	6923      	ldr	r3, [r4, #16]
 8023744:	6861      	ldr	r1, [r4, #4]
 8023746:	4299      	cmp	r1, r3
 8023748:	bfde      	ittt	le
 802374a:	2330      	movle	r3, #48	@ 0x30
 802374c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023754:	1b92      	subs	r2, r2, r6
 8023756:	6122      	str	r2, [r4, #16]
 8023758:	f8cd a000 	str.w	sl, [sp]
 802375c:	464b      	mov	r3, r9
 802375e:	aa03      	add	r2, sp, #12
 8023760:	4621      	mov	r1, r4
 8023762:	4640      	mov	r0, r8
 8023764:	f7ff fee6 	bl	8023534 <_printf_common>
 8023768:	3001      	adds	r0, #1
 802376a:	d14a      	bne.n	8023802 <_printf_i+0x1f2>
 802376c:	f04f 30ff 	mov.w	r0, #4294967295
 8023770:	b004      	add	sp, #16
 8023772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023776:	6823      	ldr	r3, [r4, #0]
 8023778:	f043 0320 	orr.w	r3, r3, #32
 802377c:	6023      	str	r3, [r4, #0]
 802377e:	4833      	ldr	r0, [pc, #204]	@ (802384c <_printf_i+0x23c>)
 8023780:	2778      	movs	r7, #120	@ 0x78
 8023782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023786:	6823      	ldr	r3, [r4, #0]
 8023788:	6831      	ldr	r1, [r6, #0]
 802378a:	061f      	lsls	r7, r3, #24
 802378c:	f851 5b04 	ldr.w	r5, [r1], #4
 8023790:	d402      	bmi.n	8023798 <_printf_i+0x188>
 8023792:	065f      	lsls	r7, r3, #25
 8023794:	bf48      	it	mi
 8023796:	b2ad      	uxthmi	r5, r5
 8023798:	6031      	str	r1, [r6, #0]
 802379a:	07d9      	lsls	r1, r3, #31
 802379c:	bf44      	itt	mi
 802379e:	f043 0320 	orrmi.w	r3, r3, #32
 80237a2:	6023      	strmi	r3, [r4, #0]
 80237a4:	b11d      	cbz	r5, 80237ae <_printf_i+0x19e>
 80237a6:	2310      	movs	r3, #16
 80237a8:	e7ac      	b.n	8023704 <_printf_i+0xf4>
 80237aa:	4827      	ldr	r0, [pc, #156]	@ (8023848 <_printf_i+0x238>)
 80237ac:	e7e9      	b.n	8023782 <_printf_i+0x172>
 80237ae:	6823      	ldr	r3, [r4, #0]
 80237b0:	f023 0320 	bic.w	r3, r3, #32
 80237b4:	6023      	str	r3, [r4, #0]
 80237b6:	e7f6      	b.n	80237a6 <_printf_i+0x196>
 80237b8:	4616      	mov	r6, r2
 80237ba:	e7bd      	b.n	8023738 <_printf_i+0x128>
 80237bc:	6833      	ldr	r3, [r6, #0]
 80237be:	6825      	ldr	r5, [r4, #0]
 80237c0:	6961      	ldr	r1, [r4, #20]
 80237c2:	1d18      	adds	r0, r3, #4
 80237c4:	6030      	str	r0, [r6, #0]
 80237c6:	062e      	lsls	r6, r5, #24
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	d501      	bpl.n	80237d0 <_printf_i+0x1c0>
 80237cc:	6019      	str	r1, [r3, #0]
 80237ce:	e002      	b.n	80237d6 <_printf_i+0x1c6>
 80237d0:	0668      	lsls	r0, r5, #25
 80237d2:	d5fb      	bpl.n	80237cc <_printf_i+0x1bc>
 80237d4:	8019      	strh	r1, [r3, #0]
 80237d6:	2300      	movs	r3, #0
 80237d8:	6123      	str	r3, [r4, #16]
 80237da:	4616      	mov	r6, r2
 80237dc:	e7bc      	b.n	8023758 <_printf_i+0x148>
 80237de:	6833      	ldr	r3, [r6, #0]
 80237e0:	1d1a      	adds	r2, r3, #4
 80237e2:	6032      	str	r2, [r6, #0]
 80237e4:	681e      	ldr	r6, [r3, #0]
 80237e6:	6862      	ldr	r2, [r4, #4]
 80237e8:	2100      	movs	r1, #0
 80237ea:	4630      	mov	r0, r6
 80237ec:	f7dc fda8 	bl	8000340 <memchr>
 80237f0:	b108      	cbz	r0, 80237f6 <_printf_i+0x1e6>
 80237f2:	1b80      	subs	r0, r0, r6
 80237f4:	6060      	str	r0, [r4, #4]
 80237f6:	6863      	ldr	r3, [r4, #4]
 80237f8:	6123      	str	r3, [r4, #16]
 80237fa:	2300      	movs	r3, #0
 80237fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023800:	e7aa      	b.n	8023758 <_printf_i+0x148>
 8023802:	6923      	ldr	r3, [r4, #16]
 8023804:	4632      	mov	r2, r6
 8023806:	4649      	mov	r1, r9
 8023808:	4640      	mov	r0, r8
 802380a:	47d0      	blx	sl
 802380c:	3001      	adds	r0, #1
 802380e:	d0ad      	beq.n	802376c <_printf_i+0x15c>
 8023810:	6823      	ldr	r3, [r4, #0]
 8023812:	079b      	lsls	r3, r3, #30
 8023814:	d413      	bmi.n	802383e <_printf_i+0x22e>
 8023816:	68e0      	ldr	r0, [r4, #12]
 8023818:	9b03      	ldr	r3, [sp, #12]
 802381a:	4298      	cmp	r0, r3
 802381c:	bfb8      	it	lt
 802381e:	4618      	movlt	r0, r3
 8023820:	e7a6      	b.n	8023770 <_printf_i+0x160>
 8023822:	2301      	movs	r3, #1
 8023824:	4632      	mov	r2, r6
 8023826:	4649      	mov	r1, r9
 8023828:	4640      	mov	r0, r8
 802382a:	47d0      	blx	sl
 802382c:	3001      	adds	r0, #1
 802382e:	d09d      	beq.n	802376c <_printf_i+0x15c>
 8023830:	3501      	adds	r5, #1
 8023832:	68e3      	ldr	r3, [r4, #12]
 8023834:	9903      	ldr	r1, [sp, #12]
 8023836:	1a5b      	subs	r3, r3, r1
 8023838:	42ab      	cmp	r3, r5
 802383a:	dcf2      	bgt.n	8023822 <_printf_i+0x212>
 802383c:	e7eb      	b.n	8023816 <_printf_i+0x206>
 802383e:	2500      	movs	r5, #0
 8023840:	f104 0619 	add.w	r6, r4, #25
 8023844:	e7f5      	b.n	8023832 <_printf_i+0x222>
 8023846:	bf00      	nop
 8023848:	08038fdd 	.word	0x08038fdd
 802384c:	08038fee 	.word	0x08038fee

08023850 <__sflush_r>:
 8023850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023858:	0716      	lsls	r6, r2, #28
 802385a:	4605      	mov	r5, r0
 802385c:	460c      	mov	r4, r1
 802385e:	d454      	bmi.n	802390a <__sflush_r+0xba>
 8023860:	684b      	ldr	r3, [r1, #4]
 8023862:	2b00      	cmp	r3, #0
 8023864:	dc02      	bgt.n	802386c <__sflush_r+0x1c>
 8023866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023868:	2b00      	cmp	r3, #0
 802386a:	dd48      	ble.n	80238fe <__sflush_r+0xae>
 802386c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802386e:	2e00      	cmp	r6, #0
 8023870:	d045      	beq.n	80238fe <__sflush_r+0xae>
 8023872:	2300      	movs	r3, #0
 8023874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023878:	682f      	ldr	r7, [r5, #0]
 802387a:	6a21      	ldr	r1, [r4, #32]
 802387c:	602b      	str	r3, [r5, #0]
 802387e:	d030      	beq.n	80238e2 <__sflush_r+0x92>
 8023880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023882:	89a3      	ldrh	r3, [r4, #12]
 8023884:	0759      	lsls	r1, r3, #29
 8023886:	d505      	bpl.n	8023894 <__sflush_r+0x44>
 8023888:	6863      	ldr	r3, [r4, #4]
 802388a:	1ad2      	subs	r2, r2, r3
 802388c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802388e:	b10b      	cbz	r3, 8023894 <__sflush_r+0x44>
 8023890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023892:	1ad2      	subs	r2, r2, r3
 8023894:	2300      	movs	r3, #0
 8023896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023898:	6a21      	ldr	r1, [r4, #32]
 802389a:	4628      	mov	r0, r5
 802389c:	47b0      	blx	r6
 802389e:	1c43      	adds	r3, r0, #1
 80238a0:	89a3      	ldrh	r3, [r4, #12]
 80238a2:	d106      	bne.n	80238b2 <__sflush_r+0x62>
 80238a4:	6829      	ldr	r1, [r5, #0]
 80238a6:	291d      	cmp	r1, #29
 80238a8:	d82b      	bhi.n	8023902 <__sflush_r+0xb2>
 80238aa:	4a2a      	ldr	r2, [pc, #168]	@ (8023954 <__sflush_r+0x104>)
 80238ac:	410a      	asrs	r2, r1
 80238ae:	07d6      	lsls	r6, r2, #31
 80238b0:	d427      	bmi.n	8023902 <__sflush_r+0xb2>
 80238b2:	2200      	movs	r2, #0
 80238b4:	6062      	str	r2, [r4, #4]
 80238b6:	04d9      	lsls	r1, r3, #19
 80238b8:	6922      	ldr	r2, [r4, #16]
 80238ba:	6022      	str	r2, [r4, #0]
 80238bc:	d504      	bpl.n	80238c8 <__sflush_r+0x78>
 80238be:	1c42      	adds	r2, r0, #1
 80238c0:	d101      	bne.n	80238c6 <__sflush_r+0x76>
 80238c2:	682b      	ldr	r3, [r5, #0]
 80238c4:	b903      	cbnz	r3, 80238c8 <__sflush_r+0x78>
 80238c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80238c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80238ca:	602f      	str	r7, [r5, #0]
 80238cc:	b1b9      	cbz	r1, 80238fe <__sflush_r+0xae>
 80238ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80238d2:	4299      	cmp	r1, r3
 80238d4:	d002      	beq.n	80238dc <__sflush_r+0x8c>
 80238d6:	4628      	mov	r0, r5
 80238d8:	f7ff fa92 	bl	8022e00 <_free_r>
 80238dc:	2300      	movs	r3, #0
 80238de:	6363      	str	r3, [r4, #52]	@ 0x34
 80238e0:	e00d      	b.n	80238fe <__sflush_r+0xae>
 80238e2:	2301      	movs	r3, #1
 80238e4:	4628      	mov	r0, r5
 80238e6:	47b0      	blx	r6
 80238e8:	4602      	mov	r2, r0
 80238ea:	1c50      	adds	r0, r2, #1
 80238ec:	d1c9      	bne.n	8023882 <__sflush_r+0x32>
 80238ee:	682b      	ldr	r3, [r5, #0]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d0c6      	beq.n	8023882 <__sflush_r+0x32>
 80238f4:	2b1d      	cmp	r3, #29
 80238f6:	d001      	beq.n	80238fc <__sflush_r+0xac>
 80238f8:	2b16      	cmp	r3, #22
 80238fa:	d11e      	bne.n	802393a <__sflush_r+0xea>
 80238fc:	602f      	str	r7, [r5, #0]
 80238fe:	2000      	movs	r0, #0
 8023900:	e022      	b.n	8023948 <__sflush_r+0xf8>
 8023902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023906:	b21b      	sxth	r3, r3
 8023908:	e01b      	b.n	8023942 <__sflush_r+0xf2>
 802390a:	690f      	ldr	r7, [r1, #16]
 802390c:	2f00      	cmp	r7, #0
 802390e:	d0f6      	beq.n	80238fe <__sflush_r+0xae>
 8023910:	0793      	lsls	r3, r2, #30
 8023912:	680e      	ldr	r6, [r1, #0]
 8023914:	bf08      	it	eq
 8023916:	694b      	ldreq	r3, [r1, #20]
 8023918:	600f      	str	r7, [r1, #0]
 802391a:	bf18      	it	ne
 802391c:	2300      	movne	r3, #0
 802391e:	eba6 0807 	sub.w	r8, r6, r7
 8023922:	608b      	str	r3, [r1, #8]
 8023924:	f1b8 0f00 	cmp.w	r8, #0
 8023928:	dde9      	ble.n	80238fe <__sflush_r+0xae>
 802392a:	6a21      	ldr	r1, [r4, #32]
 802392c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802392e:	4643      	mov	r3, r8
 8023930:	463a      	mov	r2, r7
 8023932:	4628      	mov	r0, r5
 8023934:	47b0      	blx	r6
 8023936:	2800      	cmp	r0, #0
 8023938:	dc08      	bgt.n	802394c <__sflush_r+0xfc>
 802393a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802393e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023942:	81a3      	strh	r3, [r4, #12]
 8023944:	f04f 30ff 	mov.w	r0, #4294967295
 8023948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802394c:	4407      	add	r7, r0
 802394e:	eba8 0800 	sub.w	r8, r8, r0
 8023952:	e7e7      	b.n	8023924 <__sflush_r+0xd4>
 8023954:	dfbffffe 	.word	0xdfbffffe

08023958 <_fflush_r>:
 8023958:	b538      	push	{r3, r4, r5, lr}
 802395a:	690b      	ldr	r3, [r1, #16]
 802395c:	4605      	mov	r5, r0
 802395e:	460c      	mov	r4, r1
 8023960:	b913      	cbnz	r3, 8023968 <_fflush_r+0x10>
 8023962:	2500      	movs	r5, #0
 8023964:	4628      	mov	r0, r5
 8023966:	bd38      	pop	{r3, r4, r5, pc}
 8023968:	b118      	cbz	r0, 8023972 <_fflush_r+0x1a>
 802396a:	6a03      	ldr	r3, [r0, #32]
 802396c:	b90b      	cbnz	r3, 8023972 <_fflush_r+0x1a>
 802396e:	f7fe ffad 	bl	80228cc <__sinit>
 8023972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023976:	2b00      	cmp	r3, #0
 8023978:	d0f3      	beq.n	8023962 <_fflush_r+0xa>
 802397a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802397c:	07d0      	lsls	r0, r2, #31
 802397e:	d404      	bmi.n	802398a <_fflush_r+0x32>
 8023980:	0599      	lsls	r1, r3, #22
 8023982:	d402      	bmi.n	802398a <_fflush_r+0x32>
 8023984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023986:	f7ff fa04 	bl	8022d92 <__retarget_lock_acquire_recursive>
 802398a:	4628      	mov	r0, r5
 802398c:	4621      	mov	r1, r4
 802398e:	f7ff ff5f 	bl	8023850 <__sflush_r>
 8023992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023994:	07da      	lsls	r2, r3, #31
 8023996:	4605      	mov	r5, r0
 8023998:	d4e4      	bmi.n	8023964 <_fflush_r+0xc>
 802399a:	89a3      	ldrh	r3, [r4, #12]
 802399c:	059b      	lsls	r3, r3, #22
 802399e:	d4e1      	bmi.n	8023964 <_fflush_r+0xc>
 80239a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80239a2:	f7ff f9f7 	bl	8022d94 <__retarget_lock_release_recursive>
 80239a6:	e7dd      	b.n	8023964 <_fflush_r+0xc>

080239a8 <fiprintf>:
 80239a8:	b40e      	push	{r1, r2, r3}
 80239aa:	b503      	push	{r0, r1, lr}
 80239ac:	4601      	mov	r1, r0
 80239ae:	ab03      	add	r3, sp, #12
 80239b0:	4805      	ldr	r0, [pc, #20]	@ (80239c8 <fiprintf+0x20>)
 80239b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80239b6:	6800      	ldr	r0, [r0, #0]
 80239b8:	9301      	str	r3, [sp, #4]
 80239ba:	f7ff fca3 	bl	8023304 <_vfiprintf_r>
 80239be:	b002      	add	sp, #8
 80239c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80239c4:	b003      	add	sp, #12
 80239c6:	4770      	bx	lr
 80239c8:	20000050 	.word	0x20000050

080239cc <__swhatbuf_r>:
 80239cc:	b570      	push	{r4, r5, r6, lr}
 80239ce:	460c      	mov	r4, r1
 80239d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239d4:	2900      	cmp	r1, #0
 80239d6:	b096      	sub	sp, #88	@ 0x58
 80239d8:	4615      	mov	r5, r2
 80239da:	461e      	mov	r6, r3
 80239dc:	da0d      	bge.n	80239fa <__swhatbuf_r+0x2e>
 80239de:	89a3      	ldrh	r3, [r4, #12]
 80239e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80239e4:	f04f 0100 	mov.w	r1, #0
 80239e8:	bf14      	ite	ne
 80239ea:	2340      	movne	r3, #64	@ 0x40
 80239ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80239f0:	2000      	movs	r0, #0
 80239f2:	6031      	str	r1, [r6, #0]
 80239f4:	602b      	str	r3, [r5, #0]
 80239f6:	b016      	add	sp, #88	@ 0x58
 80239f8:	bd70      	pop	{r4, r5, r6, pc}
 80239fa:	466a      	mov	r2, sp
 80239fc:	f000 f848 	bl	8023a90 <_fstat_r>
 8023a00:	2800      	cmp	r0, #0
 8023a02:	dbec      	blt.n	80239de <__swhatbuf_r+0x12>
 8023a04:	9901      	ldr	r1, [sp, #4]
 8023a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023a0e:	4259      	negs	r1, r3
 8023a10:	4159      	adcs	r1, r3
 8023a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023a16:	e7eb      	b.n	80239f0 <__swhatbuf_r+0x24>

08023a18 <__smakebuf_r>:
 8023a18:	898b      	ldrh	r3, [r1, #12]
 8023a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023a1c:	079d      	lsls	r5, r3, #30
 8023a1e:	4606      	mov	r6, r0
 8023a20:	460c      	mov	r4, r1
 8023a22:	d507      	bpl.n	8023a34 <__smakebuf_r+0x1c>
 8023a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023a28:	6023      	str	r3, [r4, #0]
 8023a2a:	6123      	str	r3, [r4, #16]
 8023a2c:	2301      	movs	r3, #1
 8023a2e:	6163      	str	r3, [r4, #20]
 8023a30:	b003      	add	sp, #12
 8023a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a34:	ab01      	add	r3, sp, #4
 8023a36:	466a      	mov	r2, sp
 8023a38:	f7ff ffc8 	bl	80239cc <__swhatbuf_r>
 8023a3c:	9f00      	ldr	r7, [sp, #0]
 8023a3e:	4605      	mov	r5, r0
 8023a40:	4639      	mov	r1, r7
 8023a42:	4630      	mov	r0, r6
 8023a44:	f7ff fa50 	bl	8022ee8 <_malloc_r>
 8023a48:	b948      	cbnz	r0, 8023a5e <__smakebuf_r+0x46>
 8023a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a4e:	059a      	lsls	r2, r3, #22
 8023a50:	d4ee      	bmi.n	8023a30 <__smakebuf_r+0x18>
 8023a52:	f023 0303 	bic.w	r3, r3, #3
 8023a56:	f043 0302 	orr.w	r3, r3, #2
 8023a5a:	81a3      	strh	r3, [r4, #12]
 8023a5c:	e7e2      	b.n	8023a24 <__smakebuf_r+0xc>
 8023a5e:	89a3      	ldrh	r3, [r4, #12]
 8023a60:	6020      	str	r0, [r4, #0]
 8023a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023a66:	81a3      	strh	r3, [r4, #12]
 8023a68:	9b01      	ldr	r3, [sp, #4]
 8023a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023a6e:	b15b      	cbz	r3, 8023a88 <__smakebuf_r+0x70>
 8023a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a74:	4630      	mov	r0, r6
 8023a76:	f000 f81d 	bl	8023ab4 <_isatty_r>
 8023a7a:	b128      	cbz	r0, 8023a88 <__smakebuf_r+0x70>
 8023a7c:	89a3      	ldrh	r3, [r4, #12]
 8023a7e:	f023 0303 	bic.w	r3, r3, #3
 8023a82:	f043 0301 	orr.w	r3, r3, #1
 8023a86:	81a3      	strh	r3, [r4, #12]
 8023a88:	89a3      	ldrh	r3, [r4, #12]
 8023a8a:	431d      	orrs	r5, r3
 8023a8c:	81a5      	strh	r5, [r4, #12]
 8023a8e:	e7cf      	b.n	8023a30 <__smakebuf_r+0x18>

08023a90 <_fstat_r>:
 8023a90:	b538      	push	{r3, r4, r5, lr}
 8023a92:	4d07      	ldr	r5, [pc, #28]	@ (8023ab0 <_fstat_r+0x20>)
 8023a94:	2300      	movs	r3, #0
 8023a96:	4604      	mov	r4, r0
 8023a98:	4608      	mov	r0, r1
 8023a9a:	4611      	mov	r1, r2
 8023a9c:	602b      	str	r3, [r5, #0]
 8023a9e:	f7de fbd9 	bl	8002254 <_fstat>
 8023aa2:	1c43      	adds	r3, r0, #1
 8023aa4:	d102      	bne.n	8023aac <_fstat_r+0x1c>
 8023aa6:	682b      	ldr	r3, [r5, #0]
 8023aa8:	b103      	cbz	r3, 8023aac <_fstat_r+0x1c>
 8023aaa:	6023      	str	r3, [r4, #0]
 8023aac:	bd38      	pop	{r3, r4, r5, pc}
 8023aae:	bf00      	nop
 8023ab0:	20010078 	.word	0x20010078

08023ab4 <_isatty_r>:
 8023ab4:	b538      	push	{r3, r4, r5, lr}
 8023ab6:	4d06      	ldr	r5, [pc, #24]	@ (8023ad0 <_isatty_r+0x1c>)
 8023ab8:	2300      	movs	r3, #0
 8023aba:	4604      	mov	r4, r0
 8023abc:	4608      	mov	r0, r1
 8023abe:	602b      	str	r3, [r5, #0]
 8023ac0:	f7de fbd8 	bl	8002274 <_isatty>
 8023ac4:	1c43      	adds	r3, r0, #1
 8023ac6:	d102      	bne.n	8023ace <_isatty_r+0x1a>
 8023ac8:	682b      	ldr	r3, [r5, #0]
 8023aca:	b103      	cbz	r3, 8023ace <_isatty_r+0x1a>
 8023acc:	6023      	str	r3, [r4, #0]
 8023ace:	bd38      	pop	{r3, r4, r5, pc}
 8023ad0:	20010078 	.word	0x20010078

08023ad4 <_sbrk_r>:
 8023ad4:	b538      	push	{r3, r4, r5, lr}
 8023ad6:	4d06      	ldr	r5, [pc, #24]	@ (8023af0 <_sbrk_r+0x1c>)
 8023ad8:	2300      	movs	r3, #0
 8023ada:	4604      	mov	r4, r0
 8023adc:	4608      	mov	r0, r1
 8023ade:	602b      	str	r3, [r5, #0]
 8023ae0:	f7de fbe0 	bl	80022a4 <_sbrk>
 8023ae4:	1c43      	adds	r3, r0, #1
 8023ae6:	d102      	bne.n	8023aee <_sbrk_r+0x1a>
 8023ae8:	682b      	ldr	r3, [r5, #0]
 8023aea:	b103      	cbz	r3, 8023aee <_sbrk_r+0x1a>
 8023aec:	6023      	str	r3, [r4, #0]
 8023aee:	bd38      	pop	{r3, r4, r5, pc}
 8023af0:	20010078 	.word	0x20010078

08023af4 <abort>:
 8023af4:	b508      	push	{r3, lr}
 8023af6:	2006      	movs	r0, #6
 8023af8:	f000 f85a 	bl	8023bb0 <raise>
 8023afc:	2001      	movs	r0, #1
 8023afe:	f7de fb75 	bl	80021ec <_exit>

08023b02 <_realloc_r>:
 8023b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b06:	4680      	mov	r8, r0
 8023b08:	4615      	mov	r5, r2
 8023b0a:	460c      	mov	r4, r1
 8023b0c:	b921      	cbnz	r1, 8023b18 <_realloc_r+0x16>
 8023b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023b12:	4611      	mov	r1, r2
 8023b14:	f7ff b9e8 	b.w	8022ee8 <_malloc_r>
 8023b18:	b92a      	cbnz	r2, 8023b26 <_realloc_r+0x24>
 8023b1a:	f7ff f971 	bl	8022e00 <_free_r>
 8023b1e:	2400      	movs	r4, #0
 8023b20:	4620      	mov	r0, r4
 8023b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b26:	f000 f85f 	bl	8023be8 <_malloc_usable_size_r>
 8023b2a:	4285      	cmp	r5, r0
 8023b2c:	4606      	mov	r6, r0
 8023b2e:	d802      	bhi.n	8023b36 <_realloc_r+0x34>
 8023b30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8023b34:	d8f4      	bhi.n	8023b20 <_realloc_r+0x1e>
 8023b36:	4629      	mov	r1, r5
 8023b38:	4640      	mov	r0, r8
 8023b3a:	f7ff f9d5 	bl	8022ee8 <_malloc_r>
 8023b3e:	4607      	mov	r7, r0
 8023b40:	2800      	cmp	r0, #0
 8023b42:	d0ec      	beq.n	8023b1e <_realloc_r+0x1c>
 8023b44:	42b5      	cmp	r5, r6
 8023b46:	462a      	mov	r2, r5
 8023b48:	4621      	mov	r1, r4
 8023b4a:	bf28      	it	cs
 8023b4c:	4632      	movcs	r2, r6
 8023b4e:	f7ff f92a 	bl	8022da6 <memcpy>
 8023b52:	4621      	mov	r1, r4
 8023b54:	4640      	mov	r0, r8
 8023b56:	f7ff f953 	bl	8022e00 <_free_r>
 8023b5a:	463c      	mov	r4, r7
 8023b5c:	e7e0      	b.n	8023b20 <_realloc_r+0x1e>

08023b5e <_raise_r>:
 8023b5e:	291f      	cmp	r1, #31
 8023b60:	b538      	push	{r3, r4, r5, lr}
 8023b62:	4605      	mov	r5, r0
 8023b64:	460c      	mov	r4, r1
 8023b66:	d904      	bls.n	8023b72 <_raise_r+0x14>
 8023b68:	2316      	movs	r3, #22
 8023b6a:	6003      	str	r3, [r0, #0]
 8023b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8023b70:	bd38      	pop	{r3, r4, r5, pc}
 8023b72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023b74:	b112      	cbz	r2, 8023b7c <_raise_r+0x1e>
 8023b76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023b7a:	b94b      	cbnz	r3, 8023b90 <_raise_r+0x32>
 8023b7c:	4628      	mov	r0, r5
 8023b7e:	f000 f831 	bl	8023be4 <_getpid_r>
 8023b82:	4622      	mov	r2, r4
 8023b84:	4601      	mov	r1, r0
 8023b86:	4628      	mov	r0, r5
 8023b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023b8c:	f000 b818 	b.w	8023bc0 <_kill_r>
 8023b90:	2b01      	cmp	r3, #1
 8023b92:	d00a      	beq.n	8023baa <_raise_r+0x4c>
 8023b94:	1c59      	adds	r1, r3, #1
 8023b96:	d103      	bne.n	8023ba0 <_raise_r+0x42>
 8023b98:	2316      	movs	r3, #22
 8023b9a:	6003      	str	r3, [r0, #0]
 8023b9c:	2001      	movs	r0, #1
 8023b9e:	e7e7      	b.n	8023b70 <_raise_r+0x12>
 8023ba0:	2100      	movs	r1, #0
 8023ba2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023ba6:	4620      	mov	r0, r4
 8023ba8:	4798      	blx	r3
 8023baa:	2000      	movs	r0, #0
 8023bac:	e7e0      	b.n	8023b70 <_raise_r+0x12>
	...

08023bb0 <raise>:
 8023bb0:	4b02      	ldr	r3, [pc, #8]	@ (8023bbc <raise+0xc>)
 8023bb2:	4601      	mov	r1, r0
 8023bb4:	6818      	ldr	r0, [r3, #0]
 8023bb6:	f7ff bfd2 	b.w	8023b5e <_raise_r>
 8023bba:	bf00      	nop
 8023bbc:	20000050 	.word	0x20000050

08023bc0 <_kill_r>:
 8023bc0:	b538      	push	{r3, r4, r5, lr}
 8023bc2:	4d07      	ldr	r5, [pc, #28]	@ (8023be0 <_kill_r+0x20>)
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	4604      	mov	r4, r0
 8023bc8:	4608      	mov	r0, r1
 8023bca:	4611      	mov	r1, r2
 8023bcc:	602b      	str	r3, [r5, #0]
 8023bce:	f7de fafd 	bl	80021cc <_kill>
 8023bd2:	1c43      	adds	r3, r0, #1
 8023bd4:	d102      	bne.n	8023bdc <_kill_r+0x1c>
 8023bd6:	682b      	ldr	r3, [r5, #0]
 8023bd8:	b103      	cbz	r3, 8023bdc <_kill_r+0x1c>
 8023bda:	6023      	str	r3, [r4, #0]
 8023bdc:	bd38      	pop	{r3, r4, r5, pc}
 8023bde:	bf00      	nop
 8023be0:	20010078 	.word	0x20010078

08023be4 <_getpid_r>:
 8023be4:	f7de baea 	b.w	80021bc <_getpid>

08023be8 <_malloc_usable_size_r>:
 8023be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023bec:	1f18      	subs	r0, r3, #4
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	bfbc      	itt	lt
 8023bf2:	580b      	ldrlt	r3, [r1, r0]
 8023bf4:	18c0      	addlt	r0, r0, r3
 8023bf6:	4770      	bx	lr

08023bf8 <_init>:
 8023bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bfa:	bf00      	nop
 8023bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bfe:	bc08      	pop	{r3}
 8023c00:	469e      	mov	lr, r3
 8023c02:	4770      	bx	lr

08023c04 <_fini>:
 8023c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c06:	bf00      	nop
 8023c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023c0a:	bc08      	pop	{r3}
 8023c0c:	469e      	mov	lr, r3
 8023c0e:	4770      	bx	lr
